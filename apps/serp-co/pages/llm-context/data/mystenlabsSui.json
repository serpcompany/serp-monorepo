[
  {
    "owner": "mystenlabs",
    "repo": "sui",
    "content": "TITLE: Implementing Escrow Mutations in TypeScript\nDESCRIPTION: Defines mutation hooks for creating and canceling escrows using the Sui blockchain. Includes useCreateEscrowMutation and useCancelEscrowMutation hooks that handle transaction building and execution.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CONSTANTS, QueryKey } from \"@/constants\";\nimport { useTransactionExecution } from \"@/hooks/useTransactionExecution\";\nimport { ApiEscrowObject, ApiLockedObject } from \"@/types/types\";\nimport { useCurrentAccount } from \"@mysten/dapp-kit\";\nimport { SuiObjectData } from \"@mysten/sui/client\";\nimport { Transaction } from \"@mysten/sui/transactions\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\nexport function useCreateEscrowMutation() {\n  const currentAccount = useCurrentAccount();\n  const executeTransaction = useTransactionExecution();\n\n  return useMutation({\n    mutationFn: async ({\n      object,\n      locked,\n    }: {\n      object: SuiObjectData;\n      locked: ApiLockedObject;\n    }) => {\n      if (!currentAccount?.address)\n        throw new Error(\"You need to connect your wallet!\");\n\n      const txb = new Transaction();\n      txb.moveCall({\n        target: `${CONSTANTS.escrowContract.packageId}::shared::create`,\n        arguments: [\n          txb.object(object.objectId!),\n          txb.pure.id(locked.keyId),\n          txb.pure.address(locked.creator!),\n        ],\n        typeArguments: [object.type!],\n      });\n\n      return executeTransaction(txb);\n    },\n  });\n}\n\nexport function useCancelEscrowMutation() {\n  const currentAccount = useCurrentAccount();\n  const executeTransaction = useTransactionExecution();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      escrow,\n      suiObject,\n    }: {\n      escrow: ApiEscrowObject;\n      suiObject: SuiObjectData;\n    }) => {\n      if (!currentAccount?.address)\n        throw new Error(\"You need to connect your wallet!\");\n      const txb = new Transaction();\n\n      const item = txb.moveCall({\n        target: `${CONSTANTS.escrowContract.packageId}::shared::return_to_sender`,\n        arguments: [txb.object(escrow.objectId)],\n        typeArguments: [suiObject?.type!],\n      });\n\n      txb.transferObjects([item], txb.pure.address(currentAccount?.address!));\n\n      return executeTransaction(txb);\n    },\n\n    onSuccess: () => {\n      setTimeout(() => {\n        queryClient.invalidateQueries({ queryKey: [QueryKey.Escrow] });\n      }, 1_000);\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: UpgradeCap Struct Definition in Sui Move\nDESCRIPTION: This Move struct defines the UpgradeCap object, which is central to coordinating package upgrades in Sui. It contains information about whether an upgrade is in progress and the package's upgrade policy. The owner of this object has permission to change compatibility requirements, authorize upgrades, and make the package immutable.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule sui::package {\n    /// Capability that grants permission to upgrade a package, or change\n    /// the rules for future upgrades.\n    struct UpgradeCap has key, store {\n        id: UID,\n        package: ID,\n        policy: u8,         // one of UpgradePolicy\n        is_upgrading: bool, // true if a transaction is in-flight to upgrade the package\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Wallet Struct in Move\nDESCRIPTION: This snippet defines a Wallet struct in a Move module, encapsulating its data and providing key attributes. The struct has a unique identifier and an amount, emphasizing immutability and storage capabilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/conventions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nmodule conventions::wallet;\n\npublic struct Wallet has key, store {\n    id: UID,\n    amount: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Sui via Cargo\nDESCRIPTION: Command to upgrade an existing Sui installation to the latest version using Cargo.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --locked --git https://github.com/MystenLabs/sui.git --branch testnet sui --features tracing\n```\n\n----------------------------------------\n\nTITLE: Creating New Move Package with Sui CLI\nDESCRIPTION: Command to create a new empty Move package using the Sui CLI tool\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/write-package.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move new my_first_package\n```\n\n----------------------------------------\n\nTITLE: Requesting SUI Tokens via cURL\nDESCRIPTION: Makes a POST request to the Sui faucet server to request test tokens. The request includes a recipient address and uses the FixedAmountRequest format.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/get-coins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://faucet.devnet.sui.io/v1/gas' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"FixedAmountRequest\": {\n        \"recipient\": \"<YOUR SUI ADDRESS>\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather Oracle Structures and Initialization in Sui Move\nDESCRIPTION: Defines key structures for the weather oracle including AdminCap, WEATHER, WeatherOracle, and CityWeatherOracle. Also includes the init function for module initialization.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/weather-oracle.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Define a capability for the admin of the oracle.\npublic struct AdminCap has key, store { id: UID }\n\n/// // Define a one-time witness to create the `Publisher` of the oracle.\npublic struct WEATHER has drop {}\n\n// Define a struct for the weather oracle\npublic struct WeatherOracle has key {\n    id: UID,\n    /// The address of the oracle.\n    address: address,\n    /// The name of the oracle.\n    name: String,\n    /// The description of the oracle.\n    description: String,\n}\n\npublic struct CityWeatherOracle has key, store {\n    id: UID,\n    geoname_id: u32, // The unique identifier of the city\n    name: String, // The name of the city\n    country: String, // The country of the city\n    latitude: u32, // The latitude of the city in degrees\n    positive_latitude: bool, // Whether the latitude is positive (north) or negative (south)\n    longitude: u32, // The longitude of the city in degrees\n    positive_longitude: bool, // Whether the longitude is positive (east) or negative (west)\n    weather_id: u16, // The weather condition code\n    temp: u32, // The temperature in kelvin\n    pressure: u32, // The atmospheric pressure in hPa\n    humidity: u8, // The humidity percentage\n    visibility: u16, // The visibility in meters\n    wind_speed: u16, // The wind speed in meters per second\n    wind_deg: u16, // The wind direction in degrees\n    wind_gust: Option<u16>, // The wind gust in meters per second (optional)\n    clouds: u8, // The cloudiness percentage\n    dt: u32 // The timestamp of the weather update in seconds since epoch\n}\n\nfun init(otw: WEATHER, ctx: &mut TxContext) {\n    package::claim_and_keep(otw, ctx); // Claim ownership of the one-time witness and keep it\n\n    let cap = AdminCap { id: object::new(ctx) }; // Create a new admin capability object\n    transfer::share_object(WeatherOracle {\n        id: object::new(ctx),\n        address: ctx.sender(),\n        name: b\"SuiMeteo\".to_string(),\n        description: b\"A weather oracle.\".to_string(),\n    });\n    transfer::public_transfer(cap, ctx.sender()); // Transfer the admin capability to the sender.\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer Object Ownership in Move\nDESCRIPTION: These functions, defined in the transfer module, are used to transfer ownership of an object to a specified address in Sui. The `transfer` function is used for custom transfer policies, while `public_transfer` is used for objects with the `store` capability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/address-owned.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic fun transfer<T: key>(obj: T, recipient: address)\npublic fun public_transfer<T: key + store>(obj: T, recipient: address)\n```\n\n----------------------------------------\n\nTITLE: Updating Rust to Latest Stable Version\nDESCRIPTION: Command to update Rust to the latest stable version before installing Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ rustup update stable\n```\n\n----------------------------------------\n\nTITLE: Initializing a Transaction in Sui TypeScript SDK\nDESCRIPTION: This snippet shows how to import the Transaction class and create a new transaction object. This is the first step in constructing a Programmable Transaction Block (PTB).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Transaction } from '@mysten/sui/transactions';\n\nconst tx = new Transaction();\n```\n\n----------------------------------------\n\nTITLE: Basic Function Declaration in Move\nDESCRIPTION: Example of a simple function declaration with type parameters, arguments and return value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nfun foo<T1, T2>(x: u64, y: T1, z: T2): (T2, T1, u64) { (z, y, x) }\n```\n\n----------------------------------------\n\nTITLE: Implementing reCAPTCHA Module Structure and Imports in Sui Move\nDESCRIPTION: Defines the module structure, imports necessary Sui modules, and sets up error codes and constants for the reCAPTCHA implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/recaptcha.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nmodule recaptcha::recaptcha {\n    // Import the vector module for manipulating vectors.\n    use std::vector;\n\n    // Import the clock module for getting the current time.\n    use sui::clock::Clock;\n    // Import the dynamic_field module for adding custom fields to objects.\n    use sui::dynamic_field as df;\n    // Import the ed25519 module for verifying signatures.\n    use sui::ed25519::ed25519_verify;\n    // Import the event module for emitting events.\n    use sui::event::emit;\n    // Import the math module for performing mathematical operations.\n    use sui::math;\n    // Import the object module for creating and manipulating objects.\n    use sui::object::{Self, UID};\n    // Import the transfer module for sharing and transferring objects.\n    use sui::transfer;\n    // Import the tx_context module for accessing transaction information.\n    use sui::tx_context::{sender, TxContext};\n\n    /// Error code for transactions that violate the cooldown period.\n    const EVerificationExpired: u64 = 0;\n    /// Error code for invalid signatures.\n    const EInvalidSignature: u64 = 1;\n    /// Error code for senders that are not yet verified.\n    const ENotYetVerified: u64 = 2;\n\n    // Define a constant for the duration of the time window in milliseconds\n    const TIME_WINDOW: u64 = 60_000;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Service Structure in Move\nDESCRIPTION: Implements the Service struct to manage service details, rewards, and reviews, including fields for reward pool and top reviews.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nconst MAX_REVIEWERS_TO_REWARD: u64 = 10;\n\n/// Represents a service\npublic struct Service has key, store {\n    id: UID,\n    reward_pool: Balance<SUI>,\n    reward: u64,\n    top_reviews: vector<ID>,\n    reviews: ObjectTable<ID, Review>,\n    overall_rate: u64,\n    name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Currency in Sui Blockchain\nDESCRIPTION: This function creates a new currency type and returns the TreasuryCap for it to the caller. It can only be called with a one-time-witness type, ensuring there's only one TreasuryCap per currency type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_18\n\nLANGUAGE: move\nCODE:\n```\npublic fun create_currency<T: drop>(\n    witness: T,\n    decimals: u8,\n    symbol: vector<u8>,\n    name: vector<u8>,\n    description: vector<u8>,\n    icon_url: Option<Url>,\n    ctx: &mut TxContext,\n): (TreasuryCap<T>, CoinMetadata<T>) {\n    // Make sure there's only one instance of the type T\n    assert!(sui::types::is_one_time_witness(&witness), EBadWitness);\n    (\n        TreasuryCap {\n            id: object::new(ctx),\n            total_supply: balance::create_supply(witness),\n        },\n        CoinMetadata {\n            id: object::new(ctx),\n            decimals,\n            name: string::utf8(name),\n            symbol: ascii::string(symbol),\n            description: string::utf8(description),\n            icon_url,\n        },\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Key Pairs and Signing Transactions in Sui TypeScript SDK\nDESCRIPTION: This code demonstrates various ways to instantiate key pairs (Ed25519, Secp256k1, Secp256r1) in TypeScript, derive public keys and addresses, sign transactions, and execute them using the Sui TypeScript SDK.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/sign-and-send-txn.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromHex } from '@mysten/bcs';\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { type Keypair } from '@mysten/sui/cryptography';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { Secp256k1Keypair } from '@mysten/sui/keypairs/secp256k1';\nimport { Secp256r1Keypair } from '@mysten/sui/keypairs/secp256r1';\nimport { Transaction } from '@mysten/sui/transactions';\n\nconst kp_rand_0 = new Ed25519Keypair();\nconst kp_rand_1 = new Secp256k1Keypair();\nconst kp_rand_2 = new Secp256r1Keypair();\n\nconst kp_import_0 = Ed25519Keypair.fromSecretKey(\n\tfromHex('0xd463e11c7915945e86ac2b72d88b8190cfad8ff7b48e7eb892c275a5cf0a3e82'),\n);\nconst kp_import_1 = Secp256k1Keypair.fromSecretKey(\n\tfromHex('0xd463e11c7915945e86ac2b72d88b8190cfad8ff7b48e7eb892c275a5cf0a3e82'),\n);\nconst kp_import_2 = Secp256r1Keypair.fromSecretKey(\n\tfromHex('0xd463e11c7915945e86ac2b72d88b8190cfad8ff7b48e7eb892c275a5cf0a3e82'),\n);\n\n// $MNEMONICS refers to 12/15/18/21/24 words from the wordlist, e.g. \"retire skin goose will hurry this field stadium drastic label husband venture cruel toe wire\". Refer to [Keys and Addresses](/concepts/cryptography/transaction-auth/keys-addresses.mdx) for more.\nconst kp_derive_0 = Ed25519Keypair.deriveKeypair('$MNEMONICS');\nconst kp_derive_1 = Secp256k1Keypair.deriveKeypair('$MNEMONICS');\nconst kp_derive_2 = Secp256r1Keypair.deriveKeypair('$MNEMONICS');\n\nconst kp_derive_with_path_0 = Ed25519Keypair.deriveKeypair('$MNEMONICS', \"m/44'/784'/1'/0'/0'\");\nconst kp_derive_with_path_1 = Secp256k1Keypair.deriveKeypair('$MNEMONICS', \"m/54'/784'/1'/0/0\");\nconst kp_derive_with_path_2 = Secp256r1Keypair.deriveKeypair('$MNEMONICS', \"m/74'/784'/1'/0/0\");\n\n// replace `kp_rand_0` with the variable names above.\nconst pk = kp_rand_0.getPublicKey();\nconst sender = pk.toSuiAddress();\n\n// create an example transaction block.\nconst txb = new Transaction();\ntxb.setSender(sender);\ntxb.setGasPrice(5);\ntxb.setGasBudget(100);\nconst bytes = await txb.build();\nconst serializedSignature = (await keypair.signTransaction(bytes)).signature;\n\n// verify the signature locally\nexpect(await keypair.getPublicKey().verifyTransaction(bytes, serializedSignature)).toEqual(true);\n\n// define sui client for the desired network.\nconst client = new SuiClient({ url: getFullnodeUrl('testnet') });\n\n// execute transaction.\nlet res = client.executeTransactionBlock({\n\ttransactionBlock: bytes,\n\tsignature: serializedSignature,\n});\nconsole.log(res);\n```\n\n----------------------------------------\n\nTITLE: Vector Core Functions - Move\nDESCRIPTION: Implements core vector operations including empty vector creation, length checking, borrowing elements, and push/pop operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun empty<Element>(): vector<Element>;\npublic native fun length<Element>(v: &vector<Element>): u64;\npublic native fun borrow<Element>(v: &vector<Element>, i: u64): &Element;\npublic native fun push_back<Element>(v: &mut vector<Element>, e: Element);\npublic native fun borrow_mut<Element>(v: &mut vector<Element>, i: u64): &mut Element;\npublic native fun pop_back<Element>(v: &mut vector<Element>): Element;\npublic native fun destroy_empty<Element>(v: vector<Element>);\npublic native fun swap<Element>(v: &mut vector<Element>, i: u64, j: u64);\n```\n\n----------------------------------------\n\nTITLE: CRUD Function Naming Conventions\nDESCRIPTION: This snippet outlines the standard naming conventions for CRUD functions in Move. It details the naming styles for create, read, update, and delete operations to enhance code clarity and comprehension.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/conventions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\n// Standard CRUD function names:\n// - new: Creates an empty object.\n// - empty: Creates an empty struct.\n// - create: Creates an initialized object or struct.\n// - add: Adds a value.\n// - remove: Removes a value.\n// - exists: Checks if a key exists.\n// - contains: Checks if a collection contains a value.\n```\n\n----------------------------------------\n\nTITLE: Publishing a Sui Package\nDESCRIPTION: Command to publish a Move package to the Sui network using the Sui CLI with a specified gas budget.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/publish.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsui client publish --gas-budget 5000000\n```\n\n----------------------------------------\n\nTITLE: Defining IntentMessage and Intent Structs in Rust\nDESCRIPTION: This Rust snippet defines the primary data structures for intent signing: IntentMessage and Intent. IntentMessage combines an Intent struct, which includes IntentScope, IntentVersion, and AppId, with the message data. This allows for consistent, compact signing across different scope versions and applications.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/transaction-auth/intent-signing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub struct IntentMessage<T> {\n  pub intent: Intent,\n  pub value: T,\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\npub struct Intent {\n  scope: IntentScope,\n  version: IntentVersion,\n  app_id: AppId,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dice Game with Randomness in Sui Move\nDESCRIPTION: This snippet demonstrates a dice game implementation using randomness. It includes a play_dice function that generates a random number and compares it to the player's guess.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/randomness-onchain.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule games::dice {\n  ...\n  public enum Ticket has drop {\n    Lost,\n    Won,\n  }\n\n  public fun is_winner(t: &Ticket): bool {\n    match (t) {\n      Ticket::Won => true,\n      Ticket::Lost => false,\n    }\n  }\n\n  /// If you guess correctly the output, then you get a GuessedCorrectly object.\n  /// Otherwise you get nothing.\n  public fun play_dice(guess: u8, fee: Coin<SUI>, r: &Random, ctx: &mut TxContext): Ticket {\n    // Pay for the turn\n    assert!(coin::value(&fee) == 1000000, EInvalidAmount);\n    transfer::public_transfer(fee, CREATOR_ADDRESS);\n\n    // Roll the dice\n    let mut generator = new_generator(r, ctx);\n    if (guess == generator.generate_u8_in_range(1, 6)) {\n      Ticket::Won\n    } else {\n      Ticket::Lost\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Complex Transaction in Sui\nDESCRIPTION: Example demonstrating a Programmable Transaction Block (PTB) that performs multiple operations: splitting coins, buying items from marketplace, and transferring objects to different addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{\n  inputs: [\n    Pure(/* @0x808 BCS bytes */ ...),\n    Object(SharedObject { /* Marketplace shared object */ id: market_id, ... }),\n    Pure(/* 100u64 BCS bytes */ ...),\n  ]\n  commands: [\n    SplitCoins(GasCoin, [Input(2)]),\n    MoveCall(\"some_package\", \"some_marketplace\", \"buy_two\", [], [Input(1), NestedResult(0, 0)]),\n    TransferObjects([GasCoin, NestedResult(1, 0)], Input(0)),\n    MoveCall(\"sui\", \"tx_context\", \"sender\", [], []),\n    TransferObjects([NestedResult(1, 1)], NestedResult(3, 0)),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bridge Structs in Move\nDESCRIPTION: Defines the main Bridge struct and its inner state BridgeInner. The Bridge struct contains a versioned inner state to allow for upgrades. BridgeInner contains fields for managing the bridge committee, treasury, token transfer records, and other state.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Bridge has key {\n    id: sui::object::UID,\n    inner: sui::versioned::Versioned\n}\n\npublic struct BridgeInner has store {\n    bridge_version: u64,\n    message_version: u8,\n    chain_id: u8,\n    sequence_nums: sui::vec_map::VecMap<u8, u64>,\n    committee: bridge::committee::BridgeCommittee,\n    treasury: bridge::treasury::BridgeTreasury,\n    token_transfer_records: sui::linked_table::LinkedTable<bridge::message::BridgeMessageKey, bridge::bridge::BridgeRecord>,\n    limiter: bridge::limiter::TransferLimiter,\n    paused: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Purchasing an Asset from Sui Marketplace in TypeScript\nDESCRIPTION: Code snippet from purchaseItem.ts showing how to configure a purchase transaction. The buyer must specify the item type, ID, price, and seller's kiosk ID to complete the purchase, executed with 'npm run call purchase'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_39\n\nLANGUAGE: rust\nCODE:\n```\nconst item = {\n      itemType: tokenizedAssetType,\n      itemId: tokenized_asset ?? tokenizedAssetID,\n      price: \"100000\",\n      sellerKiosk: targetKioskId,\n  };\n```\n\n----------------------------------------\n\nTITLE: Transaction Variables Format for Sui GraphQL Execution\nDESCRIPTION: JSON structure for the variables required by the executeTransactionBlock mutation. Contains the serialized transaction bytes and an array of signatures generated from the Sui keytool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/graphql-rpc.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tx\": \"AAACACAZXApmrHgzTs3FGDyXWka+wmMCy2IwOdKLmTWHb5PnFQEASlCnLAw4qfzLF3unH9or5/L7YpOlReaSEWfoEwhTqpavSxAAAAAAACCUFUCOn8ljIxcG9O+CA1bzqjunqr4DLDSzSoNCkUvu2AEBAQEBAAEAALNQHmLi4jgC5MuwwmiMvZEeV5kuyh+waCS60voE7fpzAa3v/tOFuqDvQ+bjBpKTfjyL+6yIg+5eC3dKReVwghH/rksQAAAAAAAgxtZtKhXTr1zeFAo1JzEqVKn9J1H74ddbCJNVZGo2I1izUB5i4uI4AuTLsMJojL2RHleZLsofsGgkutL6BO36c+gDAAAAAAAAQEIPAAAAAAAA\",\n  \"sigs\": [\n    \"AB4ZihXxUMSs9Ju5Cstuuf/hvbTvvycuRk2TMuagLYNJgQuAeXmKyJF9DAXUtL8spIsHrDQgemn4NmojcNl8HQ3JFqhnaTC8gMX4fy/rGgqgL6CDcbikawUUjC4zlkflwg==\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sword Using a Forge in Move\nDESCRIPTION: Function that creates a Sword object using a Forge capability object, incrementing the sword count and transferring the new sword to a recipient.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/build-test.mdx#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun new_sword(\n    forge: &mut Forge, magic: u64, strength: u64, recipient: address, ctx: &mut TxContext\n) {\n    // create a sword\n    let sword = Sword {\n        id: object::new(ctx),\n        magic: magic,\n        strength: strength,\n    };\n    // increment the sword creation counter\n    forge.swords_created = forge.swords_created + 1;\n    // transfer the sword\n    transfer::transfer(sword, recipient);\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Tick Level Destruction\nDESCRIPTION: Internal function to clean up empty tick level data structures by destroying the linked table of orders.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\nfun destroy_empty_level(level: TickLevel) {\n    let TickLevel {\n        price: _,\n        open_orders: orders,\n    } = level;\n    linked_table::destroy_empty(orders);\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Elements Matching Predicate\nDESCRIPTION: A macro function that counts the number of elements in a vector that satisfy a given predicate. Iterates through the vector and increments a counter for matching elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun count<$T>($v: &vector<$T>, $f: |&$T| -> bool): u64\n```\n\n----------------------------------------\n\nTITLE: Printing Variable Values in Move\nDESCRIPTION: Use the debug::print function to output variable values during contract execution. This can be used for both value and reference types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/debug.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\ndebug::print(&v);\n```\n\nLANGUAGE: move\nCODE:\n```\ndebug::print(v);\n```\n\n----------------------------------------\n\nTITLE: Borrowing object's UID\nDESCRIPTION: Gets the UID for a Sui object. This is an internal function made safe by Sui's bytecode verifier which ensures every struct with the 'key' ability has a UID field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_20\n\nLANGUAGE: move\nCODE:\n```\nnative fun borrow_uid<T: key>(obj: &T): &UID;\n```\n\n----------------------------------------\n\nTITLE: Non-Entry Version of Adding Stake in Move\nDESCRIPTION: This is the non-entry version of request_add_stake, which returns the StakedSui object instead of transferring it. It takes the same parameters as the entry version.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun request_add_stake_non_entry(\n    wrapper: &mut SuiSystemState,\n    stake: Coin<SUI>,\n    validator_address: address,\n    ctx: &mut TxContext,\n): StakedSui {\n    wrapper.load_system_state_mut().request_add_stake(stake, validator_address, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Day of Week Upgrade Policy in Move\nDESCRIPTION: Defines the structure and core functions for a custom upgrade policy that only allows upgrades on a specific day of the week. Includes error handling, day calculation, and upgrade authorization logic.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nmodule policy::day_of_week;\n\nuse sui::package;\n\n/// Day is not a week day (number in range 0 <= day < 7).\nconst ENotWeekDay: u64 = 1;\n\npublic struct UpgradeCap has key, store {\n    id: UID,\n    cap: package::UpgradeCap,\n    day: u8,\n}\n\npublic fun new_policy(\n    cap: package::UpgradeCap,\n    day: u8,\n    ctx: &mut TxContext,\n): UpgradeCap {\n    assert!(day < 7, ENotWeekDay);\n    UpgradeCap { id: object::new(ctx), cap, day }\n}\n```\n\n----------------------------------------\n\nTITLE: Locking Item in Kiosk in Move\nDESCRIPTION: Places and locks an item in the Kiosk, requiring a TransferPolicy. Locked items can only be listed for sale.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\npublic fun lock<T: key + store>(\n    self: &mut Kiosk,\n    cap: &KioskOwnerCap,\n    _policy: &TransferPolicy<T>,\n    item: T,\n) {\n    assert!(self.has_access(cap), ENotOwner);\n    self.lock_internal(item)\n}\n```\n\n----------------------------------------\n\nTITLE: Module Initializer with One-Time Witness for Sui\nDESCRIPTION: Implementation of an init function that creates a singleton Forge object during module publication, using the module's one-time witness pattern.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/build-test.mdx#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\nfun init(witness: EXAMPLE, ctx: &mut TxContext) {\n    let admin = tx_context::sender(ctx);\n    let cap = Forge {\n        id: object::new(ctx),\n        swords_created: 0,\n    };\n    transfer::transfer(cap, admin);\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing Transactions in Sui Wallet Integration\nDESCRIPTION: Demonstrates how to serialize a Transaction object in a dApp, pass it through the Wallet Standard interface, and deserialize it within the wallet context. This approach allows wallets to handle gas logic and coin selection.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Within a dApp\nconst tx = new Transaction();\nwallet.signTransaction({ transaction: tx });\n\n// Your wallet standard code:\nfunction handleSignTransaction(input) {\n\tsendToWalletContext({ transaction: input.transaction.serialize() });\n}\n\n// Within your wallet context:\nfunction handleSignRequest(input) {\n\tconst userTx = Transaction.from(input.transaction);\n}\n```\n\n----------------------------------------\n\nTITLE: New Transfer Policy Registration in Move\nDESCRIPTION: Implements the new function to register a new type within the Kiosk system, producing a TransferPolicy and TransferPolicyCap. Requires a Publisher and a mutable transaction context as parameters for execution.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new<T>(pub: &sui::package::Publisher, ctx: &mut sui::tx_context::TxContext): (sui::transfer_policy::TransferPolicy<T>, sui::transfer_policy::TransferPolicyCap<T>)\n```\n\n----------------------------------------\n\nTITLE: Constructing Programmable Transactions in Sui Rust SDK\nDESCRIPTION: This code shows how to construct a programmable transaction in Rust, setting up transaction data with proper gas budget and price using the Sui Rust SDK.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/sign-and-send-txn.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n    // construct an example programmable transaction.\n    let pt = {\n        let mut builder = ProgrammableTransactionBuilder::new();\n        builder.pay_sui(vec![sender], vec![1])?;\n        builder.finish()\n    };\n\n    let gas_budget = 5_000_000;\n    let gas_price = sui_client.read_api().get_reference_gas_price().await?;\n\n    // create the transaction data that will be sent to the network.\n    let tx_data = TransactionData::new_programmable(\n        sender,\n        vec![gas_coin.object_ref()],\n        pt,\n        gas_budget,\n        gas_price,\n    );\n```\n\n----------------------------------------\n\nTITLE: Initializing Gas Coin and Inputs in Rust\nDESCRIPTION: Shows the initial state of the gas coin and inputs before command execution. The gas coin has a value of 500,000u64 after deducting the maximum gas budget.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nGas Coin: Coin<SUI> { id: gas_coin, ... value: 500_000u64 ... } // The maximum gas is deducted\nInputs: [\n  Pure(/* @0x808 BCS bytes */ ...),\n  Marketplace { id: market_id, ... },\n  Pure(/* 100u64 BCS bytes */ ...),\n]\nResults: []\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing a Shared Donut Shop in Move\nDESCRIPTION: This code initializes and manages a shared object representing a donut shop in the Sui network using the Move programming language. It uses the `sui::transfer::share_object` function to make the shop accessible. Dependencies include the `sui::sui::SUI`, `sui::coin`, and `sui::balance` modules. Key functions are `init`, `buy_donut`, `eat_donut`, and `collect_profits`, each facilitating different operations related to the donut shop's lifecycle.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/shared.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nmodule examples::donuts;\n\nuse sui::sui::SUI;\nuse sui::coin::{Self, Coin};\nuse sui::balance::{Self, Balance};\n\n/// For when Coin balance is too low.\nconst ENotEnough: u64 = 0;\n\n/// Capability that grants an owner the right to collect profits.\npublic struct ShopOwnerCap has key { id: UID }\n\n/// A purchasable Donut. For simplicity's sake we ignore implementation.\npublic struct Donut has key { id: UID }\n\n/// A shared object. `key` ability is required.\npublic struct DonutShop has key {\n    id: UID,\n    price: u64,\n    balance: Balance<SUI>\n}\n\n/// Init function is often ideal place for initializing\n/// a shared object as it is called only once.\nfun init(ctx: &mut TxContext) {\n    transfer::transfer(ShopOwnerCap {\n        id: object::new(ctx)\n    }, ctx.sender());\n\n    // Share the object to make it accessible to everyone!\n    transfer::share_object(DonutShop {\n        id: object::new(ctx),\n        price: 1000,\n        balance: balance::zero()\n    })\n}\n\n/// Entry function available to everyone who owns a Coin.\npublic fun buy_donut(\n    shop: &mut DonutShop, payment: &mut Coin<SUI>, ctx: &mut TxContext\n) {\n    assert!(coin::value(payment) >= shop.price, ENotEnough);\n\n    // Take amount = `shop.price` from Coin<SUI>\n    let paid = payment.balance_mut.split(shop.price);\n\n    // Put the coin to the Shop's balance\n    shop.balance.join(paid);\n\n    transfer::transfer(Donut {\n        id: object::new(ctx)\n    }, ctx.sender())\n}\n\n/// Consume donut and get nothing...\npublic fun eat_donut(d: Donut) {\n    let Donut { id } = d;\n    id.delete();\n}\n\n/// Take coin from `DonutShop` and transfer it to tx sender.\n/// Requires authorization with `ShopOwnerCap`.\npublic fun collect_profits(\n    _: &ShopOwnerCap, shop: &mut DonutShop, ctx: &mut TxContext\n) {\n    let amount = shop.balance.value();\n    let profits = shop.balance.split(amount).into_coin(ctx);\n\n    transfer::public_transfer(profits, ctx.sender())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining GasLessTransactionData struct in Rust\nDESCRIPTION: This code snippet defines the structure `GasLessTransactionData` in Rust. This struct represents transaction data without gas information, used as an interface between a user and a sponsor in sponsored transactions. It includes fields such as `kind` (TransactionKind) and `sender` (SuiAddress).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/sponsored-transactions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n```rust\npub struct GasLessTransactionData {\n    pub kind: TransactionKind,\n    sender: SuiAddress,\n    …\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Executing MoveCall Command in Rust\nDESCRIPTION: Shows the updated memory locations after executing the MoveCall command, which calls the buy_two function and creates two Item objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nGas Coin: Coin<SUI> { id: gas_coin, ... value: 499_900u64 ... }\nInputs: [\n  Pure(/* @0x808 BCS bytes */ ...),\n  Marketplace { id: market_id, ...  }, // Any mutations are applied\n  Pure(/* 100u64 BCS bytes */ ...),\n]\nResults: [\n  [ _ ], // The coin was moved\n  [Item { id: id1 }, Item { id: id2 }], // The results from the Move call\n],\n```\n\n----------------------------------------\n\nTITLE: Storing Execution Time Estimates in Sui System\nDESCRIPTION: Saves execution time estimates to the SuiSystemState object for use in the next epoch. These estimates help with resource allocation and scheduling.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_42\n\nLANGUAGE: Move\nCODE:\n```\nfun store_execution_time_estimates(wrapper: &mut SuiSystemState, estimates_bytes: vector<u8>) {\n    wrapper.load_system_state_mut().store_execution_time_estimates(estimates_bytes)\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Move Package in Sui\nDESCRIPTION: This snippet demonstrates how to use the 'sui move build' command to compile a Move package in Sui. It shows the expected output for a successful build.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/build-test.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move build\n```\n\nLANGUAGE: sh\nCODE:\n```\nUPDATING GIT DEPENDENCY https://github.com/MystenLabs/sui.git\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING my_first_package\n```\n\n----------------------------------------\n\nTITLE: Declaring Structs in Move\nDESCRIPTION: This snippet demonstrates how to declare structs in Move, focusing on struct abilities and naming conventions. It provides examples for dynamic field keys and proper struct naming, reinforcing best practices.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/conventions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nmodule conventions::request;\n\n// dynamic field keys\npublic struct ReceiptKey(ID) has copy, drop, store;\n\n// dynamic field\npublic struct Receipt<Data> has key, store {\n    id: UID,\n    data: Data\n}\n\n// right naming\npublic struct Request();\n\n// wrong naming\npublic struct RequestPotato {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Transaction Block in Sui using JSON-RPC\nDESCRIPTION: This snippet demonstrates how to get a specific transaction block by its digest using JSON-RPC in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/graphql-migration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"sui_getTransactionBlock\",\n  \"params\": [\n    \"Hay2tj3GcDYcE3AMHrej5WDsHGPVAYsegcubixLUvXUF\",\n    {\n      \"showInput\": true,\n      \"showRawInput\": false,\n      \"showEffects\": true,\n      \"showEvents\": true,\n      \"showObjectChanges\": false,\n      \"showBalanceChanges\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Generated Sui Addresses\nDESCRIPTION: This command displays all the Sui addresses that have been generated in the local wallet on your machine. It's useful for viewing all available addresses associated with your local installation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/get-address.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsui keytool list\n```\n\n----------------------------------------\n\nTITLE: Creating Action Requests in Sui Framework (Rust)\nDESCRIPTION: This function creates a new ActionRequest, which allows custom actions to be defined. It requires parameters such as action name, amount, recipient, optional spent balance, and a transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_19\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun new_request<T>(name: std::string::String, amount: u64, recipient: Option<address>, spent_balance: Option<sui::balance::Balance<T>>, ctx: &TxContext): sui::token::ActionRequest<T> {\n    ActionRequest {\n        name,\n        amount,\n        recipient,\n        spent_balance,\n        sender: ctx.sender(),\n        approvals: vec_set::empty(),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sui via Homebrew\nDESCRIPTION: Command to install Sui using the Homebrew package manager on MacOS, Linux, or Windows Subsystem for Linux.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/quick-install.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install sui\n```\n\n----------------------------------------\n\nTITLE: Copying Values with Immutable Objects\nDESCRIPTION: The 'copy_into' function demonstrates using immutable objects as function parameters. It accepts an immutable object to ensure read-only access, paving the way for safe concurrent access without ownership conflicts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/immutable.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun copy_into(from: &ColorObject, into: &mut ColorObject);\n```\n\n----------------------------------------\n\nTITLE: Constructing Move Call in Sui Transaction\nDESCRIPTION: This example shows how to construct a Move call within a Sui transaction. It demonstrates calling a 'mint' function from a 'devnet_nft' module with name, description, and image arguments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntx.moveCall({ target: '0x2::devnet_nft::mint', arguments: [tx.pure(name), tx.pure(description), tx.pure(image)] })\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Overview\nDESCRIPTION: Main directory structure of the NextJS frontend project, showing the organization of components, hooks, helpers, and other essential files.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/blackjack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\napp/\ncomponents/\nhooks/\nhelpers/\nutils/\nlib/\ntypes/\nstyles/\n```\n\n----------------------------------------\n\nTITLE: Importing Keys from Mnemonics in Sui\nDESCRIPTION: Commands to import keys from mnemonics using different signature schemes (ed25519, secp256k1, secp256r1) in Sui CLI. The mnemonics should be 12/15/18/21/24 words from the wordlist.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/sign-and-send-txn.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsui keytool import \"$MNEMONICS\" ed25519\nsui keytool import \"$MNEMONICS\" secp256k1\nsui keytool import \"$MNEMONICS\" secp256r1\n```\n\n----------------------------------------\n\nTITLE: Making Package Immutable in Move\nDESCRIPTION: This entry function discards the UpgradeCap, making the corresponding package immutable. It takes an UpgradeCap as input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun make_immutable(cap: UpgradeCap) {\n    let UpgradeCap { id, package: _, version: _, policy: _ } = cap;\n    id.delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gas Settings in Sui Transaction\nDESCRIPTION: This snippet illustrates how to configure various gas settings in a Sui transaction. It shows how to set the gas price, gas budget, and specify gas payment coins explicitly.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntx.setGasPrice(gasPrice);\n\ntx.setGasBudget(gasBudgetAmount);\n\n// NOTE: You need to ensure that the coins do not overlap with any\n// of the input objects for the PTB.\ntx.setGasPayment([coin1, coin2]);\n```\n\n----------------------------------------\n\nTITLE: Migrating Regulated Currency to V2 Format\nDESCRIPTION: This function migrates a DenyCap for a regulated currency to the new DenyCapV2 type. All entries in the deny list are migrated to the new format, which supports additional features like global pausing of a currency.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_20\n\nLANGUAGE: move\nCODE:\n```\npublic fun migrate_regulated_currency_to_v2<T>(\n    deny_list: &mut DenyList,\n    cap: DenyCap<T>,\n    allow_global_pause: bool,\n    ctx: &mut TxContext,\n): DenyCapV2<T> {\n    let DenyCap { id } = cap;\n    object::delete(id);\n    let ty = type_name::get_with_original_ids<T>().into_string().into_bytes();\n    deny_list.migrate_v1_to_v2(DENY_LIST_COIN_INDEX, ty, ctx);\n    DenyCapV2 {\n        id: object::new(ctx),\n        allow_global_pause,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling All Orders in DeepBook CLOB (Move)\nDESCRIPTION: This function cancels all open orders for a user in a given trading pool. It iterates through the user's open orders, removes them from the order book, unlocks the corresponding balances, and emits cancellation events.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\npublic fun cancel_all_orders<BaseAsset, QuoteAsset>(\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    account_cap: &AccountCap\n) {\n    let pool_id = *object::uid_as_inner(&pool.id);\n    let user = object::id(account_cap);\n    assert!(contains(&pool.usr_open_orders, user), EInvalidUser);\n    let usr_open_order_ids = table::borrow_mut(&mut pool.usr_open_orders, user);\n    while (!linked_table::is_empty(usr_open_order_ids)) {\n        let order_id = *option::borrow(linked_table::back(usr_open_order_ids));\n        let order_price = *linked_table::borrow(usr_open_order_ids, order_id);\n        let is_bid = order_is_bid(order_id);\n        let open_orders =\n            if (is_bid) { &mut pool.bids }\n            else { &mut pool.asks };\n        let (_, tick_index) = critbit::find_leaf(open_orders, order_price);\n        let order = remove_order(\n            open_orders,\n            usr_open_order_ids,\n            tick_index,\n            order_id,\n            user\n        );\n        if (is_bid) {\n            let balance_locked = clob_math::mul(order.quantity, order.price);\n            custodian::unlock_balance(&mut pool.quote_custodian, user, balance_locked);\n        } else {\n            custodian::unlock_balance(&mut pool.base_custodian, user, order.quantity);\n        };\n        emit_order_canceled<BaseAsset, QuoteAsset>(pool_id, &order);\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Versioned Counter Module\nDESCRIPTION: This example outlines a counter module that incorporates versioning for its shared objects. It demonstrates methods to keep track of versions, use admin capabilities, and ensure function access adheres to version checks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/upgrade.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule example::counter;\n\npublic struct Counter has key {\n    id: UID,\n    value: u64,\n}\n\nfun init(ctx: &mut TxContext) {\n    transfer::share_object(Counter {\n        id: object::new(ctx),\n        value: 0,\n    })\n}\n\npublic fun increment(c: &mut Counter) {\n    c.value = c.value + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Locked Object by ID Using sui-tool in Sui\nDESCRIPTION: Command to check if a specific object is locked on a Sui RPC network using sui-tool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/avoid-equivocation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ sui-tool locked-object --id 0xd4c3ecf5eaa211da58c36495613899e70349f6048baaeca99596f1682e89c837 --fullnode-rpc-url <https://rpc.mainnet.sui.io:443>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Sui object's UID\nDESCRIPTION: Deletes an object's UID, which is the proper way to eliminate a UID. This function emits a deleted system event so Sui knows to process the object deletion.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_15\n\nLANGUAGE: move\nCODE:\n```\npublic fun delete(id: UID) {\n    let UID { id: ID { bytes } } = id;\n    delete_impl(bytes)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Regulated Currency in Move\nDESCRIPTION: Function to create a new regulated currency with an additional capability for freezing specific addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_36\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create_regulated_currency<T: drop>(\n    witness: T,\n    decimals: u8,\n    symbol: vector<u8>,\n    name: vector<u8>,\n    description: vector<u8>,\n    icon_url: Option<Url>,\n    ctx: &mut TxContext,\n): (TreasuryCap<T>, DenyCap<T>, CoinMetadata<T>) {\n    let (treasury_cap, metadata) = create_currency(\n        witness,\n        decimals,\n        symbol,\n        name,\n        description,\n        icon_url,\n        ctx,\n    );\n    let deny_cap = DenyCap {\n        id: object::new(ctx),\n    };\n    transfer::freeze_object(RegulatedCoinMetadata<T> {\n        id: object::new(ctx),\n        coin_metadata_object: object::id(&metadata),\n        deny_cap_object: object::id(&deny_cap),\n    });\n    (treasury_cap, deny_cap, metadata)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Available SUI Balance\nDESCRIPTION: Command to verify the SUI token balance for the current account on the connected network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client gas\n```\n\n----------------------------------------\n\nTITLE: Executing SplitCoins Command in Sui PTBs\nDESCRIPTION: Explains the structure and execution of the SplitCoins command in Sui PTBs. It covers the coin and amount arguments, their usage, and the resulting vector of split coins.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nSplitCoins(CoinArg, AmountArgs)\n// Rough signature:\n// <T: key + store>(coin: &mut sui::coin::Coin<T>, amounts: vector<u64>): vector<sui::coin::Coin<T>>\n```\n\n----------------------------------------\n\nTITLE: Net Gas Fees Calculation in Sui\nDESCRIPTION: This formula describes how net gas fees are calculated by subtracting storage rebates from the sum of computation and storage gas fees. Storage rebates are applied when a transaction deletes previously stored objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics/gas-in-sui.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"net_gas_fees = computation_gas_fee + storage_gas_fee - storage_rebate\"\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in Move\nDESCRIPTION: This snippet illustrates the proper way to declare constants in Move, emphasizing casing conventions. It distinguishes between regular constants and error constants, highlighting the importance of descriptive naming.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/conventions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule conventions::constants;\n\n// correct non-error constant\nconst MAX_NAME_LENGTH: u64 = 64;\n\n// correct error constant\nconst EInvalidName: u64 = 0;\n\n// wrong error constant\nconst E_INVALID_NAME: u64 = 0;\n```\n\n----------------------------------------\n\nTITLE: Creating a new UID for Sui objects\nDESCRIPTION: Creates a new object and returns the UID that must be stored in a Sui object. This is the only way to create UIDs in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_14\n\nLANGUAGE: move\nCODE:\n```\npublic fun new(ctx: &mut TxContext): UID {\n    UID {\n        id: ID { bytes: ctx.fresh_object_address() },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Sui Move Code with Comments\nDESCRIPTION: This snippet showcases best practices for documenting Sui Move code using both doc comments (///) and regular comments (//). It demonstrates how to document structs, functions, and their parameters effectively.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/conventions.mdx#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\nmodule conventions::hero;\n\nuse std::string::String;\nuse sui::kiosk::{Kiosk, KioskOwnerCap};\n\npublic struct Hero has key, store {\n    id: UID,\n    // power of the nft\n    power: u64\n}\n\n/// Creates and returns a new Hero object\npublic fun new(ctx: &mut TxContext): Hero {\n    Hero {\n        id: object::new(ctx),\n        power: 0\n    }\n}\n\n// should be initialized before being shared\npublic fun initialize_hero(hero: &mut Hero) {\n    hero.power = 100;\n}\n\npublic fun start_battle(\n    self: &mut Kiosk, // user kiosk\n    cap: &KioskOwnerCap, // user kiosk owner cap\n    _policy: &TransferPolicy<Hero>, // transfer policy for the game\n    hero_id: ID, // hero to use\n    battle_id: String // id of the battle to start\n) {\n    // Implementation omitted.\n    abort(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Sui Transaction Creation and Signing Process\nDESCRIPTION: Series of commands showing the complete flow of creating, signing and executing a transfer transaction in Sui. Includes checking gas, creating unsigned transaction, signing with private key, and executing the signed transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/sign-and-send-txn.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsui client gas\n```\n\nLANGUAGE: sh\nCODE:\n```\nsui client transfer-sui --to $SUI_ADDRESS --sui-coin-object-id $GAS_COIN_ID --gas-budget $GAS_BUDGET --serialize-unsigned-transaction\n```\n\nLANGUAGE: sh\nCODE:\n```\nsui keytool sign --address $SUI_ADDRESS --data $TX_BYTES\n```\n\nLANGUAGE: sh\nCODE:\n```\nsui client execute-signed-tx --tx-bytes $TX_BYTES --signatures $SERIALIZED_SIGNATURE\n```\n\n----------------------------------------\n\nTITLE: Accessing Random Object in Sui TypeScript SDK\nDESCRIPTION: This TypeScript snippet demonstrates how to access the Random object when calling a Move function that requires it as an argument.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/randomness-onchain.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = new Transaction();\ntx.moveCall({\n  target: \"${PACKAGE_ID}::example::roll_dice\",\n  arguments: [tx.object.random()]\n});\n...\n```\n\n----------------------------------------\n\nTITLE: Move Language Summary\nDESCRIPTION: This snippet includes the content of the 'move-summary.mdx' file, offering an overview of the Move programming language within the Sui context. It provides an introduction to Move's key features and coding patterns for smart contract development on Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/app-devs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\n{@include: ../snippets/move-summary.mdx}\n```\n\n----------------------------------------\n\nTITLE: Managing Keys with Sui CLI\nDESCRIPTION: This code shows how to use the Sui CLI to generate new addresses with different signature schemes, and how to import existing private keys into the keystore.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/sign-and-send-txn.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# generate randomly.\nsui client new-address ed25519\nsui client new-address secp256k1\nsui client new-address secp256r1\n\n# import the 32-byte private key to keystore.\nsui keytool import \"0xd463e11c7915945e86ac2b72d88b8190cfad8ff7b48e7eb892c275a5cf0a3e82\" ed25519\nsui keytool import \"0xd463e11c7915945e86ac2b72d88b8190cfad8ff7b48e7eb892c275a5cf0a3e82\" secp256k1\nsui keytool import \"0xd463e11c7915945e86ac2b72d88b8190cfad8ff7b48e7eb892c275a5cf0a3e82\" secp256r1\n\n# import the mnemonics (recovery phrase) with derivation path to keystore.\n```\n\n----------------------------------------\n\nTITLE: Testing Module Initialization with test_scenario\nDESCRIPTION: Test function that verifies the module initializer correctly creates a Forge object with proper initial values and tests the new_sword function that uses the Forge.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/build-test.mdx#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun test_module_init() {\n    // create test addresses representing users\n    let admin = @0xAD;\n    let initial_owner = @0xA0;\n    // first transaction executed by admin to create the sword\n    let scenario_val = test_scenario::begin(admin);\n    let scenario = &mut scenario_val;\n    // second transaction executed by admin to use the forge\n    test_scenario::next_tx(scenario, admin);\n    {\n        // extract the forge owned by the admin\n        let forge = test_scenario::take_from_sender<Forge>(scenario);\n        // verify the initial counter\n        assert!(swords_created(&forge) == 0, 0);\n        // create a sword with the forge\n        new_sword(&mut forge, 42, 7, initial_owner, test_scenario::ctx(scenario));\n        // verify the counter has been incremented\n        assert!(swords_created(&forge) == 1, 0);\n        // return the forge to the object pool\n        test_scenario::return_to_sender(scenario, forge);\n    };\n    // third transaction executed by the sword owner\n    test_scenario::next_tx(scenario, initial_owner);\n    {\n        // extract the sword owned by the initial owner\n        let sword = test_scenario::take_from_sender<Sword>(scenario);\n        // verify that the sword has the expected properties\n        assert!(magic(&sword) == 42 && strength(&sword) == 7, 0);\n        // return the sword to the object pool\n        test_scenario::return_to_sender(scenario, sword);\n    };\n    test_scenario::end(scenario_val);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Limit Orders in DeepBookV3 with TypeScript\nDESCRIPTION: Complete implementation for placing limit orders, including interface definition and usage examples. Shows parameter structure and demonstrates how to place a bid in a trading pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/orders.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Params for limit order\ninterface PlaceLimitOrderParams {\n    poolKey: string;\n    balanceManagerKey: string;\n    clientOrderId: string;\n    price: number;\n    quantity: number;\n    isBid: boolean;\n    expiration?: number | bigint; // Default no expiration\n    orderType?: OrderType; // Default no restrictions\n    selfMatchingOption?: SelfMatchingOptions; // Default self matching allowed\n    payWithDeep?: boolean; // Default true\n}\n\n/**\n  * @description Place a limit order\n  * @param {PlaceLimitOrderParams} params Parameters for placing a limit order\n  * @returns A function that takes a Transaction object\n  */\nplaceLimitOrder = (params: PlaceLimitOrderParams) => (tx: Transaction) => {}\n\n// Example usage in DeepBookMarketMaker class\n// Place a bid of 10 DEEP at $0.1\ncustomPlaceLimitOrder = (tx: Transaction) => {\n  const poolKey = 'DEEP_DBUSDC'; // Pool key, check constants.ts for more\n  const managerKey = 'MANAGER_1'; // Balance manager key, initialized during client creation by user\n  tx.add(\n    this.deepBook.placeLimitOrder({\n      poolKey: poolKey,\n      balanceManagerKey: managerKey,\n      clientOrderId: '1',\n      price: 0.1,\n      quantity: 10,\n      isBid: true,\n      payWithDeep: true,\n    }),\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Sui dApp Kit Dependencies\nDESCRIPTION: Command to install necessary dependencies for using dApp Kit in a React application.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/client-tssdk.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install @mysten/sui @mysten/dapp-kit @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Implementing Market Orders in DeepBookV3 with TypeScript\nDESCRIPTION: Complete implementation for placing market orders, including interface definition and usage example. Demonstrates how to execute a market order in a SUI/USDC pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/orders.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Params for market order\ninterface PlaceMarketOrderParams {\n    poolKey: string;\n    balanceManagerKey: string;\n    clientOrderId: string;\n    quantity: number;\n    isBid: boolean;\n    selfMatchingOption?: SelfMatchingOptions;\n    payWithDeep?: boolean;\n}\n\n// Example usage in DeepBookMarketMaker class\n// Place a market sell of 10 SUI in the SUI_DBUSDC pool\ncustomPlaceMarketOrder = (tx: Transaction) => {\n  const poolKey = 'SUI_DBUSDC'; // Pool key, check constants.ts for more\n  const managerKey = 'MANAGER_1'; // Balance manager key, initialized during client creation by user\n  tx.add(\n    this.deepBook.placeMarketOrder({\n      poolKey: poolKey,\n      balanceManagerKey: managerKey,\n      clientOrderId: '2',\n      quantity: 10,\n      isBid: true,\n      payWithDeep: true,\n    }),\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Customized Pool V2\nDESCRIPTION: An enhanced version of pool creation function with improved composability, returning both the pool and pool owner capability. Designed for more flexible pool management and potential destruction of owner cap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create_customized_pool_v2<BaseAsset, QuoteAsset>(\n    _tick_size: u64,\n    _lot_size: u64,\n    _taker_fee_rate: u64,\n    _maker_rebate_rate: u64,\n    _creation_fee: Coin<SUI>,\n    _ctx: &mut TxContext\n) : (Pool<BaseAsset, QuoteAsset>, PoolOwnerCap) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hero Module with Display in Sui Move\nDESCRIPTION: Complete example of a Hero module that implements the Display standard. Shows how to initialize the Publisher, create a Display object with template fields, and provide a minting function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/display.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\n/// Example of an unlimited \"Sui Hero\" collection - anyone can\n/// mint their Hero. Shows how to initialize the `Publisher` and how\n/// to use it to get the `Display<Hero>` object - a way to describe a\n/// type for the ecosystem.\nmodule examples::my_hero;\n\nuse std::string::String;\n\n// The creator bundle: these two packages often go together.\nuse sui::package;\nuse sui::display;\n\n/// The Hero - an outstanding collection of digital art.\npublic struct Hero has key, store {\n    id: UID,\n    name: String,\n    image_url: String,\n}\n\n/// One-Time-Witness for the module.\npublic struct MY_HERO has drop {}\n\n/// Claim the `Publisher` object in the module initializer \n/// to then create a `Display`. The `Display` is initialized with\n/// a set of fields (but can be modified later) and published via\n/// the `update_version` call.\n///\n/// Keys and values are set in the initializer but could also be\n/// set after publishing if a `Publisher` object was created.\nfun init(otw: MY_HERO, ctx: &mut TxContext) {\n    let keys = vector[\n        b\"name\".to_string(),\n        b\"link\".to_string(),\n        b\"image_url\".to_string(),\n        b\"description\".to_string(),\n        b\"project_url\".to_string(),\n        b\"creator\".to_string(),\n    ];\n\n    let values = vector[\n        // For `name` one can use the `Hero.name` property\n        b\"{name}\".to_string(),\n        // For `link` one can build a URL using an `id` property\n        b\"https://sui-heroes.io/hero/{id}\".to_string(),\n        // For `image_url` use an IPFS template + `image_url` property.\n        b\"ipfs://{image_url}\".to_string(),\n        // Description is static for all `Hero` objects.\n        b\"A true Hero of the Sui ecosystem!\".to_string(),\n        // Project URL is usually static\n        b\"https://sui-heroes.io\".to_string(),\n        // Creator field can be any\n        b\"Unknown Sui Fan\".to_string(),\n    ];\n\n    // Claim the `Publisher` for the package!\n    let publisher = package::claim(otw, ctx);\n\n    // Get a new `Display` object for the `Hero` type.\n    let mut display = display::new_with_fields<Hero>(\n        &publisher, keys, values, ctx\n    );\n\n    // Commit first version of `Display` to apply changes.\n    display.update_version();\n\n    transfer::public_transfer(publisher, ctx.sender());\n    transfer::public_transfer(display, ctx.sender());\n}\n\n/// Anyone can mint their `Hero`!\npublic fun mint(name: String, image_url: String, ctx: &mut TxContext): Hero {\n    Hero {\n        id: object::new(ctx),\n        name,\n        image_url\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Market Price Implementation in Move\nDESCRIPTION: Function to query the current market price of an order book, returning the best bid and ask prices if they exist. Returns Option types to handle cases where no orders exist.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_38\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_market_price<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>\n): (Option<u64>, Option<u64>) {\n    let bid_price = if (!critbit::is_empty(&pool.bids)) {\n        let (result, _) = critbit::max_leaf(&pool.bids);\n        option::some<u64>(result)\n    } else {\n        option::none<u64>()\n    };\n    let ask_price = if (!critbit::is_empty(&pool.asks)) {\n        let (result, _) = critbit::min_leaf(&pool.asks);\n        option::some<u64>(result)\n    } else {\n        option::none<u64>()\n    };\n    return (bid_price, ask_price)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing TransferObjects Command in Sui PTBs\nDESCRIPTION: Details the structure and execution of the TransferObjects command in Sui PTBs. It specifies the argument types, usage, and constraints for transferring objects to an address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nTransferObjects(ObjectArgs, AddressArg)\n// Rough signature:\n// (vector<forall T: key + store. T>, address): ()\n```\n\n----------------------------------------\n\nTITLE: Displaying Sui Transaction Structure and Execution\nDESCRIPTION: This snippet shows the structure of a Sui blockchain transaction, including its version, digest, input objects, commands, and signatures. It also displays the transaction effects, including created and mutated objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/upgrade.mdx#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nProject: /mystenlabs/sui\nContent:\n│  │ Version: 3                                                                                                                                                │\n│  │ Digest: D2rpccs7eSw8gtb4T1K2bSVzF5eApC68xiHDtNGQEcEb                                                                                                      │\n│  └──                                                                                                                                                         │\n│                                                                                                                                                              │\n│ Transaction Kind: Programmable                                                                                                                               │\n│ ╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │\n│ │ Input Objects                                                                                                                                            │ │\n│ ├──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤ │\n│ │ 0   Imm/Owned Object ID: UPGRAD-CAP-ID                                                                                                                   │ │\n│ │ 1   Pure Arg: Type: u8, Value: 0                                                                                                                         │ │\n│ │ 2   Pure Arg: Type: vector<u8>, Value: [49,208,61,255,107,134,136,221,231,35,60,2,248,17,234,236,64,76,71,188,57,104,46,113,67,94,232,236,64,59,144,112] │ │\n│ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │\n│ ╭───────────────────────────────────────────────────────────────────────────────────────────╮                                                                │\n│ │ Commands                                                                                  │                                                                │\n│ ├───────────────────────────────────────────────────────────────────────────────────────────┤                                                                │\n│ │ 0  MoveCall:                                                                              │                                                                │\n│ │  ┌                                                                                        │                                                                │\n│ │  │ Function:  authorize_upgrade                                                           │                                                                │\n│ │  │ Module:    package                                                                     │                                                                │\n│ │  │ Package:   0x0000000000000000000000000000000000000000000000000000000000000002          │                                                                │\n│ │  │ Arguments:                                                                             │                                                                │\n│ │  │   Input  0                                                                             │                                                                │\n│ │  │   Input  1                                                                             │                                                                │\n│ │  │   Input  2                                                                             │                                                                │\n│ │  └                                                                                        │                                                                │\n│ │                                                                                           │                                                                │\n│ │ 1  Upgrade:                                                                               │                                                                │\n│ │  ┌                                                                                        │                                                                │\n│ │  │ Dependencies:                                                                          │                                                                │\n│ │  │   0x0000000000000000000000000000000000000000000000000000000000000001                   │                                                                │\n│ │  │   0x0000000000000000000000000000000000000000000000000000000000000002                   │                                                                │\n│ │  │ Current Package ID: ORIGINAL-PACKAGE-ID                                                │                                                                │\n│ │  │ Ticket: Result 0                                                                       │                                                                │\n│ │  └                                                                                        │                                                                │\n│ │                                                                                           │                                                                │\n│ │ 2  MoveCall:                                                                              │                                                                │\n│ │  ┌                                                                                        │                                                                │\n│ │  │ Function:  commit_upgrade                                                              │                                                                │\n│ │  │ Module:    package                                                                     │                                                                │\n│ │  │ Package:   0x0000000000000000000000000000000000000000000000000000000000000002          │                                                                │\n│ │  │ Arguments:                                                                             │                                                                │\n│ │  │   Input  0                                                                             │                                                                │\n│ │  │   Result 1                                                                             │                                                                │\n│ │  └                                                                                        │                                                                │\n│ ╰───────────────────────────────────────────────────────────────────────────────────────────╯                                                                │\n│                                                                                                                                                              │\n│ Signatures:                                                                                                                                                  │\n│    nNJ8AiSAeV+NB3ayRTwcfaJHx3AzFHlZysbwda5e2jFBz5W9Z5EnzXV09xZMQYctUtW33jWpUFdK8hOJ9hZzDg==                                                                  │\n│                                                                                                                                                              │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n╭───────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Transaction Effects                                                                               │\n├───────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ Digest: 3NnJGryz2k2BJzjpndDVqVcdZmmefNMB8SJ9bCEQct22                                              │\n│ Status: Success                                                                                   │\n│ Executed Epoch: 1                                                                                 │\n│                                                                                                   │\n│ Created Objects:                                                                                  │\n│  ┌──                                                                                              │\n│  │ ID: 0x5d49966433ebb423f5b40bfcd0ecfdc67f1527e3b9e3a433c4ec87ae63d54ed4                         │\n│  │ Owner: Immutable                                                                               │\n│  │ Version: 2                                                                                     │\n│  │ Digest: 6GmLYmCszFxbaLRLTyZdxTTfXG99iq8uVabfi2NaB5fQ                                           │\n│  └──                                                                                              │\n│ Mutated Objects:                                                                                  │\n│  ┌──                                                                                              │\n│  │ ID: GAS-COIN-ID                                                                                │\n│  │ Owner: Account Address ( PUBLISHER-ID )                                                        │\n│  │ Version: 4                                                                                     │\n```\n\n----------------------------------------\n\nTITLE: Starting a Sui Local Network with Faucet\nDESCRIPTION: Command to start a Sui local network with a faucet service and force regenesis. It sets specific logging through RUST_LOG flags.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/local-network.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ RUST_LOG=\"off,sui_node=info\" sui start --with-faucet --force-regenesis\n```\n\n----------------------------------------\n\nTITLE: Initializing Sui Client Configuration\nDESCRIPTION: Command to start the Sui client configuration process for connecting to a network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client\n```\n\n----------------------------------------\n\nTITLE: Generate ED25519 Keypair using Sui Keytool\nDESCRIPTION: This command generates a new ED25519 keypair (private and public key) and saves it to a file. This is the standard way to create a new identity for interacting with the Sui network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"sui keytool generate ed25519\"\n```\n\n----------------------------------------\n\nTITLE: Complete Flash Loan Example with DeepBookV3 SDK\nDESCRIPTION: A comprehensive example of using flash loans in a DeepBookMarketMaker class. The example borrows DEEP tokens, performs swaps across different pools, and returns the borrowed amount, all within a single transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/flash-loans.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Example of a flash loan transaction\n// Borrow 1 DEEP from DEEP_SUI pool\n// Swap 0.5 DBUSDC for SUI in SUI_DBUSDC pool, pay with deep borrowed\n// Swap SUI back to DEEP\n// Return 1 DEEP to DEEP_SUI pool\nflashLoanExample = async (tx: Transaction) => {\n  const borrowAmount = 1;\n  const [deepCoin, flashLoan] = tx.add(this.flashLoans.borrowBaseAsset('DEEP_SUI', borrowAmount));\n\n  // Execute trade using borrowed DEEP\n  const [baseOut, quoteOut, deepOut] = tx.add(\n    this.deepBook.swapExactQuoteForBase({\n      poolKey: 'SUI_DBUSDC',\n      amount: 0.5,\n      deepAmount: 1,\n      minOut: 0,\n      deepCoin: deepCoin,\n    }),\n  );\n\n  tx.transferObjects([baseOut, quoteOut, deepOut], this.getActiveAddress());\n\n  // Execute second trade to get back DEEP for repayment\n  const [baseOut2, quoteOut2, deepOut2] = tx.add(\n    this.deepBook.swapExactQuoteForBase({\n      poolKey: 'DEEP_SUI',\n      amount: 10,\n      deepAmount: 0,\n      minOut: 0,\n    }),\n  );\n\n  tx.transferObjects([quoteOut2, deepOut2], this.getActiveAddress());\n\n  // Return borrowed DEEP\n  const loanRemain = tx.add(\n    this.flashLoans.returnBaseAsset('DEEP_SUI', borrowAmount, baseOut2, flashLoan),\n  );\n  \n  // Send the remaining coin to user's address\n  tx.transferObjects([loanRemain], this.getActiveAddress());\n};\n```\n\n----------------------------------------\n\nTITLE: Executing SplitCoins Command in Rust\nDESCRIPTION: Demonstrates the result of the SplitCoins command, which creates a new coin object with a value of 100u64 from the gas coin.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nGas Coin: Coin<SUI> { id: gas_coin, ... value: 499_900u64 ... }\nInputs: [\n  Pure(/* @0x808 BCS bytes */ ...),\n  Marketplace { id: market_id, ... },\n  Pure(/* 100u64 BCS bytes */ ...),\n]\nResults: [\n  [Coin<SUI> { id: new_coin, value: 100u64 ... }], // The result of SplitCoins\n],\n```\n\n----------------------------------------\n\nTITLE: Authorization Capability Pattern in Move\nDESCRIPTION: Implementation of authorization capabilities for admin and moderator roles using Move structs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\n/// A capability that can be used to perform admin operations on a service\nstruct AdminCap has key, store {\n    id: UID,\n    service_id: ID\n}\n\n/// Represents a moderator that can be used to delete reviews\nstruct Moderator has key {\n    id: UID,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control with Capability Objects in Sui Move\nDESCRIPTION: This snippet demonstrates how to use capability objects for access control in Sui Move, maintaining composability. It compares a recommended approach using an Account object with a less composable alternative.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/conventions.mdx#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\nmodule conventions::access_control;\n\nuse sui::sui::SUI;\nuse sui::balance::Balance;\nuse sui::coin::{Self, Coin};\nuse sui::table::{Self, Table};\n\npublic struct Account has key, store {\n    id: UID,\n    balance: u64\n}\n\npublic struct State has key {\n    id: UID,\n    // field not necessary as the state lives in the Account objects\n    accounts: Table<address, u64>,\n    balance: Balance<SUI>\n}\n\n// right -> with this function, another protocol can hold the `Account` on behalf of a user.\npublic fun withdraw(state: &mut State, account: &mut Account, ctx: &mut TxContext): Coin<SUI> {\n    let authorized_balance = account.balance;\n\n    account.balance = 0;\n\n    coin::take(&mut state.balance, authorized_balance, ctx)\n}\n\n// wrong -> this is less composable.\npublic fun wrong_withdraw(state: &mut State, ctx: &mut TxContext): Coin<SUI> {\n    let sender = tx_context::sender(ctx);\n\n    let authorized_balance = table::borrow_mut(&mut state.accounts, sender);\n    let value = *authorized_balance;\n    *authorized_balance = 0;\n    coin::take(&mut state.balance, value, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Package Upgrade Command in Sui CLI\nDESCRIPTION: This snippet demonstrates the usage of the 'sui client upgrade' command to upgrade packages in Sui. It specifies the required flags for gas budget and UpgradeCap ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/upgrade.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- `--gas-budget`: The maximum number of gas units that can be expended before the network cancels the transaction.\n- `--cap`: The ID of the `UpgradeCap`. You receive this ID as a return from the publish command.\n```\n\n----------------------------------------\n\nTITLE: Event Polling with TypeScript\nDESCRIPTION: Implementation of an event indexer that polls the Sui network to retrieve and process events using TypeScript\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/using-events.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Event indexer implementation from Trustless Swap\n// Demonstrates periodic event polling and processing\n```\n\n----------------------------------------\n\nTITLE: Defining Pool Struct for CLOB in Move\nDESCRIPTION: Defines the Pool struct which represents a trading pool for a base and quote asset pair. It includes fields for managing orders, fees, and asset custodians.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Pool<phantom BaseAsset, phantom QuoteAsset> has key {\n    id: sui::object::UID,\n    bids: deepbook::critbit::CritbitTree<deepbook::clob::TickLevel>,\n    asks: deepbook::critbit::CritbitTree<deepbook::clob::TickLevel>,\n    next_bid_order_id: u64,\n    next_ask_order_id: u64,\n    usr_open_orders: sui::table::Table<sui::object::ID, sui::linked_table::LinkedTable<u64, u64>>,\n    taker_fee_rate: u64,\n    maker_rebate_rate: u64,\n    tick_size: u64,\n    lot_size: u64,\n    base_custodian: deepbook::custodian::Custodian<BaseAsset>,\n    quote_custodian: deepbook::custodian::Custodian<QuoteAsset>,\n    creation_fee: sui::balance::Balance<sui::sui::SUI>,\n    base_asset_trading_fees: sui::balance::Balance<BaseAsset>,\n    quote_asset_trading_fees: sui::balance::Balance<QuoteAsset>\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Vector Elements with All Predicate\nDESCRIPTION: A macro function that checks if all elements in a vector satisfy a given predicate. Returns true if every element matches, otherwise returns false. Returns true for empty vectors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun all<$T>($v: &vector<$T>, $f: |&$T| -> bool): bool\n```\n\n----------------------------------------\n\nTITLE: Cliff Vesting Smart Contract in Move\nDESCRIPTION: This Move language smart contract implements a cliff vesting strategy where tokens are released only after reaching a specific time-related milestone. It includes 'new_wallet' and 'claim' functions to handle the token allocation and retrieval. The snippet requires the Sui framework and expects the total token sum and cliff date as inputs. It ensures security by using timestamps and returns tokens only when the current time is past the cliff date.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics/vesting-strategies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\n{\"@inject\": \"examples/vesting/sources/cliff.move\"}\n```\n\n----------------------------------------\n\nTITLE: Calculating Unadjusted Reward Distribution for Validators in Move\nDESCRIPTION: This function computes the unadjusted staking and storage fund reward amounts for each validator based on their voting power and the total rewards available. It returns two vectors containing the reward amounts for each validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_54\n\nLANGUAGE: Move\nCODE:\n```\nfun compute_unadjusted_reward_distribution(\n    validators: &vector<Validator>,\n    total_voting_power: u64,\n    total_staking_reward: u64,\n    total_storage_fund_reward: u64,\n): (vector<u64>, vector<u64>) {\n    let mut staking_reward_amounts = vector[];\n    let mut storage_fund_reward_amounts = vector[];\n    let length = validators.length();\n    let storage_fund_reward_per_validator = total_storage_fund_reward / length;\n    validators.do_ref!(|validator| {\n        let voting_power = validator.voting_power();\n        let reward_amount = mul_div!(voting_power, total_staking_reward, total_voting_power);\n        staking_reward_amounts.push_back(reward_amount);\n        storage_fund_reward_amounts.push_back(storage_fund_reward_per_validator);\n    });\n    (staking_reward_amounts, storage_fund_reward_amounts)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tic-Tac-Toe Game Board Struct in Move\nDESCRIPTION: This code snippet defines the structure of a Tic-Tac-Toe game board as a `struct` in the Move smart contract language on Sui. It shows how game states can be represented on-chain using key-value pairs, where the first key-value pair is always `id: address` for uniqueness.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/gaming.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nstruct Game has key {\n        id: UID,\n        size: u8,\n        board: vector<Option<u8>>,\n        turn: u8,\n        status: u8,\n        p1: address,\n        p2: address\n    }\n```\n\n----------------------------------------\n\nTITLE: Transfer Request Struct Definition\nDESCRIPTION: Defines a 'hot potato' struct that requires permission from the item type owner on purchase attempts. Contains item ID, paid amount, source Kiosk ID and collected receipts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TransferRequest<phantom T> {\n    item: sui::object::ID,\n    paid: u64,\n    from: sui::object::ID,\n    receipts: sui::vec_set::VecSet<std::type_name::TypeName>\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Example in Move Smart Contract\nDESCRIPTION: Example of using debug functions in a 'new_sword' function within a Move smart contract. It prints the 'forge' object before and after updating, and includes a stack trace.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/debug.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun new_sword(\n    forge: &mut Forge,\n    magic: u64,\n    strength: u64,\n    ctx: &mut TxContext,\n): Sword {\n    debug::print(forge);\n    forge.swords_created = forge.swords_created + 1;\n    debug::print(forge);\n    debug::print_stack_trace();\n    Sword {\n        id: object::new(ctx),\n        magic: magic,\n        strength: strength,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Regulated Coins - TypeScript Implementation\nDESCRIPTION: TypeScript code for minting regulated coins and transferring them to specified addresses using the Sui SDK. The implementation splits minting and transfer into separate steps for better composability while maintaining single-transaction efficiency.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin/regulated.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmint: async (amount: number, recipient: string) => {\n    const ptb = new TransactionBlock();\n    const coin = ptb.moveCall({\n      target: `${PACKAGE_ID}::${MODULE_NAME}::mint`,\n      arguments: [ptb.object(TREASURY_CAP_ID), ptb.pure(amount)],\n    });\n    ptb.transferObjects([coin], ptb.pure(recipient));\n    return await signAndExecuteTransactionBlock(ptb);\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Signed Transactions in Sui Rust SDK\nDESCRIPTION: This code shows how to submit a signed transaction to the Sui network using the Sui Rust SDK's quorum driver API and retrieve the transaction response.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/sign-and-send-txn.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n    let transaction_response = sui_client\n        .quorum_driver_api()\n        .execute_transaction_block(\n            sui_types::transaction::Transaction::from_generic_sig_data(\n                intent_msg.value,\n                Intent::sui_transaction(),\n                vec![GenericSignature::Signature(sui_sig)],\n            ),\n            SuiTransactionBlockResponseOptions::default(),\n            None,\n        )\n        .await?;\n```\n\n----------------------------------------\n\nTITLE: Reading Total Coin Balances for an Address\nDESCRIPTION: Demonstrates how to use the Sui SDK to retrieve all coin balances owned by a specific Sui address. It connects to a local Sui network, retrieves the balance information using the coin_read_api, and displays the results.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-sdk/README.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse std::str::FromStr;\nuse sui_sdk::types::base_types::SuiAddress;\nuse sui_sdk::{ SuiClientBuilder};\n#[tokio::main]\nasync fn main() -> Result<(), anyhow::Error> {\n\n   let sui_local = SuiClientBuilder::default().build_localnet().await?;\n   println!(\"Sui local network version: {}\", sui_local.api_version());\n\n   let active_address = SuiAddress::from_str(\"<YOUR SUI ADDRESS>\")?; // change to your Sui address\n\n   let total_balance = sui_local\n      .coin_read_api()\n      .get_all_balances(active_address)\n      .await?;\n   println!(\"The balances for all coins owned by address: {active_address} are {:#?}\", total_balance);\n   Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Running Move Unit Tests\nDESCRIPTION: Execute unit tests for the Move package using sui move test command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move test\n```\n\n----------------------------------------\n\nTITLE: Placing Limit Order with Metadata in Move\nDESCRIPTION: Places a limit order on the CLOB and returns fill information along with metadata. This function is not fully implemented and will abort.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_28\n\nLANGUAGE: Move\nCODE:\n```\npublic fun place_limit_order_with_metadata<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _client_order_id: u64,\n    _price: u64,\n    _quantity: u64,\n    _self_matching_prevention: u8,\n    _is_bid: bool,\n    _expire_timestamp: u64,\n    _restriction: u8,\n    _clock: &Clock,\n    _account_cap: &AccountCap,\n    _ctx: &mut TxContext\n): (u64, u64, bool, u64, vector<MatchedOrderMetadata<BaseAsset, QuoteAsset>>) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Installing libclang-dev on Linux\nDESCRIPTION: Command to install libclang-dev on Linux systems using apt-get. This library is required for Sui development.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo apt-get install libclang-dev\n```\n\n----------------------------------------\n\nTITLE: Type Parameters in Functions\nDESCRIPTION: Demonstrates how to use type parameters in function declarations, including constraints.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nfun id<T>(x: T): T { x }\nfun example<T1: copy, T2>(x: T1, y: T2): (T1, T1, T2) { (copy x, x, y) }\n```\n\n----------------------------------------\n\nTITLE: Basic Module Syntax in Move\nDESCRIPTION: Demonstrates the basic syntax for declaring a module in Move language. The syntax includes the address, identifier, and the module body which can contain uses, types, functions, and constants.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/modules.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmodule <address>::<identifier> {\n    (<use> | <type> | <function> | <constant>)*\n}\n```\n\n----------------------------------------\n\nTITLE: UpgradeTicket Struct Definition in Sui Move\nDESCRIPTION: This Move struct defines the UpgradeTicket object, which serves as proof that an upgrade has been authorized for a specific package, policy, and digest. It ensures that the upgrade performed matches the authorized upgrade and must be used within the same transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nmodule sui::package {\n    /// Proof that an upgrade has been authorized by the `UpgradeCap` owner.\n    /// This lives only for the duration of the upgrade transaction.\n    struct UpgradeTicket has drop, store {\n        id: UID,\n        cap: ID,\n        policy: u8,\n        digest: vector<u8>,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Validator Addresses in Sui System (Rust)\nDESCRIPTION: This function returns a vector of addresses for all active validators in the ValidatorSet. It iterates through the active_validators field of the ValidatorSet struct and collects their sui_addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_64\n\nLANGUAGE: Rust\nCODE:\n```\npublic(package) fun active_validator_addresses(self: &ValidatorSet): vector<address> {\n    let vs = &self.active_validators;\n    let mut res = vector[];\n    vs.do_ref!(|v| res.push_back(v.sui_address()));\n    res\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Sui CLI Version\nDESCRIPTION: Command to verify the installation of Sui CLI and check its version. This is a prerequisite for creating a Sui dApp.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ sui --version\n```\n\n----------------------------------------\n\nTITLE: Public Transfer of Object with Store Ability in Move\nDESCRIPTION: Transfers ownership of an object with 'store' ability to a recipient address. This function allows transfer of objects outside their defining module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun public_transfer<T: key + store>(obj: T, recipient: address) {\n    transfer_impl(obj, recipient)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using DeepBook Market Maker in Sui Blockchain with TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DeepBook Market Maker client with private key and balance managers, then perform various operations including checking balances, retrieving market data, managing deposits/withdrawals, and executing custom transactions like limit orders and flash loans.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Transaction } from '@mysten/sui/transactions';\n\nimport { DeepBookMarketMaker } from './deepbookMarketMaker.js';\n\n(async () => {\n\tconst privateKey = ''; // Can encapsalate this in a .env file\n\n\t// Initialize with balance managers if created\n\tconst balanceManagers = {\n\t\tMANAGER_1: {\n\t\t\taddress: '',\n\t\t\ttradeCap: '',\n\t\t},\n\t};\n\tconst mmClient = new DeepBookMarketMaker(privateKey, 'testnet', balanceManagers);\n\n\tconst tx = new Transaction();\n\n\t// Read only call\n\tconsole.log(await mmClient.checkManagerBalance('MANAGER_1', 'SUI'));\n\tconsole.log(await mmClient.getLevel2Range('SUI_DBUSDC', 0.1, 100, true));\n\n\t// Balance manager contract call\n\tmmClient.balanceManager.depositIntoManager('MANAGER_1', 'DBUSDT', 10000)(tx);\n\tmmClient.balanceManager.withdrawAllFromManager(\n\t\t'MANAGER_1',\n\t\t'DBUSDT',\n\t\tmmClient.getActiveAddress(),\n\t)(tx);\n\n\t// Example custom PTB call in DeepBookMarketMaker class\n\tmmClient.placeLimitOrderExample(tx);\n\tmmClient.flashLoanExample(tx);\n\n\tlet res = await mmClient.signAndExecute(tx);\n\n\tconsole.dir(res, { depth: null });\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing Blake2b-256 Hash Function in Move\nDESCRIPTION: Computes the Blake2b-256 hash of arbitrary binary data. This native function takes a vector of bytes as input and returns a 32-byte hash.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/hash.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun blake2b256(data: &vector<u8>): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Query Account Balance in Move\nDESCRIPTION: Function to query user balances inside custodian for both base and quote assets. Returns available and locked amounts for both asset types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_37\n\nLANGUAGE: Move\nCODE:\n```\npublic fun account_balance<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n    account_cap: &AccountCap\n): (u64, u64, u64, u64) {\n    let owner = account_owner(account_cap);\n    let (base_avail, base_locked) = custodian::account_balance(&pool.base_custodian, owner);\n    let (quote_avail, quote_locked) = custodian::account_balance(&pool.quote_custodian, owner);\n    (base_avail, base_locked, quote_avail, quote_locked)\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Custom Event in Move\nDESCRIPTION: Example of using the sui::event::emit function to create and send a custom MoveEvent in a marketplace module. The event contains item_id and buyer information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/event.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nmodule my::marketplace {\nuse sui::event;\n/* ... */\nstruct ItemPurchased has copy, drop {\nitem_id: ID, buyer: address\n}\nentry fun buy(/* .... */) {\n/* ... */\nevent::emit(ItemPurchased { item_id: ..., buyer: .... })\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Candidate Validator Commission Rate in Move\nDESCRIPTION: This function allows setting a new commission rate for candidate validators. It takes a mutable reference to the SuiSystemState, the new commission rate, and the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun set_candidate_validator_commission_rate(\n    wrapper: &mut SuiSystemState,\n    new_commission_rate: u64,\n    ctx: &mut TxContext,\n) {\n    wrapper\n        .load_system_state_mut()\n        .set_candidate_validator_commission_rate(new_commission_rate, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Struct SUI\nDESCRIPTION: The `SUI` struct represents the SUI coin in the Sui ecosystem. It is designed to include the `drop` capability, indicating its management requirement. The struct itself does not have fields and serves as a definitional component for transactions and operations performed with the SUI token.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/sui.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct SUI has drop\n```\n\n----------------------------------------\n\nTITLE: Defining Coin Struct in Move\nDESCRIPTION: Definition of the Coin struct which represents a fungible token in Sui. It contains a unique identifier and a balance of type T, and is transferable and storable.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic struct Coin<phantom T> has key, store {\n    id: sui::object::UID,\n    balance: sui::balance::Balance<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Sui Balance Using Rust SDK\nDESCRIPTION: This Rust code example shows how to use the Sui SDK to query the balance of a Sui address. It demonstrates creating a SuiClient, parsing a Sui address, and calling the get_balance method.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/exchange-integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse std::str::FromStr;\nuse sui_sdk::types::base_types::SuiAddress;\nuse sui_sdk::{SuiClient, SuiClientBuilder};\n\n\n#[tokio::main]\nasync fn main() -> Result<(), anyhow::Error> {\n   let sui = SuiClientBuilder::default().build(\n      \"https://fullnode.devnet.sui.io:443\",\n   ).await.unwrap();\n   let address = SuiAddress::from_str(\"0x849d63687330447431a2e76fecca4f3c10f6884ebaa9909674123c6c662612a3\")?;\n   let objects = sui.read_api().get_balance(address).await?;\n   println!(\"{:?}\", objects);\n   Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Dynamic Field in Move\nDESCRIPTION: This snippet demonstrates how to remove a dynamic field from an object using the Sui framework, returning the value associated with the field while ensuring safety checks are upheld.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/dynamic-fields.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\n{@inject: crates/sui-framework/packages/sui-framework/sources/dynamic_field.move#fun=remove noComments}\n```\n\nLANGUAGE: Move\nCODE:\n```\n{@inject: examples/move/dynamic_fields/sources/example.move#fun=delete_child,reclaim_child noComments}\n```\n\n----------------------------------------\n\nTITLE: Multiple Coin Transfers in Sui Transaction\nDESCRIPTION: This snippet shows how to perform multiple coin transfers in a single transaction. It splits the gas coin into multiple coins based on a list of transfers and then creates a transfer transaction for each coin.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Transfer {\n\tto: string;\n\tamount: number;\n}\n\n// Procure a list of some Sui transfers to make:\nconst transfers: Transfer[] = getTransfers();\n\nconst tx = new Transaction();\n\n// First, split the gas coin into multiple coins:\nconst coins = tx.splitCoins(\n\ttx.gas,\n\ttransfers.map((transfer) => tx.pure(transfer.amount)),\n);\n\n// Next, create a transfer transaction for each coin:\ntransfers.forEach((transfer, index) => {\n\ttx.transferObjects([coins[index]], tx.pure(transfer.to));\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling a Sui Kiosk Extension\nDESCRIPTION: Implements the enable function to re-enable a previously disabled extension, allowing it to call protected actions again.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun enable<Ext: drop>(self: &mut Kiosk, cap: &KioskOwnerCap) {\n    assert!(self.has_access(cap), ENotOwner);\n    assert!(is_installed<Ext>(self), EExtensionNotInstalled);\n    extension_mut<Ext>(self).is_enabled = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Counter Module\nDESCRIPTION: Complete implementation of the counter module including all functionality for creating, incrementing and resetting counters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nmodule counter::counter {\n    use sui::tx_context::{Self, TxContext};\n    use sui::object::{Self, UID};\n    use sui::transfer;\n\n    struct Counter has key {\n        id: UID,\n        owner: address,\n        value: u64\n    }\n\n    public fun create(ctx: &mut TxContext) {\n        let sender = tx_context::sender(ctx);\n        let counter = Counter {\n            id: object::new(ctx),\n            owner: sender,\n            value: 0\n        };\n        transfer::share_object(counter);\n    }\n\n    public entry fun increment(counter: &mut Counter) {\n        counter.value = counter.value + 1;\n    }\n\n    public entry fun set_value(counter: &mut Counter, value: u64, ctx: &TxContext) {\n        assert!(tx_context::sender(ctx) == counter.owner, 0);\n        counter.value = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming TransferRequest in Move\nDESCRIPTION: This function authorizes a TransferRequest by ensuring all required rules are satisfied. It processes the TransferRequest against the TransferPolicy's rules, confirming rule completion before authorizing the transfer.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic fun confirm_request<T>(\n    self: &TransferPolicy<T>,\n    request: TransferRequest<T>,\n): (ID, u64, ID) {\n    let TransferRequest { item, paid, from, receipts } = request;\n    let mut completed = receipts.into_keys();\n    let mut total = completed.length();\n    assert!(total == self.rules.size(), EPolicyNotSatisfied);\n    while (total > 0) {\n        let rule_type = completed.pop_back();\n        assert!(self.rules.contains(&rule_type), EIllegalRule);\n        total = total - 1;\n    };\n    (item, paid, from)\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Sui dApp with React Template\nDESCRIPTION: Commands to create a new Sui dApp using pnpm or yarn, with a pre-configured React template.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/client-tssdk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm create @mysten/dapp --template react-client-dapp\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn create @mysten/dapp --template react-client-dapp\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction Blocks with GraphQL Mutation in Sui\nDESCRIPTION: A GraphQL mutation query for executing a transaction block in Sui. It takes serialized transaction bytes and signatures as inputs and returns execution errors, status, epoch information, and gas effects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/graphql-rpc.mdx#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($tx: String!, $sigs: [String!]!) {\n  executeTransactionBlock(txBytes: $tx, signatures: $sigs) {\n    errors\n    effects {\n      status\n      epoch {\n        startTimestamp\n      }\n      gasEffects {\n        gasSummary {\n          computationCost\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing libpq on macOS (Optional)\nDESCRIPTION: Command to install libpq on macOS using Homebrew. This library is required if you plan to use PostgreSQL with Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install libpq\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sui Address with CLI\nDESCRIPTION: This command generates a new Sui address using the 'ed25519' keypair scheme via the Sui client CLI. This is one method for obtaining a unique address on the Sui network for transactions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/get-address.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsui client new-address ed25519\n```\n\n----------------------------------------\n\nTITLE: List Addresses and Aliases using Sui CLI\nDESCRIPTION: This command lists all addresses managed by the Sui CLI, along with their associated aliases and indicates which address is currently active. It is useful for managing multiple identities and quickly identifying the current active address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client addresses\"\n```\n\n----------------------------------------\n\nTITLE: Receiving Owned Object in Sui Move\nDESCRIPTION: Allows receiving an object of type T owned by a parent, with custom bytecode verification rules ensuring the object is defined in the invoking module. Requires mutable access to the parent object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun receive<T: key>(parent: &mut UID, to_receive: Receiving<T>): T {\n    let Receiving { id, version } = to_receive;\n    receive_impl(parent.to_address(), id, version)\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer Coin Ownership in Move\nDESCRIPTION: This example demonstrates how to transfer a Coin object from one address to another using the `public_transfer` function in Sui. After the transfer, the Coin object will be owned by the recipient address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/address-owned.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\ntransfer::public_transfer(C, @0xB0B);\n```\n\n----------------------------------------\n\nTITLE: Creating DeepBookClient with Basic Authentication\nDESCRIPTION: Initializes a DeepBookClient with a SuiClient and keypair for signing transactions. This example shows the basic structure of a DeepBookMarketMaker class that can interact with DeepBook.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DeepBookClient } from '@mysten/deepbook-v3';\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { decodeSuiPrivateKey } from '@mysten/sui/cryptography';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\n\nclass DeepBookMarketMaker {\n\tdbClient: DeepBookClient; // For building transactions\n\tsuiClient: SuiClient; // For executing transactions\n\tkeypair: Ed25519Keypair; // For signing transactions\n\n\tconstructor(privateKey: string, env: 'testnet' | 'mainnet') {\n\t\tthis.keypair = this.getSignerFromPK(privateKey);\n\t\tthis.suiClient = new SuiClient({\n\t\t\turl: getFullnodeUrl(env),\n\t\t});\n\t\tthis.dbClient = new DeepBookClient({\n\t\t\taddress: this.getActiveAddress(),\n\t\t\tenv: env,\n\t\t\tclient: this.suiClient,\n\t\t});\n\t}\n\n\tgetSignerFromPK = (privateKey: string): Ed25519Keypair => {\n\t\tconst { schema, secretKey } = decodeSuiPrivateKey(privateKey);\n\t\tif (schema === 'ED25519') return Ed25519Keypair.fromSecretKey(secretKey);\n\n\t\tthrow new Error(`Unsupported schema: ${schema}`);\n\t};\n\n\tgetActiveAddress() {\n\t\treturn this.keypair.toSuiAddress();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Package Upgrade Policies in Sui Move\nDESCRIPTION: This function restricts the upgrade policy of an UpgradeCap. It verifies that the new policy is not more permissive than the current one, preventing policy relaxation, and then updates the policy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_26\n\nLANGUAGE: move\nCODE:\n```\nfun restrict(cap: &mut UpgradeCap, policy: u8) {\n    assert!(cap.policy <= policy, ETooPermissive);\n    cap.policy = policy;\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Proceeds from a Kiosk using PTB\nDESCRIPTION: This JavaScript snippet shows how to withdraw proceeds from a completed sale in a Sui Kiosk using Programmable Transaction Blocks. It demonstrates two ways to call the 'withdraw' function from the 'kiosk' module: withdrawing a specific amount or withdrawing all proceeds.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = new Transaction();\nlet kioskArg = tx.object('<ID>');\nlet capArg = tx.object('<ID>');\n\n// because the function uses an Option<u64> argument,\n// constructing is a bit more complex\nlet amountArg = tx.moveCall({\n\ttarget: '0x1::option::some',\n\targuments: [tx.pure.u64('<amount>')],\n\ttypeArguments: ['u64'],\n});\n\n// alternatively\nlet withdrawAllArg = tx.moveCall({\n\ttarget: '0x1::option::none',\n\ttypeArguments: ['u64'],\n});\n\nlet coin = tx.moveCall({\n\ttarget: '0x2::kiosk::withdraw',\n\targuments: [kioskArg, capArg, amountArg],\n\ttypeArguments: ['u64'],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component in React for Sui Blockchain\nDESCRIPTION: This code snippet defines a Counter component that displays the current count and provides buttons to increment and reset the counter. It uses Sui blockchain queries and transactions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useCurrentAccount,\n  useSuiClientQuery,\n} from \"@mysten/dapp-kit\";\nimport { SuiObjectData } from \"@mysten/sui/client\";\nimport { Button, Flex, Heading, Text } from \"@radix-ui/themes\";\nimport { useState } from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\n\nexport function Counter({ id }: { id: string }) {\n  const currentAccount = useCurrentAccount();\n  const { data, isPending, error, refetch } = useSuiClientQuery(\"getObject\", {\n    id,\n    options: {\n      showContent: true,\n      showOwner: true,\n    },\n  });\n\n  const [waitingForTxn, setWaitingForTxn] = useState(\"\");\n\n  const executeMoveCall = (method: \"increment\" | \"reset\") => {\n    // TODO\n  };\n\n  if (isPending) return <Text>Loading...</Text>;\n\n  if (error) return <Text>Error: {error.message}</Text>;\n\n  if (!data.data) return <Text>Not found</Text>;\n\n  const ownedByCurrentAccount =\n    getCounterFields(data.data)?.owner === currentAccount?.address;\n\n  return (\n    <>\n      <Heading size=\"3\">Counter {id}</Heading>\n\n      <Flex direction=\"column\" gap=\"2\">\n        <Text>Count: {getCounterFields(data.data)?.value}</Text>\n        <Flex direction=\"row\" gap=\"2\">\n          <Button\n            onClick={() => executeMoveCall(\"increment\")}\n            disabled={waitingForTxn !== \"\"}\n          >\n            {waitingForTxn === \"increment\" ? (\n              <ClipLoader size={20} />\n            ) : (\n              \"Increment\"\n            )}\n          </Button>\n          {ownedByCurrentAccount ? (\n            <Button\n              onClick={() => executeMoveCall(\"reset\")}\n              disabled={waitingForTxn !== \"\"}\n            >\n              {waitingForTxn === \"reset\" ? (\n                <ClipLoader size={20} />\n              ) : (\n                \"Reset\"\n              )}\n            </Button>\n          ) : null}\n        </Flex>\n      </Flex>\n    </>\n  );\n}\nfunction getCounterFields(data: SuiObjectData) {\n  if (data.content?.dataType !== \"moveObject\") {\n    return null;\n  }\n\n  return data.content.fields as { value: number; owner: string };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Escrow Mutations in TypeScript\nDESCRIPTION: Contains mutation hooks for creating, canceling, and accepting escrows. Uses SUI blockchain transactions and React Query for state management. Includes type-safe transaction builders and error handling.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CONSTANTS, QueryKey } from \"@/constants\";\nimport { useTransactionExecution } from \"@/hooks/useTransactionExecution\";\nimport { ApiEscrowObject, ApiLockedObject } from \"@/types/types\";\nimport { useCurrentAccount, useSuiClient } from \"@mysten/dapp-kit\";\nimport { SuiObjectData } from \"@mysten/sui/client\";\nimport { Transaction } from \"@mysten/sui/transactions\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\n/**\n * Builds and executes the PTB to create an escrow.\n */\nexport function useCreateEscrowMutation() {\n  const currentAccount = useCurrentAccount();\n  const executeTransaction = useTransactionExecution();\n\n  return useMutation({\n    mutationFn: async ({\n      object,\n      locked,\n    }: {\n      object: SuiObjectData;\n      locked: ApiLockedObject;\n    }) => {\n      if (!currentAccount?.address)\n        throw new Error(\"You need to connect your wallet!\");\n\n      const txb = new Transaction();\n      txb.moveCall({\n        target: `${CONSTANTS.escrowContract.packageId}::shared::create`,\n        arguments: [\n          txb.object(object.objectId!),\n          txb.pure.id(locked.keyId),\n          txb.pure.address(locked.creator!),\n        ],\n        typeArguments: [object.type!],\n      });\n\n      return executeTransaction(txb);\n    },\n  });\n}\n\n/**\n * Builds and executes the PTB to cancel an escrow.\n */\nexport function useCancelEscrowMutation() {\n  const currentAccount = useCurrentAccount();\n  const executeTransaction = useTransactionExecution();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      escrow,\n      suiObject,\n    }: {\n      escrow: ApiEscrowObject;\n      suiObject: SuiObjectData;\n    }) => {\n      if (!currentAccount?.address)\n        throw new Error(\"You need to connect your wallet!\");\n      const txb = new Transaction();\n\n      const item = txb.moveCall({\n        target: `${CONSTANTS.escrowContract.packageId}::shared::return_to_sender`,\n        arguments: [txb.object(escrow.objectId)],\n        typeArguments: [suiObject?.type!],\n      });\n\n      txb.transferObjects([item], txb.pure.address(currentAccount?.address!));\n\n      return executeTransaction(txb);\n    },\n\n    onSuccess: () => {\n      setTimeout(() => {\n        queryClient.invalidateQueries({ queryKey: [QueryKey.Escrow] });\n      }, 1_000);\n    },\n  });\n}\n\n/**\n * Builds and executes the PTB to accept an escrow.\n */\nexport function useAcceptEscrowMutation() {\n  const currentAccount = useCurrentAccount();\n  const client = useSuiClient();\n  const executeTransaction = useTransactionExecution();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      escrow,\n      locked,\n    }: {\n      escrow: ApiEscrowObject;\n      locked: ApiLockedObject;\n    }) => {\n      if (!currentAccount?.address)\n        throw new Error(\"You need to connect your wallet!\");\n      const txb = new Transaction();\n\n      const escrowObject = await client.multiGetObjects({\n        ids: [escrow.itemId, locked.itemId],\n        options: {\n          showType: true,\n        },\n      });\n\n      const escrowType = escrowObject.find(\n        (x) => x.data?.objectId === escrow.itemId,\n      )?.data?.type;\n\n      const lockedType = escrowObject.find(\n        (x) => x.data?.objectId === locked.itemId,\n      )?.data?.type;\n\n      if (!escrowType || !lockedType) {\n        throw new Error(\"Failed to fetch types.\");\n      }\n\n      const item = txb.moveCall({\n        target: `${CONSTANTS.escrowContract.packageId}::shared::swap`,\n        arguments: [\n          txb.object(escrow.objectId),\n          txb.object(escrow.keyId),\n          txb.object(locked.objectId),\n        ],\n        typeArguments: [escrowType, lockedType],\n      });\n\n      txb.transferObjects([item], txb.pure.address(currentAccount.address));\n\n      return executeTransaction(txb);\n    },\n\n    onSuccess: () => {\n      setTimeout(() => {\n        queryClient.invalidateQueries({ queryKey: [QueryKey.Escrow] });\n      }, 1_000);\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Coins as Stake in Move\nDESCRIPTION: This function allows adding stake to a validator's pool using multiple coins. It takes a vector of Coin<SUI>, an optional stake amount, the validator's address, and the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun request_add_stake_mul_coin(\n    wrapper: &mut SuiSystemState,\n    stakes: vector<Coin<SUI>>,\n    stake_amount: option::Option<u64>,\n    validator_address: address,\n    ctx: &mut TxContext,\n) {\n    let staked_sui = wrapper\n        .load_system_state_mut()\n        .request_add_stake_mul_coin(stakes, stake_amount, validator_address, ctx);\n    transfer::public_transfer(staked_sui, ctx.sender());\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Map Ref Macro Implementation in Rust\nDESCRIPTION: Maps a vector to a new vector by applying a function to references of each element while preserving order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_16\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun map_ref<$T, $U>($v: &vector<$T>, $f: |&$T| -> $U): vector<$U> {\n    let v = $v;\n    let mut r = vector[];\n    v.do_ref!(|e| r.push_back($f(e)));\n    r\n}\n```\n\n----------------------------------------\n\nTITLE: Package Manifest Configuration in Move.toml\nDESCRIPTION: Defines the package manifest for the escrow contract, including dependencies and addresses for the Sui framework.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"escrow\"\nversion = \"0.0.1\"\n\n[dependencies]\nSui = { git = \"https://github.com/MystenLabs/sui.git\", subdir = \"crates/sui-framework/packages/sui-framework\", rev = \"testnet\" }\n\n[addresses]\nescrow = \"0x0\"\nsui = \"0x2\"\n```\n\n----------------------------------------\n\nTITLE: Adding Display Field - Move\nDESCRIPTION: Adds a new name-value pair to the Display object's fields.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun add<T: key>(self: &mut Display<T>, name: String, value: String) {\n    self.add_internal(name, value)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting StakedSui to FungibleStakedSui in Move\nDESCRIPTION: This function converts a StakedSui object into a FungibleStakedSui object. It takes a mutable reference to SuiSystemState, a StakedSui object, and the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun convert_to_fungible_staked_sui(\n    wrapper: &mut SuiSystemState,\n    staked_sui: StakedSui,\n    ctx: &mut TxContext,\n): FungibleStakedSui {\n    wrapper.load_system_state_mut().convert_to_fungible_staked_sui(staked_sui, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Escrow Dashboard Implementation in React\nDESCRIPTION: React component implementing the escrow dashboard with tabs for browsing locked objects and viewing pending requests. Includes integration with the Escrow and LockedList components.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { Tabs, Tooltip } from \"@radix-ui/themes\";\nimport { LockedList } from \"../components/locked/ApiLockedList\";\nimport { EscrowList } from \"../components/escrows/EscrowList\";\nimport { InfoCircledIcon } from \"@radix-ui/react-icons\";\nimport { useCurrentAccount } from \"@mysten/dapp-kit\";\n\nexport function EscrowDashboard() {\n  const account = useCurrentAccount();\n  const tabs = [\n    {\n      name: \"Browse Locked Objects\",\n      component: () => (\n        <LockedList\n          params={{\n            deleted: \"false\",\n          }}\n          enableSearch\n        />\n      ),\n      tooltip: \"Browse locked objects you can trade for.\",\n    },\n    {\n      name: \"My Pending Requests\",\n      component: () => (\n        <EscrowList\n          params={{\n            sender: account?.address,\n            swapped: \"false\",\n            cancelled: \"false\",\n          }}\n          enableSearch\n        />\n      ),\n      tooltip: \"Escrows you have initiated for third party locked objects.\",\n    },\n  ];\n\n  const [tab, setTab] = useState(tabs[0].name);\n\n  return (\n    <Tabs.Root value={tab} onValueChange={setTab}>\n      /* Dashboard JSX content */\n    </Tabs.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Dice Roll in Sui Move\nDESCRIPTION: This snippet demonstrates how to create a RandomGenerator instance and use it to generate a random dice roll between 1 and 6.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/randomness-onchain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nentry fun roll_dice(r: &Random, ctx: &mut TxContext): Dice {\n  let mut generator = new_generator(r, ctx); // generator is a PRG\n  Dice { value: random::generate_u8_in_range(&mut generator, 1, 6) }\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Execution Hook Implementation\nDESCRIPTION: Custom React hook for handling transaction signing and execution with status notifications using the Sui Wallet Kit.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Transaction } from '@mysten/sui/transactions';\nimport { useWalletKit } from '@mysten/wallet-kit';\nimport { toast } from 'react-hot-toast';\n\nimport { useSui } from './useSui';\n\nexport const useSignAndExecuteTransaction = () => {\n\tconst { executeSignedTransaction } = useSui();\n\tconst { signTransaction } = useWalletKit();\n\tconst handleSignAndExecuteTransaction = async (\n\t\ttx: Transaction,\n\t\toperation: String,\n\t\tsetIsLoading: any,\n\t) => {\n\t\treturn signTransaction({\n\t\t\ttransaction: tx,\n\t\t})\n\t\t\t.then((signedTx: any) => {\n\t\t\t\treturn executeSignedTransaction({\n\t\t\t\t\tsignedTx,\n\t\t\t\t\trequestType: 'WaitForLocalExecution',\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tshowEffects: true,\n\t\t\t\t\t\tshowEvents: true,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t\t.then((resp) => {\n\t\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t\t\tconsole.log(resp);\n\t\t\t\t\t\tif (resp.effects?.status.status === 'success') {\n\t\t\t\t\t\t\tconsole.log(`${operation} operation successful`);\n\t\t\t\t\t\t\ttoast.success(`${operation} operation successful`);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(`${operation} operation failed`);\n\t\t\t\t\t\t\ttoast.error(`${operation} operation failed.`);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t\t\tconsole.log(`${operation} operation failed`);\n\t\t\t\t\t\tconsole.log(`${operation} error : `, err);\n\t\t\t\t\t\ttoast.error(`Something went wrong, ${operation} operation failed.`);\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tsetIsLoading(false);\n\t\t\t\tconsole.log(`signing goes wrong ${operation} error : `, err);\n\t\t\t\ttoast.error(`signing goes wrong, ${operation} operation failed.`);\n\t\t\t});\n\t};\n\treturn { handleSignAndExecuteTransaction };\n};\n```\n\n----------------------------------------\n\nTITLE: Vector Map Macro Implementation in Rust\nDESCRIPTION: Maps a vector to a new vector by applying a function to each element while preserving order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_15\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun map<$T, $U>($v: vector<$T>, $f: |$T| -> $U): vector<$U> {\n    let v = $v;\n    let mut r = vector[];\n    v.do!(|e| r.push_back($f(e)));\n    r\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Ed25519 Signatures in Move\nDESCRIPTION: This function verifies an Ed25519 signature against a given public key and message. It takes a 32-byte signature, a 32-byte public key, and a message as inputs. Returns true if the signature is valid, false otherwise.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/ed25519.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun ed25519_verify(\n    signature: &vector<u8>,\n    public_key: &vector<u8>,\n    msg: &vector<u8>,\n): bool;\n```\n\n----------------------------------------\n\nTITLE: Placing Limit Order in Move Contract\nDESCRIPTION: Function to place a limit order on DeepBook. It takes various parameters including pool, price, quantity, and account capability. Returns filled quantities, maker order placement status, and order ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic fun place_limit_order<BaseAsset, QuoteAsset>(\n        pool: &mut Pool<BaseAsset, QuoteAsset>,\n        price: u64,\n        quantity: u64,\n        is_bid: bool,\n        expire_timestamp: u64,\n        restriction: u8,\n        clock: &Clock,\n        account_cap: &AccountCap,\n        ctx: &mut TxContext\n    ): (u64, u64, bool, u64)\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA2-256 Hashing in Sui Move\nDESCRIPTION: Example smart contract demonstrating SHA2-256 hashing using the Move Standard Library. Creates an Output object containing the hash value and transfers it to a recipient. Uses std::hash module for SHA2-256 implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/hashing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nmodule test::hashing_std {\n    use std::hash;\n    use sui::object::{Self, UID};\n    use sui::tx_context::TxContext;\n    use sui::transfer;\n    use std::vector;\n\n    /// Object that holds the output hash value.\n    struct Output has key, store {\n        id: UID,\n        value: vector<u8>\n    }\n\n    public fun hash_data(data: vector<u8>, recipient: address, ctx: &mut TxContext) {\n        let hashed = Output {\n            id: object::new(ctx),\n            value: hash::sha2_256(data),\n        };\n        // Transfer an output data object holding the hashed data to the recipient.\n        transfer::public_transfer(hashed, recipient)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Casting System in Move\nDESCRIPTION: Functions for managing upvotes and maintaining ordered lists of top reviews with functionality for updating scores, reordering reviews, and pruning the top reviews list.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\n/// Upvotes a review and reorders top_reviews\npublic fun upvote(service: &mut Service, review_id: ID) {\n    let review = &mut service.reviews[review_id];\n    review.upvote();\n    service.reorder(review_id, review.get_total_score());\n}\n\n/// Reorders top_reviews after a review is updated\n/// If the review is not in top_reviews, it will be added if it is in the top 10\n/// Otherwise, it will be reordered\nfun reorder(\n    service: &mut Service,\n    review_id: ID,\n    total_score: u64\n) {\n    let (contains, idx) = service.top_reviews.index_of(&review_id);\n    if (!contains) {\n        service.update_top_reviews(review_id, total_score);\n    } else {\n        service.top_reviews.remove(idx);\n        let idx = service.find_idx(total_score);\n        service.top_reviews.insert(review_id, idx);\n    }\n}\n\n/// Updates top_reviews if necessary\nfun update_top_reviews(\n    service: &mut Service,\n    review_id: ID,\n    total_score: u64\n) {\n    if (service.should_update_top_reviews(total_score)) {\n        let idx = service.find_idx(total_score);\n        service.top_reviews.insert(review_id, idx);\n        service.prune_top_reviews();\n    };\n}\n\n/// Finds the index of a review in top_reviews\nfun find_idx(service: &Service, total_score: u64): u64 {\n    let mut i = service.top_reviews.length();\n    while (0 < i) {\n        let review_id = service.top_reviews[i - 1];\n        if (service.get_total_score(review_id) > total_score) {\n            break\n        };\n        i = i - 1;\n    };\n    i\n}\n\n/// Prunes top_reviews if it exceeds MAX_REVIEWERS_TO_REWARD\nfun prune_top_reviews(\n    service: &mut Service\n) {\n    let len = service.top_reviews.length();\n    if (len > MAX_REVIEWERS_TO_REWARD) {\n        service.top_reviews.pop_back();\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkpoint Dumping for Sui Full Node in YAML\nDESCRIPTION: YAML configuration for enabling checkpoint dumping on a Sui Full node. This setup allows the node to dump executed checkpoints as files to a local directory for local indexer ingestion.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/custom-indexer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncheckpoint-executor-config:\n  checkpoint-execution-max-concurrency: 200\n  local-execution-timeout-sec: 30\n  data-ingestion-dir: <path to a local directory>\n```\n\n----------------------------------------\n\nTITLE: Query Historical Epoch Information\nDESCRIPTION: Fetches detailed information about a specific historical epoch including stake rewards, gas price, checkpoints and fees.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/graphql-rpc.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  epoch(id: 100) {\n    epochId\n    totalStakeRewards\n    referenceGasPrice\n    totalCheckpoints\n    totalGasFees\n    totalStakeSubsidies\n    storageFund {\n      totalObjectStorageRebates\n      nonRefundableBalance\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FungibleStakedSui Struct in Move\nDESCRIPTION: An alternative to StakedSui that holds pool token amount instead of SUI balance, allowing merging of multiple StakedSui objects from different activation epochs after the initial warmup period.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic struct FungibleStakedSui has key, store\n{\n    id: sui::object::UID,\n    pool_id: sui::object::ID,\n    value: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Sui Full Node Configuration\nDESCRIPTION: Downloads the latest version of the Sui Full node configuration file (fullnode-template.yaml) from the specified URL. This configuration file is essential for setting up and running the Full node correctly.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://github.com/MystenLabs/sui/raw/main/crates/sui-config/data/fullnode-template.yaml\n```\n\n----------------------------------------\n\nTITLE: Check Existence of Dynamic Field with Type\nDESCRIPTION: Verifies if an object has a dynamic field with specified name and value type. Returns a boolean indicating existence.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun exists_with_type<Name: copy + drop + store, Value: key + store>(\n    object: &UID,\n    name: Name,\n): bool {\n    exists_with_type_impl!<_, Value>(object, name)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Module Aliasing in Move\nDESCRIPTION: Demonstrates how to create aliases for entire modules using the 'use' keyword.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/uses.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nuse std::vector;\nuse std::option as o;\n```\n\n----------------------------------------\n\nTITLE: Configuring Transfer Policy Rules for Sui Assets in TypeScript\nDESCRIPTION: Code snippet from transferPolicyRules.ts demonstrating how to add floor price, lock, and royalty rules to a transfer policy. Users can uncomment other rules as needed and run this with 'npm run call tp-rules'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\n// A demonstration of using all the available rule add/remove functions.\n      // You can chain these commands.\n      tpTx\n          .addFloorPriceRule('1000')\n          .addLockRule()\n          .addRoyaltyRule(percentageToBasisPoints(10), 0)\n          // .addPersonalKioskRule()\n          // .removeFloorPriceRule()\n          // .removeLockRule()\n          // .removeRoyaltyRule()\n          // .removePersonalKioskRule()\n```\n\n----------------------------------------\n\nTITLE: Defining Lock Struct\nDESCRIPTION: A dynamic field key marking items as locked in the Kiosk, preventing removal except through purchase.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Lock has copy, drop, store {\n    id: sui::object::ID\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Sui Node Logs\nDESCRIPTION: This command uses journalctl to view and follow the logs of the Sui node in real-time.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ journalctl -u sui-node -f\n```\n\n----------------------------------------\n\nTITLE: Querying Complete Object Information in Sui\nDESCRIPTION: Shows how to retrieve detailed information about a Sui object using the sui client object command. The example displays information for a Coin object including its ID, version, type, ownership, and balance details.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsui client object 0xfffbb30ccb631f15f6cd36700589fc9c31cb04af28a95f3ed26d62daf3acb57f\n```\n\n----------------------------------------\n\nTITLE: Token Struct Definition\nDESCRIPTION: This struct defines the structure of a `Token` object within the Sui framework. Each token has a unique ID (`UID`) and a `Balance` that represents the token's value. The `key` ability indicates that the token can be used as an object ID and stored on-chain.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>public</b> <b>struct</b> <a href=\\\"../sui/token.md#sui_token_Token\\\">Token</a>&lt;<b>phantom</b> T&gt; <b>has</b> <a href=\\\"../sui/token.md#sui_token_key\\\">key</a>\"\n```\n\n----------------------------------------\n\nTITLE: Placing Limit Order using TypeScript SDK\nDESCRIPTION: TypeScript method to place a limit order on DeepBook. It constructs a transaction block for the order placement, taking token types, price, quantity, and other order parameters as inputs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\npublic placeLimitOrder(\n    token1: string,\n    token2: string,\n    price: number,\n    quantity: number,\n    isBid: boolean,\n    expireTimestamp: number,\n    restriction: number,\n    accountCap: string | TransactionArgument,\n    overrides: Overrides = new Overrides(),\n): TransactionBlock {\n    const tokenType1 = convertToTokenType(token1, this.records);\n    const tokenType2 = convertToTokenType(token2, this.records);\n    const poolInfo = getPoolInfoByRecords(tokenType1, tokenType2, this.records);\n    overrides.txb.moveCall({\n        typeArguments: [tokenType1, tokenType2],\n        target: `${this.configs.swapPackageId}::clob::place_limit_order`,\n        arguments: [\n            overrides.txb.object(String(poolInfo.clob)),\n            overrides.txb.pure(Math.floor(price * F)),\n            overrides.txb.pure(quantity),\n            overrides.txb.pure(isBid),\n            overrides.txb.pure(Math.floor(expireTimestamp)),\n            overrides.txb.pure(restriction),\n            overrides.txb.object(normalizeSuiObjectId(this.configs.clock)),\n            typeof accountCap == \"string\" ? overrides.txb.object(accountCap) : accountCap,\n        ],\n    });\n    overrides.txb.setGasBudget(overrides.gasBudget);\n    return overrides.txb;\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Balances in Move\nDESCRIPTION: Combines two balances of the same type T. It adds the value of the second balance to the first and returns the new total value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/balance.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun join<T>(self: &mut Balance<T>, balance: Balance<T>): u64 {\n    let Balance { value } = balance;\n    self.value = self.value + value;\n    self.value\n}\n```\n\n----------------------------------------\n\nTITLE: TickLevel Struct Definition\nDESCRIPTION: TickLevel struct representing a price level in the order book. Contains a price and a linked table of open orders at that price point, enabling efficient order management at each price level.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic struct TickLevel has store {\n    price: u64,\n    open_orders: sui::linked_table::LinkedTable<u64, deepbook::clob::Order>\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Template Structure for Sui Hero Display\nDESCRIPTION: Example JSON template for a Hero object showing how Display properties are structured. It includes name, link, image_url, description, project_url, and creator fields.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/display.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"{name}\",\n    \"link\": \"https://sui-heroes.io/hero/{id}\",\n    \"image_url\": \"https://sui-heroes.io/hero/{image_url}\",\n    \"description\": \"A true Hero of the Sui ecosystem!\",\n    \"project_url\": \"https://sui-heroes.io\",\n    \"creator\": \"Unknown Sui Fan\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bulk Order Cancellation in DeepBookV3 with TypeScript\nDESCRIPTION: Complete implementation for canceling all orders for a balance manager, with function definition and example usage. Shows how to cancel all orders in a specific pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/orders.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n  * @description Cancel all open orders for a balance manager\n  * @param {string} poolKey The key to identify the pool\n  * @param {string} balanceManagerKey The key to identify the BalanceManager\n  * @returns A function that takes a Transaction object\n  */\ncancelAllOrders = (\n  poolKey: string, \n  balanceManagerKey: string\n) => (tx: Transaction) => {}\n\n// Example usage in DeepBookMarketMaker class\n// Cancel order 12345678 in SUI_DBUSDC pool\ncancelOrder = (tx: Transaction) => {\n  const poolKey = 'SUI_DBUSDC'; // Pool key, check constants.ts for more\n  const managerKey = 'MANAGER_1'; // Balance manager key, initialized during client creation by user\n  tx.add(this.deepBook.cancelAllOrders(poolKey, managerKey));\n};\n```\n\n----------------------------------------\n\nTITLE: Publishing Modules in Move VM\nDESCRIPTION: This function allows clients to publish modules in the Move VM. It takes a serialized module, sender address, and gas meter as input. The function performs deserialization, verification, and publication of the module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/spec/vm.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub fn publish_module(\n    &mut self,\n    module: Vec<u8>,\n    sender: AccountAddress,\n    gas_status: &mut impl GasMeter,\n) -> VMResult<()>;\n```\n\n----------------------------------------\n\nTITLE: Implementing GEM Purchase Function in Move for In-Game Currency\nDESCRIPTION: This function handles the purchase of GEMs using SUI. It checks the payment amount, splits the coin if necessary, and mints the appropriate amount of GEMs based on the package size selected.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin/in-game-token.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nentry fun buy_gems(payment: &mut Coin<SUI>, amount: u64, ctx: &mut TxContext) {\n    assert!(amount == GEMS_PRICE_SMALL || amount == GEMS_PRICE_MEDIUM || amount == GEMS_PRICE_LARGE, EInvalidAmount);\n    assert!(coin::value(payment) >= amount, EInsufficientAmount);\n\n    let coin_balance = coin::balance_mut(payment);\n    let paid = balance::split(coin_balance, amount);\n\n    let gems_amount = if (amount == GEMS_PRICE_SMALL) {\n        GEM_AMOUNT_SMALL\n    } else if (amount == GEMS_PRICE_MEDIUM) {\n        GEM_AMOUNT_MEDIUM\n    } else {\n        GEM_AMOUNT_LARGE\n    };\n\n    let treasury = coin::treasury<GEM>();\n    let policy_cap = transfer_policy::new_request(&policy<GEM>(), ctx);\n    let gems = coin::mint(&mut treasury, gems_amount, ctx);\n    transfer_policy::confirm_request(&mut policy_cap, &gems);\n\n    transfer::public_transfer(gems, tx_context::sender(ctx));\n    transfer::public_transfer(coin::from_balance(paid, ctx), package::creator(policy<GEM>()));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up App Router Component\nDESCRIPTION: Main App component handling routing and counter creation/display logic.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton, useCurrentAccount } from \"@mysten/dapp-kit\";\nimport { isValidSuiObjectId } from \"@mysten/sui/utils\";\nimport { Box, Container, Flex, Heading } from \"@radix-ui/themes\";\nimport { useState } from \"react\";\nimport { CreateCounter } from \"./CreateCounter\";\n\nfunction App() {\n  const currentAccount = useCurrentAccount();\n  const [counterId, setCounter] = useState(() => {\n    const hash = window.location.hash.slice(1);\n    return isValidSuiObjectId(hash) ? hash : null;\n  });\n\n  return (\n    <>\n      <Flex\n        position=\"sticky\"\n        px=\"4\"\n        py=\"2\"\n        justify=\"between\"\n        style={{\n          borderBottom: \"1px solid var(--gray-a2)\",\n        }}\n      >\n        <Box>\n          <Heading>dApp Starter Template</Heading>\n        </Box>\n\n        <Box>\n          <ConnectButton />\n        </Box>\n      </Flex>\n      <Container>\n        <Container\n          mt=\"5\"\n          pt=\"2\"\n          px=\"4\"\n          style={{ background: \"var(--gray-a2)\", minHeight: 500 }}\n        >\n          {currentAccount ? (\n            counterId ? (\n              null\n            ) : (\n              <CreateCounter\n                onCreated={(id) => {\n                  window.location.hash = id;\n                  setCounter(id);\n                }}\n              />\n            )\n          ) : (\n            <Heading>Please connect your wallet</Heading>\n          )}\n        </Container>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Writing Struct Fields in Move\nDESCRIPTION: Shows how to modify struct fields using mutable borrows and the dot operator. The example includes updating individual fields and replacing entire nested structs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/structs.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nlet mut foo = Foo { x: 3, y: true };\n*&mut foo.x = 42;     // foo = Foo { x: 42, y: true }\n*&mut foo.y = !foo.y; // foo = Foo { x: 42, y: false }\nlet mut bar = Bar(foo);               // bar = Bar(Foo { x: 42, y: false })\n*&mut bar.0.x = 52;                   // bar = Bar(Foo { x: 52, y: false })\n*&mut bar.0 = Foo { x: 62, y: true }; // bar = Bar(Foo { x: 62, y: true })\n```\n\nLANGUAGE: move\nCODE:\n```\nlet mut foo = Foo { x: 3, y: true };\nfoo.x = 42;     // foo = Foo { x: 42, y: true }\nfoo.y = !foo.y; // foo = Foo { x: 42, y: false }\nlet mut bar = Bar(foo);         // bar = Bar(Foo { x: 42, y: false })\nbar.0.x = 52;                   // bar = Bar(Foo { x: 52, y: false })\nbar.0 = Foo { x: 62, y: true }; // bar = Bar(Foo { x: 62, y: true })\n```\n\nLANGUAGE: move\nCODE:\n```\nlet foo = Foo { x: 3, y: true };\nlet foo_ref = &mut foo;\nfoo_ref.x = foo_ref.x + 1;\n```\n\n----------------------------------------\n\nTITLE: Implementing Plinko Game Smart Contract in Move\nDESCRIPTION: A comprehensive Move smart contract implementing a Plinko game on Sui blockchain. Features include game initialization, stake management, outcome calculation using BLS signatures, and event emissions. Uses dynamic object fields for game state management and implements various safety checks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/plinko.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule plinko::plinko {\n// === Imports ===\nuse sui::coin::{Self, Coin};\nuse sui::balance::Balance;\nuse sui::sui::SUI;\nuse sui::bls12381::bls12381_min_pk_verify;\nuse sui::event::emit;\nuse sui::hash::{blake2b256};\nuse sui::dynamic_object_field::{Self as dof};\n\n// Import Counter NFT module\nuse plinko::counter_nft::Counter;\n\n// Import HouseData module\nuse plinko::house_data::HouseData;\n\n// === Errors ===\nconst EStakeTooLow: u64 = 0;\nconst EStakeTooHigh: u64 = 1;\nconst EInvalidBlsSig: u64 = 2;\nconst EInsufficientHouseBalance: u64 = 5;\nconst EGameDoesNotExist: u64 = 6;\n\n// === Structs ===\n\n/// Represents a game and holds the accrued stake.\npublic struct Game has key, store {\n    id: UID,\n    game_start_epoch: u64,\n    stake: Balance<SUI>,\n    player: address,\n    // The VRF input used to generate the extended beacon\n    vrf_input: vector<u8>,\n    fee_bp: u16\n}\n\n// === Events ===\n\n/// Emitted when a new game has started.\npublic struct NewGame has copy, drop {\n    game_id: ID,\n    player: address,\n    vrf_input: vector<u8>,\n    user_stake: u64,\n    fee_bp: u16\n}\n\n/// Emitted when a game has finished.\npublic struct Outcome has copy, drop {\n    game_id: ID,\n    result: u64,\n    player: address,\n    // The trace path of the extended beacon\n    trace: vector<u8>\n}\n\n// === Public Functions ===\n\n/// Function used to create a new game. The player must provide a Counter NFT and the number of balls.\npublic fun start_game(counter: &mut Counter, num_balls: u64, coin: Coin<SUI>, house_data: &mut HouseData, ctx: &mut TxContext): ID {\n    let fee_bp = house_data.base_fee_in_bp();\n    let (id, new_game) = internal_start_game(counter, num_balls, coin, house_data, fee_bp, ctx);\n    dof::add(house_data.borrow_mut(), id, new_game);\n    id\n}\n\n/// finish_game Completes the game by calculating the outcome and transferring the funds to the player.\n/// The player must provide a BLS signature of the VRF input and the number of balls to calculate the outcome.\n/// It emits an Outcome event with the game result and the trace path of the extended beacon.\npublic fun finish_game(game_id: ID, bls_sig: vector<u8>, house_data: &mut HouseData, num_balls: u64, ctx: &mut TxContext): (u64, address, vector<u8>) {\n    // Ensure that the game exists.\n    assert!(game_exists(house_data, game_id), EGameDoesNotExist);\n\n    // Retrieves and removes the game from HouseData, preparing for outcome calculation.\n    let Game {\n        id,\n        game_start_epoch: _,\n        stake,\n        player,\n        vrf_input,\n        fee_bp: _\n    } = dof::remove<ID, Game>(house_data.borrow_mut(), game_id);\n\n    object::delete(id);\n\n    // Validates the BLS signature against the VRF input.\n    let is_sig_valid = bls12381_min_pk_verify(&bls_sig, &house_data.public_key(), &vrf_input);\n    assert!(is_sig_valid, EInvalidBlsSig);\n\n    // Initialize the extended beacon vector and a counter for hashing.\n    let mut extended_beacon = vector[];\n    let mut counter: u8 = 0;\n\n    // Extends the beacon until it has enough data for all ball outcomes.\n    while (extended_beacon.length() < (num_balls * 12)) {\n        // Create a new vector combining the original BLS signature with the current counter value.\n        let mut hash_input = vector[];\n        hash_input.append(bls_sig);\n        hash_input.push_back(counter);\n        // Generate a new hash block from the unique hash input.\n        let block = blake2b256(&hash_input);\n        // Append the generated hash block to the extended beacon.\n        extended_beacon.append(block);\n        // Increment the counter for the next iteration to ensure a new unique hash input.\n        counter = counter + 1;\n    };\n\n    // Initializes variables for calculating game outcome.\n    let mut trace = vector[];\n    // Calculate the stake amount per ball\n    let stake_per_ball = stake.value<SUI>() / num_balls;\n    let mut total_funds_amount: u64 = 0;\n\n    // Calculates outcome for each ball based on the extended beacon.\n    let mut ball_index = 0;\n    while (ball_index < num_balls) {\n        let mut state: u64 = 0;\n        let mut i = 0;\n        while (i < 12) {\n            // Calculate the byte index for the current ball and iteration.\n            let byte_index = (ball_index * 12) + i;\n            // Retrieve the byte from the extended beacon.\n            let byte = extended_beacon[byte_index];\n            // Add the byte to the trace vector\n            trace.push_back<u8>(byte);\n            // Count the number of even bytes\n            // If even, add 1 to the state\n            // Odd byte -> 0, Even byte -> 1\n            // The state is used to calculate the multiplier index\n            state = if (byte % 2 == 0) { state + 1 } else { state };\n            i = i + 1;\n        };\n\n    // Calculate multiplier index based on state\n    let multiplier_index = state % house_data.multiplier().length();\n    // Retrieve the multiplier from the house data\n    let result = house_data.multiplier()[multiplier_index];\n\n    // Calculate funds amount for this particular ball\n    // Divide by 100 to adjust for multiplier scale and SUI units\n    let funds_amount_per_ball = (result * stake_per_ball)/100;\n    // Add the funds amount to the total funds amount\n    total_funds_amount = total_funds_amount + funds_amount_per_ball;\n    ball_index = ball_index + 1;\n};\n\n// Processes the payout to the player and returns the game outcome.\nlet payout_balance_mut = house_data.borrow_balance_mut();\nlet payout_coin: Coin<SUI> = coin::take(payout_balance_mut, total_funds_amount, ctx);\n\npayout_balance_mut.join(stake);\n\n// transfer the payout coins to the player\ntransfer::public_transfer(payout_coin, player);\n// Emit the Outcome event\nemit(Outcome {\n    game_id,\n    result: total_funds_amount,\n    player,\n    trace\n});\n\n// return the total amount to be sent to the player, (and the player address)\n(total_funds_amount, player, trace)\n\n\n// === Public-View Functions ===\n\n/// Returns the epoch in which the game started.\npublic fun game_start_epoch(game: &Game): u64 {\n    game.game_start_epoch\n}\n\n/// Returns the total stake.\npublic fun stake(game: &Game): u64 {\n    game.stake.value()\n}\n\n/// Returns the player's address.\npublic fun player(game: &Game): address {\n    game.player\n}\n\n/// Returns the player's vrf_input bytes.\npublic fun vrf_input(game: &Game): vector<u8> {\n    game.vrf_input\n}\n\n/// Returns the fee of the game.\npublic fun fee_in_bp(game: &Game): u16 {\n    game.fee_bp\n}\n\n// === Admin Functions ===\n\n/// Helper function to check if a game exists.\npublic fun game_exists(house_data: &HouseData, game_id: ID): bool {\n    dof::exists_(house_data.borrow(), game_id)\n}\n\n/// Helper function to check that a game exists and return a reference to the game Object.\n/// Can be used in combination with any accessor to retrieve the desired game field.\npublic fun borrow_game(game_id: ID, house_data: &HouseData): &Game {\n    assert!(game_exists(house_data, game_id), EGameDoesNotExist);\n    dof::borrow(house_data.borrow(), game_id)\n}\n\n// === Private Functions ===\n\n/// Internal helper function used to create a new game.\n/// The player must provide a guess and a Counter NFT.\n/// Stake is taken from the player's coin and added to the game's stake.\nfun internal_start_game(counter: &mut Counter, num_balls: u64, coin: Coin<SUI>, house_data: &HouseData, fee_bp: u16, ctx: &mut TxContext): (ID, Game) {\n    let user_stake = coin.value();\n    // Ensure that the stake is not higher than the max stake.\n    assert!(user_stake <= house_data.max_stake(), EStakeTooHigh);\n    // Ensure that the stake is not lower than the min stake.\n    assert!(user_stake >= house_data.min_stake(), EStakeTooLow);\n    // Ensure that the house has enough balance to play for this game.\n    assert!(house_data.balance() >= (user_stake*(house_data.multiplier()[0]))/100, EInsufficientHouseBalance);\n\n    // Get the VRF input and increment the counter\n    let vrf_input = counter.get_vrf_input_and_increment(num_balls);\n\n    let id = object::new(ctx);\n    let game_id = object::uid_to_inner(&id);\n\n    // Create a new game object and emit a NewGame event.\n    let new_game = Game {\n        id,\n        game_start_epoch: ctx.epoch(),\n        stake: coin.into_balance<SUI>(),\n        player: ctx.sender(),\n        vrf_input,\n        fee_bp\n    };\n    // Emit a NewGame event\n    emit(NewGame {\n        game_id,\n        player: ctx.sender(),\n        vrf_input,\n        user_stake,\n        fee_bp\n    });\n\n    (game_id, new_game)\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Coin and Token API Function Comparison Table\nDESCRIPTION: A markdown table comparing the available functions between coin and token modules, indicating which operations are supported (+), not supported (-), or require special authorization [protected]. Each function is listed with its availability and relevant notes about usage requirements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/coin-token-comparison.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function                    | Coin | Token       | Note                                                                             |\n|-----------------------------|------|-------------|----------------------------------------------------------------------------------|\\n| `mint`                        | +    | +           | Requires `TreasuryCap`                                                             |\n| `burn`                        | +    | +           | Requires `TreasuryCap`                                                             |\n| `join`                        | +    | +           | Public                                                                           |\n| `split`                       | +    | +           | Public                                                                           |\n| `zero`                        | +    | +           | Public                                                                           |\n| `destroy_zero`                | +    | +           | Public                                                                           |\n| `keep`                        | -    | +           | Send token to sender, not required for coin due to lack of transfer restrictions |\n| `transfer`                    | +    | \\[protected] | Coin is transferable by default, token requires authorization                   |\n| `to_balance`/`to_coin`        | +    | \\[protected] | Token can be converted `to_coin`, requires authorization                        |\n| `from_balance`/`from_coin`    | +    | \\[protected] | Token can be created `from_coin`, requires authorization                        |\n| `spend`                       | -    | \\[protected] | Token can be spent, requires authorization                   |\n```\n\n----------------------------------------\n\nTITLE: Executing a Sui Transaction with SuiClient\nDESCRIPTION: This code snippet demonstrates how to execute a constructed transaction using a SuiClient and KeyPair. It uses the signAndExecuteTransaction method to sign and submit the transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclient.signAndExecuteTransaction({ signer: keypair, transaction: tx });\n```\n\n----------------------------------------\n\nTITLE: Core Option Functions Implementation\nDESCRIPTION: Basic functions for creating and querying Option values including none(), some(), is_none(), is_some() and contains().\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun none<Element>(): Option<Element> {\n    Option { vec: vector::empty() }\n}\n\npublic fun some<Element>(e: Element): Option<Element> {\n    Option { vec: vector::singleton(e) }\n}\n\npublic fun is_none<Element>(t: &Option<Element>): bool {\n    t.vec.is_empty()\n}\n\npublic fun is_some<Element>(t: &Option<Element>): bool {\n    !t.vec.is_empty()\n}\n\npublic fun contains<Element>(t: &Option<Element>, e_ref: &Element): bool {\n    t.vec.contains(e_ref)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing reCAPTCHA with React and DApp Kit in TypeScript\nDESCRIPTION: This code initializes a React application integrating reCAPTCHA with blockchain functionality using DApp Kit. It requires dependencies like `@mysten/dapp-kit`, `@mysten/sui`, `axios`, and `react-google-recaptcha`. The `App.tsx` file handles wallet connections, transaction executions, and validates reCAPTCHA to interact with a smart contract. Key parameters include `SITE_KEY`, `SECRET_KEY`, `packageId`, and `registryId`, necessary for reCAPTCHA and blockchain interactions. The app expects user actions for transaction executions and reCAPTCHA responses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/recaptcha.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport './App.css';\n\nimport {\n\tConnectButton,\n\tuseCurrentAccount,\n\tuseCurrentWallet,\n\tuseSignAndExecuteTransaction,\n} from '@mysten/dapp-kit';\nimport { Transaction } from '@mysten/sui/transactions';\nimport { SUI_CLOCK_OBJECT_ID } from '@mysten/sui/utils';\nimport Axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\ninterface RecaptchaApiResponse {\n\tsuccess: boolean;\n\tchallenge_ts: string; // timestamp of the challenge load (ISO format yyyy-MM-dd'T'HH:mm:ssZZ)\n\thostname: string; // the hostname of the site where the reCAPTCHA was solved\n\tsignature?: Uint8Array;\n\tpubKey?: Uint8Array;\n\tmessage?: Uint8Array;\n\t'error-codes'?: any[]; // optional\n}\n\nfunction App() {\n\tconst { currentWallet } = useCurrentWallet();\n\tconst { mutateAsync: signAndExecuteTransaction } = useSignAndExecuteTransaction();\n\tconst currentAccount = useCurrentAccount();\n\n\tconst SITE_KEY = import.meta.env.VITE_reCAPTCHA_SITE_KEY!;\n\tconst SECRET_KEY = import.meta.env.VITE_reCAPTCHA_SECRET_KEY!;\n\tconst packageId = import.meta.env.VITE_PACKAGE_ID!;\n\tconst registryId = import.meta.env.VITE_REGISTRY_ID!;\n\tconst moduleId: string = 'recaptcha';\n\n\tconst [isRecaptchaValid, setRecaptchaValidation] = useState(false);\n\n\tconst [verificationPassedOneTime, setVerificationPassedOneTime] = useState(false);\n\n\tconst [message, setMessage] = useState(new Uint8Array());\n\tconst [pubKey, setPubKey] = useState(new Uint8Array());\n\tconst [signature, setSignature] = useState(new Uint8Array());\n\n\tconst onChange = async (token: string | null) => {\n\t\tif (token === null) {\n\t\t\tsetRecaptchaValidation(false);\n\t\t} else {\n\t\t\tconst recaptchaApiResponse: RecaptchaApiResponse = await verifyToken(token);\n\n\t\t\tsetRecaptchaValidation(true);\n\n\t\t\tif (!verificationPassedOneTime) setVerificationPassedOneTime(true);\n\n\t\t\tif (recaptchaApiResponse.message !== undefined) setMessage(recaptchaApiResponse.message);\n\t\t\tif (recaptchaApiResponse.pubKey !== undefined) setPubKey(recaptchaApiResponse.pubKey);\n\t\t\tif (recaptchaApiResponse.signature !== undefined)\n\t\t\t\tsetSignature(recaptchaApiResponse.signature);\n\t\t}\n\t};\n\n\tasync function verifyToken(token: string): Promise<RecaptchaApiResponse> {\n\t\ttry {\n\t\t\tconst response = await Axios.post(`https://bot-prevention-api.vercel.app/verify-token`, {\n\t\t\t\tresponse: token,\n\t\t\t\tsecret: SECRET_KEY,\n\t\t\t\tuserAddress: currentAccount?.address,\n\t\t\t});\n\t\t\treturn response['data'];\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t\treturn {} as RecaptchaApiResponse;\n\t}\n\n\tuseEffect(() => {\n\t\t// You can do something with `currentWallet` here.\n\t}, [currentWallet]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ConnectButton />\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tdisabled={!verificationPassedOneTime}\n\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\tconst transaction = new Transaction();\n\n\t\t\t\t\t\ttransaction.moveCall({\n\t\t\t\t\t\t\ttarget: `${packageId}::${moduleId}::interact`,\n\t\t\t\t\t\t\targuments: [transaction.object(registryId), transaction.object(SUI_CLOCK_OBJECT_ID)],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\tawait signAndExecuteTransaction({\n\t\t\t\t\t\t\t\ttransaction: transaction,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tInteract\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tdisabled={!isRecaptchaValid}\n\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\tconst transaction = new Transaction();\n\n\t\t\t\t\t\ttransaction.moveCall({\n\t\t\t\t\t\t\ttarget: `${packageId}::${moduleId}::verify`,\n\t\t\t\t\t\t\targuments: [\n\t\t\t\t\t\t\t\ttransaction.object(registryId),\n\t\t\t\t\t\t\t\ttransaction.pure(signature),\n\t\t\t\t\t\t\t\ttransaction.pure(pubKey),\n\t\t\t\t\t\t\t\ttransaction.pure(message),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\tawait signAndExecuteTransaction({\n\t\t\t\t\t\t\t\ttransaction,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tVerify\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<hr />\n\t\t\t<ReCAPTCHA sitekey={SITE_KEY} onChange={onChange} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Executing a Swap with Shared Objects in Sui Move\nDESCRIPTION: Function to complete a swap using shared objects. The buyer provides the locked object and its key, which is verified against the requested object ID. If successful, the escrowed object is transferred to the buyer and the unlocked object to the seller.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/shared-owned.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic entry fun swap<T: key + store, U: key + store>(\n        escrow: &mut Escrow<T>,\n        locked_exchange: Locked<U>,\n        exchange_key: Key,\n        ctx: &mut TxContext\n    ) {\n        // Unlock the exchange object\n        let exchange = unlock(locked_exchange, exchange_key);\n\n        // Check that the exchange object matches the one that was requested\n        let exchange_key_id = object::id_from_address(object::id_address(&exchange));\n        assert!(exchange_key_id == escrow.exchange_key_id, EWrongObject);\n\n        // Check that we're the intended recipient\n        assert!(tx_context::sender(ctx) == escrow.recipient, EInvalidSender);\n\n        // Take the original object out of the escrow\n        let obj = escrow.obj;\n        // this is a hack: we need a value to replace the field with, but we'll never read it\n        escrow.obj = object::object_from_id(object::new(ctx));\n\n        // Send the objects to the buyer and seller respectively\n        transfer::transfer(exchange, escrow.sender);\n        transfer::transfer(obj, escrow.recipient);\n    }\n```\n\n----------------------------------------\n\nTITLE: DeepBook Swap Implementation Examples\nDESCRIPTION: Complete implementation examples of swap functions within DeepBookMarketMaker class, showing how to handle base and quote asset swaps with parameter configuration and coin transfers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/swaps.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nswapExactBaseForQuote = (tx: Transaction) => {\n  const [baseOut, quoteOut, deepOut] = this.deepBook.swapExactBaseForQuote({\n    poolKey: 'SUI_DBUSDC',\n    amount: 1, // amount of SUI to swap\n    deepAmount: 1, // amount of DEEP to pay as fees, excess is returned\n    minOut: 0.1, // minimum amount of DBUSDC to receive or transactionf fails\n  })(tx);\n\n  // Transfer received coins to own address\n  tx.transferObjects([baseOut, quoteOut, deepOut], this.getActiveAddress());\n};\n\nswapExactQuoteForBase = (tx: Transaction) => {\n  const [baseOut, quoteOut, deepOut] = this.deepBook.swapExactQuoteForBase({\n    poolKey: 'SUI_DBUSDC',\n    amount: 1, // amount of DBUSDC to swap\n    deepAmount: 1, // amount of DEEP to pay as fees, excess is returned\n    minOut: 0.1, // minimum amount of SUI to receive or transactionf fails\n  })(tx);\n\n  // Transfer received coins to own address\n  tx.transferObjects([baseOut, quoteOut, deepOut], this.getActiveAddress());\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Borrow Module in Rust\nDESCRIPTION: This snippet demonstrates how to modify the another_module to use the borrow module, allowing asset retrieval and return within a PTB.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/simulating-refs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nmodule another_module {\n    struct AssetManager has key {\n        asset: Referent<Asset>,\n    }\n\n    public fun get_asset(manager: &mut AssetManager): (Asset, Borrow) {\n        borrow::borrow(&mut manager.asset)\n    }\n\n\n    public fun return_asset(\n        manager: &mut AssetManager,\n        asset: Asset,\n        b: Borrow) {\n            borrow::put_back(&mut manager.asset, asset, b)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custodian Account with TypeScript SDK\nDESCRIPTION: TypeScript implementation for creating a custodian account in DeepBook. Creates an AccountCap object and optionally transfers it to the user's address for later use in placing limit orders.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @description: Create and Transfer custodian account to user\n * @param currentAddress: current user address\n * @param needsTransfer: if needs transfer the cap to user, default true, if false, which means we need to use the cap in the next transaction.\n * @param overrides: overriders for blockchain params. Like gas budget, transaction block and the provider, default we will set to the max gas budget, and create a new transaction block\n * @notice: the packageId should be set in configs.json, if it is not set, the transaction will fail.\n */\nasync createAccount(\n    currentAddress: string,\n    needsTransfer: boolean = true,\n    overrides: Overrides = new Overrides(),\n): Promise<TransactionBlock | TransactionArgument> {\n    let [cap] = overrides.txb.moveCall({\n        typeArguments: [],\n        target: `${this.configs.swapPackageId}::clob::create_account`,\n        arguments: [],\n    });\n    if (!needsTransfer) {\n        return cap;\n    } else {\n        overrides.txb.transferObjects([cap], overrides.txb.pure(currentAddress));\n        overrides.txb.setSenderIfNotSet(currentAddress);\n        overrides.txb.setGasBudget(overrides.gasBudget);\n        return overrides.txb;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Split and Transfer Function\nDESCRIPTION: Splits specified amount from a coin and transfers it to a recipient address\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/pay.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun split_and_transfer<T>(\n    c: &mut Coin<T>,\n    amount: u64,\n    recipient: address,\n    ctx: &mut TxContext,\n) {\n    transfer::public_transfer(c.split(amount, ctx), recipient)\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Borrow Function\nDESCRIPTION: Native function to get immutable reference to element at specified index\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun borrow<Element>(v: &vector<Element>, i: u64): &Element;\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Indexing Logic in TypeScript\nDESCRIPTION: Core event indexer class that polls for new events on the blockchain. It tracks the latest cursor position and processes events through a callback handler, with configurable polling intervals and batch sizes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SuiClient, SuiEventFilter } from '@mysten/sui.js/client';\nimport { SuiEvent } from '@mysten/sui.js/client';\n\nexport interface EventHandler {\n    handleEvent(event: SuiEvent): Promise<void>;\n    maybeGetCheckpoint(): Promise<string | null>;\n}\n\ninterface EventIndexerOptions {\n    pollIntervalMs?: number;\n    batchSize?: number;\n}\n\nexport class EventIndexer {\n    private client: SuiClient;\n    private handler: EventHandler;\n    private cursor: string | null = null;\n    private filter: SuiEventFilter;\n    private isRunning = false;\n    private interval: NodeJS.Timeout | null = null;\n    private options: Required<EventIndexerOptions>;\n\n    constructor(\n        handler: EventHandler,\n        client: SuiClient,\n        filter: SuiEventFilter,\n        options?: EventIndexerOptions\n    ) {\n        this.handler = handler;\n        this.client = client;\n        this.filter = filter;\n        this.options = {\n            pollIntervalMs: options?.pollIntervalMs ?? 10000, // Default to 10 seconds\n            batchSize: options?.batchSize ?? 50, // Default to 50 events per batch\n        };\n    }\n\n    /**\n     * Start the indexer\n     */\n    public async startIndexing(): Promise<void> {\n        if (this.isRunning) {\n            return;\n        }\n\n        this.isRunning = true;\n        const cursorFromStorage = await this.handler.maybeGetCheckpoint();\n        if (cursorFromStorage) {\n            this.cursor = cursorFromStorage;\n            console.log(`Resuming from cursor ${this.cursor}`);\n        }\n\n        // This is not the proper way to use intervals in Node.js,\n        // as it would schedule the next interval before the current one is done\n        // But it's good enough for this example\n        this.interval = setInterval(() => this.poll(), this.options.pollIntervalMs);\n\n        // Run once immediately\n        await this.poll();\n    }\n\n    /**\n     * Stop the indexer\n     */\n    public stopIndexing(): void {\n        if (!this.isRunning) {\n            return;\n        }\n\n        this.isRunning = false;\n        if (this.interval) {\n            clearInterval(this.interval);\n            this.interval = null;\n        }\n    }\n\n    /**\n     * Poll for new events\n     */\n    private async poll(): Promise<void> {\n        try {\n            await this.eventJob();\n        } catch (e) {\n            console.error('Error in event job', e);\n        }\n    }\n\n    /**\n     * The main event job. This function will fetch events from the RPC\n     * and pass them to the handler in the order they appear.\n     */\n    private async eventJob(): Promise<void> {\n        if (!this.isRunning) {\n            return;\n        }\n\n        const { data, hasNextPage, nextCursor } = await this.client.queryEvents({\n            query: this.filter,\n            cursor: this.cursor,\n            limit: this.options.batchSize,\n            descending: false,\n        });\n\n        if (data.length === 0) {\n            return;\n        }\n\n        console.log(`Processing ${data.length} events`);\n        for (const event of data) {\n            try {\n                await this.handler.handleEvent(event);\n            } catch (e) {\n                console.error('Error handling event', e);\n            }\n        }\n\n        this.cursor = nextCursor;\n\n        // If there are more events, process them immediately\n        if (hasNextPage && this.isRunning) {\n            await this.eventJob();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DenyCap struct in Move\nDESCRIPTION: Capability struct that allows freezing addresses to prevent coin interactions. Has key and store abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic struct DenyCap<phantom T> has key, store {\n    id: sui::object::UID\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Key Pairs in Sui Rust SDK\nDESCRIPTION: This code demonstrates how to instantiate a SuiKeyPair and derive its public key and Sui address using the Rust SDK. It shows deterministic generation, random generation, and importing from existing keys.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/sign-and-send-txn.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n    // deterministically generate a keypair, testing only, do not use for mainnet, use the next section to randomly generate a keypair instead.\n    let skp_determ_0 =\n        SuiKeyPair::Ed25519(Ed25519KeyPair::generate(&mut StdRng::from_seed([0; 32])));\n    let _skp_determ_1 =\n        SuiKeyPair::Secp256k1(Secp256k1KeyPair::generate(&mut StdRng::from_seed([0; 32])));\n    let _skp_determ_2 =\n        SuiKeyPair::Secp256r1(Secp256r1KeyPair::generate(&mut StdRng::from_seed([0; 32])));\n\n    // randomly generate a keypair.\n    let _skp_rand_0 = SuiKeyPair::Ed25519(get_key_pair_from_rng(&mut rand::rngs::OsRng).1);\n    let _skp_rand_1 = SuiKeyPair::Secp256k1(get_key_pair_from_rng(&mut rand::rngs::OsRng).1);\n    let _skp_rand_2 = SuiKeyPair::Secp256r1(get_key_pair_from_rng(&mut rand::rngs::OsRng).1);\n\n    // import a keypair from a base64 encoded 32-byte `private key`.\n    let _skp_import_no_flag_0 = SuiKeyPair::Ed25519(Ed25519KeyPair::from_bytes(\n        &Base64::decode(\"1GPhHHkVlF6GrCty2IuBkM+tj/e0jn64ksJ1pc8KPoI=\")\n            .map_err(|_| anyhow!(\"Invalid base64\"))?,\n    )?);\n    let _skp_import_no_flag_1 = SuiKeyPair::Ed25519(Ed25519KeyPair::from_bytes(\n        &Base64::decode(\"1GPhHHkVlF6GrCty2IuBkM+tj/e0jn64ksJ1pc8KPoI=\")\n            .map_err(|_| anyhow!(\"Invalid base64\"))?,\n    )?);\n    let _skp_import_no_flag_2 = SuiKeyPair::Ed25519(Ed25519KeyPair::from_bytes(\n        &Base64::decode(\"1GPhHHkVlF6GrCty2IuBkM+tj/e0jn64ksJ1pc8KPoI=\")\n            .map_err(|_| anyhow!(\"Invalid base64\"))?,\n    )?);\n\n    // import a keypair from a base64 encoded 33-byte `flag || private key`. The signature scheme is determined by the flag.\n    let _skp_import_with_flag_0 =\n        SuiKeyPair::decode_base64(\"ANRj4Rx5FZRehqwrctiLgZDPrY/3tI5+uJLCdaXPCj6C\")\n            .map_err(|_| anyhow!(\"Invalid base64\"))?;\n    let _skp_import_with_flag_1 =\n        SuiKeyPair::decode_base64(\"AdRj4Rx5FZRehqwrctiLgZDPrY/3tI5+uJLCdaXPCj6C\")\n            .map_err(|_| anyhow!(\"Invalid base64\"))?;\n    let _skp_import_with_flag_2 =\n        SuiKeyPair::decode_base64(\"AtRj4Rx5FZRehqwrctiLgZDPrY/3tI5+uJLCdaXPCj6C\")\n            .map_err(|_| anyhow!(\"Invalid base64\"))?;\n\n    // replace `skp_determ_0` with the variable names above\n    let pk = skp_determ_0.public();\n    let sender = SuiAddress::from(&pk);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bridge Instance in Move\nDESCRIPTION: Creates a new Bridge instance with initialized components including committee, treasury, token transfer records, and limiter. This function can only be called by the system address (0x0) and initializes a shared object that's accessible globally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\nfun create(id: UID, chain_id: u8, ctx: &mut TxContext) {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    let bridge_inner = BridgeInner {\n        bridge_version: CURRENT_VERSION,\n        message_version: MESSAGE_VERSION,\n        chain_id,\n        sequence_nums: vec_map::empty(),\n        committee: committee::create(ctx),\n        treasury: treasury::create(ctx),\n        token_transfer_records: linked_table::new(ctx),\n        limiter: limiter::new(),\n        paused: false,\n    };\n    let bridge = Bridge {\n        id,\n        inner: versioned::create(CURRENT_VERSION, bridge_inner, ctx),\n    };\n    transfer::share_object(bridge);\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Package Upgrades in Sui Move\nDESCRIPTION: This function consumes an UpgradeReceipt to update an UpgradeCap, finalizing a package upgrade. It verifies the correct capability is provided, ensures authorization, updates the package reference, and increments the version number.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_25\n\nLANGUAGE: move\nCODE:\n```\npublic fun commit_upgrade(cap: &mut UpgradeCap, receipt: UpgradeReceipt) {\n    let UpgradeReceipt { cap: cap_id, package } = receipt;\n    assert!(object::id(cap) == cap_id, EWrongUpgradeCap);\n    assert!(cap.package.to_address() == @0x0, ENotAuthorized);\n    cap.package = package;\n    cap.version = cap.version + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Hybrid Vesting Smart Contract in Move\nDESCRIPTION: The hybrid vesting Move smart contract combines cliff and graded vesting strategies, allowing for flexible token release schedules. It defines a 'Wallet' struct and includes a 'new_wallet' function to set up vesting parameters like cliff and linear schedules. The 'claim' function calculates and returns tokens based on these parameters. The contract depends on the Sui framework and requires specific timestamps for customization.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics/vesting-strategies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\n{\"@inject\": \"examples/vesting/sources/hybrid.move\"}\n```\n\n----------------------------------------\n\nTITLE: Requesting SUI Coins from Faucet\nDESCRIPTION: This snippet demonstrates how to request gas coins from the faucet using the 'sui client faucet' command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client faucet\nRequest successful. It can take up to 1 minute to get the coin. Run sui client gas to check your gas coins.\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Rewards from Validator in Sui DPoS\nDESCRIPTION: This snippet explains how validators can withdraw their staking rewards using the provided system function. The function `request_withdraw_stake` is responsible for processing the withdrawal of stake and associated rewards for validators.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-architecture/staking-rewards.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n\"[`0x3::sui_system::request_withdraw_stake`](https://github.com/MystenLabs/sui/blob/6234ae2cc8137f3a2a34cd0aa1ac4fd5f31260e2/crates/sui-framework/packages/sui-system/sources/sui_system.move#L272)\"\n```\n\n----------------------------------------\n\nTITLE: Import Key using Sui Keytool\nDESCRIPTION: This command imports an existing private key or mnemonic phrase into the Sui CLI's keystore. The key scheme must also be specified.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"sui keytool import INPUT KEY_SCHEME\"\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Function in Move on Sui\nDESCRIPTION: Demonstrates creating an entry function with Sui-specific guidelines, ensuring public accessibility while preventing direct smart contract manipulation\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nentry fun example_function()\n```\n\n----------------------------------------\n\nTITLE: List Defined Environments using Sui CLI\nDESCRIPTION: This command lists all defined environments configured in the Sui CLI.  Environments typically define the RPC URL for a Sui network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client envs\"\n```\n\n----------------------------------------\n\nTITLE: Withdrawing All Balance in Move\nDESCRIPTION: Withdraws the entire balance from a Balance object. After this operation, the remaining balance will be 0.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/balance.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun withdraw_all<T>(self: &mut Balance<T>): Balance<T> {\n    let value = self.value;\n    split(self, value)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProtectedTP for transfer policy management in Rust\nDESCRIPTION: The ProtectedTP struct is a shared object storing an empty transfer policy. One must be created per type <T> generated by a user. It's used in conjunction with the unlock module for policy enforcement.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nstruct ProtectedTP<phantom T> has key, store {\n        id: UID,\n        policy_cap: TransferPolicyCap<T>,\n        transfer_policy: TransferPolicy<T>\n    }\n```\n\n----------------------------------------\n\nTITLE: Borrowing Base Assets via Flash Loan in DeepBook (Move)\nDESCRIPTION: This function allows borrowing base assets from a DeepBook Pool. It returns a FlashLoan hot potato that must be returned within the same transaction, enforcing the atomic nature of flash loans.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/flash-loans.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic fun borrow_flashloan_base<BaseAsset, QuoteAsset>(pool: &mut Pool<BaseAsset, QuoteAsset>, amount: u64, ctx: &mut TxContext): (Coin<BaseAsset>, FlashLoan<BaseAsset>) {\n    // Emit event\n    event::emit(FlashLoanBorrowEvent<BaseAsset, QuoteAsset> {\n        pool_id: *object::id(pool),\n        amount,\n    });\n\n    let c = balance::split(&mut pool.base, amount);\n    let loan = FlashLoan<BaseAsset> {\n        pool_id: object::id(pool),\n        amount,\n    };\n\n    (coin::from_balance(c, ctx), loan)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GasData struct in Rust\nDESCRIPTION: This code snippet defines the structure `GasData` in Rust. It includes fields such as `payment` (Vec<ObjectRef>), `owner` (SuiAddress), `price` (u64), and `budget` (u64). This structure represents the gas data used in sponsored transactions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/sponsored-transactions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n```rust\n#[derive(Debug, PartialEq, Eq, Hash, Clone, Serialize, Deserialize)]\npub struct GasData {\n    pub payment: Vec<ObjectRef>,\n    pub owner: SuiAddress,\n    pub price: u64,\n    pub budget: u64,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sui Move Package\nDESCRIPTION: This Shell snippet demonstrates how to create a new Sui Move package template using the `sui move new` command. The command initializes a new package called `example`, setting up a basic directory structure for defining modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\n$ sui move new example\n```\n\n----------------------------------------\n\nTITLE: Implementing the Add Function for a Permissioned Kiosk App\nDESCRIPTION: This snippet demonstrates how to implement the add function for a permissioned Kiosk app that requires the place permission. The function is called by the kiosk owner to install the app and grant necessary permissions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk-apps.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule examples::letterbox_ext;\n\nuse sui::kiosk_extension;\n\n// ... dependencies\n\n/// The expected set of permissions for extension. It requires `place`.\nconst PERMISSIONS: u128 = 1;\n\n/// The Witness struct used to identify and authorize the extension.\nstruct Extension has drop {}\n\n/// Install the Mallbox extension into the Kiosk.\npublic fun add(kiosk: &mut Kiosk, cap: &KioskOwnerCap, ctx: &mut TxContext) {\n    kiosk_extension::add(Extension {}, kiosk, cap, PERMISSIONS, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Nonce for OAuth URL in TypeScript\nDESCRIPTION: TypeScript code to generate a nonce for the OAuth URL using the zkLogin SDK. It includes creating an ephemeral key pair, setting expiration time, and assembling the OAuth URL components.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/zklogin-integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateNonce, generateRandomness } from '@mysten/sui/zklogin';\n\nconst FULLNODE_URL = 'https://fullnode.devnet.sui.io'; // replace with the RPC URL you want to use\nconst suiClient = new SuiClient({ url: FULLNODE_URL });\nconst { epoch, epochDurationMs, epochStartTimestampMs } = await suiClient.getLatestSuiSystemState();\n\nconst maxEpoch = Number(epoch) + 2; // this means the ephemeral key will be active for 2 epochs from now.\nconst ephemeralKeyPair = new Ed25519Keypair();\nconst randomness = generateRandomness();\nconst nonce = generateNonce(ephemeralKeyPair.getPublicKey(), maxEpoch, randomness);\n```\n\n----------------------------------------\n\nTITLE: Add New Token Function in Move\nDESCRIPTION: Adds a new token to the bridge treasury with specified parameters including token ID and notional value. Handles both foreign and native tokens.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/treasury.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun add_new_token(\n    self: &mut BridgeTreasury,\n    token_name: String,\n    token_id: u8,\n    native_token: bool,\n    notional_value: u64,\n) {\n    if (!native_token){\n        assert!(notional_value > 0, EInvalidNotionalValue);\n        let ForeignTokenRegistration{\n            type_name,\n            uc,\n            decimal,\n        } = self.waiting_room.remove<String, ForeignTokenRegistration>(token_name);\n        let decimal_multiplier = 10u64.pow(decimal);\n        self.supported_tokens.insert(\n            type_name,\n            BridgeTokenMetadata{\n                id: token_id,\n                decimal_multiplier,\n                notional_value,\n                native_token\n            },\n        );\n        self.id_token_type_map.insert(token_id, type_name);\n        transfer::public_freeze_object(uc);\n        emit(NewTokenEvent{\n            token_id,\n            type_name,\n            native_token,\n            decimal_multiplier,\n            notional_value\n        })\n    } else {\n        // Not implemented for V1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Sum Implementation with Loop Expression in Move\nDESCRIPTION: Another implementation of the sum function using a loop expression with a break condition. The loop continues until i exceeds n, then returns the accumulated sum.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nfun sum(n: u64): u64 {\n    let sum = 0;\n    let i = 0;\n    loop {\n        i = i + 1;\n        if (i > n) break;\n        sum = sum + i\n    };\n\n    sum\n}\n```\n\n----------------------------------------\n\nTITLE: Renting a Listed Rentable Item - Move\nDESCRIPTION: The 'rent' function facilitates the rental of a listed item from the kiosk, ensuring payment conditions are satisfied and that the process adheres to pricing rules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\npublic fun rent<T: key + store>(\n  renter_kiosk: &mut Kiosk,\n  borrower_kiosk: &mut Kiosk,\n  rental_policy: &mut RentalPolicy<T>,\n  item_id: ID,\n  mut coin: Coin<SUI>,\n  clock: &Clock,\n  ctx: &mut TxContext,\n) {\n\n  // Aborts if Rentables extension is not installed.\n  assert!(kiosk_extension::is_installed<Rentables>(borrower_kiosk), EExtensionNotInstalled);\n\n  let mut rentable = take_from_bag<T, Listed>(renter_kiosk, Listed { id: item_id });\n\n  // Calculates the price of the rental based on the days it was rented for by ensuring the outcome can be stored as a u64.\n  let max_price_per_day = MAX_VALUE_U64 / rentable.duration;\n  assert!(rentable.price_per_day <= max_price_per_day, ETotalPriceOverflow);\n  let total_price = rentable.price_per_day * rentable.duration;\n\n  // Accepts only exact balance for the payment and does not give change.\n  let coin_value = coin.value();\n  assert!(coin_value == total_price, ENotEnoughCoins);\n\n  // Calculate fees_amount using the given basis points amount (percentage), ensuring the\n  // result fits into a 64-bit unsigned integer.\n  let mut fees_amount = coin_value as u128;\n  fees_amount = fees_amount * (rental_policy.amount_bp as u128);\n  fees_amount = fees_amount / (MAX_BASIS_POINTS as u128);\n\n  // Calculate fees_amount using the given basis points amount (percentage), ensuring the result fits into a 64-bit unsigned integer.\n  let fees = coin.split(fees_amount as u64, ctx);\n\n  // Merges the fee balance of the given coin with the RentalPolicy balance.\n  coin::put(&mut rental_policy.balance, fees);\n  // Transfers the payment to the renter.\n  transfer::public_transfer(coin, renter_kiosk.owner());\n  rentable.start_date.fill(clock.timestamp_ms());\n\n  place_in_bag<T, Rented>(borrower_kiosk, Rented { id: item_id }, rentable);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants for Sui Package Management in Move\nDESCRIPTION: Defines error constants used in package management operations, such as ENotOneTimeWitness and ETooPermissive.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nconst ENotOneTimeWitness: u64 = 0;\nconst ETooPermissive: u64 = 1;\nconst EAlreadyAuthorized: u64 = 2;\nconst ENotAuthorized: u64 = 3;\nconst EWrongUpgradeCap: u64 = 4;\n```\n\n----------------------------------------\n\nTITLE: Managing Coin Supply in Move\nDESCRIPTION: Function to access the total supply of a coin type from its TreasuryCap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_35\n\nLANGUAGE: Move\nCODE:\n```\npublic fun supply<T>(treasury: &mut TreasuryCap<T>): &Supply<T> {\n    &treasury.total_supply\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Limit Orders in DeepBookV3 with TypeScript\nDESCRIPTION: Function for placing limit orders in DeepBookV3. Takes parameters for pool key, balance manager key, client order ID, price, quantity, and other optional parameters. Returns a function that takes a Transaction object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/orders.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nplaceLimitOrder({ params: PlaceLimitOrderParams });\n```\n\n----------------------------------------\n\nTITLE: Freezing an Object using Sui Move\nDESCRIPTION: The 'public_freeze_object' function is used to make an object immutable within Sui Move. This irreversible operation encodes that the object can no longer be mutated, transferred, or deleted. It is part of the transfer module and requires passing the object by value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/immutable.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic native fun public_freeze_object<T: key>(obj: T);\n```\n\n----------------------------------------\n\nTITLE: Improving Transaction Readability with Coin Arguments\nDESCRIPTION: This snippet illustrates the correct practice of passing Coin objects by value in Move functions, enhancing clarity and readability during transactions by avoiding mutable references.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/conventions.mdx#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nmodule conventions::amm;\n\nuse sui::coin::Coin;\n\npublic struct Pool has key {\n    id: UID\n}\n\n// right\npublic fun swap<CoinX, CoinY>(coin_in: Coin<CoinX>): Coin<CoinY> {\n    // Implementation omitted.\n    abort(0)\n}\n\n// wrong\npublic fun exchange<CoinX, CoinY>(coin_in: &mut Coin<CoinX>, value: u64): Coin<CoinY> {\n    // Implementation omitted.\n    abort(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Element from Vector in Move\nDESCRIPTION: This function removes the element at the specified index from the vector, shifting all subsequent elements. It preserves the order of elements but has O(n) complexity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove<Element>(v: &mut vector<Element>, mut i: u64): Element {\n    let mut len = v.length();\n    // i out of bounds; abort\n    if (i >= len) abort EINDEX_OUT_OF_BOUNDS;\n    len = len - 1;\n    while (i < len) {\n        v.swap(i, { i = i + 1; i });\n    };\n    v.pop_back()\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting and Transferring Coins in Sui Transaction\nDESCRIPTION: This code demonstrates how to split coins from the gas payment and transfer them to a specific address. It creates a new coin with a balance of 100 and transfers it to a Sui address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new coin with balance 100, based on the coins used as gas payment.\n// You can define any balance here.\nconst [coin] = tx.splitCoins(tx.gas, [tx.pure(100)]);\n\n// Transfer the split coin to a specific address.\ntx.transferObjects([coin], tx.pure('0xSomeSuiAddress'));\n```\n\n----------------------------------------\n\nTITLE: Initializing Vector Literals in Move\nDESCRIPTION: Demonstrates various ways to create vector literals in Move, including empty vectors, typed vectors, and vectors with elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/primitive-types/vector.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n(vector[]: vector<bool>);\n(vector[0u8, 1u8, 2u8]: vector<u8>);\n(vector<u128>[]: vector<u128>);\n(vector<address>[@0x42, @0x100]: vector<address>);\n```\n\n----------------------------------------\n\nTITLE: Admin Capability Pattern in Sui Move\nDESCRIPTION: This snippet demonstrates the admin capability pattern in Sui Move, showing how to structure admin-gated functions. It emphasizes placing the capability as the first parameter to improve autocomplete functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/conventions.mdx#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\nmodule conventions::social_network;\n\nuse std::string::String;\n\npublic struct Account has key {\n    id: UID,\n    name: String\n}\n\npublic struct Admin has key {\n    id: UID,\n}\n\n// right -> cap.update(&mut account, b\"jose\".to_string());\npublic fun update(_: &Admin, account: &mut Account, new_name: String) {\n    // Implementation omitted.\n    abort(0)\n}\n\n// wrong -> account.update(&cap, b\"jose\".to_string());\npublic fun set(account: &mut Account, _: &Admin, new_name: String) {\n    // Implementation omitted.\n    abort(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Convert Private Key using Sui Keytool\nDESCRIPTION: This command converts a private key from Hex or Base64 encoding to the Sui's Bech32 encoded format. It's essential for importing existing keys into the Sui CLI's keystore.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"sui keytool convert PRIVATE_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Transferring Non-Gas Coins in Sui Transaction\nDESCRIPTION: This example shows how to transfer coins other than the gas coin in a Sui transaction. It demonstrates splitting a specific coin object and transferring the split amount.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst otherCoin = tx.object('0xCoinObjectId');\nconst coin = tx.splitCoins(otherCoin, [tx.pure(100)]);\ntx.transferObjects([coin], tx.pure(address));\n```\n\n----------------------------------------\n\nTITLE: Swapping Exact Base for Quote in DeepBook CLOB v2 (Move)\nDESCRIPTION: Function for swapping an exact amount of base asset for quote asset in the DeepBook exchange. It takes a pool, client order ID, account capability, quantity, coins, clock, and transaction context. Currently implemented as a stub that aborts with code 1337.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_21\n\nLANGUAGE: move\nCODE:\n```\npublic fun swap_exact_base_for_quote<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _client_order_id: u64,\n    _account_cap: &AccountCap,\n    _quantity: u64,\n    _base_coin: Coin<BaseAsset>,\n    _quote_coin: Coin<QuoteAsset>,\n    _clock: &Clock,\n    _ctx: &mut TxContext,\n): (Coin<BaseAsset>, Coin<QuoteAsset>, u64) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Swap with Owned Objects in Sui Move\nDESCRIPTION: Function to execute a swap between two escrow requests. The custodian matches the two requests, verifies they form a valid swap pair, and transfers each object to its intended recipient. This implementation uses only owned objects without shared objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/shared-owned.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic entry fun swap<T: key + store, U: key + store>(\n        escrow1: Escrow<T>,\n        escrow2: Escrow<U>,\n        ctx: &mut TxContext,\n    ) {\n        let Escrow { id: id1, sender: sender1, recipient: recipient1, exchange_key_id: exchange_key_id1, obj: obj1 } = escrow1;\n        let Escrow { id: id2, sender: sender2, recipient: recipient2, exchange_key_id: exchange_key_id2, obj: obj2 } = escrow2;\n        object::delete(id1);\n        object::delete(id2);\n\n        // Check that the senders/recipients match\n        assert!(sender1 == recipient2, ERecipientMismatch);\n        assert!(sender2 == recipient1, ESenderMismatch);\n\n        // Check the objects match by comparing key IDs\n        let key1 = object::id_from_address(object::id_address(&obj1));\n        let key2 = object::id_from_address(object::id_address(&obj2));\n\n        assert!(key2 == exchange_key_id1, EWrongObject);\n        assert!(key1 == exchange_key_id2, EWrongObject);\n\n        // Send each object to its new owner\n        transfer::transfer(obj1, recipient1);\n        transfer::transfer(obj2, recipient2);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Rule Structure in Move\nDESCRIPTION: Demonstrates the basic structure of a rule type implementation in Move. A rule is represented as a witness type with a drop ability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/rules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n/// The Rule type\nstruct Rule has drop {}\n```\n\n----------------------------------------\n\nTITLE: Lock and Unlock Test Implementation\nDESCRIPTION: Test function that verifies a locked object can be unlocked with its corresponding key. Creates a test coin, locks it, and then unlocks it.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nfun test_lock_unlock() {\n    let scenario = test_scenario::begin(@0x0);\n    let ctx = test_scenario::ctx(&mut scenario);\n    let coin = test_coin(ctx);\n    let (locked, key) = lock(coin);\n    let coin = unlock(locked, key);\n    coin::destroy_for_testing(coin);\n    test_scenario::end(scenario);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Fungible Tokens on Sui Blockchain in TypeScript\nDESCRIPTION: Code snippet from mint.ts showing how to create an NFT with metadata. The getVecMapValues function returns arrays with key-value pairs that will be stored as metadata for the NFT.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_37\n\nLANGUAGE: rust\nCODE:\n```\n// example with metadata -> NFT\nfunction getVecMapValues() {\n\tconst keys = [\n\t  \"Piece\",\n\t  \"Is it Amazing?\",\n\t  \"In a scale from 1 to 10, how good?\",\n    ];\n    const values = [\"8/100\", \"Yes\", \"11\"];\n\n    return { keys, values };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pool Structure - Move\nDESCRIPTION: Main pool structure containing order books, custodians, fees and other trading parameters for a trading pair.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Pool<phantom BaseAsset, phantom QuoteAsset> has key, store {\n    id: sui::object::UID,\n    bids: deepbook::critbit::CritbitTree<deepbook::clob_v2::TickLevel>,\n    asks: deepbook::critbit::CritbitTree<deepbook::clob_v2::TickLevel>,\n    next_bid_order_id: u64,\n    next_ask_order_id: u64,\n    usr_open_orders: sui::table::Table<address, sui::linked_table::LinkedTable<u64, u64>>,\n    taker_fee_rate: u64,\n    maker_rebate_rate: u64,\n    tick_size: u64,\n    lot_size: u64,\n    base_custodian: deepbook::custodian_v2::Custodian<BaseAsset>,\n    quote_custodian: deepbook::custodian_v2::Custodian<QuoteAsset>,\n    creation_fee: sui::balance::Balance<sui::sui::SUI>,\n    base_asset_trading_fees: sui::balance::Balance<BaseAsset>,\n    quote_asset_trading_fees: sui::balance::Balance<QuoteAsset>\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring from Formal Snapshot using sui-tool\nDESCRIPTION: This command facilitates the download and restoration of a Formal snapshot to a Sui node using sui-tool. It supports cloud storage integrations and requires the node to be stopped beforehand.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/snapshots.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsui-tool download-formal-snapshot --latest --genesis \"<PATH-TO-GENESIS-BLOB>\" \\\n        --network <NETWORK> --snapshot-bucket <BUCKET-NAME> --snapshot-bucket-type <TYPE> \\\n        --path <PATH-TO-NODE-DB> --num-parallel-downloads 50 --no-sign-request\n```\n\n----------------------------------------\n\nTITLE: Borrowing Mutable Child Object in Move\nDESCRIPTION: This native function borrows a mutable child object from a parent object. It may throw errors similar to borrow_child_object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) native fun borrow_child_object_mut<Child: key>(\n    object: &mut UID,\n    id: address,\n): &mut Child;\n```\n\n----------------------------------------\n\nTITLE: Creating Random Number Generator in Sui\nDESCRIPTION: Creates a new random number generator that can derive up to MAX_U16 * 32 random bytes. It uses HMAC-SHA3-256 for seed generation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new_generator(r: &Random, ctx: &mut TxContext): RandomGenerator {\n    let inner = r.load_inner();\n    let seed = hmac_sha3_256(\n        &inner.random_bytes,\n        &ctx.fresh_object_address().to_bytes(),\n    );\n    RandomGenerator { seed, counter: 0, buffer: vector[] }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Weather Data in Sui Blockchain\nDESCRIPTION: Implements periodic weather data updates from OpenWeatherMap API to the blockchain. Updates occur every 10 minutes for chunks of cities, includes error handling and transaction management. Processes weather metrics like temperature, pressure, wind speed, and humidity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/weather-oracle.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SuiClient } from '@mysten/sui/client';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { Transaction } from '@mysten/sui/transactions';\nimport * as dotenv from 'dotenv';\n\nimport { City } from './city';\nimport { tempMultiplier, windGustMultiplier, windSpeedMultiplier } from './multipliers';\nimport { getWeatherData } from './openweathermap';\nimport { getCities, getWeatherOracleDynamicFields } from './utils';\nimport { logger } from './utils/logger';\n\ndotenv.config({ path: '../.env' });\n\nconst phrase = process.env.ADMIN_PHRASE;\nconst fullnode = process.env.FULLNODE!;\nconst keypair = Ed25519Keypair.deriveKeypair(phrase!);\nconst client = new SuiClient({\n\turl: fullnode,\n});\n\nconst packageId = process.env.PACKAGE_ID;\nconst adminCap = process.env.ADMIN_CAP_ID!;\nconst weatherOracleId = process.env.WEATHER_ORACLE_ID!;\nconst appid = process.env.APPID!;\nconst moduleName = 'weather';\n\nconst CHUNK_SIZE = 25;\nconst MS = 1000;\nconst MINUTE = 60 * MS;\nconst TEN_MINUTES = 10 * MINUTE;\n\nasync function performUpdates(\n\tcities: City[],\n\tweatherOracleDynamicFields: {\n\t\tname: number;\n\t\tobjectId: string;\n\t}[],\n) {\n\tlet startTime = new Date().getTime();\n\n\tconst geonames = weatherOracleDynamicFields.map(function (obj) {\n\t\treturn obj.name;\n\t});\n\tconst filteredCities = cities.filter((c) => geonames.includes(c.geonameid));\n\n\tfor (let i = 0; i < filteredCities.length; i += CHUNK_SIZE) {\n\t\tconst chunk = filteredCities.slice(i, i + CHUNK_SIZE);\n\n\t\tlet transaction = await getTransaction(chunk);\n\t\ttry {\n\t\t\tawait client.signAndExecuteTransaction({\n\t\t\t\tsigner: keypair,\n\t\t\t\ttransaction,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tlogger.error(e);\n\t\t}\n\t}\n\n\tlet endTime = new Date().getTime();\n\tsetTimeout(\n\t\tperformUpdates,\n\t\tTEN_MINUTES - (endTime - startTime),\n\t\tcities,\n\t\tweatherOracleDynamicFields,\n\t);\n}\n\nasync function getTransaction(cities: City[]) {\n\tlet transaction = new Transaction();\n\n\tlet counter = 0;\n\tfor (let c in cities) {\n\t\tconst weatherData = await getWeatherData(cities[c].latitude, cities[c].longitude, appid);\n\t\tcounter++;\n\t\tif (weatherData?.main?.temp !== undefined) {\n\t\t\ttransaction.moveCall({\n\t\t\t\ttarget: `${packageId}::${moduleName}::update`,\n\t\t\t\targuments: [\n\t\t\t\t\ttransaction.object(adminCap),\n\t\t\t\t\ttransaction.object(weatherOracleId),\n\t\t\t\t\ttransaction.pure(cities[c].geonameid),\n\t\t\t\t\ttransaction.pure(weatherData.weather[0].id),\n\t\t\t\t\ttransaction.pure(weatherData.main.temp * tempMultiplier),\n\t\t\t\t\ttransaction.pure(weatherData.main.pressure),\n\t\t\t\t\ttransaction.pure(weatherData.main.humidity),\n\t\t\t\t\ttransaction.pure(weatherData.visibility),\n\t\t\t\t\ttransaction.pure(weatherData.wind.speed * windSpeedMultiplier),\n\t\t\t\t\ttransaction.pure(weatherData.wind.deg),\n\t\t\t\t\ttransaction.pure(\n\t\t\t\t\t\tweatherData.wind.gust === undefined ? [] : [weatherData.wind.gust * windGustMultiplier],\n\t\t\t\t\t\t'vector<u16>',\n\t\t\t\t\t),\n\t\t\t\t\ttransaction.pure(weatherData.clouds.all),\n\t\t\t\t\ttransaction.pure(weatherData.dt),\n\t\t\t\t],\n\t\t\t});\n\t\t} else logger.warn(`No weather data for ${cities[c].asciiname} `);\n\t}\n\treturn transaction;\n}\n\nasync function run() {\n\tconst cities: City[] = await getCities();\n\tconst weatherOracleDynamicFields: {\n\t\tname: number;\n\t\tobjectId: string;\n\t}[] = await getWeatherOracleDynamicFields(client, weatherOracleId);\n\tperformUpdates(cities, weatherOracleDynamicFields);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating New Token Policy in Move\nDESCRIPTION: Function signature for creating a new TokenPolicy object using a TreasuryCap. Returns both the TokenPolicy object and a managing capability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/token-policy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic fun new_policy<T>(\n    treasury_cap: &TreasuryCap<T>,\n    ctx: &mut TxContext\n): (TokenPolicy<TokenType>, TokenPolicyCap<TokenType>);\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Leaf in CritbitTree (Move)\nDESCRIPTION: Retrieves the maximum leaf from a CritbitTree. It returns the key and index of the maximum leaf. Throws an error if the tree is empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max_leaf<V: store>(tree: &CritbitTree<V>): (u64, u64) {\n    assert!(!is_empty(tree), ELeafNotExist);\n    let max_leaf = table::borrow(&tree.leaves, tree.max_leaf);\n    return (max_leaf.key, tree.max_leaf)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TxContext Struct in Move\nDESCRIPTION: Defines the TxContext struct which contains information about the current transaction, including sender address, transaction hash, epoch, timestamp, and ID counter.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/tx_context.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TxContext has drop {\n    sender: address,\n    tx_hash: vector<u8>,\n    epoch: u64,\n    epoch_timestamp_ms: u64,\n    ids_created: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Market Order in DeepBook CLOB v2 (Move)\nDESCRIPTION: Function for placing a market order to the order book. Takes a pool, account capability, client order ID, quantity, bid flag, base and quote coins, clock, and transaction context. Currently implemented as a stub that aborts with code 1337.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_25\n\nLANGUAGE: move\nCODE:\n```\npublic fun place_market_order<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _account_cap: &AccountCap,\n    _client_order_id: u64,\n    _quantity: u64,\n    _is_bid: bool,\n    _base_coin: Coin<BaseAsset>,\n    _quote_coin: Coin<QuoteAsset>,\n    _clock: &Clock,\n    _ctx: &mut TxContext,\n): (Coin<BaseAsset>, Coin<QuoteAsset>) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: String Substring Function\nDESCRIPTION: A public function that extracts a substring from a given String type using start index i and end index j.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_17\n\nLANGUAGE: move\nCODE:\n```\npublic fun sub_string(s: &String, i: u64, j: u64): String {\n    s.substring(i, j)\n}\n```\n\n----------------------------------------\n\nTITLE: Decreasing Supply in Move\nDESCRIPTION: Function to burn a Balance<T> and decrease the corresponding Supply<T>. It checks that the supply has sufficient value before decreasing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/balance.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun decrease_supply<T>(self: &mut Supply<T>, balance: Balance<T>): u64 {\n    let Balance { value } = balance;\n    assert!(self.value >= value, EOverflow);\n    self.value = self.value - value;\n    value\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Sui Client Call Command in Shell\nDESCRIPTION: This code snippet shows the output of running 'sui client call --help' in a shell. It displays detailed usage information, available options, and their descriptions for the 'call' command in the Sui client CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nCall Move function\n\nUsage: sui client call [OPTIONS] --package <PACKAGE> --module <MODULE> --function <FUNCTION>\n\nOptions:\n      --package <PACKAGE>               Object ID of the package, which contains the module\n      --module <MODULE>                 The name of the module in the package\n      --function <FUNCTION>             Function name in module\n      --type-args <TYPE_ARGS>...        Type arguments to the generic function being called. All must be specified, or the call will fail\n      --args <ARGS>...                  Simplified ordered args like in the function syntax ObjectIDs, Addresses must be hex strings\n      --gas <GAS>                       ID of the gas object for gas payment. If not provided, a gas object with at least gas_budget value will be selected\n      --gas-budget <GAS_BUDGET>         An optional gas budget for this transaction (in MIST). If gas budget is not provided, the tool will first perform a dry\n                                        run to estimate the gas cost, and then it will execute the transaction. Please note that this incurs a small cost in\n                                        performance due to the additional dry run call\n      --dry-run                         Perform a dry run of the transaction, without executing it\n      --dev-inspect                     Perform a dev inspect\n      --serialize-unsigned-transaction  Instead of executing the transaction, serialize the bcs bytes of the unsigned transaction data (TransactionData) using\n                                        base64 encoding, and print out the string <TX_BYTES>. The string can be used to execute transaction with `sui client\n                                        execute-signed-tx --tx-bytes <TX_BYTES>`\n      --serialize-signed-transaction    Instead of executing the transaction, serialize the bcs bytes of the signed transaction data (SenderSignedData) using\n                                        base64 encoding, and print out the string <SIGNED_TX_BYTES>. The string can be used to execute transaction with `sui\n                                        client execute-combined-signed-tx --signed-tx-bytes <SIGNED_TX_BYTES>`\n      --json                            Return command outputs in json format\n  -h, --help                            Print help\n  -V, --version                         Print version\n```\n\n----------------------------------------\n\nTITLE: Installing Sui via Cargo from GitHub\nDESCRIPTION: Command to install Sui binaries from the testnet branch using Cargo, with tracing features enabled for Move test coverage and debugger support.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --locked --git https://github.com/MystenLabs/sui.git --branch testnet sui --features tracing\n```\n\n----------------------------------------\n\nTITLE: Structuring Move Code with Sections\nDESCRIPTION: This snippet showcases how to structure Move code using comments to delineate different sections, improving readability and organization. It specifies areas such as imports, errors, constants, and public functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/conventions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule conventions::comments;\n\n// === Imports ===\n\n// === Errors ===\n\n// === Constants ===\n\n// === Structs ===\n\n// === Events ===\n\n// === Method Aliases ===\n\n// === Public Functions ===\n\n// === View Functions ===\n\n// === Admin Functions ===\n\n// === Package Functions ===\n\n// === Private Functions ===\n\n// === Test Functions ===\n```\n\n----------------------------------------\n\nTITLE: Proving Asset Burn in Rust\nDESCRIPTION: Confirms the reduction in an asset's circulating supply by validating the burn operation with the given asset cap and burn promise, ensuring inventory accuracy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\npublic fun prove_burn<T>(\n  asset_cap: &AssetCap<T>,\n  promise: BurnPromise) {\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Supply and Creating Balance in Move\nDESCRIPTION: Function to increase the supply by a given value and create a new Balance with this value. It checks for overflow before increasing the supply.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/balance.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun increase_supply<T>(self: &mut Supply<T>, value: u64): Balance<T> {\n    assert!(value < (18446744073709551615u64 - self.value), EOverflow);\n    self.value = self.value + value;\n    Balance { value }\n}\n```\n\n----------------------------------------\n\nTITLE: Join Coins Function\nDESCRIPTION: Joins two coins together, merging their balances\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/pay.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun join<T>(self: &mut Coin<T>, coin: Coin<T>) {\n    self.join(coin)\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Base Asset in Flash Loans with DeepBookV3 SDK\nDESCRIPTION: The returnBaseAsset function returns a borrowed base asset to the specified pool. It requires the pool identifier, borrow amount, base coin input, and the flash loan object to be settled.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/flash-loans.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nreturnBaseAsset(\n  {\n    poolKey: string,\n    borrowAmount: number,\n    baseCoinInput: TransactionObjectArgument,\n    flashLoan: TransactionObjectArgument,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Receiving Struct for Object Transfer in Move\nDESCRIPTION: Defines a struct representing the ability to receive an object of type T. This is an ephemeral per-transaction type that cannot be stored on-chain.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Receiving<phantom T: key> has drop {\n    id: sui::object::ID,\n    version: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutable Borrow for Dynamic Object Fields in Move\nDESCRIPTION: This macro function implements mutable borrowing of a dynamic object field. It takes a mutable reference to an object UID and a name, and returns a mutable reference to the value of the specified type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\nmacro fun borrow_mut_impl<$Name: copy + drop + store, $Value: key>(\n    $object: &mut UID,\n    $name: $Name,\n): &mut $Value {\n    let object = $object;\n    let name = $name;\n    let key = Wrapper { name };\n    let (field, value_id) = field::field_info_mut<Wrapper<$Name>>(object, key);\n    borrow_child_object_mut<$Value>(field, value_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssetMetadata struct for fractional asset representation in Rust\nDESCRIPTION: The AssetMetadata struct defines the metadata representing the entire asset to be fractionalized. It includes name, symbol, description, and other asset properties. This should be implemented as a shared object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct AssetMetadata<phantom T> has key, store {\n        id: UID,\n        /// Name of the asset\n        name: String,\n        // the total max supply allowed to exist at any time\n        total_supply: u64,\n        /// Symbol for the asset\n        symbol: ascii::String,\n        /// Description of the asset\n        description: String,\n        /// URL for the asset logo\n        icon_url: Option<Url>\n    }\n```\n\n----------------------------------------\n\nTITLE: Staking Pool Struct Definition in Move\nDESCRIPTION: Defines the main StakingPool struct that represents a validator's staking pool containing fields for activation state, balances, exchange rates and pending operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct StakingPool has key, store {\n    id: sui::object::UID,\n    activation_epoch: std::option::Option<u64>,\n    deactivation_epoch: std::option::Option<u64>,\n    sui_balance: u64,\n    rewards_pool: sui::balance::Balance<sui::sui::SUI>,\n    pool_token_balance: u64,\n    exchange_rates: sui::table::Table<u64, sui_system::staking_pool::PoolTokenExchangeRate>,\n    pending_stake: u64,\n    pending_total_sui_withdraw: u64, \n    pending_pool_token_withdraw: u64,\n    extra_fields: sui::bag::Bag\n}\n```\n\n----------------------------------------\n\nTITLE: Request Stake Withdrawal from Validator\nDESCRIPTION: Processes stake withdrawal requests from validators. For active validators, adds request to pending withdrawals. For inactive validators, processes withdrawal immediately.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun request_withdraw_stake(\n    self: &mut ValidatorSet,\n    staked_sui: StakedSui,\n    ctx: &TxContext,\n): Balance<SUI> {\n    let staking_pool_id = staked_sui.pool_id();\n    let validator = if (self.staking_pool_mappings.contains(staking_pool_id)) {\n        let validator_address = self.staking_pool_mappings[staked_sui.pool_id()];\n        self.get_candidate_or_active_validator_mut(validator_address)\n    } else {\n        assert!(self.inactive_validators.contains(staking_pool_id), ENoPoolFound);\n        self.inactive_validators[staking_pool_id].load_validator_maybe_upgrade()\n    };\n    validator.request_withdraw_stake(staked_sui, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Create New ED25519 Address using Sui CLI\nDESCRIPTION: This command generates a new Sui address using the ED25519 cryptographic scheme. ED25519 is a popular choice for its security and performance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client new-address ed25519\"\n```\n\n----------------------------------------\n\nTITLE: Destroying Zero-Value Coin in Move\nDESCRIPTION: Destroys a Coin with zero balance. This function consumes the Coin, deletes its ID, and destroys the zero balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_zero<T>(c: Coin<T>) {\n    let Coin { id, balance } = c;\n    id.delete();\n    balance.destroy_zero()\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring SUI Coin Move\nDESCRIPTION: The `transfer` function is an entry function for transferring SUI coins from one address to another. It simplifies the transfer process by wrapping the functionality of the `public_transfer` method in the transfer module. Inputs include the SUI coin object and the recipient's address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/sui.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun transfer(c: coin::Coin<SUI>, recipient: address) {\n    transfer::public_transfer(c, recipient)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Clock and Emitting Event in Move\nDESCRIPTION: This module demonstrates an entry function that accesses the Clock object and emits an event containing the current timestamp. It includes struct definitions for the event and the entry function implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/access-time.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nmodule basics::clock {\n    use sui::clock;\n    use sui::event;\n    use sui::tx_context::TxContext;\n\n    struct TimeEvent has copy, drop {\n        timestamp_ms: u64\n    }\n\n    public entry fun access(c: &clock::Clock, ctx: &mut TxContext) {\n        let timestamp_ms = clock::timestamp_ms(c);\n        event::emit(TimeEvent { timestamp_ms })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: USDC Move Call in PTB\nDESCRIPTION: Example of using USDC coin in a Move call within a Programmable Transaction Block.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/stablecoins.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [sword] = tx.moveCall({\n  target: '0xcbbf37a851ed7b625731ca497e2d4aea18cf18145fac3b78bd64f274f6a09d30::usdc_usage::buy_sword_with_usdc', \n  arguments: [\n    usdcCoin\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Item in Kiosk in Move\nDESCRIPTION: Lists an item for sale in the Kiosk by setting a price. Requires owner authentication and checks item availability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\npublic fun list<T: key + store>(self: &mut Kiosk, cap: &KioskOwnerCap, id: ID, price: u64) {\n    assert!(self.has_access(cap), ENotOwner);\n    assert!(self.has_item_with_type<T>(id), EItemNotFound);\n    assert!(!self.is_listed_exclusively(id), EListedExclusively);\n    df::add(&mut self.id, Listing { id, is_exclusive: false }, price);\n    event::emit(ItemListed<T> { kiosk: object::id(self), id, price })\n}\n```\n\n----------------------------------------\n\nTITLE: Shuffling vector with RandomGenerator - Move\nDESCRIPTION: Implements Fisher–Yates/Knuth shuffle to randomize elements in a vector utilizing the RandomGenerator. It accepts a mutable RandomGenerator and vector as inputs, shuffling elements in-place. The vector must have a length less than or equal to U16_MAX.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic fun shuffle<T>(g: &mut sui::random::RandomGenerator, v: &mut vector<T>) {\n    let n = v.length();\n    if (n == 0) return;\n    assert!(n <= U16_MAX, EInvalidLength);\n    let n = n as u16;\n    let end = n - 1;\n    end.do!(|i| {\n        let j = g.generate_u16_in_range(i, end);\n        v.swap(i as u64, j as u64);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Counter Component Base\nDESCRIPTION: Basic React component for creating a new Counter object with loading state.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Container } from \"@radix-ui/themes\";\nimport { useState } from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nexport function CreateCounter({\n  onCreated,\n}: {\n  onCreated: (id: string) => void;\n}) {\n  const [waitingForTxn, setWaitingForTxn] = useState(false);\n\n  function create() {\n    // TODO\n  }\n\n  return (\n    <Container>\n      <Button\n        size=\"3\"\n        onClick={() => {\n          create();\n        }}\n        disabled={waitingForTxn}\n      >\n        {waitingForTxn ? <ClipLoader size={20} /> : \"Create Counter\"}\n      </Button>\n    </Container>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Types for Dynamic Fields\nDESCRIPTION: This snippet demonstrates how to define `Parent` and `Child` object types in Move for use with dynamic fields, establishing the structure for dynamic field relationships.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/dynamic-fields.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\n{@inject: examples/move/dynamic_fields/sources/example.move#struct=Parent,Child noComments}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Connection in React\nDESCRIPTION: React component code to add a wallet connection button and display connected account information using dApp Kit hooks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/client-tssdk.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectButton, useCurrentAccount } from '@mysten/dapp-kit';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<ConnectButton />\n\t\t\t</header>\n\n\t\t\t<ConnectedAccount />\n\t\t</div>\n\t);\n}\n\nfunction ConnectedAccount() {\n\tconst account = useCurrentAccount();\n\n\tif (!account) {\n\t\treturn null;\n\t}\n\n\treturn <div>Connected to {account.address}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA2-256 hash function in Move\nDESCRIPTION: Native implementation of the SHA2-256 hash function. It takes a vector of bytes as input and returns a vector of bytes representing the hash.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/hash.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun sha2_256(data: vector<u8>): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mutable Field Info in Move\nDESCRIPTION: This function retrieves mutable field information for a given object and name. It returns a tuple containing a mutable reference to the UID and the address of the field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun field_info_mut<Name: copy + drop + store>(\n    object: &mut UID,\n    name: Name,\n): (&mut UID, address) {\n    let object_addr = object.to_address();\n    let hash = hash_type_and_key(object_addr, name);\n    let Field { id, name: _, value } = borrow_child_object_mut<Field<Name, ID>>(object, hash);\n    (id, value.to_address())\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Rewards from Staking Pool in Move\nDESCRIPTION: Calculates and withdraws rewards from the staking pool. Handles principal and rewards portions of withdrawals.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\nfun withdraw_rewards(\n    pool: &mut StakingPool,\n    principal_withdraw_amount: u64,\n    pool_token_withdraw_amount: u64,\n    epoch: u64,\n): Balance<SUI> {\n    let exchange_rate = pool.pool_token_exchange_rate_at_epoch(epoch);\n    let total_sui_withdraw_amount = exchange_rate.get_sui_amount(pool_token_withdraw_amount);\n    let mut reward_withdraw_amount = if (total_sui_withdraw_amount >= principal_withdraw_amount) {\n        total_sui_withdraw_amount - principal_withdraw_amount\n    } else 0;\n    reward_withdraw_amount = reward_withdraw_amount.min(pool.rewards_pool.value());\n    pool.rewards_pool.split(reward_withdraw_amount)\n}\n```\n\n----------------------------------------\n\nTITLE: Module with Multiple Abort Codes\nDESCRIPTION: Demonstrates a module using multiple abort codes for different error conditions across multiple functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abort-and-assert.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::example {\n\n    use std::vector;\n\n    const EEmptyVector: u64 = 0;\n    const EIndexOutOfBounds: u64 = 1;\n\n    // move i to j, move j to k, move k to i\n    public fun rotate_three<T>(v: &mut vector<T>, i: u64, j: u64, k: u64) {\n        let n = vector::length(v);\n        assert!(n > 0, EEmptyVector);\n        assert!(i < n, EIndexOutOfBounds);\n        assert!(j < n, EIndexOutOfBounds);\n        assert!(k < n, EIndexOutOfBounds);\n\n        vector::swap(v, i, k);\n        vector::swap(v, j, k);\n    }\n\n    public fun remove_twice<T>(v: &mut vector<T>, i: u64, j: u64): (T, T) {\n        let n = vector::length(v);\n        assert!(n > 0, EEmptyVector);\n        assert!(i < n, EIndexOutOfBounds);\n        assert!(j < n, EIndexOutOfBounds);\n        assert!(i > j, EIndexOutOfBounds);\n\n        (vector::remove<T>(v, i), vector::remove<T>(v, j))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Voting Power Invariants in Sui System (Move)\nDESCRIPTION: This function checks several invariants that must hold after setting the voting power for validators. It verifies that each validator's voting power is positive, the total voting power matches a constant, and relative voting powers are consistent with stake amounts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\nfun check_invariants(v: &vector<Validator>) {\n    let mut total = 0;\n    v.do_ref!(|v| {\n        let voting_power = v.voting_power();\n        assert!(voting_power > 0, EInvalidVotingPower);\n        total = total + voting_power;\n    });\n    assert!(total == TOTAL_VOTING_POWER, ETotalPowerMismatch);\n    // Second check that if validator A's stake is larger than B's stake, A's\n    // voting power must be no less than B's voting power; similarly, if A's\n    // stake is less than B's stake, A's voting power must be no larger than\n    // B's voting power.\n    let length = v.length();\n    length.do!(|a| {\n        (a + 1).range_do!(length, |b| {\n            let validator_a = &v[a];\n            let validator_b = &v[b];\n            let stake_a = validator_a.total_stake();\n            let stake_b = validator_b.total_stake();\n            let power_a = validator_a.voting_power();\n            let power_b = validator_b.voting_power();\n            if (stake_a > stake_b) {\n                assert!(power_a >= power_b, ERelativePowerMismatch);\n            };\n            if (stake_a < stake_b) {\n                assert!(power_a <= power_b, ERelativePowerMismatch);\n            };\n        })\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sponsored Transaction Data Structure in Rust\nDESCRIPTION: This code snippet shows the data structure of a sponsored transaction in Sui blockchain. It includes SenderSignedTransaction which contains the transaction data and signatures, TransactionDataV1 with transaction details including the sender and gas data, and GasData which holds payment information for the gas fee.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/sponsor-txn.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub struct SenderSignedTransaction {\n    pub intent_message: IntentMessage<TransactionData>,\n    /// A list of signatures signed by all transaction participants.\n    /// 1. non participant signature must not be present.\n    /// 2. signature order does not matter.\n    pub tx_signatures: Vec<GenericSignature>,\n}\n\npub struct TransactionDataV1 {  // <-- A variant of `TransactionData`\n    pub kind: TransactionKind,  // <-- This is the actual transaction details\n    pub sender: SuiAddress,\n    pub gas_data: GasData,\n    pub expiration: TransactionExpiration,\n}\n\npub struct GasData {\n    pub payment: Vec<ObjectRef>,\n    pub owner: SuiAddress,\n    pub price: u64,\n    pub budget: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ENotOwner Constant in Move\nDESCRIPTION: Defines a constant ENotOwner, used when an unauthorized withdrawal or closure is attempted with an incorrect Cap. This is crucial for maintaining the integrity of ownership protocols.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\nconst ENotOwner: u64 = 4;\n```\n\n----------------------------------------\n\nTITLE: Early Return Example\nDESCRIPTION: Shows how to use return for early function exit based on a condition.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_21\n\nLANGUAGE: move\nCODE:\n```\nfun safe_sub(x: u64, y: u64): u64 {\n    if (y > x) return 0;\n    x - y\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete GEM Module in Move for In-Game Currency\nDESCRIPTION: This module creates the in-game currency GEMs. It defines different GEM packages, handles GEM purchases, and provides utility functions for GEM management within the game economy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin/in-game-token.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\nmodule examples::gem {\n    use std::option;\n    use sui::transfer;\n    use sui::object::{Self, UID};\n    use sui::balance::{Self, Balance};\n    use sui::tx_context::{Self, TxContext};\n    use sui::coin::{Self, TreasuryCap, CoinMetadata};\n    use sui::package;\n    use sui::transfer_policy::{Self, TransferPolicy, TransferPolicyCap};\n    use sui::transfer_policy_derived::{Self as policy};\n    use sui::sui::SUI;\n\n    /// The OTW for the `GEM` currency.\n    struct GEMS has drop {}\n\n    /// The Gem shared object.\n    struct GEM {\n        id: UID\n    }\n\n    const GEM_AMOUNT_SMALL: u64 = 100;\n    const GEM_AMOUNT_MEDIUM: u64 = 1_000;\n    const GEM_AMOUNT_LARGE: u64 = 10_000;\n\n    const GEMS_PRICE_SMALL: u64 = 1_000_000_000;\n    const GEMS_PRICE_MEDIUM: u64 = 10_000_000_000;\n    const GEMS_PRICE_LARGE: u64 = 100_000_000_000;\n\n    const EInvalidAmount: u64 = 0;\n    const EInsufficientAmount: u64 = 1;\n\n    fun init(witness: GEMS, ctx: &mut TxContext) {\n        let (treasury, metadata) = coin::create_currency(\n            witness,\n            9,\n            b\"GEM\",\n            b\"Gem\",\n            b\"Game currency, used to create swords\",\n            option::none(),\n            ctx\n        );\n        transfer::public_transfer(treasury, tx_context::sender(ctx));\n        let (_, policy_cap) = transfer_policy::new<GEM>(&metadata, ctx);\n        transfer_policy::add_rule(\n            &policy_cap,\n            transfer_policy::default_rules::royalty_rule<GEM, GEMS>(),\n            ctx\n        );\n        transfer_policy::add_to_balance<GEM, GEMS>(\n            &policy_cap,\n            balance::zero()\n        );\n        let pub = package::claim(ctx);\n        coin::mint_and_transfer(&mut metadata, GEM_AMOUNT_SMALL, package::publisher_address(&pub), ctx);\n        coin::mint_and_transfer(&mut metadata, GEM_AMOUNT_MEDIUM, package::publisher_address(&pub), ctx);\n        coin::mint_and_transfer(&mut metadata, GEM_AMOUNT_LARGE, package::publisher_address(&pub), ctx);\n        transfer::public_freeze_object(metadata);\n        transfer::public_transfer(policy_cap, package::publisher_address(&pub));\n        package::burn_publisher(pub);\n    }\n\n    entry fun buy_gems(payment: &mut Coin<SUI>, amount: u64, ctx: &mut TxContext) {\n        assert!(amount == GEMS_PRICE_SMALL || amount == GEMS_PRICE_MEDIUM || amount == GEMS_PRICE_LARGE, EInvalidAmount);\n        assert!(coin::value(payment) >= amount, EInsufficientAmount);\n\n        let coin_balance = coin::balance_mut(payment);\n        let paid = balance::split(coin_balance, amount);\n\n        let gems_amount = if (amount == GEMS_PRICE_SMALL) {\n            GEM_AMOUNT_SMALL\n        } else if (amount == GEMS_PRICE_MEDIUM) {\n            GEM_AMOUNT_MEDIUM\n        } else {\n            GEM_AMOUNT_LARGE\n        };\n\n        let treasury = coin::treasury<GEM>();\n        let policy_cap = transfer_policy::new_request(&policy<GEM>(), ctx);\n        let gems = coin::mint(&mut treasury, gems_amount, ctx);\n        transfer_policy::confirm_request(&mut policy_cap, &gems);\n\n        transfer::public_transfer(gems, tx_context::sender(ctx));\n        transfer::public_transfer(coin::from_balance(paid, ctx), package::creator(policy<GEM>()));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Extended DeepBookMarketMaker Class\nDESCRIPTION: Extends the DeepBookClient with additional functionality for market making, including methods for signing and executing transactions. This example shows a more complete implementation with balance managers and admin capabilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeSuiPrivateKey } from '@mysten/sui.js/cryptography';\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport type { Keypair } from '@mysten/sui/cryptography';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport type { Transaction } from '@mysten/sui/transactions';\n\nimport { DeepBookClient } from '../src/index.js'; // Adjust path according to new structure\nimport type { BalanceManager } from '../src/types/index.js';\n\nexport class DeepBookMarketMaker extends DeepBookClient {\n\tkeypair: Keypair;\n\tsuiClient: SuiClient;\n\n\tconstructor(\n\t\tkeypair: string | Keypair,\n\t\tenv: 'testnet' | 'mainnet',\n\t\tbalanceManagers?: { [key: string]: BalanceManager },\n\t\tadminCap?: string,\n\t) {\n\t\tlet resolvedKeypair: Keypair;\n\n\t\tif (typeof keypair === 'string') {\n\t\t\tresolvedKeypair = DeepBookMarketMaker.#getSignerFromPK(keypair);\n\t\t} else {\n\t\t\tresolvedKeypair = keypair;\n\t\t}\n\n\t\tconst address = resolvedKeypair.toSuiAddress();\n\n\t\tsuper({\n\t\t\taddress: address,\n\t\t\tenv: env,\n\t\t\tclient: new SuiClient({\n\t\t\t\turl: getFullnodeUrl(env),\n\t\t\t}),\n\t\t\tbalanceManagers: balanceManagers,\n\t\t\tadminCap: adminCap,\n\t\t});\n\n\t\tthis.keypair = resolvedKeypair;\n\t\tthis.suiClient = new SuiClient({\n\t\t\turl: getFullnodeUrl(env),\n\t\t});\n\t}\n\n\tstatic #getSignerFromPK = (privateKey: string) => {\n\t\tconst { schema, secretKey } = decodeSuiPrivateKey(privateKey);\n\t\tif (schema === 'ED25519') return Ed25519Keypair.fromSecretKey(secretKey);\n\n\t\tthrow new Error(`Unsupported schema: ${schema}`);\n\t};\n\n\tsignAndExecute = async (tx: Transaction) => {\n\t\t// remove arguments\n\t\treturn this.suiClient.signAndExecuteTransaction({\n\t\t\ttransaction: tx,\n\t\t\tsigner: this.keypair,\n\t\t\toptions: {\n\t\t\t\tshowEffects: true,\n\t\t\t\tshowObjectChanges: true,\n\t\t\t},\n\t\t});\n\t};\n\n\tgetActiveAddress() {\n\t\treturn this.keypair.getPublicKey().toSuiAddress();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sum with Threshold Using Labeled Break in Move\nDESCRIPTION: Function that sums elements from nested vectors until reaching a threshold. Uses labeled break to exit nested loops when threshold would be exceeded. Takes a vector<vector<u64>> and threshold as input, returns sum as u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/labeled-control-flow.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nfun sum_until_threshold(input: &vector<vector<u64>>, threshold: u64): u64 {\n    let mut sum = 0;\n    let mut i = 0;\n    let input_size = vector::length(vec);\n\n    'outer: loop {\n        // breaks to outer since it is the closest enclosing loop\n        if (i >= input_size) break sum;\n\n        let vec = vector::borrow(input, i);\n        let size = vector::length(vec);\n        let mut j = 0;\n\n        while (j < size) {\n            let v_entry = *vector::borrow(vec, j);\n            if (sum + v_entry < threshold) {\n                sum = sum + v_entry;\n            } else {\n                // the next element we saw would break the threshold,\n                // so we return the current sum\n                break 'outer sum\n            }\n            j = j + 1;\n        }\n        i = i + 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using sui_getBalance with cURL to Track Address Balance\nDESCRIPTION: Retrieves the total balance of an address by making a POST request to a Sui Full node with cURL. The JSON response includes total balance and coin type details.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nrpc=\"https://fullnode.devnet.sui.io:443\"\naddress=\"0x849d63687330447431a2e76fecca4f3c10f6884ebaa9909674123c6c662612a3\"\ndata=\"{\\\"jsonrpc\\\": \\\"2.0\\\", \\\"method\\\": \\\"sui_getBalance\\\", \\\"id\\\": 1, \\\"params\\\": [\\\"$address\\\"]}\"\ncurl -X POST -H 'Content-type: application/json' --data-raw \"$data\" $rpc\n```\n\n----------------------------------------\n\nTITLE: Minting Custom Coins in Move\nDESCRIPTION: This function demonstrates how to mint custom coins using the TreasuryCap and transfer them to a specified address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun mint(\n    treasury_cap: &mut TreasuryCap<MYCOIN>, amount: u64, recipient: address, ctx: &mut TxContext\n) {\n    let coin = coin::mint(treasury_cap, amount, ctx);\n    transfer::public_transfer(coin, recipient)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock and Unlock Functions for Sui Objects in Move\nDESCRIPTION: A primitive module that provides functionality to lock any storable object and generate a corresponding key. The locked value can only be accessed by unlocking it with the correct key, providing tamper-proof object handling for escrow operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/shared-owned.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nmodule escrow::lock {\n    public fun lock<T: store>(obj: T, ctx: &mut TxContext): (Locked<T>, Key);\n    public fun unlock<T: store>(locked: Locked<T>, key: Key): T\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Results in Subsequent Commands\nDESCRIPTION: This code demonstrates how to use the result of one transaction command as an argument in subsequent commands. It shows examples of splitting coins, transferring objects, and handling multiple results.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Split a coin object off of the gas object:\nconst [coin] = tx.splitCoins(tx.gas, [tx.pure(100)]);\n// Transfer the resulting coin object:\ntx.transferObjects([coin], tx.pure(address));\n\n// Destructuring (preferred, as it gives you logical local names):\nconst [nft1, nft2] = tx.moveCall({ target: '0x2::nft::mint_many' });\ntx.transferObjects([nft1, nft2], tx.pure(address));\n\n// Array indexes:\nconst mintMany = tx.moveCall({ target: '0x2::nft::mint_many' });\ntx.transferObjects([mintMany[0], mintMany[1]], tx.pure(address));\n```\n\n----------------------------------------\n\nTITLE: Finding Index in Vector using Predicate\nDESCRIPTION: A macro function that finds the index of the first element in a vector satisfying a given predicate. Returns an Option containing the index if found, otherwise returns None.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun find_index<$T>($v: &vector<$T>, $f: |&$T| -> bool): Option<u64>\n```\n\n----------------------------------------\n\nTITLE: Recovering Public Key from Secp256k1 Signature in Move\nDESCRIPTION: Native function that recovers a Secp256k1 public key from a 65-byte signature (r, s, v format), the original message, and the hash function used. Will abort if recovery fails or if the signature is invalid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/ecdsa_k1.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic native fun secp256k1_ecrecover(\n    signature: &vector<u8>,\n    msg: &vector<u8>,\n    hash: u8,\n): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Enhanced Increment with Event Emission\nDESCRIPTION: This snippet extends the original increment function to emit a Progress event every time the counter value reaches a multiple of 100. It illustrates the challenge of maintaining backward compatibility when upgrading function definitions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/upgrade.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic struct Progress has copy, drop {\n    reached: u64\n}\n\npublic fun increment(c: &mut Counter) {\n    c.value = c.value + 1;\n\n    if (c.value % 100 == 0) {\n        event::emit(Progress { reached: c.value });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Groth16 Proof in Sui Move\nDESCRIPTION: Sui Move smart contract implementation for verifying the Groth16 proof using the prepared verification key and proof points.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/groth16.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse sui::groth16;\n\npublic fun groth16_bn254_test() {\n    let pvk = groth16::prepare_verifying_key(&groth16::bn254(), &x\"94d781ec65145ed90beca1859d5f38ec4d1e30d4123424bb7b0c6fc618257b1551af0374b50e5da874ed3abbc80822e4378fdef9e72c423a66095361dacad8243d1a043fc217ea306d7c3dcab877be5f03502c824833fc4301ef8b712711c49ebd491d7424efffd121baf85244404bded1fe26bdf6ef5962a3361cef3ed1661d897d6654c60dca3d648ce82fa91dc737f35aa798fb52118bb20fd9ee1f84a7aabef505258940dc3bc9de41472e20634f311e5b6f7a17d82f2f2fcec06553f71e5cd295f9155e0f93cb7ed6f212d0ccddb01ebe7dd924c97a3f1fc9d03a9eb915020000000000000072548cb052d61ed254de62618c797853ad3b8a96c60141c2bfc12236638f1b0faf9ecf024817d8964c4b2fed6537bcd70600a85cdec0ca4b0435788dbffd81ab\");\n    let proof_points = groth16::proof_points_from_bytes(x\"212d4457550f258654a24a6871522797ab262dee4d7d1f89af7da90dc0904eac57ce183e6f7caca9a98755904c1398ff6288cec9877f98f2d3c776c448b9ad166839e09d77967b66129c4942eee6d3eaf4a0ce2a841acc873a46ae35e40f0088288d038857c70a1415300544d7cf376949a372049679afa35ee5206b58266184\");\n    let public_inputs = groth16::public_proof_inputs_from_bytes(x\"0100000001000000000000000000000000000000000000000000000000000000\");\n    assert!(groth16::verify_groth16_proof(&groth16::bn254(), &pvk, &public_inputs, &proof_points));\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding JWT Token in TypeScript\nDESCRIPTION: TypeScript code snippet demonstrating how to decode a JWT token using a library like jwt_decode and map it to a JwtPayload interface.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/zklogin-integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst decodedJwt = jwt_decode(encodedJWT) as JwtPayload;\n\nexport interface JwtPayload {\n\tiss?: string;\n\tsub?: string; //Subject ID\n\taud?: string[] | string;\n\texp?: number;\n\tnbf?: number;\n\tiat?: number;\n\tjti?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sui Client Environment\nDESCRIPTION: Series of shell commands to configure the Sui client CLI for testnet usage, including environment setup and token acquisition.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ sui client envs\n$ sui client new-env --alias testnet --rpc https://fullnode.testnet.sui.io:443\n$ sui client switch --env testnet\n$ sui client faucet\n```\n\n----------------------------------------\n\nTITLE: Burning tokenized assets in Rust\nDESCRIPTION: The burn function allows platform admins to burn a tokenized asset using the assetCap, removing it from circulation. The supply decreases by the burned asset's balance. Only works with assets marked as burnable.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npublic fun burn<T>(\n        cap: &mut AssetCap<T>,\n        tokenized_asset: TokenizedAsset<T>\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Permissionless Pool in DeepBook\nDESCRIPTION: Function to create a permissionless pool (market) for trading between two assets. It requires base and quote type parameters, along with tick size, lot size, minimum order size, and creation fee in DEEP tokens.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/permissionless-pool.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n/// Create a pool permissionlessly. Any user can create a pool if the pool does not exist.\n/// A pool is identified by the pair of coins, <BaseType, QuoteType>.\n/// Here, BaseType refers to the asset being traded, and QuoteType refers to the asset used to quote the prices.\n/// For example, in a BTC/USDC pool, BTC is the base asset and USDC is the quote asset.\n/// @param _DEEP Access to the protocol object that ensures authorization to access certain admin APIs.\n/// @param base_type The base asset type. For example, in a BTC/USDC pool, this is BTC.\n/// @param quote_type The quote asset type. For example, in a BTC/USDC pool, this is USDC.\n/// @param tick_size The tick size (minimum price increment) of the pool, in terms of the number of quote asset's smallest unit.\n/// For instance, if USDC has 6 decimals and the tick size is set to 1000, the minimum price increment is 0.001 USDC.\n/// @param lot_size The lot size (minimum quantity increment) of the pool, in terms of the number of base asset's smallest unit.\n/// For instance, if BTC has 8 decimals and the lot size is set to 1000, the minimum quantity increment is 0.00001 BTC.\n/// @param min_size The minimum order size allowed, in terms of the number of base asset's smallest unit.\n/// @param creation_fee The fee to create a pool, denominated in DEEP token. This fee is burned.\n/// @return pool_id The ID of the created pool.\npublic fun create_permissionless_pool<BaseType, QuoteType>(\n    _DEEP: &DEEP,\n    base_type: TypeName,\n    quote_type: TypeName,\n    tick_size: u64,\n    lot_size: u64,\n    min_size: u64,\n    creation_fee: Coin<DEEPV2>,\n    ctx: &mut TxContext\n): ID {\n    create_pool(base_type, quote_type, tick_size, lot_size, min_size, OWNER_CAP_DEFAULT, creation_fee, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Return Type Examples\nDESCRIPTION: Demonstrates different ways to specify return types for functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\nfun zero(): u64 { 0 }\n```\n\n----------------------------------------\n\nTITLE: Maintaining Pure Functions in Move\nDESCRIPTION: This snippet discusses the importance of keeping functions pure in Move for better composability. It presents exemplary implementations of pure, recommended, and impure functions, showcasing best practices.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/conventions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nmodule conventions::amm;\n\nuse sui::coin::Coin;\n\npublic struct Pool has key {\n    id: UID\n}\n\n// right -> returns the excess coins even if they have zero value.\npublic fun add_liquidity<CoinX, CoinY, LpCoin>(pool: &mut Pool, coin_x: Coin<CoinX>, coin_y: Coin<CoinY>): (Coin<LpCoin>, Coin<CoinX>, Coin<CoinY>) {\n    // Implementation omitted.\n    abort(0)\n}\n\n// right but not recommended\npublic fun add_liquidity_and_transfer<CoinX, CoinY, LpCoin>(pool: &mut Pool, coin_x: Coin<CoinX>, coin_y: Coin<CoinY>, recipient: address) {\n    let (lp_coin, coin_x, coin_y) = add_liquidity<CoinX, CoinY, LpCoin>(pool, coin_x, coin_y);\n    transfer::public_transfer(lp_coin, recipient);\n    transfer::public_transfer(coin_x, recipient);\n    transfer::public_transfer(coin_y, recipient);\n}\n\n// wrong\npublic fun impure_add_liquidity<CoinX, CoinY, LpCoin>(pool: &mut Pool, coin_x: Coin<CoinX>, coin_y: Coin<CoinY>, ctx: &mut TxContext): Coin<LpCoin> {\n    let (lp_coin, coin_x, coin_y) = add_liquidity<CoinX, CoinY, LpCoin>(pool, coin_x, coin_y);\n    transfer::public_transfer(coin_x, tx_context::sender(ctx));\n    transfer::public_transfer(coin_y, tx_context::sender(ctx));\n\n    lp_coin\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Fields in Move\nDESCRIPTION: This snippet uses the Sui framework's `add` function to dynamically add fields to an object. It affects gas costs only when accessed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/dynamic-fields.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\n{@inject: crates/sui-framework/packages/sui-framework/sources/dynamic_field.move#fun=add noComments}\n```\n\nLANGUAGE: Move\nCODE:\n```\n{@inject: crates/sui-framework/packages/sui-framework/sources/dynamic_object_field.move#fun=add noComments}\n```\n\n----------------------------------------\n\nTITLE: Swapping or Filling Option in Sui Move\nDESCRIPTION: Swaps the old value inside the option with a new value and returns the old value, or fills it if there is no old value. Allows for the option not holding a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun swap_or_fill<Element>(t: &mut Option<Element>, e: Element): Option<Element> {\n    let vec_ref = &mut t.vec;\n    let old_value = if (vec_ref.is_empty()) none() else some(vec_ref.pop_back());\n    vec_ref.push_back(e);\n    old_value\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Transaction Execution Hook in TypeScript\nDESCRIPTION: Implements a custom hook for executing transactions on the Sui blockchain. It uses the Sui client and wallet connection to sign and execute transaction blocks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Content of src/hooks/useTransactionExecution.ts not provided in the input\n```\n\n----------------------------------------\n\nTITLE: Claiming and Keeping a Publisher Object in Move\nDESCRIPTION: Claims a Publisher object and sends it to the transaction sender. This function is designed to be called in the module initializer.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun claim_and_keep<OTW: drop>(otw: OTW, ctx: &mut TxContext) {\n    sui::transfer::public_transfer(claim(otw, ctx), ctx.sender())\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Funds using WithdrawCap in Move\nDESCRIPTION: Function allowing WithdrawCap holders to withdraw funds from a BalanceManager without requiring owner privileges. Supports withdrawing specific amounts of a coin type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/balance-manager.mdx#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic fun withdraw_with_cap<T>(self: &mut BalanceManager, cap: &WithdrawCap, amount: u64, ctx: &mut TxContext): Coin<T> {\n    assert!(object::id(self) == cap.for, EWrongCap);\n\n    let type = type_name::get<T>();\n    if (!table::contains(&self.balances, type)) {\n        table::add(&mut self.balances, type, balance::zero<T>());\n        table::add(&mut self.locked, type, balance::zero<T>());\n    };\n\n    let balance = table::borrow_mut(&mut self.balances, type);\n    assert!(balance::value(balance) >= amount, EInsufficientBalance);\n    coin::from_balance(balance::split(balance, amount), ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Different Sui Networks with Custom URLs\nDESCRIPTION: Shows how to connect to local and predefined Sui networks using SuiClientBuilder. It demonstrates both the custom URL approach and the convenience functions for connecting to specific network endpoints.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-sdk/README.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse sui_sdk::SuiClientBuilder;\n\n#[tokio::main]\nasync fn main() -> Result<(), anyhow::Error> {\n    let sui = SuiClientBuilder::default()\n        .build(\"http://127.0.0.1:9000\") // local network address\n        .await?;\n    println!(\"Sui local network version: {}\", sui.api_version());\n\n    // local Sui network, like the above one but using the dedicated function\n    let sui_local = SuiClientBuilder::default().build_localnet().await?;\n    println!(\"Sui local network version: {}\", sui_local.api_version());\n\n    // Sui devnet -- https://fullnode.devnet.sui.io:443\n    let sui_devnet = SuiClientBuilder::default().build_devnet().await?;\n    println!(\"Sui devnet version: {}\", sui_devnet.api_version());\n\n    // Sui testnet -- https://fullnode.testnet.sui.io:443\n    let sui_testnet = SuiClientBuilder::default().build_testnet().await?;\n    println!(\"Sui testnet version: {}\", sui_testnet.api_version());\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TreasuryCap Struct in Move\nDESCRIPTION: Definition of the TreasuryCap struct which provides the capability to mint and burn coins of a specific type. This capability is transferable and storable.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic struct TreasuryCap<phantom T> has key, store {\n    id: sui::object::UID,\n    total_supply: sui::balance::Supply<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Popping Front Element from LinkedTable (Move)\nDESCRIPTION: Removes and returns the front element of the LinkedTable. Aborts with ETableIsEmpty if the table is empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pop_front<K: copy + drop + store, V: store>(table: &mut LinkedTable<K, V>): (K, V) {\n    assert!(table.head.is_some(), ETableIsEmpty);\n    let head = *table.head.borrow();\n    (head, table.remove(head))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Display<T> Struct for Object Presentation in Move\nDESCRIPTION: Display<T> struct definition that controls how an object of type T should be presented. It contains customizable fields stored in a VecMap and a version number that can be manually updated by the publisher.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Display<phantom T: key> has key, store {\n    id: sui::object::UID,\n    fields: sui::vec_map::VecMap<std::string::String, std::string::String>,\n    version: u16\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Partial Signatures into Multisignature in Sui\nDESCRIPTION: This snippet shows how to use the 'sui keytool multi-sig-combine-partial-sig' command to combine individual signatures into a multisignature. It requires public keys, their weights, threshold, and the individual signatures as inputs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ sui keytool multi-sig-combine-partial-sig --pks $PKEY_1 $PKEY_2 $PKEY_3 --weights 1 2 3 --threshold 3 --sigs $SIG_1 $SIG_2\n```\n\n----------------------------------------\n\nTITLE: Creating New ObjectTable in Move\nDESCRIPTION: Function to create a new, empty ObjectTable. It initializes the table with a new unique ID and size of 0.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_table.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new<K: copy + drop + store, V: key + store>(ctx: &mut TxContext): ObjectTable<K, V> {\n    ObjectTable {\n        id: object::new(ctx),\n        size: 0,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Bytes in Sui\nDESCRIPTION: This function generates a specified number of random bytes using the RandomGenerator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun generate_bytes(gen: &mut RandomGenerator, num_bytes: u64): vector<u8> {\n    let result = vector[];\n    while (vector::length(&result) < num_bytes) {\n        if (vector::is_empty(&gen.buffer)) {\n            derive_next_block(gen);\n        };\n        let num_to_copy = min((num_bytes - vector::length(&result) as u64), vector::length(&gen.buffer));\n        vector::append(&mut result, vector::drain(&mut gen.buffer, (num_to_copy as u64)));\n    };\n    result\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Cancelling Limit Orders in DeepBook CLOB V2\nDESCRIPTION: Implementation of batch_cancel_order function that allows cancelling multiple limit orders together to save gas costs. The function groups orders by price level for efficiency, unlocks asset balances, and emits appropriate events. It handles validation of order ownership and processes orders in a gas-optimized manner.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_34\n\nLANGUAGE: move\nCODE:\n```\npublic fun batch_cancel_order<BaseAsset, QuoteAsset>(\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    order_ids: vector<u64>,\n    account_cap: &AccountCap\n) {\n    let pool_id = *object::uid_as_inner(&pool.id);\n    // First group the order ids according to price level,\n    // so that we don't have to retrieve the PriceLevel multiple times if there are orders at the same price level.\n    // Iterate over each price level, retrieve the corresponding PriceLevel.\n    // Iterate over the order ids that need to be canceled at that price level,\n    // retrieve and remove the order from open orders of the PriceLevel.\n    let owner = account_owner(account_cap);\n    assert!(contains(&pool.usr_open_orders, owner), 0);\n    let mut tick_index: u64 = 0;\n    let mut tick_price: u64 = 0;\n    let n_order = vector::length(&order_ids);\n    let mut i_order = 0;\n    let usr_open_orders = borrow_mut(&mut pool.usr_open_orders, owner);\n    let mut canceled_order_events = vector[];\n    while (i_order < n_order) {\n        let order_id = *vector::borrow(&order_ids, i_order);\n        assert!(linked_table::contains(usr_open_orders, order_id), EInvalidOrderId);\n        let new_tick_price = *linked_table::borrow(usr_open_orders, order_id);\n        let is_bid = order_is_bid(order_id);\n        if (new_tick_price != tick_price) {\n            tick_price = new_tick_price;\n            let (tick_exists, new_tick_index) = find_leaf(\n                if (is_bid) { &pool.bids } else { &pool.asks },\n                tick_price\n            );\n            assert!(tick_exists, EInvalidTickPrice);\n            tick_index = new_tick_index;\n        };\n        let order = remove_order(\n            if (is_bid) { &mut pool.bids } else { &mut pool.asks },\n            usr_open_orders,\n            tick_index,\n            order_id,\n            owner\n        );\n        if (is_bid) {\n            let (_is_round_down, balance_locked) = clob_math::unsafe_mul_round(order.quantity, order.price);\n            custodian::unlock_balance(&mut pool.quote_custodian, owner, balance_locked);\n        } else {\n            custodian::unlock_balance(&mut pool.base_custodian, owner, order.quantity);\n        };\n        let canceled_order_event = AllOrdersCanceledComponent<BaseAsset, QuoteAsset> {\n            client_order_id: order.client_order_id,\n            order_id: order.order_id,\n            is_bid: order.is_bid,\n            owner: order.owner,\n            original_quantity: order.original_quantity,\n            base_asset_quantity_canceled: order.quantity,\n            price: order.price\n        };\n        vector::push_back(&mut canceled_order_events, canceled_order_event);\n        i_order = i_order + 1;\n    };\n    if (!vector::is_empty(&canceled_order_events)) {\n        event::emit(AllOrdersCanceled<BaseAsset, QuoteAsset> {\n            pool_id,\n            orders_canceled: canceled_order_events,\n        });\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests in a Move Project\nDESCRIPTION: Demonstrates how to run tests in a Move package using the sui move test command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/move.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move test\n```\n\nLANGUAGE: sh\nCODE:\n```\nUPDATING GIT DEPENDENCY https://github.com/MystenLabs/sui.git\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING smart_contract_test\nRunning Move unit tests\nTest result: OK. Total tests: 0; passed: 0; failed: 0\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Sui Environments in Shell\nDESCRIPTION: This command displays the available environment aliases for Sui networks, showing the active network and other configured endpoints.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/connect.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client envs\n```\n\n----------------------------------------\n\nTITLE: DeepBook Pool Structure Implementation in Move\nDESCRIPTION: Core Pool structure definition for DeepBook trading pairs, implementing order management using crit-bit trees. The structure maintains bid/ask orders, user open orders, fee rates, and asset custodians for a specific trading pair.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/pools.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nstruct Pool<phantom BaseAsset, phantom QuoteAsset> has key {\n    // The key to the following crit-bit tree are order prices.\n    id: UID,\n    // All open bid orders.\n    bids: CritbitTree<TickLevel>,\n    // All open ask orders.\n    asks: CritbitTree<TickLevel>,\n    // Order id of the next bid order, starting from 0.\n    next_bid_order_id: u64,\n    // Order id of the next ask order, starting from 1<<63.\n    next_ask_order_id: u64,\n    // Map from order id to price level for fast retrieval of orders upon canceling of orders.\n    usr_open_orders: Table<ID, Table<u64, Order>>,\n    // taker_fee_rate should be strictly greater than maker_rebate_rate.\n    // The difference between taker_fee_rate and maker_rabate_rate goes to the protocol.\n    // 10^9 scaling\n    taker_fee_rate: u64,\n    // 10^9 scaling\n    maker_rebate_rate: u64,\n    tick_size: u64,\n    lot_size: u64,\n    // other pool info\n    base_custodian: Custodian<BaseAsset>,\n    quote_custodian: Custodian<QuoteAsset>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Object Struct for Wrapping\nDESCRIPTION: This snippet defines a struct 'Object' with 'key' and 'store' abilities to represent an NFT-style object with attributes for scarcity and style.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/wrapped.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic struct Object has key, store {\n    id: UID,\n    scarcity: u8,\n    style: u8,\n}\n```\n\n----------------------------------------\n\nTITLE: Token and Coin Type Definitions in Move\nDESCRIPTION: Defines the core structure differences between Coin and Token types in Sui. Shows that Tokens have only the 'key' ability while Coins have both 'key' and 'store' abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n// defined in `sui::coin`\nstruct Coin<phantom T> has key, store { id: UID, balance: Balance<T> }\n\n// defined in `sui::token`\nstruct Token<phantom T> has key { id: UID, balance: Balance<T> }\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Profits from Sui Kiosk (Move)\nDESCRIPTION: This function allows the owner to withdraw profits from the Kiosk. It requires the KioskOwnerCap and can withdraw a specific amount or all available profits.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_28\n\nLANGUAGE: Move\nCODE:\n```\npublic fun withdraw(\n    self: &mut Kiosk,\n    cap: &KioskOwnerCap,\n    amount: Option<u64>,\n    ctx: &mut TxContext,\n): Coin<SUI> {\n    assert!(self.has_access(cap), ENotOwner);\n    let amount = if (amount.is_some()) {\n        let amt = amount.destroy_some();\n        assert!(amt <= self.profits.value(), ENotEnough);\n        amt\n    } else {\n        self.profits.value()\n    };\n    coin::take(&mut self.profits, amount, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Deny List Management - Rust Implementation\nDESCRIPTION: Rust functions for adding and removing addresses from the deny list of regulated coins, implementing access control through the Sui coin module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin/regulated.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub async fn deny_list_add(\n    client: &SuiClient,\n    signer: &Keypair,\n    deny_cap_id: ObjectID,\n    addresses: Vec<SuiAddress>,\n) -> Result<CertifiedTransactionEffects, anyhow::Error> {\n    let ptb = ProgrammableTransactionBuilder::new().move_call(\n        ObjectID::from_str(\"0x2\").unwrap(),\n        \"coin\",\n        \"deny_list_v2_add\",\n        vec![],\n        vec![\n            SuiValue::Object(ObjectID::from_str(\"0x403\").unwrap()),\n            SuiValue::Object(deny_cap_id),\n            SuiValue::Vector(addresses.into_iter().map(SuiValue::Address).collect()),\n        ],\n    );\n    execute_programmable_transaction(client, signer, ptb).await\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Zipping with Reference-Based Mapping in Move\nDESCRIPTION: The zip_map_ref macro iterates through references to two vectors, applying a function to references of each element pair and collecting results into a new vector. It aborts if the vectors have different lengths and preserves element order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_34\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun zip_map_ref<$T1, $T2, $U>(\n    $v1: &vector<$T1>,\n    $v2: &vector<$T2>,\n    $f: |&$T1, &$T2| -> $U,\n): vector<$U> {\n    let mut r = vector[];\n    zip_do_ref!($v1, $v2, |el1, el2| r.push_back($f(el1, el2)));\n    r\n}\n```\n\n----------------------------------------\n\nTITLE: Lock and Key Contract Implementation\nDESCRIPTION: Implements the core locking mechanism for atomic swaps, including Locked<T> and Key types and their associated functions for locking and unlocking objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule escrow::lock {\n    use sui::object::{Self, ID, UID};\n    use sui::tx_context::TxContext;\n    use sui::dynamic_object_field as dof;\n\n    struct Locked<T: store> has key, store {\n        id: UID,\n        key_id: ID,\n    }\n\n    struct Key has key, store {\n        id: UID,\n    }\n\n    const ELockKeyMismatch: u64 = 0;\n\n    public fun lock<T: store>(obj: T, ctx: &mut TxContext): (Locked<T>, Key) {\n        let key = Key { id: object::new(ctx) };\n        let locked = Locked<T> {\n            id: object::new(ctx),\n            key_id: object::id(&key),\n        };\n        dof::add(&mut locked.id, true, obj);\n        (locked, key)\n    }\n\n    public fun unlock<T: store>(locked: Locked<T>, key: Key): T {\n        assert!(locked.key_id == object::id(&key), ELockKeyMismatch);\n        let Locked { id, key_id: _ } = locked;\n        let Key { id: key_id } = key;\n        object::delete(key_id);\n        dof::remove(&mut id, true)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Staking DEEP Tokens in DeepBook Pool\nDESCRIPTION: Function for staking DEEP tokens in a DeepBook pool. Users must have DEEP tokens available in their balance_manager, and the stake becomes active in the following epoch. Active stake above the required amount enables reduced taker fees and trading fee rebates.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/staking-governance.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic fun stake(\n    self: &mut Pool,\n    balance_manager: &mut BalanceManager,\n    amount: u64,\n    ctx: &mut TxContext\n) {\n    let pool_id = object::id(self);\n    assert!(balance::value(&balance_manager.balance) >= amount, EInsufficientBalance);\n    let staking_record = begin_with_mut(&mut balance_manager.staking_records, pool_id);\n    staking_record.inactive_stake = staking_record.inactive_stake + amount;\n    balance::decrease_supply(&mut self.deep_supply, amount);\n    self.unstaked += amount;\n}\n```\n\n----------------------------------------\n\nTITLE: Assembling zkLogin Signature and Submitting Transaction in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to assemble a zkLogin signature by combining the ZK proof, maxEpoch, and ephemeral signature. It then shows how to submit a transaction using this signature.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/zklogin-integration.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst ephemeralKeyPair = new Ed25519Keypair();\n\nconst client = new SuiClient({ url: '<YOUR_RPC_URL>' });\n\nconst txb = new Transaction();\n\ntxb.setSender(zkLoginUserAddress);\n\nconst { bytes, signature: userSignature } = await txb.sign({\n\tclient,\n\tsigner: ephemeralKeyPair, // This must be the same ephemeral key pair used in the ZKP request\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genAddressSeed, getZkLoginSignature } from '@mysten/sui/zklogin';\n\nconst addressSeed = genAddressSeed(\n\tBigInt(userSalt!),\n\t'sub',\n\tdecodedJwt.sub,\n\tdecodedJwt.aud,\n).toString();\n\nconst zkLoginSignature = getZkLoginSignature({\n\tinputs: {\n\t\t...partialZkLoginSignature,\n\t\taddressSeed,\n\t},\n\tmaxEpoch,\n\tuserSignature,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.executeTransactionBlock({\n\ttransactionBlock: bytes,\n\tsignature: zkLoginSignature,\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Plinko Game Interaction Flow with Mermaid Sequence Diagram\nDESCRIPTION: This sequence diagram illustrates the interaction flow between the Player, UI (Next.js Application), Backend API, and Sui Blockchain during a Plinko game. It shows the process of placing a bet, starting the game, generating randomness, and displaying the outcome.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/plinko.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Player as Player\n    participant UI as Next.js Application\n    participant API as Backend API\n    participant Blockchain as Sui Blockchain\n\n    Note over Player, Blockchain: Plinko Game Interaction Flow\n\n    Player->>+UI: Places bet, selects number of balls, presses play\n    UI->>Player: Displays game as pending, awaiting outcome\n    UI->>+Blockchain: Sends bet and number of balls\n    UI->>+Blockchain: Calls counter_nft::mint to produce vrf_input, calls plinko::start_game\n    Note over Blockchain: Checks stakes, balances, creates and increments the counter, emits 'NewGame' event\n    Blockchain-->>-UI: Returns gameId, vrfInput\n    UI->>+API: POST /game/plinko/end with { gameId, vrfInput, numberOfBalls }\n    Note over UI: Reads from the 'NewGame' event gameId, vrfInput\n    Note over API: Signs vrfInput with house's private key\n    API->>+Blockchain: Calls plinko::finish_game with signed vrfInput\n    Note over Blockchain: Verifies signature, calculates outcome (payments, balls' trace paths), emits Outcome event\n    Blockchain-->>-API: Returns game outcome event (trace paths, winnings)\n    API-->>-UI: Sends game outcome (trace paths, winnings)\n    UI-->>-Player: Displays game result, balls' descend, and winnings\n```\n\n----------------------------------------\n\nTITLE: Depositing Quote Asset using TypeScript SDK\nDESCRIPTION: TypeScript method to deposit quote asset into a custodian account. It constructs a transaction block for the deposit operation, taking token types, coin object, and account capability as inputs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\npublic depositQuote(\n    token1: string,\n    token2: string,\n    coin: string | TransactionArgument,\n    accountCap: string | TransactionArgument,\n    overrides: Overrides = new Overrides(),\n): TransactionBlock {\n    const tokenType1 = convertToTokenType(token1, this.records);\n    const tokenType2 = convertToTokenType(token2, this.records);\n    const poolInfo = getPoolInfoByRecords(tokenType1, tokenType2, this.records);\n    overrides.txb.moveCall({\n        typeArguments: [tokenType1, tokenType2],\n        target: `${this.configs.swapPackageId}::clob::deposit_quote`,\n        arguments: [\n            overrides.txb.object(String(poolInfo.clob)),\n            typeof coin == 'string' ? overrides.txb.object(coin) : coin,\n            typeof accountCap == 'string' ? overrides.txb.object(String(accountCap)) : accountCap,\n        ],\n    });\n    overrides.txb.setGasBudget(overrides.gasBudget);\n    return overrides.txb;\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Elements in TableVec in Move\nDESCRIPTION: The `swap` function swaps the elements at indices `i` and `j` in TableVec `t`. It checks for out-of-bounds indices and safely performs the swap if indices are valid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table_vec.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun swap<Element: store>(t: &mut sui::table_vec::TableVec<Element>, i: u64, j: u64) {\n    assert!(t.length() > i, EIndexOutOfBound);\n    assert!(t.length() > j, EIndexOutOfBound);\n    if (i == j) {\n        return\n    };\n    let element_i = t.contents.remove(i);\n    let element_j = t.contents.remove(j);\n    t.contents.add(j, element_i);\n    t.contents.add(i, element_j);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Wallet Interface in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic wallet class that implements the Wallet interface from the @mysten/wallet-standard package. It defines core properties like version, name, icon, and supported chains.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/wallet-standard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SUI_DEVNET_CHAIN, Wallet } from '@mysten/wallet-standard';\n\nclass YourWallet implements Wallet {\n\tget version() {\n\t\t// Return the version of the Wallet Standard this implements (in this case, 1.0.0).\n\t\treturn '1.0.0';\n\t}\n\tget name() {\n\t\treturn 'Wallet Name';\n\t}\n\tget icon() {\n\t\treturn 'some-icon-data-url';\n\t}\n\t// Return the Sui chains that your wallet supports.\n\tget chains() {\n\t\treturn [SUI_DEVNET_CHAIN];\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tokens to Sui Bridge\nDESCRIPTION: This function adds new tokens to the Sui bridge. It processes multiple tokens, adding each to the bridge's treasury with its corresponding ID, type name, and price.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_25\n\nLANGUAGE: Move\nCODE:\n```\nfun execute_add_tokens_on_sui(inner: &mut BridgeInner, payload: AddTokenOnSui) {\n    let native_token = payload.is_native();\n    let mut token_ids = payload.token_ids();\n    let mut token_type_names = payload.token_type_names();\n    let mut token_prices = payload.token_prices();\n    assert!(token_ids.length() == token_type_names.length(), EMalformedMessageError);\n    assert!(token_ids.length() == token_prices.length(), EMalformedMessageError);\n    while (token_ids.length() > 0) {\n        let token_id = token_ids.pop_back();\n        let token_type_name = token_type_names.pop_back();\n        let token_price = token_prices.pop_back();\n        inner.treasury.add_new_token(token_type_name, token_id, native_token, token_price)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer Policy Struct Definition\nDESCRIPTION: Defines the core TransferPolicy type that authorizes transfers. Includes a SUI balance for fee collection and a set of rule types for verification.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TransferPolicy<phantom T> has key, store {\n    id: sui::object::UID,\n    balance: sui::balance::Balance<sui::sui::SUI>,\n    rules: sui::vec_set::VecSet<std::type_name::TypeName>\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Objects from Shared Objects in Move\nDESCRIPTION: This Move code defines a shared object with a counter that anyone can increment, but only a specific address can receive objects from it. It demonstrates dynamic authorization checks for receiving objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transfers/transfer-to-object.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nmodule examples::shared_object_auth;\n\nuse transfer::Receiving;\n\nconst EAccessDenied: u64 = 0;\nconst AuthorizedReceiverAddr: address = @0xB0B;\n\npublic struct SharedObject has key {\n    id: UID,\n    counter: u64,\n}\n\npublic fun create(ctx: &mut TxContext) {\n    let s = SharedObject {\n        id: object::new(ctx),\n        counter: 0,\n    };\n    transfer::share_object(s);\n}\n\npublic fun increment(obj: &mut SharedObject) {\n    obj.counter = obj.counter + 1;\n}\n\npublic fun receive_object<T: key + store>(\n    obj: &mut SharedObject,\n    sent: Receiving<T>,\n    ctx: &TxContext\n): T {\n    assert!(ctx.sender() == AuthorizedReceiverAddr, EAccessDenied);\n    transfer::public_receive(&mut obj.id, sent)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Sui Move module with unit tests\nDESCRIPTION: A Move module named 'my_module' that includes a struct, functions, and unit tests to demonstrate various testing scenarios.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\n// filename: sources/my_module.move\nmodule test_example::my_module {\n\n    public struct Wrapper(u64)\n\n    const ECoinIsZero: u64 = 0;\n\n    public fun make_sure_non_zero_coin(coin: Wrapper): Wrapper {\n        assert!(coin.0 > 0, ECoinIsZero);\n        coin\n    }\n\n    #[test]\n    fun make_sure_non_zero_coin_passes() {\n        let coin = Wrapper(1);\n        let Wrapper(_) = make_sure_non_zero_coin(coin);\n    }\n\n    #[test]\n    // Or #[expected_failure] if we don't care about the abort code\n    #[expected_failure(abort_code = ECoinIsZero)]\n    fun make_sure_zero_coin_fails() {\n        let coin = Wrapper(0);\n        let Wrapper(_) = make_sure_non_zero_coin(coin);\n    }\n\n    #[test_only] // test only helper function\n    fun make_coin_zero(coin: &mut Wrapper) {\n        coin.0 = 0;\n    }\n\n    #[test]\n    #[expected_failure(abort_code = ECoinIsZero)]\n    fun make_sure_zero_coin_fails2() {\n        let mut coin = Wrapper(10);\n        coin.make_coin_zero();\n        let Wrapper(_) = make_sure_non_zero_coin(coin);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object with Transfer Restriction\nDESCRIPTION: Creates a Sui Move object with a transfer restriction based on an unlocked flag, preventing transfers when the object is locked\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transfers/custom-rules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic struct Object has key {\n    id: UID,\n    // An `Object` object can only be transferred if this field is `true`\n    unlocked: bool,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectTable Struct in Move\nDESCRIPTION: Defines the ObjectTable struct with a generic key type K and value type V. The struct has a unique ID and size field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_table.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct ObjectTable<phantom K: copy, drop, store, phantom V: key, store> has key, store {\n    id: sui::object::UID,\n    size: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Objects with Move in Sui\nDESCRIPTION: This snippet illustrates the receiving process for objects in Sui using the `receive` and `public_receive` functions specified in a module. The snippets define how objects are received, detailing the access policies and constraints defined by the object's module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transfers/transfer-to-object.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nmodule sui::transfer;\n\n/// Represents the ability to receive an object of type `T`. Cannot be stored.\npublic struct Receiving<phantom T: key> has drop { ... }\n\n/// Given mutable (i.e., locked) access to the `parent` and a `Receiving`\n/// object referencing an object owned by `parent` use the `Receiving` ticket\n/// and return the corresponding object.\n///\n/// This function has custom rules that the Sui Move bytecode verifier enforces to ensure\n/// that `T` is an object defined in the module where `receive` is invoked. Use\n/// `public_receive` to receive an object with `store` outside of its defining module.\n///\n/// NB: &mut UID here allows the defining module of the parent type to\n/// define custom access/permission policies around receiving objects sent\n/// to objects of a type that it defines. You can see this more in the examples.\npublic native fun receive<T: key>(parent: &mut UID, object: Receiving<T>): T;\n\n/// Given mutable (locked) access to the `parent` and a `Receiving` argument\n/// referencing an object of type `T` owned by `parent` use the `object`\n/// argument to receive and return the referenced owned object of type `T`.\n/// The object `T` must have `store` to be received by this function, and\n/// this can be called outside of the module that defines `T`.\npublic native fun public_receive<T: key + store>(parent: &mut UID, object: Receiving<T>): T;\n\n...\n```\n\n----------------------------------------\n\nTITLE: Signing Transaction with Individual Addresses in Sui\nDESCRIPTION: This snippet shows how to sign a transaction using the 'sui keytool sign' command for two different addresses. It requires the address and transaction bytes as inputs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ sui keytool sign --address $ADDRESS1 --data $TXBYTES\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sui keytool sign --address $ADDRESS2 --data $TXBYTES\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Objects in Move\nDESCRIPTION: This Move function demonstrates how to unwrap a nested object. It takes an Outer object, destroys it, and transfers the Inner object to the sender, making it directly accessible.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/versioning.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule example::wrapped {\n    // ...\n\n    entry fun unwrap(outer: Outer, ctx: &TxContext) {\n        let Outer { id, inner } = outer;\n        object::delete(id);\n        transfer::transfer(inner, tx_context::sender(ctx));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Display for Asset Objects - Move\nDESCRIPTION: This code snippet demonstrates how to define a Display structure for Asset objects in the Sui blockchain using the Move programming language. It shows how to set up a template that can interpolate fields from Asset data such as 'id' and 'expiration' for dynamic display. The Display structure allows for customized representation of asset attributes when viewed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/gaming.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic struct Asset has key, store {\n  id: \"0x3301\",\n  expiration: 123456789\n}\n\npublic struct Display has store {\n  \"random_field\": \"The id is {id} and it expires at {expiration}\"\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nDisplay\n{\n  \"random_field\": \"The id is 0x3301 and it expires at 123456789\"\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Ownership in Move Unit Test\nDESCRIPTION: This snippet shows how to transfer ownership of a created object in a Move unit test to resolve the 'unused value without drop' error. It creates a dummy address and transfers the sword object to it.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/build-test.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nlet dummy_address = @0xCAFE;\ntransfer::transfer(sword, dummy_address);\n```\n\n----------------------------------------\n\nTITLE: Treasury Cap Confirmation Example in JavaScript\nDESCRIPTION: Example of minting tokens and confirming a transfer request using TreasuryCap in a TypeScript/JavaScript client.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/action-request.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = new Transaction();\nlet tokenType = '0x....::my_token::MY_TOKEN';\nlet treasuryCapArg = tx.object('0x....');\n\nlet token = tx.moveCall({\n\ttarget: '0x2::token::mint',\n\targuments: [treasuryCapArg, tx.pure.u64(10)],\n\ttypeArguments: [tokenType],\n});\n\nlet request = tx.moveCall({\n\ttarget: '0x2::token::transfer',\n\targuments: [token, tx.pure.address('0x...')],\n\ttypeArguments: [tokenType],\n});\n\ntx.moveCall({\n\ttarget: '0x2::token::confirm_with_treasury_cap',\n\targuments: [treasuryCapArg, request],\n\ttypeArguments: [tokenType],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Summary Data in DeepBook API\nDESCRIPTION: Describes the response format for the summary endpoint, which returns information for all trading pairs in DeepBook. The response includes various metrics for each trading pair.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"trading_pairs\": \"string\",\n\t\"quote_currency\": \"string\",\n\t\"last_price\": float,\n\t\"lowest_price_24h\": float,\n\t\"highest_bid\": float,\n\t\"base_volume\": float,\n\t\"price_change_percent_24h\": float,\n\t\"quote_volume\": float,\n\t\"lowest_ask\": float,\n\t\"highest_price_24h\": float,\n\t\"base_currency\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Component for Adding a New Review - TypeScript\nDESCRIPTION: The AddReview component allows users to create new reviews for services. It utilizes the useWalletKit to sign and execute transactions related to review submissions. Meant for TypeScript integration within a React application.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { useWalletKit } from 'some-wallet-kit';\n\nconst AddReview = ({ serviceId }) => {\n    const { signAndExecuteTransaction } = useWalletKit();\n    const [reviewText, setReviewText] = useState('');\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        await signAndExecuteTransaction({ /* transaction details */ });\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <textarea onChange={(e) => setReviewText(e.target.value)} />\n            <button type='submit'>Add Review</button>\n        </form>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Join Staked Sui Tokens\nDESCRIPTION: Combines two StakedSui tokens by merging their principals after verifying compatibility of staking parameters like pool ID and activation epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_35\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun join_staked_sui(self: &mut StakedSui, other: StakedSui) {\n    assert!(is_equal_staking_metadata(self, &other), EIncompatibleStakedSui);\n    let StakedSui { id, principal, .. } = other;\n    id.delete();\n    self.principal.join(principal);\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Creating a UTF-8 String with Option Return\nDESCRIPTION: Function that attempts to create a string from bytes, returning an Option type instead of aborting on invalid UTF-8.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_utf8(bytes: vector<u8>): Option<String> {\n    if (internal_check_utf8(&bytes)) option::some(String { bytes }) else option::none()\n}\n```\n\n----------------------------------------\n\nTITLE: Undoing Validator Report\nDESCRIPTION: Reverses a previous validator report action. Requires reportee to be active validator and sender must have previously reported them.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun undo_report_validator(\n    wrapper: &mut SuiSystemState,\n    cap: &UnverifiedValidatorOperationCap,\n    reportee_addr: address,\n) {\n    wrapper.load_system_state_mut().undo_report_validator(cap, reportee_addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with Let Bindings in Move\nDESCRIPTION: Examples of using let bindings to declare variables in Move, including pattern matching and struct destructuring.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nlet (x, y): (u64, u64) = (0, 1);\n\nlet Foo { f, g: x } = Foo { f: 0, g: 1 };\n```\n\n----------------------------------------\n\nTITLE: Defining Borrow Struct in Move\nDESCRIPTION: Defines the Borrow struct, a hot potato that ensures the borrowed object is returned. It contains a ref field of type address and an obj field of type sui::object::ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/borrow.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Borrow {\n    ref: address,\n    obj: sui::object::ID\n}\n```\n\n----------------------------------------\n\nTITLE: Build Move Project using Sui Move\nDESCRIPTION: This command builds the Move project located in the current directory. The output of the build process is the compiled Move bytecode.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n\"sui move build\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Account System in Move\nDESCRIPTION: This Move code defines a basic account system where an Account object holds coin balances as dynamic fields. It includes functions for accepting payments and withdrawing coins.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transfers/transfer-to-object.mdx#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nmodule examples::account;\n\nuse sui::dynamic_field as df;\nuse sui::coin::{Self, Coin};\nuse transfer::Receiving;\n\nconst EBalanceDONE: u64 = 1;\n\npublic struct Account has key {\n    id: UID,\n}\n\npublic struct AccountBalance<phantom T> has copy, drop, store { }\n\npublic fun accept_payment<T>(account: &mut Account, sent: Receiving<Coin<T>>) {\n    let coin = transfer::public_receive(&mut account.id, sent);\n    let account_balance_type = AccountBalance<T>{};\n    let account_uid = &mut account.id;\n\n    if (df::exists_(account_uid, account_balance_type)) {\n        let balance: &mut Coin<T> = df::borrow_mut(account_uid, account_balance_type);\n        balance.join(coin);\n    } else {\n        df::add(account_uid, account_balance_type, coin);\n    }\n}\n\npublic fun withdraw<T>(account: &mut Account, amount: u64, ctx: &mut TxContext): Coin<T> {\n    let account_balance_type = AccountBalance<T>{};\n    let account_uid = &mut account.id;\n    assert!(df::exists_(account_uid, account_balance_type), EBalanceDONE);\n    let balance: &mut Coin<T> = df::borrow_mut(account_uid, account_balance_type);\n    balance.split(amount, ctx)\n}\n\npublic fun transfer_account(account: Account, to: address, _ctx: &mut TxContext) {\n    transfer::transfer(account, to);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Standard Features for Sui Wallet\nDESCRIPTION: This code shows how to implement the required features for a Sui wallet, including connect, events, and various transaction signing methods. It adds these features to the wallet class under the features property with their corresponding implementation methods.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/wallet-standard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ConnectFeature,\n  ConnectMethod,\n  EventsFeature,\n  EventsOnMethod,\n  SuiFeatures,\n  SuiSignPersonalMessageMethod,\n  SuiSignTransactionMethod,\n  SuiSignAndExecuteTransactionMethod,\n  SuiReportTransactionEffectsMethod\n} from \"@mysten/wallet-standard\";\n\nclass YourWallet implements Wallet {\n\t/* ... existing code from above ... */\n\n  get features(): ConnectFeature & EventsFeature & SuiFeatures {\n    return {\n      \"standard:connect\": {\n        version: \"1.0.0\",\n        connect: this.#connect,\n      },\n      \"standard:events\": {\n        version: \"1.0.0\",\n        on: this.#on,\n      },\n\t\t\t\"sui:signPersonalMessage\": {\n        version: \"1.0.0\",\n\t\t\t\tsignPersonalMessage: this.#signPersonalMessage,\n\t\t\t},\n      \"sui:signTransaction\": {\n        version: \"2.0.0\",\n        signTransaction: this.#signTransaction,\n      },\n      \"sui:signAndExecuteTransaction\": {\n        version: \"2.0.0\",\n        signAndExecuteTransaction: this.#signAndExecuteTransactionBlock,\n      },\n      \"sui:reportTransactionEffects\": {\n        version: \"1.0.0\",\n        reportTransactionEffects: this.#reportTransactionEffects,\n    };\n  },\n\n  #on: EventsOnMethod = () => {\n    // Your wallet's events on implementation.\n  };\n\n  #connect: ConnectMethod = () => {\n    // Your wallet's connect implementation\n  };\n\n\t#signPersonalMessage: SuiSignPersonalMessageMethod = () => {\n    // Your wallet's signTransaction implementation\n  };\n\n  #signTransaction: SuiSignTransactionMethod = () => {\n    // Your wallet's signTransaction implementation\n  };\n\n  #signAndExecuteTransaction: SuiSignAndExecuteTransactionMethod = () => {\n    // Your wallet's signAndExecuteTransaction implementation\n  };\n\n  #reportTransactionEffects: SuiReportTransactionEffectsMethod = () => {\n    // Your wallet's reportTransactionEffects implementation\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding to Balance in SUI Transfer Policy - Move\nDESCRIPTION: The `add_to_balance` function adds SUI coins to a TransferPolicy's balance, verifying that a specific rule exists before adding the currency. It necessitates the Coin and TransferPolicy modules, taking a Rule, a mutable TransferPolicy reference, and a Coin as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_20\n\nLANGUAGE: move\nCODE:\n```\npublic fun add_to_balance<T, Rule: drop>(_: Rule, policy: &mut sui::transfer_policy::TransferPolicy<T>, coin: sui::coin::Coin<sui::sui::SUI>)\n```\n\nLANGUAGE: move\nCODE:\n```\npublic fun add_to_balance<T, Rule: drop>(_: Rule, policy: &mut TransferPolicy<T>, coin: Coin<SUI>) {\n    assert!(has_rule<T, Rule>(policy), EUnknownRequirement);\n    coin::put(&mut policy.balance, coin)\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving Keypair in TypeScript with Ed25519\nDESCRIPTION: Demonstrates key derivation using a test mnemonic and a specific derivation path for Ed25519 signature scheme in Sui\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/transaction-auth/keys-addresses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst keypair = Ed25519Keypair.deriveKeypair(TEST_MNEMONIC, `m/44\\'/784\\'/0\\'/0\\'/0\\'`);\nconst address = keypair.getPublicKey().toSuiAddress();\n```\n\n----------------------------------------\n\nTITLE: Generating u16 in range with Sui RandomGenerator - Move\nDESCRIPTION: This function generates a random u16 within a specified range [min, max] with bias 2^{-64}. It uses the uint_in_range macro for precise bias control and requires inputs of a mutable RandomGenerator, min, and max to output a u16.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun generate_u16_in_range(g: &mut sui::random::RandomGenerator, min: u16, max: u16): u16 {\n    uint_in_range!(g, min, max, 10)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Move Package\nDESCRIPTION: Commands for creating a new Move package using the 'move new' command, with options for specifying the package name and location.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ move new <package_name> # Create a Move package <package_name> under the current dir\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ move new <package_name> -p <path> # Create a Move package <package_name> under path <path>\n```\n\n----------------------------------------\n\nTITLE: Finding Best Swap Route Using DFS Algorithm in TypeScript\nDESCRIPTION: Function that finds the optimal route for token swaps using Depth-First-Search algorithm. It simulates different paths to determine which route provides the maximum token output for a given input amount.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/routing-a-swap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npublic async findBestRoute(tokenInObject: string, tokenOut: string, amountIn: number): Promise<smartRouteResult> {\n    const tokenInfo = await this.suiClient.getObject({\n        id: tokenInObject,\n        options: {\n            showType: true,\n        },\n    });\n    const tokenTypeIn = tokenInfo.data.type.split('<')[1].split('>')[0];\n    const tokenTypeOut: string = convertToTokenType(tokenOut, this.records);\n    const paths: string[][] = this.dfs(tokenTypeIn, tokenTypeOut, this.records);\n    let maxSwapTokens = 0;\n    let smartRoute: string[] = [];\n    for (const path of paths) {\n        const smartRouteResultWithExactPath = await this.placeMarketOrderWithSmartRouting(\n            tokenInObject,\n            tokenTypeOut,\n            amountIn,\n            this.currentAddress,\n            path,\n        );\n        if (smartRouteResultWithExactPath && smartRouteResultWithExactPath.amount > maxSwapTokens) {\n            maxSwapTokens = smartRouteResultWithExactPath.amount;\n            smartRoute = path;\n        }\n    }\n    return {maxSwapTokens, smartRoute};\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Stake to a Validator's Pool in Move\nDESCRIPTION: The `request_add_stake` function allows users to add their SUI tokens to a specific validator's staking pool, which is necessary to participate in the delegated proof-of-stake mechanism on the Sui blockchain. Dependencies include modules defining `Coin` and the Sui system state. The function requires a mutable reference to the `SuiSystemState`, a SUI coin, the validator's address, and a mutable `TxContext`. The outputs dictate that the stake is added and managed within the validator's pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/exchange-integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun request_add_stake(\n   self: &mut SuiSystemState,\n   stake: Coin<SUI>,\n   validator_address: address,\n   ctx: &mut TxContext,\n) {\n   validator_set::request_add_stake(\n       &mut self.validators,\n       validator_address,\n       coin::into_balance(stake),\n       option::none(),\n       ctx,\n   );\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving Raw Voting Power from Stake in Move\nDESCRIPTION: Calculates the raw voting power for a validator based on their stake amount and the total stake in the system. This function converts stake proportionally to voting power using a predefined total voting power constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun derive_raw_voting_power(stake: u64, total_stake: u64): u64 {\n    ((stake as u128 * (TOTAL_VOTING_POWER as u128) / (total_stake as u128)) as u64)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Move Package Dependencies\nDESCRIPTION: Package manifest file (Move.toml) that defines the package dependencies and configuration for the counter smart contract.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"counter\"\nversion = \"0.0.1\"\n\n[dependencies]\nSui = { git = \"https://github.com/MystenLabs/sui.git\", subdir = \"crates/sui-framework/packages/sui-framework\", rev = \"framework/testnet\" }\n\n[addresses]\ncounter = \"0x0\"\n```\n\n----------------------------------------\n\nTITLE: Defining UID Struct in Move\nDESCRIPTION: Struct definition for globally unique object IDs used in Sui storage. Required as first field for any Sui Object with key ability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct UID has store {\n    id: sui::object::ID\n}\n```\n\n----------------------------------------\n\nTITLE: Move IR Compiler Example Usage\nDESCRIPTION: Demonstrates how to build and run the Move IR compiler to compile Move IR modules and transaction scripts, including specific command examples.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-ir-compiler/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncargo build --bin compiler\n\n* This will build the compiler + verifier binary.\n* The binary can be found at `diem/target/debug/compiler`.\n* Alternatively, the binary can be run directly with `cargo run -p compiler`.\n\nTo compile and verify `foo.mvir`, which contains a Move IR module:\n> `compiler --address 0x42 --no-stdlib -m foo.mvir`\n\nTo compile and verify `bar.mvir`, which contains a transaction script:\n> `compiler --address 0xca --no-stdlib bar.mvir`\n```\n\n----------------------------------------\n\nTITLE: Defining Argument Structure in Sui PTBs\nDESCRIPTION: Explains the structure of the Argument enum used in Sui's Programmable Transaction Blocks. It covers Input, GasCoin, NestedResult, and Result variants, detailing their usage and constraints.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nenum Argument {\n    Input(u16),\n    GasCoin,\n    NestedResult(u16, u16),\n    Result(u16)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Kiosk Name Extension in Move\nDESCRIPTION: This snippet demonstrates how to create a basic Kiosk app that allows setting a name for a kiosk. It uses dynamic fields to store the name, which the owner can modify and anyone can read.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk-apps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nmodule examples::kiosk_name_ext;\n\nuse std::string::String;\nuse sui::dynamic_field as df;\nuse sui::kiosk::{Self, Kiosk, KioskOwnerCap};\n\n/// The dynamic field key for the Kiosk Name Extension\nstruct KioskName has copy, store, drop {}\n\n/// Add a name to the Kiosk (in this implementation can be called only once)\npublic fun add(self: &mut Kiosk, cap: &KioskOwnerCap, name: String) {\n    let uid_mut = self.uid_mut_as_owner(cap);\n    df::add(uid_mut, KioskName {}, name)\n}\n\n/// Try to read the name of the Kiosk - if set - return Some(String), if not - None\npublic fun name(self: &Kiosk): Option<String> {\n    if (df::exists_(self.uid(), KioskName {})) {\n        option::some(*df::borrow(self.uid(), KioskName {}))\n    } else {\n        option::none()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Reference Gas Price\nDESCRIPTION: Simple query to fetch the reference gas price for the latest epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/graphql-rpc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  epoch {\n    referenceGasPrice\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Identity Function in Move\nDESCRIPTION: This snippet demonstrates how to define a generic identity function that takes a value of any type and returns it unchanged. It showcases the syntax for declaring type parameters in functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nfun id<T>(x: T): T {\n    // this type annotation is unnecessary but valid\n    (x: T)\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Order Function Implementation\nDESCRIPTION: Implementation of the modify_order function which allows users to modify an existing order. The modification can only reduce the quantity or lower the expiration time. The function does not return anything; a successful transaction indicates a successful modification.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\npublic fun modify_order(\n        pool: &mut Pool,\n        order_id: ID,\n        new_quantity: u64,\n        new_expire_timestamp: u64,\n        balance_manager: address,\n        clock: &Clock,\n        ctx: &mut TxContext,\n    ) {\n        let now = clock::timestamp_ms(clock);\n\n        // If has order\n        assert!(pool_open_orders::contains_order(&pool.open_orders, balance_manager, order_id), EOrderNotFound);\n\n        // Get the old order from the pool\n        let (client_order_id, price, old_quantity, filled_quantity, is_bid, owner, original_quantity, sequence, expire_timestamp) = order_book::get_order_info(\n            &pool.order_book,\n            order_id,\n        );\n\n        // Order not expired\n        assert!(expire_timestamp == 0 || expire_timestamp > now, EOrderExpired);\n\n        let actual_filled_quantity = filled_quantity;\n\n        // order owner matches bm\n        assert!(owner == balance_manager, ENotOrderOwner);\n\n        // New quantity must be less than old quantity\n        assert!(new_quantity < old_quantity, EInvalidQuantity);\n\n        // new quantity must be greater than filled quantity\n        assert!(new_quantity > actual_filled_quantity, EInvalidQuantity);\n\n        if (new_expire_timestamp > 0) {\n            // New expire timestamp cannot extend the order lifetime\n            assert!(expire_timestamp == 0 || new_expire_timestamp < expire_timestamp, EInvalidExpireTimestamp);\n            // New expire timestamp cannot be in the past\n            assert!(new_expire_timestamp > now, EInvalidExpireTimestamp);\n        };\n\n        // Modify the order in the book\n        // new internal quantity that we update the order book with\n        order_book::modify_order(\n            &mut pool.order_book,\n            order_id,\n            new_quantity,\n            new_expire_timestamp,\n        );\n\n        let next_sequence = sequence + 1;\n\n        // Emit event\n        event::emit(\n            OrderModified {\n                order_id,\n                client_order_id,\n                owner,\n                sequence: next_sequence,\n                old_quantity,\n                new_quantity,\n                is_bid,\n                price,\n                base_asset_id: pool.base_asset_id,\n                quote_asset_id: pool.quote_asset_id,\n                pool_id: object::id(pool),\n                timestamp: now,\n            }\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sui CLI Environment for Local Network\nDESCRIPTION: Command to create a new Sui CLI environment alias named 'local' that sets the RPC URL to the local network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/local-network.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client new-env --alias local --rpc http://127.0.0.1:9000\n```\n\n----------------------------------------\n\nTITLE: Minting Coins in Move\nDESCRIPTION: Function signature for minting new coins in Sui. Requires TreasuryCap capability and returns a new Coin<T> with specified value. Automatically updates total supply.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/coin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun mint<T>(cap: &mut TreasuryCap<T>, value: u64, ctx: &mut TxContext): Coin<T>\n```\n\n----------------------------------------\n\nTITLE: Removing Orders from CLOB Price Levels\nDESCRIPTION: Helper function that removes an order from the order book's price level structure. Handles cleanup of empty price levels and validates order ownership.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\nfun remove_order(\n    open_orders: &mut CritbitTree<TickLevel>,\n    usr_open_orders: &mut LinkedTable<u64, u64>,\n    tick_index: u64,\n    order_id: u64,\n    owner: address,\n): Order {\n    linked_table::remove(usr_open_orders, order_id);\n    let tick_level = borrow_leaf_by_index(open_orders, tick_index);\n    assert!(linked_table::contains(&tick_level.open_orders, order_id), EInvalidOrderId);\n    let mut_tick_level = borrow_mut_leaf_by_index(open_orders, tick_index);\n    let order = linked_table::remove(&mut mut_tick_level.open_orders, order_id);\n    assert!(order.owner == owner, EUnauthorizedCancel);\n    if (linked_table::is_empty(&mut_tick_level.open_orders)) {\n        destroy_empty_level(remove_leaf_by_index(open_orders, tick_index));\n    };\n    order\n}\n```\n\n----------------------------------------\n\nTITLE: Defining insertion_sort_by Macro for In-Place Sorting of Vectors\nDESCRIPTION: This macro implements in-place insertion sort on a mutable vector using a provided comparison function which should return true for the less-than-or-equal condition. It is particularly efficient for small vectors and those that are nearly sorted. The sort preserves the relative order of equal elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_31\n\nLANGUAGE: Rust\nCODE:\n```\n\"public macro fun insertion_sort_by<$T>($v: &mut vector<$T>, $le: |&$T, &$T| -> bool) {\\n    let v = $v;\\n    let n = v.length();\\n    if (n < 2) return;\\n    // do insertion sort\\n    let mut i = 1;\\n    while (i < n) {\\n        let mut j = i;\\n        while (j > 0 && !$le(&v[j - 1], &v[j])) {\\n            v.swap(j, j - 1);\\n            j = j - 1;\\n        };\\n        i = i + 1;\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Receipt to Transfer Request - Move\nDESCRIPTION: The `add_receipt` function adds a Receipt to a TransferRequest marked by a specific Rule, verifying policy satisfaction. It requires the TransferPolicy and TransferRequest modules, taking a Rule and a mutable TransferRequest reference as inputs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_21\n\nLANGUAGE: move\nCODE:\n```\npublic fun add_receipt<T, Rule: drop>(_: Rule, request: &mut sui::transfer_policy::TransferRequest<T>)\n```\n\nLANGUAGE: move\nCODE:\n```\npublic fun add_receipt<T, Rule: drop>(_: Rule, request: &mut TransferRequest<T>) {\n    request.receipts.insert(type_name::get<Rule>())\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Push Back Function\nDESCRIPTION: Native function to append an element to the end of a vector\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun push_back<Element>(v: &mut vector<Element>, e: Element);\n```\n\n----------------------------------------\n\nTITLE: Checking Item Presence by Type in Kiosk - Move\nDESCRIPTION: This function checks if a specific item with a given ID exists in the Kiosk and verifies if it has type T. It returns a boolean indicating the presence of the item.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_33\n\nLANGUAGE: Move\nCODE:\n```\npublic fun has_item_with_type<T: key, store>(self: &sui::kiosk::Kiosk, id: sui::object::ID): bool {\n    dof::exists_with_type<Item, T>(&self.id, Item { id })\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Scoping and Expression Blocks in Move\nDESCRIPTION: Illustrates scoping rules for variables in Move, including nested scopes and expression blocks that return values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\nlet x = 0;\n{\n    let y = 1;\n};\n// x + y // ERROR!\n\n{\n    let x = 0;\n    {\n        let y = x + 1; // valid\n    }\n}\n\nlet mut x = 0;\nx = x + 1;\nassert!(x == 1, 42);\n{\n    x = x + 1;\n    assert!(x == 2, 42);\n};\nassert!(x == 2, 42);\n\n{ let x = 1; let y = 1; x + y }\n\n{ let x = 0; x + 1; x + 2; b\"hello\"; }\n```\n\n----------------------------------------\n\nTITLE: Publishing Move Package on Sui Network\nDESCRIPTION: Publish the Move package to the Sui network, specifying a gas budget.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client publish --gas-budget 100000000 .\n```\n\n----------------------------------------\n\nTITLE: Defining SimpleWarrior with Optional Equipment in Move\nDESCRIPTION: This code defines a SimpleWarrior struct with optional sword and shield fields using the Option type. It demonstrates how to create flexible object relationships in Sui Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/wrapped.mdx#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic struct SimpleWarrior has key {\n    id: UID,\n    sword: Option<Sword>,\n    shield: Option<Shield>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Supply and Balance Structs in Move\nDESCRIPTION: Defines the Supply and Balance structs for managing token supplies and balances. Supply is used for minting and burning, while Balance is a storable balance for coins.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/balance.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Supply<phantom T> has store {\n    value: u64\n}\n\npublic struct Balance<phantom T> has store {\n    value: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LOYALTY Token Reward Function\nDESCRIPTION: Function to mint and distribute loyalty tokens to users. Requires TreasuryCap capability to mint new tokens and transfer them to specified recipients.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin/loyalty.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun reward_user(treasury_cap: &mut TreasuryCap<LOYALTY>, amount: u64, recipient: address, ctx: &mut TxContext) {\n    let token = token::mint(treasury_cap, amount, ctx);\n    transfer::public_transfer(token, recipient);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Groth16 Proof in Rust\nDESCRIPTION: Rust implementation using ark-circom to generate and verify a Groth16 proof for the circuit. Demonstrates witness generation, proof creation, and initial verification.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/groth16.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse ark_bn254::Bn254;\nuse ark_circom::CircomBuilder;\nuse ark_circom::CircomConfig;\nuse ark_groth16::{Groth16, prepare_verifying_key};\nuse ark_serialize::CanonicalSerialize;\nuse ark_snark::SNARK;\nuse rand::rngs::StdRng;\nuse rand::SeedableRng;\n\nfn main() {\n    // Load the WASM and R1CS for witness and proof generation\n    let cfg = CircomConfig::<Bn254>::new(\"../circuit/main_js/main.wasm\", \"../circuit/main.r1cs\").unwrap();\n    let mut builder = CircomBuilder::new(cfg);\n\n    // Private inputs: A factorisation of a number\n    builder.push_input(\"a\", 641);\n    builder.push_input(\"b\", 6_700_417);\n\n    let circuit = builder.setup();\n\n    // Generate a random proving key. WARNING: This is not secure. A proving key generated from a ceremony should be used in production.\n    let mut rng: StdRng = SeedableRng::from_seed([0; 32]);\n    let pk =\n        Groth16::<Bn254>::generate_random_parameters_with_reduction(circuit, &mut rng).unwrap();\n\n    let circuit = builder.build().unwrap();\n    let public_inputs = circuit.get_public_inputs().unwrap();\n\n    // Create proof\n    let proof = Groth16::<Bn254>::prove(&pk, circuit, &mut rng).unwrap();\n\n    // Verify proof\n    let pvk = prepare_verifying_key(&pk.vk);\n    let verified = Groth16::<Bn254>::verify_with_processed_vk(&pvk, &public_inputs, &proof).unwrap();\n    assert!(verified);\n\n    // Print verifying key\n    let mut pk_bytes = Vec::new();\n    pk.vk.serialize_compressed(&mut pk_bytes).unwrap();\n    println!(\"Verifying key: {}\", hex::encode(pk_bytes));\n\n    // Print proof\n    let mut proof_serialized = Vec::new();\n    proof.serialize_compressed(&mut proof_serialized).unwrap();\n    println!(\"Proof: {}\", hex::encode(proof_serialized));\n\n    // Print public inputs. Note that they are concatenated.\n    let mut public_inputs_serialized = Vec::new();\n    public_inputs.iter().for_each(|input| {\n        input.serialize_compressed(&mut public_inputs_serialized).unwrap();\n    });\n    println!(\"Public inputs: {}\", hex::encode(public_inputs_serialized));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SUI Coin Move\nDESCRIPTION: The `new` function initializes the SUI token by setting its total supply and ensuring it is called during genesis creation only. It leverages transaction context and other functions to enforce minting safeguards. Required parameters include a mutable transaction context, and it returns a balance instance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/sui.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\nfun new(ctx: &mut TxContext): Balance<SUI> {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    assert!(ctx.epoch() == 0, EAlreadyMinted);\n    let (treasury, metadata) = coin::create_currency(\n        SUI {},\n        9,\n        b\"SUI\",\n        b\"Sui\",\n        // TODO: add appropriate description and logo url\n        b\"\",\n        option::none(),\n        ctx,\n    );\n    transfer::public_freeze_object(metadata);\n    let mut supply = treasury.treasury_into_supply();\n    let total_sui = supply.increase_supply(TOTAL_SUPPLY_MIST);\n    supply.destroy_supply();\n    total_sui\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction with SuiClient\nDESCRIPTION: Executing a signed transaction using SuiClient from @mysten/sui\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/wallet-standard.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst client: SuiClient\nclient.executeTransactionBlock({\n    transactionBlock: bytes,\n    signature: signature,\n    options: {}\n})\n```\n\n----------------------------------------\n\nTITLE: Upgrade-aware Counter Module\nDESCRIPTION: This upgraded module introduces a mechanism for maintaining versioning of the Counter struct while enabling upgrade operations through an AdminCap. The design ensures that only the latest version can be accessed, limiting the risk of errors during upgrades.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/upgrade.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nmodule example::counter;\n\nuse sui::event;\n\nconst ENotAdmin: u64 = 0;\nconst EWrongVersion: u64 = 1;\nconst VERSION: u64 = 2;\n\npublic struct Counter has key {\n    id: UID,\n    version: u64,\n    admin: ID,\n    value: u64,\n}\n\npublic struct AdminCap has key {\n    id: UID,\n}\n\npublic struct Progress has copy, drop {\n    reached: u64,\n}\n\nfun init(ctx: &mut TxContext) {\n    let admin = AdminCap { id: object::new(ctx) };\n\n    transfer::share_object(Counter {\n        id: object::new(ctx),\n        version: VERSION,\n        admin: object::id(&admin),\n        value: 0,\n    });\n\n    transfer::transfer(admin, ctx.sender());\n}\n\npublic fun increment(c: &mut Counter) {\n    assert!(c.version == VERSION, EWrongVersion);\n    c.value = c.value + 1;\n\n    if (c.value % 100 == 0) {\n        event::emit(Progress { reached: c.value })\n    }\n}\n\nentry fun migrate(c: &mut Counter, a: &AdminCap) {\n    assert!(c.admin == object::id(a), ENotAdmin);\n    assert!(c.version < VERSION, ENotUpgrade);\n    c.version = VERSION;\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting to Add Stake to a Validator\nDESCRIPTION: This function handles a request to add stake to a validator's staking pool. It processes the stake, updates the next epoch stake, and emits a StakingRequestEvent.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_31\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun request_add_stake(\n    self: &mut Validator,\n    stake: Balance<SUI>,\n    staker_address: address,\n    ctx: &mut TxContext,\n): StakedSui {\n    let stake_amount = stake.value();\n    assert!(stake_amount > 0, EInvalidStakeAmount);\n    let stake_epoch = ctx.epoch() + 1;\n    let staked_sui = self.staking_pool.request_add_stake(stake, stake_epoch, ctx);\n    // Process stake right away if staking pool is preactive.\n    if (self.staking_pool.is_preactive()) {\n        self.staking_pool.process_pending_stake();\n    };\n    self.next_epoch_stake = self.next_epoch_stake + stake_amount;\n    event::emit(StakingRequestEvent {\n        pool_id: self.staking_pool_id(),\n        validator_address: self.metadata.sui_address,\n        staker_address,\n        epoch: ctx.epoch(),\n        amount: stake_amount,\n    });\n    staked_sui\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a VecMap from Keys and Values Vectors in Move\nDESCRIPTION: Constructs a new VecMap from two vectors containing keys and values. Associates elements by their index positions in the vectors. Preserves insertion order and verifies vectors have equal length.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\npublic fun from_keys_values<K: copy, V>(mut keys: vector<K>, mut values: vector<V>): VecMap<K, V> {\n    assert!(keys.length() == values.length(), EUnequalLengths);\n    keys.reverse();\n    values.reverse();\n    let mut map = empty();\n    while (keys.length() != 0) map.insert(keys.pop_back(), values.pop_back());\n    keys.destroy_empty();\n    values.destroy_empty();\n    map\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Confirmation for Action Requests Against Token Policy - Rust\nDESCRIPTION: The `confirm_request` function validates an action request against the Sui token policy. It ensures that conditions such as the existence of spent balances and adherence to the specified rules are met. The function returns the name, amount, sender, and recipient. It requires access to the token policy and action request types and asserts necessary conditions to proceed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_20\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun confirm_request<T>(policy: &sui::token::TokenPolicy<T>, request: sui::token::ActionRequest<T>, _ctx: &mut sui::tx_context::TxContext): (std::string::String, u64, address, std::option::Option<address>) {\\n    assert!(request.spent_balance.is_none(), ECantConsumeBalance);\\n    assert!(policy.rules.contains(&request.name), EUnknownAction);\\n    let ActionRequest {\\n        name,\\n        approvals,\\n        spent_balance,\\n        amount,\\n        sender,\\n        recipient,\\n    } = request;\\n    spent_balance.destroy_none();\\n    let rules = &(*policy.rules.get(&name)).into_keys();\\n    let rules_len = rules.length();\\n    let mut i = 0;\\n    while (i < rules_len) {\\n        let rule = &rules[i];\\n        assert!(approvals.contains(rule), ENotApproved);\\n        i = i + 1;\\n    };\\n    (name, amount, sender, recipient)\\n}\n```\n\n----------------------------------------\n\nTITLE: TokenPolicy Struct Definition\nDESCRIPTION: This struct defines the policy that governs actions performed on a `Token`. It includes a unique ID, a `spent_balance` to track the balance spent but not yet flushed, and a `rules` map that defines the rules for each action. The `key` ability signifies it can be used as an object ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>public</b> <b>struct</b> <a href=\\\"../sui/token.md#sui_token_TokenPolicy\\\">TokenPolicy</a>&lt;<b>phantom</b> T&gt; <b>has</b> <a href=\\\"../sui/token.md#sui_token_key\\\">key</a>\"\n```\n\n----------------------------------------\n\nTITLE: Listing Asset in Rentables Extension Bag - Move\nDESCRIPTION: The 'list' function creates a bag entry for an asset within the Rentables extension, provided the asset meets specific requirements including transfer policy constraints.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\npublic fun list<T: key + store>(\n  kiosk: &mut Kiosk,\n  cap: &KioskOwnerCap,\n  protected_tp: &ProtectedTP<T>,\n  item_id: ID,\n  duration: u64,\n  price_per_day: u64,\n  ctx: &mut TxContext,\n) {\n  \n  // Aborts if Rentables extension is not installed.\n  assert!(kiosk_extension::is_installed<Rentables>(kiosk), EExtensionNotInstalled);\n\n  // Sets the kiosk owner to the transaction sender to keep metadata fields up to date.\n  // This is also crucial to ensure the correct person receives the payment.\n  // Prevents unexpected results in cases where the kiosk could have been transferred \n  // between users without the owner being updated.\n  kiosk.set_owner(cap, ctx);\n\n  // Lists the item for zero SUI.\n  kiosk.list<T>(cap, item_id, 0);\n\n  // Constructs a zero coin.\n  let coin = coin::zero<SUI>(ctx);\n  // Purchases the item with 0 SUI.\n  let (object, request) = kiosk.purchase<T>(item_id, coin);\n\n  // Resolves the TransferRequest with the empty TransferPolicy which is protected and accessible only via this module.\n  let (_item, _paid, _from) = protected_tp.transfer_policy.confirm_request(request);\n\n  // Wraps the item in the Rentable struct along with relevant metadata.\n  let rentable = Rentable {\n    object,\n    duration,\n    start_date: option::none<u64>(),\n    price_per_day,\n    kiosk_id: object::id(kiosk),\n  };\n\n  // Places the rentable as listed in the extension's bag (place_in_bag is a helper method defined in nft_rental.move file).\n  place_in_bag<T, Listed>(kiosk, Listed { id: item_id }, rentable);\n}\n```\n\n----------------------------------------\n\nTITLE: Folding Vector Elements\nDESCRIPTION: A macro function that reduces a vector to a single value by applying a function to each element sequentially. Similar to fold_left in other programming languages, it accumulates a result using an initial value and a reduction function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun fold<$T, $Acc>($v: vector<$T>, $init: $Acc, $f: |$Acc, $T| -> $Acc): $Acc\n```\n\n----------------------------------------\n\nTITLE: Setting Up Token Transfer\nDESCRIPTION: Prepares and executes a token transfer from the multisig address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nCOIN=<COIN-OBJECT-ID>\n```\n\nLANGUAGE: sh\nCODE:\n```\nsui client transfer --to $ACTIVE --object-id $COIN --gas-budget <GAS-AMOUNT> --serialize-unsigned-transaction\n```\n\nLANGUAGE: sh\nCODE:\n```\nTXBYTES=<TX-BYTES-RESULT>\n```\n\n----------------------------------------\n\nTITLE: Declaring and Initializing Integer Variables in Move\nDESCRIPTION: Examples of declaring integer variables with explicit type annotations, inferred types from context, and hexadecimal literals. This demonstrates various integer types and Move's type inference capabilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/primitive-types/integers.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n// literals with explicit annotations;\nlet explicit_u8 = 1u8;\nlet explicit_u16 = 1u16;\nlet explicit_u32 = 1u32;\nlet explicit_u64 = 2u64;\nlet explicit_u128 = 3u128;\nlet explicit_u256 = 1u256;\nlet explicit_u64_underscored = 154_322_973u64;\n\n// literals with simple inference\nlet simple_u8: u8 = 1;\nlet simple_u16: u16 = 1;\nlet simple_u32: u32 = 1;\nlet simple_u64: u64 = 2;\nlet simple_u128: u128 = 3;\nlet simple_u256: u256 = 1;\n\n// literals with more complex inference\nlet complex_u8 = 1; // inferred: u8\n// right hand argument to shift must be u8\nlet _unused = 10 << complex_u8;\n\nlet x: u8 = 38;\nlet complex_u8 = 2; // inferred: u8\n// arguments to `+` must have the same type\nlet _unused = x + complex_u8;\n\nlet complex_u128 = 133_876; // inferred: u128\n// inferred from function argument type\nfunction_that_takes_u128(complex_u128);\n\n// literals can be written in hex\nlet hex_u8: u8 = 0x1;\nlet hex_u16: u16 = 0x1BAE;\nlet hex_u32: u32 = 0xDEAD80;\nlet hex_u64: u64 = 0xCAFE;\nlet hex_u128: u128 = 0xDEADBEEF;\nlet hex_u256: u256 = 0x1123_456A_BCDE_F;\n```\n\n----------------------------------------\n\nTITLE: Checking Typed Key Existence in ObjectBag - Move\nDESCRIPTION: This function checks if a key exists in the ObjectBag with a specific value type. It takes a reference to the bag, a key, and returns a boolean indicating presence.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_bag.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun contains_with_type<K: copy + drop + store, V: key + store>(bag: &ObjectBag, k: K): bool {\n    ofield::exists_with_type<K, V>(&bag.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Rentable Item by Reference - Move\nDESCRIPTION: The 'borrow' function allows the borrower to acquire a 'Rentable' by reference from their bag, subject to access control checks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_13\n\nLANGUAGE: move\nCODE:\n```\npublic fun borrow<T: key + store>(\n  kiosk: &mut Kiosk,\n  cap: &KioskOwnerCap,\n  item_id: ID,\n  _ctx: &mut TxContext,\n): &T {\n  // Aborts if the cap doesn't match the Kiosk.\n  assert!(kiosk.has_access(cap), ENotOwner);\n  let ext_storage_mut = kiosk_extension::storage_mut(Rentables {}, kiosk);\n  let rentable: &Rentable<T> = &ext_storage_mut[Rented { id: item_id }];\n  &rentable.object\n}\n```\n\n----------------------------------------\n\nTITLE: Placing an Item in a Kiosk using Sui CLI\nDESCRIPTION: This snippet demonstrates how to place an item into a Sui Kiosk using the Sui CLI. It calls the 'place' function from the 'kiosk' module, specifying the kiosk ID, capability ID, item ID, and item type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call \\\n    --package 0x2 \\\n    --module kiosk \\\n    --function place \\\n    --args \"<KIOSK_ID>\" \"<CAP_ID>\" \"<ITEM_ID>\" \\\n    --type-args \"<ITEM_TYPE>\" \\\n    --gas-budget 1000000000\n```\n\n----------------------------------------\n\nTITLE: Accessing Mutable UID in SUI Transfer Policy - Move\nDESCRIPTION: The `uid_mut_as_owner` function grants a mutable UID reference for attaching custom data to the TransferPolicy, under a TransferPolicyCap context. Dependencies include the TransferPolicy, UID, and TransferPolicyCap modules. The function asserts ownership via the cap.policy_id field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_25\n\nLANGUAGE: move\nCODE:\n```\npublic fun uid_mut_as_owner<T>(self: &mut sui::transfer_policy::TransferPolicy<T>, cap: &sui::transfer_policy::TransferPolicyCap<T>): &mut sui::object::UID\n```\n\nLANGUAGE: move\nCODE:\n```\npublic fun uid_mut_as_owner<T>(self: &mut TransferPolicy<T>, cap: &TransferPolicyCap<T>): &mut UID {\n    assert!(object::id(self) == cap.policy_id, ENotOwner);\n    &mut self.id\n}\n```\n\n----------------------------------------\n\nTITLE: Delisting an Item from a Kiosk using Sui CLI\nDESCRIPTION: This snippet shows how to delist an item from sale in a Sui Kiosk using the Sui CLI. It calls the 'delist' function from the 'kiosk' module, specifying the kiosk ID, capability ID, item ID, and item type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call \\\n    --package 0x2 \\\n    --module kiosk \\\n    --function delist \\\n    --args \"<KIOSK_ID>\" \"<CAP_ID>\" \"<ITEM_ID>\" \\\n    --type-args \"ITEM_TYPE\" \\\n    --gas-budget 1000000000\n```\n\n----------------------------------------\n\nTITLE: Fetch checkpoint transactions using grpcurl in Shell\nDESCRIPTION: This command fetches transactions within a specific checkpoint using grpcurl. It uses a JSON input specifying 'sequence_number' and 'read_mask' to apply a FieldMask. The command interacts with the GetCheckpoint API of the LedgerService. Requires the <full node URL:port>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/grpc-overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ grpcurl -d '{ \"sequence_number\": \"180529334\", \"read_mask\": { \"paths\": [\"transactions\"]} }' <full node URL:port> sui.rpc.v2beta.LedgerService/GetCheckpoint\n```\n\n----------------------------------------\n\nTITLE: Generating Demo Data for Sui Blockchain in TypeScript\nDESCRIPTION: Creates a utility function to generate demo data representing a real-world asset (bear) on the Sui blockchain. It uses @tanstack/react-query for state management and cache invalidation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Content of src/mutations/demo.ts not provided in the input\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timestamp in Move\nDESCRIPTION: Function to get the current timestamp in milliseconds from the Clock object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/clock.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun timestamp_ms(clock: &sui::clock::Clock): u64 {\n    clock.timestamp_ms\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Weather Oracle Cities in Sui Blockchain\nDESCRIPTION: Initializes the weather oracle by adding cities to the blockchain. Uses environment variables for configuration and handles batch processing of city data with transaction management. Includes validation to prevent duplicate entries and supports specific geoname IDs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/weather-oracle.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SuiClient } from '@mysten/sui/client';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { Transaction } from '@mysten/sui/transactions';\nimport * as dotenv from 'dotenv';\n\nimport { City } from './city';\nimport { get1000Geonameids } from './filter-cities';\nimport { latitudeMultiplier, longitudeMultiplier } from './multipliers';\nimport { getCities, getWeatherOracleDynamicFields } from './utils';\nimport { logger } from './utils/logger';\n\ndotenv.config({ path: '../.env' });\n\nconst phrase = process.env.ADMIN_PHRASE;\nconst fullnode = process.env.FULLNODE!;\nconst keypair = Ed25519Keypair.deriveKeypair(phrase!);\nconst client = new SuiClient({\n\turl: fullnode,\n});\n\nconst packageId = process.env.PACKAGE_ID;\nconst adminCap = process.env.ADMIN_CAP_ID!;\nconst weatherOracleId = process.env.WEATHER_ORACLE_ID!;\nconst moduleName = 'weather';\n\nconst NUMBER_OF_CITIES = 10;\n\nasync function addCityWeather() {\n\tconst cities: City[] = await getCities();\n\tconst thousandGeoNameIds = await get1000Geonameids();\n\n\tconst weatherOracleDynamicFields = await getWeatherOracleDynamicFields(client, weatherOracleId);\n\tconst geonames = weatherOracleDynamicFields.map(function (obj) {\n\t\treturn obj.name;\n\t});\n\n\tlet counter = 0;\n\tlet transaction = new Transaction();\n\tfor (let c in cities) {\n\t\tif (\n\t\t\t!geonames.includes(cities[c].geonameid) &&\n\t\t\tthousandGeoNameIds.includes(cities[c].geonameid)\n\t\t) {\n\t\t\ttransaction.moveCall({\n\t\t\t\ttarget: `${packageId}::${moduleName}::add_city`,\n\t\t\t\targuments: [\n\t\t\t\t\ttransaction.object(adminCap),\n\t\t\t\t\ttransaction.object(weatherOracleId),\n\t\t\t\t\ttransaction.pure(cities[c].geonameid),\n\t\t\t\t\ttransaction.pure(cities[c].asciiname),\n\t\t\t\t\ttransaction.pure(cities[c].countryCode),\n\t\t\t\t\ttransaction.pure(cities[c].latitude * latitudeMultiplier),\n\t\t\t\t\ttransaction.pure(cities[c].latitude > 0),\n\t\t\t\t\ttransaction.pure(cities[c].longitude * longitudeMultiplier),\n\t\t\t\t\ttransaction.pure(cities[c].longitude > 0),\n\t\t\t\t],\n\t\t\t});\n\n\t\t\tcounter++;\n\t\t\tif (counter === NUMBER_OF_CITIES) {\n\t\t\t\tawait signAndExecuteTransaction(transaction);\n\t\t\t\tcounter = 0;\n\t\t\t\ttransaction = new Transaction();\n\t\t\t}\n\t\t}\n\t}\n\tawait signAndExecuteTransaction(transaction);\n}\n\nasync function signAndExecuteTransaction(transaction: Transaction) {\n\ttransaction.setGasBudget(5000000000);\n\tawait client\n\t\t.signAndExecuteTransaction({\n\t\t\tsigner: keypair,\n\t\t\ttransaction,\n\t\t\trequestType: 'WaitForLocalExecution',\n\t\t\toptions: {\n\t\t\t\tshowObjectChanges: true,\n\t\t\t\tshowEffects: true,\n\t\t\t},\n\t\t})\n\t\t.then(function (res) {\n\t\t\tlogger.info(res);\n\t\t});\n}\n\naddCityWeather();\n```\n\n----------------------------------------\n\nTITLE: Declaring Constraints on Type Parameters in Move\nDESCRIPTION: Illustrates the syntax for declaring constraints on type parameters in Move, including multiple ability constraints.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\nT: copy\nT: copy + drop\nT: copy + drop + store + key\n```\n\n----------------------------------------\n\nTITLE: Creating Zero-Value Coin in Move\nDESCRIPTION: Creates a new Coin with zero balance. This function is useful for placeholding or creating empty balances.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun zero<T>(ctx: &mut TxContext): Coin<T> {\n    Coin { id: object::new(ctx), balance: balance::zero() }\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Tokens in Sui Framework (Rust)\nDESCRIPTION: This function joins two tokens into one and is always available. The function takes a mutable reference to a token and another token to be joined. The join operation combines the balances of both tokens, and the ID of the second token is deleted after the join.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_14\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun join<T>(token: &mut sui::token::Token<T>, another: sui::token::Token<T>) {\n    let Token { id, balance } = another;\n    token.balance.join(balance);\n    id.delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PoolOwnerCap Structure - Move\nDESCRIPTION: Capability structure granting permission to access pool trading fees for specified owner.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic struct PoolOwnerCap has key, store {\n    id: sui::object::UID,\n    owner: address\n}\n```\n\n----------------------------------------\n\nTITLE: Minting tokenized assets in Rust\nDESCRIPTION: The mint function creates tokenized assets based on provided metadata. If new metadata is provided, it creates an NFT with balance 1. If no metadata is added, it creates an FT with the specified balance. Returns the minted tokenized asset.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npublic fun mint<T>(\n        cap: &mut AssetCap<T>,\n        keys: vector<String>,\n        values: vector<String>,\n        value: u64,\n        ctx: &mut TxContext\n    ): TokenizedAsset<T> {}\n```\n\n----------------------------------------\n\nTITLE: Defining an In-Game Item Object in Sui Move\nDESCRIPTION: Example of creating an in-game item (CapyItem) with optimized storage. Items with the same name are identical, demonstrating how to handle data duplication efficiently.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/display.mdx#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nmodule capy::capy_items;\n\nuse std::string::String;\n\n/// A wearable Capy item. For some items there can be an\n/// unlimited supply. And items with the same name are identical.\npublic struct CapyItem has key, store {\n    id: UID,\n    name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Sui Kiosk Creation with Transaction Blocks\nDESCRIPTION: Demonstrates creating a Sui Kiosk with advanced options using programmable transaction blocks, including ownership transfer and sharing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = new Transaction();\nlet [kiosk, kioskOwnerCap] = tx.moveCall({\n\ttarget: '0x2::kiosk::new',\n});\n\ntx.transferObjects([kioskOwnerCap], sender);\ntx.moveCall({\n\ttarget: '0x2::transfer::public_share_object',\n\targuments: [kiosk],\n\ttypeArguments: '0x2::kiosk::Kiosk',\n});\n```\n\n----------------------------------------\n\nTITLE: Vector Utility Functions - Move\nDESCRIPTION: Implements utility functions for vector manipulation including singleton creation and reversal operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun singleton<Element>(e: Element): vector<Element> {\n    let mut v = empty();\n    v.push_back(e);\n    v\n}\n\npublic fun reverse<Element>(v: &mut vector<Element>) {\n    let len = v.length();\n    if (len == 0) return;\n    let mut front_index = 0;\n    let mut back_index = len - 1;\n    while (front_index < back_index) {\n        v.swap(front_index, back_index);\n        front_index = front_index + 1;\n        back_index = back_index - 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting to Add Stake to Staking Pool - Move\nDESCRIPTION: This function requests to add a specified stake to a staking pool, which will be counted from the beginning of the next epoch. It includes checks for the pool's state and the stake's value before processing the request.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun request_add_stake(\n    pool: &mut sui_system::staking_pool::StakingPool,\n    stake: Balance<SUI>,\n    stake_activation_epoch: u64,\n    ctx: &mut TxContext,\n): StakedSui {\n    let sui_amount = stake.value();\n    assert!(!pool.is_inactive(), EDelegationToInactivePool);\n    assert!(sui_amount > 0, EDelegationOfZeroSui);\n    pool.pending_stake = pool.pending_stake + sui_amount;\n    StakedSui {\n        id: object::new(ctx),\n        pool_id: object::id(pool),\n        stake_activation_epoch,\n        principal: stake,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Immutable Object Example\nDESCRIPTION: This example illustrates creating a 'ColorObject', making it immutable, and ensuring it is used solely as a read-only reference. It demonstrates the requirement to own a 'ColorObject' initially and shows the non-mutability post-freeze.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/immutable.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\n{\n    ts.next_tx(alice);\n    // Create a new ColorObject\n    let c = new(255, 0, 255, ts.ctx());\n    // Make it immutable.\n    transfer::public_freeze_object(c);\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Local Variables in Move\nDESCRIPTION: This snippet demonstrates how to declare and use local variables in Move, including basic assignments and mutable variables.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nlet x = 1;\nlet y = x + x:\n\nlet mut x = 0;\nif (cond) x = x + 1;\nfoo(&mut x);\n```\n\n----------------------------------------\n\nTITLE: Checking if a Validator Can Join the Set in Move\nDESCRIPTION: Determines if a candidate validator with the given stake has sufficient voting power to join the validator set. It calculates the future voting power based on the stake and total stake.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\nfun can_join(self: &ValidatorSet, stake: u64, ctx: &TxContext): bool {\n    let (min_joining_voting_power, _, _) = self.get_voting_power_thresholds(ctx);\n    // if the validator will have at least `min_joining_voting_power` after joining, they can join.\n    // this formula comes from SIP-39: https://github.com/sui-foundation/sips/blob/main/sips/sip-39.md\n    let future_total_stake = self.total_stake + stake;\n    let future_validator_voting_power = voting_power::derive_raw_voting_power(\n        stake,\n        future_total_stake,\n    );\n    future_validator_voting_power >= min_joining_voting_power\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GEM Currency in Move using Sui Closed-Loop Token Standard\nDESCRIPTION: This function initializes the GEM currency using the Sui Closed-Loop Token standard. It creates the currency, sets policies, freezes metadata, and transfers policy capability to the package publisher.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin/in-game-token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nfun init(witness: GEMS, ctx: &mut TxContext) {\n    let (treasury, metadata) = coin::create_currency(\n        witness,\n        9,\n        b\"GEM\",\n        b\"Gem\",\n        b\"Game currency, used to create swords\",\n        option::none(),\n        ctx\n    );\n    transfer::public_transfer(treasury, tx_context::sender(ctx));\n    let (_, policy_cap) = transfer_policy::new<GEM>(&metadata, ctx);\n    transfer_policy::add_rule(\n        &policy_cap,\n        transfer_policy::default_rules::royalty_rule<GEM, GEMS>(),\n        ctx\n    );\n    transfer_policy::add_to_balance<GEM, GEMS>(\n        &policy_cap,\n        balance::zero()\n    );\n    let pub = package::claim(ctx);\n    coin::mint_and_transfer(&mut metadata, GEM_AMOUNT_SMALL, package::publisher_address(&pub), ctx);\n    coin::mint_and_transfer(&mut metadata, GEM_AMOUNT_MEDIUM, package::publisher_address(&pub), ctx);\n    coin::mint_and_transfer(&mut metadata, GEM_AMOUNT_LARGE, package::publisher_address(&pub), ctx);\n    transfer::public_freeze_object(metadata);\n    transfer::public_transfer(policy_cap, package::publisher_address(&pub));\n    package::burn_publisher(pub);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Inference for Copy and Move Operations in Move\nDESCRIPTION: This code snippet illustrates how Move's compiler infers copy or move operations for different types of values, including primitives, structs, and references. It shows examples of both copy and move operations based on the value's type and abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_13\n\nLANGUAGE: move\nCODE:\n```\nlet s = b\"hello\";\nlet foo = Foo { f: 0 };\nlet coin = Coin { value: 0 };\nlet coins = vector[Coin { value: 0 }, Coin { value: 0 }];\n\nlet s2 = s; // copy\nlet foo2 = foo; // copy\nlet coin2 = coin; // move\nlet coins2 = coin; // move\n\nlet x = 0;\nlet b = false;\nlet addr = @0x42;\nlet x_ref = &x;\nlet coin_ref = &mut coin2;\n\nlet x2 = x; // copy\nlet b2 = b; // copy\nlet addr2 = @0x42; // copy\nlet x_ref2 = x_ref; // copy\nlet coin_ref2 = coin_ref; // copy\n```\n\n----------------------------------------\n\nTITLE: API for Adding Child Objects as Dynamic Fields\nDESCRIPTION: This snippet defines a function in Move that adds a `Child` object to a `Parent` object as a dynamic field, showcasing how to manage hierarchical relationships between objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/dynamic-fields.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\n{@inject: examples/move/dynamic_fields/sources/example.move#fun=add_child}\n```\n\n----------------------------------------\n\nTITLE: Defining request_gas function in Rust\nDESCRIPTION: This code snippet defines a function `request_gas` in Rust. The function takes requirement data as input and returns a `GasData` object or an error. This function is used to request a `GasData` object for sponsoring transactions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/sponsored-transactions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n```rust\npub fn request_gas(/*requirement data*/) -> Result<GasData, Error>;\n```\n```\n\n----------------------------------------\n\nTITLE: Authorize Package Upgrade in Sui Move\nDESCRIPTION: This Move function authorizes a package upgrade by creating an UpgradeTicket. It takes an UpgradeCap and a digest as input, and emits an UpgradeTicket. It's part of the Sui framework's basic implementation for upgrade authorization.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nmodule sui::package {\n    /// Grants the right to upgrade the package to a new version\n    public fun authorize_upgrade(\n        cap: &mut UpgradeCap,\n        digest: vector<u8>,\n        ctx: &mut TxContext\n    ): UpgradeTicket {\n        assert!(!cap.is_upgrading, EAlreadyUpgrading);\n        cap.is_upgrading = true;\n        UpgradeTicket {\n            id: object::new(ctx),\n            cap: object::id(cap),\n            policy: cap.policy,\n            digest,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Leaf by Index in Critbit Tree\nDESCRIPTION: Removes a leaf node from the critbit tree by its index and returns its value. The function handles updating parent-child relationships and maintains tree integrity, including special handling for when the tree becomes empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_14\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun remove_leaf_by_index<V: store>(tree: &mut CritbitTree<V>, index: u64): V {\n    let key = table::borrow(& tree.leaves, index).key;\n    if (tree.min_leaf == index) {\n        let (_, index) = next_leaf(tree, key);\n        tree.min_leaf = index;\n    };\n    if (tree.max_leaf == index) {\n        let (_, index) = previous_leaf(tree, key);\n        tree.max_leaf = index;\n    };\n    let mut is_left_child_;\n    let Leaf<V> {key: _, value, parent: removed_leaf_parent_index} = table::remove(&mut tree.leaves, index);\n    if (size(tree) == 0) {\n        tree.root = PARTITION_INDEX;\n        tree.min_leaf = PARTITION_INDEX;\n        tree.max_leaf = PARTITION_INDEX;\n        tree.next_internal_node_index = 0;\n        tree.next_leaf_index = 0;\n    } else {\n        assert!(removed_leaf_parent_index != PARTITION_INDEX, EIndexOutOfRange);\n        let removed_leaf_parent = table::borrow(&tree.internal_nodes, removed_leaf_parent_index);\n        let removed_leaf_grand_parent_index = removed_leaf_parent.parent;\n        // Note that sibling of the removed leaf can be a leaf or an internal node\n        is_left_child_ = is_left_child(tree, removed_leaf_parent_index, MAX_U64 - index);\n        let sibling_index = if (is_left_child_) { removed_leaf_parent.right_child }\n        else { removed_leaf_parent.left_child };\n        if (removed_leaf_grand_parent_index == PARTITION_INDEX) {\n            // Parent of the removed leaf is the tree root\n            // Update the parent of the sibling node and set sibling as the tree root\n            if (sibling_index < PARTITION_INDEX) {\n                // sibling is an internal node\n                table::borrow_mut(&mut tree.internal_nodes, sibling_index).parent = PARTITION_INDEX;\n            } else{\n                // sibling is a leaf\n                table::borrow_mut(&mut tree.leaves, MAX_U64 - sibling_index).parent = PARTITION_INDEX;\n            };\n            tree.root = sibling_index;\n        } else {\n            // grand parent of the removed leaf is a internal node\n            // set sibling as the child of the grand parent of the removed leaf\n            is_left_child_ = is_left_child(tree, removed_leaf_grand_parent_index, removed_leaf_parent_index);\n            update_child(tree, removed_leaf_grand_parent_index, sibling_index, is_left_child_);\n        };\n        table::remove(&mut tree.internal_nodes, removed_leaf_parent_index);\n    };\n    value\n}\n```\n\n----------------------------------------\n\nTITLE: New Token Policy Function in Move\nDESCRIPTION: Creates a new `TokenPolicy` and a matching `TokenPolicyCap`. The `TokenPolicy` must then be shared using the `share_policy` method.  The `TreasuryCap` guarantees full ownership over the currency, and is unique, hence it is safe to use it for authorization.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>public</b> <b>fun</b> <a href=\\\"../sui/token.md#sui_token_new_policy\\\">new_policy</a>&lt;T&gt;(\\n    _treasury_cap: &TreasuryCap&lt;T&gt;,\\n    ctx: &<b>mut</b> TxContext,\\n): (<a href=\\\"../sui/token.md#sui_token_TokenPolicy\\\">TokenPolicy</a>&lt;T&gt;, <a href=\\\"../sui/token.md#sui_token_TokenPolicyCap\\\">TokenPolicyCap</a>&lt;T&gt;) {\\n    <b>let</b> policy = <a href=\\\"../sui/token.md#sui_token_TokenPolicy\\\">TokenPolicy</a> {\\n        id: <a href=\\\"../sui/object.md#sui_object_new\\\">object::new</a>(ctx),\\n        <a href=\\\"../sui/token.md#sui_token_spent_balance\\\">spent_balance</a>: <a href=\\\"../sui/balance.md#sui_balance_zero\\\">balance::zero</a>(),\\n        <a href=\\\"../sui/token.md#sui_token_rules\\\">rules</a>: <a href=\\\"../sui/vec_map.md#sui_vec_map_empty\\\">vec_map::empty</a>(),\\n    };\\n    <b>let</b> cap = <a href=\\\"../sui/token.md#sui_token_TokenPolicyCap\\\">TokenPolicyCap</a> {\\n        id: <a href=\\\"../sui/object.md#sui_object_new\\\">object::new</a>(ctx),\\n        `<b>for</b>`: <a href=\\\"../sui/object.md#sui_object_id\\\">object::id</a>(&policy),\\n    };\\n    (policy, cap)\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Transaction Sender Address\nDESCRIPTION: Provides a function to retrieve the address of the user that signed the current transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/tx_context.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sender(_self: &TxContext): address {\n    native_sender()\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Sui Client Environment\nDESCRIPTION: This command allows you to switch the active environment for the Sui client, enabling you to interact with different chains like Testnet or Mainnet.  Replace `<YOUR-CHAIN-ENVIRONMENT>` with the name of the environment you want to switch to. This is a prerequisite for managing package addresses correctly.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/automated-address-management.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client --switch --env <YOUR-CHAIN-ENVIRONMENT>\"\n```\n\n----------------------------------------\n\nTITLE: Multi-Transaction Testing with test_scenario in Move\nDESCRIPTION: Test function that simulates multiple transactions using the test_scenario module to create and transfer a Sword object between different addresses and verify its properties.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/build-test.mdx#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun test_sword_transactions() {\n    // create test addresses representing users\n    let admin = @0xAD;\n    let initial_owner = @0xA0;\n    let final_owner = @0xAF;\n\n    // first transaction executed by admin to create the sword\n    let scenario_val = test_scenario::begin(admin);\n    let scenario = &mut scenario_val;\n    {\n        // create the sword and transfer it to the initial owner\n        sword_create(42, 7, initial_owner, test_scenario::ctx(scenario));\n    };\n    // second transaction executed by the initial sword owner\n    test_scenario::next_tx(scenario, initial_owner);\n    {\n        // extract the sword owned by the initial owner\n        let sword = test_scenario::take_from_sender<Sword>(scenario);\n        // transfer the sword to the final owner\n        transfer::transfer(sword, final_owner);\n    };\n    // third transaction executed by the final sword owner\n    test_scenario::next_tx(scenario, final_owner);\n    {\n        // extract the sword owned by the final owner\n        let sword = test_scenario::take_from_sender<Sword>(scenario);\n        // verify that the sword has the expected properties\n        assert!(magic(&sword) == 42 && strength(&sword) == 7, 0);\n        // return the sword to the object pool\n        test_scenario::return_to_sender(scenario, sword);\n    };\n    test_scenario::end(scenario_val);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Randomness State in Sui\nDESCRIPTION: Records new randomness when executing the RandomnessStateUpdate system transaction. It updates the epoch, randomness round, and random bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\nfun update_randomness_state(\n    self: &mut Random,\n    new_round: u64,\n    new_bytes: vector<u8>,\n    ctx: &TxContext,\n) {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    let epoch = ctx.epoch();\n    let inner = self.load_inner_mut();\n    if (inner.randomness_round == 0 && inner.epoch == 0 && inner.random_bytes.is_empty()) {\n        assert!(new_round == 0, EInvalidRandomnessUpdate);\n    } else {\n        assert!(\n            (epoch > inner.epoch && new_round == 0) ||\n                    (new_round == inner.randomness_round + 1),\n            EInvalidRandomnessUpdate,\n        );\n    };\n    inner.epoch = ctx.epoch();\n    inner.randomness_round = new_round;\n    inner.random_bytes = new_bytes;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Variables for GraphQL Query\nDESCRIPTION: This snippet shows the JSON structure for passing variables to a GraphQL query. The `epochID` is set to the integer value 100. This variable will be used by the server to substitute into the query before execution.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/graphql-rpc.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"epochID\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Item Internally in Sui Kiosk (Move)\nDESCRIPTION: This internal function \"places\" an item in the Kiosk and increments the item count. It's part of the package-level API.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_30\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun place_internal<T: key + store>(self: &mut Kiosk, item: T) {\n    self.item_count = self.item_count + 1;\n    dof::add(&mut self.id, Item { id: object::id(&item) }, item)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PriorityQueue and Entry Structures in Move\nDESCRIPTION: Defines the PriorityQueue struct representing a max heap and the Entry struct for queue elements. The PriorityQueue contains a vector of Entries, maintaining the max heap property.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/priority_queue.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct PriorityQueue<T: drop> has drop, store {\n    entries: vector<Entry<T>>\n}\n\npublic struct Entry<T: drop> has drop, store {\n    priority: u64,\n    value: T\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Owned Objects from Sui RPC Nodes\nDESCRIPTION: React component that uses dApp Kit hooks to query and display objects owned by the connected wallet address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/client-tssdk.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCurrentAccount, useSuiClientQuery } from '@mysten/dapp-kit';\n\nfunction ConnectedAccount() {\n\tconst account = useCurrentAccount();\n\n\tif (!account) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<div>Connected to {account.address}</div>;\n\t\t\t<OwnedObjects address={account.address} />\n\t\t</div>\n\t);\n}\n\nfunction OwnedObjects({ address }: { address: string }) {\n\tconst { data } = useSuiClientQuery('getOwnedObjects', {\n\t\towner: address,\n\t});\n\tif (!data) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<ul>\n\t\t\t{data.data.map((object) => (\n\t\t\t\t<li key={object.data?.objectId}>\n\t\t\t\t\t<a href={`https://example-explorer.com/object/${object.data?.objectId}`}>\n\t\t\t\t\t\t{object.data?.objectId}\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving object ID\nDESCRIPTION: Gets the underlying ID of a Sui object. This function works with any object that has the 'key' ability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_16\n\nLANGUAGE: move\nCODE:\n```\npublic fun id<T: key>(obj: &T): ID {\n    borrow_uid(obj).id\n}\n```\n\n----------------------------------------\n\nTITLE: Popping Maximum Element from Priority Queue in Move\nDESCRIPTION: Function to remove and return the highest priority element from the queue. It swaps the root with the last element, removes the last element, and then restores the max heap property.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/priority_queue.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pop_max<T: drop>(pq: &mut PriorityQueue<T>): (u64, T) {\n    let len = pq.entries.length();\n    assert!(len > 0, EPopFromEmptyHeap);\n    let Entry { priority, value } = pq.entries.swap_remove(0);\n    max_heapify_recursive(&mut pq.entries, len - 1, 0);\n    (priority, value)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Receipt Package Function in Move\nDESCRIPTION: This function retrieves the ID of the upgraded package from an UpgradeReceipt. It takes an UpgradeReceipt as input and returns the ID of the package.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun receipt_package(receipt: &UpgradeReceipt): ID {\n    receipt.package\n}\n```\n\n----------------------------------------\n\nTITLE: Asset States in Kiosk System\nDESCRIPTION: Code references showing the different states an asset can have in a Kiosk: placed, locked, listed, and listed_exclusively. Each state has specific functions and restrictions associated with it.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- placed - Can be taken out by owner, freely tradable and modifiable\n- locked - Take is disabled, must be listed for trade\n- listed - Available for fixed-price purchase, cannot be taken or modified\n- listed_exclusively - Requires PurchaseCap for operations\n```\n\n----------------------------------------\n\nTITLE: Checking if Option is Some in Move\nDESCRIPTION: Function to check if an Option holds a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_some<Element>(t: &Option<Element>): bool {\n    !t.vec.is_empty()\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Stake from Validator's Pool in Move\nDESCRIPTION: The `request_withdraw_stake` function facilitates the withdrawal of a user's stake from a validator's pool. It utilizes modules responsible for delegation and coin management. The inputs required are a mutable `SuiSystemState`, mutable references to `Delegation` and `StakedSui`, a withdrawal amount, and a mutable `TxContext`. The function reduces the staked amount from the validator's pool by the specified withdrawal amount.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/exchange-integration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun request_withdraw_stake(\n   self: &mut SuiSystemState,\n   delegation: &mut Delegation,\n   staked_sui: &mut StakedSui,\n   principal_withdraw_amount: u64,\n   ctx: &mut TxContext,\n) {\n   validator_set::request_withdraw_stake(\n       &mut self.validators,\n       delegation,\n       staked_sui,\n       principal_withdraw_amount,\n       ctx,\n   );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Trading Pool in DeepBook Protocol (Move)\nDESCRIPTION: Creates a new trading pool in DeepBook with specified base asset, quote asset, tick size, and lot size. Requires a transaction fee in SUI coin for pool creation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n/// Parameters expected by this function\n///\n///   0. `[registry]` Object ID refers to the pool registry\n///   1. `[tick_size]` Minimal Price Change Accuracy of this pool\n///   2. `[lot_size]` Minimal lot Change Accuracy of this pool\n///   3. `[coin]` Object ID of the sui coin, to pay fee for create pool (100 MIST sui charged)\n\n/// Returns the AccountCap\npublic fun create_pool<BaseAsset, QuoteAsset, SUI>(\n    registry: &mut Registry,\n    tick_size: u64,\n    lot_size: u64,\n    coin: Coin<SUI>,\n    ctx: &mut TxContext,\n)\n```\n\n----------------------------------------\n\nTITLE: Assert Usage in Vector Operation\nDESCRIPTION: Demonstrates how to use the assert macro to simplify error checking in a function that pops two items from a vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abort-and-assert.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nuse std::vector;\nfun pop_twice<T>(v: &mut vector<T>): (T, T) {\n    assert!(vector::length(v) >= 2, 42); // Now uses 'assert'\n    (vector::pop_back(v), vector::pop_back(v))\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Items in Kiosk with Transaction Blocks\nDESCRIPTION: Shows how to place an item into a Sui Kiosk using programmable transaction blocks with the kiosk::place function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = new Transaction();\n\nlet itemArg = tx.object('<ID>');\nlet kioskArg = tx.object('<ID>');\nlet kioskOwnerCapArg = tx.object('<ID>');\n\ntx.moveCall({\n\ttarget: '0x2::kiosk::place',\n\targuments: [kioskArg, kioskOwnerCapArg, itemArg],\n\ttypeArguments: ['<ITEM_TYPE>'],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Field Struct for Dynamic Field Storage in Move\nDESCRIPTION: The Field struct is an internal object used for storing the dynamic field name and value pairs. It includes an ID derived from the parent object's ID, field name and type, the name of the field, and the associated value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Field<Name: copy, drop, store, Value: store> has key {\n    id: sui::object::UID,\n    name: Name,\n    value: Value\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rentable Asset Wrapper in Move\nDESCRIPTION: Wrapper struct holding an asset being rented, including rental duration, start date, price, and kiosk information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic struct Rentable<T: key + store> has store {\n  object: T,\n  duration: u64,\n  start_date: Option<u64>,\n  price_per_day: u64,\n  kiosk_id: ID,\n}\n```\n\n----------------------------------------\n\nTITLE: Locking an Item in a Kiosk using PTB\nDESCRIPTION: This JavaScript snippet demonstrates how to lock an item in a Sui Kiosk using Programmable Transaction Blocks. It calls the 'lock' function from the 'kiosk' module, specifying the kiosk, owner capability, transfer policy, item, and item type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = new Transaction();\n\nlet kioskArg = tx.object('<ID>');\nlet kioskOwnerCapArg = tx.object('<ID>');\nlet itemArg = tx.object('<ID>');\nlet transferPolicyArg = tx.object('<ID>');\n\ntx.moveCall({\n\ttarget: '0x2::kiosk::lock',\n\targuments: [kioskArg, kioskOwnerCapArg, transferPolicyArg, itemArg],\n\ttypeArguments: ['<ITEM_TYPE>'],\n});\n```\n\n----------------------------------------\n\nTITLE: Advancing Epoch in Validator Set (Move)\nDESCRIPTION: This function updates the validator set at the end of an epoch, handling reward distribution, stake adjustments, validator status changes, and total stake recalculation. It performs multiple operations including distributing stake rewards, processing pending stake deposits/withdrawals, handling validator applications/withdrawals, and calculating the total stake for the new epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun advance_epoch(\n    self: &mut ValidatorSet,\n    computation_reward: &mut Balance<SUI>,\n    storage_fund_reward: &mut Balance<SUI>,\n    validator_report_records: &mut VecMap<address, VecSet<address>>,\n    reward_slashing_rate: u64,\n    low_stake_grace_period: u64,\n    ctx: &mut TxContext,\n) {\n    let new_epoch = ctx.epoch() + 1;\n    let total_voting_power = voting_power::total_voting_power();\n    // switch to using voting power based admission, if we are not already using it\n    let key = VotingPowerAdmissionStartEpochKey();\n    if (!self.extra_fields.contains(key)) self.extra_fields.add(key, ctx.epoch());\n    // Compute the reward distribution without taking into account the tallying rule slashing.\n    let (\n        unadjusted_staking_reward_amounts,\n        unadjusted_storage_fund_reward_amounts,\n    ) = compute_unadjusted_reward_distribution(\n        &self.active_validators,\n        total_voting_power,\n        computation_reward.value(),\n        storage_fund_reward.value(),\n    );\n    // Use the tallying rule report records for the epoch to compute validators that will be\n    // punished.\n    let slashed_validators = self.compute_slashed_validators(*validator_report_records);\n    let total_slashed_validator_voting_power = sum_voting_power_by_addresses(\n        &self.active_validators,\n        &slashed_validators,\n    );\n    // Compute the reward adjustments of slashed validators, to be taken into\n    // account in adjusted reward computation.\n    let (\n        total_staking_reward_adjustment,\n        individual_staking_reward_adjustments,\n        total_storage_fund_reward_adjustment,\n        individual_storage_fund_reward_adjustments,\n    ) = compute_reward_adjustments(\n        get_validator_indices(&self.active_validators, &slashed_validators),\n        reward_slashing_rate,\n        &unadjusted_staking_reward_amounts,\n        &unadjusted_storage_fund_reward_amounts,\n    );\n    // Compute the adjusted amounts of stake each validator should get given the tallying rule\n    // reward adjustments we computed before.\n    // `compute_adjusted_reward_distribution` must be called before `distribute_reward` and `adjust_stake_and_gas_price` to\n    // make sure we are using the current epoch's stake information to compute reward distribution.\n    let (\n        adjusted_staking_reward_amounts,\n        adjusted_storage_fund_reward_amounts,\n    ) = compute_adjusted_reward_distribution(\n        &self.active_validators,\n        total_voting_power,\n        total_slashed_validator_voting_power,\n        unadjusted_staking_reward_amounts,\n        unadjusted_storage_fund_reward_amounts,\n        total_staking_reward_adjustment,\n        individual_staking_reward_adjustments,\n        total_storage_fund_reward_adjustment,\n        individual_storage_fund_reward_adjustments,\n    );\n    // Distribute the rewards before adjusting stake so that we immediately start compounding\n    // the rewards for validators and stakers.\n    distribute_reward(\n        &mut self.active_validators,\n        &adjusted_staking_reward_amounts,\n        &adjusted_storage_fund_reward_amounts,\n        computation_reward,\n        storage_fund_reward,\n        ctx,\n    );\n    adjust_stake_and_gas_price(&mut self.active_validators);\n    process_pending_stakes_and_withdraws(&mut self.active_validators, ctx);\n    // Emit events after we have processed all the rewards distribution and pending stakes.\n    emit_validator_epoch_events(\n        new_epoch,\n        &self.active_validators,\n        &adjusted_staking_reward_amounts,\n        &adjusted_storage_fund_reward_amounts,\n        validator_report_records,\n        &slashed_validators,\n    );\n    self.process_pending_removals(validator_report_records, ctx);\n    // kick low stake validators out.\n    let new_total_stake = self.update_validator_positions_and_calculate_total_stake(\n        low_stake_grace_period,\n        validator_report_records,\n        ctx,\n    );\n    self.total_stake = new_total_stake;\n    voting_power::set_voting_power(&mut self.active_validators, new_total_stake);\n    // At this point, self.active_validators are updated for next epoch.\n    // Now we process the staged validator metadata.\n    self.effectuate_staged_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: String Struct Definition in Move\nDESCRIPTION: Definition of the String struct which represents UTF-8 encoded strings. It has copy, drop, and store abilities, and contains a vector of bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct String has copy, drop, store {\n    bytes: vector<u8>\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Lock Events in a Move Function\nDESCRIPTION: Demonstrates how to implement a lock function that emits an event when called. The function creates and emits a LockEvent containing information about the locked object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/using-events.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\n/// Lock an object inside a wrapper\npublic fun lock<T: key + store>(obj: T, ctx: &mut TxContext): Lock<T> {\n    let sender = tx_context::sender(ctx);\n    let id = object::new(ctx);\n\n    // Create and emit a LockEvent containing info\n    // about the lock operation\n    event::emit(LockEvent<T> {\n        locker: sender,\n        object_id: object::id(&obj),\n        locked_at_ms: tx_context::epoch_timestamp_ms(ctx),\n    });\n\n    Lock {\n        id,\n        obj: option::some(obj)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sword Object in Move for Sui\nDESCRIPTION: Implementation of a sword_create function that creates a new Sword object with specified properties and transfers it to the transaction sender.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/build-test.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun sword_create(\n    magic: u64, strength: u64, recipient: address, ctx: &mut TxContext\n) {\n    // create a sword\n    let sword = Sword {\n        id: object::new(ctx),\n        magic: magic,\n        strength: strength,\n    };\n    // transfer the sword\n    transfer::transfer(sword, recipient);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parent and Child Structs for Dynamic Fields in Move\nDESCRIPTION: This snippet defines two structs, `Parent` and `Child`, to demonstrate the use of dynamic fields in Sui's Move smart contract language. It illustrates how one object can contain other objects, allowing for complex compositions of game assets.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/gaming.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nstruct Parent has key, store {\n    id: UID,\n    value: u64\n}\n\nstruct Child has key, store {\n    id: UID,\n    parent_id: ID,\n    value: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Orders in DeepBookV3 with TypeScript\nDESCRIPTION: Function to cancel a specific order identified by the protocol orderId. Takes pool key, balance manager key, and order ID parameters. Returns a function that takes a Transaction object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/orders.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ncancelOrder(poolKey: string, balanceManagerKey: string, orderId: string);\n```\n\n----------------------------------------\n\nTITLE: Test Move Project with Trace using Sui Move\nDESCRIPTION: This command runs the tests defined in the Move project located in the current directory and creates an execution trace, which is compatible with the Move Trace Debugger VSCode extension. This is invaluable for debugging Move code.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n\"sui move test --trace-execution\"\n```\n\n----------------------------------------\n\nTITLE: Custom Submit Proposal Implementation for DeepBookMarketMaker\nDESCRIPTION: Example of a custom submitProposal implementation for the DeepBookMarketMaker class, including the ProposalParams interface definition, function signature, and a concrete implementation that submits a proposal with specific fee and stake parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/staking-governance.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Proposal params\nexport interface ProposalParams {\n  poolKey: string;\n  balanceManagerKey: string;\n  takerFee: number;\n  makerFee: number;\n  stakeRequired: number;\n}\n\nsubmitProposal = (params: ProposalParams) => (tx: Transaction) => {}\n\n// Custom function to submit proposal in DeepBookMarketMaker class\nsubmitProposal = (tx: Transaction) => {\n  const poolKey = 'DBUSDT_DBUSDC';\n  const balanceManagerKey = 'MANAGER_1';\n  tx.add(\n    this.governance.submitProposal({\n      poolKey,\n      balanceManagerKey,\n      takerFee: 0.002,\n      makerFee: 0.001,\n      stakeRequired: 100,\n    }),\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Key-Value Pair from ObjectTable in Move\nDESCRIPTION: Function to remove a key-value pair from the ObjectTable and return the value. It uses dynamic object fields to remove the value and decrements the table size.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_table.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove<K: copy + drop + store, V: key + store>(table: &mut ObjectTable<K, V>, k: K): V {\n    let v = ofield::remove(&mut table.id, k);\n    table.size = table.size - 1;\n    v\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Foreign Token in Bridge Treasury\nDESCRIPTION: Public function that registers a foreign token in the bridge treasury. This enables the token to be transferred across chains. The registration requires a TreasuryCap, UpgradeCap, and CoinMetadata for the token.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun register_foreign_token<T>(\n    bridge: &mut Bridge,\n    tc: TreasuryCap<T>,\n    uc: UpgradeCap,\n    metadata: &CoinMetadata<T>,\n) {\n    load_inner_mut(bridge)\n        .treasury\n        .register_foreign_token<T>(tc, uc, metadata)\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning up Expired Orders in Deepbook CLOBv2 (Move)\nDESCRIPTION: This function iterates through a list of order IDs and their owners, removes expired orders from the CLOB, unlocks the corresponding balances, and emits a cancellation event. It optimizes gas costs by grouping order IDs with the same price together. It takes a pool, clock, order_ids, and order_owners as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_35\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_clean_up_expired_orders\">clean_up_expired_orders</a>&lt;BaseAsset, QuoteAsset&gt;(\n    pool: &<b>mut</b> <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_Pool\">Pool</a>&lt;BaseAsset, QuoteAsset&gt;,\n    clock: &Clock,\n    order_ids: vector&lt;u64&gt;,\n    order_owners: vector&lt;<b>address</b>&gt;\n) {\n    <b>let</b> pool_id = *object::uid_as_inner(&pool.id);\n    <b>let</b> now = clock::timestamp_ms(clock);\n    <b>let</b> n_order = vector::length(&order_ids);\n    <b>assert</b>!(n_order == vector::length(&order_owners), <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_ENotEqual\">ENotEqual</a>);\n    <b>let</b> <b>mut</b> i_order = 0;\n    <b>let</b> <b>mut</b> tick_index: u64 = 0;\n    <b>let</b> <b>mut</b> tick_price: u64 = 0;\n    <b>let</b> <b>mut</b> canceled_order_events = vector[];\n    <b>while</b> (i_order &lt; n_order) {\n        <b>let</b> <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_order_id\">order_id</a> = *vector::borrow(&order_ids, i_order);\n        <b>let</b> <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_owner\">owner</a> = *vector::borrow(&order_owners, i_order);\n        <b>if</b> (!table::contains(&pool.<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_usr_open_orders\">usr_open_orders</a>, <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_owner\">owner</a>)) { <b>continue</b> };\n        <b>let</b> <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_usr_open_orders\">usr_open_orders</a> = borrow_mut(&<b>mut</b> pool.<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_usr_open_orders\">usr_open_orders</a>, <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_owner\">owner</a>);\n        <b>if</b> (!linked_table::contains(<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_usr_open_orders\">usr_open_orders</a>, <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_order_id\">order_id</a>)) { <b>continue</b> };\n        <b>let</b> new_tick_price = *linked_table::borrow(<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_usr_open_orders\">usr_open_orders</a>, <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_order_id\">order_id</a>);\n        <b>let</b> <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_is_bid\">is_bid</a> = <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_order_is_bid\">order_is_bid</a>(<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_order_id\">order_id</a>);\n        <b>let</b> <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_open_orders\">open_orders</a> = <b>if</b> (<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_is_bid\">is_bid</a>) { &<b>mut</b> pool.<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_bids\">bids</a> } <b>else</b> { &<b>mut</b> pool.<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_asks\">asks</a> };\n        <b>if</b> (new_tick_price != tick_price) {\n            tick_price = new_tick_price;\n            <b>let</b> (tick_exists, new_tick_index) = find_leaf(\n                <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_open_orders\">open_orders</a>,\n                tick_price\n            );\n            <b>assert</b>!(tick_exists, <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_EInvalidTickPrice\">EInvalidTickPrice</a>);\n            tick_index = new_tick_index;\n        };\n        <b>let</b> order = <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_remove_order\">remove_order</a>(<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_open_orders\">open_orders</a>, <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_usr_open_orders\">usr_open_orders</a>, tick_index, <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_order_id\">order_id</a>, <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_owner\">owner</a>);\n        <b>assert</b>!(order.<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_expire_timestamp\">expire_timestamp</a> &lt; now, <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_EInvalidExpireTimestamp\">EInvalidExpireTimestamp</a>);\n        <b>if</b> (<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_is_bid\">is_bid</a>) {\n            <b>let</b> (_is_round_down, balance_locked) = clob_math::unsafe_mul_round(order.<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_quantity\">quantity</a>, order.price);\n            <a href=\"../deepbook/custodian.md#deepbook_custodian_unlock_balance\">custodian::unlock_balance</a>(&<b>mut</b> pool.quote_custodian, <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_owner\">owner</a>, balance_locked);\n        } <b>else</b> {\n            <a href=\"../deepbook/custodian.md#deepbook_custodian_unlock_balance\">custodian::unlock_balance</a>(&<b>mut</b> pool.base_custodian, <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_owner\">owner</a>, order.<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_quantity\">quantity</a>);\n        };\n        <b>let</b> canceled_order_event = <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_AllOrdersCanceledComponent\">AllOrdersCanceledComponent</a>&lt;BaseAsset, QuoteAsset&gt; {\n            client_order_id: order.client_order_id,\n            <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_order_id\">order_id</a>: order.<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_order_id\">order_id</a>,\n            <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_is_bid\">is_bid</a>: order.<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_is_bid\">is_bid</a>,\n            <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_owner\">owner</a>: order.<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_owner\">owner</a>,\n            <a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_original_quantity\">original_quantity</a>: order.<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_original_quantity\">original_quantity</a>,\n            base_asset_quantity_canceled: order.<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_quantity\">quantity</a>,\n            price: order.price\n        };\n        vector::push_back(&<b>mut</b> canceled_order_events, canceled_order_event);\n        i_order = i_order + 1;\n    };\n    <b>if</b> (!vector::is_empty(&canceled_order_events)) {\n        event::emit(<a href=\"../deepbook/clob_v2.md#deepbook_clob_v2_AllOrdersCanceled\">AllOrdersCanceled</a>&lt;BaseAsset, QuoteAsset&gt; {\n            pool_id,\n            orders_canceled: canceled_order_events,\n        });\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an Element from a Vector by Index in Move\nDESCRIPTION: This function removes the element at the specified index from the vector, shifting all subsequent elements. It preserves the order of elements but has O(n) complexity. It aborts if the index is out of bounds.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove<Element>(v: &mut vector<Element>, mut i: u64): Element {\n    let mut len = v.length();\n    // i out of bounds; abort\n    if (i >= len) abort EINDEX_OUT_OF_BOUNDS;\n    len = len - 1;\n    while (i < len) {\n        v.swap(i, { i = i + 1; i });\n    };\n    v.pop_back()\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Objects using Sui Rust SDK\nDESCRIPTION: This snippet shows how to use the Sui Rust SDK to create a transaction that receives a coin object sent to an account.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transfers/transfer-to-object.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nclient\n  .transaction_builder()\n  .move_call(\n     sending_account,\n     example_package_id,\n     \"account\",\n     \"accept_payment\",\n     vec![\"0x2::sui::SUI\"],\n     vec![\n       SuiJsonValue::from_object_id(\"0xcafe\"),\n       SuiJsonValue::from_object_id(\"0xc0ffee\") // 0xcoffee is turned into the `Receiving<...>` argument of `accept_payment` by the SDK\n     ])\n```\n\n----------------------------------------\n\nTITLE: Updating Rust to the latest stable version\nDESCRIPTION: Command to update Rust to the latest stable version using rustup. This ensures you have the most recent stable release of Rust installed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ rustup update stable\n```\n\n----------------------------------------\n\nTITLE: USDC Transfer in PTB\nDESCRIPTION: Example of transferring USDC coins using the transferObjects function in a Programmable Transaction Block.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/stablecoins.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntx.transferObjects([usdcCoin], recipientAddress);\n```\n\n----------------------------------------\n\nTITLE: Implementing Exclusive Range Iteration Macro in Move\nDESCRIPTION: A macro that iterates over a range of values from start (inclusive) to stop (exclusive) and applies a function to each value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do<$T, $R: drop>($start: $T, $stop: $T, $f: |$T| -> $R) {\n    let mut i = $start;\n    let stop = $stop;\n    while (i < stop) {\n        $f(i);\n        i = i + 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Place Market Order Function Implementation\nDESCRIPTION: Implementation of the place_market_order function which allows users to place a market order. This function calls place_limit_order with a price of MAX_PRICE for bids and MIN_PRICE for asks, and the order is automatically canceled for any unfilled quantity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\npublic fun place_market_order(\n        pool: &mut Pool,\n        client_order_id: u64,\n        quantity: u64,\n        is_bid: bool,\n        self_matching_prevention: u8,\n        display_price: bool,\n        pay_with_deep: bool,\n        fees_discount_bps: u64,\n        trade_proof: TradeProof,\n        clock: &Clock,\n        ctx: &mut TxContext,\n    ): OrderInfo {\n        let price = if (is_bid) {\n            constants::MAX_PRICE\n        } else {\n            constants::MIN_PRICE\n        };\n\n        place_limit_order(\n            pool,\n            client_order_id,\n            price,\n            quantity,\n            self_matching_prevention,\n            constants::IMMEDIATE_OR_CANCEL,\n            0, // no expiration\n            display_price,\n            pay_with_deep,\n            fees_discount_bps,\n            trade_proof,\n            clock,\n            ctx,\n        )\n    }\n```\n\n----------------------------------------\n\nTITLE: Fetching Level 2 Order Book Status for Ask Side (Move)\nDESCRIPTION: Retrieves the level 2 order book depth for the ask side within a specified price range. Returns two vectors: one for prices and one for corresponding depths. Requires a Pool object, price range, and Clock for time-based operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_30\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_level2_book_status_ask_side<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n    mut price_low: u64,\n    mut price_high: u64,\n    clock: &Clock\n): (vector<u64>, vector<u64>) {\n    let (price_low_, _) = critbit::min_leaf(&pool.asks);\n    if (price_low < price_low_) price_low = price_low_;\n    let (price_high_, _) = critbit::max_leaf(&pool.asks);\n    if (price_high > price_high_) price_high = price_high_;\n    price_low = critbit::find_closest_key(&pool.asks, price_low);\n    price_high = critbit::find_closest_key(&pool.asks, price_high);\n    let mut price_vec = vector::empty<u64>();\n    let mut depth_vec = vector::empty<u64>();\n    if (price_low == 0) { return (price_vec, depth_vec) };\n    while (price_low <= price_high) {\n        let depth = get_level2_book_status(\n            &pool.asks,\n            price_low,\n            clock::timestamp_ms(clock)\n        );\n        vector::push_back(&mut price_vec, price_low);\n        vector::push_back(&mut depth_vec, depth);\n        let (next_price, _) = critbit::next_leaf(&pool.asks, price_low);\n        if (next_price == 0) { break }\n        else { price_low = next_price };\n    };\n    (price_vec, depth_vec)\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Value from Table in Move\nDESCRIPTION: Implements the borrow function to immutably access a value in the Table by its key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow<K: copy + drop + store, V: store>(table: &Table<K, V>, k: K): &V {\n    field::borrow(&table.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Query Non-System Transactions\nDESCRIPTION: Fetches the last ten non-system transactions from the network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/graphql-rpc.mdx#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  transactionBlocks(last: 10, filter: {kind: PROGRAMMABLE_TX}) {\n    nodes {\n      digest\n      kind {\n        __typename\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Active Sui Network in Shell\nDESCRIPTION: This command switches the active Sui network to a different environment alias specified in the client configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/connect.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client switch --env <ALIAS>\n```\n\n----------------------------------------\n\nTITLE: Implementing Existence Check for Dynamic Object Fields in Move\nDESCRIPTION: This macro function implements checking if a dynamic object field of a specific type exists. It takes an object UID and a name, and returns a boolean indicating whether the field exists with the specified type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\nmacro fun exists_with_type_impl<$Name: copy + drop + store, $Value: key>(\n    $object: &UID,\n    $name: $Name,\n): bool {\n    let object = $object;\n    let name = $name;\n    let key = Wrapper { name };\n    if (!field::exists_with_type<Wrapper<$Name>, ID>(object, key)) return false;\n    let (field, value_id) = field::field_info<Wrapper<$Name>>(object, key);\n    field::has_child_object_with_ty<$Value>(field.to_address(), value_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Using SuiNodeHandle for Safe Node Manipulation in Simulator\nDESCRIPTION: Demonstrates how to safely access and manipulate SuiNode instances through SuiNodeHandle to maintain proper simulator node context for network operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-simulator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nhandle.with(|node| {\n    let state = node.state();\n    do_stuff_to_state(state);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Maximum Value Macro in Move\nDESCRIPTION: A macro that returns the maximum of two values of the same type by comparing them and returning the larger one.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_max<$T>($x: $T, $y: $T): $T {\n    let x = $x;\n    let y = $y;\n    if (x > y) x\n    else y\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Field Access and References\nDESCRIPTION: Examples of accessing struct fields directly and through references in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/structs.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nlet foo = Foo { x: 3, y: true };\nlet foo_ref: &Foo = &foo;\nlet y: bool = foo_ref.y;         // reading a field via a reference to the struct\nlet x_ref: &u64 = &foo.x;        // borrowing a field by extending a reference to the struct\n\nlet x_ref_mut: &mut u64 = &mut foo.x;\n*x_ref_mut = 42;            // modifying a field via a mutable reference\n```\n\n----------------------------------------\n\nTITLE: Internal Function Visibility Example\nDESCRIPTION: Demonstrates the default internal visibility of functions that can only be called within the same module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    fun foo(): u64 { 0 }\n    fun calls_foo(): u64 { foo() } // valid\n}\n\nmodule b::other {\n    fun calls_m_foo(): u64 {\n        a::m::foo() // ERROR!\n//      ^^^^^^^^^^^ 'foo' is internal to 'a::m'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Validator SUI Address in Move\nDESCRIPTION: Fetches the SUI address for the given validator. This address is essential for transactions and identifying the validator in the system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_44\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sui_address(self: &sui_system::validator::Validator): address {\n    self.metadata.sui_address\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Child Object in Move\nDESCRIPTION: This native function borrows a child object from a parent object. It may throw EFieldDoesNotExist or EFieldTypeMismatch errors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) native fun borrow_child_object<Child: key>(object: &UID, id: address): &Child;\n```\n\n----------------------------------------\n\nTITLE: Defining RegulatedCoinMetadata Struct in Move\nDESCRIPTION: Definition of the RegulatedCoinMetadata struct which is created for regulated coins that use the DenyList functionality. This object is immutable and stores references to the coin's metadata and deny capability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic struct RegulatedCoinMetadata<phantom T> has key {\n    id: sui::object::UID,\n    coin_metadata_object: sui::object::ID,\n    deny_cap_object: sui::object::ID\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Constraints in Function Calls with Copy Ability in Move\nDESCRIPTION: Illustrates constraint checking for function calls, focusing on the 'copy' ability in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_13\n\nLANGUAGE: move\nCODE:\n```\nfun unsafe_double<T>(x: T) {\n    (copy x, x)\n    // ERROR! T does not have 'copy'\n}\n\nfun double<T: copy>(x: T) {\n    (copy x, x) // valid, T has 'copy'\n}\n\npublic struct NoAbilities {}\n\nfun foo(): (NoAbilities, NoAbilities) {\n    let r = NoAbilities {};\n    double<NoAbilities>(r)\n    //     ^ ERROR! NoAbilities does not have 'copy'\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Weather Data in City Weather Oracle in Sui Move\nDESCRIPTION: Code snippet that updates various weather metrics in a CityWeatherOracle object. It borrows a mutable reference to the city weather oracle using the geoname ID as the key and updates multiple weather-related fields.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/weather-oracle.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet city_weather_oracle_mut = dof::borrow_mut<u32, CityWeatherOracle>(&mut oracle.id, geoname_id); // Borrow a mutable reference to the city weather oracle object with the geoname ID as the key\n    city_weather_oracle_mut.weather_id = weather_id;\n    city_weather_oracle_mut.temp = temp;\n    city_weather_oracle_mut.pressure = pressure;\n    city_weather_oracle_mut.humidity = humidity;\n    city_weather_oracle_mut.visibility = visibility;\n    city_weather_oracle_mut.wind_speed = wind_speed;\n    city_weather_oracle_mut.wind_deg = wind_deg;\n    city_weather_oracle_mut.wind_gust = wind_gust;\n    city_weather_oracle_mut.clouds = clouds;\n    city_weather_oracle_mut.dt = dt;\n```\n\n----------------------------------------\n\nTITLE: Implementing Game Move Logic in React Component\nDESCRIPTION: React component implementation for handling game moves in a multisig Tic-Tac-Toe game. Includes logic for transaction signing, execution, and state management using multiple signatures.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/tic-tac-toe.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction OwnedGame({\n  game,\n  trophy,\n  invalidateGame,\n  invalidateTrophy,\n}: {\n  game: GameData;\n  trophy: Trophy;\n  invalidateGame: InvalidateGameQuery;\n  invalidateTrophy: InvalidateTrophyQuery;\n}): ReactElement {\n  const adminKey = game.admin ? new MultiSigPublicKey(new Uint8Array(game.admin)) : null;\n\n  const client = useSuiClient();\n  const signAndExecute = useExecutor();\n  const multiSignAndExecute = useExecutor({\n    execute: ({ bytes, signature }) => {\n      const multiSig = adminKey!!.combinePartialSignatures([signature]);\n      return client.executeTransactionBlock({\n        transactionBlock: bytes,\n        signature: [multiSig, signature],\n        options: {\n          showRawEffects: true,\n        },\n      });\n    },\n  });\n\n  const [turnCap, invalidateTurnCap] = useTurnCapQuery(game.id);\n  const account = useCurrentAccount();\n  const tx = useTransactions()!!;\n\n  const onMove = (row: number, col: number) => {\n    signAndExecute(\n      {\n        tx: tx.sendMark(turnCap?.data!!, row, col),\n        options: { showObjectChanges: true },\n      },\n      ({ objectChanges }) => {\n        const mark = objectChanges?.find(\n          (c) => c.type === 'created' && c.objectType.endsWith('::Mark'),\n        );\n\n        if (mark && mark.type === 'created') {\n          const recv = tx.receiveMark(game, mark);\n          recv.setSender(adminKey!!.toSuiAddress());\n          recv.setGasOwner(account?.address!!);\n\n          multiSignAndExecute({ tx: recv }, () => {\n            invalidateGame();\n            invalidateTrophy();\n            invalidateTurnCap();\n          });\n        }\n      },\n    );\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Spending Tokens in Sui Token Module\nDESCRIPTION: Spends a Token by unwrapping it and storing the Balance in the ActionRequest for the \"spend\" action. Requires confirm_request_mut to be called later to confirm the request and join the spent balance with TokenPolicy.spent_balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\npublic fun spend<T>(t: Token<T>, ctx: &mut TxContext): ActionRequest<T> {\n    let Token { id, balance } = t;\n    id.delete();\n    new_request(\n        spend_action(),\n        balance.value(),\n        option::none(),\n        option::some(balance),\n        ctx,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Place Limit Order Function Implementation\nDESCRIPTION: Implementation of the place_limit_order function which allows users to place a limit order. This function requires a TradeProof generated from a BalanceManager call. For the current version, pay_with_deep must be true.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\npublic fun place_limit_order(\n        pool: &mut Pool,\n        client_order_id: u64,\n        price: u64,\n        quantity: u64,\n        self_matching_prevention: u8,\n        order_type: u8,\n        expire_timestamp: u64,\n        display_price: bool,\n        pay_with_deep: bool,\n        fees_discount_bps: u64,\n        trade_proof: TradeProof,\n        clock: &Clock,\n        ctx: &mut TxContext,\n    ): OrderInfo {\n        // Convert trade proof into a limit order request\n        let balance_manager = owner(&trade_proof);\n\n        // Get current time\n        let now = clock::timestamp_ms(clock);\n        let tick_index = pool.tick_index;\n\n        // Get current DEEP price for conversion purposes\n        let (deep_num, deep_denom) = deep_price::get_deep_price(pool.deep_price);\n        let deep_price = deep_price::new(deep_num, deep_denom);\n\n        // Make sure options passed in are not garbage\n        assert!(self_matching_prevention <= constants::CANCEL_MAKER, EInvalidSelfMatchingPrevention);\n        assert!(order_type <= constants::POST_ONLY, EInvalidOrderType);\n\n        // Create order context\n        let mut order_context = order_context::new(\n            client_order_id,\n            balance_manager,\n            price,\n            quantity,\n            self_matching_prevention,\n            order_type,\n            expire_timestamp,\n            deep_price,\n            now,\n            display_price,\n            pay_with_deep,\n            fees_discount_bps,\n            trade_proof,\n            tick_index,\n            ctx,\n        );\n\n        // Is client order ID valid\n        assert!(!pool_open_orders::contains_client_order_id(\n            &pool.open_orders,\n            balance_manager,\n            client_order_id\n        ), EInvalidClientOrderId);\n\n        // Ensure the order timestamp is not already expired\n        if (expire_timestamp > 0 && expire_timestamp <= now) {\n            let order_info = order_context::process_context(\n                &mut order_context,\n                0, // no match quantity\n                false, // is not placed\n                pool.base_asset_id,\n                pool.quote_asset_id,\n                object::id(pool),\n            );\n            return order_info\n        };\n\n        let market_price_info = market_price::get(&pool.market_price_info);\n        let trade_quantity = order_book::match_order(\n            &mut pool.order_book,\n            &mut pool.open_orders,\n            &mut order_context,\n            &market_price_info,\n            order_context::is_bid(&order_context),\n            object::id(pool),\n        );\n\n        // Update market price info\n        if (trade_quantity > 0) {\n            // Check if tick price is valid\n            // Get last matched price\n            let tick_price = order_context::last_execution_price(&order_context);\n            market_price::update_market_price(\n                &mut pool.market_price_info,\n                tick_price,\n                trade_quantity,\n                now\n            );\n        };\n\n        // If we have remaining quantity and the order type allows it, place the order\n        let mut is_placed = false;\n        let mut entry_size = 0;\n        let remaining_quantity = order_context::get_remaining_quantity(&order_context);\n\n        // Only place order if we have remaining quantity\n        if (remaining_quantity > 0) {\n            // Handle order type\n            // IOC and FOK orders are never queued\n            if (order_type == constants::IMMEDIATE_OR_CANCEL) {\n                // IOC require any amount to be filled\n                // do nothing here, we just don't place the order\n            } else if (order_type == constants::FILL_OR_KILL) {\n                // FOK must be completely filled so cancel if we have any remaining\n                assert!(remaining_quantity == 0, EFillOrKillNotFilled);\n            } else if (order_type == constants::POST_ONLY) {\n                // Post only requires no fills\n                assert!(trade_quantity == 0, EPostOnlyWouldTake);\n                (is_placed, entry_size) = order_book::place_order(\n                    &mut pool.order_book,\n                    &mut pool.open_orders,\n                    &mut order_context,\n                );\n            } else {\n                // Default NO_RESTRICTION just place the order\n                (is_placed, entry_size) = order_book::place_order(\n                    &mut pool.order_book,\n                    &mut pool.open_orders,\n                    &mut order_context,\n                );\n            };\n        };\n\n        let order_info = order_context::process_context(\n            &mut order_context,\n            trade_quantity,\n            is_placed,\n            pool.base_asset_id,\n            pool.quote_asset_id,\n            object::id(pool),\n        );\n\n        // Update pool statistics\n        let filled_fees = order_context::get_filled_fees(&order_context);\n        if (filled_fees > 0) {\n            if (order_context::is_bid(&order_context)) {\n                pool.fees_collected_quote = pool.fees_collected_quote + filled_fees;\n            } else {\n                pool.fees_collected_base = pool.fees_collected_base + filled_fees;\n            }\n        };\n\n        if (entry_size > 0) {\n            pool.total_entry_count = pool.total_entry_count + entry_size;\n        };\n\n        if (trade_quantity > 0) {\n            pool.total_volume = pool.total_volume + trade_quantity;\n            if (is_some(&pool.last_trade_price)) {\n                pool.previous_trade_price = *option::borrow(&pool.last_trade_price);\n            };\n            pool.last_trade_price = option::some(order_context::last_execution_price(&order_context));\n            pool.last_trade_time = now;\n        };\n\n        order_info\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Bridge Message Structures in Move\nDESCRIPTION: Defines the core BridgeMessage struct and related message types including TokenTransferPayload, EmergencyOp, Blocklist, UpdateBridgeLimit, UpdateAssetPrice, and AddTokenOnSui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic struct BridgeMessage has copy, drop, store {\n    message_type: u8,\n    message_version: u8,\n    seq_num: u64,\n    source_chain: u8,\n    payload: vector<u8>\n}\n\npublic struct BridgeMessageKey has copy, drop, store {\n    source_chain: u8,\n    message_type: u8,\n    bridge_seq_num: u64\n}\n\npublic struct TokenTransferPayload has drop {\n    sender_address: vector<u8>,\n    target_chain: u8,\n    target_address: vector<u8>,\n    token_type: u8,\n    amount: u64\n}\n\npublic struct EmergencyOp has drop {\n    op_type: u8\n}\n\npublic struct Blocklist has drop {\n    blocklist_type: u8,\n    validator_eth_addresses: vector<vector<u8>>\n}\n\npublic struct UpdateBridgeLimit has drop {\n    receiving_chain: u8,\n    sending_chain: u8,\n    limit: u64\n}\n\npublic struct UpdateAssetPrice has drop {\n    token_id: u8,\n    new_price: u64\n}\n\npublic struct AddTokenOnSui has drop {\n    native_token: bool,\n    token_ids: vector<u8>,\n    token_type_names: vector<std::ascii::String>,\n    token_prices: vector<u64>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA3-256 hash function in Move\nDESCRIPTION: Native implementation of the SHA3-256 hash function. It takes a vector of bytes as input and returns a vector of bytes representing the hash.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/hash.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun sha3_256(data: vector<u8>): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Review Structure and Scoring in Move\nDESCRIPTION: Defines the Review struct with attributes for scoring, and implements functions to calculate and update the total score of a review.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\n/// Represents a review of a service\npublic struct Review has key, store {\n    id: UID,\n    owner: address,\n    service_id: ID,\n    content: String,\n    // intrinsic score\n    len: u64,\n    // extrinsic score\n    votes: u64,\n    time_issued: u64,\n    // proof of experience\n    has_poe: bool,\n    total_score: u64,\n    overall_rate: u8,\n}\n\n/// Updates the total score of a review\nfun update_total_score(rev: &mut Review) {\n    rev.total_score = rev.calculate_total_score();\n}\n\n/// Calculates the total score of a review\nfun calculate_total_score(rev: &Review): u64 {\n    let mut intrinsic_score: u64 = rev.len;\n    intrinsic_score = math::min(intrinsic_score, 150);\n    let extrinsic_score: u64 = 10 * rev.votes;\n    // VM = either 1.0 or 2.0 (if user has proof of experience)\n    let vm: u64 = if (rev.has_poe) { 2 } else { 1 };\n    (intrinsic_score + extrinsic_score) * vm\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Move Module\nDESCRIPTION: Example Move module implementation showing imports, struct declarations with abilities, module initializer, and accessor functions. The module defines transferable objects with key and store abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/write-package.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule my_first_package::example {\n    // Part 1: Imports\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n\n    // Part 2: Struct definitions\n    struct Sword has key, store {\n        id: UID,\n        magic: u64,\n        strength: u64,\n    }\n\n    struct Forge has key, store {\n        id: UID,\n        swords_created: u64,\n    }\n\n    // Part 3: Module initializer\n    fun init(ctx: &mut TxContext) {\n        let admin = Forge {\n            id: object::new(ctx),\n            swords_created: 0,\n        };\n        // Transfer the forge object to the module publisher\n        transfer::transfer(admin, tx_context::sender(ctx));\n    }\n\n    // Part 4: Accessor functions\n    public fun magic(self: &Sword): u64 {\n        self.magic\n    }\n\n    public fun strength(self: &Sword): u64 {\n        self.strength\n    }\n\n    public fun swords_created(self: &Forge): u64 {\n        self.swords_created\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests with pnpm\nDESCRIPTION: Command to execute end-to-end tests for the GraphQL transport using pnpm, targeting the @mysten/graphql-transport package. Pre-requisite: pnpm must be installed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-rpc/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm --filter @mysten/graphql-transport test:e2e\n```\n\n----------------------------------------\n\nTITLE: Viewing Transaction Results for SUI Transfer\nDESCRIPTION: Shows the transaction details and effects after executing a pay-sui command, including sender information, gas details, transaction kind, input objects, commands executed, and resulting object creation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nTransaction Digest: AsWkciVhLHeCmqVipjjyAA7Hv5y87pFjHS59K8m4zBJV\n╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Transaction Data                                                                                             │\n├──────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ Sender: 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea                                   │\n│ Gas Owner: 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea                                │\n│ Gas Budget: 5000000 MIST                                                                                     │\n│ Gas Price: 1000 MIST                                                                                         │\n│ Gas Payment:                                                                                                 │\n│  ┌──                                                                                                         │\n│  │ ID: 0xc9b447fff18f13fa035e028534b8344d5fc8a8760248fad10155e78f44dc3a52                                    │\n│  │ Version: 2                                                                                                │\n│  │ Digest: 9MEH7kr1YkBDx7pdUPCDnVb3FtPz9UZVeWmCot5Dhxqr                                                      │\n│  └──                                                                                                         │\n│                                                                                                              │\n│ Transaction Kind: Programmable                                                                               │\n│ ╭──────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │\n│ │ Input Objects                                                                                            │ │\n│ ├──────────────────────────────────────────────────────────────────────────────────────────────────────────┤ │\n│ │ 0   Pure Arg: Type: address, Value: \"0x3d78abc33ccd173c521b4f9e78b21ea2c989960b631732c539efaa38bda30976\" │ │\n│ │ 1   Pure Arg: Type: u64, Value: \"500000000\"                                                              │ │\n│ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │\n│ ╭──────────────────────╮                                                                                     │\n│ │ Commands             │                                                                                     │\n│ ├──────────────────────┤                                                                                     │\n│ │ 0  SplitCoins:       │                                                                                     │\n│ │  ┌                   │                                                                                     │\n│ │  │ Coin: GasCoin     │                                                                                     │\n│ │  │ Amounts:          │                                                                                     │\n│ │  │   Input  1        │                                                                                     │\n│ │  └                   │                                                                                     │\n│ │                      │                                                                                     │\n│ │ 1  TransferObjects:  │                                                                                     │\n│ │  ┌                   │                                                                                     │\n│ │  │ Arguments:        │                                                                                     │\n│ │  │   Result 0        │                                                                                     │\n│ │  │ Address: Input  0 │                                                                                     │\n│ │  └                   │                                                                                     │\n│ ╰──────────────────────╯                                                                                     │\n│                                                                                                              │\n│ Signatures:                                                                                                  │\n│    eZc/iFO3i4Y8Le92zu9q75jILs+yg0sSXd1yPV9Dta+knH99VfkSCnzNQG1KbXSvY24wexmVtiuU6NkfudbiAQ==                  │\n│                                                                                                              │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n╭───────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Transaction Effects                                                                               │\n├───────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ Digest: AsWkciVhLHeCmqVipjjyAA7Hv5y87pFjHS59K8m4zBJV                                              │\n│ Status: Success                                                                                   │\n│ Executed Epoch: 0                                                                                 │\n│                                                                                                   │\n│ Created Objects:                                                                                  │\n│  ┌──                                                                                              │\n│  │ ID: 0xa031d3f8fd53b5f9885172e1c6bd8b770b25e42371c9ee215c6d4b21b2b73241                         │\n│  │ Owner: Account Address ( 0x3d78abc33ccd173c521b4f9e78b21ea2c989960b631732c539efaa38bda30976 )  │\n│  │ Version: 3                                                                                     │\n│  │ Digest: Fq3maqq3pShgKw58Ssm8cS2j1pspfhanedVK2MMxfQWQ                                           │\n```\n\n----------------------------------------\n\nTITLE: Processing Pending Stakes and Withdraws in Move\nDESCRIPTION: Processes pending stake deposits and withdrawals for all active validators in the validator set.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_49\n\nLANGUAGE: Move\nCODE:\n```\nfun process_pending_stakes_and_withdraws(validators: &mut vector<Validator>, ctx: &TxContext) {\n    validators.do_mut!(|v| v.process_pending_stakes_and_withdraws(ctx))\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Level 2 Book Status for Ask Side in DeepBook (Move)\nDESCRIPTION: This function returns the level 2 order depth for all valid prices within a specified price range on the ask side. It returns two vectors: one containing the valid prices and another containing the corresponding depths at those prices.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_40\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_level2_book_status_ask_side<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n    mut price_low: u64,\n    mut price_high: u64,\n    clock: &Clock\n): (vector<u64>, vector<u64>) {\n    let mut price_vec = vector::empty<u64>();\n    let mut depth_vec = vector::empty<u64>();\n    if (critbit::is_empty(&pool.asks)) { return (price_vec, depth_vec) };\n    let (price_low_, _) = critbit::min_leaf(&pool.asks);\n    // Price_high is less than the lowest leaf in the tree then we return an empty array\n    if (price_high < price_low_) {\n        return (price_vec, depth_vec)\n    };\n    if (price_low < price_low_) price_low = price_low_;\n    let (price_high_, _) = critbit::max_leaf(&pool.asks);\n    if (price_high > price_high_) price_high = price_high_;\n    price_low = critbit::find_closest_key(&pool.asks, price_low);\n    price_high = critbit::find_closest_key(&pool.asks, price_high);\n    while (price_low <= price_high) {\n        let depth = get_level2_book_status(\n            &pool.asks,\n            price_low,\n            clock::timestamp_ms(clock)\n        );\n        if (depth != 0) {\n            vector::push_back(&mut price_vec, price_low);\n            vector::push_back(&mut depth_vec, depth);\n        };\n        let (next_price, _) = critbit::next_leaf(&pool.asks, price_low);\n        if (next_price == 0) { break }\n        else { price_low = next_price };\n    };\n    (price_vec, depth_vec)\n}\n```\n\n----------------------------------------\n\nTITLE: Validating ASCII Character in Move\nDESCRIPTION: Checks if a byte represents a valid ASCII character. Returns true if the byte value is less than or equal to 0x7F (127).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_valid_char(b: u8): bool {\n    b <= 0x7F\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custodian Account in DeepBook Protocol (Move)\nDESCRIPTION: Creates a custodian account for a user to place limit orders on DeepBook. Returns an AccountCap object that authorizes access to the custodian account and its funds.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\n/// Parameters expected by this func\n///\n/// 0. `[ctx]` Information about the current transaction.\n\n/// Returns the AccountCap\npublic fun create_account(ctx: &mut TxContext): AccountCap {\n    mint_account_cap(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Available Wallets in a dApp\nDESCRIPTION: This snippet demonstrates how a dApp can query the available wallets installed in a user's browser using the getWallets function. The returned wallets can be used to display options to users and interact with wallet features.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/wallet-standard.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getWallets } from '@mysten/wallet-standard';\n\nconst availableWallets = getWallets().get();\n```\n\n----------------------------------------\n\nTITLE: Option Struct Definition in Move\nDESCRIPTION: Core structure definition that uses a vector of size 0 or 1 to represent an optional value, since Move does not support ADTs directly.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Option<Element> has copy, drop, store {\n    vec: vector<Element>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multisig Serialized Hash as Environment Variable in Sui\nDESCRIPTION: Sets a shell variable named MULTISIG_SERIALIZED with the multisignature serialized hash received from a previous multisig operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ MULTISIG_SERIALIZED=<MULTISIG-SERIALIZED-HASH>\n```\n\n----------------------------------------\n\nTITLE: User Open Orders Access Function\nDESCRIPTION: Function to access the open orders table for a specific user in a given pool. Returns a reference to a Table mapping addresses to LinkedTables of order IDs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun usr_open_orders<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n): &Table<address, LinkedTable<u64, u64>> {\n    &pool.usr_open_orders\n}\n```\n\n----------------------------------------\n\nTITLE: Swap Exact Quantity in Move\nDESCRIPTION: Core swap function that handles both base-to-quote and quote-to-base swaps. Requires either base or quote input to have zero value. Used internally by other swap functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/swaps.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun swap_exact_quantity(\n    self: &mut Pool,\n    ctx: &mut TxContext,\n    base_amount_in: u64,\n    quote_amount_in: u64,\n    base_quantity: Coin<BaseAsset>,\n    quote_quantity: Coin<QuoteAsset>,\n    deep_quantity: Coin<DEEP>,\n    _restriction: &GlobalRestriction,\n    clock: &Clock\n): (Coin<BaseAsset>, Coin<QuoteAsset>, Coin<DEEP>)\n```\n\n----------------------------------------\n\nTITLE: Implementing LockOwnedObjects Component\nDESCRIPTION: React component that fetches and displays objects owned by the connected wallet using Sui dApp Kit and infinite scroll functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCurrentAccount, useSuiClientInfiniteQuery } from \"@mysten/dapp-kit\";\nimport { SuiObjectDisplay } from \"@/components/SuiObjectDisplay\";\nimport { InfiniteScrollArea } from \"@/components/InfiniteScrollArea\";\n\nexport function LockOwnedObjects() {\n  const account = useCurrentAccount();\n\n  const { data, fetchNextPage, isFetchingNextPage, hasNextPage, refetch } =\n    useSuiClientInfiniteQuery(\n      \"getOwnedObjects\",\n      {\n        owner: account?.address!,\n        options: {\n          showDisplay: true,\n          showType: true,\n        },\n      },\n      {\n        enabled: !!account,\n        select: (data) =>\n          data.pages\n            .flatMap((page) => page.data)\n            .filter(\n              (x) => !!x.data?.display && !!x.data?.display?.data?.image_url,\n            ),\n      },\n    );\n\n  return (\n    <InfiniteScrollArea\n      loadMore={() => fetchNextPage()}\n      hasNextPage={hasNextPage}\n      loading={isFetchingNextPage}\n    >\n      {data?.map((obj) => (\n        <SuiObjectDisplay object={obj.data!}>\n        </SuiObjectDisplay>\n      ))}\n    </InfiniteScrollArea>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TestnetNFT Structure in Move\nDESCRIPTION: This snippet defines the structure of a TestnetNFT, which includes fields for id, name, description, and url. It demonstrates how NFT attributes are directly accessible as object fields in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nstruct TestnetNFT has key, store {\n    id: UID,\n    name: String,\n    description: String,\n    url: Url,\n}\n```\n\n----------------------------------------\n\nTITLE: Burning Token in Move\nDESCRIPTION: Burns a Token using the TreasuryCap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_35\n\nLANGUAGE: Move\nCODE:\n```\npublic fun burn<T>(cap: &mut TreasuryCap<T>, token: Token<T>) {\n    let Token { id, balance } = token;\n    cap.supply_mut().decrease_supply(balance);\n    id.delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Redeeming Fungible Staked SUI Tokens in Move\nDESCRIPTION: Function to redeem fungible staked SUI tokens for native SUI tokens. Handles exchange rate calculations, updates pool state, and distributes both principal and rewards.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun redeem_fungible_staked_sui(\n    pool: &mut StakingPool,\n    fungible_staked_sui: FungibleStakedSui,\n    ctx: &TxContext,\n): Balance<SUI> {\n    let FungibleStakedSui { id, pool_id, value } = fungible_staked_sui;\n    assert!(pool_id == object::id(pool), EWrongPool);\n    id.delete();\n    let latest_exchange_rate = pool.pool_token_exchange_rate_at_epoch(ctx.epoch());\n    let fungible_staked_sui_data: &mut FungibleStakedSuiData =\n        &mut pool.extra_fields[FungibleStakedSuiDataKey {}];\n    let (\n        principal_amount,\n        rewards_amount,\n    ) = latest_exchange_rate.calculate_fungible_staked_sui_withdraw_amount(\n        value,\n        fungible_staked_sui_data.principal.value(),\n        fungible_staked_sui_data.total_supply,\n    );\n    fungible_staked_sui_data.total_supply = fungible_staked_sui_data.total_supply - value;\n    let mut sui_out = fungible_staked_sui_data.principal.split(principal_amount);\n    sui_out.join(pool.rewards_pool.split(rewards_amount));\n    pool.pending_total_sui_withdraw = pool.pending_total_sui_withdraw + sui_out.value();\n    pool.pending_pool_token_withdraw = pool.pending_pool_token_withdraw + value;\n    sui_out\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring SUI Using pay-sui Command\nDESCRIPTION: Demonstrates how to transfer SUI tokens from one address to another using the pay-sui command, which doesn't require a separate gas coin. The command specifies recipient, input coin, amount, and gas budget.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client pay-sui --recipients eloquent-amber --input-coins 0xc9b447fff18f13fa035e028534b8344d5fc8a8760248fad10155e78f44dc3a52 --amounts 500000000 --gas-budget 5000000\n```\n\n----------------------------------------\n\nTITLE: Implementing Escrow Creation Mutation in TypeScript\nDESCRIPTION: This snippet defines a custom hook 'useCreateEscrowMutation' that builds and executes a Programmable Transaction Block (PTB) to create an escrow on the Sui blockchain. It uses the Sui SDK and React Query for transaction handling.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CONSTANTS } from \"@/constants\";\nimport { useTransactionExecution } from \"@/hooks/useTransactionExecution\";\nimport { ApiLockedObject } from \"@/types/types\";\nimport { useCurrentAccount } from \"@mysten/dapp-kit\";\nimport { SuiObjectData } from \"@mysten/sui/client\";\nimport { Transaction } from \"@mysten/sui/transactions\";\nimport { useMutation } from \"@tanstack/react-query\";\n\n/**\n * Builds and executes the PTB to create an escrow.\n */\nexport function useCreateEscrowMutation() {\n  const currentAccount = useCurrentAccount();\n  const executeTransaction = useTransactionExecution();\n\n  return useMutation({\n    mutationFn: async ({\n      object,\n      locked,\n    }: {\n      object: SuiObjectData;\n      locked: ApiLockedObject;\n    }) => {\n      if (!currentAccount?.address)\n        throw new Error(\"You need to connect your wallet!\");\n\n      const txb = new Transaction();\n      txb.moveCall({\n        target: `${CONSTANTS.escrowContract.packageId}::shared::create`,\n        arguments: [\n          txb.object(object.objectId!),\n          txb.pure.id(locked.keyId),\n          txb.pure.address(locked.creator!),\n        ],\n        typeArguments: [object.type!],\n      });\n\n      return executeTransaction(txb);\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bridge Record Struct in Move\nDESCRIPTION: Defines the BridgeRecord struct used to store information about token transfers in the bridge.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct BridgeRecord has store {\n```\n\n----------------------------------------\n\nTITLE: Mutable Item Borrowing in Sui Kiosk\nDESCRIPTION: Function to mutably borrow an unlisted item from the Kiosk. Includes checks for ownership, item existence and listing status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_47\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow_mut<T: key + store>(self: &mut Kiosk, cap: &KioskOwnerCap, id: ID): &mut T {\n    assert!(self.has_access(cap), ENotOwner);\n    assert!(self.has_item(id), EItemNotFound);\n    assert!(!self.is_listed(id), EItemIsListed);\n    dof::borrow_mut(&mut self.id, Item { id })\n}\n```\n\n----------------------------------------\n\nTITLE: Commit Package Upgrade in Sui Move\nDESCRIPTION: This Move function commits a package upgrade by consuming an UpgradeReceipt and updating the UpgradeCap. It takes an UpgradeCap and an UpgradeReceipt as input, and updates the UpgradeCap with the new package's information. It's part of the Sui framework's basic implementation for upgrade commitment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule sui::package {\n    /// Commits an upgrade to a new version\n    public fun commit_upgrade(\n        cap: &mut UpgradeCap, _receipt: UpgradeReceipt\n    ) {\n        assert!(cap.is_upgrading, ENotUpgrading);\n        cap.is_upgrading = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Coin Metadata in Move\nDESCRIPTION: Functions for updating various metadata fields of a coin, including name, symbol, description, and icon URL.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_33\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_name<T>(\n    _treasury: &TreasuryCap<T>,\n    metadata: &mut CoinMetadata<T>,\n    name: string::String,\n) {\n    metadata.name = name;\n}\n\npublic entry fun update_symbol<T>(\n    _treasury: &TreasuryCap<T>,\n    metadata: &mut CoinMetadata<T>,\n    symbol: ascii::String,\n) {\n    metadata.symbol = symbol;\n}\n\npublic entry fun update_description<T>(\n    _treasury: &TreasuryCap<T>,\n    metadata: &mut CoinMetadata<T>,\n    description: string::String,\n) {\n    metadata.description = description;\n}\n\npublic entry fun update_icon_url<T>(\n    _treasury: &TreasuryCap<T>,\n    metadata: &mut CoinMetadata<T>,\n    url: ascii::String,\n) {\n    metadata.icon_url = option::some(url::new_unsafe(url));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KioskOwnerCap Struct in Move\nDESCRIPTION: This code defines the KioskOwnerCap struct, which represents a capability granting the bearer rights to manage items in a Kiosk, including placing, taking, and listing items.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic struct KioskOwnerCap has key, store {\n    id: sui::object::UID,\n    for: sui::object::ID\n}\n```\n\n----------------------------------------\n\nTITLE: Dividing Coin into Multiple Equal Parts in Move\nDESCRIPTION: Splits a Coin into n-1 new Coins with equal balances, leaving the remainder in the original Coin. This function returns a vector of newly created Coins.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_into_n<T>(self: &mut Coin<T>, n: u64, ctx: &mut TxContext): vector<Coin<T>> {\n    assert!(n > 0, EInvalidArg);\n    assert!(n <= value(self), ENotEnough);\n    let mut vec = vector[];\n    let mut i = 0;\n    let split_amount = value(self) / n;\n    while (i < n - 1) {\n        vec.push_back(self.split(split_amount, ctx));\n        i = i + 1;\n    };\n    vec\n}\n```\n\n----------------------------------------\n\nTITLE: Escrow Object Structure Definition\nDESCRIPTION: Definition of the Escrow object structure holding the escrowed object, sender, recipient, and key information for trading.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nstruct Escrow<T: key + store, U: key + store> has key {\n    id: UID,\n    escrowed: T,\n    sender: address,\n    recipient: address,\n    key_id: ID,\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Orders in DeepBook CLOB (Move)\nDESCRIPTION: Function for canceling an open order in the order book. It validates the order ownership, removes the order from the price level and user's open orders, unlocks the previously locked balance, and emits a cancellation event.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_22\n\nLANGUAGE: move\nCODE:\n```\npublic fun cancel_order<BaseAsset, QuoteAsset>(\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    order_id: u64,\n    account_cap: &AccountCap\n) {\n    // First check the highest bit of the order id to see whether it's bid or ask.\n    // Then retrieve the price using the order id.\n    // Using the price to retrieve the corresponding PriceLevel from the bids / asks Critbit Tree.\n    // Retrieve and remove the order from open orders of the PriceLevel.\n    let user = object::id(account_cap);\n    assert!(contains(&pool.usr_open_orders, user), EInvalidUser);\n    let usr_open_orders = borrow_mut(&mut pool.usr_open_orders, user);\n    assert!(linked_table::contains(usr_open_orders, order_id), EInvalidOrderId);\n    let tick_price = *linked_table::borrow(usr_open_orders, order_id);\n    let is_bid = order_is_bid(order_id);\n    let (tick_exists, tick_index) = find_leaf(\n        if (is_bid) { &pool.bids } else { &pool.asks },\n        tick_price);\n    assert!(tick_exists, EInvalidOrderId);\n    let order = remove_order(\n        if (is_bid) { &mut pool.bids } else { &mut pool.asks },\n        usr_open_orders,\n        tick_index,\n        order_id,\n        user\n    );\n    if (is_bid) {\n        let balance_locked = clob_math::mul(order.quantity, order.price);\n        custodian::unlock_balance(&mut pool.quote_custodian, user, balance_locked);\n    } else {\n        custodian::unlock_balance(&mut pool.base_custodian, user, order.quantity);\n    };\n    emit_order_canceled<BaseAsset, QuoteAsset>(*object::uid_as_inner(&pool.id), &order);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants SUI Module\nDESCRIPTION: This block defines various constants related to the SUI token such as ERROR codes and unit measures. 'EAlreadyMinted' and 'ENotSystemAddress' are error codes while 'MIST_PER_SUI', 'TOTAL_SUPPLY_SUI', and 'TOTAL_SUPPLY_MIST' define unit and supply-related values of the SUI token.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/sui.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nconst EAlreadyMinted: u64 = 0;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst ENotSystemAddress: u64 = 1;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst MIST_PER_SUI: u64 = 1000000000;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst TOTAL_SUPPLY_SUI: u64 = 10000000000;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst TOTAL_SUPPLY_MIST: u64 = 10000000000000000000;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Coin Metadata in Move\nDESCRIPTION: Functions to get various metadata fields from a CoinMetadata object, including decimals, name, symbol, description, and icon URL.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_34\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_decimals<T>(metadata: &CoinMetadata<T>): u8 {\n    metadata.decimals\n}\n\npublic fun get_name<T>(metadata: &CoinMetadata<T>): string::String {\n    metadata.name\n}\n\npublic fun get_symbol<T>(metadata: &CoinMetadata<T>): ascii::String {\n    metadata.symbol\n}\n\npublic fun get_description<T>(metadata: &CoinMetadata<T>): string::String {\n    metadata.description\n}\n\npublic fun get_icon_url<T>(metadata: &CoinMetadata<T>): Option<Url> {\n    metadata.icon_url\n}\n```\n\n----------------------------------------\n\nTITLE: Swap Exact Base for Quote in Move\nDESCRIPTION: Swaps an exact base asset quantity for quote assets without requiring a balance manager. Returns BaseAsset, QuoteAsset, and DEEP tokens. Handles cases where input quantity isn't divisible by lot size.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/swaps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic fun swap_exact_base_for_quote(\n    self: &mut Pool,\n    ctx: &mut TxContext,\n    base_amount_in: u64,\n    base_quantity: Coin<BaseAsset>,\n    deep_quantity: Coin<DEEP>,\n    _restriction: &GlobalRestriction,\n    clock: &Clock\n): (Coin<BaseAsset>, Coin<QuoteAsset>, Coin<DEEP>)\n```\n\n----------------------------------------\n\nTITLE: Defining Rental Promise Struct in Move\nDESCRIPTION: Hot potato struct for borrowing by value, containing rental details and can only be resolved by returning the item.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic struct Promise {\n  item: Rented,\n  duration: u64,\n  start_date: u64,\n  price_per_day: u64,\n  renter_kiosk: address,\n  borrower_kiosk: ID\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Purchase Cap in Sui Kiosk (Move)\nDESCRIPTION: This function returns the PurchaseCap without making a purchase. It removes an active offer and allows the item for taking. The cap can only be returned to its original Kiosk.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_27\n\nLANGUAGE: Move\nCODE:\n```\npublic fun return_purchase_cap<T: key + store>(self: &mut Kiosk, purchase_cap: PurchaseCap<T>) {\n    let PurchaseCap { id, item_id, kiosk_id, min_price: _ } = purchase_cap;\n    assert!(object::id(self) == kiosk_id, EWrongKiosk);\n    df::remove<Listing, u64>(&mut self.id, Listing { id: item_id, is_exclusive: true });\n    id.delete()\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Reverse Function\nDESCRIPTION: Reverses the order of elements in a vector in place\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun reverse<Element>(v: &mut vector<Element>) {\n    let len = v.length();\n    if (len == 0) return ();\n    let mut front_index = 0;\n    let mut back_index = len - 1;\n    while (front_index < back_index) {\n        v.swap(front_index, back_index);\n        front_index = front_index + 1;\n        back_index = back_index - 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens in Sui Token Module\nDESCRIPTION: Transfers a Token to a recipient address. It creates an ActionRequest for the \"transfer\" action, which contains the recipient field for verification purposes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\npublic fun transfer<T>(t: Token<T>, recipient: address, ctx: &mut TxContext): ActionRequest<T> {\n    let amount = t.balance.value();\n    transfer::transfer(t, recipient);\n    new_request(\n        transfer_action(),\n        amount,\n        option::some(recipient),\n        option::none(),\n        ctx,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up ALICE's Transaction in Escrow Test\nDESCRIPTION: Transaction simulation where ALICE creates a coin, locks it, and sets up an escrow for BOB's asset. This demonstrates how to create an escrow with reference to another user's asset.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\n// Alice comes along and sets up escrow, locking their coin\ntest_scenario::next_tx(&mut scenario, ALICE);\n{\n    let ctx = test_scenario::ctx(&mut scenario);\n    let coin = test_coin(200, ctx);\n    let (locked, key) = lock::lock(coin, ctx);\n    let ik1 = object::id(&key);\n    let io1 = object::id(&locked);\n    let escrow = create(locked, key, BOB, ik2, ctx);\n    transfer::public_share_object(escrow);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Object Function in Move\nDESCRIPTION: Defines a function 'new' to create a new instance of the 'Object' struct with specified scarcity and style. It utilizes 'TxContext' for transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/wrapped.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun new(scarcity: u8, style: u8, ctx: &mut TxContext): Object {\n    Object { id: object::new(ctx), scarcity, style }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pool Structure in Move\nDESCRIPTION: Defines the core Pool structure that manages trading pairs, order books, and custodian information. Uses crit-bit trees for storing bid and ask orders with fee rate tracking and size configurations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/design.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nstruct Pool<phantom BaseAsset, phantom QuoteAsset> has key {\n    id: UID,\n    bids: CritbitTree<TickLevel>,\n    asks: CritbitTree<TickLevel>,\n    next_bid_order_id: u64,\n    next_ask_order_id: u64,\n    usr_open_orders: Table<ID, Table<u64, Order>>,\n    taker_fee_rate: u64,\n    maker_rebate_rate: u64,\n    tick_size: u64,\n    lot_size: u64,\n    base_custodian: Custodian<BaseAsset>,\n    quote_custodian: Custodian<QuoteAsset>,\n}\n```\n\n----------------------------------------\n\nTITLE: Converting VecMap to Keys and Values Vectors in Move\nDESCRIPTION: Unpacks a VecMap into separate vectors for keys and values. The output maintains insertion order, not sorted by key. Reverses the internal vector to preserve original insertion order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\npublic fun into_keys_values<K: copy, V>(self: VecMap<K, V>): (vector<K>, vector<V>) {\n    let VecMap { mut contents } = self;\n    // reverse the vector so the output keys and values will appear in insertion order\n    contents.reverse();\n    let mut i = 0;\n    let n = contents.length();\n    let mut keys = vector[];\n    let mut values = vector[];\n    while (i < n) {\n        let Entry { key, value } = contents.pop_back();\n        keys.push_back(key);\n        values.push_back(value);\n        i = i + 1;\n    };\n    contents.destroy_empty();\n    (keys, values)\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Logging Values\nDESCRIPTION: This command sends a request to the Sui node to change the logging level to 'info'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ curl localhost:1337/logging -d \"info\"\n```\n\n----------------------------------------\n\nTITLE: Sui Module Interaction Flow\nDESCRIPTION: Mermaid flowchart illustrating the interaction flow between Sui client and the my_module package.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/publish.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    my_module[\"my_module::new_sword(&Forge, strength, magic)\"]\n    \n    Sui_client[\"Sui client\"]\n\n    subgraph Sui Blockchain\n\tmy_module\n\tmy_module --Sword--> address\n    end\n    \n    Sui_client --\"PTB\"--> my_module\n```\n\n----------------------------------------\n\nTITLE: Mutably Borrowing Values from a Bag in Move\nDESCRIPTION: This function mutably borrows a value from a Bag given its key. It aborts if the key doesn't exist or if the value type doesn't match.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bag.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow_mut<K: copy + drop + store, V: store>(bag: &mut Bag, k: K): &mut V {\n    field::borrow_mut(&mut bag.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Depositing Quote Asset to Pool\nDESCRIPTION: Function to deposit quote asset into a liquidity pool using an account capability. Currently aborts with error code 1337.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deposit_quote<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _coin: Coin<QuoteAsset>,\n    _account_cap: &AccountCap\n) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Peeling Vector of u8 from BCS in Move\nDESCRIPTION: Deserializes a vector of u8 (e.g., a string) from BCS format. It uses the BCS struct's peel_vec method with a closure that peels individual u8 values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun peel_vec_u8(bcs: &mut BCS): vector<u8> {\n    bcs.peel_vec!(|bcs| bcs.peel_u8())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Address to Deny List - TypeScript Implementation\nDESCRIPTION: TypeScript code for adding an address to a regulated coin's deny list using the Sui SDK. Requires deny list object ID, deny cap ID, and coin type parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/coin.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = new Transaction();\n\ntx.moveCall({\n    target: `0x2::coin::deny_list_v2_add`,\n    arguments: [\n        tx.object(<SUI-DENY-LIST-OBJECT-ID>),\n        tx.object(<DENY-CAP-ID>),\n        tx.pure.address(options.address),\n    ],\n    typeArguments: [<COIN-TYPE>],\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling Individual Orders in CLOB V2\nDESCRIPTION: Function to cancel an open order in the DeepBook CLOB system. Validates order ownership, unlocks locked balances, and handles both bid and ask orders. Requires a valid order ID and account capability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_31\n\nLANGUAGE: Move\nCODE:\n```\npublic fun cancel_order<BaseAsset, QuoteAsset>(\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    order_id: u64,\n    account_cap: &AccountCap\n) {\n    let owner = account_owner(account_cap);\n    assert!(contains(&pool.usr_open_orders, owner), EInvalidUser);\n    let usr_open_orders = borrow_mut(&mut pool.usr_open_orders, owner);\n    assert!(linked_table::contains(usr_open_orders, order_id), EInvalidOrderId);\n    let tick_price = *linked_table::borrow(usr_open_orders, order_id);\n    let is_bid = order_is_bid(order_id);\n    let (tick_exists, tick_index) = find_leaf(\n        if (is_bid) { &pool.bids } else { &pool.asks },\n        tick_price);\n    assert!(tick_exists, EInvalidOrderId);\n    let order = remove_order(\n        if (is_bid) { &mut pool.bids } else { &mut pool.asks },\n        usr_open_orders,\n        tick_index,\n        order_id,\n        owner\n    );\n    if (is_bid) {\n        let (_, balance_locked) = clob_math::unsafe_mul_round(order.quantity, order.price);\n        custodian::unlock_balance(&mut pool.quote_custodian, owner, balance_locked);\n    } else {\n        custodian::unlock_balance(&mut pool.base_custodian, owner, order.quantity);\n    };\n    emit_order_canceled<BaseAsset, QuoteAsset>(*object::uid_as_inner(&pool.id), &order);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Renting with Minted Objects - Move\nDESCRIPTION: The 'setup_renting' function mints a 'ProtectedTP' and 'RentalPolicy' object, allowing publishers of a specified type to initialize policies and share them securely.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\npublic fun setup_renting<T>(publisher: &Publisher, amount_bp: u64, ctx: &mut TxContext) {\n  // Creates an empty TP and shares a ProtectedTP<T> object.\n  // This can be used to bypass the lock rule under specific conditions.\n  // Storing inside the cap the ProtectedTP with no way to access it\n  // as we do not want to modify this policy\n  let (transfer_policy, policy_cap) = transfer_policy::new<T>(publisher, ctx);\n\n  let protected_tp = ProtectedTP {\n    id: object::new(ctx),\n    transfer_policy,\n    policy_cap,\n  };\n\n  let rental_policy = RentalPolicy<T> {\n    id: object::new(ctx),\n    balance: balance::zero<SUI>(),\n    amount_bp,\n  };\n\n  transfer::share_object(protected_tp);\n  transfer::share_object(rental_policy);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ticker Information Example in DeepBook API\nDESCRIPTION: Provides an example response for the ticker endpoint, showing data for multiple trading pairs including volume, price, and activity status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"DEEP_USDC\": {\n\t\t\"last_price\": 0.07055,\n\t\t\"base_volume\": 43760440.0,\n\t\t\"quote_volume\": 3096546.9161,\n\t\t\"isFrozen\": 0\n\t},\n\t\"NS_SUI\": {\n\t\t\"last_price\": 0.08323,\n\t\t\"base_volume\": 280820.8,\n\t\t\"quote_volume\": 23636.83837,\n\t\t\"isFrozen\": 0\n\t},\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Elements to a Vector in Move\nDESCRIPTION: This function pushes all elements from one vector into another. It takes a mutable reference to the destination vector and consumes the source vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun append<Element>(lhs: &mut vector<Element>, other: vector<Element>) {\n    other.do!(|e| lhs.push_back(e));\n}\n```\n\n----------------------------------------\n\nTITLE: Deny List Management - TypeScript Implementation\nDESCRIPTION: TypeScript functions for managing the deny list of regulated coins, including adding and removing addresses from the list using the Sui coin module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin/regulated.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndenyListAdd: async (addresses: string[]) => {\n    const ptb = new TransactionBlock();\n    ptb.moveCall({\n      target: \"0x2::coin::deny_list_v2_add\",\n      arguments: [\n        ptb.object(\"0x403\"),\n        ptb.object(DENY_CAP_ID),\n        ptb.pure(addresses),\n      ],\n    });\n    return await signAndExecuteTransactionBlock(ptb);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Digest\nDESCRIPTION: Returns the transaction digest (hash of transaction inputs), with a note not to use it as a source of randomness.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/tx_context.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun digest(self: &TxContext): &vector<u8> {\n    &self.tx_hash\n}\n```\n\n----------------------------------------\n\nTITLE: Function Calling Examples\nDESCRIPTION: Shows different ways to call functions, including with aliases and fully qualified names.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_15\n\nLANGUAGE: move\nCODE:\n```\nmodule a::example {\n    public fun zero(): u64 { 0 }\n}\n\nmodule b::other {\n    use a::example::{Self, zero};\n    fun call_zero() {\n        // With the `use` above all of these calls are equivalent\n        a::example::zero();\n        example::zero();\n        zero();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing divide_u64 Function\nDESCRIPTION: Divides a u64 integer by a fixed-point number, handling division by zero checks and proper scaling of the result.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/fixed_point32.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun divide_u64(val: u64, divisor: FixedPoint32): u64 {\n    assert!(divisor.value != 0, EDIVISION_BY_ZERO);\n    let scaled_value = val as u128 << 32;\n    let quotient = scaled_value / (divisor.value as u128);\n    assert!(quotient <= MAX_U64, EDIVISION);\n    quotient as u64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ID Struct in Move\nDESCRIPTION: Struct definition for object ID that can be copied and dropped. Used to reference Sui Objects but not guaranteed to be globally unique.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct ID has copy, drop, store {\n    bytes: address\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Element into Priority Queue in Move\nDESCRIPTION: Function to insert a new element into the priority queue. It adds the new element at the end of the vector and then restores the heap property by moving it up the tree as needed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/priority_queue.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun insert<T: drop>(pq: &mut PriorityQueue<T>, priority: u64, value: T) {\n    pq.entries.push_back(Entry { priority, value });\n    let index = pq.entries.length() - 1;\n    restore_heap_recursive(&mut pq.entries, index);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Market Price from CLOB Pool (Move)\nDESCRIPTION: Queries the current market price of an order book in a CLOB pool. Returns a tuple containing the best bid price and best ask price as u64 values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_28\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_market_price<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>\n): (u64, u64){\n    let (bid_price, _) = critbit::max_leaf(&pool.bids);\n    let (ask_price, _) = critbit::min_leaf(&pool.asks);\n    return (bid_price, ask_price)\n}\n```\n\n----------------------------------------\n\nTITLE: Approving Token Transfer (Move)\nDESCRIPTION: The `approve_token_transfer` function handles the verification and approval of a token transfer message. It checks for valid signatures, message type, and version before storing the approval in the bridge records. It requires a bridge reference, bridge message, and signatures for verification. This function ensures that transfer requests are genuine and appropriately authorized.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun approve_token_transfer(\n    bridge: &mut Bridge,\n    message: BridgeMessage,\n    signatures: vector<vector<u8>>,\n) {\n    let inner = load_inner_mut(bridge);\n    assert!(!inner.paused, EBridgeUnavailable);\n    inner.committee.verify_signatures(message, signatures);\n    assert!(message.message_type() == message_types::token(), EMustBeTokenMessage);\n    assert!(message.message_version() == MESSAGE_VERSION, EUnexpectedMessageVersion);\n    let token_payload = message.extract_token_bridge_payload();\n    let target_chain = token_payload.token_target_chain();\n    assert!(\n        message.source_chain() == inner.chain_id || target_chain == inner.chain_id,\n        EUnexpectedChainID,\n    );\n    let message_key = message.key();\n    if (message.source_chain() == inner.chain_id) {\n        let record = &mut inner.token_transfer_records[message_key];\n        assert!(record.message == message, EMalformedMessageError);\n        assert!(!record.claimed, EInvariantSuiInitializedTokenTransferShouldNotBeClaimed);\n        if (record.verified_signatures.is_some()) {\n            emit(TokenTransferAlreadyApproved { message_key });\n            return\n        };\n        record.verified_signatures = option::some(signatures)\n    } else {\n        if (inner.token_transfer_records.contains(message_key)) {\n            emit(TokenTransferAlreadyApproved { message_key });\n            return\n        };\n        inner.token_transfer_records.push_back(\n            message_key,\n            BridgeRecord {\n                message,\n                verified_signatures: option::some(signatures),\n                claimed: false\n            },\n        );\n    };\n    emit(TokenTransferApproved { message_key });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vector for Move Call in Sui Transaction\nDESCRIPTION: This snippet illustrates how to create a vector of objects that can be passed into a Move call. This is necessary when you need to define a vector as an input for a Move function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntx.makeMoveVec({ elements: [tx.object(id1), tx.object(id2)] })\n```\n\n----------------------------------------\n\nTITLE: Collection Interaction Methods in Sui Move\nDESCRIPTION: Standard CRUD operations for table and bag collections, supporting adding, borrowing, mutating, and removing entries\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/dynamic-fields/tables-bags.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun add<K: copy + drop + store, V: store>(\n    table: &mut Table<K, V>,\n    k: K,\n    v: V,\n);\n\npublic fun borrow<K: copy + drop + store, V: store>(\n    table: &Table<K, V>,\n    k: K\n): &V;\n\npublic fun borrow_mut<K: copy + drop + store, V: store>(\n    table: &mut Table<K, V>,\n    k: K\n): &mut V;\n\npublic fun remove<K: copy + drop + store, V: store>(\n    table: &mut Table<K, V>,\n    k: K,\n): V;\n```\n\n----------------------------------------\n\nTITLE: List Open Orders Implementation in Move\nDESCRIPTION: Function to retrieve all open orders for a given account in a trading pool. Takes a pool reference and account capability as input and returns a vector of Order objects containing order details including ID, price, quantity and status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_36\n\nLANGUAGE: Move\nCODE:\n```\npublic fun list_open_orders<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n    account_cap: &AccountCap\n): vector<Order> {\n    let owner = account_owner(account_cap);\n    let mut open_orders = vector::empty<Order>();\n    if (!usr_open_orders_exist(pool, owner)) {\n        return open_orders\n    };\n    let usr_open_order_ids = table::borrow(&pool.usr_open_orders, owner);\n    let mut order_id = linked_table::front(usr_open_order_ids);\n    while (!option::is_none(order_id)) {\n        let order_price = *linked_table::borrow(usr_open_order_ids, *option::borrow(order_id));\n        let tick_level =\n            if (order_is_bid(*option::borrow(order_id))) borrow_leaf_by_key(&pool.bids, order_price)\n            else borrow_leaf_by_key(&pool.asks, order_price);\n        let order = linked_table::borrow(&tick_level.open_orders, *option::borrow(order_id));\n        vector::push_back(&mut open_orders, Order {\n            order_id: order.order_id,\n            client_order_id: order.client_order_id,\n            price: order.price,\n            original_quantity: order.original_quantity,\n            quantity: order.quantity,\n            is_bid: order.is_bid,\n            owner: order.owner,\n            expire_timestamp: order.expire_timestamp,\n            self_matching_prevention: order.self_matching_prevention\n        });\n        order_id = linked_table::next(usr_open_order_ids, *option::borrow(order_id));\n    };\n    open_orders\n}\n```\n\n----------------------------------------\n\nTITLE: Decompressing a Secp256k1 Public Key in Move\nDESCRIPTION: Native function that converts a 33-byte compressed public key (with 0x02 or 0x03 prefix) to a 65-byte uncompressed public key. Will abort if the input is not a valid compressed public key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/ecdsa_k1.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic native fun decompress_pubkey(pubkey: &vector<u8>): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance in CLOB Pool (Move)\nDESCRIPTION: Retrieves the available and locked balances for both base and quote assets for a given account in a CLOB pool. Takes a Pool object and AccountCap as inputs and returns a tuple of 4 u64 values representing the balances.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_27\n\nLANGUAGE: Move\nCODE:\n```\npublic fun account_balance<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n    account_cap: &AccountCap\n): (u64, u64, u64, u64) {\n    let user = object::id(account_cap);\n    let (base_avail, base_locked) = custodian::account_balance(&pool.base_custodian, user);\n    let (quote_avail, quote_locked) = custodian::account_balance(&pool.quote_custodian, user);\n    (base_avail, base_locked, quote_avail, quote_locked)\n}\n```\n\n----------------------------------------\n\nTITLE: Minting TestnetNFT to Sender in Move\nDESCRIPTION: This function mints a new TestnetNFT and transfers it to the caller's address. It demonstrates how NFTs can be created and transferred in a single operation on Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun mint_to_sender(\n    name: vector<u8>,\n    description: vector<u8>,\n    url: vector<u8>,\n    ctx: &mut TxContext\n) {\n    let nft = TestnetNFT {\n        id: object::new(ctx),\n        name: string::utf8(name),\n        description: string::utf8(description),\n        url: url::new_unsafe_from_bytes(url)\n    };\n    transfer::public_transfer(nft, tx_context::sender(ctx))\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Conditional 'drop' Ability in Move\nDESCRIPTION: This snippet shows how the 'drop' ability is conditionally applied to generic types. It includes examples of valid and invalid uses of the 'drop' ability with different struct definitions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abilities.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic struct NoAbilities {}\npublic struct S has copy, drop { f: bool }\npublic struct Cup<T> has copy, drop, store { item: T }\n\nfun unused() {\n    Cup<bool> { item: true }; // Valid, 'Cup<bool>' has 'drop'\n    Cup<S> { item: S { f: false }}; // Valid, 'Cup<S>' has 'drop'\n}\n\nfun left_in_local(c_account: Cup<signer>): u64 {\n    let c_b = Cup<bool> { item: true };\n    let c_s = Cup<S> { item: S { f: false }};\n    // Valid return: 'c_account', 'c_b', and 'c_s' have values\n    // but 'Cup<signer>', 'Cup<bool>', and 'Cup<S>' have 'drop'\n    0\n}\n\nfun invalid_unused() {\n    // Invalid, Cannot ignore 'Cup<NoAbilities>' because it does not have 'drop'.\n    // Even though 'Cup' was declared with 'drop', the instance does not have 'drop'\n    // because 'NoAbilities' does not have 'drop'\n    Cup<NoAbilities> { item: NoAbilities {} };\n}\n\nfun invalid_left_in_local(): u64 {\n    let n = Cup<NoAbilities> { item: NoAbilities {} };\n    // Invalid return: 'c_n' has a value\n    // and 'Cup<NoAbilities>' does not have 'drop'\n    0\n}\n```\n\n----------------------------------------\n\nTITLE: Order Struct Definition\nDESCRIPTION: Core Order struct definition which represents a limit order in the order book. Contains essential order data including price, quantity, ownership, and expiration time.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic struct Order has drop, store {\n    order_id: u64,\n    price: u64,\n    quantity: u64,\n    is_bid: bool,\n    owner: sui::object::ID,\n    expire_timestamp: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Get Order Status Implementation\nDESCRIPTION: Retrieves the status of an order from the pool by checking user open orders and the order book. Validates the order owner and order ID before returning the order details.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_42\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_order_status<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n    order_id: u64,\n    account_cap: &AccountCap\n): &Order {\n    let owner = account_owner(account_cap);\n    assert!(table::contains(&pool.usr_open_orders, owner), EInvalidUser);\n    let usr_open_order_ids = table::borrow(&pool.usr_open_orders, owner);\n    assert!(linked_table::contains(usr_open_order_ids, order_id), EInvalidOrderId);\n    let order_price = *linked_table::borrow(usr_open_order_ids, order_id);\n    let open_orders =\n        if (order_id < MIN_ASK_ORDER_ID) { &pool.bids }\n        else { &pool.asks };\n    let tick_level = critbit::borrow_leaf_by_key(open_orders, order_price);\n    let tick_open_orders = &tick_level.open_orders;\n    let order = linked_table::borrow(tick_open_orders, order_id);\n    order\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default Kiosk in Sui\nDESCRIPTION: Creates a new Kiosk with default configuration where the sender receives the KioskOwnerCap and becomes the owner, and the Kiosk is shared as a public object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\nentry fun default(ctx: &mut TxContext) {\n    let (kiosk, cap) = new(ctx);\n    sui::transfer::transfer(cap, ctx.sender());\n    sui::transfer::share_object(kiosk);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Locked Component with Unlock Functionality\nDESCRIPTION: This component is responsible for rendering the ApiLockedObject and handling the unlock functionality. It uses the useUnlockMutation hook to perform the unlock action and displays object information with controls based on ownership.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_34\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useCurrentAccount, useSuiClientQuery } from \"@mysten/dapp-kit\";\nimport { SuiObjectDisplay } from \"@/components/SuiObjectDisplay\";\nimport { Button } from \"@radix-ui/themes\";\nimport {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  LockOpen1Icon,\n} from \"@radix-ui/react-icons\";\nimport { ExplorerLink } from \"../../ExplorerLink\";\nimport { useState } from \"react\";\nimport { ApiLockedObject } from \"@/types/types\";\nimport { useUnlockMutation } from \"@/mutations/locked\";\n\n/**\n * Prefer to use the `Locked` component only through `LockedObject`.\n *\n * This can also render data directly from the API, but we prefer\n * to also validate ownership from on-chain state (as objects are transferrable)\n * and the API cannot track all the ownership changes.\n */\nexport function Locked({\n  locked,\n  hideControls,\n}: {\n  locked: ApiLockedObject;\n  hideControls?: boolean;\n}) {\n  const [isToggled, setIsToggled] = useState(false);\n  const account = useCurrentAccount();\n  const { mutate: unlockMutation, isPending } = useUnlockMutation();\n\n  const suiObject = useSuiClientQuery(\n    \"getObject\",\n    {\n      id: locked.itemId,\n      options: {\n        showDisplay: true,\n        showType: true,\n        showOwner: true,\n      },\n    },\n    {\n      select: (data) => data.data,\n    },\n  );\n\n  const isOwner = () => {\n    return !!locked.creator && account?.address === locked.creator;\n  };\n\n  const getLabel = () => {\n    if (locked.deleted) return \"Deleted\";\n    if (hideControls) {\n      if (locked.creator === account?.address) return \"You offer this\";\n      return \"You'll receive this if accepted\";\n    }\n    return undefined;\n  };\n\n  const getLabelClasses = () => {\n    if (locked.deleted)\n      return \"bg-red-50 rounded px-3 py-1 text-sm text-red-500\";\n    if (hideControls) {\n      if (!!locked.creator && locked.creator === account?.address)\n        return \"bg-blue-50 rounded px-3 py-1 text-sm text-blue-500\";\n      return \"bg-green-50 rounded px-3 py-1 text-sm text-green-700\";\n    }\n    return undefined;\n  };\n\n  return (\n    <SuiObjectDisplay\n      object={suiObject.data!}\n      label={getLabel()}\n      labelClasses={getLabelClasses()}\n    >\n      <div className=\"p-4 pt-1 text-right flex flex-wrap items-center justify-between\">\n        {\n          <p className=\"text-sm flex-shrink-0 flex items-center gap-2\">\n            <ExplorerLink id={locked.objectId} isAddress={false} />\n          </p>\n        }\n        {!hideControls && isOwner() && (\n          <Button\n            className=\"ml-auto cursor-pointer\"\n            disabled={isPending}\n            onClick={() => {\n              unlockMutation({\n                lockedId: locked.objectId,\n                keyId: locked.keyId,\n                suiObject: suiObject.data!,\n              });\n            }}\n          >\n            <LockOpen1Icon /> Unlock\n          </Button>\n        )}\n      </div>\n    </SuiObjectDisplay>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting to Withdraw Stake from Staking Pool - Move\nDESCRIPTION: This function allows users to request a withdrawal of their staked amount along with any earned rewards from a staking pool. It checks the stake's activation status and processes the withdrawal appropriately.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun request_withdraw_stake(\n    pool: &mut sui_system::staking_pool::StakingPool,\n    staked_sui: StakedSui,\n    ctx: &TxContext,\n): Balance<SUI> {\n    // stake is inactive\n    if (staked_sui.stake_activation_epoch > ctx.epoch()) {\n        let principal = staked_sui.into_balance();\n        pool.pending_stake = pool.pending_stake - principal.value();\n        return principal;\n    };\n    let (pool_token_withdraw_amount, mut principal_withdraw) = pool.withdraw_from_principal(\n        staked_sui,\n    );\n    let principal_withdraw_amount = principal_withdraw.value();\n    let rewards_withdraw = pool.withdraw_rewards(\n        principal_withdraw_amount,\n        pool_token_withdraw_amount,\n        ctx.epoch(),\n    );\n    let total_sui_withdraw_amount = principal_withdraw_amount + rewards_withdraw.value();\n    pool.pending_total_sui_withdraw = pool.pending_total_sui_withdraw + total_sui_withdraw_amount;\n    pool.pending_pool_token_withdraw =\n        pool.pending_pool_token_withdraw + pool_token_withdraw_amount;\n    // If the pool is inactive, we immediately process the withdrawal.\n    if (pool.is_inactive()) pool.process_pending_stake_withdraw();\n    // TODO: implement withdraw bonding period here.\n    principal_withdraw.join(rewards_withdraw);\n    principal_withdraw;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Sui Repository\nDESCRIPTION: Instructions for cloning the Sui git repository, checking out the testnet branch, and building the sui binary.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/node-tools.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:MystenLabs/sui.git && cd sui\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout testnet\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --bin sui\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport SUI_BINARY=\"$(pwd)/target/debug/sui\"\n```\n\n----------------------------------------\n\nTITLE: Secp256r1 Recoverable Signature Verification\nDESCRIPTION: Generate and verify Secp256r1 recoverable signatures using CLI and Move contract\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/signing.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ntarget/debug/sigs-cli keygen --scheme secp256r1-rec --seed 0000000000000000000000000000000000000000000000000000000000000000\ntarget/debug/sigs-cli sign --scheme secp256r1-rec --msg $MSG --secret-key $SK\n```\n\nLANGUAGE: move\nCODE:\n```\n    use sui::ecdsa_r1;\n\n    let msg = x\"$MSG\";\n    let pk = x\"$PK\";\n    let sig = x\"$SIG\";\n    let recovered = ecdsa_r1::secp256r1_ecrecover(&sig, &msg, 1);\n    assert!(pk == recovered, 0);\n```\n\n----------------------------------------\n\nTITLE: Creating a User Signature in Rust\nDESCRIPTION: This Rust code snippet demonstrates how to create a user signature using the Intent and IntentMessage structs. It involves constructing an IntentMessage, serializing it, and generating a signature with Blake2b hashing and the chosen signing scheme. Supported schemes include Ed25519 and ECDSA variants.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/transaction-auth/intent-signing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet intent = Intent::default();\nlet intent_msg = IntentMessage::new(intent, data);\nlet signature = Signature::new_secure(&intent_msg, signer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Kiosk Join Operation in Rust\nDESCRIPTION: Function that combines purchase, borrowing, unlocking and joining of tokenized assets in a single operation within a kiosk.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_28\n\nLANGUAGE: rust\nCODE:\n```\npublic fun kiosk_join<T>(\n\tkiosk: &mut Kiosk,\n  kiosk_cap: &KioskOwnerCap,\n\tprotected_tp: &ProtectedTP<TokenizedAsset<T>>,\n  ta1_id: ID,\n  ta2_id: ID,\n  ctx: &mut TxContext\n) {\n\n\tkiosk::list<TokenizedAsset<T>>(kiosk, kiosk_cap, ta2_id, 0);\n\tlet (ta1, promise_ta1) = kiosk::borrow_val(kiosk, kiosk_cap, ta1_id);\n\tlet coin = coin::zero<SUI>(ctx);\n\tlet (ta2, request) = kiosk::purchase(kiosk, ta2_id, coin);\n\n\tlet tp_ref = proxy::transfer_policy(protected_tp);\n\tlet (_item, _paid, _from) = transfer_policy::confirm_request(\n\t    tp_ref,\n\t    request\n\t);\n\n\ttokenized_asset::join(&mut ta1, ta2);\n\n\tkiosk::return_val(kiosk, ta1, promise_ta1);\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Zero Balance in Move\nDESCRIPTION: Destroys a zero Balance. This function checks if the balance is zero before destruction to ensure no value is lost.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/balance.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_zero<T>(balance: Balance<T>) {\n    assert!(balance.value == 0, ENonZero);\n    let Balance { value: _ } = balance;\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Coins in Sui Blockchain\nDESCRIPTION: This function creates a coin with the specified value and increases the total supply in the TreasuryCap accordingly. It requires access to the TreasuryCap of the currency type to authorize the minting operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_21\n\nLANGUAGE: move\nCODE:\n```\npublic fun mint<T>(cap: &mut TreasuryCap<T>, value: u64, ctx: &mut TxContext): Coin<T> {\n    Coin {\n        id: object::new(ctx),\n        balance: cap.total_supply.increase_supply(value),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of a Move Package\nDESCRIPTION: Illustrates the standard directory layout for a Move package, including required and optional components.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\na_move_package\n├── Move.toml      (required)\n├── Move.lock      (generated)\n├── sources        (required)\n├── doc_templates  (optional)\n├── examples       (optional, test & dev mode)\n└── tests          (optional, test mode)\n```\n\n----------------------------------------\n\nTITLE: Peeling Option U256 with Sui BCS in Move\nDESCRIPTION: The `peel_option_u256` serves to deserialize byte arrays into an `Option<u256>`. Requiring a mutable `sui::bcs::BCS` reference, it leverages the BCS framework’s `peel_option` with `peel_u256` for the u256 type. This allows for handling cases where the u256 value may not be defined.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bcs.md#sui_bcs_peel_option_u256\">peel_option_u256</a>(<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>: &<b>mut</b> <a href=\"../sui/bcs.md#sui_bcs_BCS\">BCS</a>): Option&lt;u256&gt; {\n    <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_option\">peel_option</a>!(|<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>| <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_u256\">peel_u256</a>())\n}\n```\n\n----------------------------------------\n\nTITLE: zkLogin: Privacy-Preserving Blockchain Authentication\nDESCRIPTION: Innovative authentication technique leveraging OpenID Connect to enable blockchain transactions using existing social media credentials. Provides strong security and privacy through zero-knowledge proofs without additional trusted parties.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/research-papers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: research\nCODE:\n```\nzkLogin: Social login authentication for blockchain with zero-knowledge privacy\n```\n\n----------------------------------------\n\nTITLE: Locking User Balance in Move\nDESCRIPTION: This function moves a specified quantity from the user's unlocked balance to their locked balance. It requires the custodian object, account capability, and quantity as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun lock_balance<T>(\n    custodian: &mut Custodian<T>,\n    account_cap: &AccountCap,\n    quantity: u64,\n) {\n    let to_lock = decrease_user_available_balance(custodian, account_cap, quantity);\n    increase_user_locked_balance(custodian, account_cap, to_lock);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Struct in Move\nDESCRIPTION: Defines the Table struct with generic key and value types, including an ID field for object storage and a size field to track the number of entries.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Table<phantom K: copy, drop, store, phantom V: store> has key, store {\n    id: sui::object::UID,\n    size: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Golang Sui gRPC Client\nDESCRIPTION: Implements a Golang client for Sui gRPC API to retrieve transaction events and effects using Go's gRPC libraries and generated protobuf code\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/grpc-overview.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@latest\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"crypto/tls\"\n    \"fmt\"\n    \"log\"\n    \"time\"\n\n    \"google.golang.org/grpc\"\n    \"google.golang.org/grpc/credentials\"\n    \n    pb \"your_project/sui/rpc/v2beta\" // adjust path based on where your generated .pb.go files are\n)\n\nfunc main() {\n    // Set up gRPC connection with TLS (port 443)\n\t\tcreds := credentials.NewTLS(&tls.Config{})\n\t\tconn, err := grpc.Dial(\"<full node URL>:443\", grpc.WithTransportCredentials(creds))\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"failed to connect: %v\", err)\n\t\t}\n\t\tdefer conn.Close()\n\n    client := pb.NewLedgerServiceClient(conn)\n    \n    // Sample transaction digest in Base58 format\n    base58Digest := \"3ByWphQ5sAVojiTrTrGXGM5FmCVzpzYmhsjbhYESJtxp\"\n\n    // Build request\n\t\treq := &pb.GetTransactionRequest{\n\t\t\tDigest: base58Digest,\n\t\t\tReadMask: &pb.TransactionReadMask{\n\t\t\t\tPaths: []string{\"events\", \"effects\"},\n\t\t\t},\n\t\t}\n\n    // Make the request\n    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n\n    resp, err := client.GetTransaction(ctx, req)\n    if err != nil {\n        log.Fatalf(\"GetTransaction failed: %v\", err)\n    }\n\n    // Print the response\n    fmt.Printf(\"Response:\\n%+v\\n\", resp)\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Defining URL Structure in Move\nDESCRIPTION: Defines the Url struct that represents a standard URL string with copy, drop, and store abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/url.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Url has copy, drop, store {\n    url: std::ascii::String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather NFT Structure and Minting in Sui Move\nDESCRIPTION: Definition of a WeatherNFT structure and implementation of its minting function. This allows anyone to create an NFT representing the current weather conditions of a specific city by referencing the WeatherOracle data.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/weather-oracle.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npublic struct WeatherNFT has key, store {\n    id: UID,\n    geoname_id: u32,\n    name: String,\n    country: String,\n    latitude: u32,\n    positive_latitude: bool,\n    longitude: u32,\n    positive_longitude: bool,\n    weather_id: u16,\n    temp: u32,\n    pressure: u32,\n    humidity: u8,\n    visibility: u16,\n    wind_speed: u16,\n    wind_deg: u16,\n    wind_gust: Option<u16>,\n    clouds: u8,\n    dt: u32\n}\n\npublic fun mint(\n    oracle: &WeatherOracle,\n    geoname_id: u32,\n    ctx: &mut TxContext\n): WeatherNFT {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&oracle.id, geoname_id);\n    WeatherNFT {\n        id: object::new(ctx),\n        geoname_id: city_weather_oracle.geoname_id,\n        name: city_weather_oracle.name,\n        country: city_weather_oracle.country,\n        latitude: city_weather_oracle.latitude,\n        positive_latitude: city_weather_oracle.positive_latitude,\n        longitude: city_weather_oracle.longitude,\n        positive_longitude: city_weather_oracle.positive_longitude,\n        weather_id: city_weather_oracle.weather_id,\n        temp: city_weather_oracle.temp,\n        pressure: city_weather_oracle.pressure,\n        humidity: city_weather_oracle.humidity,\n        visibility: city_weather_oracle.visibility,\n        wind_speed: city_weather_oracle.wind_speed,\n        wind_deg: city_weather_oracle.wind_deg,\n        wind_gust: city_weather_oracle.wind_gust,\n        clouds: city_weather_oracle.clouds,\n        dt: city_weather_oracle.dt\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying a Secp256k1 Signature in Move\nDESCRIPTION: Native function that verifies a 64-byte signature (r, s format) against a public key and message using the specified hash function. Returns a boolean indicating whether the signature is valid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/ecdsa_k1.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic native fun secp256k1_verify(\n    signature: &vector<u8>,\n    public_key: &vector<u8>,\n    msg: &vector<u8>,\n    hash: u8,\n): bool;\n```\n\n----------------------------------------\n\nTITLE: Converting Token to Coin in Sui Token Module\nDESCRIPTION: Converts a Token into an open Coin. Creates an ActionRequest for the \"to_coin\" action and returns both the new Coin and the request.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\npublic fun to_coin<T>(t: Token<T>, ctx: &mut TxContext): (Coin<T>, ActionRequest<T>) {\n    let Token { id, balance } = t;\n    let amount = balance.value();\n    id.delete();\n    (\n        balance.into_coin(ctx),\n        new_request(\n            to_coin_action(),\n            amount,\n            option::none(),\n            option::none(),\n            ctx,\n        ),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Metadata Structure in Move\nDESCRIPTION: A comprehensive struct capturing all essential details about a Sui validator, including network addresses, public keys, and metadata for the current and next epochs\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct ValidatorMetadata has store {\n    sui_address: address,\n    protocol_pubkey_bytes: vector<u8>,\n    network_pubkey_bytes: vector<u8>,\n    worker_pubkey_bytes: vector<u8>,\n    proof_of_possession: vector<u8>,\n    name: std::string::String,\n    description: std::string::String,\n    // Additional fields for URL, addresses, and next epoch metadata\n}\n```\n\n----------------------------------------\n\nTITLE: Register Foreign Token Function in Move\nDESCRIPTION: Registers a foreign token in the bridge treasury with validation of treasury cap and upgrade cap. Ensures token supply is zero and package matches.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/treasury.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun register_foreign_token<T>(\n    self: &mut BridgeTreasury,\n    tc: TreasuryCap<T>,\n    uc: UpgradeCap,\n    metadata: &CoinMetadata<T>,\n) {\n    assert!(coin::total_supply(&tc) == 0, ETokenSupplyNonZero);\n    let type_name = type_name::get<T>();\n    let address_bytes = hex::decode(ascii::into_bytes(type_name::get_address(&type_name)));\n    let coin_address = address::from_bytes(address_bytes);\n    assert!(\n        object::id_to_address(&package::upgrade_package(&uc))\n            == coin_address, EInvalidUpgradeCap\n    );\n    let registration = ForeignTokenRegistration {\n        type_name,\n        uc,\n        decimal: coin::get_decimals(metadata),\n    };\n    self.waiting_room.add(type_name::into_string(type_name), registration);\n    self.treasuries.add(type_name, tc);\n    emit(TokenRegistrationEvent{\n        type_name,\n        decimal: coin::get_decimals(metadata),\n        native_token: false\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Mainnet Peer Configuration for Sui Full Node\nDESCRIPTION: This YAML snippet is a configuration for setting up peer nodes to connect to the Mainnet of the Sui network. It specifies 'seed-peers' which are required for state synchronization of the Full Node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/sui-full-node.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\np2p-config:\n  seed-peers:\n    - address: /dns/mel-00.mainnet.sui.io/udp/8084\n      peer-id: d32b55bdf1737ec415df8c88b3bf91e194b59ee3127e3f38ea46fd88ba2e7849\n    - address: /dns/ewr-00.mainnet.sui.io/udp/8084\n      peer-id: c7bf6cb93ca8fdda655c47ebb85ace28e6931464564332bf63e27e90199c50ee\n    - address: /dns/ewr-01.mainnet.sui.io/udp/8084\n      peer-id: 3227f8a05f0faa1a197c075d31135a366a1c6f3d4872cb8af66c14dea3e0eb66\n    - address: /dns/lhr-00.mainnet.sui.io/udp/8084\n      peer-id: c619a5e0f8f36eac45118c1f8bda28f0f508e2839042781f1d4a9818043f732c\n    - address: /dns/sui-mainnet-ssfn-1.nodeinfra.com/udp/8084\n      peer-id: 0c52ca8d2b9f51be4a50eb44ace863c05aadc940a7bd15d4d3f498deb81d7fc6\n    - address: /dns/sui-mainnet-ssfn-2.nodeinfra.com/udp/8084\n      peer-id: 1dbc28c105aa7eb9d1d3ac07ae663ea638d91f2b99c076a52bbded296bd3ed5c\n    - address: /dns/sui-mainnet-ssfn-ashburn-na.overclock.run/udp/8084\n      peer-id: 5ff8461ab527a8f241767b268c7aaf24d0312c7b923913dd3c11ee67ef181e45\n    - address: /dns/sui-mainnet-ssfn-dallas-na.overclock.run/udp/8084\n      peer-id: e1a4f40d66f1c89559a195352ba9ff84aec28abab1d3aa1c491901a252acefa6\n    - address: /dns/ssn01.mainnet.sui.rpcpool.com/udp/8084\n      peer-id: fadb7ccb0b7fc99223419176e707f5122fef4ea686eb8e80d1778588bf5a0bcd\n    - address: /dns/ssn02.mainnet.sui.rpcpool.com/udp/8084\n      peer-id: 13783584a90025b87d4604f1991252221e5fd88cab40001642f4b00111ae9b7e\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Sui Move Module\nDESCRIPTION: This Move snippet defines a module named `example` that includes a struct `Event` with a single field `x` and an `entry fun nudge()` to emit an `Event`. This module demonstrates basic struct usage and event emission in Sui Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\nmodule example::example {\n    struct Event has copy, drop { x: u64 }\n    entry fun nudge() {\n        sui::event::emit(Event { x: 41 })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Open Orders in Move\nDESCRIPTION: Function to retrieve all open orders for a specific account in a given pool. Returns a vector of Order objects representing all active orders.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/query-the-pool.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun list_open_orders<BaseAsset, QuoteAsset>(\n     pool: &Pool<BaseAsset, QuoteAsset>,\n     account_cap: &AccountCap\n): vector<Order>\n```\n\n----------------------------------------\n\nTITLE: Join and Transfer Coins Implementation\nDESCRIPTION: Implementation of function that joins multiple coins into one and transfers to a receiver. Requires non-empty vector of coins. Pops last coin as base, joins remaining coins, and transfers result to receiver address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/pay.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun join_vec_and_transfer<T>(mut coins: vector<Coin<T>>, receiver: address) {\n    assert!(coins.length() > 0, ENoCoins);\n    let mut self = coins.pop_back();\n    join_vec(&mut self, coins);\n    transfer::public_transfer(self, receiver)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Staking Rewards Balance in Move\nDESCRIPTION: Creates a Balance for staking rewards without increasing the supply. This function should only be called by the epoch change system transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/balance.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\nfun create_staking_rewards<T>(value: u64, ctx: &TxContext): Balance<T> {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    assert!(std::type_name::get<T>().into_string().into_bytes() == SUI_TYPE_NAME, ENotSUI);\n    Balance { value }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating USDC Coin Object in TypeScript\nDESCRIPTION: Example of creating a USDC coin object for use in Programmable Transaction Blocks (PTBs).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/stablecoins.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst usdcCoin = coinWithBalance({\n  type: '0xa1ec7fc00a6f40db9693ad1415d0c193ad3906494428cf252621037bd7117e29::usdc::USDC',\n  balance: 1_000_000\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Object Representation in Sui Move\nDESCRIPTION: Example of a Capy object with dynamic representation based on genes, designed for dynamic image generation where appearance changes based on attributes and items.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/display.mdx#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nmodule capy::capy;\n\n/// A Capy - very diverse object with different combination\n/// of genes. Created dynamically + for images a dynamic SVG\n/// generation is used.\npublic struct Capy has key, store {\n    id: UID,\n    genes: vector<u8>\n}\n```\n\n----------------------------------------\n\nTITLE: Multiplying U64 by FixedPoint32\nDESCRIPTION: Multiplies a u64 integer by a fixed-point number, handling the scale conversion and checking for overflow conditions. The result is truncated to remove any fractional part.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/fixed_point32.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun multiply_u64(val: u64, multiplier: FixedPoint32): u64 {\n    // The product of two 64 bit values has 128 bits, so perform the\n    // multiplication with u128 types and keep the full 128 bit product\n    // to avoid losing accuracy.\n    let unscaled_product = val as u128 * (multiplier.value as u128);\n    // The unscaled product has 32 fractional bits (from the multiplier)\n    // so rescale it by shifting away the low bits.\n    let product = unscaled_product >> 32;\n    // Check whether the value is too large.\n    assert!(product <= MAX_U64, EMULTIPLICATION);\n    product as u64\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Coin Objects by Address in Sui using JSON-RPC\nDESCRIPTION: This snippet demonstrates how to retrieve all Coin<0x2::sui::SUI> objects owned by a specific address using JSON-RPC in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/graphql-migration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nquery {\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"suix_getCoins\",\n  \"params\": [\n    \"0x5094652429957619e6efa79a404a6714d1126e63f551f4b6c7fb76440f8118c9\", //owner\n    \"0x2::sui::SUI\",                                                      //coin type\n    \"0xe5c651321915b06c81838c2e370109b554a448a78d3a56220f798398dde66eab\", //cursor\n    3 //limit\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Display Object with Predefined Fields in Move\nDESCRIPTION: Function to create a new Display object with a set of predefined fields. Takes vectors of field names and values, which must be of equal length, and adds them to the Display object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new_with_fields<T: key>(\n    pub: &Publisher,\n    fields: vector<String>,\n    values: vector<String>,\n    ctx: &mut TxContext,\n): Display<T> {\n    let len = fields.length();\n    assert!(len == values.length(), EVecLengthMismatch);\n    let mut i = 0;\n    let mut display = new<T>(pub, ctx);\n    while (i < len) {\n        display.add_internal(fields[i], values[i]);\n        i = i + 1;\n    };\n    display\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssetCap struct for tokenized asset management in Rust\nDESCRIPTION: The AssetCap struct is generated for each new asset represented as a fractional NFT. It tracks supply circulation, defines maximum supply, and controls burnability. This should typically be created as an owned object transferable to an administrator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct AssetCap<phantom T> {\n    id: UID,\n    // the current supply in circulation\n    supply: Supply<T>,\n    // the total max supply allowed to exist at any time\n    total_supply: u64,\n    // Determines if the asset can be burned or not\n    burnable: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Funds from BalanceManager in Move\nDESCRIPTION: Functions allowing the owner to withdraw funds from the BalanceManager. Supports withdrawing specific amounts or all available funds of a particular coin type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/balance-manager.mdx#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic fun withdraw<T>(self: &mut BalanceManager, amount: u64, ctx: &mut TxContext): Coin<T> {\n    assert!(self.owner == tx_context::sender(ctx), ENotOwner);\n\n    let type = type_name::get<T>();\n    if (!table::contains(&self.balances, type)) {\n        table::add(&mut self.balances, type, balance::zero<T>());\n        table::add(&mut self.locked, type, balance::zero<T>());\n    };\n\n    let balance = table::borrow_mut(&mut self.balances, type);\n    assert!(balance::value(balance) >= amount, EInsufficientBalance);\n    coin::from_balance(balance::split(balance, amount), ctx)\n}\n\npublic fun withdraw_all<T>(self: &mut BalanceManager, ctx: &mut TxContext): Coin<T> {\n    assert!(self.owner == tx_context::sender(ctx), ENotOwner);\n\n    let type = type_name::get<T>();\n    if (!table::contains(&self.balances, type)) {\n        table::add(&mut self.balances, type, balance::zero<T>());\n        table::add(&mut self.locked, type, balance::zero<T>());\n        return coin::zero<T>(ctx)\n    };\n\n    let balance = table::borrow_mut(&mut self.balances, type);\n    if (balance::value(balance) == 0) {\n        return coin::zero<T>(ctx)\n    };\n    let amount = balance::value(balance);\n    coin::from_balance(balance::split(balance, amount), ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Taking Item from Kiosk in Move\nDESCRIPTION: Removes an item from the Kiosk. Requires owner authentication and checks for item availability and lock status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\npublic fun take<T: key + store>(self: &mut Kiosk, cap: &KioskOwnerCap, id: ID): T {\n    assert!(self.has_access(cap), ENotOwner);\n    assert!(!self.is_locked(id), EItemLocked);\n    assert!(!self.is_listed_exclusively(id), EListedExclusively);\n    assert!(self.has_item(id), EItemNotFound);\n    self.item_count = self.item_count - 1;\n    df::remove_if_exists<Listing, u64>(&mut self.id, Listing { id, is_exclusive: false });\n    dof::remove(&mut self.id, Item { id })\n}\n```\n\n----------------------------------------\n\nTITLE: Order Structure Definition in Move\nDESCRIPTION: Defines the core Order struct containing essential order properties including ID, price, quantity, ownership and expiration details. Uses a 64-bit order ID to ensure uniqueness over long periods.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/orders.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nstruct Order has store, drop {\n    order_id: u64,\n    price: u64,\n    quantity: u64,\n    is_bid: bool,\n    owner: ID,\n    expire_timestamp: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Order Event Structures\nDESCRIPTION: Defines event structures for order tracking including OrderPlaced, OrderCanceled, and OrderFilled events. Each event contains relevant order information for tracking state changes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/design.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nstruct OrderPlaced<phantom BaseAsset, phantom QuoteAsset> has copy, store, drop {\n    order_id: u64,\n    is_bid: bool,\n    owner: ID,\n    base_asset_quantity_placed: u64,\n    price: u64\n}\n\nstruct OrderCanceled<phantom BaseAsset, phantom QuoteAsset> has copy, store, drop {\n    order_id: u64,\n    is_bid: bool,\n    owner: ID,\n    base_asset_quantity_canceled: u64,\n    price: u64\n}\n\nstruct OrderFilled<phantom BaseAsset, phantom QuoteAsset> has copy, store, drop {\n    order_id: u64,\n    is_bid: bool,\n    owner: ID,\n    total_quantity: u64,\n    base_asset_quantity_filled: u64,\n    base_asset_quantity_remaining: u64,\n    price: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Level 2 Order Book Status for Bid Side (Move)\nDESCRIPTION: Retrieves the level 2 order book depth for the bid side within a specified price range. Returns two vectors: one for prices and one for corresponding depths. Requires a Pool object, price range, and Clock for time-based operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_29\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_level2_book_status_bid_side<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n    mut price_low: u64,\n    mut price_high: u64,\n    clock: &Clock\n): (vector<u64>, vector<u64>) {\n    let (price_low_, _) = critbit::min_leaf(&pool.bids);\n    if (price_low < price_low_) price_low = price_low_;\n    let (price_high_, _) = critbit::max_leaf(&pool.bids);\n    if (price_high > price_high_) price_high = price_high_;\n    price_low = critbit::find_closest_key(&pool.bids, price_low);\n    price_high = critbit::find_closest_key(&pool.bids, price_high);\n    let mut price_vec = vector::empty<u64>();\n    let mut depth_vec = vector::empty<u64>();\n    if (price_low == 0) { return (price_vec, depth_vec) };\n    while (price_low <= price_high) {\n        let depth = get_level2_book_status(\n            &pool.bids,\n            price_low,\n            clock::timestamp_ms(clock)\n        );\n        vector::push_back(&mut price_vec, price_low);\n        vector::push_back(&mut depth_vec, depth);\n        let (next_price, _) = critbit::next_leaf(&pool.bids, price_low);\n        if (next_price == 0) { break }\n        else { price_low = next_price };\n    };\n    (price_vec, depth_vec)\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting a Bit in BitVector\nDESCRIPTION: Sets the bit at the specified index in the BitVector to false (0). The function verifies the index is within bounds before performing the operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/bit_vector.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun unset(bitvector: &mut BitVector, bit_index: u64) {\n    assert!(bit_index < bitvector.bit_field.length(), EINDEX);\n    let x = &mut bitvector.bit_field[bit_index];\n    *x = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Depositing Base Asset using TypeScript SDK\nDESCRIPTION: TypeScript method to deposit base asset into a custodian account. It constructs a transaction block for the deposit operation, taking token types, coin object, and account capability as inputs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\npublic depositBase(\n    token1: string,\n    token2: string,\n    coin: string | TransactionArgument,\n    accountCap: string,\n    overrides: Overrides = new Overrides(),\n): TransactionBlock {\n    const tokenType1 = convertToTokenType(token1, this.records);\n    const tokenType2 = convertToTokenType(token2, this.records);\n    const poolInfo = getPoolInfoByRecords(tokenType1, tokenType2, this.records);\n    overrides.txb.moveCall({\n        typeArguments: [tokenType1, tokenType2],\n        target: `${this.configs.swapPackageId}::clob::deposit_base`,\n        arguments: [\n            overrides.txb.object(String(poolInfo.clob)),\n            typeof coin == 'string' ? overrides.txb.object(coin) : coin,\n            overrides.txb.object(String(accountCap)),\n        ],\n    });\n    overrides.txb.setGasBudget(overrides.gasBudget);\n    return overrides.txb;\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Stake from Validator's Pool in Move\nDESCRIPTION: This function withdraws stake from a validator's staking pool. It takes a mutable reference to SuiSystemState, a StakedSui object, and the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun request_withdraw_stake(\n    wrapper: &mut SuiSystemState,\n    staked_sui: StakedSui,\n    ctx: &mut TxContext,\n) {\n    let withdrawn_stake = wrapper.request_withdraw_stake_non_entry(staked_sui, ctx);\n    transfer::public_transfer(withdrawn_stake.into_coin(ctx), ctx.sender());\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Key Exists in VecMap in Move\nDESCRIPTION: Returns true if the VecMap contains an entry for the specified key, false otherwise. Leverages the get_idx_opt function to determine key existence.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic fun contains<K: copy, V>(self: &VecMap<K, V>, key: &K): bool {\n    get_idx_opt(self, key).is_some()\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Validator Address by Pool ID\nDESCRIPTION: Function to retrieve validator address given a staking pool ID, checking active, candidate and inactive validators.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\npublic fun validator_address_by_pool_id(self: &mut ValidatorSet, pool_id: &ID): address {\n    if (self.staking_pool_mappings.contains(*pool_id)) {\n        self.staking_pool_mappings[*pool_id]\n    } else {\n        self.inactive_validators[*pool_id].load_validator_maybe_upgrade().sui_address()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Limit Orders in DeepBook CLOB (Move)\nDESCRIPTION: Implementation of the place_limit_order function that allows users to place limit orders in a trading pool. This function currently aborts with code 1337 and would typically handle order matching, filling, and placement on the order book.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_19\n\nLANGUAGE: move\nCODE:\n```\npublic fun place_limit_order<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _price: u64,\n    _quantity: u64,\n    _is_bid: bool,\n    _expire_timestamp: u64, // Expiration timestamp in ms in absolute value inclusive.\n    _restriction: u8,\n    _clock: &Clock,\n    _account_cap: &AccountCap,\n    _ctx: &mut TxContext\n): (u64, u64, bool, u64) {\n   abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Access Implementation in Move\nDESCRIPTION: Provides mutable access to extension storage within a Kiosk. This can only be accessed by installed extensions, even if disabled. Includes safety checks for extension installation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic fun storage_mut<Ext: drop>(_ext: Ext, self: &mut Kiosk): &mut Bag {\n    assert!(is_installed<Ext>(self), EExtensionNotInstalled);\n    &mut extension_mut<Ext>(self).storage\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Fields to Sui Objects in Move\nDESCRIPTION: The add function adds a dynamic field to a Sui object. It takes the object's UID, a name for the field, and the value to store. It hashes the object address with the field name, creates a Field object, and links it to the parent object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add<Name: copy + drop + store, Value: store>(\n    object: &mut UID,\n    name: Name,\n    value: Value,\n) {\n    let object_addr = object.to_address();\n    let hash = hash_type_and_key(object_addr, name);\n    assert!(!has_child_object(object_addr, hash), EFieldAlreadyExists);\n    let field = Field {\n        id: object::new_uid_from_hash(hash),\n        name,\n        value,\n    };\n    add_child_object(object_addr, field)\n}\n```\n\n----------------------------------------\n\nTITLE: Calculate Token Amount from SUI Amount\nDESCRIPTION: Calculates the equivalent pool token amount given a SUI amount and exchange rate. Returns the SUI amount directly if either exchange rate component is zero, otherwise performs proportional calculation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_45\n\nLANGUAGE: Move\nCODE:\n```\nfun get_token_amount(exchange_rate: &PoolTokenExchangeRate, sui_amount: u64): u64 {\n    if (exchange_rate.sui_amount == 0 || exchange_rate.pool_token_amount == 0) {\n        return sui_amount\n    };\n    mul_div!(exchange_rate.pool_token_amount, sui_amount, exchange_rate.sui_amount)\n}\n```\n\n----------------------------------------\n\nTITLE: Equipping a Sword to a Warrior in Move\nDESCRIPTION: This function equips a new sword to a SimpleWarrior. If the warrior already has a sword, it's removed and returned to the sender before equipping the new one. This showcases the flexibility of using Option for object wrapping.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/wrapped.mdx#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\npublic fun equip_sword(warrior: &mut SimpleWarrior, sword: Sword, ctx: &mut TxContext) {\n    if (warrior.sword.is_some()) {\n        let old_sword = warrior.sword.extract();\n        transfer::transfer(old_sword, ctx.sender());\n    };\n    warrior.sword.fill(sword);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Child Object Existence in Move\nDESCRIPTION: This native function checks if a child object exists for a given parent and ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) native fun has_child_object(parent: address, id: address): bool;\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Assets in Move\nDESCRIPTION: Implements the withdraw_asset function to allow users to withdraw assets from their available balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun withdraw_asset<Asset>(\n    custodian: &mut Custodian<Asset>,\n    quantity: u64,\n    account_cap: &AccountCap,\n    ctx: &mut TxContext\n): Coin<Asset> {\n    coin::from_balance(decrease_user_available_balance<Asset>(custodian, account_cap, quantity), ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User Balance in Move\nDESCRIPTION: Function to check user's balance in both base and quote assets, including available and locked amounts. Returns tuple of four u64 values representing different balance components.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/query-the-pool.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun usr_balance<BaseAsset, QuoteAsset>(\n     pool: &Pool<BaseAsset, QuoteAsset>,\n     account_cap: &AccountCap\n): (u64, u64, u64, u64)\n```\n\n----------------------------------------\n\nTITLE: Implementing HMAC-SHA3-256 in Move for Sui\nDESCRIPTION: This function computes the HMAC-SHA3-256 digest of a given key and message. It takes two parameters: a key and a message, both as byte vectors. The function returns a 32-byte digest as a vector of u8.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/hmac.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun hmac_sha3_256(key: &vector<u8>, msg: &vector<u8>): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Depositing Base Asset in Move Contract\nDESCRIPTION: Function to deposit base asset into a custodian account. It takes a pool, coin, and account capability as parameters and doesn't return any value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun deposit_base<BaseAsset, QuoteAsset>(\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    coin: Coin<BaseAsset>,\n    account_cap: &AccountCap\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Epoch Timestamp in Move\nDESCRIPTION: This function returns the timestamp for the start of the current epoch as a millisecond granularity unix timestamp in a u64. It can be used in all transactions, including those that don't go through consensus.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/access-time.mdx#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun epoch_timestamp_ms(self: &TxContext): u64 { self.epoch_timestamp_ms }\n```\n\n----------------------------------------\n\nTITLE: Burning Tokenized Assets from Kiosk in Rust\nDESCRIPTION: Enables the burning of tokenized assets locked in a kiosk, ensuring a decrease in circulating supply via a `BurnPromise`, adhering to secure burning protocols.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\npublic fun asset_from_kiosk_to_burn<T>(\n    to_burn: &TokenizedAsset<T>,\n    asset_cap: &AssetCap<T>,\n    protected_tp: &ProtectedTP<TokenizedAsset<T>>,\n    transfer_request: TransferRequest<TokenizedAsset<T>>,\n  ): BurnPromise {\n}\n```\n\n----------------------------------------\n\nTITLE: Serialize Signed Transfer Data (Sui CLI)\nDESCRIPTION: This command serializes the signed transaction data for a SUI transfer using the Sui CLI. The `--serialize-signed-transaction` flag returns the signed transaction data in Base64. This approach uses the active key in the Sui Keystore. The signed data is returned as `<SIGNED-TX-BYTES>`.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/transaction-auth/offline-signing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sui client transfer-sui --to <SUI-ADDRESS> --sui-coin-object-id <COIN-OBJECT-ID> --gas-budget <GAS-AMOUNT> --serialize-signed-transaction\n```\n\n----------------------------------------\n\nTITLE: Removing Address from Deny List (Move)\nDESCRIPTION: Package-scoped function to remove an address from the deny list configuration for the next epoch. Takes a deny list instance, type index, key, address and transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun v2_remove(\n    deny_list: &mut DenyList,\n    per_type_index: u64,\n    per_type_key: vector<u8>,\n    addr: address,\n    ctx: &mut TxContext,\n) {\n    let per_type_config = deny_list.per_type_config_entry!(per_type_index, per_type_key, ctx);\n    let setting_name = AddressKey(addr);\n    per_type_config.remove_for_next_epoch<_, AddressKey, bool>(\n        &mut ConfigWriteCap(),\n        setting_name,\n        ctx,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Immutably Borrowing an Item from a Kiosk using Sui Move\nDESCRIPTION: This Sui Move code snippet demonstrates how to immutably borrow an item from a Sui Kiosk. It defines a function that uses the 'borrow' method from the 'kiosk' module to return an immutable reference to the item.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\nmodule examples::immutable_borrow;\n\nuse sui::kiosk::{Self, Kiosk, KioskOwnerCap};\n\npublic fun immutable_borrow_example<T>(self: &Kiosk, cap: &KioskOwnerCap, item_id: ID): &T {\n    self.borrow(cap, item_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting u32 to u16 with Overflow Checking\nDESCRIPTION: Attempts to convert a u32 value to u16, returning None if the value exceeds the maximum u16 value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u16(x: u32): Option<u16> {\n    std::macros::try_as_u16!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Epoch Deny List Status (Move)\nDESCRIPTION: Package-scoped function to check if an address is currently in the deny list. Returns boolean indicating presence in current epoch configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun v2_contains_current_epoch(\n    deny_list: &DenyList,\n    per_type_index: u64,\n    per_type_key: vector<u8>,\n    addr: address,\n    ctx: &TxContext,\n): bool {\n    if (!deny_list.per_type_exists(per_type_index, per_type_key)) return false;\n    let per_type_config = deny_list.borrow_per_type_config(per_type_index, per_type_key);\n    let setting_name = AddressKey(addr);\n    config::read_setting(object::id(per_type_config), setting_name, ctx).destroy_or!(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Fund Initialization Function\nDESCRIPTION: Creates a new StorageFund instance with an initial fund balance. The total_object_storage_rebates starts at zero since there are no objects in storage initially.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/storage_fund.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun new(initial_fund: Balance<SUI>): StorageFund {\n    StorageFund {\n        total_object_storage_rebates: balance::zero(),\n        non_refundable_balance: initial_fund,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CoinMetadata Struct in Move\nDESCRIPTION: Definition of the CoinMetadata struct which stores metadata for a specific coin type. It includes information about decimals, name, symbol, description, and icon URL.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic struct CoinMetadata<phantom T> has key, store {\n    id: sui::object::UID,\n    decimals: u8,\n    name: std::string::String,\n    symbol: std::ascii::String,\n    description: std::string::String,\n    icon_url: std::option::Option<sui::url::Url>\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting UpdateBridgeLimit Message in Rust\nDESCRIPTION: Extracts an UpdateBridgeLimit message from a BridgeMessage. It parses the payload, validates the chain ID, and constructs an UpdateBridgeLimit struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun extract_update_bridge_limit(message: &BridgeMessage): UpdateBridgeLimit {\n    let mut bcs = bcs::new(message.payload);\n    let sending_chain = bcs.peel_u8();\n    let limit = peel_u64_be(&mut bcs);\n    chain_ids::assert_valid_chain_id(sending_chain);\n    assert!(bcs.into_remainder_bytes().is_empty(), ETrailingBytes);\n    UpdateBridgeLimit {\n        receiving_chain: message.source_chain,\n        sending_chain,\n        limit\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Values from a Bag in Move\nDESCRIPTION: This function immutably borrows a value from a Bag given its key. It aborts if the key doesn't exist or if the value type doesn't match.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bag.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow<K: copy + drop + store, V: store>(bag: &Bag, k: K): &V {\n    field::borrow(&bag.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Display Fields - Move\nDESCRIPTION: Adds multiple field-value pairs to the Display object simultaneously.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun add_multiple<T: key>(\n    self: &mut Display<T>,\n    fields: vector<String>,\n    values: vector<String>,\n) {\n    let len = fields.length();\n    assert!(len == values.length(), EVecLengthMismatch);\n    let mut i = 0;\n    while (i < len) {\n        self.add_internal(fields[i], values[i]);\n        i = i + 1;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Package Address to 0x0 in Move.toml\nDESCRIPTION: This snippet shows how to set the package's address to `0x0` in the `Move.toml` file within the `[addresses]` section. This is done after adopting automated address management or before upgrading a package.  The package name (e.g., `kiosk`) should match the name defined in the `[package]` section.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/automated-address-management.mdx#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n\"[package]\nname = \\\"Kiosk\\\"\\n\n[dependencies]\n# ... your dependencies ...\n\n[addresses]\nkiosk = \\\"0x0\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Supply in Move\nDESCRIPTION: Function to create a new supply for a given token type T. It initializes the supply with a value of 0.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/balance.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create_supply<T: drop>(_: T): Supply<T> {\n    Supply { value: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Owned Objects using JSON-RPC\nDESCRIPTION: This JSON-RPC call example shows how to query objects owned by a specific address or object ID using the `suix_getOwnedObjects` method. It returns objects owned based on the provided ID context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transfers/transfer-to-object.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"suix_getOwnedObjects\",\n  \"params\": [\n    \"0xADD\"\n  ]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"suix_getOwnedObjects\",\n  \"params\": [\n    \"0x0B\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Rule to TransferPolicy in Move\nDESCRIPTION: This function allows adding a custom rule to a TransferPolicy, requiring confirmation for TransferRequests. It involves asserting ownership and ensuring rules are not already set, updating the policy with rule configurations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add_rule<T, Rule: drop, Config: store + drop>(\n    _: Rule,\n    policy: &mut TransferPolicy<T>,\n    cap: &TransferPolicyCap<T>,\n    cfg: Config,\n) {\n    assert!(object::id(policy) == cap.policy_id, ENotOwner);\n    assert!(!has_rule<T, Rule>(policy), ERuleAlreadySet);\n    df::add(&mut policy.id, RuleKey<Rule> {}, cfg);\n    policy.rules.insert(type_name::get<Rule>())\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Vectors in Move\nDESCRIPTION: This function pushes all elements from one vector into another. It takes a mutable reference to the destination vector and consumes the source vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun append<Element>(lhs: &mut vector<Element>, other: vector<Element>) {\n    other.do!(|e| lhs.push_back(e));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Extension to a Sui Kiosk\nDESCRIPTION: Implements the add function to attach an extension to a Kiosk, requiring owner permission and setting up the extension's storage and permissions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add<Ext: drop>(\n    _ext: Ext,\n    self: &mut Kiosk,\n    cap: &KioskOwnerCap,\n    permissions: u128,\n    ctx: &mut TxContext,\n) {\n    assert!(self.has_access(cap), ENotOwner);\n    df::add(\n        self.uid_mut_as_owner(cap),\n        ExtensionKey<Ext> {},\n        Extension {\n            storage: bag::new(ctx),\n            permissions,\n            is_enabled: true,\n        },\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Canceling Orders in DeepBook CLOB (Move)\nDESCRIPTION: This function allows batch cancellation of limit orders to save gas cost. It groups orders by price level for efficiency, cancels the specified orders, unlocks the corresponding balances, and emits cancellation events. It's optimized for orders with the same price grouped together.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_25\n\nLANGUAGE: Move\nCODE:\n```\npublic fun batch_cancel_order<BaseAsset, QuoteAsset>(\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    order_ids: vector<u64>,\n    account_cap: &AccountCap\n) {\n    let pool_id = *object::uid_as_inner(&pool.id);\n    let user = object::id(account_cap);\n    assert!(contains(&pool.usr_open_orders, user), 0);\n    let mut tick_index: u64 = 0;\n    let mut tick_price: u64 = 0;\n    let n_order = vector::length(&order_ids);\n    let mut i_order = 0;\n    let usr_open_orders = borrow_mut(&mut pool.usr_open_orders, user);\n    while (i_order < n_order) {\n        let order_id = *vector::borrow(&order_ids, i_order);\n        assert!(linked_table::contains(usr_open_orders, order_id), EInvalidOrderId);\n        let new_tick_price = *linked_table::borrow(usr_open_orders, order_id);\n        let is_bid = order_is_bid(order_id);\n        if (new_tick_price != tick_price) {\n            tick_price = new_tick_price;\n            let (tick_exists, new_tick_index) = find_leaf(\n                if (is_bid) { &pool.bids } else { &pool.asks },\n                tick_price\n            );\n            assert!(tick_exists, EInvalidTickPrice);\n            tick_index = new_tick_index;\n        };\n        let order = remove_order(\n            if (is_bid) { &mut pool.bids } else { &mut pool.asks },\n            usr_open_orders,\n            tick_index,\n            order_id,\n            user\n        );\n        if (is_bid) {\n            let balance_locked = clob_math::mul(order.quantity, order.price);\n            custodian::unlock_balance(&mut pool.quote_custodian, user, balance_locked);\n        } else {\n            custodian::unlock_balance(&mut pool.base_custodian, user, order.quantity);\n        };\n        emit_order_canceled<BaseAsset, QuoteAsset>(pool_id, &order);\n        i_order = i_order + 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sui Full Node with Docker\nDESCRIPTION: Initiates a Sui Full node in detached mode using Docker Compose. Utilizes the configuration from downloaded YAML files, ensuring background execution with the -d flag.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Counter Increment Function\nDESCRIPTION: Function that allows any user to increment the counter value by one.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic entry fun increment(counter: &mut Counter) {\n    counter.value = counter.value + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Element Removal from Vector in Move\nDESCRIPTION: This function removes an element from the vector by swapping it with the last element and then popping. It's O(1) but doesn't preserve element order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun swap_remove<Element>(v: &mut vector<Element>, i: u64): Element {\n    assert!(v.length() != 0, EINDEX_OUT_OF_BOUNDS);\n    let last_idx = v.length() - 1;\n    v.swap(i, last_idx);\n    v.pop_back()\n}\n```\n\n----------------------------------------\n\nTITLE: List Item with Purchase Cap\nDESCRIPTION: Creates a PurchaseCap that grants permission to purchase an item at or above a minimum price. Includes owner verification and checks for item existence and current listing status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_25\n\nLANGUAGE: Move\nCODE:\n```\npublic fun list_with_purchase_cap<T: key + store>(\n    self: &mut Kiosk,\n    cap: &KioskOwnerCap,\n    id: ID,\n    min_price: u64,\n    ctx: &mut TxContext,\n): PurchaseCap<T> {\n    assert!(self.has_access(cap), ENotOwner);\n    assert!(self.has_item_with_type<T>(id), EItemNotFound);\n    assert!(!self.is_listed(id), EAlreadyListed);\n    df::add(&mut self.id, Listing { id, is_exclusive: true }, min_price);\n    PurchaseCap<T> {\n        min_price,\n        item_id: id,\n        id: object::new(ctx),\n        kiosk_id: object::id(self),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UQ64_64 Values from Integer\nDESCRIPTION: Function to create a fixed-point value from an integer. This is a simpler alternative to from_quotient when working with whole numbers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_int(integer: u64): UQ64_64 {\n    UQ64_64(std::macros::uq_from_int!(integer, FRACTIONAL_BITS))\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Non-Drop Types by Reference in Move\nDESCRIPTION: Shows how to compare types without the drop ability by borrowing them first. This pattern allows equality comparison while preserving ownership of the original values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/equality.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::example {\n    public struct Coin as store { value: u64 }\n    fun swap_if_equal(c1: Coin, c2: Coin): (Coin, Coin) {\n        let are_equal = &c1 == c2; // valid, note `c2` is automatically borrowed\n        if (are_equal) (c2, c1) else (c1, c2)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Type and Key in Move\nDESCRIPTION: This native function hashes a type and key combination for a given parent address. It may abort with EBCSSerializationFailure.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) native fun hash_type_and_key<K: copy + drop + store>(\n    parent: address,\n    k: K,\n): address;\n```\n\n----------------------------------------\n\nTITLE: Removing a Sui Kiosk Extension\nDESCRIPTION: Implements the remove function to completely remove an extension from a Kiosk, requiring owner permission and an empty extension storage.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove<Ext: drop>(self: &mut Kiosk, cap: &KioskOwnerCap) {\n    assert!(self.has_access(cap), ENotOwner);\n    assert!(is_installed<Ext>(self), EExtensionNotInstalled);\n    let Extension {\n        storage,\n        permissions: _,\n        is_enabled: _,\n    } = df::remove(self.uid_mut_as_owner(cap), ExtensionKey<Ext> {});\n    storage.destroy_empty();\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Maker Incentives Formula in DeepBook\nDESCRIPTION: Mathematical formula used to calculate incentives for makers who have staked the required number of DEEP tokens. The formula factors in total fees generated, liquidity provided, and a phase-out point to determine rebate distribution.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/design.mdx#2025-04-22_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\LARGE \\textsf {Incentives }  \\textsf {for } \\textsf {Maker } i = \\max\\Bigg\\lbrack F_i\\Bigg\\lparen 1 + \\large\\cfrac{\\sum_{j \\in \\bar{M}} F_j} {\\sum_{j \\in M} F_j} \\Bigg\\rparen\\Bigg\\lparen \\LARGE 1 - \\large\\cfrac{\\sum_{j \\in M \\cup \\bar{M}} L_j - L_i}{p}\\Bigg\\rparen \\LARGE ,0 \\Bigg\\rbrack\n```\n\n----------------------------------------\n\nTITLE: Flushing Spent Balance in Move\nDESCRIPTION: Flushes the TokenPolicy.spent_balance into the TreasuryCap. This action is only available to the TreasuryCap owner.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_36\n\nLANGUAGE: Move\nCODE:\n```\npublic fun flush<T>(\n    self: &mut TokenPolicy<T>,\n    cap: &mut TreasuryCap<T>,\n    _ctx: &mut TxContext,\n): u64 {\n    let amount = self.spent_balance.value();\n    let balance = self.spent_balance.split(amount);\n    cap.supply_mut().decrease_supply(balance)\n}\n```\n\n----------------------------------------\n\nTITLE: Freezing Object in Move\nDESCRIPTION: Freezes an object, making it immutable and non-transferrable. This function has custom verification rules ensuring T is defined in the same module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun freeze_object<T: key>(obj: T) {\n    freeze_object_impl(obj)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitwise Not Operation in Move\nDESCRIPTION: Returns the bitwise NOT of a u32 value by XORing it with the maximum possible u32 value. Each bit that is 1 becomes 0, and each bit that is 0 becomes 1.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bitwise_not(x: u32): u32 {\n    x ^ max_value!()\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Duplicate Validators in Move\nDESCRIPTION: Asserts that there are no duplicate validators in the active or pending validator sets. This function is crucial for maintaining the integrity of the validator set.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun assert_no_pending_or_active_duplicates(\n    self: &ValidatorSet,\n    validator: &Validator,\n) {\n    // Validator here must be active or pending, and thus must be identified as duplicate exactly once.\n    assert!(\n        count_duplicates_vec(&self.active_validators, validator) +\n            count_duplicates_tablevec(&self.pending_active_validators, validator) == 1,\n        EDuplicateValidator,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Coin from Balance in Move\nDESCRIPTION: Takes a specified value from a Balance and creates a new Coin. This function requires a mutable reference to a Balance, a value to withdraw, and a transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun take<T>(balance: &mut Balance<T>, value: u64, ctx: &mut TxContext): Coin<T> {\n    Coin {\n        id: object::new(ctx),\n        balance: balance.split(value),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Stake Addition Request in Move\nDESCRIPTION: Handles a request to add stake to a validator. The stake is added to the validator's staking pool as a pending entry, to be processed at the end of the epoch. It enforces a minimum staking threshold.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun request_add_stake(\n    self: &mut ValidatorSet,\n    validator_address: address,\n    stake: Balance<SUI>,\n    ctx: &mut TxContext,\n): StakedSui {\n    let sui_amount = stake.value();\n    assert!(sui_amount >= MIN_STAKING_THRESHOLD, EStakingBelowThreshold);\n    self\n        .get_candidate_or_active_validator_mut(validator_address)\n        .request_add_stake(stake, ctx.sender(), ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Cancel Orders Function in Move\nDESCRIPTION: This Move function allows canceling multiple limit orders to save gas costs. It aborts if any order ID is invalid or not submitted by the sender. The function is more gas-efficient when orders with the same price are grouped together in the input vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_16\n\nLANGUAGE: move\nCODE:\n```\npublic fun batch_cancel_order<BaseAsset, QuoteAsset>(\n        pool: &mut Pool<BaseAsset, QuoteAsset>,\n        order_ids: vector<u64>,\n        account_cap: &AccountCap\n)\n```\n\n----------------------------------------\n\nTITLE: LinkedTable Struct Definition - Move\nDESCRIPTION: Core struct definition for LinkedTable that maintains ordered key-value pairs with linking between elements. Contains fields for table ID, size tracking, and head/tail pointers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct LinkedTable<K: copy, drop, store, phantom V: store> has key, store {\n    id: sui::object::UID,\n    size: u64,\n    head: std::option::Option<K>,\n    tail: std::option::Option<K>\n}\n```\n\n----------------------------------------\n\nTITLE: Running specific Sui Move tests\nDESCRIPTION: Command to run only tests with 'non_zero' in their name using the Sui CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ sui move test non_zero\n```\n\n----------------------------------------\n\nTITLE: Initializing Table Collection in Sui Move\nDESCRIPTION: Create a homogeneous key-value map with type-restricted entries, requiring transaction context for object generation\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/dynamic-fields/tables-bags.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic struct Table<K: copy + drop + store, V: store> has key, store { /* ... */ }\n\npublic fun new<K: copy + drop + store, V: store>(\n    ctx: &mut TxContext,\n): Table<K, V>;\n```\n\n----------------------------------------\n\nTITLE: DenyList Structure Definition in Move\nDESCRIPTION: Defines the core DenyList struct that stores addresses blocked for core types. Contains a unique ID and a bag of individual deny lists.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct DenyList has key {\n    id: sui::object::UID,\n    lists: sui::bag::Bag\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Kiosk Extension using TransactionBuilder in JavaScript\nDESCRIPTION: This code snippet shows how to remove a kiosk extension using the TransactionBuilder in JavaScript. It creates a transaction to call the 'remove' function from the kiosk_extension module, passing the kiosk and owner cap objects as arguments. Note that this operation can only be performed if the storage is empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk-apps.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet txb = new TransactionBuilder();\nlet kioskArg = tx.object('<ID>');\nlet capArg = tx.object('<ID>');\n\ntxb.moveCall({\n    target: '0x2::kiosk_extension::remove',\n    arguments: [ kioskArg, capArg ],\n    typeArguments: '<letter_box_package>::letterbox_ext::Extension'\n});\n```\n\n----------------------------------------\n\nTITLE: Order Structure Implementation\nDESCRIPTION: Defines the Order structure containing order details including ID, price, quantity, ownership, and expiration information. Includes bit allocation strategy for order IDs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/design.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nstruct Order has store, drop {\n    order_id: u64,\n    price: u64,\n    quantity: u64,\n    is_bid: bool,\n    owner: ID,\n    expire_timestamp: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Converting String to Uppercase in Move\nDESCRIPTION: This function converts a given string to its uppercase equivalent. It iterates over the bytes of the input string and uses `char_to_uppercase` to convert each character. The result is a new string with all characters in uppercase.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../std/ascii.md#std_ascii_to_uppercase\">to_uppercase</a>(<a href=\"../std/string.md#std_string\">string</a>: &<a href=\"../std/ascii.md#std_ascii_String\">String</a>): <a href=\"../std/ascii.md#std_ascii_String\">String</a> {\n    <b>let</b> bytes = <a href=\"../std/string.md#std_string\">string</a>.<a href=\"../std/ascii.md#std_ascii_as_bytes\">as_bytes</a>().map_ref!(|<a href=\"../std/ascii.md#std_ascii_byte\">byte</a>| <a href=\"../std/ascii.md#std_ascii_char_to_uppercase\">char_to_uppercase</a>(*<a href=\"../std/ascii.md#std_ascii_byte\">byte</a>));\n    <a href=\"../std/ascii.md#std_ascii_String\">String</a> { bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling All Orders in Move on SUI Blockchain\nDESCRIPTION: Function signature for canceling all limit orders for an account in the SUI Move contract. Takes a pool and account capability object to authorize the operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_14\n\nLANGUAGE: move\nCODE:\n```\n/// parameters expected by this func\n///\n///   0. `[pool]` Object ID refers to the pool of the trading pair\n///   1. `[account_cap]` Object ID of the account_cap authorizing the\n///       accessilility to the escrow account\n\n/// Returns none\npublic fun cancel_all_orders<BaseAsset, QuoteAsset>(\n     pool: &mut Pool<BaseAsset, QuoteAsset>,\n     account_cap: &AccountCap\n)\n```\n\n----------------------------------------\n\nTITLE: Finding a Value in a Vector Using While Loop and Break in Move\nDESCRIPTION: A function that searches for a target value in a vector and returns its position if found. The function uses a while loop with a break statement to exit early when the target is found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nfun find_position(values: &vector<u64>, target_value: u64): Option<u64> {\n    let size = vector::length(values);\n    let mut i = 0;\n    let mut found = false;\n\n    while (i < size) {\n        if (vector::borrow(values, i) == &target_value) {\n            found = true;\n            break\n        };\n        i = i + 1\n    };\n\n    if (found) {\n        Option::Some(i)\n    } else {\n        Option::None\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Move Unit Tests in Sui\nDESCRIPTION: This snippet shows how to use the 'sui move test' command to run unit tests for a Move package in Sui. It displays the output for a package with no tests defined.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/build-test.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move test\n```\n\nLANGUAGE: sh\nCODE:\n```\nBUILDING Sui\nBUILDING MoveStdlib\nBUILDING my_first_package\nRunning Move unit tests\nTest result: OK. Total tests: 0; passed: 0; failed: 0\n```\n\n----------------------------------------\n\nTITLE: Publishing Sui Package Command\nDESCRIPTION: Command to publish a Sui package using the Sui client CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/upgrade.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client publish\n```\n\n----------------------------------------\n\nTITLE: NFT List and Delist Flow\nDESCRIPTION: Sequence diagram showing the process of listing and delisting NFTs from the rental system with proper handling of transfer policies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_19\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Renter\n    participant nft_rental module\n    participant Renter's Extension Bag\n    participant kiosk module\n    participant Renter's Kiosk\n    participant blockchain\nrect rgba(191, 223, 255, 0.2) \n\tnote right of Renter: List for rent\n    Renter->>nft_rental module: Use kiosk, kioskOwnerCap, ProtectedTP, ObjectID and Renting info as inputs in list\n    blockchain->>nft_rental module: Use protectedTP as input in list\n    nft_rental module->>kiosk module: List object for zero price\n    nft_rental module->>kiosk module: Purchase Object\n    Renter's Kiosk->>kiosk module: Take object from kiosk\n    kiosk module-->>nft_rental module: Returns Object\n    nft_rental module-->>Renter's Extension Bag: Place Object in renter's bag\n    end\nrect rgba(191, 223, 255, 0.2)\n\t\tnote right of Renter: Delist\n    Renter->>nft_rental module: Use renter_kiosk, borrower_kiosk, ObjectID as inputs in delist\n    blockchain->>nft_rental module: Use transferPolicy as input in delist\n    Renter's Extension Bag->>nft_rental module: Take Object from renter's bag\n    alt Empty Transfer Policy\n        nft_rental module-->>Renter's Kiosk: Place Object\n    else TransferPolicy with lock rule\n        nft_rental module-->>Renter's Kiosk: Lock Object\n    end \n    end\n```\n\n----------------------------------------\n\nTITLE: Unlocking User Balance in Move\nDESCRIPTION: This function moves a specified quantity from the user's locked balance to their unlocked balance. It takes the custodian object, owner's address, and quantity as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun unlock_balance<T>(\n    custodian: &mut Custodian<T>,\n    owner: address,\n    quantity: u64,\n) {\n    let locked_balance = decrease_user_locked_balance<T>(custodian, owner, quantity);\n    increase_user_available_balance<T>(custodian, owner, locked_balance)\n}\n```\n\n----------------------------------------\n\nTITLE: Data Storage in Owned vs Shared Objects for Vesting Wallets in Sui Move\nDESCRIPTION: This snippet illustrates the difference between using owned and shared objects for data storage in Sui Move, using a vesting wallet example. It demonstrates when to use each approach based on the relationship and functionality requirements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/conventions.mdx#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\nmodule conventions::vesting_wallet;\n\nuse sui::sui::SUI;\nuse sui::coin::Coin;\nuse sui::table::Table;\nuse sui::balance::Balance;\n\npublic struct OwnedWallet has key {\n    id: UID,\n    balance: Balance<SUI>\n}\n\npublic struct SharedWallet has key {\n    id: UID,\n    balance: Balance<SUI>,\n    accounts: Table<address, u64>\n}\n\n\n// A vesting wallet releases a certain amount of coin over a period of time.\n// If the entire balance belongs to one user and the wallet has no additional functionalities, it is best to store it in an owned object.\npublic fun new(deposit: Coin<SUI>, ctx: &mut TxContext): OwnedWallet {\n    // Implementation omitted.\n    abort(0)\n}\n\n// If you wish to add extra functionality to a vesting wallet, it is best to share the object.\n// For example, if you wish the issuer of the wallet to be able to cancel the contract in the future.\npublic fun new_shared(deposit: Coin<SUI>, ctx: &mut TxContext) {\n    // Implementation omitted.\n    // shares the `SharedWallet`.\n    abort(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Rule from SUI Transfer Policy - Move\nDESCRIPTION: The `remove_rule` function detaches a specified Rule from a TransferPolicy using a TransferPolicyCap. Dependencies include the TransferPolicy and TransferPolicyCap modules. It requires a mutable TransferPolicy and a TransferPolicyCap reference.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_23\n\nLANGUAGE: move\nCODE:\n```\npublic fun remove_rule<T, Rule: drop, Config: drop, store>(policy: &mut sui::transfer_policy::TransferPolicy<T>, cap: &sui::transfer_policy::TransferPolicyCap<T>)\n```\n\nLANGUAGE: move\nCODE:\n```\npublic fun remove_rule<T, Rule: drop, Config: store + drop>(\n    policy: &mut TransferPolicy<T>,\n    cap: &TransferPolicyCap<T>,\n) {\n    assert!(object::id(policy) == cap.policy_id, ENotOwner);\n    let _: Config = df::remove(&mut policy.id, RuleKey<Rule> {});\n    policy.rules.remove(&type_name::get<Rule>());\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Stack Trace in Move\nDESCRIPTION: Use the debug::print_stack_trace function to output the current stack trace during contract execution.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/debug.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\ndebug::print_stack_trace();\n```\n\n----------------------------------------\n\nTITLE: G2 Multi-Scalar Multiplication\nDESCRIPTION: Computes multiple scalar multiplications and additions in G2 group. Takes vectors of scalars and group elements to compute s1*e1 + s2*e2 + ... + sn*en.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_35\n\nLANGUAGE: Move\nCODE:\n```\npublic fun g2_multi_scalar_multiplication(\n    scalars: &vector<Element<Scalar>>,\n    elements: &vector<Element<G2>>,\n): Element<G2> {\n    group_ops::multi_scalar_multiplication(G2_TYPE, scalars, elements)\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Length and Containment Querying in Sui Move\nDESCRIPTION: Methods to check collection size, emptiness, and key presence with type-specific and type-agnostic implementations\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/dynamic-fields/tables-bags.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun length<K: copy + drop + store, V: store>(\n    table: &Table<K, V>,\n): u64;\n\npublic fun is_empty<K: copy + drop + store, V: store>(\n    table: &Table<K, V>\n): bool;\n\npublic fun contains<K: copy + drop + store, V: store>(\n    table: &Table<K, V>,\n    k: K\n): bool;\n```\n\n----------------------------------------\n\nTITLE: Implementing Soul-Bound Objects in Move\nDESCRIPTION: This Move code demonstrates how to create soul-bound objects that must be returned to their original location after use. It uses a ReturnReceipt to enforce this behavior.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transfers/transfer-to-object.mdx#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nmodule examples::soul_bound;\n\nuse transfer::{Self, Receiving};\n\nconst EWrongObject: u64 = 0;\n\npublic struct SoulBound has key {\n    id: UID,\n}\n\npublic struct ReturnReceipt {\n    object_id: ID,\n    return_to: address,\n}\n\npublic fun get_object(parent: &mut UID, soul_bound_ticket: Receiving<SoulBound>): (SoulBound, ReturnReceipt) {\n    let soul_bound = transfer::receive(parent, soul_bound_ticket);\n    let return_receipt = ReturnReceipt {\n        return_to: parent.to_address(),\n        object_id: object::id(&soul_bound),\n    };\n    (soul_bound, return_receipt)\n}\n\npublic fun return_object(soul_bound: SoulBound, receipt: ReturnReceipt) {\n    let ReturnReceipt { return_to, object_id }  = receipt;\n    assert!(object::id(&soul_bound) == object_id, EWrongObject);\n    transfer::transfer(soul_bound, return_to);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed-Point Arithmetic Operations in Move\nDESCRIPTION: Implementation of fixed-point arithmetic operations including quotient conversion, addition, subtraction and integer conversion. Includes overflow protection and proper scaling of fractional bits.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun uq_from_quotient<$T, $U>(\n    $numerator: $T,\n    $denominator: $T,\n    $max_t: $T,\n    $t_bits: u8,\n    $fractional_bits: u8,\n    $abort_denominator: _,\n    $abort_quotient_too_small: _,\n    $abort_quotient_too_large: _,\n): $T {\n    let numerator = $numerator;\n    let denominator = $denominator;\n    if (denominator == 0) $abort_denominator;\n    let scaled_numerator = numerator as $U << $t_bits;\n    let scaled_denominator = denominator as $U << ($t_bits - $fractional_bits);\n    let quotient = scaled_numerator / scaled_denominator;\n    if (quotient == 0 && numerator != 0) $abort_quotient_too_small;\n    if (quotient > $max_t as $U) $abort_quotient_too_large;\n    quotient as $T\n}\n\npublic macro fun uq_from_int<$T, $U>($integer: $T, $fractional_bits: u8): $U {\n    ($integer as $U) << $fractional_bits\n}\n\npublic macro fun uq_add<$T, $U>($a: $T, $b: $T, $max_t: $T, $abort_overflow: _): $T {\n    let sum = $a as $U + ($b as $U);\n    if (sum > $max_t as $U) $abort_overflow;\n    sum as $T\n}\n\npublic macro fun uq_sub<$T>($a: $T, $b: $T, $abort_overflow: _): $T {\n    let a = $a;\n    let b = $b;\n    if (a < b) $abort_overflow;\n    a - b\n}\n\npublic macro fun uq_to_int<$T, $U>($a: $U, $fractional_bits: u8): $T {\n    ($a >> $fractional_bits) as $T\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Key-Value Pair to ObjectBag in Move\nDESCRIPTION: Adds a key-value pair to the ObjectBag, where the value must be an object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_bag.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add<K: copy + drop + store, V: key + store>(bag: &mut ObjectBag, k: K, v: V) {\n    ofield::add(&mut bag.id, k, v);\n    bag.size = bag.size + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Request with Policy Cap in Token Policy - Rust\nDESCRIPTION: The `confirm_with_policy_cap` function allows the TokenPolicyCap owner to validate an action request while bypassing the usual ruleset checks. This function can be used for capability-gated actions but aborts if the request has a spent balance due to policy limitations. It requires proper handling of spent balances and calls the necessary context and action request types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_22\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun confirm_with_policy_cap<T>(_policy_cap: &sui::token::TokenPolicyCap<T>, request: sui::token::ActionRequest<T>, _ctx: &mut TxContext): (std::string::String, u64, address, std::option::Option<address>) {\\n    assert!(request.spent_balance.is_none(), ECantConsumeBalance);\\n    let ActionRequest {\\n        name,\\n        amount,\\n        sender,\\n        recipient,\\n        approvals: _,\\n        spent_balance,\\n    } = request;\\n    spent_balance.destroy_none();\\n    (name, amount, sender, recipient)\\n}\n```\n\n----------------------------------------\n\nTITLE: Reclaiming Rented Assets in Move\nDESCRIPTION: Function that enables an owner to reclaim their asset after the rental period expires. It verifies rental duration, handles asset transfer back to owner's kiosk, and respects any lock rules from the transfer policy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_16\n\nLANGUAGE: move\nCODE:\n```\npublic fun reclaim<T: key + store>(\n  renter_kiosk: &mut Kiosk,\n  borrower_kiosk: &mut Kiosk,\n  transfer_policy: &TransferPolicy<T>,\n  clock: &Clock,\n  item_id: ID,\n  _ctx: &mut TxContext,\n) {\n\n  // Aborts if Rentables extension is not installed.\n  assert!(kiosk_extension::is_installed<Rentables>(renter_kiosk), EExtensionNotInstalled);\n\n  let rentable = take_from_bag<T, Rented>(borrower_kiosk, Rented { id: item_id });\n\n  // Destructures the Rentable struct to place it back to the renter's Kiosk.\n  let Rentable {\n    object,\n    duration,\n    start_date,\n    price_per_day: _,\n    kiosk_id,\n  } = rentable;\n\n  // Aborts if provided kiosk is different that the initial kiosk the item was borrowed from.\n  assert!(object::id(renter_kiosk) == kiosk_id, EInvalidKiosk);\n\n  let start_date_ms = *option::borrow(&start_date);\n  let current_timestamp = clock.timestamp_ms();\n  let final_timestamp = start_date_ms + duration * SECONDS_IN_A_DAY;\n\n  // Aborts if rental duration has not elapsed.\n  assert!(current_timestamp > final_timestamp, ERentingPeriodNotOver);\n\n  // Respects the lock rule, if present, by re-locking the asset in the owner's kiosk.\n  if (transfer_policy.has_rule<T, LockRule>()) {\n    kiosk_extension::lock<Rentables, T>(\n      Rentables {},\n      renter_kiosk,\n      object,\n      transfer_policy,\n    );\n  } else {\n    kiosk_extension::place<Rentables, T>(\n      Rentables {},\n      renter_kiosk,\n      object,\n      transfer_policy,\n    );\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Dynamic Object Field\nDESCRIPTION: Removes and returns a dynamic object field from an object. Aborts if field doesn't exist or type mismatch occurs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove<Name: copy + drop + store, Value: key + store>(\n    object: &mut UID,\n    name: Name,\n): Value {\n    remove_impl!(object, name)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Python Sui gRPC Client\nDESCRIPTION: Implements a Python client for Sui gRPC API to retrieve transaction events and effects using Python's gRPC libraries and generated protobuf code\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/grpc-overview.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npip install grpcio grpcio-tools protobuf\n```\n\nLANGUAGE: python\nCODE:\n```\nimport grpc\nfrom sui.rpc.v2beta import ledger_service_pb2, ledger_service_pb2_grpc\n\ndef main():\n    # Create secure channel to port 443\n    channel = grpc.secure_channel(\"<full node URL>:443\", grpc.ssl_channel_credentials())\n    stub = ledger_service_pb2_grpc.LedgerServiceStub(channel)\n\n    # Sample transaction digest in Base58 format\n    base58_digest = \"3ByWphQ5sAVojiTrTrGXGM5FmCVzpzYmhsjbhYESJtxp\"\n\n    # Build the request\n    request = ledger_service_pb2.GetTransactionRequest(\n        digest=base58_digest,\n        read_mask=ledger_service_pb2.TransactionReadMask(paths=[\"events\", \"effects\"])\n    )\n\n    # Make the RPC call\n    response = stub.GetTransaction(request)\n\n    # Print response\n    print(response)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nLANGUAGE: shell\nCODE:\n```\npython client.py\n```\n\n----------------------------------------\n\nTITLE: Closing Kiosk and Withdrawing Profits in Sui\nDESCRIPTION: Destroys a Kiosk and returns the profits as a SUI coin. This operation requires the KioskOwnerCap and can only be performed when there are no items in the Kiosk. Validates ownership and emptiness before proceeding.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun close_and_withdraw(self: Kiosk, cap: KioskOwnerCap, ctx: &mut TxContext): Coin<SUI> {\n    let Kiosk { id, profits, owner: _, item_count, allow_extensions: _ } = self;\n    let KioskOwnerCap { id: cap_id, for } = cap;\n    assert!(id.to_inner() == for, ENotOwner);\n    assert!(item_count == 0, ENotEmpty);\n    cap_id.delete();\n    id.delete();\n    profits.into_coin(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: BLS Signature Verification in Move\nDESCRIPTION: Implements BLS signature verification using BLS12-381 curve. It takes a 48-byte signature, 96-byte public key, and message as inputs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun bls12381_min_sig_verify(\n    signature: &vector<u8>,\n    public_key: &vector<u8>,\n    msg: &vector<u8>,\n): bool;\n```\n\n----------------------------------------\n\nTITLE: Sharing Object with Public Access in Sui Move\nDESCRIPTION: Converts a given object into a mutable shared object that can be accessed and mutated by everyone. The object must have the 'store' capability and cannot be shared if not created in the current transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun public_share_object<T: key, store>(obj: T) {\n    share_object_impl(obj)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Exclusive Listing of Item in Kiosk - Move\nDESCRIPTION: This function determines if there is a PurchaseCap issued for an item in the Kiosk, indicating whether the item is listed exclusively.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_36\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_listed_exclusively(self: &sui::kiosk::Kiosk, id: sui::object::ID): bool {\n    df::exists_(&self.id, Listing { id, is_exclusive: true })\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Pending Stakes in Move\nDESCRIPTION: Processes pending stakes at epoch boundaries. Updates pool balances using the latest exchange rate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun process_pending_stake(pool: &mut StakingPool) {\n    let latest_exchange_rate = PoolTokenExchangeRate {\n        sui_amount: pool.sui_balance,\n        pool_token_amount: pool.pool_token_balance,\n    };\n    pool.sui_balance = pool.sui_balance + pool.pending_stake;\n    pool.pool_token_balance = latest_exchange_rate.get_token_amount(pool.sui_balance);\n    pool.pending_stake = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bridge Node Config Template\nDESCRIPTION: Commands to create a configuration template for a Bridge Node, with an option to include Bridge Client configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ sui-bridge-cli create-bridge-node-config-template {PATH}\n$ sui-bridge-cli create-bridge-node-config-template --run-client {PATH}\n```\n\n----------------------------------------\n\nTITLE: Verifying Validator Operation Capability in Move\nDESCRIPTION: Verifies if a capability is valid for a validator based on the specified validator type. Returns a verified ValidatorOperationCap after checking that the provided capability matches the one associated with the validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_44\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun verify_cap(\n    self: &mut ValidatorSet,\n    cap: &UnverifiedValidatorOperationCap,\n    which_validator: u8,\n): ValidatorOperationCap {\n    let cap_address = *cap.unverified_operation_cap_address();\n    let validator = if (which_validator == ACTIVE_VALIDATOR_ONLY) {\n        self.get_active_validator_ref(cap_address)\n    } else {\n        self.get_active_or_pending_or_candidate_validator_ref(cap_address, which_validator)\n    };\n    assert!(validator.operation_cap_id() == &object::id(cap), EInvalidCap);\n    cap.into_verified()\n}\n```\n\n----------------------------------------\n\nTITLE: Multiplying BLS12381 Scalars\nDESCRIPTION: This function performs multiplication between two BLS12381 scalars and returns the resulting scalar in the group.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_mul\">scalar_mul</a>(e1: &<a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;, e2: &<a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;): <a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_mul\">scalar_mul</a>(e1: &Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt;, e2: &Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt;): Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt; {\n    <a href=\"../sui/group_ops.md#sui_group_ops_mul\">group_ops::mul</a>(<a href=\"../sui/bls12381.md#sui_bls12381_SCALAR_TYPE\">SCALAR_TYPE</a>, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BitVector Struct in Rust\nDESCRIPTION: Defines the BitVector struct with length and bit_field fields. The struct has copy, drop, and store abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/bit_vector.md#2025-04-22_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\npublic struct BitVector has copy, drop, store {\n    length: u64,\n    bit_field: vector<bool>\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Vector Contains an Element in Move\nDESCRIPTION: This function checks if a given element exists in the vector. It returns true if the element is found, false otherwise. It takes immutable references to both the vector and the element.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun contains<Element>(v: &vector<Element>, e: &Element): bool {\n    let mut i = 0;\n    let len = v.length();\n    while (i < len) {\n        if (&v[i] == e) return true;\n        i = i + 1;\n    };\n    false\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Governance Proposals in DeepBook Pool\nDESCRIPTION: Function for submitting proposals to change pool parameters (taker fee, maker fee, stake required). Users must have non-zero active stake to submit proposals, and they automatically vote for their submitted proposal. Each user can only have one active proposal per epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/staking-governance.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun submit_proposal(\n    self: &mut Pool,\n    balance_manager: &mut BalanceManager,\n    taker_fee_rate: u64,\n    maker_rebate_rate: u64,\n    stake_required: u64,\n    ctx: &mut TxContext\n) {\n    let epoch = tx_context::epoch(ctx);\n    let clock = pool_governance::clock();\n    let pool_id = object::id(self);\n    let staking_record = begin_with_mut(&mut balance_manager.staking_records, pool_id);\n    assert!(epoch == self.last_epoch_updated, EWrongEpoch);\n    assert!(staking_record.active_stake > 0, EInsufficientStake);\n    assert!(maker_rebate_rate <= taker_fee_rate, EInvalidRebateRate);\n    assert!(option::is_none(&staking_record.proposal_voted_for), EAlreadyVoted);\n\n    let proposals = &mut self.proposals;\n    let owner = tx_context::sender(ctx);\n    let proposal = Proposal {\n        owner,\n        taker_fee_rate,\n        maker_rebate_rate,\n        stake_required,\n        vote_count: staking_record.active_stake,\n    };\n    \n    let uid = object::new(ctx);\n    let id = object::uid_to_inner(&uid);\n    object::delete(uid);\n    table::add(proposals, id, proposal);\n    option::fill(&mut staking_record.proposal_voted_for, id);\n\n    if (table::length(proposals) > MAX_PROPOSALS) {\n        let min_proposal_id = get_min_proposal_id(proposals);\n        let min_proposal = table::remove(proposals, min_proposal_id);\n        let Proposal { owner, taker_fee_rate: _, maker_rebate_rate: _, stake_required: _, vote_count: _ } = min_proposal;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed-Point Value from Rational (Move)\nDESCRIPTION: Creates a fixed-point value from a rational number specified by its numerator and denominator. It handles scaling, division, and range checking to ensure the result is within the valid fixed-point range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/fixed_point32.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create_from_rational(numerator: u64, denominator: u64): FixedPoint32 {\n    let scaled_numerator = numerator as u128 << 64;\n    let scaled_denominator = denominator as u128 << 32;\n    assert!(scaled_denominator != 0, EDENOMINATOR);\n    let quotient = scaled_numerator / scaled_denominator;\n    assert!(quotient != 0 || numerator == 0, ERATIO_OUT_OF_RANGE);\n    assert!(quotient <= MAX_U64, ERATIO_OUT_OF_RANGE);\n    FixedPoint32 { value: quotient as u64 }\n}\n```\n\n----------------------------------------\n\nTITLE: Inverting BLS12-381 Scalar Element\nDESCRIPTION: Computes the multiplicative inverse of a BLS12-381 scalar element by dividing one by it.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun scalar_inv(e: &Element<Scalar>): Element<Scalar> {\n    scalar_div(e, &scalar_one())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New BalanceManager in Move\nDESCRIPTION: Creates a BalanceManager hot potato with no abilities that must be combined with share or the transaction fails. Can be combined with deposit calls to create, deposit, and share in one transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/balance-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic fun new(ctx: &mut TxContext): BalanceManager {\n    BalanceManager {\n        id: object::new(ctx),\n        owner: tx_context::sender(ctx),\n        balances: table::new(ctx),\n        caps: vec_set::empty(ctx),\n        locked: table::new(ctx),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Coin to Token in Sui Token Module\nDESCRIPTION: Converts an open Coin into a Token. Creates an ActionRequest for the \"from_coin\" action and returns both the new Token and the request.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\npublic fun from_coin<T>(coin: Coin<T>, ctx: &mut TxContext): (Token<T>, ActionRequest<T>) {\n    let amount = coin.value();\n    let token = Token {\n        id: object::new(ctx),\n        balance: coin.into_balance(),\n    };\n    (\n        token,\n        new_request(\n            from_coin_action(),\n            amount,\n            option::none(),\n            option::none(),\n            ctx,\n        ),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Display Object in Sui Move\nDESCRIPTION: Function signature for creating a new Display object for a type T. The publisher must be the publisher of type T, verified by a from_package check.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/display.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule sui::display;\n\n/// Get a new Display object for the `T`.\n/// Publisher must be the publisher of the T, `from_package`\n/// check is performed.\npublic fun new<T>(pub: &Publisher): Display<T> { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Building Offline Transactions in Sui\nDESCRIPTION: This code shows how to build a Sui transaction offline without a provider. It demonstrates defining input values and object references explicitly for use in an offline environment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inputs } from '@mysten/sui/transactions';\n\n// For pure values:\ntx.pure(pureValueAsBytes);\n\n// For owned or immutable objects:\ntx.object(Inputs.ObjectRef({ digest, objectId, version }));\n\n// For shared objects:\ntx.object(Inputs.SharedObjectRef({ objectId, initialSharedVersion, mutable }));\n```\n\n----------------------------------------\n\nTITLE: Simulating Time Progress in Test Scenarios\nDESCRIPTION: This function is used in test scenarios to simulate the progress of time. It finishes the current transaction and epoch in the test scenario and increments the timestamp by a specified number of milliseconds.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/access-time.mdx#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun later_epoch(scenario: &mut Scenario, delta_ms: u64) {\n    next_epoch(scenario);\n    Scenario { epoch_timestamp_ms: scenario.epoch_timestamp_ms + delta_ms, ..scenario }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting SUI Tokens via TypeScript SDK\nDESCRIPTION: Demonstrates how to request tokens using the Sui TypeScript SDK. Uses the getFaucetHost and requestSuiFromFaucetV0 functions to connect to the Devnet faucet server.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/get-coins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFaucetHost, requestSuiFromFaucetV0 } from '@mysten/sui/faucet';\n\n// get tokens from the Devnet faucet server\nawait requestSuiFromFaucetV0({\n\t// connect to Devnet\n\thost: getFaucetHost('devnet'),\n\trecipient: '<YOUR SUI ADDRESS>',\n});\n```\n\n----------------------------------------\n\nTITLE: Locked Object Transfer to Specific Address\nDESCRIPTION: Defines an alternative transfer function that only allows locked objects to be transferred to a predefined home address\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transfers/custom-rules.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nconst EObjectNotLocked: u64 = 1;\nconst HOME_ADDRESS = @0xCAFE;\n\npublic fun transfer_locked(object: Object) {\n    assert!(!object.unlocked, EObjectNotLocked);\n    transfer::transfer(object, HOME_ADDRESS)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gift Shop Token Spending\nDESCRIPTION: Example implementation of a gift shop purchase function that demonstrates token spending with approval stamping. Shows how to spend tokens and authorize the transaction using a rule-like witness pattern.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/spending.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\n/// Rule-like witness to stamp the ActionRequest\nstruct GiftShop has drop {}\n\n/// Spend the token and return a Gift + ActionRequest\npublic fun buy_gift(\n    token: Token<CREDITS>,\n    ctx: &mut TxContext\n): (Gift, ActionRequest<CREDITS>) {\n\n    // token is spent\n    let action_request = token::spend(token, ctx);\n\n    // stamp the ActionRequest as performed by GiftShop\n    token::add_approval(GiftShop {}, &mut action_request, ctx);\n\n    // return already stamped ActionRequest\n    (Gift { ... }, action_request)\n}\n```\n\n----------------------------------------\n\nTITLE: Value Borrowing in Sui Kiosk\nDESCRIPTION: Function to temporarily remove an unlisted item with a return guarantee. Returns both the item and a borrow receipt.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_48\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow_val<T: key + store>(self: &mut Kiosk, cap: &KioskOwnerCap, id: ID): (T, Borrow) {\n    assert!(self.has_access(cap), ENotOwner);\n    assert!(self.has_item(id), EItemNotFound);\n    assert!(!self.is_listed(id), EItemIsListed);\n    (dof::remove(&mut self.id, Item { id }), Borrow { kiosk_id: object::id(self), item_id: id })\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Sui Package Using CLI\nDESCRIPTION: Command to publish a Sui package to the network using the Sui client CLI. Requires specifying a gas budget to cover transaction costs, with a recommended value of 20000000.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/publish-to-devnet-with-coins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsui client publish --gas-budget <GAS-BUDGET>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Receiving Object ID in Sui Move\nDESCRIPTION: Returns the object ID referenced by a Receiving argument, providing a way to inspect the object being received without completing the transfer.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun receiving_object_id<T: key>(receiving: &Receiving<T>): ID {\n    receiving.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SECP256R1 Address\nDESCRIPTION: Creates a new Sui address using the SECP256R1 key scheme.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsui client new-address secp256r1\n```\n\n----------------------------------------\n\nTITLE: Advancing Epoch in Sui System\nDESCRIPTION: This function is called at the end of an epoch to advance the system state. It handles storage rewards, computation charges, validator stake distribution, and other epoch-transition tasks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_37\n\nLANGUAGE: Move\nCODE:\n```\nfun advance_epoch(\n    storage_reward: Balance<SUI>,\n    computation_reward: Balance<SUI>,\n    wrapper: &mut SuiSystemState,\n    new_epoch: u64,\n    next_protocol_version: u64,\n    storage_rebate: u64,\n    non_refundable_storage_fee: u64,\n    storage_fund_reinvest_rate: u64, // share of storage fund's rewards that's reinvested\n    // into storage fund, in basis point.\n    reward_slashing_rate: u64, // how much rewards are slashed to punish a validator, in bps.\n    epoch_start_timestamp_ms: u64, // Timestamp of the epoch start\n    ctx: &mut TxContext,\n): Balance<SUI> {\n    // Validator will make a special system call with sender set as 0x0.\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    let storage_rebate = wrapper\n        .load_system_state_mut()\n        .advance_epoch(\n            new_epoch,\n            next_protocol_version,\n            storage_reward,\n            computation_reward,\n            storage_rebate,\n            non_refundable_storage_fee,\n            storage_fund_reinvest_rate,\n            reward_slashing_rate,\n            epoch_start_timestamp_ms,\n            ctx,\n        );\n    storage_rebate\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Coins in Move\nDESCRIPTION: Splits a Coin into two, creating a new Coin with the specified amount. This function requires a mutable reference to the original Coin, the amount to split, and a transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun split<T>(self: &mut Coin<T>, split_amount: u64, ctx: &mut TxContext): Coin<T> {\n    take(&mut self.balance, split_amount, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Object Definition with Key Ability in Sui Move\nDESCRIPTION: Illustrates the requirement for objects to have a unique identifier (UID) and the key ability in Sui's Move implementation\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nstruct ExampleObject has key {\n    id: UID\n    // Additional object fields\n}\n```\n\n----------------------------------------\n\nTITLE: Build Sui Node Docker Image\nDESCRIPTION: This script executes the deterministic build process for the Sui Node. The resulting Docker image is output to the `build/oci/sui-node` directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/sui-node-deterministic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"./docker/sui-node-deterministic/build.sh\"\n```\n\n----------------------------------------\n\nTITLE: Update Address Alias using Sui Keytool\nDESCRIPTION: This command changes the alias associated with a Sui address from the old alias to the new alias specified.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"sui keytool update-alias OLD_ALIAS NEW_ALIAS\"\n```\n\n----------------------------------------\n\nTITLE: Adding Child Object in Move\nDESCRIPTION: This native function adds a child object to a parent object in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) native fun add_child_object<Child: key>(parent: address, child: Child);\n```\n\n----------------------------------------\n\nTITLE: Returning Quote Assets from Flash Loan in DeepBook (Move)\nDESCRIPTION: This function handles the return of borrowed quote assets to the Pool. Similar to returning base assets, the FlashLoan object is unwrapped only if the correct amount of assets are returned, otherwise the transaction fails.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/flash-loans.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun return_flashloan_quote<BaseAsset, QuoteAsset>(pool: &mut Pool<BaseAsset, QuoteAsset>, loan: FlashLoan<QuoteAsset>, coin: Coin<QuoteAsset>) {\n    // Emit event\n    event::emit(FlashLoanReturnEvent<QuoteAsset, BaseAsset> {\n        pool_id: *object::id(pool),\n        amount: loan.amount,\n    });\n\n    let pool_id = *object::id(pool);\n    assert!(pool_id == loan.pool_id, EWrongPool);\n    let FlashLoan {pool_id: _, amount} = loan;\n    assert!(coin::value(&coin) >= amount, EInsufficientAmount);\n\n    let coin_balance = coin::into_balance(coin);\n    balance::join(&mut pool.quote, coin_balance);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Option Presence with Predicate in Move\nDESCRIPTION: Defines an is_some_and macro for Option types, which checks if an Option is present and fulfills a predicate. Returns false if the Option is None, otherwise returns the result of the predicate. Relies on std::option and std::bool modules. The primary input is an Option reference and a predicate function, yielding a boolean output.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_28\n\nLANGUAGE: move\nCODE:\n```\n<b>public</b> <b>macro</b> <b>fun</b> <a href=\"../std/option.md#std_option_is_some_and\">is_some_and</a>&lt;$T&gt;($o: &<a href=\"../std/option.md#std_option_Option\">Option</a>&lt;$T&gt;, $f: |&$T| -&gt; <a href=\"../std/bool.md#std_bool\">bool</a>): <a href=\"../std/bool.md#std_bool\">bool</a> {\n    <b>let</b> o = $o;\n    o.<a href=\"../std/option.md#std_option_is_some\">is_some</a>() && $f(o.<a href=\"../std/option.md#std_option_borrow\">borrow</a>())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to Display Object in Move\nDESCRIPTION: Private method for inserting fields into a Display object without performing security checks. Takes a display object, field name, and value as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\nfun add_internal<T: key>(display: &mut Display<T>, name: String, value: String) {\n    display.fields.insert(name, value)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Rule for Token Action in Move\nDESCRIPTION: Removes a rule for an action with a given name in the TokenPolicy. Aborts if the TokenPolicyCap doesn't match the TokenPolicy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_33\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove_rule_for_action<T, Rule: drop>(\n    self: &mut TokenPolicy<T>,\n    cap: &TokenPolicyCap<T>,\n    action: String,\n    _ctx: &mut TxContext,\n) {\n    assert!(object::id(self) == cap.for, ENotAuthorized);\n    self.rules.get_mut(&action).remove(&type_name::get<Rule>())\n}\n```\n\n----------------------------------------\n\nTITLE: Secp256r1 Non-recoverable Signature Verification\nDESCRIPTION: Generate and verify Secp256r1 non-recoverable signatures using CLI and Move contract\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/signing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ntarget/debug/sigs-cli keygen --scheme secp256r1 --seed 0000000000000000000000000000000000000000000000000000000000000000\ntarget/debug/sigs-cli sign --scheme secp256r1 --msg $MSG --secret-key $SK\n```\n\nLANGUAGE: move\nCODE:\n```\n    use sui::ecdsa_r1;\n\n    let msg = x\"$MSG\";\n    let pk = x\"$PK\";\n    let sig = x\"$SIG\";\n    let verify = ecdsa_r1::secp256r1_verify(&sig, &pk, &msg, 1);\n    assert!(verify == true, 0);\n```\n\n----------------------------------------\n\nTITLE: Order Event Definitions in Move\nDESCRIPTION: Defines event structs for order lifecycle tracking including placement, cancellation, and filling. Each event captures relevant order details for monitoring order status changes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/orders.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nstruct OrderPlaced<phantom BaseAsset, phantom QuoteAsset> has copy, store, drop {\n    order_id: u64,\n    is_bid: bool,\n    owner: ID,\n    base_asset_quantity_placed: u64,\n    price: u64\n}\n\nstruct OrderCanceled<phantom BaseAsset, phantom QuoteAsset> has copy, store, drop {\n    order_id: u64,\n    is_bid: bool,\n    owner: ID,\n    base_asset_quantity_canceled: u64,\n    price: u64\n}\n\nstruct OrderFilled<phantom BaseAsset, phantom QuoteAsset> has copy, store, drop {\n    order_id: u64,\n    is_bid: bool,\n    owner: ID,\n    total_quantity: u64,\n    base_asset_quantity_filled: u64,\n    base_asset_quantity_remaining: u64,\n    price: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Stake and Gas Price in Move\nDESCRIPTION: Processes pending stake changes for each validator in the set, adjusting their stake and gas price.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_51\n\nLANGUAGE: Move\nCODE:\n```\nfun adjust_stake_and_gas_price(validators: &mut vector<Validator>) {\n    validators.do_mut!(|v| v.adjust_stake_and_gas_price())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New ObjectBag in Move\nDESCRIPTION: Function to create a new, empty ObjectBag.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_bag.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new(ctx: &mut TxContext): ObjectBag {\n    ObjectBag {\n        id: object::new(ctx),\n        size: 0,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenizedAsset struct for NFT/FT representation in Rust\nDESCRIPTION: The TokenizedAsset struct represents a minted asset with specified balance. It can function as either an NFT (when VecMap contains entries) or an FT (when VecMap is empty). It includes balance tracking and optional metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct TokenizedAsset<phantom T> has key, store {\n        id: UID,\n        /// The balance of the tokenized asset\n        balance: Balance<T>,\n        /// If the VecMap is populated, it is considered an NFT, else the asset is considered an FT.\n        metadata: VecMap<String, String>,\n        /// URL for the asset image (optional)\n        image_url: Option<Url>,\n    }\n```\n\n----------------------------------------\n\nTITLE: Zero-Based Loop Implementation (Inclusive)\nDESCRIPTION: Implements a loop that applies a function to each value from 0 to stop (inclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do_eq<$R: drop>($stop: u256, $f: |u256| -> $R) {\n    std::macros::do_eq!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Exchange Rates Table in Move\nDESCRIPTION: A package-scoped function to access the exchange rates table of a staking pool. Returns a reference to the table mapping epochs to exchange rates.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_40\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun exchange_rates(pool: &StakingPool): &Table<u64, PoolTokenExchangeRate> {\n    &pool.exchange_rates\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Sharing Config Objects in Move\nDESCRIPTION: Implements functions for creating new Config objects and sharing them in the Sui network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/config.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun new<WriteCap>(_cap: &mut WriteCap, ctx: &mut TxContext): Config<WriteCap> {\n    Config<WriteCap> { id: object::new(ctx) }\n}\n\npublic(package) fun share<WriteCap>(config: Config<WriteCap>) {\n    transfer::share_object(config)\n}\n\npublic(package) fun transfer<WriteCap>(config: Config<WriteCap>, owner: address) {\n    transfer::transfer(config, owner)\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling All Orders in DeepBookV3 with TypeScript\nDESCRIPTION: Function to cancel all orders for a specific balance manager. Takes pool key and balance manager key parameters. Returns a function that takes a Transaction object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/orders.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ncancelAllOrders(poolKey: string, balanceManagerKey: string);\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum of Two u64 Values in Move\nDESCRIPTION: Returns the larger of two u64 values using the standard library macro for number comparison.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max(x: u64, y: u64): u64 {\n    std::macros::num_max!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Clock Struct in Move\nDESCRIPTION: Defines the Clock struct as a singleton shared object that exposes time to Move calls. Located at address 0x6 and can only be read via immutable references in entry functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/clock.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Clock has key {\n    id: sui::object::UID,\n    timestamp_ms: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Example Transaction Response from Sui Multisig Execution\nDESCRIPTION: Shows a sample response from a successful multisignature transaction execution, including transaction digest, sender information, gas details, and transaction kind information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nTransaction Digest: 7mBWUxT6HUVDa8bii3PZJc7nhWqefTLNTsGbHYnx7ZA4\n╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Transaction Data                                                                                                                                                                                                                                                                                                                        │\n├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ Sender: 0xfc9a64c928a09725cfe01478ad50c2418320b4c079d944ed430eff0f30666a35                                                                                                                                                                                                                                                              │\n│ Gas Owner: 0xfc9a64c928a09725cfe01478ad50c2418320b4c079d944ed430eff0f30666a35                                                                                                                                                                                                                                                           │\n│ Gas Budget: 2997880 MIST                                                                                                                                                                                                                                                                                                                │\n│ Gas Price: 1000 MIST                                                                                                                                                                                                                                                                                                                    │\n│ Gas Payment:                                                                                                                                                                                                                                                                                                                            │\n│  ┌──                                                                                                                                                                                                                                                                                                                                    │\n│  │ ID: 0xc62a5e163e599729509d6cebde097cac04e5d1b3bbc9a169144e8dfa602a0768                                                                                                                                                                                                                                                               │\n│  │ Version: 289574879                                                                                                                                                                                                                                                                                                                   │\n│  │ Digest: 2PMc8L67YbZmna4hoaryX9cZZFSgFNPEYPEeCqcDPCcX                                                                                                                                                                                                                                                                                 │\n│  └──                                                                                                                                                                                                                                                                                                                                    │\n│                                                                                                                                                                                                                                                                                                                                         │\n│ Transaction Kind: Programmable                                                                                                                                                                                                                                                                                                          │\n│ ╭──────────────────────────────────────────────────────────────────────────────────────────────────────────╮                                                                                                                                                                                                                            │\n│ │ Input Objects                                                                                            │                                                                                                                                                                                                                            │\n│ ├──────────────────────────────────────────────────────────────────────────────────────────────────────────┤                                                                                                                                                                                                                            │\n│ │ 0   Pure Arg: Type: address, Value: \"0x65437300e280695a40df8cf524c7bca6ad62574cac3a52d3b085ad628c797241\" │                                                                                                                                                                                                                            │\n│ │ 1   Imm/Owned Object ID: 0xe7acb59c190d7fcfcb622916e929c92007f6da15128fd84c8a2afd94a39edf11              │                                                                                                                                                                                                                            │\n│ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────╯                                                                                                                                                                                                                            │\n│ ╭──────────────────────╮                                                                                                                                                                                                                                                                                                                │\n│ │ Commands             │                                                                                                                                                                                                                                                                                                                │\n│ ├──────────────────────┤                                                                                                                                                                                                                                                                                                                │\n│ │ 0  TransferObjects:  │                                                                                                                                                                                                                                                                                                                │\n│ │  ┌                   │                                                                                                                                                                                                                                                                                                                │\n│ │  │ Arguments:        │                                                                                                                                                                                                                                                                                                                │\n```\n\n----------------------------------------\n\nTITLE: Checking Per-Type Config Existence in Sui Deny List (Move)\nDESCRIPTION: Function that checks if a configuration for a specific type exists in the deny list. Returns a boolean indicating existence.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\nfun per_type_exists(deny_list: &DenyList, per_type_index: u64, per_type_key: vector<u8>): bool {\n    let key = ConfigKey { per_type_index, per_type_key };\n    ofield::exists_(&deny_list.id, key)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Gas Balance\nDESCRIPTION: Verify the gas balance of the active address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client gas\n```\n\n----------------------------------------\n\nTITLE: Transferring Objects with Sui Move\nDESCRIPTION: This snippet demonstrates how to transfer objects to both addresses and object IDs using the `public_transfer` function. It highlights the interchangeable use of object IDs and addresses in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transfers/transfer-to-object.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\n// 0xADD is an address\n// 0x0B is an object ID\n// b and c are objects\n\n// Transfers the object `b` to the address 0xADD\ntransfer::public_transfer(b, @0xADD);\n\n// Transfers the object `c` to the object with object ID 0x0B\ntransfer::public_transfer(c, @0x0B);\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Value for Next Epoch in Move\nDESCRIPTION: Adds or updates a configuration value for the next epoch. If the value exists for a previous epoch, it is moved to older_value_opt. Returns the removed value if any.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/config.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun add_for_next_epoch<WriteCap, Name: copy + drop + store, Value: copy + drop + store>(\n    config: &mut Config<WriteCap>,\n    _cap: &mut WriteCap,\n    name: Name,\n    value: Value,\n    ctx: &mut TxContext,\n): Option<Value>\n```\n\n----------------------------------------\n\nTITLE: Object Constants in Move\nDESCRIPTION: Defines system-wide constants including hardcoded IDs for singleton system objects like Sui System State, Clock, Authenticator State etc.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nconst SUI_SYSTEM_STATE_OBJECT_ID: address = 0x5;\nconst SUI_CLOCK_OBJECT_ID: address = 0x6;\nconst SUI_AUTHENTICATOR_STATE_ID: address = 0x7;\nconst SUI_RANDOM_ID: address = 0x8;\nconst SUI_DENY_LIST_OBJECT_ID: address = 0x403;\nconst SUI_BRIDGE_ID: address = 0x9;\nconst ENotSystemAddress: u64 = 0;\n```\n\n----------------------------------------\n\nTITLE: Token Spend Method Definition in Move\nDESCRIPTION: Core spend method signature from the sui::token module that enables token spending functionality. The method consumes a Token object and returns an ActionRequest containing the spent balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/spending.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n// module sui::token\npublic fun spend<T>(token: Token<T>, ctx: &mut TxContext): ActionRequest<T>;\n```\n\n----------------------------------------\n\nTITLE: Finding Next Leaf in CritbitTree (Move)\nDESCRIPTION: Locates the next leaf in the CritbitTree given a key. It traverses the tree to find the leaf with the smallest key larger than the given key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun next_leaf<V: store>(tree: &CritbitTree<V>, key: u64): (u64, u64) {\n    let (_, mut index) = find_leaf(tree, key);\n    assert!(index != PARTITION_INDEX, ELeafNotExist);\n    let mut ptr = MAX_U64 - index;\n    let mut parent = table::borrow(&tree.leaves, index).parent;\n    while (parent != PARTITION_INDEX && !is_left_child(tree, parent, ptr)){\n        ptr = parent;\n        parent = table::borrow(&tree.internal_nodes, ptr).parent;\n    };\n    if(parent == PARTITION_INDEX) {\n        return (0, PARTITION_INDEX)\n    };\n    index = MAX_U64 - left_most_leaf(tree, table::borrow(&tree.internal_nodes, parent).right_child);\n    let key = table::borrow(&tree.leaves, index).key;\n    return (key, index)\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Day of Week Upgrade Policy Implementation\nDESCRIPTION: The full implementation of the 'Day of Week' upgrade policy, including all necessary functions, error handling, and logic for authorizing upgrades based on the day of the week.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\nmodule policy::day_of_week;\n\nuse sui::package;\n\n// Day is not a week day (number in range 0 <= day < 7).\nconst ENotWeekDay: u64 = 1;\nconst ENotAllowedDay: u64 = 2;\nconst MS_IN_DAY: u64 = 24 * 60 * 60 * 1000;\n\npublic struct UpgradeCap has key, store {\n    id: UID,\n    cap: package::UpgradeCap,\n    day: u8,\n}\n\npublic fun new_policy(\n    cap: package::UpgradeCap,\n    day: u8,\n    ctx: &mut TxContext,\n): UpgradeCap {\n    assert!(day < 7, ENotWeekDay);\n    UpgradeCap { id: object::new(ctx), cap, day }\n}\n\nfun week_day(ctx: &TxContext): u8 {\n    let days_since_unix_epoch = ctx.epoch_timestamp_ms() / MS_IN_DAY;\n    // The unix epoch (1st Jan 1970) was a Thursday so shift days\n    // since the epoch by 3 so that 0 = Monday.\n    ((days_since_unix_epoch + 3) % 7 as u8)\n}\n\npublic fun authorize_upgrade(\n    cap: &mut UpgradeCap,\n    policy: u8,\n    digest: vector<u8>,\n    ctx: &TxContext,\n): package::UpgradeTicket {\n    assert!(week_day(ctx) == cap.day, ENotAllowedDay);\n    cap.cap.authorize_upgrade(policy, digest)\n}\n\npublic fun commit_upgrade(\n    cap: &mut UpgradeCap,\n    receipt: package::UpgradeReceipt,\n) {\n    cap.cap.commit_upgrade(receipt)\n}\n\npublic fun make_immutable(cap: UpgradeCap) {\n    let UpgradeCap { id, cap, day: _ } = cap;\n    id.delete();\n    cap.make_immutable()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interaction and Registry Structures in Sui Move\nDESCRIPTION: Implements structures for storing interaction data and a registry, along with an initialization function for the registry.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/recaptcha.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct Interaction has copy, drop {\n    sender: address, // The address of the sender\n    timestamp_ms: u64, // The timestamp in milliseconds\n}\n\n// Define a struct for the registry object that has a key field\nstruct Registry has key {\n    id: UID, // The unique identifier of the registry object\n    window: u64, // The length of the time window in milliseconds\n}\n\n// Define a function for initializing the registry\nfun init(ctx: &mut TxContext) {\n    // Share the registry object with other participants\n    transfer::share_object(\n        Registry {\n            id: object::new(ctx), // Create a new object with a unique id\n            window: TIME_WINDOW, // Set the time window to the constant value\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Object Field\nDESCRIPTION: Adds a dynamic object field to a target object with specified name and value. Aborts if field already exists.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add<Name: copy + drop + store, Value: key + store>(\n    object: &mut UID,\n    name: Name,\n    value: Value,\n) {\n    add_impl!(object, name, value)\n}\n```\n\n----------------------------------------\n\nTITLE: Address Conversion Functions\nDESCRIPTION: Core functions for converting addresses between different formats including u256, bytes, and string representations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/address.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun to_u256(a: address): u256;\npublic native fun from_u256(n: u256): address;\npublic native fun from_bytes(bytes: vector<u8>): address;\n\npublic fun to_bytes(a: address): vector<u8> {\n    bcs::to_bytes(&a)\n}\n\npublic fun to_ascii_string(a: address): ascii::String {\n    hex::encode(to_bytes(a)).to_ascii_string()\n}\n\npublic fun to_string(a: address): string::String {\n    to_ascii_string(a).to_string()\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Quote Assets via Flash Loan in DeepBook (Move)\nDESCRIPTION: This function enables borrowing quote assets from a DeepBook Pool. Similar to base assets, it returns a FlashLoan hot potato that requires repayment within the same transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/flash-loans.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun borrow_flashloan_quote<BaseAsset, QuoteAsset>(pool: &mut Pool<BaseAsset, QuoteAsset>, amount: u64, ctx: &mut TxContext): (Coin<QuoteAsset>, FlashLoan<QuoteAsset>) {\n    // Emit event\n    event::emit(FlashLoanBorrowEvent<QuoteAsset, BaseAsset> {\n        pool_id: *object::id(pool),\n        amount,\n    });\n\n    let c = balance::split(&mut pool.quote, amount);\n    let loan = FlashLoan<QuoteAsset> {\n        pool_id: object::id(pool),\n        amount,\n    };\n\n    (coin::from_balance(c, ctx), loan)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Regulated Currency with Freeze Capability\nDESCRIPTION: This function creates a regulated currency that allows specific addresses to have their coins frozen. When an address is added to the deny list, it is immediately unable to interact with the currency's coin, and in the next epoch it cannot receive the currency's coin.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_19\n\nLANGUAGE: move\nCODE:\n```\npublic fun create_regulated_currency_v2<T: drop>(\n    witness: T,\n    decimals: u8,\n    symbol: vector<u8>,\n    name: vector<u8>,\n    description: vector<u8>,\n    icon_url: Option<Url>,\n    allow_global_pause: bool,\n    ctx: &mut TxContext,\n): (TreasuryCap<T>, DenyCapV2<T>, CoinMetadata<T>) {\n    let (treasury_cap, metadata) = create_currency(\n        witness,\n        decimals,\n        symbol,\n        name,\n        description,\n        icon_url,\n        ctx,\n    );\n    let deny_cap = DenyCapV2 {\n        id: object::new(ctx),\n        allow_global_pause,\n    };\n    transfer::freeze_object(RegulatedCoinMetadata<T> {\n        id: object::new(ctx),\n        coin_metadata_object: object::id(&metadata),\n        deny_cap_object: object::id(&deny_cap),\n    });\n    (treasury_cap, deny_cap, metadata)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multisig Address\nDESCRIPTION: Creates a multisig address with specified weights and threshold using public keys.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsui keytool multi-sig-address --pks $PKEY_1 $PKEY_2 $PKEY_3 --weights 1 2 3 --threshold 3\n```\n\n----------------------------------------\n\nTITLE: Order Structure Definition in Move\nDESCRIPTION: Core order struct containing all order details including ID, price, quantities, owner and expiration information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Order has drop, store\n```\n\n----------------------------------------\n\nTITLE: Adding Validator Candidate to Sui System in Move\nDESCRIPTION: Implementation of request_add_validator_candidate function that allows anyone to become a validator candidate and start accruing delegated stakes. This function requires various public keys, proof of possession and validator metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun request_add_validator_candidate(\n    wrapper: &mut SuiSystemState,\n    pubkey_bytes: vector<u8>,\n    network_pubkey_bytes: vector<u8>,\n    worker_pubkey_bytes: vector<u8>,\n    proof_of_possession: vector<u8>,\n    name: vector<u8>,\n    description: vector<u8>,\n    image_url: vector<u8>,\n    project_url: vector<u8>,\n    net_address: vector<u8>,\n    p2p_address: vector<u8>,\n    primary_address: vector<u8>,\n    worker_address: vector<u8>,\n    gas_price: u64,\n    commission_rate: u64,\n    ctx: &mut TxContext,\n) {\n    wrapper\n        .load_system_state_mut()\n        .request_add_validator_candidate(\n            pubkey_bytes,\n            network_pubkey_bytes,\n            worker_pubkey_bytes,\n            proof_of_possession,\n            name,\n            description,\n            image_url,\n            project_url,\n            net_address,\n            p2p_address,\n            primary_address,\n            worker_address,\n            gas_price,\n            commission_rate,\n            ctx,\n        )\n}\n```\n\n----------------------------------------\n\nTITLE: Depositing Staking Rewards - Move\nDESCRIPTION: Handles the deposit of SUI rewards into the staking pool during epoch advancement. Updates pool balance and rewards tracking.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_16\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun deposit_rewards(pool: &mut StakingPool, rewards: Balance<SUI>) {\n    pool.sui_balance = pool.sui_balance + rewards.value();\n    pool.rewards_pool.join(rewards);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Element in LinkedTable (Move)\nDESCRIPTION: Borrows the key for the next entry of a specified key in the LinkedTable. Returns None if the entry does not have a successor. Aborts if the table does not contain the specified key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun next<K: copy + drop + store, V: store>(table: &LinkedTable<K, V>, k: K): &Option<K> {\n    &field::borrow<K, Node<K, V>>(&table.id, k).next\n}\n```\n\n----------------------------------------\n\nTITLE: Mutably Borrowing Dynamic Object Field\nDESCRIPTION: Mutably borrows an object's dynamic field. Aborts if field doesn't exist or type mismatch occurs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow_mut<Name: copy + drop + store, Value: key + store>(\n    object: &mut UID,\n    name: Name,\n): &mut Value {\n    borrow_mut_impl!(object, name)\n}\n```\n\n----------------------------------------\n\nTITLE: Value ID Getter for ObjectTable\nDESCRIPTION: Retrieves the ID of an object associated with a given key in the ObjectTable. Returns an Option of the object ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_table.md#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\npublic fun value_id<K: copy + drop + store, V: key + store>(\n    table: &ObjectTable<K, V>,\n    k: K,\n): Option<ID> {\n    ofield::id(&table.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence in Sui Table (Move)\nDESCRIPTION: Function that checks if a key exists in a Table. It returns a boolean indicating whether a value is associated with the given key in the table. Uses field::exists_with_type to perform the check.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic fun contains<K: copy + drop + store, V: store>(table: &Table<K, V>, k: K): bool {\n    field::exists_with_type<K, V>(&table.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Multiplying Integer by UQ64_64 in Move\nDESCRIPTION: Multiplies a u128 integer by a UQ64_64 fixed-point number, truncating any fractional part of the product. Aborts if the product overflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun int_mul(val: u128, multiplier: UQ64_64): u128 {\n    std::macros::uq_int_mul!<u128, u256>(\n        val,\n        multiplier.0,\n        std::u128::max_value!(),\n        FRACTIONAL_BITS,\n        abort EOverflow,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Epoch\nDESCRIPTION: Provides a function to retrieve the current epoch number from the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/tx_context.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun epoch(_self: &TxContext): u64 {\n    native_epoch()\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Longest Set Sequence in Bit Vector (Rust)\nDESCRIPTION: This function calculates the length of the longest sequence of set bits starting at a given index in a bit vector. It takes a BitVector and a starting index as input, and returns the length of the sequence as a u64. The function asserts that the start_index is within the bounds of the bit vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/bit_vector.md#2025-04-22_snippet_7\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun longest_set_sequence_starting_at(bitvector: &BitVector, start_index: u64): u64 {\n    assert!(start_index < bitvector.length, EINDEX);\n    let mut index = start_index;\n    // Find the greatest index in the vector such that all indices less than it are set.\n    while (index < bitvector.length) {\n        if (!bitvector.is_index_set(index)) break;\n        index = index + 1;\n    };\n    index - start_index\n}\n```\n\n----------------------------------------\n\nTITLE: Get Order Information\nDESCRIPTION: Functions to retrieve order information using order ID, multiple order IDs, or balance manager.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_13\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_order(self: &Pool, order_id: u64): Order\n```\n\n----------------------------------------\n\nTITLE: Defining Key Structs for Sui Package Management in Move\nDESCRIPTION: Defines the Publisher, UpgradeCap, UpgradeTicket, and UpgradeReceipt structs used for package management and upgrades in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Publisher has key, store {\n    id: sui::object::UID,\n    package: std::ascii::String,\n    module_name: std::ascii::String,\n}\n\npublic struct UpgradeCap has key, store {\n    id: sui::object::UID,\n    package: sui::object::ID,\n    version: u64,\n    policy: u8,\n}\n\npublic struct UpgradeTicket {\n    cap: sui::object::ID,\n    package: sui::object::ID,\n    policy: u8,\n    digest: vector<u8>,\n}\n\npublic struct UpgradeReceipt {\n    cap: sui::object::ID,\n    package: sui::object::ID,\n}\n```\n\n----------------------------------------\n\nTITLE: String Length Function Implementation\nDESCRIPTION: Returns the length of a string in bytes by accessing the underlying bytes vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun length(s: &String): u64 {\n    s.bytes.length()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining submit_sole_signed_transaction function in Rust\nDESCRIPTION: This code snippet defines a function `submit_sole_signed_transaction` in Rust. The function takes a `SenderSignedData` object and returns the result of the transaction as a tuple of `Transaction` and `CertifiedTransactionEffects`, or an error. This function is used in sponsored transactions with `GasData` objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/sponsored-transactions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n```rust\npub fn submit_sole_signed_transaction(sole_signed_data: SenderSignedData) -> Result<(Transaction, CertifiedTransactionEffects), Error>;\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Description in Move\nDESCRIPTION: Updates the description of a validator while ensuring the new description does not exceed the maximum length allowed for validator metadata. The function converts the byte vector to a string format.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_75\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_description(self: &mut Validator, description: vector<u8>) {\n    assert!(\n        description.length() <= MAX_VALIDATOR_METADATA_LENGTH,\n        EValidatorMetadataExceedingLengthLimit,\n    );\n    self.metadata.description = description.to_ascii_string().to_string();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting object ID as bytes\nDESCRIPTION: Gets the raw bytes for the underlying ID of a Sui object. This converts the ID to its BCS (Binary Canonical Serialization) representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_18\n\nLANGUAGE: move\nCODE:\n```\npublic fun id_bytes<T: key>(obj: &T): vector<u8> {\n    bcs::to_bytes(&borrow_uid(obj).id)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Entry from Map\nDESCRIPTION: Function to remove an entry from the map by its key. Returns the removed key-value pair. Aborts if the key doesn't exist.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove<K: copy, V>(self: &mut VecMap<K, V>, key: &K): (K, V) {\n    let idx = self.get_idx(key);\n    let Entry { key, value } = self.contents.remove(idx);\n    (key, value)\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Vectors in Sui Move\nDESCRIPTION: A function that concatenates a vector of vectors into a single vector, preserving the order of elements. It iterates through each inner vector and appends its elements to the result vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_26\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic fun flatten<T>(v: vector<vector<T>>): vector<T> {\n    let mut r = vector[];\n    v.do!(|u| r.append(u));\n    r\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Sui Transaction Profile with Speedscope\nDESCRIPTION: Command to open a generated transaction profile JSON file in Speedscope for visualization and analysis of gas consumption patterns.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n$ speedscope <PATH/PROFILE-OUTPUT-FILE>\n```\n\n----------------------------------------\n\nTITLE: Adding Stake with Locked Coin in Move\nDESCRIPTION: The `request_add_stake_with_locked_coin` function allows users to add their stake to a validator's pool using a locked SUI coin. It involves utilizing modules for locked coins and balance management. The function parameters include a mutable `SuiSystemState`, a locked SUI coin, the validator's address, and a mutable `TxContext`. It converts the locked coin into its balance and applies the lock in the staking process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/exchange-integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun request_add_stake_with_locked_coin(\n   self: &mut SuiSystemState,\n   stake: LockedCoin<SUI>,\n   validator_address: address,\n   ctx: &mut TxContext,\n) {\n   let (balance, lock) = locked_coin::into_balance(stake);\n   validator_set::request_add_stake(&mut self.validators, validator_address, balance, option::some(lock), ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Fungible Staked Sui Value in Move\nDESCRIPTION: Fetches the value of a fungible staked Sui entity. Requires a reference to FungibleStakedSui and returns a u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_30\n\nLANGUAGE: Move\nCODE:\n```\npublic fun fungible_staked_sui_value(fungible_staked_sui: &sui_system::staking_pool::FungibleStakedSui): u64 {\n    fungible_staked_sui.value\n}\n```\n\n----------------------------------------\n\nTITLE: ZKLogin Issuer Verification Function\nDESCRIPTION: Function to verify that a caller's address was created using zklogin with a specific issuer and create a corresponding VerifiedIssuer object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_issuer.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun verify_zklogin_issuer(address_seed: u256, issuer: String, ctx: &mut TxContext) {\n    let sender = ctx.sender();\n    assert!(check_zklogin_issuer(sender, address_seed, &issuer), EInvalidProof);\n    transfer::transfer(\n        VerifiedIssuer {\n            id: object::new(ctx),\n            owner: sender,\n            issuer,\n        },\n        sender,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Stake and Gas Price for a Validator\nDESCRIPTION: This function processes pending stake and withdrawals, and updates the gas price and commission rate for the next epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_30\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun adjust_stake_and_gas_price(self: &mut Validator) {\n    self.gas_price = self.next_epoch_gas_price;\n    self.commission_rate = self.next_epoch_commission_rate;\n}\n```\n\n----------------------------------------\n\nTITLE: Purchase Item from Kiosk\nDESCRIPTION: Executes a trade by processing payment and generating a transfer request. Verifies payment amount matches listing price and handles item removal from kiosk. Returns both the item and a transfer request for publisher approval.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\npublic fun purchase<T: key + store>(\n    self: &mut Kiosk,\n    id: ID,\n    payment: Coin<SUI>,\n): (T, TransferRequest<T>) {\n    let price = df::remove<Listing, u64>(&mut self.id, Listing { id, is_exclusive: false });\n    let inner = dof::remove<Item, T>(&mut self.id, Item { id });\n    self.item_count = self.item_count - 1;\n    assert!(price == payment.value(), EIncorrectAmount);\n    df::remove_if_exists<Lock, bool>(&mut self.id, Lock { id });\n    coin::put(&mut self.profits, payment);\n    event::emit(ItemPurchased<T> { kiosk: object::id(self), id, price });\n    (inner, transfer_policy::new_request(id, price, object::id(self)))\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Item Lock Status in Kiosk - Move\nDESCRIPTION: This function checks whether an item with a specific ID is locked within the Kiosk. It restricts actions that can be performed on the item based on its lock status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_34\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_locked(self: &sui::kiosk::Kiosk, id: sui::object::ID): bool {\n    df::exists_(&self.id, Lock { id })\n}\n```\n\n----------------------------------------\n\nTITLE: Converting u64 to u8 with Overflow Check\nDESCRIPTION: Function that attempts to convert a u64 value to u8, returning None if the value exceeds the maximum value of u8.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u8(x: u64): Option<u8> {\n    std::macros::try_as_u8!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Market Order with Smart Routing in TypeScript\nDESCRIPTION: Function that executes a market order using a predetermined routing path. It handles token swaps through multiple pools, managing bid/ask directions and token transfers between intermediate steps.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/routing-a-swap.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic async placeMarketOrderWithSmartRouting(\n    tokenInObject: string,\n    tokenTypeOut: string,\n    amountIn: number,\n    currentAddress: string,\n    path: string[],\n    overrides: Overrides = new Overrides(),\n): Promise<smartRouteResultWithExactPath> {\n    const tokenIn = overrides.txb.object(tokenInObject);\n    overrides.txb.setGasBudget(overrides.gasBudget);\n    overrides.txb.setSenderIfNotSet(currentAddress);\n    let i = 0;\n    let base_coin_ret, quote_coin_ret, amount;\n    let lastBid: boolean;\n    while (path[i]) {\n        const nextPath = path[i + 1] ? path[i + 1] : tokenTypeOut;\n        const poolInfo: PoolInfo = getPoolInfoByRecords(path[i], nextPath, this.records);\n        let _isBid, _tokenIn, _tokenOut, _amount;\n        if (i == 0) {\n            if (!poolInfo.needChange) {\n                _isBid = false;\n                _tokenIn = tokenIn;\n                _tokenOut = this.mint(nextPath, 0, {\n                    txb: overrides.txb,\n                });\n                _amount = overrides.txb.object(String(amountIn));\n            } else {\n                _isBid = true;\n                _tokenOut = tokenIn;\n                _amount = overrides.txb.object(String(amountIn));\n            }\n        } else {\n            if (!poolInfo.needChange) {\n                overrides.txb.transferObjects(\n                    [lastBid ? quote_coin_ret : base_coin_ret],\n                    overrides.txb.pure(currentAddress),\n                );\n                _isBid = false;\n                _tokenIn = lastBid ? base_coin_ret : quote_coin_ret;\n                _tokenOut = this.mint(nextPath, 0, {\n                    txb: overrides.txb,\n                });\n                _amount = amount;\n            } else {\n                overrides.txb.transferObjects(\n                    [lastBid ? quote_coin_ret : base_coin_ret],\n                    overrides.txb.pure(currentAddress),\n                );\n                _isBid = true;\n                _tokenOut = lastBid ? base_coin_ret : quote_coin_ret;\n                _amount = amount;\n            }\n        }\n        lastBid = _isBid;\n        if (_isBid) {\n            [base_coin_ret, quote_coin_ret, amount] = overrides.txb.moveCall({\n                typeArguments: [poolInfo.needChange ? nextPath : path[i], poolInfo.needChange ? path[i] : nextPath],\n                target: `${this.configs.swapPackageId}::clob::swap_exact_quote_for_base`,\n                arguments: [\n                    overrides.txb.object(String(poolInfo.clob)),\n                    _amount,\n                    overrides.txb.object(normalizeSuiObjectId(this.configs.clock)),\n                    _tokenOut,\n                ],\n            });\n        } else {\n            [base_coin_ret, quote_coin_ret, amount] = overrides.txb.moveCall({\n                typeArguments: [poolInfo.needChange ? nextPath : path[i], poolInfo.needChange ? path[i] : nextPath],\n                target: `${this.configs.swapPackageId}::clob::swap_exact_base_for_quote`,\n                arguments: [\n                    overrides.txb.object(String(poolInfo.clob)),\n                    _amount,\n                    _tokenIn,\n                    _tokenOut,\n                    overrides.txb.object(normalizeSuiObjectId(this.configs.clock)),\n                ],\n            });\n        }\n        if (nextPath == tokenTypeOut) {\n            overrides.txb.transferObjects([base_coin_ret], overrides.txb.pure(currentAddress));\n            overrides.txb.transferObjects([quote_coin_ret], overrides.txb.pure(currentAddress));\n            break;\n        } else {\n            i += 1;\n        }\n    }\n    const r = await this.suiClient.dryRunTransactionBlock({\n        transactionBlock: await overrides.txb.build({\n            client: this.suiClient,\n        }),\n    });\n    if (r.effects.status.status === 'success') {\n        for (const ele of r.balanceChanges) {\n            if (ele.coinType == tokenTypeOut) {\n                return {\n                    txb: overrides.txb,\n                    amount: Number(ele.amount),\n                };\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mutably Borrowing an Item from a Kiosk using Sui Move\nDESCRIPTION: This Sui Move code snippet shows how to mutably borrow an item from a Sui Kiosk. It defines a function that uses the 'borrow_mut' method from the 'kiosk' module to return a mutable reference to the item.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_13\n\nLANGUAGE: move\nCODE:\n```\nmodule examples::mutable_borrow;\n\nuse sui::kiosk::{Self, Kiosk, KioskOwnerCap};\n\npublic fun mutable_borrow_example<T>(\n    self: &mut Kiosk, cap: &KioskOwnerCap, item_id: ID\n): &mut T {\n    self.borrow_mut(cap, item_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Key Pair\nDESCRIPTION: This snippet shows how to use the 'sui keytool generate ed25519' command to create a new key pair using the ed25519 scheme. It generates a new Sui address, public key, and mnemonic phrase, saving the key pair to a file in the current directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/keytool.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sui keytool generate ed25519\n```\n\nLANGUAGE: shell\nCODE:\n```\n╭─────────────────┬───────────────────────────────────────────────────────────────────────────────────╮\n│ suiAddress      │  0x5d8aa70f17d9343813d3ba6a59ecf5e8a23ffb487938e860999a722989eaef25               │\n│ publicBase64Key │  AKTAGf9iv0JqeLXXlsr4PUzBXb9VY8lK7xiZMS50GSu6                                     │\n│ keyScheme       │  ed25519                                                                          │\n│ flag            │  0                                                                                │\n│ mnemonic        │  cushion price ability recall payment embody kid media rude mosquito chalk broom  │\n│ peerId          │  a4c019ff62bf426a78b5d796caf83d4cc15dbf5563c94aef1899312e74192bba                 │\n╰─────────────────┴───────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Confirming Action Request with Treasury Cap in Move\nDESCRIPTION: Function to confirm an ActionRequest as the TreasuryCap owner, allowing treasury cap owners to perform capability-gated actions while bypassing TokenPolicy ruleset. Can modify total supply through spent_balance consumption.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\npublic fun confirm_with_treasury_cap<T>(\n    treasury_cap: &mut TreasuryCap<T>,\n    request: ActionRequest<T>,\n    _ctx: &mut TxContext,\n): (String, u64, address, Option<address>) {\n    let ActionRequest {\n        name,\n        amount,\n        sender,\n        recipient,\n        approvals: _,\n        spent_balance,\n    } = request;\n    if (spent_balance.is_some()) {\n        treasury_cap.supply_mut().decrease_supply(spent_balance.destroy_some());\n    } else {\n        spent_balance.destroy_none();\n    };\n    (name, amount, sender, recipient)\n}\n```\n\n----------------------------------------\n\nTITLE: Advancing Epoch and Calculating Subsidy\nDESCRIPTION: Handles epoch advancement by calculating and withdrawing the appropriate subsidy amount, including decay logic at period boundaries.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/stake_subsidy.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun advance_epoch(self: &mut StakeSubsidy): Balance<SUI> {\n    let to_withdraw = self.current_distribution_amount.min(self.balance.value());\n    let stake_subsidy = self.balance.split(to_withdraw);\n    self.distribution_counter = self.distribution_counter + 1;\n    if (self.distribution_counter % self.stake_subsidy_period_length == 0) {\n        let decrease_amount =\n            self.current_distribution_amount as u128\n            * (self.stake_subsidy_decrease_rate as u128) / BASIS_POINT_DENOMINATOR;\n        self.current_distribution_amount =\n            self.current_distribution_amount - (decrease_amount as u64)\n    };\n    stake_subsidy\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Entry to Table in Move\nDESCRIPTION: Implements the add function to insert a new key-value pair into the Table, incrementing the size.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add<K: copy + drop + store, V: store>(table: &mut Table<K, V>, k: K, v: V) {\n    field::add(&mut table.id, k, v);\n    table.size = table.size + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unit and Tuple Return Types in Move\nDESCRIPTION: Examples of different ways to define and return unit values and tuples in Move. Shows equivalent functions returning unit values implicitly and explicitly, as well as functions returning tuples of various sizes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/primitive-types/tuples.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::example {\n    // all 3 of these functions are equivalent\n\n    // when no return type is provided, it is assumed to be `()`\n    fun returns_unit_1() { }\n\n    // there is an implicit () value in empty expression blocks\n    fun returns_unit_2(): () { }\n\n    // explicit version of `returns_unit_1` and `returns_unit_2`\n    fun returns_unit_3(): () { () }\n\n\n    fun returns_3_values(): (u64, bool, address) {\n        (0, false, @0x42)\n    }\n    fun returns_4_values(x: &u64): (&u64, u8, u128, vector<u8>) {\n        (x, 0, 1, b\"foobar\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Keys from a VecMap in Move\nDESCRIPTION: Returns a vector containing all keys in the VecMap. The order of keys in the output vector is not guaranteed to follow any particular ordering.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\npublic fun keys<K: copy, V>(self: &VecMap<K, V>): vector<K> {\n    let mut i = 0;\n    let n = self.contents.length();\n    let mut keys = vector[];\n    while (i < n) {\n        let entry = self.contents.borrow(i);\n        keys.push_back(entry.key);\n        i = i + 1;\n    };\n    keys\n}\n```\n\n----------------------------------------\n\nTITLE: OrderInfo Struct Definition\nDESCRIPTION: Definition of the OrderInfo struct which represents all order information and is returned when placing a limit or market order. This object is automatically dropped after the order completes or is placed in the book.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\n/// Information about an order that will be returned to the user for inspection.\n/// This type is dropped at the end of the transaction so it should be used\n/// immediately.\nstruct OrderInfo has drop {\n    /// The order id assigned to this order\n    order_id: ID,\n    /// The client order id provided by the client\n    client_order_id: u64,\n    /// The base asset id in the pool\n    base_asset: ID,\n    /// The quote asset id in the pool\n    quote_asset: ID,\n    /// The owner of this order\n    owner: address,\n    /// original desired quantity using external precision\n    original_quantity: u64,\n    /// price with external price tick size precision\n    price: u64,\n    /// remaining quantity with external precision\n    remaining_quantity: u64,\n    /// is it a bid (buy) or ask (sell) order\n    is_bid: bool,\n    /// Used for commission calculations\n    deep_price: OrderDeepPrice,\n    /// Expired at which tick\n    expire_timestamp: u64,\n    /// Creation timestamp\n    created_at: u64,\n    /// Self-matching behavior\n    self_matching_prevention: u8,\n    /// Order type\n    order_type: u8,\n    /// Was the order placed\n    is_placed: bool,\n    /// Total filled quantity with external precision\n    filled_quantity: u64,\n    /// Total filled quote quantity with external precision\n    filled_quote_quantity: u64,\n    /// Total fee paid with external precision\n    fee: u64,\n    /// Fee that will be paid in deep tokens. Only applies to taker orders that match.\n    fee_deep: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Command for Getting All Checkpoints\nDESCRIPTION: Simplified version of the previous command that achieves the same outcome of fetching all checkpoints using one thread without repeating the operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rpc-loadgen/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-rpc-loadgen -- --urls \"http://127.0.0.1:9000\" \"http://127.0.0.1:9124\" --num-threads 1 get-checkpoints\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Memory Profiling - Bash\nDESCRIPTION: This snippet provides the command to install required dependencies for memory profiling with jemalloc. It specifies necessary packages to manage the profiling setup.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/observability.mdx#2025-04-22_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\napt-get install libjemalloc-dev libunwind-dev graphviz\n```\n\n----------------------------------------\n\nTITLE: Getting the number of IDs created in a transaction in Sui Move\nDESCRIPTION: This native function returns the number of IDs created during the current transaction. It does not take any input parameters and returns a u64 representing the count of created IDs. It relies on the underlying Sui framework to provide the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/tx_context.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../sui/tx_context.md#sui_tx_context_native_ids_created\">native_ids_created</a>(): u64\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/tx_context.md#sui_tx_context_native_ids_created\">native_ids_created</a>(): u64;\n```\n\n----------------------------------------\n\nTITLE: Creating Customized Pool with Return\nDESCRIPTION: Function for creating a liquidity pool with configurable taker fee and maker rebate rates. Requires specifying tick size, lot size, fee rates, and a creation fee. Currently aborts with error code 1337.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create_customized_pool_with_return<BaseAsset, QuoteAsset>(\n    _tick_size: u64,\n    _lot_size: u64,\n    _taker_fee_rate: u64,\n    _maker_rebate_rate: u64,\n    _creation_fee: Coin<SUI>,\n    _ctx: &mut TxContext\n) : Pool<BaseAsset, QuoteAsset> {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UQ64_64 Struct in Move\nDESCRIPTION: Defines the UQ64_64 struct which represents a fixed-point numeric type with 64 integer bits and 64 fractional bits. This is implemented using an underlying 128-bit value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct UQ64_64 has copy, drop, store\n```\n\n----------------------------------------\n\nTITLE: Getting Reference to Active Validator in Move\nDESCRIPTION: Retrieves a reference to an active validator by address. This function aborts with ENotAValidator error if the validator is not found in the active validators list.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_42\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_active_validator_ref(self: &ValidatorSet, addr: address): &Validator {\n    let idx = find_validator(&self.active_validators, addr).destroy_or!(abort ENotAValidator);\n    &self.active_validators[idx]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Module Membership in Move\nDESCRIPTION: Verifies if a type belongs to the same module as the publisher object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_module<T>(self: &Publisher): bool {\n    let type_name = type_name::get_with_original_ids<T>();\n    (type_name.get_address() == self.package) && (type_name.get_module() == self.module_name)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies for Display Module in Move\nDESCRIPTION: List of module imports required for the Display module functionality, including standard libraries and other Sui modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nuse std::address;\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::type_name;\nuse std::vector;\nuse sui::address;\nuse sui::event;\nuse sui::hex;\nuse sui::object;\nuse sui::package;\nuse sui::transfer;\nuse sui::tx_context;\nuse sui::types;\nuse sui::vec_map;\n```\n\n----------------------------------------\n\nTITLE: Querying Order Status in Move\nDESCRIPTION: Function to retrieve order information given a pool, order ID and account capability. Returns detailed order information for the specified order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/query-the-pool.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_order_status<BaseAsset, QuoteAsset>(\n     pool: &Pool<BaseAsset, QuoteAsset>,\n     order_id: u64,\n     account_cap: &AccountCap\n): &Order\n```\n\n----------------------------------------\n\nTITLE: Checking if All Elements Satisfy a Predicate in Sui Move\nDESCRIPTION: A macro function that returns true if all elements in the vector satisfy the provided predicate function. If the vector is empty, it returns true. It short-circuits and returns false as soon as an element fails the predicate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_28\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun all<$T>($v: &vector<$T>, $f: |&$T| -> bool): bool {\n    let v = $v;\n    'all: {\n        v.do_ref!(|e| if (!$f(e)) return 'all false);\n        true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Depositing Funds into BalanceManager in Move\nDESCRIPTION: Function allowing the owner to deposit funds into the BalanceManager. Supports depositing coins of any type into the balance manager for trading.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/balance-manager.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic fun deposit<T>(self: &mut BalanceManager, coin: Coin<T>, ctx: &TxContext) {\n    assert!(self.owner == tx_context::sender(ctx), ENotOwner);\n\n    let type = type_name::get<T>();\n    if (!table::contains(&self.balances, type)) {\n        table::add(&mut self.balances, type, balance::zero<T>());\n        table::add(&mut self.locked, type, balance::zero<T>());\n    };\n\n    balance::join(table::borrow_mut(&mut self.balances, type), coin::into_balance(coin));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Move Module\nDESCRIPTION: Example of a Move module definition with resource management functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n// sources/Test.move\nmodule 0x2::Test {\n    use std::signer;\n\n    struct Resource has key { i: u64 }\n\n    public fun publish(account: &signer) {\n        move_to(account, Resource { i: 10 })\n    }\n\n    public fun write(account: &signer, i: u64) acquires Resource {\n        borrow_global_mut<Resource>(signer::address_of(account)).i = i;\n    }\n\n    public fun unpublish(account: &signer) acquires Resource {\n        let Resource { i: _ } = move_from(signer::address_of(account));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Division with Ceiling Rounding for u8 Values\nDESCRIPTION: The divide_and_round_up function calculates x / y but rounds up the result using the std::macros::num_divide_and_round_up macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_and_round_up(x: u8, y: u8): u8 {\n    std::macros::num_divide_and_round_up!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing Multiple Values from BCS-encoded Bytes in Move\nDESCRIPTION: This function demonstrates how to use the sui::bcs module to deserialize multiple values (u8 and u64) from BCS-encoded bytes. It creates a BCS struct from input bytes, peels values sequentially, and returns the extracted values along with remaining bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n/// This function reads u8 and u64 value from the input\n/// and returns the rest of the bytes.\nfun deserialize(bytes: vector<u8>): (u8, u64, vector<u8>) {\nuse sui::bcs::{Self, BCS};\n\nlet prepared: BCS = bcs::new(bytes);\nlet (u8_value, u64_value) = (\nprepared.peel_u8(),\nprepared.peel_u64()\n);\n\n// unpack bcs struct\nlet leftovers = prepared.into_remainder_bytes();\n\n(u8_value, u64_value, leftovers)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Deny List - Move\nDESCRIPTION: The `create` function handles the creation of a deny list object, ensuring it is initiated by the system address only. It sets up the necessary structures needed for a deny list and transfers it as an object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\nfun create(ctx: &mut sui::tx_context::TxContext) {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    let mut lists = bag::new(ctx);\n    lists.add(COIN_INDEX, per_type_list(ctx));\n    let deny_list_object = sui::deny_list::DenyList {\n        id: object::sui_deny_list_object_id(),\n        lists,\n    };\n    transfer::share_object(deny_list_object);\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Leaf in CritbitTree (Move)\nDESCRIPTION: Retrieves the minimum leaf from a CritbitTree. It returns the key and index of the minimum leaf. Throws an error if the tree is empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun min_leaf<V: store>(tree: &CritbitTree<V>): (u64, u64) {\n    assert!(!is_empty(tree), ELeafNotExist);\n    let min_leaf = table::borrow(&tree.leaves, tree.min_leaf);\n    return (min_leaf.key, tree.min_leaf)\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Index of Element in Vector in Rust\nDESCRIPTION: This macro function finds the index of the first element in a vector that satisfies a given predicate function, returning an Option<u64>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_23\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun find_index<$T>($v: &vector<$T>, $f: |&$T| -> bool): Option<u64> {\n    let v = $v;\n    'find_index: {\n        v.length().do!(|i| if ($f(&v[i])) return 'find_index option::some(i));\n        option::none()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing secp256r1_ecrecover Function in Move\nDESCRIPTION: Defines a native function to recover a Secp256r1 public key from a signature. It takes a signature, message, and hash type as inputs and returns the recovered public key or throws an error.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/ecdsa_r1.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun secp256r1_ecrecover(\n    signature: &vector<u8>,\n    msg: &vector<u8>,\n    hash: u8,\n): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Checking Child Object Existence with Type in Move\nDESCRIPTION: This native function checks if a child object of a specific type exists for a given parent and ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) native fun has_child_object_with_ty<Child: key>(parent: address, id: address): bool;\n```\n\n----------------------------------------\n\nTITLE: Creating an Escrow Request Using Shared Objects in Sui Move\nDESCRIPTION: Function to create an escrow request using a shared object implementation. The seller directly creates a shared Escrow object containing their offered object and specifies the key ID of the object they want in exchange, along with the intended recipient.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/shared-owned.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic entry fun create<T: key + store, U: key + store>(\n        obj: T,\n        exchange_key_id: ID,\n        recipient: address,\n        ctx: &mut TxContext\n    ) {\n        let request = Escrow {\n            id: object::new(ctx),\n            sender: tx_context::sender(ctx),\n            recipient,\n            exchange_key_id,\n            // If we want to create a key to identify the object, keep it in scope.\n            obj,\n        };\n        transfer::share_object(request);\n    }\n```\n\n----------------------------------------\n\nTITLE: Custom Transfer Function for Unlocked Objects\nDESCRIPTION: Implements a custom transfer function that checks if an object is unlocked before allowing transfer, with an error code for locked objects\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transfers/custom-rules.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule examples::custom_transfer {\n\n// Error code for trying to transfer a locked object\nconst EObjectLocked: u64 = 0;\n\npublic fun transfer_unlocked(object: Object, to: address) {\n    assert!(object.unlocked, EObjectLocked);\n    transfer::transfer(object, to)\n}\n```\n\n----------------------------------------\n\nTITLE: String Insert Function Implementation\nDESCRIPTION: Inserts a string at a specified byte index, requiring the index to be at a valid UTF-8 character boundary.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun insert(s: &mut String, at: u64, o: String) {\n    let bytes = &s.bytes;\n    assert!(at <= bytes.length() && internal_is_char_boundary(bytes, at), EInvalidIndex);\n    let l = s.length();\n    let mut front = s.substring(0, at);\n    let end = s.substring(at, l);\n    front.append(o);\n    front.append(end);\n    *s = front;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Config and Setting Structures in Move\nDESCRIPTION: Defines the Config, Setting, and SettingData structures used for managing configuration settings in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/config.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Config<phantom WriteCap> has key {\n    id: sui::object::UID\n}\n\npublic struct Setting<Value: copy, drop, store> has drop, store {\n    data: std::option::Option<sui::config::SettingData<Value>>\n}\n\npublic struct SettingData<Value: copy, drop, store> has drop, store {\n    newer_value_epoch: u64,\n    newer_value: std::option::Option<Value>,\n    older_value_opt: std::option::Option<Value>\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Longest Sequence of Set Bits in BitVector\nDESCRIPTION: Function that calculates the length of the longest sequence of consecutive set bits starting at a given index in a BitVector. It returns 0 if there is no set bit at the start index. The function asserts that the start_index is valid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/bit_vector.md#2025-04-22_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun longest_set_sequence_starting_at(bitvector: &BitVector, start_index: u64): u64 {\n    assert!(start_index < bitvector.length, EINDEX);\n    let mut index = start_index;\n    // Find the greatest index in the vector such that all indices less than it are set.\n    while (index < bitvector.length) {\n        if (!bitvector.is_index_set(index)) break;\n        index = index + 1;\n    };\n    index - start_index\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new asset representation in Rust\nDESCRIPTION: The new_asset function creates a fresh representation of an asset with defined attributes. It returns both AssetCap and AssetMetadata objects that contain the asset's characteristics and information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npublic fun new_asset<T: drop>(\n        witness: T,\n        total_supply: u64,\n        symbol: ascii::String,\n        name: String,\n        description: String,\n        icon_url: Option<Url>,\n        burnable: bool,\n        ctx: &mut TxContext\n    ): (AssetCap<T>, AssetMetadata<T>) {}\n```\n\n----------------------------------------\n\nTITLE: Generating uint in range with bias control - Move\nDESCRIPTION: This macro generates a random unsigned integer within a given range [min, max] using a specified number of bytes for bias control. Preconditions must ensure min is less than or equal to max. It returns a random value within the range, with a bias limited by the num_of_bytes parameter.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\nmacro fun uint_in_range<$T: drop>($g: &mut sui::random::RandomGenerator, $min: $T, $max: $T, $num_of_bytes: u8): $T {\n    let min = $min;\n    let max = $max;\n    assert!(min <= max, EInvalidRange);\n    if (min == max) return min;\n    let range_size = (max - min) as u256 + 1;\n    let rand = uint_from_bytes!($g, $num_of_bytes);\n    min + (rand % range_size as $T)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting object ID as address\nDESCRIPTION: Gets the inner bytes of the underlying ID of a Sui object as an address. This provides direct access to the address representation of the object's ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_19\n\nLANGUAGE: move\nCODE:\n```\npublic fun id_address<T: key>(obj: &T): address {\n    borrow_uid(obj).id.bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Level 2 Book Status for Bid Side in DeepBook (Move)\nDESCRIPTION: This function returns the level 2 order depth for all valid prices within a specified price range on the bid side. It returns two vectors: one containing the valid prices and another containing the corresponding depths at those prices.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_39\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_level2_book_status_bid_side<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n    mut price_low: u64,\n    mut price_high: u64,\n    clock: &Clock\n): (vector<u64>, vector<u64>) {\n    let mut price_vec = vector::empty<u64>();\n    let mut depth_vec = vector::empty<u64>();\n    if (critbit::is_empty(&pool.bids)) { return (price_vec, depth_vec) };\n    let (price_low_, _) = critbit::min_leaf(&pool.bids);\n    let (price_high_, _) = critbit::max_leaf(&pool.bids);\n    // If price_low is greater than the highest element in the tree, we return empty\n    if (price_low > price_high_) {\n        return (price_vec, depth_vec)\n    };\n    if (price_low < price_low_) price_low = price_low_;\n    if (price_high > price_high_) price_high = price_high_;\n    price_low = critbit::find_closest_key(&pool.bids, price_low);\n    price_high = critbit::find_closest_key(&pool.bids, price_high);\n    while (price_low <= price_high) {\n        let depth = get_level2_book_status(\n            &pool.bids,\n            price_low,\n            clock::timestamp_ms(clock)\n        );\n        if (depth != 0) {\n            vector::push_back(&mut price_vec, price_low);\n            vector::push_back(&mut depth_vec, depth);\n        };\n        let (next_price, _) = critbit::next_leaf(&pool.bids, price_low);\n        if (next_price == 0) { break }\n        else { price_low = next_price };\n    };\n    (price_vec, depth_vec)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EIllegalRule Constant in Move\nDESCRIPTION: Defines a constant EIllegalRule, which signifies that a completed rule is not set in the TransferPolicy. This constant is used for error management when interacting with policies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\nconst EIllegalRule: u64 = 1;\n```\n\n----------------------------------------\n\nTITLE: Getting Spent Balance from ActionRequest in Sui\nDESCRIPTION: This function attempts to retrieve the burned balance of an `ActionRequest`. It checks if a `spent_balance` exists within the `ActionRequest`. If it does, it returns the `value` of the `spent_balance` wrapped in `Option::some`; otherwise, it returns `Option::none`.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_50\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/token.md#sui_token_spent\">spent</a>&lt;T&gt;(self: &<a href=\"../sui/token.md#sui_token_ActionRequest\">sui::token::ActionRequest</a>&lt;T&gt;): <a href=\"../std/option.md#std_option_Option\">std::option::Option</a>&lt;u64&gt; {\n    <b>if</b> (self.<a href=\"../sui/token.md#sui_token_spent_balance\">spent_balance</a>.is_some()) {\n        option::some(self.<a href=\"../sui/token.md#sui_token_spent_balance\">spent_balance</a>.<a href=\"../sui/borrow.md#sui_borrow\">borrow</a>().<a href=\"../sui/token.md#sui_token_value\">value</a>())\n    } <b>else</b> {\n        option::none()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index in Vector in Move\nDESCRIPTION: This function searches for an element in the vector and returns a tuple containing a boolean indicating if the element was found and its index if found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun index_of<Element>(v: &vector<Element>, e: &Element): (bool, u64) {\n    let mut i = 0;\n    let len = v.length();\n    while (i < len) {\n        if (&v[i] == e) return (true, i);\n        i = i + 1;\n    };\n    (false, 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Empty Table in Sui (Move)\nDESCRIPTION: Function that destroys an empty Table. It aborts with ETableNotEmpty error if the table still contains values. The function consumes the table and deletes its ID if empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table.md#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\npublic fun destroy_empty<K: copy + drop + store, V: store>(table: Table<K, V>) {\n    let Table { id, size } = table;\n    assert!(size == 0, ETableNotEmpty);\n    id.delete()\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting a Substring from an ASCII String in Move\nDESCRIPTION: Creates a new ASCII string by copying a slice from an existing string. It takes a reference to the source String and start and end indices (u64), returning a new String.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun substring(string: &String, i: u64, j: u64): String {\n    assert!(i <= j && j <= string.length(), EInvalidIndex);\n    let mut bytes = vector[];\n    i.range_do!(j, |i| bytes.push_back(string.bytes[i]));\n    String { bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActiveJwk Struct in Move\nDESCRIPTION: Defines the structure for active JWKs, combining a JWK, its identifier, and the epoch in which it was activated.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic struct ActiveJwk has copy, drop, store {\n    jwk_id: sui::authenticator_state::JwkId,\n    jwk: sui::authenticator_state::JWK,\n    epoch: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Closure on Mutable Option Reference in Sui Move\nDESCRIPTION: The 'do_mut' macro function executes a closure on the mutable reference to the value inside an Option if it holds one. It takes a mutable reference to an Option<T> and a closure as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_16\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun do_mut<$T, $R: drop>($o: &mut Option<$T>, $f: |&mut $T| -> $R) {\n    let o = $o;\n    if (o.is_some()) { $f(o.borrow_mut()); }\n}\n```\n\n----------------------------------------\n\nTITLE: Gas Fees Calculation in Sui\nDESCRIPTION: This formula details how total gas fees are calculated in the Sui network. It takes into account computation units, storage units, and their respective prices.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics/gas-in-sui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"total_gas_fees = computation_units * reference_gas_price + storage_units * storage_price\"\n```\n\n----------------------------------------\n\nTITLE: Adding Rules to Token Policy in Move\nDESCRIPTION: Function signature for adding a rule to an action in a TokenPolicy. Requires both TokenPolicy and TokenPolicyCap, with the rule specified by its type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/token-policy.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun add_rule_for_action<T, Rule: drop>(\n    policy: &mut TokenPolicy<T>,\n    policy_cap: &TokenPolicyCap<T>,\n    action: String,\n    ctx: &mut TxContext\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Automatic Borrowing in Move Method Calls\nDESCRIPTION: This snippet shows how Move automatically borrows the receiver if a function expects a reference. It demonstrates borrowing for both immutable and mutable references.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_14\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct X() has copy, drop;\n    public fun by_val(_: X) {}\n    public fun by_ref(_: &X) {}\n    public fun by_mut(_: &mut X) {}\n\n    fun example(mut x: X) {\n        x.by_ref(); // resolves to a::m::by_ref(&x)\n        x.by_mut(); // resolves to a::m::by_mut(&mut x)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a BalanceManager with Custom Owner in Move\nDESCRIPTION: Creates a BalanceManager hot potato with a specified custom owner. Must be combined with share or the transaction fails. Can be combined with deposit calls in the same transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/balance-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun new_with_owner(owner: address, ctx: &mut TxContext): BalanceManager {\n    BalanceManager {\n        id: object::new(ctx),\n        owner,\n        balances: table::new(ctx),\n        caps: vec_set::empty(ctx),\n        locked: table::new(ctx),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Element into Vector in Move\nDESCRIPTION: This function inserts an element at the specified index in the vector, shifting existing elements if necessary. It preserves order but has O(n) complexity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun insert<Element>(v: &mut vector<Element>, e: Element, mut i: u64) {\n    let len = v.length();\n    // i too big abort\n    if (i > len) abort EINDEX_OUT_OF_BOUNDS;\n    v.push_back(e);\n    while (i < len) {\n        v.swap(i, len);\n        i = i + 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chain ID Constants in Move\nDESCRIPTION: Defines constant values for different chain IDs, including Sui and Ethereum networks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/chain_ids.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nconst SuiMainnet: u8 = 0;\nconst SuiTestnet: u8 = 1;\nconst SuiCustom: u8 = 2;\nconst EthMainnet: u8 = 10;\nconst EthSepolia: u8 = 11;\nconst EthCustom: u8 = 12;\nconst EInvalidBridgeRoute: u64 = 0;\n```\n\n----------------------------------------\n\nTITLE: Defining Event Structs for Escrow Observability\nDESCRIPTION: Event structures for tracking escrow lifecycle. These event types enable custom indexing of escrow objects by sender and recipient, making it possible to query relevant transactions efficiently.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\n/// Emitted when a new escrow is created\nstruct EscrowCreated has copy, drop {\n    escrow_id: ID,\n    sender: address,\n    recipient: address,\n    sender_locked_id: ID,\n    recipient_key_id: ID,\n}\n\n/// Emitted when an escrow is swapped (completed successfully)\nstruct EscrowSwapped has copy, drop {\n    escrow_id: ID,\n    sender: address,\n    recipient: address,\n    sender_locked_id: ID,\n    recipient_locked_id: ID,\n}\n\n/// Emitted when an escrow is cancelled and assets are returned to the sender\nstruct EscrowCancelled has copy, drop {\n    escrow_id: ID,\n    sender: address,\n    recipient: address,\n    sender_locked_id: ID,\n    recipient_key_id: ID,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Network Address for Next Epoch in Move\nDESCRIPTION: Updates the network address of a validator to take effect in the next epoch. The function ensures the new address does not exceed the maximum length allowed and validates the metadata after update.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_78\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_next_epoch_network_address(\n    self: &mut Validator,\n    net_address: vector<u8>,\n) {\n    assert!(\n        net_address.length() <= MAX_VALIDATOR_METADATA_LENGTH,\n        EValidatorMetadataExceedingLengthLimit,\n    );\n    let net_address = net_address.to_ascii_string().to_string();\n    self.metadata.next_epoch_net_address = option::some(net_address);\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Delisting Item from Rentables Extension - Move\nDESCRIPTION: The 'delist' function allows a renter to remove an item from the renting list, ensuring the asset is returned to the owner's kiosk while adhering to access rules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\npublic fun delist<T: key + store>(\n  kiosk: &mut Kiosk,\n  cap: &KioskOwnerCap,\n  transfer_policy: &TransferPolicy<T>,\n  item_id: ID,\n  _ctx: &mut TxContext,\n) {\n\n  // Aborts if the cap doesn't match the Kiosk.\n  assert!(kiosk.has_access(cap), ENotOwner);\n\n  // Removes the rentable item from the extension's Bag (take_from_bag is a helper method defined in nft_rental.move file). \n  let rentable = take_from_bag<T, Listed>(kiosk, Listed { id: item_id });\n\n  // Deconstructs the Rentable object.\n  let Rentable {\n    object,\n    duration: _,\n    start_date: _,\n    price_per_day: _,\n    kiosk_id: _,\n  } = rentable;\n\n  // Respects the lock rule, if present, by re-locking the asset in the owner's Kiosk.\n  if (has_rule<T, LockRule>(transfer_policy)) {\n    kiosk.lock(cap, transfer_policy, object);\n  } else {\n    kiosk.place(cap, object);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining request_gas_and_signature function in Rust\nDESCRIPTION: This code snippet defines a function `request_gas_and_signature` in Rust. The function takes a `GaslessTransaction` as input and returns a `SenderSignedData` object or an error. This function is used in user-initiated sponsored transactions where the gas fees are handled by the sponsor.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/sponsored-transactions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n```rust\npub fn request_gas_and_signature(gasless_tx: GaslessTransaction) -> Result<SenderSignedData, Error>;\n```\n```\n\n----------------------------------------\n\nTITLE: Loading Mutable System State in Sui System\nDESCRIPTION: Function to load a mutable reference to the system state object, allowing for modifications to the chain's governance data.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_39\n\nLANGUAGE: Move\nCODE:\n```\nfun load_system_state_mut(self: &mut SuiSystemState): &mut SuiSystemStateInnerV2 {\n    load_inner_maybe_upgrade(self)\n}\n```\n\n----------------------------------------\n\nTITLE: Sui Client PTB Split Coins and Transfer\nDESCRIPTION: This example demonstrates how to split a gas coin, assign the resulting new coin to a variable, and then transfer the new coin to a recipient address using the `sui client ptb` command. It splits the gas coin into a new coin with 1000 MIST, assigns the new coin to the variable `coin`, and then transfers the `coin` object to the address `recipient_address`. The gas budget for the transaction is set to 50000000.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/ptb.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client ptb \\\n--split-coins gas \"[1000]\" \\\n--assign coin \\\n--transfer-objects \"[coin]\" @recipient_address \\\n--gas-budget 50000000\n```\n\n----------------------------------------\n\nTITLE: Emitting Validator Epoch Events in Move\nDESCRIPTION: Implementation of emit_validator_epoch_events function that emits events containing information about each validator for an epoch, including stakes, rewards, performance, and tallying rule data.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_57\n\nLANGUAGE: Move\nCODE:\n```\nfun emit_validator_epoch_events(\n    new_epoch: u64,\n    vs: &vector<Validator>,\n    pool_staking_reward_amounts: &vector<u64>,\n    storage_fund_staking_reward_amounts: &vector<u64>,\n    report_records: &VecMap<address, VecSet<address>>,\n    slashed_validators: &vector<address>,\n) {\n    let length = vs.length();\n    length.do!(|i| {\n        let v = &vs[i];\n        let validator_address = v.sui_address();\n        let tallying_rule_reporters = if (report_records.contains(&validator_address)) {\n            report_records[&validator_address].into_keys()\n        } else {\n            vector[]\n        };\n        let tallying_rule_global_score = if (slashed_validators.contains(&validator_address)) {\n            0\n        } else {\n            1\n        };\n        event::emit(ValidatorEpochInfoEventV2 {\n            epoch: new_epoch,\n            validator_address,\n            reference_gas_survey_quote: v.gas_price(),\n            stake: v.total_stake(),\n            voting_power: v.voting_power(),\n            commission_rate: v.commission_rate(),\n            pool_staking_reward: pool_staking_reward_amounts[i],\n            storage_fund_staking_reward: storage_fund_staking_reward_amounts[i],\n            pool_token_exchange_rate: v.pool_token_exchange_rate_at_epoch(new_epoch),\n            tallying_rule_reporters,\n            tallying_rule_global_score,\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Converting u128 to String in Move\nDESCRIPTION: Converts a u128 value to its string representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_string(x: u128): String {\n    std::macros::num_to_string!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Bit in BitVector in Rust\nDESCRIPTION: Implements the set function to set a specific bit in the BitVector to true. It checks if the index is within bounds.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/bit_vector.md#2025-04-22_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun set(bitvector: &mut BitVector, bit_index: u64) {\n    assert!(bit_index < bitvector.bit_field.length(), EINDEX);\n    let x = &mut bitvector.bit_field[bit_index];\n    *x = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Fields in Move\nDESCRIPTION: This snippet outlines the APIs to borrow dynamic fields in Move, specifically through the `borrow` and `borrow_mut` functions, ensuring proper access to dynamic field values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/dynamic-fields.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\n{@inject: crates/sui-framework/packages/sui-framework/sources/dynamic_field.move#fun=borrow,borrow_mut noComments}\n```\n\nLANGUAGE: Move\nCODE:\n```\n{@inject: examples/move/dynamic_fields/sources/example.move#fun=mutate_child,mutate_child_via_parent noComments}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter NFT Smart Contract in Move\nDESCRIPTION: A Move smart contract that implements a non-transferable Counter NFT used for generating unique VRF inputs for each game round. The contract includes functionality for minting, burning, and managing counter state.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/plinko.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nmodule plinko::counter_nft {\n// === Imports ===\nuse sui::bcs::{Self};\n\n// === Structs ===\n\n/// A Counter object serves as a unique, NFT\n/// that increments with each use. It's designed to provide a unique\n/// Verifiable Random Function (VRF) input for each round of the game,\n/// ensuring the randomness and fairness of game outcomes.\npublic struct Counter has key {\n    id: UID,\n    // A numerical value that increments with each use of the Counter.\n    // This incrementing behavior is critical for ensuring that each game round\n    // receives a fresh, unique input for randomness generation.\n    count: u64,\n}\n\n/// Deletes a counter object.\nentry fun burn(self: Counter) {\n    let Counter { id, count: _ } = self;\n    object::delete(id);\n}\n\n/// Creates a new counter object. Used in combination with the transfer_to_sender method to provide the same\n/// UX when creating a Counter NFT for the first time.\npublic fun mint(ctx: &mut TxContext): Counter {\n    Counter {\n        id: object::new(ctx),\n        count: 0\n    }\n}\n\n/// Transfers a counter object to the sender.\npublic fun transfer_to_sender(counter: Counter, ctx: &mut TxContext) {\n    transfer::transfer(counter, ctx.sender());\n}\n\n/// Generates a unique VRF input by concatenating the Counter's ID, its current count, and the number of balls\n/// selected by the player. This composite input ensures each game round has a distinct random seed.\n/// The count is incremented after use to maintain uniqueness for subsequent rounds.\npublic fun get_vrf_input_and_increment(self: &mut Counter, num_balls: u64): vector<u8> {\n    let mut vrf_input = object::id_bytes(self);\n    let count_to_bytes = bcs::to_bytes(&self.count());\n    let num_balls_to_bytes = bcs::to_bytes(&num_balls);\n    vrf_input.append(count_to_bytes);\n    vrf_input.append(num_balls_to_bytes);\n    self.increment();\n    vrf_input\n}\n\n/// Returns the current count of the counter object.\npublic fun count(self: &Counter): u64 {\n    self.count\n}\n\n/// Internal function to increment the counter by 1.\nfun increment(self: &mut Counter) {\n    self.count = self.count + 1;\n}\n\n// === Test Functions ===\n\n#[test_only]\npublic fun burn_for_testing(self: Counter) {\n    self.burn();\n}\n\n#[test_only]\npublic fun get_vrf_input_for_testing(self: &mut Counter): vector<u8> {\n    let vrf_input: vector<u8> = self.get_vrf_input_and_increment(1);\n    vrf_input\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Libraries for Validator Setup - Move\nDESCRIPTION: Imports necessary standard and Sui specific libraries to enable the use of various data types and functionalities required in the validator module. This includes support for addresses, ASCII, BCS, optional types, and various Sui-specific utilities like address handling, staking pool management, and transaction contexts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nuse std::address;\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::type_name;\nuse std::u64;\nuse std::vector;\nuse sui::address;\nuse sui::bag;\nuse sui::balance;\nuse sui::coin;\nuse sui::config;\nuse sui::deny_list;\nuse sui::dynamic_field;\nuse sui::dynamic_object_field;\nuse sui::event;\nuse sui::hex;\nuse sui::object;\nuse sui::sui;\nuse sui::table;\nuse sui::transfer;\nuse sui::tx_context;\nuse sui::types;\nuse sui::url;\nuse sui::vec_set;\nuse sui_system::staking_pool;\nuse sui_system::validator_cap;\n```\n\n----------------------------------------\n\nTITLE: Power Function\nDESCRIPTION: Calculates the power of a u128 base raised to a u8 exponent.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pow(base: u128, exponent: u8): u128 {\n    std::macros::num_pow!(base, exponent)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Stake to Validator's Pool in Move\nDESCRIPTION: This function adds stake to a validator's staking pool. It takes a mutable reference to SuiSystemState, a Coin<SUI> for the stake, the validator's address, and the transaction context. It returns a StakedSui object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun request_add_stake(\n    wrapper: &mut SuiSystemState,\n    stake: Coin<SUI>,\n    validator_address: address,\n    ctx: &mut TxContext,\n) {\n    let staked_sui = request_add_stake_non_entry(wrapper, stake, validator_address, ctx);\n    transfer::public_transfer(staked_sui, ctx.sender());\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Events via Sui RPC with curl\nDESCRIPTION: Example of how to use curl to query events from the Deepbook package on Sui Mainnet. The query requests a specific type of event from a designated module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/using-events.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -X POST https://fullnode.mainnet.sui.io:443 \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"suix_queryEvents\",\n  \"params\": [\n    {\n      \"MoveModule\": {\n        \"package\": \"0x158f2027f60c89bb91526d9bf08831d27f5a0fcb0f74e6698b9f0e1fb2be5d05\",\n        \"module\": \"deepbook_utils\",\n        \"type\": \"0xdee9::clob_v2::DepositAsset<0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>\"\n      }\n    },\n    null,\n    3,\n    false\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants for Sui Kiosk\nDESCRIPTION: A collection of error constants used in the Sui Kiosk module for various error conditions such as authorization issues, incorrect amounts, and inventory management problems.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\nconst ENotOwner: u64 = 0;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst EIncorrectAmount: u64 = 1;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst ENotEnough: u64 = 2;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst ENotEmpty: u64 = 3;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst EListedExclusively: u64 = 4;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst EWrongKiosk: u64 = 5;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst EAlreadyListed: u64 = 6;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst EUidAccessNotAllowed: u64 = 7;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst EItemLocked: u64 = 8;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst EItemIsListed: u64 = 9;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst EItemMismatch: u64 = 10;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst EItemNotFound: u64 = 11;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst ENotListed: u64 = 12;\n```\n\n----------------------------------------\n\nTITLE: Swap Exact Quote for Base in Move\nDESCRIPTION: Swaps an exact quote asset quantity for base assets without requiring a balance manager. Returns BaseAsset, QuoteAsset, and DEEP tokens. Handles cases where input quantity isn't divisible by lot size.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/swaps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun swap_exact_quote_for_base(\n    self: &mut Pool,\n    ctx: &mut TxContext,\n    quote_amount_in: u64,\n    quote_quantity: Coin<QuoteAsset>,\n    deep_quantity: Coin<DEEP>,\n    _restriction: &GlobalRestriction,\n    clock: &Clock\n): (Coin<BaseAsset>, Coin<QuoteAsset>, Coin<DEEP>)\n```\n\n----------------------------------------\n\nTITLE: Validate Staking Pool Balance Invariants\nDESCRIPTION: Verifies that the pool token balance matches the expected balance calculated from the exchange rate and SUI balance. Throws an error if the balances don't match.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_47\n\nLANGUAGE: Move\nCODE:\n```\nfun check_balance_invariants(pool: &StakingPool, epoch: u64) {\n    let exchange_rate = pool.pool_token_exchange_rate_at_epoch(epoch);\n    let expected = exchange_rate.get_token_amount(pool.sui_balance);\n    let actual = pool.pool_token_balance;\n    assert!(expected == actual, ETokenBalancesDoNotMatchExchangeRate)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verification Function in Sui Move reCAPTCHA Module\nDESCRIPTION: Defines a function to verify user authenticity using Ed25519 signatures and update the registry with verification timestamps.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/recaptcha.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n/// @param registry: The registry object.\n/// @param signature: 32-byte signature that is a point on the Ed25519 elliptic curve.\n/// @param public_key: 32-byte signature that is a point on the Ed25519 elliptic curve.\n/// @param msg: The message that we test the signature against.\npublic fun verify(\n    registry: &mut Registry,\n    signature: vector<u8>,\n    public_key: vector<u8>,\n    msg: vector<u8>,\n    ctx: &mut TxContext\n) {\n    let verified = ed25519_verify(&signature, &public_key, &msg);\n    assert!(verified, EInvalidSignature);\n\n    if (!df::exists_with_type<address, u64>(&registry.id, sender(ctx))) {\n        df::add<address, u64>(\n            &mut registry.id,\n            sender(ctx),\n            msg_to_ts(&msg)\n        );\n    } else {\n        let timestamp_ms = df::borrow_mut<address, u64>(&mut registry.id, sender(ctx));\n        *timestamp_ms = msg_to_ts(&msg);\n    }\n}\n\n/// Function to get the timestamp_ms from the message, which is a vector of bytes, and transform it to a u64.\npublic fun msg_to_ts(\n    message: &vector<u8>\n): u64 {\n    let vec_length = vector::length(message);\n\n    let (value, i) = (0u64, 0u8);\n    while (i < 13) {\n        let element = (*vector::borrow(message, vec_length - (i as u64) - 1) - 48 as u64); // '0' = 48\n        value = value + element * math::pow(10, i); // 10^i\n        i = i + 1;\n    };\n    value\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Object Ownership in Move\nDESCRIPTION: Transfers ownership of an object to a recipient address. The object must have the 'key' attribute. This function has custom verification rules ensuring T is defined in the same module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun transfer<T: key>(obj: T, recipient: address) {\n    transfer_impl(obj, recipient)\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Balance in Move\nDESCRIPTION: Splits a Balance and takes a sub-balance from it. It checks if there's enough balance before splitting and returns a new Balance with the specified value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/balance.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun split<T>(self: &mut Balance<T>, value: u64): Balance<T> {\n    assert!(self.value >= value, ENotEnough);\n    self.value = self.value - value;\n    Balance { value }\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Strings in Move\nDESCRIPTION: Appends one string to another. This function takes a mutable reference to a String and another String to append.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun append(s: &mut String, r: String) {\n    s.bytes.append(r.bytes)\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting to Only Dependency Upgrades in Move\nDESCRIPTION: This entry function restricts package upgrades through a given UpgradeCap to only dependency changes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun only_dep_upgrades(cap: &mut UpgradeCap) {\n    cap.restrict(DEP_ONLY)\n}\n```\n\n----------------------------------------\n\nTITLE: Claiming a Publisher Object in Move\nDESCRIPTION: Claims a Publisher object using a One-Time-Witness to prove ownership. This function can only be called once per module due to the OTW constraint.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun claim<OTW: drop>(otw: OTW, ctx: &mut TxContext): Publisher {\n    assert!(types::is_one_time_witness(&otw), ENotOneTimeWitness);\n    let type_name = type_name::get_with_original_ids<OTW>();\n    Publisher {\n        id: object::new(ctx),\n        package: type_name.get_address(),\n        module_name: type_name.get_module(),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Custodian in Move\nDESCRIPTION: Implements the new function to create a new Custodian instance for managing user accounts and balances.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun new<T>(ctx: &mut TxContext): Custodian<T> {\n    Custodian<T> {\n        id: object::new(ctx),\n        account_balances: table::new(ctx),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Rule Config in Sui Token Policy\nDESCRIPTION: Removes a Config for a Rule in the TokenPolicy. Unlike add_rule_config, this function doesn't require a Rule witness and can be performed by the TokenPolicy owner directly. Aborts if the Config is not present or if TokenPolicyCap doesn't match the TokenPolicy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_27\n\nLANGUAGE: move\nCODE:\n```\npublic fun remove_rule_config<T, Rule, Config: store>(\n    self: &mut TokenPolicy<T>,\n    cap: &TokenPolicyCap<T>,\n    _ctx: &mut TxContext,\n): Config {\n    assert!(has_rule_config_with_type<T, Rule, Config>(self), ENoConfig);\n    assert!(object::id(self) == cap.for, ENotAuthorized);\n    df::remove(&mut self.id, key<Rule>())\n}\n```\n\n----------------------------------------\n\nTITLE: Multi Get Objects\nDESCRIPTION: Command to retrieve multiple objects simultaneously using 4 threads against two RPC server instances.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rpc-loadgen/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-rpc-loadgen -- --urls \"http://127.0.0.1:9000\" \"http://127.0.0.1:9000\" --num-threads 4 multi-get-objects\n```\n\n----------------------------------------\n\nTITLE: Installing Sui Dependencies with Homebrew\nDESCRIPTION: Command to install essential dependencies (curl, cmake, libpq, git) required for Sui development using the Homebrew package manager on macOS.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/macos-deps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install curl cmake libpq git\n```\n\n----------------------------------------\n\nTITLE: Processing Paired Elements in Reverse Order in Sui Move\nDESCRIPTION: A macro function that destroys two vectors by calling a function on each pair of elements, starting from the end of the vectors. It aborts if the vectors have different lengths.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_30\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun zip_do_reverse<$T1, $T2, $R: drop>(\n    $v1: vector<$T1>,\n    $v2: vector<$T2>,\n    $f: |$T1, $T2| -> $R,\n) {\n    let v1 = $v1;\n    let mut v2 = $v2;\n    let len = v1.length();\n    assert!(len == v2.length());\n    v1.destroy!(|el1| $f(el1, v2.pop_back()));\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Rules for Token Actions in Move\nDESCRIPTION: This function returns the rules required for a specific action on a TokenPolicy. It takes a TokenPolicy and an action string as input and returns a VecSet of TypeNames.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_38\n\nLANGUAGE: Move\nCODE:\n```\npublic fun rules<T>(self: &TokenPolicy<T>, action: &String): VecSet<TypeName> {\n    *self.rules.get(action)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA-2 256 Hashing in Move\nDESCRIPTION: Native implementation of the SHA-2 256 hashing algorithm that takes a vector of bytes as input and returns a 256-bit (32-byte) hash digest as a vector of bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/hash.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic native fun sha2_256(data: vector<u8>): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Module Dependencies\nDESCRIPTION: This code snippet shows the module dependencies for the `sui::token` module. It includes various standard and Sui framework modules used for address management, data structures, cryptography, object management, transactions, and more. These dependencies provide the necessary functionalities for implementing the token's logic and interacting with the Sui blockchain.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\n\"use std::address;\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::type_name;\nuse std::vector;\nuse sui::address;\nuse sui::bag;\nuse sui::balance;\nuse sui::coin;\nuse sui::config;\nuse sui::deny_list;\nuse sui::dynamic_field;\nuse sui::dynamic_object_field;\nuse sui::event;\nuse sui::hex;\nuse sui::object;\nuse sui::table;\nuse sui::transfer;\nuse sui::tx_context;\nuse sui::types;\nuse sui::url;\nuse sui::vec_map;\nuse sui::vec_set;\"\n```\n\n----------------------------------------\n\nTITLE: Dropping a Linked Table in Move\nDESCRIPTION: This function allows dropping a linked table, whether empty or not, provided the value type has the 'drop' trait. The key type requires 'copy', 'drop', and 'store', and the value needs both 'drop' and 'store'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun drop<K: copy, drop, store, V: drop, store>(table: sui::linked_table::LinkedTable<K, V>)\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic fun drop<K: copy + drop + store, V: drop + store>(table: LinkedTable<K, V>) {\n    let LinkedTable { id, size: _, head: _, tail: _ } = table;\n    id.delete()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Upgrade Authorization Function\nDESCRIPTION: Defines the function to authorize an upgrade based on the current day of the week, enforcing the custom upgrade policy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\npublic fun authorize_upgrade(\n    cap: &mut UpgradeCap,\n    policy: u8,\n    digest: vector<u8>,\n    ctx: &TxContext,\n): package::UpgradeTicket {\n    assert!(week_day(ctx) == cap.day, ENotAllowedDay);\n    cap.cap.authorize_upgrade(policy, digest)\n}\n```\n\n----------------------------------------\n\nTITLE: Get Pool Next Epoch Parameters\nDESCRIPTION: Function to retrieve trade parameters for the next epoch's leading proposal.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_18\n\nLANGUAGE: move\nCODE:\n```\npublic fun pool_trade_params_next(self: &Pool): (u64, u64, u64)\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Zipping with Destructive Mapping in Move\nDESCRIPTION: The zip_map macro destroys two input vectors by applying a function to each pair of elements and collecting the results into a new vector. It aborts if the vectors have different lengths and preserves the element order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_33\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun zip_map<$T1, $T2, $U>(\n    $v1: vector<$T1>,\n    $v2: vector<$T2>,\n    $f: |$T1, $T2| -> $U,\n): vector<$U> {\n    let mut r = vector[];\n    zip_do!($v1, $v2, |el1, el2| r.push_back($f(el1, el2)));\n    r\n}\n```\n\n----------------------------------------\n\nTITLE: Managing TradeCaps for BalanceManager in Move\nDESCRIPTION: Functions for minting and revoking TradeCaps. The BalanceManager owner can mint TradeCaps and grant permission to place orders to other addresses. Limited to 1000 total caps per BalanceManager.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/balance-manager.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun mint_trade_cap(self: &mut BalanceManager, to: address, ctx: &mut TxContext) {\n    assert!(self.owner == tx_context::sender(ctx), ENotOwner);\n    assert!(!vec_set::contains(&self.caps, &to), ECapExist);\n    assert!(vec_set::size(&self.caps) < MAX_CAP, ECapLimitReached);\n\n    vec_set::insert(&mut self.caps, to);\n    transfer::public_transfer(TradeCap { id: object::new(ctx), for: object::id(self) }, to);\n}\n\npublic fun revoke_trade_cap(self: &mut BalanceManager, cap: TradeCap, ctx: &mut TxContext) {\n    assert!(self.owner == tx_context::sender(ctx), ENotOwner);\n    let TradeCap { id, for } = cap;\n    assert!(for == object::id(self), EWrongCap);\n\n    let sender = tx_context::sender(ctx);\n    assert!(vec_set::contains(&self.caps, &sender), ECapNotExist);\n    vec_set::remove(&mut self.caps, &sender);\n    object::delete(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Burning a Coin in Sui Coin\nDESCRIPTION: This function destroys a specified coin and decreases the total supply in the treasury cap accordingly. The operation successfully deletes the coin's ID and decreases the related balance from total supply.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun burn<T>(cap: &mut sui::coin::TreasuryCap<T>, c: sui::coin::Coin<T>): u64 {\n    let Coin { id, balance } = c;\n    id.delete();\n    cap.total_supply.decrease_supply(balance)\n}\n```\n\n----------------------------------------\n\nTITLE: Peeling Option U128 with Sui BCS in Move\nDESCRIPTION: The `peel_option_u128` function translates serialized bytes into an `Option<u128>`. Utilizing `peel_option` from the Sui BCS suite, it requires a `sui::bcs::BCS` reference, with `peel_u128` performing the data extraction. This facilitates handling optional u128 values efficiently.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bcs.md#sui_bcs_peel_option_u128\">peel_option_u128</a>(<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>: &<b>mut</b> <a href=\"../sui/bcs.md#sui_bcs_BCS\">BCS</a>): Option&lt;u128&gt; {\n    <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_option\">peel_option</a>!(|<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>| <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_u128\">peel_u128</a>())\n}\n```\n\n----------------------------------------\n\nTITLE: Get Dynamic Object Field ID\nDESCRIPTION: Returns the ID of an object associated with a dynamic object field if it exists. Returns Option<ID>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun id<Name: copy + drop + store>(object: &UID, name: Name): Option<ID> {\n    let key = Wrapper { name };\n    if (!field::exists_with_type<Wrapper<Name>, ID>(object, key)) return option::none();\n    let (field, value_addr) = field::field_info<Wrapper<Name>>(object, key);\n    option::some(value_addr.to_id())\n}\n```\n\n----------------------------------------\n\nTITLE: Update Validator Network Public Key\nDESCRIPTION: Updates a validator's network public key for the next epoch. Changes take effect in the following epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_next_epoch_network_pubkey(\n    self: &mut SuiSystemState,\n    network_pubkey: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_validator_next_epoch_network_pubkey(network_pubkey, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Address from Per Type List - Move\nDESCRIPTION: The `v1_per_type_list_remove` function iterates through a specific type's denied addresses and removes the given address while updating the count of denied instances. It ensures the address is indeed denied before removal.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\nfun v1_per_type_list_remove(list: &mut sui::deny_list::PerTypeList, type: vector<u8>, addr: address) {\n    let denied_addresses = &mut list.denied_addresses[type];\n    assert!(denied_addresses.contains(&addr), ENotDenied);\n    denied_addresses.remove(&addr);\n    let denied_count = &mut list.denied_count[addr];\n    *denied_count = *denied_count - 1;\n    if (*denied_count == 0) {\n        list.denied_count.remove(addr);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UQ32_32 from Integer in Move\nDESCRIPTION: Implements the from_int function to create a UQ32_32 value from an unsigned 32-bit integer.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq32_32.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_int(integer: u32): UQ32_32 {\n    UQ32_32(std::macros::uq_from_int!(integer, FRACTIONAL_BITS))\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Validator Set\nDESCRIPTION: Command for a validator candidate to join the active validator set using sui_system::request_add_validator function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call --package 0x3 --module sui_system --function request_add_validator --args 0x5 --gas-budget 10000000\n```\n\n----------------------------------------\n\nTITLE: Creating New Tic-Tac-Toe Game Object in Move\nDESCRIPTION: This Move function (`new`) creates a new Tic-Tac-Toe game object on the Sui blockchain. It initializes the game with parameters such as size, players, and initial game state and uses the Sui framework to generate a unique ID (UID) for the game, resulting in a new NFT at a specific address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/gaming.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new(size: u8, p1: address, p2: address, ctx: &mut TxContext) {\n        // size has to be odd number\n        assert!(size % 2 == 1, 0);\n\n        // can't be a tiny board\n        assert!(size >= 3, 1);\n\n        let board = vector::empty<Option<u8>>();\n        let i = 0;\n        while (i < size * size) {\n            vector::push_back(&mut board, Option::none());\n            i = i + 1;\n        };\n\n        let id = object::new(ctx);\n\n        transfer::transfer(\n            Game {\n                id,\n                size,\n                board,\n                turn: 1,\n                status: 0,\n                p1,\n                p2\n            },\n            tx_context::sender(ctx)\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Destroying TransferPolicyCap in Move\nDESCRIPTION: This function allows any owner to destroy a TransferPolicyCap and withdraw its balance. It verifies the ownership before destruction and deletes related identifiers, eventually converting the balance into a Coin type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_and_withdraw<T>(\n    self: TransferPolicy<T>,\n    cap: TransferPolicyCap<T>,\n    ctx: &mut TxContext,\n): Coin<SUI> {\n    assert!(object::id(&self) == cap.policy_id, ENotOwner);\n    let TransferPolicyCap { id: cap_id, policy_id } = cap;\n    let TransferPolicy { id, rules: _, balance } = self;\n    id.delete();\n    cap_id.delete();\n    event::emit(TransferPolicyDestroyed<T> { id: policy_id });\n    balance.into_coin(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rented Item Struct in Move\nDESCRIPTION: Struct representing a rented item, used as a dynamic field key in the borrower's Bag. Includes store, copy, and drop abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic struct Rented has store, copy, drop { id: ID }\n```\n\n----------------------------------------\n\nTITLE: Implementing push_back for LinkedTable in Move\nDESCRIPTION: Inserts a key-value pair at the back of the LinkedTable. Handles both empty and non-empty table cases by updating head/tail pointers appropriately. Aborts if key already exists.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun push_back<K: copy + drop + store, V: store>(\n    table: &mut LinkedTable<K, V>,\n    k: K,\n    value: V,\n) {\n    if (table.head.is_none()) table.head.fill(k);\n    let old_tail = table.tail.swap_or_fill(k);\n    let prev = if (old_tail.is_some()) {\n        let old_tail_k = old_tail.destroy_some();\n        field::borrow_mut<K, Node<K, V>>(&mut table.id, old_tail_k).next = option::some(k);\n        option::some(old_tail_k)\n    } else {\n        option::none()\n    };\n    let next = option::none();\n    field::add(&mut table.id, k, Node { prev, next, value });\n    table.size = table.size + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: LinkedTable Accessor Functions - Move\nDESCRIPTION: Functions to access the front and back elements of the LinkedTable.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun front<K: copy + drop + store, V: store>(table: &LinkedTable<K, V>): &Option<K> {\n    &table.head\n}\n\npublic fun back<K: copy + drop + store, V: store>(table: &LinkedTable<K, V>): &Option<K> {\n    &table.tail\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Display Object in Move\nDESCRIPTION: Internal function to create a new Display<T> object. Creates a new unique identifier, emits a creation event, and initializes the Display with empty fields and version 0.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\nfun create_internal<T: key>(ctx: &mut TxContext): Display<T> {\n    let uid = object::new(ctx);\n    event::emit(DisplayCreated<T> {\n        id: uid.to_inner(),\n    });\n    Display {\n        id: uid,\n        fields: vec_map::empty(),\n        version: 0,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer SUI Object to Address using Sui Client\nDESCRIPTION: This command transfers a SUI object to a specified address, using the same coin for gas. It requires specifying the SUI coin object ID and the recipient address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client transfer-sui `<br/>&nbsp;&nbsp;`--sui-coin-object-id COIN_ID `<br/>&nbsp;&nbsp;`--to ADDRESS\"\n```\n\n----------------------------------------\n\nTITLE: Programmable Transaction Block Structure in Rust\nDESCRIPTION: This snippet represents the basic structure of a Programmable Transaction Block (PTB) in Rust. It shows that a PTB consists of a vector of inputs and a vector of commands. The `inputs` are arguments used in the commands, and the `commands` are the operations executed within the transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n{\n    inputs: [Input],\n    commands: [Command],\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Sequence Numbers in Sui Bridge\nDESCRIPTION: This function manages and increments sequence numbers for different message types in the bridge. It initializes a new sequence if not present and increments existing ones.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_26\n\nLANGUAGE: Move\nCODE:\n```\nfun get_current_seq_num_and_increment(bridge: &mut BridgeInner, msg_type: u8): u64 {\n    if (!bridge.sequence_nums.contains(&msg_type)) {\n        bridge.sequence_nums.insert(msg_type, 1);\n        return 0\n    };\n    let entry = &mut bridge.sequence_nums[&msg_type];\n    let seq_num = *entry;\n    *entry = seq_num + 1;\n    seq_num\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keccak256 Hash Function in Move\nDESCRIPTION: Computes the Keccak256 hash of arbitrary binary data. This native function takes a vector of bytes as input and returns a 32-byte hash.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/hash.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun keccak256(data: &vector<u8>): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Checkpoint Verification Process Overview\nDESCRIPTION: Describes the step-by-step process for verifying checkpoints in the Sui network, starting from the genesis checkpoint and synchronizing network state\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/system/checkpoint-verification.mdx#2025-04-22_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\n1. Obtain genesis checkpoint from trusted source\n2. Load initial committee from genesis checkpoint\n3. Obtain next checkpoint via state sync network or Sui archive\n4. Verify checkpoint signatures using current committee's public keys\n5. Verify previous checkpoint hash matches\n6. If checkpoint invalid, raise error\n7. If checkpoint is last in current epoch, load next committee\n8. Repeat until current checkpoint reached\n```\n\n----------------------------------------\n\nTITLE: Initializing Voting Power Distribution for Validators in Move\nDESCRIPTION: Creates the initial voting power distribution for validators based on their stake, capped by a threshold. The function maintains the list in descending order by voting power using insertion sort, and returns both the sorted list and any remaining voting power.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\nfun init_voting_power_info(\n    validators: &vector<Validator>,\n    threshold: u64,\n    total_stake: u64,\n): (vector<VotingPowerInfoV2>, u64) {\n    let mut total_power = 0;\n    let mut result = vector[];\n    validators.length().do!(|i| {\n        let stake = validators[i].total_stake();\n        let voting_power = derive_raw_voting_power(stake, total_stake).min(threshold);\n        insert(&mut result, VotingPowerInfoV2 { validator_index: i, voting_power, stake });\n        total_power = total_power + voting_power;\n    });\n    (result, TOTAL_VOTING_POWER - total_power)\n}\n```\n\n----------------------------------------\n\nTITLE: Get Pool Mid Price\nDESCRIPTION: Function to retrieve the mid price of the pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic fun mid_price(self: &Pool): Option<u64>\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Order Cancellation in TypeScript SDK for SUI\nDESCRIPTION: TypeScript SDK implementation for canceling a single order on SUI. Takes token types, order ID, and account capability, converts token types if needed, and constructs the transaction block.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @description: cancel single order\n * @param token1: Full coin type(recommend) of base asset \"0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::wbtc::WBTC\" for example\n * @param token2: Full coin type(recommend) of quote asset \"0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::wbtc::WBTC\" for example\n * @param orderId: Order id to cancel corresponding order\n * @param accountCap: Object id of account capacity under usr address, created after invoking createAccount\n * @param overrides: overriders for blockchain params. Like gas budget, transaction block and the provider, default we will set to the max gas budget, and create a new transaction block\n * @notice: the packageId should be set in configs.json, if it is not set, the transaction will fail.\n */\npublic async cancelOrder(\n    token1: string,\n    token2: string,\n    orderId: bigint,\n    accountCap: string,\n    overrides: Overrides = new Overrides(),\n): Promise<TransactionBlock> {\n    const tokenType1 = convertToTokenType(token1, this.records);\n    const tokenType2 = convertToTokenType(token2, this.records);\n    const poolInfo: PoolInfo = getPoolInfoByRecords(tokenType1, tokenType2, this.records);\n    overrides.txb.moveCall({\n        typeArguments: [tokenType1, tokenType2],\n        target: `${this.configs.swapPackageId}::clob::cancel_order`,\n        arguments: [\n            overrides.txb.object(poolInfo.clob),\n            overrides.txb.pure(String(orderId)),\n            overrides.txb.object(accountCap),\n        ],\n    });\n    overrides.txb.setGasBudget(overrides.gasBudget);\n    return overrides.txb;\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Merge Sort on Vector in Move\nDESCRIPTION: The `merge_sort_by` macro function performs an in-place merge sort on a vector using a comparison function that checks for less than or equal. It is efficient for sorting large vectors and maintains stability, requiring the comparison to return a boolean.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun merge_sort_by<$T>($v: &mut vector<$T>, $le: |&$T, &$T| -> bool) {\n    let v = $v;\n    let n = v.length();\n    if (n < 2) return;\n    let mut flags = vector[false];\n    let mut starts = vector[0];\n    let mut ends = vector[n];\n    while (!flags.is_empty()) {\n        let (halves_sorted, start, end) = (flags.pop_back(), starts.pop_back(), ends.pop_back());\n        let mid = (start + end) / 2;\n        if (halves_sorted) {\n            let mut mid = mid;\n            let mut l = start;\n            let mut r = mid;\n            while (l < mid && r < end) {\n                if ($le(&v[l], &v[r])) {\n                    l = l + 1;\n                } else {\n                    let mut i = r;\n                    while (i > l) {\n                        v.swap(i, i - 1);\n                        i = i - 1;\n                    };\n                    l = l + 1;\n                    mid = mid + 1;\n                    r = r + 1;\n                }\n            }\n        } else {\n            flags.push_back(true);\n            starts.push_back(start);\n            ends.push_back(end);\n            if (mid - start > 1) {\n                flags.push_back(false);\n                starts.push_back(start);\n                ends.push_back(mid);\n            };\n            if (end - mid > 1) {\n                flags.push_back(false);\n                starts.push_back(mid);\n                ends.push_back(end);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Policy Structure Example\nDESCRIPTION: Example YAML structure showing how rules are organized within a TokenPolicy, demonstrating the relationship between actions and their associated rules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/token-policy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nTokenPolicy\n  rules:\n    - action: \"transfer\"\n      rules:\n        - 0x0...::denylist::Denylist\n    - action: \"to_coin\"\n      rules:\n        - 0x0...::limiter::Limiter\n        - 0x0...::allowlist::Allowlist\n    ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Staking Pool Mappings\nDESCRIPTION: Function to get reference to the table mapping staking pool IDs to validator addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\npublic fun staking_pool_mappings(self: &ValidatorSet): &Table<ID, address> {\n    &self.staking_pool_mappings\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Rentables Extension from Kiosk - Move\nDESCRIPTION: The 'remove' function allows the owner of the kiosk to safely remove the 'Rentables' extension, provided that the extension storage is empty, ensuring it adheres to ownership rules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic fun remove(kiosk: &mut Kiosk, cap: &KioskOwnerCap, _ctx: &mut TxContext){\n  kiosk_extension::remove<Rentables>(kiosk, cap);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Bytes in Sui\nDESCRIPTION: Generates a specified number of random bytes using the RandomGenerator. It efficiently handles large requests by appending full blocks directly.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun generate_bytes(g: &mut RandomGenerator, num_of_bytes: u16): vector<u8> {\n    let mut result = vector[];\n    let num_of_blocks = num_of_bytes / RAND_OUTPUT_LEN;\n    num_of_blocks.do!(|_| result.append(g.derive_next_block()));\n    let num_of_bytes = num_of_bytes as u64;\n    let remaining = num_of_bytes - result.length();\n    if (g.buffer.length() < remaining) {\n        let next_block = g.derive_next_block();\n        g.buffer.append(next_block);\n    };\n    remaining.do!(|_| result.push_back(g.buffer.pop_back()));\n    result\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Ask Orders in DeepBook Pool (Move)\nDESCRIPTION: This function iterates through ask orders in a DeepBook trading pool. It allows filtering by tick level, order ID, expiration timestamp, and maximum ID. The function returns a paginated result of orders with options for ascending or descending order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/order_query.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun iter_asks<T1, T2>(\n    pool: &Pool<T1, T2>,\n    // tick level to start from\n    start_tick_level: Option<u64>,\n    // order id within that tick level to start from\n    start_order_id: Option<u64>,\n    // if provided, do not include orders with an expire timestamp less than the provided value (expired order),\n    // value is in microseconds\n    min_expire_timestamp: Option<u64>,\n    // do not show orders with an ID larger than max_id--\n    // i.e., orders added later than this one\n    max_id: Option<u64>,\n    // if true, the orders are returned in ascending tick level.\n    ascending: bool,\n): OrderPage {\n    let asks = clob_v2::asks(pool);\n    let mut orders = iter_ticks_internal(\n        asks,\n        start_tick_level,\n        start_order_id,\n        min_expire_timestamp,\n        max_id,\n        ascending\n    );\n    let (orders, has_next_page, next_tick_level, next_order_id) = if (vector::length(&orders) > PAGE_LIMIT) {\n        let last_order = vector::pop_back(&mut orders);\n        (orders, true, some(clob_v2::tick_level(&last_order)), some(clob_v2::order_id(&last_order)))\n    } else {\n        (orders, false, none(), none())\n    };\n    OrderPage {\n        orders,\n        has_next_page,\n        next_tick_level,\n        next_order_id\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting U128 to U64 in Move\nDESCRIPTION: Attempts to convert a u128 value to u64. Returns None if the value is too large to fit in u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u64(x: u128): Option<u64> {\n    std::macros::try_as_u64!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Option with Closure in Move\nDESCRIPTION: Destroys an Option and calls a closure on the value inside if it holds one.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun destroy<$T, $R: drop>($o: Option<$T>, $f: |$T| -> $R) {\n    let o = $o;\n    o.do!($f);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the gas budget for the current transaction in Sui Move\nDESCRIPTION: This native function returns the gas budget for the current transaction. It takes no arguments and returns a u64 representing the budget. It relies on the underlying Sui framework to provide the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/tx_context.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../sui/tx_context.md#sui_tx_context_native_gas_budget\">native_gas_budget</a>(): u64\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/tx_context.md#sui_tx_context_native_gas_budget\">native_gas_budget</a>(): u64;\n```\n\n----------------------------------------\n\nTITLE: Creating New Table in Move\nDESCRIPTION: Implements the new function to create an empty Table object with a unique ID and initial size of 0.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new<K: copy + drop + store, V: store>(ctx: &mut TxContext): Table<K, V> {\n    Table {\n        id: object::new(ctx),\n        size: 0,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing One-Time Witness in Sui Move\nDESCRIPTION: This function tests if the argument type is a one-time witness, which is a type with only one instantiation across the entire codebase. It takes a reference to a generic type T that implements the 'drop' ability and returns a boolean.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/types.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun is_one_time_witness<T: drop>(_: &T): bool;\n```\n\n----------------------------------------\n\nTITLE: Creating New Validator Instance - Move\nDESCRIPTION: Creates a new validator instance with specified parameters including addresses, public keys, metadata and commission rates. Performs validation checks on metadata length, commission rates and gas prices.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_27\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun new(\n    sui_address: address,\n    protocol_pubkey_bytes: vector<u8>,\n    network_pubkey_bytes: vector<u8>,\n    worker_pubkey_bytes: vector<u8>,\n    proof_of_possession: vector<u8>,\n    name: vector<u8>,\n    description: vector<u8>,\n    image_url: vector<u8>,\n    project_url: vector<u8>,\n    net_address: vector<u8>,\n    p2p_address: vector<u8>,\n    primary_address: vector<u8>,\n    worker_address: vector<u8>,\n    gas_price: u64,\n    commission_rate: u64,\n    ctx: &mut TxContext,\n): Validator\n```\n\n----------------------------------------\n\nTITLE: OrderCanceled Event Struct\nDESCRIPTION: Definition of the OrderCanceled event struct which is emitted when a maker order is canceled. This event provides information about the canceled order for external observers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\n/// Emitted when an order is canceled\nstruct OrderCanceled has copy, drop {\n    /// order id\n    order_id: ID,\n    /// client order id\n    client_order_id: u64,\n    /// Owner of the order\n    owner: address,\n    /// remaining quantity with external precision\n    remaining_quantity: u64,\n    /// Is it a bid (buy) or ask (sell) order\n    is_bid: bool,\n    /// Price with external precision\n    price: u64,\n    /// Base asset ID\n    base_asset_id: ID,\n    /// Quote asset ID\n    quote_asset_id: ID,\n    /// Pool ID\n    pool_id: ID,\n    /// Reason why an order was canceled\n    reason: u8,\n    /// timestamp of cancellation\n    timestamp: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Trying to Get a Value from VecMap in Move\nDESCRIPTION: Safely attempts to retrieve a copyable value from a VecMap by key. Returns Some(V) if the key exists, None otherwise. Only works for copyable values since references cannot be stored in vectors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic fun try_get<K: copy, V: copy>(self: &VecMap<K, V>, key: &K): Option<V> {\n    if (self.contains(key)) {\n        option::some(*get(self, key))\n    } else {\n        option::none()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed Point Value from Rational Numbers in Move\nDESCRIPTION: Creates a fixed-point value from a rational number specified by numerator and denominator. Handles scaling to ensure 32 fractional bits and includes range validation. Aborts if denominator is zero or if ratio is not in range 2^-32 to 2^32-1.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/fixed_point32.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create_from_rational(numerator: u64, denominator: u64): FixedPoint32 {\n    let scaled_numerator = numerator as u128 << 64;\n    let scaled_denominator = denominator as u128 << 32;\n    assert!(scaled_denominator != 0, EDENOMINATOR);\n    let quotient = scaled_numerator / scaled_denominator;\n    assert!(quotient != 0 || numerator == 0, ERATIO_OUT_OF_RANGE);\n    assert!(quotient <= MAX_U64, ERATIO_OUT_OF_RANGE);\n    FixedPoint32 { value: quotient as u64 }\n}\n```\n\n----------------------------------------\n\nTITLE: Loop from 0 to Stop in Move (Exclusive)\nDESCRIPTION: Macro function that loops from 0 to a given stop value (exclusive) and applies a given function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do<$R: drop>($stop: u128, $f: |u128| -> $R) {\n    std::macros::do!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Commission Rate Change in Sui Move\nDESCRIPTION: Updates a validator's commission rate for the next epoch. Ensures the new rate doesn't exceed the maximum allowed commission rate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_38\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun request_set_commission_rate(self: &mut Validator, new_commission_rate: u64) {\n    assert!(new_commission_rate <= MAX_COMMISSION_RATE, ECommissionRateTooHigh);\n    self.next_epoch_commission_rate = new_commission_rate;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Item Count in Kiosk - Move\nDESCRIPTION: This function returns the count of items stored within the Kiosk, facilitating inventory management and checks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_43\n\nLANGUAGE: Move\nCODE:\n```\npublic fun item_count(self: &sui::kiosk::Kiosk): u32 {\n    self.item_count\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Update Bridge Limit Message in Move\nDESCRIPTION: This function creates a bridge message to update a bridge limit between chains. It requires the receiving and sending chain IDs, a sequence number, and the new limit value. The function validates the chain IDs, constructs the payload, and returns a BridgeMessage with the updated limit. Dependencies include the BridgeMessage module and chain ID assertion functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../bridge/message.md#bridge_message_create_update_bridge_limit_message\">create_update_bridge_limit_message</a>(\n    receiving_chain: u8,\n    <a href=\"../bridge/message.md#bridge_message_seq_num\">seq_num</a>: u64,\n    sending_chain: u8,\n    new_limit: u64,\n): <a href=\"../bridge/message.md#bridge_message_BridgeMessage\">BridgeMessage</a> {\n    <a href=\"../bridge/chain_ids.md#bridge_chain_ids_assert_valid_chain_id\">chain_ids::assert_valid_chain_id</a>(receiving_chain);\n    <a href=\"../bridge/chain_ids.md#bridge_chain_ids_assert_valid_chain_id\">chain_ids::assert_valid_chain_id</a>(sending_chain);\n    <b>let</b> <b>mut</b> <a href=\"../bridge/message.md#bridge_message_payload\">payload</a> = vector[sending_chain];\n    <a href=\"../bridge/message.md#bridge_message_payload\">payload</a>.append(<a href=\"../bridge/message.md#bridge_message_reverse_bytes\">reverse_bytes</a>(bcs::to_bytes(&new_limit)));\n    <a href=\"../bridge/message.md#bridge_message_BridgeMessage\">BridgeMessage</a> {\n        <a href=\"../bridge/message.md#bridge_message_message_type\">message_type</a>: <a href=\"../bridge/message_types.md#bridge_message_types_update_bridge_limit\">message_types::update_bridge_limit</a>(),\n        <a href=\"../bridge/message.md#bridge_message_message_version\">message_version</a>: <a href=\"../bridge/message.md#bridge_message_CURRENT_MESSAGE_VERSION\">CURRENT_MESSAGE_VERSION</a>,\n        <a href=\"../bridge/message.md#bridge_message_seq_num\">seq_num</a>,\n        <a href=\"../bridge/message.md#bridge_message_source_chain\">source_chain</a>: receiving_chain,\n        <a href=\"../bridge/message.md#bridge_message_payload\">payload</a>,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Folding a Vector into Single Value in Sui Move\nDESCRIPTION: A macro function that reduces a vector to a single value by applying a provided function to each element. Similar to fold_left in Rust and reduce in Python and JavaScript, it accumulates a result by processing elements in order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_25\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun fold<$T, $Acc>($v: vector<$T>, $init: $Acc, $f: |$Acc, $T| -> $Acc): $Acc {\n    let v = $v;\n    let mut acc = $init;\n    v.do!(|e| acc = $f(acc, e));\n    acc\n}\n```\n\n----------------------------------------\n\nTITLE: BLS G1 Signature (MinPk) Verification\nDESCRIPTION: Generate and verify BLS G1 signatures with MinPk setting using CLI and Move contract\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/signing.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ntarget/debug/sigs-cli keygen --scheme bls12381-minpk --seed 0000000000000000000000000000000000000000000000000000000000000000\ntarget/debug/sigs-cli sign --scheme bls12381-minpk --msg $MSG --secret-key $SK\n```\n\nLANGUAGE: move\nCODE:\n```\n    use sui::bls12381;\n\n    let msg = x\"$MSG\";\n    let pk = x\"$PK\";\n    let sig = x\"$SIG\";\n    let verified = bls12381::bls12381_min_pk_verify(&sig, &pk, &msg);\n    assert!(verified == true, 0);\n```\n\n----------------------------------------\n\nTITLE: Implementing range_do Macro in Move\nDESCRIPTION: A macro function that iterates from a start value (inclusive) to a stop value (exclusive) and applies a function to each value in the range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do<$T, $R: drop>($start: $T, $stop: $T, $f: |$T| -> $R) {\n    let mut i = $start;\n    let stop = $stop;\n    while (i < stop) {\n        $f(i);\n        i = i + 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Value in a Vector Using Loop with Break and Return Value in Move\nDESCRIPTION: A function that searches for a target value in a vector using a loop expression. It returns the position immediately using break with a value if found, or None if not found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nfun find_position(values: &vector<u64>, target_value: u64): Option<u64> {\n    let size = vector::length(values);\n    let mut i = 0;\n\n    loop {\n        if (vector::borrow(values, i) == &target_value) {\n            break Option::Some(i)\n        } else if (i >= size) {\n            break Option::None\n        };\n        i = i + 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minimum Price from PurchaseCap in Sui Move\nDESCRIPTION: Accessor function to get the min_price from a PurchaseCap instance. This function allows extracting the minimum price set for an item associated with a purchase capability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_53\n\nLANGUAGE: move\nCODE:\n```\npublic fun purchase_cap_min_price<T: key + store>(self: &PurchaseCap<T>): u64 {\n    self.min_price\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Provider Components in React\nDESCRIPTION: TypeScript code to set up QueryClientProvider, SuiClientProvider, and WalletProvider in a React application for use with dApp Kit.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/client-tssdk.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@mysten/dapp-kit/dist/index.css';\n\nimport { SuiClientProvider, WalletProvider } from '@mysten/dapp-kit';\nimport { getFullnodeUrl } from '@mysten/sui/client';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\nconst queryClient = new QueryClient();\nconst networks = {\n\tdevnet: { url: getFullnodeUrl('devnet') },\n\tmainnet: { url: getFullnodeUrl('mainnet') },\n};\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n\t<React.StrictMode>\n\t\t<QueryClientProvider client={queryClient}>\n\t\t\t<SuiClientProvider networks={networks} defaultNetwork=\"devnet\">\n\t\t\t\t<WalletProvider>\n\t\t\t\t\t<App />\n\t\t\t\t</WalletProvider>\n\t\t\t</SuiClientProvider>\n\t\t</QueryClientProvider>\n\t</React.StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Signing Transaction with Wallet\nDESCRIPTION: Signing a transaction using the sui:signTransaction feature which returns transaction bytes and signature\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/wallet-standard.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nwallet.features[sui:signTransaction].signTransaction(<Transaction>, <WalletAccount>);\n```\n\n----------------------------------------\n\nTITLE: Adding City to Weather Oracle in Sui Move\nDESCRIPTION: Function to add a new city to the weather oracle. It creates a CityWeatherOracle object and adds it as a dynamic field to the WeatherOracle.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/weather-oracle.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npublic fun add_city(\n    _: &AdminCap, // The admin capability\n    oracle: &mut WeatherOracle, // A mutable reference to the oracle object\n    geoname_id: u32, // The unique identifier of the city\n    name: String, // The name of the city\n    country: String, // The country of the city\n    latitude: u32, // The latitude of the city in degrees\n    positive_latitude: bool, // The whether the latitude is positive (north) or negative (south)\n    longitude: u32, // The longitude of the city in degrees\n    positive_longitude: bool, // The whether the longitude is positive (east) or negative (west)\n    ctx: &mut TxContext // A mutable reference to the transaction context\n) {\n    dof::add(&mut oracle.id, geoname_id, // Add a new dynamic object field to the oracle object with the geoname ID as the key and a new city weather oracle object as the value.\n        CityWeatherOracle {\n            id: object::new(ctx), // Assign a unique ID to the city weather oracle object\n            geoname_id, // Set the geoname ID of the city weather oracle object\n            name,  // Set the name of the city weather oracle object\n            country,  // Set the country of the city weather oracle object\n            latitude,  // Set the latitude of the city weather oracle object\n            positive_latitude,  // Set whether the latitude is positive (north) or negative (south)\n            longitude,  // Set the longitude of the city weather oracle object\n            positive_longitude,  // Set whether the longitude is positive (east) or negative (west)\n            weather_id: 0, // Initialize the weather condition code to be zero\n            temp: 0, // Initialize the temperature to be zero\n            pressure: 0, // Initialize the pressure to be zero\n            humidity: 0, // Initialize the humidity to be zero\n            visibility: 0, // Initialize the visibility to be zero\n            wind_speed: 0, // Initialize the wind speed to be zero\n            wind_deg: 0, // Initialize the wind direction to be zero\n            wind_gust: option::none(), // Initialize the wind gust to be none\n            clouds: 0, // Initialize the cloudiness to be zero\n            dt: 0 // Initialize the timestamp to be zero\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Move Check Command-Line Tool\nDESCRIPTION: Command-line usage for the Move check tool, which validates Move source code without producing bytecode. The tool accepts source files, sender address, and dependencies as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-compiler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmove-check 0.0.1\nCheck Move source code, without compiling to bytecode.\n\nUSAGE:\n    move-check [OPTIONS] [--] [PATH_TO_SOURCE_FILE]...\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nOPTIONS:\n    -s, --sender <ADDRESS>                           The sender address for modules and scripts\n    -d, --dependency <PATH_TO_DEPENDENCY_FILE>...    The library files needed as dependencies\n\nARGS:\n    <PATH_TO_SOURCE_FILE>...    The source files to check\n```\n\n----------------------------------------\n\nTITLE: Defining BridgeTreasury Struct in Move\nDESCRIPTION: Defines the main BridgeTreasury struct which stores treasuries, supported tokens, and a mapping of token IDs to types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/treasury.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct BridgeTreasury has store {\n    treasuries: sui::object_bag::ObjectBag,\n    supported_tokens: sui::vec_map::VecMap<std::type_name::TypeName, bridge::treasury::BridgeTokenMetadata>,\n    id_token_type_map: sui::vec_map::VecMap<u8, std::type_name::TypeName>,\n    waiting_room: sui::bag::Bag\n}\n```\n\n----------------------------------------\n\nTITLE: Using Borrow Module in a Programmable Transaction Block\nDESCRIPTION: This JavaScript snippet demonstrates how to use the borrow module within a Programmable Transaction Block to retrieve, use, and return an asset.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/simulating-refs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// initialize the PTB\nconst txb = new TransactionBlock();\n// load the assetManager\nconst assetManager = txb.object(assetManagerId);\n// retrieve the asset\nconst [asset, borrow] = txb.moveCall({\n    target: \"0xaddr1::another_module::get_asset\",\n    arguments: [ assetManager ],\n});\n// use the asset\ntxb.moveCall({\n    target: \"0xaddr2::a_module::use_asset\",\n    arguments: [ asset ],\n});\n// return the asset\ntxb.moveCall({\n    target: \"0xaddr1::another_module::return_asset\",\n    arguments: [ assetManager, asset, borrow ],\n});\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a New Empty Display Object in Move\nDESCRIPTION: Function to create a new empty Display object for type T. Requires a Publisher instance to verify that the caller is authorized to create a Display for the given type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new<T: key>(pub: &Publisher, ctx: &mut TxContext): Display<T> {\n    assert!(is_authorized<T>(pub), ENotOwner);\n    create_internal(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Default TransferPolicy Setup in Move\nDESCRIPTION: Implements the default function, which initializes the Transfer Policy in a standard scenario by creating and sharing the TransferPolicy and transferring the associated TransferPolicyCap to the transaction sender.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\nentry fun default<T>(pub: &sui::package::Publisher, ctx: &mut sui::tx_context::TxContext)\n```\n\n----------------------------------------\n\nTITLE: Setting Up BOB's Transaction in Escrow Test\nDESCRIPTION: Transaction simulation where BOB creates a coin, locks it, and stores the object IDs needed for the swap. This demonstrates how to initialize locked assets for trading.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\n// BOB creates a coin and locks it\ntest_scenario::next_tx(&mut scenario, BOB);\n{\n    let ctx = test_scenario::ctx(&mut scenario);\n    let coin = test_coin(100, ctx);\n    let (locked, key) = lock::lock(coin, ctx);\n    let ik2 = object::id(&key);\n    let io2 = object::id(&locked);\n    transfer::public_transfer(locked, BOB);\n    transfer::public_transfer(key, BOB);\n}\n```\n\n----------------------------------------\n\nTITLE: Claiming Token from Bridge in Move\nDESCRIPTION: Claims a token from the bridge for a specific source chain and bridge sequence number. Only the token owner can claim the token. Throws errors if the claim is unauthorized or if the token has already been claimed or hit a limit.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun claim_token<T>(\n    bridge: &mut Bridge,\n    clock: &Clock,\n    source_chain: u8,\n    bridge_seq_num: u64,\n    ctx: &mut TxContext,\n): Coin<T> {\n    let (maybe_token, owner) = bridge.claim_token_internal<T>(\n        clock,\n        source_chain,\n        bridge_seq_num,\n        ctx,\n    );\n    // Only token owner can claim the token\n    assert!(ctx.sender() == owner, EUnauthorisedClaim);\n    assert!(maybe_token.is_some(), ETokenAlreadyClaimedOrHitLimit);\n    maybe_token.destroy_some()\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Value from ObjectBag in Move\nDESCRIPTION: Removes and returns a value from the ObjectBag given a key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_bag.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove<K: copy + drop + store, V: key + store>(bag: &mut ObjectBag, k: K): V {\n    let v = ofield::remove(&mut bag.id, k);\n    bag.size = bag.size - 1;\n    v\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing an Element to TableVec in Sui Move\nDESCRIPTION: Implements the push_back function to add an element to the end of the TableVec.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table_vec.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun push_back<Element: store>(t: &mut TableVec<Element>, e: Element) {\n    let key = t.length();\n    t.contents.add(key, e);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Method Aliases with 'use fun'\nDESCRIPTION: Example showing how to create method aliases using 'use fun' statements. This allows renaming functions for use with method syntax, making code more readable and reducing boilerplate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nmodule b::example {\n    use fun a::cup::cup_borrow as Cup.borrow;\n    use fun a::cup::cup_value as Cup.value;\n    use fun a::cup::cup_swap as Cup.set;\n\n    fun example(c: &mut Cup<u64>) {\n        let _ = c.borrow(); // resolves to a::cup::cup_borrow\n        let v = c.value(); // resolves to a::cup::cup_value\n        c.set(v * 2); // resolves to a::cup::cup_swap\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mutably Borrowing Dynamic Field in Move\nDESCRIPTION: This function mutably borrows a dynamic field from a Sui object. It aborts if the field doesn't exist or if there's a type mismatch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow_mut<Name: copy + drop + store, Value: store>(\n    object: &mut UID,\n    name: Name,\n): &mut Value {\n    let object_addr = object.to_address();\n    let hash = hash_type_and_key(object_addr, name);\n    let field = borrow_child_object_mut<Field<Name, Value>>(object, hash);\n    &mut field.value\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Pool Depth in Move\nDESCRIPTION: Function to get the depth of level2 orders on the bid side within a specified price range. Returns vectors of prices and corresponding depths.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/query-the-pool.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_level2_book_status_bid_side<BaseAsset, QuoteAsset>(\n     pool: &Pool<BaseAsset, QuoteAsset>,\n     price_low: u64,\n     price_high: u64,\n     clock: &Clock\n): (vector<u64>, vector<u64>)\n```\n\n----------------------------------------\n\nTITLE: Navigating to Move Package Directory\nDESCRIPTION: Change the current directory to the location of the Move package.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n$ cd examples/move/first_package\n```\n\n----------------------------------------\n\nTITLE: Element Creation from Bytes\nDESCRIPTION: Package-internal function to create an Element from raw bytes with optional validation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun from_bytes<G>(type_: u8, bytes: &vector<u8>, is_trusted: bool): Element<G> {\n    assert!(is_trusted || internal_validate(type_, bytes), EInvalidInput);\n    Element<G> { bytes: *bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering for Bridge Committee in Move\nDESCRIPTION: Public function that allows validators to register for bridge committee participation. The registration includes providing a bridge public key and HTTP REST URL, which are essential for cross-chain communication.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun committee_registration(\n    bridge: &mut Bridge,\n    system_state: &mut SuiSystemState,\n    bridge_pubkey_bytes: vector<u8>,\n    http_rest_url: vector<u8>,\n    ctx: &TxContext\n) {\n    load_inner_mut(bridge)\n        .committee\n        .register(system_state, bridge_pubkey_bytes, http_rest_url, ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Maximum U256 Value Macro\nDESCRIPTION: Returns the maximum possible value for a u256 type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun max_value(): u256 {\n    0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF\n}\n```\n\n----------------------------------------\n\nTITLE: Token Transfer Status Structures in Move\nDESCRIPTION: Definitions of structures for tracking different token transfer states including approved, claimed, and error conditions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TokenTransferApproved has copy, drop {\n    message_key: bridge::message::BridgeMessageKey\n}\n\npublic struct TokenTransferClaimed has copy, drop {\n    message_key: bridge::message::BridgeMessageKey\n}\n\npublic struct TokenTransferAlreadyApproved has copy, drop {\n    message_key: bridge::message::BridgeMessageKey\n}\n\npublic struct TokenTransferAlreadyClaimed has copy, drop {\n    message_key: bridge::message::BridgeMessageKey\n}\n\npublic struct TokenTransferLimitExceed has copy, drop {\n    message_key: bridge::message::BridgeMessageKey\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Element in Vector in Move\nDESCRIPTION: This function checks if a given element exists in the vector. It returns true if the element is found, false otherwise.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun contains<Element>(v: &vector<Element>, e: &Element): bool {\n    let mut i = 0;\n    let len = v.length();\n    while (i < len) {\n        if (&v[i] == e) return true;\n        i = i + 1;\n    };\n    false\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Multi-Scalar Multiplication (Move)\nDESCRIPTION: The `internal_multi_scalar_mul` function performs multi-scalar multiplication of group elements. This native function requires the group type as a `u8`, a byte vector of scalars, and a byte vector of group elements. It returns the result of the multi-scalar multiplication as a byte vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/group_ops.md#sui_group_ops_internal_multi_scalar_mul\">internal_multi_scalar_mul</a>(\n    type_: u8,\n    scalars: &vector&lt;u8&gt;,\n    elements: &vector&lt;u8&gt;,\n): vector&lt;u8&gt;;\n```\n\n----------------------------------------\n\nTITLE: Defining Rentables Extension Struct in Move\nDESCRIPTION: Basic struct definition for the Rentables extension key in the kiosk system. Has only the drop ability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic struct Rentables has drop {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Check zklogin ID Internal Function in Move\nDESCRIPTION: The native check_zklogin_id_internal function verifies if an address was created using zklogin credentials. It takes input in vector<u8> format for key claim names, values, issuer, audience, and a pin hash. Aborts if inputs are non-UTF-8 encoded or exceed specified character limits, it returns a boolean.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_id.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\nnative fun check_zklogin_id_internal(\n    address: address,\n    key_claim_name: &vector<u8>,\n    key_claim_value: &vector<u8>,\n    issuer: &vector<u8>,\n    audience: &vector<u8>,\n    pin_hash: u256,\n): bool;\n```\n\n----------------------------------------\n\nTITLE: Getting Token Value in Move\nDESCRIPTION: This function returns the balance of a Token. It takes a Token as input and returns a u64 value representing the token's balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_40\n\nLANGUAGE: Move\nCODE:\n```\npublic fun value<T>(t: &Token<T>): u64 {\n    t.balance.value()\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Dynamic Field Existence with Type in Move\nDESCRIPTION: This function checks if a dynamic field exists on a Sui object with a specific value type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun exists_with_type<Name: copy + drop + store, Value: store>(\n    object: &UID,\n    name: Name,\n): bool {\n    let object_addr = object.to_address();\n    let hash = hash_type_and_key(object_addr, name);\n    has_child_object_with_ty<Field<Name, Value>>(object_addr, hash)\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Market Orders in Move on SUI Blockchain\nDESCRIPTION: Function signature for placing a market order in the SUI Move contract. It takes a pool, quantity, buy/sell flag, base and quote coins, system clock, and transaction context, and returns the updated coin objects after the transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\n/// Parameters expected by this func\n///\n///   0. `[pool]` Object ID refers to the pool of the trading pair\n///   1. `[quantity]` Quantity of the base asset usr want to buy or sell\n///   2. `[is_bid]` Flag indicates buy or sell, true for buy and false for sell\n///   3. `[base_coin]` Object id of base coin, can be zero balance\n///   4. `[quote_coin]` Object id of the quote coin, can be zero balance\n///   5. `[clock]` Object ID refers to global system clock\n///   6. `[ctx]` Information about the transaction currently being executed.\n\n/// Returns the base asset coin and quote asset coin after transaction\npublic fun place_market_order<BaseAsset, QuoteAsset>(\n        pool: &mut Pool<BaseAsset, QuoteAsset>,\n        quantity: u64,\n        is_bid: bool,\n        base_coin: Coin<BaseAsset>,\n        quote_coin: Coin<QuoteAsset>,\n        clock: &Clock,\n        ctx: &mut TxContext,\n    ): (Coin<BaseAsset>, Coin<QuoteAsset>)\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Error Handling in Display Module\nDESCRIPTION: Error constants used in the Display module for validation. Includes errors for unauthorized access attempts and vector length mismatches in bulk operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\nconst ENotOwner: u64 = 0;\nconst EVecLengthMismatch: u64 = 1;\n```\n\n----------------------------------------\n\nTITLE: Returning Borrowed Object in Move\nDESCRIPTION: Implements the put_back function to return a borrowed object and its associated Borrow hot potato. It checks if the returned object matches the original one.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/borrow.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun put_back<T: key + store>(self: &mut Referent<T>, value: T, borrow: Borrow) {\n    let Borrow { ref, obj } = borrow;\n    assert!(object::id(&value) == obj, EWrongValue);\n    assert!(self.id == ref, EWrongBorrow);\n    self.value.fill(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Certification Validity Checks\nDESCRIPTION: Detailed validation process for transactions before certification by validators\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-architecture/transaction-lifecycle.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nValidation Checks:\n- Valid user signature\n- User has access to owned input objects\n- Shared input objects exist\n- Gas coin is valid and sufficient\n```\n\n----------------------------------------\n\nTITLE: Popping Back Element from LinkedTable (Move)\nDESCRIPTION: Removes and returns the back element of the LinkedTable. Aborts with ETableIsEmpty if the table is empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pop_back<K: copy + drop + store, V: store>(table: &mut LinkedTable<K, V>): (K, V) {\n    assert!(table.tail.is_some(), ETableIsEmpty);\n    let tail = *table.tail.borrow();\n    (tail, table.remove(tail))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransferPolicyCreated Struct in Move\nDESCRIPTION: Defines the TransferPolicyCreated struct which is an event emitted when a publisher creates a new TransferPolicyCap, facilitating discoverability and tracking of supported types. The struct utilizes Move's public visibility and trait capabilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TransferPolicyCreated<T: phantom> has copy, drop\n```\n\n----------------------------------------\n\nTITLE: Constants Definition in Move for Blackjack Game Status\nDESCRIPTION: Core game status constants defined in the single_player_blackjack.move module to track game states including in-progress, player won, house won, and tie scenarios.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/blackjack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nIN_PROGRESS\nPLAYER_WON_STATUS\nHOUSE_WON_STATUS\nTIE_STATUS\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Wallet Events\nDESCRIPTION: Implementation of event subscription for wallet changes including chains, features, and accounts\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/wallet-standard.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst unsubscribe = wallet.features['standard:events'].on('change', callback);\n```\n\n----------------------------------------\n\nTITLE: Checking Dynamic Object Field Existence\nDESCRIPTION: Checks if a dynamic object field exists on an object with the specified name.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun exists_<Name: copy + drop + store>(object: &UID, name: Name): bool {\n    let key = Wrapper { name };\n    field::exists_with_type<Wrapper<Name>, ID>(object, key)\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Some Option in Sui Move\nDESCRIPTION: Unpacks the option and returns its contents. Aborts if the option does not hold a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_some<Element>(t: Option<Element>): Element {\n    assert!(t.is_some(), EOPTION_NOT_SET);\n    let Option { mut vec } = t;\n    let elem = vec.pop_back();\n    vec.destroy_empty();\n    elem\n}\n```\n\n----------------------------------------\n\nTITLE: Pay SUI to Address using Sui Client\nDESCRIPTION: This command transfers SUI to a recipient address, using the specified input coins and amounts.  Gas is paid using the same input coin.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client pay-sui `<br/>&nbsp;&nbsp;`--input-coins COIN_ID `<br/>&nbsp;&nbsp;`--recipients ADDRESS `<br/>&nbsp;&nbsp;`--amounts 100000000\"\n```\n\n----------------------------------------\n\nTITLE: Fixed-point Comparison Operations in Move\nDESCRIPTION: Implements comparison operations (le, lt, ge, gt) for fixed-point numbers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun le(a: UQ64_64, b: UQ64_64): bool {\n    a.0 <= b.0\n}\n\npublic fun lt(a: UQ64_64, b: UQ64_64): bool {\n    a.0 < b.0\n}\n\npublic fun ge(a: UQ64_64, b: UQ64_64): bool {\n    a.0 >= b.0\n}\n\npublic fun gt(a: UQ64_64, b: UQ64_64): bool {\n    a.0 > b.0\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Sum of Uncompressed G1 Elements for BLS12-381 in Move\nDESCRIPTION: Computes the sum of a list of uncompressed G1 elements in the BLS12-381 curve. This batch operation is significantly faster and more gas-efficient than summing elements individually.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_45\n\nLANGUAGE: Move\nCODE:\n```\npublic fun uncompressed_g1_sum(terms: &vector<Element<UncompressedG1>>): Element<UncompressedG1> {\n    group_ops::sum(UNCOMPRESSED_G1_TYPE, terms)\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Definitions for BLS12-381 Groups in Move\nDESCRIPTION: Defines the core data structures for BLS12-381 elliptic curve groups, including Scalar, G1, G2, GT, and UncompressedG1. These structures serve as the foundation for all curve operations in the module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic struct Scalar\n{\n}\n\npublic struct G1\n{\n}\n\npublic struct G2\n{\n}\n\npublic struct GT\n{\n}\n\npublic struct UncompressedG1\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Sui Client CLI Subcommands\nDESCRIPTION: This snippet shows the full list of available subcommands for the 'sui client' command, including their descriptions and usage instructions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: sui client [OPTIONS] [COMMAND]\n\nCommands:\n  active-address              Default address used for commands when none specified\n  active-env                  Default environment used for commands when none specified\n  addresses                   Obtain the Addresses managed by the client\n  balance                     List the coin balance of an address\n  call                        Call Move function\n  chain-identifier            Query the chain identifier from the rpc endpoint\n  dynamic-field               Query a dynamic field by its address\n  envs                        List all Sui environments\n  execute-signed-tx           Execute a Signed Transaction. This is useful when the user prefers to sign elsewhere and use this command to execute\n  execute-combined-signed-tx  Execute a combined serialized SenderSignedData string\n  faucet                      Request gas coin from faucet. By default, it will use the active address and the active network\n  gas                         Obtain all gas objects owned by the address. An address' alias can be used instead of the address\n  merge-coin                  Merge two coin objects into one coin\n  new-address                 Generate new address and keypair with keypair scheme flag {ed25519 | secp256k1 | secp256r1} with optional derivation path, default to m/44'/784'/0'/0'/0' for ed25519 or m/54'/784'/0'/0/0\n                                  for secp256k1 or m/74'/784'/0'/0/0 for secp256r1. Word length can be { word12 | word15 | word18 | word21 | word24} default to word12 if not specified\n  new-env                     Add new Sui environment\n  object                      Get object info\n  objects                     Obtain all objects owned by the address. It also accepts an address by its alias\n  pay                         Pay coins to recipients following specified amounts, with input coins. Length of recipients must be the same as that of amounts\n  pay-all-sui                 Pay all residual SUI coins to the recipient with input coins, after deducting the gas cost. The input coins also include the coin for gas payment, so no extra gas coin is required\n  pay-sui                     Pay SUI coins to recipients following following specified amounts, with input coins. Length of recipients must be the same as that of amounts. The input coins also include the coin for\n                                  gas payment, so no extra gas coin is required\n  publish                     Publish Move modules\n  split-coin                  Split a coin object into multiple coins\n  switch                      Switch active address and network(e.g., devnet, local rpc server)\n  tx-block                    Get the effects of executing the given transaction block\n  transfer                    Transfer object\n  transfer-sui                Transfer SUI, and pay gas with the same SUI coin object. If amount is specified, only the amount is transferred; otherwise the entire object is transferred\n  upgrade                     Upgrade Move modules\n  verify-bytecode-meter       Run the bytecode verifier on the package\n  verify-source               Verify local Move packages against on-chain packages, and optionally their dependencies\n  profile-transaction         Profile the gas usage of a transaction. Unless an output filepath is not specified, outputs a file `gas_profile_{tx_digest}_{unix_timestamp}.json` which can be opened in a flamegraph\n                                  tool such as speedscope\n  replay-transaction          Replay a given transaction to view transaction effects. Set environment variable MOVE_VM_STEP=1 to debug\n  replay-batch                Replay transactions listed in a file\n  replay-checkpoint           Replay all transactions in a range of checkpoints\n  help                        Print this message or the help of the given subcommand(s)\n\nOptions:\n      --client.config <CONFIG>  Sets the file storing the state of our user accounts (an empty one will be created if missing)\n      --json                    Return command outputs in json format\n  -y, --yes\n  -h, --help                    Print help\n```\n\n----------------------------------------\n\nTITLE: Updating Weather Data in Sui Move Oracle\nDESCRIPTION: Function signature for updating weather data for a specific city in the weather oracle. It takes various weather parameters and updates the corresponding CityWeatherOracle object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/weather-oracle.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npublic fun update(\n    _: &AdminCap,\n    oracle: &mut WeatherOracle,\n    geoname_id: u32,\n    weather_id: u16,\n    temp: u32,\n    pressure: u32,\n    humidity: u8,\n    visibility: u16,\n    wind_speed: u16,\n    wind_deg: u16,\n    wind_gust: Option<u16>,\n    clouds: u8,\n    dt: u32\n) {\n```\n\n----------------------------------------\n\nTITLE: Updating Display Version - Move\nDESCRIPTION: Increments the version number of a Display object and emits a VersionUpdated event with updated fields.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_version<T: key>(display: &mut Display<T>) {\n    display.version = display.version + 1;\n    event::emit(VersionUpdated<T> {\n        version: display.version,\n        fields: *&display.fields,\n        id: display.id.to_inner(),\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Coin to Balance in Move\nDESCRIPTION: Merges a Coin into an existing Balance. This function consumes the Coin and adds its value to the Balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun put<T>(balance: &mut Balance<T>, coin: Coin<T>) {\n    balance.join(into_balance(coin));\n}\n```\n\n----------------------------------------\n\nTITLE: String Utility Functions\nDESCRIPTION: Helper functions for working with UTF-8 strings including byte access and validation\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_utf8(bytes: vector<u8>): Option<String> {\n    if (internal_check_utf8(&bytes)) option::some(String { bytes })\n    else option::none()\n}\n\npublic fun as_bytes(s: &String): &vector<u8> {\n    &s.bytes\n}\n\npublic fun into_bytes(s: String): vector<u8> {\n    let String { bytes } = s;\n    bytes\n}\n\npublic fun is_empty(s: &String): bool {\n    s.bytes.is_empty()\n}\n```\n\n----------------------------------------\n\nTITLE: Update Bridge Route Transfer Limit\nDESCRIPTION: Updates the transfer limit for a specific bridge route and emits an event with the new limit details.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/limiter.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun update_route_limit(\n    self: &mut TransferLimiter,\n    route: &BridgeRoute,\n    new_usd_limit: u64\n) {\n    let receiving_chain = *route.destination();\n    if (!self.transfer_limits.contains(route)) {\n        self.transfer_limits.insert(*route, new_usd_limit);\n    } else {\n        *&mut self.transfer_limits[route] = new_usd_limit;\n    };\n    emit(UpdateRouteLimitEvent {\n        sending_chain: *route.source(),\n        receiving_chain,\n        new_limit: new_usd_limit,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Division with Rounding Up\nDESCRIPTION: Divides two u128 values and rounds up the result to the nearest integer.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_and_round_up(x: u128, y: u128): u128 {\n    std::macros::num_divide_and_round_up!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference for Vector Creation with Usage in Move\nDESCRIPTION: This example demonstrates how the Move compiler can infer the type of a vector when it is used later in the function, eliminating the need for manual type annotation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    fun foo() {\n        let v = vector[];\n        //            ^ <u64> is inferred\n        vector::push_back(&mut v, 42);\n        //               ^ <u64> is inferred\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Key-Value Type Existence in Sui Bag (Move)\nDESCRIPTION: Implements the 'contains_with_type' function to check if a key exists with a specific value type in the bag. It uses the field::exists_with_type function for type-specific checking.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bag.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun contains_with_type<K: copy + drop + store, V: store>(bag: &Bag, k: K): bool {\n    field::exists_with_type<K, V>(&bag.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VersionChangeCap struct in Move\nDESCRIPTION: Defines a capability struct used when upgrading a Versioned object to ensure proper version changes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/versioned.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct VersionChangeCap {\n    versioned_id: sui::object::ID,\n    old_version: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Mutable Profits Access in Sui Kiosk\nDESCRIPTION: Owner-only function to get mutable access to profits balance in a Kiosk. Requires owner capability verification.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_45\n\nLANGUAGE: Move\nCODE:\n```\npublic fun profits_mut(self: &mut Kiosk, cap: &KioskOwnerCap): &mut Balance<SUI> {\n    assert!(self.has_access(cap), ENotOwner);\n    &mut self.profits\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Filter Macro Implementation in Rust\nDESCRIPTION: Filters a vector by applying a predicate function to each element, returning a new vector with matching elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_17\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun filter<$T: drop>($v: vector<$T>, $f: |&$T| -> bool): vector<$T> {\n    let v = $v;\n    let mut r = vector[];\n    v.do!(|e| if ($f(&e)) r.push_back(e));\n    r\n}\n```\n\n----------------------------------------\n\nTITLE: Bridging Package IDs and Contract Addresses for Sui\nDESCRIPTION: Key identifiers for Sui Bridge contracts and token addresses across different blockchain networks\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics/sui-bridging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Sui Bridge package on Sui | `0xb` |\n| Sui Bridge object on Sui | `0x9` |\n| Sui Bridge contract on Etheruem Mainnet | `0xda3bD1fE1973470312db04551B65f401Bc8a92fD` |\n```\n\n----------------------------------------\n\nTITLE: Option Value Access Functions\nDESCRIPTION: Functions for accessing Option values with different patterns including direct borrowing and default value handling.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow<Element>(t: &Option<Element>): &Element {\n    assert!(t.is_some(), EOPTION_NOT_SET);\n    &t.vec[0]\n}\n\npublic fun borrow_with_default<Element>(t: &Option<Element>, default_ref: &Element): &Element {\n    let vec_ref = &t.vec;\n    if (vec_ref.is_empty()) default_ref\n    else &vec_ref[0]\n}\n\npublic fun get_with_default<Element: copy + drop>(t: &Option<Element>, default: Element): Element {\n    let vec_ref = &t.vec;\n    if (vec_ref.is_empty()) default\n    else vec_ref[0]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sum Function with While Loop in Move\nDESCRIPTION: A function that calculates the sum of numbers from 1 to n using a while loop. The function iterates through each number, adding it to a running sum until the counter exceeds n.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nfun sum(n: u64): u64 {\n    let mut sum = 0;\n    let mut i = 1;\n    while (i <= n) {\n        sum = sum + i;\n        i = i + 1\n    };\n\n    sum\n}\n```\n\n----------------------------------------\n\nTITLE: Getting From ID from TransferRequest in Move\nDESCRIPTION: Getter function that returns the from field (origin ID) from a TransferRequest struct. Takes a reference to a TransferRequest<T> and returns a sui::object::ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_29\n\nLANGUAGE: move\nCODE:\n```\npublic fun from<T>(self: &sui::transfer_policy::TransferRequest<T>): ID { self.from }\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Next Epoch Worker Address - Move\nDESCRIPTION: Updates the worker address for a validator to be effective from the next epoch. Incorporates transaction context and requires the new worker address as an input. The function ensures that modifications are stored within Sui's system state.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_26\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_next_epoch_worker_address(self: &mut sui_system::sui_system::SuiSystemState, worker_address: vector<u8>, ctx: &sui::tx_context::TxContext)\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_next_epoch_worker_address(\n    self: &mut SuiSystemState,\n    worker_address: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_validator_next_epoch_worker_address(worker_address, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Configuration Type Existence for Next Epoch in Move\nDESCRIPTION: Checks if a configuration value with specific type exists for the next epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/config.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun exists_with_type_for_next_epoch<WriteCap, Name: copy + drop + store, Value: copy + drop + store>(\n    config: &Config<WriteCap>,\n    name: Name,\n    ctx: &TxContext,\n): bool\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Price for Next Epoch in Sui Move\nDESCRIPTION: Updates a validator's gas price for the next epoch. Requires a valid ValidatorOperationCap object and ensures the new price is below the maximum threshold.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_36\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun request_set_gas_price(\n    self: &mut Validator,\n    verified_cap: ValidatorOperationCap,\n    new_price: u64,\n) {\n    assert!(new_price < MAX_VALIDATOR_GAS_PRICE, EGasPriceHigherThanThreshold);\n    let validator_address = *verified_cap.verified_operation_cap_address();\n    assert!(validator_address == self.metadata.sui_address, EInvalidCap);\n    self.next_epoch_gas_price = new_price;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Package Version in Move\nDESCRIPTION: Gets the most recent version of the package, which increments by one for each successfully applied upgrade.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun version(cap: &UpgradeCap): u64 {\n    cap.version\n}\n```\n\n----------------------------------------\n\nTITLE: Running Move Unit Tests\nDESCRIPTION: Commands for running Move unit tests in a package, with options for specifying the package location.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ move test # Run Move unit tests in the current package\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ move test -p <path> # Run Move unit tests in the package at <path>\n```\n\n----------------------------------------\n\nTITLE: Modifying Display Object Properties in Sui Move\nDESCRIPTION: Function signatures for modifying the properties of a Display object, including adding multiple fields, editing a single field, and removing a field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/display.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nmodule sui::display;\n\n/// Sets multiple fields at once\npublic fun add_multiple(\n    self: &mut Display,\n    keys: vector<String>,\n    values: vector<String>\n) { /* ... */ }\n\n/// Edit a single field\npublic fun edit(self: &mut Display, key: String, value: String) { /* ... */ }\n\n/// Remove a key from Display\npublic fun remove(self: &mut Display, key: String ) { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Profits from TransferPolicy in Move\nDESCRIPTION: This function allows withdrawal of specified or total profits from a TransferPolicy. It checks ownership and available balance before executing the withdrawal. The operation depends on the Sui platform's TransferPolicyCap and might return a Coin of SUI type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun withdraw<T>(\n    self: &mut TransferPolicy<T>,\n    cap: &TransferPolicyCap<T>,\n    amount: Option<u64>,\n    ctx: &mut TxContext,\n): Coin<SUI> {\n    assert!(object::id(self) == cap.policy_id, ENotOwner);\n    let amount = if (amount.is_some()) {\n        let amt = amount.destroy_some();\n        assert!(amt <= self.balance.value(), ENotEnough);\n        amt\n    } else {\n        self.balance.value()\n    };\n    coin::take(&mut self.balance, amount, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Warrior without Equipment in Move\nDESCRIPTION: This function creates a new SimpleWarrior with no initial equipment. It uses option::none() to set the sword and shield fields to empty, demonstrating the flexibility of the Option type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/wrapped.mdx#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic fun create_warrior(ctx: &mut TxContext) {\n    let warrior = SimpleWarrior {\n        id: object::new(ctx),\n        sword: option::none(),\n        shield: option::none(),\n    };\n    transfer::transfer(warrior, ctx.sender())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Methods for Types from Other Modules\nDESCRIPTION: Example demonstrating how to create a method alias for a function defined in another module. This allows using method syntax with functions that work on types defined elsewhere.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\n    fun double(c: &Cup<u64>): Cup<u64> {\n        let v = c.value();\n        Cup::new(v * 2)\n    }\n```\n\nLANGUAGE: move\nCODE:\n```\n    fun double_double(c: Cup<u64>): (Cup<u64>, Cup<u64>) {\n        use fun b::example::double as Cup.dub;\n        (c.dub(), c.dub()) // resolves to b::example::double in both calls\n    }\n```\n\n----------------------------------------\n\nTITLE: Random Number Generation\nDESCRIPTION: Implementation of random number generation functionality with various output types and ranges.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_40\n\nLANGUAGE: move\nCODE:\n```\npublic struct Random\npublic struct RandomInner\npublic struct RandomGenerator\npublic fun generate_bytes\npublic fun generate_u256\npublic fun generate_u128\npublic fun generate_u64\n```\n\n----------------------------------------\n\nTITLE: Accessing Committee Members in Move\nDESCRIPTION: Provides read access to committee members data structure. Returns a reference to the VecMap containing committee member information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun committee_members(self: &BridgeCommittee): &VecMap<vector<u8>, CommitteeMember>\n```\n\n----------------------------------------\n\nTITLE: Installing Rust and Cargo using rustup\nDESCRIPTION: Command to install Rust and Cargo on macOS or Linux using rustup and cURL. This installs the latest stable version of Rust and its package manager.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence in LinkedTable (Move)\nDESCRIPTION: Returns true if there is a value associated with the given key in the LinkedTable, false otherwise.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun contains<K: copy + drop + store, V: store>(table: &LinkedTable<K, V>, k: K): bool {\n    field::exists_with_type<K, Node<K, V>>(&table.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Sui Transaction Details\nDESCRIPTION: This snippet shows the full output of a Sui blockchain transaction, including object changes, gas costs, and balance changes. It provides information about created objects, mutated objects, published packages, and the account involved in the transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\n╭───────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Transaction Data                                                                                  │\n├───────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ Created Objects:                                                                                   │\n│  ┌──                                                                                              │\n│  │ ID: 0x569828cc4e134ccccd7408def18b80af1465ac791fd4ef40483f6b16e2f00d95                         │\n│  │ Owner: Account Address ( 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea )  │\n│  │ Version: 3                                                                                     │\n│  │ Digest: 4iD7ZhsFS9iFuszqxBSEL6xZdcnWG76WGgU4D5PH1PeL                                           │\n│  └──                                                                                              │\n│  ┌──                                                                                              │\n│  │ ID: 0xde670ae990c8f20fd53e9f597a0da056bdb634175176602658e9da2c2ec9cb93                         │\n│  │ Owner: Account Address ( 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea )  │\n│  │ Version: 3                                                                                     │\n│  │ Digest: AV27tn7ePXhdDyDV9TCkSQZA3mkMei9DV63AmB4DEjGN                                           │\n│  └──                                                                                              │\n│  ┌──                                                                                              │\n│  │ ID: 0xe1d9d66b7a19b27ebda338a52593cd10e728f666f34ecd30a7cc2ad3fed186da                         │\n│  │ Owner: Immutable                                                                               │\n│  │ Version: 1                                                                                     │\n│  │ Digest: 4bzxMQgcSZoKzppNiRtQwAWDBvCgjr18gQi2H8Yk1tQZ                                           │\n│  └──                                                                                              │\n│ Mutated Objects:                                                                                  │\n│  ┌──                                                                                              │\n│  │ ID: 0x01b2795ba5800c8f7cb7d7c56abe19e24c656ed6764f3ccc5e66da3de52402a8                         │\n│  │ Owner: Account Address ( 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea )  │\n│  │ Version: 3                                                                                     │\n│  │ Digest: 46rvdbXkw5qqsBYbUGChzgFatJAYPmarPmFHgRRJiiU9                                           │\n│  └──                                                                                              │\n│ Gas Object:                                                                                       │\n│  ┌──                                                                                              │\n│  │ ID: 0x01b2795ba5800c8f7cb7d7c56abe19e24c656ed6764f3ccc5e66da3de52402a8                         │\n│  │ Owner: Account Address ( 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea )  │\n│  │ Version: 3                                                                                     │\n│  │ Digest: 46rvdbXkw5qqsBYbUGChzgFatJAYPmarPmFHgRRJiiU9                                           │\n│  └──                                                                                              │\n│ Gas Cost Summary:                                                                                 │\n│    Storage Cost: 9978800                                                                          │\n│    Computation Cost: 1000000                                                                      │\n│    Storage Rebate: 978120                                                                         │\n│    Non-refundable Storage Fee: 9880                                                               │\n│                                                                                                   │\n│ Transaction Dependencies:                                                                         │\n│    891Qjq6qDZ6SzAJiAg3CEaHobXrpDL5bAy2o45ZJPTuB                                                   │\n│    ESHcS3y3VCuaCVmWkKDx3EXX3icfPtj4bHhk86gaGWdo                                                   │\n╰───────────────────────────────────────────────────────────────────────────────────────────────────╯\n╭─────────────────────────────╮\n│ No transaction block events │\n╰─────────────────────────────╯\n╭────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Object Changes                                                                                     │\n├────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ Created Objects:                                                                                   │\n│  ┌──                                                                                               │\n│  │ ObjectID: 0x569828cc4e134ccccd7408def18b80af1465ac791fd4ef40483f6b16e2f00d95                    │\n│  │ Sender: 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea                      │\n│  │ Owner: Account Address ( 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea )   │\n│  │ ObjectType: 0xe1d9d66b7a19b27ebda338a52593cd10e728f666f34ecd30a7cc2ad3fed186da::example::Forge  │\n│  │ Version: 3                                                                                      │\n│  │ Digest: 4iD7ZhsFS9iFuszqxBSEL6xZdcnWG76WGgU4D5PH1PeL                                            │\n│  └──                                                                                               │\n│  ┌──                                                                                               │\n│  │ ObjectID: 0xde670ae990c8f20fd53e9f597a0da056bdb634175176602658e9da2c2ec9cb93                    │\n│  │ Sender: 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea                      │\n│  │ Owner: Account Address ( 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea )   │\n│  │ ObjectType: 0x2::package::UpgradeCap                                                            │\n│  │ Version: 3                                                                                      │\n│  │ Digest: AV27tn7ePXhdDyDV9TCkSQZA3mkMei9DV63AmB4DEjGN                                            │\n│  └──                                                                                               │\n│ Mutated Objects:                                                                                   │\n│  ┌──                                                                                               │\n│  │ ObjectID: 0x01b2795ba5800c8f7cb7d7c56abe19e24c656ed6764f3ccc5e66da3de52402a8                    │\n│  │ Sender: 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea                      │\n│  │ Owner: Account Address ( 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea )   │\n│  │ ObjectType: 0x2::coin::Coin<0x2::sui::SUI>                                                      │\n│  │ Version: 3                                                                                      │\n│  │ Digest: 46rvdbXkw5qqsBYbUGChzgFatJAYPmarPmFHgRRJiiU9                                            │\n│  └──                                                                                               │\n│ Published Objects:                                                                                 │\n│  ┌──                                                                                               │\n│  │ PackageID: 0xe1d9d66b7a19b27ebda338a52593cd10e728f666f34ecd30a7cc2ad3fed186da                   │\n│  │ Version: 1                                                                                      │\n│  │ Digest: 4bzxMQgcSZoKzppNiRtQwAWDBvCgjr18gQi2H8Yk1tQZ                                            │\n│  │ Modules: example                                                                                │\n│  └──                                                                                               │\n╰────────────────────────────────────────────────────────────────────────────────────────────────────╯\n╭───────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Balance Changes                                                                                   │\n├───────────────────────────────────────────────────────────────────────────────────────────────────┤\n│  ┌──                                                                                              │\n│  │ Owner: Account Address ( 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea )  │\n│  │ CoinType: 0x2::sui::SUI                                                                        │\n│  │ Amount: -10000680                                                                              │\n│  └──                                                                                              │\n╰───────────────────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Updating Global Randomness State in Sui\nDESCRIPTION: This function updates the global randomness state stored in the Random object. It can only be called by the system address during epoch changes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun update_randomness_state(\n    self: &mut Random,\n    new_randomness: vector<u8>,\n    ctx: &TxContext,\n) {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    let inner = load_inner_mut(self);\n    let new_epoch = ctx.epoch();\n    assert!(\n        new_epoch > inner.epoch || \n        (new_epoch == inner.epoch && ctx.epoch_timestamp_ms() == 0),\n        EInvalidRandomnessUpdate\n    );\n    inner.epoch = new_epoch;\n    inner.randomness_round = 0;\n    inner.random_bytes = new_randomness;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Events with Sui Rust SDK\nDESCRIPTION: Demonstrates how to query events from the Sui mainnet using the Sui SDK in Rust, filtering events by Move module\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/using-events.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse sui_sdk::{rpc_types::EventFilter, types::Identifier, SuiClientBuilder};\n\nconst PACKAGE_ID_CONST: &str = \"0x279525274aa623ef31a25ad90e3b99f27c8dbbad636a6454918855c81d625abc\";\n\n#[tokio::main]\nasync fn main() -> Result<(), anyhow::Error> {\n    let sui_mainnet = SuiClientBuilder::default()\n        .build(\"https://fullnode.mainnet.sui.io:443\")\n        .await?;\n\n    let events = sui_mainnet\n        .event_api()\n        .query_events(\n            EventFilter::MoveModule {\n                package: PACKAGE_ID_CONST.parse()?,\n                module: Identifier::new(\"dev_trophy\")?,\n            },\n            None,\n            None,\n            false,\n        )\n        .await?;\n\n    for event in events.data {\n        println!(\"Event: {:?}\", event.parsed_json);\n    }\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an NFT with Static Content in Sui Move\nDESCRIPTION: Example of an NFT object (DevNetNFT) with static content where URL, name, and description are set only once during minting, demonstrating the simplest scenario for metadata representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/display.mdx#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\nmodule sui::devnet_nft;\n\nuse std::string::String;\n\n/// A Collectible with a static data. URL, name, description are\n/// set only once on a mint event\npublic struct DevNetNFT has key, store {\n    id: UID,\n    name: String,\n    description: String,\n    url: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Verifying Key for Groth16 Proof\nDESCRIPTION: Prepares a verifying key for use in Groth16 proof verification by computing pairing e(P, Q) and binding verification to a specific proof statement.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/groth16.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun prepare_verifying_key(curve: &Curve, verifying_key: &vector<u8>): PreparedVerifyingKey {\n    prepare_verifying_key_internal(curve.id, verifying_key)\n}\n```\n\n----------------------------------------\n\nTITLE: Insecure Random-Dependent Flow in Sui Move\nDESCRIPTION: This snippet shows an insecure implementation of a random-dependent function that can be exploited due to uneven resource consumption between different outcomes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/randomness-onchain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\n// Insecure implementation, do not use!\nentry fun insecure_play(r: &Random, payment: Coin<SUI>, ...) {\n  ...\n  let mut generator = new_generator(r, ctx);\n  let win = generator.generate_bool();\n  if (win) { // happy flow\n    ... cheap computation ...\n  } else {\n    ... very expensive computation ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Sui gRPC Client\nDESCRIPTION: Implements a TypeScript client for Sui gRPC API to retrieve transaction events and effects using Node.js and gRPC libraries\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/grpc-overview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm init -y\nnpm install @grpc/grpc-js @grpc/proto-loader\nnpm i -D tsx\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as grpc from '@grpc/grpc-js';\nimport * as protoLoader from '@grpc/proto-loader';\nimport * as path from 'path';\n\nconst PROTO_PATH = path.join(__dirname, 'protos/sui/rpc/v2beta/ledger_service.proto');\n\n// Load proto definitions\nconst packageDefinition = protoLoader.loadSync(PROTO_PATH, {\n  keepCase: true,\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: true,\n  includeDirs: [path.join(__dirname, 'protos')],\n});\n\nconst suiProto = grpc.loadPackageDefinition(packageDefinition) as any;\nconst LedgerService = suiProto.sui.rpc.v2beta.LedgerService;\n\n// Create gRPC client\nconst client = new LedgerService(\n  '<full node URL>:443',\n  grpc.credentials.createSsl()\n);\n\n// Sample transaction digest in Base58 format\nconst base58Digest = '3ByWphQ5sAVojiTrTrGXGM5FmCVzpzYmhsjbhYESJtxp';\n\n// Construct the request\nconst request = {\n  digest: base58Digest,\n  read_mask: {\n    paths: ['events', 'effects'],\n  },\n};\n\n// Make gRPC call\nclient.GetTransaction(request, (err: any, response: any) => {\n  if (err) {\n    console.error('Error:', err);\n  } else {\n    console.log('Response:', JSON.stringify(response, null, 2));\n  }\n});\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx c\n```\n\n----------------------------------------\n\nTITLE: Defining Map Entry Structure\nDESCRIPTION: Structure definition for a key-value entry in the map. Each entry contains a copyable key and an associated value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Entry<K: copy, V> has copy, drop, store {\n    key: K,\n    value: V\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Element from LinkedTable (Move)\nDESCRIPTION: Removes a key-value pair from the LinkedTable and returns the value. This function splices the element out of the ordering. Aborts if the table does not contain the specified key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove<K: copy + drop + store, V: store>(table: &mut LinkedTable<K, V>, k: K): V {\n    let Node<K, V> { prev, next, value } = field::remove(&mut table.id, k);\n    table.size = table.size - 1;\n    if (prev.is_some()) {\n        field::borrow_mut<K, Node<K, V>>(&mut table.id, *prev.borrow()).next = next\n    };\n    if (next.is_some()) {\n        field::borrow_mut<K, Node<K, V>>(&mut table.id, *next.borrow()).prev = prev\n    };\n    if (table.head.borrow() == &k) table.head = next;\n    if (table.tail.borrow() == &k) table.tail = prev;\n    value\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Token Actions in Sui Token Policy\nDESCRIPTION: Completely disallows an action on the Token by removing the record from the TokenPolicy rules. Aborts if the TokenPolicyCap doesn't match the TokenPolicy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_31\n\nLANGUAGE: move\nCODE:\n```\npublic fun disallow<T>(\n    self: &mut TokenPolicy<T>,\n    cap: &TokenPolicyCap<T>,\n    action: String,\n    _ctx: &mut TxContext,\n) {\n    assert!(object::id(self) == cap.for, ENotAuthorized);\n    self.rules.remove(&action);\n}\n```\n\n----------------------------------------\n\nTITLE: PoolTradeParams Function Definition\nDESCRIPTION: Function signature for retrieving trade parameters for a specific pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nasync poolTradeParams(poolKey: string) {}\n```\n\n----------------------------------------\n\nTITLE: Locking an Item in a Kiosk using Sui CLI\nDESCRIPTION: This snippet shows how to lock an item in a Sui Kiosk using the Sui CLI. It calls the 'lock' function from the 'kiosk' module, specifying the kiosk ID, capability ID, transfer policy ID, item ID, and item type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call \\\n    --package 0x2 \\\n    --module kiosk \\\n    --function lock \\\n    --args \"<KIOSK_ID>\" \"<CAP_ID>\" \"<TRANSFER_POLICY_ID>\" \"<ITEM_ID>\" \\\n    --type-args \"<ITEM_TYPE>\" \\\n    --gas-budget 1000000000\n```\n\n----------------------------------------\n\nTITLE: Generating u32 with Sui RandomGenerator - Move\nDESCRIPTION: This function generates a random 32-bit unsigned integer using the RandomGenerator. It leverages the sui::random::uint_from_bytes method to produce the integer from random bytes. The function requires a mutable reference to a RandomGenerator as input and returns a u32.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun generate_u32(g: &mut sui::random::RandomGenerator): u32 {\n    uint_from_bytes!(g, 4)\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Timestamp from Clock in Move\nDESCRIPTION: This function extracts a unix timestamp in milliseconds from the Clock object. It takes a reference to a Clock object and returns a u64 representing the timestamp.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/access-time.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun timestamp_ms(clock: &Clock): u64 { clock.timestamp_ms }\n```\n\n----------------------------------------\n\nTITLE: to_bytes Function Implementation in Move\nDESCRIPTION: Re-exports the standard library BCS serialization function to convert any value into its BCS representation as a byte vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun to_bytes<T>(value: &T): vector<u8> {\n    bcs::to_bytes(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Rules in SUI Transfer Policy - Move\nDESCRIPTION: The `rules` function retrieves the rules field from a TransferPolicy as a VecSet of TypeNames. It requires the TransferPolicy and VecSet modules, taking a TransferPolicy reference as an input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_26\n\nLANGUAGE: move\nCODE:\n```\npublic fun rules<T>(self: &sui::transfer_policy::TransferPolicy<T>): &sui::vec_set::VecSet<std::type_name::TypeName>\n```\n\nLANGUAGE: move\nCODE:\n```\npublic fun rules<T>(self: &TransferPolicy<T>): &VecSet<TypeName> {\n    &self.rules\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Bags in Move\nDESCRIPTION: This snippet demonstrates creating two Bag instances, adding key-value pairs, and comparing them. It shows that Bags with the same entries are not considered equal.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bag.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nlet bag1 = bag::new();\nlet bag2 = bag::new();\nbag::add(&mut bag1, 0, false);\nbag::add(&mut bag1, 1, true);\nbag::add(&mut bag2, 0, false);\nbag::add(&mut bag2, 1, true);\n// bag1 does not equal bag2, despite having the same entries\nassert!(&bag1 != &bag2);\n```\n\n----------------------------------------\n\nTITLE: Identifying Slashed Validators Based on Performance Reports in Move\nDESCRIPTION: This function processes validator report records to determine which validators should be slashed based on the number of reports against them. It returns a vector of addresses for validators that have been reported by a quorum of other validators.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_53\n\nLANGUAGE: Move\nCODE:\n```\nfun compute_slashed_validators(\n    self: &ValidatorSet,\n    mut validator_report_records: VecMap<address, VecSet<address>>,\n): vector<address> {\n    let mut slashed_validators = vector[];\n    while (!validator_report_records.is_empty()) {\n        let (validator_address, reporters) = validator_report_records.pop();\n        assert!(\n            self.is_active_validator_by_sui_address(validator_address),\n            ENonValidatorInReportRecords,\n        );\n        let reporter_votes = sum_voting_power_by_addresses(\n            &self.active_validators,\n            &reporters.into_keys(),\n        );\n        if (reporter_votes >= voting_power::quorum_threshold()) {\n            slashed_validators.push_back(validator_address);\n        }\n    };\n    slashed_validators\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty ASCII String in Move\nDESCRIPTION: This function checks if an ASCII string is empty. It returns true if the string's byte representation is empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_empty(string: &String): bool {\n    string.bytes.is_empty()\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Bridge Inner State in Move\nDESCRIPTION: Loads and validates the inner state of the bridge, ensuring version compatibility. Returns a reference to BridgeInner.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\nfun load_inner(\n    bridge: &Bridge,\n): &BridgeInner {\n    let version = bridge.inner.version();\n    assert!(version == CURRENT_VERSION, EWrongInnerVersion);\n    let inner: &BridgeInner = bridge.inner.load_value();\n    assert!(inner.bridge_version == version, EWrongInnerVersion);\n    inner\n}\n```\n\n----------------------------------------\n\nTITLE: Peeling Option U8 with Sui BCS in Move\nDESCRIPTION: This function, `peel_option_u8`, converts serialized bytes into an `Option<u8>` through the `peel_option` method, leveraging the sui::bcs framework. The mutable BCS reference is necessary, utilizing `peel_u8` for extracting the u8 value and wrapping it in an Option. This mechanism accommodates potential absence of the unsigned byte value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bcs.md#sui_bcs_peel_option_u8\">peel_option_u8</a>(<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>: &<b>mut</b> <a href=\"../sui/bcs.md#sui_bcs_BCS\">BCS</a>): Option&lt;u8&gt; {\n    <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_option\">peel_option</a>!(|<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>| <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_u8\">peel_u8</a>())\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Rule Config Existence in Sui Token Policy\nDESCRIPTION: Checks if a config for a Rule exists in the TokenPolicy without verifying the type of the Config. Returns a boolean indicating whether the rule config exists.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_28\n\nLANGUAGE: move\nCODE:\n```\npublic fun has_rule_config<T, Rule>(self: &TokenPolicy<T>): bool {\n    df::exists_<RuleKey<Rule>>(&self.id, key<Rule>())\n}\n```\n\n----------------------------------------\n\nTITLE: Generating u8 with Sui RandomGenerator - Move\nDESCRIPTION: This function generates a random 8-bit unsigned integer using the RandomGenerator. It calls sui::random::uint_from_bytes to produce the integer from random bytes. It requires a mutable reference to a RandomGenerator as input and outputs a u8.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun generate_u8(g: &mut sui::random::RandomGenerator): u8 {\n    uint_from_bytes!(g, 1)\n}\n```\n\n----------------------------------------\n\nTITLE: OrderFilledV2 Event Struct Definition\nDESCRIPTION: Definition of the OrderFilledV2 event struct which is emitted when a maker order is filled. Includes comprehensive details about the filled order including fees, remaining quantities, and price.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic struct OrderFilledV2<phantom BaseAsset, phantom QuoteAsset> has copy, drop, store {\n    pool_id: sui::object::ID,\n    order_id: u64,\n    is_bid: bool,\n    owner: sui::object::ID,\n    total_quantity: u64,\n    base_asset_quantity_filled: u64,\n    base_asset_quantity_remaining: u64,\n    price: u64,\n    taker_commission: u64,\n    maker_rebates: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dependency Only Policy Function in Move\nDESCRIPTION: This function exposes a constant for the dependency-only upgrade policy. It returns a constant value indicating this policy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\npublic fun dep_only_policy(): u8 { DEP_ONLY }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Key-Value Pair to ObjectTable in Move\nDESCRIPTION: Function to add a key-value pair to the ObjectTable. It uses dynamic object fields to store the value and increments the table size.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_table.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add<K: copy + drop + store, V: key + store>(table: &mut ObjectTable<K, V>, k: K, v: V) {\n    ofield::add(&mut table.id, k, v);\n    table.size = table.size + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Stake Withdrawal\nDESCRIPTION: Non-entry function that withdraws staked SUI and returns it as a Balance instead of transferring to sender. Takes a StakedSui object and returns Balance<SUI>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun request_withdraw_stake_non_entry(\n    wrapper: &mut SuiSystemState,\n    staked_sui: StakedSui,\n    ctx: &mut TxContext,\n): Balance<SUI> {\n    wrapper.load_system_state_mut().request_withdraw_stake(staked_sui, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ENotEnough Constant in Move\nDESCRIPTION: Defines a constant ENotEnough, which is thrown when an attempt is made to withdraw more than the available amount. This serves as a guard against over-withdrawal scenarios.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\nconst ENotEnough: u64 = 5;\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty TableVec in Sui Move\nDESCRIPTION: Implements the empty function to create and return an empty TableVec.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table_vec.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun empty<Element: store>(ctx: &mut TxContext): TableVec<Element> {\n    TableVec {\n        contents: table::new(ctx),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Authenticator State Function in Move\nDESCRIPTION: Updates the set of active JWKs in the authenticator state. Handles merging of existing and new JWKs, maintaining proper sorting, and managing epoch updates. Requires system address (0x0) authorization.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\nfun update_authenticator_state(\n    self: &mut AuthenticatorState,\n    new_active_jwks: vector<ActiveJwk>,\n    ctx: &TxContext,\n) {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    check_sorted(&new_active_jwks);\n    let new_active_jwks = deduplicate(new_active_jwks);\n    let inner = self.load_inner_mut();\n    let mut res = vector[];\n    let mut i = 0;\n    let mut j = 0;\n    let active_jwks_len = inner.active_jwks.length();\n    let new_active_jwks_len = new_active_jwks.length();\n    while (i < active_jwks_len && j < new_active_jwks_len) {\n        let old_jwk = &inner.active_jwks[i];\n        let new_jwk = &new_active_jwks[j];\n        if (active_jwk_equal(old_jwk, new_jwk)) {\n            let mut jwk = *old_jwk;\n            jwk.epoch = old_jwk.epoch.max(new_jwk.epoch);\n            res.push_back(jwk);\n            i = i + 1;\n            j = j + 1;\n        } else if (jwk_id_equal(&old_jwk.jwk_id, &new_jwk.jwk_id)) {\n            res.push_back(*old_jwk);\n            i = i + 1;\n            j = j + 1;\n        } else if (jwk_lt(old_jwk, new_jwk)) {\n            res.push_back(*old_jwk);\n            i = i + 1;\n        } else {\n            res.push_back(*new_jwk);\n            j = j + 1;\n        }\n    };\n    while (i < active_jwks_len) {\n        res.push_back(inner.active_jwks[i]);\n        i = i + 1;\n    };\n    while (j < new_active_jwks_len) {\n        res.push_back(new_active_jwks[j]);\n        j = j + 1;\n    };\n    inner.active_jwks = res;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Package Upgrade with Day-Based Policy in JavaScript\nDESCRIPTION: A complete JavaScript script that performs a package upgrade using a custom day-of-week policy. The script builds the Move package, authorizes the upgrade using the custom policy, executes the upgrade transaction, and commits the changes to the blockchain.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { execSync } from 'child_process';\nimport { readFileSync } from 'fs';\nimport { homedir } from 'os';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { Transaction, UpgradePolicy } from '@mysten/sui/transactions';\nimport { fromBase64 } from '@mysten/sui/utils';\n\nconst SUI = 'sui';\nconst POLICY_PACKAGE_ID = '<POLICY-PACKAGE>';\nconst EXAMPLE_PACKAGE_ID = '<EXAMPLE-PACKAGE>';\nconst CAP_ID = '<EXAMPLE-UPGRADE-CAP>';\nconst sender = execSync(`${SUI} client active-address`, { encoding: 'utf8' }).trim();\nconst signer = (() => {\n\tconst keystore = JSON.parse(\n\t\treadFileSync(path.join(homedir(), '.sui', 'sui_config', 'sui.keystore'), 'utf8'),\n\t);\n\n\tfor (const priv of keystore) {\n\t\tconst raw = fromBase64(priv);\n\t\tif (raw[0] !== 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst pair = Ed25519Keypair.fromSecretKey(raw.slice(1));\n\t\tif (pair.getPublicKey().toSuiAddress() === sender) {\n\t\t\treturn pair;\n\t\t}\n\t}\n\n\tthrow new Error(`keypair not found for sender: ${sender}`);\n})();\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst packagePath = path.join(__dirname, 'example');\n\nconst { modules, dependencies, digest } = JSON.parse(\n\texecSync(`${SUI} move build --dump-bytecode-as-base64 --path ${packagePath}`, {\n\t\tencoding: 'utf-8',\n\t}),\n);\n\nconst tx = new Transaction();\nconst cap = tx.object(CAP_ID);\nconst ticket = tx.moveCall({\n\ttarget: `${POLICY_PACKAGE_ID}::day_of_week::authorize_upgrade`,\n\targuments: [cap, tx.pure(UpgradePolicy.COMPATIBLE), tx.pure(digest)],\n});\n\nconst receipt = tx.upgrade({\n\tmodules,\n\tdependencies,\n\tpackageId: EXAMPLE_PACKAGE_ID,\n\tticket,\n});\n\ntx.moveCall({\n\ttarget: `${POLICY_PACKAGE_ID}::day_of_week::commit_upgrade`,\n\targuments: [cap, receipt],\n});\n\nconst client = new SuiClient({ url: getFullnodeUrl('localnet') });\nconst result = await client.signAndExecuteTransaction({\n\tsigner,\n\ttransaction: tx,\n\toptions: {\n\t\tshowEffects: true,\n\t\tshowObjectChanges: true,\n\t},\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upgrade Package ID in Move\nDESCRIPTION: Gets the ID of the package that the UpgradeCap authorizes upgrades for. Returns 0x0 if there's a pending upgrade in the transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun upgrade_package(cap: &UpgradeCap): ID {\n    cap.package\n}\n```\n\n----------------------------------------\n\nTITLE: Get SUI Coin from Custom Faucet using Sui CLI\nDESCRIPTION: This command requests SUI coins from a custom faucet specified by its URL. This is useful when working with private or custom Sui networks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client faucet --url CUSTOM_FAUCET_URL\"\n```\n\n----------------------------------------\n\nTITLE: Get Active Address using Sui CLI\nDESCRIPTION: This command retrieves the currently active address configured in the Sui CLI.  It's a fundamental command for identifying the address used for signing transactions and interacting with the Sui network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client active-address\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Sui Validator Metadata Command\nDESCRIPTION: Command to display detailed metadata for a specific validator using their address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/validator.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsui validator display-metadata 0x3...de5\n```\n\n----------------------------------------\n\nTITLE: Defining PoolCreated Event Struct in Move\nDESCRIPTION: Defines a struct for the PoolCreated event that is emitted when a new trading pool is created. It contains details about the pool such as its ID, asset types, fee rates, and size parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct PoolCreated has copy, drop, store {\n    pool_id: sui::object::ID,\n    base_asset: std::type_name::TypeName,\n    quote_asset: std::type_name::TypeName, \n    taker_fee_rate: u64,\n    maker_rebate_rate: u64,\n    tick_size: u64,\n    lot_size: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Vector-based Coin Split Function\nDESCRIPTION: Splits a coin into multiple coins based on provided amounts vector\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/pay.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun split_vec<T>(self: &mut Coin<T>, split_amounts: vector<u64>, ctx: &mut TxContext) {\n    let (mut i, len) = (0, split_amounts.length());\n    while (i < len) {\n        split(self, split_amounts[i], ctx);\n        i = i + 1;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Stack Trace in Move\nDESCRIPTION: The print_stack_trace function is used to print the current stack trace for debugging purposes. It takes no parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/debug.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun print_stack_trace();\n```\n\n----------------------------------------\n\nTITLE: Start Local Sui Network using Sui CLI\nDESCRIPTION: This command starts a local Sui network, making it available for development and testing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n\"sui start\"\n```\n\n----------------------------------------\n\nTITLE: Accessing or Creating Per-Type Config Entry in Sui Deny List (Move)\nDESCRIPTION: Macro function that either retrieves an existing per-type config or creates a new one if it doesn't exist. Returns a mutable reference to the config.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\nmacro fun per_type_config_entry(\n    $deny_list: &mut DenyList,\n    $per_type_index: u64,\n    $per_type_key: vector<u8>,\n    $ctx: &mut TxContext,\n): &mut Config<ConfigWriteCap> {\n    let deny_list = $deny_list;\n    let per_type_index = $per_type_index;\n    let per_type_key = $per_type_key;\n    let ctx = $ctx;\n    if (!deny_list.per_type_exists(per_type_index, per_type_key)) {\n        deny_list.add_per_type_config(per_type_index, per_type_key, ctx);\n    };\n    deny_list.borrow_per_type_config_mut(per_type_index, per_type_key)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing filter Macro Function in Sui Move\nDESCRIPTION: A macro function that returns None if the input is None, otherwise returns the Option<T> value if the predicate function returns true. This allows for conditional filtering of Option values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_22\n\nLANGUAGE: sui-move\nCODE:\n```\npublic macro fun filter<$T: drop>($o: Option<$T>, $f: |&$T| -> bool): Option<$T> {\n    let o = $o;\n    if (o.is_some() && $f(o.borrow())) o\n    else none()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ceiling Division Macro in Move\nDESCRIPTION: A macro that performs division and rounds up to the nearest integer if there is a remainder, otherwise returns the exact quotient.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_divide_and_round_up<$T>($x: $T, $y: $T): $T {\n    let x = $x;\n    let y = $y;\n    if (x % y == 0) x / y\n    else x / y + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Account Structure Definition in Move\nDESCRIPTION: Defines the Account structure that tracks available and locked balances for a generic type T. This structure is used to manage user balances within the custodian system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Account<phantom T> has store {\n    available_balance: sui::balance::Balance<T>,\n    locked_balance: sui::balance::Balance<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gift Purchase with LOYALTY Tokens\nDESCRIPTION: Function that handles the redemption of LOYALTY tokens for Gift objects. Validates the token amount matches the gift price and processes the token spending transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin/loyalty.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun buy_a_gift(gift_shop: &mut GiftShop, token: Token<LOYALTY>, ctx: &mut TxContext) {\n    let price = gift_price();\n    assert!(token::value(&token) == price, EWrongAmount);\n    token::spend(token, ctx);\n    let gift = Gift {};\n    transfer::public_transfer(gift, tx_context::sender(ctx));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Approvals to Action Requests in Move\nDESCRIPTION: Function to add approvals to an ActionRequest using a Witness. Used by Rules to add their approvals but can also add arbitrary approvals not required by TokenPolicy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add_approval<T, W: drop>(_t: W, request: &mut ActionRequest<T>, _ctx: &mut TxContext) {\n    request.approvals.insert(type_name::get<W>())\n}\n```\n\n----------------------------------------\n\nTITLE: Immediate Vesting Test in Move\nDESCRIPTION: The immediate vesting test is implemented using the linear vesting contract, with the vesting duration set to zero to simulate an immediate release scenario. It utilizes the Wallet struct and 'new_wallet' function and requires the Sui framework to function. This setup demonstrates applying another vesting strategy to achieve immediate vesting outcomes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics/vesting-strategies.mdx#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\n{\"@inject\": \"examples/vesting/tests/immediate_tests.move\"}\n```\n\n----------------------------------------\n\nTITLE: ECVRF Proof Verification Function\nDESCRIPTION: Native function for verifying an ECVRF proof. Takes a hash output, input string (alpha), public key, and proof as parameters. Returns a boolean indicating proof validity. May abort with defined error codes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/ecvrf.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun ecvrf_verify(\n    hash: &vector<u8>,\n    alpha_string: &vector<u8>,\n    public_key: &vector<u8>,\n    proof: &vector<u8>,\n): bool;\n```\n\n----------------------------------------\n\nTITLE: Serializing Move Value to BCS Format in Move\nDESCRIPTION: This function takes a reference to a Move value of any type and returns its binary representation in BCS (Binary Canonical Serialization) format. It is implemented as a native function, meaning the actual serialization is handled by the Move runtime.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/bcs.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun to_bytes<MoveValue>(v: &MoveValue): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Vector Peeling Macro in Move\nDESCRIPTION: A generic macro for peeling vectors of any type from BCS-serialized bytes. Takes a peeling function as parameter to handle individual elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun peel_vec<$T>($bcs: &mut BCS, $peel: |&mut BCS| -> $T): vector<$T> {\n    let bcs = $bcs;\n    let len = bcs.peel_vec_length();\n    let mut i = 0;\n    let mut res = vector[];\n    while (i < len) {\n        res.push_back($peel(bcs));\n        i = i + 1;\n    };\n    res\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Metadata from Bridge Treasury\nDESCRIPTION: Generic function that retrieves metadata for a specific token type from the bridge treasury. Asserts that the token type is supported before returning its metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/treasury.md#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\nfun get_token_metadata<T>(self: &BridgeTreasury): BridgeTokenMetadata {\n    let coin_type = type_name::get<T>();\n    let metadata = self.supported_tokens.try_get(&coin_type);\n    assert!(metadata.is_some(), EUnsupportedTokenType);\n    metadata.destroy_some()\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Value in Option in Move\nDESCRIPTION: Swaps the old value inside an Option with a new value and returns the old value. Aborts if the Option does not hold a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun swap<Element>(t: &mut Option<Element>, e: Element): Element {\n    assert!(t.is_some(), EOPTION_NOT_SET);\n    let vec_ref = &mut t.vec;\n    let old_value = vec_ref.pop_back();\n    vec_ref.push_back(e);\n    old_value\n}\n```\n\n----------------------------------------\n\nTITLE: Get Level2 Order Book Range\nDESCRIPTION: Function to retrieve price and quantity vectors for orders within a specified price range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_level2_range(self: &Pool, price_low: u64, price_high: u64, is_bid: bool): (vector<u64>, vector<u64>)\n```\n\n----------------------------------------\n\nTITLE: Converting U256 to String in Sui Move\nDESCRIPTION: Converts a u256 value to its string representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_11\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic fun to_string(x: u256): String {\n    std::macros::num_to_string!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Deny List from V1 to V2 in Sui\nDESCRIPTION: Migrates a deny list configuration from version 1 to version 2. It updates the data structure and transfers denied addresses to the new format.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun migrate_v1_to_v2(\n    deny_list: &mut DenyList,\n    per_type_index: u64,\n    per_type_key: vector<u8>,\n    ctx: &mut TxContext,\n) {\n    let bag_entry: &mut PerTypeList = &mut deny_list.lists[per_type_index];\n    let elements = if (!bag_entry.denied_addresses.contains(per_type_key)) vector[] else bag_entry\n        .denied_addresses\n        .remove(per_type_key)\n        .into_keys();\n    elements.do_ref!(|addr| {\n        let addr = *addr;\n        let denied_count = &mut bag_entry.denied_count[addr];\n        *denied_count = *denied_count - 1;\n        if (*denied_count == 0) {\n            bag_entry.denied_count.remove(addr);\n        }\n    });\n    let per_type_config = deny_list.per_type_config_entry!(per_type_index, per_type_key, ctx);\n    elements.do!(|addr| {\n        let setting_name = AddressKey(addr);\n        let next_epoch_entry = per_type_config.entry!<_, AddressKey, bool>(\n            &mut ConfigWriteCap(),\n            setting_name,\n            |_deny_list, _cap, _ctx| true,\n            ctx,\n        );\n        *next_epoch_entry = true;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Configuration Value for Next Epoch in Move\nDESCRIPTION: Removes a configuration value for the next epoch. If the value exists for a previous epoch, it is preserved in older_value_opt. Returns the removed value if any.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/config.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun remove_for_next_epoch<WriteCap, Name: copy + drop + store, Value: copy + drop + store>(\n    config: &mut Config<WriteCap>,\n    _cap: &mut WriteCap,\n    name: Name,\n    ctx: &mut TxContext,\n): Option<Value>\n```\n\n----------------------------------------\n\nTITLE: Division with Ceiling Rounding for u32 Values\nDESCRIPTION: Divides one u32 by another and rounds up the result, useful for calculations that need to ensure sufficient capacity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_and_round_up(x: u32, y: u32): u32 {\n    std::macros::num_divide_and_round_up!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Join Fungible Staked Sui Tokens\nDESCRIPTION: Combines two FungibleStakedSui tokens by merging their values after verifying they belong to the same pool. Deletes the second token after merging.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\npublic fun join_fungible_staked_sui(self: &mut FungibleStakedSui, other: FungibleStakedSui) {\n    let FungibleStakedSui { id, pool_id, value } = other;\n    assert!(self.pool_id == pool_id, EWrongPool);\n    id.delete();\n    self.value = self.value + value;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Bit in BitVector\nDESCRIPTION: Sets the bit at the specified index in the BitVector to true (1). The function checks if the index is within bounds before modifying the bit.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/bit_vector.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun set(bitvector: &mut BitVector, bit_index: u64) {\n    assert!(bit_index < bitvector.bit_field.length(), EINDEX);\n    let x = &mut bitvector.bit_field[bit_index];\n    *x = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Display Field - Move\nDESCRIPTION: Removes a field from the Display object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun remove<T: key>(self: &mut Display<T>, name: String) {\n    self.fields.remove(&name);\n}\n```\n\n----------------------------------------\n\nTITLE: TokenPolicyCap Struct Definition\nDESCRIPTION: This struct represents a capability for managing a `TokenPolicy`.  The `TokenPolicyCap` has a unique ID and a reference (`for`) to the `TokenPolicy` it manages. The `key` and `store` abilities indicate that the capability can be used as an object ID, stored on-chain, and transferred.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>public</b> <b>struct</b> <a href=\\\"../sui/token.md#sui_token_TokenPolicyCap\\\">TokenPolicyCap</a>&lt;<b>phantom</b> T&gt; <b>has</b> <a href=\\\"../sui/token.md#sui_token_key\\\">key</a>, store\"\n```\n\n----------------------------------------\n\nTITLE: Defining Weather Oracle Module Structure in Sui Move\nDESCRIPTION: Initial module definition for the weather oracle, including necessary imports and module declaration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/weather-oracle.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nmodule oracle::weather {\n    use std::string::String;\n    use sui::dynamic_object_field as dof;\n    use sui::package;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Clock Functions in Move\nDESCRIPTION: These functions are used for testing Clock-dependent code. They allow creating, sharing, incrementing, setting, and destroying Clock objects in test environments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/access-time.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create_for_testing(timestamp_ms: u64, ctx: &mut TxContext): Clock {\n    Clock { id: object::new(ctx), timestamp_ms }\n}\n\npublic fun share_for_testing(clock: Clock) {\n    transfer::share_object(clock)\n}\n\npublic fun increment_for_testing(clock: &mut Clock, tick_ms: u64) {\n    clock.timestamp_ms = clock.timestamp_ms + tick_ms\n}\n\npublic fun set_for_testing(clock: &mut Clock, timestamp_ms: u64) {\n    clock.timestamp_ms = timestamp_ms\n}\n\npublic fun destroy_for_testing(clock: Clock) {\n    let Clock { id, timestamp_ms: _ } = clock;\n    object::delete(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Dynamic Fields from Sui Objects in Move\nDESCRIPTION: The borrow function provides immutable access to a dynamic field's value. It takes the object's UID and the field name, calculates the hash, retrieves the field object, and returns a reference to its value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow<Name: copy + drop + store, Value: store>(object: &UID, name: Name): &Value {\n    let object_addr = object.to_address();\n    let hash = hash_type_and_key(object_addr, name);\n    let field = borrow_child_object<Field<Name, Value>>(object, hash);\n    &field.value\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Rule Config Existence with Type Verification in Sui Token Policy\nDESCRIPTION: Checks if a Config for a Rule exists in the TokenPolicy and verifies that it matches the specified type. Returns a boolean indicating whether the rule config exists with the correct type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_29\n\nLANGUAGE: move\nCODE:\n```\npublic fun has_rule_config_with_type<T, Rule, Config: store>(self: &TokenPolicy<T>): bool {\n    df::exists_with_type<RuleKey<Rule>, Config>(&self.id, key<Rule>())\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Token Transfer Action Status in Move\nDESCRIPTION: Retrieves the status of a token transfer action for a given source chain and bridge sequence number. Returns the status as a u8 value representing different states (not found, claimed, approved, or pending).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\nfun get_token_transfer_action_status(\n    bridge: &Bridge,\n    source_chain: u8,\n    bridge_seq_num: u64,\n): u8 {\n    let inner = load_inner(bridge);\n    let key = message::create_key(\n        source_chain,\n        message_types::token(),\n        bridge_seq_num\n    );\n    if (!inner.token_transfer_records.contains(key)) {\n        return TRANSFER_STATUS_NOT_FOUND\n    };\n    let record = &inner.token_transfer_records[key];\n    if (record.claimed) {\n        return TRANSFER_STATUS_CLAIMED\n    };\n    if (record.verified_signatures.is_some()) {\n        return TRANSFER_STATUS_APPROVED\n    };\n    TRANSFER_STATUS_PENDING\n}\n```\n\n----------------------------------------\n\nTITLE: Deactivating Staking Pool in Move\nDESCRIPTION: Disables a staking pool by setting the deactivation epoch, preventing it from earning rewards while allowing stake withdrawals. Requires a mutable reference to a StakingPool and a deactivation epoch as input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun deactivate_staking_pool(pool: &mut sui_system::staking_pool::StakingPool, deactivation_epoch: u64) {\n    // We can't deactivate an already deactivated pool.\n    assert!(!pool.is_inactive(), EDeactivationOfInactivePool);\n    pool.deactivation_epoch = option::some(deactivation_epoch);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sui Move tests\nDESCRIPTION: Command to run all Move unit tests in the package using the Sui CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ sui move test\n```\n\n----------------------------------------\n\nTITLE: Creating UID from hash\nDESCRIPTION: Generates a new UID specifically for creating a UID from a hash. This is a package-scoped function used for special UID creation scenarios.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_21\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun new_uid_from_hash(bytes: address): UID {\n    record_new_uid(bytes);\n    UID { id: ID { bytes } }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Wallet Accounts with ReadonlyWalletAccount\nDESCRIPTION: This snippet demonstrates how to expose wallet accounts to dApps using the ReadonlyWalletAccount class. It maps internal wallet accounts to the standard interface, specifying the address, public key, supported chains, and features for each account.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/wallet-standard.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReadonlyWalletAccount } from '@mysten/wallet-standard';\n\nclass YourWallet implements Wallet {\n\tget accounts() {\n\t\t// Assuming we already have some internal representation of accounts:\n\t\treturn someWalletAccounts.map(\n\t\t\t(walletAccount) =>\n\t\t\t\t// Return\n\t\t\t\tnew ReadonlyWalletAccount({\n\t\t\t\t\taddress: walletAccount.suiAddress,\n\t\t\t\t\tpublicKey: walletAccount.pubkey,\n\t\t\t\t\t// The Sui chains that your wallet supports.\n\t\t\t\t\tchains: [SUI_DEVNET_CHAIN],\n\t\t\t\t\t// The features that this account supports. This can be a subset of the wallet's supported features.\n\t\t\t\t\t// These features must exist on the wallet as well.\n\t\t\t\t\tfeatures: [\n\t\t\t\t\t\t'sui:signPersonalMessage',\n\t\t\t\t\t\t'sui:signTransactionBlock',\n\t\t\t\t\t\t'sui:signAndExecuteTransactionBlock',\n\t\t\t\t\t],\n\t\t\t\t}),\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Signature in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the creation of a user signature by constructing an intent message and signing it. It shows the encapsulation of transaction data in an intent message format, followed by a signing process using a Blake2b hash digest.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/transaction-auth/intent-signing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst intentMessage = messageWithIntent('TransactionData', transactionBytes);\nconst signature = await this.sign(intentMessage);\n```\n\n----------------------------------------\n\nTITLE: Querying Total Transaction Blocks in Sui using GraphQL\nDESCRIPTION: This snippet shows how to get the total number of transaction blocks in the Sui network using GraphQL.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/graphql-migration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  checkpoint {\n    networkTotalTransactions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers in Sui\nDESCRIPTION: Functions for generating random integers of various sizes (u256, u128, u64) using the RandomGenerator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun generate_u256(g: &mut RandomGenerator): u256 {\n    uint_from_bytes!(g, 32)\n}\n\npublic fun generate_u128(g: &mut RandomGenerator): u128 {\n    uint_from_bytes!(g, 16)\n}\n\npublic fun generate_u64(g: &mut RandomGenerator): u64 {\n    uint_from_bytes!(g, 8)\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping or Filling Option in Move\nDESCRIPTION: Swaps the old value inside an Option with a new value and returns the old value, or fills it if there is no old value. Allows for the Option not holding a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun swap_or_fill<Element>(t: &mut Option<Element>, e: Element): Option<Element> {\n    let vec_ref = &mut t.vec;\n    let old_value = if (vec_ref.is_empty()) none()\n    else some(vec_ref.pop_back());\n    vec_ref.push_back(e);\n    old_value\n}\n```\n\n----------------------------------------\n\nTITLE: Maximum and Minimum Value Functions for u16\nDESCRIPTION: Functions to return the larger or smaller of two u16 values using macros from the standard library.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u16.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max(x: u16, y: u16): u16 {\n    std::macros::num_max!(x, y)\n}\n\npublic fun min(x: u16, y: u16): u16 {\n    std::macros::num_min!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sum Function with Loop Expression in Move\nDESCRIPTION: A function that calculates the sum of numbers from 1 to n using a loop expression with a break condition. The loop continues until i exceeds n.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nfun sum(n: u64): u64 {\n    let mut sum = 0;\n    let mut i = 1;\n\n    loop {\n       i = i + 1;\n       if (i >= n) break;\n       sum = sum + i;\n    };\n\n    sum\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chain ID Validation in Move\nDESCRIPTION: Implements a function to assert that a given chain ID is valid by checking against known constants.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/chain_ids.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun assert_valid_chain_id(id: u8) {\n    assert!(\n        id == SuiMainnet ||\n        id == SuiTestnet ||\n        id == SuiCustom ||\n        id == EthMainnet ||\n        id == EthSepolia ||\n        id == EthCustom,\n        EInvalidBridgeRoute\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item ID from PurchaseCap in Sui Move\nDESCRIPTION: Accessor function to get the item_id from a PurchaseCap instance. This function allows extracting the object ID of the item associated with a purchase capability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_52\n\nLANGUAGE: move\nCODE:\n```\npublic fun purchase_cap_item<T: key + store>(self: &PurchaseCap<T>): ID {\n    self.item_id\n}\n```\n\n----------------------------------------\n\nTITLE: Basic If Expression in Move\nDESCRIPTION: Simple if statement that decrements x by 5 if x is greater than 5.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/conditionals.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nif (x > 5) x = x - 5\n```\n\n----------------------------------------\n\nTITLE: Declaring Phantom Type Parameters for Structs in Move\nDESCRIPTION: This snippet shows how to declare phantom type parameters for structs in Move. Phantom type parameters do not participate in ability derivation, allowing for more flexible generic types without unnecessary ability annotations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic struct Coin<phantom Currency> has store {\n    value: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration Setting with Type Parameters\nDESCRIPTION: Public package function that reads a typed configuration setting from a Sui object. Takes generic type parameters for both the setting name and value with copy, drop, and store constraints.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/config.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun read_setting<Name: copy + drop + store, Value: copy + drop + store>(\n    config: ID,\n    name: Name,\n    ctx: &TxContext,\n): Option<Value> {\n    use sui::dynamic_field::Field;\n    let config_id = config.to_address();\n    let setting_df = field::hash_type_and_key(config_id, name);\n    read_setting_impl<Field<Name, Setting<Value>>, Setting<Value>, SettingData<Value>, Value>(\n        config_id,\n        setting_df,\n        ctx.epoch(),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BridgeCommittee Structure in Move\nDESCRIPTION: Defines the main structure for managing the bridge committee, storing committee members, their registrations, and tracking the last epoch when the committee was updated.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct BridgeCommittee has store {\n    members: sui::vec_map::VecMap<vector<u8>, bridge::committee::CommitteeMember>,\n    member_registrations: sui::vec_map::VecMap<address, bridge::committee::CommitteeMemberRegistration>,\n    last_committee_update_epoch: u64\n}\n```\n\n----------------------------------------\n\nTITLE: VecSet Remove Operation\nDESCRIPTION: Removes a key from the set. Aborts if the key doesn't exist.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_set.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove<K: copy + drop>(self: &mut VecSet<K>, key: &K) {\n    let idx = get_idx(self, key);\n    self.contents.remove(idx);\n}\n```\n\n----------------------------------------\n\nTITLE: LinkedTable Creation - Move\nDESCRIPTION: Creates a new empty LinkedTable instance with initialized fields.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new<K: copy + drop + store, V: store>(ctx: &mut TxContext): LinkedTable<K, V> {\n    LinkedTable {\n        id: object::new(ctx),\n        size: 0,\n        head: option::none(),\n        tail: option::none(),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Vector Elements with Any Predicate\nDESCRIPTION: A macro function that checks if any element in a vector satisfies a given predicate. Returns true if at least one element matches, otherwise returns false. Returns false for empty vectors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun any<$T>($v: &vector<$T>, $f: |&$T| -> bool): bool\n```\n\n----------------------------------------\n\nTITLE: Minting and Transferring Coins in Move\nDESCRIPTION: Mints a specified amount of coins and transfers them to a recipient address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun mint_and_transfer<T>(\n    c: &mut TreasuryCap<T>,\n    amount: u64,\n    recipient: address,\n    ctx: &mut TxContext,\n) {\n    transfer::public_transfer(mint(c, amount, ctx), recipient)\n}\n```\n\n----------------------------------------\n\nTITLE: Mut using Confirmation for Action Requests in Token Policy - Rust\nDESCRIPTION: The `confirm_request_mut` function validates an action request similarly to `confirm_request`, but it requires mutable access to the token policy. This allows for actions that involve changes to the state, such as spending balances. The function is designed for scenarios where mutable policy access is necessary, and it invokes `confirm_request` after handling mutations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_21\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun confirm_request_mut<T>(policy: &mut sui::token::TokenPolicy<T>, mut request: sui::token::ActionRequest<T>, ctx: &mut TxContext): (String, u64, address, Option<address>) {\\n    assert!(policy.rules.contains(&request.name), EUnknownAction);\\n    assert!(request.spent_balance.is_some(), EUseImmutableConfirm);\\n    policy.spent_balance.join(request.spent_balance.extract());\\n    confirm_request(policy, request, ctx)\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderPage Structure in Move\nDESCRIPTION: Defines the OrderPage structure which represents a paginated result of orders. It contains the orders, a flag indicating if there are more pages, and information about the next page's starting point.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/order_query.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct OrderPage has drop {\n    orders: vector<deepbook::clob_v2::Order>,\n    has_next_page: bool,\n    next_tick_level: std::option::Option<u64>,\n    next_order_id: std::option::Option<u64>\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Remaining Voting Power Distribution in Move\nDESCRIPTION: Distributes any remaining voting power to validators that are not already at the maximum threshold. The distribution is done proportionally while ensuring no validator exceeds the threshold and all voting power is allocated.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\nfun adjust_voting_power(\n    info_list: &mut vector<VotingPowerInfoV2>,\n    threshold: u64,\n    mut remaining_power: u64,\n) {\n    let mut i = 0;\n    let len = info_list.length();\n    while (i < len && remaining_power > 0) {\n        let v = &mut info_list[i];\n        // planned is the amount of extra power we want to distribute to this validator.\n        let planned = remaining_power.divide_and_round_up(len - i);\n        // target is the targeting power this validator will reach, capped by threshold.\n        let target = threshold.min(v.voting_power + planned);\n        // actual is the actual amount of power we will be distributing to this validator.\n        let actual = remaining_power.min(target - v.voting_power);\n        v.voting_power = v.voting_power + actual;\n        assert!(v.voting_power <= threshold, EVotingPowerOverThreshold);\n        remaining_power = remaining_power - actual;\n        i = i + 1;\n    };\n    assert!(remaining_power == 0, ETotalPowerMismatch);\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature: check_zklogin_issuer_internal in Move\nDESCRIPTION: This Move function signature defines `check_zklogin_issuer_internal` which takes an address, address seed (u256), and issuer (vector of bytes) as input. It returns a boolean value indicating whether the address was created using zkLogin with the given issuer and seed. It aborts with `EInvalidInput` if the issuer is not a valid UTF-8 string.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_issuer.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../sui/zklogin_verified_issuer.md#sui_zklogin_verified_issuer_check_zklogin_issuer_internal\">check_zklogin_issuer_internal</a>(<b>address</b>: <b>address</b>, address_seed: u256, <a href=\"../sui/zklogin_verified_issuer.md#sui_zklogin_verified_issuer_issuer\">issuer</a>: &vector&lt;u8&gt;): bool\n```\n\n----------------------------------------\n\nTITLE: Updating Next Epoch Worker Public Key in Move\nDESCRIPTION: This function updates the Narwhal worker public key of a validator for the next epoch. It sets the new key and validates the metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_90\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_next_epoch_worker_pubkey(\n    self: &mut Validator,\n    worker_pubkey: vector<u8>,\n) {\n    self.metadata.next_epoch_worker_pubkey_bytes = option::some(worker_pubkey);\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Display Version in Sui Move\nDESCRIPTION: Function signature for updating the version of a Display object and emitting an event that full nodes use to retrieve templates for types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/display.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nmodule sui::display;\n\n/// Update the version of Display and emit an event\npublic fun update_version(self: &mut Display) { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Generating a boolean with Sui RandomGenerator - Move\nDESCRIPTION: The function creates a random boolean by utilizing the RandomGenerator. It employs sui::random::uint_from_bytes to generate a number whose least significant bit determines the boolean value. It returns true if the bit is 1, otherwise false, requiring a mutable RandomGenerator as input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun generate_bool(g: &mut sui::random::RandomGenerator): bool {\n    (uint_from_bytes!(g, 1) & 1) == 1\n}\n```\n\n----------------------------------------\n\nTITLE: Update Candidate Validator Worker Public Key\nDESCRIPTION: Updates a candidate validator's worker public key in the system state.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_31\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_candidate_validator_worker_pubkey(\n    self: &mut SuiSystemState,\n    worker_pubkey: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_candidate_validator_worker_pubkey(worker_pubkey, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Get Locked Balance\nDESCRIPTION: Function to retrieve locked balances for a balance manager in the pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_16\n\nLANGUAGE: move\nCODE:\n```\npublic fun locked_balance(self: &Pool, balance_manager: UID): (u64, u64, u64)\n```\n\n----------------------------------------\n\nTITLE: Creating Zero Balance in Move\nDESCRIPTION: Creates a zero Balance for type T. This function initializes a new Balance with a value of 0.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/balance.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun zero<T>(): Balance<T> {\n    Balance { value: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Event Module in Move\nDESCRIPTION: Shows how to import the 'sui::event' dependency to enable event emitting functionality in a Move module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/using-events.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nuse sui::event;\n```\n\n----------------------------------------\n\nTITLE: Implementing GT Negation Operation for BLS12-381 in Move\nDESCRIPTION: Computes the additive inverse (negation) of a GT group element in the BLS12-381 curve. This function subtracts the element from the identity element of the GT group.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_42\n\nLANGUAGE: Move\nCODE:\n```\npublic fun gt_neg(e: &Element<GT>): Element<GT> {\n    gt_sub(&gt_identity(), e)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upgrade Policy in Move\nDESCRIPTION: Gets the most permissive kind of upgrade currently supported by the UpgradeCap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun upgrade_policy(cap: &UpgradeCap): u8 {\n    cap.policy\n}\n```\n\n----------------------------------------\n\nTITLE: Manage Account Balance in DeepBook Custodian - Move\nDESCRIPTION: Internal function to get a mutable reference to an account's balance, creating a new account with zero balances if it doesn't exist. Takes a mutable custodian reference and user ID as input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\nfun borrow_mut_account_balance<T>(\n    custodian: &mut Custodian<T>,\n    user: ID,\n): &mut Account<T> {\n    if (!table::contains(&custodian.account_balances, user)) {\n        table::add(\n            &mut custodian.account_balances,\n            user,\n            Account { available_balance: balance::zero(), locked_balance: balance::zero() }\n        );\n    };\n    table::borrow_mut(&mut custodian.account_balances, user)\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Wallet using Standard Disconnect Feature\nDESCRIPTION: Implementation of wallet disconnection using the standard:disconnect feature\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/wallet-standard.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nwallet.features['standard:disconnect'].disconnect();\n```\n\n----------------------------------------\n\nTITLE: Implementing Sword Module for In-Game Object Creation in Move\nDESCRIPTION: This module creates a 'sword' object with in-game value, assigns GEM value to it, and provides logic for trading GEMs for swords.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin/in-game-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nmodule examples::sword {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n    use examples::gem::GEM;\n\n    struct Sword has key, store {\n        id: UID,\n        magic: u64,\n        strength: u64,\n    }\n\n    public fun new(magic: u64, strength: u64, ctx: &mut TxContext): Sword {\n        Sword {\n            id: object::new(ctx),\n            magic,\n            strength,\n        }\n    }\n\n    public entry fun create(magic: u64, strength: u64, ctx: &mut TxContext) {\n        let sword = new(magic, strength, ctx);\n        transfer::transfer(sword, tx_context::sender(ctx));\n    }\n\n    public fun transfer(sword: Sword, recipient: address) {\n        transfer::transfer(sword, recipient)\n    }\n\n    public fun sword_to_gems(sword: Sword): u64 {\n        let Sword { id, magic, strength } = sword;\n        object::delete(id);\n        magic + strength\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Display for TokenizedAsset in Rust\nDESCRIPTION: This function generates an empty `Display` for the type `TokenizedAsset<T>`, utilizing the publisher from both the registry and the sender. It expects a mutable transaction context for execution.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\npublic fun new_display<T: drop>(\n      registry: &Registry,\n      publisher: &Publisher,\n      ctx: &mut TxContext\n  ): Display<TokenizedAsset<T>> {}\n```\n\n----------------------------------------\n\nTITLE: Item Borrowing in Sui Kiosk\nDESCRIPTION: Function to immutably borrow an item from the Kiosk. Requires owner capability and item existence verification.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_46\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow<T: key + store>(self: &Kiosk, cap: &KioskOwnerCap, id: ID): &T {\n    assert!(object::id(self) == cap.for, ENotOwner);\n    assert!(self.has_item(id), EItemNotFound);\n    dof::borrow(&self.id, Item { id })\n}\n```\n\n----------------------------------------\n\nTITLE: Profits Amount Query in Sui Kiosk\nDESCRIPTION: Function to get the amount of profits collected by selling items in a Kiosk.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_44\n\nLANGUAGE: Move\nCODE:\n```\npublic fun profits_amount(self: &Kiosk): u64 {\n    self.profits.value()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Clock Time in Move\nDESCRIPTION: System function to update the clock's timestamp. Can only be called by the system address (0x0) during consensus commit.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/clock.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\nfun consensus_commit_prologue(clock: &mut Clock, timestamp_ms: u64, ctx: &TxContext) {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    clock.timestamp_ms = timestamp_ms\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence in ObjectBag - Move\nDESCRIPTION: This function checks if a key exists in the ObjectBag. It takes a reference to the bag and a key, and returns a boolean indicating presence.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_bag.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun contains<K: copy + drop + store>(bag: &ObjectBag, k: K): bool {\n    ofield::exists_<K>(&bag.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Pending Stakes and Withdrawals in Move\nDESCRIPTION: Processes pending stakes and withdrawals at epoch boundaries. Updates pool balances and exchange rates for the new epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun process_pending_stakes_and_withdraws(pool: &mut StakingPool, ctx: &TxContext) {\n    let new_epoch = ctx.epoch() + 1;\n    pool.process_pending_stake_withdraw();\n    pool.process_pending_stake();\n    pool\n        .exchange_rates\n        .add(\n            new_epoch,\n            PoolTokenExchangeRate {\n                sui_amount: pool.sui_balance,\n                pool_token_amount: pool.pool_token_balance,\n            },\n        );\n    pool.check_balance_invariants(new_epoch);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing range_do Macro for U32 Iteration in Move\nDESCRIPTION: Defines a macro function 'range_do' that loops over a range of u32 values from start to stop (exclusive), applying a given function to each value. It uses the std::macros::range_do macro internally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do<$R: drop>($start: u32, $stop: u32, $f: |u32| -> $R) {\n    std::macros::range_do!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Escrow Event Handler in TypeScript\nDESCRIPTION: Handler for processing escrow-related events from the blockchain. It updates the database with information about created, swapped, or cancelled escrows, allowing the API to query active escrows by sender or recipient.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { EventHandler } from './event-indexer';\nimport { SuiClient, SuiEvent } from '@mysten/sui.js/client';\n\ntype JsonRpcEvent = {\n    type: string;\n    parsedJson: any;\n};\n\nexport class EscrowHandler implements EventHandler {\n    private db: PrismaClient;\n    private suiClient: SuiClient;\n\n    constructor(db: PrismaClient, suiClient: SuiClient) {\n        this.db = db;\n        this.suiClient = suiClient;\n    }\n\n    /**\n     * Handle an event from the SUI RPC\n     */\n    async handleEvent(event: SuiEvent): Promise<void> {\n        const eventType = event.type;\n\n        if (eventType.endsWith('::escrow::EscrowCreated')) {\n            // console.log('Creating escrow', event.parsedJson);\n            await this.handleEscrowCreated(event);\n        } else if (eventType.endsWith('::escrow::EscrowSwapped')) {\n            await this.handleEscrowSwapped(event);\n        } else if (eventType.endsWith('::escrow::EscrowCancelled')) {\n            await this.handleEscrowCancelled(event);\n        }\n    }\n\n    /**\n     * Get the cursor from the database\n     */\n    async maybeGetCheckpoint(): Promise<string | null> {\n        const checkpoint = await this.db.checkpoint.findFirst();\n        return checkpoint?.id ?? null;\n    }\n\n    /**\n     * Set the cursor in the database\n     */\n    private async setCheckpoint(cursor: string): Promise<void> {\n        await this.db.checkpoint.upsert({\n            where: {\n                id: cursor,\n            },\n            update: {},\n            create: {\n                id: cursor,\n            },\n        });\n    }\n\n    /**\n     * Handle an EscrowCreated event\n     */\n    private async handleEscrowCreated(event: SuiEvent): Promise<void> {\n        const parsedJson = event.parsedJson as any;\n\n        // We might not need to add a try/catch here, \n        // as the caller already has one; adding it just \n        // for extra safety\n        try {\n            // Get IDs for locked objects\n            await this.db.escrow.upsert({\n                where: {\n                    id: parsedJson.escrow_id,\n                },\n                update: {\n                    sender: parsedJson.sender,\n                    recipient: parsedJson.recipient,\n                    senderLocked: parsedJson.sender_locked_id,\n                    recipientKey: parsedJson.recipient_key_id,\n                    status: 'CREATED',\n                },\n                create: {\n                    id: parsedJson.escrow_id,\n                    sender: parsedJson.sender,\n                    recipient: parsedJson.recipient,\n                    senderLocked: parsedJson.sender_locked_id,\n                    recipientKey: parsedJson.recipient_key_id,\n                    status: 'CREATED',\n                },\n            });\n\n            await this.setCheckpoint(event.id.txDigest);\n        } catch (e) {\n            console.error('Error handling EscrowCreated event', e);\n        }\n    }\n\n    /**\n     * Handle an EscrowSwapped event\n     */\n    private async handleEscrowSwapped(event: SuiEvent): Promise<void> {\n        const parsedJson = event.parsedJson as any;\n\n        try {\n            await this.db.escrow.upsert({\n                where: {\n                    id: parsedJson.escrow_id,\n                },\n                update: {\n                    sender: parsedJson.sender,\n                    recipient: parsedJson.recipient,\n                    senderLocked: parsedJson.sender_locked_id,\n                    recipientLocked: parsedJson.recipient_locked_id,\n                    status: 'SWAPPED',\n                },\n                create: {\n                    id: parsedJson.escrow_id,\n                    sender: parsedJson.sender,\n                    recipient: parsedJson.recipient,\n                    senderLocked: parsedJson.sender_locked_id,\n                    recipientLocked: parsedJson.recipient_locked_id,\n                    status: 'SWAPPED',\n                },\n            });\n\n            await this.setCheckpoint(event.id.txDigest);\n        } catch (e) {\n            console.error('Error handling EscrowSwapped event', e);\n        }\n    }\n\n    /**\n     * Handle an EscrowCancelled event\n     */\n    private async handleEscrowCancelled(event: SuiEvent): Promise<void> {\n        const parsedJson = event.parsedJson as any;\n\n        try {\n            await this.db.escrow.upsert({\n                where: {\n                    id: parsedJson.escrow_id,\n                },\n                update: {\n                    sender: parsedJson.sender,\n                    recipient: parsedJson.recipient,\n                    senderLocked: parsedJson.sender_locked_id,\n                    recipientKey: parsedJson.recipient_key_id,\n                    status: 'CANCELLED',\n                },\n                create: {\n                    id: parsedJson.escrow_id,\n                    sender: parsedJson.sender,\n                    recipient: parsedJson.recipient,\n                    senderLocked: parsedJson.sender_locked_id,\n                    recipientKey: parsedJson.recipient_key_id,\n                    status: 'CANCELLED',\n                },\n            });\n\n            await this.setCheckpoint(event.id.txDigest);\n        } catch (e) {\n            console.error('Error handling EscrowCancelled event', e);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rental Policy Struct in Move\nDESCRIPTION: Shared object defining creator royalties for rental transactions, using basis points for percentage representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic struct RentalPolicy<phantom T> has key, store {\n  id: UID,\n  balance: Balance<SUI>,\n  amount_bp: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Stake Addition at Genesis in Sui Move\nDESCRIPTION: Adds stake to a validator's staking pool during the genesis epoch (epoch 0). This function creates a StakedSui object for the staker and transfers it to their address, then processes the stake immediately.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_34\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun request_add_stake_at_genesis(\n    self: &mut Validator,\n    stake: Balance<SUI>,\n    staker_address: address,\n    ctx: &mut TxContext,\n) {\n    assert!(ctx.epoch() == 0, ECalledDuringNonGenesis);\n    let stake_amount = stake.value();\n    assert!(stake_amount > 0, EInvalidStakeAmount);\n    // 0 = genesis epoch\n    let staked_sui = self.staking_pool.request_add_stake(stake, 0, ctx);\n    transfer::public_transfer(staked_sui, staker_address);\n    // Process stake right away\n    self.staking_pool.process_pending_stake();\n    self.next_epoch_stake = self.next_epoch_stake + stake_amount;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Denied Address from Deny List - Move\nDESCRIPTION: The `v1_remove` function allows for the removal of an address from a deny list, ensuring the address is already in the list before proceeding. It requires a mutable reference to the deny list, an index for the type, the type of the entry, and the address to remove.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun v1_remove(deny_list: &mut sui::deny_list::DenyList, per_type_index: u64, type: vector<u8>, addr: address) {\n    let reserved = RESERVED;\n    assert!(!reserved.contains(&addr), EInvalidAddress);\n    let bag_entry: &mut sui::deny_list::PerTypeList = &mut deny_list.lists[per_type_index];\n    bag_entry.v1_per_type_list_remove(type, addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Trading Pool with TypeScript SDK\nDESCRIPTION: TypeScript implementation for creating a trading pool in DeepBook. Takes tick size, lot size, and token types as parameters, along with optional blockchain parameter overrides.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @description: Create pool for trading pair\n * @param tickSize: Minimal Price Change Accuracy of this pool\n * @param lotSize: Minimal Lot Change Accuracy of this pool\n * @param token1: Full coin type(recommend) or coin name of the base asset \"0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::wbtc::WBTC\" for example\n * @param token2: Full coin type(recommend) of quote asset \"0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::usdt::USDT\" for example\n * @param overrides: overriders for blockchain params. Like gas budget, transaction block and the provider, default we will set to the max gas budget, and create a new transaction block\n * @notice: the packageId and registryId should be set in configs.json, if it is not set, the transaction will fail.\n */\npublic createPool(\n    tickSize: number,\n    lotSize: number,\n    token1: string,\n    token2: string,\n    overrides: Overrides = new Overrides(),\n): TransactionBlock {\n    const coinType1 = convertToTokenType(token1, this.records);\n    const coinType2 = convertToTokenType(token2, this.records);\n    // we have to split sui as a param into the code\n    const [coin] = overrides.txb.splitCoins(overrides.txb.gas, [overrides.txb.pure(200000000)]);\n    overrides.txb.moveCall({\n        typeArguments: [coinType1, coinType2, '0x2::sui::SUI'],\n        target: `${this.configs.swapPackageId}::clob::create_pool`,\n        arguments: [\n            overrides.txb.object(String(this.configs.registryId)),\n            overrides.txb.pure(tickSize),\n            overrides.txb.pure(lotSize),\n            coin,\n        ],\n    });\n    overrides.txb.setGasBudget(overrides.gasBudget);\n    return overrides.txb;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessor Function for Add Tokens on Sui Message Type\nDESCRIPTION: Returns the constant value for add tokens on Sui message type. This function provides a public interface to access the ADD_TOKENS_ON_SUI constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message_types.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic fun add_tokens_on_sui(): u8 { ADD_TOKENS_ON_SUI }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Voting Power Thresholds in Move\nDESCRIPTION: Calculates and returns the minimum, low, and very low voting power thresholds based on the current epoch and a phased approach defined in SIP-39.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\nfun get_voting_power_thresholds(self: &ValidatorSet, ctx: &TxContext): (u64, u64, u64) {\n    let start_epoch = {\n        let key = VotingPowerAdmissionStartEpochKey();\n        if (self.extra_fields.contains(key)) self.extra_fields[key]\n        else ctx.epoch() + 1 // will give us the phase 1 values\n    };\n    // these numbers come from SIP-39: https://github.com/sui-foundation/sips/blob/main/sips/sip-39.md\n    let curr_epoch = ctx.epoch();\n    if (curr_epoch < start_epoch + PHASE_LENGTH) (12, 8, 4) // phase 1\n    else if (curr_epoch < start_epoch + (2 * PHASE_LENGTH)) (6, 4, 2) // phase 2\n    else (3, 2, 1) // phase 3\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Variable using curl\nDESCRIPTION: This snippet uses `curl` to send a GraphQL query with a variable to the Sui testnet endpoint.  The request includes the `query` and `variables` fields in the JSON payload, demonstrating how to pass variables when making requests to the GraphQL service.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/graphql-rpc.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -X POST https://sui-testnet.mystenlabs.com/graphql \\\n    --header 'Content-Type: application/json' \\\n    --data '{ \n      \"query\": \"query ($epochID: Int) { epoch(id: $epochID) { referenceGasPrice } }\",\n      \"variables\": { \"epochID\": 100 }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Taking an Item from a Kiosk using PTB\nDESCRIPTION: This JavaScript snippet shows how to take an item from a Sui Kiosk using Programmable Transaction Blocks. It calls the 'take' function from the 'kiosk' module, specifying the kiosk, owner capability, item ID, and item type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = new Transaction();\n\nlet itemId = tx.pure.id('<ITEM_ID>');\nlet kioskArg = tx.object('<ID>');\nlet kioskOwnerCapArg = tx.object('<ID>');\n\nlet item = tx.moveCall({\n\ttarget: '0x2::kiosk::take',\n\targuments: [kioskArg, kioskOwnerCapArg, itemId],\n\ttypeArguments: ['<ITEM_TYPE>'],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing bitwise NOT for u256 in Move\nDESCRIPTION: Returns the bitwise NOT of a u256 value by XORing with the maximum u256 value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bitwise_not(x: u256): u256 {\n    x ^ max_value!()\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting ASCII String at Specific Position in Move\nDESCRIPTION: Inserts one string into another at a specific index. Validates that the insert position is valid before performing the operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun insert(s: &mut String, at: u64, o: String) {\n    assert!(at <= s.length(), EInvalidIndex);\n    o.into_bytes().destroy!(|e| s.bytes.insert(e, at));\n}\n```\n\n----------------------------------------\n\nTITLE: Looping Over U256 Range (Inclusive) in Sui Move\nDESCRIPTION: Applies a function to each number in a range from start to stop (inclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_14\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun range_do_eq<$R: drop>($start: u256, $stop: u256, $f: |u256| -> $R) {\n    std::macros::range_do_eq!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Failure with Vector Error in Move Tests\nDESCRIPTION: Shows how to use #[expected_failure(vector_error, minor_status = <u64_opt>, location = <location>)] to test for vector errors, optionally specifying minor status codes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nmodule pkg_addr::other_module {\n    fun vector_borrow_empty() {\n        vector::borrow(&vector::empty<u64>(), 1);\n    }\n}\n\nmodule pkg_addr::my_module {\n    #[test]\n    #[expected_failure(vector_error, location = Self)]\n    fun vector_abort_same_module() {\n        vector::borrow(&vector::empty<u64>(), 1);\n    }\n\n    #[test]\n    #[expected_failure(vector_error, location = pkg_addr::other_module)]\n    fun vector_abort_same_module() {\n        other_module::vector_borrow_empty();\n    }\n\n    // Can specify minor statues (i.e., vector-specific error codes) to expect.\n    #[test]\n    #[expected_failure(vector_error, minor_status = 1, location = Self)]\n    fun native_abort_good_right_code() {\n        vector::borrow(&vector::empty<u64>(), 1);\n    }\n\n    // FAIL: correct error, but wrong location.\n    #[test]\n    #[expected_failure(vector_error, location = pkg_addr::other_module)]\n    fun vector_abort_same_module() {\n        other_module::vector_borrow_empty();\n    }\n\n    // FAIL: correct error and location but the minor status differs so this test will fail.\n    #[test]\n    #[expected_failure(vector_error, minor_status = 0, location = Self)]\n    fun vector_abort_wrong_minor_code() {\n        vector::borrow(&vector::empty<u64>(), 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Deposit and Withdraw Capabilities in Move\nDESCRIPTION: Functions for minting DepositCap and WithdrawCap for a BalanceManager. These capabilities allow other addresses to deposit or withdraw funds without trading permission. Limited to 1000 total caps per BalanceManager.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/balance-manager.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun mint_deposit_cap(self: &mut BalanceManager, to: address, ctx: &mut TxContext) {\n    assert!(self.owner == tx_context::sender(ctx), ENotOwner);\n    assert!(!vec_set::contains(&self.caps, &to), ECapExist);\n    assert!(vec_set::size(&self.caps) < MAX_CAP, ECapLimitReached);\n\n    vec_set::insert(&mut self.caps, to);\n    transfer::public_transfer(DepositCap { id: object::new(ctx), for: object::id(self) }, to);\n}\n\npublic fun mint_withdraw_cap(self: &mut BalanceManager, to: address, ctx: &mut TxContext) {\n    assert!(self.owner == tx_context::sender(ctx), ENotOwner);\n    assert!(!vec_set::contains(&self.caps, &to), ECapExist);\n    assert!(vec_set::size(&self.caps) < MAX_CAP, ECapLimitReached);\n\n    vec_set::insert(&mut self.caps, to);\n    transfer::public_transfer(WithdrawCap { id: object::new(ctx), for: object::id(self) }, to);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Address is an At-Risk Validator in Move\nDESCRIPTION: Implementation of is_at_risk_validator function that returns true if the given address belongs to a validator that is at risk of removal due to being below minimum stake requirements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_63\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun is_at_risk_validator(self: &ValidatorSet, addr: address): bool {\n    self.at_risk_validators.contains(&addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Token Actions in Sui Token Policy\nDESCRIPTION: Allows an action to be performed on the Token freely by adding an empty set of Rules for the action. Aborts if the TokenPolicyCap doesn't match the TokenPolicy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_30\n\nLANGUAGE: move\nCODE:\n```\npublic fun allow<T>(\n    self: &mut TokenPolicy<T>,\n    cap: &TokenPolicyCap<T>,\n    action: String,\n    _ctx: &mut TxContext,\n) {\n    assert!(object::id(self) == cap.for, ENotAuthorized);\n    self.rules.insert(action, vec_set::empty());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining submit_dual_signed_transaction function in Rust\nDESCRIPTION: This code snippet defines a function `submit_dual_signed_transaction` in Rust. The function takes a `SenderSignedData` object, assumed to be dual-signed, and returns the result of the transaction as a tuple of `Transaction` and `CertifiedTransactionEffects`, or an error. This function is used in user and sponsor-initiated transactions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/sponsored-transactions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n```rust\npub fn submit_dual_signed_transaction(dual_signed_data: SenderSignedData) -> Result<(Transaction, CertifiedTransactionEffects), Error>;\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Remote Reader for Sui Indexer in Rust\nDESCRIPTION: Rust code snippet demonstrating how to initialize a remote reader for a Sui indexer. It sets up the indexer to read checkpoint data from a remote source and process it using a custom worker.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/custom-indexer.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet (exit_sender, exit_receiver) = tokio::sync::oneshot::channel();\nlet executor = Executor::new(Some(\"./progress_store\".to_string()));\nlet worker_pool = WorkerPool::new(CustomWorker, \"remote_reader\".to_string(), 1);\nexecutor.register(worker_pool).await?;\nexecutor\n    .run(\n        PathBuf::from(\"./chk\".to_string()),\n        Some(\"https://checkpoints.testnet.sui.io\".to_string()),\n        vec![],\n        ReaderOptions::default(),\n        exit_receiver,\n    )\n    .await?\n```\n\n----------------------------------------\n\nTITLE: Bridge Constants Definition in Move\nDESCRIPTION: Constants defining message versions, transfer statuses, address lengths and error codes for the bridge implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\nconst MESSAGE_VERSION: u8 = 1;\nconst TRANSFER_STATUS_PENDING: u8 = 0;\nconst TRANSFER_STATUS_APPROVED: u8 = 1;\nconst TRANSFER_STATUS_CLAIMED: u8 = 2;\nconst TRANSFER_STATUS_NOT_FOUND: u8 = 3;\nconst EVM_ADDRESS_LENGTH: u64 = 20;\nconst CURRENT_VERSION: u64 = 1;\n```\n\n----------------------------------------\n\nTITLE: Custodian Structure Definition\nDESCRIPTION: Defines the main Custodian structure that maintains a mapping of account balances. Uses a table to store Account objects indexed by owner addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Custodian<phantom T> has key, store {\n    id: sui::object::UID,\n    account_balances: sui::table::Table<address, Account<T>>\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Next Epoch Deny List Status (Move)\nDESCRIPTION: Package-scoped function to check if an address will be in the deny list next epoch. Returns boolean indicating presence in next epoch configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun v2_contains_next_epoch(\n    deny_list: &DenyList,\n    per_type_index: u64,\n    per_type_key: vector<u8>,\n    addr: address,\n): bool {\n    if (!deny_list.per_type_exists(per_type_index, per_type_key)) return false;\n    let per_type_config = deny_list.borrow_per_type_config(per_type_index, per_type_key);\n    let setting_name = AddressKey(addr);\n    per_type_config.read_setting_for_next_epoch(setting_name).destroy_or!(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Update Asset Price Message in Move\nDESCRIPTION: This function creates a bridge message for updating the price of an asset. It requires a token ID, source chain ID, sequence number, and the new price as parameters. The function verifies the validity of the source chain, creates the payload with token ID and new price data, and returns a BridgeMessage. Prerequisite modules include validated chain IDs and message types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../bridge/message.md#bridge_message_create_update_asset_price_message\">create_update_asset_price_message</a>(\n    token_id: u8,\n    <a href=\"../bridge/message.md#bridge_message_source_chain\">source_chain</a>: u8,\n    <a href=\"../bridge/message.md#bridge_message_seq_num\">seq_num</a>: u64,\n    new_price: u64,\n): <a href=\"../bridge/message.md#bridge_message_BridgeMessage\">BridgeMessage</a> {\n    <a href=\"../bridge/chain_ids.md#bridge_chain_ids_assert_valid_chain_id\">chain_ids::assert_valid_chain_id</a>(<a href=\"../bridge/message.md#bridge_message_source_chain\">source_chain</a>);\n    <b>let</b> <b>mut</b> <a href=\"../bridge/message.md#bridge_message_payload\">payload</a> = vector[token_id];\n    <a href=\"../bridge/message.md#bridge_message_payload\">payload</a>.append(<a href=\"../bridge/message.md#bridge_message_reverse_bytes\">reverse_bytes</a>(bcs::to_bytes(&new_price)));\n    <a href=\"../bridge/message.md#bridge_message_BridgeMessage\">BridgeMessage</a> {\n        <a href=\"../bridge/message.md#bridge_message_message_type\">message_type</a>: <a href=\"../bridge/message_types.md#bridge_message_types_update_asset_price\">message_types::update_asset_price</a>(),\n        <a href=\"../bridge/message.md#bridge_message_message_version\">message_version</a>: <a href=\"../bridge/message.md#bridge_message_CURRENT_MESSAGE_VERSION\">CURRENT_MESSAGE_VERSION</a>,\n        <a href=\"../bridge/message.md#bridge_message_seq_num\">seq_num</a>,\n        <a href=\"../bridge/message.md#bridge_message_source_chain\">source_chain</a>,\n        <a href=\"../bridge/message.md#bridge_message_payload\">payload</a>,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Delisting Items from Kiosk\nDESCRIPTION: Removes an existing listing from the Kiosk while keeping the item in the user's Kiosk. Can only be executed by the Kiosk owner. Includes validation checks for ownership, item existence, and listing status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\npublic fun delist<T: key + store>(self: &mut Kiosk, cap: &KioskOwnerCap, id: ID) {\n    assert!(self.has_access(cap), ENotOwner);\n    assert!(self.has_item_with_type<T>(id), EItemNotFound);\n    assert!(!self.is_listed_exclusively(id), EListedExclusively);\n    assert!(self.is_listed(id), ENotListed);\n    df::remove<Listing, u64>(&mut self.id, Listing { id, is_exclusive: false });\n    event::emit(ItemDelisted<T> { kiosk: object::id(self), id })\n}\n```\n\n----------------------------------------\n\nTITLE: Move IR Compiler Command-line Usage and Options\nDESCRIPTION: Displays the command-line options for the Move IR compiler, including flags for help, listing dependencies, treating input as a module, skipping verification, and options for dependency paths.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-ir-compiler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUSAGE:\n    compiler [FLAGS] [OPTIONS] <source-path>\n\nFLAGS:\n    -h, --help                 Prints help information\n    -l, --list-dependencies    Instead of compiling the source, emit a dependency list of the compiled source\n    -m, --module               Treat input file as a module (default is to treat file as a script)\n        --no-verify            Do not automatically run the bytecode verifier\n        --src-map\n    -V, --version              Prints version information\n\nOPTIONS:\n    -d, --deps <deps-path>    Path to the list of modules that we want to link with\n\nARGS:\n    <source-path>    Path to the Move IR source to compile\n```\n\n----------------------------------------\n\nTITLE: Defining VerifiedID Struct in Move\nDESCRIPTION: Definition of the core VerifiedID struct that stores zklogin verification data including owner address, key claims, issuer and audience information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_id.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct VerifiedID has key {\n    id: sui::object::UID,\n    owner: address,\n    key_claim_name: std::string::String,\n    key_claim_value: std::string::String, \n    issuer: std::string::String,\n    audience: std::string::String\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Move Traces for All Tests in Shell\nDESCRIPTION: Command to generate Move traces for all test files in a package using the sui binary. This command also generates disassembled bytecode for all modules to support disassembly view.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-analyzer/trace-debug/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsui move test --trace-execution\n```\n\n----------------------------------------\n\nTITLE: Implementing Decimal Multiplier Retrieval Function in Move\nDESCRIPTION: Defines a function to retrieve the decimal multiplier for a given token type from the BridgeTreasury.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/treasury.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun decimal_multiplier<T>(self: &BridgeTreasury): u64 {\n    let metadata = self.get_token_metadata<T>();\n    metadata.decimal_multiplier\n}\n```\n\n----------------------------------------\n\nTITLE: Dividing With Ceiling Rounding for u256 Integers in Move\nDESCRIPTION: Divides x by y and rounds up the result. This function uses std::macros::num_divide_and_round_up to perform division with ceiling rounding.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_and_round_up(x: u256, y: u256): u256 {\n    std::macros::num_divide_and_round_up!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Stake with Multiple Coins in Move\nDESCRIPTION: The `request_add_stake_mul_coin` function is used to add a user's stake to a validator by using multiple SUI coins. Necessary modules include those handling vectors, optional values, and coin balances. It requires a mutable reference to the `SuiSystemState`, a vector of SUI coins, an optional stake amount, the validator's address, and a mutable `TxContext`. It calculates the total balance using the provided coins and adds it to the specified validator's pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/exchange-integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun request_add_stake_mul_coin(\n   self: &mut SuiSystemState,\n   delegate_stakes: vector<Coin<SUI>>,\n   stake_amount: option::Option<u64>,\n   validator_address: address,\n   ctx: &mut TxContext,\n) {\n   let balance = extract_coin_balance(delegate_stakes, stake_amount, ctx);\n   validator_set::request_add_stake(&mut self.validators, validator_address, balance, option::none(), ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: VecSet Singleton Constructor\nDESCRIPTION: Creates a VecSet containing exactly one element.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_set.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun singleton<K: copy + drop>(key: K): VecSet<K> {\n    VecSet { contents: vector[key] }\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing from Referent in Move\nDESCRIPTION: Implements the borrow function to borrow the T from the Referent. It returns the borrowed value and a Borrow hot potato.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/borrow.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow<T: key + store>(self: &mut Referent<T>): (T, Borrow) {\n    let value = self.value.extract();\n    let id = object::id(&value);\n    (\n        value,\n        Borrow {\n            ref: self.id,\n            obj: id,\n        },\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants for Staking Operations in Move\nDESCRIPTION: A set of error constants used throughout the staking pool module to handle various error conditions like insufficient balances, wrong pools, or invalid operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\nconst EInsufficientPoolTokenBalance: u64 = 0;\nconst EWrongPool: u64 = 1;\nconst EWithdrawAmountCannotBeZero: u64 = 2;\nconst EInsufficientSuiTokenBalance: u64 = 3;\nconst EInsufficientRewardsPoolBalance: u64 = 4;\nconst EDestroyNonzeroBalance: u64 = 5;\nconst ETokenTimeLockIsSome: u64 = 6;\nconst EWrongDelegation: u64 = 7;\nconst EPendingDelegationDoesNotExist: u64 = 8;\nconst ETokenBalancesDoNotMatchExchangeRate: u64 = 9;\nconst EDelegationToInactivePool: u64 = 10;\nconst EDeactivationOfInactivePool: u64 = 11;\nconst EIncompatibleStakedSui: u64 = 12;\nconst EWithdrawalInSameEpoch: u64 = 13;\nconst EPoolAlreadyActive: u64 = 14;\nconst EPoolNotPreactive: u64 = 15;\nconst EActivationOfInactivePool: u64 = 16;\nconst EDelegationOfZeroSui: u64 = 17;\nconst EStakedSuiBelowThreshold: u64 = 18;\nconst ECannotMintFungibleStakedSuiYet: u64 = 19;\nconst EInvariantFailure: u64 = 20;\n```\n\n----------------------------------------\n\nTITLE: ASCII String Conversion Functions\nDESCRIPTION: Functions to convert between ASCII and UTF-8 strings\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_ascii(s: ascii::String): String {\n    String { bytes: s.into_bytes() }\n}\n\npublic fun to_ascii(s: String): ascii::String {\n    let String { bytes } = s;\n    bytes.to_ascii_string()\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Blocklist Operations in Move\nDESCRIPTION: Implements blocklist execution functionality for committee members. Handles blocklisting and unblocklisting of validators based on their ethereum addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun execute_blocklist(self: &mut BridgeCommittee, blocklist: Blocklist)\n```\n\n----------------------------------------\n\nTITLE: Creating a UTF-8 String from Bytes\nDESCRIPTION: Function that creates a new string from a sequence of bytes, aborting if the bytes do not represent valid UTF-8.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun utf8(bytes: vector<u8>): std::string::String {\n    assert!(internal_check_utf8(&bytes), EInvalidUTF8);\n    String { bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Management\nDESCRIPTION: Token-related structures and functions for managing token policies, transfers, and operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_41\n\nLANGUAGE: move\nCODE:\n```\npublic struct Token\npublic struct TokenPolicyCap\npublic struct TokenPolicy\npublic struct ActionRequest\npublic fun new_policy\npublic fun transfer\npublic fun spend\n```\n\n----------------------------------------\n\nTITLE: Checking if a String is Empty\nDESCRIPTION: Function that determines whether a string contains no characters by checking if its byte vector is empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_empty(s: &String): bool {\n    s.bytes.is_empty()\n}\n```\n\n----------------------------------------\n\nTITLE: Executing System Message in Bridge in Move\nDESCRIPTION: Executes a system message on the bridge. Verifies the message version, chain ID, and sequence number. Then executes the appropriate action based on the message type (emergency op, committee blocklist, update bridge limit, update asset price, or add tokens on Sui).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun execute_system_message(\n    bridge: &mut Bridge,\n    message: BridgeMessage,\n    signatures: vector<vector<u8>>,\n) {\n    let message_type = message.message_type();\n    // TODO: test version mismatch\n    assert!(message.message_version() == MESSAGE_VERSION, EUnexpectedMessageVersion);\n    let inner = load_inner_mut(bridge);\n    assert!(message.source_chain() == inner.chain_id, EUnexpectedChainID);\n    // check system ops seq number and increment it\n    let expected_seq_num = inner.get_current_seq_num_and_increment(message_type);\n    assert!(message.seq_num() == expected_seq_num, EUnexpectedSeqNum);\n    inner.committee.verify_signatures(message, signatures);\n    if (message_type == message_types::emergency_op()) {\n        let payload = message.extract_emergency_op_payload();\n        inner.execute_emergency_op(payload);\n    } else if (message_type == message_types::committee_blocklist()) {\n        let payload = message.extract_blocklist_payload();\n        inner.committee.execute_blocklist(payload);\n    } else if (message_type == message_types::update_bridge_limit()) {\n        let payload = message.extract_update_bridge_limit();\n        inner.execute_update_bridge_limit(payload);\n    } else if (message_type == message_types::update_asset_price()) {\n        let payload = message.extract_update_asset_price();\n        inner.execute_update_asset_price(payload);\n    } else if (message_type == message_types::add_tokens_on_sui()) {\n        let payload = message.extract_add_tokens_on_sui();\n        inner.execute_add_tokens_on_sui(payload);\n    } else {\n        abort EUnexpectedMessageType\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing TokenPolicy in Sui Token Module\nDESCRIPTION: This function shares a TokenPolicy after initialization due to key-only restrictions. It emits a TokenPolicyCreated event and then shares the policy object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npublic fun share_policy<T>(policy: TokenPolicy<T>) {\n    event::emit(TokenPolicyCreated<T> {\n        id: object::id(&policy),\n        is_mutable: true,\n    });\n    transfer::share_object(policy)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Sui Kiosk Extension\nDESCRIPTION: Implements the disable function to revoke permissions from an extension, preventing it from performing protected actions while keeping its storage intact.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun disable<Ext: drop>(self: &mut Kiosk, cap: &KioskOwnerCap) {\n    assert!(self.has_access(cap), ENotOwner);\n    assert!(is_installed<Ext>(self), EExtensionNotInstalled);\n    extension_mut<Ext>(self).is_enabled = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Reward Adjustments for Validators in Move\nDESCRIPTION: This function calculates reward adjustments for both staking and storage fund rewards based on slashed validator indices and a reward slashing rate. It returns total adjustments and individual adjustments for each validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_52\n\nLANGUAGE: Move\nCODE:\n```\nfun compute_reward_adjustments(\n    slashed_validator_indices: vector<u64>,\n    reward_slashing_rate: u64,\n    unadjusted_staking_reward_amounts: &vector<u64>,\n    unadjusted_storage_fund_reward_amounts: &vector<u64>,\n): (\n    u64,\n    VecMap<u64, u64>,\n    u64,\n    VecMap<u64, u64>,\n) {\n    let mut total_staking_reward_adjustment = 0;\n    let mut individual_staking_reward_adjustments = vec_map::empty();\n    let mut total_storage_fund_reward_adjustment = 0;\n    let mut individual_storage_fund_reward_adjustments = vec_map::empty();\n    slashed_validator_indices.destroy!(|validator_index| {\n        let unadjusted_staking_reward = unadjusted_staking_reward_amounts[validator_index];\n        let staking_reward_adjustment = mul_div!(\n            unadjusted_staking_reward,\n            reward_slashing_rate,\n            BASIS_POINT_DENOMINATOR,\n        );\n        individual_staking_reward_adjustments.insert(validator_index, staking_reward_adjustment);\n        total_staking_reward_adjustment =\n            total_staking_reward_adjustment + staking_reward_adjustment;\n        let unadjusted_storage_fund_reward = unadjusted_storage_fund_reward_amounts[\n            validator_index,\n        ];\n        let storage_fund_reward_adjustment = mul_div!(\n            unadjusted_storage_fund_reward,\n            reward_slashing_rate,\n            BASIS_POINT_DENOMINATOR,\n        );\n        individual_storage_fund_reward_adjustments.insert(\n            validator_index,\n            storage_fund_reward_adjustment,\n        );\n        total_storage_fund_reward_adjustment =\n            total_storage_fund_reward_adjustment + storage_fund_reward_adjustment;\n    });\n    (\n        total_staking_reward_adjustment,\n        individual_staking_reward_adjustments,\n        total_storage_fund_reward_adjustment,\n        individual_storage_fund_reward_adjustments,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding BLS12381 Scalars\nDESCRIPTION: This function adds two BLS12381 scalars together, returning a new scalar that is the sum of the input scalars.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_add\">scalar_add</a>(e1: &<a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;, e2: &<a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;): <a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_add\">scalar_add</a>(e1: &Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt;, e2: &Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt;): Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt; {\n    <a href=\"../sui/group_ops.md#sui_group_ops_add\">group_ops::add</a>(<a href=\"../sui/bls12381.md#sui_bls12381_SCALAR_TYPE\">SCALAR_TYPE</a>, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Tokens in Sui Framework (Rust)\nDESCRIPTION: This function splits a token by a specified amount, aborting if the token's balance is lower than the amount. It returns a new token with the same type and a new balance created from splitting the original token's balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_15\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun split<T>(token: &mut sui::token::Token<T>, amount: u64, ctx: &mut sui::tx_context::TxContext): sui::token::Token<T> {\n    assert!(token.balance.value() >= amount, EBalanceTooLow);\n    Token {\n        id: object::new(ctx),\n        balance: token.balance.split(amount),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Dynamic Object Field\nDESCRIPTION: Immutably borrows an object's dynamic field. Aborts if field doesn't exist or type mismatch occurs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow<Name: copy + drop + store, Value: key + store>(object: &UID, name: Name): &Value {\n    borrow_impl!(object, name)\n}\n```\n\n----------------------------------------\n\nTITLE: Mutably Borrowing Value from Table in Move\nDESCRIPTION: Implements the borrow_mut function to mutably access a value in the Table by its key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow_mut<K: copy + drop + store, V: store>(table: &mut Table<K, V>, k: K): &mut V {\n    field::borrow_mut(&mut table.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: ECVRF Verification Smart Contract\nDESCRIPTION: Sui Move smart contract module that implements VRF output verification using the sui::ecvrf module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/ecvrf.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule math::ecvrf_test {\n    use sui::ecvrf;\n    use sui::event;\n\n    /// Event on whether the output is verified\n    struct VerifiedEvent has copy, drop {\n        is_verified: bool,\n    }\n\n    public fun verify_ecvrf_output(output: vector<u8>, alpha_string: vector<u8>, public_key: vector<u8>, proof: vector<u8>) {\n        event::emit(VerifiedEvent {is_verified: ecvrf::ecvrf_verify(&output, &alpha_string, &public_key, &proof)});\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Coin Utility Functions in Move\nDESCRIPTION: Core utility functions for managing coin supply, balances, and conversions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun total_supply<T>(cap: &TreasuryCap<T>): u64 {\n    balance::supply_value(&cap.total_supply)\n}\n\npublic fun treasury_into_supply<T>(treasury: TreasuryCap<T>): Supply<T> {\n    let TreasuryCap { id, total_supply } = treasury;\n    id.delete();\n    total_supply\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kiosk Struct in Move\nDESCRIPTION: This code defines the Kiosk struct, which represents a kiosk object for selling collectibles. It includes fields for profits, owner, item count, and extension settings.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Kiosk has key, store {\n    id: sui::object::UID,\n    profits: sui::balance::Balance<sui::sui::SUI>,\n    owner: address,\n    item_count: u32,\n    allow_extensions: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration API - Add Config\nDESCRIPTION: API function for adding new rule configurations. Requires both rule witness and TokenPolicy owner approval.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/rules.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\n// module: sui::token\npublic fun add_rule_config<T, Rule: drop, Config: store>(\n    _rule: Rule,\n    policy: &mut TokenPolicy<T>,\n    policy_cap: &TokenPolicyCap<T>,\n    config: Config,\n    _ctx: &mut TxContext\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Singleton TableVec in Sui Move\nDESCRIPTION: Implements the singleton function to create a TableVec with a single element.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table_vec.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun singleton<Element: store>(e: Element, ctx: &mut TxContext): TableVec<Element> {\n    let mut t = empty(ctx);\n    t.push_back(e);\n    t\n}\n```\n\n----------------------------------------\n\nTITLE: Hash to G1 Function in Sui Framework - Move\nDESCRIPTION: The hash_to_g1 function hashes an input vector of bytes to produce an Element of type G1. It utilizes a specific hashing method defined by a domain separation tag (DST).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_23\n\nLANGUAGE: move\nCODE:\n```\npublic fun hash_to_g1(m: &vector<u8>): Element<G1> {\n    group_ops::hash_to(G1_TYPE, m)\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Scalar Multiplication in G1 in Sui Framework - Move\nDESCRIPTION: This function g1_multi_scalar_multiplication performs scalar multiplication for multiple elements of G1 and returns the combined result. It restricts the size of the vectors to a maximum of 32 elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_24\n\nLANGUAGE: move\nCODE:\n```\npublic fun g1_multi_scalar_multiplication(\n    scalars: &vector<Element<Scalar>>, \n    elements: &vector<Element<G1>>, \n): Element<G1> {\n    group_ops::multi_scalar_multiplication(G1_TYPE, scalars, elements)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for ECDSA R1 Operations in Move\nDESCRIPTION: Defines constants for error codes and hash function identifiers used in ECDSA R1 operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/ecdsa_r1.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nconst EFailToRecoverPubKey: u64 = 0;\nconst EInvalidSignature: u64 = 1;\nconst KECCAK256: u8 = 0;\nconst SHA256: u8 = 1;\n```\n\n----------------------------------------\n\nTITLE: Purchasing Item with Purchase Cap in Sui Kiosk (Move)\nDESCRIPTION: This function unpacks the PurchaseCap and calls the purchase function. It sets the payment amount as the price for the listing, ensuring it's no less than the minimum amount.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_26\n\nLANGUAGE: Move\nCODE:\n```\npublic fun purchase_with_cap<T: key + store>(\n    self: &mut Kiosk,\n    purchase_cap: PurchaseCap<T>,\n    payment: Coin<SUI>,\n): (T, TransferRequest<T>) {\n    let PurchaseCap { id, item_id, kiosk_id, min_price } = purchase_cap;\n    id.delete();\n    let id = item_id;\n    let paid = payment.value();\n    assert!(paid >= min_price, EIncorrectAmount);\n    assert!(object::id(self) == kiosk_id, EWrongKiosk);\n    df::remove<Listing, u64>(&mut self.id, Listing { id, is_exclusive: true });\n    coin::put(&mut self.profits, payment);\n    self.item_count = self.item_count - 1;\n    df::remove_if_exists<Lock, bool>(&mut self.id, Lock { id });\n    let item = dof::remove<Item, T>(&mut self.id, Item { id });\n    (item, transfer_policy::new_request(id, paid, object::id(self)))\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Pending Validator Removals in Move\nDESCRIPTION: Processes pending validator removal requests by removing validators from the active list and adding them to inactive validators. This function sorts the removal list before processing to ensure consistent validator removal order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_45\n\nLANGUAGE: Move\nCODE:\n```\nfun process_pending_removals(\n    self: &mut ValidatorSet,\n    validator_report_records: &mut VecMap<address, VecSet<address>>,\n    ctx: &mut TxContext,\n) {\n    sort_removal_list(&mut self.pending_removals);\n    self.pending_removals.length().do!(|_| {\n        let index = self.pending_removals.pop_back();\n        let validator = self.active_validators.remove(index);\n        self.process_validator_departure(\n            validator,\n            validator_report_records,\n            true, // the validator removes itself voluntarily\n            ctx,\n        );\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Pool ID in Move\nDESCRIPTION: Extracts the pool ID from a StakedSui object, returning it as an ID. Takes a reference to a StakedSui as input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pool_id(staked_sui: &sui_system::staking_pool::StakedSui): ID { staked_sui.pool_id }\n```\n\n----------------------------------------\n\nTITLE: Unlock Balance Function\nDESCRIPTION: Moves a specified quantity from user's locked balance to unlocked balance using user ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun unlock_balance<T>(\n    custodian: &mut Custodian<T>,\n    user: ID,\n    quantity: u64,\n) {\n    let locked_balance = decrease_user_locked_balance<T>(custodian, user, quantity);\n    increase_user_available_balance<T>(custodian, user, locked_balance)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing UID as Owner in Kiosk - Move\nDESCRIPTION: This function allows access to the mutable UID using a KioskOwnerCap. It ensures the caller has the appropriate access rights before allowing modification.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_38\n\nLANGUAGE: Move\nCODE:\n```\npublic fun uid_mut_as_owner(self: &mut sui::kiosk::Kiosk, cap: &sui::kiosk::KioskOwnerCap): &mut sui::object::UID {\n    assert!(self.has_access(cap), ENotOwner);\n    &mut self.id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Emit Function in Move\nDESCRIPTION: Native implementation of the emit function in the sui::event module. It takes a generic type T with copy and drop abilities as an argument.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/event.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic native fun emit<T: copy + drop>(event: T);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Rule in SUI Transfer Policy - Move\nDESCRIPTION: The `get_rule` function retrieves a custom Config for a given Rule from the TransferPolicy. It requires the TransferPolicy module and specific types for Rule and Config. The function expects a rule and a reference to a TransferPolicy, returning a reference to the Config associated with the Rule.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_19\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_rule<T, Rule: drop, Config: drop, store>(_: Rule, policy: &sui::transfer_policy::TransferPolicy<T>): &Config\n```\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_rule<T, Rule: drop, Config: store + drop>(\n    _: Rule,\n    policy: &TransferPolicy<T>,\n): &Config {\n    df::borrow(&policy.id, RuleKey<Rule> {})\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Borrow Mut Dynamic Object Field\nDESCRIPTION: Package-internal function to borrow a mutable reference to a dynamic object field value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun internal_borrow_mut<Name: copy + drop + store, Value: key>(\n    object: &mut UID,\n    name: Name,\n): &mut Value {\n    borrow_mut_impl!(object, name)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Group Element Division in Move\nDESCRIPTION: Performs division of a group element by a scalar. Fails if scalar is zero. Returns the product of the scalar inverse and the element.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun div<S, G>(type_: u8, scalar: &Element<S>, e: &Element<G>): Element<G> {\n    Element<G> { bytes: internal_div(type_, &scalar.bytes, &e.bytes) }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Kiosk Owner in Sui\nDESCRIPTION: Changes the owner field of a Kiosk to the transaction sender. This is a cosmetic change that doesn't affect basic Kiosk functionality but can be used by third-party modules. Requires the KioskOwnerCap to validate authorization.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun set_owner(self: &mut Kiosk, cap: &KioskOwnerCap, ctx: &TxContext) {\n    assert!(self.has_access(cap), ENotOwner);\n    self.owner = ctx.sender();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Validator from Metadata in Move\nDESCRIPTION: Function to create a new validator instance from ValidatorMetadata. Initializes validator with metadata, staking pool, operation capabilities, gas price and commission rate. The voting power is initially set to 0 and updated when validator joins active set.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_96\n\nLANGUAGE: Move\nCODE:\n```\nfun new_from_metadata(\n    metadata: ValidatorMetadata,\n    gas_price: u64,\n    commission_rate: u64,\n    ctx: &mut TxContext,\n): Validator {\n    let sui_address = metadata.sui_address;\n    let staking_pool = staking_pool::new(ctx);\n    let operation_cap_id = validator_cap::new_unverified_validator_operation_cap_and_transfer(\n        sui_address,\n        ctx,\n    );\n    Validator {\n        metadata,\n        // Initialize the voting power to be 0.\n        // At the epoch change where this validator is actually added to the\n        // active validator set, the voting power will be updated accordingly.\n        voting_power: 0,\n        operation_cap_id,\n        gas_price,\n        staking_pool,\n        commission_rate,\n        next_epoch_stake: 0,\n        next_epoch_gas_price: gas_price,\n        next_epoch_commission_rate: commission_rate,\n        extra_fields: bag::new(ctx),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Item Presence in Sui Kiosk (Move)\nDESCRIPTION: This function checks whether a specific item is present in the Kiosk based on its ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\npublic fun has_item(self: &Kiosk, id: ID): bool {\n    dof::exists_(&self.id, Item { id })\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Char to Lowercase in Move\nDESCRIPTION: This function converts a given ASCII character (represented as a byte) to its lowercase equivalent. If the character is already in lowercase or is not an uppercase letter, it returns the original character. The function uses ASCII values to determine if a conversion is needed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../std/ascii.md#std_ascii_char_to_lowercase\">char_to_lowercase</a>(<a href=\"../std/ascii.md#std_ascii_byte\">byte</a>: <a href=\"../std/u8.md#std_u8\">u8</a>): <a href=\"../std/u8.md#std_u8\">u8</a> {\n    <b>if</b> (<a href=\"../std/ascii.md#std_ascii_byte\">byte</a> &gt;= 0x41 && <a href=\"../std/ascii.md#std_ascii_byte\">byte</a> &lt;= 0x5A) <a href=\"../std/ascii.md#std_ascii_byte\">byte</a> + 0x20 <b>else</b> <a href=\"../std/ascii.md#std_ascii_byte\">byte</a>\n}\n```\n\n----------------------------------------\n\nTITLE: AccountCap Capability Structure Definition\nDESCRIPTION: Defines the AccountCap structure that provides access control to account entries. It supports both admin and child capabilities, with admin caps having additional permissions for creating new account caps.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct AccountCap has key, store {\n    id: sui::object::UID,\n    owner: address\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing num_pow Macro in Move\nDESCRIPTION: A macro function that calculates the power of a base to an exponent using the binary exponentiation algorithm for efficiency.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_pow($base: _, $exponent: u8): _ {\n    let mut base = $base;\n    let mut exponent = $exponent;\n    let mut res = 1;\n    while (exponent >= 1) {\n        if (exponent % 2 == 0) {\n            base = base * base;\n            exponent = exponent / 2;\n        } else {\n            res = res * base;\n            exponent = exponent - 1;\n        }\n    };\n    res\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Item is Listed in Kiosk - Move\nDESCRIPTION: This function checks if an item is listed within the Kiosk, either exclusively or non-exclusively, returning a boolean value accordingly.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_35\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_listed(self: &sui::kiosk::Kiosk, id: sui::object::ID): bool {\n    df::exists_(&self.id, Listing { id, is_exclusive: false })\n        || self.is_listed_exclusively(id)\n}\n```\n\n----------------------------------------\n\nTITLE: Node Struct Definition - Move\nDESCRIPTION: Helper struct representing a node in the linked table that stores the value and links to previous and next elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Node<K: copy, drop, store, V: store> has store {\n    prev: std::option::Option<K>,\n    next: std::option::Option<K>,\n    value: V\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Division with Ceiling for u64 in Move\nDESCRIPTION: Function that divides x by y and rounds up the result, useful for cases where you need to ensure the quotient covers the entire range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_and_round_up(x: u64, y: u64): u64 {\n    std::macros::num_divide_and_round_up!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Validator Voting Power\nDESCRIPTION: Sets the voting power of all validators based on their stake, capping individual voting power at MAX_VOTING_POWER. The function calculates the threshold and adjusts voting power to ensure a feasible cap, updating validator information and checking invariants.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b>(package) <b>fun</b> <a href=\"../sui_system/voting_power.md#sui_system_voting_power_set_voting_power\">set_voting_power</a>(validators: &<b>mut</b> vector&lt;<a href=\"../sui_system/validator.md#sui_system_validator_Validator\">sui_system::validator::Validator</a>&gt;, total_stake: u64) {\n    // If threshold_pct is too small, it's possible that even when all validators reach the threshold we still don't\n    // have 100%. So we bound the threshold_pct to be always enough to find a solution.\n    <b>let</b> <a href=\"../sui_system/voting_power.md#sui_system_voting_power_total_voting_power\">total_voting_power</a> = <a href=\"../sui_system/voting_power.md#sui_system_voting_power_TOTAL_VOTING_POWER\">TOTAL_VOTING_POWER</a>;\n    <b>let</b> average_voting_power = <a href=\"../sui_system/voting_power.md#sui_system_voting_power_total_voting_power\">total_voting_power</a>.divide_and_round_up(validators.length());\n    <b>let</b> threshold = <a href=\"../sui_system/voting_power.md#sui_system_voting_power_total_voting_power\">total_voting_power</a>.min(<a href=\"../sui_system/voting_power.md#sui_system_voting_power_MAX_VOTING_POWER\">MAX_VOTING_POWER</a>.max(average_voting_power));\n    <b>let</b> (<b>mut</b> info_list, remaining_power) = <a href=\"../sui_system/voting_power.md#sui_system_voting_power_init_voting_power_info\">init_voting_power_info</a>(\n        validators,\n        threshold,\n        total_stake,\n    );\n    <a href=\"../sui_system/voting_power.md#sui_system_voting_power_adjust_voting_power\">adjust_voting_power</a>(&<b>mut</b> info_list, threshold, remaining_power);\n    <a href=\"../sui_system/voting_power.md#sui_system_voting_power_update_voting_power\">update_voting_power</a>(validators, info_list);\n    <a href=\"../sui_system/voting_power.md#sui_system_voting_power_check_invariants\">check_invariants</a>(validators);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing New Game Function\nDESCRIPTION: Creates a new game instance with empty board and initial player assignments. Returns a Game object and TurnCap for the first player.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/tic-tac-toe.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun new(x: address, o: address, ctx: &mut TxContext): (Game, TurnCap) {\n    let game = Game {\n        id: object::new(ctx),\n        board: vector[MARK__; 9],\n        x_addr: x,\n        o_addr: o,\n        next_is_x: true,\n        admin: tx_context::sender(ctx),\n    };\n    let cap = TurnCap {\n        id: object::new(ctx),\n        game_id: object::id(&game),\n        is_x: true,\n    };\n    (game, cap)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Sword Object\nDESCRIPTION: Command to create a new Sword object using programmable transaction blocks (PTB) with the Sui CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/publish.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsui client ptb \\\n\t--assign forge @<FORGE-ID> \\\n\t--assign to_address @<TO-ADDRESS> \\\n\t--move-call <PACKAGE-ID>::my_module::new_sword forge 3 3 \\\n\t--assign sword \\\n\t--transfer-objects \"[sword]\" to_address \\\n\t--gas-budget 20000000\n```\n\n----------------------------------------\n\nTITLE: BCS Struct Definition in Move\nDESCRIPTION: Definition of the BCS helper struct used for efficient vector operations during deserialization. It stores reversed bytes of the BCS data to enable the use of vector::pop_back for better performance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic struct BCS has copy, drop, store\n{\n    bytes: vector<u8>\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Sui from GitHub\nDESCRIPTION: A step demonstrating how to clone the Sui repository from GitHub for building from source. It requires Git to be installed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/MystenLabs/sui.git && cd sui\n```\n\n----------------------------------------\n\nTITLE: Internal Pairing Operation (Move)\nDESCRIPTION: This native function `internal_pairing` calculates the pairing of two group elements represented as byte vectors. The function receives the group type as a `u8` and two byte vectors, `e1` and `e2`. It returns the result of the pairing operation as a new byte vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/group_ops.md#sui_group_ops_internal_pairing\">internal_pairing</a>(type_: u8, e1: &vector&lt;u8&gt;, e2: &vector&lt;u8&gt;): vector&lt;u8&gt;;\n```\n\n----------------------------------------\n\nTITLE: OrderCanceled Event Struct Definition\nDESCRIPTION: Definition of the OrderCanceled event struct which is emitted when a maker order is canceled. Contains information about the canceled order including its ID, ownership, and remaining quantity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic struct OrderCanceled<phantom BaseAsset, phantom QuoteAsset> has copy, drop, store {\n    pool_id: sui::object::ID,\n    order_id: u64,\n    is_bid: bool,\n    owner: sui::object::ID,\n    base_asset_quantity_canceled: u64,\n    price: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating absolute difference between u128 values\nDESCRIPTION: Returns the absolute value of the difference between two u128 values using the num_diff macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun diff(x: u128, y: u128): u128 {\n    std::macros::num_diff!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Decrease Available Balance Function\nDESCRIPTION: Decreases a user's available balance by the specified quantity and returns the split balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun decrease_user_available_balance<T>(\n    custodian: &mut Custodian<T>,\n    account_cap: &AccountCap,\n    quantity: u64,\n): Balance<T> {\n    let account = borrow_mut_account_balance<T>(custodian, object::uid_to_inner(&account_cap.id));\n    balance::split(&mut account.available_balance, quantity)\n}\n```\n\n----------------------------------------\n\nTITLE: MidPrice Function Definition\nDESCRIPTION: Function signature for retrieving the mid price for a specific pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nasync midPrice(poolKey: string) {}\n```\n\n----------------------------------------\n\nTITLE: Native implementation of delete_impl\nDESCRIPTION: Native function that implements the actual deletion of an object identified by an address. This is called internally by the delete function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_22\n\nLANGUAGE: move\nCODE:\n```\nnative fun delete_impl(id: address);\n```\n\n----------------------------------------\n\nTITLE: Test Move Project using Sui Move\nDESCRIPTION: This command runs the tests defined in the Move project located in the current directory. It executes the test functions and reports any failures.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n\"sui move test\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Pause (Move)\nDESCRIPTION: Package-scoped function to enable global pause functionality for the next epoch. Takes deny list instance, type index, key and transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun v2_enable_global_pause(\n    deny_list: &mut DenyList,\n    per_type_index: u64,\n    per_type_key: vector<u8>,\n    ctx: &mut TxContext,\n) {\n    let per_type_config = deny_list.per_type_config_entry!(per_type_index, per_type_key, ctx);\n    let setting_name = GlobalPauseKey();\n    let next_epoch_entry = per_type_config.entry!<_, GlobalPauseKey, bool>(\n        &mut ConfigWriteCap(),\n        setting_name,\n        |_deny_list, _cap, _ctx| true,\n        ctx,\n    );\n    *next_epoch_entry = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Asset Price in Sui Bridge\nDESCRIPTION: This function updates the notional price of an asset in the bridge's treasury. It takes a payload containing the token ID and new price.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\nfun execute_update_asset_price(inner: &mut BridgeInner, payload: UpdateAssetPrice) {\n    inner.treasury.update_asset_notional_price(\n        payload.update_asset_price_payload_token_id(),\n        payload.update_asset_price_payload_new_price()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: ID Conversion Functions in Move\nDESCRIPTION: Helper functions for converting between different ID representations including bytes and addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun id_to_bytes(id: &ID): vector<u8> {\n    bcs::to_bytes(&id.bytes)\n}\n\npublic fun id_to_address(id: &ID): address {\n    id.bytes\n}\n\npublic fun id_from_bytes(bytes: vector<u8>): ID {\n    address::from_bytes(bytes).to_id()\n}\n\npublic fun id_from_address(bytes: address): ID {\n    ID { bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Value Return in Sui Kiosk\nDESCRIPTION: Function to return a previously borrowed item to the Kiosk. Verifies kiosk and item match the borrow receipt.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_49\n\nLANGUAGE: Move\nCODE:\n```\npublic fun return_val<T: key + store>(self: &mut Kiosk, item: T, borrow: Borrow) {\n    let Borrow { kiosk_id, item_id } = borrow;\n    assert!(object::id(self) == kiosk_id, EWrongKiosk);\n    assert!(object::id(&item) == item_id, EItemMismatch);\n    dof::add(&mut self.id, Item { id: item_id }, item);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Bridge Node URL in Move\nDESCRIPTION: Public function that allows a validator to update their node URL. This URL is used for cross-chain communications and needs to be kept up-to-date for proper bridge operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun update_node_url(bridge: &mut Bridge, new_url: vector<u8>, ctx: &TxContext) {\n    load_inner_mut(bridge).committee.update_node_url(new_url, ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Game Actions for Shared Version\nDESCRIPTION: Defines the Game struct for the shared implementation of Tic-Tac-Toe, allowing direct player interaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/tic-tac-toe.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nstruct Game has key {\n    id: UID,\n    board: vector<u8>,\n    x_addr: address,\n    o_addr: address,\n    next_is_x: bool,\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Byte and Hex String Literals in Move\nDESCRIPTION: Illustrates the equivalence between byte string literals and hex string literals in Move, which are both used to represent vector<u8> values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/primitive-types/vector.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nfun byte_and_hex_strings() {\n    assert!(b\"\" == x\"\", 0);\n    assert!(b\"Hello!\\n\" == x\"48656C6C6F210A\", 1);\n    assert!(b\"\\x48\\x65\\x6C\\x6C\\x6F\\x21\\x0A\" == x\"48656C6C6F210A\", 2);\n    assert!(\n        b\"\\\"Hello\\tworld!\\\"\\n \\r \\\\Null=\\0\" ==\n            x\"2248656C6C6F09776F726C6421220A200D205C4E756C6C3D00\",\n        3\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Aliasing Specific Module Members in Move\nDESCRIPTION: Demonstrates how to create aliases for specific functions or structs within a module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/uses.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nuse std::vector::push_back;\nuse std::option::some as s;\n```\n\n----------------------------------------\n\nTITLE: Create New Custodian Instance\nDESCRIPTION: Initializes a new Custodian instance with empty account balances table.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun new<T>(ctx: &mut TxContext): Custodian<T> {\n    Custodian<T> {\n        id: object::new(ctx),\n        account_balances: table::new(ctx),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Lock Balance Function\nDESCRIPTION: Moves a specified quantity from user's unlocked balance to locked balance using account capabilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun lock_balance<T>(\n    custodian: &mut Custodian<T>,\n    account_cap: &AccountCap,\n    quantity: u64,\n) {\n    let to_lock = decrease_user_available_balance(custodian, account_cap, quantity);\n    increase_user_locked_balance(custodian, account_cap, to_lock);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Staking Pool is of an Inactive Validator in Move\nDESCRIPTION: Implementation of is_inactive_validator function that returns true if the staking pool identified by the given ID belongs to an inactive validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_62\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_inactive_validator(self: &ValidatorSet, staking_pool_id: ID): bool {\n    self.inactive_validators.contains(staking_pool_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing Package Upgrade in Move\nDESCRIPTION: This function issues a ticket authorizing an upgrade to new bytecode, based on its digest and a defined policy. It ensures that policies are not too permissive and only issues one ticket per request.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\npublic fun authorize_upgrade(cap: &mut UpgradeCap, policy: u8, digest: vector<u8>): UpgradeTicket {\n    let id_zero = @0x0.to_id();\n    assert!(cap.package != id_zero, EAlreadyAuthorized);\n    assert!(policy >= cap.policy, ETooPermissive);\n    let package = cap.package;\n    cap.package = id_zero;\n    UpgradeTicket {\n        cap: object::id(cap),\n        package,\n        policy,\n        digest,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sui Full Node from Source with Cargo\nDESCRIPTION: Compiles and starts a Sui Full node from source using Cargo and the sui-node binary. Requires configuration path to the fullnode YAML configuration file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo run --release --bin sui-node -- --config-path fullnode.yaml\n```\n\n----------------------------------------\n\nTITLE: Action Request Approval Function in Move\nDESCRIPTION: Function signature for adding an approval to an ActionRequest.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/action-request.mdx#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic fun add_approval<T, W: drop>(\n    _t: W, request: &mut ActionRequest<T>, _ctx: &mut TxContext\n);\n```\n\n----------------------------------------\n\nTITLE: Swapping Value in Option in Sui Move\nDESCRIPTION: Swaps the old value inside the option with a new value and returns the old value. Aborts if the option does not hold a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun swap<Element>(t: &mut Option<Element>, e: Element): Element {\n    assert!(t.is_some(), EOPTION_NOT_SET);\n    let vec_ref = &mut t.vec;\n    let old_value = vec_ref.pop_back();\n    vec_ref.push_back(e);\n    old_value\n}\n```\n\n----------------------------------------\n\nTITLE: Asset Price Update Functions\nDESCRIPTION: Functions to access properties of UpdateAssetPrice message including token ID and new price values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_15\n\nLANGUAGE: move\nCODE:\n```\npublic fun update_asset_price_payload_token_id(self: &UpdateAssetPrice): u8 {\n    self.token_id\n}\n\npublic fun update_asset_price_payload_new_price(self: &UpdateAssetPrice): u64 {\n    self.new_price\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Validator to Latest Version in Move\nDESCRIPTION: The upgrade_to_latest function checks the current version and asserts that it matches the expected version, which as of now is version 1. When new versions are introduced, this function needs updating to handle upgrades explicitly.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_wrapper.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nfun upgrade_to_latest(self: &sui_system::validator_wrapper::ValidatorWrapper)\n{\n    let version = self.version();\n    // TODO: When new versions are added, we need to explicitly upgrade here.\n    assert!(version == 1, EInvalidVersion);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Methods in a Type's Module\nDESCRIPTION: Example showing how functions within a type's defining module automatically become available as methods when the type is the first argument. Only functions with the type as the first parameter can be called using method syntax.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct X() has copy, drop, store;\n    public fun foo(x: &X) { ... }\n    public fun bar(flag: bool, x: &X) { ... }\n}\n```\n\nLANGUAGE: move\nCODE:\n```\nfun example(x: a::m::X) {\n    x.foo(); // valid\n    // x.bar(true); ERROR!\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for u8 Module in Move\nDESCRIPTION: Imports required modules for the u8 standard library implementation, including ascii, option, string, and vector modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nuse std::ascii;\nuse std::option;\nuse std::string;\nuse std::vector;\n```\n\n----------------------------------------\n\nTITLE: Get Mutable Validator Reference\nDESCRIPTION: Retrieves a mutable reference to either a candidate or active validator by their address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_31\n\nLANGUAGE: Move\nCODE:\n```\nfun get_candidate_or_active_validator_mut(\n    self: &mut ValidatorSet,\n    validator_address: address,\n): &mut Validator {\n    if (self.validator_candidates.contains(validator_address)) {\n        self.validator_candidates[validator_address].load_validator_maybe_upgrade()\n    } else {\n        get_validator_mut(&mut self.active_validators, validator_address)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: House Data Module Definition\nDESCRIPTION: Defines the `plinko::house_data` module, including imports, error codes, and struct definitions. This module is responsible for managing the Plinko game's treasury and configurations, including balance, fees, and game parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/plinko.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nmodule plinko::house_data {\n// === Imports ===\nuse sui::balance::{Self, Balance};\nuse sui::sui::SUI;\nuse sui::coin::{Self, Coin};\nuse sui::package::{Self};\n\n// === Errors ===\nconst ECallerNotHouse: u64 = 0;\nconst EInsufficientBalance: u64 = 1;\n\n\n// === Structs ===\n\n/// Configuration and Treasury shared object, managed by the house.\npublic struct HouseData has key {\n    id: UID,\n    // House's balance which also contains the accrued winnings of the house.\n    balance: Balance<SUI>,\n    // Address of the house or the game operator.\n    house: address,\n    // Public key used to verify the beacon produced by the back-end.\n    public_key: vector<u8>,\n    // Maximum stake amount a player can bet in a single game.\n    max_stake: u64,\n    // Minimum stake amount required to play the game.\n    min_stake: u64,\n    // The accrued fees from games played.\n    fees: Balance<SUI>,\n    // The default fee in basis points. 1 basis point = 0.01%.\n    base_fee_in_bp: u16,\n    // Multipliers used to calculate winnings based on the game outcome.\n    multiplier: vector<u64>\n}\n\n/// A one-time use capability to initialize the house data;\n/// created and sent to sender in the initializer.\npublic struct HouseCap has key {\n    id: UID\n}\n\n/// Used as a one time witness to generate the publisher.\npublic struct HOUSE_DATA has drop {}\n\nfun init(otw: HOUSE_DATA, ctx: &mut TxContext) {\n    // Creating and sending the Publisher object to the sender.\n    package::claim_and_keep(otw, ctx);\n\n    // Creating and sending the HouseCap object to the sender.\n    let house_cap = HouseCap {\n        id: object::new(ctx)\n    };\n\n    transfer::transfer(house_cap, ctx.sender());\n}\n\n/// Initializer function that should only be called once and by the creator of the contract.\n/// Initializes the house data object with the house's public key and an initial balance.\n/// It also sets the max and min stake values, that can later on be updated.\n/// Stores the house address and the base fee in basis points.\n/// This object is involved in all games created by the same instance of this package.\npublic fun initialize_house_data(house_cap: HouseCap, coin: Coin<SUI>, public_key: vector<u8>, multiplier: vector<u64>, ctx: &mut TxContext) {\n    assert!(coin.value() > 0, EInsufficientBalance);\n\n    let mut house_data = HouseData {\n        id: object::new(ctx),\n        balance: coin.into_balance(),\n        house: ctx.sender(),\n        public_key,\n        max_stake: 10_000_000_000, // 10 SUI = 10^9.\n        min_stake: 1_000_000_000, // 1 SUI.\n        fees: balance::zero(),\n        base_fee_in_bp: 100, // 1% in basis points.\n        multiplier: vector[]\n    };\n\n    house_data.set_multiplier_vector(multiplier);\n\n    let HouseCap { id } = house_cap;\n    object::delete(id);\n\n    transfer::share_object(house_data);\n}\n\n// === Public-Mutative Functions ===\n\npublic fun update_multiplier_vector(house_data: &mut HouseData, v: vector<u64>, ctx: &mut TxContext) {\n    assert!(ctx.sender() == house_data.house(), ECallerNotHouse);\n    house_data.multiplier = vector[];\n    house_data.set_multiplier_vector(v);\n}\n\n/// Function used to top up the house balance. Can be called by anyone.\n/// House can have multiple accounts so giving the treasury balance is not limited.\npublic fun top_up(house_data: &mut HouseData, coin: Coin<SUI>, _: &mut TxContext) {\n    coin::put(&mut house_data.balance, coin)\n}\n\n/// A function to withdraw the entire balance of the house object.\n/// It can be called only by the house\npublic fun withdraw(house_data: &mut HouseData, ctx: &mut TxContext) {\n    // Only the house address can withdraw funds.\n    assert!(ctx.sender() == house_data.house(), ECallerNotHouse);\n\n    let total_balance = house_data.balance();\n    let coin = coin::take(&mut house_data.balance, total_balance, ctx);\n    transfer::public_transfer(coin, house_data.house());\n}\n\n/// House can withdraw the accumulated fees of the house object.\npublic fun claim_fees(house_data: &mut HouseData, ctx: &mut TxContext) {\n    // Only the house address can withdraw fee funds.\n    assert!(ctx.sender() == house_data.house(), ECallerNotHouse);\n\n    let total_fees = house_data.fees();\n    let coin = coin::take(&mut house_data.fees, total_fees, ctx);\n    transfer::public_transfer(coin, house_data.house());\n}\n\n/// House can update the max stake. This allows larger stake to be placed.\npublic fun update_max_stake(house_data: &mut HouseData, max_stake: u64, ctx: &mut TxContext) {\n    // Only the house address can update the base fee.\n    assert!(ctx.sender() == house_data.house(), ECallerNotHouse);\n\n    house_data.max_stake = max_stake;\n}\n\n/// House can update the min stake. This allows smaller stake to be placed.\npublic fun update_min_stake(house_data: &mut HouseData, min_stake: u64, ctx: &mut TxContext) {\n    // Only the house address can update the min stake.\n    assert!(ctx.sender() == house_data.house(), ECallerNotHouse);\n\n    house_data.min_stake = min_stake;\n}\n\n// === Public-View Functions ===\n\n/// Returns the balance of the house.\npublic fun balance(house_data: &HouseData): u64 {\n    house_data.balance.value()\n}\n\n/// Returns the address of the house.\npublic fun house(house_data: &HouseData): address {\n    house_data.house\n}\n\n/// Returns the public key of the house.\npublic fun public_key(house_data: &HouseData): vector<u8> {\n    house_data.public_key\n}\n\n/// Returns the max stake of the house.\npublic fun max_stake(house_data: &HouseData): u64 {\n    house_data.max_stake\n}\n\n/// Returns the min stake of the house.\npublic fun min_stake(house_data: &HouseData): u64 {\n    house_data.min_stake\n}\n\n/// Returns the fees of the house.\npublic fun fees(house_data: &HouseData): u64 {\n    house_data.fees.value()\n}\n\n/// Returns the base fee.\npublic fun base_fee_in_bp(house_data: &HouseData): u16 {\n    house_data.base_fee_in_bp\n}\n\n/// Returns the multiplier vector\npublic fun multiplier(house_data: &HouseData): vector<u64> {\n    house_data.multiplier\n}\n\n// === Public-Friend Functions ===\n\n/// Returns a reference to the house id.\npublic(package) fun borrow(house_data: &HouseData): &UID {\n    &house_data.id\n}\n\n    /// Returns a mutable reference to the balance of the house.\npublic(package) fun borrow_balance_mut(house_data: &mut HouseData): &mut Balance<SUI> {\n    &mut house_data.balance\n}\n\n/// Returns a mutable reference to the fees of the house.\npublic(package) fun borrow_fees_mut(house_data: &mut HouseData): &mut Balance<SUI> {\n    &mut house_data.fees\n}\n\n/// Returns a mutable reference to the house id.\npublic(package) fun borrow_mut(house_data: &mut HouseData): &mut UID {\n    &mut house_data.id\n}\n\n// === Private Functions ===\n\nfun set_multiplier_vector(house_data: &mut HouseData, v: vector<u64>) {\n    house_data.multiplier.append(v);\n}\n\n// === Test Functions ===\n\n#[test_only]\npublic fun init_for_testing(ctx: &mut TxContext) {\n    init(HOUSE_DATA {}, ctx);\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Option do Macro in Move\nDESCRIPTION: Macro that destroys an Option<T> and calls a closure on its value if Some. Takes an Option<T> and a closure, executes the closure if the option contains a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_19\n\nLANGUAGE: move\nCODE:\n```\npublic macro fun do<$T, $R: drop>($o: Option<$T>, $f: |$T| -> $R) {\n    let o = $o;\n    if (o.is_some()) { $f(o.destroy_some()); } else o.destroy_none()\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration Setting for Next Epoch in Move\nDESCRIPTION: This function reads a configuration setting for the next epoch. It returns an Option containing the value if it exists, or None if the setting doesn't exist.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/config.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun read_setting_for_next_epoch<\n    WriteCap,\n    Name: copy + drop + store,\n    Value: copy + drop + store,\n>(\n    config: &Config<WriteCap>,\n    name: Name,\n): Option<Value> {\n    if (!field::exists_with_type<_, Setting<Value>>(&config.id, name)) return option::none();\n    let sobj: &Setting<Value> = field::borrow(&config.id, name);\n    let data = sobj.data.borrow();\n    data.newer_value\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Cancellation in DeepBookV3 with TypeScript\nDESCRIPTION: Complete implementation for canceling a specific order, with function definition and example usage. Shows how to cancel an order by its ID in a specific pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/orders.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n  * @description Cancel an existing order\n  * @param {string} poolKey The key to identify the pool\n  * @param {string} balanceManagerKey The key to identify the BalanceManager\n  * @param {number} orderId Order ID to cancel\n  * @returns A function that takes a Transaction object\n  */\ncancelOrder = (\n  poolKey: string, \n  balanceManagerKey: string, \n  orderId: number\n) => (tx: Transaction) => {}\n\n// Example usage in DeepBookMarketMaker class\n// Cancel order 12345678 in SUI_DBUSDC pool\ncancelOrder = (tx: Transaction) => {\n  const poolKey = 'SUI_DBUSDC'; // Pool key, check constants.ts for more\n  const managerKey = 'MANAGER_1'; // Balance manager key, initialized during client creation by user\n  tx.add(this.deepBook.cancelOrder(poolKey, managerKey, 12345678));\n};\n```\n\n----------------------------------------\n\nTITLE: Stake and Validator Lifecycle Functions\nDESCRIPTION: Functions for managing validator stakes, adding/removing validators, reporting validators, and handling stake-related operations in the Sui blockchain system\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun request_add_stake\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun request_withdraw_stake\n```\n\n----------------------------------------\n\nTITLE: Checking if Any Element Satisfies a Predicate in Sui Move\nDESCRIPTION: A macro function that returns true if any element in the vector satisfies the provided predicate function. If the vector is empty, it returns false. It short-circuits and returns true as soon as an element is found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_27\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun any<$T>($v: &vector<$T>, $f: |&$T| -> bool): bool {\n    let v = $v;\n    'any: {\n        v.do_ref!(|e| if ($f(e)) return 'any true);\n        false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing BridgeMessage in Rust\nDESCRIPTION: Serializes a BridgeMessage struct into a vector of bytes. It includes message type, version, sequence number, source chain, and payload.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_9\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun serialize_message(message: BridgeMessage): vector<u8> {\n    let BridgeMessage {\n        message_type,\n        message_version,\n        seq_num,\n        source_chain,\n        payload\n    } = message;\n    let mut message = vector[\n        message_type,\n        message_version,\n    ];\n    // bcs serializes u64 as 8 bytes\n    message.append(reverse_bytes(bcs::to_bytes(&seq_num)));\n    message.push_back(source_chain);\n    message.append(payload);\n    message\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Bridge Limit in Sui\nDESCRIPTION: This function updates the bridge limit for a specific route between chains. It verifies the receiving chain and updates the limit in the bridge's limiter.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\nfun execute_update_bridge_limit(inner: &mut BridgeInner, payload: UpdateBridgeLimit) {\n    let receiving_chain = payload.update_bridge_limit_payload_receiving_chain();\n    assert!(receiving_chain == inner.chain_id, EUnexpectedChainID);\n    let route = chain_ids::get_route(\n        payload.update_bridge_limit_payload_sending_chain(),\n        receiving_chain\n    );\n    inner.limiter.update_route_limit(\n        &route,\n        payload.update_bridge_limit_payload_limit()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Game Struct for Owned Implementation\nDESCRIPTION: Defines the core Game struct for the centralized admin version of Tic-Tac-Toe, including the game board state and player information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/tic-tac-toe.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nstruct Game has key {\n    id: UID,\n    board: vector<u8>,\n    x_addr: address,\n    o_addr: address,\n    next_is_x: bool,\n    admin: address,\n}\n```\n\n----------------------------------------\n\nTITLE: Converting UID to Bytes in Move\nDESCRIPTION: Gets the raw bytes of a UID. This function serializes the UID's inner ID to bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun uid_to_bytes(uid: &UID): vector<u8> {\n    bcs::to_bytes(&uid.id.bytes)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upgrade Ticket Package in Move\nDESCRIPTION: Gets the package that the UpgradeTicket is authorized to upgrade.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun ticket_package(ticket: &UpgradeTicket): ID {\n    ticket.package\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer Policy Management\nDESCRIPTION: Structures and functions for managing transfer policies, including creation, modification, and rule management.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_38\n\nLANGUAGE: move\nCODE:\n```\npublic struct TransferPolicy\npublic struct TransferPolicyCap\npublic struct TransferPolicyCreated\npublic struct TransferPolicyDestroyed\npublic struct RuleKey\npublic fun new_request\npublic fun new\npublic fun default\n```\n\n----------------------------------------\n\nTITLE: Macro for Configuration Entry in Move\nDESCRIPTION: This macro function provides an entry point for configuration settings. It checks if a setting exists, initializes it if not, and returns a mutable reference to the value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/config.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) macro fun entry<$WriteCap, $Name: copy + drop + store, $Value: copy + drop + store>(\n    $config: &mut Config<$WriteCap>,\n    $cap: &mut $WriteCap,\n    $name: $Name,\n    $initial_for_next_epoch: |&mut Config<$WriteCap>, &mut $WriteCap, &mut TxContext| -> $Value,\n    $ctx: &mut TxContext,\n): &mut $Value {\n    let config = $config;\n    let cap = $cap;\n    let name = $name;\n    let ctx = $ctx;\n    if (!config.exists_with_type_for_next_epoch<_, _, $Value>(name, ctx)) {\n        let initial = $initial_for_next_epoch(config, cap, ctx);\n        config.add_for_next_epoch(cap, name, initial, ctx);\n    };\n    config.borrow_for_next_epoch_mut(cap, name, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Negating BLS12-381 Scalar Element\nDESCRIPTION: Computes the additive inverse of a BLS12-381 scalar element by subtracting it from zero.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun scalar_neg(e: &Element<Scalar>): Element<Scalar> {\n    scalar_sub(&scalar_zero(), e)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting BLS12-381 G1 Identity Element\nDESCRIPTION: Returns the identity element of the BLS12-381 G1 group.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun g1_identity(): Element<G1> {\n    let identity = G1_IDENTITY_BYTES;\n    group_ops::from_bytes(G1_TYPE, &identity, true)\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Required Element Index in VecSet\nDESCRIPTION: A function that searches for a key in a VecSet and returns its index. Aborts with EKeyDoesNotExist if the key is not found. Uses get_idx_opt internally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_set.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\nfun get_idx<K: copy + drop>(self: &VecSet<K>, key: &K): u64 {\n    let idx_opt = get_idx_opt(self, key);\n    assert!(idx_opt.is_some(), EKeyDoesNotExist);\n    idx_opt.destroy_some()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Option map Macro in Move\nDESCRIPTION: Macro that maps an Option<T> to Option<U> by applying a function to the contained value. Equivalent to Rust's map() method.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_25\n\nLANGUAGE: move\nCODE:\n```\npublic macro fun map<$T, $U>($o: Option<$T>, $f: |$T| -> $U): Option<$U> {\n    let o = $o;\n    if (o.is_some()) {\n        some($f(o.destroy_some()))\n    } else {\n        o.destroy_none();\n        none()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling All Open Orders in DeepBook CLOB V2 Pool\nDESCRIPTION: This function cancels all open orders for a user in a specific trading pool. It retrieves all order IDs associated with the user, removes each order from the order book, unlocks the corresponding assets in the custodian, and emits cancellation events. The function handles both bid and ask orders appropriately.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_33\n\nLANGUAGE: Move\nCODE:\n```\npublic fun cancel_all_orders<BaseAsset, QuoteAsset>(\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    account_cap: &AccountCap\n) {\n    let pool_id = *object::uid_as_inner(&pool.id);\n    let owner = account_owner(account_cap);\n    assert!(contains(&pool.usr_open_orders, owner), EInvalidUser);\n    let usr_open_order_ids = table::borrow_mut(&mut pool.usr_open_orders, owner);\n    let mut canceled_order_events = vector[];\n    while (!linked_table::is_empty(usr_open_order_ids)) {\n        let order_id = *option::borrow(linked_table::back(usr_open_order_ids));\n        let order_price = *linked_table::borrow(usr_open_order_ids, order_id);\n        let is_bid = order_is_bid(order_id);\n        let open_orders =\n            if (is_bid) { &mut pool.bids }\n            else { &mut pool.asks };\n        let (_, tick_index) = critbit::find_leaf(open_orders, order_price);\n        let order = remove_order(\n            open_orders,\n            usr_open_order_ids,\n            tick_index,\n            order_id,\n            owner\n        );\n        if (is_bid) {\n            let (_, balance_locked) = clob_math::unsafe_mul_round(order.quantity, order.price);\n            custodian::unlock_balance(&mut pool.quote_custodian, owner, balance_locked);\n        } else {\n            custodian::unlock_balance(&mut pool.base_custodian, owner, order.quantity);\n        };\n        let canceled_order_event = AllOrdersCanceledComponent<BaseAsset, QuoteAsset> {\n            client_order_id: order.client_order_id,\n            order_id: order.order_id,\n            is_bid: order.is_bid,\n            owner: order.owner,\n            original_quantity: order.original_quantity,\n            base_asset_quantity_canceled: order.quantity,\n            price: order.price\n        };\n        vector::push_back(&mut canceled_order_events, canceled_order_event);\n    };\n    if (!vector::is_empty(&canceled_order_events)) {\n        event::emit(AllOrdersCanceled<BaseAsset, QuoteAsset> {\n            pool_id,\n            orders_canceled: canceled_order_events,\n        });\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Smart Contracts\nDESCRIPTION: Commands to publish smart contracts and generate demo data for testing purposes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ npx ts-node helpers/publish-contracts.ts\n$ npx ts-node helpers/create-demo-data.ts\n$ npx ts-node helpers/create-demo-escrows.ts\n```\n\n----------------------------------------\n\nTITLE: Destroying Empty Tokens in Sui Framework (Rust)\nDESCRIPTION: This function destroys a token only if its balance is zero. It aborts the operation if the balance is not zero and ensures that the token's ID is deleted after destruction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_17\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun destroy_zero<T>(token: sui::token::Token<T>) {\n    let Token { id, balance } = token;\n    assert!(balance.value() == 0, ENotZero);\n    balance.destroy_zero();\n    id.delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Coin Keep Function\nDESCRIPTION: Transfers a coin to the sender of the current transaction\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/pay.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun keep<T>(c: Coin<T>, ctx: &TxContext) {\n    transfer::public_transfer(c, ctx.sender())\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Pause for Coin Type in Move\nDESCRIPTION: Disables the global pause for a given coin type, allowing all addresses to resume using objects of this coin type as inputs. Receiving objects remains paused until the next epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_29\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deny_list_v2_disable_global_pause<T>(\n    deny_list: &mut DenyList,\n    deny_cap: &mut DenyCapV2<T>,\n    ctx: &mut TxContext,\n) {\n    assert!(deny_cap.allow_global_pause, EGlobalPauseNotAllowed);\n    let ty = type_name::get_with_original_ids<T>().into_string().into_bytes();\n    deny_list.v2_disable_global_pause(DENY_LIST_COIN_INDEX, ty, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ASCII Character Structure in Move\nDESCRIPTION: Definition of the Char struct that represents a single ASCII character. The struct has copy, drop, and store abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic struct Char has copy, drop, store {\n    byte: u8\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Staking Pool - Move\nDESCRIPTION: This function creates a new, empty staking pool with initial parameters such as activation epoch, balance, and other fields. It requires a mutable transaction context passed as a parameter.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun new(ctx: &mut sui::tx_context::TxContext): sui_system::staking_pool::StakingPool {\n    sui_system::staking_pool::StakingPool {\n        id: object::new(ctx),\n        activation_epoch: option::none(),\n        deactivation_epoch: option::none(),\n        sui_balance: 0,\n        rewards_pool: balance::zero(),\n        pool_token_balance: 0,\n        exchange_rates: table::new(ctx),\n        pending_stake: 0,\n        pending_total_sui_withdraw: 0,\n        pending_pool_token_withdraw: 0,\n        extra_fields: bag::new(ctx),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Imports Move\nDESCRIPTION: This code block describes various imports used in the SUI token module. These imports include both standard and Sui specific modules for operations such as address handling, balance management, configuration settings, and more. The import statements ensure dependencies required for the module's functionality are correctly included.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/sui.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nuse std::address;\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::type_name;\nuse std::vector;\nuse sui::address;\nuse sui::bag;\nuse sui::balance;\nuse sui::coin;\nuse sui::config;\nuse sui::deny_list;\nuse sui::dynamic_field;\nuse sui::dynamic_object_field;\nuse sui::event;\nuse sui::hex;\nuse sui::object;\nuse sui::table;\nuse sui::transfer;\nuse sui::tx_context;\nuse sui::types;\nuse sui::url;\nuse sui::vec_set;\n```\n\n----------------------------------------\n\nTITLE: Implementing Staking Pool in Move for Sui Blockchain\nDESCRIPTION: This code snippet references the implementation of the staking pool in Sui's system-level smart contract. The staking pool is a crucial component of Sui's validator reward system, handling stake management and reward distribution.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nstaking_pool.move\n```\n\n----------------------------------------\n\nTITLE: Implementing GT Multiplication Operation for BLS12-381 in Move\nDESCRIPTION: Multiplies a scalar by a GT group element in the BLS12-381 curve. This function uses the group_ops module to perform scalar multiplication on an element of the GT group.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_40\n\nLANGUAGE: Move\nCODE:\n```\npublic fun gt_mul(e1: &Element<Scalar>, e2: &Element<GT>): Element<GT> {\n    group_ops::mul(GT_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Sui Bag Length (Move)\nDESCRIPTION: Implements the 'length' function to return the number of key-value pairs in the bag. It simply returns the 'size' field of the Bag struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bag.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun length(bag: &Bag): u64 {\n    bag.size\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Epoch Timestamp\nDESCRIPTION: Returns the epoch start time as a Unix timestamp in milliseconds.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/tx_context.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun epoch_timestamp_ms(_self: &TxContext): u64 {\n    native_epoch_timestamp_ms()\n}\n```\n\n----------------------------------------\n\nTITLE: Integer Square Root Implementation for u64 in Move\nDESCRIPTION: Calculates the nearest lower integer square root for a u64 value using the standard library's square root implementation. For non-perfect squares, returns the floor of the actual square root.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sqrt(x: u64): u64 {\n    std::macros::num_sqrt!<u64, u128>(x, 64)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining zip_map Macro for Vector Element Transformation\nDESCRIPTION: This macro combines two vectors by applying a specified function to each pair of elements, producing a new vector with the results. If the input vectors have differing lengths, the process will abort. It also preserves the original order of the vectors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_29\n\nLANGUAGE: Rust\nCODE:\n```\n\"public macro fun zip_map<$T1, $T2, $U>($v1: vector<$T1>, $v2: vector<$T2>, $f: |$T1, $T2| -> $U): vector<$U> {\\n    let mut r = vector[];\\n    zip_do!($v1, $v2, |el1, el2| r.push_back($f(el1, el2)));\\n    r\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Define TokenPolicyCreated Struct in Move\nDESCRIPTION: Defines the `TokenPolicyCreated` struct, representing an event emitted when a `TokenPolicy` is created and shared. The event includes the ID of the created `TokenPolicy` and a flag indicating whether the policy is mutable.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>public</b> <b>struct</b> <a href=\\\"../sui/token.md#sui_token_TokenPolicyCreated\\\">TokenPolicyCreated</a>&lt;<b>phantom</b> T&gt; <b>has</b> <b>copy</b>, drop\\n\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Validator Primary Address\nDESCRIPTION: Function to retrieve the primary address from a Validator's metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_51\n\nLANGUAGE: Move\nCODE:\n```\npublic fun primary_address(self: &Validator): &String {\n    &self.metadata.primary_address\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Child Object in Move\nDESCRIPTION: This native function removes a child object from a parent object. It may throw EFieldDoesNotExist or EFieldTypeMismatch errors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) native fun remove_child_object<Child: key>(parent: address, id: address): Child;\n```\n\n----------------------------------------\n\nTITLE: Adding Rule for Token Action in Move\nDESCRIPTION: Adds a Rule for an action with a given name in the TokenPolicy. Aborts if the TokenPolicyCap doesn't match the TokenPolicy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add_rule_for_action<T, Rule: drop>(\n    self: &mut TokenPolicy<T>,\n    cap: &TokenPolicyCap<T>,\n    action: String,\n    ctx: &mut TxContext,\n) {\n    assert!(object::id(self) == cap.for, ENotAuthorized);\n    if (!self.rules.contains(&action)) {\n        allow(self, cap, action, ctx);\n    };\n    self.rules.get_mut(&action).insert(type_name::get<Rule>())\n}\n```\n\n----------------------------------------\n\nTITLE: Balance Management Functions\nDESCRIPTION: Collection of functions to manage user available and locked balances including increase and decrease operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun increase_user_available_balance<T>(\n    custodian: &mut Custodian<T>,\n    owner: address,\n    quantity: Balance<T>,\n) {\n    let account = borrow_mut_account_balance<T>(custodian, owner);\n    balance::join(&mut account.available_balance, quantity);\n}\n\npublic(package) fun decrease_user_available_balance<T>(\n    custodian: &mut Custodian<T>,\n    account_cap: &AccountCap,\n    quantity: u64,\n): Balance<T> {\n    let account = borrow_mut_account_balance<T>(custodian, account_cap.owner);\n    balance::split(&mut account.available_balance, quantity)\n}\n\npublic(package) fun increase_user_locked_balance<T>(\n    custodian: &mut Custodian<T>,\n    account_cap: &AccountCap,\n    quantity: Balance<T>,\n) {\n    let account = borrow_mut_account_balance<T>(custodian, account_cap.owner);\n    balance::join(&mut account.locked_balance, quantity);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing is_some_and Macro Function in Sui Move\nDESCRIPTION: A macro function that returns false if the value is None, otherwise returns the result of applying the predicate function to the value. This allows testing a condition on an Option value without explicit unwrapping.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_23\n\nLANGUAGE: sui-move\nCODE:\n```\npublic macro fun is_some_and<$T>($o: &Option<$T>, $f: |&$T| -> bool): bool {\n    let o = $o;\n    o.is_some() && $f(o.borrow())\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Display Field - Move\nDESCRIPTION: Modifies an existing field's value in the Display object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun edit<T: key>(self: &mut Display<T>, name: String, value: String) {\n    let (_, _) = self.fields.remove(&name);\n    self.add_internal(name, value)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Multisig Game Transaction\nDESCRIPTION: Method to create a new multisig game transaction by generating an admin multisig public key and initializing game parameters. The transaction includes move calls and object transfers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/tic-tac-toe.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnewMultiSigGame(player: PublicKey, opponent: PublicKey): Transaction {\n  const admin = multiSigPublicKey([player, opponent]);\n  const tx = new Transaction();\n\n  const game = tx.moveCall({\n    target: `${this.packageId}::owned::new`,\n    arguments: [\n      tx.pure.address(player.toSuiAddress()),\n      tx.pure.address(opponent.toSuiAddress()),\n      tx.pure(bcs.vector(bcs.u8()).serialize(admin.toRawBytes()).toBytes()),\n    ],\n  });\n\n  tx.transferObjects([game], admin.toSuiAddress());\n\n  return tx;\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Option with Default in Sui Move\nDESCRIPTION: Destroys the option. If it holds a value, returns it; otherwise, returns the provided default value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_with_default<Element: drop>(t: Option<Element>, default: Element): Element {\n    let Option { mut vec } = t;\n    if (vec.is_empty()) default else vec.pop_back()\n}\n```\n\n----------------------------------------\n\nTITLE: Converting UQ64_64 to Integer in Move\nDESCRIPTION: Converts a UQ64_64 fixed-point number to an integer, truncating any fractional part.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_int(a: UQ64_64): u64 {\n    std::macros::uq_to_int!(a.0, FRACTIONAL_BITS)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ticket Digest Function in Move\nDESCRIPTION: This function computes a hash of the package contents for the new version based on a provided UpgradeTicket. It returns the digest associated with the ticket.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic fun ticket_digest(ticket: &UpgradeTicket): &vector<u8> {\n    &ticket.digest\n}\n```\n\n----------------------------------------\n\nTITLE: Removing from Deny List in Sui Coin\nDESCRIPTION: This function removes an address from the deny list. The changes take effect immediately for transaction inputs, while reception permissions will be effective starting the next epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_25\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deny_list_v2_remove<T>(deny_list: &mut sui::deny_list::DenyList, _deny_cap: &mut sui::coin::DenyCapV2<T>, addr: address, ctx: &mut sui::tx_context::TxContext) {\n    let ty = type_name::get_with_original_ids<T>().into_string().into_bytes();\n    deny_list.v2_remove(DENY_LIST_COIN_INDEX, ty, addr, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Mint Token Function in Move\nDESCRIPTION: Mints new tokens of a specified type and amount using the treasury cap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/treasury.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun mint<T>(\n    self: &mut BridgeTreasury,\n    amount: u64,\n    ctx: &mut TxContext,\n): Coin<T> {\n    let treasury = &mut self.treasuries[type_name::get<T>()];\n    coin::mint(treasury, amount, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Appending ASCII Strings in Move\nDESCRIPTION: Appends one string to another. Takes a mutable reference to the target string and consumes the other string to be appended.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun append(string: &mut String, other: String) {\n    string.bytes.append(other.into_bytes())\n}\n```\n\n----------------------------------------\n\nTITLE: Peeling Option Bool with Sui BCS in Move\nDESCRIPTION: The function `peel_option_bool` deserializes a serialized byte array to an `Option<bool>`. It utilizes Sui BCS's `peel_option` method to handle the extraction, requiring the `sui::bcs::BCS` reference and using the `peel_bool` function for the bool type. The function returns an optional bool, managing scenarios where the boolean value might be null.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bcs.md#sui_bcs_peel_option_bool\">peel_option_bool</a>(<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>: &<b>mut</b> <a href=\"../sui/bcs.md#sui_bcs_BCS\">BCS</a>): Option&lt;bool&gt; {\n    <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_option\">peel_option</a>!(|<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>| <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_bool\">peel_bool</a>())\n}\n```\n\n----------------------------------------\n\nTITLE: Secp256k1 Recoverable Signature Verification\nDESCRIPTION: Generate and verify Secp256k1 recoverable signatures using CLI and Move contract\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/signing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntarget/debug/sigs-cli keygen --scheme secp256k1-rec --seed 0000000000000000000000000000000000000000000000000000000000000000\ntarget/debug/sigs-cli sign --scheme secp256k1-rec --msg $MSG --secret-key $SK\n```\n\nLANGUAGE: move\nCODE:\n```\n    use sui::ecdsa_k1;\n\n    let msg = x\"$MSG\";\n    let pk = x\"$PK\";\n    let sig = x\"$SIG\";\n    let recovered = ecdsa_k1::secp256k1_ecrecover(&sig, &msg, 1);\n    assert!(pk == recovered, 0);\n```\n\n----------------------------------------\n\nTITLE: Defining SuiSystemState Structure in Move\nDESCRIPTION: Definition of the SuiSystemState structure which serves as the main container for the Sui blockchain's system state. It has a UID for object identification and a version field to track the system state version.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct SuiSystemState has key {\n    id: sui::object::UID,\n    version: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Duplicate Validators in Sui System\nDESCRIPTION: This function checks if two validator objects are duplicates by comparing their address, name, network addresses, and cryptographic keys. It performs a comprehensive check on both current and next epoch parameters to ensure uniqueness in the validator set.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_71\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_duplicate(self: &Validator, other: &Validator): bool {\n    let self = &self.metadata;\n    let other = &other.metadata;\n    self.sui_address == other.sui_address\n        || self.name == other.name\n        || self.net_address == other.net_address\n        || self.p2p_address == other.p2p_address\n        || self.protocol_pubkey_bytes == other.protocol_pubkey_bytes\n        || self.network_pubkey_bytes == other.network_pubkey_bytes\n        || self.network_pubkey_bytes == other.worker_pubkey_bytes\n        || self.worker_pubkey_bytes == other.worker_pubkey_bytes\n        || self.worker_pubkey_bytes == other.network_pubkey_bytes\n        // All next epoch parameters.\n        || both_some_and_equal!(self.next_epoch_net_address, other.next_epoch_net_address)\n        || both_some_and_equal!(self.next_epoch_p2p_address, other.next_epoch_p2p_address)\n        || both_some_and_equal!(self.next_epoch_protocol_pubkey_bytes, other.next_epoch_protocol_pubkey_bytes)\n        || both_some_and_equal!(self.next_epoch_network_pubkey_bytes, other.next_epoch_network_pubkey_bytes)\n        || both_some_and_equal!(self.next_epoch_network_pubkey_bytes, other.next_epoch_worker_pubkey_bytes)\n        || both_some_and_equal!(self.next_epoch_worker_pubkey_bytes, other.next_epoch_worker_pubkey_bytes)\n        || both_some_and_equal!(self.next_epoch_worker_pubkey_bytes, other.next_epoch_network_pubkey_bytes)\n        // My next epoch parameters with other current epoch parameters.\n        || self.next_epoch_net_address.is_some_and!(|v| v == other.net_address)\n        || self.next_epoch_p2p_address.is_some_and!(|v| v == other.p2p_address)\n        || self.next_epoch_protocol_pubkey_bytes.is_some_and!(|v| v == other.protocol_pubkey_bytes)\n        || self.next_epoch_network_pubkey_bytes.is_some_and!(|v| v == other.network_pubkey_bytes)\n        || self.next_epoch_network_pubkey_bytes.is_some_and!(|v| v == other.worker_pubkey_bytes)\n        || self.next_epoch_worker_pubkey_bytes.is_some_and!(|v| v == other.worker_pubkey_bytes)\n        || self.next_epoch_worker_pubkey_bytes.is_some_and!(|v| v == other.network_pubkey_bytes)\n        // Other next epoch parameters with my current epoch parameters.\n        || other.next_epoch_net_address.is_some_and!(|v| v == self.net_address)\n        || other.next_epoch_p2p_address.is_some_and!(|v| v == self.p2p_address)\n        || other.next_epoch_protocol_pubkey_bytes.is_some_and!(|v| v == self.protocol_pubkey_bytes)\n        || other.next_epoch_network_pubkey_bytes.is_some_and!(|v| v == self.network_pubkey_bytes)\n        || other.next_epoch_network_pubkey_bytes.is_some_and!(|v| v == self.worker_pubkey_bytes)\n        || other.next_epoch_worker_pubkey_bytes.is_some_and!(|v| v == self.worker_pubkey_bytes)\n        || other.next_epoch_worker_pubkey_bytes.is_some_and!(|v| v == self.network_pubkey_bytes)\n}\n```\n\n----------------------------------------\n\nTITLE: Withdraw Asset Function\nDESCRIPTION: Allows withdrawal of assets from available balance using an account capability token.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun withdraw_asset<Asset>(\n    custodian: &mut Custodian<Asset>,\n    quantity: u64,\n    account_cap: &AccountCap,\n    ctx: &mut TxContext\n): Coin<Asset> {\n    coin::from_balance(decrease_user_available_balance<Asset>(custodian, account_cap, quantity), ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Object Outside Module in Sui Move\nDESCRIPTION: Enables receiving an object with 'store' capability outside its defining module. Requires mutable access to the parent object and the object must have the 'store' permission.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun public_receive<T: key + store>(parent: &mut UID, to_receive: Receiving<T>): T {\n    let Receiving { id, version } = to_receive;\n    receive_impl(parent.to_address(), id, version)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting PTB Bytes and Rebuilding Transaction\nDESCRIPTION: This snippet demonstrates how to get the bytes of a Programmable Transaction Block (PTB) and how to rebuild a transaction from PTB bytes. It's useful for scenarios where you need to work with the raw transaction data.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = new Transaction();\n\n// ... add some transactions...\n\nawait tx.build({ provider });\n\nconst bytes = getTransactionBytesFromSomewhere();\nconst tx = Transaction.from(bytes);\n```\n\n----------------------------------------\n\nTITLE: Creating Next Committee in Move\nDESCRIPTION: Attempts to create a new committee based on validator voting power and minimum stake participation requirements. Includes validation of member registrations and voting power calculations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun try_create_next_committee(\n    self: &mut BridgeCommittee,\n    active_validator_voting_power: VecMap<address, u64>,\n    min_stake_participation_percentage: u64,\n    ctx: &TxContext\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing push_front for LinkedTable in Move\nDESCRIPTION: Inserts a key-value pair at the front of the LinkedTable. Handles both empty and non-empty table cases by updating head/tail pointers appropriately. Aborts if key already exists.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun push_front<K: copy + drop + store, V: store>(\n    table: &mut LinkedTable<K, V>,\n    k: K,\n    value: V,\n) {\n    let old_head = table.head.swap_or_fill(k);\n    if (table.tail.is_none()) table.tail.fill(k);\n    let prev = option::none();\n    let next = if (old_head.is_some()) {\n        let old_head_k = old_head.destroy_some();\n        field::borrow_mut<K, Node<K, V>>(&mut table.id, old_head_k).prev = option::some(k);\n        option::some(old_head_k)\n    } else {\n        option::none()\n    };\n    field::add(&mut table.id, k, Node { prev, next, value });\n    table.size = table.size + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Rule Existence in SUI Transfer Policy - Move\nDESCRIPTION: The `has_rule` function checks if a particular rule is present within a TransferPolicy. It depends on the TransferPolicy module, taking a TransferPolicy reference and returning a boolean status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_22\n\nLANGUAGE: move\nCODE:\n```\npublic fun has_rule<T, Rule: drop>(policy: &sui::transfer_policy::TransferPolicy<T>): bool\n```\n\nLANGUAGE: move\nCODE:\n```\npublic fun has_rule<T, Rule: drop>(policy: &TransferPolicy<T>): bool {\n    df::exists_(&policy.id, RuleKey<Rule> {})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TickLevel Structure - Move\nDESCRIPTION: Structure definition for individual price levels in the order book containing price and open orders.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TickLevel has store {\n    price: u64,\n    open_orders: sui::linked_table::LinkedTable<u64, deepbook::clob_v2::Order>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding BLS12-381 G1 Elements\nDESCRIPTION: Performs addition of two BLS12-381 G1 group elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\npublic fun g1_add(e1: &Element<G1>, e2: &Element<G1>): Element<G1> {\n    group_ops::add(G1_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Building a Sui Project\nDESCRIPTION: Commands to create a new Sui project named 'Foo' in the current directory and build it.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/simple_build_with_docs/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnew --path . Foo\nbuild\n```\n\n----------------------------------------\n\nTITLE: Converting UTF-8 to ASCII String\nDESCRIPTION: Function that converts a UTF-8 string to an ASCII string, which will abort if the string contains non-ASCII characters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_ascii(s: String): ascii::String {\n    let String { bytes } = s;\n    bytes.to_ascii_string()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Modular Pass Rule in Move\nDESCRIPTION: Shows implementation of a modular Pass rule with verification functionality. The rule includes a verify function that takes TokenPolicy, ActionRequest, and TxContext as arguments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/rules.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule example::pass_rule {\n    use sui::tx_context;\n    use sui::token::{Self, ActionRequest, TokenPolicy};\n\n    /// The Rule type\n    struct Pass has drop {}\n\n    /// Add approval from the Pass rule to the ActionRequest\n    public fun verify<T>(\n        _policy: &TokenPolicy<T>,\n        action_request: &mut ActionRequest<T>,\n        ctx: &mut TxContext,\n    ) {\n        // ...\n        token::add_approval(Pass {}, action_request, ctx)\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing Dynamic Field in Move\nDESCRIPTION: This function removes a dynamic field from a Sui object and returns its value. It aborts if the field doesn't exist or if there's a type mismatch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove<Name: copy + drop + store, Value: store>(object: &mut UID, name: Name): Value {\n    let object_addr = object.to_address();\n    let hash = hash_type_and_key(object_addr, name);\n    let Field { id, name: _, value } = remove_child_object<Field<Name, Value>>(object_addr, hash);\n    id.delete();\n    value\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Check - Move\nDESCRIPTION: Verifies if a Publisher is authorized to modify the Display object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_authorized<T: key>(pub: &Publisher): bool {\n    pub.from_package<T>()\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Submission Process in Sui\nDESCRIPTION: Initial stage of transaction creation where a user signs a transaction to mutate objects they own or shared objects\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-architecture/transaction-lifecycle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. User creates and signs a transaction\n2. Transaction sent to validators\n3. Validators perform validity and safety checks\n4. Validators sign the transaction\n```\n\n----------------------------------------\n\nTITLE: Peeling Option U32 with Sui BCS in Move\nDESCRIPTION: `peel_option_u32` function interprets serialized byte streams to yield an `Option<u32>`. Sui BCS’s `peel_option` is pivotal, extracting the u32 data via `peel_u32`, with the mutable BCS necessary for processing. This function optimally addresses scenarios where u32 might not be present.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bcs.md#sui_bcs_peel_option_u32\">peel_option_u32</a>(<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>: &<b>mut</b> <a href=\"../sui/bcs.md#sui_bcs_BCS\">BCS</a>): Option&lt;u32&gt; {\n    <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_option\">peel_option</a>!(|<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>| <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_u32\">peel_u32</a>())\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Variable\nDESCRIPTION: This snippet shows a GraphQL query that uses a variable `$epochID` of type `Int` to dynamically specify the epoch ID.  The variable is used in the `epoch(id: $epochID)` part of the query to retrieve the `referenceGasPrice` for the specified epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/graphql-rpc.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($epochID: Int) {\n  epoch(id: $epochID) {\n    referenceGasPrice\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Burning Coins in Move\nDESCRIPTION: Function signature for burning existing coins in Sui. Requires TreasuryCap capability and the coin to burn. Returns the burned amount and updates total supply.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/coin.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun burn<T>(cap: &mut TreasuryCap<T>, c: Coin<T>): u64\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Book Information in DeepBook API\nDESCRIPTION: Describes the response format for the orderbook endpoint, which returns bids and asks for a specific pool. The response includes a timestamp and arrays of bid and ask prices and quantities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"timestamp\": \"string\",\n\t\"bids\": [\n\t\t[\n\t\t\t\"string\",\n\t\t\t\"string\"\n\t\t],\n\t\t[\n\t\t\t\"string\",\n\t\t\t\"string\"\n\t\t]\n\t],\n\t\"asks\": [\n\t\t[\n\t\t\t\"string\",\n\t\t\t\"string\"\n\t\t],\n\t\t[\n\t\t\t\"string\",\n\t\t\t\"string\"\n\t\t]\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating u64 in range with Sui RandomGenerator - Move\nDESCRIPTION: The function generates a random u64 in the [min, max] range with a bias of 2^{-64} using sui::random::uint_in_range. It takes a mutable RandomGenerator, min, and max and utilizes uint_in_range for bias control to return a u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun generate_u64_in_range(g: &mut sui::random::RandomGenerator, min: u64, max: u64): u64 {\n    uint_in_range!(g, min, max, 16)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorEpochInfoEventV2 Structure in Move\nDESCRIPTION: This version of the ValidatorEpochInfoEvent adds additional fields to provide enhanced information regarding the validator, such as voting power. It serves to provide a more comprehensive understanding of validator performance metrics during an epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\n<pre><code><b>public</b> <b>struct</b> <a href=\"../sui_system/validator_set.md#sui_system_validator_set_ValidatorEpochInfoEventV2\">ValidatorEpochInfoEventV2</a> <b>has</b> <b>copy</b>, drop\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Validators from ValidatorSet in Move\nDESCRIPTION: Implementation of active_validators function that returns a reference to the active validators in the ValidatorSet.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_59\n\nLANGUAGE: Move\nCODE:\n```\npublic fun active_validators(self: &ValidatorSet): &vector<Validator> {\n    &self.active_validators\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Protected Functions in a Permissioned Kiosk App\nDESCRIPTION: This example shows how a permissioned Kiosk app can access protected functions like place after being granted appropriate permissions. It includes permission verification using can_place before attempting the operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk-apps.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nmodule examples::letterbox_ext;\n// ...\n\n/// Emitted when trying to place an item without permissions.\nconst ENotEnoughPermissions: u64 = 1;\n\n/// Place a letter into the kiosk without the `KioskOwnerCap`.\npublic fun place(kiosk: &mut Kiosk, letter: Letter, policy: &TransferPolicy<T>) {\n    assert!(kiosk_extension::can_place<Extension>(kiosk), ENotEnoughPermissions)\n\n    kiosk_extension::place(Extension {}, kiosk, letter, policy)\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Value with Default from Option in Move\nDESCRIPTION: Function to borrow a reference to the value inside an Option, returning a default reference if the Option is None.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow_with_default<Element>(t: &Option<Element>, default_ref: &Element): &Element {\n    let vec_ref = &t.vec;\n    if (vec_ref.is_empty()) default_ref else &vec_ref[0]\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Borrowed Rentable Item - Move\nDESCRIPTION: The 'return_val' function enables a borrower to return a 'Rentable' item, ensuring it is accurately placed back in the specified kiosk according to associated metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_15\n\nLANGUAGE: move\nCODE:\n```\npublic fun return_val<T: key + store>(\n  kiosk: &mut Kiosk,\n  object: T,\n  promise: Promise,\n  _ctx: &mut TxContext,\n) {\n  assert!(kiosk_extension::is_installed<Rentables>(kiosk), EExtensionNotInstalled);\n\n  let Promise {\n    item,\n    duration,\n    start_date,\n    price_per_day,\n    renter_kiosk,\n    borrower_kiosk,\n  } = promise;\n\n  let kiosk_id = object::id(kiosk);\n  assert!(kiosk_id == borrower_kiosk, EInvalidKiosk);\n\n  let rentable = Rentable {\n    object,\n    duration,\n    start_date: option::some(start_date),\n    price_per_day,\n    kiosk_id: renter_kiosk,\n  };\n\n  place_in_bag(kiosk, item, rentable);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve transaction details using grpcurl in Shell\nDESCRIPTION: The command retrieves transaction details such as 'events' and 'effects' using grpcurl. It takes a JSON input with the 'digest' parameter and returns details from the LedgerService's GetTransaction API. Requires the <full node URL:port>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/grpc-overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ grpcurl -d '{ \"digest\": \"3ByWphQ5sAVojiTrTrGXGM5FmCVzpzYmhsjbhYESJtxp\" }' <full node URL:port> sui.rpc.v2beta.LedgerService/GetTransaction\n```\n\n----------------------------------------\n\nTITLE: Defining FungibleStakedSuiData Struct in Move\nDESCRIPTION: A struct for holding metadata related to fungible staked SUI, including total supply and the principal balance with rewards withdrawn from the reward pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic struct FungibleStakedSuiData has key, store\n{\n    id: sui::object::UID,\n    total_supply: u64,\n    principal: sui::balance::Balance<sui::sui::SUI>\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LOYALTY Token with Policy\nDESCRIPTION: Implementation of the init function that creates the LOYALTY token currency and establishes its policy. The function runs once during package publishing and transfers both policy and treasury capabilities to the publisher.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin/loyalty.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nfun init(otw: LOYALTY, ctx: &mut TxContext) {\n    let (treasury_cap, metadata) = token::create_currency(\n        otw,\n        2,\n        b\"LOYALTY\",\n        b\"LOYALTY\",\n        b\"A loyalty token for a gift shop\",\n        option::none(),\n        ctx\n    );\n    let policies = vector::empty();\n    transfer::public_transfer(treasury_cap, tx_context::sender(ctx));\n    transfer::public_transfer(token::create_policy(&metadata, policies, ctx), tx_context::sender(ctx));\n    transfer::public_share_object(metadata);\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Bytes to Lowercase Hex in Move\nDESCRIPTION: This function encodes a vector of bytes into a lowercase hexadecimal string. It uses a pre-computed vector of hex values for efficient conversion.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/hex.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun encode(bytes: vector<u8>): vector<u8> {\n    let (mut i, mut r, l) = (0, vector[], bytes.length());\n    let hex_vector = HEX;\n    while (i < l) {\n        r.append(hex_vector[bytes[i] as u64]);\n        i = i + 1;\n    };\n    r\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Pause in Sui Coin\nDESCRIPTION: This function enables a global pause on transactions for a specified coin type, immediately preventing any address from using coin objects as inputs and barring reception starting the next epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_28\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deny_list_v2_enable_global_pause<T>(deny_list: &mut sui::deny_list::DenyList, deny_cap: &mut sui::coin::DenyCapV2<T>, ctx: &mut sui::tx_context::TxContext) {\n    assert!(deny_cap.allow_global_pause, EGlobalPauseNotAllowed);\n    let ty = type_name::get_with_original_ids<T>().into_string().into_bytes();\n    deny_list.v2_enable_global_pause(DENY_LIST_COIN_INDEX, ty, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Framework for Escrow Module Testing\nDESCRIPTION: Sets up the test framework with address constants and test_scenario wrapper. This creates the basic structure for testing the escrow module with multiple transaction senders.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\n#[test]\nfun test_successful_swap() {\n    let scenario = test_scenario::begin(@0x0);\n    let ALICE = @0xA;\n    let BOB = @0xB;\n    let DIANE = @0xD;\n    // ... test code ...\n    test_scenario::end(scenario);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Module with Various Components in Move\nDESCRIPTION: Shows a complete example of a Move module with a struct definition, using the standard debug library, defining a constant, and implementing a public function that creates an instance of the struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/modules.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::test {\n    public struct Example has copy, drop { i: u64 }\n\n    use std::debug;\n\n    const ONE: u64 = 1;\n\n    public fun print(x: u64) {\n        let sum = x + ONE;\n        let example = Example { i: sum };\n        debug::print(&sum)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting BLS12-381 G1 Generator Element\nDESCRIPTION: Returns the generator element of the BLS12-381 G1 group.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic fun g1_generator(): Element<G1> {\n    let generator = G1_GENERATOR_BYTES;\n    group_ops::from_bytes(G1_TYPE, &generator, true)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TradeProofs for BalanceManager in Move\nDESCRIPTION: Functions to generate TradeProofs required for balance checking and transfers. Two methods are provided - one for the owner and another for TradeCap holders.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/balance-manager.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun generate_proof_as_owner(self: &BalanceManager, ctx: &TxContext): TradeProof {\n    assert!(self.owner == tx_context::sender(ctx), ENotOwner);\n    TradeProof { for: object::id(self) }\n}\n\npublic fun generate_proof_as_trader(self: &BalanceManager, cap: &TradeCap): TradeProof {\n    assert!(object::id(self) == cap.for, EWrongCap);\n    TradeProof { for: object::id(self) }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BridgeRoute Struct in Move\nDESCRIPTION: Defines a struct representing a bridge route between two chains, containing source and destination chain IDs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/chain_ids.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct BridgeRoute has copy, drop, store {\n    source: u8,\n    destination: u8\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateRouteLimitEvent Struct Definition\nDESCRIPTION: Event structure for recording updates to route transfer limits. Contains information about the sending and receiving chains and the new limit value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/limiter.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct UpdateRouteLimitEvent has copy, drop {\n    sending_chain: u8,\n    receiving_chain: u8,\n    new_limit: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Withdraw Base Asset Function\nDESCRIPTION: Function for withdrawing base asset tokens from a trading pool. Validates quantity and uses custodian module to handle the withdrawal.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun withdraw_base<BaseAsset, QuoteAsset>(\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    quantity: u64,\n    account_cap: &AccountCap,\n    ctx: &mut TxContext\n): Coin<BaseAsset> {\n    assert!(quantity > 0, EInvalidQuantity);\n    custodian::withdraw_asset(&mut pool.base_custodian, quantity, account_cap, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Min Function in Move\nDESCRIPTION: Deprecated min function that returns the minimum of two u64 values. Recommends using std::u64::min instead.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/math.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun min(x: u64, y: u64): u64 {\n    x.min(y)\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Table in Sui (Move)\nDESCRIPTION: Function that drops a potentially non-empty Table. This can only be used if the value type V has the drop ability. The function consumes the table and deletes its ID regardless of content.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table.md#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\npublic fun drop<K: copy + drop + store, V: drop + store>(table: Table<K, V>) {\n    let Table { id, size: _ } = table;\n    id.delete()\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Signed Transaction (Sui CLI)\nDESCRIPTION: This command executes a signed transaction using the Sui CLI. It takes the raw transaction bytes (`--tx-bytes`) and the serialized signature (`--signatures`) as input.  It executes the signed transaction and returns the certificate and transaction effects if successful.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/transaction-auth/offline-signing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sui client execute-signed-tx --tx-bytes <TX_BYTES> --signatures <SERIALIZED-SIGNATURE>\n```\n\n----------------------------------------\n\nTITLE: Adding Rule Configuration to Token Policy in Move\nDESCRIPTION: Function to add Config for a Rule in TokenPolicy, requiring both Rule witness and TokenPolicyCap for authorization. Configuration is stored per Rule to allow reuse across different actions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_25\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add_rule_config<T, Rule: drop, Config: store>(\n    _rule: Rule,\n    self: &mut TokenPolicy<T>,\n    cap: &TokenPolicyCap<T>,\n    config: Config,\n    _ctx: &mut TxContext,\n) {\n    assert!(object::id(self) == cap.for, ENotAuthorized);\n    df::add(&mut self.id, key<Rule>(), config)\n}\n```\n\n----------------------------------------\n\nTITLE: Token Management Functions\nDESCRIPTION: Functions to access properties of AddTokenOnSui message including native status, token IDs, type names and prices.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_16\n\nLANGUAGE: move\nCODE:\n```\npublic fun is_native(self: &AddTokenOnSui): bool {\n    self.native_token\n}\n\npublic fun token_ids(self: &AddTokenOnSui): vector<u8> {\n    self.token_ids\n}\n\npublic fun token_type_names(self: &AddTokenOnSui): vector<String> {\n    self.token_type_names\n}\n\npublic fun token_prices(self: &AddTokenOnSui): vector<u64> {\n    self.token_prices\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Configuration Type Existence in Move\nDESCRIPTION: Checks if a configuration value with specific type exists, regardless of epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/config.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun exists_with_type<WriteCap, Name: copy + drop + store, Value: copy + drop + store>(\n    config: &Config<WriteCap>,\n    name: Name,\n): bool\n```\n\n----------------------------------------\n\nTITLE: GetPoolIdByAssets Function Definition\nDESCRIPTION: Function signature for retrieving pool ID based on base and quote asset types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nasync getPoolIdByAssets(baseType: string, quoteType: string) {}\n```\n\n----------------------------------------\n\nTITLE: Getting Action from ActionRequest in Move\nDESCRIPTION: This function returns the Action in an ActionRequest. It takes an ActionRequest as input and returns a String representing the action name.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_45\n\nLANGUAGE: Move\nCODE:\n```\npublic fun action<T>(self: &ActionRequest<T>): String { self.name }\n```\n\n----------------------------------------\n\nTITLE: Converting Uncompressed G1 to G1 Element for BLS12-381 in Move\nDESCRIPTION: Converts an uncompressed G1 element to a regular G1 element in the BLS12-381 curve. This function uses the group_ops module's convert function with appropriate type parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_44\n\nLANGUAGE: Move\nCODE:\n```\npublic fun uncompressed_g1_to_g1(e: &Element<UncompressedG1>): Element<G1> {\n    group_ops::convert(UNCOMPRESSED_G1_TYPE, G1_TYPE, e)\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Token Bridge Payload Function in Move\nDESCRIPTION: A function that extracts and validates a token transfer payload from a bridge message. It parses sender address, target chain, target address, token type, and amount from the message payload.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun extract_token_bridge_payload(message: &BridgeMessage): TokenTransferPayload {\n    let mut bcs = bcs::new(message.payload);\n    let sender_address = bcs.peel_vec_u8();\n    let target_chain = bcs.peel_u8();\n    let target_address = bcs.peel_vec_u8();\n    let token_type = bcs.peel_u8();\n    let amount = peel_u64_be(&mut bcs);\n    chain_ids::assert_valid_chain_id(target_chain);\n    assert!(bcs.into_remainder_bytes().is_empty(), ETrailingBytes);\n    TokenTransferPayload {\n        sender_address,\n        target_chain,\n        target_address,\n        token_type,\n        amount\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tuple Subtyping with References in Move\nDESCRIPTION: Illustrates the subtyping behavior of tuples in Move when combined with mutable and immutable references. Shows valid and invalid subtype relationships.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/primitive-types/tuples.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nlet x: &u64 = &0;\nlet y: &mut u64 = &mut 1;\n\n// (&u64, &mut u64) is a subtype of (&u64, &u64)\n// since &mut u64 is a subtype of &u64\nlet (a, b): (&u64, &u64) = (x, y);\n\n// (&mut u64, &mut u64) is a subtype of (&u64, &u64)\n// since &mut u64 is a subtype of &u64\nlet (c, d): (&u64, &u64) = (y, y);\n\n// ERROR! (&u64, &mut u64) is NOT a subtype of (&mut u64, &mut u64)\n// since &u64 is NOT a subtype of &mut u64\nlet (e, f): (&mut u64, &mut u64) = (x, y);\n```\n\n----------------------------------------\n\nTITLE: Borrowing Value from ObjectTable in Move\nDESCRIPTION: Function to immutably borrow a value from the ObjectTable given a key. It uses dynamic object fields to retrieve the value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_table.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow<K: copy + drop + store, V: key + store>(table: &ObjectTable<K, V>, k: K): &V {\n    ofield::borrow(&table.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Option or Macro in Move\nDESCRIPTION: Macro that selects the first Some value from two options, or None if both are None. Equivalent to Rust's or() method.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_22\n\nLANGUAGE: move\nCODE:\n```\npublic macro fun or<$T>($o: Option<$T>, $default: Option<$T>): Option<$T> {\n    let o = $o;\n    if (o.is_some()) {\n        o\n    } else {\n        o.destroy_none();\n        $default\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Pool Exchange Rates\nDESCRIPTION: Retrieves the exchange rates for a staking pool. Works for both active and inactive pools.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_35\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pool_exchange_rates(\n    wrapper: &mut SuiSystemState,\n    pool_id: &ID,\n): &Table<u64, PoolTokenExchangeRate> {\n    wrapper.load_system_state_mut().pool_exchange_rates(pool_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting u8 to String\nDESCRIPTION: The to_string function converts a u8 value to a String using the std::macros::num_to_string macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_string(x: u8): String {\n    std::macros::num_to_string!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Sign Serialized Data (Sui Keytool)\nDESCRIPTION: This command signs the serialized transaction data using the `sui keytool`. It uses the Ed25519 key corresponding to the provided address stored in `sui.keystore`. The command outputs the signature, the public key, and the flag encoded in Base64, referred to as `<SERIALIZED-SIGNATURE>`.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/transaction-auth/offline-signing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsui keytool sign --address <SUI-ADDRESS> --data <TX_BYTES>\n```\n\n----------------------------------------\n\nTITLE: Invalid 'use fun' Examples Without Type as First Argument\nDESCRIPTION: Examples showing invalid 'use fun' declarations where the target function doesn't have the specified type as its first argument. The first argument must match the type before the dot.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic struct X() has copy, drop, store;\n\nfun new(): X { X() }\nfun flag(flag: bool): u8 { if (flag) 1 else 0 }\n\nuse fun new as X.new; // ERROR!\nuse fun flag as X.flag; // ERROR!\n// Neither `new` nor `flag` has first argument of type `X`\n```\n\n----------------------------------------\n\nTITLE: Defining Mark Struct for Move Tracking\nDESCRIPTION: Defines the Mark struct used to track player moves in the owned implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/tic-tac-toe.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nstruct Mark has key {\n    id: UID,\n    cell: u8,\n    is_x: bool,\n    game_id: ID,\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Weather Oracle Package with Sui CLI\nDESCRIPTION: Command to create a new Sui Move package named 'weather_oracle' using the Sui CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/weather-oracle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move new weather_oracle\n```\n\n----------------------------------------\n\nTITLE: Adding Key-Value Pairs to a Bag in Move\nDESCRIPTION: This function adds a key-value pair to a Bag. It aborts if the key already exists.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bag.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add<K: copy + drop + store, V: store>(bag: &mut Bag, k: K, v: V) {\n    field::add(&mut bag.id, k, v);\n    bag.size = bag.size + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Return Identity Element of G2 in Sui Framework - Move\nDESCRIPTION: The g2_identity function retrieves the identity element of the G2 group by decoding pre-defined identity bytes into an Element of type G2.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_27\n\nLANGUAGE: move\nCODE:\n```\npublic fun g2_identity(): Element<G2> {\n    let identity = G2_IDENTITY_BYTES;\n    group_ops::from_bytes(G2_TYPE, &identity, true)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if ObjectBag is Empty - Move\nDESCRIPTION: This function checks if the ObjectBag is empty. It takes a reference to the bag and returns a boolean indicating if the bag has no elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_bag.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_empty(bag: &ObjectBag): bool {\n    bag.size == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Headers with curl\nDESCRIPTION: This snippet demonstrates how to use `curl` to send a GraphQL query to the Sui mainnet endpoint with custom HTTP headers.  The headers include `x-sui-rpc-show-usage` to request query complexity information and `Content-Type` to specify the JSON content type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/graphql-rpc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -i -X POST https://sui-mainnet.mystenlabs.com/graphql \\\n     --header 'x-sui-rpc-show-usage: true'                 \\\n     --header 'Content-Type: application/json'             \\\n     --data '{ \"query\": \"query { epoch { referenceGasPrice } }\" }'\n```\n\n----------------------------------------\n\nTITLE: Creating a New TransferRequest in Move\nDESCRIPTION: Implements the new_request function to create a TransferRequest that necessitates approval from the creator for resolution. The function requires the item ID, payment amount, and sender's ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new_request<T>(item: sui::object::ID, paid: u64, from: sui::object::ID): sui::transfer_policy::TransferRequest<T>\n```\n\n----------------------------------------\n\nTITLE: Implementing Borrow for Dynamic Object Fields in Move\nDESCRIPTION: This macro function implements borrowing a dynamic object field. It takes an object UID and a name, and returns a reference to the value of the specified type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\nmacro fun borrow_impl<$Name: copy + drop + store, $Value: key>(\n    $object: &UID,\n    $name: $Name,\n): &$Value {\n    let object = $object;\n    let name = $name;\n    let key = Wrapper { name };\n    let (field, value_id) = field::field_info<Wrapper<$Name>>(object, key);\n    borrow_child_object<$Value>(field, value_id)\n}\n```\n\n----------------------------------------\n\nTITLE: ASCII String Character Manipulation - Move\nDESCRIPTION: Functions for checking printable characters and adding characters to strings.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun all_characters_printable(string: &String): bool {\n    string.bytes.all!(|byte| is_printable_char(*byte))\n}\n\npublic fun push_char(string: &mut String, char: Char) {\n    string.bytes.push_back(char.byte);\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum of Two u64 Values in Move\nDESCRIPTION: Function that returns the smaller of two u64 values using the std::macros::num_min macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun min(x: u64, y: u64): u64 {\n    std::macros::num_min!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting a Bit in BitVector in Rust\nDESCRIPTION: Implements the unset function to set a specific bit in the BitVector to false. It checks if the index is within bounds.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/bit_vector.md#2025-04-22_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun unset(bitvector: &mut BitVector, bit_index: u64) {\n    assert!(bit_index < bitvector.bit_field.length(), EINDEX);\n    let x = &mut bitvector.bit_field[bit_index];\n    *x = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Type Name Function in Move\nDESCRIPTION: Native function to get a TypeName representation of type T, using defining IDs for package IDs in fully qualified type names.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/type_name.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic native fun get<T>(): TypeName;\n```\n\n----------------------------------------\n\nTITLE: Checking if Order is a Bid in DeepBook CLOB (Move)\nDESCRIPTION: Helper function that determines whether an order is a bid (buy) order based on its order ID. Orders with IDs less than MIN_ASK_ORDER_ID are considered bid orders.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_20\n\nLANGUAGE: move\nCODE:\n```\nfun order_is_bid(order_id: u64): bool {\n    return order_id < MIN_ASK_ORDER_ID\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Sui Validator Metadata\nDESCRIPTION: Functions to validate validator metadata. The first function serializes the metadata and calls the second function, which is a native implementation for validation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_94\n\nLANGUAGE: Move\nCODE:\n```\npublic fun validate_metadata(metadata: &ValidatorMetadata) {\n    validate_metadata_bcs(bcs::to_bytes(metadata));\n}\n\npublic native fun validate_metadata_bcs(metadata: vector<u8>);\n```\n\n----------------------------------------\n\nTITLE: Validate Bridge Route\nDESCRIPTION: Checks if a given source and destination chain ID combination represents a valid bridge route by comparing against the list of valid routes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/chain_ids.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic fun is_valid_route(source: u8, destination: u8): bool {\n    let route = BridgeRoute { source, destination };\n    valid_routes().contains(&route)\n}\n```\n\n----------------------------------------\n\nTITLE: Dividing Fixed-Point Numbers\nDESCRIPTION: Divides two UQ32_32 fixed-point numbers, truncating any fractional part. Aborts if divisor is zero or if quotient would overflow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq32_32.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun div(a: UQ32_32, b: UQ32_32): UQ32_32 {\n    UQ32_32(int_div(a.0, b))\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer Policy Cap Struct Definition\nDESCRIPTION: Defines a capability type that grants permissions to manage rules and handle the TransferPolicy. Includes the policy ID and object UID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TransferPolicyCap<phantom T> has key, store {\n    id: sui::object::UID,\n    policy_id: sui::object::ID\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Immutable Object Scenarios\nDESCRIPTION: This test scenario exhibits creating and interacting with immutable objects in unit tests via 'test_scenario'. It emphasizes using 'take_immutable' for acquiring immutable objects from storage and 'return_immutable' for returning them.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/immutable.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nlet sender1 = @0x1;\nlet scenario_val = test_scenario::begin(sender1);\nlet scenario = &mut scenario_val;\n{\n    let ctx = test_scenario::ctx(scenario);\n    color_object::create_immutable(255, 0, 255, ctx);\n};\nscenario.next_tx(sender1);\n{\n    // has_most_recent_for_sender returns false for immutable objects.\n    assert!(!test_scenario::has_most_recent_for_sender<ColorObject>(scenario))\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Sui Node Metrics using curl in Shell\nDESCRIPTION: This command uses curl to fetch metrics from a local Sui node and filters for validator and fullnode metrics. It demonstrates how to access the metrics endpoint and extract specific data.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/monitoring.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -s http://localhost:9184/metrics | grep -E 'sui_validator|sui_fullnode'\n```\n\n----------------------------------------\n\nTITLE: Getting the Index of a PCR Entry\nDESCRIPTION: The function `index` takes a PCREntry and returns its index as a u8 value. This function is useful for identifying specific PCR entries.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/nitro_attestation.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun index(entry: &sui::nitro_attestation::PCREntry): u8 {\n    entry.index\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Entry from Table in Move\nDESCRIPTION: Implements the remove function to delete a key-value pair from the Table and return the value, decrementing the size.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove<K: copy + drop + store, V: store>(table: &mut Table<K, V>, k: K): V {\n    let v = field::remove(&mut table.id, k);\n    table.size = table.size - 1;\n    v\n}\n```\n\n----------------------------------------\n\nTITLE: AccountOpenOrders Function Definition\nDESCRIPTION: Function signature for retrieving open orders for a specific balance manager and pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nasync accountOpenOrders(poolKey: string, managerKey: string) {}\n```\n\n----------------------------------------\n\nTITLE: Getting Token Transfer Action Signatures in Move\nDESCRIPTION: Retrieves the verified signatures for a token transfer based on source chain and bridge sequence number. Returns an Option containing a vector of signature bytes if found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\nfun get_token_transfer_action_signatures(\n    bridge: &Bridge,\n    source_chain: u8,\n    bridge_seq_num: u64,\n): Option<vector<vector<u8>>> {\n    let inner = load_inner(bridge);\n    let key = message::create_key(\n        source_chain,\n        message_types::token(),\n        bridge_seq_num\n    );\n    if (!inner.token_transfer_records.contains(key)) {\n        return option::none()\n    };\n    let record = &inner.token_transfer_records[key];\n    record.verified_signatures\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Balance in Sui Coin\nDESCRIPTION: This function mints a specified amount of a type T as a Balance and increases the total supply accordingly. The operation will abort if the sum of the value being minted and the current total supply exceeds U64_MAX.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\npublic fun mint_balance<T>(cap: &mut sui::coin::TreasuryCap<T>, value: u64): sui::balance::Balance<T> {\n    cap.total_supply.increase_supply(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Closest Leaf Index by Key in Move Critbit Tree\nDESCRIPTION: The 'get_closest_leaf_index_by_key' function retrieves the index of the closest leaf in a critbit tree for a given key. By traversing the tree based on bitwise operations, it determines the closest node. The function requires the key as a 64-bit unsigned integer and returns a corresponding index or partition index if the tree is empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../deepbook/critbit.md#deepbook_critbit_get_closest_leaf_index_by_key\">get_closest_leaf_index_by_key</a>&lt;V: store&gt;(tree: &<a href=\"../deepbook/critbit.md#deepbook_critbit_CritbitTree\">CritbitTree</a>&lt;V&gt;, key: u64): u64 {\n    <b>let</b> <b>mut</b> ptr = tree.root;\n    // <b>if</b> tree is empty, <b>return</b> the patrition index\n    <b>if</b>(ptr == <a href=\"../deepbook/critbit.md#deepbook_critbit_PARTITION_INDEX\">PARTITION_INDEX</a>) <b>return</b> <a href=\"../deepbook/critbit.md#deepbook_critbit_PARTITION_INDEX\">PARTITION_INDEX</a>;\n    <b>while</b> (ptr &lt; <a href=\"../deepbook/critbit.md#deepbook_critbit_PARTITION_INDEX\">PARTITION_INDEX</a>){\n        <b>let</b> node = table::borrow(&tree.internal_nodes, ptr);\n        <b>if</b> (key & node.mask == 0){\n            ptr = node.left_child;\n        } <b>else</b> {\n            ptr = node.right_child;\n        }\n    };\n    <b>return</b> (<a href=\"../deepbook/critbit.md#deepbook_critbit_MAX_U64\">MAX_U64</a> - ptr)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Byte Represents a Valid ASCII Character in Move\nDESCRIPTION: Determines if a given byte represents a valid ASCII character. It takes a u8 and returns a boolean.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_valid_char(b: u8): bool {\n    b <= 0x7F\n}\n```\n\n----------------------------------------\n\nTITLE: Installing sui-tool for Checking Locked Objects in Sui\nDESCRIPTION: Command to install the sui-tool utility for debugging locked objects in Sui smart contracts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/avoid-equivocation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo run --bin sui-tool\n```\n\n----------------------------------------\n\nTITLE: Coin Split Function\nDESCRIPTION: Splits a coin into two parts - one with specified amount and the remainder in original coin\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/pay.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun split<T>(coin: &mut Coin<T>, split_amount: u64, ctx: &mut TxContext) {\n    keep(coin.split(split_amount, ctx), ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring from RocksDB Snapshot using sui-tool\nDESCRIPTION: The command downloads a RocksDB snapshot from a custom snapshot bucket using sui-tool, supporting parallel downloads and skipping large index directories for efficiency.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/snapshots.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsui-tool download-db-snapshot --latest \\\n       --network <NETWORK> --snapshot-bucket <BUCKET-NAME> \\\n       --snapshot-bucket-type <TYPE> --path <PATH-TO-NODE-DB> \\\n       --num-parallel-downloads 25 \\\n       --skip-indexes\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Length Peeling in Move\nDESCRIPTION: Function to read ULEB-encoded vector length from BCS-serialized bytes. Implements ULEB128 decoding for vector lengths.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun peel_vec_length(bcs: &mut BCS): u64 {\n    let (mut total, mut shift, mut len) = (0u64, 0, 0);\n    loop {\n        assert!(len <= 4, ELenOutOfRange);\n        let byte = bcs.bytes.pop_back() as u64;\n        len = len + 1;\n        total = total | ((byte & 0x7f) << shift);\n        if ((byte & 0x80) == 0) break;\n        shift = shift + 7;\n    };\n    total\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Ticks and Orders in DeepBook CLOB (Move)\nDESCRIPTION: This function iterates through ticks and orders in a CLOB, applying various filters and pagination. It handles ascending/descending order, start positions, expiration times, and maximum order IDs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/order_query.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\nfun iter_ticks_internal(\n    ticks: &CritbitTree<TickLevel>,\n    start_tick_level: Option<u64>,\n    mut start_order_id: Option<u64>,\n    min_expire_timestamp: Option<u64>,\n    max_id: Option<u64>,\n    ascending: bool,\n): vector<Order> {\n    // ... (implementation details)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking If Linked Table is Empty in Move\nDESCRIPTION: This function checks if a linked table is empty by verifying if its length is zero. It returns a boolean value. The function requires 'copy', 'drop', and 'store' for the key type, and 'store' for the value type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_empty<K: copy, drop, store, V: store>(table: &sui::linked_table::LinkedTable<K, V>): bool\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_empty<K: copy + drop + store, V: store>(table: &LinkedTable<K, V>): bool {\n    table.size == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Recipient from ActionRequest in Move\nDESCRIPTION: This function returns the Recipient of an ActionRequest. It takes an ActionRequest as input and returns an Option<address> representing the recipient.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_48\n\nLANGUAGE: Move\nCODE:\n```\npublic fun recipient<T>(self: &ActionRequest<T>): Option<address> {\n    self.recipient\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving total supply information in Rust\nDESCRIPTION: The total_supply function returns the maximum possible supply value of the asset as defined during creation. This represents the absolute upper limit of units that can exist.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\npublic fun total_supply<T>(cap: &AssetCap<T>): u64 {}\n```\n\n----------------------------------------\n\nTITLE: Getting Mutable UID for Kiosk - Move\nDESCRIPTION: This function retrieves the mutable UID for dynamic field access. It will abort if the allow_extensions parameter is set to false, ensuring permission checks are followed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_41\n\nLANGUAGE: Move\nCODE:\n```\npublic fun uid_mut(self: &mut sui::kiosk::Kiosk): &mut sui::object::UID {\n    assert!(self.allow_extensions, EUidAccessNotAllowed);\n    &mut self.id\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inclusive Loop Macro for U8 Range\nDESCRIPTION: A macro function that applies a given function to each number from 0 to stop (inclusive). Takes a u8 stop value and a function parameter that accepts u8 and returns a droppable type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\npublic macro fun do_eq<$R: drop>($stop: u8, $f: |u8| -> $R) {\n    std::macros::do_eq!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Calculate Base Quantity with DEEP Fees\nDESCRIPTION: Function to calculate the base quantity output for a given quote quantity using DEEP as fee.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_base_quantity_out(self: &Pool, quote_quantity: u64): u64\n```\n\n----------------------------------------\n\nTITLE: Defining GenesisValidatorMetadata Struct in Move\nDESCRIPTION: Defines the metadata structure for genesis validators including their network details, keys, and operational parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/genesis.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct GenesisValidatorMetadata has copy, drop {\n    name: vector<u8>,\n    description: vector<u8>,\n    image_url: vector<u8>,\n    project_url: vector<u8>,\n    sui_address: address,\n    gas_price: u64,\n    commission_rate: u64,\n    protocol_public_key: vector<u8>,\n    proof_of_possession: vector<u8>,\n    network_public_key: vector<u8>,\n    worker_public_key: vector<u8>,\n    network_address: vector<u8>,\n    p2p_address: vector<u8>,\n    primary_address: vector<u8>,\n    worker_address: vector<u8>\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Stakes in Move\nDESCRIPTION: Calculates the total active validator stake by summing the stakes of all validators in the set.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_50\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun calculate_total_stakes(validators: &vector<Validator>): u64 {\n    let mut stake = 0;\n    validators.do_ref!(|v| stake = stake + v.total_stake());\n    stake\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Address to Per-Type List in Sui Deny List (Move)\nDESCRIPTION: Helper function used by v1_add to add an address to a specific per-type list. Manages the denied addresses set and maintains a count of denied types per address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\nfun v1_per_type_list_add(list: &mut PerTypeList, type: vector<u8>, addr: address) {\n    if (!list.denied_addresses.contains(type)) {\n        list.denied_addresses.add(type, vec_set::empty());\n    };\n    let denied_addresses = &mut list.denied_addresses[type];\n    let already_denied = denied_addresses.contains(&addr);\n    if (already_denied) return;\n    denied_addresses.insert(addr);\n    if (!list.denied_count.contains(addr)) {\n        list.denied_count.add(addr, 0);\n    };\n    let denied_count = &mut list.denied_count[addr];\n    *denied_count = *denied_count + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Backloaded Vesting Smart Contract in Move\nDESCRIPTION: This smart contract defines a backloaded vesting schedule where most tokens are released towards the end of the vesting period. It uses a parent wallet containing two child Wallets, each with its vesting schedule. The 'new_wallet' function initializes vesting parameters, while 'claim' handles token retrieval. It requires start timestamps, duration, and backload percentage for computation and operates within the Sui ecosystem.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics/vesting-strategies.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\n{\"@inject\": \"examples/vesting/sources/backloaded.move\"}\n```\n\n----------------------------------------\n\nTITLE: Join Vector of Coins Function\nDESCRIPTION: Joins multiple coins from a vector into a single coin\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/pay.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun join_vec<T>(self: &mut Coin<T>, mut coins: vector<Coin<T>>) {\n    let (mut i, len) = (0, coins.length());\n    while (i < len) {\n        let coin = coins.pop_back();\n        self.join(coin);\n        i = i + 1\n    };\n    coins.destroy_empty()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SuiSystemState Object in Move\nDESCRIPTION: Implementation of the create function that initializes a new SuiSystemState object with validators, storage fund, and other system parameters. This function is called once during genesis to create and share the system state object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun create(\n    id: UID,\n    validators: vector<Validator>,\n    storage_fund: Balance<SUI>,\n    protocol_version: u64,\n    epoch_start_timestamp_ms: u64,\n    parameters: SystemParameters,\n    stake_subsidy: StakeSubsidy,\n    ctx: &mut TxContext,\n) {\n    let system_state = sui_system_state_inner::create(\n        validators,\n        storage_fund,\n        protocol_version,\n        epoch_start_timestamp_ms,\n        parameters,\n        stake_subsidy,\n        ctx,\n    );\n    let version = sui_system_state_inner::genesis_system_state_version();\n    let mut self = SuiSystemState {\n        id,\n        version,\n    };\n    dynamic_field::add(&mut self.id, version, system_state);\n    transfer::share_object(self);\n}\n```\n\n----------------------------------------\n\nTITLE: Divide and Keep Function\nDESCRIPTION: Divides a coin into n-1 equal parts and transfers them to the sender\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/pay.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun divide_and_keep<T>(self: &mut Coin<T>, n: u64, ctx: &mut TxContext) {\n    let mut vec: vector<Coin<T>> = self.divide_into_n(n, ctx);\n    let (mut i, len) = (0, vec.length());\n    while (i < len) {\n        transfer::public_transfer(vec.pop_back(), ctx.sender());\n        i = i + 1;\n    };\n    vec.destroy_empty();\n}\n```\n\n----------------------------------------\n\nTITLE: User Open Orders Check Functions - Move\nDESCRIPTION: Utility functions to check existence of and access user open orders in a pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun usr_open_orders_exist<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n    owner: address\n): bool {\n    table::contains(&pool.usr_open_orders, owner)\n}\n\npublic fun usr_open_orders_for_address<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n    owner: address\n): &LinkedTable<u64, u64> {\n    table::borrow(&pool.usr_open_orders, owner)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Test Annotations Examples in Move\nDESCRIPTION: Demonstrates the proper usage of the #[test] annotation and how it must be applied to functions without parameters. Also shows how to use #[expected_failure] annotation to indicate tests that should raise errors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n#[test] // OK\nfun this_is_a_test() { ... }\n\n#[test] // Will fail to compile since the test takes an argument\nfun this_is_not_correct(arg: u64) { ... }\n\n#[test]\n#[expected_failure]\npublic fun this_test_will_abort_and_pass() { abort 1 }\n\n#[test]\n#[expected_failure]\npublic fun test_will_error_and_pass() { 1/0; }\n\n#[test] // Will pass since test fails with the expected abort code constant.\n#[expected_failure(abort_code = ENotFound)] // ENotFound is a constant defined in the module\npublic fun test_will_error_and_pass_abort_code() { abort ENotFound }\n\n#[test] // Will fail since test fails with a different error than expected.\n#[expected_failure(abort_code = my_module::EnotFound)]\npublic fun test_will_error_and_fail() { 1/0; }\n\n#[test, expected_failure] // Can have multiple in one attribute. This test will pass.\npublic fun this_other_test_will_abort_and_pass() { abort 1 }\n```\n\n----------------------------------------\n\nTITLE: TransferLimiter Struct Definition\nDESCRIPTION: Core data structure that maintains transfer limits and records between different blockchain routes. Contains two VecMap fields for storing limits and historical records.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/limiter.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TransferLimiter has store {\n    transfer_limits: sui::vec_map::VecMap<bridge::chain_ids::BridgeRoute, u64>,\n    transfer_records: sui::vec_map::VecMap<bridge::chain_ids::BridgeRoute, bridge::limiter::TransferRecord>\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Global Pause Status for Current Epoch in Sui Deny List\nDESCRIPTION: Checks if the global pause is enabled for the current epoch in a specific deny list configuration. It returns a boolean indicating the pause status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun v2_is_global_pause_enabled_current_epoch(\n    deny_list: &DenyList,\n    per_type_index: u64,\n    per_type_key: vector<u8>,\n    ctx: &TxContext,\n): bool {\n    if (!deny_list.per_type_exists(per_type_index, per_type_key)) return false;\n    let per_type_config = deny_list.borrow_per_type_config(per_type_index, per_type_key);\n    let setting_name = GlobalPauseKey();\n    config::read_setting(object::id(per_type_config), setting_name, ctx).destroy_or!(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Add Two G2 Elements in Sui Framework - Move\nDESCRIPTION: The function g2_add performs the addition of two G2 elements, returning the resulting Element of type G2. It integrates the group_add function from group_ops.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_29\n\nLANGUAGE: move\nCODE:\n```\npublic fun g2_add(e1: &Element<G2>, e2: &Element<G2>): Element<G2> {\n    group_ops::add(G2_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Orders from Price Levels in DeepBook CLOB (Move)\nDESCRIPTION: Helper function that removes an order from a price level in the order book. It validates the order exists and is owned by the specified user, removes it from data structures, and cleans up empty price levels when needed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_23\n\nLANGUAGE: move\nCODE:\n```\nfun remove_order(\n    open_orders: &mut CritbitTree<TickLevel>,\n    usr_open_orders: &mut LinkedTable<u64, u64>,\n    tick_index: u64,\n    order_id: u64,\n    user: ID,\n): Order {\n    linked_table::remove(usr_open_orders, order_id);\n    let tick_level = borrow_leaf_by_index(open_orders, tick_index);\n    assert!(linked_table::contains(&tick_level.open_orders, order_id), EInvalidOrderId);\n    let mut_tick_level = borrow_mut_leaf_by_index(open_orders, tick_index);\n    let order = linked_table::remove(&mut mut_tick_level.open_orders, order_id);\n    assert!(order.owner == user, EUnauthorizedCancel);\n    if (linked_table::is_empty(&mut_tick_level.open_orders)) {\n        destroy_empty_level(remove_leaf_by_index(open_orders, tick_index));\n    };\n    order\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Tokens through Bridge (Move)\nDESCRIPTION: The `send_token` function facilitates transferring tokens across blockchain networks by creating a bridge message and verifying its details. It requires a bridge reference, target chain and address details, a token, and transaction context. The function also ensures bridge availability and valid chain routes, manages token burning, and records the transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun send_token<T>(\n    bridge: &mut Bridge,\n    target_chain: u8,\n    target_address: vector<u8>,\n    token: Coin<T>,\n    ctx: &mut TxContext\n) {\n    let inner = load_inner_mut(bridge);\n    assert!(!inner.paused, EBridgeUnavailable);\n    assert!(chain_ids::is_valid_route(inner.chain_id, target_chain), EInvalidBridgeRoute);\n    assert!(target_address.length() == EVM_ADDRESS_LENGTH, EInvalidEvmAddress);\n    let bridge_seq_num = inner.get_current_seq_num_and_increment(message_types::token());\n    let token_id = inner.treasury.token_id<T>();\n    let token_amount = token.balance().value();\n    assert!(token_amount > 0, ETokenValueIsZero);\n    let message = message::create_token_bridge_message(\n        inner.chain_id,\n        bridge_seq_num,\n        address::to_bytes(ctx.sender()),\n        target_chain,\n        target_address,\n        token_id,\n        token_amount,\n    );\n    inner.treasury.burn(token);\n    inner.token_transfer_records.push_back(\n        message.key(),\n        BridgeRecord {\n            message,\n            verified_signatures: option::none(),\n            claimed: false,\n        },\n    );\n    emit(TokenDepositedEvent {\n        seq_num: bridge_seq_num,\n        source_chain: inner.chain_id,\n        sender_address: address::to_bytes(ctx.sender()),\n        target_chain,\n        target_address,\n        token_type: token_id,\n        amount: token_amount,\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing range_do Macro for Exclusive Range Iteration in Move\nDESCRIPTION: A macro function that loops through a range of u32 values from start to stop (exclusive) and applies a closure function to each value. The implementation delegates to std::macros::range_do.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u32.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic macro fun range_do<$R: drop>($start: u32, $stop: u32, $f: |u32| -> $R) {\n    std::macros::range_do!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating u128 in range with Sui RandomGenerator - Move\nDESCRIPTION: Generates a random u128 in the range [min, max] with a bias of 2^{-64} using the RandomGenerator. It relies on the uint_in_range macro for generating numbers with controlled bias, requiring a mutable RandomGenerator, min, and max as inputs, and returns a u128.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun generate_u128_in_range(g: &mut sui::random::RandomGenerator, min: u128, max: u128): u128 {\n    uint_in_range!(g, min, max, 24)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Image URL in Sui System\nDESCRIPTION: Updates a validator's image URL in the Sui system state. Requires mutable access to SuiSystemState and the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_image_url(\n    self: &mut SuiSystemState,\n    image_url: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_validator_image_url(image_url, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Depositing Funds using DepositCap in Move\nDESCRIPTION: Function allowing DepositCap holders to deposit funds into a BalanceManager without requiring owner privileges. Supports any coin type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/balance-manager.mdx#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic fun deposit_with_cap<T>(self: &mut BalanceManager, cap: &DepositCap, coin: Coin<T>) {\n    assert!(object::id(self) == cap.for, EWrongCap);\n\n    let type = type_name::get<T>();\n    if (!table::contains(&self.balances, type)) {\n        table::add(&mut self.balances, type, balance::zero<T>());\n        table::add(&mut self.locked, type, balance::zero<T>());\n    };\n\n    balance::join(table::borrow_mut(&mut self.balances, type), coin::into_balance(coin));\n}\n```\n\n----------------------------------------\n\nTITLE: Get Pool ID By Asset\nDESCRIPTION: Function to retrieve pool ID given the asset types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_pool_id_by_asset<BaseAsset, QuoteAsset>(): ID\n```\n\n----------------------------------------\n\nTITLE: Borrowing Value from ObjectBag in Move\nDESCRIPTION: Immutably borrows a value from the ObjectBag given a key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_bag.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow<K: copy + drop + store, V: key + store>(bag: &ObjectBag, k: K): &V {\n    ofield::borrow(&bag.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard Structure in Move\nDESCRIPTION: Implements the Dashboard struct to group services by type, with functions to create dashboards and register services.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\n/// Dashboard is a collection of services\npublic struct Dashboard has key, store {\n    id: UID,\n    service_type: String\n}\n\n/// Creates a new dashboard\npublic fun create_dashboard(\n    service_type: String,\n    ctx: &mut TxContext,\n) {\n    let db = Dashboard {\n        id: object::new(ctx),\n        service_type\n    };\n    transfer::share_object(db);\n}\n\n/// Registers a service to a dashboard\npublic fun register_service(db: &mut Dashboard, service_id: ID) {\n    df::add(&mut db.id, service_id, service_id);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Staking Pool in Sui Validator\nDESCRIPTION: A function to get a reference to the staking pool of a validator. This is used internally by the package.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_95\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun get_staking_pool_ref(self: &Validator): &StakingPool {\n    &self.staking_pool\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BLS12-381 G1 Element from Bytes\nDESCRIPTION: Constructs a BLS12-381 G1 group element from a byte representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun g1_from_bytes(bytes: &vector<u8>): Element<G1> {\n    group_ops::from_bytes(G1_TYPE, bytes, false)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence in Sui Bag (Move)\nDESCRIPTION: Implements the 'contains' function to check if a key exists in the bag. It uses the field::exists_ function to perform the check.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bag.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun contains<K: copy + drop + store>(bag: &Bag, k: K): bool {\n    field::exists_<K>(&bag.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Staked Sui Amount in Move\nDESCRIPTION: Returns the principal amount of a staked Sui in 64-bit unsigned integer format. Needs a reference to a StakedSui object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_26\n\nLANGUAGE: Move\nCODE:\n```\npublic fun staked_sui_amount(staked_sui: &sui_system::staking_pool::StakedSui): u64 { staked_sui.principal.value() }\n```\n\n----------------------------------------\n\nTITLE: Defining zip_do_mut Macro for Mutable Vector References\nDESCRIPTION: This macro allows iteration over two mutable vectors and applies a function to each pair of elements, enabling in-place modifications. Similar to zip_do_ref, it aborts if the vectors are not the same length, maintaining element order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_28\n\nLANGUAGE: Rust\nCODE:\n```\n\"public macro fun zip_do_mut<$T1, $T2, $R: drop>($v1: &mut vector<$T1>, $v2: &mut vector<$T2>, $f: |&mut $T1, &mut $T2| -> $R) {\\n    let v1 = $v1;\\n    let v2 = $v2;\\n    let len = v1.length();\\n    assert!(len == v2.length());\\n    len.do!(|i| $f(&mut v1[i], &mut v2[i]));\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Getting the Length of an ASCII String in Move\nDESCRIPTION: Returns the length of the ASCII string in bytes. It takes a reference to a String and returns a u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun length(string: &String): u64 {\n    string.as_bytes().length()\n}\n```\n\n----------------------------------------\n\nTITLE: OrderFilled Event Struct\nDESCRIPTION: Definition of the OrderFilled event struct which is emitted when a maker order is filled. This event provides information about the filled order for external observers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\n/// Emitted when a maker is filled\nstruct OrderFilled has copy, drop {\n    /// The order ID\n    order_id: ID,\n    /// The client order ID\n    client_order_id: u64,\n    /// Is it a bid (buy) or ask (sell) order\n    is_bid: bool,\n    /// Owner of the order\n    owner: address,\n    /// Total filled amount with external precision\n    total_filled: u64,\n    /// Base asset ID\n    base_asset_id: ID,\n    /// Quote asset ID\n    quote_asset_id: ID,\n    /// Price with external precision\n    price: u64,\n    /// Fill amount with external precision\n    fill_quantity: u64,\n    /// timestamp of fill\n    timestamp: u64,\n    /// Pool ID\n    pool_id: ID,\n    /// Counter party ID\n    counterparty_id: ID,\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mutable Validator Reference in Move\nDESCRIPTION: Gets a mutable reference to a validator from a vector of validators by address. Aborts if the validator is not found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_35\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun get_validator_mut(\n    validators: &mut vector<Validator>,\n    validator_address: address,\n): &mut Validator {\n    let idx = find_validator(validators, validator_address).destroy_or!(abort ENotAValidator);\n    &mut validators[idx]\n}\n```\n\n----------------------------------------\n\nTITLE: Pool Trading Fees Query\nDESCRIPTION: A function to retrieve the trading fees value for the quote asset from a Pool struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_46\n\nLANGUAGE: Move\nCODE:\n```\npublic fun quote_asset_trading_fees_value<BaseAsset, QuoteAsset>(pool: &Pool<BaseAsset, QuoteAsset>): u64 {\n    balance::value(&pool.quote_asset_trading_fees)\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving an ID from tx_hash and ids_created in Sui Move\nDESCRIPTION: This native function derives an ID based on the transaction hash and the number of IDs created during the transaction.  It takes the transaction hash (`tx_hash`) as a `vector<u8>` and the number of IDs created (`ids_created`) as a `u64`. It returns the derived ID as an `address`.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/tx_context.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../sui/tx_context.md#sui_tx_context_derive_id\">derive_id</a>(tx_hash: vector&lt;u8&gt;, <a href=\"../sui/tx_context.md#sui_tx_context_ids_created\">ids_created</a>: u64): <b>address</b>\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/tx_context.md#sui_tx_context_derive_id\">derive_id</a>(tx_hash: vector&lt;u8&gt;, <a href=\"../sui/tx_context.md#sui_tx_context_ids_created\">ids_created</a>: u64): <b>address</b>;\n```\n\n----------------------------------------\n\nTITLE: Depositing Quote Asset in Move Contract\nDESCRIPTION: Function to deposit quote asset into a custodian account. It takes a pool, coin, and account capability as parameters and doesn't return any value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic fun deposit_quote<BaseAsset, QuoteAsset>(\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    coin: Coin<QuoteAsset>,\n    account_cap: &AccountCap\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Vector Emptiness in Move\nDESCRIPTION: This function returns true if the given vector has no elements, and false otherwise.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_empty<Element>(v: &vector<Element>): bool {\n    v.length() == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Pool is Preactive at Epoch in Move\nDESCRIPTION: Determines if a staking pool is in preactive state at a given epoch. Returns true if the pool is currently preactive or if the pool's activation epoch is later than the provided epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_43\n\nLANGUAGE: Move\nCODE:\n```\nfun is_preactive_at_epoch(pool: &StakingPool, epoch: u64): bool {\n    // Either the pool is currently preactive or the pool's starting epoch is later than the provided epoch.\n    pool.is_preactive() || (*pool.activation_epoch.borrow() > epoch)\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying a Versioned Container in Sui Move\nDESCRIPTION: This function destroys a Versioned container and returns the contained object of type T. It extracts the inner object using dynamic field removal based on the stored version, then deletes the ID object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/versioned.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy<T: store>(self: Versioned): T {\n    let Versioned { mut id, version } = self;\n    let ret = dynamic_field::remove(&mut id, version);\n    id.delete();\n    ret\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExtensionKey Struct in Move\nDESCRIPTION: Defines the ExtensionKey struct used as a typed dynamic field key to store extension configuration and data.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct ExtensionKey<phantom Ext> has copy, drop, store {}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants for ASCII Operations in Move\nDESCRIPTION: Constants defining error codes for invalid ASCII character encounters and invalid index operations in the ASCII module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nconst EInvalidASCIICharacter: u64 = 65536;\nconst EInvalidIndex: u64 = 65537;\n```\n\n----------------------------------------\n\nTITLE: Implementing the length function for Sui addresses in Move\nDESCRIPTION: A function that returns the length of an address in Sui, which is 32 bytes. The documentation notes that this should eventually be converted to a native function and that the current implementation is Sui-specific.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/address.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic fun length(): u64 {\n    32\n}\n```\n\n----------------------------------------\n\nTITLE: Function with No Parameters\nDESCRIPTION: Examples of functions that take no parameters, common for constructors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\nfun useless() { }\n```\n\n----------------------------------------\n\nTITLE: Bridge Committee Error Constants Definition\nDESCRIPTION: Defines error constants for various failure conditions in bridge committee operations\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\nconst ESignatureBelowThreshold: u64 = 0;\nconst EDuplicatedSignature: u64 = 1;\nconst EInvalidSignature: u64 = 2;\nconst ENotSystemAddress: u64 = 3;\nconst EValidatorBlocklistContainsUnknownKey: u64 = 4;\nconst ESenderNotActiveValidator: u64 = 5;\nconst EInvalidPubkeyLength: u64 = 6;\nconst ECommitteeAlreadyInitiated: u64 = 7;\nconst EDuplicatePubkey: u64 = 8;\nconst ESenderIsNotInBridgeCommittee: u64 = 9;\n```\n\n----------------------------------------\n\nTITLE: Dividing UQ64_64 Fixed-Point Numbers in Move\nDESCRIPTION: Divides two UQ64_64 fixed-point numbers, truncating any fractional part of the quotient. Aborts if the divisor is zero or if the quotient overflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun div(a: UQ64_64, b: UQ64_64): UQ64_64 {\n    UQ64_64(int_div(a.0, b))\n}\n```\n\n----------------------------------------\n\nTITLE: Get Bridge Route\nDESCRIPTION: Retrieves a bridge route for given source and destination chain IDs. Throws an error if the route is invalid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/chain_ids.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_route(source: u8, destination: u8): BridgeRoute {\n    let route = BridgeRoute { source, destination };\n    assert!(valid_routes().contains(&route), EInvalidBridgeRoute);\n    route\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Return Values Example\nDESCRIPTION: Shows how to return multiple values using tuples.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\nfun one_two_three(): (u64, u64, u64) { (0, 1, 2) }\n```\n\n----------------------------------------\n\nTITLE: Generating Fresh Object Address\nDESCRIPTION: Creates a new, unique object address that has not been used before, ensuring it will never occur as a user address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/tx_context.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun fresh_object_address(_ctx: &mut TxContext): address {\n    fresh_id()\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Rentable with Promise - Move\nDESCRIPTION: The 'borrow_val' function allows a borrower to temporarily acquire a 'Rentable', returning the item along with a promise containing metadata about the rental.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_14\n\nLANGUAGE: move\nCODE:\n```\npublic fun borrow_val<T: key + store>(\n  kiosk: &mut Kiosk,\n  cap: &KioskOwnerCap,\n  item_id: ID,\n  _ctx: &mut TxContext,\n): (T, Promise) {\n  // Aborts if the cap doesn't match the Kiosk.\n  assert!(kiosk.has_access(cap), ENotOwner);\n  let borrower_kiosk = object::id(kiosk);\n\n  let rentable = take_from_bag<T, Rented>(kiosk, Rented { id: item_id });\n\n  // Construct a Promise struct containing the Rentable's metadata.\n  let promise = Promise {\n    item: Rented { id: item_id },\n    duration: rentable.duration,\n    start_date: *option::borrow(&rentable.start_date),\n    price_per_day: rentable.price_per_day,\n    renter_kiosk: rentable.kiosk_id,\n    borrower_kiosk\n  };\n\n  // Deconstructs the rentable and returns the promise along with the wrapped item T.\n  let Rentable {\n    object,\n    duration: _,\n    start_date: _,\n    price_per_day: _,\n    kiosk_id: _,\n  } = rentable;\n\n  (object, promise)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Wallet using Standard Connect Feature\nDESCRIPTION: Implementation of wallet connection using the standard:connect feature which opens a popup dialog for user interaction\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/wallet-standard.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nwallet.features['standard:connect'].connect();\n```\n\n----------------------------------------\n\nTITLE: Calling Functions with Different Parameter Counts\nDESCRIPTION: Demonstrates calling functions with varying numbers of parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_16\n\nLANGUAGE: move\nCODE:\n```\nmodule a::example {\n    public fun takes_none(): u64 { 0 }\n    public fun takes_one(x: u64): u64 { x }\n    public fun takes_two(x: u64, y: u64): u64 { x + y }\n    public fun takes_three(x: u64, y: u64, z: u64): u64 { x + y + z }\n}\n\nmodule b::other {\n    fun call_all() {\n        a::example::takes_none();\n        a::example::takes_one(0);\n        a::example::takes_two(0, 1);\n        a::example::takes_three(0, 1, 2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Total Stake Accessor Functions in Move\nDESCRIPTION: Collection of accessor functions for retrieving stake-related information from validators including total stake and individual validator stakes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\npublic fun total_stake(self: &ValidatorSet): u64 {\n    self.total_stake\n}\n\npublic fun validator_total_stake_amount(self: &ValidatorSet, validator_address: address): u64 {\n    let validator = get_validator_ref(&self.active_validators, validator_address);\n    validator.total_stake()\n}\n\npublic fun validator_stake_amount(self: &ValidatorSet, validator_address: address): u64 {\n    let validator = get_validator_ref(&self.active_validators, validator_address);\n    validator.total_stake()\n}\n\npublic fun validator_voting_power(self: &ValidatorSet, validator_address: address): u64 {\n    let validator = get_validator_ref(&self.active_validators, validator_address);\n    validator.voting_power()\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Staking Pool is Inactive in Move\nDESCRIPTION: Returns a boolean indicating whether a staking pool is inactive, requiring a reference to StakingPool. It checks if a deactivation epoch is set.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_29\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_inactive(pool: &sui_system::staking_pool::StakingPool): bool {\n    pool.deactivation_epoch.is_some()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Project URL in Move\nDESCRIPTION: Updates the project URL of a validator while ensuring the new URL does not exceed the maximum length allowed for validator metadata. The function creates a URL from the provided byte vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_77\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_project_url(self: &mut Validator, project_url: vector<u8>) {\n    assert!(\n        project_url.length() <= MAX_VALIDATOR_METADATA_LENGTH,\n        EValidatorMetadataExceedingLengthLimit,\n    );\n    self.metadata.project_url = url::new_unsafe_from_bytes(project_url);\n}\n```\n\n----------------------------------------\n\nTITLE: Withdraw Quote Asset Function\nDESCRIPTION: Function for withdrawing quote asset tokens from a trading pool. Similar to withdraw_base but for quote assets.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun withdraw_quote<BaseAsset, QuoteAsset>(\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    quantity: u64,\n    account_cap: &AccountCap,\n    ctx: &mut TxContext\n): Coin<QuoteAsset> {\n    assert!(quantity > 0, EInvalidQuantity);\n    custodian::withdraw_asset(&mut pool.quote_custodian, quantity, account_cap, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Random Generator in Sui\nDESCRIPTION: This function creates a new RandomGenerator instance derived from the global randomness state and a unique salt.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new_generator(self: &Random, salt: vector<u8>): RandomGenerator {\n    let inner = load_inner(self);\n    let mut_salt = salt;\n    vector::append(&mut mut_salt, bcs::to_bytes(&inner.epoch));\n    vector::append(&mut mut_salt, bcs::to_bytes(&inner.randomness_round));\n    RandomGenerator {\n        seed: hmac::hmac_sha3_256(inner.random_bytes, mut_salt),\n        counter: 0,\n        buffer: vector[],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Key-Value Pair\nDESCRIPTION: Function to insert a new key-value pair into the map. Aborts if the key already exists in the map.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun insert<K: copy, V>(self: &mut VecMap<K, V>, key: K, value: V) {\n    assert!(!self.contains(&key), EKeyAlreadyExists);\n    self.contents.push_back(Entry { key, value })\n}\n```\n\n----------------------------------------\n\nTITLE: Locking Item Internally in Sui Kiosk (Move)\nDESCRIPTION: This internal function \"locks\" an item, disabling the take action. It's part of the package-level API.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_29\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun lock_internal<T: key + store>(self: &mut Kiosk, item: T) {\n    df::add(&mut self.id, Lock { id: object::id(&item) }, true);\n    self.place_internal(item)\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Mutable Reference from Option in Sui Move\nDESCRIPTION: Returns a mutable reference to the value inside the option. Aborts if the option does not hold a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow_mut<Element>(t: &mut Option<Element>): &mut Element {\n    assert!(t.is_some(), EOPTION_NOT_SET);\n    &mut t.vec[0]\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Quote Asset in Flash Loans with DeepBookV3 SDK\nDESCRIPTION: The borrowQuoteAsset function allows borrowing a quote asset from a specified pool. It takes a poolKey string to identify the pool and a borrowAmount number to specify the quantity to borrow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/flash-loans.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nborrowQuoteAsset(poolKey: string, borrowAmount: number);\n```\n\n----------------------------------------\n\nTITLE: Defining Receipt Cap Function in Move\nDESCRIPTION: This function retrieves the UpgradeCap ID from an UpgradeReceipt. It takes an UpgradeReceipt as a parameter and returns its corresponding ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun receipt_cap(receipt: &UpgradeReceipt): ID {\n    receipt.cap\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Division of Group Elements (Move)\nDESCRIPTION: The native function `internal_div` divides two group elements represented as byte vectors. It accepts the group type as `u8`, along with two byte vectors, `e1` (the dividend) and `e2` (the divisor). The result of the division is returned as a new byte vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/group_ops.md#sui_group_ops_internal_div\">internal_div</a>(type_: u8, e1: &vector&lt;u8&gt;, e2: &vector&lt;u8&gt;): vector&lt;u8&gt;;\n```\n\n----------------------------------------\n\nTITLE: Defining VecMap Structure in Move\nDESCRIPTION: Core structure definition for a vector-backed map that maintains insertion order. The map is guaranteed not to contain duplicate keys and is designed for small maps where O(N) operations are acceptable.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct VecMap<K: copy, V> has copy, drop, store {\n    contents: vector<Entry<K, V>>\n}\n```\n\n----------------------------------------\n\nTITLE: Converting u64 to u16 with Overflow Check\nDESCRIPTION: Function that attempts to convert a u64 value to u16, returning None if the value exceeds the maximum value of u16.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u16(x: u64): Option<u16> {\n    std::macros::try_as_u16!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Native implementation of record_new_uid\nDESCRIPTION: Native function that records the creation of a new UID with the given address. This ensures proper tracking of object creation in the Sui system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_23\n\nLANGUAGE: move\nCODE:\n```\nnative fun record_new_uid(id: address);\n```\n\n----------------------------------------\n\nTITLE: AuthenticatorState Creation in Move\nDESCRIPTION: Creates and shares the AuthenticatorState object. This function can only be called once during genesis or epoch changes by the system address\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\nfun create(ctx: &TxContext) {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    let version = CurrentVersion;\n    let inner = AuthenticatorStateInner {\n        version,\n        active_jwks: vector[],\n    };\n    let mut self = AuthenticatorState {\n        id: object::authenticator_state(),\n        version,\n    };\n    dynamic_field::add(&mut self.id, version, inner);\n    transfer::share_object(self);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Available Range\nDESCRIPTION: This snippet shows a GraphQL query used to retrieve the available range for consistent pagination. It returns the first and last checkpoint sequence numbers for which pagination is guaranteed to work consistently.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/graphql-rpc.mdx#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  availableRange {\n    first { sequenceNumber }\n    last { sequenceNumber }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dividing Fixed-point Numbers in Move\nDESCRIPTION: Divides two fixed-point numbers, truncating any fractional part of the quotient. Aborts if the divisor is zero or if the quotient overflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun div(a: UQ64_64, b: UQ64_64): UQ64_64 {\n    UQ64_64(int_div(a.0, b))\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting UpdateAssetPrice Message in Rust\nDESCRIPTION: Extracts an UpdateAssetPrice message from a BridgeMessage. It parses the payload to get the token ID and new price, then constructs an UpdateAssetPrice struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_7\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun extract_update_asset_price(message: &BridgeMessage): UpdateAssetPrice {\n    let mut bcs = bcs::new(message.payload);\n    let token_id = bcs.peel_u8();\n    let new_price = peel_u64_be(&mut bcs);\n    assert!(bcs.into_remainder_bytes().is_empty(), ETrailingBytes);\n    UpdateAssetPrice {\n        token_id,\n        new_price\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Swap Between Two Wrapped Objects\nDESCRIPTION: This function executes the swap process for two 'SwapRequest' objects, validating conditions and transferring ownership between the objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/wrapped.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic fun execute_swap(s1: SwapRequest, s2: SwapRequest): Balance<SUI>;\n\nlet SwapRequest {id: id1, owner: owner1, object: o1, fee: fee1} = s1;\nlet SwapRequest {id: id2, owner: owner2, object: o2, fee: fee2} = s2;\n\nassert!(o1.scarcity == o2.scarcity, EBadSwap);\nassert!(o1.style != o2.style, EBadSwap);\n\ntransfer::transfer(o1, owner2);\ntransfer::transfer(o2, owner1);\nid1.delete();\nid2.delete();\nfee1.join(fee2);\n```\n\n----------------------------------------\n\nTITLE: Defining StakeSubsidy Struct in Move\nDESCRIPTION: Defines the core structure for managing stake subsidies with fields for balance, distribution tracking, and decay parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/stake_subsidy.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct StakeSubsidy has store {\n    balance: Balance<SUI>,\n    distribution_counter: u64,\n    current_distribution_amount: u64,\n    stake_subsidy_period_length: u64,\n    stake_subsidy_decrease_rate: u16,\n    extra_fields: Bag\n}\n```\n\n----------------------------------------\n\nTITLE: Error Constants for String Operations\nDESCRIPTION: Constants defining error codes for string operations, including invalid UTF-8 encoding and index out of range errors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nconst EInvalidUTF8: u64 = 1;\n```\n\nLANGUAGE: Move\nCODE:\n```\nconst EInvalidIndex: u64 = 2;\n```\n\n----------------------------------------\n\nTITLE: Using Prettier Move CLI\nDESCRIPTION: Examples of using the Prettier Move CLI to check and write formatted Move code.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nprettier-move -c sources/example.move # to check\nprettier-move -w sources/example.move # to write\n```\n\n----------------------------------------\n\nTITLE: Updating Candidate Validator Primary Address - Move\nDESCRIPTION: This function updates the primary address of a candidate validator. It operates similarly to its counterpart for active validators but applies to candidates. Inputs include the new primary address as a vector and a transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_25\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_candidate_validator_primary_address(self: &mut sui_system::sui_system::SuiSystemState, primary_address: vector<u8>, ctx: &sui::tx_context::TxContext)\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_candidate_validator_primary_address(\n    self: &mut SuiSystemState,\n    primary_address: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_candidate_validator_primary_address(primary_address, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Claiming and Transferring Token from Bridge in Move\nDESCRIPTION: Claims a token from the bridge and immediately transfers it to the owner. If the token is successfully claimed, it is transferred to the owner. Otherwise, the option is destroyed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun claim_and_transfer_token<T>(\n    bridge: &mut Bridge,\n    clock: &Clock,\n    source_chain: u8,\n    bridge_seq_num: u64,\n    ctx: &mut TxContext,\n) {\n    let (token, owner) = bridge.claim_token_internal<T>(clock, source_chain, bridge_seq_num, ctx);\n    if (token.is_some()) {\n        transfer::public_transfer(token.destroy_some(), owner)\n    } else {\n        token.destroy_none();\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving Sui Address in Rust\nDESCRIPTION: This code snippet demonstrates how to derive a Sui address from a public key using the BLAKE2b hashing function in Rust. It includes support for different signature schemes like Ed25519, Secp256k1, Secp256r1, and multisig.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/exchange-integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet flag = 0x00; // 0x00 = ED25519, 0x01 = Secp256k1, 0x02 = Secp256r1, 0x03 = multiSig\n// Hash the [flag, public key] bytearray using Blake2b\nlet mut hasher = DefaultHash::default();\nhasher.update([flag]);\nhasher.update(pk);\nlet arr = hasher.finalize();\nlet sui_address_string = hex::encode(arr);\n```\n\n----------------------------------------\n\nTITLE: Getting Approvals from ActionRequest in Move\nDESCRIPTION: This function returns the Approvals of an ActionRequest. It takes an ActionRequest as input and returns a VecSet of TypeNames representing the approvals.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_49\n\nLANGUAGE: Move\nCODE:\n```\npublic fun approvals<T>(self: &ActionRequest<T>): VecSet<TypeName> {\n    self.approvals\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Balance in Move\nDESCRIPTION: Implements the account_balance function to retrieve the available and locked balances for a user's account.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun account_balance<Asset>(\n    custodian: &Custodian<Asset>,\n    user: ID\n): (u64, u64) {\n    if (!table::contains(&custodian.account_balances, user)) {\n        return (0, 0)\n    };\n    let account_balances = table::borrow(&custodian.account_balances, user);\n    let avail_balance = balance::value(&account_balances.available_balance);\n    let locked_balance = balance::value(&account_balances.locked_balance);\n    (avail_balance, locked_balance)\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Adjusted Reward Distribution for Validators in Move\nDESCRIPTION: This function calculates the adjusted staking and storage fund rewards for each validator based on voting power, slashing, and adjustments. It handles both slashed and unslashed validators, distributing slashed rewards among unslashed validators.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_55\n\nLANGUAGE: Move\nCODE:\n```\nfun compute_adjusted_reward_distribution(\n    validators: &vector<Validator>,\n    total_voting_power: u64,\n    total_slashed_validator_voting_power: u64,\n    unadjusted_staking_reward_amounts: vector<u64>,\n    unadjusted_storage_fund_reward_amounts: vector<u64>,\n    total_staking_reward_adjustment: u64,\n    individual_staking_reward_adjustments: VecMap<u64, u64>,\n    total_storage_fund_reward_adjustment: u64,\n    individual_storage_fund_reward_adjustments: VecMap<u64, u64>,\n): (vector<u64>, vector<u64>) {\n    let total_unslashed_validator_voting_power =\n        total_voting_power - total_slashed_validator_voting_power;\n    let mut adjusted_staking_reward_amounts = vector[];\n    let mut adjusted_storage_fund_reward_amounts = vector[];\n    let length = validators.length();\n    let num_unslashed_validators = length - individual_staking_reward_adjustments.size();\n    length.do!(|i| {\n        let validator = &validators[i];\n        let voting_power = validator.voting_power();\n        let unadjusted_staking_reward_amount = unadjusted_staking_reward_amounts[i];\n        let adjusted_staking_reward_amount = if (\n            individual_staking_reward_adjustments.contains(&i)\n        ) {\n            let adjustment = individual_staking_reward_adjustments[&i];\n            unadjusted_staking_reward_amount - adjustment\n        } else {\n            let adjustment = mul_div!(\n                total_staking_reward_adjustment,\n                voting_power,\n                total_unslashed_validator_voting_power,\n            );\n            unadjusted_staking_reward_amount + adjustment\n        };\n        adjusted_staking_reward_amounts.push_back(adjusted_staking_reward_amount);\n        let unadjusted_storage_fund_reward_amount = unadjusted_storage_fund_reward_amounts[i];\n        let adjusted_storage_fund_reward_amount = if (\n            individual_storage_fund_reward_adjustments.contains(&i)\n        ) {\n            let adjustment = individual_storage_fund_reward_adjustments[&i];\n            unadjusted_storage_fund_reward_amount - adjustment\n        } else {\n            let adjustment = total_storage_fund_reward_adjustment / num_unslashed_validators;\n            unadjusted_storage_fund_reward_amount + adjustment\n        };\n        adjusted_storage_fund_reward_amounts.push_back(adjusted_storage_fund_reward_amount);\n    });\n    (adjusted_staking_reward_amounts, adjusted_storage_fund_reward_amounts)\n}\n```\n\n----------------------------------------\n\nTITLE: Public Sharing of Object with Store Ability in Move\nDESCRIPTION: Shares an object with 'store' ability, making it accessible to all. This function allows sharing of objects outside their defining module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun public_share_object<T: key + store>(obj: T) {\n    share_object_impl(obj)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting ASCII Character to Lowercase in Move\nDESCRIPTION: This helper function converts a single ASCII character (represented as a byte) to its lowercase equivalent. It only affects uppercase letters (A-Z).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\nfun char_to_lowercase(byte: u8): u8 {\n    if (byte >= 0x41 && byte <= 0x5A) byte + 0x20\n    else byte\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sui Objects with Different Transfer Capabilities\nDESCRIPTION: Example showing how to define two different types of Sui objects: one with restricted transfer capabilities (A) and another with public transfer capabilities (B). The key difference is the addition of the 'store' ability to B which allows it to be transferred publicly.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abilities/object.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nmodule a::my_module {\n    public struct A has key {\n        id: sui::object::UID,\n    }\n    public struct B has key, store {\n        id: sui::object::UID,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Extension Access Function in Move\nDESCRIPTION: Internal utility function providing read-only access to extension data using dynamic fields.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\nfun extension<Ext: drop>(self: &Kiosk): &Extension {\n    df::borrow(self.uid(), ExtensionKey<Ext> {})\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Validator Info in Sorted Order in Move\nDESCRIPTION: Inserts a new validator voting power info into a list while maintaining descending sort order by stake. This is part of the insertion sort algorithm used during voting power initialization.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\nfun insert(info_list: &mut vector<VotingPowerInfoV2>, new_info: VotingPowerInfoV2) {\n    let len = info_list.length();\n    let idx = info_list.find_index!(|info| new_info.stake >= info.stake);\n    info_list.insert(new_info, idx.destroy_or!(len));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Option Struct in Move\nDESCRIPTION: Defines the Option struct to represent an optional value using a vector of size zero or one.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Option<Element> has copy, drop, store {\n    vec: vector<Element>\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Kiosk Access Permission - Move\nDESCRIPTION: This function verifies if a given KioskOwnerCap matches the Kiosk instance, indicating access permissions. It returns a boolean value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_37\n\nLANGUAGE: Move\nCODE:\n```\npublic fun has_access(self: &mut sui::kiosk::Kiosk, cap: &sui::kiosk::KioskOwnerCap): bool {\n    object::id(self) == cap.for\n}\n```\n\n----------------------------------------\n\nTITLE: Create Bridge Treasury Function in Move\nDESCRIPTION: Creates a new bridge treasury instance with initialized storage for treasuries, supported tokens, and token type mapping.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/treasury.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun create(ctx: &mut TxContext): BridgeTreasury {\n    BridgeTreasury {\n        treasuries: object_bag::new(ctx),\n        supported_tokens: vec_map::empty(),\n        id_token_type_map: vec_map::empty(),\n        waiting_room: bag::new(ctx),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UQ32_32 from Quotient in Move\nDESCRIPTION: Creates a fixed-point value from a quotient specified by its numerator and denominator. Aborts if denominator is zero, if input is too small to be represented, or if input is too large (>= 2^32).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_quotient(numerator: u64, denominator: u64): UQ32_32 {\n    UQ32_32(std::macros::uq_from_quotient!<u64, u128>(\n        numerator,\n        denominator,\n        std::u64::max_value!(),\n        TOTAL_BITS,\n        FRACTIONAL_BITS,\n        abort EDenominator,\n        abort EQuotientTooSmall,\n        abort EQuotientTooLarge,\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: Generating u32 in range with Sui RandomGenerator - Move\nDESCRIPTION: This function generates a random u32 between min and max with a bias of 2^{-64}. It employs the uint_in_range macro for bias control, needing a mutable RandomGenerator, min, and max values to return a u32.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun generate_u32_in_range(g: &mut sui::random::RandomGenerator, min: u32, max: u32): u32 {\n    uint_in_range!(g, min, max, 12)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Candidate Validator Network Address in Sui System\nDESCRIPTION: Updates a candidate validator's network address in the Sui system state. Requires mutable access to SuiSystemState and the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_candidate_validator_network_address(\n    self: &mut SuiSystemState,\n    network_address: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_candidate_validator_network_address(network_address, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Cancel Order Function Implementation\nDESCRIPTION: Implementation of the cancel_order function which allows users to cancel an existing order. The function removes the order from the book and updates the balance_manager's open orders. It does not return anything but emits an OrderCanceled event.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\npublic fun cancel_order(\n        pool: &mut Pool,\n        order_id: ID,\n        balance_manager: address,\n        clock: &Clock,\n        ctx: &mut TxContext,\n    ) {\n        let now = clock::timestamp_ms(clock);\n\n        assert!(pool_open_orders::contains_order(&pool.open_orders, balance_manager, order_id), EOrderNotFound);\n\n        let (\n            client_order_id,\n            price,\n            remaining_quantity,\n            _,\n            is_bid,\n            _,\n            _,\n            _,\n            _,\n        ) = order_book::get_order_info(\n            &pool.order_book,\n            order_id,\n        );\n\n        // Only remove the order from the order_book, but no need to update balance yet\n        // that is done at withdraw time\n        order_book::cancel_order(\n            &mut pool.order_book,\n            &mut pool.open_orders,\n            order_id,\n            balance_manager,\n            constants::CANCEL_ORDER_USER,\n            now,\n        );\n\n        // Update entries count (one per cancel)\n        if (pool.total_entry_count > 0) {\n            pool.total_entry_count = pool.total_entry_count - 1;\n        };\n\n        // Emit event\n        event::emit(\n            OrderCanceled {\n                order_id,\n                client_order_id,\n                remaining_quantity,\n                is_bid,\n                price,\n                base_asset_id: pool.base_asset_id,\n                quote_asset_id: pool.quote_asset_id,\n                pool_id: object::id(pool),\n                reason: constants::CANCEL_ORDER_USER,\n                owner: balance_manager,\n                timestamp: now,\n            }\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Extracting Address from TypeName\nDESCRIPTION: Function that extracts the address part from a TypeName. It aborts if the type is primitive, as primitive types don't have addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/type_name.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_address(self: &TypeName): String {\n    assert!(!self.is_primitive(), ENonModuleType);\n    // Base16 (string) representation of an address has 2 symbols per byte.\n    let len = address::length() * 2;\n    let str_bytes = self.name.as_bytes();\n    let mut addr_bytes = vector[];\n    let mut i = 0;\n    // Read `len` bytes from the type name and push them to addr_bytes.\n    while (i < len) {\n        addr_bytes.push_back(str_bytes[i]);\n        i = i + 1;\n    };\n    ascii::string(addr_bytes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protected Transfer Policy in Move\nDESCRIPTION: Shared object providing authorized access to empty TransferPolicy, enabling rental operations while maintaining tradability guarantees.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic struct ProtectedTP<phantom T> has key, store {\n  id: UID,\n  transfer_policy: TransferPolicy<T>,\n  policy_cap: TransferPolicyCap<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Diff Function in Move\nDESCRIPTION: Deprecated diff function that returns the absolute difference between two u64 values. Recommends using std::u64::diff instead.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/math.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun diff(x: u64, y: u64): u64 {\n    x.diff(y)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionDataV1 struct in Rust\nDESCRIPTION: This code snippet defines the structure `TransactionDataV1` in Rust. It includes fields such as `kind` (TransactionKind), `sender` (SuiAddress), `gas_data` (GasData), and `expiration` (TransactionExpiration). This structure represents the transaction data for sponsored transactions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/sponsored-transactions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n```rust\n#[derive(Debug, PartialEq, Eq, Hash, Clone, Serialize, Deserialize)]\npub struct TransactionDataV1 {\n    pub kind: TransactionKind,\n    pub sender: SuiAddress,\n    pub gas_data: GasData,\n    pub expiration: TransactionExpiration,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Validator P2P Address\nDESCRIPTION: Command to update a validator's P2P address for the next epoch using sui_system::update_validator_next_epoch_p2p_address function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call --package 0x3 --module sui_system --function update_validator_next_epoch_p2p_address --args 0x5 \"[4, 192, 168, 1, 1]\" --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Converting String to Lowercase in Move\nDESCRIPTION: This function converts a given string to its lowercase equivalent. It iterates over the bytes of the input string and uses `char_to_lowercase` to convert each character. The result is a new string with all characters in lowercase.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../std/ascii.md#std_ascii_to_lowercase\">to_lowercase</a>(<a href=\"../std/string.md#std_string\">string</a>: &<a href=\"../std/ascii.md#std_ascii_String\">String</a>): <a href=\"../std/ascii.md#std_ascii_String\">String</a> {\n    <b>let</b> bytes = <a href=\"../std/string.md#std_string\">string</a>.<a href=\"../std/ascii.md#std_ascii_as_bytes\">as_bytes</a>().map_ref!(|<a href=\"../std/ascii.md#std_ascii_byte\">byte</a>| <a href=\"../std/ascii.md#std_ascii_char_to_lowercase\">char_to_lowercase</a>(*<a href=\"../std/ascii.md#std_ascii_byte\">byte</a>));\n    <a href=\"../std/ascii.md#std_ascii_String\">String</a> { bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Milestone-Based Vesting Smart Contract in Move\nDESCRIPTION: Employing milestone-based vesting, this contract includes a Wallet object with milestone control fields, supporting token vesting through achieving specific milestones. The 'new_wallet' and 'update_milestone_percentage' functions set up vesting and milestone status, while 'claim' processes token retrieval. This contract requires milestone specifications and operates in conjunction with Sui's blockchain network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics/vesting-strategies.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\n{\"@inject\": \"examples/vesting/sources/milestone.move\"}\n```\n\n----------------------------------------\n\nTITLE: OrderCanceled Structure Definition in Move\nDESCRIPTION: Struct emitted when a maker order is canceled, containing order details like pool ID, order ID, quantities and pricing information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct OrderCanceled<phantom BaseAsset, phantom QuoteAsset> has copy, drop, store\n```\n\n----------------------------------------\n\nTITLE: Bridge Record Structure Definition in Move\nDESCRIPTION: Core structure for tracking bridge records, containing a bridge message, verified signatures, and claimed status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic struct BridgeRecord has drop, store {\n    message: bridge::message::BridgeMessage,\n    verified_signatures: std::option::Option<vector<vector<u8>>>,\n    claimed: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Removing inner value for upgrade in Move\nDESCRIPTION: Function to remove the inner value from a Versioned object in preparation for an upgrade, returning a capability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/versioned.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove_value_for_upgrade<T: store>(self: &mut Versioned): (T, VersionChangeCap) {\n    (\n        dynamic_field::remove(&mut self.id, self.version),\n        VersionChangeCap {\n            versioned_id: object::id(self),\n            old_version: self.version,\n        },\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Native Type Name Retrieval Functions\nDESCRIPTION: Native functions to get a TypeName representation of a generic type T, with different versions for handling original or defining package IDs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/type_name.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic native fun get<T>(): TypeName;\npublic native fun get_with_original_ids<T>(): TypeName;\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Difference Between u64 Values in Move\nDESCRIPTION: Computes the absolute value of the difference between two u64 values using the standard macros library.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun diff(x: u64, y: u64): u64 {\n    std::macros::num_diff!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Existing Balance Manager with DeepBookClient\nDESCRIPTION: Example showing how to initialize a DeepBookClient with an existing balance manager. Balance managers are required before placing trades on DeepBook.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { decodeSuiPrivateKey } from '@mysten/sui/cryptography';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { config } from 'dotenv';\n\nimport { DeepBookClient } from '../src';\nimport { BalanceManager } from './types';\n\nconfig();\n\n// Used wherever balance manager key is required\nconst BALANCE_MANAGER_KEY = 'MANAGER_1';\n\nclass DeepBookMarketMaker {\n\tdbClient: DeepBookClient; // For building transactions\n\tsuiClient: SuiClient; // For executing transactions\n\tkeypair: Ed25519Keypair; // For signing transactions\n\tenv: 'testnet' | 'mainnet';\n\n\tconstructor(privateKey: string, env: 'testnet' | 'mainnet') {\n\t\tthis.env = env;\n\t\tthis.keypair = this.getSignerFromPK(privateKey);\n\t\tthis.suiClient = new SuiClient({\n\t\t\turl: getFullnodeUrl(env),\n\t\t});\n\t\tthis.dbClient = new DeepBookClient({\n\t\t\taddress: this.getActiveAddress(),\n\t\t\tenv: env,\n\t\t\tclient: this.suiClient,\n\t\t\tbalanceManagers: this.getBalanceManagers(),\n\t\t});\n\t}\n\n\tgetSignerFromPK = (privateKey: string): Ed25519Keypair => {\n\t\tconst { schema, secretKey } = decodeSuiPrivateKey(privateKey);\n\t\tif (schema === 'ED25519') return Ed25519Keypair.fromSecretKey(secretKey);\n\n\t\tthrow new Error(`Unsupported schema: ${schema}`);\n\t};\n\n\tgetActiveAddress() {\n\t\treturn this.keypair.toSuiAddress();\n\t}\n\n\tgetBalanceManagers(): { [key: string]: BalanceManager } {\n\t\t// Used wherever balance manager key is required\n\t\tconst balanceManagerAddress = process.env.BALANCE_MANAGER_ADDRESS;\n\t\tconst balanceManagerTradeCap = process.env.BALANCE_MANAGER_TRADE_CAP;\n\t\tif (!balanceManagerAddress) {\n\t\t\tthrow new Error('No balance manager address found');\n\t\t}\n\t\treturn {\n\t\t\t[BALANCE_MANAGER_KEY]: {\n\t\t\t\taddress: balanceManagerAddress,\n\t\t\t\ttradeCap: balanceManagerTradeCap,\n\t\t\t},\n\t\t};\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Finding minimum between two u128 values\nDESCRIPTION: Returns the smaller of two u128 values using the num_min macro from std::macros.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun min(x: u128, y: u128): u128 {\n    std::macros::num_min!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LOYALTY Token Structure in Move\nDESCRIPTION: Defines the LOYALTY one-time witness (OTW) struct that serves as the token identifier. The struct has only the drop ability and no fields, ensuring single instance creation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin/loyalty.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nstruct LOYALTY has drop {}\n```\n\n----------------------------------------\n\nTITLE: Constructing Google Login URL for zkLogin in TypeScript\nDESCRIPTION: This snippet demonstrates how to construct a Google login URL for testing zkLogin integration. It uses URLSearchParams to set the required OAuth parameters including client_id, redirect_uri, response_type, scope, and nonce.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/zklogin-integration/developer-account.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst REDIRECT_URI = '<YOUR_SITE_URL>';\n\nconst params = new URLSearchParams({\n\t// Configure client ID and redirect URI with an OpenID provider\n\tclient_id: $CLIENT_ID,\n\tredirect_uri: $REDIRECT_URI,\n\tresponse_type: 'id_token',\n\tscope: 'openid',\n\t// See below for details about generation of the nonce\n\tnonce: nonce,\n});\n\nconst loginURL = `https://accounts.google.com/o/oauth2/v2/auth?${params}`;\n```\n\n----------------------------------------\n\nTITLE: Calculating Exponentiation for u256 in Move\nDESCRIPTION: Computes the power of a u256 base raised to a u8 exponent. The function uses std::macros::num_pow to efficiently calculate the result.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pow(base: u256, exponent: u8): u256 {\n    std::macros::num_pow!(base, exponent)\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Versioned object in Move\nDESCRIPTION: Function to upgrade a Versioned object with a new version and value, using the capability from remove_value_for_upgrade.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/versioned.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun upgrade<T: store>(\n    self: &mut Versioned,\n    new_version: u64,\n    new_value: T,\n    cap: VersionChangeCap,\n) {\n    let VersionChangeCap { versioned_id, old_version } = cap;\n    assert!(versioned_id == object::id(self), EInvalidUpgrade);\n    assert!(old_version < new_version, EInvalidUpgrade);\n    dynamic_field::add(&mut self.id, new_version, new_value);\n    self.version = new_version;\n}\n```\n\n----------------------------------------\n\nTITLE: Update Candidate Validator Network Public Key\nDESCRIPTION: Updates a candidate validator's network public key in the system state.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_33\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_candidate_validator_network_pubkey(\n    self: &mut SuiSystemState,\n    network_pubkey: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_candidate_validator_network_pubkey(network_pubkey, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Redeeming Fungible Staked SUI\nDESCRIPTION: Converts FungibleStakedSui into a StakedSui object by interacting with the system state wrapper. Returns a Balance<SUI> object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun redeem_fungible_staked_sui(\n    wrapper: &mut SuiSystemState,\n    fungible_staked_sui: FungibleStakedSui,\n    ctx: &TxContext,\n): Balance<SUI> {\n    wrapper.load_system_state_mut().redeem_fungible_staked_sui(fungible_staked_sui, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Printable ASCII Character in Move\nDESCRIPTION: This function checks if a given byte is a printable ASCII character. It returns `true` if the byte falls within the printable ASCII range (0x20 to 0x7E), and `false` otherwise. This can be used to validate user inputs or filter out non-printable characters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../std/ascii.md#std_ascii_is_printable_char\">is_printable_char</a>(<a href=\"../std/ascii.md#std_ascii_byte\">byte</a>: <a href=\"../std/u8.md#std_u8\">u8</a>): <a href=\"../std/bool.md#std_bool\">bool</a> {\n    <a href=\"../std/ascii.md#std_ascii_byte\">byte</a> &gt;= 0x20 && // Disallow metacharacters\n        <a href=\"../std/ascii.md#std_ascii_byte\">byte</a> &lt;= 0x7E // Don't allow DEL metacharacter\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Circom Circuit for Number Factorization\nDESCRIPTION: Defines a Circom circuit that proves knowledge of factors a and b for a public product c without revealing the factors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/groth16.mdx#2025-04-22_snippet_0\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.1.5;\n\ntemplate Main() {\n    signal input a;\n    signal input b;\n    signal output c;\n\n    c <== a * b;\n}\ncomponent main = Main();\n```\n\n----------------------------------------\n\nTITLE: Address Module Constants and Imports\nDESCRIPTION: Defines core constants and imports for the address module including LENGTH (32 bytes) and MAX address value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/address.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::vector;\nuse sui::hex;\n\nconst LENGTH: u64 = 32;\nconst MAX: u256 = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\nconst EAddressParseError: u64 = 0;\n```\n\n----------------------------------------\n\nTITLE: Fixed-Point Number Comparison Operations\nDESCRIPTION: Implements comparison operations (le, lt, ge, gt) for UQ32_32 fixed-point numbers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq32_32.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun le(a: UQ32_32, b: UQ32_32): bool {\n    a.0 <= b.0\n}\n\npublic fun lt(a: UQ32_32, b: UQ32_32): bool {\n    a.0 < b.0\n}\n\npublic fun ge(a: UQ32_32, b: UQ32_32): bool {\n    a.0 >= b.0\n}\n\npublic fun gt(a: UQ32_32, b: UQ32_32): bool {\n    a.0 > b.0\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Empty Function\nDESCRIPTION: Native function to create an empty vector\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun empty<Element>(): vector<Element>;\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants for SuiSystemState\nDESCRIPTION: Declaration of error constants used by the SuiSystemState module, including errors for incorrect system address and wrong inner version.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nconst ENotSystemAddress: u64 = 0;\nconst EWrongInnerVersion: u64 = 1;\n```\n\n----------------------------------------\n\nTITLE: Mutating Variables Through References in Move\nDESCRIPTION: Shows how to modify variables using mutable references in Move, including conditional modifications and function calls.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\nlet mut x = 0;\nlet r = &mut x;\n*r = 1;\nassert!(x == 1, 42);\n\nlet mut x = 0;\nlet mut y = 1;\nlet r = if (cond) &mut x else &mut y;\n*r = *r + 1;\n\nlet mut x = 0;\nmodify_ref(&mut x);\n\nlet mut v = vector[];\nvector::push_back(&mut v, 100);\nassert!(*vector::borrow(&v, 0) == 100, 42);\n```\n\n----------------------------------------\n\nTITLE: Valid 'use fun' Examples With Different Reference Types\nDESCRIPTION: Examples demonstrating valid 'use fun' declarations for different reference modes. The receiver type can be by-value, by-reference, or by-mutable-reference.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic struct X() has copy, drop, store;\n\npublic fun by_val(_: X) {}\npublic fun by_ref(_: &X) {}\npublic fun by_mut(_: &mut X) {}\n\n// All 3 valid, in any scope\nuse fun by_val as X.v;\nuse fun by_ref as X.r;\nuse fun by_mut as X.m;\n```\n\n----------------------------------------\n\nTITLE: Get Valid Bridge Routes Implementation\nDESCRIPTION: Defines all valid bridge routes between Sui and Ethereum networks, including mainnet-to-mainnet, testnet-to-testnet, and custom network combinations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/chain_ids.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic fun valid_routes(): vector<BridgeRoute> {\n    vector[\n        BridgeRoute { source: SuiMainnet, destination: EthMainnet },\n        BridgeRoute { source: EthMainnet, destination: SuiMainnet },\n        BridgeRoute { source: SuiTestnet, destination: EthSepolia },\n        BridgeRoute { source: SuiTestnet, destination: EthCustom },\n        BridgeRoute { source: SuiCustom, destination: EthCustom },\n        BridgeRoute { source: SuiCustom, destination: EthSepolia },\n        BridgeRoute { source: EthSepolia, destination: SuiTestnet },\n        BridgeRoute { source: EthSepolia, destination: SuiCustom },\n        BridgeRoute { source: EthCustom, destination: SuiTestnet },\n        BridgeRoute { source: EthCustom, destination: SuiCustom }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Return Expression Examples\nDESCRIPTION: Demonstrates the use of explicit return statements in functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_20\n\nLANGUAGE: move\nCODE:\n```\nfun f1(): u64 { return 0 }\nfun f2(): u64 { 0 }\n```\n\n----------------------------------------\n\nTITLE: Expire JWKs Function in Move\nDESCRIPTION: Removes expired JWKs based on a minimum epoch threshold. Maintains at least one JWK per issuer even if all are below the minimum epoch. Requires system address authorization.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\nfun expire_jwks(\n    self: &mut AuthenticatorState,\n    min_epoch: u64,\n    ctx: &TxContext,\n) {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    let inner = load_inner_mut(self);\n    let len = inner.active_jwks.length();\n    let mut issuer_max_epochs = vector[];\n    let mut i = 0;\n    let mut prev_issuer: Option<String> = option::none();\n    while (i < len) {\n        let cur = &inner.active_jwks[i];\n        let cur_iss = &cur.jwk_id.iss;\n        if (prev_issuer.is_none()) {\n            prev_issuer.fill(*cur_iss);\n            issuer_max_epochs.push_back(cur.epoch);\n        } else {\n            if (cur_iss == prev_issuer.borrow()) {\n                let back = issuer_max_epochs.length() - 1;\n                let prev_max_epoch = &mut issuer_max_epochs[back];\n                *prev_max_epoch = (*prev_max_epoch).max(cur.epoch);\n            } else {\n                *prev_issuer.borrow_mut() = *cur_iss;\n                issuer_max_epochs.push_back(cur.epoch);\n            }\n        };\n        i = i + 1;\n    };\n    let mut new_active_jwks: vector<ActiveJwk> = vector[];\n    let mut prev_issuer: Option<String> = option::none();\n    let mut i = 0;\n    let mut j = 0;\n    while (i < len) {\n        let jwk = &inner.active_jwks[i];\n        let cur_iss = &jwk.jwk_id.iss;\n        if (prev_issuer.is_none()) {\n            prev_issuer.fill(*cur_iss);\n        } else if (cur_iss != prev_issuer.borrow()) {\n            *prev_issuer.borrow_mut() = *cur_iss;\n            j = j + 1;\n        };\n        let max_epoch_for_iss = &issuer_max_epochs[j];\n        if (*max_epoch_for_iss < min_epoch || jwk.epoch >= min_epoch) {\n            new_active_jwks.push_back(*jwk);\n        };\n        i = i + 1;\n    };\n    inner.active_jwks = new_active_jwks;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SECP256K1 Address\nDESCRIPTION: Creates a new Sui address using the SECP256K1 key scheme.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsui client new-address secp256k1\n```\n\n----------------------------------------\n\nTITLE: Defining Custodian Structs in Move\nDESCRIPTION: Defines the Account, AccountCap, and Custodian structs used to manage user accounts and balances in DeepBook.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Account<phantom T> has store {\n    available_balance: Balance<T>,\n    locked_balance: Balance<T>,\n}\n\npublic struct AccountCap has key, store {\n    id: UID,\n}\n\npublic struct Custodian<phantom T> has key, store {\n    id: UID,\n    account_balances: Table<ID, Account<T>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Move.lock File Structure Example\nDESCRIPTION: This code shows an example of the structure of tracked address information in the `Move.lock` file. It includes `chain-id`, `original-published-id`, `latest-published-id`, and `published-version` for different environments. This provides a detailed view of how the addresses are stored.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/automated-address-management.mdx#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n\"[env]\n\n[env.testnet]\nchain-id = \\\"4c78adac\\\"\\\noriginal-published-id = \\\"0xa6041ac57f9151d49d00dcdc4f79f8c5ba1e399e1005dcb0fdd1c8632020d5a6\\\"\\\nlatest-published-id = \\\"0xa6041ac57f9151d49d00dcdc4f79f8c5ba1e399e1005dcb0fdd1c8632020d5a6\\\"\\\npublished-version = \\\"1\\\"\\n\n[env.mainnet]\nchain-id = \\\"35834a8a\\\"\\\noriginal-published-id = \\\"0xaee5759aedf6c533634cdd2de412f6e6dfc754a89b0ec554a73597348f334477\\\"\\\nlatest-published-id = \\\"0xaee5759aedf6c533634cdd2de412f6e6dfc754a89b0ec554a73597348f334477\\\"\\\npublished-version = \\\"1\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Data from Nitro Attestation\nDESCRIPTION: The function `user_data` fetches the user data associated with the given NitroAttestationDocument. It returns an optional vector of bytes wrapping the user data if available.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/nitro_attestation.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun user_data(attestation: &sui::nitro_attestation::NitroAttestationDocument): &Option<vector<u8>> {\n    &attestation.user_data\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting String at Specific Index in Move\nDESCRIPTION: Inserts a string at a specific byte index in another string. The index must be at a valid UTF-8 character boundary.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun insert(s: &mut String, at: u64, o: String) {\n    let bytes = &s.bytes;\n    assert!(at <= bytes.length() && internal_is_char_boundary(bytes, at), EInvalidIndex);\n    let l = s.length();\n    let mut front = s.substring(0, at);\n    let end = s.substring(at, l);\n    front.append(o);\n    front.append(end);\n    *s = front;\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Object in Move\nDESCRIPTION: Turns an object into a mutable shared object accessible to everyone. This operation is irreversible. The object must be newly created in the current transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun share_object<T: key>(obj: T) {\n    share_object_impl(obj)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Priority Queue in Move\nDESCRIPTION: Function to create a new priority queue from a vector of entries. It builds a max heap by calling max_heapify_recursive on each parent node starting from the bottom.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/priority_queue.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new<T: drop>(mut entries: vector<Entry<T>>): PriorityQueue<T> {\n    let len = entries.length();\n    let mut i = len / 2;\n    while (i > 0) {\n        i = i - 1;\n        max_heapify_recursive(&mut entries, len, i);\n    };\n    PriorityQueue { entries }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Structs for Display Creation and Updates in Move\nDESCRIPTION: Event structs that are emitted when a new Display is created or when a Display's version is updated. These events facilitate discovery of Display objects for specific types in the Sui ecosystem.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct DisplayCreated<phantom T: key> has copy, drop {\n    id: sui::object::ID\n}\n\npublic struct VersionUpdated<phantom T: key> has copy, drop {\n    id: sui::object::ID,\n    version: u16,\n    fields: sui::vec_map::VecMap<std::string::String, std::string::String>\n}\n```\n\n----------------------------------------\n\nTITLE: Converting ASCII String to Uppercase in Move\nDESCRIPTION: This function converts an ASCII string to its uppercase equivalent. It maps each byte to its uppercase version using the char_to_uppercase helper function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_uppercase(string: &String): String {\n    let bytes = string.as_bytes().map_ref!(|byte| char_to_uppercase(*byte));\n    String { bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Pool Trade Parameters\nDESCRIPTION: Functions to retrieve current and next epoch trade parameters for the pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_17\n\nLANGUAGE: move\nCODE:\n```\npublic fun pool_trade_params(self: &Pool): (u64, u64, u64)\n```\n\n----------------------------------------\n\nTITLE: Transaction Context Management in Sui\nDESCRIPTION: Functions and structures for managing transaction context, including sender information, epoch data, and object creation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TxContext(0x2::tx_context)\npublic fun sender(0x2::tx_context)\nfun native_sender(0x2::tx_context)\npublic fun digest(0x2::tx_context)\npublic fun epoch(0x2::tx_context)\nfun native_epoch(0x2::tx_context)\npublic fun epoch_timestamp_ms(0x2::tx_context)\nfun native_epoch_timestamp_ms(0x2::tx_context)\npublic fun sponsor(0x2::tx_context)\npublic fun fresh_object_address(0x2::tx_context)\nfun fresh_id(0x2::tx_context)\nfun ids_created(0x2::tx_context)\nfun native_ids_created(0x2::tx_context)\nfun native_gas_price(0x2::tx_context)\nfun native_gas_budget(0x2::tx_context)\nfun option_sponsor(0x2::tx_context)\nfun native_sponsor(0x2::tx_context)\nfun derive_id(0x2::tx_context)\n```\n\n----------------------------------------\n\nTITLE: Tabs Component Example\nDESCRIPTION: This snippet demonstrates how to use the `<Tabs>` and `<TabItem>` components to segment content based on user preferences or context. The `groupId` attribute enables persistent user selections across pages. This creates a more focused and personalized documentation experience by allowing users to filter content based on their needs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<Tabs groupId=\"operating-systems\">\n\n<TabItem value=\"linux\" label=\"Linux\">\n\nWhatever content is in here is only displayed when the user selects the **Linux** tab.\n\n</TabItem>\n\n<TabItem value=\"macos\" label=\"MacOS\">\n\nWhatever content is in here is only displayed when the user selects the **MacOS** tab.\n\n</TabItem>\n\n<TabItem value=\"windows\" label=\"Windows\">\n\nWhatever content is in here is only displayed when the user selects the **Windows** tab.\n\n</TabItem>\n\n</Tabs>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<Tabs groupId=\"operating-systems\">\n\n<TabItem value=\"linux\" label=\"Linux\">\n\nWhatever content is in here is only displayed when the user selects the **Linux** tab.\n\n</TabItem>\n\n<TabItem value=\"macos\" label=\"MacOS\">\n\nWhatever content is in here is only displayed when the user selects the **MacOS** tab.\n\n</TabItem>\n\n<TabItem value=\"windows\" label=\"Windows\">\n\nWhatever content is in here is only displayed when the user selects the **Windows** tab.\n\n</TabItem>\n\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Converting u256 to u8 with Overflow Checking in Move\nDESCRIPTION: Attempts to convert a u256 value to u8. Returns None if the value exceeds the maximum u8 value, using std::macros::try_as_u8 for the conversion logic.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u8(x: u256): Option<u8> {\n    std::macros::try_as_u8!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Addition of Group Elements (Move)\nDESCRIPTION: This native function `internal_add` performs the addition of two group elements represented as byte vectors. It takes the group type as a `u8` and two byte vectors (`e1`, `e2`) representing the elements to be added. It returns a new byte vector representing the sum of the two elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/group_ops.md#sui_group_ops_internal_add\">internal_add</a>(type_: u8, e1: &vector&lt;u8&gt;, e2: &vector&lt;u8&gt;): vector&lt;u8&gt;;\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Quote Asset from Pool\nDESCRIPTION: Function to withdraw quote asset from a liquidity pool with quantity check, emitting a withdrawal event and using account capability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\npublic fun withdraw_quote<BaseAsset, QuoteAsset>(\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    quantity: u64,\n    account_cap: &AccountCap,\n    ctx: &mut TxContext\n): Coin<QuoteAsset> {\n    assert!(quantity > 0, EInvalidQuantity);\n    event::emit(WithdrawAsset<QuoteAsset>{\n        pool_id: *object::uid_as_inner(&pool.id),\n        quantity,\n        owner: account_owner(account_cap)\n    });\n    custodian::withdraw_asset(&mut pool.quote_custodian, quantity, account_cap, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Index of Substring in Move\nDESCRIPTION: This function finds the index of the first occurrence of a substring within a string. It returns the index of the substring or the length of the string if the substring is not found. It returns 0 if the substring is empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../std/ascii.md#std_ascii_index_of\">index_of</a>(<a href=\"../std/string.md#std_string\">string</a>: &<a href=\"../std/ascii.md#std_ascii_String\">String</a>, substr: &<a href=\"../std/ascii.md#std_ascii_String\">String</a>): <a href=\"../std/u64.md#std_u64\">u64</a> {\n    <b>let</b> <b>mut</b> i = 0;\n    <b>let</b> (n, m) = (<a href=\"../std/string.md#std_string\">string</a>.<a href=\"../std/ascii.md#std_ascii_length\">length</a>(), substr.<a href=\"../std/ascii.md#std_ascii_length\">length</a>());\n    <b>if</b> (n &lt; m) <b>return</b> n;\n    <b>while</b> (i &lt;= n - m) {\n        <b>let</b> <b>mut</b> j = 0;\n        <b>while</b> (j &lt; m && <a href=\"../std/string.md#std_string\">string</a>.bytes[i + j] == substr.bytes[j]) j = j + 1;\n        <b>if</b> (j == m) <b>return</b> i;\n        i = i + 1;\n    };\n    n\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Pending Stake Withdrawals in Move\nDESCRIPTION: Processes pending stake withdrawals requested during the epoch. Updates pool balances and resets pending withdrawal amounts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\nfun process_pending_stake_withdraw(pool: &mut StakingPool) {\n    pool.sui_balance = pool.sui_balance - pool.pending_total_sui_withdraw;\n    pool.pool_token_balance = pool.pool_token_balance - pool.pending_pool_token_withdraw;\n    pool.pending_total_sui_withdraw = 0;\n    pool.pending_pool_token_withdraw = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Emergency Operation Payload in Move\nDESCRIPTION: A function that extracts an emergency operation payload from a bridge message. The payload is a single byte representing the operation type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun extract_emergency_op_payload(message: &BridgeMessage): EmergencyOp {\n    assert!(message.payload.length() == 1, ETrailingBytes);\n    EmergencyOp { op_type: message.payload[0] }\n}\n```\n\n----------------------------------------\n\nTITLE: Peeling Option Address with Sui BCS in Move\nDESCRIPTION: The function `peel_option_address` deserializes a serialized byte array to an `Option<address>` using the `peel_option` method of Sui BCS. It requires `sui::bcs::BCS` as a mutable reference and invokes the `peel_address` method for extracting the address value. The result is encapsulated in an Option type, handling the presence or absence of an address value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bcs.md#sui_bcs_peel_option_address\">peel_option_address</a>(<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>: &<b>mut</b> <a href=\"../sui/bcs.md#sui_bcs_BCS\">BCS</a>): Option&lt;<b>address</b>&gt; {\n    <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_option\">peel_option</a>!(|<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>| <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_address\">peel_address</a>())\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Add Dynamic Object Field\nDESCRIPTION: Package-internal function to add a new dynamic object field with given name and value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun internal_add<Name: copy + drop + store, Value: key>(\n    object: &mut UID,\n    name: Name,\n    value: Value,\n) {\n    add_impl!(object, name, value)\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Base Asset from Pool\nDESCRIPTION: Function to withdraw base asset from a liquidity pool with quantity check, emitting a withdrawal event and using account capability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\npublic fun withdraw_base<BaseAsset, QuoteAsset>(\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    quantity: u64,\n    account_cap: &AccountCap,\n    ctx: &mut TxContext\n): Coin<BaseAsset> {\n    assert!(quantity > 0, EInvalidQuantity);\n    event::emit(WithdrawAsset<BaseAsset>{\n        pool_id: *object::uid_as_inner(&pool.id),\n        quantity,\n        owner: account_owner(account_cap)\n    });\n    custodian::withdraw_asset(&mut pool.base_custodian, quantity, account_cap, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Gas Coins Output in Sui CLI\nDESCRIPTION: Displays the output of the gas command showing coin IDs, MIST balance, and SUI balance for the specified address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n╭────────────────────────────────────────────────────────────────────┬────────────────────┬──────────────────╮\n│ gasCoinId                                                          │ mistBalance (MIST) │ suiBalance (SUI) │\n├────────────────────────────────────────────────────────────────────┼────────────────────┼──────────────────┤\n│ 0x205972830acd8264a38b9a1776a1b72a1ae626fa23a4d1f12249349ce3b83c06 │ 200000000000       │ 200.00           │\n│ 0x56d76420a5bc7d356e3930e6a2ddc61cbbc0c87ea5c5f3cc3ac5952b4d52be5a │ 200000000000       │ 200.00           │\n│ 0xc9b447fff18f13fa035e028534b8344d5fc8a8760248fad10155e78f44dc3a52 │ 200000000000       │ 200.00           │\n│ 0xe373de9bdbd3dbd4f5f707f144c83af74a181cdb3903a953ee366f48e33865c7 │ 200000000000       │ 200.00           │\n│ 0xf7adb6aeb18eb409c03fe88cc31711b61a65333e0fdd88c1815d4ec75f713f31 │ 200000000000       │ 200.00           │\n╰────────────────────────────────────────────────────────────────────┴────────────────────┴──────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Description in Sui System\nDESCRIPTION: Updates a validator's description in the Sui system state. Requires mutable access to SuiSystemState and the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_description(\n    self: &mut SuiSystemState,\n    description: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_validator_description(description, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Primitive Types in Move\nDESCRIPTION: Function that determines whether a TypeName represents a primitive type (u8, u16, u32, u64, u128, u256, bool, address, vector) by examining its string representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/type_name.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun is_primitive(self: &TypeName): bool {\n    let bytes = self.name.as_bytes();\n    bytes == &b\"bool\" ||\n        bytes == &b\"u8\" ||\n        bytes == &b\"u16\" ||\n        bytes == &b\"u32\" ||\n        bytes == &b\"u64\" ||\n        bytes == &b\"u128\" ||\n        bytes == &b\"u256\" ||\n        bytes == &b\"address\" ||\n        (\n            bytes.length() >= 6 &&\n            bytes[0] == ASCII_V &&\n            bytes[1] == ASCII_E &&\n            bytes[2] == ASCII_C &&\n            bytes[3] == ASCII_T &&\n            bytes[4] == ASCII_O &&\n            bytes[5] == ASCII_R,\n        )\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Groth16 Zero-Knowledge Proof\nDESCRIPTION: Verifies a Groth16 zero-knowledge proof using prepared verifying key, public inputs and proof points. Returns boolean indicating proof validity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/groth16.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun verify_groth16_proof(\n    curve: &Curve,\n    prepared_verifying_key: &PreparedVerifyingKey,\n    public_proof_inputs: &PublicProofInputs,\n    proof_points: &ProofPoints,\n): bool {\n    verify_groth16_proof_internal(\n        curve.id,\n        &prepared_verifying_key.vk_gamma_abc_g1_bytes,\n        &prepared_verifying_key.alpha_g1_beta_g2_bytes,\n        &prepared_verifying_key.gamma_g2_neg_pc_bytes,\n        &prepared_verifying_key.delta_g2_neg_pc_bytes,\n        &public_proof_inputs.bytes,\n        &proof_points.bytes,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Stake Withdrawal in Sui Move\nDESCRIPTION: Processes a request to withdraw stake from a validator's staking pool. This function returns the principal amount plus any earned rewards and updates the validator's next epoch stake accordingly.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_35\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun request_withdraw_stake(\n    self: &mut Validator,\n    staked_sui: StakedSui,\n    ctx: &TxContext,\n): Balance<SUI> {\n    let principal_amount = staked_sui.staked_sui_amount();\n    let stake_activation_epoch = staked_sui.stake_activation_epoch();\n    let withdrawn_stake = self.staking_pool.request_withdraw_stake(staked_sui, ctx);\n    let withdraw_amount = withdrawn_stake.value();\n    let reward_amount = withdraw_amount - principal_amount;\n    self.next_epoch_stake = self.next_epoch_stake - withdraw_amount;\n    event::emit(UnstakingRequestEvent {\n        pool_id: self.staking_pool_id(),\n        validator_address: self.metadata.sui_address,\n        staker_address: ctx.sender(),\n        stake_activation_epoch,\n        unstaking_epoch: ctx.epoch(),\n        principal_amount,\n        reward_amount,\n    });\n    withdrawn_stake\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Table Size in Sui Table (Move)\nDESCRIPTION: Function that returns the size of a Table, representing the number of key-value pairs currently stored. Simply returns the size field of the Table struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic fun length<K: copy + drop + store, V: store>(table: &Table<K, V>): u64 {\n    table.size\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing num_to_string Macro in Move\nDESCRIPTION: A macro function that converts a numeric value to its string representation by repeatedly extracting digits and building a string.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_to_string($x: _): String {\n    let mut x = $x;\n    if (x == 0) {\n        return b\"0\".to_string()\n    };\n    let mut buffer = vector[];\n    while (x != 0) {\n        buffer.push_back(((48 + x % 10) as u8));\n        x = x / 10;\n    };\n    buffer.reverse();\n    buffer.to_string()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderPlaced Event Struct in Move\nDESCRIPTION: Defines a struct for the OrderPlaced event that is emitted when a maker order is added to the order book. It includes details about the order such as its ID, owner, quantity, price, and expiration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct OrderPlaced<phantom BaseAsset, phantom QuoteAsset> has copy, drop, store {\n    pool_id: sui::object::ID,\n    order_id: u64,\n    client_order_id: u64,\n    is_bid: bool,\n    owner: address,\n    original_quantity: u64,\n    base_asset_quantity_placed: u64, \n    price: u64,\n    expire_timestamp: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting to Only Additive Upgrades in Move\nDESCRIPTION: This entry function restricts package upgrades through a given UpgradeCap to only additive changes or dependency modifications.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun only_additive_upgrades(cap: &mut UpgradeCap) {\n    cap.restrict(ADDITIVE)\n}\n```\n\n----------------------------------------\n\nTITLE: Component for Generating Proof of Experience NFT - TypeScript\nDESCRIPTION: The ownedServicePage component enables service owners to mint PoE NFTs for customers after dining. This process is managed via the useServicePoEGeneration custom hook and integrates with the NFT minting logic, requiring TypeScript and React.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { useServicePoEGeneration } from 'some-hook';\n\nconst OwnedServicePage = ({ serviceId }) => {\n    const { generatePoE } = useServicePoEGeneration();\n\n    const handleMintPoE = () => {\n        generatePoE(serviceId);\n    };\n\n    return <button onClick={handleMintPoE}>Mint PoE</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Error Constants - Move\nDESCRIPTION: Defines error constant for index out of bounds error in vector operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nconst EINDEX_OUT_OF_BOUNDS: u64 = 131072;\n```\n\n----------------------------------------\n\nTITLE: Creating VecMap from arrays in Rust\nDESCRIPTION: This helper function creates a VecMap<String, String> from arrays of keys and values. It's used internally to populate metadata for tokenized assets when creating NFTs with unique properties.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nfun create_vec_map_from_arrays(\n        keys: vector<String>,\n        values: vector<String>\n    ): VecMap<String, String> {}\n```\n\n----------------------------------------\n\nTITLE: Extracting AddTokenOnSui Message in Rust\nDESCRIPTION: Extracts an AddTokenOnSui message from a BridgeMessage. It parses the payload to get token information and constructs an AddTokenOnSui struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_8\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun extract_add_tokens_on_sui(message: &BridgeMessage): AddTokenOnSui {\n    let mut bcs = bcs::new(message.payload);\n    let native_token = bcs.peel_bool();\n    let token_ids = bcs.peel_vec_u8();\n    let token_type_names_bytes = bcs.peel_vec_vec_u8();\n    let token_prices = bcs.peel_vec_u64();\n    let mut n = 0;\n    let mut token_type_names = vector[];\n    while (n < token_type_names_bytes.length()){\n        token_type_names.push_back(ascii::string(*token_type_names_bytes.borrow(n)));\n        n = n + 1;\n    };\n    assert!(bcs.into_remainder_bytes().is_empty(), ETrailingBytes);\n    AddTokenOnSui {\n        native_token,\n        token_ids,\n        token_type_names,\n        token_prices\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UQ32_32 from Integer in Move\nDESCRIPTION: Creates a fixed-point value from an integer. This function should be preferred over using from_raw() for creating UQ32_32 values from integers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_int(integer: u32): UQ32_32 {\n    UQ32_32(std::macros::uq_from_int!(integer, FRACTIONAL_BITS))\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping TableVec in Move\nDESCRIPTION: The `drop` function drops a possibly non-empty TableVec `t`. This function requires that the element type `Element` implements the drop ability, ensuring proper resource management.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table_vec.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun drop<Element: drop, store>(t: sui::table_vec::TableVec<Element>) {\n    let TableVec { contents } = t;\n    contents.drop()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Candidate Network Public Key in Move\nDESCRIPTION: This function updates the network public key of a candidate validator. It checks if the validator is in pre-active state, updates the key, and validates the metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_89\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_candidate_network_pubkey(\n    self: &mut Validator,\n    network_pubkey: vector<u8>,\n) {\n    assert!(self.is_preactive(), ENotValidatorCandidate);\n    self.metadata.network_pubkey_bytes = network_pubkey;\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing All Orders Cancellation in TypeScript SDK for SUI\nDESCRIPTION: TypeScript SDK implementation for canceling all orders for an account on SUI. Takes token types and account capability, and constructs the transaction block to cancel all orders.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @description: Cancel all limit orders under a certain account capacity\n * @param token1: Full coin type(recommend) of base asset \"0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::wbtc::WBTC\" for example\n * @param token2: Full coin type(recommend) of quote asset \"0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::usdt::USDT\" for example\n * @param accountCap: Object id of account capacity under usr address, created after invoking createAccount\n * @param overrides: overriders for blockchain params. Like gas budget, transaction block and the provider, default we will set to the max gas budget, and create a new transaction block\n * @notice: the packageId should be set in configs.json, if it is not set, the transaction will fail.\n */\npublic async cancelAllOrders(\n    token1: string,\n    token2: string,\n    accountCap: string,\n    overrides: Overrides = new Overrides(),\n): Promise<TransactionBlock> {\n    const tokenType1 = convertToTokenType(token1, this.records);\n    const tokenType2 = convertToTokenType(token2, this.records);\n    const poolInfo: PoolInfo = getPoolInfoByRecords(tokenType1, tokenType2, this.records);\n    overrides.txb.moveCall({\n        typeArguments: [token1, token2],\n        target: `${this.configs.swapPackageId}::clob::cancel_all_orders`,\n        arguments: [overrides.txb.object(poolInfo.clob), overrides.txb.object(accountCap)],\n    });\n    overrides.txb.setGasBudget(overrides.gasBudget);\n    return overrides.txb;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Validator Commission Rate - Move\nDESCRIPTION: This function returns the commission rate of a validator by accessing the commission_rate field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_68\n\nLANGUAGE: Move\nCODE:\n```\npublic fun commission_rate(self: &Validator): u64 {\n    self.commission_rate\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public Key from Nitro Attestation\nDESCRIPTION: The function `public_key` retrieves the public key associated with the provided NitroAttestationDocument. It is an optional output wrapped in std::option::Option and returns a vector of bytes if the public key exists.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/nitro_attestation.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun public_key(attestation: &sui::nitro_attestation::NitroAttestationDocument): &Option<vector<u8>> {\n    &attestation.public_key\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Client dApp Template\nDESCRIPTION: Commands to scaffold a new React client dApp using PNPM or Yarn.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm create @mysten/dapp --template react-client-dapp\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn create @mysten/dapp --template react-client-dapp\n```\n\n----------------------------------------\n\nTITLE: Checking if Address is a Validator Candidate in Move\nDESCRIPTION: Implementation of is_validator_candidate function that returns true if the given address is a validator candidate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_60\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_validator_candidate(self: &ValidatorSet, addr: address): bool {\n    self.validator_candidates.contains(addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Vectors to Prevent Copies in Move\nDESCRIPTION: Shows how to use the 'move' keyword to prevent accidental copies of large vectors in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/primitive-types/vector.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nlet x = vector[10];\nlet y = move x;\nlet z = x; // ERROR! x has been moved\n(y, z)\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorEpochInfoEvent Structure in Move\nDESCRIPTION: This struct holds event information related to staking and rewards for each validator during epoch advancement. It captures essential details such as stake amount and commission rates that are emitted during the progression of epochs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\n<pre><code><b>public</b> <b>struct</b> <a href=\"../sui_system/validator_set.md#sui_system_validator_set_ValidatorEpochInfoEvent\">ValidatorEpochInfoEvent</a> <b>has</b> <b>copy</b>, drop\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Accessing Publisher Module Name in Move\nDESCRIPTION: Retrieves the name of the module associated with the Publisher object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun published_module(self: &Publisher): &String {\n    &self.module_name\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UQ32_32 Struct in Move\nDESCRIPTION: Defines the UQ32_32 struct representing a fixed-point number with 32 integer bits and 32 fractional bits. It is stored as a 64-bit unsigned integer.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq32_32.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct UQ32_32 has copy, drop, store {\n    0: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value Between Two u32 Numbers\nDESCRIPTION: Returns the smaller of two u32 values by using the std::macros::num_min macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun min(x: u32, y: u32): u32 {\n    std::macros::num_min!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for a Specific Metric\nDESCRIPTION: This command allows the user to search for specific metrics in the Sui node's metrics output.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ curl http://localhost:9184/metrics | grep <METRIC>\n```\n\n----------------------------------------\n\nTITLE: Updating Candidate Worker Public Key in Move\nDESCRIPTION: This function updates the Narwhal worker public key of a candidate validator. It checks if the validator is in pre-active state, updates the key, and validates the metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_91\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_candidate_worker_pubkey(\n    self: &mut Validator,\n    worker_pubkey: vector<u8>,\n) {\n    assert!(self.is_preactive(), ENotValidatorCandidate);\n    self.metadata.worker_pubkey_bytes = worker_pubkey;\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitwise NOT Operation for u64 in Move\nDESCRIPTION: Performs a bitwise NOT operation on a u64 value, flipping all bits from 0 to 1 and 1 to 0. The implementation uses XOR with the maximum u64 value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bitwise_not(x: u64): u64 {\n    x ^ max_value!()\n}\n```\n\n----------------------------------------\n\nTITLE: JWK Comparison Function in Move\nDESCRIPTION: Implements comparison between two ActiveJwk objects by comparing their fields in a specific order: issuer, key ID, key type, exponent, modulus, and algorithm\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\nfun jwk_lt(a: &ActiveJwk, b: &ActiveJwk): bool {\n    if (&a.jwk_id.iss != &b.jwk_id.iss) {\n        return string_bytes_lt(&a.jwk_id.iss, &b.jwk_id.iss)\n    };\n    if (&a.jwk_id.kid != &b.jwk_id.kid) {\n        return string_bytes_lt(&a.jwk_id.kid, &b.jwk_id.kid)\n    };\n    if (&a.jwk.kty != &b.jwk.kty) {\n        return string_bytes_lt(&a.jwk.kty, &b.jwk.kty)\n    };\n    if (&a.jwk.e != &b.jwk.e) {\n        return string_bytes_lt(&a.jwk.e, &b.jwk.e)\n    };\n    if (&a.jwk.n != &b.jwk.n) {\n        return string_bytes_lt(&a.jwk.n, &b.jwk.n)\n    };\n    string_bytes_lt(&a.jwk.alg, &b.jwk.alg)\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Subtraction of Group Elements (Move)\nDESCRIPTION: This native function `internal_sub` performs the subtraction of two group elements represented as byte vectors. It accepts the group type as a `u8` and two byte vectors, `e1` and `e2`, representing the elements.  The function returns a new byte vector that represents the result of subtracting `e2` from `e1`.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/group_ops.md#sui_group_ops_internal_sub\">internal_sub</a>(type_: u8, e1: &vector&lt;u8&gt;, e2: &vector&lt;u8&gt;): vector&lt;u8&gt;;\n```\n\n----------------------------------------\n\nTITLE: Creating SuiSystemState at Genesis in Move\nDESCRIPTION: This function creates the singleton SuiSystemState object at genesis. It initializes validators, allocates tokens according to the distribution schedule, and sets up system parameters. It can only be called once during genesis (epoch 0).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/genesis.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\nfun create(\n    sui_system_state_id: UID,\n    mut sui_supply: Balance<SUI>,\n    genesis_chain_parameters: GenesisChainParameters,\n    genesis_validators: vector<GenesisValidatorMetadata>,\n    token_distribution_schedule: TokenDistributionSchedule,\n    ctx: &mut TxContext,\n) {\n    // Ensure this is only called at genesis\n    assert!(ctx.epoch() == 0, ENotCalledAtGenesis);\n    // Create all the `Validator` structs\n    let mut validators = vector[];\n    genesis_validators.do!(|genesis_validator| {\n        let GenesisValidatorMetadata {\n            name,\n            description,\n            image_url,\n            project_url,\n            sui_address,\n            gas_price,\n            commission_rate,\n            protocol_public_key,\n            proof_of_possession,\n            network_public_key,\n            worker_public_key,\n            network_address,\n            p2p_address,\n            primary_address,\n            worker_address,\n        } = genesis_validator;\n        let validator = validator::new(\n            sui_address,\n            protocol_public_key,\n            network_public_key,\n            worker_public_key,\n            proof_of_possession,\n            name,\n            description,\n            image_url,\n            project_url,\n            network_address,\n            p2p_address,\n            primary_address,\n            worker_address,\n            gas_price,\n            commission_rate,\n            ctx,\n        );\n        // Ensure that each validator is unique\n        assert!(\n            !validator_set::is_duplicate_validator(&validators, &validator),\n            EDuplicateValidator,\n        );\n        validators.push_back(validator);\n    });\n    let TokenDistributionSchedule {\n        stake_subsidy_fund_mist,\n        allocations,\n    } = token_distribution_schedule;\n    let subsidy_fund = sui_supply.split(stake_subsidy_fund_mist);\n    let storage_fund = balance::zero();\n    // Allocate tokens and staking operations\n    allocate_tokens(sui_supply, allocations, &mut validators, ctx);\n    // Activate all validators\n    validators.do_mut!(|validator| validator.activate(0));\n    let system_parameters = sui_system_state_inner::create_system_parameters(\n        genesis_chain_parameters.epoch_duration_ms,\n        genesis_chain_parameters.stake_subsidy_start_epoch,\n        // Validator committee parameters\n        genesis_chain_parameters.max_validator_count,\n        genesis_chain_parameters.min_validator_joining_stake,\n        genesis_chain_parameters.validator_low_stake_threshold,\n        genesis_chain_parameters.validator_very_low_stake_threshold,\n        genesis_chain_parameters.validator_low_stake_grace_period,\n        ctx,\n    );\n    let stake_subsidy = stake_subsidy::create(\n        subsidy_fund,\n        genesis_chain_parameters.stake_subsidy_initial_distribution_amount,\n        genesis_chain_parameters.stake_subsidy_period_length,\n        genesis_chain_parameters.stake_subsidy_decrease_rate,\n        ctx,\n    );\n    sui_system::create(\n        sui_system_state_id,\n        validators,\n        storage_fund,\n        genesis_chain_parameters.protocol_version,\n        genesis_chain_parameters.chain_start_timestamp_ms,\n        system_parameters,\n        stake_subsidy,\n        ctx,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Debug Information in Move\nDESCRIPTION: The print function is used to print debug information for a given value of any type T. It takes a reference to the value as input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/debug.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun print<T>(x: &T);\n```\n\n----------------------------------------\n\nTITLE: Big-Endian U64 Value Extraction\nDESCRIPTION: Extracts a 64-bit unsigned integer from a BCS encoded byte stream in big-endian format.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\nfun peel_u64_be(bcs: &mut BCS): u64 {\n    let (mut value, mut i) = (0u64, 64u8);\n    while (i > 0) {\n        i = i - 8;\n        let byte = (bcs::peel_u8(bcs) as u64);\n        value = value + (byte << i);\n    };\n    value\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Some Option in Move\nDESCRIPTION: Function to create an Option containing a value (Some).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun some<Element>(e: Element): Option<Element> {\n    Option { vec: vector::singleton(e) }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AssetManager in Rust\nDESCRIPTION: This snippet defines a module with an AssetManager struct that references the Asset object from the previous module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/simulating-refs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nmodule another_module {\n    struct AssetManager has key {\n        asset: Asset,\n    }\n\n    public fun get_asset(manager: &AssetManager): &Asset {\n        &manager.asset\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EInvalidStakeAmount Error Constant in Move\nDESCRIPTION: Error constant (11) used when the stake amount provided is invalid or incorrect.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_18\n\nLANGUAGE: move\nCODE:\n```\nconst EInvalidStakeAmount: u64 = 11;\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Move Unit Test in Sui\nDESCRIPTION: This code snippet demonstrates how to write a basic unit test for a Move package in Sui. It creates a test function that verifies the creation and properties of a 'Sword' object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/build-test.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\n#[test]\nfun test_sword_create() {\n    // Create a dummy TxContext for testing\n    let ctx = tx_context::dummy();\n\n    // Create a sword\n    let sword = Sword {\n        id: object::new(&mut ctx),\n        magic: 42,\n        strength: 7,\n    };\n\n    // Check if accessor functions return correct values\n    assert!(sword.magic() == 42 && sword.strength() == 7, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Pool Tokens to SUI Amount in Move\nDESCRIPTION: Calculates the equivalent SUI amount for a given pool token amount using the provided exchange rate. Returns a 1:1 conversion if either the SUI amount or pool token amount in the exchange rate is zero.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_44\n\nLANGUAGE: Move\nCODE:\n```\nfun get_sui_amount(exchange_rate: &PoolTokenExchangeRate, token_amount: u64): u64 {\n    // When either amount is 0, that means we have no stakes with this pool.\n    // The other amount might be non-zero when there's dust left in the pool.\n    if (exchange_rate.sui_amount == 0 || exchange_rate.pool_token_amount == 0) {\n        return token_amount\n    };\n    mul_div!(exchange_rate.sui_amount, token_amount, exchange_rate.pool_token_amount)\n}\n```\n\n----------------------------------------\n\nTITLE: Adjust Transfer Records\nDESCRIPTION: Updates the transfer records by removing stale entries and backfilling new hours up to the current time. Maintains a 24-hour sliding window of transfer amounts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/limiter.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\nfun adjust_transfer_records(self: &mut TransferRecord, current_hour_since_epoch: u64) {\n    if (self.hour_head == current_hour_since_epoch) {\n        return\n    };\n    let target_tail = current_hour_since_epoch - 23;\n    if (self.hour_head < target_tail) {\n        self.per_hour_amounts = vector[];\n        self.total_amount = 0;\n        self.hour_tail = target_tail;\n        self.hour_head = target_tail;\n        self.per_hour_amounts.push_back(0);\n    } else {\n        while (self.hour_tail < target_tail) {\n            self.total_amount = self.total_amount - self.per_hour_amounts.remove(0);\n            self.hour_tail = self.hour_tail + 1;\n        }\n    };\n    while (self.hour_head < current_hour_since_epoch) {\n        self.per_hour_amounts.push_back(0);\n        self.hour_head = self.hour_head + 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommitteeUpdateEvent Structure in Move\nDESCRIPTION: Defines an event structure that is emitted when the bridge committee is updated, containing the new committee members and the stake participation percentage.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct CommitteeUpdateEvent has copy, drop {\n    members: sui::vec_map::VecMap<vector<u8>, bridge::committee::CommitteeMember>,\n    stake_participation_percentage: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DenyCapV2 Struct in Move\nDESCRIPTION: Definition of the DenyCapV2 struct which provides the capability to deny addresses from using a specific currency, including a global pause functionality that can prevent all transactions with that coin.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic struct DenyCapV2<phantom T> has key, store {\n    id: sui::object::UID,\n    allow_global_pause: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Call Move Function with PTB using Sui Client\nDESCRIPTION: This command calls a Move function from a package and module using a Programmable Transaction Block (PTB). PTBs allow for more complex and flexible transaction logic.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client ptb --move-call p::m::f \\\"<type>\\\" args\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Labeled Control Flow Example in Move\nDESCRIPTION: Example showing multiple labeled control flow statements in nested loops. Demonstrates usage of break and continue with different labels for precise control flow management.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/labeled-control-flow.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\n'outer: loop {\n    ...\n    'inner: while (cond) {\n        ...\n        if (cond0) { break 'outer value }\n        ...\n        if (cond1) { continue 'inner }\n        else if (cond2) { continue 'outer }\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Candidate Primary Address in Move\nDESCRIPTION: Updates the primary address of a candidate validator. This function checks if the validator is in pre-active state and ensures the new address doesn't exceed the maximum allowed length.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_83\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_candidate_primary_address(\n    self: &mut Validator,\n    primary_address: vector<u8>,\n) {\n    assert!(self.is_preactive(), ENotValidatorCandidate);\n    assert!(\n        primary_address.length() <= MAX_VALIDATOR_METADATA_LENGTH,\n        EValidatorMetadataExceedingLengthLimit,\n    );\n    let primary_address = primary_address.to_ascii_string().to_string();\n    self.metadata.primary_address = primary_address;\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: VerifiedIssuer Deletion Function\nDESCRIPTION: Function to delete a VerifiedIssuer object and clean up its resources.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_issuer.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun delete(verified_issuer: VerifiedIssuer) {\n    let VerifiedIssuer { id, owner: _, issuer: _ } = verified_issuer;\n    id.delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UQ64_64 Value from Quotient\nDESCRIPTION: Creates a fixed-point value from a quotient specified by numerator and denominator. Aborts if the denominator is zero, if the input is too small to represent, or if it's too large.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_quotient(numerator: u128, denominator: u128): UQ64_64 {\n    UQ64_64(std::macros::uq_from_quotient!<u128, u256>(\n        numerator,\n        denominator,\n        std::u128::max_value!(),\n        TOTAL_BITS,\n        FRACTIONAL_BITS,\n        abort EDenominator,\n        abort EQuotientTooSmall,\n        abort EQuotientTooLarge,\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: Accessor Function for Asset Price Update Message Type\nDESCRIPTION: Returns the constant value for asset price update message type. This function provides a public interface to access the UPDATE_ASSET_PRICE constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message_types.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic fun update_asset_price(): u8 { UPDATE_ASSET_PRICE }\n```\n\n----------------------------------------\n\nTITLE: Order Book Visualization\nDESCRIPTION: Mermaid flowchart showing the structure of buy and sell side orders with their respective prices and quantities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/design.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph Buy side orders\n     B(\"5 @ .4222\\n10 @ .4221\\n125 @ .4215\\n50 @ .4214\\n200 @ .4200\\n10000 @ .4000\")\n    end\n    subgraph Sell side orders\n     C(\"10000 @ .4500\\n10 @ .4421\\n125 @ .4255\\n50 @ .4244\\n200 @ .4240\\n15 @ .4230\")\n    end\n    B---C;\n```\n\n----------------------------------------\n\nTITLE: Creating Key for Bridge Messages in Move\nDESCRIPTION: This function generates a unique key for a bridge message. It requires the source chain ID, message type, and a sequence number as input. The function returns a BridgeMessageKey object that can be used to identify and handle messages. Dependencies include the bridge message key module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../bridge/message.md#bridge_message_create_key\">create_key</a>(<a href=\"../bridge/message.md#bridge_message_source_chain\">source_chain</a>: u8, <a href=\"../bridge/message.md#bridge_message_message_type\">message_type</a>: u8, bridge_seq_num: u64): <a href=\"../bridge/message.md#bridge_message_BridgeMessageKey\">BridgeMessageKey</a> {\n    <a href=\"../bridge/message.md#bridge_message_BridgeMessageKey\">BridgeMessageKey</a> { <a href=\"../bridge/message.md#bridge_message_source_chain\">source_chain</a>, <a href=\"../bridge/message.md#bridge_message_message_type\">message_type</a>, bridge_seq_num }\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Combined Signed Transaction (Sui CLI)\nDESCRIPTION: This command executes a combined signed transaction using the Sui CLI. It takes the signed transaction bytes (`--signed-tx-bytes`) as input. This command executes the signed transaction and returns the certificate and transaction effects if successful.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/transaction-auth/offline-signing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sui client execute-combined-signed-tx --signed-tx-bytes <SIGNED-TX-BYTES>\n```\n\n----------------------------------------\n\nTITLE: Accessing TypeName String Representation\nDESCRIPTION: Function that returns a reference to the internal string representation of a TypeName.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/type_name.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun borrow_string(self: &TypeName): &String {\n    &self.name\n}\n```\n\n----------------------------------------\n\nTITLE: Matched Order Metadata Info\nDESCRIPTION: Placeholder implementation for retrieving matched order metadata information. Currently aborts with code 1337.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_44\n\nLANGUAGE: Move\nCODE:\n```\npublic fun matched_order_metadata_info<BaseAsset, QuoteAsset>(\n    _matched_order_metadata: &MatchedOrderMetadata<BaseAsset, QuoteAsset>\n) : ( ID, u64, bool, address, address, u64, u64, u64, u64) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: UTF-8 String Append Implementation\nDESCRIPTION: Appends UTF-8 encoded bytes to an existing string after validation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun append_utf8(s: &mut String, bytes: vector<u8>) {\n    s.append(utf8(bytes))\n}\n```\n\n----------------------------------------\n\nTITLE: Linear Vesting Smart Contract in Move\nDESCRIPTION: This Move smart contract supports linear vesting, gradually releasing tokens over a time period. It initializes Wallet objects with start and duration parameters, determining vested tokens via 'claim' based on the current time. Sui framework dependencies apply. Inputs include token amounts, start timestamps, and specified durations, with constraints to the established timeline.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics/vesting-strategies.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\n{\"@inject\": \"examples/vesting/sources/linear.move\"}\n```\n\n----------------------------------------\n\nTITLE: Internal Remove Dynamic Object Field\nDESCRIPTION: Package-internal function to remove a dynamic object field and return its value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun internal_remove<Name: copy + drop + store, Value: key>(\n    object: &mut UID,\n    name: Name,\n): Value {\n    remove_impl!(object, name)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing diff function for U16 values\nDESCRIPTION: Function that returns the absolute difference between two u16 values using the standard macros num_diff utility.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun diff(x: u16, y: u16): u16 {\n    std::macros::num_diff!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vector by Applying a Function to Indices in Move\nDESCRIPTION: This macro function creates a vector of length n by calling the provided function on each index. It allows for generating vectors based on a custom function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun tabulate<$T>($n: u64, $f: |u64| -> $T): vector<$T> {\n    let mut v = vector[];\n    let n = $n;\n    n.do!(|i| v.push_back($f(i)));\n    v\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ASCII String Structure in Move\nDESCRIPTION: Definition of the String struct that holds a vector of bytes representing valid ASCII characters. The struct has copy, drop, and store abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic struct String has copy, drop, store {\n    bytes: vector<u8>\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Comparison Using References in Move\nDESCRIPTION: Demonstrates the more efficient approach to equality comparison by using references instead of copies. This pattern avoids unnecessary copying of potentially large data structures.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/equality.md#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\nlet v1: vector<u8> = function_that_returns_vector();\nlet v2: vector<u8> = function_that_returns_vector();\nassert!(&v1 == &v2, 42);\n//      ^      ^\nuse_two_vectors(v1, v2);\n\nlet s1: Foo = function_that_returns_large_struct();\nlet s2: Foo = function_that_returns_large_struct();\nassert!(&s1 == &s2, 42);\n//      ^      ^\nuse_two_foos(s1, s2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only Function Accessors for Weather Oracle in Sui Move\nDESCRIPTION: Collection of accessor functions that provide read-only access to various properties of a CityWeatherOracle object. These functions allow retrieving specific weather data fields like name, country, coordinates, and weather metrics.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/weather-oracle.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n// --------------- Read-only References ---------------\n\n/// Returns the `name` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_name(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): String {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.name\n}\n/// Returns the `country` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_country(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): String {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.country\n}\n/// Returns the `latitude` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_latitude(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): u32 {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.latitude\n}\n/// Returns the `positive_latitude` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_positive_latitude(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): bool {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.positive_latitude\n}\n/// Returns the `longitude` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_longitude(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): u32 {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.longitude\n}\n/// Returns the `positive_longitude` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_positive_longitude(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): bool {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.positive_longitude\n}\n/// Returns the `weather_id` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_weather_id(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): u16 {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.weather_id\n}\n/// Returns the `temp` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_temp(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): u32 {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.temp\n}\n/// Returns the `pressure` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_pressure(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): u32 {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.pressure\n}\n/// Returns the `humidity` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_humidity(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): u8 {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.humidity\n}\n/// Returns the `visibility` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_visibility(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): u16 {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.visibility\n}\n/// Returns the `wind_speed` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_wind_speed(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): u16 {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.wind_speed\n}\n/// Returns the `wind_deg` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_wind_deg(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): u16 {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.wind_deg\n}\n/// Returns the `wind_gust` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_wind_gust(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): Option<u16> {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.wind_gust\n}\n/// Returns the `clouds` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_clouds(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): u8 {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.clouds\n}\n/// Returns the `dt` of the `CityWeatherOracle` with the given `geoname_id`.\npublic fun city_weather_oracle_dt(\n    weather_oracle: &WeatherOracle,\n    geoname_id: u32\n): u32 {\n    let city_weather_oracle = dof::borrow<u32, CityWeatherOracle>(&weather_oracle.id, geoname_id);\n    city_weather_oracle.dt\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum of Voting Power by Addresses in Move\nDESCRIPTION: Implementation of sum_voting_power_by_addresses function that sums up the total voting power of a given list of validator addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_58\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sum_voting_power_by_addresses(vs: &vector<Validator>, addresses: &vector<address>): u64 {\n    let mut sum = 0;\n    addresses.do_ref!(|addr| {\n        let validator = get_validator_ref(vs, *addr);\n        sum = sum + validator.voting_power();\n    });\n    sum\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Option to Vector in Move\nDESCRIPTION: Converts an Option into a vector of length 1 if it is Some, and an empty vector otherwise.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_vec<Element>(t: Option<Element>): vector<Element> {\n    let Option { vec } = t;\n    vec\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Deny List for Coin Type in Sui Blockchain (Rust)\nDESCRIPTION: This function checks if a given address is denied for a specific coin type. It returns false for non-coin types. The function uses type information and a deny list to perform the check.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_38\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun deny_list_contains<T>(deny_list: &DenyList, addr: address): bool {\n    let name = type_name::get_with_original_ids<T>();\n    if (type_name::is_primitive(&name)) return false;\n    let `type` = type_name::into_string(name).into_bytes();\n    deny_list.v1_contains(DENY_LIST_COIN_INDEX, `type`, addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Activating a Validator in Sui\nDESCRIPTION: This function activates a validator by calling the activate_staking_pool method on the validator's staking pool with the given activation epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_29\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun activate(self: &mut Validator, activation_epoch: u64) {\n    self.staking_pool.activate_staking_pool(activation_epoch);\n}\n```\n\n----------------------------------------\n\nTITLE: Shifting BitVector Left in Rust\nDESCRIPTION: Implements the shift_left function to shift the BitVector left by a specified amount. It handles cases where the shift amount exceeds the vector length.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/bit_vector.md#2025-04-22_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun shift_left(bitvector: &mut BitVector, amount: u64) {\n    if (amount >= bitvector.length) {\n        let len = bitvector.bit_field.length();\n        let mut i = 0;\n        while (i < len) {\n            let elem = &mut bitvector.bit_field[i];\n            *elem = false;\n            i = i + 1;\n        };\n    } else {\n        let mut i = amount;\n        while (i < bitvector.length) {\n            if (bitvector.is_index_set(i)) bitvector.set(i - amount)\n            else bitvector.unset(i - amount);\n            i = i + 1;\n        };\n        i = bitvector.length - amount;\n        while (i < bitvector.length) {\n            unset(bitvector, i);\n            i = i + 1;\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Addresses in Sui CLI\nDESCRIPTION: Shows the output of addresses in the Sui CLI, displaying the alias, address, and active address indicator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n╭───────────────────┬────────────────────────────────────────────────────────────────────┬────────────────╮\n│ alias             │ address                                                            │ active address │\n├───────────────────┼────────────────────────────────────────────────────────────────────┼────────────────┤\n│ hungry-spodumene  │ 0x0fe375fff0ee40d20c54a7f2478b9b5c7eaa3625b7611f9661ec5faefb4a6fea │ *              │\n│ eloquent-amber    │ 0x3d78abc33ccd173c521b4f9e78b21ea2c989960b631732c539efaa38bda30976 │                │\n╰───────────────────┴────────────────────────────────────────────────────────────────────┴────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Automatic Borrowing Through Field Access in Move\nDESCRIPTION: This snippet illustrates how automatic borrowing works through field access in Move. It shows borrowing of both immutable and mutable references for struct fields.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_15\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct X() has copy, drop;\n    public fun by_val(_: X) {}\n    public fun by_ref(_: &X) {}\n    public fun by_mut(_: &mut X) {}\n\n    public struct Y has drop { x: X }\n\n    fun example(mut y: Y) {\n        y.x.by_ref(); // resolves to a::m::by_ref(&y.x)\n        y.x.by_mut(); // resolves to a::m::by_mut(&mut y.x)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Item in Kiosk in Move\nDESCRIPTION: Places any object into a Kiosk. Requires owner authentication via KioskOwnerCap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\npublic fun place<T: key + store>(self: &mut Kiosk, cap: &KioskOwnerCap, item: T) {\n    assert!(self.has_access(cap), ENotOwner);\n    self.place_internal(item)\n}\n```\n\n----------------------------------------\n\nTITLE: Pool Accessors Implementation\nDESCRIPTION: Collection of accessor functions for retrieving pool properties including asks, bids, tick size, fee rates and pool size.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_43\n\nLANGUAGE: Move\nCODE:\n```\npublic fun asks<BaseAsset, QuoteAsset>(pool: &Pool<BaseAsset, QuoteAsset>): &CritbitTree<TickLevel> {\n    &pool.asks\n}\n\npublic fun bids<BaseAsset, QuoteAsset>(pool: &Pool<BaseAsset, QuoteAsset>): &CritbitTree<TickLevel> {\n    &pool.bids\n}\n\npublic fun tick_size<BaseAsset, QuoteAsset>(pool: &Pool<BaseAsset, QuoteAsset>): u64 {\n    pool.tick_size\n}\n\npublic fun maker_rebate_rate<BaseAsset, QuoteAsset>(pool: &Pool<BaseAsset, QuoteAsset>): u64 {\n    pool.maker_rebate_rate\n}\n\npublic fun taker_fee_rate<BaseAsset, QuoteAsset>(pool: &Pool<BaseAsset, QuoteAsset>): u64 {\n    pool.taker_fee_rate\n}\n\npublic fun pool_size<BaseAsset, QuoteAsset>(pool: &Pool<BaseAsset, QuoteAsset>): u64 {\n    critbit::size(&pool.asks) + critbit::size(&pool.bids)\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Circom Circuit\nDESCRIPTION: Shell command to compile the Circom circuit into R1CS and WebAssembly formats.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/groth16.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ circom main.circom --r1cs --wasm\n```\n\n----------------------------------------\n\nTITLE: Checking if Option Contains Value in Move\nDESCRIPTION: Function to check if an Option contains a specific value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun contains<Element>(t: &Option<Element>, e_ref: &Element): bool {\n    t.vec.contains(e_ref)\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Stake from Validator Pool\nDESCRIPTION: Function to withdraw a portion of user stake from a validator's staking pool. Takes delegation, staked SUI, withdrawal amount, and transaction context as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_15\n\nLANGUAGE: move\nCODE:\n```\npublic fun request_withdraw_stake(\n   self: &mut SuiSystemState,\n   delegation: &mut Delegation,\n   staked_sui: &mut StakedSui,\n   principal_withdraw_amount: u64,\n   ctx: &mut TxContext,\n) {\n   validator_set::request_withdraw_stake(\n       &mut self.validators,\n       delegation,\n       staked_sui,\n       principal_withdraw_amount,\n       ctx,\n   );\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Fungible Staked Sui in Move\nDESCRIPTION: Splits a fungible staked Sui into a new object with a specified value. Requires references to mutable FungibleStakedSui, a TxContext, and a split amount.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_31\n\nLANGUAGE: Move\nCODE:\n```\npublic fun split_fungible_staked_sui(\n    fungible_staked_sui: &mut sui_system::staking_pool::FungibleStakedSui,\n    split_amount: u64,\n    ctx: &mut TxContext,\n): FungibleStakedSui {\n    assert!(split_amount <= fungible_staked_sui.value, EInsufficientPoolTokenBalance);\n    fungible_staked_sui.value = fungible_staked_sui.value - split_amount;\n    FungibleStakedSui {\n        id: object::new(ctx),\n        pool_id: fungible_staked_sui.pool_id,\n        value: split_amount,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Looping from 0 to Stop (Exclusive) in Move\nDESCRIPTION: Macro function that loops applying a given function to each number from 0 to stop (exclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do<$R: drop>($stop: u64, $f: |u64| -> $R) {\n    std::macros::do!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ItemPurchased Event Struct\nDESCRIPTION: Event struct for tracking completed sales, including final price information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic struct ItemPurchased<phantom T: key, store> has copy, drop {\n    kiosk: sui::object::ID,\n    id: sui::object::ID,\n    price: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Split Staked Sui Token\nDESCRIPTION: Splits a StakedSui token into two parts based on a specified amount while ensuring both resulting parts meet minimum staking threshold requirements. Returns new StakedSui with split amount.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_33\n\nLANGUAGE: Move\nCODE:\n```\npublic fun split(self: &mut StakedSui, split_amount: u64, ctx: &mut TxContext): StakedSui {\n    let original_amount = self.principal.value();\n    assert!(split_amount <= original_amount, EInsufficientSuiTokenBalance);\n    let remaining_amount = original_amount - split_amount;\n    assert!(remaining_amount >= MIN_STAKING_THRESHOLD, EStakedSuiBelowThreshold);\n    assert!(split_amount >= MIN_STAKING_THRESHOLD, EStakedSuiBelowThreshold);\n    StakedSui {\n        id: object::new(ctx),\n        pool_id: self.pool_id,\n        stake_activation_epoch: self.stake_activation_epoch,\n        principal: self.principal.split(split_amount),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Transfer Policy for TokenizedAsset in Rust\nDESCRIPTION: This function retrieves the transfer policy tailored for `TokenizedAsset<T>`, requiring a reference to a `ProtectedTP<T>`. It operates within a friend scope, enforcing encapsulation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\npublic(friend) fun transfer_policy<T>(\n      protected_tp: &ProtectedTP<T>\n  ): &TransferPolicy<T> {}\n```\n\n----------------------------------------\n\nTITLE: String Bytes Access Function\nDESCRIPTION: A public utility function that provides access to the underlying bytes of a String type as a vector of u8 values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_16\n\nLANGUAGE: move\nCODE:\n```\npublic fun bytes(s: &String): &vector<u8> { s.as_bytes() }\n```\n\n----------------------------------------\n\nTITLE: Implementing do Macro for U32 Iteration from Zero in Move\nDESCRIPTION: Defines a macro function 'do' that loops over u32 values from 0 to stop (exclusive), applying a given function to each value. It uses the std::macros::do macro internally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do<$R: drop>($stop: u32, $f: |u32| -> $R) {\n    std::macros::do!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Macro for Updating Configuration in Move\nDESCRIPTION: This macro function updates a configuration setting. It initializes the setting if it doesn't exist, and then applies an update function to modify the value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/config.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) macro fun update<\n    $WriteCap,\n    $Name: copy + drop + store,\n    $Value: copy + drop + store,\n>(\n    $config: &mut Config<$WriteCap>,\n    $cap: &mut $WriteCap,\n    $name: $Name,\n    $initial_for_next_epoch: |&mut Config<$WriteCap>, &mut $WriteCap, &mut TxContext| -> $Value,\n    $update_for_next_epoch: |Option<$Value>, &mut $Value|,\n    $ctx: &mut TxContext,\n) {\n    let config = $config;\n    let cap = $cap;\n    let name = $name;\n    let ctx = $ctx;\n    let old_value_opt = if (!config.exists_with_type_for_next_epoch<_, _, $Value>(name, ctx)) {\n        let initial = $initial_for_next_epoch(config, cap, ctx);\n        config.add_for_next_epoch(cap, name, initial, ctx)\n    } else {\n        option::none()\n    };\n    $update_for_next_epoch(old_value_opt, config.borrow_for_next_epoch_mut(cap, name, ctx));\n}\n```\n\n----------------------------------------\n\nTITLE: Range Loop Implementation (Inclusive)\nDESCRIPTION: Implements a range-based loop that applies a function to each value from start to stop (inclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do_eq<$R: drop>($start: u256, $stop: u256, $f: |u256| -> $R) {\n    std::macros::range_do_eq!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Split and Transfer Staked Sui\nDESCRIPTION: Entry function that splits a StakedSui token and transfers the newly split portion to the sender's address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_34\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun split_staked_sui(stake: &mut StakedSui, split_amount: u64, ctx: &mut TxContext) {\n    transfer::transfer(stake.split(split_amount, ctx), ctx.sender());\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator Voting Powers in Sui System\nDESCRIPTION: Returns a map of validator addresses to their voting powers, where voting power is represented on a scale of 10000. This is used in the consensus mechanism.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_41\n\nLANGUAGE: Move\nCODE:\n```\nfun validator_voting_powers(wrapper: &mut SuiSystemState): VecMap<address, u64> {\n    wrapper.load_system_state().active_validator_voting_powers()\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Quote Asset in Flash Loans with DeepBookV3 SDK\nDESCRIPTION: The returnQuoteAsset function returns a borrowed quote asset to the specified pool. It requires the pool identifier, borrow amount, quote coin input, and the flash loan object to be settled.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/flash-loans.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nreturnQuoteAsset(\n  poolKey: string,\n  borrowAmount: number,\n  quoteCoinInput: TransactionObjectArgument,\n  flashLoan: TransactionObjectArgument,\n);\n```\n\n----------------------------------------\n\nTITLE: Struct Definition and Function Declaration - Move\nDESCRIPTION: Defines various structs and functions related to validator and staking operations, including validator capabilities, staking pool management, and voting power adjustments in the Move language. This code resides in a package at address 0x3 and utilizes modules such as validator_cap, staking_pool, and validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nUnverifiedValidatorOperationCap\n\tpublic struct\n\t0x3::validator_cap\nValidatorOperationCap\n\tpublic struct\n\t0x3::validator_cap\nunverified_operation_cap_address\n\tpublic(package) fun\n\t0x3::validator_cap\nverified_operation_cap_address\n\tpublic(package) fun\n\t0x3::validator_cap\nnew_unverified_validator_operation_cap_and_transfer\n\tpublic(package) fun\n\t0x3::validator_cap\ninto_verified\n\tpublic(package) fun\n\t0x3::validator_cap\nStakingPool\n\tpublic struct\n\t0x3::staking_pool\nPoolTokenExchangeRate\n\tpublic struct\n\t0x3::staking_pool\nStakedSui\n\tpublic struct\n\t0x3::staking_pool\nFungibleStakedSui\n\tpublic struct\n\t0x3::staking_pool\nFungibleStakedSuiData\n\tpublic struct\n\t0x3::staking_pool\nFungibleStakedSuiDataKey\n\tpublic struct\n\t0x3::staking_pool\nnew\n\tpublic(package) fun\n\t0x3::staking_pool\nrequest_add_stake\n\tpublic(package) fun\n\t0x3::staking_pool\nrequest_withdraw_stake\n\tpublic(package) fun\n\t0x3::staking_pool\nredeem_fungible_staked_sui\n\tpublic(package) fun\n\t0x3::staking_pool\ncalculate_fungible_staked_sui_withdraw_amount\n\tfun\n\t0x3::staking_pool\nconvert_to_fungible_staked_sui\n\tpublic(package) fun\n\t0x3::staking_pool\nwithdraw_from_principal\n\tpublic(package) fun\n\t0x3::staking_pool\nunwrap_staked_sui\n\tfun\n\t0x3::staking_pool\ndeposit_rewards\n\tpublic(package) fun\n\t0x3::staking_pool\nprocess_pending_stakes_and_withdraws\n\tpublic(package) fun\n\t0x3::staking_pool\nprocess_pending_stake_withdraw\n\tfun\n\t0x3::staking_pool\nprocess_pending_stake\n\tpublic(package) fun\n\t0x3::staking_pool\nwithdraw_rewards\n\tfun\n\t0x3::staking_pool\nactivate_staking_pool\n\tpublic(package) fun\n\t0x3::staking_pool\ndeactivate_staking_pool\n\tpublic(package) fun\n\t0x3::staking_pool\nsui_balance\n\tpublic fun\n\t0x3::staking_pool\npool_id\n\tpublic fun\n\t0x3::staking_pool\nfungible_staked_sui_pool_id\n\tpublic fun\n\t0x3::staking_pool\nstaked_sui_amount\n\tpublic fun\n\t0x3::staking_pool\nstake_activation_epoch\n\tpublic fun\n\t0x3::staking_pool\nis_preactive\n\tpublic fun\n\t0x3::staking_pool\nis_inactive\n\tpublic fun\n\t0x3::staking_pool\nfungible_staked_sui_value\n\tpublic fun\n\t0x3::staking_pool\nsplit_fungible_staked_sui\n\tpublic fun\n\t0x3::staking_pool\njoin_fungible_staked_sui\n\tpublic fun\n\t0x3::staking_pool\nsplit\n\tpublic fun\n\t0x3::staking_pool\nsplit_staked_sui\n\tpublic entry fun\n\t0x3::staking_pool\njoin_staked_sui\n\tpublic entry fun\n\t0x3::staking_pool\nis_equal_staking_metadata\n\tpublic fun\n\t0x3::staking_pool\npool_token_exchange_rate_at_epoch\n\tpublic fun\n\t0x3::staking_pool\npending_stake_amount\n\tpublic fun\n\t0x3::staking_pool\npending_stake_withdraw_amount\n\tpublic fun\n\t0x3::staking_pool\nexchange_rates\n\tpublic(package) fun\n\t0x3::staking_pool\nsui_amount\n\tpublic fun\n\t0x3::staking_pool\npool_token_amount\n\tpublic fun\n\t0x3::staking_pool\nis_preactive_at_epoch\n\tfun\n\t0x3::staking_pool\nget_sui_amount\n\tfun\n\t0x3::staking_pool\nget_token_amount\n\tfun\n\t0x3::staking_pool\ninitial_exchange_rate\n\tfun\n\t0x3::staking_pool\ncheck_balance_invariants\n\tfun\n\t0x3::staking_pool\nValidatorMetadata\n\tpublic struct\n\t0x3::validator\nValidator\n\tpublic struct\n\t0x3::validator\nStakingRequestEvent\n\tpublic struct\n\t0x3::validator\nUnstakingRequestEvent\n\tpublic struct\n\t0x3::validator\nConvertingToFungibleStakedSuiEvent\n\tpublic struct\n\t0x3::validator\nRedeemingFungibleStakedSuiEvent\n\tpublic struct\n\t0x3::validator\nnew_metadata\n\tpublic(package) fun\n\t0x3::validator\nnew\n\tpublic(package) fun\n\t0x3::validator\ndeactivate\n\tpublic(package) fun\n\t0x3::validator\nactivate\n\tpublic(package) fun\n\t0x3::validator\nadjust_stake_and_gas_price\n\tpublic(package) fun\n\t0x3::validator\nrequest_add_stake\n\tpublic(package) fun\n\t0x3::validator\nconvert_to_fungible_staked_sui\n\tpublic(package) fun\n\t0x3::validator\nredeem_fungible_staked_sui\n\tpublic(package) fun\n\t0x3::validator\nrequest_add_stake_at_genesis\n\tpublic(package) fun\n\t0x3::validator\nrequest_withdraw_stake\n\tpublic(package) fun\n\t0x3::validator\nrequest_set_gas_price\n\tpublic(package) fun\n\t0x3::validator\nset_candidate_gas_price\n\tpublic(package) fun\n\t0x3::validator\nrequest_set_commission_rate\n\tpublic(package) fun\n\t0x3::validator\nset_candidate_commission_rate\n\tpublic(package) fun\n\t0x3::validator\ndeposit_stake_rewards\n\tpublic(package) fun\n\t0x3::validator\nprocess_pending_stakes_and_withdraws\n\tpublic(package) fun\n\t0x3::validator\nis_preactive\n\tpublic fun\n\t0x3::validator\nmetadata\n\tpublic fun\n\t0x3::validator\nsui_address\n\tpublic fun\n\t0x3::validator\nname\n\tpublic fun\n\t0x3::validator\ndescription\n\tpublic fun\n\t0x3::validator\nimage_url\n\tpublic fun\n\t0x3::validator\nproject_url\n\tpublic fun\n\t0x3::validator\nnetwork_address\n\tpublic fun\n\t0x3::validator\np2p_address\n\tpublic fun\n\t0x3::validator\nprimary_address\n\tpublic fun\n\t0x3::validator\nworker_address\n\tpublic fun\n\t0x3::validator\nprotocol_pubkey_bytes\n\tpublic fun\n\t0x3::validator\nproof_of_possession\n\tpublic fun\n\t0x3::validator\nnetwork_pubkey_bytes\n\tpublic fun\n\t0x3::validator\nworker_pubkey_bytes\n\tpublic fun\n\t0x3::validator\nnext_epoch_network_address\n\tpublic fun\n\t0x3::validator\nnext_epoch_p2p_address\n\tpublic fun\n\t0x3::validator\nnext_epoch_primary_address\n\tpublic fun\n\t0x3::validator\nnext_epoch_worker_address\n\tpublic fun\n\t0x3::validator\nnext_epoch_protocol_pubkey_bytes\n\tpublic fun\n\t0x3::validator\nnext_epoch_proof_of_possession\n\tpublic fun\n\t0x3::validator\nnext_epoch_network_pubkey_bytes\n\tpublic fun\n\t0x3::validator\nnext_epoch_worker_pubkey_bytes\n\tpublic fun\n\t0x3::validator\noperation_cap_id\n\tpublic fun\n\t0x3::validator\nnext_epoch_gas_price\n\tpublic fun\n\t0x3::validator\ntotal_stake_amount\n\tpublic fun\n\t0x3::validator\nstake_amount\n\tpublic fun\n\t0x3::validator\ntotal_stake\n\tpublic fun\n\t0x3::validator\nvoting_power\n\tpublic fun\n\t0x3::validator\nset_voting_power\n\tpublic(package) fun\n\t0x3::validator\npending_stake_amount\n\tpublic fun\n\t0x3::validator\npending_stake_withdraw_amount\n\tpublic fun\n\t0x3::validator\ngas_price\n\tpublic fun\n\t0x3::validator\ncommission_rate\n\tpublic fun\n\t0x3::validator\npool_token_exchange_rate_at_epoch\n\tpublic fun\n\t0x3::validator\nstaking_pool_id\n\tpublic fun\n\t0x3::validator\nis_duplicate\n\tpublic fun\n\t0x3::validator\nnew_unverified_validator_operation_cap_and_transfer\n\tpublic(package) fun\n\t0x3::validator\nupdate_name\n\tpublic(package) fun\n\t0x3::validator\nupdate_description\n\tpublic(package) fun\n\t0x3::validator\nupdate_image_url\n\tpublic(package) fun\n\t0x3::validator\nupdate_project_url\n\tpublic(package) fun\n\t0x3::validator\nupdate_next_epoch_network_address\n\tpublic(package) fun\n\t0x3::validator\nupdate_candidate_network_address\n\tpublic(package) fun\n\t0x3::validator\nupdate_next_epoch_p2p_address\n\tpublic(package) fun\n\t0x3::validator\nupdate_candidate_p2p_address\n\tpublic(package) fun\n\t0x3::validator\nupdate_next_epoch_primary_address\n\tpublic(package) fun\n\t0x3::validator\nupdate_candidate_primary_address\n\tpublic(package) fun\n\t0x3::validator\nupdate_next_epoch_worker_address\n\tpublic(package) fun\n\t0x3::validator\nupdate_candidate_worker_address\n\tpublic(package) fun\n\t0x3::validator\nupdate_next_epoch_protocol_pubkey\n\tpublic(package) fun\n\t0x3::validator\nupdate_candidate_protocol_pubkey\n\tpublic(package) fun\n\t0x3::validator\nupdate_next_epoch_network_pubkey\n\tpublic(package) fun\n\t0x3::validator\nupdate_candidate_network_pubkey\n\tpublic(package) fun\n\t0x3::validator\nupdate_next_epoch_worker_pubkey\n\tpublic(package) fun\n\t0x3::validator\nupdate_candidate_worker_pubkey\n\tpublic(package) fun\n\t0x3::validator\neffectuate_staged_metadata\n\tpublic(package) fun\n\t0x3::validator\nvalidate_metadata\n\tpublic fun\n\t0x3::validator\nvalidate_metadata_bcs\n\tpublic fun\n\t0x3::validator\nget_staking_pool_ref\n\tpublic(package) fun\n\t0x3::validator\nnew_from_metadata\n\tfun\n\t0x3::validator\nVotingPowerInfo\n\tpublic struct\n\t0x3::voting_power\nVotingPowerInfoV2\n\tpublic struct\n\t0x3::voting_power\nset_voting_power\n\tpublic(package) fun\n\t0x3::voting_power\ninit_voting_power_info\n\tfun\n\t0x3::voting_power\nderive_raw_voting_power\n\tpublic(package) fun\n\t0x3::voting_power\ninsert\n\tfun\n\t0x3::voting_power\nadjust_voting_power\n\tfun\n\t0x3::voting_power\nupdate_voting_power\n\tfun\n\t0x3::voting_power\ncheck_invariants\n\tfun\n\t0x3::voting_power\ntotal_voting_power\n\tpublic fun\n\t0x3::voting_power\nquorum_threshold\n\tpublic fun\n\t0x3::voting_power\nValidatorWrapper\n\tpublic struct\n\t0x3::validator_wrapper\ncreate_v1\n\tpublic(package) fun\n\t0x3::validator_wrapper\nload_validator_maybe_upgrade\n\tpublic(package) fun\n\t0x3::validator_wrapper\ndestroy\n\tpublic(package) fun\n\t0x3::validator_wrapper\nupgrade_to_latest\n\tfun\n\t0x3::validator_wrapper\nversion\n\tfun\n\t0x3::validator_wrapper\nValidatorSet\n\tpublic struct\n\t0x3::validator_set\nValidatorEpochInfoEvent\n\tpublic struct\n\t0x3::validator_set\nValidatorEpochInfoEventV2\n\tpublic struct\n\t0x3::validator_set\nValidatorJoinEvent\n\tpublic struct\n\t0x3::validator_set\nValidatorLeaveEvent\n\tpublic struct\n\t0x3::validator_set\nVotingPowerAdmissionStartEpochKey\n\tpublic struct\n\t0x3::validator_set\nnew\n\tpublic(package) fun\n\t0x3::validator_set\nrequest_add_validator_candidate\n\tpublic(package) fun\n\t0x3::validator_set\nrequest_remove_validator_candidate\n\tpublic(package) fun\n\t0x3::validator_set\nrequest_add_validator\n\tpublic(package) fun\n\t0x3::validator_set\ncan_join\n\tfun\n\t0x3::validator_set\nget_voting_power_thresholds\n\tfun\n\t0x3::validator_set\nassert_no_pending_or_active_duplicates\n\tpublic(package) fun\n\t0x3::validator_set\nrequest_remove_validator\n\tpublic(package) fun\n\t0x3::validator_set\nrequest_add_stake\n\tpublic(package) fun\n\t0x3::validator_set\nrequest_withdraw_stake\n\tpublic(package) fun\n\t0x3::validator_set\nconvert_to_fungible_staked_sui\n\tpublic(package) fun\n\t0x3::validator_set\nredeem_fungible_staked_sui\n\tpublic(package) fun\n\t0x3::validator_set\nrequest_set_commission_rate\n\tpublic(package) fun\n\t0x3::validator_set\nadvance_epoch\n\tpublic(package) fun\n\t0x3::validator_set\nupdate_validator_positions_and_calculate_total_stake\n\tfun\n\t0x3::validator_set\neffectuate_staged_metadata\n\tfun\n\t0x3::validator_set\nderive_reference_gas_price\n\tpublic fun\n\t0x3::validator_set\ntotal_stake\n\tpublic fun\n\t0x3::validator_set\nvalidator_total_stake_amount\n\tpublic fun\n\t0x3::validator_set\nvalidator_stake_amount\n\tpublic fun\n\t0x3::validator_set\nvalidator_voting_power\n\tpublic fun\n\t0x3::validator_set\nvalidator_staking_pool_id\n\tpublic fun\n\t0x3::validator_set\nstaking_pool_mappings\n\tpublic fun\n```\n\n----------------------------------------\n\nTITLE: Native Setting Reader Implementation\nDESCRIPTION: Native implementation for reading configuration settings with complex type parameters. Handles the low-level reading of settings with proper type safety and epoch validation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/config.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\nnative fun read_setting_impl<\n    FieldSettingValue: key,\n    SettingValue: store,\n    SettingDataValue: store,\n    Value: copy + drop + store,\n>(\n    config: address,\n    name: address,\n    current_epoch: u64,\n): Option<Value>;\n```\n\n----------------------------------------\n\nTITLE: Flushing Token Balance in Move\nDESCRIPTION: Function signature for consuming spent balance from a TokenPolicy using a TreasuryCap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/token-policy.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun flush<T>(\n    policy: &mut TokenPolicy<T>,\n    treasury_cap: &mut TreasuryCap<T>,\n    ctx: &mut TxContext\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies for ASCII Module in Move\nDESCRIPTION: Import statements for the ASCII module, showing dependencies on the standard option and vector modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nuse std::option;\nuse std::vector;\n```\n\n----------------------------------------\n\nTITLE: Finding Previous Leaf in CritbitTree (Move)\nDESCRIPTION: Locates the previous leaf in the CritbitTree given a key. It traverses the tree to find the leaf with the largest key smaller than the given key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun previous_leaf<V: store>(tree: &CritbitTree<V>, key: u64): (u64, u64) {\n    let (_, mut index) = find_leaf(tree, key);\n    assert!(index != PARTITION_INDEX, ELeafNotExist);\n    let mut ptr = MAX_U64 - index;\n    let mut parent = table::borrow(&tree.leaves, index).parent;\n    while (parent != PARTITION_INDEX && is_left_child(tree, parent, ptr)){\n        ptr = parent;\n        parent = table::borrow(&tree.internal_nodes, ptr).parent;\n    };\n    if(parent == PARTITION_INDEX) {\n        return (0, PARTITION_INDEX)\n    };\n    index = MAX_U64 - right_most_leaf(tree, table::borrow(&tree.internal_nodes, parent).left_child);\n    let key = table::borrow(&tree.leaves, index).key;\n    return (key, index)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Dynamic Field Existence in Move\nDESCRIPTION: This function checks if a dynamic field exists on a Sui object without specifying the value type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun exists_<Name: copy + drop + store>(object: &UID, name: Name): bool {\n    let object_addr = object.to_address();\n    let hash = hash_type_and_key(object_addr, name);\n    has_child_object(object_addr, hash)\n}\n```\n\n----------------------------------------\n\nTITLE: Public Poseidon BN254 Hash Function\nDESCRIPTION: Implements public function for hashing BN254 field elements using Poseidon hash. Validates inputs are canonical and non-empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/poseidon.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun poseidon_bn254(data: &vector<u256>): u256 {\n    let (mut i, mut b, l) = (0, vector[], data.length());\n    assert!(l > 0, EEmptyInput);\n    while (i < l) {\n        let field_element = &data[i];\n        assert!(*field_element < BN254_MAX, ENonCanonicalInput);\n        b.push_back(bcs::to_bytes(&data[i]));\n        i = i + 1;\n    };\n    let binary_output = poseidon_bn254_internal(&b);\n    bcs::new(binary_output).peel_u256()\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active, Pending, or Candidate Validator in Move\nDESCRIPTION: Gets a mutable reference to an active, pending, or candidate validator by address. Searches through different validator sets based on status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_36\n\nLANGUAGE: Move\nCODE:\n```\nfun get_active_or_pending_or_candidate_validator_mut(\n    self: &mut ValidatorSet,\n    validator_address: address,\n    include_candidate: bool,\n): &mut Validator {\n    let mut validator_index_opt = find_validator(&self.active_validators, validator_address);\n    if (validator_index_opt.is_some()) {\n        let validator_index = validator_index_opt.extract();\n        let validator = &mut self.active_validators[validator_index];\n        return validator\n    };\n    let mut validator_index_opt = find_validator_from_table_vec(\n        &self.pending_active_validators,\n        validator_address,\n    );\n    if (validator_index_opt.is_some()) {\n        let validator_index = validator_index_opt.extract();\n        let validator = &mut self.pending_active_validators[validator_index];\n        return validator\n    };\n    assert!(include_candidate, ENotActiveOrPendingValidator);\n    self.validator_candidates[validator_address].load_validator_maybe_upgrade()\n}\n```\n\n----------------------------------------\n\nTITLE: Withdraw Settled Amounts Function Implementation\nDESCRIPTION: Implementation of the withdraw_settled_amounts function which allows users to withdraw all settled funds from the pool. This function can be called explicitly, although all orders automatically withdraw settled amounts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_13\n\nLANGUAGE: move\nCODE:\n```\npublic fun withdraw_settled_amounts<BaseAsset, QuoteAsset>(\n        pool: &mut Pool,\n        balance_manager: BalanceManager,\n        ctx: &mut TxContext,\n    ) {\n        // Validate type\n        assert!(pool.base_asset_id == type_id<BaseAsset>(), EInvalidBaseAsset);\n        assert!(pool.quote_asset_id == type_id<QuoteAsset>(), EInvalidQuoteAsset);\n\n        // Get account\n        let balance_manager_address = object::id_address(&object::id(&balance_manager));\n        let (base_amount, quote_amount) = pool_open_orders::get_settled_amounts<BaseAsset, QuoteAsset>(\n            &pool.open_orders,\n            balance_manager_address\n        );\n\n        // Reset settled amounts\n        pool_open_orders::set_settled_amounts(\n            &mut pool.open_orders,\n            balance_manager_address,\n            0,\n            0,\n        );\n\n        // Transfer funds\n        if (base_amount > 0) {\n            balance_manager::add_settled_balance<BaseAsset>(&mut balance_manager, base_amount, ctx);\n        };\n\n        if (quote_amount > 0) {\n            balance_manager::add_settled_balance<QuoteAsset>(&mut balance_manager, quote_amount, ctx);\n        };\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator Gas Price - Move\nDESCRIPTION: This function returns the gas price set by a validator by accessing the gas_price field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_67\n\nLANGUAGE: Move\nCODE:\n```\npublic fun gas_price(self: &Validator): u64 {\n    self.gas_price\n}\n```\n\n----------------------------------------\n\nTITLE: Subtracting UQ32_32 Fixed-Point Numbers in Move\nDESCRIPTION: Subtracts two UQ32_32 fixed-point numbers. Aborts if the result would be negative.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sub(a: UQ32_32, b: UQ32_32): UQ32_32 {\n    UQ32_32(std::macros::uq_sub!(a.0, b.0, abort EOverflow))\n}\n```\n\n----------------------------------------\n\nTITLE: Converting U256 to U128\nDESCRIPTION: Attempts to convert a u256 value to u128. Returns None if the value exceeds u128 maximum.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u128(x: u256): Option<u128> {\n    std::macros::try_as_u128!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nonce from Nitro Attestation\nDESCRIPTION: The function `nonce` retrieves the nonce from a NitroAttestationDocument. The returned value is wrapped in an optional vector of bytes, encapsulating the nonce when it exists.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/nitro_attestation.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun nonce(attestation: &sui::nitro_attestation::NitroAttestationDocument): &Option<vector<u8>> {\n    &attestation.nonce\n}\n```\n\n----------------------------------------\n\nTITLE: Test Resource Unpublish Script in Move\nDESCRIPTION: A Move script that removes a previously published Test resource from the signer's account using the unpublish function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nscript {\nuse 0x2::Test;\nfun test_unpublish_script(account: signer) {\n    Test::unpublish(&account)\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Comparison with Copies in Move\nDESCRIPTION: Example of inefficient equality comparison that uses unnecessary copies. This approach is valid but can be expensive for large data structures.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/equality.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\nlet v1: vector<u8> = function_that_returns_vector();\nlet v2: vector<u8> = function_that_returns_vector();\nassert!(copy v1 == copy v2, 42);\n//      ^^^^       ^^^^\nuse_two_vectors(v1, v2);\n\nlet s1: Foo = function_that_returns_large_struct();\nlet s2: Foo = function_that_returns_large_struct();\nassert!(copy s1 == copy s2, 42);\n//      ^^^^       ^^^^\nuse_two_foos(s1, s2);\n```\n\n----------------------------------------\n\nTITLE: Placing Market Order with Metadata in Move\nDESCRIPTION: Places a market order on the CLOB and returns filled quantities along with metadata. This function is not fully implemented and will abort.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_26\n\nLANGUAGE: Move\nCODE:\n```\npublic fun place_market_order_with_metadata<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _account_cap: &AccountCap,\n    _client_order_id: u64,\n    _quantity: u64,\n    _is_bid: bool,\n    _base_coin: Coin<BaseAsset>,\n    _quote_coin: Coin<QuoteAsset>,\n    _clock: &Clock,\n    _ctx: &mut TxContext,\n): (Coin<BaseAsset>, Coin<QuoteAsset>, vector<MatchedOrderMetadata<BaseAsset, QuoteAsset>>) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting tokenized assets in Rust\nDESCRIPTION: The split function divides a tokenized asset of FT type with balance greater than 1 into two separate assets. The new asset has the specified split_amount balance, while the original is reduced accordingly. Only works with FT type assets.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npublic fun split<T>(\n        self: &mut TokenizedAsset<T>,\n        split_amount: u64,\n        ctx: &mut TxContext\n    ): TokenizedAsset<T> {}\n```\n\n----------------------------------------\n\nTITLE: Destroying a Vector and Applying a Function to Each Element in Move\nDESCRIPTION: This macro function destroys the vector by calling the provided function on each element and then destroying the empty vector. It does not preserve the order of elements and starts from the end of the vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun destroy<$T, $R: drop>($v: vector<$T>, $f: |$T| -> $R) {\n    let mut v = $v;\n    v.length().do!(|_| $f(v.pop_back()));\n    v.destroy_empty();\n}\n```\n\n----------------------------------------\n\nTITLE: Public Freezing of Object with Store Ability in Move\nDESCRIPTION: Freezes an object with 'store' ability, making it immutable. This function allows freezing of objects outside their defining module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun public_freeze_object<T: key + store>(obj: T) {\n    freeze_object_impl(obj)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pairing Operation for BLS12-381 in Move\nDESCRIPTION: Computes the bilinear pairing of G1 and G2 elements, returning a GT element in the BLS12-381 curve. This function uses the group_ops module to perform the pairing operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_43\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pairing(e1: &Element<G1>, e2: &Element<G2>): Element<GT> {\n    group_ops::pairing(G1_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Substring Index in ASCII String in Move\nDESCRIPTION: This function computes the index of the first occurrence of a substring within an ASCII string. It returns the length of the string if the substring is not found, and 0 if the substring is empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic fun index_of(string: &String, substr: &String): u64 {\n    let mut i = 0;\n    let (n, m) = (string.length(), substr.length());\n    if (n < m) return n;\n    while (i <= n - m) {\n        let mut j = 0;\n        while (j < m && string.bytes[i + j] == substr.bytes[j]) j = j + 1;\n        if (j == m) return i;\n        i = i + 1;\n    };\n    n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed-Range Exclusive Loop Macro for U16 in Rust\nDESCRIPTION: Defines a macro function 'do' that applies a given function to each number from 0 to a specified u16 stop value (exclusive). It uses the std::macros::do macro internally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_13\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun do<$R: drop>($stop: u16, $f: |u16| -> $R) {\n    std::macros::do!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RuleKey Struct in Move\nDESCRIPTION: Defines the RuleKey struct, which serves as a key for storing 'Rule' configurations associated with a TransferPolicy. It includes Move's public visibility and trait specifications.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic struct RuleKey<T: phantom> has copy, drop, store\n```\n\n----------------------------------------\n\nTITLE: Becoming a Validator Candidate\nDESCRIPTION: Commands to generate validator info and become a validator candidate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/node-tools.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsui validator make-validator-info <name> <description> <image-url> <project-url> <host-name> <gas_price>\n```\n\nLANGUAGE: bash\nCODE:\n```\nsui validator become-candidate {path-to}validator.info\n```\n\n----------------------------------------\n\nTITLE: Executing Second MoveCall Command in Rust\nDESCRIPTION: Shows the updated memory locations after calling the sender function, which returns the sender's address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nGas Coin: _\nInputs: [\n  Pure(/* @0x808 BCS bytes */ ...),\n  Marketplace { id: market_id, ... },\n  Pure(/* 100u64 BCS bytes */ ...),\n]\nResults: [\n  [ _ ],\n  [ _ , Item { id: id2 }],\n  [],\n  [/* senders address */ ...], // The result of the Move call\n],\n```\n\n----------------------------------------\n\nTITLE: Accessing String Bytes in Move\nDESCRIPTION: Public function to access the underlying bytes of a String. It returns a reference to the vector of bytes representing the string.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bytes(s: &String): &vector<u8> { s.as_bytes() }\n```\n\n----------------------------------------\n\nTITLE: Decoding Hex String to Bytes in Move\nDESCRIPTION: This function decodes a hexadecimal string into a vector of bytes. It validates the input length and character set, supporting both uppercase and lowercase hex characters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/hex.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun decode(hex: vector<u8>): vector<u8> {\n    let (mut i, mut r, l) = (0, vector[], hex.length());\n    assert!(l % 2 == 0, EInvalidHexLength);\n    while (i < l) {\n        let decimal = decode_byte(hex[i]) * 16 + decode_byte(hex[i + 1]);\n        r.push_back(decimal);\n        i = i + 2;\n    };\n    r\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Immutable Validator Reference in Move\nDESCRIPTION: Gets an immutable reference to a validator from a vector of validators by address. Aborts if the validator is not found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_40\n\nLANGUAGE: Move\nCODE:\n```\nfun get_validator_ref(validators: &vector<Validator>, validator_address: address): &Validator {\n    let idx = find_validator(validators, validator_address).destroy_or!(abort ENotAValidator);\n    &validators[idx]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing range iteration for U16 values\nDESCRIPTION: Macro function that loops through a range of u16 values from start (inclusive) to stop (exclusive), applying a function to each value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do<$R: drop>($start: u16, $stop: u16, $f: |u16| -> $R) {\n    std::macros::range_do!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Denial Status of an Address - Move\nDESCRIPTION: The `v1_contains` function checks if a specific address is denied for a given type. It takes in a reference to the deny list, type index, the type, and the address, returning a boolean indicating whether the address is denied.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun v1_contains(deny_list: &sui::deny_list::DenyList, per_type_index: u64, type: vector<u8>, addr: address): bool {\n    let reserved = RESERVED;\n    if (reserved.contains(&addr)) return false;\n    let bag_entry: &sui::deny_list::PerTypeList = &deny_list.lists[per_type_index];\n    bag_entry.v1_per_type_list_contains(type, addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Local Reader Example\nDESCRIPTION: Command to execute the local reader implementation of the custom indexer, which monitors a local directory for checkpoint files.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/custom-indexer/rust/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin local_reader\n```\n\n----------------------------------------\n\nTITLE: Accessing Rule Configuration in Move\nDESCRIPTION: Functions to read and modify Rule configurations in TokenPolicy, requiring appropriate authorization through Rule witness and TokenPolicyCap for mutations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_26\n\nLANGUAGE: Move\nCODE:\n```\npublic fun rule_config<T, Rule: drop, Config: store>(_rule: Rule, self: &TokenPolicy<T>): &Config {\n    assert!(has_rule_config_with_type<T, Rule, Config>(self), ENoConfig);\n    df::borrow(&self.id, key<Rule>())\n}\n\npublic fun rule_config_mut<T, Rule: drop, Config: store>(\n    _rule: Rule,\n    self: &mut TokenPolicy<T>,\n    cap: &TokenPolicyCap<T>,\n): &mut Config {\n    assert!(has_rule_config_with_type<T, Rule, Config>(self), ENoConfig);\n    assert!(object::id(self) == cap.for, ENotAuthorized);\n    df::borrow_mut(&mut self.id, key<Rule>())\n}\n```\n\n----------------------------------------\n\nTITLE: Self Aliasing in Move\nDESCRIPTION: Demonstrates various ways to alias a module itself using 'Self' keyword.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/uses.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nuse std::option;\nuse std::option as option;\nuse std::option::Self;\nuse std::option::Self as option;\nuse std::option::{Self};\nuse std::option::{Self as option};\n```\n\n----------------------------------------\n\nTITLE: Creating UQ64_64 from Raw u128 in Move\nDESCRIPTION: This function creates a UQ64_64 fixed-point number from a raw u128 value. It can be paired with to_raw for performing uncommon operations on raw values directly.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_raw(raw_value: u128): std::uq64_64::UQ64_64 {\n    UQ64_64(raw_value)\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Reset Function\nDESCRIPTION: Function that allows only the counter owner to set the counter to a specific value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic entry fun set_value(counter: &mut Counter, value: u64, ctx: &TxContext) {\n    assert!(tx_context::sender(ctx) == counter.owner, 0);\n    counter.value = value;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the transaction sponsor address in Sui Move\nDESCRIPTION: This function returns the sponsor's address as an Option. It first calls the native `native_sponsor` function to retrieve the sponsor. If the sponsor's address is empty, it returns `option::none()`; otherwise, it returns `option::some()` containing the sponsor's address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/tx_context.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../sui/tx_context.md#sui_tx_context_option_sponsor\">option_sponsor</a>(): <a href=\"../std/option.md#std_option_Option\">std::option::Option</a>&lt;<b>address</b>&gt;\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../sui/tx_context.md#sui_tx_context_option_sponsor\">option_sponsor</a>(): Option&lt;<b>address</b>&gt; {\n    <b>let</b> <a href=\"../sui/tx_context.md#sui_tx_context_sponsor\">sponsor</a> = <a href=\"../sui/tx_context.md#sui_tx_context_native_sponsor\">native_sponsor</a>();\n    <b>if</b> (<a href=\"../sui/tx_context.md#sui_tx_context_sponsor\">sponsor</a>.length() == 0) option::none() <b>else</b> option::some(<a href=\"../sui/tx_context.md#sui_tx_context_sponsor\">sponsor</a>[0])\n}\n```\n\n----------------------------------------\n\nTITLE: Update Validator Commission Rate\nDESCRIPTION: Allows active validators to request changes to their commission rate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun request_set_commission_rate(\n    self: &mut ValidatorSet,\n    new_commission_rate: u64,\n    ctx: &TxContext,\n) {\n    let validator_address = ctx.sender();\n    let validator = get_validator_mut(&mut self.active_validators, validator_address);\n    validator.request_set_commission_rate(new_commission_rate);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Sui Client in Shell\nDESCRIPTION: This command starts the Sui client, which is used to interact with Sui networks and manage client configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/connect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client\n```\n\n----------------------------------------\n\nTITLE: LockedBalance Function Definition\nDESCRIPTION: Function signature for retrieving locked balance information for a BalanceManager in a pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nasync lockedBalance(poolKey: string, balanceManagerKey: string) {}\n```\n\n----------------------------------------\n\nTITLE: Borrowing object ID reference\nDESCRIPTION: Borrows the underlying ID of a Sui object. Returns a reference to the ID rather than a copy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_17\n\nLANGUAGE: move\nCODE:\n```\npublic fun borrow_id<T: key>(obj: &T): &ID {\n    &borrow_uid(obj).id\n}\n```\n\n----------------------------------------\n\nTITLE: Build Move Project from Path using Sui Move\nDESCRIPTION: This command builds the Move project located at the specified path, instead of the current directory. This allows you to build projects in other locations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n\"sui move build --path PATH\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Bag Collection in Sui Move\nDESCRIPTION: Create a heterogeneous map that can store key-value pairs of arbitrary types, requiring transaction context for object generation\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/dynamic-fields/tables-bags.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic struct Bag has key, store { /* ... */ }\n\npublic fun new(ctx: &mut TxContext): Bag;\n```\n\n----------------------------------------\n\nTITLE: StorageFund Struct Definition in Move\nDESCRIPTION: Defines the StorageFund struct which contains two Balance fields - total_object_storage_rebates for storing the sum of storage rebates for all objects, and non_refundable_balance for storing remaining inflow that cannot be refunded.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/storage_fund.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct StorageFund has store {\n    total_object_storage_rebates: Balance<SUI>,\n    non_refundable_balance: Balance<SUI>\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Token Claim Processing in Move\nDESCRIPTION: Processes a token claim request internally, validating signatures, checking limits and minting tokens. Returns the claimed tokens and target address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\nfun claim_token_internal<T>(\n    bridge: &mut Bridge,\n    clock: &Clock,\n    source_chain: u8,\n    bridge_seq_num: u64,\n    ctx: &mut TxContext,\n): (Option<Coin<T>>, address) {\n    let inner = load_inner_mut(bridge);\n    assert!(!inner.paused, EBridgeUnavailable);\n    let key = message::create_key(source_chain, message_types::token(), bridge_seq_num);\n    assert!(inner.token_transfer_records.contains(key), EMessageNotFoundInRecords);\n    let record = &mut inner.token_transfer_records[key];\n    assert!(\n        &record.message.message_type() == message_types::token(),\n        EUnexpectedMessageType,\n    );\n    assert!(record.verified_signatures.is_some(), EUnauthorisedClaim);\n    let token_payload = record.message.extract_token_bridge_payload();\n    let owner = address::from_bytes(token_payload.token_target_address());\n    if (record.claimed) {\n        emit(TokenTransferAlreadyClaimed { message_key: key });\n        return (option::none(), owner)\n    };\n    let target_chain = token_payload.token_target_chain();\n    assert!(target_chain == inner.chain_id, EUnexpectedChainID);\n    let route = chain_ids::get_route(source_chain, target_chain);\n    assert!(\n        treasury::token_id<T>(&inner.treasury) == token_payload.token_type(),\n        EUnexpectedTokenType,\n    );\n    let amount = token_payload.token_amount();\n    if (!inner\n        .limiter\n        .check_and_record_sending_transfer<T>(\n        &inner.treasury,\n        clock,\n        route,\n        amount,\n    )\n    ) {\n        emit(TokenTransferLimitExceed { message_key: key });\n        return (option::none(), owner)\n    };\n    let token = inner.treasury.mint<T>(amount, ctx);\n    record.claimed = true;\n    emit(TokenTransferClaimed { message_key: key });\n    (option::some(token), owner)\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Method Chaining in Move\nDESCRIPTION: This snippet illustrates how method calls can be chained in Move. It defines Point and Line structs and shows how to chain method calls to access nested properties.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_17\n\nLANGUAGE: move\nCODE:\n```\nmodule a::shapes {\n    public struct Point has copy, drop, store { x: u64, y: u64 }\n    public struct Line has copy, drop, store { start: Point, end: Point }\n\n    public fun x(p: &Point): u64 { p.x }\n    public fun y(p: &Point): u64 { p.y }\n\n    public fun start(l: &Line): &Point { &l.start }\n    public fun end(l: &Line): &Point { &l.end }\n\n}\n\nmodule b::example {\n    use a::shapes::Line;\n\n    public fun x_values(l: Line): (u64, u64) {\n        (l.start().x(), l.end().x())\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Group Element Multiplication in Move\nDESCRIPTION: Multiplies a scalar element with a group element to produce another group element. Takes type parameter and two Element inputs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun mul<S, G>(type_: u8, scalar: &Element<S>, e: &Element<G>): Element<G> {\n    Element<G> { bytes: internal_mul(type_, &scalar.bytes, &e.bytes) }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Phantom Type Parameters with Ability Constraints in Move\nDESCRIPTION: Shows how to declare phantom type parameters with ability constraints in Move structs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\npublic struct S<phantom T: copy> {}\n```\n\n----------------------------------------\n\nTITLE: Defining buy_two Function Signature in Move\nDESCRIPTION: Specifies the signature of the buy_two function used in the MoveCall command, showing its parameters and return types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\nentry fun buy_two(\n    marketplace: &mut Marketplace,\n    coin: Coin<Sui>,\n    ctx: &mut TxContext,\n): (Item, Item)\n```\n\n----------------------------------------\n\nTITLE: Destroying Empty Sui Bag (Move)\nDESCRIPTION: Implements the 'destroy_empty' function to destroy an empty bag. It aborts with EBagNotEmpty if the bag still contains values. The function deletes the bag's ID if it's empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bag.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_empty(bag: Bag) {\n    let Bag { id, size } = bag;\n    assert!(size == 0, EBagNotEmpty);\n    id.delete()\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Deny List for Regulated Coins in Move\nDESCRIPTION: Functions to add and remove addresses from the deny list for regulated coins, preventing them from interacting with the specified coin type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_37\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deny_list_add<T>(\n    deny_list: &mut DenyList,\n    _deny_cap: &mut DenyCap<T>,\n    addr: address,\n    _ctx: &mut TxContext,\n) {\n    let type = type_name::into_string(type_name::get_with_original_ids<T>()).into_bytes();\n    deny_list.v1_add(DENY_LIST_COIN_INDEX, type, addr)\n}\n\npublic fun deny_list_remove<T>(\n    deny_list: &mut DenyList,\n    _deny_cap: &mut DenyCap<T>,\n    addr: address,\n    _ctx: &mut TxContext,\n) {\n    let type = type_name::into_string(type_name::get_with_original_ids<T>()).into_bytes();\n    deny_list.v1_remove(DENY_LIST_COIN_INDEX, type, addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Sui Network Environments\nDESCRIPTION: This snippet demonstrates how to use the 'sui client envs' command to list available network environments configured in the CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n╭────────┬────────────────────────────────────┬────────╮\n│ alias  │ url                                │ active │\n├────────┼────────────────────────────────────┼────────┤\n│ devnet │ https://fullnode.devnet.sui.io:443 │ *  \t   │\n╰────────┴────────────────────────────────────┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Destroying Droppable Vectors in Move\nDESCRIPTION: Illustrates that vectors containing elements with the 'drop' ability can be implicitly destroyed without explicit cleanup.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/primitive-types/vector.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nfun destroy_droppable_vector<T: drop>(vec: vector<T>) {\n    // valid!\n    // nothing needs to be done explicitly to destroy the vector\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Payments with Transfer-to-Object in Move on Sui\nDESCRIPTION: Implements a function to handle payments using transfer-to-object functionality. It checks if the transaction sender is authorized before exchanging a payment ticket for the actual payment object, allowing for parallel payment processing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/move/transfer-to-object/README.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\n/// We take the `Register` shared object mutably, along with a \"ticket\"\n// `handle_payment` that we can exchange for the actual `IdentifiedPayment` object\n// that it is associated with.\npublic fun handle_payment(\n    register: &mut Register,\n    handle_payment: Receiving<IdentifiedPayment>,\n    ctx: &TxContext\n): IdentifiedPayment {\n    // If the sender of the transaction that wants to handle this payment is in\n    // the list of authorized employees in the `Register` object then we will\n    // permit them to withdraw the `IdentifiedPayment` object.\n    assert!(\n        vector::contains(&register.authorized_employees, tx_context::sender(ctx)),\n        ENotAuthorized\n    );\n    // Authorization check successful -- exchange the `handle_payment` ticket\n    // for the `IdentifiedPayment` object and return it.\n    transfer::public_receive(&mut register.id, handle_payment)\n}\n```\n\n----------------------------------------\n\nTITLE: Convert to Fungible Staked SUI\nDESCRIPTION: Converts staked SUI to fungible staked SUI tokens for both active and inactive validator pools.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun convert_to_fungible_staked_sui(\n    self: &mut ValidatorSet,\n    staked_sui: StakedSui,\n    ctx: &mut TxContext,\n): FungibleStakedSui {\n    let staking_pool_id = staked_sui.pool_id();\n    let validator = if (self.staking_pool_mappings.contains(staking_pool_id)) {\n        let validator_address = self.staking_pool_mappings[staking_pool_id];\n        self.get_candidate_or_active_validator_mut(validator_address)\n    } else {\n        assert!(self.inactive_validators.contains(staking_pool_id), ENoPoolFound);\n        self.inactive_validators[staking_pool_id].load_validator_maybe_upgrade()\n    };\n    validator.convert_to_fungible_staked_sui(staked_sui, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unverified Validator Operation Capability Struct\nDESCRIPTION: Represents an unverified capability object for performing validator operations with an associated validator address and object ID\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_cap.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct UnverifiedValidatorOperationCap has key, store {\n    id: sui::object::UID,\n    authorizer_validator_address: address\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing square root function for u8 values\nDESCRIPTION: Calculates the nearest lower integer square root for a u8 value using the std::macros::num_sqrt macro. For non-perfect squares, returns the floor of the actual square root.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sqrt(x: u8): u8 {\n    std::macros::num_sqrt!<u8, u16>(x, 8)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommitteeMember Structure in Move\nDESCRIPTION: Defines the structure that represents a committee member, including their Sui address, bridge public key, voting power, HTTP REST URL, and blocklist status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic struct CommitteeMember has copy, drop, store {\n    sui_address: address,\n    bridge_pubkey_bytes: vector<u8>,\n    voting_power: u64,\n    http_rest_url: vector<u8>,\n    blocklisted: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Redeem Fungible Staked SUI\nDESCRIPTION: Redeems fungible staked SUI tokens back to regular SUI tokens for both active and inactive validator pools.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun redeem_fungible_staked_sui(\n    self: &mut ValidatorSet,\n    fungible_staked_sui: FungibleStakedSui,\n    ctx: &TxContext,\n): Balance<SUI> {\n    let staking_pool_id = fungible_staked_sui.pool_id();\n    let validator = if (self.staking_pool_mappings.contains(staking_pool_id)) {\n        let validator_address = self.staking_pool_mappings[staking_pool_id];\n        self.get_candidate_or_active_validator_mut(validator_address)\n    } else {\n        assert!(self.inactive_validators.contains(staking_pool_id), ENoPoolFound);\n        self.inactive_validators[staking_pool_id].load_validator_maybe_upgrade()\n    };\n    validator.redeem_fungible_staked_sui(fungible_staked_sui, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting TypeName to String in Move\nDESCRIPTION: The into_string function converts a TypeName object into its inner String representation. This function simply returns the name field of the TypeName struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/type_name.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun into_string(self: TypeName): String {\n    self.name\n}\n```\n\n----------------------------------------\n\nTITLE: Appending an ASCII String to Another in Move\nDESCRIPTION: Appends one ASCII string to the end of another. It takes a mutable reference to the target String and consumes the other String.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun append(string: &mut String, other: String) {\n    string.bytes.append(other.into_bytes())\n}\n```\n\n----------------------------------------\n\nTITLE: Object Pruning Configuration for Sui Nodes\nDESCRIPTION: Configuration for controlling object version pruning in Sui, with settings to manage database storage and performance across different node types\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/data-management.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthority-store-pruning-config:\n  num-latest-epoch-dbs-to-retain: 3\n  epoch-db-pruning-period-secs: 3600\n  num-epochs-to-retain: 1\n  max-checkpoints-in-batch: 10\n  max-transactions-in-batch: 1000\n```\n\n----------------------------------------\n\nTITLE: Borrowing Configuration Setting for Next Epoch in Move\nDESCRIPTION: This function borrows a mutable reference to a configuration setting for the next epoch. It checks that the setting has been set for the current epoch and returns a mutable reference to the value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/config.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun borrow_for_next_epoch_mut<\n    WriteCap,\n    Name: copy + drop + store,\n    Value: copy + drop + store,\n>(\n    config: &mut Config<WriteCap>,\n    _cap: &mut WriteCap,\n    name: Name,\n    ctx: &mut TxContext,\n): &mut Value {\n    let epoch = ctx.epoch();\n    let sobj: &mut Setting<Value> = field::borrow_mut(&mut config.id, name);\n    let data = sobj.data.borrow_mut();\n    assert!(data.newer_value_epoch == epoch, ENotSetForEpoch);\n    assert!(data.newer_value.is_some(), ENotSetForEpoch);\n    data.newer_value.borrow_mut()\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Singleton Function\nDESCRIPTION: Creates a new vector containing a single element\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun singleton<Element>(e: Element): vector<Element> {\n    let mut v = empty();\n    v.push_back(e);\n    v\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Update Function Template - Move Implementation\nDESCRIPTION: Move function template for updating coin metadata fields. Requires treasury cap and mutable metadata reference.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/coin.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic entry fun <FUNCTION-NAME><T>(\n  _treasury: &coin::TreasuryCap<T>,\n  metadata: &mut coin::CoinMetadata<T>,\n  <ATTRIBUTE-TYPE>\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Sui Genesis Ceremony Workspace\nDESCRIPTION: Commands to create and initialize a shared workspace for the Sui Genesis Ceremony using git. This is typically performed by the Master of Ceremony (MC).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui/genesis.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git init genesis && cd genesis\n$ sui genesis-ceremony \n$ git add .\n$ git commit -m \"init genesis\"\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Batch Cancel Orders TypeScript SDK Implementation\nDESCRIPTION: This TypeScript function implements the batch cancel order functionality in the SDK. It takes token types, order IDs, account capacity, and optional overrides as parameters. The function constructs a transaction block for canceling multiple orders.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\npublic async batchCancelOrder(\n    token1: string,\n    token2: string,\n    orderIds: Uint8Array,\n    accountCap: string,\n    overrides: Overrides = new Overrides(),\n): Promise<TransactionBlock> {\n    const tokenType1 = convertToTokenType(token1, this.records);\n    const tokenType2 = convertToTokenType(token2, this.records);\n    const poolInfo: PoolInfo = getPoolInfoByRecords(tokenType1, tokenType2, this.records);\n    overrides.txb.moveCall({\n        typeArguments: [tokenType1, tokenType2],\n        target: `${this.configs.swapPackageId}::clob::batch_cancel_order`,\n        arguments: [\n            overrides.txb.object(String(poolInfo.clob)),\n            overrides.txb.pure(String(orderIds)),\n            overrides.txb.object(accountCap),\n        ],\n    });\n    overrides.txb.setGasBudget(defaultGasBudget);\n    return overrides.txb;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Bag Struct in Move\nDESCRIPTION: This snippet shows the definition of the Bag struct, which contains an ID and a size field to track the number of key-value pairs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bag.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Bag has key, store {\n    id: sui::object::UID,\n    size: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Token Policy Confirmation Function in Move\nDESCRIPTION: Function signature for confirming an action request using TokenPolicy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/action-request.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun confirm_request<T>(\n    treasury_cap: &TokenPolicy<T>,\n    request: ActionRequest<T>,\n    ctx: &mut TxContext\n): (String, u64, address, Option<address>);\n```\n\n----------------------------------------\n\nTITLE: Requesting SUI Tokens from Faucet\nDESCRIPTION: Command to request SUI tokens from the faucet for the connected network account.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client faucet\n```\n\n----------------------------------------\n\nTITLE: Placing Market Orders in DeepBookV3 with TypeScript\nDESCRIPTION: Function for placing market orders in DeepBookV3. Takes parameters similar to limit orders but without price specification. Returns a function that takes a Transaction object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/orders.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nplaceMarketOrder({ params: PlaceMarketOrderParams });\n```\n\n----------------------------------------\n\nTITLE: Creating ProofPoints from Bytes in Move\nDESCRIPTION: Creates a ProofPoints wrapper from bytes. The bytes parameter should be a concatenation of three curve points in compressed format (3 * 32 = 96 bytes for BN254 or 3 * 48 = 144 bytes for BLS12-381).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/groth16.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun proof_points_from_bytes(bytes: vector<u8>): ProofPoints {\n    assert!(bytes.length() == 96 || bytes.length() == 144, EInvalidScalar);\n    ProofPoints { bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating P2P Address for Candidate Validators in Move\nDESCRIPTION: This function updates the P2P address of a candidate validator. It verifies the validator's preactive status and ensures the address meets length requirements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_81\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun update_candidate_p2p_address(self: &mut Validator, p2p_address: vector<u8>) {\n    assert!(self.is_preactive(), ENotValidatorCandidate);\n    assert!(\n        p2p_address.length() <= MAX_VALIDATOR_METADATA_LENGTH,\n        EValidatorMetadataExceedingLengthLimit,\n    );\n    let p2p_address = p2p_address.to_ascii_string().to_string();\n    self.metadata.p2p_address = p2p_address;\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Sender from ActionRequest in Move\nDESCRIPTION: This function returns the Sender of an ActionRequest. It takes an ActionRequest as input and returns an address representing the sender.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_47\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sender<T>(self: &ActionRequest<T>): address { self.sender }\n```\n\n----------------------------------------\n\nTITLE: Multiplying Fixed-point Numbers in Move\nDESCRIPTION: Multiplies two fixed-point numbers, truncating any fractional part of the product. Aborts if the product overflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun mul(a: UQ64_64, b: UQ64_64): UQ64_64 {\n    UQ64_64(int_mul(a.0, b))\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Sui Bag is Empty (Move)\nDESCRIPTION: Implements the 'is_empty' function to check if the bag contains no key-value pairs. It compares the 'size' field to zero.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bag.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_empty(bag: &Bag): bool {\n    bag.size == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Signer Keypair from Sui Client CLI\nDESCRIPTION: Retrieves the active address signer keypair from the Sui Client CLI configuration using Ed25519 cryptography.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { execSync } from 'child_process';\nimport { readFileSync } from 'fs';\nimport { homedir } from 'os';\nimport path from 'path';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { fromBase64 } from '@mysten/sui/utils';\n\nconst sender = execSync(`${SUI} client active-address`, { encoding: 'utf8' }).trim();\nconst signer = (() => {\n\tconst keystore = JSON.parse(\n\t\treadFileSync(path.join(homedir(), '.sui', 'sui_config', 'sui.keystore'), 'utf8'),\n\t);\n\n\tfor (const priv of keystore) {\n\t\tconst raw = fromBase64(priv);\n\t\tif (raw[0] !== 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst pair = Ed25519Keypair.fromSecretKey(raw.slice(1));\n\t\tif (pair.getPublicKey().toSuiAddress() === sender) {\n\t\t\treturn pair;\n\t\t}\n\t}\n\n\tthrow new Error(`keypair not found for sender: ${sender}`);\n})();\n```\n\n----------------------------------------\n\nTITLE: GetLevel2Range Function Definition\nDESCRIPTION: Function signature for retrieving level 2 order book data within a specified price range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nasync getLevel2Range(poolKey: string, priceLow: number, priceHigh: number, isBid: boolean) {}\n```\n\n----------------------------------------\n\nTITLE: Purchase Cap Kiosk ID Accessor\nDESCRIPTION: Function to get the kiosk_id from a PurchaseCap capability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_51\n\nLANGUAGE: Move\nCODE:\n```\npublic fun purchase_cap_kiosk<T: key + store>(self: &PurchaseCap<T>): ID {\n    self.kiosk_id\n}\n```\n\n----------------------------------------\n\nTITLE: Starting and Monitoring Sui Node\nDESCRIPTION: Commands to start the Sui Node service, check its status, and follow the logs using systemd and journalctl.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/systemd/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl start sui-node\nsudo systemctl status sui-node\njournalctl -u sui-node -f\n```\n\n----------------------------------------\n\nTITLE: OrderFilled Structure Definition in Move\nDESCRIPTION: Event struct emitted when a maker order is filled, containing details about the trade including quantities, pricing, and commission information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic struct OrderFilled<phantom BaseAsset, phantom QuoteAsset> has copy, drop, store\n```\n\n----------------------------------------\n\nTITLE: Destroying an Empty Linked Table in Move\nDESCRIPTION: This function destroys a linked table if it is empty, aborting with an error if the table is not empty. The prerequisites include the table being empty and the key must support 'copy', 'drop', and 'store', while the value type requires 'store'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_empty<K: copy, drop, store, V: store>(table: sui::linked_table::LinkedTable<K, V>)\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_empty<K: copy + drop + store, V: store>(table: LinkedTable<K, V>) {\n    let LinkedTable { id, size, head: _, tail: _ } = table;\n    assert!(size == 0, ETableNotEmpty);\n    id.delete()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Character to ASCII String in Move\nDESCRIPTION: Function that appends a Char to the end of an ASCII String by pushing the character's byte value to the string's bytes vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic fun push_char(string: &mut String, char: Char) {\n    string.bytes.push_back(char.byte);\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting and Transferring Tokens with Sui CLI in Bash\nDESCRIPTION: Executes a command using Sui CLI to split a token and transfer parts to a recipient. It requires parameters such as amount and recipient, enabling partial distribution of tokens for more flexible asset management.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/regulated-token/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsui client call --json \\\n    --package $PKG --module reg --function split_and_transfer \\\n    --gas-budget 100000000 \\\n    --args $POLICY \"0x_token\" \"amount\" \"0x_recipient\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator Image URL in Move\nDESCRIPTION: Obtains the image URL associated with the validator, which may be used in UI elements to represent the validator visually.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_47\n\nLANGUAGE: Move\nCODE:\n```\npublic fun image_url(self: &sui_system::validator::Validator): &sui::url::Url {\n    &self.metadata.image_url\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration API - Remove Config\nDESCRIPTION: API function for removing rule configurations. Can be called by TokenPolicy owner at any time.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/rules.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\n// module: sui::token\npublic fun remove_rule_config<T, Rule, Config: store>(\n    policy: &mut TokenPolicy<T>,\n    policy_cap: &TokenPolicyCap<T>,\n    _ctx: &mut TxContext\n): Config;\n```\n\n----------------------------------------\n\nTITLE: Executing TransferObjects Command in Rust\nDESCRIPTION: Demonstrates the effect of the TransferObjects command, which transfers the gas coin and first item to a specified address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nGas Coin: _ // The gas coin is moved\nInputs: [\n  Pure(/* @0x808 BCS bytes */ ...),\n  Marketplace { id: market_id, ... },\n  Pure(/* 100u64 BCS bytes */ ...),\n]\nResults: [\n  [ _ ],\n  [ _ , Item { id: id2 }], // One item was moved\n  [], // No results from TransferObjects\n],\n```\n\n----------------------------------------\n\nTITLE: Sui Objects Flow Diagram\nDESCRIPTION: Mermaid flowchart showing the relationship between a Sui address and its objects (Forge, UpgradeCap, and Coin).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/publish.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n\n    subgraph Sui Blockchain\n        direction TB\n        address --> Forge\n\taddress --> UpgradeCap\n\taddress --> Coin\n    end\n```\n\n----------------------------------------\n\nTITLE: Retrieving Spend Action Name in Move\nDESCRIPTION: This function returns the name of the Spend action as a String. It doesn't take any parameters and returns a predefined string constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_42\n\nLANGUAGE: Move\nCODE:\n```\npublic fun spend_action(): String {\n    let spend_str = SPEND;\n    spend_str.to_string()\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Optional Values in Sui Validator\nDESCRIPTION: A helper macro that extracts the value from an Option and applies a given function to it. This is used to update validator metadata fields.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_93\n\nLANGUAGE: Move\nCODE:\n```\nmacro fun do_extract<$T>($o: &mut Option<$T>, $f: |$T|) {\n    let o = $o;\n    if (o.is_some()) {\n        $f(o.extract());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Public Key Getter Functions\nDESCRIPTION: Functions to access next epoch public keys (protocol, network, worker) and proof of possession for a validator\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_59\n\nLANGUAGE: Move\nCODE:\n```\npublic fun next_epoch_protocol_pubkey_bytes(self: &Validator): &Option<vector<u8>> {\n    &self.metadata.next_epoch_protocol_pubkey_bytes\n}\n\npublic fun next_epoch_proof_of_possession(self: &Validator): &Option<vector<u8>> {\n    &self.metadata.next_epoch_proof_of_possession\n}\n\npublic fun next_epoch_network_pubkey_bytes(self: &Validator): &Option<vector<u8>> {\n    &self.metadata.next_epoch_network_pubkey_bytes\n}\n\npublic fun next_epoch_worker_pubkey_bytes(self: &Validator): &Option<vector<u8>> {\n    &self.metadata.next_epoch_worker_pubkey_bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing num_max Macro in Move\nDESCRIPTION: A macro function that returns the maximum of two numeric values. It compares the inputs and returns the larger one.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_max<$T>($x: $T, $y: $T): $T {\n    let x = $x;\n    let y = $y;\n    if (x > y) x else y\n}\n```\n\n----------------------------------------\n\nTITLE: Set u64 as Prefix in Byte Vector (Move)\nDESCRIPTION: The `set_as_prefix` function sets a `u64` value as a prefix within a byte vector. It takes the `u64` value (`x`), a boolean indicating big-endianness (`big_endian`), and a mutable reference to the byte vector (`buffer`). The function writes the `u64` as a prefix in the buffer, either in big-endian or little-endian format, and asserts that the buffer length is greater than 7.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b>(<b>package</b>) <b>fun</b> <a href=\"../sui/group_ops.md#sui_group_ops_set_as_prefix\">set_as_prefix</a>(x: u64, big_endian: bool, buffer: &<b>mut</b> vector&lt;u8&gt;) {\n    <b>let</b> buffer_len = buffer.length();\n    <b>assert</b>!(buffer_len &gt; 7, <a href=\"../sui/group_ops.md#sui_group_ops_EInvalidBufferLength\">EInvalidBufferLength</a>);\n    <b>let</b> x_as_bytes = <a href=\"../sui/bcs.md#sui_bcs_to_bytes\">bcs::to_bytes</a>(&x); // little endian\n    <b>let</b> <b>mut</b> i = 0;\n    <b>while</b> (i &lt; 8) {\n        <b>let</b> position = <b>if</b> (big_endian) {\n            buffer_len - i - 1\n        } <b>else</b> {\n            i\n        };\n        *(&<b>mut</b> buffer[position]) = x_as_bytes[i];\n        i = i + 1;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Move Value to BCS Bytes in Move\nDESCRIPTION: This function takes a generic Move value and returns its binary representation in BCS format. It is a native function, meaning its implementation is provided by the runtime environment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/bcs.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun to_bytes<MoveValue>(v: &MoveValue): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Checking Sorted Status of Vector in Move\nDESCRIPTION: The `is_sorted_by` macro function checks if a vector is sorted in non-decreasing order using a comparison function. It returns true if the vector is sorted according to the provided comparison function, otherwise false.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_33\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun is_sorted_by<$T>($v: &vector<$T>, $le: |&$T, &$T| -> bool): bool {\n    let v = $v;\n    let n_minus_1 = v.length().max(1) - 1;\n    'is_sorted_by: {\n        n_minus_1.do!(|i| if (!$le(&v[i], &v[i + 1])) return 'is_sorted_by false);\n        true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninitialized Variable Declaration and Conditional Assignment in Move\nDESCRIPTION: This example shows how to declare an uninitialized variable and assign it a value conditionally or in a loop.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nlet x;\nif (cond) {\n  x = 1\n} else {\n  x = 0\n}\n\nlet x;\nlet cond = true;\nlet i = 0;\nloop {\n    let (res, cond) = foo(i);\n    if (!cond) {\n        x = res;\n        break;\n    };\n    i = i + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Historical Volume Example in DeepBook API\nDESCRIPTION: Shows an example HTTP request for historical volume data and its corresponding JSON response. The response includes time ranges and volume data for specific pools.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_10\n\nLANGUAGE: http\nCODE:\n```\n/historical_volume_by_balance_manager_id_with_interval/USDC_DEEP,SUI_USDC/0x344c2734b1d211bd15212bfb7847c66a3b18803f3f5ab00f5ff6f87b6fe6d27d?start_time=1731460703&end_time=1731692703&interval=86400&volume_in_base=true\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"[1731460703, 1731547103]\": {\n\t\t\"SUI_USDC\": [\n\t\t\t505887400000000,\n\t\t\t2051300000000\n\t\t]\n\t},\n\t\"[1731547103, 1731633503]\": {\n\t\t\"SUI_USDC\": [\n\t\t\t336777500000000,\n\t\t\t470600000000\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UQ64_64 from Raw u128 Value in Move\nDESCRIPTION: Function that creates a UQ64_64 fixed-point number from a raw u128 value. This allows construction of fixed-point numbers from their underlying representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_raw(raw_value: u128): UQ64_64 {\n    UQ64_64(raw_value)\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Creation Function\nDESCRIPTION: Function to create and share a new Counter object with initial value set to zero.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun create(ctx: &mut TxContext) {\n    let sender = tx_context::sender(ctx);\n    let counter = Counter {\n        id: object::new(ctx),\n        owner: sender,\n        value: 0\n    };\n    transfer::share_object(counter);\n}\n```\n\n----------------------------------------\n\nTITLE: Multiplication and Division Macro in Sui System (Rust)\nDESCRIPTION: This macro performs multiplication of two u64 values and then divides the result by a third u64 value. It uses u128 for intermediate calculations to prevent overflow, then casts the result back to u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_65\n\nLANGUAGE: Rust\nCODE:\n```\nmacro fun mul_div($a: u64, $b: u64, $c: u64): u64 {\n    (($a as u128) * ($b as u128) / ($c as u128)) as u64\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User Available Balance in Move\nDESCRIPTION: This function retrieves the available balance of a user in the custodian system. It takes the custodian object and owner's address as parameters, and returns the balance as a u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun account_available_balance<T>(\n    custodian: &Custodian<T>,\n    owner: address,\n): u64 {\n    balance::value(&table::borrow(&custodian.account_balances, owner).available_balance)\n}\n```\n\n----------------------------------------\n\nTITLE: Token Policy Confirmation Example in JavaScript\nDESCRIPTION: Example of confirming a transfer request using TokenPolicy in a JavaScript client.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/action-request.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = new Transaction();\nlet tokenType = '0x....::my_token::MY_TOKEN';\nlet myTokenArg = tx.object('0x...token_object');\nlet receiverArg = tx.pure.address('0x...receiver');\nlet tokenPolicyArg = tx.object('0x...token_policy');\n\nlet request = tx.moveCall({\n\ttarget: '0x2::token::transfer',\n\targuments: [myTokenArg, receiverArg],\n\ttypeArguments: [tokenType],\n});\n\ntx.moveCall({\n\ttarget: '0x2::token::confirm_request',\n\targuments: [tokenPolicyArg, request],\n\ttypeArguments: [tokenType],\n});\n```\n\n----------------------------------------\n\nTITLE: Activating Staking Pool in Move\nDESCRIPTION: Activates a staking pool by setting the initial exchange rate and activation epoch. Checks pool state to ensure it can be activated.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun activate_staking_pool(pool: &mut StakingPool, activation_epoch: u64) {\n    pool.exchange_rates.add(activation_epoch, initial_exchange_rate());\n    assert!(pool.is_preactive(), EPoolAlreadyActive);\n    assert!(!pool.is_inactive(), EActivationOfInactivePool);\n    pool.activation_epoch.fill(activation_epoch);\n}\n```\n\n----------------------------------------\n\nTITLE: Range Loop Implementation (Exclusive)\nDESCRIPTION: Implements a range-based loop that applies a function to each value from start to stop (exclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do<$R: drop>($start: u256, $stop: u256, $f: |u256| -> $R) {\n    std::macros::range_do!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Clippy for code analysis in Rust\nDESCRIPTION: This command runs Clippy with the project's configuration to catch common mistakes and enforce code quality standards in the Move Rust project.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/coding_guidelines.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo xclippy --all-targets\n```\n\n----------------------------------------\n\nTITLE: Retrieving Summary Data Example in DeepBook API\nDESCRIPTION: Provides an example response for the summary endpoint, showing data for multiple trading pairs including price, volume, and currency information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n    \"trading_pairs\": \"AUSD_USDC\",\n    \"quote_currency\": \"USDC\",\n    \"last_price\": 1.0006,\n    \"lowest_price_24h\": 0.99905,\n    \"highest_bid\": 1.0006,\n    \"base_volume\": 1169.2,\n    \"price_change_percent_24h\": 0.07501125168773992,\n    \"quote_volume\": 1168.961637,\n    \"lowest_ask\": 1.0007,\n    \"highest_price_24h\": 1.00145,\n    \"base_currency\": \"AUSD\"\n  },\n  {\n    \"quote_volume\": 4063809.55231,\n    \"lowest_price_24h\": 0.9999,\n    \"highest_price_24h\": 1.009,\n    \"base_volume\": 4063883.6,\n    \"quote_currency\": \"USDC\",\n    \"price_change_percent_24h\": 0.0,\n    \"base_currency\": \"WUSDC\",\n    \"trading_pairs\": \"WUSDC_USDC\",\n    \"last_price\": 1.0,\n    \"highest_bid\": 1.0,\n    \"lowest_ask\": 1.0001\n  },\n  {\n\t\t\"price_change_percent_24h\": 0.0,\n\t\t\"quote_currency\": \"USDC\",\n\t\t\"lowest_price_24h\": 0.0,\n\t\t\"quote_volume\": 0.0,\n\t\t\"base_volume\": 0.0,\n\t\t\"highest_price_24h\": 0.0,\n\t\t\"lowest_ask\": 1.04,\n\t\t\"last_price\": 1.04,\n\t\t\"base_currency\": \"WUSDT\",\n\t\t\"highest_bid\": 0.90002,\n\t\t\"trading_pairs\": \"WUSDT_USDC\"\n\t},\n\t...\n]\n```\n\n----------------------------------------\n\nTITLE: VDF Verification Function Implementation\nDESCRIPTION: Public function to verify VDF output and proof with given iterations. Processes class group elements represented as triples (a,b,c).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vdf.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun vdf_verify(\n    input: &vector<u8>,\n    output: &vector<u8>,\n    proof: &vector<u8>,\n    iterations: u64,\n): bool {\n    vdf_verify_internal(input, output, proof, iterations)\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Recursive Struct Definitions\nDESCRIPTION: Examples of invalid recursive struct definitions that will cause compilation errors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/structs.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic struct Foo { x: Foo }\n//                     ^ ERROR! recursive definition\n\npublic struct A { b: B }\npublic struct B { a: A }\n//                   ^ ERROR! recursive definition\n\npublic struct D(D)\n//              ^ ERROR! recursive definition\n```\n\n----------------------------------------\n\nTITLE: Destroying Empty Vectors in Move\nDESCRIPTION: Shows how to explicitly destroy an empty vector in Move, which is necessary for vectors containing elements without the 'drop' ability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/primitive-types/vector.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nfun destroy_any_vector<T>(vec: vector<T>) {\n    vector::destroy_empty(vec) // deleting this line will cause a compiler error\n}\n```\n\n----------------------------------------\n\nTITLE: Converting ECDSA Public Key to Ethereum Address\nDESCRIPTION: Function that converts a compressed ECDSA public key to an Ethereum address by decompressing the key, removing the first byte, performing Keccak-256 hashing, and taking the last 20 bytes\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/crypto.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun ecdsa_pub_key_to_eth_address(compressed_pub_key: &vector<u8>): vector<u8> {\n    // Decompress pub key\n    let decompressed = ecdsa_k1::decompress_pubkey(compressed_pub_key);\n    // Skip the first byte\n    let (mut i, mut decompressed_64) = (1, vector[]);\n    while (i < 65) {\n        decompressed_64.push_back(decompressed[i]);\n        i = i + 1;\n    };\n    // Hash\n    let hash = keccak256(&decompressed_64);\n    // Take last 20 bytes\n    let mut address = vector[];\n    let mut i = 12;\n    while (i < 32) {\n        address.push_back(hash[i]);\n        i = i + 1;\n    };\n    address\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pool Token Exchange Rate by Epoch - Move\nDESCRIPTION: This function returns the pool token exchange rate for a specific epoch by delegating to the staking pool's pool_token_exchange_rate_at_epoch function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_69\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pool_token_exchange_rate_at_epoch(self: &Validator, epoch: u64): PoolTokenExchangeRate {\n    self.staking_pool.pool_token_exchange_rate_at_epoch(epoch)\n}\n```\n\n----------------------------------------\n\nTITLE: Item Placement Function in Move\nDESCRIPTION: Protected function for placing items into a Kiosk requiring place or lock permissions. Includes validation of extension installation and transfer policy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\npublic fun place<Ext: drop, T: key + store>(\n    _ext: Ext,\n    self: &mut Kiosk,\n    item: T,\n    _policy: &TransferPolicy<T>,\n) {\n    assert!(is_installed<Ext>(self), EExtensionNotInstalled);\n    assert!(can_place<Ext>(self) || can_lock<Ext>(self), EExtensionNotAllowed);\n    self.place_internal(item)\n}\n```\n\n----------------------------------------\n\nTITLE: Function Body with Return Value Example\nDESCRIPTION: Shows how a function's body evaluates to the return value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_13\n\nLANGUAGE: move\nCODE:\n```\nfun example(): u64 {\n    let x = 0;\n    x = x + 1;\n    x // returns 'x'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing traversal functions for LinkedTable in Move\nDESCRIPTION: Provides functions to traverse the LinkedTable by getting previous and next keys for a given key. Returns None if no adjacent element exists.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun prev<K: copy + drop + store, V: store>(table: &LinkedTable<K, V>, k: K): &Option<K> {\n    &field::borrow<K, Node<K, V>>(&table.id, k).prev\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on macOS\nDESCRIPTION: Command to install Homebrew package manager on macOS. Homebrew is used to install various dependencies for Sui on macOS.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a new Versioned object in Move\nDESCRIPTION: Function to create a new Versioned object with an initial value and version.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/versioned.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create<T: store>(init_version: u64, init_value: T, ctx: &mut TxContext): Versioned {\n    let mut self = Versioned {\n        id: object::new(ctx),\n        version: init_version,\n    };\n    dynamic_field::add(&mut self.id, init_version, init_value);\n    self\n}\n```\n\n----------------------------------------\n\nTITLE: Defining zip_do_ref Macro for Vector Element References\nDESCRIPTION: This macro iterates over two vectors and applies a provided function to pairs of elements referenced by their indices. It aborts if the vectors differ in length, thus ensuring safe operations. No modifications are made to the input vectors during this process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_27\n\nLANGUAGE: Rust\nCODE:\n```\n\"public macro fun zip_do_ref<$T1, $T2, $R: drop>($v1: &vector<$T1>, $v2: &vector<$T2>, $f: |&$T1, &$T2| -> $R) {\\n    let v1 = $v1;\\n    let v2 = $v2;\\n    let len = v1.length();\\n    assert!(len == v2.length());\\n    len.do!(|i| $f(&v1[i], &v2[i]));\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Switch Active Address using Sui CLI\nDESCRIPTION: This command changes the active address used by the Sui CLI to the specified address or alias. Subsequent transactions and operations will be performed using this active address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client switch --address ADDRESS\"\n```\n\n----------------------------------------\n\nTITLE: Type Error with Reference Comparison in Move\nDESCRIPTION: Example showing a type error when comparing references to different types. Even with references, the underlying types must match for equality operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/equality.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nlet i = &0;\nlet s = &b\"\";\n\ni == s; // ERROR!\n//   ^ expected an argument of type '&u64'\n```\n\n----------------------------------------\n\nTITLE: String Substring Implementation\nDESCRIPTION: Extracts a substring using byte indices, ensuring the indices are at valid UTF-8 character boundaries.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun substring(s: &String, i: u64, j: u64): String {\n    let bytes = &s.bytes;\n    let l = bytes.length();\n    assert!(\n        j <= l &&\n            i <= j &&\n            internal_is_char_boundary(bytes, i) &&\n            internal_is_char_boundary(bytes, j),\n        EInvalidIndex,\n    );\n    String { bytes: internal_sub_string(bytes, i, j) }\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Shadowing in Move\nDESCRIPTION: Demonstrates how variable shadowing works in Move, including type changes and scoping effects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\nlet x = 0;\nassert!(x == 0, 42);\n\nlet x = 1; // x is shadowed\nassert!(x == 1, 42);\n\nlet x = 0;\n{\n    let x = b\"hello\";\n    assert!(x = b\"hello\", 42);\n};\nassert!(x == 0, 42);\n```\n\n----------------------------------------\n\nTITLE: Pool Token Exchange Rate Struct Definition in Move\nDESCRIPTION: Defines the PoolTokenExchangeRate struct used to track exchange rates between staking pool tokens and SUI tokens.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct PoolTokenExchangeRate has copy, drop, store {\n    sui_amount: u64,\n    pool_token_amount: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AccountCap in Move\nDESCRIPTION: Implements the mint_account_cap function to create an AccountCap that can be used across all DeepBook pools.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun mint_account_cap(_ctx: &mut TxContext): AccountCap {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving current supply information in Rust\nDESCRIPTION: The supply function returns the current circulating supply of the asset. This represents the number of units currently in existence and available in the system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\npublic fun supply<T>(cap: &AssetCap<T>): u64 {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Validator Protocol Public Key\nDESCRIPTION: Function to retrieve the protocol public key bytes from a Validator's metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_53\n\nLANGUAGE: Move\nCODE:\n```\npublic fun protocol_pubkey_bytes(self: &Validator): &vector<u8> {\n    &self.metadata.protocol_pubkey_bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Minimum Value Function\nDESCRIPTION: Returns the smaller of two u128 values using a macro implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun min(x: u128, y: u128): u128 {\n    std::macros::num_min!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Spent Balance from TokenPolicy in Move\nDESCRIPTION: This function returns the spent_balance of a TokenPolicy. It takes a TokenPolicy as input and returns a u64 value representing the spent balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_39\n\nLANGUAGE: Move\nCODE:\n```\npublic fun spent_balance<T>(self: &TokenPolicy<T>): u64 {\n    self.spent_balance.value()\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator Including Candidates with Context in Move\nDESCRIPTION: Gets a mutable reference to a validator using the transaction context, including candidate validators in the search.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_39\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun get_validator_mut_with_ctx_including_candidates(\n    self: &mut ValidatorSet,\n    ctx: &TxContext,\n): &mut Validator {\n    let validator_address = ctx.sender();\n    self.get_active_or_pending_or_candidate_validator_mut(validator_address, true)\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Module Name from TypeName in Rust\nDESCRIPTION: The get_module function extracts the module name from a TypeName object. It aborts if given a primitive type. The function parses the TypeName string, skipping the address part and extracting the module name.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/type_name.md#2025-04-22_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun get_module(self: &TypeName): String {\n    assert!(!self.is_primitive(), ENonModuleType);\n    // Starts after address and a double colon: `<addr as HEX>::`\n    let mut i = address::length() * 2 + 2;\n    let str_bytes = self.name.as_bytes();\n    let mut module_name = vector[];\n    let colon = ASCII_COLON;\n    loop {\n        let char = &str_bytes[i];\n        if (char != &colon) {\n            module_name.push_back(*char);\n            i = i + 1;\n        } else {\n            break\n        }\n    };\n    ascii::string(module_name)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting u256 to u64 with Overflow Checking in Move\nDESCRIPTION: Attempts to convert a u256 value to u64. Returns None if the value exceeds the maximum u64 value, using std::macros::try_as_u64 for the conversion logic.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u64(x: u256): Option<u64> {\n    std::macros::try_as_u64!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing dependencies for the U16 module\nDESCRIPTION: Imports necessary dependencies for the u16 module from the Sui standard library, including ascii, option, string, and vector modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nuse std::ascii;\nuse std::option;\nuse std::string;\nuse std::vector;\n```\n\n----------------------------------------\n\nTITLE: Conditionally Removing Dynamic Field in Move\nDESCRIPTION: This function removes a dynamic field if it exists and returns an Option containing the value if present.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove_if_exists<Name: copy + drop + store, Value: store>(\n    object: &mut UID,\n    name: Name,\n): Option<Value> {\n    if (exists_<Name>(object, name)) {\n        option::some(remove(object, name))\n    } else {\n        option::none()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Function Example\nDESCRIPTION: Demonstrates how to declare native functions that are implemented by the VM.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_14\n\nLANGUAGE: move\nCODE:\n```\nmodule std::vector {\n    native public fun length<Element>(v: &vector<Element>): u64;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Base Assets from Flash Loan in DeepBook (Move)\nDESCRIPTION: This function handles the return of borrowed base assets to the Pool. The FlashLoan object is unwrapped only if the correct amount of assets are returned, otherwise the transaction fails.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/flash-loans.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun return_flashloan_base<BaseAsset, QuoteAsset>(pool: &mut Pool<BaseAsset, QuoteAsset>, loan: FlashLoan<BaseAsset>, coin: Coin<BaseAsset>) {\n    // Emit event\n    event::emit(FlashLoanReturnEvent<BaseAsset, QuoteAsset> {\n        pool_id: *object::id(pool),\n        amount: loan.amount,\n    });\n\n    let pool_id = *object::id(pool);\n    assert!(pool_id == loan.pool_id, EWrongPool);\n    let FlashLoan {pool_id: _, amount} = loan;\n    assert!(coin::value(&coin) >= amount, EInsufficientAmount);\n\n    let coin_balance = coin::into_balance(coin);\n    balance::join(&mut pool.base, coin_balance);\n}\n```\n\n----------------------------------------\n\nTITLE: Allocating Initial Tokens in Sui System Genesis\nDESCRIPTION: Helper function that allocates initial SUI tokens based on predefined allocations. It processes each allocation, either transferring tokens directly to recipients or staking them with validators. The function ensures that all supplied tokens are properly allocated.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/genesis.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\nfun allocate_tokens(\n    mut sui_supply: Balance<SUI>,\n    allocations: vector<TokenAllocation>,\n    validators: &mut vector<Validator>,\n    ctx: &mut TxContext,\n) {\n    allocations.destroy!(\n        |TokenAllocation { recipient_address, amount_mist, staked_with_validator }| {\n            let allocation_balance = sui_supply.split(amount_mist);\n            if (staked_with_validator.is_some()) {\n                let validator_address = staked_with_validator.destroy_some();\n                let validator = validator_set::get_validator_mut(validators, validator_address);\n                validator.request_add_stake_at_genesis(\n                    allocation_balance,\n                    recipient_address,\n                    ctx,\n                );\n            } else {\n                transfer::public_transfer(allocation_balance.into_coin(ctx), recipient_address);\n            };\n        },\n    );\n    // should be none left at this point.\n    // Provided allocations must fully allocate the sui_supply and there\n    sui_supply.destroy_zero();\n}\n```\n\n----------------------------------------\n\nTITLE: DeepBook Event Subscription Setup in TypeScript\nDESCRIPTION: Demonstrates how to set up event subscriptions using the Sui TypeScript SDK to monitor DeepBook order events. Includes configuration of filters for specific event types and pool monitoring.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/orders.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst local_client = new SuiClient({ url: 'https://fullnode.mainnet.sui.io:443/' });\nconst deepbook_client = new DeepBookClient(local_client);\n\nconst deepbook = '0x000000000000000000000000000000000000000000000000000000000000dee9';\nconst deepbookClobEventsFilter = {\n\tMoveModule: { package: deepbook, module: 'clob_v2' },\n};\n\nconst moveEventsFilter = {\n\tMoveEventType:\n\t\t'0xdee9::clob_v2::OrderPlaced<0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>',\n};\nconst orderFilledFilter = {\n\tMoveEventType:\n\t\t'0xdee9::clob_v2::OrderFilled<0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>',\n};\nconst poolFilter = {\n\tMoveEventField: {\n\t\tpath: '/pool_id',\n\t\tvalue: '0xd9e45ab5440d61cc52e3b2bd915cdd643146f7593d587c715bc7bfa48311d826',\n\t},\n};\n\ndeepbook_client.suiClient.subscribeEvent({\n\tfilter: moveEventsFilter,\n\tonMessage(event) {\n\t\tconsole.log(event);\n\t\t// handle subscription notification message here\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Constant Definition: TOTAL_VOTING_POWER\nDESCRIPTION: Defines a constant `TOTAL_VOTING_POWER` set to 10000. This represents the total voting power in the system and is used as a basis for calculating individual validator voting power percentages.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\n<b>const</b> <a href=\"../sui_system/voting_power.md#sui_system_voting_power_TOTAL_VOTING_POWER\">TOTAL_VOTING_POWER</a>: u64 = 10000;\n```\n\n----------------------------------------\n\nTITLE: Checking Global Pause Status for Current Epoch in Move\nDESCRIPTION: Checks if the global pause is enabled for a given coin type in the current epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_30\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deny_list_v2_is_global_pause_enabled_current_epoch<T>(\n    deny_list: &DenyList,\n    ctx: &TxContext,\n): bool {\n    let ty = type_name::get_with_original_ids<T>().into_string().into_bytes();\n    deny_list.v2_is_global_pause_enabled_current_epoch(DENY_LIST_COIN_INDEX, ty, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Sui Full Node with Docker Compose\nDESCRIPTION: Stops the Sui Full node using Docker Compose. This command halts the services defined in the docker-compose.yaml file, effectively stopping the Full node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose stop\n```\n\n----------------------------------------\n\nTITLE: Setting Network Buffer Sizes\nDESCRIPTION: This snippet sets various network buffer parameters which are recommended for optimal Sui node performance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnet.core.rmem_max = 104857600\nnet.core.wmem_max = 104857600\nnet.ipv4.tcp_rmem = 8192 262144 104857600\nnet.ipv4.tcp_wmem = 8192 262144 104857600\n```\n\n----------------------------------------\n\nTITLE: Listing an Item in a Kiosk using PTB\nDESCRIPTION: This JavaScript snippet demonstrates how to list an item for sale in a Sui Kiosk using Programmable Transaction Blocks. It calls the 'list' function from the 'kiosk' module, specifying the kiosk, capability, item ID, price, and item type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = new Transaction();\n\nlet kioskArg = tx.object('<ID>');\nlet capArg = tx.object('<ID>');\nlet itemId = tx.pure.id('<ID>');\nlet itemType = 'ITEM_TYPE';\nlet priceArg = tx.pure.u64('<price>'); // in MIST (1 SUI = 10^9 MIST)\n\ntx.moveCall({\n\ttarget: '0x2::kiosk::list',\n\targuments: [kioskArg, capArg, itemId, priceArg],\n\ttypeArguments: [itemType],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining zip_map_ref Macro for Vector Element Transformation with References\nDESCRIPTION: This macro applies a function to pairs of referenced elements from two given vectors, collecting the results into a new vector. It ensures that the input vectors are of the same length, aborting if they are not, and maintains the order of the elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_30\n\nLANGUAGE: Rust\nCODE:\n```\n\"public macro fun zip_map_ref<$T1, $T2, $U>($v1: &vector<$T1>, $v2: &vector<$T2>, $f: |&$T1, &$T2| -> $U): vector<$U> {\\n    let mut r = vector[];\\n    zip_do_ref!($v1, $v2, |el1, el2| r.push_back($f(el1, el2)));\\n    r\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Balance and Supply Management in Sui\nDESCRIPTION: Functions for managing balances and supply of tokens, including creation, increase, decrease, and operations on balances.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Supply(0x2::balance)\npublic struct Balance(0x2::balance)\npublic fun value(0x2::balance)\npublic fun supply_value(0x2::balance)\npublic fun create_supply(0x2::balance)\npublic fun increase_supply(0x2::balance)\npublic fun decrease_supply(0x2::balance)\npublic fun zero(0x2::balance)\npublic fun join(0x2::balance)\npublic fun split(0x2::balance)\npublic fun withdraw_all(0x2::balance)\npublic fun destroy_zero(0x2::balance)\nfun create_staking_rewards(0x2::balance)\nfun destroy_storage_rebates(0x2::balance)\npublic(package) fun destroy_supply(0x2::balance)\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Name in Move\nDESCRIPTION: Updates the name of a validator while ensuring the new name does not exceed the maximum length allowed for validator metadata. The function converts the byte vector to a string format.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_74\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_name(self: &mut Validator, name: vector<u8>) {\n    assert!(name.length() <= MAX_VALIDATOR_METADATA_LENGTH, EValidatorMetadataExceedingLengthLimit);\n    self.metadata.name = name.to_ascii_string().to_string();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Test Coverage for a Module\nDESCRIPTION: Shows how to get test coverage for a Move module using the sui move test --coverage and sui move coverage summary --test commands.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/move.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move test --coverage\n```\n\nLANGUAGE: sh\nCODE:\n```\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING first_package\nRunning Move unit tests\n[ PASS    ] 0x0::example::test_module_init\n[ PASS    ] 0x0::example::test_sword_transactions\nTest result: OK. Total tests: 2; passed: 2; failed: 0\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move coverage summary --test\n```\n\nLANGUAGE: sh\nCODE:\n```\n+-------------------------+\n| Move Coverage Summary   |\n+-------------------------+\nModule 0000000000000000000000000000000000000000000000000000000000000000::example\n>>> % Module coverage: 92.81\n+-------------------------+\n| % Move Coverage: 92.81  |\n+-------------------------+\n```\n\n----------------------------------------\n\nTITLE: Adding Address to Deny List (Move)\nDESCRIPTION: Package-scoped function to add an address to the deny list configuration for the next epoch. Requires a deny list instance, type index, key, address and transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun v2_add(\n    deny_list: &mut DenyList,\n    per_type_index: u64,\n    per_type_key: vector<u8>,\n    addr: address,\n    ctx: &mut TxContext,\n) {\n    let per_type_config = deny_list.per_type_config_entry!(per_type_index, per_type_key, ctx);\n    let setting_name = AddressKey(addr);\n    let next_epoch_entry = per_type_config.entry!<_, AddressKey, bool>(\n        &mut ConfigWriteCap(),\n        setting_name,\n        |_deny_list, _cap, _ctx| true,\n        ctx,\n    );\n    *next_epoch_entry = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UQ64_64 Value from Integer\nDESCRIPTION: Creates a fixed-point value from an integer. This is a simpler alternative to from_quotient when working with whole numbers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_int(integer: u64): UQ64_64 {\n    UQ64_64(std::macros::uq_from_int!(integer, FRACTIONAL_BITS))\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sui indexer as a writer\nDESCRIPTION: This command runs the Sui indexer as a writer, pulling data from a fullnode and writing it to the database. It configures the database URL, RPC client URL, and enables the fullnode sync worker. The `--reset-db` flag resets the database before starting.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Change the RPC_CLIENT_URL to http://0.0.0.0:9000 to run indexer against local validator & fullnode\ncargo run --bin sui-indexer -- --db-url \"<DATABASE_URL>\" --rpc-client-url \"https://fullnode.devnet.sui.io:443\" --fullnode-sync-worker --reset-db\n```\n\n----------------------------------------\n\nTITLE: Display Version Getter - Move\nDESCRIPTION: Returns the version number of the Display object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun version<T: key>(d: &Display<T>): u16 {\n    d.version\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Sui Node Databases\nDESCRIPTION: Commands to stop the Sui Node service and delete the local databases.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl stop sui-node\nsudo rm -rf /opt/sui/db/authorities_db /opt/sui/db/consensus_db\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Difference Between Two u32 Values\nDESCRIPTION: Returns the absolute value of the difference between two u32 values using the std::macros::num_diff macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun diff(x: u32, y: u32): u32 {\n    std::macros::num_diff!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct with Key Ability in Move\nDESCRIPTION: This snippet defines a struct 'Foo' that contains another struct 'Bar'. The struct 'Bar' is defined with the 'store' ability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/wrapped.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic struct Foo has key {\n    id: UID,\n    bar: Bar,\n}\n\npublic struct Bar has store {\n    value: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Unstaking Request Event in Move\nDESCRIPTION: An event struct capturing details of unstaking requests, including principal and reward amounts across different epochs\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic struct UnstakingRequestEvent has copy, drop {\n    pool_id: sui::object::ID,\n    validator_address: address,\n    staker_address: address,\n    stake_activation_epoch: u64,\n    unstaking_epoch: u64,\n    principal_amount: u64,\n    reward_amount: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Conditional 'store' Ability in Move\nDESCRIPTION: This example demonstrates how the 'store' ability is conditionally applied to generic types and structs. It shows valid and invalid uses of the 'store' ability in struct definitions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abilities.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic struct Cup<T> has copy, drop, store { item: T }\n\n// 'MyInnerData is declared with 'store' so all fields need 'store'\nstruct MyInnerData has store {\n    yes: Cup<u64>, // Valid, 'Cup<u64>' has 'store'\n    // no: Cup<signer>, Invalid, 'Cup<signer>' does not have 'store'\n}\n\n// 'MyData' is declared with 'key' so all fields need 'store'\nstruct MyData has key {\n    yes: Cup<u64>, // Valid, 'Cup<u64>' has 'store'\n    inner: Cup<MyInnerData>, // Valid, 'Cup<MyInnerData>' has 'store'\n    // no: Cup<signer>, Invalid, 'Cup<signer>' does not have 'store'\n}\n```\n\n----------------------------------------\n\nTITLE: Mutably Borrowing Value from ObjectTable in Move\nDESCRIPTION: Function to mutably borrow a value from the ObjectTable given a key. It uses dynamic object fields to retrieve a mutable reference to the value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_table.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow_mut<K: copy + drop + store, V: key + store>(\n    table: &mut ObjectTable<K, V>,\n    k: K,\n): &mut V {\n    ofield::borrow_mut(&mut table.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Sum Elements in a Group (Move)\nDESCRIPTION: This function `sum` calculates the sum of a vector of `Element`s within a specified group `G`. It takes the group type as a `u8` and a vector of `Element<G>` as input, and returns a new `Element<G>` representing the sum. It leverages the `internal_sum` function to perform the actual summation of the byte representations of the elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b>(<b>package</b>) <b>fun</b> <a href=\"../sui/group_ops.md#sui_group_ops_sum\">sum</a>&lt;G&gt;(type_: u8, terms: &vector&lt;<a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;G&gt;&gt;): <a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;G&gt; {\n    <a href=\"../sui/group_ops.md#sui_group_ops_Element\">Element</a>&lt;G&gt; { <a href=\"../sui/group_ops.md#sui_group_ops_bytes\">bytes</a>: <a href=\"../sui/group_ops.md#sui_group_ops_internal_sum\">internal_sum</a>(type_, &(*terms).map!(|x| x.<a href=\"../sui/group_ops.md#sui_group_ops_bytes\">bytes</a>)) }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing String Bytes as Reference\nDESCRIPTION: Function that returns a reference to the underlying byte vector of a string without consuming it.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun as_bytes(s: &String): &vector<u8> {\n    &s.bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to Mutable Variables in Move\nDESCRIPTION: Demonstrates how to assign values to mutable variables in Move, including pattern matching in assignments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::example {\n    public struct X { f: u64 }\n\n    fun new_x(): X {\n        X { f: 1 }\n    }\n\n    fun example() {\n       let (mut x, mut y, mut f, mut g) = (0, 0, 0, 0);\n\n       (X { f }, X { f: x }) = (new_x(), new_x());\n       assert!(f + x == 2, 42);\n\n       (x, y, f, _, g) = (0, 0, 0, 0, 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Package Path Configuration\nDESCRIPTION: Defines the path to the package directory relative to the current script location.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fileURLToPath } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n// Location of package relative to current directory\nconst packagePath = path.join(__dirname, 'example');\n```\n\n----------------------------------------\n\nTITLE: Implementing LockedDashboard Component\nDESCRIPTION: Basic React component implementation for the Manage Objects page displaying a dashboard title.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nexport function LockedDashboard() {\n  return (\n    <div>\n      <h1>Locked Dashboard</h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Max Function in Move\nDESCRIPTION: Deprecated max function that returns the maximum of two u64 values. Recommends using std::u64::max instead.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/math.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max(x: u64, y: u64): u64 {\n    x.max(y)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining G1 Negation Function in Sui Framework - Move\nDESCRIPTION: Implements the g1_neg function which computes the negation of a G1 element by subtracting it from the identity element. It requires an input of type Element<G1> and returns an Element<G1> as output.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_22\n\nLANGUAGE: move\nCODE:\n```\npublic fun g1_neg(e: &Element<G1>): Element<G1> {\n    g1_sub(&g1_identity(), e)\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Nitro Attestation in Move\nDESCRIPTION: Defines a function to load and verify a Nitro Attestation document. It takes the attestation bytes and a clock object as input and returns a parsed NitroAttestationDocument.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/nitro_attestation.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nentry fun load_nitro_attestation(attestation: vector<u8>, clock: &Clock): NitroAttestationDocument {\n    load_nitro_attestation_internal(&attestation, clock::timestamp_ms(clock))\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Set Management Functions in Sui\nDESCRIPTION: A collection of public and package-level functions for managing validator sets, validator states, and validator-related operations in the Sui blockchain\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun validator_address_by_pool_id\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun pool_exchange_rates\n```\n\n----------------------------------------\n\nTITLE: Implementing Number to String Conversion Macro in Move\nDESCRIPTION: A macro that converts a numeric value to its string representation by repeatedly extracting digits and constructing a string.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_to_string($x: _): String {\n    let mut x = $x;\n    if (x == 0) {\n        return b\"0\".to_string()\n    };\n    let mut buffer = vector[];\n    while (x != 0) {\n        buffer.push_back(((48 + x % 10) as u8));\n        x = x / 10;\n    };\n    buffer.reverse();\n    buffer.to_string()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Scalar Multiplication in Move\nDESCRIPTION: Performs multiple scalar-point multiplications and adds the results. Aborts if input vectors are too long or empty. Currently only enabled on Devnet.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun multi_scalar_multiplication<S, G>(\n    type_: u8,\n    scalars: &vector<Element<S>>,\n    elements: &vector<Element<G>>,\n): Element<G> {\n    assert!(scalars.length() > 0, EInvalidInput);\n    assert!(scalars.length() == elements.length(), EInvalidInput);\n    let mut scalars_bytes: vector<u8> = vector[];\n    let mut elements_bytes: vector<u8> = vector[];\n    let mut i = 0;\n    while (i < scalars.length()) {\n        let scalar_vec = scalars[i];\n        scalars_bytes.append(scalar_vec.bytes);\n        let element_vec = elements[i];\n        elements_bytes.append(element_vec.bytes);\n        i = i + 1;\n    };\n    Element<G> { bytes: internal_multi_scalar_mul(type_, &scalars_bytes, &elements_bytes) }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting ASCII String to Lowercase in Move\nDESCRIPTION: This function converts an ASCII string to its lowercase equivalent. It maps each byte to its lowercase version using the char_to_lowercase helper function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_lowercase(string: &String): String {\n    let bytes = string.as_bytes().map_ref!(|byte| char_to_lowercase(*byte));\n    String { bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Vectors in Move\nDESCRIPTION: Demonstrates implicit copying of vectors in Move when the element type has the 'copy' ability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/primitive-types/vector.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nlet x = vector[10];\nlet y = x; // implicit copy\nlet z = x;\n(y, z)\n```\n\n----------------------------------------\n\nTITLE: Defining a Capability Object in Sui Move\nDESCRIPTION: Example of creating a capability object (CapyManagerCap) that grants permission to manage Capy features. Capability objects provide authorization for specific actions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/display.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nmodule capy::utility;\n\n/// A capability which grants Capy Manager permission to add\n/// new genes and manage the Capy Market\npublic struct CapyManagerCap has key, store { id: UID }\n```\n\n----------------------------------------\n\nTITLE: Checking Gas Coins for an Address\nDESCRIPTION: Shows how to check the available gas coins for a specific address using the 'sui client gas' command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client gas hungry-spodumene\n```\n\n----------------------------------------\n\nTITLE: Safe Conversion from u64 to u8 in Move\nDESCRIPTION: Attempts to convert a u64 value to u8, returning None if the value exceeds the maximum value of u8 (255).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u8(x: u64): Option<u8> {\n    std::macros::try_as_u8!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NitroAttestationDocument Struct in Move\nDESCRIPTION: Defines a struct representing the Nitro Attestation Document with various fields including module ID, timestamp, digest, PCRs, public key, user data, and nonce.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/nitro_attestation.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct NitroAttestationDocument has drop {\n    module_id: vector<u8>,\n    timestamp: u64,\n    digest: vector<u8>,\n    pcrs: vector<PCREntry>,\n    public_key: std::option::Option<vector<u8>>,\n    user_data: std::option::Option<vector<u8>>,\n    nonce: std::option::Option<vector<u8>>\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the gas price for the current transaction in Sui Move\nDESCRIPTION: This native function returns the gas price for the current transaction. It does not take any input parameters and returns a u64 representing the gas price.  It relies on the underlying Sui framework to provide the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/tx_context.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../sui/tx_context.md#sui_tx_context_native_gas_price\">native_gas_price</a>(): u64\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/tx_context.md#sui_tx_context_native_gas_price\">native_gas_price</a>(): u64;\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies for Sui Full Node\nDESCRIPTION: This shell script installs the necessary dependencies on a Linux system to run a Sui Full Node. It leverages 'apt-get' to update the package index and install required packages like 'openssl', 'protobuf-compiler', and 'git'. These dependencies are crucial for compiling and running the node smoothly.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/sui-full-node.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo apt-get update \\\n&& sudo apt-get install -y --no-install-recommends \\\ntzdata \\\nlibprotobuf-dev \\\nca-certificates \\\nbuild-essential \\\nlibssl-dev \\\nlibclang-dev \\\nlibpq-dev \\\npkg-config \\\nopenssl \\\nprotobuf-compiler \\\ngit \\\nclang \\\ncmake\n```\n\n----------------------------------------\n\nTITLE: Vector Do Macro Implementation in Rust\nDESCRIPTION: Destroys a vector by calling a function on each element while preserving element order. Reverses vector first to maintain order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_12\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun do<$T, $R: drop>($v: vector<$T>, $f: |$T| -> $R) {\n    let mut v = $v;\n    v.reverse();\n    v.length().do!(|_| $f(v.pop_back()));\n    v.destroy_empty();\n}\n```\n\n----------------------------------------\n\nTITLE: Square Root Function\nDESCRIPTION: Calculates the integer square root of a u128 value, returning the nearest lower integer.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sqrt(x: u128): u128 {\n    std::macros::num_sqrt!<u128, u256>(x, 128)\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens Using Sui CLI in Bash\nDESCRIPTION: Command to transfer tokens using Sui CLI, requiring inputs like the amount and recipient. This facilitates the transfer of entire token objects to another address, ensuring straightforward asset management.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/regulated-token/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsui client call --json \\\n    --package $PKG --module reg --function transfer \\\n    --gas-budget 100000000 \\\n    --args $POLICY \"0x_token\" \"0x_recipient\"\n```\n\n----------------------------------------\n\nTITLE: Building Sui Repository with Verbose Output\nDESCRIPTION: This command runs the build process for the Sui blockchain repository with verbose output enabled using the -v flag. Verbose output provides detailed information about the build process, which can be useful for debugging.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/dependency_deprecations/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild -v\n```\n\n----------------------------------------\n\nTITLE: Creating Singleton DenyList UID in Move\nDESCRIPTION: Creates the UID for the singleton DenyList object. This should only be called once from the deny_list module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun sui_deny_list_object_id(): UID {\n    UID {\n        id: ID { bytes: SUI_DENY_LIST_OBJECT_ID },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define ActionRequest Struct in Move\nDESCRIPTION: Defines the `ActionRequest` struct, which encapsulates a request to perform an action on a token. It stores information about the action, including its name, amount, sender, recipient, spent balance, and collected approvals. It must be consumed by the `confirm_request` or `confirm_request_mut` functions when the Rules are satisfied.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>public</b> <b>struct</b> <a href=\\\"../sui/token.md#sui_token_ActionRequest\\\">ActionRequest</a>&lt;<b>phantom</b> T&gt;\\n\"\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed-Point Value from Raw Value (Move)\nDESCRIPTION: Creates a fixed-point value directly from a raw u64 value. This function is simpler but requires the caller to ensure the input is a valid fixed-point representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/fixed_point32.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create_from_raw_value(value: u64): FixedPoint32 {\n    FixedPoint32 { value }\n}\n```\n\n----------------------------------------\n\nTITLE: Define RuleKey Struct in Move\nDESCRIPTION: Defines the `RuleKey` struct, which serves as a dynamic field key for storing the configuration for a specific action rule within a `TokenPolicy`.  There can be only one configuration per Rule per TokenPolicy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>public</b> <b>struct</b> <a href=\\\"../sui/token.md#sui_token_RuleKey\\\">RuleKey</a>&lt;<b>phantom</b> T&gt; <b>has</b> <b>copy</b>, drop, store\\n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing multiply_u64 Function\nDESCRIPTION: Multiplies a u64 integer by a fixed-point number, handling overflow checks and proper scaling of the result.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/fixed_point32.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun multiply_u64(val: u64, multiplier: FixedPoint32): u64 {\n    let unscaled_product = val as u128 * (multiplier.value as u128);\n    let product = unscaled_product >> 32;\n    assert!(product <= MAX_U64, EMULTIPLICATION);\n    product as u64\n}\n```\n\n----------------------------------------\n\nTITLE: Depositing Base Asset to Pool\nDESCRIPTION: Function to deposit base asset into a liquidity pool using an account capability. Currently aborts with error code 1337.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deposit_base<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _coin: Coin<BaseAsset>,\n    _account_cap: &AccountCap\n) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Referent Struct in Move\nDESCRIPTION: Defines the Referent struct which wraps a value of type T and provides the borrow API. It contains an id field of type address and a value field of type Option<T>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/borrow.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Referent<T: key, store> has store {\n    id: address,\n    value: std::option::Option<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring All SUI from a Coin Object using Alternative Method in Sui CLI\nDESCRIPTION: This command transfers all SUI from a specific coin object to a recipient address using the Sui CLI. It uses the 'transfer-sui' command with the '--sui-coin-object-id' parameter to specify the coin object ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client transfer-sui --to eloquent-amber --sui-coin-object-id 0xc9b447fff18f13fa035e028534b8344d5fc8a8760248fad10155e78f44dc3a52 --gas-budget 5000000\n```\n\n----------------------------------------\n\nTITLE: Validating Bridge Keys Uniqueness in Move\nDESCRIPTION: Internal function to verify uniqueness of bridge public keys among committee members. Ensures no duplicate keys exist in the registrations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\nfun check_uniqueness_bridge_keys(self: &BridgeCommittee, bridge_pubkey_bytes: vector<u8>)\n```\n\n----------------------------------------\n\nTITLE: Converting u32 to String Representation\nDESCRIPTION: Converts a u32 value to its string representation using the std::macros::num_to_string macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_string(x: u32): String {\n    std::macros::num_to_string!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Validation of Bytes (Move)\nDESCRIPTION: This native function `internal_validate` checks the validity of a byte vector representing an element in a specified group. It receives the group type as a `u8` and the byte vector to validate.  It returns a boolean indicating whether the byte vector is a valid representation of an element in the given group.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/group_ops.md#sui_group_ops_internal_validate\">internal_validate</a>(type_: u8, <a href=\"../sui/group_ops.md#sui_group_ops_bytes\">bytes</a>: &vector&lt;u8&gt;): bool;\n```\n\n----------------------------------------\n\nTITLE: Inserting an ASCII String into Another at a Specific Index in Move\nDESCRIPTION: Inserts one ASCII string into another at a specified index. It takes a mutable reference to the target String, an index (u64), and consumes the other String.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun insert(s: &mut String, at: u64, o: String) {\n    assert!(at <= s.length(), EInvalidIndex);\n    o.into_bytes().destroy!(|e| s.bytes.insert(e, at));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bridge Committee in Move\nDESCRIPTION: Initializes the bridge committee with validator voting power and stake participation requirements. This function can only be called by the system address (0x0) and only initializes the committee if it hasn't been initialized yet.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\nfun init_bridge_committee(\n    bridge: &mut Bridge,\n    active_validator_voting_power: VecMap<address, u64>,\n    min_stake_participation_percentage: u64,\n    ctx: &TxContext\n) {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    let inner = load_inner_mut(bridge);\n    if (inner.committee.committee_members().is_empty()) {\n        inner.committee.try_create_next_committee(\n            active_validator_voting_power,\n            min_stake_participation_percentage,\n            ctx,\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Vectors\nDESCRIPTION: A function that concatenates a vector of vectors into a single vector, maintaining the original order of elements. Useful for transforming multi-dimensional vector structures into a single-dimensional vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\npublic fun flatten<T>(v: vector<vector<T>>): vector<T>\n```\n\n----------------------------------------\n\nTITLE: Implementing do Macro in Move\nDESCRIPTION: A convenience macro that iterates from 0 (inclusive) to a stop value (exclusive) and applies a function to each value. It's a wrapper around range_do.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do<$T, $R: drop>($stop: $T, $f: |$T| -> $R) {\n    range_do!(0, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Error Constants for VecSet Operations\nDESCRIPTION: Constants defining error codes for key-related operations in the VecSet implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_set.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nconst EKeyAlreadyExists: u64 = 0;\nconst EKeyDoesNotExist: u64 = 1;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transfer Action Name in Move\nDESCRIPTION: This function returns the name of the Transfer action as a String. It doesn't take any parameters and returns a predefined string constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_41\n\nLANGUAGE: Move\nCODE:\n```\npublic fun transfer_action(): String {\n    let transfer_str = TRANSFER;\n    transfer_str.to_string()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ASCII Constants for Type Name Parsing\nDESCRIPTION: Definition of ASCII character constants used for type name parsing and comparison operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/type_name.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nconst ASCII_COLON: u8 = 58;\nconst ASCII_V: u8 = 118;\nconst ASCII_E: u8 = 101;\nconst ASCII_C: u8 = 99;\nconst ASCII_T: u8 = 116;\nconst ASCII_O: u8 = 111;\nconst ASCII_R: u8 = 114;\nconst ENonModuleType: u64 = 0;\n```\n\n----------------------------------------\n\nTITLE: Adding Per-Type Configuration to Sui Deny List\nDESCRIPTION: Adds a new per-type configuration to the deny list. It creates a new config object and associates it with the given per-type index and key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\nfun add_per_type_config(\n    deny_list: &mut DenyList,\n    per_type_index: u64,\n    per_type_key: vector<u8>,\n    ctx: &mut TxContext,\n) {\n    let key = ConfigKey { per_type_index, per_type_key };\n    let config = config::new(&mut ConfigWriteCap(), ctx);\n    let config_id = object::id(&config);\n    ofield::internal_add(&mut deny_list.id, key, config);\n    sui::event::emit(PerTypeConfigCreated { key, config_id });\n}\n```\n\n----------------------------------------\n\nTITLE: Bitwise NOT Operation\nDESCRIPTION: Returns the bitwise NOT of a u128 value by flipping all bits from 0 to 1 and 1 to 0.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bitwise_not(x: u128): u128 {\n    x ^ max_value!()\n}\n```\n\n----------------------------------------\n\nTITLE: Add Dynamic Object Field Implementation\nDESCRIPTION: Macro implementing the core logic for adding a dynamic object field, including key wrapping and child object linking.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\nmacro fun add_impl<$Name: copy + drop + store, $Value: key>(\n    $object: &mut UID,\n    $name: $Name,\n    $value: $Value,\n) {\n    let object = $object;\n    let name = $name;\n    let value = $value;\n    let key = Wrapper { name };\n    let id = object::id(&value);\n    field::add(object, key, id);\n    let (field, _) = field::field_info<Wrapper<$Name>>(object, key);\n    add_child_object(field.to_address(), value);\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Multiplication Implementation\nDESCRIPTION: Public multiplication functions with underflow checks and rounding support\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/math.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun mul(x: u64, y: u64): u64 {\n    let (_, result) = unsafe_mul_round(x, y);\n    assert!(result > 0, EUnderflow);\n    result\n}\n\npublic fun mul_round(x: u64, y: u64): (bool, u64) {\n    let (is_round_down, result) = unsafe_mul_round(x, y);\n    assert!(result > 0, EUnderflow);\n    (is_round_down, result)\n}\n```\n\n----------------------------------------\n\nTITLE: Crypto Library Functions in Rust\nDESCRIPTION: This snippet outlines the primary functionalities for cryptography, including signing, verifying, and hashing operations. Dependencies include the `crypto.rs` file which contains all relevant structs and functions. It is essential for implementing cryptography methods in Rust applications.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-types/src/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n/// The main library for cryptography (sign/verify/hash) structs and functions.\n/// This file contains necessary implementations for cryptographic signatures and hash functions.\n```\n\n----------------------------------------\n\nTITLE: Initializing tokenized_asset module in Rust\nDESCRIPTION: The init function creates a PlatformCap and sends it to the transaction sender. This establishes the initial authorization for platform administration during module deployment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfun init(ctx: &mut TxContext) {}\n```\n\n----------------------------------------\n\nTITLE: Get Pool Vault Balances\nDESCRIPTION: Function to retrieve all balances held in the pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\npublic fun vault_balances(self: &Pool): (u64, u64, u64)\n```\n\n----------------------------------------\n\nTITLE: Importing ECDSA and Hash Dependencies in Move\nDESCRIPTION: Imports required modules from Sui framework for cryptographic operations\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/crypto.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nuse sui::ecdsa_k1;\nuse sui::hash;\n```\n\n----------------------------------------\n\nTITLE: Defining Item Key Struct\nDESCRIPTION: A dynamic field key struct for items placed in the kiosk.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Item has copy, drop, store {\n    id: sui::object::ID\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Rightmost Leaf in CritbitTree Subtree (Move)\nDESCRIPTION: Helper function to find the rightmost leaf in a subtree of the CritbitTree, starting from a given root node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\nfun right_most_leaf<V: store>(tree: &CritbitTree<V>, root: u64): u64 {\n    let mut ptr = root;\n    while (ptr < PARTITION_INDEX){\n        ptr = table::borrow(& tree.internal_nodes, ptr).right_child;\n    };\n    ptr\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Tic Tac Toe Protocol Sequence Diagram\nDESCRIPTION: Sequence diagram showing the interaction flow between players and game object in the shared protocol implementation. Illustrates game creation, mark placement, trophy distribution, and game cleanup.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/tic-tac-toe/README.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Player X->>Game: new\n    Player X->>Game: place_mark\n    Player O->>Game: place_mark\n    Player X->>Game: ...\n    Player O->>+Game: ...\n    Game->>-Player O: [Trophy]\n    Player X->>Game: burn\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parsed Token Transfer Messages in Sui Bridge\nDESCRIPTION: This function retrieves and parses a token transfer message from the bridge's records based on the source chain and sequence number. It returns an Option containing the parsed message if found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_27\n\nLANGUAGE: Move\nCODE:\n```\nfun get_parsed_token_transfer_message(\n    bridge: &Bridge,\n    source_chain: u8,\n    bridge_seq_num: u64,\n): Option<ParsedTokenTransferMessage> {\n    let inner = load_inner(bridge);\n    let key = message::create_key(\n        source_chain,\n        message_types::token(),\n        bridge_seq_num\n    );\n    if (!inner.token_transfer_records.contains(key)) {\n        return option::none()\n    };\n    let record = &inner.token_transfer_records[key];\n    let message = &record.message;\n    option::some(to_parsed_token_transfer_message(message))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sui Kiosk with Transaction Blocks\nDESCRIPTION: Demonstrates how to create a new Sui Kiosk using programmable transaction blocks with the default configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = new Transaction();\ntx.moveCall({\n\ttarget: '0x2::kiosk::default',\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Quorum Threshold in Sui System (Move)\nDESCRIPTION: This public function returns the constant quorum threshold in the Sui system. It provides access to the QUORUM_THRESHOLD constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\npublic fun quorum_threshold(): u64 {\n    QUORUM_THRESHOLD\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hash Function Constants for Secp256k1 Operations in Move\nDESCRIPTION: Constants defining hash function types that can be used with the ecrecover and secp256k1_verify functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/ecdsa_k1.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nconst KECCAK256: u8 = 0;\n```\n\nLANGUAGE: move\nCODE:\n```\nconst SHA256: u8 = 1;\n```\n\n----------------------------------------\n\nTITLE: Calculating power of u128 base with u8 exponent\nDESCRIPTION: Raises a u128 base to a u8 power, computing base^exponent efficiently using the num_pow macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pow(base: u128, exponent: u8): u128 {\n    std::macros::num_pow!(base, exponent)\n}\n```\n\n----------------------------------------\n\nTITLE: Full Node with Complete Object History\nDESCRIPTION: Pruning configuration that retains full object history while pruning transaction history, enabling comprehensive historical queries\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/data-management.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nauthority-store-pruning-config:\n  num-epochs-to-retain: 18446744073709551615\n  num-epochs-to-retain-for-checkpoints: 2\n```\n\n----------------------------------------\n\nTITLE: Accessing Validator Worker Public Key\nDESCRIPTION: Function to retrieve the worker public key bytes from a Validator's metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_56\n\nLANGUAGE: Move\nCODE:\n```\npublic fun worker_pubkey_bytes(self: &Validator): &vector<u8> {\n    &self.metadata.worker_pubkey_bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Checking If Table Is Empty in Sui (Move)\nDESCRIPTION: Function that checks if a Table is empty. Returns true if the table contains no key-value pairs (size is 0), false otherwise.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\npublic fun is_empty<K: copy + drop + store, V: store>(table: &Table<K, V>): bool {\n    table.size == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Package Membership in Move\nDESCRIPTION: Verifies if a type belongs to the same package as the publisher object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_package<T>(self: &Publisher): bool {\n    type_name::get_with_original_ids<T>().get_address() == self.package\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying None Option in Move\nDESCRIPTION: Unpacks an Option. Aborts if the Option holds a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_none<Element>(t: Option<Element>) {\n    assert!(t.is_none(), EOPTION_IS_SET);\n    let Option { vec } = t;\n    vec.destroy_empty()\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Governance Proposal Function in Sui SDK\nDESCRIPTION: Function signature for submitting a governance proposal. It requires a ProposalParams object that defines the details of the proposal.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/staking-governance.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nsubmitProposal({ params: ProposalParams });\n```\n\n----------------------------------------\n\nTITLE: Vector Destroy Macro Implementation in Rust\nDESCRIPTION: Destroys a vector by calling a function on each element and then destroying the vector. Processes elements from the end.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_11\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun destroy<$T, $R: drop>($v: vector<$T>, $f: |$T| -> $R) {\n    let mut v = $v;\n    v.length().do!(|_| $f(v.pop_back()));\n    v.destroy_empty();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Option is None in Move\nDESCRIPTION: Function to check if an Option does not hold a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_none<Element>(t: &Option<Element>): bool {\n    t.vec.is_empty()\n}\n```\n\n----------------------------------------\n\nTITLE: New TransferLimiter Initialization\nDESCRIPTION: Function to create a new TransferLimiter instance with initial transfer limits.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/limiter.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun new(): TransferLimiter {\n    TransferLimiter {\n        transfer_limits: initial_transfer_limits(),\n        transfer_records: vec_map::empty()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Sui Upgrade Policy Command\nDESCRIPTION: Basic command to publish an upgrade policy using the Sui client CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nsui client publish\n```\n\n----------------------------------------\n\nTITLE: Count Validator Duplicates in TableVec\nDESCRIPTION: Counts duplicate validators in a TableVec data structure by iterating through entries.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_30\n\nLANGUAGE: Move\nCODE:\n```\nfun count_duplicates_tablevec(validators: &TableVec<Validator>, validator: &Validator): u64 {\n    let mut result = 0;\n    validators.length().do!(|i| {\n        if (validators[i].is_duplicate(validator)) {\n            result = result + 1;\n        };\n    });\n    result\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Hash to Input Native Function\nDESCRIPTION: Native implementation for hashing messages to VDF inputs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vdf.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nnative fun hash_to_input_internal(message: &vector<u8>): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: JWK Deduplication Function in Move\nDESCRIPTION: Removes duplicate JWKs from an input vector while maintaining order. Used as a helper function in the authenticator state update process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\nfun deduplicate(jwks: vector<ActiveJwk>): vector<ActiveJwk> {\n    let mut res = vector[];\n    let mut i = 0;\n    let mut prev: Option<JwkId> = option::none();\n    while (i < jwks.length()) {\n        let jwk = &jwks[i];\n        if (prev.is_none()) {\n            prev.fill(jwk.jwk_id);\n        } else if (jwk_id_equal(prev.borrow(), &jwk.jwk_id)) {\n            i = i + 1;\n            continue\n        } else {\n            *prev.borrow_mut() = jwk.jwk_id;\n        };\n        res.push_back(*jwk);\n        i = i + 1;\n    };\n    res\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Definition: EInvalidVotingPower\nDESCRIPTION: Defines a constant `EInvalidVotingPower` set to 4. This is an error code indicating that the voting power is invalid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\n<b>const</b> <a href=\"../sui_system/voting_power.md#sui_system_voting_power_EInvalidVotingPower\">EInvalidVotingPower</a>: u64 = 4;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Address Usage in Move\nDESCRIPTION: Shows various ways to declare and use addresses in Move, including numeric literals, named addresses, and module declarations. Demonstrates the @ operator usage and address syntax in different contexts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/primitive-types/address.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n// shorthand for\n// 0x0000000000000000000000000000000000000000000000000000000000000001\nlet a1: address = @0x1;\n// shorthand for\n// 0x0000000000000000000000000000000000000000000000000000000000000042\nlet a2: address = @0x42;\n// shorthand for\n// 0x00000000000000000000000000000000000000000000000000000000DEADBEEF\nlet a3: address = @0xDEADBEEF;\n// shorthand for\n// 0x000000000000000000000000000000000000000000000000000000000000000A\nlet a4: address = @0x0000000000000000000000000000000A;\n// Assigns `a5` the value of the named address `std`\nlet a5: address = @std;\n// Any valid numerical value can be used as an address\nlet a6: address = @66;\nlet a7: address = @42_000;\n\nmodule 66::some_module {   // Not in expression context, so no @ needed\n    use 0x1::other_module; // Not in expression context so no @ needed\n    use std::vector;       // Can use a named address as a namespace item\n    ...\n}\n\nmodule std::other_module {  // Can use a named address when declaring a module\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a VecMap is Empty in Move\nDESCRIPTION: Returns true if the VecMap has 0 elements, false otherwise. Uses the size function to determine if the map is empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic fun is_empty<K: copy, V>(self: &VecMap<K, V>): bool {\n    self.size() == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules in Move\nDESCRIPTION: Imports necessary modules for the sui::math module implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/math.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nuse std::ascii;\nuse std::option;\nuse std::string;\nuse std::u128;\nuse std::u64;\nuse std::vector;\n```\n\n----------------------------------------\n\nTITLE: Query Available Balance in DeepBook Custodian - Move\nDESCRIPTION: Function to retrieve the available balance for a specific user's account in the custodian system. Takes a custodian reference and user ID as input and returns the balance as a u64 value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun account_available_balance<T>(\n    custodian: &Custodian<T>,\n    user: ID,\n): u64 {\n    balance::value(&table::borrow(&custodian.account_balances, user).available_balance)\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Clock Access Function in Shell\nDESCRIPTION: This shell command demonstrates how to call the entry function that accesses the Clock object. It uses the Sui client to invoke the function, passing the Clock object address as an argument.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/access-time.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ sui client call --package <EXAMPLE> --module 'clock' --function 'access' --args '0x6' --gas-budget <GAS-AMOUNT>\n```\n\n----------------------------------------\n\nTITLE: Object Changes Output Display\nDESCRIPTION: Console output showing the package publication details including PackageID, version, digest and modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/publish.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n╭─────────────────────────────────────────────────────────────────────╮\n│ Object Changes                                                      │\n├─────────────────────────────────────────────────────────────────────┤\n│ Created Objects:                                                    │\n│  ...                                                                │\n|                                                                     |\n│ Mutated Objects:                                                    │\n│  ...                                                                │\n|                                                                     |\n│ Published Objects:                                                  │\n│  ┌──                                                                │\n│  │ PackageID: <PACKAGE-ID>                                          │\n│  │ Version: 1                                                       │\n│  │ Digest: <DIGEST-HASH>                                            │\n│  │ Modules: my_module                                               │\n│  └──                                                                │\n╰─────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Destroying Vector Elements with Function Application in Rust\nDESCRIPTION: This macro function destroys a vector by applying a provided function to each element and then destroying the vector. It preserves the order of elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_16\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun do<$T, $R: drop>($v: vector<$T>, $f: |$T| -> $R) {\n    let mut v = $v;\n    v.reverse();\n    v.length().do!(|_| $f(v.pop_back()));\n    v.destroy_empty();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Safe Integer Division Macro in Move\nDESCRIPTION: The `uq_int_div` macro function facilitates safe division of two integer values with checks for division by zero and overflow conditions. It scales the value to accommodate fractional bits and returns the result as the original type, aborting if constraints are violated.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun uq_int_div<$T, $U>($val: $T, $divisor: $T, $max_t: $T, $fractional_bits: u8, $abort_division_by_zero: _, $abort_overflow: _): $T {\n    <b>let</b> val = $val;\n    <b>let</b> divisor = $divisor;\n    // Check <b>for</b> division by zero.\n    <b>if</b> (divisor == 0) $abort_division_by_zero;\n    // First convert to $U to increase the number of bits to the next integer size\n    // and then shift left to add `$fractional_bits` fractional zero bits to the dividend.\n    <b>let</b> scaled_value = val <b>as</b> $U << $fractional_bits;\n    <b>let</b> quotient = scaled_value / (divisor <b>as</b> $U);\n    // Check whether the value is too large.\n    <b>if</b> (quotient > $max_t <b>as</b> $U) $abort_overflow;\n    quotient <b>as</b> $T\n}\n```\n\n----------------------------------------\n\nTITLE: Abort in Loop for Vector Bound Checking\nDESCRIPTION: Illustrates using abort within a loop to check if all numbers in a vector are below a specified bound.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abort-and-assert.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nuse std::vector;\nfun check_vec(v: &vector<u64>, bound: u64) {\n    let i = 0;\n    let n = vector::length(v);\n    while (i < n) {\n        let cur = *vector::borrow(v, i);\n        if (cur > bound) abort 42;\n        i = i + 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FixedPoint32 Struct in Move\nDESCRIPTION: Defines a fixed-point numeric type with 32 fractional bits stored as a u64 value. This provides more than 9 decimal digits of precision both before and after the decimal point.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/fixed_point32.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct FixedPoint32 has copy, drop, store\n\n```\n\n----------------------------------------\n\nTITLE: Increase Available Balance Function\nDESCRIPTION: Increases a user's available balance in the custodian system by adding the provided quantity to their account.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun increase_user_available_balance<T>(\n    custodian: &mut Custodian<T>,\n    user: ID,\n    quantity: Balance<T>,\n) {\n    let account = borrow_mut_account_balance<T>(custodian, user);\n    balance::join(&mut account.available_balance, quantity);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Formal Snapshots Using AWS S3 - YAML Configuration\nDESCRIPTION: This YAML snippet sets configuration for writing formal snapshots using AWS S3. The configuration includes object store details and connection settings, allowing for efficient snapshot storage.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/snapshots.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstate-snapshot-write-config:\n  object-store-config:\n    object-store: \"S3\"\n    bucket: \"<BUCKET-NAME>\"\n    aws-access-key-id: “<ACCESS-KEY>\"\n    aws-secret-access-key: “<SHARED-KEY>\"\n    aws-region: \"<BUCKET-REGION>\"\n    object-store-connection-limit: 200\n```\n\n----------------------------------------\n\nTITLE: Memory Locations Example in Sui Transaction\nDESCRIPTION: Example showing memory locations for gas object, inputs, and results during transaction execution, demonstrating how objects and values are stored and referenced.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nGas Coin: sui::coin::Coin<SUI> { id: gas_coin, balance: sui::balance::Balance<SUI> { value: 1_000_000u64 } }\nInputs: [\n  Pure(/* @0x808 BCS bytes */ ...),\n  some_package::some_marketplace::Marketplace { id: market_id, ... },\n  Pure(/* 100u64 BCS bytes */ ...),\n]\nResults: []\n```\n\n----------------------------------------\n\nTITLE: Running Sui Move tests with statistics\nDESCRIPTION: Command to run Move tests and display statistics about test runtime and gas usage using the Sui CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ sui move test -s\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Pagination\nDESCRIPTION: This snippet presents a GraphQL query demonstrating pagination. It fetches the first 10 transaction blocks after a specific transaction block at epoch 97, including the digest, sender's address, gas object, gas price, and gas budget.  The `pageInfo` field provides information about the availability of further pages.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/graphql-rpc.mdx#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  epoch(id: 97) {\n    transactionBlocks(first: 10) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        digest\n        sender {\n          address\n        }\n        effects {\n          gasEffects {\n            gasObject {\n              address\n            }\n          }\n        }\n        gasInput {\n          gasPrice\n          gasBudget\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Kiosk Extension using TransactionBuilder in JavaScript\nDESCRIPTION: This code snippet demonstrates how to disable a kiosk extension using the TransactionBuilder in JavaScript. It creates a transaction to call the 'disable' function from the kiosk_extension module, passing the kiosk and owner cap objects as arguments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk-apps.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet txb = new TransactionBuilder();\nlet kioskArg = tx.object('<ID>');\nlet capArg = tx.object('<ID>');\n\ntxb.moveCall({\n    target: '0x2::kiosk_extension::disable',\n    arguments: [ kioskArg, capArg ],\n    typeArguments: '<letter_box_package>::letterbox_ext::Extension'\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating String Length in Move\nDESCRIPTION: Returns the length of a string in bytes. This function takes a reference to a String and returns a u64 value representing its length.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun length(s: &String): u64 {\n    s.bytes.length()\n}\n```\n\n----------------------------------------\n\nTITLE: Extension State Check Functions in Move\nDESCRIPTION: Collection of utility functions for checking extension installation, enabled status, and permissions for place/lock operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\npublic fun is_installed<Ext: drop>(self: &Kiosk): bool {\n    df::exists_(self.uid(), ExtensionKey<Ext> {})\n}\n\npublic fun is_enabled<Ext: drop>(self: &Kiosk): bool {\n    extension<Ext>(self).is_enabled\n}\n\npublic fun can_place<Ext: drop>(self: &Kiosk): bool {\n    is_enabled<Ext>(self) && extension<Ext>(self).permissions & PLACE != 0\n}\n\npublic fun can_lock<Ext: drop>(self: &Kiosk): bool {\n    is_enabled<Ext>(self) && extension<Ext>(self).permissions & LOCK != 0\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing min function for u256 in Move\nDESCRIPTION: Returns the smaller of two u256 values using a macro from the std::macros module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun min(x: u256, y: u256): u256 {\n    std::macros::num_min!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PurchaseCap Struct in Move\nDESCRIPTION: A capability struct that locks an item and enables purchase permissions in a Kiosk with a minimum price requirement. Used for building extensions on top of the Kiosk system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic struct PurchaseCap<phantom T: key, store> has key, store {\n    id: sui::object::UID,\n    kiosk_id: sui::object::ID,\n    item_id: sui::object::ID,\n    min_price: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Fixed Point Number is Zero in Move\nDESCRIPTION: Tests whether a FixedPoint32 number represents zero by checking if its raw value is 0.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/fixed_point32.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_zero(num: FixedPoint32): bool {\n    num.value == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Structure\nDESCRIPTION: Definition of the Counter struct that stores the owner address, current value and object ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nstruct Counter has key {\n    id: UID,\n    owner: address,\n    value: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OwnedLockedList Component for Displaying Locked Objects in TSX\nDESCRIPTION: Creates a component to display owned locked objects. It uses useSuiClientInfiniteQuery to fetch and display locked objects from the Sui blockchain.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_32\n\nLANGUAGE: TSX\nCODE:\n```\n// Content of src/components/locked/OwnedLockedList.tsx not provided in the input\n```\n\n----------------------------------------\n\nTITLE: Element Addition Implementation\nDESCRIPTION: Package-internal function to add two Elements of the same group type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun add<G>(type_: u8, e1: &Element<G>, e2: &Element<G>): Element<G> {\n    Element<G> { bytes: internal_add(type_, &e1.bytes, &e2.bytes) }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating u16 with Sui RandomGenerator - Move\nDESCRIPTION: The function generates a random 16-bit unsigned integer utilizing the RandomGenerator. It uses the sui::random::uint_from_bytes method to derive the integer from random bytes. A mutable reference to a RandomGenerator is needed as input to return a u16.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun generate_u16(g: &mut sui::random::RandomGenerator): u16 {\n    uint_from_bytes!(g, 2)\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring All SUI from a Coin Object in Sui CLI\nDESCRIPTION: This command transfers all SUI from a specific coin object to a recipient address using the Sui CLI. It uses the 'pay-sui' command with the '--input-coins' parameter to specify the coin object ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client pay-sui --recipient eloquent-amber --input-coins 0xc9b447fff18f13fa035e028534b8344d5fc8a8760248fad10155e78f44dc3a52 --gas-budget 5000000\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitwise NOT Operation for u8 in Move\nDESCRIPTION: The bitwise_not function returns the bitwise NOT of a u8 value, where each bit that is 1 becomes 0 and each bit that is 0 becomes 1.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bitwise_not(x: u8): u8 {\n    x ^ max_value!()\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Sui Genesis Blob\nDESCRIPTION: Downloads the genesis blob file, which contains the initial configuration of the Sui network. This blob is crucial for ensuring compatibility with the version of Sui being used.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwget https://github.com/MystenLabs/sui-genesis/raw/main/devnet/genesis.blob\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed Point Value from Raw Value in Move\nDESCRIPTION: Creates a fixed-point value directly from a raw u64 value without any validation or conversion.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/fixed_point32.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create_from_raw_value(value: u64): FixedPoint32 {\n    FixedPoint32 { value }\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Option with Closure in Sui Move\nDESCRIPTION: Destroys the Option<T> and calls the closure f on the value inside if it holds one.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun destroy<$T, $R: drop>($o: Option<$T>, $f: |$T| -> $R) {\n    let o = $o;\n    o.do!($f);\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Signature Hashes as Shell Variables in Sui\nDESCRIPTION: This snippet demonstrates how to store the signature hashes obtained from the previous signing process as shell variables for later use in the multisignature combination.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ SIG_1=<SIGNATURE-HASH-ED25519>\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ SIG_2=<SIGNATURE-HASH-SECP256K1>\n```\n\n----------------------------------------\n\nTITLE: Getting Total Pending Withdrawal Amount in Move\nDESCRIPTION: Returns the total withdrawal amount from the staking pool in the current epoch. This represents stake that has been requested to be withdrawn but not yet processed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_39\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pending_stake_withdraw_amount(staking_pool: &StakingPool): u64 {\n    staking_pool.pending_total_sui_withdraw\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Next Epoch Deny List in Sui Coin\nDESCRIPTION: This function checks if a specified address is in the deny list for the next epoch, affecting their capability to use coin objects as inputs immediately and reception starting the next epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_27\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deny_list_v2_contains_next_epoch<T>(deny_list: &sui::deny_list::DenyList, addr: address): bool {\n    let ty = type_name::get_with_original_ids<T>().into_string().into_bytes();\n    deny_list.v2_contains_next_epoch(DENY_LIST_COIN_INDEX, ty, addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Do Mut Macro Implementation in Rust\nDESCRIPTION: Performs an action on each element of a vector using mutable references to allow modification.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_14\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun do_mut<$T, $R: drop>($v: &mut vector<$T>, $f: |&mut $T| -> $R) {\n    let v = $v;\n    v.length().do!(|i| $f(&mut v[i]))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating None Option in Move\nDESCRIPTION: Function to create an empty Option (None).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun none<Element>(): Option<Element> {\n    Option { vec: vector::empty() }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing num_sqrt Macro in Move\nDESCRIPTION: A macro function that calculates the integer square root of a number using bitwise operations and the digit-by-digit algorithm.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_sqrt<$T, $U>($x: $T, $bitsize: u8): $T {\n    let x = $x;\n    let mut bit = (1: $U) << $bitsize;\n    let mut res = (0: $U);\n    let mut x = x as $U;\n    while (bit != 0) {\n        if (x >= res + bit) {\n            x = x - (res + bit);\n            res = (res >> 1) + bit;\n        } else {\n            res = res >> 1;\n        };\n        bit = bit >> 2;\n    };\n    res as $T\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Add Tokens on Sui Message in Move\nDESCRIPTION: This function constructs a message for adding tokens on the Sui blockchain. Parameters include the source chain ID, sequence number, a native token flag, vectors of token IDs, type names, and token prices. The function ensures source chain validity and serializes payload components for message construction. It depends on chain ID validation functions and encoding utilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../bridge/message.md#bridge_message_create_add_tokens_on_sui_message\">create_add_tokens_on_sui_message</a>(\n    <a href=\"../bridge/message.md#bridge_message_source_chain\">source_chain</a>: u8,\n    <a href=\"../bridge/message.md#bridge_message_seq_num\">seq_num</a>: u64,\n    native_token: bool,\n    <a href=\"../bridge/message.md#bridge_message_token_ids\">token_ids</a>: vector&lt;u8&gt;,\n    type_names: vector&lt;String&gt;,\n    <a href=\"../bridge/message.md#bridge_message_token_prices\">token_prices</a>: vector&lt;u64&gt;,\n): <a href=\"../bridge/message.md#bridge_message_BridgeMessage\">BridgeMessage</a> {\n    <a href=\"../bridge/chain_ids.md#bridge_chain_ids_assert_valid_chain_id\">chain_ids::assert_valid_chain_id</a>(<a href=\"../bridge/message.md#bridge_message_source_chain\">source_chain</a>);\n    <b>let</b> <b>mut</b> <a href=\"../bridge/message.md#bridge_message_payload\">payload</a> = bcs::to_bytes(&native_token);\n    <a href=\"../bridge/message.md#bridge_message_payload\">payload</a>.append(bcs::to_bytes(&<a href=\"../bridge/message.md#bridge_message_token_ids\">token_ids</a>));\n    <a href=\"../bridge/message.md#bridge_message_payload\">payload</a>.append(bcs::to_bytes(&type_names));\n    <a href=\"../bridge/message.md#bridge_message_payload\">payload</a>.append(bcs::to_bytes(&<a href=\"../bridge/message.md#bridge_message_token_prices\">token_prices</a>));\n    <a href=\"../bridge/message.md#bridge_message_BridgeMessage\">BridgeMessage</a> {\n        <a href=\"../bridge/message.md#bridge_message_message_type\">message_type</a>: <a href=\"../bridge/message_types.md#bridge_message_types_add_tokens_on_sui\">message_types::add_tokens_on_sui</a>(),\n        <a href=\"../bridge/message.md#bridge_message_message_version\">message_version</a>: <a href=\"../bridge/message.md#bridge_message_CURRENT_MESSAGE_VERSION\">CURRENT_MESSAGE_VERSION</a>,\n        <a href=\"../bridge/message.md#bridge_message_seq_num\">seq_num</a>,\n        <a href=\"../bridge/message.md#bridge_message_source_chain\">source_chain</a>,\n        <a href=\"../bridge/message.md#bridge_message_payload\">payload</a>,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Printable ASCII Characters in Move\nDESCRIPTION: Function that determines if all characters in an ASCII string are printable. Returns true only if all characters are printable ASCII characters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic fun all_characters_printable(string: &String): bool {\n    string.bytes.all!(|byte| is_printable_char(*byte))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GenesisChainParameters Struct in Move\nDESCRIPTION: Defines the initial chain parameters structure including protocol version, timing parameters, and validator requirements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/genesis.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct GenesisChainParameters has copy, drop {\n    protocol_version: u64,\n    chain_start_timestamp_ms: u64,\n    epoch_duration_ms: u64,\n    stake_subsidy_start_epoch: u64,\n    stake_subsidy_initial_distribution_amount: u64,\n    stake_subsidy_period_length: u64,\n    stake_subsidy_decrease_rate: u16,\n    max_validator_count: u64,\n    min_validator_joining_stake: u64,\n    validator_low_stake_threshold: u64,\n    validator_very_low_stake_threshold: u64,\n    validator_low_stake_grace_period: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Converting u128 to u8 with overflow check\nDESCRIPTION: Tries to convert a u128 to a u8, returning None if the value exceeds u8's range to prevent overflow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u8(x: u128): Option<u8> {\n    std::macros::try_as_u8!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing UID Inner ID in Move\nDESCRIPTION: Gets the inner ID of a UID. This function allows read-only access to the ID inside a UID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun uid_as_inner(uid: &UID): &ID {\n    &uid.id\n}\n```\n\n----------------------------------------\n\nTITLE: Element Struct Definition in Move\nDESCRIPTION: Defines a generic Element struct that represents a group element with bytes storage. Has copy, drop and store abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Element<phantom T> has copy, drop, store {\n    bytes: vector<u8>\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Execution Layer in Protocol Config (Rust)\nDESCRIPTION: This snippet demonstrates how to access different execution versions based on the protocol version and chain type in the ProtocolConfig implementation. It allows for feature cuts to be used only on specific chains like devnet.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/sui-execution/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nimpl ProtocolConfig {\n    /* ... */\n    fn get_for_version_impl(version: ProtocolVersion, chain: Chain) -> Self {\n        /* ... */\n        match version.0 {\n            /* ... */\n            42 => {\n                let mut cfg = Self::get_for_version_impl(version - 1, chain);\n                if ![Chain::Mainnet, Chain::Testnet].contains(&chain) {\n                    cfg.execution_version = Some(FEATURE_VERSION)\n                }\n                cfg\n            }\n            /* ... */\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Elements in a Vector with Predicate Function in Sui Move\nDESCRIPTION: A macro function that counts how many elements in a vector satisfy a given predicate function. It iterates through each element in the vector and increments a counter whenever the predicate returns true.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_24\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun count<$T>($v: &vector<$T>, $f: |&$T| -> bool): u64 {\n    let v = $v;\n    let mut count = 0;\n    v.do_ref!(|e| if ($f(e)) count = count + 1);\n    count\n}\n```\n\n----------------------------------------\n\nTITLE: Calculate Base Quantity with Input Token Fees\nDESCRIPTION: Function to calculate the base quantity output for a given quote quantity using input token as fee.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_base_quantity_out_input_fee(self: &Pool, quote_quantity: u64): u64\n```\n\n----------------------------------------\n\nTITLE: Defining EMetadataInvalidP2pAddr Error Constant in Move\nDESCRIPTION: Error constant (5) used when the p2p_address field in ValidatorMetadata is invalid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\nconst EMetadataInvalidP2pAddr: u64 = 5;\n```\n\n----------------------------------------\n\nTITLE: AuthenticatorState Inner Object Access Functions\nDESCRIPTION: Implements mutable and immutable access to the inner state of AuthenticatorState, including version validation\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\nfun load_inner_mut(self: &mut AuthenticatorState): &mut AuthenticatorStateInner {\n    let version = self.version;\n    assert!(version == CurrentVersion, EWrongInnerVersion);\n    let inner: &mut AuthenticatorStateInner = dynamic_field::borrow_mut(&mut self.id, self.version);\n    assert!(inner.version == version, EWrongInnerVersion);\n    inner\n}\n\nfun load_inner(self: &AuthenticatorState): &AuthenticatorStateInner {\n    let version = self.version;\n    assert!(version == CurrentVersion, EWrongInnerVersion);\n    let inner: &AuthenticatorStateInner = dynamic_field::borrow(&self.id, self.version);\n    assert!(inner.version == version, EWrongInnerVersion);\n    inner\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Structs with Phantom Type Parameters in Move\nDESCRIPTION: Demonstrates how to define generic structs with phantom type parameters and how they affect struct abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic struct S<T1, phantom T2> has copy { f: T1 }\npublic struct NoCopy {}\npublic struct HasCopy has copy {}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sui Client CLI\nDESCRIPTION: Command to set up the Sui account and CLI environment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/node-tools.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsui client\n```\n\n----------------------------------------\n\nTITLE: Implementing BridgeRoute Accessor Functions in Move\nDESCRIPTION: Implements functions to access source and destination chain IDs from a BridgeRoute struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/chain_ids.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun route_source(route: &BridgeRoute): &u8 {\n    &route.source\n}\n\npublic fun route_destination(route: &BridgeRoute): &u8 {\n    &route.destination\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Remove for Dynamic Object Fields in Move\nDESCRIPTION: This macro function implements removing a dynamic object field. It takes a mutable reference to an object UID and a name, removes the field, and returns the value of the specified type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\nmacro fun remove_impl<$Name: copy + drop + store, $Value: key>(\n    $object: &mut UID,\n    $name: $Name,\n): $Value {\n    let object = $object;\n    let name = $name;\n    let key = Wrapper { name };\n    let (field, value_id) = field::field_info<Wrapper<$Name>>(object, key);\n    let value = remove_child_object<$Value>(field.to_address(), value_id);\n    field::remove<Wrapper<$Name>, ID>(object, key);\n    value\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the native sponsor address in Sui Move\nDESCRIPTION: This native function retrieves the transaction sponsor's address as a vector of addresses. It takes no arguments and returns a `vector<address>`. It relies on the underlying Sui framework to provide the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/tx_context.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../sui/tx_context.md#sui_tx_context_native_sponsor\">native_sponsor</a>(): vector&lt;<b>address</b>&gt;\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/tx_context.md#sui_tx_context_native_sponsor\">native_sponsor</a>(): vector&lt;<b>address</b>&gt;;\n```\n\n----------------------------------------\n\nTITLE: Account Information Structure in TypeScript\nDESCRIPTION: Example structure showing the account information returned by the account function, including epoch, orders, volumes, stakes, and balances.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  epoch: '511',\n  open_orders: {\n    constants: [\n      '170141211130585342296014727715884105730',\n      '18446744092156295689709543266',\n      '18446744092156295689709543265'\n    ]\n  },\n  taker_volume: 0,\n  maker_volume: 0,\n  active_stake: 0,\n  inactive_stake: 0,\n  created_proposal: false,\n  voted_proposal: null,\n  unclaimed_rebates: { base: 0, quote: 0, deep: 0 },\n  settled_balances: { base: 0, quote: 0, deep: 0 },\n  owed_balances: { base: 0, quote: 0, deep: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Address to Type-Specific Deny List in Sui (Move)\nDESCRIPTION: Function to add an address to the deny list for a specific type. This prevents the address from interacting with instances of that type as transaction inputs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun v1_add(\n    deny_list: &mut DenyList,\n    per_type_index: u64,\n    type: vector<u8>,\n    addr: address,\n) {\n    let reserved = RESERVED;\n    assert!(!reserved.contains(&addr), EInvalidAddress);\n    let bag_entry: &mut PerTypeList = &mut deny_list.lists[per_type_index];\n    bag_entry.v1_per_type_list_add(type, addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting u128 to u64 in Move\nDESCRIPTION: Attempts to convert a u128 value to u64. Returns None if the value is too large to fit in u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u64(x: u128): Option<u64> {\n    std::macros::try_as_u64!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing range_do_eq Macro for U16 in Move\nDESCRIPTION: This macro function loops through a range of u16 values from $start to $stop (inclusive) and applies the given function $f to each value. It utilizes the std::macros::range_do_eq macro internally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u16.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do_eq<$R: drop>($start: u16, $stop: u16, $f: |u16| -> $R) {\n    std::macros::range_do_eq!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Archival Node Storage in YAML\nDESCRIPTION: This YAML configuration sets up a Sui Archival node to write and read transaction history to Amazon S3. It specifies both the write and read configurations including bucket name, AWS credentials, region, and concurrency settings.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/archives.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstate-archive-write-config:\n  object-store-config:\n    object-store: \"S3\"\n    bucket: \"<bucket_name>\"\n    aws-access-key-id: \"<AWS_ACCESS_KEY_ID>\"\n    aws-secret-access-key: \"<AWS_SECRET_ACCESS_KEY>\"\n    aws-region: \"<aws_region>\"\n    object-store-connection-limit: 20\n  concurrency: 5\n  use-for-pruning-watermark: false\nstate-archive-read-config:\n  - object-store-config:\n      object-store: \"S3\"\n      # Use the same bucket which is being used in `state-archive-write-config`\n      bucket: \"<bucket_name>\"\n      aws-access-key-id: \"<AWS_ACCESS_KEY_ID>\"\n      aws-secret-access-key: \"<AWS_SECRET_ACCESS_KEY>\"\n      aws-region: \"<aws_region>\"\n      object-store-connection-limit: 20\n    concurrency: 5\n    # This should be set to true in this case. Setting this to true\n    # would prevent pruning of local transaction data until it is archived\n    # in the bucket\n    use-for-pruning-watermark: true\n```\n\n----------------------------------------\n\nTITLE: Creating New CritbitTree Instance\nDESCRIPTION: Initializes a new empty CritbitTree with default values and tables\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun new<V: store>(ctx: &mut TxContext): CritbitTree<V> {\n    CritbitTree<V> {\n        root: PARTITION_INDEX,\n        internal_nodes: table::new(ctx),\n        leaves: table::new(ctx),\n        min_leaf: PARTITION_INDEX,\n        max_leaf: PARTITION_INDEX,\n        next_internal_node_index: 0,\n        next_leaf_index: 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a RuleKey in Sui\nDESCRIPTION: This function creates a new `RuleKey` for a given `Rule`. The `is_protected` field of the `RuleKey` is set to `true`. This field is intended for potential future use cases where Rules might have mutable storage or state that can be modified upon user action.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_51\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../sui/token.md#sui_token_key\">key</a>&lt;Rule&gt;(): <a href=\"../sui/token.md#sui_token_RuleKey\">sui::token::RuleKey</a>&lt;Rule&gt; { <a href=\"../sui/token.md#sui_token_RuleKey\">RuleKey</a> { is_protected: <b>true</b> } }\n```\n\n----------------------------------------\n\nTITLE: Destroying TableVec in Move\nDESCRIPTION: The `destroy_empty` function safely destroys a TableVec `t` only if it is empty. An assertion is used to guarantee that the TableVec is empty before attempting to destroy its contents.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table_vec.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_empty<Element: store>(t: sui::table_vec::TableVec<Element>) {\n    assert!(length(&t) == 0, ETableNonEmpty);\n    let TableVec { contents } = t;\n    contents.destroy_empty();\n}\n```\n\n----------------------------------------\n\nTITLE: Filling an Option in Sui Move\nDESCRIPTION: Converts a none option to a some option by adding a value. Aborts if the option already holds a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun fill<Element>(t: &mut Option<Element>, e: Element) {\n    let vec_ref = &mut t.vec;\n    if (vec_ref.is_empty()) vec_ref.push_back(e) else abort EOPTION_IS_SET\n}\n```\n\n----------------------------------------\n\nTITLE: Hash to VDF Input Function Implementation\nDESCRIPTION: Public function that hashes an arbitrary binary message to a class group element for VDF input. Currently only enabled on Devnet.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vdf.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun hash_to_input(message: &vector<u8>): vector<u8> {\n    hash_to_input_internal(message)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exclusive Loop Macro for U8 Range\nDESCRIPTION: A macro function that applies a given function to each number from 0 to stop (exclusive). Takes a u8 stop value and a function parameter that accepts u8 and returns a droppable type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\npublic macro fun do<$R: drop>($stop: u8, $f: |u8| -> $R) {\n    std::macros::do!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Coin to Balance in Move\nDESCRIPTION: Destructs a Coin wrapper and returns the underlying Balance. This function takes ownership of the coin, deletes its ID, and returns the balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun into_balance<T>(coin: sui::coin::Coin<T>): sui::balance::Balance<T> {\n    let Coin { id, balance } = coin;\n    id.delete();\n    balance\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FungibleStakedSuiDataKey Struct in Move\nDESCRIPTION: A simple key struct with copy, drop, and store abilities, used as an identifier for FungibleStakedSuiData.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic struct FungibleStakedSuiDataKey has copy, drop, store\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Popping Character from ASCII String in Move\nDESCRIPTION: Removes and returns the last character from an ASCII string. Takes a mutable string reference and returns a Char structure containing the removed byte.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pop_char(string: &mut String): Char {\n    Char { byte: string.bytes.pop_back() }\n}\n```\n\n----------------------------------------\n\nTITLE: Subtract Two G2 Elements in Sui Framework - Move\nDESCRIPTION: This function g2_sub computes the subtraction of one G2 element from another, resulting in an Element of type G2. It leverages the group_sub function provided in group_ops.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_30\n\nLANGUAGE: move\nCODE:\n```\npublic fun g2_sub(e1: &Element<G2>, e2: &Element<G2>): Element<G2> {\n    group_ops::sub(G2_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Registry for publisher management in Rust\nDESCRIPTION: The Registry struct is a shared object that stores the Publisher object. It controls access to transfer policy creation and management for tokenized assets, with mutable access restricted to the actual publisher.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nstruct Registry has key {\n        id: UID,\n        publisher: Publisher\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating Candidate Worker Address in Move\nDESCRIPTION: Updates the worker address of a candidate validator. This function checks if the validator is in pre-active state and ensures the new address doesn't exceed the maximum allowed length.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_85\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_candidate_worker_address(\n    self: &mut Validator,\n    worker_address: vector<u8>,\n) {\n    assert!(self.is_preactive(), ENotValidatorCandidate);\n    assert!(\n        worker_address.length() <= MAX_VALIDATOR_METADATA_LENGTH,\n        EValidatorMetadataExceedingLengthLimit,\n    );\n    let worker_address = worker_address.to_ascii_string().to_string();\n    self.metadata.worker_address = worker_address;\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Renamed Named Address in Move Module\nDESCRIPTION: Example of using a renamed named address in a Move module. This shows how the renamed address is referenced in the code.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\nmodule N::A {\n    public fun x(): address { @P1N }\n}\n```\n\n----------------------------------------\n\nTITLE: G2 Group Division Operation\nDESCRIPTION: Implements division operation for G2 group elements using the group_ops::div function. Returns e2 / e1, fails if scalar is zero.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\npublic fun g2_div(e1: &Element<Scalar>, e2: &Element<G2>): Element<G2> {\n    group_ops::div(G2_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Week Day Calculation Function\nDESCRIPTION: Defines a function to calculate the current day of the week based on the transaction context's epoch timestamp.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\nfun week_day(ctx: &TxContext): u8 {\n    let days_since_unix_epoch = ctx.epoch_timestamp_ms() / MS_IN_DAY;\n    // The unix epoch (1st Jan 1970) was a Thursday so shift days\n    // since the epoch by 3 so that 0 = Monday.\n    ((days_since_unix_epoch + 3) % 7 as u8)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Equality Operations in Move\nDESCRIPTION: Examples of basic equality operations in Move showing comparisons between values of the same type. These operations return boolean results based on value equality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/equality.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n0 == 0; // `true`\n1u128 == 2u128; // `false`\nb\"hello\" != x\"00\"; // `true`\n```\n\n----------------------------------------\n\nTITLE: Maximum Value Function\nDESCRIPTION: Returns the larger of two u128 values using a macro implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max(x: u128, y: u128): u128 {\n    std::macros::num_max!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Empty VecSet Constructor\nDESCRIPTION: Creates an empty VecSet instance with specified key type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_set.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun empty<K: copy + drop>(): VecSet<K> {\n    VecSet { contents: vector[] }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Status in DeepBook CLOB (Move)\nDESCRIPTION: This function retrieves the status of an order from a trading pool by checking user open orders and locating the order in either the bids or asks data structure based on order ID. It requires a pool reference, order ID, and the user's account capability to verify ownership.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_order_status<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n    order_id: u64,\n    account_cap: &AccountCap\n): &Order {\n    let user = object::id(account_cap);\n    assert!(table::contains(&pool.usr_open_orders, user), EInvalidUser);\n    let usr_open_order_ids = table::borrow(&pool.usr_open_orders, user);\n    assert!(linked_table::contains(usr_open_order_ids, order_id), EInvalidOrderId);\n    let order_price = *linked_table::borrow(usr_open_order_ids, order_id);\n    let open_orders =\n        if (order_id < MIN_ASK_ORDER_ID) { &pool.bids }\n        else { &pool.asks };\n    let tick_level = critbit::borrow_leaf_by_key(open_orders, order_price);\n    let tick_open_orders = &tick_level.open_orders;\n    let order = linked_table::borrow(tick_open_orders, order_id);\n    order\n}\n```\n\n----------------------------------------\n\nTITLE: Decreasing User Locked Balance in Move\nDESCRIPTION: This function decreases the locked balance of a user in the custodian system. It takes the custodian object, owner's address, and quantity as parameters, and returns a Balance object of the specified type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun decrease_user_locked_balance<T>(\n    custodian: &mut Custodian<T>,\n    owner: address,\n    quantity: u64,\n): Balance<T> {\n    let account = borrow_mut_account_balance<T>(custodian, owner);\n    split(&mut account.locked_balance, quantity)\n}\n```\n\n----------------------------------------\n\nTITLE: Sui Client PTB Move Call with Type\nDESCRIPTION: This example demonstrates how to call a Move function using the `sui client ptb` command, specifying a type argument. It assigns the value `none` to the variable `my_variable` and then calls the `0x1::option::is_none` function with type `<u64>` and `my_variable` as arguments. The transaction is executed with a gas budget of 50000000.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/ptb.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client ptb \\\n--assign my_variable none \\\n--move-call 0x1::option::is_none \"<u64>\" my_variable \\\n--gas-budget 50000000\n```\n\n----------------------------------------\n\nTITLE: Destroying Option with Default in Move\nDESCRIPTION: Destroys an Option and returns its value if it holds one, otherwise returns a default value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_with_default<Element: drop>(t: Option<Element>, default: Element): Element {\n    let Option { mut vec } = t;\n    if (vec.is_empty()) default\n    else vec.pop_back()\n}\n```\n\n----------------------------------------\n\nTITLE: Test Only Annotations in Move\nDESCRIPTION: Demonstrates the usage of #[test_only] annotation which marks modules and their members to be included only when compiled in test mode, not in production code.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\n#[test_only] // test only attributes can be attached to modules\nmodule abc { ... }\n\n#[test_only] // test only attributes can be attached to constants\nconst Addr: address = @0x1;\n\n#[test_only] // .. to uses\nuse pkg_addr::some_other_module;\n\n#[test_only] // .. to structs\npublic struct SomeStruct { ... }\n\n#[test_only] // .. and functions. Can only be called from test code, but this is _not_ a test!\nfun test_only_function(...) { ... }\n```\n\n----------------------------------------\n\nTITLE: Summing Even Numbers with While Loop and Continue in Move\nDESCRIPTION: A function that calculates the sum of even numbers in a vector. It uses a while loop with a continue statement to skip odd numbers during iteration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nfun sum_even(values: &vector<u64>): u64 {\n    let size = vector::length(values);\n    let mut i = 0;\n    let mut even_sum = 0;\n\n    while (i < size) {\n        let number = *vector::borrow(values, i);\n        i = i + 1;\n        if (number % 2 == 1) continue;\n        even_sum = even_sum + number;\n    };\n    even_sum\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Blocklist Payload Function in Move\nDESCRIPTION: A function that extracts a blocklist payload from a bridge message. The payload contains a blocklist type and a list of Ethereum addresses (20 bytes each) derived from ECDSA public keys.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun extract_blocklist_payload(message: &BridgeMessage): Blocklist {\n    // blocklist payload should consist of one byte blocklist type, and list of 20 bytes evm addresses\n    // derived from ECDSA public keys\n    let mut bcs = bcs::new(message.payload);\n    let blocklist_type = bcs.peel_u8();\n    let mut address_count = bcs.peel_u8();\n    assert!(address_count != 0, EEmptyList);\n    let mut validator_eth_addresses = vector[];\n    while (address_count > 0) {\n        let (mut address, mut i) = (vector[], 0);\n        while (i < ECDSA_ADDRESS_LENGTH) {\n            address.push_back(bcs.peel_u8());\n            i = i + 1;\n        };\n        validator_eth_addresses.push_back(address);\n        address_count = address_count - 1;\n    };\n    assert!(bcs.into_remainder_bytes().is_empty(), ETrailingBytes);\n    Blocklist {\n        blocklist_type,\n        validator_eth_addresses\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VecSet Insert Operation\nDESCRIPTION: Inserts a new key into the set. Aborts if the key already exists.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_set.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun insert<K: copy + drop>(self: &mut VecSet<K>, key: K) {\n    assert!(!self.contains(&key), EKeyAlreadyExists);\n    self.contents.push_back(key)\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing and Running Sui Module in Sandbox\nDESCRIPTION: This snippet demonstrates how to publish a Sui module and then run a specific function from that module using the sandbox tool. The 'print_stack_trace' function is executed with the --dry-run flag, which simulates the execution without making actual changes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/print_stack_trace/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox publish\nsandbox run storage/0x0000000000000000000000000000000000000000000000000000000000000042/modules/print_stack_trace.mv print_stack_trace --dry-run\n```\n\n----------------------------------------\n\nTITLE: Processing Validator Departure in Move\nDESCRIPTION: Removes a validator from the validator set, deactivates it, and returns the removed stake amount. It also cleans up associated data structures and emits an event.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_46\n\nLANGUAGE: Move\nCODE:\n```\nfun process_validator_departure(\n    self: &mut ValidatorSet,\n    mut validator: Validator,\n    validator_report_records: &mut VecMap<address, VecSet<address>>,\n    is_voluntary: bool,\n    ctx: &mut TxContext,\n): u64 {\n    let new_epoch = ctx.epoch() + 1;\n    let validator_address = validator.sui_address();\n    let validator_pool_id = validator.staking_pool_id();\n    // Remove the validator from our tables.\n    self.staking_pool_mappings.remove(validator_pool_id);\n    if (self.at_risk_validators.contains(&validator_address)) {\n        self.at_risk_validators.remove(&validator_address);\n    };\n    clean_report_records_leaving_validator(validator_report_records, validator_address);\n    event::emit(ValidatorLeaveEvent {\n        epoch: new_epoch,\n        validator_address,\n        staking_pool_id: validator.staking_pool_id(),\n        is_voluntary,\n    });\n    // Deactivate the validator and its staking pool\n    let removed_stake = validator.total_stake();\n    validator.deactivate(new_epoch);\n    self\n        .inactive_validators\n        .add(\n            validator_pool_id,\n            validator.wrap_v1(ctx),\n        );\n    removed_stake\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing range_do_eq Macro for Inclusive Range Iteration in Move\nDESCRIPTION: A macro function that loops through a range of u32 values from start to stop (inclusive) and applies a closure function to each value. The implementation delegates to std::macros::range_do_eq.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u32.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic macro fun range_do_eq<$R: drop>($start: u32, $stop: u32, $f: |u32| -> $R) {\n    std::macros::range_do_eq!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing an Address from BCS Bytes in Move\nDESCRIPTION: Extracts an address value from BCS-serialized bytes. It checks that enough bytes are available before attempting to read the address length bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic fun peel_address(bcs: &mut BCS): address {\n    assert!(bcs.bytes.length() >= address::length(), EOutOfRange);\n    let (mut addr_bytes, mut i) = (vector[], 0);\n    while (i < address::length()) {\n        addr_bytes.push_back(bcs.bytes.pop_back());\n        i = i + 1;\n    };\n    address::from_bytes(addr_bytes)\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for ZK Proving Service\nDESCRIPTION: This YAML configuration sets up a Docker environment for running a self-hosted ZK proving service. It includes both backend and frontend services with necessary environment variables and volume mounts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/zklogin-integration.mdx#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    image: mysten/zklogin:prover-stable\n    volumes:\n      # The ZKEY environment variable must be set to the path of the zkey file.\n      - ${ZKEY}:/app/binaries/zkLogin.zkey\n    environment:\n      - ZKEY=/app/binaries/zkLogin.zkey\n      - WITNESS_BINARIES=/app/binaries\n\n  frontend:\n    image: mysten/zklogin:prover-fe-stable\n    command: '8080'\n    ports:\n      # The PROVER_PORT environment variable must be set to the desired port.\n      - '${PROVER_PORT}:8080'\n    environment:\n      - PROVER_URI=http://backend:8080/input\n      - NODE_ENV=production\n      - DEBUG=zkLogin:info,jwks\n      # The default timeout is 15 seconds. Uncomment the following line to change it.\n      # - PROVER_TIMEOUT=30\n```\n\n----------------------------------------\n\nTITLE: Accessor Function for Committee Blocklist Message Type\nDESCRIPTION: Returns the constant value for committee blocklist message type. This function provides a public interface to access the COMMITTEE_BLOCKLIST constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message_types.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun committee_blocklist(): u8 { COMMITTEE_BLOCKLIST }\n```\n\n----------------------------------------\n\nTITLE: Whitelisted Function Definition\nDESCRIPTION: Function signature for checking if a pool is whitelisted.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nasync whitelisted(poolKey: string) {}\n```\n\n----------------------------------------\n\nTITLE: Subtracting Fixed-Point Numbers\nDESCRIPTION: Performs subtraction of two UQ32_32 fixed-point numbers (a - b). Aborts if result would underflow (a < b).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq32_32.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sub(a: UQ32_32, b: UQ32_32): UQ32_32 {\n    UQ32_32(std::macros::uq_sub!(a.0, b.0, abort EOverflow))\n}\n```\n\n----------------------------------------\n\nTITLE: Replaying a Sui Transaction with Transaction Digest\nDESCRIPTION: This command uses the Sui client to replay a specific transaction locally and verify that the resulting effects match those stored on-chain. It fetches transaction dependencies from the connected Full node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client replay-transaction --tx-digest 51MzJP2Uesvza8vXGpPCGbfLrY6UCfdvdoErN1z4oXPW\n```\n\n----------------------------------------\n\nTITLE: Partitioning Vector Elements in Rust\nDESCRIPTION: This macro function splits a vector into two vectors based on a predicate function, returning a tuple of vectors for elements that satisfy and don't satisfy the predicate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_22\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun partition<$T>($v: vector<$T>, $f: |&$T| -> bool): (vector<$T>, vector<$T>) {\n    let v = $v;\n    let mut r1 = vector[];\n    let mut r2 = vector[];\n    v.do!(|e| if ($f(&e)) r1.push_back(e) else r2.push_back(e));\n    (r1, r2)\n}\n```\n\n----------------------------------------\n\nTITLE: GetQuoteQuantityOut Function Definition\nDESCRIPTION: Function signature for calculating quote quantity output based on base quantity input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nasync getQuoteQuantityOut(poolKey: string, baseQuantity: number) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing u256 to u64 conversion in Move\nDESCRIPTION: Attempts to convert a u256 value to u64, returning None if the value is too large.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u64(x: u256): Option<u64> {\n    std::macros::try_as_u64!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Two Coins using Sui Client\nDESCRIPTION: This command merges two coins into a single coin.  It requires specifying the primary coin and the coin to be merged into it.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client merge-coin `<br/>&nbsp;&nbsp;`--primary-coin COIN_ID `<br/>&nbsp;&nbsp;`--coin-to-merge COIN_ID\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Sui Database\nDESCRIPTION: Lists the contents of the `suidb/` directory inside the Docker container, providing insight into the Full node's database structure and stored data.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nls -la suidb/\n```\n\n----------------------------------------\n\nTITLE: u16 to u8 Conversion\nDESCRIPTION: Attempts to convert a u16 to u8, returning None if the value is too large to fit in u8 range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u16.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u8(x: u16): Option<u8> {\n    std::macros::try_as_u8!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Dev Addresses in TOML\nDESCRIPTION: Example of using the dev-addresses section in Move.toml to set values for named addresses in development mode. This allows compilation of packages with uninstantiated named addresses in dev mode.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"example_pkg\"\n...\n[addresses]\nnamed_addr = \"_\"\n\n[dev-addresses]\nnamed_addr = \"0xC0FFEE\"\n```\n\n----------------------------------------\n\nTITLE: Query Locked Balance in DeepBook Custodian - Move\nDESCRIPTION: Function to retrieve the locked balance for a specific user's account in the custodian system. Takes a custodian reference and user ID as input and returns the locked balance as a u64 value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun account_locked_balance<T>(\n    custodian: &Custodian<T>,\n    user: ID,\n): u64 {\n    balance::value(&table::borrow(&custodian.account_balances, user).locked_balance)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Global Pause Status for Next Epoch in Move\nDESCRIPTION: Checks if the global pause is enabled for a given coin type in the next epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_31\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deny_list_v2_is_global_pause_enabled_next_epoch<T>(deny_list: &DenyList): bool {\n    let ty = type_name::get_with_original_ids<T>().into_string().into_bytes();\n    deny_list.v2_is_global_pause_enabled_next_epoch(DENY_LIST_COIN_INDEX, ty)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UQ32_32 from Raw u64 in Move\nDESCRIPTION: This function creates a UQ32_32 fixed-point number from a raw u64 value. It can be paired with 'to_raw' for performing operations on the raw values before converting back to UQ32_32.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq32_32.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_raw(raw_value: u64): std::uq32_32::UQ32_32 {\n    UQ32_32(raw_value)\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing Validator Information to Sui Genesis\nDESCRIPTION: Commands for validators to contribute their information to the Sui Genesis Ceremony. This includes adding validator details such as name, key file, and network addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui/genesis.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone <url to genesis repo> && cd genesis\n$ sui genesis-ceremony add-validator \\\n    --name <human-readable validator name> \\\n    --key-file <path to key file> \\\n    --network-address <multiaddr> \\\n    --narwhal-primary-to-primary <multiaddr> \\\n    --narwhal-worker-to-primary <multiaddr> \\\n    --narwhal-primary-to-worker <multiaddr> \\\n    --narwhal-worker-to-worker <multiaddr> \\\n    --narwhal-consensus-address <multiaddr>\n\n$ git add .\n$ git commit -m \"add validator <name>'s information\"\n$ git push # either to the shared workspace or another branch followed by a PR\n```\n\n----------------------------------------\n\nTITLE: Removing an Element from a Vector by Swapping with Last Element in Move\nDESCRIPTION: This function removes the element at the specified index by swapping it with the last element and then popping the vector. It has O(1) complexity but does not preserve the order of elements. It aborts if the index is out of bounds.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun swap_remove<Element>(v: &mut vector<Element>, i: u64): Element {\n    assert!(v.length() != 0, EINDEX_OUT_OF_BOUNDS);\n    let last_idx = v.length() - 1;\n    v.swap(i, last_idx);\n    v.pop_back()\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting a Swap of Wrapped Objects\nDESCRIPTION: This function constructs a 'SwapRequest' to facilitate an object swap, ensuring the fee is sufficient and the object is passed as wrapped.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/wrapped.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun request_swap(\n    object: Object,\n    fee: Coin<SUI>,\n    service: address,\n    ctx: &mut TxContext,\n) {\n    assert!(coin::value(&fee) >= MIN_FEE, EFeeTooLow);\n\n    let request = SwapRequest {\n        id: object::new(ctx),\n        owner: ctx.sender(),\n        object,\n        fee: coin::into_balance(fee),\n    };\n\n    transfer::transfer(request, service)\n}\n```\n\n----------------------------------------\n\nTITLE: Computing integer square root of u128\nDESCRIPTION: Calculates the nearest lower integer square root for a u128 value, using 128-bit precision for the calculation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sqrt(x: u128): u128 {\n    std::macros::num_sqrt!<u128, u256>(x, 128)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConvertingToFungibleStakedSuiEvent Struct in Move\nDESCRIPTION: Event structure emitted when a staked SUI is converted to a fungible staked SUI, containing pool ID, activation epoch, principal amount, and resulting fungible amount.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic struct ConvertingToFungibleStakedSuiEvent has copy, drop\n```\n\n----------------------------------------\n\nTITLE: Defining PROXY one-time witness struct in Rust\nDESCRIPTION: The PROXY struct represents a one-time witness (OTW) used to claim the publisher during initialization. It's a fundamental component for publisher-related operations in the proxy module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nstruct PROXY has drop {}\n```\n\n----------------------------------------\n\nTITLE: Getting ObjectBag Length - Move\nDESCRIPTION: This function returns the number of key-value pairs in the ObjectBag. It takes a reference to the bag and returns a u64 value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_bag.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun length(bag: &ObjectBag): u64 {\n    bag.size\n}\n```\n\n----------------------------------------\n\nTITLE: Converting u128 to u32 with overflow check\nDESCRIPTION: Tries to convert a u128 to a u32, returning None if the value exceeds u32's range to prevent overflow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u32(x: u128): Option<u32> {\n    std::macros::try_as_u32!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Reference Comparison with Explicit Freezing in Move\nDESCRIPTION: Shows how reference comparison implicitly applies the freeze operation when comparing immutable and mutable references. This is equivalent to explicitly freezing mutable references.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/equality.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nlet i = &0;\nlet m = &mut 1;\n\ni == freeze(m); // `false`\nfreeze(m) == i; // `false`\nm == m; // `true`\ni == i; // `true`\n```\n\n----------------------------------------\n\nTITLE: Checking for Printable ASCII Characters in Move\nDESCRIPTION: This function determines if a given byte represents a printable ASCII character. It returns true for characters between 0x20 and 0x7E, excluding metacharacters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_printable_char(byte: u8): bool {\n    byte >= 0x20 && // Disallow metacharacters\n        byte <= 0x7E // Don't allow DEL metacharacter\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Listing Struct\nDESCRIPTION: A dynamic field key for active purchase offers, including exclusivity flag for PurchaseCap-based listings.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Listing has copy, drop, store {\n    id: sui::object::ID,\n    is_exclusive: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keccak256 Hashing in Sui Move\nDESCRIPTION: Example smart contract demonstrating Keccak256 hashing using the Sui Move Library. Creates an Output object containing the hash value and transfers it to a recipient. Uses sui::hash module for Keccak256 implementation with reference-based input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/hashing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule test::hashing_sui {\n    use sui::hash;\n    use sui::object::{Self, UID};\n    use sui::tx_context::TxContext;\n    use sui::transfer;\n    use std::vector;\n\n    /// Object that holds the output hash value.\n    struct Output has key, store {\n        id: UID,\n        value: vector<u8>\n    }\n\n    public fun hash_data(data: vector<u8>, recipient: address, ctx: &mut TxContext) {\n        let hashed = Output {\n            id: object::new(ctx),\n            value: hash::keccak256(&data),\n        };\n        // Transfer an output data object holding the hashed data to the recipient.\n        transfer::public_transfer(hashed, recipient)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring in Move\nDESCRIPTION: Returns a substring using given byte indices. The indices must be at valid UTF-8 character boundaries to ensure the result is valid UTF-8.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun substring(s: &String, i: u64, j: u64): String {\n    let bytes = &s.bytes;\n    let l = bytes.length();\n    assert!(\n        j <= l &&\n            i <= j &&\n            internal_is_char_boundary(bytes, i) &&\n            internal_is_char_boundary(bytes, j),\n        EInvalidIndex,\n    );\n    String { bytes: internal_sub_string(bytes, i, j) }\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation Bar Implementation with Wallet Connection\nDESCRIPTION: React component implementing a navigation bar with wallet connection functionality using Sui Wallet Kit.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectButton } from '@mysten/wallet-kit';\nimport { usePathname } from 'next/navigation';\n\nimport { useAuthentication } from '@/app/hooks/useAuthentication';\n\nexport const Navbar = () => {\n\tconst pathname = usePathname();\n\tconsole.log(pathname);\n\tconst { user, handleLogout } = useAuthentication();\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"grid grid-cols-12 w-full items-center p-[8px] h-[80px] border-b-gray-400 border-b-[1px] sticky top-0\"\n\t\t\tstyle={{\n\t\t\t\tbackground: 'white',\n\t\t\t}}\n\t\t>\n\t\t\t<div className=\"col-span-3 flex space-x-3 items-center\">\n\t\t\t\t<div className=\"text-red-600 text-2xl font-bold cursor-pointer\" onClick={handleLogout}>\n\t\t\t\t\tRestaurant Reviews\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"col-span-6 flex space-x-3 justify-center\">\n\t\t\t\t{pathname !== '/' && (\n\t\t\t\t\t<h6 className=\"mb-4 text-2xl leading-none tracking-tight text-gray-400\">\n\t\t\t\t\t\tlogged in as{' '}\n\t\t\t\t\t\t<span className=\"underline underline-offset-3 decoration-8 decoration-blue-400 dark:decoration-blue-600\">\n\t\t\t\t\t\t\t{user.role === 'user' && 'USER'}\n\t\t\t\t\t\t\t{user.role === 'serviceOwner' && 'SERVICE OWNER'}\n\t\t\t\t\t\t\t{user.role === 'moderator' && 'MODERATOR'}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</h6>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<div className=\"col-span-3 flex justify-end gap-[14px]\">\n\t\t\t\t<ConnectButton />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying Sui CLI Version in Terminal\nDESCRIPTION: Command to check if Sui CLI is installed by displaying its version number. If the command returns a version, the CLI is already installed on the system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/cli-check-install.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ sui --version\n```\n\n----------------------------------------\n\nTITLE: Generic Move Call Structure\nDESCRIPTION: Template showing the structure for calling any Move function from a specific package with arguments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/ptb.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n--move-call PACKAGE_ADDR::MODULE::FUNCTION \"<TYPE>\" FUNC_ARG1 FUNC_ARG2 ...\n```\n\n----------------------------------------\n\nTITLE: Executing Emergency Operations in Sui Bridge\nDESCRIPTION: This function handles emergency operations like pausing or unpausing the bridge. It updates the bridge's state and emits an event based on the operation type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\nfun execute_emergency_op(inner: &mut BridgeInner, payload: EmergencyOp) {\n    let op = payload.emergency_op_type();\n    if (op == message::emergency_op_pause()) {\n        assert!(!inner.paused, EBridgeAlreadyPaused);\n        inner.paused = true;\n        emit(EmergencyOpEvent { frozen: true });\n    } else if (op == message::emergency_op_unpause()) {\n        assert!(inner.paused, EBridgeNotPaused);\n        inner.paused = false;\n        emit(EmergencyOpEvent { frozen: false });\n    } else {\n        abort EUnexpectedOperation\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Historical Volume for Specific Pools Example Response\nDESCRIPTION: An example JSON response showing historical trading volumes for DEEP_SUI and SUI_USDC pools, expressed in the smallest unit of the base asset within the specified time range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"DEEP_SUI\": 22557460000000,\n\t\"SUI_USDC\": 19430171000000000\n}\n```\n\n----------------------------------------\n\nTITLE: Lock Key Mismatch Test\nDESCRIPTION: Test function that verifies attempting to unlock an object with the wrong key fails. Creates two locked objects and attempts to unlock one with the other's key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\n#[expected_failure]\nfun test_lock_key_mismatch() {\n    let scenario = test_scenario::begin(@0x0);\n    let ctx = test_scenario::ctx(&mut scenario);\n    let (locked1, key1) = lock(1);\n    let (locked2, _key2) = lock(2);\n    unlock(locked2, key1);\n    abort 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GT Subtraction Operation for BLS12-381 in Move\nDESCRIPTION: Subtracts two GT group elements in the BLS12-381 curve. This function uses the group_ops module to perform the subtraction operation between two elements of the GT group.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_39\n\nLANGUAGE: Move\nCODE:\n```\npublic fun gt_sub(e1: &Element<GT>, e2: &Element<GT>): Element<GT> {\n    group_ops::sub(GT_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Constants for a Kiosk App\nDESCRIPTION: This code shows how to define permission constants for a Kiosk app. The example sets up the PERMISSIONS constant with a value of 1, which represents the place permission for the app.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk-apps.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nmodule examples::letterbox_ext;\n// ... dependencies\n\n/// The expected set of permissions for the app. It requires `place`.\nconst PERMISSIONS: u128 = 1;\n\n/// The witness struct used to identify and authorize the app.\nstruct Extension has drop {}\n\n/// Install the Mallbox app into the kiosk and request `place` permission.\npublic fun add(kiosk: &mut Kiosk, cap: &KioskOwnerCap, ctx: &mut TxContext) {\n    kiosk_extension::add(Extension {}, kiosk, cap, PERMISSIONS, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Sui Node with Docker Compose\nDESCRIPTION: This shell command stops the Sui Node Docker Compose setup without removing volumes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/docker/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker compose down\n```\n\n----------------------------------------\n\nTITLE: Looping from 0 to Stop (Exclusive) in Move\nDESCRIPTION: Macro function that applies a given function to each number from 0 to stop (exclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do<$R: drop>($stop: u128, $f: |u128| -> $R) {\n    std::macros::do!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Looping Over u128 Range (Exclusive) in Move\nDESCRIPTION: Macro function that applies a given function to each number in a range from start to stop (exclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do<$R: drop>($start: u128, $stop: u128, $f: |u128| -> $R) {\n    std::macros::range_do!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Get Current Hour Since Epoch\nDESCRIPTION: Calculates the current hour since epoch by converting milliseconds timestamp to hours.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/limiter.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nfun current_hour_since_epoch(clock: &Clock): u64 {\n    clock::timestamp_ms(clock) / 3600000\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator Voting Power - Move\nDESCRIPTION: This function returns the current voting power of a validator by accessing the voting_power field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_63\n\nLANGUAGE: Move\nCODE:\n```\npublic fun voting_power(self: &Validator): u64 {\n    self.voting_power\n}\n```\n\n----------------------------------------\n\nTITLE: Range-Based Loop in Move (Inclusive)\nDESCRIPTION: Macro function that loops through a range of u128 values (inclusive) and applies a given function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do_eq<$R: drop>($start: u128, $stop: u128, $f: |u128| -> $R) {\n    std::macros::range_do_eq!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bridge Validator Key\nDESCRIPTION: Command to generate a new Bridge Authority Key using sui-bridge-cli and save it to a specified path.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ sui-bridge-cli create-bridge-validator-key <PATH-TO-WRITE>\n```\n\n----------------------------------------\n\nTITLE: BitVector Implementation in Move\nDESCRIPTION: The 0x1::bit_vector module provides a BitVector struct and related operations for manipulating sets of bits, including setting, unsetting, shifting, and querying bits.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_43\n\nLANGUAGE: move\nCODE:\n```\n// BitVector implementation\n0x1::bit_vector::BitVector   // public struct\n0x1::bit_vector::new        // public fun\n0x1::bit_vector::set        // public fun\n0x1::bit_vector::unset      // public fun\n0x1::bit_vector::shift_left // public fun\n0x1::bit_vector::is_index_set // public fun\n0x1::bit_vector::length     // public fun\n0x1::bit_vector::longest_set_sequence_starting_at // public fun\n```\n\n----------------------------------------\n\nTITLE: Creating ValidatorWrapper Version 1 in Move\nDESCRIPTION: Implements the create_v1 function which initializes a ValidatorWrapper with version 1. It requires a Validator and mutable TxContext as parameters, returning a new ValidatorWrapper with versioned inner field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_wrapper.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun create_v1(validator: sui_system::validator::Validator, ctx: &mut sui::tx_context::TxContext): sui_system::validator_wrapper::ValidatorWrapper\n{\n    ValidatorWrapper {\n        inner: versioned::create(1, validator, ctx),\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing zkLogin TypeScript SDK for Sui\nDESCRIPTION: Commands to install the zkLogin TypeScript SDK for Sui blockchain projects, including the option to use the latest experimental version.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/zklogin-integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mysten/sui\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mysten/sui@experimental\n```\n\n----------------------------------------\n\nTITLE: Creating and Comparing Tables in Move\nDESCRIPTION: Demonstrates creating two Table objects with the same key-value mappings and showing that they are not equal at runtime due to being separate objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nlet table1 = table::new<u64, bool>();\nlet table2 = table::new<u64, bool>();\ntable::add(&mut table1, 0, false);\ntable::add(&mut table1, 1, true);\ntable::add(&mut table2, 0, false);\ntable::add(&mut table2, 1, true);\n// table1 does not equal table2, despite having the same entries\nassert!(&table1 != &table2);\n```\n\n----------------------------------------\n\nTITLE: Extracting Byte from ASCII Character in Move\nDESCRIPTION: Unpacks a Char structure to return its underlying byte value. This consumes the Char and returns its u8 representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun byte(char: Char): u8 {\n    let Char { byte } = char;\n    byte\n}\n```\n\n----------------------------------------\n\nTITLE: Zipping and Processing Two Vectors\nDESCRIPTION: A macro function that destroys two vectors by calling a function on paired elements. Requires vectors of equal length and processes elements in order, with options for forward and reverse processing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_25\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun zip_do<$T1, $T2, $R: drop>($v1: vector<$T1>, $v2: vector<$T2>, $f: |$T1, $T2| -> $R)\n```\n\n----------------------------------------\n\nTITLE: Option Comparison Macro for Validator Parameters\nDESCRIPTION: This macro simplifies comparison of Option values, checking if both options contain values and those values are equal. It's used in validator duplication checking for next epoch parameters that are stored as Option types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_72\n\nLANGUAGE: Move\nCODE:\n```\nmacro fun both_some_and_equal<$T>($a: Option<$T>, $b: Option<$T>): bool {\n    let (a, b) = ($a, $b);\n    a.is_some_and!(|a| b.is_some_and!(|b| a == b))\n}\n```\n\n----------------------------------------\n\nTITLE: Check Staking Metadata Equality\nDESCRIPTION: Utility function that compares staking metadata between two StakedSui tokens to verify if they are compatible for joining operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_36\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_equal_staking_metadata(self: &StakedSui, other: &StakedSui): bool {\n    (self.pool_id == other.pool_id) &&\n    (self.stake_activation_epoch == other.stake_activation_epoch)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Receive Rule for EarmarkedPayment in Move\nDESCRIPTION: A custom receive function that enforces authorization rules when an EarmarkedPayment is transferred. It verifies that the transaction sender matches the designated recipient address before releasing the payment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/move/transfer-to-object/README.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun receive(\n    parent: &mut UID,\n    ticket: Receiving<EarmarkedPayment>,\n    ctx: &TxContext\n): IdentifiedPayment {\n    let EarmarkedPayment { id, payment, for } = transfer::receive(parent, ticket);\n    // If the sender isn't the address we specified, the transaction will abort.\n    assert!(tx_context::sender(ctx) == for, ENotEarmarkedForSender);\n    object::delete(id);\n    payment\n}\n```\n\n----------------------------------------\n\nTITLE: Division Implementation\nDESCRIPTION: Safe and unsafe division operations with rounding support\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/math.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun unsafe_div(x: u64, y: u64): u64 {\n    let (_, result) = unsafe_div_round(x, y);\n    result\n}\n\npublic(package) fun unsafe_div_round(x: u64, y: u64): (bool, u64) {\n    let x = x as u128;\n    let y = y as u128;\n    let mut is_round_down = true;\n    if ((x * (FLOAT_SCALING as u128) % y) == 0) is_round_down = false;\n    (is_round_down, (x * (FLOAT_SCALING as u128) / y) as u64)\n}\n\npublic fun div_round(x: u64, y: u64): (bool, u64) {\n    let (is_round_down, result) = unsafe_div_round(x, y);\n    assert!(result > 0, EUnderflow);\n    (is_round_down, result)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EMetadataInvalidNetPubkey Error Constant in Move\nDESCRIPTION: Error constant (2) used when the network_pubkey_bytes field in ValidatorMetadata is invalid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\nconst EMetadataInvalidNetPubkey: u64 = 2;\n```\n\n----------------------------------------\n\nTITLE: Destroying Some Option in Move\nDESCRIPTION: Unpacks an Option and returns its contents. Aborts if the Option does not hold a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_some<Element>(t: Option<Element>): Element {\n    assert!(t.is_some(), EOPTION_NOT_SET);\n    let Option { mut vec } = t;\n    let elem = vec.pop_back();\n    vec.destroy_empty();\n    elem\n}\n```\n\n----------------------------------------\n\nTITLE: Function Return Value Example\nDESCRIPTION: Demonstrates how function return values are determined by the last expression.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_18\n\nLANGUAGE: move\nCODE:\n```\nfun add(x: u64, y: u64): u64 {\n    x + y\n}\n```\n\n----------------------------------------\n\nTITLE: Converting u256 to u16 with Overflow Checking in Move\nDESCRIPTION: Attempts to convert a u256 value to u16. Returns None if the value exceeds the maximum u16 value, using std::macros::try_as_u16 for the conversion logic.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u16(x: u256): Option<u16> {\n    std::macros::try_as_u16!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Native Function Implementation: check_zklogin_issuer_internal in Move\nDESCRIPTION: This defines the native implementation of the `check_zklogin_issuer_internal` function. This native implementation is responsible for the low-level verification of the zkLogin issuer.  It takes the address, address_seed, and the issuer as byte vector and returns a boolean.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_issuer.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/zklogin_verified_issuer.md#sui_zklogin_verified_issuer_check_zklogin_issuer_internal\">check_zklogin_issuer_internal</a>(\n    <b>address</b>: <b>address</b>,\n    address_seed: u256,\n    <a href=\"../sui/zklogin_verified_issuer.md#sui_zklogin_verified_issuer_issuer\">issuer</a>: &vector&lt;u8&gt;,\n): bool;\n```\n\n----------------------------------------\n\nTITLE: Creating Empty VecMap\nDESCRIPTION: Function to initialize an empty VecMap instance with specified key and value types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun empty<K: copy, V>(): VecMap<K, V> {\n    VecMap { contents: vector[] }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AdminCap Structure in Rust\nDESCRIPTION: Definition of an AdminCap struct that handles administrative capabilities and burnability configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_31\n\nLANGUAGE: rust\nCODE:\n```\nstruct AdminCap<phantom T> has key, store {\n\tid: UID,\n\tburnable: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Next Epoch Network Address\nDESCRIPTION: Function to retrieve the optional next epoch network address from a Validator's metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_57\n\nLANGUAGE: Move\nCODE:\n```\npublic fun next_epoch_network_address(self: &Validator): &Option<String> {\n    &self.metadata.next_epoch_net_address\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Review and Service\nDESCRIPTION: TypeScript interface definitions for Review and Service entities used in the frontend.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Review {\n\tid: string;\n\towner: string;\n\tservice_id: string;\n\tcontent: string;\n\tlen: number;\n\tvotes: number;\n\ttime_issued: number;\n\thas_poe: boolean;\n\ttotal_score: number;\n}\n\nexport interface Service {\n\tid: string;\n\tname: string;\n\tstars: number;\n\treward?: number;\n\tpool?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Alignment Definition\nDESCRIPTION: Example showing how to define column alignment in Markdown tables using colons\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| **Column one** | **Column two** | **Column three** | **Column four** |\n| :--- | :---: | :---: | :--- |\n```\n\n----------------------------------------\n\nTITLE: Finding the Index of an Element in a Vector in Move\nDESCRIPTION: This function returns a tuple (true, index) if the element is found in the vector, or (false, 0) if not found. It takes immutable references to both the vector and the element.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun index_of<Element>(v: &vector<Element>, e: &Element): (bool, u64) {\n    let mut i = 0;\n    let len = v.length();\n    while (i < len) {\n        if (&v[i] == e) return (true, i);\n        i = i + 1;\n    };\n    (false, 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Validator P2P Address\nDESCRIPTION: Function to retrieve the P2P address from a Validator's metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_50\n\nLANGUAGE: Move\nCODE:\n```\npublic fun p2p_address(self: &Validator): &String {\n    &self.metadata.p2p_address\n}\n```\n\n----------------------------------------\n\nTITLE: Build Move Package with Bytecode Dump in Shell\nDESCRIPTION: This shell command builds a Move package using the `sui move build` command and dumps the bytecode as a base64 encoded string. This is used to obtain the package digest required for authorizing upgrades.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sui move build --dump-bytecode-as-base64\n```\n\n----------------------------------------\n\nTITLE: Implementing range_do_eq Macro for Inclusive U32 Iteration in Move\nDESCRIPTION: Defines a macro function 'range_do_eq' that loops over a range of u32 values from start to stop (inclusive), applying a given function to each value. It uses the std::macros::range_do_eq macro internally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do_eq<$R: drop>($start: u32, $stop: u32, $f: |u32| -> $R) {\n    std::macros::range_do_eq!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Mutable Account Balance in Move\nDESCRIPTION: This internal function retrieves a mutable reference to a user's account balance. If the account doesn't exist, it creates a new one with zero balances. It takes the custodian object and owner's address as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\nfun borrow_mut_account_balance<T>(\n    custodian: &mut Custodian<T>,\n    owner: address,\n): &mut Account<T> {\n    if (!table::contains(&custodian.account_balances, owner)) {\n        table::add(\n            &mut custodian.account_balances,\n            owner,\n            Account { available_balance: balance::zero(), locked_balance: balance::zero() }\n        );\n    };\n    table::borrow_mut(&mut custodian.account_balances, owner)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Coin Stake to Validator Pool\nDESCRIPTION: Function to add user stake to a validator's staking pool using multiple SUI coins. Accepts a vector of coins, optional stake amount, validator address, and transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_13\n\nLANGUAGE: move\nCODE:\n```\npublic fun request_add_stake_mul_coin(\n   self: &mut SuiSystemState,\n   delegate_stakes: vector<Coin<SUI>>,\n   stake_amount: option::Option<u64>,\n   validator_address: address,\n   ctx: &mut TxContext,\n) {\n   let balance = extract_coin_balance(delegate_stakes, stake_amount, ctx);\n   validator_set::request_add_stake(&mut self.validators, validator_address, balance, option::none(), ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Depth at a Single Price Tick in DeepBook (Move)\nDESCRIPTION: This internal function calculates the total order depth at a specific price tick, considering only non-expired orders. It iterates through all orders at the given price and sums their quantities if they haven't expired.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_41\n\nLANGUAGE: Move\nCODE:\n```\nfun get_level2_book_status(\n    open_orders: &CritbitTree<TickLevel>,\n    price: u64,\n    time_stamp: u64\n): u64 {\n    let tick_level = critbit::borrow_leaf_by_key(open_orders, price);\n    let tick_open_orders = &tick_level.open_orders;\n    let mut depth = 0;\n    let mut order_id = linked_table::front(tick_open_orders);\n    let mut order: &Order;\n    while (!option::is_none(order_id)) {\n        order = linked_table::borrow(tick_open_orders, *option::borrow(order_id));\n        if (order.expire_timestamp > time_stamp) depth = depth + order.quantity;\n        order_id = linked_table::next(tick_open_orders, *option::borrow(order_id));\n    };\n    depth\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bridge Message Constants in Move\nDESCRIPTION: Constants used in the bridge message module for versioning, address length validation, error codes, and operation types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nconst CURRENT_MESSAGE_VERSION: u8 = 1;\nconst ECDSA_ADDRESS_LENGTH: u64 = 20;\nconst ETrailingBytes: u64 = 0;\nconst EInvalidAddressLength: u64 = 1;\nconst EEmptyList: u64 = 2;\nconst EInvalidMessageType: u64 = 3;\nconst EInvalidEmergencyOpType: u64 = 4;\nconst EInvalidPayloadLength: u64 = 5;\nconst EMustBeTokenMessage: u64 = 6;\nconst PAUSE: u8 = 0;\nconst UNPAUSE: u8 = 1;\n```\n\n----------------------------------------\n\nTITLE: Creating ASCII String from Bytes in Move\nDESCRIPTION: Function that converts a vector of bytes into an ASCII String. Aborts if any byte in the vector is not a valid ASCII character.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic fun string(bytes: vector<u8>): String {\n    let x = try_string(bytes);\n    assert!(x.is_some(), EInvalidASCIICharacter);\n    x.destroy_some()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating u8 in range with Sui RandomGenerator - Move\nDESCRIPTION: Generates a random u8 within the min and max range with a bias of 2^{-64} using sui::random::uint_in_range. The function requires a mutable RandomGenerator, min, and max as inputs to provide a u8 output, controlling bias with the integer range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/random.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun generate_u8_in_range(g: &mut sui::random::RandomGenerator, min: u8, max: u8): u8 {\n    uint_in_range!(g, min, max, 9)\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Sui Network using Sui CLI\nDESCRIPTION: This command bootstraps and initializes a new Sui network.  This is typically used for setting up a local development network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n\"sui genesis\"\n```\n\n----------------------------------------\n\nTITLE: Exploring LedgerService APIs with grpcurl in Shell\nDESCRIPTION: This Shell command lists available APIs within the LedgerService using grpcurl. By specifying sui.rpc.v2beta.LedgerService, it returns API methods such as GetTransaction and GetCheckpoint. Requires the <full node URL:port>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/grpc-overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ grpcurl <full node URL:port> list sui.rpc.v2beta.LedgerService\n```\n\n----------------------------------------\n\nTITLE: Compiling Bridge Node from Source\nDESCRIPTION: Series of commands to clone the Sui repository, checkout a specific branch or commit, and build the Bridge Node from source.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/MystenLabs/sui.git\n$ cd sui\n$ git fetch origin {BRANCH-NAME|SHA}\n$ git checkout {BRANCH-NAME|SHA}\n$ cargo build --release --bin sui-bridge\n```\n\n----------------------------------------\n\nTITLE: Implementing power function for u8 values\nDESCRIPTION: Calculates the value of a base raised to a power (exponentiation) using the std::macros::num_pow macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pow(base: u8, exponent: u8): u8 {\n    std::macros::num_pow!(base, exponent)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Empty String in Move\nDESCRIPTION: This function checks if a given string is empty. It returns `true` if the string has no characters, and `false` otherwise. This is useful for validating strings before performing operations on them.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../std/ascii.md#std_ascii_is_empty\">is_empty</a>(<a href=\"../std/string.md#std_string\">string</a>: &<a href=\"../std/ascii.md#std_ascii_String\">String</a>): <a href=\"../std/bool.md#std_bool\">bool</a> {\n    <a href=\"../std/string.md#std_string\">string</a>.bytes.<a href=\"../std/ascii.md#std_ascii_is_empty\">is_empty</a>()\n}\n```\n\n----------------------------------------\n\nTITLE: Length Getter for ObjectTable\nDESCRIPTION: Returns the number of key-value pairs in the ObjectTable. Takes a reference to the table and returns a u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_table.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic fun length<K: copy + drop + store, V: key + store>(table: &ObjectTable<K, V>): u64 {\n    table.size\n}\n```\n\n----------------------------------------\n\nTITLE: Handling CORS Error in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to handle potential CORS errors when calling the ZK proving service from a frontend application by delegating the call to a backend service.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/zklogin-integration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst proofResponse = await post('/your-internal-api/zkp/get', zkpRequestPayload);\n\nexport type PartialZkLoginSignature = Omit<\n\tParameters<typeof getZkLoginSignature>['0']['inputs'],\n\t'addressSeed'\n>;\nconst partialZkLoginSignature = proofResponse as PartialZkLoginSignature;\n```\n\n----------------------------------------\n\nTITLE: Checking if Staking Pool is Preactive in Move\nDESCRIPTION: Determines if a staking pool is yet to be activated (preactive). It requires a StakingPool reference and returns a boolean.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_28\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_preactive(pool: &sui_system::staking_pool::StakingPool): bool {\n    pool.activation_epoch.is_none()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deny List Functionality in Move\nDESCRIPTION: This snippet defines structures and functions for implementing a deny list system in Move, including support for global pauses and per-type configurations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_31\n\nLANGUAGE: Move\nCODE:\n```\npublic struct DenyList\npublic struct ConfigWriteCap\npublic struct ConfigKey\npublic struct AddressKey\npublic struct GlobalPauseKey\npublic struct PerTypeConfigCreated\npublic struct PerTypeList\npublic(package) fun v2_add\npublic(package) fun v2_remove\npublic(package) fun v2_contains_current_epoch\npublic(package) fun v2_contains_next_epoch\npublic(package) fun v2_enable_global_pause\npublic(package) fun v2_disable_global_pause\npublic(package) fun v2_is_global_pause_enabled_current_epoch\npublic(package) fun v2_is_global_pause_enabled_next_epoch\npublic(package) fun migrate_v1_to_v2\nfun add_per_type_config\nfun borrow_per_type_config_mut\nfun borrow_per_type_config\nfun per_type_exists\npublic(package) fun v1_add\nfun v1_per_type_list_add\npublic(package) fun v1_remove\nfun v1_per_type_list_remove\npublic(package) fun v1_contains\nfun v1_per_type_list_contains\nfun create\nfun per_type_list\n```\n\n----------------------------------------\n\nTITLE: Converting UQ32_32 to Raw u64 in Move\nDESCRIPTION: This function extracts the raw u64 value from a UQ32_32 fixed-point number. It can be used in conjunction with 'from_raw' for direct manipulation of the underlying representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq32_32.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_raw(a: std::uq32_32::UQ32_32): u64 {\n    a.0\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Kiosk Extension Module in Move\nDESCRIPTION: This code example shows how to import the kiosk_extension module, which is essential for developing permissioned Kiosk apps that can perform actions without the kiosk owner's direct involvement.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk-apps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule example::my_extension;\n\nuse sui::kiosk_extension;\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Mapping Vector Elements by Reference to New Vector in Rust\nDESCRIPTION: This macro function creates a new vector by applying a function to each element of the input vector by reference, preserving the order of elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_20\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun map_ref<$T, $U>($v: &vector<$T>, $f: |&$T| -> $U): vector<$U> {\n    let v = $v;\n    let mut r = vector[];\n    v.do_ref!(|e| r.push_back($f(e)));\n    r\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rentables Extension in Kiosk - Move\nDESCRIPTION: The 'install' function allows for the installation of the 'Rentables' extension in a Kiosk by adding the related module and ensuring proper permissions are set.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic fun install(\n  kiosk: &mut Kiosk,\n  cap: &KioskOwnerCap,\n  ctx: &mut TxContext\n){\n  kiosk_extension::add(Rentables {}, kiosk, cap, PERMISSIONS, ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Integer Square Root for u64 Values\nDESCRIPTION: Function that calculates the nearest lower integer square root for a u64 value. For non-perfect squares, it returns the floor of the actual square root.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sqrt(x: u64): u64 {\n    std::macros::num_sqrt!<u64, u128>(x, 64)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommitteeMemberUrlUpdateEvent Structure in Move\nDESCRIPTION: Defines an event structure that is emitted when a committee member updates their HTTP REST URL, containing the member's identifier and the new URL.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic struct CommitteeMemberUrlUpdateEvent has copy, drop {\n    member: vector<u8>,\n    new_url: vector<u8>\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Conversion from u64 to u16 in Move\nDESCRIPTION: Attempts to convert a u64 value to u16, returning None if the value exceeds the maximum value of u16 (65535).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u16(x: u64): Option<u16> {\n    std::macros::try_as_u16!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Key-Value Pairs from a Bag in Move\nDESCRIPTION: This function removes and returns a value from a Bag given its key. It aborts if the key doesn't exist or if the value type doesn't match.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bag.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun remove<K: copy + drop + store, V: store>(bag: &mut Bag, k: K): V {\n    let v = field::remove(&mut bag.id, k);\n    bag.size = bag.size - 1;\n    v\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Owner Address of the Kiosk - Move\nDESCRIPTION: This function retrieves the owner address of the Kiosk, which helps in identifying who has ownership rights over it.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_42\n\nLANGUAGE: Move\nCODE:\n```\npublic fun owner(self: &sui::kiosk::Kiosk): address {\n    self.owner\n}\n```\n\n----------------------------------------\n\nTITLE: Bytecode Add Instruction Preconditions Example\nDESCRIPTION: Example showing how preconditions are defined for the Add bytecode instruction, requiring two U64 values on the stack.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/test-generation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstate_stack_has!(0, Some(SignatureToken::U64))\nstate_stack_has!(1, Some(SignatureToken::U64))\n```\n\n----------------------------------------\n\nTITLE: Converting U64 to String in Move\nDESCRIPTION: Converts a u64 integer to its string representation using the std::macros::num_to_string macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_string(x: u64): String {\n    std::macros::num_to_string!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Validator Worker Address\nDESCRIPTION: Function to retrieve the worker address from a Validator's metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_52\n\nLANGUAGE: Move\nCODE:\n```\npublic fun worker_address(self: &Validator): &String {\n    &self.metadata.worker_address\n}\n```\n\n----------------------------------------\n\nTITLE: Swap Base for Quote Function\nDESCRIPTION: Function for swapping an exact amount of base asset for quote asset. Currently aborts with code 1337 indicating unimplemented functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic fun swap_exact_base_for_quote<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _quantity: u64,\n    _base_coin: Coin<BaseAsset>,\n    _quote_coin: Coin<QuoteAsset>,\n    _clock: &Clock,\n    _ctx: &mut TxContext,\n): (Coin<BaseAsset>, Coin<QuoteAsset>, u64) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWK Comparison in Move\nDESCRIPTION: Implements a function to compare two JWK instances for equality by checking if all their fields match.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\nfun jwk_equal(a: &JWK, b: &JWK): bool {\n    (&a.kty == &b.kty) &&\n        (&a.e == &b.e) &&\n        (&a.n == &b.n) &&\n        (&a.alg == &b.alg)\n}\n```\n\n----------------------------------------\n\nTITLE: Proving Asset Join in Rust\nDESCRIPTION: Validates the successful incorporation of a burned asset balance into an existing tokenized asset, emphasizing the secure execution of joining operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_25\n\nLANGUAGE: rust\nCODE:\n```\npublic fun prove_join<T>(\n  self: &TokenizedAsset<T>,\n  promise: JoinPromise,\n  proof: ID) {\n}\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for sui-graphql-rpc\nDESCRIPTION: A sample configuration file in TOML format for setting various limits and background task parameters in the sui-graphql-rpc project. This includes query limits, database query cost, and timeout settings.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-rpc/README.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[limits]\nmax-query-depth = 15\nmax-query-nodes = 500\nmax-output-nodes = 100000\nmax-query-payload-size = 5000\nmax-db-query-cost = 20000\ndefault-page-size = 5\nmax-page-size = 10\nrequest-timeout-ms = 15000\nmax-type-argument-depth = 16\nmax-type-argument-width = 32\nmax-type-nodes = 256\nmax-move-value-depth = 128\n\n[background-tasks]\nwatermark-update-ms=500\n```\n\n----------------------------------------\n\nTITLE: Sui Client PTB Move Call with String Literal\nDESCRIPTION: This example shows how to pass a string literal to a Move function using the `sui client ptb` command. The command calls a function `m::f` in a package `$PKG` with the string literal `\"Hello, world\"` as an argument.  It previews the transaction block and sets the gas budget to 10000000. The outer single quotes are crucial for the shell to interpret the double quotes literally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/ptb.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client ptb --move-call \"$PKG::m::f\" '\"Hello, world\"' --gas-budget 10000000 --preview\n```\n\n----------------------------------------\n\nTITLE: DenyList Constants in Move\nDESCRIPTION: Defines important constants used throughout the deny list system including error codes and reserved addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nconst ENotSystemAddress: u64 = 0;\nconst ENotDenied: u64 = 1;\nconst EInvalidAddress: u64 = 1;\nconst COIN_INDEX: u64 = 0;\nconst RESERVED: vector<address> = vector[0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x403, 0xdee9];\n```\n\n----------------------------------------\n\nTITLE: Treasury Cap Confirmation Function in Move\nDESCRIPTION: Function signature for confirming an action request using TreasuryCap, returning action details like name, amount, and addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/action-request.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun confirm_with_treasury_cap<T>(\n    treasury_cap: &mut TreasuryCap<T>,\n    request: ActionRequest<T>,\n    ctx: &mut TxContext\n): (String, u64, address, Option<address>);\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorJoinEvent Structure in Move\nDESCRIPTION: This struct is emitted when a new validator joins the committee, providing details about the epoch of joining and the validator's address along with their associated staking pool ID. It is crucial for tracking changes in the validator committee.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\n<pre><code><b>public</b> <b>struct</b> <a href=\"../sui_system/validator_set.md#sui_system_validator_set_ValidatorJoinEvent\">ValidatorJoinEvent</a> <b>has</b> <b>copy</b>, drop\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Reference Comparison in Move\nDESCRIPTION: Demonstrates how references can be compared, including comparisons between mutable and immutable references. The type of reference (mutable or immutable) doesn't affect comparison.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/equality.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nlet i = &0;\nlet m = &mut 1;\n\ni == m; // `false`\nm == i; // `false`\nm == m; // `true`\ni == i; // `true`\n```\n\n----------------------------------------\n\nTITLE: Checking Action Allowance in Move\nDESCRIPTION: Checks whether an action is present in the rules VecMap of the TokenPolicy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_37\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_allowed<T>(self: &TokenPolicy<T>, action: &String): bool {\n    self.rules.contains(action)\n}\n```\n\n----------------------------------------\n\nTITLE: Get Account Open Orders\nDESCRIPTION: Function to retrieve all open order IDs for a balance manager in the pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic fun account_open_orders(self: &Pool, balance_manager: UID): vector<u64>\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Metadata Help\nDESCRIPTION: Command to display help information for updating validator metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator update-metadata --help\n```\n\n----------------------------------------\n\nTITLE: Checking Sui Node Database Size\nDESCRIPTION: Commands to check the size of the local Sui Node databases.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndu -sh /opt/sui/db/\ndu -sh /opt/sui/db/authorities_db\ndu -sh /opt/sui/db/consensus_db\n```\n\n----------------------------------------\n\nTITLE: Implementing divide and round up for u256 in Move\nDESCRIPTION: Performs division of two u256 values and rounds up the result using a macro from the std::macros module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_and_round_up(x: u256, y: u256): u256 {\n    std::macros::num_divide_and_round_up!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Sui CLI Binary\nDESCRIPTION: Commands to download and make executable the Sui CLI binary, which is used for chain operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nwget https://releases.sui.io/$SUI_SHA/sui\nchmod +x sui\n```\n\n----------------------------------------\n\nTITLE: U128 Integer Operations in Move\nDESCRIPTION: The 0x1::u128 module provides utility functions for working with u128 integers, including bitwise operations, math utilities, and conversion functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_47\n\nLANGUAGE: move\nCODE:\n```\n// U128 integer operations\n0x1::u128::bitwise_not      // public fun\n0x1::u128::max              // public fun\n0x1::u128::min              // public fun\n0x1::u128::diff             // public fun\n0x1::u128::divide_and_round_up // public fun\n0x1::u128::pow              // public fun\n0x1::u128::sqrt             // public fun\n0x1::u128::try_as_u8        // public fun\n0x1::u128::try_as_u16       // public fun\n0x1::u128::try_as_u32       // public fun\n0x1::u128::try_as_u64       // public fun\n0x1::u128::to_string        // public fun\n```\n\n----------------------------------------\n\nTITLE: Converting UQ64_64 to Raw u128 Value in Move\nDESCRIPTION: Function that extracts the raw u128 value from a UQ64_64 fixed-point number. This allows direct access to the underlying representation for advanced operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_raw(a: UQ64_64): u128 {\n    a.0\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling DB Snapshots Using AWS S3 - YAML Configuration\nDESCRIPTION: This YAML snippet configures a Full node to perform database snapshots at the end of each epoch using Amazon's S3 service. Essential parameters include the S3 bucket name, AWS credentials, and connection limits.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/snapshots.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndb-checkpoint-config:\n  perform-db-checkpoints-at-epoch-end: true\n  perform-index-db-checkpoints-at-epoch-end: true\n  object-store-config:\n    object-store: \"S3\"\n    bucket: \"<BUCKET-NAME>\"\n    aws-access-key-id: “<ACCESS-KEY>\"\n    aws-secret-access-key: “<SHARED-KEY>\"\n    aws-region: \"<BUCKET-REGION>\"\n    object-store-connection-limit: 20\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Network Address for Next Epoch in Sui System\nDESCRIPTION: Updates a validator's network address for the next epoch in the Sui system state. The change takes effect from the next epoch. Requires mutable access to SuiSystemState and the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_next_epoch_network_address(\n    self: &mut SuiSystemState,\n    network_address: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_validator_next_epoch_network_address(network_address, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Looping Over U64 Range (Inclusive) in Move\nDESCRIPTION: Macro function that loops applying a given function to each number from start to stop (inclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do_eq<$R: drop>($start: u64, $stop: u64, $f: |u64| -> $R) {\n    std::macros::range_do_eq!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Move Package Dependency Resolution Example\nDESCRIPTION: Example showing how named address assignment works across package dependencies through unification. Demonstrates how addresses are resolved when packages have dependencies with renamed addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-package/README.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nP depends on Q, renaming its QA to PA, and assigns 0x42 to PA\nQ depends on R, renaming its RA to QA\nR introduces unbound address RA\n\nResults in:\nPA = 0x42 in P's resolution table\nQA = 0x42 in Q's resolution table\nRA = 0x42 in R's resolution table\n```\n\n----------------------------------------\n\nTITLE: Defining PAGE_LIMIT Constant in Move\nDESCRIPTION: Sets a constant for the maximum number of orders that can be returned in a single page of results, limiting the response size to 100 orders.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/order_query.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nconst PAGE_LIMIT: u64 = 100;\n```\n\n----------------------------------------\n\nTITLE: Creating a New Balance Manager for DeepBook\nDESCRIPTION: Example demonstrating how to create a new balance manager for DeepBookV3 and reinitialize the client. A balance manager is required to place trades on DeepBook.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { decodeSuiPrivateKey } from '@mysten/sui/cryptography';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { Transaction } from '@mysten/sui/transactions';\n\nimport { DeepBookClient } from '../src';\nimport { BalanceManager } from './types';\n\n// Used wherever balance manager key is required\nconst BALANCE_MANAGER_KEY = 'MANAGER_1';\n\nclass DeepBookMarketMaker {\n\tdbClient: DeepBookClient; // For building transactions\n\tsuiClient: SuiClient; // For executing transactions\n\tkeypair: Ed25519Keypair; // For signing transactions\n\tenv: 'testnet' | 'mainnet';\n\n\tconstructor(privateKey: string, env: 'testnet' | 'mainnet') {\n\t\tthis.env = env;\n\t\tthis.keypair = this.getSignerFromPK(privateKey);\n\t\tthis.suiClient = new SuiClient({\n\t\t\turl: getFullnodeUrl(env),\n\t\t});\n\t\tthis.dbClient = new DeepBookClient({\n\t\t\taddress: this.getActiveAddress(),\n\t\t\tenv: env,\n\t\t\tclient: this.suiClient,\n\t\t});\n\t}\n\n\tgetSignerFromPK = (privateKey: string): Ed25519Keypair => {\n\t\tconst { schema, secretKey } = decodeSuiPrivateKey(privateKey);\n\t\tif (schema === 'ED25519') return Ed25519Keypair.fromSecretKey(secretKey);\n\n\t\tthrow new Error(`Unsupported schema: ${schema}`);\n\t};\n\n\tgetActiveAddress() {\n\t\treturn this.keypair.toSuiAddress();\n\t}\n\n\tasync createBalanceManagerAndReinitialize() {\n\t\tlet tx = new Transaction();\n\t\ttx.add(this.dbClient.balanceManager.createAndShareBalanceManager());\n\n\t\tconst res = await this.suiClient.signAndExecuteTransaction({\n\t\t\ttransaction: tx,\n\t\t\tsigner: this.keypair,\n\t\t\toptions: {\n\t\t\t\tshowEffects: true,\n\t\t\t\tshowObjectChanges: true,\n\t\t\t},\n\t\t});\n\n\t\t// @ts-ignore\n\t\tconst balanceManagerAddress = res.objectChanges?.find((change) => {\n\t\t\treturn change.type === 'created' && change.objectType.includes('BalanceManager');\n\t\t})?.['objectId'];\n\n\t\tconst balanceManagers: { [key: string]: BalanceManager } = {\n\t\t\t[BALANCE_MANAGER_KEY]: {\n\t\t\t\taddress: balanceManagerAddress,\n\t\t\t\ttradeCap: undefined,\n\t\t\t},\n\t\t};\n\n\t\tthis.dbClient = new DeepBookClient({\n\t\t\taddress: this.getActiveAddress(),\n\t\t\tenv: this.env,\n\t\t\tclient: this.suiClient,\n\t\t\tbalanceManagers: balanceManagers,\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Salt from Mysten Labs Salt Server\nDESCRIPTION: Shell command to retrieve a user salt from the Mysten Labs-maintained salt server using a POST request with a JWT token.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/zklogin-integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST https://salt.api.mystenlabs.com/get_salt -H 'Content-Type: application/json' -d '{\"token\": \"$JWT_TOKEN\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorSet Structure in Move\nDESCRIPTION: This struct represents the set of validators in the Sui blockchain, maintaining information about total stake, active validators, and pending changes for each epoch. It includes multiple fields to track validator status and mappings relevant to their functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\n<pre><code><b>public</b> <b>struct</b> <a href=\"../sui_system/validator_set.md#sui_system_validator_set_ValidatorSet\">ValidatorSet</a> <b>has</b> store\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Generating Proof of Possession Payload\nDESCRIPTION: Command to serialize the payload for generating proof of possession for a validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/node-tools.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsui validator serialize-payload-pop --account-address $ACCOUNT_ADDRESS --protocol-public-key $BLS_PUBKEY\n```\n\n----------------------------------------\n\nTITLE: Converting U256 to U128 in Sui Move\nDESCRIPTION: Attempts to convert a u256 value to u128. Returns None if the value is too large to fit in u128.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_10\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic fun try_as_u128(x: u256): Option<u128> {\n    std::macros::try_as_u128!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing do Macro for U16 in Move\nDESCRIPTION: This macro function loops from 0 to $stop (exclusive) and applies the given function $f to each u16 value in the range. It uses the std::macros::do macro internally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u16.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do<$R: drop>($stop: u16, $f: |u16| -> $R) {\n    std::macros::do!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Address Getter Functions\nDESCRIPTION: Functions to access next epoch network addresses (p2p, primary, worker) for a validator node\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_58\n\nLANGUAGE: Move\nCODE:\n```\npublic fun next_epoch_p2p_address(self: &Validator): &Option<String> {\n    &self.metadata.next_epoch_p2p_address\n}\n\npublic fun next_epoch_primary_address(self: &Validator): &Option<String> {\n    &self.metadata.next_epoch_primary_address\n}\n\npublic fun next_epoch_worker_address(self: &Validator): &Option<String> {\n    &self.metadata.next_epoch_worker_address\n}\n```\n\n----------------------------------------\n\nTITLE: Get Level2 Order Book Ticks\nDESCRIPTION: Function to retrieve bid and ask prices and quantities for a specified number of ticks from mid price.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_level2_ticks_from_mid(self: &Pool, ticks: u64): (vector<u64>, vector<u64>, vector<u64>, vector<u64>)\n```\n\n----------------------------------------\n\nTITLE: Accessing NitroAttestationDocument Fields in Move\nDESCRIPTION: Defines accessor functions for various fields of the NitroAttestationDocument struct, including module_id, timestamp, and digest.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/nitro_attestation.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun module_id(attestation: &NitroAttestationDocument): &vector<u8> {\n    &attestation.module_id\n}\n\npublic fun timestamp(attestation: &NitroAttestationDocument): &u64 {\n    &attestation.timestamp\n}\n\npublic fun digest(attestation: &NitroAttestationDocument): &vector<u8> {\n    &attestation.digest\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EMetadataInvalidNetAddr Error Constant in Move\nDESCRIPTION: Error constant (4) used when the net_address field in ValidatorMetadata is invalid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\nconst EMetadataInvalidNetAddr: u64 = 4;\n```\n\n----------------------------------------\n\nTITLE: Declaring Structs with Abilities in Move\nDESCRIPTION: Examples of how to declare structs with various abilities. The Ignorable struct has drop ability, while Pair and MyVec have copy, drop, and store abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abilities.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic struct Ignorable has drop { f: u64 }\npublic struct Pair has copy, drop, store { x: u64, y: u64 }\npublic struct MyVec(vector<u64>) has copy, drop, store;\n```\n\n----------------------------------------\n\nTITLE: Examples of Conditional Copy Ability with Generic Types\nDESCRIPTION: Examples demonstrating how the copy ability of a generic type depends on whether its type parameters have the copy ability. Cup<u64> and Cup<S> have copy because u64 and S have copy, but Cup<signer> and Cup<NoAbilities> don't.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abilities.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic struct NoAbilities {}\npublic struct S has copy, drop { f: bool }\npublic struct Cup<T> has copy, drop, store { item: T }\n\nfun example(c_x: Cup<u64>, c_s: Cup<S>) {\n    // Valid, 'Cup<u64>' has 'copy' because 'u64' has 'copy'\n    let c_x2 = copy c_x;\n    // Valid, 'Cup<S>' has 'copy' because 'S' has 'copy'\n    let c_s2 = copy c_s;\n}\n\nfun invalid(c_account: Cup<signer>, c_n: Cup<NoAbilities>) {\n    // Invalid, 'Cup<signer>' does not have 'copy'.\n    // Even though 'Cup' was declared with copy, the instance does not have 'copy'\n    // because 'signer' does not have 'copy'\n    let c_account2 = copy c_account;\n    // Invalid, 'Cup<NoAbilities>' does not have 'copy'\n    // because 'NoAbilities' does not have 'copy'\n    let c_n2 = copy c_n;\n}\n```\n\n----------------------------------------\n\nTITLE: API for Creating Immutable Object Directly\nDESCRIPTION: The 'create_immutable' function allows direct creation of immutable 'ColorObject' instances. This approach ensures immutability from creation, bypassing initial ownership. It leverages Sui Move’s 'TxContext'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/immutable.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic fun create_immutable(red: u8, green: u8, blue: u8, ctx: &mut TxContext) {\n    let color_object = new(red, green, blue, ctx);\n    transfer::public_freeze_object(color_object)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Sui Kiosk Extension Storage\nDESCRIPTION: Implements the storage function to provide immutable access to an extension's storage, requiring the extension to be installed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun storage<Ext: drop>(_ext: Ext, self: &Kiosk): &Bag {\n    assert!(is_installed<Ext>(self), EExtensionNotInstalled);\n    &extension<Ext>(self).storage\n}\n```\n\n----------------------------------------\n\nTITLE: Peeling Option U64 with Sui BCS in Move\nDESCRIPTION: `peel_option_u64` converts serialized bytes to `Option<u64>`, leveraging the BCS’s `peel_option` process. The function requires a mutable reference to `sui::bcs::BCS`, and utilizes `peel_u64` for deserialization. This approach ensures the function can accommodate missing u64 values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bcs.md#sui_bcs_peel_option_u64\">peel_option_u64</a>(<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>: &<b>mut</b> <a href=\"../sui/bcs.md#sui_bcs_BCS\">BCS</a>): Option&lt;u64&gt; {\n    <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_option\">peel_option</a>!(|<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>| <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_u64\">peel_u64</a>())\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Friend Declaration of Non-Existent Module in Move\nDESCRIPTION: Example of an invalid friend declaration where the declared friend module does not exist and is not known by the compiler.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/friends.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::m { friend 0x42::nonexistent; // ERROR! }\n//                      ^^^^^^^^^^^^^^^^^ Unbound module '0x42::nonexistent'\n```\n\n----------------------------------------\n\nTITLE: Reading Struct Fields in Move\nDESCRIPTION: Demonstrates how to read fields from a struct using dereferencing and the dot operator. The example shows copying field values and accessing nested structs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/structs.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nlet foo = Foo { x: 3, y: true };\nlet bar = Bar(copy foo);\nlet x: u64 = *&foo.x;\nlet y: bool = *&foo.y;\nlet foo2: Foo = *&bar.0;\n```\n\nLANGUAGE: move\nCODE:\n```\nlet foo = Foo { x: 3, y: true };\nlet x = foo.x;  // x == 3\nlet y = foo.y;  // y == true\n```\n\nLANGUAGE: move\nCODE:\n```\nlet bar = Bar(Foo { x: 3, y: true });\nlet x = baz.0.x; // x = 3;\n```\n\n----------------------------------------\n\nTITLE: Maximum Value Macro for u16\nDESCRIPTION: Macro function that returns the maximum possible value for a u16 integer (0xFFFF).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u16.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun max_value(): u16 {\n    0xFFFF\n}\n```\n\n----------------------------------------\n\nTITLE: Type Annotations for Infinite Loops in Move\nDESCRIPTION: Examples demonstrating that an infinite loop (with no break) can be annotated with any type in Move, similar to return, abort, and other never-returning constructs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\n(loop (): u64);\n(loop (): address);\n(loop (): &vector<vector<u8>>);\n```\n\n----------------------------------------\n\nTITLE: Sui System State Management Functions\nDESCRIPTION: Functions for managing the Sui system state, including loading, mutating, and advancing epochs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun validator_address_by_pool_id(0x3::sui_system)\npublic fun pool_exchange_rates(0x3::sui_system)\npublic fun active_validator_addresses(0x3::sui_system)\nfun advance_epoch(0x3::sui_system)\nfun load_system_state(0x3::sui_system)\nfun load_system_state_mut(0x3::sui_system)\nfun load_inner_maybe_upgrade(0x3::sui_system)\nfun validator_voting_powers(0x3::sui_system)\nfun store_execution_time_estimates(0x3::sui_system)\n```\n\n----------------------------------------\n\nTITLE: Implementing num_min Macro in Move\nDESCRIPTION: A macro function that returns the minimum of two numeric values. It compares the inputs and returns the smaller one.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_min<$T>($x: $T, $y: $T): $T {\n    let x = $x;\n    let y = $y;\n    if (x < y) x else y\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Option and_ref Macro in Move\nDESCRIPTION: Macro that executes a closure on a reference to the value if Some, otherwise returns None. Similar to Rust's and_then() but operates on references.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_24\n\nLANGUAGE: move\nCODE:\n```\npublic macro fun and_ref<$T, $U>($o: &Option<$T>, $f: |&$T| -> Option<$U>): Option<$U> {\n    let o = $o;\n    if (o.is_some()) $f(o.borrow()) else none()\n}\n```\n\n----------------------------------------\n\nTITLE: Redeeming Fungible Staked SUI for SUI\nDESCRIPTION: This function redeems FungibleStakedSui for SUI, updates the next epoch stake, and emits a RedeemingFungibleStakedSuiEvent.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_33\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun redeem_fungible_staked_sui(\n    self: &mut Validator,\n    fungible_staked_sui: FungibleStakedSui,\n    ctx: &TxContext,\n): Balance<SUI> {\n    let fungible_staked_sui_amount = fungible_staked_sui.value();\n    let sui = self.staking_pool.redeem_fungible_staked_sui(fungible_staked_sui, ctx);\n    self.next_epoch_stake = self.next_epoch_stake - sui.value();\n    event::emit(RedeemingFungibleStakedSuiEvent {\n        pool_id: self.staking_pool_id(),\n        fungible_staked_sui_amount,\n        sui_amount: sui.value(),\n    });\n    sui\n}\n```\n\n----------------------------------------\n\nTITLE: Type Compatible If Expressions in Move\nDESCRIPTION: Examples showing type compatibility requirements in if expressions, including error cases.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/conditionals.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\n// x and y must be u64 integers\nlet maximum: u64 = if (x > y) x else y;\n\n// ERROR! branches different types\nlet z = if (maximum < 10) 10u8 else 100u64;\n\n// ERROR! branches different types, as default false-branch is () not u64\nif (maximum >= 10) maximum;\n```\n\n----------------------------------------\n\nTITLE: Generic Struct Declaration with Conditional Abilities\nDESCRIPTION: Example of a generic struct Cup that is declared with all four abilities. The actual abilities of an instance of Cup will depend on the abilities of its type parameter T.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abilities.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic struct Cup<T> has copy, drop, store, key { item: T }\n```\n\n----------------------------------------\n\nTITLE: Destroying ValidatorWrapper in Move\nDESCRIPTION: Implements the destroy function that destructs a ValidatorWrapper, retrieving the inner Validator object. It ensures the version is upgraded to the latest before destruction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_wrapper.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun destroy(self: sui_system::validator_wrapper::ValidatorWrapper): sui_system::validator::Validator\n{\n    upgrade_to_latest(&self);\n    let ValidatorWrapper { inner } = self;\n    inner.destroy()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Final TransferObjects Command in Rust\nDESCRIPTION: Demonstrates the final state of memory locations after transferring the remaining item to the sender's address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nGas Coin: _\nInputs: [\n  Pure(/* @0x808 BCS bytes */ ...),\n  Marketplace { id: market_id, ... },\n  Pure(/* 100u64 BCS bytes */ ...),\n]\nResults: [\n  [ _ ],\n  [ _ , _ ],\n  [],\n  [/* senders address */ ...],\n  [], // No results from TransferObjects\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing inclusive range-based loop for u8 values\nDESCRIPTION: Loops applying a function to each number from start to stop (inclusive) using std::macros::range_do_eq macro. The function must return a value with the drop ability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do_eq<$R: drop>($start: u8, $stop: u8, $f: |u8| -> $R) {\n    std::macros::range_do_eq!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value Between Two u256 Integers in Move\nDESCRIPTION: Returns the larger of two u256 values. This function uses the std::macros::num_max macro to determine which of the two provided values is greater.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max(x: u256, y: u256): u256 {\n    std::macros::num_max!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Next Page in DeepBook CLOB Order Query (Move)\nDESCRIPTION: This function checks if there is a next page available when querying orders in the DeepBook CLOB.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/order_query.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun has_next_page(page: &OrderPage): bool {\n    page.has_next_page\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Zero Tokens in Sui Framework (Rust)\nDESCRIPTION: This function creates and returns a new zero token. It requires a mutable transaction context, which is used to generate a new object ID. The balance of the new token is initialized to zero.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_16\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun zero<T>(ctx: &mut sui::tx_context::TxContext): sui::token::Token<T> {\n    Token {\n        id: object::new(ctx),\n        balance: balance::zero(),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing bitwise_not for U16 values\nDESCRIPTION: Function that returns the bitwise NOT of a u16 value by XORing it with the maximum u16 value. This inverts each bit in the value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bitwise_not(x: u16): u16 {\n    x ^ max_value!()\n}\n```\n\n----------------------------------------\n\nTITLE: Error Constant Definition in Move\nDESCRIPTION: Definition of an error constant for cases when a type is not from a module (primitive type).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/type_name.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nconst ENonModuleType: u64 = 0;\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Representation of ASCII String in Move\nDESCRIPTION: Returns a reference to the underlying bytes of a string. This allows read-only access to the string's byte representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun as_bytes(string: &String): &vector<u8> {\n    &string.bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Data Structure in Move\nDESCRIPTION: This snippet defines the Table structure and associated functions for implementing a key-value store data structure in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_27\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Table\npublic fun new\npublic fun add\npublic fun borrow\npublic fun borrow_mut\npublic fun remove\npublic fun contains\npublic fun length\npublic fun is_empty\npublic fun destroy_empty\npublic fun drop\n```\n\n----------------------------------------\n\nTITLE: Calculating Integer Square Root for u8 Values\nDESCRIPTION: The sqrt function calculates the nearest lower integer square root for a u8 value using the std::macros::num_sqrt macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sqrt(x: u8): u8 {\n    std::macros::num_sqrt!<u8, u16>(x, 8)\n}\n```\n\n----------------------------------------\n\nTITLE: G2 Group Negation Operation\nDESCRIPTION: Implements negation for G2 group elements by subtracting the element from the group identity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_33\n\nLANGUAGE: Move\nCODE:\n```\npublic fun g2_neg(e: &Element<G2>): Element<G2> {\n    g2_sub(&g2_identity(), e)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Groth16 Zero-Knowledge Proof System in Move\nDESCRIPTION: This snippet defines structures and functions for working with the Groth16 zero-knowledge proof system in Move, including curve selection and proof verification.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_36\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Curve\npublic struct PreparedVerifyingKey\npublic struct PublicProofInputs\npublic struct ProofPoints\npublic fun bls12381\npublic fun bn254\npublic fun pvk_from_bytes\npublic fun pvk_to_bytes\npublic fun public_proof_inputs_from_bytes\n```\n\n----------------------------------------\n\nTITLE: Scalar Division of BLS12-381 G1 Element\nDESCRIPTION: Performs scalar division of a BLS12-381 G1 group element by a non-zero scalar.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\npublic fun g1_div(e1: &Element<Scalar>, e2: &Element<G1>): Element<G1> {\n    group_ops::div(G1_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing destroy_empty_level Function in Move\nDESCRIPTION: Implements a function to destroy an empty TickLevel by destructuring it and destroying the empty open_orders linked table.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\nfun destroy_empty_level(level: TickLevel) {\n    let TickLevel {\n        price: _,\n        open_orders: orders,\n    } = level;\n    linked_table::destroy_empty(orders);\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing and Running Sui Move Modules in Sandbox\nDESCRIPTION: Commands for publishing Move modules and executing functions in the Sui sandbox environment. The first command publishes modules, while the second runs a function 'f' from module 'M' with dry-run flag.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/publish_then_run/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox publish\n```\n\nLANGUAGE: shell\nCODE:\n```\nsandbox run storage/0x0000000000000000000000000000000000000000000000000000000000000002/modules/M.mv f --dry-run\n```\n\n----------------------------------------\n\nTITLE: Computing Integer Square Root for u32 Values\nDESCRIPTION: Calculates the nearest lower integer square root for a u32 value. Since this operates with integers, it may not always return a perfect square root for all numbers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sqrt(x: u32): u32 {\n    std::macros::num_sqrt!<u32, u64>(x, 32)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Image URL in Move\nDESCRIPTION: Updates the image URL of a validator while ensuring the new URL does not exceed the maximum length allowed for validator metadata. The function creates a URL from the provided byte vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_76\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_image_url(self: &mut Validator, image_url: vector<u8>) {\n    assert!(\n        image_url.length() <= MAX_VALIDATOR_METADATA_LENGTH,\n        EValidatorMetadataExceedingLengthLimit,\n    );\n    self.metadata.image_url = url::new_unsafe_from_bytes(image_url);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum U128 Value in Move\nDESCRIPTION: Macro function that returns the maximum value for a u128.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun max_value(): u128 {\n    0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF\n}\n```\n\n----------------------------------------\n\nTITLE: Fill Struct Definition\nDESCRIPTION: Definition of the Fill struct which represents the results of a match between two orders. This struct is used to update the state after orders are matched.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\n/// A fill is a match between two orders. We use this struct to update state.\nstruct Fill has copy, drop {\n    /// The active order ID\n    order_id: ID,\n    /// The counter-party order ID\n    counterparty_order_id: ID,\n    /// Fill quantity with internal precision\n    fill_quantity: u64,\n    /// Fill price with internal precision\n    fill_price: u64,\n    /// Is the active order a bid\n    is_bid: bool,\n    /// Timestamp when fill happened\n    timestamp: u64,\n    /// Tick in which fill happened\n    tick_index: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-simtest for Sui Project\nDESCRIPTION: This command runs the install.sh script to install the cargo-simtest command to the user's cargo directory. The script is expected to handle the installation process for the Sui project's simulation testing tool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/scripts/simtest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./install.sh\n```\n\n----------------------------------------\n\nTITLE: Applying Function to Vector Elements by Reference in Rust\nDESCRIPTION: This macro function performs an action on each element of a vector by reference, without modifying the vector itself.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_17\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun do_ref<$T, $R: drop>($v: &vector<$T>, $f: |&$T| -> $R) {\n    let v = $v;\n    v.length().do!(|i| $f(&v[i]))\n}\n```\n\n----------------------------------------\n\nTITLE: Zipping and Processing Two Vectors in Reverse\nDESCRIPTION: A macro function similar to zip_do, but processing vectors from the end. Destroys two vectors of equal length by calling a function on paired elements in reverse order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_26\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun zip_do_reverse<$T1, $T2, $R: drop>($v1: vector<$T1>, $v2: vector<$T2>, $f: |$T1, $T2| -> $R)\n```\n\n----------------------------------------\n\nTITLE: Tip Alert Markdown\nDESCRIPTION: This code snippet demonstrates the markdown syntax for creating a 'Tip' alert using Docusaurus Admonitions. It gives the reader helpful advice or best practices. The alert suggests changing the home directory after installing the IDE.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n\n:::tip\n\nChange your home directory after installing the IDE.\n\n:::\n\n```\n```\n\n----------------------------------------\n\nTITLE: Downloading Sui Full Node Configuration Files\nDESCRIPTION: Fetches required YAML configuration files for setting up a Sui Full node using Docker. The files include docker-compose.yaml and fullnode-template.yaml necessary for node operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ wget https://github.com/MystenLabs/sui/blob/branch-name/docker/fullnode/docker-compose.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ wget https://github.com/MystenLabs/sui/raw/branch-name/crates/sui-config/data/fullnode-template.yaml\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring in Move\nDESCRIPTION: Public function to extract a substring from a given String. It takes the original string and start and end indices as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sub_string(s: &String, i: u64, j: u64): String {\n    s.substring(i, j)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Name\nDESCRIPTION: Updates a validator's name in the system state. Takes a vector of bytes representing the new name.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_name(\n    self: &mut SuiSystemState,\n    name: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_validator_name(name, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Query Pool Whitelist Status in Move\nDESCRIPTION: Function to check whether a pool is whitelisted.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic fun whitelisted(self: &Pool): bool\n```\n\n----------------------------------------\n\nTITLE: Invalid Type Mismatch in Loop Break Statements in Move\nDESCRIPTION: An example showing that all break statements in a loop must return values of the same type. The first break returns (), while the second returns a u64, causing a type mismatch error.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\n// invalid -- first break returns (), second returns 5\nlet x: u64 = loop { if (i < 10) break else break 5 };\n```\n\n----------------------------------------\n\nTITLE: Defining maximum value for U16 type\nDESCRIPTION: Macro function that returns the maximum value for a u16 (0xFFFF or 65535 in decimal).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun max_value(): u16 {\n    0xFFFF\n}\n```\n\n----------------------------------------\n\nTITLE: Calculate Quote Quantity with DEEP Fees\nDESCRIPTION: Function to calculate the quote quantity output for a given base quantity using DEEP as fee.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_quote_quantity_out(self: &Pool, base_quantity: u64): u64\n```\n\n----------------------------------------\n\nTITLE: Constants for FixedPoint32 Operations\nDESCRIPTION: Defines various constants used in fixed-point operations, including error codes for different scenarios like division by zero and overflow conditions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/fixed_point32.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nconst MAX_U64: u128 = 18446744073709551615;\nconst EDENOMINATOR: u64 = 65537;\nconst EDIVISION: u64 = 131074;\nconst EMULTIPLICATION: u64 = 131075;\nconst EDIVISION_BY_ZERO: u64 = 65540;\nconst ERATIO_OUT_OF_RANGE: u64 = 131077;\n```\n\n----------------------------------------\n\nTITLE: Looping Over U256 Range in Sui Move\nDESCRIPTION: Applies a function to each number in a range from start to stop (exclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_13\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun range_do<$R: drop>($start: u256, $stop: u256, $f: |u256| -> $R) {\n    std::macros::range_do!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Minting a TestItem to Kiosk\nDESCRIPTION: This command mints a test item to the created Kiosk. Ensure that a Kiosk has been created prior to executing this command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/kiosk-cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli mint-to-kiosk\n```\n\n----------------------------------------\n\nTITLE: Package Store Representation Example\nDESCRIPTION: Example showing how different versions of a package P are represented in the store with unique IDs and version numbers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/versioning.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n(0x17fb7f87e48622257725f584949beac81539a3f4ff864317ad90357c37d82605, 1) => P v1\n(0x260f6eeb866c61ab5659f4a89bc0704dd4c51a573c4f4627e40c5bb93d4d500e, 2) => P v2\n(0xd24cc3ec3e2877f085bc756337bf73ae6976c38c3d93a0dbaf8004505de980ef, 3) => P v3\n```\n\n----------------------------------------\n\nTITLE: Starting Sui Full Node with Docker Compose\nDESCRIPTION: Starts the Sui Full node using Docker Compose. This command utilizes the docker-compose.yaml file to define and run the services required for the Full node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Bridge Committee Member Registration Implementation\nDESCRIPTION: Implements validator registration functionality for the bridge committee with validation checks\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun register(\n    self: &mut BridgeCommittee,\n    system_state: &mut SuiSystemState,\n    bridge_pubkey_bytes: vector<u8>,\n    http_rest_url: vector<u8>,\n    ctx: &TxContext\n) {\n    assert!(self.members.is_empty(), ECommitteeAlreadyInitiated);\n    assert!(bridge_pubkey_bytes.length() == ECDSA_COMPRESSED_PUBKEY_LENGTH, EInvalidPubkeyLength);\n    let sender = ctx.sender();\n    let validators = system_state.active_validator_addresses();\n    assert!(validators.contains(&sender), ESenderNotActiveValidator);\n    let registration = if (self.member_registrations.contains(&sender)) {\n        let registration = &mut self.member_registrations[&sender];\n        registration.http_rest_url = http_rest_url;\n        registration.bridge_pubkey_bytes = bridge_pubkey_bytes;\n        *registration\n    } else {\n        let registration = CommitteeMemberRegistration {\n            sui_address: sender,\n            bridge_pubkey_bytes,\n            http_rest_url,\n        };\n        self.member_registrations.insert(sender, registration);\n        registration\n    };\n    check_uniqueness_bridge_keys(self, bridge_pubkey_bytes);\n    emit(registration)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for Sui Development\nDESCRIPTION: Installs the required system packages and development tools needed for building Sui applications on Ubuntu/Debian systems. This includes essential build tools, SSL libraries, Postgres development files, and Clang dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/linux-deps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install curl git-all cmake gcc libssl-dev pkg-config libclang-dev libpq-dev build-essential\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to Fixed-Point (uq_from_int)\nDESCRIPTION: Converts an integer to a fixed-point representation by left-shifting the value by the specified number of fractional bits.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun uq_from_int<$T, $U>($integer: $T, $fractional_bits: u8): $U {\n    ($integer as $U) << $fractional_bits\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Operation and Stake Functions\nDESCRIPTION: Functions to access operation capability ID, gas price, and stake amounts for a validator\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_60\n\nLANGUAGE: Move\nCODE:\n```\npublic fun operation_cap_id(self: &Validator): &ID {\n    &self.operation_cap_id\n}\n\npublic fun next_epoch_gas_price(self: &Validator): u64 {\n    self.next_epoch_gas_price\n}\n\npublic fun total_stake_amount(self: &Validator): u64 {\n    self.staking_pool.sui_balance()\n}\n```\n\n----------------------------------------\n\nTITLE: Get Validator Indices\nDESCRIPTION: Returns indices for a list of validator addresses in the validator set, aborting if any address is not found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_34\n\nLANGUAGE: Move\nCODE:\n```\nfun get_validator_indices(\n    validators: &vector<Validator>,\n    validator_addresses: &vector<address>,\n): vector<u64> {\n    let mut res = vector[];\n    validator_addresses.do_ref!(|addr| {\n        let idx = find_validator(validators, *addr).destroy_or!(abort ENotAValidator);\n        res.push_back(idx);\n    });\n    res\n}\n```\n\n----------------------------------------\n\nTITLE: Get Order DEEP Price\nDESCRIPTION: Function to retrieve the OrderDeepPrice struct for DEEP fee conversion calculations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_21\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_order_deep_price(self: &Pool): OrderDeepPrice\n```\n\n----------------------------------------\n\nTITLE: Transaction Signature Verification in Rust\nDESCRIPTION: This snippet provides functionality for adding and verifying signatures to transactions for both account holders and validators. It ensures that transaction integrity is maintained through cryptographic means. Dependencies include the `messages.rs` file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-types/src/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n/// Functionality for adding/verifying signatures to transactions.\n/// Includes methods for both account holders and validators.\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated create_pool Function in Move\nDESCRIPTION: Implements a deprecated function for creating a pool. It simply aborts with a DEPRECATED constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create_pool<BaseAsset, QuoteAsset>(\n    _tick_size: u64,\n    _lot_size: u64,\n    _creation_fee: Coin<SUI>,\n    _ctx: &mut TxContext,\n) {\n    abort DEPRECATED\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed-Point from Quotient (uq_from_quotient)\nDESCRIPTION: Creates a fixed-point value from a quotient specified by its numerator and denominator. It handles scaling and overflow checks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun uq_from_quotient<$T, $U>(\n    $numerator: $T,\n    $denominator: $T,\n    $max_t: $T,\n    $t_bits: u8,\n    $fractional_bits: u8,\n    $abort_denominator: _,\n    $abort_quotient_too_small: _,\n    $abort_quotient_too_large: _,\n): $T {\n    let numerator = $numerator;\n    let denominator = $denominator;\n    if (denominator == 0) $abort_denominator;\n    let scaled_numerator = numerator as $U << $t_bits;\n    let scaled_denominator = denominator as $U << ($t_bits - $fractional_bits);\n    let quotient = scaled_numerator / scaled_denominator;\n    if (quotient == 0 && numerator != 0) $abort_quotient_too_small;\n    if (quotient > $max_t as $U) $abort_quotient_too_large;\n    quotient as $T\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Power of u8 Values\nDESCRIPTION: The pow function calculates the value of a base raised to a power using the std::macros::num_pow macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pow(base: u8, exponent: u8): u8 {\n    std::macros::num_pow!(base, exponent)\n}\n```\n\n----------------------------------------\n\nTITLE: Entry Function Modifier Example\nDESCRIPTION: Shows how entry functions can be used as execution entry points while maintaining internal visibility.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    entry fun foo(): u64 { 0 }\n    fun calls_foo(): u64 { foo() } // valid!\n}\n\nmodule a::n {\n    fun calls_m_foo(): u64 {\n        a::m::foo() // ERROR!\n//      ^^^^^^^^^^^ 'foo' is internal to 'a::m'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dividing Integer by UQ64_64 in Move\nDESCRIPTION: Divides a u128 integer by a UQ64_64 fixed-point number, truncating any fractional part of the quotient. Aborts if the divisor is zero or if the quotient overflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun int_div(val: u128, divisor: UQ64_64): u128 {\n    std::macros::uq_int_div!<u128, u256>(\n        val,\n        divisor.0,\n        std::u128::max_value!(),\n        FRACTIONAL_BITS,\n        abort EDivisionByZero,\n        abort EOverflow,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Validator Report Records in Move\nDESCRIPTION: Removes records related to a departing validator from the validator report records data structure.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_47\n\nLANGUAGE: Move\nCODE:\n```\nfun clean_report_records_leaving_validator(\n    validator_report_records: &mut VecMap<address, VecSet<address>>,\n    leaving_validator_addr: address,\n) {\n    // Remove the records about this validator\n    if (validator_report_records.contains(&leaving_validator_addr)) {\n        validator_report_records.remove(&leaving_validator_addr);\n    };\n    // Remove the reports submitted by this validator\n    let reported_validators = validator_report_records.keys();\n    reported_validators.length().do!(|i| {\n        let reported_validator_addr = &reported_validators[i];\n        let reporters = &mut validator_report_records[reported_validator_addr];\n        if (reporters.contains(&leaving_validator_addr)) {\n            reporters.remove(&leaving_validator_addr);\n            if (reporters.is_empty()) {\n                validator_report_records.remove(reported_validator_addr);\n            };\n        };\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Sui BCS Format Manifest\nDESCRIPTION: Shows how to update the BCS manifest after modifying core types by running the generate-format example which uses serde-reflection to create a new YAML manifest file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-core/tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhuitseeker@Garillots-MBP.localdomain➜~/tmp/sui(main✗)» cd sui_core\nhuitseeker@Garillots-MBP.localdomain➜tmp/sui/sui_core(main✗)» cargo -q run --example generate-format -- print > tests/staged/sui.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Package Management in Move\nDESCRIPTION: This snippet defines structures and functions for managing packages in Move, including publishing, upgrading, and version control.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_34\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Publisher\npublic struct UpgradeCap\npublic struct UpgradeTicket\npublic struct UpgradeReceipt\npublic fun claim\npublic fun claim_and_keep\npublic fun burn_publisher\npublic fun from_package\npublic fun from_module\npublic fun published_module\npublic fun published_package\npublic fun upgrade_package\npublic fun version\npublic fun upgrade_policy\npublic fun ticket_package\npublic fun ticket_policy\npublic fun receipt_cap\npublic fun receipt_package\npublic fun ticket_digest\npublic fun compatible_policy\npublic fun additive_policy\npublic fun dep_only_policy\npublic entry fun only_additive_upgrades\npublic entry fun only_dep_upgrades\npublic entry fun make_immutable\npublic fun authorize_upgrade\npublic fun commit_upgrade\nfun restrict\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Principal from Staked SUI - Move\nDESCRIPTION: Withdraws principal SUI from a StakedSui object and calculates corresponding pool tokens using the exchange rate at staking epoch. Returns both withdrawn pool tokens and SUI balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_14\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun withdraw_from_principal(\n    pool: &StakingPool,\n    staked_sui: StakedSui,\n): (u64, Balance<SUI>) {\n    assert!(staked_sui.pool_id == object::id(pool), EWrongPool);\n    let exchange_rate_at_staking_epoch = pool.pool_token_exchange_rate_at_epoch(staked_sui.stake_activation_epoch);\n    let principal_withdraw = staked_sui.into_balance();\n    let pool_token_withdraw_amount = exchange_rate_at_staking_epoch.get_token_amount(principal_withdraw.value());\n    (pool_token_withdraw_amount, principal_withdraw)\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Sui Repository (Bash)\nDESCRIPTION: This command clones the Sui repository into a specified directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-analyzer/prettier-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/MystenLabs/sui.git \"$SUI\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Coin in Move\nDESCRIPTION: This snippet shows how to define a custom coin type in Move, including the initialization function that creates the TreasuryCap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nmodule examples::mycoin {\n    use std::option;\n    use sui::coin;\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n\n    struct MYCOIN has drop {}\n\n    fun init(witness: MYCOIN, ctx: &mut TxContext) {\n        let (treasury_cap, metadata) = coin::create_currency<MYCOIN>(\n            witness, \n            2, \n            b\"MYCOIN\", \n            b\"My Coin\", \n            b\"My Coin description\", \n            option::none(), \n            ctx\n        );\n        transfer::public_freeze_object(metadata);\n        transfer::public_transfer(treasury_cap, tx_context::sender(ctx))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sui with Tracing Feature for Transaction Profiling\nDESCRIPTION: Command to install the Sui client with the tracing feature enabled, which is required for transaction profiling. This installs from a specific branch of the Sui GitHub repository.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --locked --git https://github.com/MystenLabs/sui.git --branch <BRANCH-NAME> --features tracing sui\n```\n\n----------------------------------------\n\nTITLE: Default Else Clause in Move\nDESCRIPTION: Demonstrates equivalent if expressions with implicit and explicit unit value in else clause.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/conditionals.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nif (condition) true_branch // implied default: else ()\nif (condition) true_branch else ()\n```\n\n----------------------------------------\n\nTITLE: Defining TypeName Struct in Move\nDESCRIPTION: Declaration of the TypeName struct which represents a Move type as a string. The struct has copy, drop, and store abilities and contains a single field with a string representation of the type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/type_name.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic struct TypeName has copy, drop, store\n\n```\n\n----------------------------------------\n\nTITLE: TransferRecord Struct Definition\nDESCRIPTION: Structure for tracking transfer history within specific time periods. Stores hourly transfer amounts and maintains a rolling window of transfer records.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/limiter.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TransferRecord has store {\n    hour_head: u64,\n    hour_tail: u64,\n    per_hour_amounts: vector<u64>,\n    total_amount: u64\n}\n```\n\n----------------------------------------\n\nTITLE: VaultBalances Function Definition\nDESCRIPTION: Function signature for retrieving vault balances for a specific pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nasync vaultBalances(poolKey: string) {}\n```\n\n----------------------------------------\n\nTITLE: Converting Staked SUI to Fungible Tokens - Move\nDESCRIPTION: Converts a StakedSui object into a FungibleStakedSui object using the pool's exchange rate at staking epoch. Handles initialization of fungible staking data and updates total supply tracking.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_13\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun convert_to_fungible_staked_sui(\n    pool: &mut StakingPool,\n    staked_sui: StakedSui,\n    ctx: &mut TxContext,\n): FungibleStakedSui {\n    let StakedSui { id, pool_id, stake_activation_epoch, principal } = staked_sui;\n    assert!(pool_id == object::id(pool), EWrongPool);\n    assert!(ctx.epoch() >= stake_activation_epoch, ECannotMintFungibleStakedSuiYet);\n    id.delete();\n    let exchange_rate_at_staking_epoch = pool.pool_token_exchange_rate_at_epoch(\n        stake_activation_epoch,\n    );\n    let pool_token_amount = exchange_rate_at_staking_epoch.get_token_amount(principal.value());\n    let key = FungibleStakedSuiDataKey {};\n    if (!pool.extra_fields.contains(key)) {\n        pool\n            .extra_fields\n            .add(\n                key,\n                FungibleStakedSuiData {\n                    id: object::new(ctx),\n                    total_supply: pool_token_amount,\n                    principal,\n                },\n            );\n    } else {\n        let fungible_staked_sui_data: &mut FungibleStakedSuiData = &mut pool.extra_fields[key];\n        fungible_staked_sui_data.total_supply =\n            fungible_staked_sui_data.total_supply + pool_token_amount;\n        fungible_staked_sui_data.principal.join(principal);\n    };\n    FungibleStakedSui {\n        id: object::new(ctx),\n        pool_id,\n        value: pool_token_amount,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Sui Move Build Command\nDESCRIPTION: Shows the available options and their descriptions for the sui move build command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/move.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move build --help\n```\n\nLANGUAGE: sh\nCODE:\n```\nUsage: sui move build [OPTIONS]\n\nOptions:\n  -p, --path <PACKAGE_PATH>                     Path to a package which the command should be run with respect to\n      --with-unpublished-dependencies           Include the contents of packages in dependencies that haven't been published (only relevant when dumping\n                                                bytecode as base64)\n      --dump-bytecode-as-base64                 Whether we are printing in base64\n  -d, --dev                                     Compile in 'dev' mode. The 'dev-addresses' and 'dev-dependencies' fields will be used if this flag is set. This\n                                                flag is useful for development of packages that expose named addresses that are not set to a specific value\n      --ignore-chain                            Don't specialize the package to the active chain when dumping bytecode as Base64. This allows building to\n                                                proceed without a network connection or active environment, but it will not be able to automatically determine\n                                                the addresses of its dependencies\n      --generate-struct-layouts                 If true, generate struct layout schemas for all struct types passed into `entry` functions declared by modules\n                                                in this package These layout schemas can be consumed by clients (e.g., the TypeScript SDK) to enable\n                                                serialization/deserialization of transaction arguments and events\n      --test                                    Compile in 'test' mode. The 'dev-addresses' and 'dev-dependencies' fields will be used along with any code in\n                                                the 'tests' directory\n      --doc                                     Generate documentation for packages\n      --install-dir <INSTALL_DIR>               Installation directory for compiled artifacts. Defaults to current directory\n      --force                                   Force recompilation of all packages\n      --fetch-deps-only                         Only fetch dependency repos to MOVE_HOME\n      --skip-fetch-latest-git-deps              Skip fetching latest git dependencies\n      --default-move-flavor <DEFAULT_FLAVOR>    Default flavor for move compilation, if not specified in the package's config\n      --default-move-edition <DEFAULT_EDITION>  Default edition for move compilation, if not specified in the package's config\n      --dependencies-are-root                   If set, dependency packages are treated as root packages. Notably, this will remove warning suppression in\n                                                dependency packages\n      --silence-warnings                        If set, ignore any compiler warnings\n      --warnings-are-errors                     If set, warnings become errors\n      --json-errors                             If set, reports errors at JSON\n      --no-lint                                 If `true`, disable linters\n      --lint                                    If `true`, enables extra linters\n  -h, --help                                    Print help\n  -V, --version                                 Print version\n```\n\n----------------------------------------\n\nTITLE: JWK Sort Validation in Move\nDESCRIPTION: Validates that a vector of ActiveJwk objects is properly sorted according to the jwk_lt comparison function\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\nfun check_sorted(new_active_jwks: &vector<ActiveJwk>) {\n    let mut i = 0;\n    while (i < new_active_jwks.length() - 1) {\n        let a = &new_active_jwks[i];\n        let b = &new_active_jwks[i + 1];\n        assert!(jwk_lt(a, b), EJwksNotSorted);\n        i = i + 1;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Coin Objects by Address in Sui using GraphQL\nDESCRIPTION: This snippet shows how to retrieve all Coin<0x2::sui::SUI> objects owned by a specific address using GraphQL in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/graphql-migration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  address(address: \"0x5094652429957619e6efa79a404a6714d1126e63f551f4b6c7fb76440f8118c9\") {\n    coins(\n      first: 3,\n      after: \"IAB3ha2PEA4ESRF4UErsJufJEwYpmSbCq7UNpxIHnLhG\",\n      type: \"0x2::sui::SUI\"\n    ) {\n      nodes {\n        address\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Candidate Validator Protocol Pubkey - Move\nDESCRIPTION: This function updates a candidate validator's protocol public key and proof of possession. Inputs are the new public key and proof as vectors. It engages the Sui system state for registering these updates.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_29\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_candidate_validator_protocol_pubkey(self: &mut sui_system::sui_system::SuiSystemState, protocol_pubkey: vector<u8>, proof_of_possession: vector<u8>, ctx: &sui::tx_context::TxContext)\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_candidate_validator_protocol_pubkey(\n    self: &mut SuiSystemState,\n    protocol_pubkey: vector<u8>,\n    proof_of_possession: vector<u8>,\n    ctx: &TxContext,\n) {\n    self\n        .load_system_state_mut()\n        .update_candidate_validator_protocol_pubkey(protocol_pubkey, proof_of_possession, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Struct in Move\nDESCRIPTION: Defines the Extension struct containing storage, permissions, and enabled status for a Kiosk extension.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Extension has store {\n    storage: sui::bag::Bag,\n    permissions: u128,\n    is_enabled: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Pool Fee Withdrawal Function\nDESCRIPTION: Function allowing pool owners to withdraw accumulated trading fees from a pool. Requires pool owner capability verification.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun withdraw_fees<BaseAsset, QuoteAsset>(\n    pool_owner_cap: &PoolOwnerCap,\n    pool: &mut Pool<BaseAsset, QuoteAsset>,\n    ctx: &mut TxContext,\n): Coin<QuoteAsset> {\n    assert!(pool_owner_cap.owner == object::uid_to_address(&pool.id), EIncorrectPoolOwner);\n    let quantity = quote_asset_trading_fees_value(pool);\n    let to_withdraw = balance::split(&mut pool.quote_asset_trading_fees, quantity);\n    coin::from_balance(to_withdraw, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: TypeName Struct Definition in Move\nDESCRIPTION: Defines a TypeName struct that stores a string representation of a type. The struct has copy, drop, and store abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/type_name.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic struct TypeName has copy, drop, store\n```\n\n----------------------------------------\n\nTITLE: Joining and Leaving Validator Committee\nDESCRIPTION: Commands to join the validator committee and leave the committee.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/node-tools.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsui validator join-committee\n```\n\nLANGUAGE: bash\nCODE:\n```\nsui validator leave-committee\n```\n\n----------------------------------------\n\nTITLE: Creating Express Backend for reCAPTCHA Verification (TypeScript)\nDESCRIPTION: This TypeScript code creates an Express app that handles reCAPTCHA verification. It includes routes for verifying tokens, signing messages, and interacting with the Google reCAPTCHA API.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/recaptcha.mdx#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as ed from '@noble/ed25519';\nimport axios from 'axios';\nimport cors from 'cors';\nimport express from 'express';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\n\nimport api from './api';\nimport MessageResponse from './interfaces/MessageResponse';\nimport * as middlewares from './middlewares';\n\nrequire('dotenv').config();\n\nconst app = express();\n\napp.use(morgan('dev'));\napp.use(helmet());\napp.use(cors());\napp.use(express.json());\n\napp.get<{}, MessageResponse>('/', (req, res) => {\n\tres.json({\n\t\tmessage: 'Express + TypeScript Server',\n\t});\n});\n\ninterface RecaptchaApiResponse {\n\tsuccess: boolean;\n\tchallenge_ts: string; // timestamp of the challenge load (ISO format yyyy-MM-dd'T'HH:mm:ssZZ)\n\thostname: string; // the hostname of the site where the reCAPTCHA was solved\n\tsignature?: Uint8Array;\n\tpubKey?: Uint8Array;\n\tmessage?: Uint8Array;\n\t'error-codes'?: any[]; // optional\n}\n\napp.post('/verify-token', async (req, res) => {\n\tconst now: number = Date.now();\n\tconst privKey = process.env.SK!;\n\n\tconst pubKey = await ed.getPublicKey(privKey);\n\tconst { response, secret, userAddress } = req.body;\n\n\tconsole.log('userAddress: ' + userAddress);\n\tconsole.log('secret: ' + secret);\n\tconsole.log('response: ' + response);\n\tconsole.log('now: ' + now);\n\tconsole.log('privKey: ' + privKey);\n\n\tconst message: string = stringToHex(userAddress.replace('0x', '').concat(now.toString()));\n\n\tconsole.log('message: ' + message);\n\n\tconst signature = await ed.sign(message, privKey);\n\tconst isValid = await ed.verify(signature, message, pubKey);\n\n\tconsole.log({ message, pubKey, signature, isValid });\n\n\ttry {\n\t\tlet axiosResponse = await axios.post<RecaptchaApiResponse>(\n\t\t\t`https://www.google.com/recaptcha/api/siteverify?secret=${secret}&response=${response}`,\n\t\t);\n\t\tconsole.log(axiosResponse.data);\n\t\treturn res.status(200).json({\n\t\t\tsuccess: axiosResponse.data.success,\n\t\t\tverificationInfo: axiosResponse.data,\n\t\t\tsignature: Array.from(signature),\n\t\t\tpubKey: Array.from(pubKey),\n\t\t\tmessage: Array.from(Uint8Array.from(Buffer.from(message, 'hex'))),\n\t\t});\n\t} catch (error) {\n\t\tconsole.log(error);\n\t\treturn res.status(500).json({\n\t\t\tsuccess: false,\n\t\t});\n\t}\n});\n\nfunction stringToHex(str: string): string {\n\tlet hex = '';\n\tfor (let i = 0; i < str.length; i++) {\n\t\tconst charCode = str.charCodeAt(i);\n\t\tconst hexValue = charCode.toString(16);\n\n\t\t// Pad with zeros to ensure two-digit representation\n\t\thex += hexValue.padStart(2, '0');\n\t}\n\treturn hex;\n}\n\napp.use('/api/v1', api);\n\napp.use(middlewares.notFound);\napp.use(middlewares.errorHandler);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Structuring BurnPromise Object in Rust\nDESCRIPTION: The `BurnPromise` struct ensures a tokenized asset’s permanent removal by defining its expected supply, safeguarding against unintended asset retention.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\nstruct BurnPromise {\n  expected_supply: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User Locked Balance in Move\nDESCRIPTION: This function retrieves the locked balance of a user in the custodian system. It takes the custodian object and owner's address as parameters, and returns the balance as a u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun account_locked_balance<T>(\n    custodian: &Custodian<T>,\n    owner: address,\n): u64 {\n    balance::value(&table::borrow(&custodian.account_balances, owner).locked_balance)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Service for Sui Edge Proxy\nDESCRIPTION: This YAML configuration creates a Kubernetes Service named 'sui-node-benchmark' in the 'benchmark-rpc-testnet' namespace. It sets up a ClusterIP service with ClientIP session affinity for consistent client connections.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-edge-proxy/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: sui-node-benchmark\n  namespace: benchmark-rpc-testnet\n  annotations:\n    cloud.google.com/neg: '{\"ingress\":true}'\nspec:\n  type: ClusterIP\n  selector:\n    app: sui-node-benchmark\n  ports:\n    - port: 9000\n      targetPort: 9000\n      protocol: TCP\n  sessionAffinity: ClientIP\n  sessionAffinityConfig:\n    clientIP:\n      timeoutSeconds: 10800\n```\n\n----------------------------------------\n\nTITLE: Extracting Bytes from a String\nDESCRIPTION: Function that consumes a string and returns its underlying byte vector, effectively unpacking the String struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun into_bytes(s: String): vector<u8> {\n    let String { bytes } = s;\n    bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectBag Struct in Move\nDESCRIPTION: Defines the ObjectBag struct with a unique ID and size field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_bag.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct ObjectBag has key, store {\n    id: sui::object::UID,\n    size: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Converting U64 to String in Move\nDESCRIPTION: Converts a u64 value to a String using the std::macros::num_to_string macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_string(x: u64): String {\n    std::macros::num_to_string!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Objects by Type in Sui using GraphQL\nDESCRIPTION: This GraphQL query fetches the latest versions of objects of type 0x2::package::Publisher that are currently live on-chain in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/graphql-migration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  objects(filter: { type: \"0x2::package::Publisher\" }) {\n    nodes {\n      address\n      digest\n      asMoveObject {\n        contents { json }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for UQ32_32 Module in Move\nDESCRIPTION: Defines error constants for the UQ32_32 module along with constants for the total number of bits and fractional bits in the fixed-point number.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\n#[error]\nconst EDenominator: vector<u8> = b\"Quotient specified with a zero denominator\";\n\n#[error]\nconst EQuotientTooSmall: vector<u8> = b\"Quotient specified is too small, and is outside of the supported range\";\n\n#[error]\nconst EQuotientTooLarge: vector<u8> = b\"Quotient specified is too large, and is outside of the supported range\";\n\n#[error]\nconst EOverflow: vector<u8> = b\"Overflow from an arithmetic operation\";\n\n#[error]\nconst EDivisionByZero: vector<u8> = b\"Division by zero\";\n\nconst TOTAL_BITS: u8 = 64;\n\nconst FRACTIONAL_BITS: u8 = 32;\n```\n\n----------------------------------------\n\nTITLE: Converting u32 to u8 with Overflow Checking\nDESCRIPTION: Attempts to convert a u32 value to u8, returning None if the value exceeds the maximum u8 value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u8(x: u32): Option<u8> {\n    std::macros::try_as_u8!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Updates in DeepBook API\nDESCRIPTION: Describes the response format for the order updates endpoint, which returns information about recently placed or canceled orders in a specific pool. The response includes details such as order ID, quantities, price, and status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"order_id\": \"string\",\n        \"balance_manager_id\": \"string\",\n        \"timestamp\": integer,\n        \"original_quantity\": integer,\n        \"remaining_quantity\": integer,\n        \"filled_quantity\": integer,\n        \"price\": integer,\n        \"status\": \"string\",\n        \"type\": \"string\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Module Imports for BLS12-381 Operations in Move\nDESCRIPTION: Imports necessary dependencies from standard libraries and Sui-specific modules needed for BLS12-381 operations, including vector manipulation, BCS serialization, and group operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::vector;\nuse sui::address;\nuse sui::bcs;\nuse sui::group_ops;\nuse sui::hex;\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated deposit_base Function in Move\nDESCRIPTION: Implements a deprecated function for depositing base assets. It aborts with a specific error code.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deposit_base<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _coin: Coin<BaseAsset>,\n    _account_cap: &AccountCap\n) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: OrderModified Event Struct\nDESCRIPTION: Definition of the OrderModified event struct which is emitted when a maker order is modified. This event provides information about the modified order for external observers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\n/// Emitted when an order is modified\nstruct OrderModified has copy, drop {\n    /// order id\n    order_id: ID,\n    /// client order id\n    client_order_id: u64,\n    /// Owner of the order\n    owner: address,\n    /// Sequence number of the operation\n    sequence: u64,\n    /// Old quantity with external precision\n    old_quantity: u64,\n    /// New quantity with external precision\n    new_quantity: u64,\n    /// Is it a bid (buy) or ask (sell) order\n    is_bid: bool,\n    /// Price with external precision\n    price: u64,\n    /// Base asset ID\n    base_asset_id: ID,\n    /// Quote asset ID\n    quote_asset_id: ID,\n    /// Pool ID\n    pool_id: ID,\n    /// timestamp of modification\n    timestamp: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting the Byte Value from an ASCII Character in Move\nDESCRIPTION: Returns the underlying byte value of an ASCII character. It consumes a Char and returns a u8.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun byte(char: Char): u8 {\n    let Char { byte } = char;\n    byte\n}\n```\n\n----------------------------------------\n\nTITLE: OrderDeepPrice Struct Definition\nDESCRIPTION: Definition of the OrderDeepPrice struct which represents the conversion rate of DEEP tokens at the time an order was placed. This information is used for fee calculations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\n/// The price of deep at the time an order was placed.\n/// Needed if the user wants to pay in deep. Then we need to know the native\n/// price at the time of placing the order.\nstruct OrderDeepPrice has copy, drop, store {\n    /// Numerator of the conversion rate\n    numerator: u64,\n    /// Denominator of the conversion rate\n    denominator: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: GetQuantityOut Function Definition\nDESCRIPTION: Function signature for calculating output quantities based on either base or quote quantity input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nasync getQuantityOut(poolKey: string, baseQuantity: number, quoteQuantity: number) {}\n```\n\n----------------------------------------\n\nTITLE: Defining Sword and Shield Structs in Move\nDESCRIPTION: This snippet defines the Sword and Shield structs that can be optionally equipped by a SimpleWarrior. Both have key and store abilities, allowing them to exist as independent objects and be stored within other objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/wrapped.mdx#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic struct Sword has key, store {\n    id: UID,\n    strength: u8,\n}\n\npublic struct Shield has key, store {\n    id: UID,\n    armor: u8,\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Verifying Key Preparation Native Function\nDESCRIPTION: Native implementation for preparing verifying key that handles input flattening and may abort with EInvalidVerifyingKey or EInvalidCurve errors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/groth16.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nnative fun prepare_verifying_key_internal(\n    curve: u8,\n    verifying_key: &vector<u8>,\n): PreparedVerifyingKey;\n```\n\n----------------------------------------\n\nTITLE: ASCII Constants Definition in Move\nDESCRIPTION: Definition of ASCII character code constants used for type name parsing and comparison operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/type_name.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nconst ASCII_COLON: u8 = 58;\nconst ASCII_V: u8 = 118;\nconst ASCII_E: u8 = 101;\nconst ASCII_C: u8 = 99;\nconst ASCII_T: u8 = 116;\nconst ASCII_O: u8 = 111;\nconst ASCII_R: u8 = 114;\n```\n\n----------------------------------------\n\nTITLE: Zero-Based Loop Implementation (Exclusive)\nDESCRIPTION: Implements a loop that applies a function to each value from 0 to stop (exclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do<$R: drop>($stop: u256, $f: |u256| -> $R) {\n    std::macros::do!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Option do_ref Macro in Move\nDESCRIPTION: Macro that executes a closure on a reference to the value inside an Option if it contains one. Takes a reference to Option<T> and a closure.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_20\n\nLANGUAGE: move\nCODE:\n```\npublic macro fun do_ref<$T, $R: drop>($o: &Option<$T>, $f: |&$T| -> $R) {\n    let o = $o;\n    if (o.is_some()) { $f(o.borrow()); }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator with Verified Cap in Move\nDESCRIPTION: Gets a mutable reference to a validator using a verified operation capability. Includes an option to include candidate validators.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_37\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun get_validator_mut_with_verified_cap(\n    self: &mut ValidatorSet,\n    verified_cap: &ValidatorOperationCap,\n    include_candidate: bool,\n): &mut Validator {\n    self.get_active_or_pending_or_candidate_validator_mut(\n        *verified_cap.verified_operation_cap_address(),\n        include_candidate,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Archive Access\nDESCRIPTION: This JSON policy document defines the necessary AWS IAM permissions required to access Mysten's mainnet archives. It grants S3 ListBucket and GetObject permissions for the mysten-mainnet-archives bucket.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/archives.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:GetObject\",\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": [\n                \"arn:aws:s3:::mysten-mainnet-archives/*\",\n                \"arn:aws:s3:::mysten-mainnet-archives\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Display Object - Move\nDESCRIPTION: Creates and transfers a new empty Display<T> object to the sender's address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun create_and_keep<T: key>(pub: &Publisher, ctx: &mut TxContext) {\n    transfer::public_transfer(new<T>(pub, ctx), ctx.sender())\n}\n```\n\n----------------------------------------\n\nTITLE: Delisting an Item from a Kiosk using PTB\nDESCRIPTION: This JavaScript snippet demonstrates how to delist an item from sale in a Sui Kiosk using Programmable Transaction Blocks. It calls the 'delist' function from the 'kiosk' module, specifying the kiosk, capability, item ID, and item type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = new Transaction();\nlet kioskArg = tx.object('<ID>');\nlet capArg = tx.object('<ID>');\nlet itemId = tx.pure.id('<ID>');\nlet itemType = 'ITEM_TYPE';\n\ntx.moveCall({\n\ttarget: '0x2::kiosk::delist',\n\targuments: [kioskArg, capArg, itemId],\n\ttypeArguments: [itemType],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Validator Name in Move\nDESCRIPTION: Retrieves the name of the validator from its metadata. This is useful for identifying the validator in user interfaces or for logging purposes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_45\n\nLANGUAGE: Move\nCODE:\n```\npublic fun name(self: &sui_system::validator::Validator): &std::string::String {\n    &self.metadata.name\n}\n```\n\n----------------------------------------\n\nTITLE: Get Pool Quorum\nDESCRIPTION: Function to retrieve the quorum needed to pass proposals in the current epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_19\n\nLANGUAGE: move\nCODE:\n```\npublic fun quorum(self: &Pool): u64\n```\n\n----------------------------------------\n\nTITLE: Destroying Supply in Move\nDESCRIPTION: Destroys a Supply object, preventing any further minting or burning. This function is package-visible and returns the final supply value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/balance.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun destroy_supply<T>(self: Supply<T>): u64 {\n    let Supply { value } = self;\n    value\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Versioned object version in Move\nDESCRIPTION: Function to get the current version of a Versioned object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/versioned.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun version(self: &Versioned): u64 {\n    self.version\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing num_diff Macro in Move\nDESCRIPTION: A macro function that returns the absolute difference between two numeric values, regardless of their order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_diff<$T>($x: $T, $y: $T): $T {\n    let x = $x;\n    let y = $y;\n    if (x > y) x - y else y - x\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interaction Function in Sui Move reCAPTCHA Module\nDESCRIPTION: Defines a function to handle user interactions with the registry, checking verification status and time window constraints.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/recaptcha.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// Define a public function for interacting with the registry object\npublic fun interact(\n    registry: &mut Registry,  // A mutable reference to the registry object\n    clock: &Clock,  // A reference to the clock object\n    ctx: &mut TxContext  // A mutable reference to the transaction context\n) {\n    // Check if there is an existing interaction history for the sender address with the registry object\n    if (df::exists_with_type<address, u64>(&registry.id, sender(ctx))) {\n        // Borrow a mutable reference to the interaction history object\n        let timestamp_ms = df::borrow_mut<address, u64>(&mut registry.id, sender(ctx));\n        // Get the current timestamp in milliseconds from the clock object\n        let current_timestamp = sui::clock::timestamp_ms(clock);\n\n        if (current_timestamp - *timestamp_ms <= registry.window) {\n            emit(\n                Interaction{\n                    sender: sender(ctx),\n                    timestamp_ms: sui::clock::timestamp_ms(clock)\n                }\n            );\n        } else {\n            abort EVerificationExpired\n        }\n    } else {\n        abort ENotYetVerified\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Leader-Aware State Machine Replication\nDESCRIPTION: Novel leader election framework that improves consensus protocol performance by dynamically selecting leaders and avoiding designating crashed parties, resulting in significant throughput and latency improvements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/research-papers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: research\nCODE:\n```\nCarousel: Reputation-based leader-rotation solution for State Machine Replication\n```\n\n----------------------------------------\n\nTITLE: Implementing u256 to u32 conversion in Move\nDESCRIPTION: Attempts to convert a u256 value to u32, returning None if the value is too large.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u32(x: u256): Option<u32> {\n    std::macros::try_as_u32!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Create New Move Project using Sui Move\nDESCRIPTION: This command creates a new Move project with the given name in a new folder.  This sets up the basic directory structure and necessary files for a Move project.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n\"sui move new PROJECT_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Storage Fund Epoch Advancement\nDESCRIPTION: Processes storage fund inflows and outflows at epoch changes, handling storage charges, reinvestments, leftover rewards, and storage rebates. Returns balance to be burnt.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/storage_fund.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun advance_epoch(\n    self: &mut StorageFund,\n    storage_charges: Balance<SUI>,\n    storage_fund_reinvestment: Balance<SUI>,\n    leftover_staking_rewards: Balance<SUI>,\n    storage_rebate_amount: u64,\n    non_refundable_storage_fee_amount: u64,\n): Balance<SUI>\n```\n\n----------------------------------------\n\nTITLE: Defining TableVec Struct in Sui Move\nDESCRIPTION: Defines the TableVec struct which represents a scalable vector using a Table to store elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table_vec.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TableVec<phantom Element: store> has store {\n    contents: sui::table::Table<u64, Element>\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Named Addresses in Package Dependencies\nDESCRIPTION: Example of renaming named addresses when importing packages to avoid naming conflicts. This demonstrates how to use the addr_subst field in the dependencies section of Move.toml.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"P\"\n...\n[dependencies]\nP1 = { local = \"some_path_to_P1\", addr_subst = { \"P1N\" = \"N\" } }\nP2 = { local = \"some_path_to_P2\"  }\n```\n\n----------------------------------------\n\nTITLE: Unstaking DEEP Tokens from DeepBook Pool\nDESCRIPTION: Function for unstaking all DEEP tokens from a DeepBook pool. Unstaking removes both active and inactive stake, cancels any votes, forfeits maker rebates, and disables taker fee reductions for the remaining epoch. Unstaked tokens are immediately transferred back to the balance_manager.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/staking-governance.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun unstake(\n    self: &mut Pool,\n    balance_manager: &mut BalanceManager,\n    ctx: &mut TxContext\n) {\n    let pool_id = object::id(self);\n    let staking_record = begin_with_mut(&mut balance_manager.staking_records, pool_id);\n    let active_stake = staking_record.active_stake;\n    let inactive_stake = staking_record.inactive_stake;\n    staking_record.active_stake = 0;\n    staking_record.inactive_stake = 0;\n    // If the user is voting on a proposal, remove the vote\n    if (staking_record.proposal_voted_for != option::none()) {\n        let proposal_id = *option::borrow(&staking_record.proposal_voted_for);\n        let proposals = &mut self.proposals;\n        if (table::contains(proposals, proposal_id)) {\n            let proposal = table::borrow_mut(proposals, proposal_id);\n            proposal.vote_count = proposal.vote_count - active_stake;\n        };\n        option::extract(&mut staking_record.proposal_voted_for);\n    };\n    let added_coin = balance::increase_supply(&mut self.deep_supply, active_stake + inactive_stake);\n    balance::join(&mut balance_manager.balance, added_coin);\n    self.unstaked = self.unstaked - active_stake - inactive_stake;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing TotalGasBudgetWithCap Heuristic in Rust\nDESCRIPTION: This code snippet shows the location of the TotalGasBudgetWithCap heuristic in the Sui codebase, which is used for estimating transaction execution cost in the local fee market algorithm.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/local-fee-markets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`TotalGasBudgetWithCap`](https://github.com/MystenLabs/sui/blob/main/crates/sui-core/src/authority/shared_object_congestion_tracker.rs#L143)\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Sui Transaction Replay\nDESCRIPTION: This shows the expected output from the replay-transaction command, displaying transaction effects including modified objects, shared objects, gas information, and transaction dependencies. It confirms that local execution matches on-chain effects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n╭───────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Transaction Effects                                                                               │\n├───────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ Digest: 51MzJP2Uesvza8vXGpPCGbfLrY6UCfdvdoErN1z4oXPW                                              │\n│ Status: Success                                                                                   │\n│ Executed Epoch: 237                                                                               │\n│                                                                                                   │\n│ Mutated Objects:                                                                                  │\n│  ┌──                                                                                              │\n│  │ ID: 0x0000000000000000000000000000000000000000000000000000000000000006                         │\n│  │ Owner: Shared                                                                                  │\n│  │ Version: 20303014                                                                              │\n│  │ Digest: 3FyU88FpFFa2mhDFJWcabwQNdfaVaWvvnbjkfErD6AgJ                                           │\n│  └──                                                                                              │\n│                                                                                                   │\n│ Shared Objects:                                                                                   │\n│  ┌──                                                                                              │\n│  │ ID: 0x0000000000000000000000000000000000000000000000000000000000000006                         │\n│  │ Version: 20303013                                                                              │\n│  │ Digest: 7uGV3aHa9NDAWLX1UUyV1DG7wAuhfFkzSGo514wtco1C                                           │\n│  └──                                                                                              │\n│                                                                                                   │\n│ Gas Object:                                                                                       │\n│  ┌──                                                                                              │\n│  │ ID: 0x0000000000000000000000000000000000000000000000000000000000000000                         │\n│  │ Owner: Account Address ( 0x0000000000000000000000000000000000000000000000000000000000000000 )  │\n│  │ Version: 0                                                                                     │\n│  │ Digest: 11111111111111111111111111111111                                                       │\n│  └──                                                                                              │\n│                                                                                                   │\n│ Gas Cost Summary:                                                                                 │\n│    Storage Cost: 0                                                                                │\n│    Computation Cost: 0                                                                            │\n│    Storage Rebate: 0                                                                              │\n│    Non-refundable Storage Fee: 0                                                                  │\n│                                                                                                   │\n│ Transaction Dependencies:                                                                         │\n│    EvDLzYeKbrxDNHJomgrr2zwAJ7FJDtb2uNwfbonF2uGK                                                   │\n╰───────────────────────────────────────────────────────────────────────────────────────────────────╯\nExecution finished successfully. Local and on-chain effects match.\n```\n\n----------------------------------------\n\nTITLE: Address Parsing Functions\nDESCRIPTION: Functions for parsing addresses from ASCII bytes and hex characters, including validation and error handling.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/address.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_ascii_bytes(bytes: &vector<u8>): address {\n    assert!(bytes.length() == 64, EAddressParseError);\n    let mut hex_bytes = vector[];\n    let mut i = 0;\n    while (i < 64) {\n        let hi = hex_char_value(bytes[i]);\n        let lo = hex_char_value(bytes[i+1]);\n        hex_bytes.push_back((hi << 4) | lo);\n        i = i + 2;\n    };\n    from_bytes(hex_bytes)\n}\n\nfun hex_char_value(c: u8): u8 {\n    if (c >= 48 && c <= 57) c - 48 \n    else if (c >= 65 && c <= 70) c - 55 \n    else if (c >= 97 && c <= 102) c - 87 \n    else abort EAddressParseError\n}\n```\n\n----------------------------------------\n\nTITLE: Creating URL from Bytes\nDESCRIPTION: Creates a new Url instance from bytes, converting them to ASCII string. Will abort if bytes are not valid ASCII.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/url.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new_unsafe_from_bytes(bytes: vector<u8>): Url {\n    let url = bytes.to_ascii_string();\n    Url { url }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Fixed-Point to Integer (uq_to_int)\nDESCRIPTION: Converts a fixed-point number back to an integer by right-shifting the value by the specified number of fractional bits.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun uq_to_int<$T, $U>($a: $U, $fractional_bits: u8): $T {\n    ($a >> $fractional_bits) as $T\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Farm and Pet Structs using Vector in Move\nDESCRIPTION: This code defines Pet and Farm structs, demonstrating how to wrap multiple objects of the same type (Pet) within another object (Farm) using a vector. This allows for flexible storage of multiple related objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/wrapped.mdx#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\npublic struct Pet has key, store {\n    id: UID,\n    cuteness: u64,\n}\n\npublic struct Farm has key {\n    id: UID,\n    pets: vector<Pet>,\n}\n```\n\n----------------------------------------\n\nTITLE: Module Imports\nDESCRIPTION: Imports necessary modules from the Sui framework and standard library. These modules provide functionalities for addresses, ASCII strings, BCS serialization, options, strings, type names, unsigned 64-bit integers, vectors, Sui-specific modules (address, bag, balance, coin, config, deny list, dynamic field, dynamic object field, event, hex, object, sui, table, transfer, tx_context, types, URL, vec_set), and Sui system modules (staking pool, validator, validator cap).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\n<b>use</b> <a href=\"../std/address.md#std_address\">std::address</a>;\n<b>use</b> <a href=\"../std/ascii.md#std_ascii\">std::ascii</a>;\n<b>use</b> <a href=\"../std/bcs.md#std_bcs\">std::bcs</a>;\n<b>use</b> <a href=\"../std/option.md#std_option\">std::option</a>;\n<b>use</b> <a href=\"../std/string.md#std_string\">std::string</a>;\n<b>use</b> <a href=\"../std/type_name.md#std_type_name\">std::type_name</a>;\n<b>use</b> <a href=\"../std/u64.md#std_u64\">std::u64</a>;\n<b>use</b> <a href=\"../std/vector.md#std_vector\">std::vector</a>;\n<b>use</b> <a href=\"../sui/address.md#sui_address\">sui::address</a>;\n<b>use</b> <a href=\"../sui/bag.md#sui_bag\">sui::bag</a>;\n<b>use</b> <a href=\"../sui/balance.md#sui_balance\">sui::balance</a>;\n<b>use</b> <a href=\"../sui/coin.md#sui_coin\">sui::coin</a>;\n<b>use</b> <a href=\"../sui/config.md#sui_config\">sui::config</a>;\n<b>use</b> <a href=\"../sui/deny_list.md#sui_deny_list\">sui::deny_list</a>;\n<b>use</b> <a href=\"../sui/dynamic_field.md#sui_dynamic_field\">sui::dynamic_field</a>;\n<b>use</b> <a href=\"../sui/dynamic_object_field.md#sui_dynamic_object_field\">sui::dynamic_object_field</a>;\n<b>use</b> <a href=\"../sui/event.md#sui_event\">sui::event</a>;\n<b>use</b> <a href=\"../sui/hex.md#sui_hex\">sui::hex</a>;\n<b>use</b> <a href=\"../sui/object.md#sui_object\">sui::object</a>;\n<b>use</b> <a href=\"../sui/sui.md#sui_sui\">sui::sui</a>;\n<b>use</b> <a href=\"../sui/table.md#sui_table\">sui::table</a>;\n<b>use</b> <a href=\"../sui/transfer.md#sui_transfer\">sui::transfer</a>;\n<b>use</b> <a href=\"../sui/tx_context.md#sui_tx_context\">sui::tx_context</a>;\n<b>use</b> <a href=\"../sui/types.md#sui_types\">sui::types</a>;\n<b>use</b> <a href=\"../sui/url.md#sui_url\">sui::url</a>;\n<b>use</b> <a href=\"../sui/vec_set.md#sui_vec_set\">sui::vec_set</a>;\n<b>use</b> <a href=\"../sui_system/staking_pool.md#sui_system_staking_pool\">sui_system::staking_pool</a>;\n<b>use</b> <a href=\"../sui_system/validator.md#sui_system_validator\">sui_system::validator</a>;\n<b>use</b> <a href=\"../sui_system/validator_cap.md#sui_system_validator_cap\">sui_system::validator_cap</a>;\n```\n\n----------------------------------------\n\nTITLE: Running Extension Tests in Shell\nDESCRIPTION: Commands to execute the extension's pretest and test scripts defined in package.json. These commands compile TypeScript to JavaScript and run the test suite.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-analyzer/editors/code/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run pretest\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Executing Sui Sandbox Publish and Test Commands\nDESCRIPTION: Basic shell commands for publishing a package to the Sui sandbox environment and running tests. These commands are commonly used in Sui blockchain development workflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/print_values/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox publish\ntest\n```\n\n----------------------------------------\n\nTITLE: Converting UQ64_64 to Raw u128 in Move\nDESCRIPTION: This function converts a UQ64_64 fixed-point number to its raw u128 representation. It can be used in conjunction with from_raw for performing uncommon operations on raw values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_raw(a: std::uq64_64::UQ64_64): u128 {\n    a.0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining maximum value for u8 type\nDESCRIPTION: Returns the maximum possible value for a u8 integer (255 or 0xFF in hexadecimal).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun max_value(): u8 {\n    0xFF\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UQ64_64 Values from Quotient\nDESCRIPTION: Function to create a fixed-point value from a quotient specified by its numerator and denominator. Includes safety checks for values that are too small, too large, or involve division by zero.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_quotient(numerator: u128, denominator: u128): UQ64_64 {\n    UQ64_64(\n        std::macros::uq_from_quotient!<u128, u256>(\n            numerator,\n            denominator,\n            std::u128::max_value!(),\n            TOTAL_BITS,\n            FRACTIONAL_BITS,\n            abort EDenominator,\n            abort EQuotientTooSmall,\n            abort EQuotientTooLarge,\n        ),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stake Amount in Sui Validator Module - Move\nDESCRIPTION: This function returns the current stake amount of a validator by retrieving the SUI balance from the validator's staking pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_61\n\nLANGUAGE: Move\nCODE:\n```\npublic fun stake_amount(self: &Validator): u64 {\n    self.staking_pool.sui_balance()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CritbitTree Struct in Move\nDESCRIPTION: Defines the main CritbitTree struct that maintains the tree structure and node collections\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct CritbitTree<V: store> has store {\n    root: u64,\n    internal_nodes: sui::table::Table<u64, InternalNode>,\n    leaves: sui::table::Table<u64, Leaf<V>>,\n    min_leaf: u64,\n    max_leaf: u64,\n    next_internal_node_index: u64,\n    next_leaf_index: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Vector is Empty in Move\nDESCRIPTION: This function returns true if the given vector has no elements, and false otherwise. It takes an immutable reference to the vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_empty<Element>(v: &vector<Element>): bool {\n    v.length() == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Equality Operations with User-Defined Types in Move\nDESCRIPTION: Demonstrates how equality operations work with user-defined struct types in Move. Any user-defined type can be compared for equality if it has the appropriate abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/equality.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::example {\n    public struct S has copy, drop { f: u64, s: vector<u8> }\n\n    fun always_true(): bool {\n        let s = S { f: 0, s: b\"\" };\n        s == s\n    }\n\n    fun always_false(): bool {\n        let s = S { f: 0, s: b\"\" };\n        s != s\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA-3 256 Hashing in Move\nDESCRIPTION: Native implementation of the SHA-3 256 hashing algorithm that takes a vector of bytes as input and returns a 256-bit (32-byte) hash digest as a vector of bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/hash.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic native fun sha3_256(data: vector<u8>): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator with Transaction Context in Move\nDESCRIPTION: Gets a mutable reference to a validator using the transaction context. Only searches active and pending validators.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_38\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun get_validator_mut_with_ctx(\n    self: &mut ValidatorSet,\n    ctx: &TxContext,\n): &mut Validator {\n    let validator_address = ctx.sender();\n    self.get_active_or_pending_or_candidate_validator_mut(validator_address, false)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Addresses from Denylist Using Sui CLI in Bash\nDESCRIPTION: Executes a command to remove addresses from a denylist with Sui CLI. Parameters such as Policy, PolicyCap, and a vector of addresses are required to specify which addresses should no longer be denied access.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/regulated-token/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsui client call --json \\\n    --package $PKG --module denylist_rule --function remove_records \\\n    --gas-budget 100000000 \\\n    --args $POLICY $POLICY_CAP \"[<0xaddress>]\"\n```\n\n----------------------------------------\n\nTITLE: Validate a Sui Transaction with CLI\nDESCRIPTION: This command checks the execution and event details of a specified transaction via the Sui CLI light client. Requires a valid transaction ID in base58 format. Outputs transaction and event details in JSON format if valid, or an error if not.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-light-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sui-light-client --config mainnet.yaml transaction -t 8RiKBwuAbtu8zNCtz8SrcfHyEUzto6zi6cMVA9t4WhWk\n```\n\n----------------------------------------\n\nTITLE: Implementing Getters and Setters in Rust\nDESCRIPTION: Demonstrates the recommended patterns for implementing getters and setters in Rust structs, including simple getters, setters, and complex getters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/coding_guidelines.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nstruct Foo {\n    size: usize,\n    key_to_value: HashMap<u32, u32>\n}\n\nimpl Foo {\n    /// Simple getter follows xxx pattern\n    fn size(&self) -> usize {\n        self.size\n    }\n\n    /// Setter follows set_xxx pattern\n    fn set_foo(&mut self, size: usize){\n        self.size = size;\n    }\n\n    /// Complex getter follows get_xxx pattern\n    fn get_value(&self, key: u32) -> Option<&u32> {\n        self.key_to_value.get(&key)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Is Primitive Type Check Function in Move\nDESCRIPTION: Function that checks if a TypeName represents a primitive type (u8, u16, u32, u64, u128, u256, bool, address, vector).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/type_name.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic fun is_primitive(self: &TypeName): bool {\n    let bytes = self.name.as_bytes();\n    bytes == &b\"bool\" ||\n        bytes == &b\"u8\" ||\n        bytes == &b\"u16\" ||\n        bytes == &b\"u32\" ||\n        bytes == &b\"u64\" ||\n        bytes == &b\"u128\" ||\n        bytes == &b\"u256\" ||\n        bytes == &b\"address\" ||\n        (\n            bytes.length() >= 6 &&\n            bytes[0] == ASCII_V &&\n            bytes[1] == ASCII_E &&\n            bytes[2] == ASCII_C &&\n            bytes[3] == ASCII_T &&\n            bytes[4] == ASCII_O &&\n            bytes[5] == ASCII_R,\n        )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Singleton AuthenticatorState UID in Move\nDESCRIPTION: Creates the UID for the singleton AuthenticatorState object. This should only be called once from the authenticator_state module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun authenticator_state(): UID {\n    UID {\n        id: ID { bytes: SUI_AUTHENTICATOR_STATE_ID },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GetLevel2TicksFromMid Function Definition\nDESCRIPTION: Function signature for retrieving level 2 order book ticks from mid-price.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nasync getLevel2TicksFromMid(poolKey: string, ticks: number) {}\n```\n\n----------------------------------------\n\nTITLE: Configuration Constants for UQ64_64\nDESCRIPTION: Constants defining the total number of bits and the number of fractional bits in the UQ64_64 fixed-point number. These are used in macro invocations throughout the module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nconst TOTAL_BITS: u8 = 128;\nconst FRACTIONAL_BITS: u8 = 64;\n```\n\n----------------------------------------\n\nTITLE: Subtracting BLS12381 Scalars\nDESCRIPTION: This function subtracts one BLS12381 scalar from another, returning a new scalar that is the difference of the input scalars.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_sub\">scalar_sub</a>(e1: &<a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;, e2: &<a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;): <a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_sub\">scalar_sub</a>(e1: &Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt;, e2: &Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt;): Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt; {\n    <a href=\"../sui/group_ops.md#sui_group_ops_sub\">group_ops::sub</a>(<a href=\"../sui/bls12381.md#sui_bls12381_SCALAR_TYPE\">SCALAR_TYPE</a>, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: String Append Function Implementation\nDESCRIPTION: Appends one string to another by combining their underlying byte vectors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun append(s: &mut String, r: String) {\n    s.bytes.append(r.bytes)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prettier with Explicit Plugin Path\nDESCRIPTION: Example of using Prettier with an explicit path to the Move plugin for checking and writing formatted Move code.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nprettier --plugin /path/to/local/npm/node_modules/@mysten/prettier-plugin-move/out/index.js -c sources/example.move # to check\nprettier --plugin /path/to/local/npm/node_modules/@mysten/prettier-plugin-move/out/index.js -w sources/example.move # to write\n```\n\n----------------------------------------\n\nTITLE: Defining Increment Function in Move\nDESCRIPTION: This snippet defines a basic increment function for a Counter struct, which increases the counter's value by one. It demonstrates the underlying logic of the increment operation without any side effects like event emissions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/upgrade.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic fun increment(c: &mut Counter) {\n    c.value = c.value + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JWK Struct in Move\nDESCRIPTION: Defines the structure for JSON Web Keys (JWK), matching the JWK struct in fastcrypto-zkp, with fields for key type, exponent, modulus, and algorithm.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct JWK has copy, drop, store {\n    kty: std::string::String,\n    e: std::string::String,\n    n: std::string::String,\n    alg: std::string::String\n}\n```\n\n----------------------------------------\n\nTITLE: Dividing UQ32_32 Fixed-Point Numbers in Move\nDESCRIPTION: Divides two UQ32_32 fixed-point numbers, truncating any fractional part of the quotient. Aborts if the divisor is zero or if the quotient overflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun div(a: UQ32_32, b: UQ32_32): UQ32_32 {\n    UQ32_32(int_div(a.0, b))\n}\n```\n\n----------------------------------------\n\nTITLE: Deposit Quote Asset Function\nDESCRIPTION: Function for depositing quote asset tokens into a trading pool. Currently aborts with code 1337 indicating unimplemented functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deposit_quote<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _coin: Coin<QuoteAsset>,\n    _account_cap: &AccountCap\n) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Accessor Function for Emergency Operation Message Type\nDESCRIPTION: Returns the constant value for emergency operation message type. This function provides a public interface to access the EMERGENCY_OP constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message_types.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun emergency_op(): u8 { EMERGENCY_OP }\n```\n\n----------------------------------------\n\nTITLE: Defining UQ64_64 Configuration Constants\nDESCRIPTION: Defines the total number of bits and fractional bits in the fixed-point number, used in macro invocations throughout the module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nconst TOTAL_BITS: u8 = 128;\n\nconst FRACTIONAL_BITS: u8 = 64;\n```\n\n----------------------------------------\n\nTITLE: Subtracting Fixed-point Numbers in Move\nDESCRIPTION: Subtracts two fixed-point numbers (a - b). Aborts if a < b to prevent underflow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sub(a: UQ64_64, b: UQ64_64): UQ64_64 {\n    UQ64_64(std::macros::uq_sub!(a.0, b.0, abort EOverflow))\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Service Configuration Limits with GraphQL\nDESCRIPTION: This snippet demonstrates how to query service configuration limits using GraphQL. It retrieves various parameters like max query depth, nodes, and payload size, which are crucial for understanding and managing query complexity in Sui. Users must have access to a GraphQL client that interacts with the Sui service to execute these queries.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/graphql-rpc.mdx#2025-04-22_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  serviceConfig {\n    maxQueryDepth\n    maxQueryNodes\n    maxOutputNodes\n    maxDbQueryCost\n    defaultPageSize\n    maxPageSize\n    requestTimeoutMs\n    maxQueryPayloadSize\n    maxTypeArgumentDepth\n    maxTypeArgumentWidth\n    maxTypeNodes\n    maxMoveValueDepth\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UQ32_32 from Raw Value in Move\nDESCRIPTION: The from_raw function creates a UQ32_32 fixed-point number from a raw u64 value. It takes a u64 as input and returns a new UQ32_32 instance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_raw(raw_value: u64): std::uq32_32::UQ32_32 {\n    UQ32_32(raw_value)\n}\n```\n\n----------------------------------------\n\nTITLE: Error Constants for UQ64_64 Operations\nDESCRIPTION: Error constants used in the UQ64_64 module for handling error scenarios like division by zero, quotient size limitations, and arithmetic overflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\n#[error]\nconst EDenominator: vector<u8> = b\"Quotient specified with a zero denominator\";\n\n#[error]\nconst EQuotientTooSmall: vector<u8> = b\"Quotient specified is too small, and is outside of the supported range\";\n\n#[error]\nconst EQuotientTooLarge: vector<u8> = b\"Quotient specified is too large, and is outside of the supported range\";\n\n#[error]\nconst EOverflow: vector<u8> = b\"Overflow from an arithmetic operation\";\n\n#[error]\nconst EDivisionByZero: vector<u8> = b\"Division by zero\";\n```\n\n----------------------------------------\n\nTITLE: Converting TypeName to String in Rust\nDESCRIPTION: The into_string function converts a TypeName object into its inner String representation. This function simply returns the name field of the TypeName struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/type_name.md#2025-04-22_snippet_7\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun into_string(self: TypeName): String {\n    self.name\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Network Address for Candidate Validators in Move\nDESCRIPTION: This function updates the network address of a candidate validator. It ensures that the validator is in a preactive state and that the address meets length requirements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_79\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun update_candidate_network_address(\n    self: &mut Validator,\n    net_address: vector<u8>,\n) {\n    assert!(self.is_preactive(), ENotValidatorCandidate);\n    assert!(\n        net_address.length() <= MAX_VALIDATOR_METADATA_LENGTH,\n        EValidatorMetadataExceedingLengthLimit,\n    );\n    let net_address = net_address.to_ascii_string().to_string();\n    self.metadata.net_address = net_address;\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessor Function for Bridge Limit Update Message Type\nDESCRIPTION: Returns the constant value for bridge limit update message type. This function provides a public interface to access the UPDATE_BRIDGE_LIMIT constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message_types.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun update_bridge_limit(): u8 { UPDATE_BRIDGE_LIMIT }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trades Data in DeepBook API\nDESCRIPTION: Describes the response format for the trades endpoint, which returns recent trade information for a specific pool. The response includes details such as trade ID, volume, price, and timestamp.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"trade_id\": \"string\",\n        \"base_volume\": integer,\n        \"quote_volume\": integer,\n        \"price\": integer,\n        \"type\": \"string\",\n        \"timestamp\": integer,\n        \"maker_order_id\": \"string\",\n        \"taker_order_id\": \"string\",\n        \"maker_balance_manager_id\": \"string\",\n        \"taker_balance_manager_id\": \"string\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Borrowing Mutable Reference from Option in Move\nDESCRIPTION: Returns a mutable reference to the value inside an Option. Aborts if the Option does not hold a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow_mut<Element>(t: &mut Option<Element>): &mut Element {\n    assert!(t.is_some(), EOPTION_NOT_SET);\n    &mut t.vec[0]\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration API - Read Config\nDESCRIPTION: API function for reading rule configurations. Only accessible by rules themselves.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/rules.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\n// module: sui::token\npublic fun rule_config<T, Rule: drop, Config: store>(\n    _rule: Rule, policy: &TokenPolicy<T>\n): &Config;\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring from ASCII String in Move\nDESCRIPTION: Creates a new string containing the characters from index i to j of the original string. Validates that the indices are valid before extracting.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun substring(string: &String, i: u64, j: u64): String {\n    assert!(i <= j && j <= string.length(), EInvalidIndex);\n    let mut bytes = vector[];\n    i.range_do!(j, |i| bytes.push_back(string.bytes[i]));\n    String { bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Abort Usage in Move\nDESCRIPTION: Demonstrates the basic syntax of the abort expression in Move, which takes a u64 abort code as an argument.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abort-and-assert.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nabort 42\n```\n\n----------------------------------------\n\nTITLE: Internal Poseidon BN254 Hash Implementation\nDESCRIPTION: Native function declaration for internal implementation of Poseidon hash for BN254 field elements in little-endian representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/poseidon.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\nnative fun poseidon_bn254_internal(data: &vector<vector<u8>>): vector<u8>;\n```\n\n----------------------------------------\n\nTITLE: Building Multisig Toolkit Docker Image - Bash\nDESCRIPTION: This snippet contains the command to build the Multisig Toolkit Docker image by executing the 'build.sh' script located in the 'docker/multisig-toolkit/' directory. To run this command, the Docker environment must be properly set up on the machine, and the required scripts must be available in the specified path.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/multisig-toolkit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./docker/multisig-toolkit/build.sh\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value Between Two u32 Numbers\nDESCRIPTION: Returns the larger of two u32 values by using the std::macros::num_max macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max(x: u32, y: u32): u32 {\n    std::macros::num_max!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bridge Node\nDESCRIPTION: Command to start the Bridge Node with specified log levels and configuration path.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ RUST_LOG=info,sui_bridge=debug sui-bridge --config-path {BRIDGE-NODE-CONFIG-PATH}\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Locking Mutation in TypeScript\nDESCRIPTION: Creates a custom hook for locking owned objects on the Sui blockchain. It uses @tanstack/react-query for mutation management and executes the lock function from the smart contract.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CONSTANTS } from \"@/constants\";\nimport { useTransactionExecution } from \"@/hooks/useTransactionExecution\";\nimport { useCurrentAccount } from \"@mysten/dapp-kit\";\nimport { SuiObjectData } from \"@mysten/sui/client\";\nimport { Transaction } from \"@mysten/sui/transactions\";\nimport { useMutation } from \"@tanstack/react-query\";\n/**\n * Builds and executes the PTB to lock an object.\n */\nexport function useLockObjectMutation() {\n  const account = useCurrentAccount();\n  const executeTransaction = useTransactionExecution();\n\n  return useMutation({\n    mutationFn: async ({ object }: { object: SuiObjectData }) => {\n      if (!account?.address)\n        throw new Error(\"You need to connect your wallet!\");\n      const txb = new Transaction();\n\n      const [locked, key] = txb.moveCall({\n        target: `${CONSTANTS.escrowContract.packageId}::lock::lock`,\n        arguments: [txb.object(object.objectId)],\n        typeArguments: [object.type!],\n      });\n\n      txb.transferObjects([locked, key], txb.pure.address(account.address));\n\n      return executeTransaction(txb);\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator Version in Move\nDESCRIPTION: The version function simply retrieves the current version of the ValidatorWrapper's inner Validator. It returns a u64 indicating the version number.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_wrapper.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nfun version(self: &sui_system::validator_wrapper::ValidatorWrapper): u64\n{\n    self.inner.version()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Account Order Details\nDESCRIPTION: Function to retrieve all orders for a balance manager in the pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_15\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_account_order_details(self: &Pool, balance_manager: UID): vector<Order>\n```\n\n----------------------------------------\n\nTITLE: Struct Definition: VotingPowerInfo\nDESCRIPTION: Defines a struct `VotingPowerInfo` to store validator index and voting power. This struct is marked as deprecated and advises the use of `VotingPowerInfoV2` instead. It has a `drop` ability, meaning it can be implicitly discarded.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>struct</b> <a href=\"../sui_system/voting_power.md#sui_system_voting_power_VotingPowerInfo\">VotingPowerInfo</a> <b>has</b> drop\n```\n\n----------------------------------------\n\nTITLE: Historical Volume for Specific Pools Example Request\nDESCRIPTION: An example HTTP request to the /historical_volume endpoint that retrieves historical trading volume data for DEEP_SUI and SUI_USDC pools within a specific time range, with volume expressed in the base asset.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n/historical_volume/DEEP_SUI,SUI_USDC?start_time=1731260703&end_time=1731692703&volume_in_base=true\n```\n\n----------------------------------------\n\nTITLE: Serialize Transfer Data (Sui CLI)\nDESCRIPTION: This command serializes the transaction data for a SUI transfer using the Sui CLI. The `--serialize-unsigned-transaction` flag returns the serialized transaction data in Base64, which can be signed offline. The serialized data is returned as `<TX_BYTES>`.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/transaction-auth/offline-signing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sui client transfer-sui --to <SUI-ADDRESS> --sui-coin-object-id <COIN-OBJECT-ID> --gas-budget <GAS-AMOUNT> --serialize-unsigned-transaction\n```\n\n----------------------------------------\n\nTITLE: Initializing a BitVector in Move\nDESCRIPTION: Creates a new BitVector with the specified length. The function asserts that the length is greater than 0 and less than MAX_SIZE, then initializes all bits to false (0).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/bit_vector.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new(length: u64): BitVector {\n    assert!(length > 0, ELENGTH);\n    assert!(length < MAX_SIZE, ELENGTH);\n    let mut counter = 0;\n    let mut bit_field = vector::empty();\n    while (counter < length) {\n        bit_field.push_back(false);\n        counter = counter + 1;\n    };\n    BitVector {\n        length,\n        bit_field,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Token Distribution Structs in Move\nDESCRIPTION: Defines structures for token distribution schedules and individual token allocations at genesis.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/genesis.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TokenDistributionSchedule {\n    stake_subsidy_fund_mist: u64,\n    allocations: vector<TokenAllocation>\n}\n\npublic struct TokenAllocation {\n    recipient_address: address,\n    amount_mist: u64,\n    staked_with_validator: std::option::Option<address>\n}\n```\n\n----------------------------------------\n\nTITLE: Building Sui Node from Source\nDESCRIPTION: Commands to clone the Sui repository, checkout a specific version, and build the sui-node binary from source.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/MystenLabs/sui.git && cd sui\ngit checkout [SHA|BRANCH|TAG]\ncargo build --release --bin sui-node\n```\n\n----------------------------------------\n\nTITLE: Creating a New Empty Bag in Move\nDESCRIPTION: This function creates and returns a new empty Bag instance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bag.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new(ctx: &mut TxContext): Bag {\n    Bag {\n        id: object::new(ctx),\n        size: 0,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Cargo Nextest\nDESCRIPTION: This snippet executes the tests using `cargo nextest run`. This command is used to run the end-to-end tests after the environment has been properly set up.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-e2e-tests/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo nextest run\n```\n\n----------------------------------------\n\nTITLE: Querying Dynamic Fields in Sui\nDESCRIPTION: Demonstrates how to retrieve information about dynamic fields of an object using the sui client dynamic-field command. The command returns details including the field name, type, and associated object information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsui client dynamic-field 0x5\n```\n\n----------------------------------------\n\nTITLE: Example Rosetta Operations for Sui TransferSUI Transaction\nDESCRIPTION: JSON representation of how Sui's TransferSUI transaction is converted to Rosetta operations, showing sender operations with negative amounts and recipient operations with positive amounts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rosetta/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operation_identifier\": {\n        \"index\": 0\n    },\n    \"type\": \"TransferSUI\",\n    \"account\": {\n        \"address\": \"0xc4173a804406a365e69dfb297d4eaaf002546ebd\"\n    },\n    \"amount\": {\n        \"value\": \"-100000\",\n        \"currency\": {\n            \"symbol\": \"SUI\",\n            \"decimals\": 9\n        }\n    },\n    \"coin_change\": {\n        \"coin_identifier\": {\n            \"identifier\": \"0x0dce9190d54cde842d39537bf94efe128181b8a6:5549\"\n        },\n        \"coin_action\": \"coin_spent\"\n    }\n},\n{\n    \"operation_identifier\": {\n        \"index\": 1\n    },\n    \"type\": \"TransferSUI\",\n    \"account\": {\n        \"address\": \"0x96bc0b37b67103651d1f98c67b34df9558ea527a\"\n    },\n    \"amount\": {\n        \"value\": \"100000\",\n        \"currency\": {\n            \"symbol\": \"SUI\",\n            \"decimals\": 9\n        }\n    }\n},\n{\n    \"operation_identifier\": {\n        \"index\": 2\n    },\n    \"type\": \"GasBudget\",\n    \"account\": {\n        \"address\": \"0xc4173a804406a365e69dfb297d4eaaf002546ebd\"\n    },\n    \"coin_change\": {\n        \"coin_identifier\": {\n            \"identifier\": \"0x0dce9190d54cde842d39537bf94efe128181b8a6:5549\"\n        },\n        \"coin_action\": \"coin_spent\"\n    },\n    \"metadata\": {\n        \"budget\": 1000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AllOrdersCanceledComponent Structure Definition in Move\nDESCRIPTION: Helper struct for efficiently representing a canceled order's data in batch cancellations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic struct AllOrdersCanceledComponent<phantom BaseAsset, phantom QuoteAsset> has copy, drop, store\n```\n\n----------------------------------------\n\nTITLE: Updating Core Types in Sui and Checking Git Status\nDESCRIPTION: This example shows how to modify the SuiError type by changing 'CertificateAuthorityReuse' to 'CertificateAuthorityDuplicate' using the ruplacer tool, then checking out the current git status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-core/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhuitseeker@Garillots-MBP.localdomain➜~/tmp/sui(main)» git checkout main\nAlready on 'main'\nYour branch is up to date with 'origin/main'.\nhuitseeker@Garillots-MBP.localdomain➜~/tmp/sui(main)» ruplacer --subvert 'CertificateAuthorityReuse' 'CertificateAuthorityDuplicate' --go\n./sui_types/src/error.rs:103 - CertificateAuthorityReuse,\n./sui_types/src/error.rs:103 + CertificateAuthorityDuplicate,\n\n./sui_types/src/messages.rs:610 - SuiError::CertificateAuthorityReuse\n./sui_types/src/messages.rs:610 + SuiError::CertificateAuthorityDuplicate\n./sui_types/src/messages.rs:638 - SuiError::CertificateAuthorityReuse\n./sui_types/src/messages.rs:638 + SuiError::CertificateAuthorityDuplicate\n\n./sui_core/tests/staged/sui.yaml:390 - CertificateAuthorityReuse: UNIT\n./sui_core/tests/staged/sui.yaml:390 + CertificateAuthorityDuplicate: UNIT\n\nPerformed 4 replacements on 196 matching files\n```\n\n----------------------------------------\n\nTITLE: Converting u128 to u16 with overflow check\nDESCRIPTION: Tries to convert a u128 to a u16, returning None if the value exceeds u16's range to prevent overflow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u16(x: u128): Option<u16> {\n    std::macros::try_as_u16!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event-Driven Indexer in TypeScript\nDESCRIPTION: Main indexer setup function for tracking escrow events. It initializes database connections and sets up event listeners to monitor and process escrow-related events from the blockchain.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { EscrowHandler } from './indexer/escrow-handler';\nimport { EventIndexer } from './indexer/event-indexer';\nimport { PrismaClient } from '@prisma/client';\nimport * as dotenv from 'dotenv';\nimport { SuiClient } from '@mysten/sui.js/client';\n\ndotenv.config();\n\nexport default async function setupListeners() {\n    // Mist: Cursor that appears in the Sui RPC filter as \"cursor\" parameter. It'll be populated \n    // by the EventIndexer when it's created\n    // When the event indexer is created, it'll set the filter as filter\n    let filter = {\n        MoveEventType: `${process.env.PACKAGE_ID}::escrow::EscrowCreated`,\n    };\n\n    const db = new PrismaClient();\n    const suiClient = new SuiClient({ url: process.env.SUI_RPC_URL! });\n    \n    const handler = new EscrowHandler(db, suiClient);\n    // The handler needs to have a way to create and connect to database\n    \n    const indexer = new EventIndexer(handler, suiClient, filter, {\n        // Get the cursor from the database if it exists,\n        // You don't need to do this if you want to just listen for new events\n        // Recommended config for production:\n        // pollIntervalMs: 30000, // 30 seconds\n        // batchSize: 50,\n        pollIntervalMs: 3000, // 3 seconds, this can be very small for demo, larger for production\n        batchSize: 5, // Small batch size for demo, larger for production\n    });\n    \n    // Start the indexer\n    await indexer.startIndexing();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Orders from OrderPage in DeepBook CLOB (Move)\nDESCRIPTION: This function retrieves the vector of orders from an OrderPage object in the DeepBook CLOB implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/order_query.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun orders(page: &OrderPage): &vector<Order> {\n    &page.orders\n}\n```\n\n----------------------------------------\n\nTITLE: Module with Named Addresses in Move\nDESCRIPTION: Demonstrates using named addresses in a module declaration instead of numerical values. This shows best practices for module definition, struct creation using named addresses, and friend module declarations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/modules.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule test_addr::test {\n    public struct Example has copy, drop { a: address }\n\n    friend test_addr::another_test;\n\n    public fun print() {\n        let example = Example { a: @test_addr };\n        debug::print(&example)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Validator Metadata in Move\nDESCRIPTION: Creates a new ValidatorMetadata struct with validator information including addresses, public keys, network details, and metadata. The function initializes all next_epoch fields as None and includes custom extra fields through a Bag structure.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_26\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun new_metadata(\n    sui_address: address,\n    protocol_pubkey_bytes: vector<u8>,\n    network_pubkey_bytes: vector<u8>,\n    worker_pubkey_bytes: vector<u8>,\n    proof_of_possession: vector<u8>,\n    name: String,\n    description: String,\n    image_url: Url,\n    project_url: Url,\n    net_address: String,\n    p2p_address: String,\n    primary_address: String,\n    worker_address: String,\n    extra_fields: Bag,\n): ValidatorMetadata {\n    ValidatorMetadata {\n        sui_address,\n        protocol_pubkey_bytes,\n        network_pubkey_bytes,\n        worker_pubkey_bytes,\n        proof_of_possession,\n        name,\n        description,\n        image_url,\n        project_url,\n        net_address,\n        p2p_address,\n        primary_address,\n        worker_address,\n        next_epoch_protocol_pubkey_bytes: option::none(),\n        next_epoch_network_pubkey_bytes: option::none(),\n        next_epoch_worker_pubkey_bytes: option::none(),\n        next_epoch_proof_of_possession: option::none(),\n        next_epoch_net_address: option::none(),\n        next_epoch_p2p_address: option::none(),\n        next_epoch_primary_address: option::none(),\n        next_epoch_worker_address: option::none(),\n        extra_fields,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prettier with Move Plugin (Bash)\nDESCRIPTION: This command runs Prettier with the Move plugin to format a specified Move file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-analyzer/prettier-plugin/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/prettier --plugin=prettier-plugin-move \"$PATH_TO_MOVE_FILE\"\n```\n\n----------------------------------------\n\nTITLE: Defining VecSet Struct in Move\nDESCRIPTION: A set data structure backed by a vector that prevents duplicates. All operations are O(N) complexity. Intended for simple set operations where insertion order matters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_set.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct VecSet<K: copy, drop> has copy, drop, store {\n    contents: vector<K>\n}\n```\n\n----------------------------------------\n\nTITLE: Valid and Invalid Uses of Phantom Type Parameters in Move\nDESCRIPTION: These examples demonstrate correct and incorrect uses of phantom type parameters in struct definitions. Phantom type parameters must only appear in phantom positions or not be used at all within the struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic struct S1<phantom T1, T2> { f: u64 }\n//               ^^^^^^^ valid, T1 does not appear inside the struct definition\n\npublic struct S2<phantom T1, T2> { f: S1<T1, T2> }\n//               ^^^^^^^ valid, T1 appears in phantom position\n\npublic struct S1<phantom T> { f: T }\n//               ^^^^^^^ ERROR!  ^ Not a phantom position\n\npublic struct S2<T> { f: T }\npublic struct S3<phantom T> { f: S2<T> }\n//               ^^^^^^^ ERROR!     ^ Not a phantom position\n```\n\n----------------------------------------\n\nTITLE: OrderPlaced Event Struct\nDESCRIPTION: Definition of the OrderPlaced event struct which is emitted when a maker order is injected into the order book. This event provides information about the placed order for external observers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\n/// Emitted when an order is placed in the book\nstruct OrderPlaced has copy, drop {\n    /// The order ID\n    order_id: ID,\n    /// The client order ID\n    client_order_id: u64,\n    /// Is it a bid (buy) or ask (sell) order\n    is_bid: bool,\n    /// Owner of the order\n    owner: address,\n    /// original quantity with external precision\n    original_quantity: u64,\n    /// Base asset ID\n    base_asset_id: ID,\n    /// Quote asset ID\n    quote_asset_id: ID,\n    /// price with external precision\n    price: u64,\n    /// expire timestamp\n    expire_timestamp: u64,\n    /// timestamp of placement\n    timestamp: u64,\n    /// Pool ID\n    pool_id: ID,\n}\n```\n\n----------------------------------------\n\nTITLE: Converting ASCII to UTF-8 String\nDESCRIPTION: Function that converts an ASCII string to a UTF-8 string by wrapping the bytes in a String struct.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_ascii(s: ascii::String): String {\n    String { bytes: s.into_bytes() }\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Hash to Group Operation (Move)\nDESCRIPTION: This native function, `internal_hash_to`, hashes a message `m` to a group element. It takes the group type as a `u8` and the message to hash as a byte vector. It returns a new byte vector representing the group element resulting from the hashing operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/group_ops.md#sui_group_ops_internal_hash_to\">internal_hash_to</a>(type_: u8, m: &vector&lt;u8&gt;): vector&lt;u8&gt;;\n```\n\n----------------------------------------\n\nTITLE: Adding to Deny List in Sui Coin\nDESCRIPTION: This function adds a specified address to the deny list for a particular coin type, preventing future transactions involving that address. The effects are effective starting the next epoch regarding object reception.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deny_list_v2_add<T>(deny_list: &mut sui::deny_list::DenyList, _deny_cap: &mut sui::coin::DenyCapV2<T>, addr: address, ctx: &mut sui::tx_context::TxContext) {\n    let ty = type_name::get_with_original_ids<T>().into_string().into_bytes();\n    deny_list.v2_add(DENY_LIST_COIN_INDEX, ty, addr, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Candidate Protocol Public Key in Move\nDESCRIPTION: This function updates the protocol public key of a candidate validator. It checks if the validator is in pre-active state, updates the key and proof of possession, and validates the metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_87\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_candidate_protocol_pubkey(\n    self: &mut Validator,\n    protocol_pubkey: vector<u8>,\n    proof_of_possession: vector<u8>,\n) {\n    assert!(self.is_preactive(), ENotValidatorCandidate);\n    self.metadata.protocol_pubkey_bytes = protocol_pubkey;\n    self.metadata.proof_of_possession = proof_of_possession;\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Gas Balance for Sender in Sui CLI\nDESCRIPTION: This command checks the gas balance for the sender's address using the Sui CLI. It displays the gas coin IDs, MIST balances, and SUI balances for all gas objects owned by the address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client gas\n```\n\n----------------------------------------\n\nTITLE: Placing and Listing Item in Kiosk in Move\nDESCRIPTION: Combines placing and listing an item in the Kiosk in a single operation. Simplifies the workflow for adding and listing items.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\npublic fun place_and_list<T: key + store>(\n    self: &mut Kiosk,\n    cap: &KioskOwnerCap,\n    item: T,\n    price: u64,\n) {\n    let id = object::id(&item);\n    self.place(cap, item);\n    self.list<T>(cap, id, price)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sui indexer as a writer with TiDB\nDESCRIPTION: This command runs the Sui indexer as a writer, pulling data from a fullnode and writing it to a TiDB database. It enables the `mysql-feature`, disables default features, and configures the database URL, RPC client URL, and enables the fullnode sync worker. The `--reset-db` flag resets the database before starting.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n# Change the RPC_CLIENT_URL to http://0.0.0.0:9000 to run indexer against local validator & fullnode\ncargo run --bin sui-indexer --features mysql-feature --no-default-features -- --db-url \"<DATABASE_URL>\" --rpc-client-url \"https://fullnode.devnet.sui.io:443\" --fullnode-sync-worker --reset-db\n```\n\n----------------------------------------\n\nTITLE: If Expression with Assignment in Move\nDESCRIPTION: Using if expression to assign a value, demonstrating how conditionals can produce values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/conditionals.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nlet z = if (x < 100) x else 100;\n```\n\n----------------------------------------\n\nTITLE: Internal Multiplication of Group Elements (Move)\nDESCRIPTION: This native function `internal_mul` performs the multiplication of two group elements, both represented as byte vectors. It requires the group type (`u8`) and two byte vectors, `e1` and `e2`. The function returns a new byte vector that holds the product of the two input elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/group_ops.md#sui_group_ops_internal_mul\">internal_mul</a>(type_: u8, e1: &vector&lt;u8&gt;, e2: &vector&lt;u8&gt;): vector&lt;u8&gt;;\n```\n\n----------------------------------------\n\nTITLE: Updating Move.toml for Package Upgrade in Sui\nDESCRIPTION: This TOML snippet shows how to update the Move.toml manifest file before upgrading a Sui package. It includes setting the package name, version, published-at address, and resetting the package address to 0x0 for the upgrade process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/upgrade.mdx#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"sui_package\"\nversion = \"0.0.1\"\npublished-at = \"<ORIGINAL-PACKAGE-ID>\"\n\n[addresses]\nsui_package = \"0x0\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Number Peeling Macro in Move\nDESCRIPTION: A generic macro function for peeling numeric values from BCS-serialized bytes. Handles different integer sizes by taking length and bits parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\nmacro fun peel_num<$I, $T>($bcs: &mut BCS, $len: u64, $bits: $I): $T {\n    let bcs = $bcs;\n    assert!(bcs.bytes.length() >= $len, EOutOfRange);\n    let mut value: $T = 0;\n    let mut i: $I = 0;\n    let bits = $bits;\n    while (i < bits) {\n        let byte = bcs.bytes.pop_back() as $T;\n        value = value + (byte << (i as u8));\n        i = i + 8;\n    };\n    value\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Order Tick Level in DeepBook - Rust\nDESCRIPTION: Function that retrieves the tick level from a given order object. It acts as a wrapper around the clob_v2::tick_level function, providing access to order tick information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/order_query.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\npublic fun tick_level(order: &Order): u64 {\n    clob_v2::tick_level(order)\n}\n```\n\n----------------------------------------\n\nTITLE: GT Group Generator Element\nDESCRIPTION: Returns the generator element of the GT group using predefined generator bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_37\n\nLANGUAGE: Move\nCODE:\n```\npublic fun gt_generator(): Element<GT> {\n    let generator = GT_GENERATOR_BYTES;\n    group_ops::from_bytes(GT_TYPE, &generator, true)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BLS12-381 Scalar and Group Constants in Move\nDESCRIPTION: Defines byte representations of key points and identities for the scalar field and G1, G2, GT groups of BLS12-381.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nconst SCALAR_ZERO_BYTES: vector<u8> = vector[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nconst SCALAR_ONE_BYTES: vector<u8> = vector[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];\nconst G1_IDENTITY_BYTES: vector<u8> = vector[192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nconst G1_GENERATOR_BYTES: vector<u8> = vector[151, 241, 211, 167, 49, 151, 215, 148, 38, 149, 99, 140, 79, 169, 172, 15, 195, 104, 140, 79, 151, 116, 185, 5, 161, 78, 58, 63, 23, 27, 172, 88, 108, 85, 232, 63, 249, 122, 26, 239, 251, 58, 240, 10, 219, 34, 198, 187];\nconst G2_IDENTITY_BYTES: vector<u8> = vector[192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nconst G2_GENERATOR_BYTES: vector<u8> = vector[147, 224, 43, 96, 82, 113, 159, 96, 125, 172, 211, 160, 136, 39, 79, 101, 89, 107, 208, 208, 153, 32, 182, 26, 181, 218, 97, 187, 220, 127, 80, 73, 51, 76, 241, 18, 19, 148, 93, 87, 229, 172, 125, 5, 93, 4, 43, 126, 2, 74, 162, 178, 240, 143, 10, 145, 38, 8, 5, 39, 45, 197, 16, 81, 198, 228, 122, 212, 250, 64, 59, 2, 180, 81, 11, 100, 122, 227, 209, 119, 11, 172, 3, 38, 168, 5, 187, 239, 212, 128, 86, 200, 193, 33, 189, 184];\nconst GT_IDENTITY_BYTES: vector<u8> = vector[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nconst GT_GENERATOR_BYTES: vector<u8> = vector[18, 80, 235, 216, 113, 252, 10, 146, 167, 178, 216, 49, 104, 208, 215, 39, 39, 45, 68, 27, 239, 161, 92, 80, 61, 216, 233, 12, 233, 141, 179, 231, 182, 209, 148, 246, 8, 57, 197, 8, 168, 67, 5, 170, 202, 23, 137, 182, 8, 154, 28, 91, 70, 229, 17, 11, 134, 117, 14, 198, 165, 50, 52, 136, 104, 168, 64, 69, 72, 60, 146, 183, 175, 90, 246, 137, 69, 46, 175, 171, 241, 168, 148, 62, 80, 67, 159, 29, 89, 136, 42, 152, 234, 160, 23, 15, 25, 242, 99, 55, 210, 5, 251, 70, 156, 214, 189, 21, 195, 213, 160, 77, 200, 135, 132, 251, 179, 208, 178, 219, 222, 165, 77, 67, 178, 183, 63, 44, 187, 18, 213, 131, 134, 168, 112, 62, 15, 148, 130, 38, 228, 126, 232, 157, 6, 251, 162, 62, 183, 197, 175, 13, 159, 128, 148, 12, 167, 113, 182, 255, 213, 133, 123, 170, 242, 34, 235, 149, 167, 210, 128, 157, 97, 191, 224, 46, 27, 253, 27, 104, 255, 2, 240, 184, 16, 42, 225, 194, 213, 213, 171, 26, 19, 104, 187, 68, 92, 124, 45, 32, 151, 3, 242, 57, 104, 156, 227, 76, 3, 120, 166, 142, 114, 166, 179, 178, 22, 218, 14, 34, 165, 3, 27, 84, 221, 255, 87, 48, 147, 150, 179, 140, 136, 28, 76, 132, 158, 194, 62, 135, 25, 53, 2, 184, 110, 219, 136, 87, 194, 115, 250, 7, 90, 80, 81, 41, 55, 224, 121, 78, 30, 101, 167, 97, 124, 144, 216, 189, 102, 6, 91, 31, 255, 229, 29, 122, 87, 153, 115, 177, 49, 80, 33, 236, 60, 25, 147, 79, 17, 184, 180, 36, 205, 72, 191, 56, 252, 239, 104, 8, 59, 11, 14, 197, 200, 26, 147, 179, 48, 238, 26, 103, 125, 13, 21, 255, 123, 152, 78, 137, 120, 239, 72, 136, 30, 50, 250, 201, 27, 147, 180, 115, 51, 226, 186, 87, 3, 53, 15, 85, 167, 174, 252, 211, 195, 27, 79, 203, 108, 229, 119, 28, 198, 160, 233, 120, 106, 181, 151, 51, 32, 200, 6, 173, 54, 8, 41, 16, 123, 168, 16, 197, 160, 159, 253, 217, 190, 34, 145, 160, 194, 90, 153, 162, 1, 178, 245, 34, 71, 61, 23, 19, 145, 18, 91, 168, 77, 196, 0, 124, 251, 242, 248, 218, 117, 47, 124, 116, 24, 82, 3, 252, 202, 88, 154, 199, 25, 195, 77, 255, 187, 170, 216, 67, 29, 173, 28, 31, 181, 151, 170, 165, 1, 129, 7, 21, 79, 37, 167, 100, 189, 60, 121, 147, 122, 69, 184, 69, 70, 218, 99, 75, 143, 107, 225, 74, 128, 97, 229, 92, 206, 186, 71, 139, 35, 247, 218, 202, 163, 92, 140, 167, 139, 234, 233, 98, 64, 69, 180, 182, 4, 197, 129, 35, 77, 8, 106, 153, 2, 36, 155, 100, 114, 143, 253, 33, 161, 137, 232, 121, 53, 169, 84, 5, 28, 124, 219, 167, 179, 135, 38, 41, 164, 250, 252, 5, 6, 98, 69, 203, 145, 8, 240, 36, 45, 15, 227, 239, 15, 65, 229, 134, 99, 191, 8, 207, 6, 134, 114, 203, 208, 26, 126, 199, 59, 172, 164, 215, 44, 169, 53, 68, 222, 255, 104, 107, 253, 109, 245, 67, 212, 142, 170, 36, 175, 228, 126, 30, 253, 228, 73, 56, 59, 103, 102, 49];\n\nconst SCALAR_TYPE: u8 = 0;\nconst G1_TYPE: u8 = 1;\nconst G2_TYPE: u8 = 2;\nconst GT_TYPE: u8 = 3;\nconst UNCOMPRESSED_G1_TYPE: u8 = 4;\n```\n\n----------------------------------------\n\nTITLE: Parse Token Transfer Bridge Message\nDESCRIPTION: Converts a bridge message into a parsed token transfer message structure, validating that the message is of token type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_parsed_token_transfer_message(\n    message: &BridgeMessage,\n): ParsedTokenTransferMessage {\n    assert!(message.message_type() == message_types::token(), EMustBeTokenMessage);\n    let payload = message.extract_token_bridge_payload();\n    ParsedTokenTransferMessage {\n        message_version: message.message_version(),\n        seq_num: message.seq_num(),\n        source_chain: message.source_chain(),\n        payload: message.payload(),\n        parsed_payload: payload,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting an ASCII String to Its Underlying Bytes in Move\nDESCRIPTION: Consumes an ASCII string and returns its underlying bytes. It takes ownership of a String and returns a vector of u8.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic fun into_bytes(string: String): vector<u8> {\n    let String { bytes } = string;\n    bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sui and Sui Bridge CLI from Main Branch\nDESCRIPTION: Command to install the latest versions of sui and sui-bridge-cli from the main branch of the Sui GitHub repository.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --locked --git \"https://github.com/MystenLabs/sui.git\" sui sui-bridge-cli\n```\n\n----------------------------------------\n\nTITLE: Delete Pool Owner Capability\nDESCRIPTION: Function to destroy a pool owner capability object, cleaning up associated resources.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun delete_pool_owner_cap(pool_owner_cap: PoolOwnerCap) {\n    let PoolOwnerCap { id, owner: _ } = pool_owner_cap;\n    object::delete(id)\n}\n```\n\n----------------------------------------\n\nTITLE: Call make_immutable Function\nDESCRIPTION: This command calls the `make_immutable` function from the `package` module of the `0x2` package using the Sui client CLI. It passes the `$upgradecap` variable as an argument to the function, making the package immutable.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call \\\n    --package 0x2 \\\n    --module 'package' \\\n    --function 'make_immutable' \\\n    --args $upgradecap\n```\n\n----------------------------------------\n\nTITLE: Mapping Vector Elements to New Vector in Rust\nDESCRIPTION: This macro function creates a new vector by applying a function to each element of the input vector, preserving the order of elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_19\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun map<$T, $U>($v: vector<$T>, $f: |$T| -> $U): vector<$U> {\n    let v = $v;\n    let mut r = vector[];\n    v.do!(|e| r.push_back($f(e)));\n    r\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object References in Sui\nDESCRIPTION: This snippet shows how objects are referenced in Sui's distributed store using IDs and versions. It illustrates that only the latest version of an object is available for transactions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/versioning.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n(I, v0) => ...\n(I, v1) => ...  # v0 < v1\n(I, v2) => ...  # v1 < v2\n```\n\n----------------------------------------\n\nTITLE: Defining JwkId Struct in Move\nDESCRIPTION: Defines the structure for JWK identifiers, matching the JwkId struct in fastcrypto-zkp, with fields for issuer and key ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic struct JwkId has copy, drop, store {\n    iss: std::string::String,\n    kid: std::string::String\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Power of u64 Base with u8 Exponent\nDESCRIPTION: Function that computes the value of a u64 base raised to a u8 power using std::macros::num_pow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pow(base: u64, exponent: u8): u64 {\n    std::macros::num_pow!(base, exponent)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FixedPoint32 Struct in Move\nDESCRIPTION: Struct definition for a fixed-point numeric type with 32 fractional bits, providing more than 9 decimal digits of precision both before and after the decimal point.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/fixed_point32.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic struct FixedPoint32 has copy, drop, store {\n    value: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Display Functionality in Move\nDESCRIPTION: This snippet defines structures and functions for managing display properties of objects in Move, including creation, updating, and field management.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_35\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Display\npublic struct DisplayCreated\npublic struct VersionUpdated\npublic fun new\npublic fun new_with_fields\npublic entry fun create_and_keep\npublic entry fun update_version\npublic entry fun add\npublic entry fun add_multiple\npublic entry fun edit\npublic entry fun remove\npublic fun is_authorized\npublic fun version\npublic fun fields\nfun create_internal\nfun add_internal\n```\n\n----------------------------------------\n\nTITLE: Allowing Token Actions in Move\nDESCRIPTION: Function signature for allowing actions without conditions in a TokenPolicy. Takes a TokenPolicy and TokenPolicyCap as arguments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/token-policy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun allow<T>(\n    policy: &mut TokenPolicy<T>,\n    policy_cap: &TokenPolicyCap<T>,\n    action: String,\n    ctx: &mut TxContext\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Fixed-Point Numbers (uq_add)\nDESCRIPTION: Adds two fixed-point numbers, checking for overflow. The result is cast back to the original type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun uq_add<$T, $U>($a: $T, $b: $T, $max_t: $T, $abort_overflow: _): $T {\n    let sum = $a as $U + ($b as $U);\n    if (sum > $max_t as $U) $abort_overflow;\n    sum as $T\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Events for Balance Changes Using cURL\nDESCRIPTION: Subscribes to events for a specific address by sending a request to a Sui Full node using cURL. Filters responses to include only events related to SUI coin addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nrpc=\"https://fullnode.devnet.sui.io:443\"\naddress=\"0x849d63687330447431a2e76fecca4f3c10f6884ebaa9909674123c6c662612a3\"\ndata=\"{\\\"jsonrpc\\\": \\\"2.0\\\", \\\"id\\\":1, \\\"method\\\": \\\"sui_getEvents\\\", \\\"params\\\": [{\\\"Recipient\\\": {\\\"AddressOwner\\\": \\\"0x849d63687330447431a2e76fecca4f3c10f6884ebaa9909674123c6c662612a3\\\"}}, null, null, true ]}\"\ncurl -X POST -H 'Content-type: application/json' --data-raw \"$data\" $rpc\n```\n\n----------------------------------------\n\nTITLE: Calculate Required DEEP Fee\nDESCRIPTION: Function to calculate required DEEP amount for maker and taker orders given quantity and price.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_order_deep_required(self: &Pool, quantity: u64, price: u64): (u64, u64)\n```\n\n----------------------------------------\n\nTITLE: Deserializing a u8 Value from BCS Bytes in Move\nDESCRIPTION: Extracts a u8 (byte) value from BCS-serialized bytes. It checks that at least one byte is available in the buffer before attempting to read.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic fun peel_u8(bcs: &mut BCS): u8 {\n    assert!(bcs.bytes.length() >= 1, EOutOfRange);\n    bcs.bytes.pop_back()\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Transaction Effects to Wallet\nDESCRIPTION: Sending transaction effects back to the wallet using base64 encoding\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/wallet-standard.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { toBase64 } from '@mysten/sui/utils';\n\nwallet.features['sui:reportTransactionEffects'].reportTransactionEffects(\n    effects: Array.isArray(transactionResponse.effects) ? toBase64(\n        Uint8Array.from(transactionResponse.effects) : transactionResponse.effects,\n        account: wallet.accounts[0], // for example\n        chain: wallet.chains[0]\n    )\n```\n\n----------------------------------------\n\nTITLE: Getting Total Stake from a Validator - Move\nDESCRIPTION: This function returns the total amount staked with a validator by retrieving the SUI balance from the validator's staking pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_62\n\nLANGUAGE: Move\nCODE:\n```\npublic fun total_stake(self: &Validator): u64 {\n    self.staking_pool.sui_balance()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MIN_STAKING_THRESHOLD Constant in Move\nDESCRIPTION: Defines the minimum amount threshold for StakedSui objects, preventing them from being split below this value (1,000,000,000).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\nconst MIN_STAKING_THRESHOLD: u64 = 1000000000;\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Set in Move\nDESCRIPTION: This snippet defines the VecSet structure and associated functions for implementing a set data structure using vectors in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_26\n\nLANGUAGE: Move\nCODE:\n```\npublic struct VecSet\npublic fun empty\npublic fun singleton\npublic fun insert\npublic fun remove\npublic fun contains\npublic fun size\npublic fun is_empty\npublic fun into_keys\npublic fun from_keys\npublic fun keys\nfun get_idx_opt\nfun get_idx\n```\n\n----------------------------------------\n\nTITLE: Implementing Inclusive Range Iteration Macro in Move\nDESCRIPTION: A macro that iterates over a range of values from start (inclusive) to stop (inclusive) and applies a function to each value, with careful handling of integer limits.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do_eq<$T, $R: drop>($start: $T, $stop: $T, $f: |$T| -> $R) {\n    let mut i = $start;\n    let stop = $stop;\n    // we check `i >= stop` inside the loop instead of `i <= stop` as `while` condition to avoid\n    // incrementing `i` past the MAX integer value.\n    // Because of this, we need to check if `i > stop` and return early--instead of letting the\n    // loop bound handle it, like in the `range_do` macro.\n    if (i > stop) return;\n    loop {\n        $f(i);\n        if (i >= stop) break;\n        i = i + 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Example for zkLogin\nDESCRIPTION: Shows a typical JWT payload with key claims used in the zkLogin authentication process\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/zklogin.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iss\": \"https://accounts.google.com\",\n  \"aud\": \"575519200000-msop9ep45u2uo98hapqmngv8d8000000.apps.googleusercontent.com\",\n  \"nonce\": \"hTPpgF7XAKbW37rEUS6pEVZqmoI\",\n  \"sub\": \"110463452167303000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: U128 to U8 Conversion\nDESCRIPTION: Attempts to convert a u128 value to u8, returning None if the value is too large.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u8(x: u128): Option<u8> {\n    std::macros::try_as_u8!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstration of Field Requirements for Struct Abilities\nDESCRIPTION: Example showing that when a struct is declared with an ability, its fields must satisfy specific constraints. Here, WantsCopy cannot have the copy ability because its field NoAbilities doesn't have the copy ability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abilities.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\n// A struct without any abilities\npublic struct NoAbilities {}\n\npublic struct WantsCopy has copy {\n    f: NoAbilities, // ERROR 'NoAbilities' does not have 'copy'\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum of Two u64 Values in Move\nDESCRIPTION: Returns the smaller of two u64 values using the standard library macro for number comparison.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun min(x: u64, y: u64): u64 {\n    std::macros::num_min!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Demo Contract Package ID\nDESCRIPTION: JSON configuration containing the package ID for the demo contract deployed on Testnet.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/frontend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageId\": \"0x164183829178d7620595919907d35bd3800b4345152f793594af8b2ba252d58a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Between Two u8 Values\nDESCRIPTION: The min function returns the smaller of two u8 values using the std::macros::num_min macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun min(x: u8, y: u8): u8 {\n    std::macros::num_min!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Optional Element Index in VecSet\nDESCRIPTION: A function that searches for a key in a VecSet and returns its index as an Option. Returns None if the key is not found. Elements are checked in insertion order, not sorted.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_set.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\nfun get_idx_opt<K: copy + drop>(self: &VecSet<K>, key: &K): Option<u64> {\n    let mut i = 0;\n    let n = size(self);\n    while (i < n) {\n        if (&self.contents[i] == key) {\n            return option::some(i)\n        };\n        i = i + 1;\n    };\n    option::none()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Clock Singleton in Move\nDESCRIPTION: Genesis function to create and share the singleton Clock object. Can only be called once during system initialization by the system address (0x0).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/clock.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nfun create(ctx: &TxContext) {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    transfer::share_object(Clock {\n        id: object::clock(),\n        timestamp_ms: 0,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chain ID Getter Functions in Move\nDESCRIPTION: Implements public functions to retrieve chain ID constants for different networks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/chain_ids.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sui_mainnet(): u8 { SuiMainnet }\npublic fun sui_testnet(): u8 { SuiTestnet }\npublic fun sui_custom(): u8 { SuiCustom }\npublic fun eth_mainnet(): u8 { EthMainnet }\npublic fun eth_sepolia(): u8 { EthSepolia }\npublic fun eth_custom(): u8 { EthCustom }\n```\n\n----------------------------------------\n\nTITLE: Finding Leaf Node in Critbit Tree - Move Implementation\nDESCRIPTION: Searches for a leaf node by key in the Critbit tree. Returns a tuple containing a boolean indicating if found and the leaf index if exists.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun find_leaf<V: store>(tree: & CritbitTree<V>, key: u64): (bool, u64) {\n    if (is_empty(tree)) {\n        return (false, PARTITION_INDEX)\n    };\n    let closest_leaf_index = get_closest_leaf_index_by_key(tree, key);\n    let closeset_leaf = table::borrow(&tree.leaves, closest_leaf_index);\n    if (closeset_leaf.key != key){\n        return (false, PARTITION_INDEX)\n    } else{\n        return (true, closest_leaf_index)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Component with Demo Data Generation in TSX\nDESCRIPTION: Updates the Header component to include functionality for minting a demo bear object. It integrates the demo data generation mutation into the UI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_29\n\nLANGUAGE: TSX\nCODE:\n```\n// Content of src/components/Header.tsx not provided in the input\n```\n\n----------------------------------------\n\nTITLE: Accessing Pool Exchange Rates\nDESCRIPTION: Package-private function to get exchange rates for a given staking pool ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun pool_exchange_rates(self: &mut ValidatorSet, pool_id: &ID): &Table<u64, PoolTokenExchangeRate> {\n    let validator = if (self.staking_pool_mappings.contains(*pool_id)) {\n        let validator_address = self.staking_pool_mappings[*pool_id];\n        self.get_active_or_pending_or_candidate_validator_ref(validator_address, ANY_VALIDATOR)\n    } else {\n        self.inactive_validators[*pool_id].load_validator_maybe_upgrade()\n    };\n    validator.get_staking_pool_ref().exchange_rates()\n}\n```\n\n----------------------------------------\n\nTITLE: Get Multiple Orders\nDESCRIPTION: Function to retrieve multiple orders using a vector of order IDs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_14\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_orders(self: &Pool, order_ids: vector<u64>): vector<Order>\n```\n\n----------------------------------------\n\nTITLE: Verifying Sysctl Changes\nDESCRIPTION: This command checks the current sysctl settings for read and write memory parameters to confirm that the changes were applied successfully.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo sysctl -a | egrep [rw]mem\n```\n\n----------------------------------------\n\nTITLE: Switching Sui CLI to Local Environment\nDESCRIPTION: Command to set the active Sui CLI environment to the newly created 'local' environment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/local-network.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsui client switch --env local\n```\n\n----------------------------------------\n\nTITLE: Running Sui Test Validator with Persisted State\nDESCRIPTION: This snippet shows how to run the `sui-test-validator` using a previously generated configuration directory. This allows the validator to load and persist state between runs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-test-validator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n\"sui-test-validator --config-dir [some-directory]\"\n```\n\n----------------------------------------\n\nTITLE: CheckManagerBalance Function Definition\nDESCRIPTION: Function signature for checking the balance of a specific coin in a balance manager.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nasync checkManagerBalance(managerKey: string, coinKey: string) {}\n```\n\n----------------------------------------\n\nTITLE: Generating Proof of Possession Payload\nDESCRIPTION: Command to serialize the payload for generating Proof of Possession for an Authority protocol BLS keypair.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator serialize-payload-pop --account-address $ACCOUNT_ADDRESS --protocol-public-key $BLS_PUBKEY\nSerialized payload: $PAYLOAD_TO_SIGN\n```\n\n----------------------------------------\n\nTITLE: Creating New Referent in Move\nDESCRIPTION: Implements the new function to create a new Referent struct. It takes a value of type T and a mutable reference to a TxContext, and returns a Referent<T>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/borrow.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new<T: key + store>(value: T, ctx: &mut TxContext): Referent<T> {\n    Referent {\n        id: tx_context::fresh_object_address(ctx),\n        value: option::some(value),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Option map_ref Macro in Move\nDESCRIPTION: Macro that maps an Option<T> to Option<U> by applying a function to a reference of the contained value. Preserves the original Option<T>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_26\n\nLANGUAGE: move\nCODE:\n```\npublic macro fun map_ref<$T, $U>($o: &Option<$T>, $f: |&$T| -> $U): Option<$U> {\n    let o = $o;\n    if (o.is_some()) some($f(o.borrow())) else none()\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Stake Activation Epoch in Move\nDESCRIPTION: Retrieves the epoch when a Sui stake was activated. This function requires a StakedSui reference and returns the epoch as a u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_27\n\nLANGUAGE: Move\nCODE:\n```\npublic fun stake_activation_epoch(staked_sui: &sui_system::staking_pool::StakedSui): u64 {\n    staked_sui.stake_activation_epoch\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sui Network Environment\nDESCRIPTION: This example shows how to add a new network environment (Sui Mainnet) using the 'sui client new-env' command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client new-env --alias=mainnet --rpc https://fullnode.mainnet.sui.io:443\n\nAdded new Sui env [mainnet] to config.\n```\n\n----------------------------------------\n\nTITLE: Summing Even Numbers with Loop Expression, Break, and Continue in Move\nDESCRIPTION: A version of the sum_even function using a loop expression with break and continue. It breaks when all elements are processed and uses continue to skip odd numbers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\nfun sum_even(values: &vector<u64>): u64 {\n    let size = vector::length(values);\n    let mut i = 0;\n    let mut even_sum = 0;\n\n    loop {\n        if (i >= size) break;\n        let number = *vector::borrow(values, i);\n        i = i + 1;\n        if (number % 2 == 1) continue;\n        even_sum = even_sum + number;\n    };\n    even_sum\n}\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project Extension Locally using npm\nDESCRIPTION: Commands to install dependencies and package the extension for local use. Note that vsce is not compatible with pnpm, so npm must be used for building.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-extension/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\nnpm run package\n```\n\n----------------------------------------\n\nTITLE: Join and Transfer Coins Function Definition\nDESCRIPTION: Function signature for joining multiple coins into one and transferring to a receiver address\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/pay.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun join_vec_and_transfer<T>(coins: vector<sui::coin::Coin<T>>, receiver: address)\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct with Key and Store Abilities\nDESCRIPTION: This snippet modifies the 'Bar' struct to include 'key' and 'store' abilities, making it a Sui object type that can be wrapped by 'Foo'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/wrapped.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic struct Bar has key, store {\n    id: UID,\n    value: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Converting u8 to string representation\nDESCRIPTION: Converts a u8 value to its string representation using the std::macros::num_to_string macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_string(x: u8): String {\n    std::macros::num_to_string!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Market Orders in TypeScript SDK for SUI\nDESCRIPTION: TypeScript SDK implementation for placing market orders on SUI. It handles token type conversion, determines buy or sell direction, calls the appropriate Move function, and constructs the transaction block.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @description: place a market order\n * @param tokenObjectIn: Object id of the token to buy or sell\n * @param tokenOut: Full coin type(recommend) or coin name of the asset one want to get \"0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::wbtc::WBTC\" for example\n * @param amountIn: amount of token to buy or sell\n * @param currentAddress: user address\n * @param overrides: overriders for blockchain params. Like gas budget, transaction block and the provider, default we will set to the max gas budget, and create a new transaction block\n * @notice: the packageId should be set in configs.json, if it is not set, the transaction will fail.\n */\npublic async placeMarketOrder(\n    tokenObjectIn: string,\n    tokenOut: string,\n    amountIn: number,\n    currentAddress: string,\n    overrides: Overrides = new Overrides(),\n): Promise<TransactionBlock> {\n    // in this case, we assume that the tokenIn--tokenOut always exists.\n    const tokenTypeOut = convertToTokenType(tokenOut, this.records);\n    const tokenIn = overrides.txb.object(tokenObjectIn);\n    const tokenInfo = await this.provider.getObject({\n        id: tokenObjectIn,\n        options: {\n            showType: true,\n        },\n    });\n    const tokenTypeIn = tokenInfo.data.type.split('<')[1].split('>')[0];\n    let base_coin_ret, quote_coin_ret, amount;\n    const poolInfo: PoolInfo = getPoolInfoByRecords(tokenTypeIn, tokenTypeOut, this.records);\n    let _isBid, _tokenIn, _tokenOut, _amount;\n    if (!poolInfo.needChange) {\n        _isBid = false;\n        _tokenIn = tokenIn;\n        _tokenOut = this.mint(tokenTypeOut, 0, {txb: overrides.txb});\n        _amount = overrides.txb.object(String(amountIn));\n    } else {\n        _isBid = true;\n        // _tokenIn = this.mint(txb, nextPath, 0)\n        _tokenOut = tokenIn;\n        _amount = overrides.txb.object(String(amountIn));\n    }\n    if (_isBid) {\n        // here swap_exact_quote_for_base\n        [base_coin_ret, quote_coin_ret, amount] = overrides.txb.moveCall({\n            typeArguments: [\n                poolInfo.needChange ? tokenTypeOut : tokenTypeIn,\n                poolInfo.needChange ? tokenTypeIn : tokenTypeOut,\n            ],\n            target: `${this.configs.swapPackageId}::clob::swap_exact_quote_for_base`,\n            arguments: [\n                overrides.txb.object(String(poolInfo.clob)),\n                _amount,\n                overrides.txb.object(normalizeSuiObjectId(this.configs.clock)),\n                _tokenOut,\n            ],\n        });\n    } else {\n        // here swap_exact_base_for_quote\n        [base_coin_ret, quote_coin_ret, amount] = overrides.txb.moveCall({\n            typeArguments: [\n                poolInfo.needChange ? tokenTypeOut : tokenTypeIn,\n                poolInfo.needChange ? tokenTypeIn : tokenTypeOut,\n            ],\n            target: `${this.configs.swapPackageId}::clob::swap_exact_base_for_quote`,\n            arguments: [\n                overrides.txb.object(String(poolInfo.clob)),\n                _amount,\n                _tokenIn,\n                _tokenOut,\n                overrides.txb.object(normalizeSuiObjectId(this.configs.clock)),\n            ],\n        });\n    }\n    overrides.txb.transferObjects([base_coin_ret], overrides.txb.pure(currentAddress));\n    overrides.txb.transferObjects([quote_coin_ret], overrides.txb.pure(currentAddress));\n    overrides.txb.setSenderIfNotSet(currentAddress);\n    overrides.txb.setGasBudget(overrides.gasBudget);\n    return overrides.txb;\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe Multiplication Implementation\nDESCRIPTION: Package-internal unsafe multiplication functions that handle floating point calculations without overflow checks\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/math.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun unsafe_mul(x: u64, y: u64): u64 {\n    let (_, result) = unsafe_mul_round(x, y);\n    result\n}\n\npublic(package) fun unsafe_mul_round(x: u64, y: u64): (bool, u64) {\n    let x = x as u128;\n    let y = y as u128;\n    let mut is_round_down = true;\n    if ((x * y) % FLOAT_SCALING_U128 == 0) is_round_down = false;\n    (is_round_down, (x * y / FLOAT_SCALING_U128) as u64)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing num_divide_and_round_up Macro in Move\nDESCRIPTION: A macro function that performs division with ceiling rounding (rounding up). If the division has a remainder, it adds 1 to the result.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_divide_and_round_up<$T>($x: $T, $y: $T): $T {\n    let x = $x;\n    let y = $y;\n    if (x % y == 0) x / y else x / y + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Pending Stake Amount - Move\nDESCRIPTION: This function returns the amount of pending stake for a validator by delegating to the staking pool's pending_stake_amount function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_65\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pending_stake_amount(self: &Validator): u64 {\n    self.staking_pool.pending_stake_amount()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Metrics Address in Configuration\nDESCRIPTION: Change the metrics address in 'fullnode.yaml' to resolve address conflicts on port 9184 by specifying a different port, such as 9180. This is expected input for resolving binding errors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/sui-full-node.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmetrics-address: \"0.0.0.0:9180\"\n```\n\n----------------------------------------\n\nTITLE: Basic Struct Definition in Move\nDESCRIPTION: Examples of defining different types of structs in Move modules, including named and positional fields.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/structs.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct Foo { x: u64, y: bool }\n    public struct Bar {}\n    public struct Baz { foo: Foo, }\n    //                          ^ note: it is fine to have a trailing comma\n\n    public struct PosFoo(u64, bool)\n    public struct PosBar()\n    public struct PosBaz(Foo)\n}\n```\n\n----------------------------------------\n\nTITLE: Address Utilities in Move\nDESCRIPTION: The 0x1::address module provides utility functions for working with Move addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_45\n\nLANGUAGE: move\nCODE:\n```\n// Address utilities\n0x1::address::length        // public fun\n```\n\n----------------------------------------\n\nTITLE: Calling Methods in Move using Dot Notation\nDESCRIPTION: Examples of how to call functions as methods in Move using the dot notation syntax. The value on the left side of the dot becomes the first argument to the function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\ncoin.value();\n*nums.borrow_mut(i) = 5;\n```\n\n----------------------------------------\n\nTITLE: Popping a Character from an ASCII String in Move\nDESCRIPTION: Removes and returns the last character from an ASCII string. It takes a mutable reference to a String and returns a Char.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pop_char(string: &mut String): Char {\n    Char { byte: string.bytes.pop_back() }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing U16 to String conversion\nDESCRIPTION: Function that converts a u16 value to a String representation using the standard macros num_to_string utility.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_string(x: u16): String {\n    std::macros::num_to_string!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing VecSet Keys in Move\nDESCRIPTION: A function that allows borrowing the contents of a VecSet to access elements by index without unpacking. The elements are maintained in insertion order, not sorted.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_set.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun keys<K: copy + drop>(self: &VecSet<K>): &vector<K> {\n    &self.contents\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing power function for U16 values\nDESCRIPTION: Function that raises a u16 base to a u8 exponent power using the standard macros num_pow utility.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pow(base: u16, exponent: u8): u16 {\n    std::macros::num_pow!(base, exponent)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Open Orders in DeepBook CLOB (Move)\nDESCRIPTION: This function retrieves all open orders for a specific user in a given trading pool. It iterates through the user's open order IDs, fetches the corresponding order details from the order book, and returns a vector of Order structs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_26\n\nLANGUAGE: Move\nCODE:\n```\npublic fun list_open_orders<BaseAsset, QuoteAsset>(\n    pool: &Pool<BaseAsset, QuoteAsset>,\n    account_cap: &AccountCap\n): vector<Order> {\n    let user = object::id(account_cap);\n    let usr_open_order_ids = table::borrow(&pool.usr_open_orders, user);\n    let mut open_orders = vector::empty<Order>();\n    let mut order_id = linked_table::front(usr_open_order_ids);\n    while (!option::is_none(order_id)) {\n        let order_price = *linked_table::borrow(usr_open_order_ids, *option::borrow(order_id));\n        let tick_level =\n            if (order_is_bid(*option::borrow(order_id))) borrow_leaf_by_key(&pool.bids, order_price)\n            else borrow_leaf_by_key(&pool.asks, order_price);\n        let order = linked_table::borrow(&tick_level.open_orders, *option::borrow(order_id));\n        vector::push_back(&mut open_orders, Order {\n            order_id: order.order_id,\n            price: order.price,\n            quantity: order.quantity,\n            is_bid: order.is_bid,\n            owner: order.owner,\n            expire_timestamp: order.expire_timestamp\n        });\n        order_id = linked_table::next(usr_open_order_ids, *option::borrow(order_id));\n    };\n    open_orders\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Reference to Pending Validator in Move\nDESCRIPTION: Retrieves a reference to a pending validator by address. This function aborts with ENotAPendingValidator error if the validator is not found in the pending validators list.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_43\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_pending_validator_ref(self: &ValidatorSet, addr: address): &Validator {\n    let idx = find_validator_from_table_vec(\n        &self.pending_active_validators,\n        addr,\n    ).destroy_or!(abort ENotAPendingValidator);\n    &self.pending_active_validators[idx]\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Power Function for u64 Base in Move\nDESCRIPTION: Computes the power of a u64 base raised to a u8 exponent using the standard library's numeric power function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pow(base: u64, exponent: u8): u64 {\n    std::macros::num_pow!(base, exponent)\n}\n```\n\n----------------------------------------\n\nTITLE: All Historical Volume Example Request\nDESCRIPTION: An example HTTP request to the /all_historical_volume endpoint that retrieves historical trading volume data for all pools with parameters for time range and volume representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\n/all_historical_volume?start_time=<UNIX_TIMESTAMP_SECONDS>&end_time=<UNIX_TIMESTAMP_SECONDS>&volume_in_base=<BOOLEAN>\n```\n\n----------------------------------------\n\nTITLE: Adding Address to Deny List - Rust Implementation\nDESCRIPTION: Rust code for adding an address to a regulated coin's deny list using the Sui SDK. Handles object references and transaction building.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/coin.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet mut ptb = ProgrammableTransactionBuilder::new();\n\nlet deny_list = ptb.obj(ObjectArg::SharedObject {\n    id: deny_list.0,\n    initial_shared_version: deny_list.1,\n    mutable: true,\n})?;\nlet deny_cap = ptb.obj(ObjectArg::ImmOrOwnedObject(deny_cap))?;\nlet address = ptb.pure(cmd.address())?;\nptb.command(Command::move_call(\n    SUI_FRAMEWORK_PACKAGE_ID,\n    Identifier::from(COIN_MODULE_NAME),\n    Identifier::from_str(\"deny_list_v2_add\".to_string())?,\n    vec![<otw-type>],\n    vec![deny_list, deny_cap, address],\n));\n\nlet builder = ptb.finish();\n```\n\n----------------------------------------\n\nTITLE: G2 Group Multiplication Operation\nDESCRIPTION: Implements scalar multiplication for G2 group elements using the group_ops::mul function with G2_TYPE parameter.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_31\n\nLANGUAGE: Move\nCODE:\n```\npublic fun g2_mul(e1: &Element<Scalar>, e2: &Element<G2>): Element<G2> {\n    group_ops::mul(G2_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Published Move Module Bytecode\nDESCRIPTION: Command for viewing the bytecode of a published Move module in the sandbox environment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ move sandbox view storage/0x00000000000000000000000000000002/modules/Test.mv\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Map in Move\nDESCRIPTION: This snippet defines the VecMap structure and associated functions for implementing a map data structure using vectors in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_33\n\nLANGUAGE: Move\nCODE:\n```\npublic struct VecMap\npublic struct Entry\npublic fun empty\npublic fun insert\npublic fun remove\npublic fun pop\npublic fun get_mut\npublic fun get\npublic fun try_get\npublic fun contains\npublic fun size\npublic fun is_empty\npublic fun destroy_empty\npublic fun into_keys_values\npublic fun from_keys_values\npublic fun keys\npublic fun get_idx_opt\npublic fun get_idx\npublic fun get_entry_by_idx\npublic fun get_entry_by_idx_mut\npublic fun remove_entry_by_idx\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Transaction Block in Sui using GraphQL\nDESCRIPTION: This snippet shows how to get a specific transaction block by its digest using GraphQL in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/graphql-migration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  transactionBlock(digest: \"Hay2tj3GcDYcE3AMHrej5WDsHGPVAYsegcubixLUvXUF\") {\n    gasInput {\n      gasSponsor {\n        address\n      }\n      gasPrice\n      gasBudget\n    }\n    effects {\n      status\n      timestamp\n      checkpoint {\n        sequenceNumber\n      }\n      epoch {\n        epochId\n        referenceGasPrice\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UTF-8 String Creation Function\nDESCRIPTION: Creates a new String from a byte vector, validating UTF-8 encoding\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun utf8(bytes: vector<u8>): String {\n    assert!(internal_check_utf8(&bytes), EInvalidUTF8);\n    String { bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Empty Critbit Tree in Move\nDESCRIPTION: The 'destroy_empty' function is designed to deconstruct a critbit tree, ensuring that it is empty before doing so. This involves checking that the 'leaves' of the tree are empty, and then deallocating both 'leaves' and 'internal_nodes'. This function assumes that the tree is not referenced elsewhere.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b>(package) <b>fun</b> <a href=\"../deepbook/critbit.md#deepbook_critbit_destroy_empty\">destroy_empty</a>&lt;V: store&gt;(tree: <a href=\"../deepbook/critbit.md#deepbook_critbit_CritbitTree\">CritbitTree</a>&lt;V&gt;) {\n    <b>assert</b>!(table::length(&tree.leaves) == 0, 0);\n    <b>let</b> <a href=\"../deepbook/critbit.md#deepbook_critbit_CritbitTree\">CritbitTree</a>&lt;V&gt; {\n        root: _,\n        leaves,\n        internal_nodes,\n        <a href=\"../deepbook/critbit.md#deepbook_critbit_min_leaf\">min_leaf</a>: _,\n        <a href=\"../deepbook/critbit.md#deepbook_critbit_max_leaf\">max_leaf</a>: _,\n        next_internal_node_index: _,\n        next_leaf_index: _\n    } = tree;\n    table::destroy_empty(leaves);\n    table::destroy_empty(internal_nodes);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Immutable UID for Kiosk - Move\nDESCRIPTION: This function retrieves the immutable UID allowing for dynamic field access in the Kiosk. It always returns an active reference.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_40\n\nLANGUAGE: Move\nCODE:\n```\npublic fun uid(self: &sui::kiosk::Kiosk): &sui::object::UID {\n    &self.id\n}\n```\n\n----------------------------------------\n\nTITLE: USDC Import in Move\nDESCRIPTION: Example of importing and using the USDC type in Move code.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/stablecoins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nuse usdc::usdc::USDC;\n```\n\n----------------------------------------\n\nTITLE: Element Equality Comparison Function\nDESCRIPTION: Implements equality comparison between two Elements by comparing their byte representations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun equal<G>(e1: &Element<G>, e2: &Element<G>): bool {\n    &e1.bytes == &e2.bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-statement Function with Return Value\nDESCRIPTION: Shows how a function with multiple statements returns the value of the final expression.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_19\n\nLANGUAGE: move\nCODE:\n```\nfun double_and_add(x: u64, y: u64): u64 {\n    let double_x = x * 2;\n    let double_y = y * 2;\n    double_x + double_y\n}\n```\n\n----------------------------------------\n\nTITLE: Get Pool Book Parameters\nDESCRIPTION: Function to retrieve book parameters including tick size, lot size, and minimum size.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_20\n\nLANGUAGE: move\nCODE:\n```\npublic fun pool_book_params(self: &Pool): (u64, u64, u64)\n```\n\n----------------------------------------\n\nTITLE: U8 Integer Operations in Move\nDESCRIPTION: The 0x1::u8 module provides utility functions for working with u8 integers, including bitwise operations, math utilities, and conversion functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_52\n\nLANGUAGE: move\nCODE:\n```\n// U8 integer operations\n0x1::u8::bitwise_not        // public fun\n0x1::u8::max                // public fun\n0x1::u8::min                // public fun\n0x1::u8::diff               // public fun\n0x1::u8::divide_and_round_up // public fun\n0x1::u8::pow                // public fun\n0x1::u8::sqrt               // public fun\n0x1::u8::to_string          // public fun\n```\n\n----------------------------------------\n\nTITLE: Converting UID to Inner ID in Move\nDESCRIPTION: Gets the raw bytes of a UID's inner ID. This function returns a copy of the inner ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun uid_to_inner(uid: &UID): ID {\n    uid.id\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zero-Based Exclusive Iteration Macro in Move\nDESCRIPTION: A convenience macro that iterates from 0 (inclusive) to stop (exclusive) and applies a function to each value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do<$T, $R: drop>($stop: $T, $f: |$T| -> $R) {\n    range_do!(0, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Hook for Getting Reviews - TypeScript\nDESCRIPTION: The useGetReviews custom hook fetches and manages the state of reviews for a specific service. It exposes key information such as the service name and a list of reviews to be displayed. Requires TypeScript environment and React.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nconst useGetReviews = (serviceId) => {\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        // Fetch reviews from API\n        fetch(`/api/reviews/${serviceId}`)\n            .then(response => response.json())\n            .then(data => setReviews(data));\n    }, [serviceId]);\n\n    return reviews;\n};\n```\n\n----------------------------------------\n\nTITLE: GetBaseQuantityOut Function Definition\nDESCRIPTION: Function signature for calculating base quantity output based on quote quantity input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nasync getBaseQuantityOut(poolKey: string, quoteQuantity: number) {}\n```\n\n----------------------------------------\n\nTITLE: Looping from 0 to U256 Value in Sui Move\nDESCRIPTION: Applies a function to each number from 0 to a specified stop value (exclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_15\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun do<$R: drop>($stop: u256, $f: |u256| -> $R) {\n    std::macros::do!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing 'do' Macro Function for U8 in Sui\nDESCRIPTION: This macro function loops and applies a given function to each number from 0 to a specified stop value (exclusive) for u8 types. It relies on the std::macros::do macro for implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_11\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun do<$R: drop>($stop: u8, $f: |u8| -> $R) {\n    std::macros::do!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Definition: ETotalPowerMismatch\nDESCRIPTION: Defines a constant `ETotalPowerMismatch` set to 1.  This is an error code indicating a mismatch in total voting power.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\n<b>const</b> <a href=\"../sui_system/voting_power.md#sui_system_voting_power_ETotalPowerMismatch\">ETotalPowerMismatch</a>: u64 = 1;\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Emission in Move\nDESCRIPTION: This snippet defines a function for emitting events in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_28\n\nLANGUAGE: Move\nCODE:\n```\npublic fun emit\n```\n\n----------------------------------------\n\nTITLE: Setting up the database for Sui indexer (TiDB)\nDESCRIPTION: These commands use Diesel CLI to set up and reset the database for the Sui indexer, specifically for TiDB. It uses the provided DATABASE_URL and specifies the location of the MySQL migrations. Replace `<DATABASE_URL>` with the actual connection string.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n# an example DATABASE_URL is \"mysql://root:password@127.0.0.1:4000/test\"\ndiesel setup --database-url=\"<DATABASE_URL>\" --migration-dir='migrations/mysql'\ndiesel database reset --database-url=\"<DATABASE_URL>\" --migration-dir='migrations/mysql'\n```\n\n----------------------------------------\n\nTITLE: Demonstration of Field Requirements for Key Ability\nDESCRIPTION: Example showing that fields of a struct with key ability must have the store ability. Here, MyData cannot have the key ability because its field NoAbilities doesn't have the store ability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abilities.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\n// A struct without any abilities\npublic struct NoAbilities {}\n\npublic struct MyData has key {\n    f: NoAbilities, // Error 'NoAbilities' does not have 'store'\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sui Node Image in Docker Compose YAML\nDESCRIPTION: This YAML snippet shows how to update the Sui Node image version in the docker-compose.yaml file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/docker/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n-    image: mysten/sui-node:<OLD_SUI_SHA>\n+    image: mysten/sui-node:<NEW_SUI_SHA>\n```\n\n----------------------------------------\n\nTITLE: Disassembling Move Module Bytecode\nDESCRIPTION: Commands for disassembling Move module bytecode, including an interactive mode.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ move disassemble --name Test --interactive # You can quit by pressing \"q\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ move disassemble --name Test\n```\n\n----------------------------------------\n\nTITLE: U128 to U32 Conversion\nDESCRIPTION: Attempts to convert a u128 value to u32, returning None if the value is too large.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u32(x: u128): Option<u32> {\n    std::macros::try_as_u32!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Get SUI Coin for Address from Faucet using Sui CLI\nDESCRIPTION: This command requests SUI coins from the faucet for a specific address, specified either directly or by alias. It allows you to fund a specific account for testing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client faucet --address ADDRESS\"\n```\n\n----------------------------------------\n\nTITLE: Querying Active Escrows\nDESCRIPTION: Example cURL command to query active escrows for a specific address with pagination\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:3000/escrows?limit=5&recipient=0xfe09cf0b3d77678b99250572624bf74fe3b12af915c5db95f0ed5d755612eb68&cancelled=false&swapped=false'\n```\n\n----------------------------------------\n\nTITLE: Public Function Visibility Example\nDESCRIPTION: Shows how public functions can be called from any module in the codebase.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public fun foo(): u64 { 0 }\n    fun calls_foo(): u64 { foo() } // valid\n}\n\nmodule b::other {\n    fun calls_m_foo(): u64 {\n        a::m::foo() // valid\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding UQ32_32 Values in Move\nDESCRIPTION: Implements the add function to perform addition of two UQ32_32 values, handling potential overflow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq32_32.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add(a: UQ32_32, b: UQ32_32): UQ32_32 {\n    UQ32_32(std::macros::uq_add!<u64, u128>(a.0, b.0, std::u64::max_value!(), abort EOverflow))\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Nitro Attestation Document\nDESCRIPTION: The function `load_nitro_attestation_internal` is a native function that loads a NitroAttestationDocument from a vector of bytes and a timestamp. It requires the bytes representing the attestation and the current timestamp as parameters, returning the constructed NitroAttestationDocument.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/nitro_attestation.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\nnative fun load_nitro_attestation_internal(\n    attestation: &vector<u8>,\n    current_timestamp: u64,\n): sui::nitro_attestation::NitroAttestationDocument;\n```\n\n----------------------------------------\n\nTITLE: Collection Clean-up and Deletion Methods in Sui Move\nDESCRIPTION: Explicit deletion methods with protection against removing non-empty collections, with type-specific drop capabilities\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/dynamic-fields/tables-bags.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun destroy_empty<K: copy + drop + store, V: store>(\n    table: Table<K, V>,\n);\n\npublic fun drop<K: copy + drop + store, V: drop + store>(\n    table: Table<K, V>,\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Voting Power in Sui System (Move)\nDESCRIPTION: This public function returns the constant total voting power in the Sui system. It provides access to the TOTAL_VOTING_POWER constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic fun total_voting_power(): u64 {\n    TOTAL_VOTING_POWER\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Helm Chart Template\nDESCRIPTION: This command renders the Helm chart template for debugging purposes. It's useful to ensure changes to the values.yaml file still produce a valid template before deployment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/helm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm template <chart-name> --debug\n```\n\n----------------------------------------\n\nTITLE: Defining Disabled Verify zklogin ID Function in Move\nDESCRIPTION: The verify_zklogin_id function is intended to perform verification of a zklogin identity using details like key claim name, key claim value, issuer, audience, and a pin hash. The function is disabled as per the current implementation. Dependencies include std::string::String and sui::tx_context::TxContext. The function does not perform any verification as it asserts false with EFunctionDisabled.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_id.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun verify_zklogin_id(\n    _key_claim_name: String,\n    _key_claim_value: String,\n    _issuer: String,\n    _audience: String,\n    _pin_hash: u256,\n    _ctx: &mut TxContext,\n) {\n    assert!(false, EFunctionDisabled);\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Per-Type Config Mutably in Sui Deny List (Move)\nDESCRIPTION: Function to borrow a mutable reference to a Config object for a specific type from the deny list. It takes the deny list, type index, and type key as parameters and returns a mutable reference to the Config.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\nfun borrow_per_type_config_mut(\n    deny_list: &mut DenyList,\n    per_type_index: u64,\n    per_type_key: vector<u8>,\n): &mut Config<ConfigWriteCap> {\n    let key = ConfigKey { per_type_index, per_type_key };\n    ofield::internal_borrow_mut(&mut deny_list.id, key)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset and Use Function in Rust\nDESCRIPTION: This snippet defines a module with an Asset struct and a function to use the asset by reference.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/simulating-refs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nmodule a_module {\n    struct Asset has key, store {\n        … // some data\n    }\n\n    public fun use_asset(asset: &Asset) {\n        …. // some code\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Specific Commit\nDESCRIPTION: This snippet is used to check out a specific branch, tag, or commit in the cloned Sui repository.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ git checkout [SHA|BRANCH|TAG]\n```\n\n----------------------------------------\n\nTITLE: Duplicate Validator Check Function in Move\nDESCRIPTION: Checks if a new validator is a duplicate of any existing validators in a vector by counting matches.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_27\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun is_duplicate_validator(\n    validators: &vector<Validator>,\n    new_validator: &Validator,\n): bool {\n    count_duplicates_vec(validators, new_validator) > 0\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Migrating Database with Diesel\nDESCRIPTION: Commands to set up and run database migrations using Diesel for the sui-graphql-rpc project. Requires a specified DATABASE_URL and migration directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-rpc/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndiesel setup --database-url=\"<DATABASE_URL>\" --migration-dir=migrations\n```\n\nLANGUAGE: shell\nCODE:\n```\ndiesel migration run --database-url=\"<DATABASE_URL>\" --migration-dir=migrations\n```\n\n----------------------------------------\n\nTITLE: Example of Named Address Usage in Function\nDESCRIPTION: Shows how named addresses are used in function calls and how they are substituted with their numerical values during compilation. This demonstrates the equivalence between using named addresses and their numerical values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/modules.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nfun example() {\n    my_addr::m::foo(@my_addr);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project with Verbose Output\nDESCRIPTION: Command to build the Sui project with verbose (-v) flag enabled to show detailed build output\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/circular_dependencies/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuild -v\n```\n\n----------------------------------------\n\nTITLE: U256 Integer Operations in Move\nDESCRIPTION: The 0x1::u256 module provides utility functions for working with u256 integers, including bitwise operations, math utilities, and conversion functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_49\n\nLANGUAGE: move\nCODE:\n```\n// U256 integer operations\n0x1::u256::bitwise_not      // public fun\n0x1::u256::max              // public fun\n0x1::u256::min              // public fun\n0x1::u256::diff             // public fun\n0x1::u256::divide_and_round_up // public fun\n0x1::u256::pow              // public fun\n0x1::u256::try_as_u8        // public fun\n0x1::u256::try_as_u16       // public fun\n0x1::u256::try_as_u32       // public fun\n0x1::u256::try_as_u64       // public fun\n0x1::u256::try_as_u128      // public fun\n0x1::u256::to_string        // public fun\n```\n\n----------------------------------------\n\nTITLE: Installing DeepBookV3 SDK with npm\nDESCRIPTION: Command to install the DeepBookV3 SDK package from npm registry.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @mysten/deepbook-v3\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Index of Bytes in Move\nDESCRIPTION: Native function for finding the index of a substring within a byte vector. This is an internal implementation used for string operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\nnative fun internal_index_of(v: &vector<u8>, r: &vector<u8>): u64;\n```\n\n----------------------------------------\n\nTITLE: Setting Reference Gas Price with Sui Client\nDESCRIPTION: This shell command updates the gas price quote for the next epoch using the Sui client. It is dependent on having `sui` installed and requires specifying the package ID, module, function, arguments, and gas budget. Primary input is the new gas price for the next epoch, and its output affects transaction fee calculations across the network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sui client call --package <PACKAGE-ID> --module sui_system --function request_set_gas_price --args 0x5 \\\"42\\\" --gas-budget <GAS-AMOUNT>\n```\n\n----------------------------------------\n\nTITLE: Leading Zeros Counter Implementation\nDESCRIPTION: Utility function that counts leading zeros in a u128 number using bitwise operations\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/math.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun count_leading_zeros(mut x: u128): u8 {\n    if (x == 0) {\n        128\n    } else {\n        let mut n: u8 = 0;\n        if (x & 0xFFFFFFFFFFFFFFFF0000000000000000 == 0) {\n            x = x << 64;\n            n = n + 64;\n        };\n        if (x & 0xFFFFFFFF000000000000000000000000 == 0) {\n            x = x << 32;\n            n = n + 32;\n        };\n        if (x & 0xFFFF0000000000000000000000000000 == 0) {\n            x = x << 16;\n            n = n + 16;\n        };\n        if (x & 0xFF000000000000000000000000000000 == 0) {\n            x = x << 8;\n            n = n + 8;\n        };\n        if (x & 0xF0000000000000000000000000000000 == 0) {\n            x = x << 4;\n            n = n + 4;\n        };\n        if (x & 0xC0000000000000000000000000000000 == 0) {\n            x = x << 2;\n            n = n + 2;\n        };\n        if (x & 0x80000000000000000000000000000000 == 0) {\n            n = n + 1;\n        };\n        n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Leaf Node in Critbit Tree - Move Implementation\nDESCRIPTION: Inserts a new leaf node with key-value pair into the Critbit tree. Handles edge cases like first insertion, maintains tree properties, and updates parent-child relationships. Returns the index of inserted leaf.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun insert_leaf<V: store>(tree: &mut CritbitTree<V>, key: u64, value: V): u64 {\n    let new_leaf = Leaf<V>{\n        key,\n        value,\n        parent: PARTITION_INDEX,\n    };\n    let new_leaf_index = tree.next_leaf_index;\n    tree.next_leaf_index = tree.next_leaf_index + 1;\n    assert!(new_leaf_index < MAX_CAPACITY - 1, EExceedCapacity);\n    table::add(&mut tree.leaves, new_leaf_index, new_leaf);\n    let closest_leaf_index = get_closest_leaf_index_by_key(tree, key);\n    // Handle the first insertion\n    if (closest_leaf_index == PARTITION_INDEX) {\n        assert!(new_leaf_index == 0, ETreeNotEmpty);\n        tree.root = MAX_U64 - new_leaf_index;\n        tree.min_leaf = new_leaf_index;\n        tree.max_leaf = new_leaf_index;\n        return 0\n    };\n    let closest_key = table::borrow(&tree.leaves, closest_leaf_index).key;\n    assert!(closest_key != key, EKeyAlreadyExist);\n    let critbit = 64 - (count_leading_zeros((closest_key ^ key) as u128) - 64);\n    let new_mask = 1u64 << (critbit - 1);\n    let new_internal_node= InternalNode {\n        mask: new_mask,\n        left_child: PARTITION_INDEX,\n        right_child: PARTITION_INDEX,\n        parent: PARTITION_INDEX,\n    };\n    let new_internal_node_index = tree.next_internal_node_index;\n    tree.next_internal_node_index = tree.next_internal_node_index + 1;\n    table::add(&mut tree.internal_nodes, new_internal_node_index, new_internal_node);\n    let mut ptr = tree.root;\n    let mut new_internal_node_parent_index = PARTITION_INDEX;\n    while (ptr < PARTITION_INDEX) {\n        let internal_node = table::borrow(&tree.internal_nodes, ptr);\n        if (new_mask > internal_node.mask) {\n            break\n        };\n        new_internal_node_parent_index = ptr;\n        if (key & internal_node.mask == 0) {\n            ptr = internal_node.left_child;\n        } else {\n            ptr = internal_node.right_child;\n        };\n    };\n    if (new_internal_node_parent_index == PARTITION_INDEX){\n        tree.root = new_internal_node_index;\n    } else{\n        let is_left_child = is_left_child(tree, new_internal_node_parent_index, ptr);\n        update_child(tree, new_internal_node_parent_index, new_internal_node_index, is_left_child);\n    };\n    let is_left_child = new_mask & key == 0;\n    update_child(tree, new_internal_node_index, MAX_U64 - new_leaf_index, is_left_child);\n    update_child(tree, new_internal_node_index, ptr, !is_left_child);\n    if (table::borrow(&tree.leaves, tree.min_leaf).key > key) {\n        tree.min_leaf = new_leaf_index;\n    };\n    if (table::borrow(&tree.leaves, tree.max_leaf).key < key) {\n        tree.max_leaf = new_leaf_index;\n    };\n    new_leaf_index\n}\n```\n\n----------------------------------------\n\nTITLE: Updating P2P Address for Next Epoch in Move\nDESCRIPTION: This function updates the P2P address of a validator for the next epoch. It validates the address length and stores it in the next_epoch_p2p_address field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_80\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun update_next_epoch_p2p_address(self: &mut Validator, p2p_address: vector<u8>) {\n    assert!(\n        p2p_address.length() <= MAX_VALIDATOR_METADATA_LENGTH,\n        EValidatorMetadataExceedingLengthLimit,\n    );\n    let p2p_address = p2p_address.to_ascii_string().to_string();\n    self.metadata.next_epoch_p2p_address = option::some(p2p_address);\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing build-essential on Linux\nDESCRIPTION: Command to install build-essential on Linux systems using apt-get. This package provides the necessary build tools for compiling software.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo apt-get install build-essential\n```\n\n----------------------------------------\n\nTITLE: Scoped Use Declarations in Move\nDESCRIPTION: Demonstrates how aliases introduced by 'use' in an expression block are removed at the end of that block.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/uses.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\nmodule a::example {\n    fun new_vec(): vector<Option<u8>> {\n        let result = {\n            use std::vector::push_back;\n            use std::option::{Option, some, none};\n\n            let mut v = vector[];\n            push_back(&mut v, some(0));\n            push_back(&mut v, none());\n            v\n        };\n        result\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Move.toml Manifest File Syntax\nDESCRIPTION: Comprehensive syntax for the Move.toml package manifest file, showing all possible sections and fields including package metadata, dependencies, and address definitions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = <string>\nedition* = <string>      # e.g., \"2024.alpha\" to use the Move 2024 edition,\n                         # currently in alpha. Will default to the latest stable edition if not specified.\nlicense* = <string>              # e.g., \"MIT\", \"GPL\", \"Apache 2.0\"\nauthors* = [<string>,+]  # e.g., [\"Joe Smith (joesmith@noemail.com)\", \"John Snow (johnsnow@noemail.com)\"]\n\n# Additional fields may be added to this section by external tools. E.g., on Sui the following sections are added:\npublished-at* = \"<hex-address>\" # The address that the package is published at. Should be set after the first publication.\n\n[dependencies] # (Optional section) Paths to dependencies \n# One or more lines declaring dependencies in the following format\n\n# ##### Local Dependencies #####\n# For local dependencies use `local = path`. Path is relative to the package root\n# Local = { local = \"../path/to\" }\n# To resolve a version conflict and force a specific version for dependency\n# override you can use `override = true`\n# Override = { local = \"../conflicting/version\", override = true }\n# To instantiate address values in a dependency, use `addr_subst`\n<string> = { \n    local = <string>,\n    override* = <bool>,\n    addr_subst* = { (<string> = (<string> | \"<hex_address>\"))+ } \n}\n\n# ##### Git Dependencies #####\n# For remote import, use the `{ git = \"...\", subdir = \"...\", rev = \"...\" }`.\n# Revision must be supplied, it can be a branch, a tag, or a commit hash.\n# If no `subdir` is specified, the root of the repository is used.\n# MyRemotePackage = { git = \"https://some.remote/host.git\", subdir = \"remote/path\", rev = \"main\" }\n<string> = { \n    git = <URL ending in .git>,\n    subdir=<path to dir containing Move.toml inside git repo>,\n    rev=<git commit hash>,\n    override* = <bool>,\n    addr_subst* = { (<string> = (<string> | \"<hex_address>\"))+ }\n}\n\n[addresses]  # (Optional section) Declares named addresses in this package\n# One or more lines declaring named addresses in the following format\n# Addresses that match the name of the package must be set to `\"0x0\"` or they will be unable to be published.\n<addr_name> = \"_\" | \"<hex_address>\" # e.g., std = \"_\" or my_addr = \"0xC0FFEECAFE\"\n\n# Named addresses will be accessible in Move as `@name`. They're also exported:\n# for example, `std = \"0x1\"` is exported by the Standard Library.\n# alice = \"0xA11CE\"\n\n[dev-dependencies] # (Optional section) Same as [dependencies] section, but only included in \"dev\" and \"test\" modes\n# The dev-dependencies section allows overriding dependencies for `--test` and\n# `--dev` modes. You can e.g., introduce test-only dependencies here.\n# Local = { local = \"../path/to/dev-build\" }\n<string> = { \n    local = <string>,\n    override* = <bool>,\n    addr_subst* = { (<string> = (<string> | \"<hex_address>\"))+ } \n}\n<string> = { \n    git = <URL ending in .git>,\n    subdir=<path to dir containing Move.toml inside git repo>,\n    rev=<git commit hash>,\n    override* = <bool>,\n    addr_subst* = { (<string> = (<string> | \"<hex_address>\"))+ }\n}\n\n[dev-addresses] # (Optional section) Same as [addresses] section, but only included in \"dev\" and \"test\" modes\n# The dev-addresses section allows overwriting named addresses for the `--test`\n# and `--dev` modes.\n<addr_name> = \"<hex_address>\" # e.g., alice = \"0xB0B\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Difference Between Two u8 Values\nDESCRIPTION: The diff function returns the absolute value of the difference between two u8 values using the std::macros::num_diff macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun diff(x: u8, y: u8): u8 {\n    std::macros::num_diff!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing division with rounding up for u8 values\nDESCRIPTION: Calculates x / y but rounds up the result instead of truncating, using the std::macros::num_divide_and_round_up macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_and_round_up(x: u8, y: u8): u8 {\n    std::macros::num_divide_and_round_up!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Finding maximum between two u128 values\nDESCRIPTION: Returns the larger of two u128 values using the num_max macro from std::macros.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max(x: u128, y: u128): u128 {\n    std::macros::num_max!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Building eBPF Component in Bash\nDESCRIPTION: Command to build the eBPF component of the nodefw project. Can be used with --release flag for release builds and --target flag to specify architecture.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/bpf/nodefw/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo bpf build-ebpf\n```\n\n----------------------------------------\n\nTITLE: Restrictions on Equality Operations with Non-Drop Types\nDESCRIPTION: Example showing why types without the drop ability cannot be directly compared using equality operations. This restriction prevents accidental destruction of values that must be explicitly managed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/equality.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::example {\n    public struct Coin has store { value: u64 }\n    fun invalid(c1: Coin, c2: Coin) {\n        c1 == c2 // ERROR!\n//      ^^    ^^ These assets would be destroyed!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wrapper Struct\nDESCRIPTION: A wrapper struct used to encapsulate field names for dynamic object fields.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Wrapper<Name> has copy, drop, store {\n    name: Name\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EUnknownRequirement Constant in Move\nDESCRIPTION: Defines a constant EUnknownRequirement, indicating that a rule is not set within the TransferPolicy. This constant is intended for error checking functionalities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\nconst EUnknownRequirement: u64 = 2;\n```\n\n----------------------------------------\n\nTITLE: Minting Token in Move\nDESCRIPTION: Mints a Token with a given amount using the TreasuryCap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_34\n\nLANGUAGE: Move\nCODE:\n```\npublic fun mint<T>(cap: &mut TreasuryCap<T>, amount: u64, ctx: &mut TxContext): Token<T> {\n    let balance = cap.supply_mut().increase_supply(amount);\n    Token { id: object::new(ctx), balance }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Move Unit Tests with Debugging\nDESCRIPTION: Command to run Move unit tests, which will execute the contract including the debug statements and show the output.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/debug.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sui move test\n```\n\n----------------------------------------\n\nTITLE: Getting ASCII String Length in Move\nDESCRIPTION: Returns the length of a string in bytes. This function takes a reference to a String and returns its length as a u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun length(string: &String): u64 {\n    string.as_bytes().length()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Print Function for Debug in Move\nDESCRIPTION: Defines a native generic print function that takes a reference to any type and outputs it for debugging purposes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/debug.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic native fun print<T>(x: &T);\n```\n\n----------------------------------------\n\nTITLE: Accessing Mutable UID Internally in Sui Kiosk (Move)\nDESCRIPTION: This internal function provides mutable access to the UID of the Kiosk. It's part of the package-level API.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_31\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun uid_mut_internal(self: &mut Kiosk): &mut UID {\n    &mut self.id\n}\n```\n\n----------------------------------------\n\nTITLE: Object and ID Management in Sui\nDESCRIPTION: Functions and structures for managing object IDs and UIDs, including creation, deletion, and conversion operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic struct ID(0x2::object)\npublic struct UID(0x2::object)\npublic fun id_to_bytes(0x2::object)\npublic fun id_to_address(0x2::object)\npublic fun id_from_bytes(0x2::object)\npublic fun id_from_address(0x2::object)\nfun sui_system_state(0x2::object)\npublic(package) fun clock(0x2::object)\npublic(package) fun authenticator_state(0x2::object)\npublic(package) fun randomness_state(0x2::object)\npublic(package) fun sui_deny_list_object_id(0x2::object)\nfun bridge(0x2::object)\npublic fun uid_as_inner(0x2::object)\npublic fun uid_to_inner(0x2::object)\npublic fun uid_to_bytes(0x2::object)\npublic fun uid_to_address(0x2::object)\npublic fun new(0x2::object)\npublic fun delete(0x2::object)\npublic fun id(0x2::object)\npublic fun borrow_id(0x2::object)\npublic fun id_bytes(0x2::object)\npublic fun id_address(0x2::object)\nfun borrow_uid(0x2::object)\npublic(package) fun new_uid_from_hash(0x2::object)\nfun delete_impl(0x2::object)\nfun record_new_uid(0x2::object)\n```\n\n----------------------------------------\n\nTITLE: Creating Optional ASCII String from Bytes in Move\nDESCRIPTION: Function that attempts to convert a vector of bytes into an ASCII String. Returns Some(String) if all bytes are valid ASCII, None otherwise.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic fun try_string(bytes: vector<u8>): Option<String> {\n    let is_valid = bytes.all!(|byte| is_valid_char(*byte));\n    if (is_valid) option::some(String { bytes }) else option::none()\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Report Transaction Output\nDESCRIPTION: Example transaction output showing the details of a validator report submission including gas payments, transaction kind, and system call commands\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/validator.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n----- Transaction Digest ----\n8jVYrpuRBmdSLP37MsQGRqUqE3kE2m8XiSS4TG4aJwXf\n\n----- Transaction Data ----\n╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Transaction Data                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \t │\n├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ Sender: 0xf...3d9                                                                                                                                                                                                                                                                                                                                                                                                                             \t                                                         │\n│ Gas Owner: 0xf...3d9                                                                                                                                                                                                                                                                                                                                                                                                                          \t                                                         │\n│ Gas Budget: 200000000 MIST                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \t │\n│ Gas Price: 1000 MIST                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \t │\n│ Gas Payment:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \t │\n│  ┌──                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \t │\n│  │ ID: 0x8...19e                                                                                                                                                                                                                                                                                                                                                                                                                              \t                                                         │\n│  │ Version: 16                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \t │\n│  │ Digest: 4WQp6FYctutMFzf6f2EX68xut71AMubewJ6c7GxpzX7e                                                                                                                                                                                                                                                                                                                                                                                                                                                \t │\n│  └──                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \t │\n│                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \t │\n│ Transaction Kind : Programmable                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \t │\n│ Inputs: [Object(SharedObject { object_id: 0x0...005, initial_shared_version: SequenceNumber(1), mutable: true }), Object(ImmOrOwnedObject { object_id: 0x4...dbe, version: SequenceNumber(16), digest: o#4yDkecsKPe8SnacWdECmq1yVDt7MzvpXCxbRGs74PGaB }), Pure(SuiPureValue { value_type: Some(Address), value: \"0xf...3d9\" })]                                                                                                                                                                            │\n│ Commands: [                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \t │\n│   MoveCall(0x0...003::sui_system::report_validator(Input(0),Input(1),Input(2))),                                                                                                                                                                                                                                                                                                                                                              \t                                                         │\n│ ]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \t │\n```\n\n----------------------------------------\n\nTITLE: Using Member Aliases in Move Functions\nDESCRIPTION: Illustrates the use of aliased module members to create a vector of optional values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/uses.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nuse std::vector::push_back;\nuse std::option::some as s;\n\nfun new_vec(): vector<std::option::Option<u8>> {\n    let mut v = vector[];\n    vector::push_back(&mut v, s(0));\n    vector::push_back(&mut v, std::option::none());\n    v\n}\n```\n\n----------------------------------------\n\nTITLE: FastPay: High-Performance Settlement Protocol\nDESCRIPTION: Distributed validator settlement system using Byzantine Consistent Broadcast, enabling low-latency payment confirmation and finality with potential for unbounded horizontal scalability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/research-papers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: research\nCODE:\n```\nFastPay: Byzantine-resistant payment settlement infrastructure\n```\n\n----------------------------------------\n\nTITLE: Calculating Single Depth at Tick Price (Move)\nDESCRIPTION: Internal function to retrieve the depth of orders at a single tick price. Takes open orders, price, and timestamp as inputs. Returns the total quantity of valid orders at the given price.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_31\n\nLANGUAGE: Move\nCODE:\n```\nfun get_level2_book_status(\n    open_orders: &CritbitTree<TickLevel>,\n    price: u64,\n    time_stamp: u64\n): u64 {\n    let tick_level = critbit::borrow_leaf_by_key(open_orders, price);\n    let tick_open_orders = &tick_level.open_orders;\n    let mut depth = 0;\n    let mut order_id = linked_table::front(tick_open_orders);\n    let mut order: &Order;\n    while (!option::is_none(order_id)) {\n        order = linked_table::borrow(tick_open_orders, *option::borrow(order_id));\n        if (order.expire_timestamp > time_stamp) depth = depth + order.quantity;\n        order_id = linked_table::next(tick_open_orders, *option::borrow(order_id));\n    };\n    depth\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated OrderFilled Event in Move\nDESCRIPTION: Defines the deprecated OrderFilled event struct which represents an order being filled in the system. It includes details about the filled order such as quantity filled and remaining.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic struct OrderFilled<phantom BaseAsset, phantom QuoteAsset> has copy, drop, store {\n    pool_id: sui::object::ID,\n    order_id: u64,\n    is_bid: bool,\n    owner: sui::object::ID,\n    total_quantity: u64,\n    base_asset_quantity_filled: u64,\n    base_asset_quantity_remaining: u64,\n    price: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Gas Price Survey Quote\nDESCRIPTION: Command to update a validator's gas price survey quote using sui_system::request_set_gas_price function. Requires valid UnverifiedValidatorOperationCap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call --package 0x3 --module sui_system --function request_set_gas_price --args 0x5 {cap_object_id} {new_gas_price} --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Adding Stake to Validator Pool\nDESCRIPTION: Function to add user stake to a validator's staking pool using a single SUI coin. Takes a SUI coin, validator address, and transaction context as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\npublic fun request_add_stake(\n   self: &mut SuiSystemState,\n   stake: Coin<SUI>,\n   validator_address: address,\n   ctx: &mut TxContext,\n) {\n   validator_set::request_add_stake(\n       &mut self.validators,\n       validator_address,\n       coin::into_balance(stake),\n       option::none(),\n       ctx,\n   );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitwise Not Operation for u256 in Move\nDESCRIPTION: Returns the bitwise NOT of a u256 value. This function inverts all bits, changing each 1 to 0 and each 0 to 1, by XORing with the maximum possible u256 value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bitwise_not(x: u256): u256 {\n    x ^ max_value!()\n}\n```\n\n----------------------------------------\n\nTITLE: Get G2 Generator in Sui Framework - Move\nDESCRIPTION: The g2_generator function retrieves the generator element of the G2 group by decoding the specific generator bytes into an Element of type G2.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_28\n\nLANGUAGE: move\nCODE:\n```\npublic fun g2_generator(): Element<G2> {\n    let generator = G2_GENERATOR_BYTES;\n    group_ops::from_bytes(G2_TYPE, &generator, true)\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Constraints in Function Calls with Drop Ability in Move\nDESCRIPTION: Shows how constraints are checked for function calls, focusing on the 'drop' ability in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\nfun unsafe_consume<T>(x: T) {\n    // ERROR! x does not have 'drop'\n}\n\nfun consume<T: drop>(x: T) {\n    // valid, x will be dropped automatically\n}\n\npublic struct NoAbilities {}\n\nfun foo() {\n    let r = NoAbilities {};\n    consume<NoAbilities>(NoAbilities);\n    //      ^^^^^^^^^^^ ERROR! NoAbilities does not have 'drop'\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum U64 Value in Move\nDESCRIPTION: Returns the maximum value for a u64 using a macro function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun max_value(): u64 {\n    0xFFFF_FFFF_FFFF_FFFF\n}\n```\n\n----------------------------------------\n\nTITLE: Switch to Environment using Sui CLI\nDESCRIPTION: This command switches the active environment to the specified environment alias, changing the network the CLI interacts with.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client switch --env ENV_ALIAS\"\n```\n\n----------------------------------------\n\nTITLE: If-Else Expression in Move\nDESCRIPTION: Conditional expression with else clause that ensures y doesn't exceed 10.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/conditionals.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nif (y <= 10) y = y + 1 else y = 10\n```\n\n----------------------------------------\n\nTITLE: Listing an Asset for Sale on Sui Marketplace in TypeScript\nDESCRIPTION: Code snippet from listItem.ts showing how to list a tokenized asset for sale in a kiosk. The price is set to 100000, and the transaction is created using kioskTx.list() method.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_38\n\nLANGUAGE: rust\nCODE:\n```\nconst SALE_PRICE = '100000';\n    kioskTx\n      .list({\n          itemId,\n          itemType,\n          price: SALE_PRICE,\n      })\n      .finalize();\n```\n\n----------------------------------------\n\nTITLE: Native String Index Search Implementation\nDESCRIPTION: A native function that searches for a byte pattern within a vector of bytes, returning a u64 index.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_15\n\nLANGUAGE: move\nCODE:\n```\nnative fun internal_index_of(v: &vector<u8>, r: &vector<u8>): u64;\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Locked Objects from API\nDESCRIPTION: This hook fetches non-deleted system Locked objects from the API in a paginated manner and ensures the latest on-chain state is displayed. It uses tanstack's useInfiniteQuery for API data fetching.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n// useGetLockedObject.ts content here\n```\n\n----------------------------------------\n\nTITLE: Custom Vote Implementation for DeepBookMarketMaker\nDESCRIPTION: Example of a custom vote implementation for the DeepBookMarketMaker class, including both the function signature and a concrete implementation that votes on a specific proposal using predefined pool and manager keys.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/staking-governance.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nvote = (\n  poolKey: string, \n  balanceManagerKey: string, \n  proposal_id: string\n) => (tx: Transaction) => {}\n\n// Custom function to vote in DeepBookMarketMaker class\nvote = (tx: Transaction) => {\n  const poolKey = 'DBUSDT_DBUSDC';\n  const balanceManagerKey = 'MANAGER_1';\n  const proposalID = '0x123456789';\n  tx.add(this.governance.vote(poolKey, balanceManagerKey, proposalID));\n};\n```\n\n----------------------------------------\n\nTITLE: Finding String Index in Move\nDESCRIPTION: Computes the index of the first occurrence of a string within another string. Returns the length of the string if no occurrence is found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun index_of(s: &String, r: &String): u64 {\n    internal_index_of(&s.bytes, &r.bytes)\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating absolute difference between u8 values\nDESCRIPTION: Returns the absolute value of the difference between two u8 values using the std::macros::num_diff macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun diff(x: u8, y: u8): u8 {\n    std::macros::num_diff!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Option with Default in Move\nDESCRIPTION: Implements destroy_or macro for Option types, returning the contained value or a default if absent, mirroring Rust's unwrap_or. It optimizes by avoiding default evaluation unless needed. The macro requires std::option and leverages Option-specific functions like destroy_some and destroy_none. The inputs are an Option and a default value, with the output being the contained value or default.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_29\n\nLANGUAGE: move\nCODE:\n```\n<b>public</b> <b>macro</b> <b>fun</b> <a href=\"../std/option.md#std_option_destroy_or\">destroy_or</a>&lt;$T&gt;($o: <a href=\"../std/option.md#std_option_Option\">Option</a>&lt;$T&gt;, $default: $T): $T {\n    <b>let</b> o = $o;\n    <b>if</b> (o.<a href=\"../std/option.md#std_option_is_some\">is_some</a>()) {\n        o.<a href=\"../std/option.md#std_option_destroy_some\">destroy_some</a>()\n    } <b>else</b> {\n        o.<a href=\"../std/option.md#std_option_destroy_none\">destroy_none</a>();\n        $default\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ValidatorWrapper in Move\nDESCRIPTION: Defines the ValidatorWrapper struct which serves as a container for versioned validators. The inner field is set up to hold an object of type Versioned, supporting version tracking.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_wrapper.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic struct ValidatorWrapper has store\n{\n\n    inner: sui::versioned::Versioned\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Verifying zkLogin Signature using Sui Keytool CLI\nDESCRIPTION: This command demonstrates how to use the Sui Keytool CLI to verify a zkLogin signature. It requires the signature, transaction bytes, intent scope, network, and current epoch as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/zklogin.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ sui keytool zk-login-sig-verify --sig $ZKLOGIN_SIG --bytes $BYTES --intent-scope 3 --network devnet --curr-epoch 3\n```\n\n----------------------------------------\n\nTITLE: Using 'public use fun' for Method Name Consistency Across Types\nDESCRIPTION: Example demonstrating how to use 'public use fun' to create consistent method names for different types within the same module. This allows multiple types to have methods with the same name.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\nmodule a::shapes {\n\n    public struct Rectangle { base: u64, height: u64 }\n    public struct Box { base: u64, height: u64, depth: u64 }\n\n    // Rectangle and Box can have methods with the same name\n\n    public use fun rectangle_base as Rectangle.base;\n    public fun rectangle_base(rectangle: &Rectangle): u64 {\n        rectangle.base\n    }\n\n    public use fun box_base as Box.base;\n    public fun box_base(box: &Box): u64 {\n        box.base\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Active Sui Network Environment\nDESCRIPTION: This snippet demonstrates how to change the current active network using the 'sui client switch' command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client switch --env mainnet\nActive environment switched to [mainnet]\n```\n\n----------------------------------------\n\nTITLE: Implementing Zero-Based Inclusive Iteration Macro in Move\nDESCRIPTION: A convenience macro that iterates from 0 (inclusive) to stop (inclusive) and applies a function to each value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do_eq<$T, $R: drop>($stop: $T, $f: |$T| -> $R) {\n    range_do_eq!(0, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting U256 to String\nDESCRIPTION: Converts a u256 value to its string representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_string(x: u256): String {\n    std::macros::num_to_string!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Key Pairs in Local Wallet\nDESCRIPTION: This snippet demonstrates how to use the 'sui keytool list' command to output all Sui addresses from the local keystore file. It displays the Sui address, public key, key scheme, and other relevant information for each key pair.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/keytool.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sui keytool list\n```\n\nLANGUAGE: shell\nCODE:\n```\n╭────────────────────────────────────────────────────────────────────────────────────────────╮\n│ ╭─────────────────┬──────────────────────────────────────────────────────────────────────╮ │\n│ │ suiAddress      │  0x3047f142a84297a42a65fb0a8c7a716d9d1b0bd0413d6bfa5ddfec45df175235  │ │\n│ │ publicBase64Key │  AHsXwcxaWNaNtCIIszwu7V2G6HO8aNM1598w/8y0zI5q                        │ │\n│ │ keyScheme       │  ed25519                                                             │ │\n│ │ flag            │  0                                                                   │ │\n│ │ peerId          │  7b17c1cc5a58d68db42208b33c2eed5d86e873bc68d335e7df30ffccb4cc8e6a    │ │\n│ ╰─────────────────┴──────────────────────────────────────────────────────────────────────╯ │\n│ ╭─────────────────┬──────────────────────────────────────────────────────────────────────╮ │\n│ │ suiAddress      │  0x514692f08249c3e9957799ce29074695840422564bff85e424b56de462913e0d  │ │\n│ │ publicBase64Key │  AKJCGi8R8TslhYdO2OHIjI6rbr+to1eR+vlOjigLY6SX                        │ │\n│ │ keyScheme       │  ed25519                                                             │ │\n│ │ flag            │  0                                                                   │ │\n│ │ peerId          │  a2421a2f11f13b2585874ed8e1c88c8eab6ebfada35791faf94e8e280b63a497    │ │\n│ ╰─────────────────┴──────────────────────────────────────────────────────────────────────╯ │\n╰────────────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Bag Data Structure Operations in Sui\nDESCRIPTION: Functions for managing the Bag data structure, which allows storing heterogeneous elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Bag(0x2::bag)\npublic fun new(0x2::bag)\npublic fun add(0x2::bag)\npublic fun borrow(0x2::bag)\npublic fun borrow_mut(0x2::bag)\npublic fun remove(0x2::bag)\npublic fun contains(0x2::bag)\npublic fun contains_with_type(0x2::bag)\npublic fun length(0x2::bag)\npublic fun is_empty(0x2::bag)\npublic fun destroy_empty(0x2::bag)\n```\n\n----------------------------------------\n\nTITLE: Invalid Cyclic Friend Declarations in Move\nDESCRIPTION: Example of invalid friend declarations that create a cyclic dependency between modules, which is not allowed in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/friends.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x2::a {\n    use 0x2::c;\n    friend 0x2::b;\n\n    public fun a() {\n        c::c()\n    }\n}\n\nmodule 0x2::b {\n    friend 0x2::c; // ERROR!\n//         ^^^^^^ This friend relationship creates a dependency cycle: '0x2::b' is a friend of '0x2::a' uses '0x2::c' is a friend of '0x2::b'\n}\n\nmodule 0x2::c {\n    public fun c() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Swap and Remove in TableVec in Move\nDESCRIPTION: The `swap_remove` function replaces the `i`th element of TableVec `t` with the last element and removes it, optimizing for performance. It ensures that the index `i` is valid to prevent out-of-bounds errors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table_vec.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun swap_remove<Element: store>(t: &mut sui::table_vec::TableVec<Element>, i: u64): Element {\n    assert!(t.length() > i, EIndexOutOfBound);\n    let last_idx = t.length() - 1;\n    t.swap(i, last_idx);\n    t.pop_back()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponentiation Power Macro in Move\nDESCRIPTION: A macro that computes base raised to the power of exponent using the efficient binary exponentiation algorithm.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_pow($base: _, $exponent: u8): _ {\n    let mut base = $base;\n    let mut exponent = $exponent;\n    let mut res = 1;\n    while (exponent >= 1) {\n        if (exponent % 2 == 0) {\n            base = base * base;\n            exponent = exponent / 2;\n        } else {\n            res = res * base;\n            exponent = exponent - 1;\n        }\n    };\n    res\n}\n```\n\n----------------------------------------\n\nTITLE: Subtracting BLS12-381 G1 Elements\nDESCRIPTION: Performs subtraction of two BLS12-381 G1 group elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\npublic fun g1_sub(e1: &Element<G1>, e2: &Element<G1>): Element<G1> {\n    group_ops::sub(G1_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Get Validator Address By Pool ID\nDESCRIPTION: Retrieves a validator's address using their staking pool ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_34\n\nLANGUAGE: Move\nCODE:\n```\npublic fun validator_address_by_pool_id(wrapper: &mut SuiSystemState, pool_id: &ID): address {\n    wrapper.load_system_state_mut().validator_address_by_pool_id(pool_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator Metadata in Move\nDESCRIPTION: Obtains metadata about the validator. It returns a reference to the ValidatorMetadata associated with the Validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_43\n\nLANGUAGE: Move\nCODE:\n```\npublic fun metadata(self: &sui_system::validator::Validator): &sui_system::validator::ValidatorMetadata {\n    &self.metadata\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Leaf by Key in Critbit Tree\nDESCRIPTION: Provides immutable access to a leaf value in the critbit tree by its key. The function first searches for the leaf by key and asserts its existence before returning a reference to its value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_17\n\nLANGUAGE: move\nCODE:\n```\npublic fun borrow_leaf_by_key<V: store>(tree: & CritbitTree<V>, key: u64): &V {\n    let (is_exist, index) = find_leaf(tree, key);\n    assert!(is_exist, ELeafNotExist);\n    borrow_leaf_by_index(tree, index)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Module Constant Example in Move\nDESCRIPTION: Demonstrates a practical example of using constants in a module with a permission check.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/constants.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule a::example {\n    const MY_ADDRESS: address = @a;\n\n    public fun permissioned(addr: address) {\n        assert!(addr == MY_ADDRESS, 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Type Annotation for Vector Creation in Move\nDESCRIPTION: This snippet shows a case where manual type annotation is necessary for vector creation when the compiler cannot infer the element type due to lack of usage.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n\n    fun foo() {\n        let v = vector[]; // ERROR!\n        //            ^ The compiler cannot figure out the element type, since it is never used\n\n        let v = vector<u64>[];\n        //            ^~~~~ Must annotate manually in this case.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting/Unreporting Validators\nDESCRIPTION: Command to report or undo reporting of a validator using sui_system::report_validator/undo_report_validator function. Requires valid UnverifiedValidatorOperationCap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call --package 0x3 --module sui_system --function report_validator/undo_report_validator --args 0x5 {cap_object_id} {reportee_address} --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with pnpm\nDESCRIPTION: This command installs the necessary dependencies for the project using the pnpm package manager. It prepares the environment for running the Kiosk demo application.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/kiosk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Peeling Option from BCS in Move\nDESCRIPTION: A macro function for deserializing an Option<T> from BCS format. It takes a closure for peeling the inner value T and returns Some(T) if present, or None if not.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun peel_option<$T>($bcs: &mut BCS, $peel: |&mut BCS| -> $T): Option<$T> {\n    let bcs = $bcs;\n    if (bcs.peel_bool()) option::some($peel(bcs)) else option::none()\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating Validator Operation Cap in Sui\nDESCRIPTION: This command rotates the operation capability for a validator, creating a new Cap object and invalidating the old one. It uses the sui_system module to perform the rotation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsui client call --package 0x3 --module sui_system --function rotate_operation_cap --args 0x5 --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Basic Clock Test in Move\nDESCRIPTION: This test creates a Clock object, increments its timestamp, and then checks its value. It demonstrates how to use the testing functions for Clock objects in a Move test module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/access-time.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\n#[test]\nfun test_clock() {\n    let ctx = &mut tx_context::dummy();\n    let clock = create_for_testing(10000, ctx);\n    assert!(timestamp_ms(&clock) == 10000, 0);\n    increment_for_testing(&mut clock, 100);\n    assert!(timestamp_ms(&clock) == 10100, 1);\n    destroy_for_testing(clock);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Closure to Some Reference or Returning None in Sui Move\nDESCRIPTION: The 'and_ref' macro function applies a closure to the reference of a value if it's Some, otherwise returns None. It's similar to Rust's t.and_then(f). It takes a reference to an Option<T> and a closure as parameters, and returns an Option<U>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_19\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun and_ref<$T, $U>($o: &Option<$T>, $f: |&$T| -> Option<$U>): Option<$U> {\n    let o = $o;\n    if (o.is_some()) $f(o.borrow())\n    else none()\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator Staking Pool ID\nDESCRIPTION: Function to get the staking pool ID for a given validator address from the validator set.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\npublic fun validator_staking_pool_id(self: &ValidatorSet, validator_address: address): ID {\n    let validator = get_validator_ref(&self.active_validators, validator_address);\n    validator.staking_pool_id()\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v1.0.8\nDESCRIPTION: Version update entry showing dependency update to @mysten/sui v1.1.1\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.8\n\n### Patch Changes\n\n- Updated dependencies [101f1ff4b8]\n  - @mysten/sui@1.1.1\n```\n\n----------------------------------------\n\nTITLE: Expected Failure with Abort Code in Move Tests\nDESCRIPTION: Demonstrates how to use #[expected_failure(abort_code = <constant>)] to test for specific abort codes, including references to constants from other modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule pkg_addr::other_module {\n    const ENotFound: u64 = 1;\n    fun will_abort() {\n        abort ENotFound\n    }\n}\n\nmodule pkg_addr::my_module {\n    use pkg_addr::other_module;\n    const ENotFound: u64 = 1;\n\n    #[test]\n    #[expected_failure(abort_code = ENotFound)]\n    fun test_will_abort_and_pass() { abort ENotFound }\n\n    #[test]\n    #[expected_failure(abort_code = other_module::ENotFound)]\n    fun test_will_abort_and_pass() { other_module::will_abort() }\n\n    // FAIL: Will not pass since we are expecting the constant from the wrong module.\n    #[test]\n    #[expected_failure(abort_code = ENotFound)]\n    fun test_will_abort_and_pass() { other_module::will_abort() }\n}\n```\n\n----------------------------------------\n\nTITLE: UTF-8 String Operations in Move\nDESCRIPTION: The 0x1::string module provides a String struct and utility functions for working with UTF-8 encoded strings, including creation, manipulation, and conversion operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_44\n\nLANGUAGE: move\nCODE:\n```\n// UTF-8 String operations\n0x1::string::String          // public struct\n0x1::string::utf8            // public fun\n0x1::string::from_ascii      // public fun\n0x1::string::to_ascii        // public fun\n0x1::string::try_utf8        // public fun\n0x1::string::as_bytes        // public fun\n0x1::string::into_bytes      // public fun\n0x1::string::is_empty        // public fun\n0x1::string::length          // public fun\n0x1::string::append          // public fun\n0x1::string::append_utf8     // public fun\n0x1::string::insert          // public fun\n0x1::string::substring       // public fun\n0x1::string::index_of        // public fun\n0x1::string::internal_check_utf8 // fun (internal)\n0x1::string::internal_is_char_boundary // fun (internal)\n0x1::string::internal_sub_string // fun (internal)\n0x1::string::internal_index_of // fun (internal)\n0x1::string::bytes           // public fun\n0x1::string::sub_string      // public fun\n```\n\n----------------------------------------\n\nTITLE: Initial Sui Client Configuration Response\nDESCRIPTION: Error message shown when the Sui client configuration file doesn't exist, prompting user to connect to a Sui Full node server.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/initialize-sui-client-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nConfig file [\"<FILE-PATH>/.sui/sui_config/client.yaml\"] doesn't exist, do you want to connect to a Sui Full node server [y/N]?\n```\n\n----------------------------------------\n\nTITLE: u16 Square Root Implementation\nDESCRIPTION: Calculates the nearest lower integer square root for a u16 value. Includes handling for precision limitations with integer math.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u16.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sqrt(x: u16): u16 {\n    std::macros::num_sqrt!<u16, u32>(x, 16)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing gRPC services via grpcurl in Shell\nDESCRIPTION: This Shell command lists all gRPC services available on a Sui full node using grpcurl. It requires the <full node URL:port>, with the port usually being 443. The command's output will show available gRPC services like sui.rpc.v2beta.LedgerService.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/grpc-overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ grpcurl <full node URL:port> list\n```\n\n----------------------------------------\n\nTITLE: Checking if a Bit is Set in BitVector in Rust\nDESCRIPTION: Implements the is_index_set function to check if a specific bit in the BitVector is set. It returns true if the bit is set, false otherwise.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/bit_vector.md#2025-04-22_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun is_index_set(bitvector: &BitVector, bit_index: u64): bool {\n    assert!(bit_index < bitvector.bit_field.length(), EINDEX);\n    bitvector.bit_field[bit_index]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing square root for U16 values\nDESCRIPTION: Function that calculates the integer square root of a u16 value using the standard macros num_sqrt utility with type parameters for u16 and u32.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sqrt(x: u16): u16 {\n    std::macros::num_sqrt!<u16, u32>(x, 16)\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Mutable Bridge Inner State in Move\nDESCRIPTION: Loads and validates the inner state of the bridge with mutable access, ensuring version compatibility. Returns a mutable reference to BridgeInner.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\nfun load_inner_mut(bridge: &mut Bridge): &mut BridgeInner {\n    let version = bridge.inner.version();\n    assert!(version == CURRENT_VERSION, EWrongInnerVersion);\n    let inner: &mut BridgeInner = bridge.inner.load_value_mut();\n    assert!(inner.bridge_version == version, EWrongInnerVersion);\n    inner\n}\n```\n\n----------------------------------------\n\nTITLE: Running TiDB playground\nDESCRIPTION: This command starts a local TiDB playground environment using the `tiup` command-line tool. The playground provides a quick way to test and experiment with TiDB.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ntiup playground\n```\n\n----------------------------------------\n\nTITLE: Public(package) Function Visibility Example\nDESCRIPTION: Demonstrates the package-level visibility that restricts function calls to the same address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public(package) fun foo(): u64 { 0 }\n    fun calls_foo(): u64 { foo() } // valid\n}\n\nmodule a::n {\n    fun calls_m_foo(): u64 {\n        a::m::foo() // valid, also in `a`\n    }\n}\n\nmodule b::other {\n    fun calls_m_foo(): u64 {\n        b::m::foo() // ERROR!\n//      ^^^^^^^^^^^ 'foo' can only be called from a module in `a`\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Move.toml for Dependencies\nDESCRIPTION: Example of a Move.toml file configuration specifying dependencies and named addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[addresses]\nstd = \"0x1\" # Specify and assign 0x1 to the named address \"std\"\n\n[dependencies]\nMoveNursery = { git = \"https://github.com/move-language/move.git\", subdir = \"language/move-stdlib/nursery\", rev = \"main\" }\n```\n\n----------------------------------------\n\nTITLE: Checkpoint Admonition Box Example\nDESCRIPTION: This snippet demonstrates how to use the `:::checkpoint` admonition box to provide the status of a project within an end-to-end guide. It allows users to verify their progress against defined checkpoints, enabling easier debugging and troubleshooting. This element provides a visual cue and important guidance to users following a guide.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n:::checkpoint\n\nRun your app and make sure you can:\n\n- Create an NFT.\n- Initiate a trade.\n\n:::\n```\n\n----------------------------------------\n\nTITLE: String Index Search Implementation\nDESCRIPTION: Finds the first occurrence of a substring, returning the string length if not found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/string.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun index_of(s: &String, r: &String): u64 {\n    internal_index_of(&s.bytes, &r.bytes)\n}\n```\n\n----------------------------------------\n\nTITLE: Return Statement in Complex Control Flow\nDESCRIPTION: Demonstrates using return to exit from within nested control flow structures.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_22\n\nLANGUAGE: move\nCODE:\n```\nuse std::vector;\nuse std::option::{Self, Option};\nfun index_of<T>(v: &vector<T>, target: &T): Option<u64> {\n    let i = 0;\n    let n = vector::length(v);\n    while (i < n) {\n        if (vector::borrow(v, i) == target) return option::some(i);\n        i = i + 1\n    };\n\n    option::none()\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Coins in Move\nDESCRIPTION: Merges two Coins of the same type. This function consumes the second coin and adds its value to the first coin.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun join<T>(self: &mut Coin<T>, c: Coin<T>) {\n    let Coin { id, balance } = c;\n    id.delete();\n    self.balance.join(balance);\n}\n```\n\n----------------------------------------\n\nTITLE: Listing an Item in a Kiosk using Sui CLI\nDESCRIPTION: This snippet shows how to list an item for sale in a Sui Kiosk using the Sui CLI. It calls the 'list' function from the 'kiosk' module, specifying the kiosk ID, capability ID, item ID, price, and item type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call \\\n    --package 0x2 \\\n    --module kiosk \\\n    --function list \\\n    --args \"<KIOSK_ID>\" \"<CAP_ID>\" \"<ITEM_ID>\" \"<PRICE>\" \\\n    --type-args \"ITEM_TYPE\" \\\n    --gas-budget 1000000000\n```\n\n----------------------------------------\n\nTITLE: Creating BLS12381 Scalar from u64\nDESCRIPTION: This function initializes a BLS12381 scalar from a u64 integer. It ensures the integer is set as a prefix and then converts it into the respective scalar representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_from_u64\">scalar_from_u64</a>(x: u64): <a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_from_u64\">scalar_from_u64</a>(x: u64): Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt; {\n    <b>let</b> <b>mut</b> bytes = <a href=\"../sui/bls12381.md#sui_bls12381_SCALAR_ZERO_BYTES\">SCALAR_ZERO_BYTES</a>;\n    <a href=\"../sui/group_ops.md#sui_group_ops_set_as_prefix\">group_ops::set_as_prefix</a>(x, <b>true</b>, &<b>mut</b> bytes);\n    <a href=\"../sui/group_ops.md#sui_group_ops_from_bytes\">group_ops::from_bytes</a>(<a href=\"../sui/bls12381.md#sui_bls12381_SCALAR_TYPE\">SCALAR_TYPE</a>, &bytes, <b>true</b>)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ProofPoints from Bytes in Move\nDESCRIPTION: Creates a Groth16 ProofPoints structure from a vector of bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/groth16.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun proof_points_from_bytes(bytes: vector<u8>): ProofPoints {\n    ProofPoints { bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sqrt Function for u128 in Move\nDESCRIPTION: Deprecated sqrt_u128 function that returns the square root of a u128 value. Recommends using std::u128::sqrt instead.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/math.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sqrt_u128(x: u128): u128 {\n    x.sqrt()\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Swap Results in Escrow Test\nDESCRIPTION: Final part of the test to verify that ALICE has BOB's coin and vice versa. This demonstrates how to validate the outcome of a successful escrow swap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\n// now alice should have bob's coin and vice versa\ntest_scenario::next_tx(&mut scenario, BOB);\n{\n    // BOB has the 200 coin now\n    let coin = test_scenario::take_from_sender<Coin<SUI>>(&mut scenario);\n    assert!(coin::value(&coin) == 200, 0);\n    test_scenario::return_to_sender(&mut scenario, coin);\n    \n    // ALICE has the 100 coin now\n    test_scenario::next_tx(&mut scenario, ALICE);\n    let coin = test_scenario::take_from_sender<Coin<SUI>>(&mut scenario);\n    assert!(coin::value(&coin) == 100, 0);\n    test_scenario::return_to_sender(&mut scenario, coin);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Stake Implementation for DeepBookMarketMaker\nDESCRIPTION: Example of a custom stake implementation for the DeepBookMarketMaker class, including both the function signature and a concrete implementation that stakes 100 DEEP tokens using predefined pool and manager keys.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/staking-governance.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nstake = (\n  poolKey: string, \n  balanceManagerKey: string, \n  stakeAmount: number\n) => (tx: Transaction) => {}\n\n// Custom function to stake 100 DEEP in DeepBookMarketMaker class\nstake = (tx: Transaction) => {\n  const poolKey = 'DBUSDT_DBUSDC';\n  const balanceManagerKey = 'MANAGER_1';\n  tx.add(this.governance.stake(poolKey, balanceManagerKey, 100));\n};\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticatorStateInner Struct in Move\nDESCRIPTION: Defines the inner structure that contains the actual authenticator state data, including a list of active JWKs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct AuthenticatorStateInner has store {\n    version: u64,\n    active_jwks: vector<sui::authenticator_state::ActiveJwk>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sui Simulation Tests with Custom Seeds and Iterations\nDESCRIPTION: Examples of running simulation tests with specific seed values and iteration counts, showing how to configure the randomized test behavior.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-simulator/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ MSIM_TEST_SEED=1 MSIM_TEST_NUM=10 cargo simtest\n$ MSIM_TEST_SEED=2 MSIM_TEST_NUM=10 cargo simtest\n```\n\n----------------------------------------\n\nTITLE: Constructing Package Publication Transaction\nDESCRIPTION: Creates a transaction to publish the package with a Tuesday-only upgrade policy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Transaction } from '@mysten/sui/transactions';\n\nconst tx = new Transaction();\nconst packageUpgradeCap = tx.publish({ modules, dependencies });\nconst tuesdayUpgradeCap = tx.moveCall({\n\ttarget: `${POLICY_PACKAGE_ID}::day_of_week::new_policy`,\n\targuments: [\n\t\tpackageUpgradeCap,\n\t\ttx.pure(1), // Tuesday\n\t],\n});\n\ntx.transferObjects([tuesdayUpgradeCap], tx.pure(sender));\n```\n\n----------------------------------------\n\nTITLE: Executing Sui Validator Report Command Help\nDESCRIPTION: Shows help documentation for the sui validator report-validator command, including usage, arguments and options for reporting or un-reporting validators.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/validator.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ sui validator report-validator --help\n```\n\n----------------------------------------\n\nTITLE: Nested Imports in Move\nDESCRIPTION: Shows how to use nested imports to bring multiple names into scope with a single 'use' declaration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/uses.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nuse std::{\n    vector::{Self as vec, push_back},\n    string::{String, Self as str}\n};\n\nfun example(s: &mut String) {\n    let mut v = vec::empty();\n    push_back(&mut v, 0);\n    push_back(&mut v, 10);\n    str::append_utf8(s, v);\n}\n```\n\n----------------------------------------\n\nTITLE: Returning PCR Entries in Nitro Attestation\nDESCRIPTION: The function `pcrs` retrieves a list of mapping PCREntry containing the index and the PCR bytes from a given NitroAttestationDocument. It is part of the Sui framework and requires an instance of NitroAttestationDocument as input, returning a vector of PCREntry.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/nitro_attestation.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pcrs(attestation: &sui::nitro_attestation::NitroAttestationDocument): &vector<sui::nitro_attestation::PCREntry> {\n    &attestation.pcrs\n}\n```\n\n----------------------------------------\n\nTITLE: Using sui_getBalance in Rust to Track Address Balance\nDESCRIPTION: Queries an address' balance using the sui_sdk in Rust. Asynchronously retrieves balance details via Sui ClientBuilder with a specified full node URL.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse std::str::FromStr;\nuse sui_sdk::types::base_types::SuiAddress;\nuse sui_sdk::{SuiClient, SuiClientBuilder};\n\n\n#[tokio::main]\nasync fn main() -> Result<(), anyhow::Error> {\n   let sui = SuiClientBuilder::default().build(\n      \"https://fullnode.devnet.sui.io:443\",\n   ).await.unwrap();\n   let address = SuiAddress::from_str(\"0x849d63687330447431a2e76fecca4f3c10f6884ebaa9909674123c6c662612a3\")?;\n   let objects = sui.read_api().get_balance(address).await?;\n   println!(\"{:?}\", objects);\n   Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Recursive Generic Function Calls in Move\nDESCRIPTION: Shows examples of allowed recursive generic function calls in Move that create finitely many types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_15\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct A<T> {}\n\n    // Finitely many types -- allowed.\n    // foo<T> -> foo<T> -> foo<T> -> ... is valid\n    fun foo<T>() {\n        foo<T>();\n    }\n\n    // Finitely many types -- allowed.\n    // foo<T> -> foo<A<u64>> -> foo<A<u64>> -> ... is valid\n    fun foo<T>() {\n        foo<A<u64>>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Base Asset in Flash Loans with DeepBookV3 SDK\nDESCRIPTION: The borrowBaseAsset function allows borrowing a base asset from a specified pool. It takes a poolKey string to identify the pool and a borrowAmount number to specify the quantity to borrow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/flash-loans.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nborrowBaseAsset(poolKey: string, borrowAmount: number);\n```\n\n----------------------------------------\n\nTITLE: Implementing divide_and_round_up for U16 values\nDESCRIPTION: Function that divides one u16 value by another and rounds up the result using the standard macros num_divide_and_round_up utility.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_and_round_up(x: u16, y: u16): u16 {\n    std::macros::num_divide_and_round_up!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vector Operations in Move\nDESCRIPTION: Demonstrates basic vector operations in Move, including creating an empty vector, pushing elements, accessing elements, and popping elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/primitive-types/vector.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nuse std::vector;\n\nlet mut v = vector::empty<u64>();\nvector::push_back(&mut v, 5);\nvector::push_back(&mut v, 6);\n\nassert!(*vector::borrow(&v, 0) == 5, 42);\nassert!(*vector::borrow(&v, 1) == 6, 42);\nassert!(vector::pop_back(&mut v) == 6, 42);\nassert!(vector::pop_back(&mut v) == 5, 42);\n```\n\n----------------------------------------\n\nTITLE: Creating an Escrow Request Using Owned Objects in Sui Move\nDESCRIPTION: Function to create an escrow request in an owned-objects implementation. It prepares an escrow request by unlocking the offered object and sending it to a custodian along with metadata identifying the requested object by its key ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/shared-owned.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic entry fun create<T: key + store, U: key + store>(\n        locked_obj: Locked<T>,\n        obj_key: Key,\n        exchange_key_id: ID,\n        recipient: address,\n        custodian: address,\n        ctx: &mut TxContext\n    ) {\n        // Ensure we can unlock the object (proves the object hasn't been tampered with).\n        let obj = unlock(locked_obj, obj_key);\n        let request = Escrow {\n            id: object::new(ctx),\n            sender: tx_context::sender(ctx),\n            recipient,\n            exchange_key_id,\n            // If we want to create a key to identify the object, keep it in scope.\n            obj,\n        };\n        transfer::transfer(request, custodian);\n    }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Move and Copy Behavior in Move Method Calls\nDESCRIPTION: This snippet shows how Move handles moving and copying of values in method calls when not using references. It demonstrates the difference in behavior for types with and without the 'copy' ability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_16\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct X() has copy, drop;\n    public fun by_val(_: X) {}\n    public fun by_ref(_: &X) {}\n    public fun by_mut(_: &mut X) {}\n\n    public struct Y has drop { x: X }\n    public fun drop_y(y: Y) { y }\n\n    fun example(y: Y) {\n        y.x.by_val(); // copies `y.x` since `by_val` is by-value and `X` has `copy`\n        y.drop_y(); // moves `y` since `drop_y` is by-value and `Y` does _not_ have `copy`\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Navigation Component\nDESCRIPTION: React component for site navigation including wallet connection button and menu links using RadixUI and React Router.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from \"@mysten/dapp-kit\";\nimport { SizeIcon } from \"@radix-ui/react-icons\";\nimport { Box, Container, Flex, Heading } from \"@radix-ui/themes\";\nimport { NavLink } from \"react-router-dom\";\n\nconst menu = [\n  {\n    title: \"Escrows\",\n    link: \"/escrows\",\n  },\n  {\n    title: \"Manage Objects\",\n    link: \"/locked\",\n  },\n];\n\nexport function Header() {\n  return (\n    <Container>\n      <Flex\n        position=\"sticky\"\n        px=\"4\"\n        py=\"2\"\n        justify=\"between\"\n        className=\"border-b flex flex-wrap\"\n      >\n        <Box>\n          <Heading className=\"flex items-center gap-3\">\n            <SizeIcon width={24} height={24} />\n            Trading Demo\n          </Heading>\n        </Box>\n\n        <Box className=\"flex gap-5 items-center\">\n          {menu.map((item) => (\n            <NavLink\n              key={item.link}\n              to={item.link}\n              className={({ isActive, isPending }) =>\n                `cursor-pointer flex items-center gap-2 ${\n                  isPending\n                    ? \"pending\"\n                    : isActive\n                      ? \"font-bold text-blue-600\"\n                      : \"\"\n                }`\n              }\n            >\n              {item.title}\n            </NavLink>\n          ))}\n        </Box>\n\n        <Box className=\"connect-wallet-wrapper\">\n          <ConnectButton />\n        </Box>\n      </Flex>\n    </Container>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Unstake Implementation for DeepBookMarketMaker\nDESCRIPTION: Example of a custom unstake implementation for the DeepBookMarketMaker class, including both the function signature and a concrete implementation that unstakes from a predefined pool using specific manager keys.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/staking-governance.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nunstake = (\n  poolKey: string, \n  balanceManagerKey: string\n) => (tx: Transaction) => {}\n\n// Custom function to unstake in DeepBookMarketMaker class\nunstake = (tx: Transaction) => {\n  const poolKey = 'DBUSDT_DBUSDC';\n  const balanceManagerKey = 'MANAGER_1';\n  tx.add(this.governance.unstake(poolKey, balanceManagerKey));\n};\n```\n\n----------------------------------------\n\nTITLE: Multiplying UQ32_32 Fixed-Point Numbers in Move\nDESCRIPTION: Multiplies two UQ32_32 fixed-point numbers, truncating any fractional part of the product. Aborts if the product overflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun mul(a: UQ32_32, b: UQ32_32): UQ32_32 {\n    UQ32_32(int_mul(a.0, b))\n}\n```\n\n----------------------------------------\n\nTITLE: Subtracting Fixed-Point Numbers (uq_sub)\nDESCRIPTION: Subtracts two fixed-point numbers, checking for underflow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun uq_sub<$T>($a: $T, $b: $T, $abort_overflow: _): $T {\n    let a = $a;\n    let b = $b;\n    if (a < b) $abort_overflow;\n    a - b\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting from an Option in Move\nDESCRIPTION: Removes and returns the value stored inside an Option, converting it to none. Aborts if the Option does not hold a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun extract<Element>(t: &mut Option<Element>): Element {\n    assert!(t.is_some(), EOPTION_NOT_SET);\n    t.vec.pop_back()\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Tokenized Assets from Kiosk in Rust\nDESCRIPTION: Facilitates joining actions for tokenized assets in a kiosk, enabling the burning process and guaranteeing the transfer of balance into another asset of the same type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\npublic fun asset_from_kiosk_to_join<T>(\n  self: &TokenizedAsset<T>, // A\n  to_burn: &TokenizedAsset<T>, // B\n  protected_tp: &ProtectedTP<TokenizedAsset<T>>, // unlocker\n  transfer_request: TransferRequest<TokenizedAsset<T>> // transfer request for b\n): JoinPromise {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating Addresses via Sui CLI\nDESCRIPTION: Shows CLI commands for importing a key using a mnemonic and creating a new address with Ed25519 signature scheme\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/transaction-auth/keys-addresses.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sui keytool import \"TEST_MNEMONIC\" ed25519 \"m/44\\'/784\\'/0\\'/0\\'/0\\'\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ sui client new-address ed25519 \"m/44\\'/784\\'/0\\'/0\\'/0\\'\"\n```\n\n----------------------------------------\n\nTITLE: Element Subtraction Implementation\nDESCRIPTION: Package-internal function to subtract two Elements of the same group type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun sub<G>(type_: u8, e1: &Element<G>, e2: &Element<G>): Element<G> {\n    Element<G> { bytes: internal_sub(type_, &e1.bytes, &e2.bytes) }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Objects Owned by a Sui Address\nDESCRIPTION: This example shows how to use the 'sui client objects' command to list objects owned by a specific Sui address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client objects 0x36df11369cf00ecf0be68d6ba965b0abe2e883bc5245911e3a29ebfa0aaf6b69\n╭───────────────────────────────────────────────────────────────────────────────────────╮\n| ╭────────────┬──────────────────────────────────────────────────────────────────────╮ │\n│ │ objectId   │  0xfffbb30ccb631f15f6cd36700589fc9c31cb04af28a95f3ed26d62daf3acb57f  │ │\n│ │ version\t   │  33363559                                                        \t  │ │\n│ │ digest \t   │  IY7/qsIJhliQL0uxwSzNYu0SMcn5AMsqQklSGngn1V0=                    \t  │ │\n│ │ objectType │  0x0000..0002::coin::Coin                                        \t  │ │\n│ ╰────────────┴──────────────────────────────────────────────────────────────────────╯ │\n│ ╭────────────┬──────────────────────────────────────────────────────────────────────╮ │\n│ │ objectId   │  0xfffe59fb6f78b1ced7f6537e69a205cc45d105270857bfd66332f9a627a38ae0  │ │\n│ │ version\t   │  33370864                                                            │ │\n│ │ digest     │  b+tKChvujbCk/UCm8L+lflyb6Vjt7beB+uz6+ahUHmM=                    \t  │ │\n│ │ objectType │  0x0000..0002::coin::Coin                                        \t  │ │\n│ ╰────────────┴──────────────────────────────────────────────────────────────────────╯ │\n╰───────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Viewing Sui Module Bytecode in Storage\nDESCRIPTION: Commands for viewing the bytecode of Move modules stored in the Sui sandbox environment. These commands access specific module files (M1.mv and M.mv) at their respective storage addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/module_disassemble/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsandbox view storage/0x000000000000000000000000000000000000000000000000000000000000000a/modules/M1.mv\nsandbox view storage/0x000000000000000000000000000000000000000000000000000000000000000c/modules/M.mv\n```\n\n----------------------------------------\n\nTITLE: Constant Naming Examples in Move\nDESCRIPTION: Shows various valid constant naming patterns following Move conventions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/constants.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nconst FLAG: bool = false;\nconst EMyErrorCode: u64 = 0;\nconst ADDRESS_42: address = @0x42;\n```\n\n----------------------------------------\n\nTITLE: Asset Deposit/Withdraw Structures in Move\nDESCRIPTION: Structs for tracking asset deposits and withdrawals to/from the custodian, containing pool ID, quantity and owner information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic struct DepositAsset<phantom Asset> has copy, drop, store\npublic struct WithdrawAsset<phantom Asset> has copy, drop, store\n```\n\n----------------------------------------\n\nTITLE: BLS G1 Signature (MinSig) Verification\nDESCRIPTION: Generate and verify BLS G1 signatures with MinSig setting using CLI and Move contract\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/signing.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ntarget/debug/sigs-cli keygen --scheme bls12381-minsig --seed 0000000000000000000000000000000000000000000000000000000000000000\ntarget/debug/sigs-cli sign --scheme bls12381-minsig --msg $MSG --secret-key $SK\n```\n\nLANGUAGE: move\nCODE:\n```\n    use sui::bls12381;\n\n    let msg = x\"$MSG\";\n    let pk = x\"$PK\";\n    let sig = x\"$SIG\";\n    let verified = bls12381::bls12381_min_sig_verify(&sig, &pk, &msg);\n    assert!(verified == true, 0);\n```\n\n----------------------------------------\n\nTITLE: Type Assignments for Loop Expressions in Move\nDESCRIPTION: Examples showing the type system rules for loop expressions in Move. A loop without break can have any type, while a loop with break has the type of the break expression.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\n(loop { if (i < 10) i = i + 1 else break }: ());\nlet () = loop { if (i < 10) i = i + 1 else break };\n\nlet x: u64 = loop { if (i < 10) i = i + 1 else break 5 };\nlet x: u64 = loop { if (i < 10) { i = i + 1; continue} else break 5 };\n```\n\n----------------------------------------\n\nTITLE: Checking if Address is an Active Validator in Move\nDESCRIPTION: Implementation of is_active_validator function that returns true if the given address belongs to an active validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_61\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun is_active_validator(self: &ValidatorSet, addr: address): bool {\n    self.active_validators.any!(|v| v.sui_address() == addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Difference Between Two u256 Integers in Move\nDESCRIPTION: Computes the absolute difference between two u256 values. This function returns |x - y| by using the std::macros::num_diff macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun diff(x: u256, y: u256): u256 {\n    std::macros::num_diff!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Failure with Out of Gas Error in Move Tests\nDESCRIPTION: Demonstrates using #[expected_failure(out_of_gas, location = <location>)] to test for out of gas errors at specific module locations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nmodule pkg_addr::other_module {\n    fun will_oog() { loop {} }\n}\n\nmodule pkg_addr::my_module {\n    use pkg_addr::other_module;\n    #[test]\n    #[expected_failure(out_of_gas, location = Self)]\n    fun test_will_oog_and_pass1() { loop {} }\n\n    #[test]\n    #[expected_failure(arithmetic_error, location = pkg_addr::other_module)]\n    fun test_will_oog_and_pass2() { other_module::will_oog() }\n\n    // FAIL: Will fail since the location we expect it the fail at is different from where the test actually failed.\n    #[test]\n    #[expected_failure(out_of_gas, location = Self)]\n    fun test_will_oog_and_fail() { other_module::will_oog() }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Order is Bid in Move\nDESCRIPTION: Determines if an order is a bid based on its order ID. Bid orders have IDs less than MIN_ASK_ORDER_ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_29\n\nLANGUAGE: Move\nCODE:\n```\nfun order_is_bid(order_id: u64): bool {\n    return order_id < MIN_ASK_ORDER_ID\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Infinite Loop Expression in Move\nDESCRIPTION: A function demonstrating an infinite loop using the loop construct without a break statement. The counter will increase forever.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nfun foo() {\n    let mut i = 0;\n    loop { i = i + 1 }\n}\n```\n\n----------------------------------------\n\nTITLE: PoolCreated Event Struct Definition\nDESCRIPTION: Definition of the PoolCreated event struct which is emitted when a new trading pool is created on DeepBook. Contains pool metadata including asset types, fee rates, and tick/lot sizes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic struct PoolCreated has copy, drop, store {\n    pool_id: sui::object::ID,\n    base_asset: std::type_name::TypeName,\n    quote_asset: std::type_name::TypeName,\n    taker_fee_rate: u64,\n    maker_rebate_rate: u64,\n    tick_size: u64,\n    lot_size: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Code in Sui Sandbox\nDESCRIPTION: Command to publish and deploy code in the Sui sandbox environment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/doctor_with_stdlib/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox publish\n```\n\n----------------------------------------\n\nTITLE: Accessing Publisher Package Address in Move\nDESCRIPTION: Retrieves the package address string associated with the Publisher object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun published_package(self: &Publisher): &String {\n    &self.package\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Span Logging Example Output\nDESCRIPTION: Structured JSON log output demonstrating span-based logging with transaction processing details\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/observability.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"v\":0,\"name\":\"sui\",\"msg\":\"[PROCESS_CERT - START]\",\"level\":20,\"hostname\":\"Evan-MLbook.lan\",\"pid\":51425,\"time\":\"2022-03-08T22:48:11.241421Z\",\"target\":\"sui_core::authority_server\",\"line\":67,\"file\":\"sui_core/src/authority_server.rs\",\"tx_digest\":\"t#d1385064287c2ad67e4019dd118d487a39ca91a40e0fd8e678dbc32e112a1493\"}\n```\n\n----------------------------------------\n\nTITLE: Adding USDC Dependencies in Move.toml\nDESCRIPTION: Configuration for importing the USDC module into a Move package by adding the dependency to Move.toml file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/stablecoins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nusdc = { git = \"https://github.com/circlefin/stablecoin-sui.git\", subdir = \"packages/usdc\", rev = \"master\" }\n```\n\n----------------------------------------\n\nTITLE: Updating Next Epoch Protocol Public Key in Move\nDESCRIPTION: Updates the protocol public key of a validator for the next epoch. This function also sets the proof of possession for the new key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_86\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_next_epoch_protocol_pubkey(\n    self: &mut Validator,\n    protocol_pubkey: vector<u8>,\n    proof_of_possession: vector<u8>,\n) {\n    self.metadata.next_epoch_protocol_pubkey_bytes = option::some(protocol_pubkey);\n    self.metadata.next_epoch_proof_of_possession = option::some(proof_of_possession);\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project with Verbose Output\nDESCRIPTION: A shell command to build the Sui blockchain project with the verbose flag enabled. This command will show detailed output during the build process, which is useful for debugging build issues.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/empty_module_no_deps/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild -v\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed-Point Number Conversion Macros in Move\nDESCRIPTION: A set of type conversion macros that safely convert between different numeric types with bounds checking. Each macro returns an Option type containing the converted value if valid, or None if the conversion would overflow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun try_as_u8($x: _): Option<u8> {\n    let x = $x;\n    if (x > 0xFF) option::none() else option::some(x as u8)\n}\n\npublic macro fun try_as_u16($x: _): Option<u16> {\n    let x = $x;\n    if (x > 0xFFFF) option::none() else option::some(x as u16)\n}\n\npublic macro fun try_as_u32($x: _): Option<u32> {\n    let x = $x;\n    if (x > 0xFFFF_FFFF) option::none() else option::some(x as u32)\n}\n\npublic macro fun try_as_u64($x: _): Option<u64> {\n    let x = $x;\n    if (x > 0xFFFF_FFFF_FFFF_FFFF) option::none() else option::some(x as u64)\n}\n\npublic macro fun try_as_u128($x: _): Option<u128> {\n    let x = $x;\n    if (x > 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF) option::none() else option::some(x as u128)\n}\n```\n\n----------------------------------------\n\nTITLE: Secp256k1 Non-recoverable Signature Verification\nDESCRIPTION: Generate and verify Secp256k1 non-recoverable signatures using CLI and Move contract\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/signing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ntarget/debug/sigs-cli keygen --scheme secp256k1 --seed 0000000000000000000000000000000000000000000000000000000000000000\ntarget/debug/sigs-cli sign --scheme secp256k1 --msg $MSG --secret-key $SK\n```\n\nLANGUAGE: move\nCODE:\n```\n    use sui::ecdsa_k1;\n    \n    let msg = x\"$MSG\";\n    let pk = x\"$PK\";\n    let sig = x\"$SIG\";\n    let verify = ecdsa_k1::secp256k1_verify(&sig, &pk, &msg, 1);\n    assert!(verify == true, 0);\n```\n\n----------------------------------------\n\nTITLE: Installing TiUP\nDESCRIPTION: This command uses `curl` to download and execute a script from a remote server to install TiUP, the TiDB package manager.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Implementing do_eq Macro for Inclusive U32 Iteration from Zero in Move\nDESCRIPTION: Defines a macro function 'do_eq' that loops over u32 values from 0 to stop (inclusive), applying a given function to each value. It uses the std::macros::do_eq macro internally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do_eq<$R: drop>($stop: u32, $f: |u32| -> $R) {\n    std::macros::do_eq!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronize Sui Light Client Checkpoints\nDESCRIPTION: This command uses the Sui light client to sync and validate end-of-epoch checkpoints based on the provided YAML configuration. It saves checkpoints for future uses. No additional prerequisites are needed beyond the configuration file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-light-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sui-light-client --config mainnet.yaml sync\n```\n\n----------------------------------------\n\nTITLE: Implementing U16 to U8 conversion with overflow checking\nDESCRIPTION: Function that attempts to convert a u16 value to u8, returning None if the value is too large to fit in u8 range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u8(x: u16): Option<u8> {\n    std::macros::try_as_u8!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Singleton SuiSystemState UID in Move\nDESCRIPTION: Creates the UID for the singleton SuiSystemState object. This should only be called once from sui_system. It asserts the sender is the system address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\nfun sui_system_state(ctx: &TxContext): UID {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    UID {\n        id: ID { bytes: SUI_SYSTEM_STATE_OBJECT_ID },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching the Value of a PCR Entry\nDESCRIPTION: The function `value` retrieves the value associated with a provided PCREntry, returning a vector of bytes. This function aids in accessing the PCR data.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/nitro_attestation.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun value(entry: &sui::nitro_attestation::PCREntry): &vector<u8> {\n    &entry.value\n}\n```\n\n----------------------------------------\n\nTITLE: Caution Alert Markdown\nDESCRIPTION: This code snippet demonstrates the markdown syntax for creating a 'Caution' alert using Docusaurus Admonitions. It warns the user about potential data loss or the need to start over. The alert advises backing up configuration files before deleting the network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n\n:::caution\n\nBackup your configuration files before you delete your network.\n\n:::\n\n```\n```\n\n----------------------------------------\n\nTITLE: Managing System Clock in Move\nDESCRIPTION: This snippet defines the Clock structure and associated functions for managing and querying system time in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Clock\npublic fun timestamp_ms\nfun create\nfun consensus_commit_prologue\n```\n\n----------------------------------------\n\nTITLE: Place Market Order Function\nDESCRIPTION: Function for placing a market order in the trading pool. Currently aborts with code 1337 indicating unimplemented functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\npublic fun place_market_order<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _quantity: u64,\n    _is_bid: bool,\n    mut _base_coin: Coin<BaseAsset>,\n    mut _quote_coin: Coin<QuoteAsset>,\n    _clock: &Clock,\n    _ctx: &mut TxContext,\n): (Coin<BaseAsset>, Coin<QuoteAsset>) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Kiosk Operations\nDESCRIPTION: Functions and structures for managing kiosk operations including item listing, purchasing, and management.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_39\n\nLANGUAGE: move\nCODE:\n```\npublic struct Kiosk\npublic struct KioskOwnerCap\npublic struct PurchaseCap\npublic struct Borrow\npublic struct Item\npublic struct Listing\npublic fun place\npublic fun list\npublic fun purchase\n```\n\n----------------------------------------\n\nTITLE: Converting ASCII Character to Uppercase in Move\nDESCRIPTION: This helper function converts a single ASCII character (represented as a byte) to its uppercase equivalent. It only affects lowercase letters (a-z).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\nfun char_to_uppercase(byte: u8): u8 {\n    if (byte >= 0x61 && byte <= 0x7A) byte - 0x20\n    else byte\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Values in Multiple Assignments in Move\nDESCRIPTION: This example demonstrates how to ignore certain values when performing multiple assignments in Move, using underscores as placeholders.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nfun three(): (u64, u64, u64) {\n    (0, 1, 2)\n}\n\nlet (x1, _, z1) = three();\nlet (x2, _y, z2) = three();\nassert!(x1 + z1 == x2 + z2, 42);\n```\n\n----------------------------------------\n\nTITLE: Getting Pending Stake Withdrawal Amount - Move\nDESCRIPTION: This function returns the amount of pending stake withdrawals for a validator by delegating to the staking pool's pending_stake_withdraw_amount function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_66\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pending_stake_withdraw_amount(self: &Validator): u64 {\n    self.staking_pool.pending_stake_withdraw_amount()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Reader for Sui Indexer in Rust\nDESCRIPTION: Rust code snippet showing the initialization of a local reader for a Sui indexer. It sets up the indexer to read checkpoint data from a local directory and process it using a custom worker with specified concurrency.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/custom-indexer.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet (exit_sender, exit_receiver) = tokio::sync::oneshot::channel();\nlet executor = Executor::new(Some(\"./progress_store\".to_string()));\nlet worker_pool = WorkerPool::new(CustomWorker, \"local_reader\".to_string(), concurrency);\nexecutor.register(worker_pool).await?;\nexecutor\n    .run(\n        PathBuf::from(\"./chk\".to_string()),\n        None,\n        vec![],\n        ReaderOptions::default(),\n        exit_receiver,\n    )\n    .await?\n```\n\n----------------------------------------\n\nTITLE: Adding Child Objects to Parent Object in Move\nDESCRIPTION: This Move function demonstrates how to add a child object to a parent object using dynamic fields. The `ofield` is an alias for the `sui::dynamic_object_field` package. This enables use cases like a `TicketBooth` containing `ConcertTicket` objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/gaming.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add_child(parent: &mut Parent, child: Child, ctx: &mut TxContext) {\n    let Child { id, parent_id, value } = child;\n    assert!(object::id(parent) == parent_id, 0);\n    ofield::add(parent, value, id, ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sui Simulation Tests\nDESCRIPTION: Command for executing simulation tests in the Sui framework, which uses cargo nextest and respects additional nextest options.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-simulator/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ cargo simtest\n```\n\n----------------------------------------\n\nTITLE: Getting Total Pending Stake Amount in Move\nDESCRIPTION: Returns the total value of pending staking requests for a staking pool. This represents stake that has been added but not yet activated in the current epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_38\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pending_stake_amount(staking_pool: &StakingPool): u64 {\n    staking_pool.pending_stake\n}\n```\n\n----------------------------------------\n\nTITLE: List Gas Coins for Address using Sui CLI\nDESCRIPTION: This command lists the gas coins for a given address. The address can be specified directly or using an alias.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client gas ADDRESS\"\n```\n\n----------------------------------------\n\nTITLE: Type Information Operations in Move\nDESCRIPTION: The 0x1::type_name module provides a TypeName struct and functions for obtaining and manipulating type information at runtime.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_46\n\nLANGUAGE: move\nCODE:\n```\n// Type information operations\n0x1::type_name::TypeName     // public struct\n0x1::type_name::get          // public fun\n0x1::type_name::get_with_original_ids // public fun\n0x1::type_name::is_primitive // public fun\n0x1::type_name::borrow_string // public fun\n0x1::type_name::get_address  // public fun\n0x1::type_name::get_module   // public fun\n0x1::type_name::into_string  // public fun\n```\n\n----------------------------------------\n\nTITLE: Connecting to Multiple Sui Networks and Getting API Versions\nDESCRIPTION: Demonstrates how to connect to Sui testnet, devnet, and mainnet networks using SuiClientBuilder and retrieve their respective API versions. This is a basic example of establishing connections to the Sui network infrastructure.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-sdk/README.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse sui_sdk::SuiClientBuilder;\n\n#[tokio::main]\nasync fn main() -> Result<(), anyhow::Error> {\n    // Sui testnet -- https://fullnode.testnet.sui.io:443\n    let sui_testnet = SuiClientBuilder::default().build_testnet().await?;\n    println!(\"Sui testnet version: {}\", sui_testnet.api_version());\n\n     // Sui devnet -- https://fullnode.devnet.sui.io:443\n    let sui_devnet = SuiClientBuilder::default().build_devnet().await?;\n    println!(\"Sui devnet version: {}\", sui_devnet.api_version());\n\n    // Sui mainnet -- https://fullnode.mainnet.sui.io:443\n    let sui_mainnet = SuiClientBuilder::default().build_mainnet().await?;\n    println!(\"Sui mainnet version: {}\", sui_mainnet.api_version());\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Public DeepBook Indexer URL\nDESCRIPTION: The endpoint URL for the public DeepBook Indexer provided by Mysten Labs for accessing real-time order book and trading data.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://deepbook-indexer.mainnet.mystenlabs.com/\n```\n\n----------------------------------------\n\nTITLE: Minting Regulated Coins - Rust Implementation\nDESCRIPTION: Rust implementation for minting regulated coins using Sui SDK. The function creates a programmable transaction block to mint coins and transfer them to a specified recipient.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin/regulated.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub async fn mint(\n    client: &SuiClient,\n    signer: &Keypair,\n    treasury_cap_id: ObjectID,\n    package_id: ObjectID,\n    module_name: &str,\n    amount: u64,\n    recipient: SuiAddress,\n) -> Result<CertifiedTransactionEffects, anyhow::Error> {\n    let ptb = ProgrammableTransactionBuilder::new()\n        .move_call(\n            package_id,\n            module_name,\n            \"mint\",\n            vec![],\n            vec![SuiValue::Object(treasury_cap_id), SuiValue::Number(amount)],\n        )\n        .transfer_arg(0, recipient);\n    execute_programmable_transaction(client, signer, ptb).await\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Upgrading Inner System State in Sui System\nDESCRIPTION: This function loads the inner system state and performs an upgrade from v1 to v2 if necessary. It ensures version compatibility between the wrapper and inner state.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_40\n\nLANGUAGE: Move\nCODE:\n```\nfun load_inner_maybe_upgrade(self: &mut SuiSystemState): &mut SuiSystemStateInnerV2 {\n    if (self.version == 1) {\n        let v1: SuiSystemStateInner = dynamic_field::remove(&mut self.id, self.version);\n        let v2 = v1.v1_to_v2();\n        self.version = 2;\n        dynamic_field::add(&mut self.id, self.version, v2);\n    };\n    let inner: &mut SuiSystemStateInnerV2 = dynamic_field::borrow_mut(\n        &mut self.id,\n        self.version,\n    );\n    assert!(inner.system_state_version() == self.version, EWrongInnerVersion);\n    inner\n}\n```\n\n----------------------------------------\n\nTITLE: Framework Package Version Example\nDESCRIPTION: Example showing how framework package versions are represented while maintaining stable IDs across upgrades.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/versioning.mdx#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n(0x1, 1) => MoveStdlib v1\n(0x1, 2) => MoveStdlib v2\n(0x1, 3) => MoveStdlib v3\n```\n\n----------------------------------------\n\nTITLE: Expression-Level Use Declarations in Move\nDESCRIPTION: Shows how to use 'use' declarations at the beginning of an expression block, limiting their scope to that block.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/uses.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\nmodule a::example {\n    fun new_vec(): vector<Option<u8>> {\n        use std::vector::push_back;\n        use std::option::{Option, some, none};\n\n        let mut v = vector[];\n        push_back(&mut v, some(0));\n        push_back(&mut v, none());\n        v\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting u256 to u32 with Overflow Checking in Move\nDESCRIPTION: Attempts to convert a u256 value to u32. Returns None if the value exceeds the maximum u32 value, using std::macros::try_as_u32 for the conversion logic.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u32(x: u256): Option<u32> {\n    std::macros::try_as_u32!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Emergency Operation Functions\nDESCRIPTION: Functions to handle emergency pause and unpause operations on the bridge.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_17\n\nLANGUAGE: move\nCODE:\n```\npublic fun emergency_op_pause(): u8 {\n    PAUSE\n}\n\npublic fun emergency_op_unpause(): u8 {\n    UNPAUSE\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Sui Move Package\nDESCRIPTION: A simple command to build a Sui Move package. This compiles the Move code and prepares it for deployment on the Sui blockchain.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/disassemble_module_source_map/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild\n```\n\n----------------------------------------\n\nTITLE: Destroying Storage Rebates Balance in Move\nDESCRIPTION: Destroys a Balance for storage rebates without decreasing the supply. This function should only be called by the epoch change system transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/balance.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\nfun destroy_storage_rebates<T>(self: Balance<T>, ctx: &TxContext) {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    assert!(std::type_name::get<T>().into_string().into_bytes() == SUI_TYPE_NAME, ENotSUI);\n    let Balance { value: _ } = self;\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Sui Full Node Configuration Template\nDESCRIPTION: Copies the fullnode YAML configuration template to prepare for Sui Full node setup. Operates within the cloned Sui repository directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ cp crates/sui-config/data/fullnode-template.yaml fullnode.yaml\n```\n\n----------------------------------------\n\nTITLE: Distributing Rewards to Validators in Move\nDESCRIPTION: This function distributes the adjusted staking and storage fund rewards to validators. It handles the validator commission, adds rewards to the validator's stake, and compounds rewards for stakers in the staking pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_56\n\nLANGUAGE: Move\nCODE:\n```\nfun distribute_reward(\n    validators: &mut vector<Validator>,\n    adjusted_staking_reward_amounts: &vector<u64>,\n    adjusted_storage_fund_reward_amounts: &vector<u64>,\n    staking_rewards: &mut Balance<SUI>,\n    storage_fund_reward: &mut Balance<SUI>,\n    ctx: &mut TxContext,\n) {\n    let length = validators.length();\n    assert!(length > 0, EValidatorSetEmpty);\n    length.do!(|i| {\n        let validator = &mut validators[i];\n        let staking_reward_amount = adjusted_staking_reward_amounts[i];\n        let mut staker_reward = staking_rewards.split(staking_reward_amount);\n        let validator_commission_amount = mul_div!(\n            staking_reward_amount,\n            validator.commission_rate(),\n            BASIS_POINT_DENOMINATOR,\n        );\n        let mut validator_reward = staker_reward.split(validator_commission_amount as u64);\n        validator_reward.join(storage_fund_reward.split(adjusted_storage_fund_reward_amounts[i]));\n        if (validator_reward.value() > 0) {\n            let validator_address = validator.sui_address();\n            let rewards_stake = validator.request_add_stake(\n                validator_reward,\n                validator_address,\n                ctx,\n            );\n            transfer::public_transfer(rewards_stake, validator_address);\n        } else {\n            validator_reward.destroy_zero();\n        };\n        validator.deposit_stake_rewards(staker_reward);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hash-to-Group in Move\nDESCRIPTION: Hashes an arbitrary byte vector into a group element. Takes a type parameter and message bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun hash_to<G>(type_: u8, m: &vector<u8>): Element<G> {\n    Element<G> { bytes: internal_hash_to(type_, m) }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Maximum Value for u32 Type\nDESCRIPTION: A macro that returns the maximum possible value for a u32 (0xFFFFFFFF or 4294967295).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun max_value(): u32 {\n    0xFFFF_FFFF\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum u128 Value in Move\nDESCRIPTION: Macro function that returns the maximum value for a u128.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun max_value(): u128 {\n    0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Sui Move package\nDESCRIPTION: Commands to create a new Sui Move package named 'test_example' and navigate into its directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ sui move new test_example; cd test_example\n```\n\n----------------------------------------\n\nTITLE: Struct Pattern Matching and Destruction\nDESCRIPTION: Examples showing how to destroy structs via pattern matching and access their fields.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/structs.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct Foo { x: u64, y: bool }\n    public struct Bar(Foo)\n    public struct Baz {}\n    public struct Qux()\n\n    fun example_destroy_foo() {\n        let foo = Foo { x: 3, y: false };\n        let Foo { x, y: foo_y } = foo;\n        //        ^ shorthand for `x: x`\n\n        // two new bindings\n        //   x: u64 = 3\n        //   foo_y: bool = false\n    }\n\n    fun example_destroy_foo_wildcard() {\n        let foo = Foo { x: 3, y: false };\n        let Foo { x, y: _ } = foo;\n\n        // only one new binding since y was bound to a wildcard\n        //   x: u64 = 3\n    }\n\n    fun example_destroy_foo_assignment() {\n        let x: u64;\n        let y: bool;\n        Foo { x, y } = Foo { x: 3, y: false };\n\n        // mutating existing variables x and y\n        //   x = 3, y = false\n    }\n\n    fun example_foo_ref() {\n        let foo = Foo { x: 3, y: false };\n        let Foo { x, y } = &foo;\n\n        // two new bindings\n        //   x: &u64\n        //   y: &bool\n    }\n\n    fun example_foo_ref_mut() {\n        let foo = Foo { x: 3, y: false };\n        let Foo { x, y } = &mut foo;\n\n        // two new bindings\n        //   x: &mut u64\n        //   y: &mut bool\n    }\n\n    fun example_destroy_bar() {\n        let bar = Bar(Foo { x: 3, y: false });\n        let Bar(Foo { x, y }) = bar;\n        //            ^ nested pattern\n\n        // two new bindings\n        //   x: u64 = 3\n        //   y: bool = false\n    }\n\n    fun example_destroy_baz() {\n        let baz = Baz {};\n        let Baz {} = baz;\n    }\n\n    fun example_destroy_qux() {\n        let qux = Qux();\n        let Qux() = qux;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Remaining Bytes from BCS Wrapper in Move\nDESCRIPTION: Unpacks the BCS struct and returns any leftover bytes, which is useful for passing data further after partial deserialization. The bytes are reversed back to their original order before being returned.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun into_remainder_bytes(bcs: BCS): vector<u8> {\n    let BCS { mut bytes } = bcs;\n    bytes.reverse();\n    bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Exact Quote for Base in DeepBook CLOB v2 (Move)\nDESCRIPTION: Function for swapping an exact amount of quote asset for base asset in the DeepBook exchange. Takes a pool, client order ID, account capability, quantity, clock, quote coin, and transaction context. Currently implemented as a stub that aborts with code 1337.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_23\n\nLANGUAGE: move\nCODE:\n```\npublic fun swap_exact_quote_for_base<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _client_order_id: u64,\n    _account_cap: &AccountCap,\n    _quantity: u64,\n    _clock: &Clock,\n    _quote_coin: Coin<QuoteAsset>,\n    _ctx: &mut TxContext,\n): (Coin<BaseAsset>, Coin<QuoteAsset>, u64) {\n   abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CurrencyCreated struct in Move\nDESCRIPTION: Struct representing a created currency with associated decimals field. Has copy and drop abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic struct CurrencyCreated<phantom T> has copy, drop {\n    decimals: u8\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimum Value Macro in Move\nDESCRIPTION: A macro that returns the minimum of two values of the same type by comparing them and returning the smaller one.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_min<$T>($x: $T, $y: $T): $T {\n    let x = $x;\n    let y = $y;\n    if (x < y) x\n    else y\n}\n```\n\n----------------------------------------\n\nTITLE: Exfiltrating State from SuiNodeHandle (Anti-pattern)\nDESCRIPTION: Demonstrates an anti-pattern of exfiltrating node state from the SuiNodeHandle, which can lead to incorrect simulator behavior by breaking the node context abstraction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-simulator/README.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet node_state = handle.with(|node| {\n    node.state()\n});\n\n// Never do this!\nspawn_task_on_state_in_client_node(node_state);\n```\n\n----------------------------------------\n\nTITLE: Absolute Difference Function\nDESCRIPTION: Calculates the absolute difference between two u128 values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun diff(x: u128, y: u128): u128 {\n    std::macros::num_diff!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Additive Policy Function in Move\nDESCRIPTION: This function exposes a constant for the additive upgrade policy. It returns the constant value indicating such a policy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\npublic fun additive_policy(): u8 { ADDITIVE }\n\n```\n\n----------------------------------------\n\nTITLE: Calculate Quote Quantity with Input Token Fees\nDESCRIPTION: Function to calculate the quote quantity output for a given base quantity using input token as fee.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_quote_quantity_out_input_fee(self: &Pool, base_quantity: u64): u64\n```\n\n----------------------------------------\n\nTITLE: GT Group Identity Element\nDESCRIPTION: Returns the identity element of the GT group using predefined identity bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_36\n\nLANGUAGE: Move\nCODE:\n```\npublic fun gt_identity(): Element<GT> {\n    let identity = GT_IDENTITY_BYTES;\n    group_ops::from_bytes(GT_TYPE, &identity, true)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up the database for Sui indexer\nDESCRIPTION: These commands use Diesel CLI to set up and reset the database for the Sui indexer. It uses the provided DATABASE_URL to connect to the database.  Replace `<DATABASE_URL>` with the actual connection string.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# an example DATABASE_URL is \"postgres://postgres:postgres@localhost/exampledb\"\ndiesel setup --database-url=\"<DATABASE_URL>\"\ndiesel database reset --database-url=\"<DATABASE_URL>\"\n```\n\n----------------------------------------\n\nTITLE: Disassembling Sui Package with JSON Errors\nDESCRIPTION: Command to disassemble a Sui package named 'Test' and specifically the module 'm', with errors formatted as JSON.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/json_errors/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndisassemble --json-errors --package Test --name m\n```\n\n----------------------------------------\n\nTITLE: Subtracting UQ64_64 Fixed-Point Numbers in Move\nDESCRIPTION: Subtracts two UQ64_64 fixed-point numbers. Aborts if the result would be negative.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sub(a: UQ64_64, b: UQ64_64): UQ64_64 {\n    UQ64_64(std::macros::uq_sub!(a.0, b.0, abort EOverflow))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Coin and Currency Management in Move\nDESCRIPTION: This snippet defines structures and functions for managing coins and currencies in Move, including minting, burning, and deny list functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Coin\npublic struct CoinMetadata\npublic struct RegulatedCoinMetadata\npublic struct TreasuryCap\npublic struct DenyCapV2\npublic struct CurrencyCreated\npublic struct DenyCap\npublic fun total_supply\npublic fun treasury_into_supply\npublic fun supply_immut\npublic fun supply_mut\npublic fun value\npublic fun balance\npublic fun balance_mut\npublic fun from_balance\npublic fun into_balance\npublic fun take\npublic fun put\npublic entry fun join\npublic fun split\npublic fun divide_into_n\npublic fun zero\npublic fun destroy_zero\npublic fun create_currency\npublic fun create_regulated_currency_v2\npublic fun migrate_regulated_currency_to_v2\npublic fun mint\npublic fun mint_balance\npublic entry fun burn\npublic fun deny_list_v2_add\npublic fun deny_list_v2_remove\npublic fun deny_list_v2_contains_current_epoch\npublic fun deny_list_v2_contains_next_epoch\npublic fun deny_list_v2_enable_global_pause\npublic fun deny_list_v2_disable_global_pause\npublic fun deny_list_v2_is_global_pause_enabled_current_epoch\npublic fun deny_list_v2_is_global_pause_enabled_next_epoch\npublic entry fun mint_and_transfer\npublic entry fun update_name\npublic entry fun update_symbol\npublic entry fun update_description\npublic entry fun update_icon_url\npublic fun get_decimals\npublic fun get_name\npublic fun get_symbol\npublic fun get_description\npublic fun get_icon_url\npublic fun supply\npublic fun create_regulated_currency\npublic fun deny_list_add\npublic fun deny_list_remove\npublic fun deny_list_contains\n```\n\n----------------------------------------\n\nTITLE: Test Selection Commands\nDESCRIPTION: Commands for running specific test cases named 'double_two' and 'one_one'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/package_basics/args.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntest double_two\ntest one_one\n```\n\n----------------------------------------\n\nTITLE: Exploring Conditional 'key' Ability in Move\nDESCRIPTION: This snippet illustrates how the 'key' ability is conditionally applied to generic types. It includes examples of valid and invalid uses of the 'key' ability in function implementations and storage operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abilities.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic struct NoAbilities {}\npublic struct MyData<T> has key { f: T }\n\nfun valid(addr: address) acquires MyData {\n    // Valid, 'MyData<u64>' has 'key'\n    transfer(addr, MyData<u64> { f: 0 });\n}\n\nfun invalid(addr: address) {\n   // Invalid, 'MyData<NoAbilities>' does not have 'key'\n   transfer(addr, MyData<NoAbilities> { f: NoAbilities {} })\n   // Invalid, 'MyData<NoAbilities>' does not have 'key'\n   borrow<NoAbilities>(addr);\n   // Invalid, 'MyData<NoAbilities>' does not have 'key'\n   borrow_mut<NoAbilities>(addr);\n}\n\n// Mock storage operation\nnative public fun transfer<T: key>(addr: address, value: T);\n```\n\n----------------------------------------\n\nTITLE: Creating Vector using Tabulation in Move\nDESCRIPTION: This macro function creates a vector of specified length by applying a given function to each index. It demonstrates vector creation and population in a functional style.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun tabulate<$T>($n: u64, $f: |u64| -> $T): vector<$T> {\n    let mut v = vector[];\n    let n = $n;\n    n.do!(|i| v.push_back($f(i)));\n    v\n}\n```\n\n----------------------------------------\n\nTITLE: Template for README.md in Markdown\nDESCRIPTION: This template provides a structure for creating README.md files for major components in the Move project, including sections for overview, implementation details, and links to documentation and project guidelines.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/coding_guidelines.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# Component Name\n\n[Summary line: Start with one sentence about this component.]\n\n## Overview\n\n* Describe the purpose of this component and how the code in\nthis directory works.\n* Describe the interaction of the code in this directory with\nthe other components.\n* Describe the security model and assumptions about the crates\nin this directory. Examples of how to describe the security\nassumptions will be added in the future.\n\n## Implementation Details\n\n* Describe how the component is modeled. For example, why is the\n  code organized the way it is?\n* Other relevant implementation details.\n\n## Binary, Argument, and Crate Naming\n\nMost tools that we use everyday (rustc, cargo, git, rg, etc.) use dashes `-` as\na separator for binary names and arguments and the [GNU software\nmanual](https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html)\ndictates that long options should \"consist of `--` followed by a name made of\nalphanumeric characters and dashes\". As such dashes `-` should be used as\nseparators in both binary names and command line arguments.\n\nIn addition, it is generally accepted by many in the Rust community that dashes\n`-` should be used as separators in crate names, i.e. `x25519-dalek`.\n```\n\n----------------------------------------\n\nTITLE: Implementing bitwise NOT operation for u128\nDESCRIPTION: Returns the bitwise NOT of a u128 value by flipping each bit (0 becomes 1, 1 becomes 0).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bitwise_not(x: u128): u128 {\n    x ^ max_value!()\n}\n```\n\n----------------------------------------\n\nTITLE: Sui Validator Metadata Output\nDESCRIPTION: Complete output showing validator status, cryptographic keys, network addresses, staking information, and pool details. Includes protocol keys, network keys, worker keys, proof of possession, and various operational parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/validator.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n0x3...de5's valdiator status: Active\nSuiValidatorSummary {\n\tsui_address: 0x3...de5,\n\tprotocol_pubkey_bytes: [\n    \t167,\n    \t93,\n    \t42,\n    \t177,\n    \t79,\n    \t244,\n    \t192,\n    \t168,\n    \t26,\n    \t242,\n    \t55,\n    \t119,\n    \t232,\n    \t131,\n    \t191,\n    \t112,\n    \t92,\n    \t219,\n    \t204,\n    \t109,\n    \t234,\n    \t107,\n    \t124,\n    \t116,\n    \t79,\n    \t200,\n    \t221,\n    \t159,\n    \t185,\n    \t142,\n    \t173,\n    \t161,\n    \t122,\n    \t214,\n    \t113,\n    \t183,\n    \t240,\n    \t124,\n    \t205,\n    \t8,\n    \t157,\n    \t110,\n    \t31,\n    \t85,\n    \t16,\n    \t106,\n    \t16,\n    \t34,\n    \t9,\n    \t254,\n    \t125,\n    \t36,\n    \t83,\n    \t125,\n    \t35,\n    \t231,\n    \t245,\n    \t203,\n    \t204,\n    \t43,\n    \t137,\n    \t70,\n    \t229,\n    \t201,\n    \t64,\n    \t157,\n    \t189,\n    \t203,\n    \t220,\n    \t222,\n    \t1,\n    \t121,\n    \t138,\n    \t139,\n    \t41,\n    \t108,\n    \t106,\n    \t57,\n    \t116,\n    \t212,\n    \t208,\n    \t249,\n    \t215,\n    \t18,\n    \t22,\n    \t237,\n    \t214,\n    \t179,\n    \t71,\n    \t192,\n    \t93,\n    \t89,\n    \t255,\n    \t51,\n    \t56,\n    \t158,\n\t],\n\tnetwork_pubkey_bytes: [\n    \t118,\n    \t14,\n    \t165,\n    \t223,\n    \t145,\n    \t150,\n    \t130,\n    \t74,\n    \t212,\n    \t160,\n    \t218,\n    \t170,\n    \t134,\n    \t2,\n    \t206,\n    \t72,\n    \t228,\n    \t87,\n    \t35,\n    \t114,\n    \t40,\n    \t217,\n    \t206,\n    \t35,\n    \t29,\n    \t194,\n    \t81,\n    \t61,\n    \t186,\n    \t215,\n    \t56,\n    \t215,\n\t],\n\tworker_pubkey_bytes: [\n    \t84,\n    \t171,\n    \t204,\n    \t100,\n    \t81,\n    \t92,\n    \t16,\n    \t207,\n    \t151,\n    \t167,\n    \t70,\n    \t138,\n    \t104,\n    \t92,\n    \t100,\n    \t75,\n    \t53,\n    \t47,\n    \t212,\n    \t209,\n    \t92,\n    \t2,\n    \t109,\n    \t120,\n    \t66,\n    \t146,\n    \t180,\n    \t116,\n    \t144,\n    \t22,\n    \t139,\n    \t57,\n\t],\n\tproof_of_possession_bytes: [\n    \t137,\n    \t134,\n    \t236,\n    \t79,\n    \t232,\n    \t146,\n    \t206,\n    \t45,\n    \t136,\n    \t245,\n    \t8,\n    \t42,\n    \t114,\n    \t154,\n    \t128,\n    \t148,\n    \t60,\n    \t137,\n    \t214,\n    \t92,\n    \t177,\n    \t46,\n    \t118,\n    \t246,\n    \t37,\n    \t159,\n    \t183,\n    \t233,\n    \t122,\n    \t49,\n    \t121,\n    \t227,\n    \t136,\n    \t76,\n    \t48,\n    \t122,\n    \t119,\n    \t187,\n    \t194,\n    \t169,\n    \t114,\n    \t7,\n    \t16,\n    \t225,\n    \t104,\n    \t211,\n    \t100,\n    \t198,\n\t],\n\tname: \"Staked\",\n\tdescription: \"The leading provider of staking infrastructure\",\n\timage_url: \"https://avatars.githubusercontent.com/u/38704373\",\n\tproject_url: \"https://staked.us/\",\n\tnet_address: \"/dns/sui-mainnet.prod-eks-eu-west-1.staked.cloud/tcp/8080/http\",\n\tp2p_address: \"/dns/sui-mainnet-udp.prod-eks-eu-west-1.staked.cloud/udp/8084\",\n\tprimary_address: \"/dns/sui-mainnet-udp.prod-eks-eu-west-1.staked.cloud/udp/8081\",\n\tworker_address: \"/dns/sui-mainnet-udp.prod-eks-eu-west-1.staked.cloud/udp/8082\",\n\tnext_epoch_protocol_pubkey_bytes: None,\n\tnext_epoch_proof_of_possession: None,\n\tnext_epoch_network_pubkey_bytes: None,\n\tnext_epoch_worker_pubkey_bytes: None,\n\tnext_epoch_net_address: None,\n\tnext_epoch_p2p_address: None,\n\tnext_epoch_primary_address: None,\n\tnext_epoch_worker_address: None,\n\tvoting_power: 53,\n\toperation_cap_id: 0x4...217,\n\tgas_price: 1000,\n\tcommission_rate: 1000,\n\tnext_epoch_stake: 42223548570491465,\n\tnext_epoch_gas_price: 1000,\n\tnext_epoch_commission_rate: 1000,\n\tstaking_pool_id: 0xc...932,\n\tstaking_pool_activation_epoch: Some(\n    \t0,\n\t),\n\tstaking_pool_deactivation_epoch: None,\n\tstaking_pool_sui_balance: 42926894529549497,\n\trewards_pool: 1047712965206377,\n\tpool_token_balance: 41704322845739375,\n\tpending_stake: 0,\n\tpending_total_sui_withdraw: 703345959058032,\n\tpending_pool_token_withdraw: 683314441220777,\n\texchange_rates_id: 0x5...65d,\n\texchange_rates_size: 231,\n```\n\n----------------------------------------\n\nTITLE: Defining MAX_VALIDATOR_GAS_PRICE Constant in Move\nDESCRIPTION: Constant defining the maximum gas price (100,000 MIST) that a validator can set.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_25\n\nLANGUAGE: move\nCODE:\n```\nconst MAX_VALIDATOR_GAS_PRICE: u64 = 100000;\n```\n\n----------------------------------------\n\nTITLE: Display Fields Getter - Move\nDESCRIPTION: Returns a reference to the fields map of the Display object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/display.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun fields<T: key>(d: &Display<T>): &VecMap<String, String> {\n    &d.fields\n}\n```\n\n----------------------------------------\n\nTITLE: Token Balance Flow Diagram - Left to Right\nDESCRIPTION: Mermaid flowchart showing the relationship between Balance, Coin, and Token types with their respective abilities and conversion flows from left to right.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph \"&nbsp;&nbsp;Balance has store { u64 }&nbsp;&nbsp;\"\n        A[\"Balance<T>\n        Supply<T>\"];\n    end\n    subgraph \"&nbsp;&nbsp;Coin has key, store { Balance }&nbsp;&nbsp;\"\n        B[\"Coin<T>\n        TreasuryCap<T>\"];\n    end\n        subgraph \"&nbsp;&nbsp;Token has key { Balance }&nbsp;&nbsp;\"\n        C[\"Token<T>\n        TreasuryCap<T>\"];\n    end\n    A-- from_balance -->B;\n    B-- from_coin -->C;\n```\n\n----------------------------------------\n\nTITLE: OrderPlacedV2 Event Struct Definition\nDESCRIPTION: Definition of the OrderPlacedV2 event struct which is emitted when a maker order is placed in the order book. Includes order details such as ID, ownership, price, and quantity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic struct OrderPlacedV2<phantom BaseAsset, phantom QuoteAsset> has copy, drop, store {\n    pool_id: sui::object::ID,\n    order_id: u64,\n    is_bid: bool,\n    owner: sui::object::ID,\n    base_asset_quantity_placed: u64,\n    price: u64,\n    expire_timestamp: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Borrow String Function in Move\nDESCRIPTION: Function that returns a reference to the String representation of a TypeName.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/type_name.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic fun borrow_string(self: &TypeName): &String {\n    &self.name\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sui Package Manifest\nDESCRIPTION: Package manifest configuration in TOML format defining the package name, version and address settings for a Sui package.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/upgrade.mdx#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"sui_package\"\nversion = \"0.0.0\"\n\n[addresses]\nsui_package = \"0x0\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Group Element Conversion in Move\nDESCRIPTION: Converts an element from one group type to another. Takes source and destination type parameters along with the element to convert.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun convert<From, To>(\n    from_type_: u8,\n    to_type_: u8,\n    e: &Element<From>,\n): Element<To> {\n    Element<To> { bytes: internal_convert(from_type_, to_type_, &e.bytes) }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants for Secp256k1 Operations in Move\nDESCRIPTION: Constants for error codes related to Secp256k1 operations, including failure to recover public key, invalid signatures, and invalid public keys.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/ecdsa_k1.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nconst EFailToRecoverPubKey: u64 = 0;\n```\n\nLANGUAGE: move\nCODE:\n```\nconst EInvalidSignature: u64 = 1;\n```\n\nLANGUAGE: move\nCODE:\n```\nconst EInvalidPubKey: u64 = 2;\n```\n\n----------------------------------------\n\nTITLE: Vector Partition Macro Implementation in Rust\nDESCRIPTION: Splits a vector into two vectors based on a predicate function, separating elements into matching and non-matching groups.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_18\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun partition<$T>($v: vector<$T>, $f: |&$T| -> bool): (vector<$T>, vector<$T>) {\n    let v = $v;\n    let mut r1 = vector[];\n    let mut r2 = vector[];\n    v.do!(|e| if ($f(&e)) r1.push_back(e) else r2.push_back(e));\n    (r1, r2)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Address in Per Type List - Move\nDESCRIPTION: The `v1_per_type_list_contains` function checks if an address is present in the denied addresses of a specific type. It also checks the denied count to determine if the address is truly denied.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\nfun v1_per_type_list_contains(list: &sui::deny_list::PerTypeList, type: vector<u8>, addr: address): bool {\n    if (!list.denied_count.contains(addr)) return false;\n    let denied_count = &list.denied_count[addr];\n    if (*denied_count == 0) return false;\n    if (!list.denied_addresses.contains(type)) return false;\n    let denied_addresses = &list.denied_addresses[type];\n    denied_addresses.contains(&addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MAX_VALIDATOR_METADATA_LENGTH Constant in Move\nDESCRIPTION: Constant defining the maximum allowed length (256) for validator metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_24\n\nLANGUAGE: move\nCODE:\n```\nconst MAX_VALIDATOR_METADATA_LENGTH: u64 = 256;\n```\n\n----------------------------------------\n\nTITLE: Generating Framework Documentation with Cargo\nDESCRIPTION: Command to build documentation for Sui Framework, excluding benchmarks and dependencies\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/framework.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo doc --workspace --exclude \"sui-benchmark\" --no-deps\n```\n\n----------------------------------------\n\nTITLE: Mysticeti: DAG Byzantine Consensus Protocol\nDESCRIPTION: A novel consensus protocol achieving exceptionally low latency of 3 message rounds with high resource efficiency and censorship resistance. Introduces optimized block commitment and fast commit path for asset transfers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/research-papers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: research\nCODE:\n```\nMysticeti-C: DAG-based Byzantine consensus protocol with 0.5s WAN latency\n```\n\n----------------------------------------\n\nTITLE: Executing Functions in Sui VM (Rust)\nDESCRIPTION: This function allows the execution of any function in a module through a ModuleId and function name. It loads the function, builds the argument list, and executes the function using the interpreter.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/spec/vm.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub fn execute_function(\n    &mut self,\n    module: &ModuleId,\n    function_name: &IdentStr,\n    ty_args: Vec<TypeTag>,\n    args: Vec<Vec<u8>>,\n    gas_status: &mut impl GasMeter,\n) -> VMResult<()>;\n```\n\n----------------------------------------\n\nTITLE: Defining nextCursor for Event Response Pagination\nDESCRIPTION: Creates a nextCursor to aid pagination of event responses based on transaction digest and sequence. Used to start responses from a particular point in historical events.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnextCursor : {\"txDigest\": \"GZQN9pE3Zr9ZfLzBK1BfVCXtbjx5xKMxPSEKaHDvL3E2\",\"eventSeq\": 6019}\n```\n\n----------------------------------------\n\nTITLE: Multiply-Divide Operation Macro\nDESCRIPTION: Performs multiplication of two u64 values followed by division, using u128 as intermediate type to prevent overflow. Used for accurate token amount calculations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_48\n\nLANGUAGE: Move\nCODE:\n```\nmacro fun mul_div($a: u64, $b: u64, $c: u64): u64 {\n    (($a as u128) * ($b as u128) / ($c as u128)) as u64\n}\n```\n\n----------------------------------------\n\nTITLE: Mutably Borrowing an Item from a Kiosk using PTB\nDESCRIPTION: This JavaScript snippet demonstrates how to mutably borrow an item from a Sui Kiosk using Programmable Transaction Blocks. It uses the 'borrow_val' and 'return_val' functions from the 'kiosk' module to take an asset, potentially modify it, and place it back in the same transaction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = new Transaction();\n\nlet itemType = 'ITEM_TYPE';\nlet itemId = tx.pure.id('<ITEM_ID>');\nlet kioskArg = tx.object('<ID>');\nlet capArg = tx.object('<ID>');\n\nlet [item, promise] = tx.moveCall({\n\ttarget: '0x2::kiosk::borrow_val',\n\targuments: [kioskArg, capArg, itemId],\n\ttypeArguments: [itemType],\n});\n\n// freely mutate or reference the `item`\n// any calls are available as long as they take a reference\n// `returnValue` must be explicitly called\n\ntx.moveCall({\n\ttarget: '0x2::kiosk::return_val',\n\targuments: [kioskArg, item, promise],\n\ttypeArguments: [itemType],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Range-Based Inclusive Loop Macro for U16 in Rust\nDESCRIPTION: Defines a macro function 'range_do_eq' that applies a given function to each number in a specified u16 range, inclusive of both start and stop values. It utilizes the std::macros::range_do_eq macro internally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_12\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun range_do_eq<$R: drop>($start: u16, $stop: u16, $f: |u16| -> $R) {\n    std::macros::range_do_eq!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Calculate Fungible Staked SUI Withdrawal Amounts in Move\nDESCRIPTION: Helper function that calculates the principal and rewards withdrawal amounts for fungible staked SUI tokens based on exchange rates and pool state.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\nfun calculate_fungible_staked_sui_withdraw_amount(\n    latest_exchange_rate: PoolTokenExchangeRate,\n    fungible_staked_sui_value: u64,\n    fungible_staked_sui_data_principal_amount: u64,\n    fungible_staked_sui_data_total_supply: u64,\n): (u64, u64) {\n    let total_sui_amount = latest_exchange_rate.get_sui_amount(\n        fungible_staked_sui_data_total_supply,\n    );\n    let fungible_staked_sui_data_principal_amount = fungible_staked_sui_data_principal_amount.min(\n        total_sui_amount,\n    );\n    let total_rewards = total_sui_amount - fungible_staked_sui_data_principal_amount;\n    let principal_withdraw_amount = mul_div!(\n        fungible_staked_sui_value,\n        fungible_staked_sui_data_principal_amount,\n        fungible_staked_sui_data_total_supply,\n    );\n    let rewards_withdraw_amount = mul_div!(\n        fungible_staked_sui_value,\n        total_rewards,\n        fungible_staked_sui_data_total_supply,\n    );\n    let expected_sui_amount = latest_exchange_rate.get_sui_amount(fungible_staked_sui_value);\n    assert!(\n        principal_withdraw_amount + rewards_withdraw_amount <= expected_sui_amount,\n        EInvariantFailure,\n    );\n    (principal_withdraw_amount, rewards_withdraw_amount)\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Source Files with Migration\nDESCRIPTION: Shell commands to recursively compare original source files with migration sources and verify Move.toml configuration changes\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/migration_names_mut_allowed/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndiff -r -s sources migration_sources\ndiff -s Move.toml Move.toml.expected\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Documentation Build\nDESCRIPTION: Cleaning cargo cache before rebuilding documentation if issues occur\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/framework.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo clean\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Operations in Sui\nDESCRIPTION: Functions for various cryptographic operations including ECDSA, ECVRF, Ed25519, and hashing algorithms.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun secp256k1_ecrecover(0x2::ecdsa_k1)\npublic fun decompress_pubkey(0x2::ecdsa_k1)\npublic fun secp256k1_verify(0x2::ecdsa_k1)\npublic fun secp256r1_ecrecover(0x2::ecdsa_r1)\npublic fun secp256r1_verify(0x2::ecdsa_r1)\npublic fun ecvrf_verify(0x2::ecvrf)\npublic fun ed25519_verify(0x2::ed25519)\npublic fun blake2b256(0x2::hash)\npublic fun keccak256(0x2::hash)\n```\n\n----------------------------------------\n\nTITLE: Reporting Validator Peers\nDESCRIPTION: Commands to report validator peers, with options for undoing reports and using an Operation Cap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/node-tools.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsui validator report-validator <reportee-address>\n```\n\nLANGUAGE: bash\nCODE:\n```\nsui validator report-validator --operation-cap-id <operation-cap-id> <reportee-address>\n```\n\n----------------------------------------\n\nTITLE: Defining ENotValidatorCandidate Error Constant in Move\nDESCRIPTION: Error constant (10) used when an intended validator is not a candidate validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_17\n\nLANGUAGE: move\nCODE:\n```\nconst ENotValidatorCandidate: u64 = 10;\n```\n\n----------------------------------------\n\nTITLE: Defining Structs with Different Abilities in Move\nDESCRIPTION: This snippet defines two structs in Move: 'Foo' with copy, drop, and store abilities, and 'Coin' with only store ability. These structs are used to demonstrate type inference in subsequent examples.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\npublic struct Foo has copy, drop, store { f: u64 }\npublic struct Coin has store { value: u64 }\n```\n\n----------------------------------------\n\nTITLE: Creating Zero Scalar for BLS12381\nDESCRIPTION: This function generates a zero scalar for the BLS12381 scheme, initializing the element with predefined zero bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_zero\">scalar_zero</a>(): <a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_zero\">scalar_zero</a>(): Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt; {\n    <b>let</b> zero = <a href=\"../sui/bls12381.md#sui_bls12381_SCALAR_ZERO_BYTES\">SCALAR_ZERO_BYTES</a>;\n    <a href=\"../sui/group_ops.md#sui_group_ops_from_bytes\">group_ops::from_bytes</a>(<a href=\"../sui/bls12381.md#sui_bls12381_SCALAR_TYPE\">SCALAR_TYPE</a>, &zero, <b>true</b>)\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Option with Predicate in Move\nDESCRIPTION: Implements a filter macro for Option types in Move. The function returns None if the input is None; otherwise, it applies a predicate function to determine if the Option should be returned. Dependencies include std::option and std::bool modules. Inputs include an Option type and a predicate function, with the output being an Option type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_27\n\nLANGUAGE: move\nCODE:\n```\n<b>public</b> <b>macro</b> <b>fun</b> <a href=\"../std/option.md#std_option_filter\">filter</a>&lt;$T: drop&gt;($o: <a href=\"../std/option.md#std_option_Option\">std::option::Option</a>&lt;$T&gt;, $f: |&$T| -&gt; <a href=\"../std/bool.md#std_bool\">bool</a>): <a href=\"../std/option.md#std_option_Option\">std::option::Option</a>&lt;$T&gt; {\n    <b>let</b> o = $o;\n    <b>if</b> (o.<a href=\"../std/option.md#std_option_is_some\">is_some</a>() && $f(o.<a href=\"../std/option.md#std_option_borrow\">borrow</a>())) o <b>else</b> <a href=\"../std/option.md#std_option_none\">none</a>()\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Name in Move\nDESCRIPTION: This function demonstrates how to access NFT metadata directly from the object. It returns the name of the TestnetNFT, showcasing the simplicity of data retrieval in Sui's object-based system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun name(nft: &TestnetNFT): &String {\n    &nft.name\n}\n```\n\n----------------------------------------\n\nTITLE: Dividing BLS12381 Scalars\nDESCRIPTION: This function divides one BLS12381 scalar by another. It throws an error if attempting to divide by zero, ensuring safety in operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_div\">scalar_div</a>(e1: &<a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;, e2: &<a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;): <a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_div\">scalar_div</a>(e1: &Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt;, e2: &Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt;): Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt; {\n    <a href=\"../sui/group_ops.md#sui_group_ops_div\">group_ops::div</a>(<a href=\"../sui/bls12381.md#sui_bls12381_SCALAR_TYPE\">SCALAR_TYPE</a>, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Validator and Minimal Full Node Pruning Policy\nDESCRIPTION: Pruning configuration optimized for validators with minimal disk usage and limited historical data retention\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/data-management.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenable-index-processing: false\n\nauthority-store-pruning-config:\n  num-epochs-to-retain: 5\n  num-epochs-to-retain-for-checkpoints: 2\n```\n\n----------------------------------------\n\nTITLE: Funding Multisig Address\nDESCRIPTION: Gets SUI tokens from faucet for the multisig address and checks gas balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nMULTISIG=<MULTISIG-ADDRESS>\n```\n\nLANGUAGE: sh\nCODE:\n```\nsui client faucet --address $MULTISIG\n```\n\nLANGUAGE: sh\nCODE:\n```\nsui client gas $MULTISIG\n```\n\n----------------------------------------\n\nTITLE: Executing Script Functions in Move VM\nDESCRIPTION: This function executes a Move script function from an on-chain module. It takes the module ID, function name, type arguments, regular arguments, sender addresses, and gas meter as input. The function loads the script function and executes it similarly to regular scripts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/spec/vm.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub fn execute_script_function(\n    &mut self,\n    module: &ModuleId,\n    function_name: &IdentStr,\n    ty_args: Vec<TypeTag>,\n    args: Vec<Vec<u8>>,\n    senders: Vec<AccountAddress>,\n    gas_status: &mut impl GasMeter,\n) -> VMResult<()>;\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Name in Sui Network\nDESCRIPTION: Shell command to update a validator's name using the sui_system::update_validator_name function. Requires system package access and gas budget.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call --package 0x3 --module sui_system --function update_validator_name --args 0x5 \\\"new_validator_name\\\" --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Displaying Active Address in Sui Local Network\nDESCRIPTION: Command to show the active address on the Sui local network using Sui CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/local-network.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsui client active-address\n```\n\n----------------------------------------\n\nTITLE: Visualizing Sui Architecture with Mermaid Diagram\nDESCRIPTION: This mermaid flowchart illustrates the architecture of Sui, showing the client services, authority aggregator, and authority clients connecting to authority states. It depicts the flow from various client types through the system components and their network connections.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    CC(CLI Client) --> ClientService\n    RC(Rest Client) --> ClientService\n    RPCC(RPC Client) --> ClientService\n    ClientService --> AuthorityAggregator\n    AuthorityAggregator --> AC1[AuthorityClient] & AC2[AuthorityClient]\n    subgraph Authority1\n      AS[AuthorityState]\n    end\n    subgraph Authority2\n      AS2[AuthorityState]\n    end\n    AC1 <==>|Network TCP| Authority1\n    AC2 <==>|Network TCP| Authority2\n```\n\n----------------------------------------\n\nTITLE: Multiple Variable Declarations with Tuples in Move\nDESCRIPTION: This example demonstrates how to declare multiple variables at once using tuples in Move, including mixing mutable and immutable variables.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nlet () = ();\nlet (x0, x1) = (0, 1);\nlet (y0, y1, y2) = (0, 1, 2);\nlet (z0, z1, z2, z3) = (0, 1, 2, 3);\n\nlet (mut x, y) = (0, 1);\nx = 1;\n```\n\n----------------------------------------\n\nTITLE: Bridge Message Constants Definition\nDESCRIPTION: Defines constants for message prefixes and public key lengths used in bridge operations\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\nconst SUI_MESSAGE_PREFIX: vector<u8> = vector[83, 85, 73, 95, 66, 82, 73, 68, 71, 69, 95, 77, 69, 83, 83, 65, 71, 69];\nconst ECDSA_COMPRESSED_PUBKEY_LENGTH: u64 = 33;\n```\n\n----------------------------------------\n\nTITLE: Creating Singleton Clock UID in Move\nDESCRIPTION: Creates the UID for the singleton Clock object. This should only be called once from the clock module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun clock(): UID {\n    UID {\n        id: ID { bytes: SUI_CLOCK_OBJECT_ID },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Sui Full Node on Linux\nDESCRIPTION: Installs essential packages for setting up a Sui Full node on a Linux distribution. Dependencies include tzdata, ca-certificates, and build tools. Suitable for environments with Docker installed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ apt update \\\n&& apt install -y --no-install-recommends \\\ntzdata \\\nca-certificates \\\nbuild-essential \\\npkg-config \\\ncmake\n```\n\n----------------------------------------\n\nTITLE: Initializing Kiosk Module Dependencies in Move\nDESCRIPTION: This code snippet shows the module dependencies for the Sui kiosk module. It imports various standard libraries and Sui-specific modules required for kiosk functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nuse std::address;\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::type_name;\nuse std::vector;\nuse sui::address;\nuse sui::bag;\nuse sui::balance;\nuse sui::coin;\nuse sui::config;\nuse sui::deny_list;\nuse sui::dynamic_field;\nuse sui::dynamic_object_field;\nuse sui::event;\nuse sui::hex;\nuse sui::object;\nuse sui::package;\nuse sui::sui;\nuse sui::table;\nuse sui::transfer;\nuse sui::transfer_policy;\nuse sui::tx_context;\nuse sui::types;\nuse sui::url;\nuse sui::vec_set;\n```\n\n----------------------------------------\n\nTITLE: Borrowing Per-Type Config Immutably in Sui Deny List (Move)\nDESCRIPTION: Function to borrow an immutable reference to a Config object for a specific type from the deny list. Similar to the mutable version but returns a read-only reference.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\nfun borrow_per_type_config(\n    deny_list: &DenyList,\n    per_type_index: u64,\n    per_type_key: vector<u8>,\n): &Config<ConfigWriteCap> {\n    let key = ConfigKey { per_type_index, per_type_key };\n    ofield::internal_borrow(&deny_list.id, key)\n}\n```\n\n----------------------------------------\n\nTITLE: NFT Rental Core Flow\nDESCRIPTION: Sequence diagram illustrating the complete rental flow including listing, renting, borrowing and reclaiming NFTs with proper payment handling.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_18\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Creator's Rental Policy\n    participant Renter\n    participant Borrower\n    participant nft_rental module\n    participant Renter's Extension Bag\n    participant Borrower's Extension Bag\n    participant kiosk module\n    participant Renter's Kiosk\n    participant coin module\n    participant blockchain\nrect rgba(191, 223, 255, 0.2) \n    note right of Renter: List for rent\n    Renter->>nft_rental module: Use kiosk, kioskOwnerCap, ProtectedTP, ObjectID and Renting info as inputs in list\n    blockchain->>nft_rental module: Use protectedTP as input in list\n    nft_rental module->>kiosk module: List object for zero price\n    nft_rental module->>kiosk module: Purchase Object\n    Renter's Kiosk->>kiosk module: Take object from kiosk\n    kiosk module-->>nft_rental module: Returns Object\n    nft_rental module-->>Renter's Extension Bag: Place Object in renter's bag\n    end\nrect rgba(191, 223, 255, 0.2)\n\t\tnote right of Borrower: Rent\n    Borrower->>nft_rental module: Use renter_kiosk, borrower_kiosk, RentalPolicy, objectID, coin and clock as inputs in rent\n    blockchain->>nft_rental module: Use RentalPolicy as input in rent\n    nft_rental module->>coin module: Calculate payment and fees\n    coin module -->> Renter: Payment\n    coin module -->> Creator's Rental Policy: Fees\n    Renter's Extension Bag->>nft_rental module: Take object from renter's bag\n    nft_rental module-->>Borrower's Extension Bag: Place rented Object in borrower's bag\n    end\nrect rgba(191, 223, 255, 0.2)\n\t\tnote right of Borrower: Borrow\n    Borrower->>nft_rental module: Use kiosk, kioskOwnerCap, ObjectID as input in borrow\n    Borrower's Extension Bag->>nft_rental module: Take object from borrower's bag\n    nft_rental module-->>Borrower: Object, Promise\n        note right of Borrower: Perform operation & return Borrowed Item\n    Borrower->>Borrower: Operation on Object\n    Borrower->>nft_rental module: Resolve return promise by returning Object, Promise\n    nft_rental module-->>Borrower's Extension Bag: Place rented Object in borrower's bag\n    end\nrect rgba(191, 223, 255, 0.2)\n\t\tnote right of Renter: Reclaim\n    Renter->>nft_rental module: Use renter_kiosk, borrower_kiosk, clock as inputs in reclaim\n    blockchain ->>nft_rental module: Use TransferPolicy as input in reclaim\n    Borrower's Extension Bag->>nft_rental module: Take Object from borrower's bag if renting period is over\n    alt Empty Transfer Policy\n        nft_rental module-->>Renter's Kiosk: Place Object\n    else TransferPolicy with lock rule\n        nft_rental module-->>Renter's Kiosk: Lock Object\n    end \n    end\n```\n\n----------------------------------------\n\nTITLE: Converting ASCII String to Bytes in Move\nDESCRIPTION: Unpacks a string and returns its backing bytes. This consumes the original string and returns the vector of bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun into_bytes(string: String): vector<u8> {\n    let String { bytes } = string;\n    bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Review Rating System Workflow with Mermaid\nDESCRIPTION: A sequence diagram illustrating the interactions between Service, Dashboard, Reviewer, and Moderator in the review rating system workflow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  Service ->> Dashboard: Add service to dashboard\n  Service ->> Reviewer: Send proof of experience\n  Reviewer ->> Service: Send review\n  Service ->> Reviewer: Send reward\n  Review reader ->> Service: Vote on review\n  Moderator ->> Service: Remove abused review\n```\n\n----------------------------------------\n\nTITLE: Move VM Bytecode Instructions\nDESCRIPTION: Complete instruction set for the Move virtual machine. Each instruction is 1 byte opcode optionally followed by operand data. Includes memory operations, control flow, arithmetic, and global storage access.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/spec/vm.md#2025-04-22_snippet_7\n\nLANGUAGE: bytecode\nCODE:\n```\n0x01: POP\n0x02: RET\n0x03: BR_TRUE(offset)\n0x04: BR_FALSE(offset)\n0x05: BRANCH(offset)\n0x06: LD_U64(value)\n0x07: LD_CONST(index)\n0x08: LD_TRUE\n0x09: LD_FALSE\n0x0A: COPY_LOC(index)\n0x0B: MOVE_LOC(index)\n...\n```\n\n----------------------------------------\n\nTITLE: Order Property Access Functions\nDESCRIPTION: A collection of public accessor functions to retrieve various properties of an Order struct, including order ID, tick level, quantities, bid status, owner address, and expiration timestamp.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_45\n\nLANGUAGE: Move\nCODE:\n```\npublic fun open_orders(tick_level: &TickLevel): &LinkedTable<u64, Order> {\n    &tick_level.open_orders\n}\n\npublic fun order_id(order: &Order): u64 {\n    order.order_id\n}\n\npublic fun tick_level(order: &Order): u64 {\n    order.price\n}\n\npublic fun original_quantity(order: &Order): u64 {\n    order.original_quantity\n}\n\npublic fun quantity(order: &Order): u64 {\n    order.quantity\n}\n\npublic fun is_bid(order: &Order): bool {\n    order.is_bid\n}\n\npublic fun owner(order: &Order): address {\n    order.owner\n}\n\npublic fun expire_timestamp(order: &Order): u64 {\n    order.expire_timestamp\n}\n```\n\n----------------------------------------\n\nTITLE: Building All Packages\nDESCRIPTION: Command to build all packages with verbose output, without specifying a particular package path.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/build_with_bytecode/args.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbuild -v\n```\n\n----------------------------------------\n\nTITLE: Account Balance Query Function\nDESCRIPTION: Retrieves the available and locked balance for a given account address from the custodian. Returns (0,0) if account doesn't exist rather than aborting.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun account_balance<Asset>(\n    custodian: &Custodian<Asset>,\n    owner: address\n): (u64, u64) {\n    if (!table::contains(&custodian.account_balances, owner)) {\n        return (0, 0)\n    };\n    let account_balances = table::borrow(&custodian.account_balances, owner);\n    let avail_balance = balance::value(&account_balances.available_balance);\n    let locked_balance = balance::value(&account_balances.locked_balance);\n    (avail_balance, locked_balance)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sui Validator to Active Set\nDESCRIPTION: This command adds a validator candidate to the active validator set for the next epoch. It requires the candidate to have accumulated the minimum required stake.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsui client call --package 0x3 --module sui_system --function request_add_validator --args 0x5 --gas-budget 10000000\n```\n\n----------------------------------------\n\nTITLE: U128 to U16 Conversion\nDESCRIPTION: Attempts to convert a u128 value to u16, returning None if the value is too large.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u16(x: u128): Option<u16> {\n    std::macros::try_as_u16!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON-RPC Query Reference - sui_getTotalTransactionBlocks\nDESCRIPTION: Example showing the JSON-RPC method sui_getTotalTransactionBlocks mentioned in the documentation. This is referenced as a basic example to illustrate the differences between JSON-RPC and GraphQL query patterns.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/migrate-to-graphql.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nsui_getTotalTransactionBlocks\n```\n\n----------------------------------------\n\nTITLE: Exporting Mnemonic Phrase in CLI\nDESCRIPTION: This snippet exports a mnemonic phrase to be used by the CLI application. It serves as a prerequisite for other commands that manipulate Kiosks. Replace the `...` with the actual mnemonic phrase.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/kiosk-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MNEMONIC=\\\"...\\\"\n```\n\n----------------------------------------\n\nTITLE: Verifying BLS12381 Minimum Public Key Signature\nDESCRIPTION: This function verifies whether a given signature matches a public key and a message according to the BLS protocol. It expects the signature, public key, and message as byte vectors and returns a boolean indicating validity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_bls12381_min_pk_verify\">bls12381_min_pk_verify</a>(signature: &vector&lt;u8&gt;, public_key: &vector&lt;u8&gt;, msg: &vector&lt;u8&gt;): bool\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>native</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_bls12381_min_pk_verify\">bls12381_min_pk_verify</a>(\n    signature: &vector&lt;u8&gt;,\n    public_key: &vector&lt;u8&gt;,\n    msg: &vector&lt;u8&gt;,\n): bool;\n```\n\n----------------------------------------\n\nTITLE: Joining the Validator Committee\nDESCRIPTION: Command for a validator candidate to join the committee and become a pending validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator join-committee\n```\n\n----------------------------------------\n\nTITLE: Showing Available Commands for sui-rpc-loadgen\nDESCRIPTION: Command to display all available options and commands for the sui-rpc-loadgen utility.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rpc-loadgen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-rpc-loadgen -- -h\n```\n\n----------------------------------------\n\nTITLE: Loop from 0 to Stop in Move (Inclusive)\nDESCRIPTION: Macro function that loops from 0 to a given stop value (inclusive) and applies a given function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do_eq<$R: drop>($stop: u128, $f: |u128| -> $R) {\n    std::macros::do_eq!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Sui User and Directories\nDESCRIPTION: Creates a 'sui' user and sets up the necessary directories for the Sui Node with appropriate permissions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/systemd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo useradd sui\nsudo mkdir -p /opt/sui/bin\nsudo mkdir -p /opt/sui/config\nsudo mkdir -p /opt/sui/db\nsudo mkdir -p /opt/sui/key-pairs\nsudo chown -R sui:sui /opt/sui\n```\n\n----------------------------------------\n\nTITLE: Constants Definition\nDESCRIPTION: Defines error constants and BN254 field size maximum value for input validation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/poseidon.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nconst ENonCanonicalInput: u64 = 0;\nconst EEmptyInput: u64 = 1;\nconst BN254_MAX: u256 = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n```\n\n----------------------------------------\n\nTITLE: Using Modules in Move\nDESCRIPTION: Imports necessary Sui and standard modules for managing validators including addresses, options, versions, and contexts. This setup is crucial for ensuring all required functionalities are available.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_wrapper.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nuse std::address;\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::type_name;\nuse std::u64;\nuse std::vector;\nuse sui::address;\nuse sui::bag;\nuse sui::balance;\nuse sui::coin;\nuse sui::config;\nuse sui::deny_list;\nuse sui::dynamic_field;\nuse sui::dynamic_object_field;\nuse sui::event;\nuse sui::hex;\nuse sui::object;\nuse sui::sui;\nuse sui::table;\nuse sui::transfer;\nuse sui::tx_context;\nuse sui::types;\nuse sui::url;\nuse sui::vec_set;\nuse sui::versioned;\nuse sui_system::staking_pool;\nuse sui_system::validator;\nuse sui_system::validator_cap;\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier for Move\nDESCRIPTION: Example .prettierrc configuration file for using the Prettier Move plugin in a project.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"printWidth\": 100,\n\t\"tabWidth\": 4,\n\t\"useModuleLabel\": true,\n\t\"autoGroupImports\": \"module\",\n\t\"plugins\": [\"@mysten/prettier-plugin-move\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Difference Between Two u64 Values\nDESCRIPTION: Function that returns the absolute value of the difference between two u64 values using std::macros::num_diff.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun diff(x: u64, y: u64): u64 {\n    std::macros::num_diff!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Query Parameter Parsing for Prisma\nDESCRIPTION: Utility function for parsing URL query parameters into Prisma WHERE clauses. This function extracts and transforms query string parameters into the correct format for Prisma database queries.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum WhereParamTypes {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n};\n\nexport type WhereParam = {\n    key: string;\n    type: WhereParamTypes;\n    isInArrayForm?: boolean; // if key[] then true\n    mapper?: (value: string) => any;\n};\n\nexport function parseWhereStatement(query: any, allowedParams: WhereParam[]) {\n    const whereStatement: any = {};\n  \n    // If allowedParams is empty, return empty where statement\n    if (!allowedParams || !allowedParams.length) {\n      return whereStatement;\n    }\n  \n    // For each allowed parameter, check if it exists in the query\n    for (const param of allowedParams) {\n      const { key, type, isInArrayForm = false, mapper } = param;\n  \n      // Skip if the key doesn't exist in the query\n      if (!Object.prototype.hasOwnProperty.call(query, key) && !isInArrayForm) {\n        continue;\n      }\n  \n      // If the parameter is in array form, extract all values\n      if (isInArrayForm) {\n        const arrayKeys = Object.keys(query).filter((k) => k.startsWith(`${key}[`));\n        if (arrayKeys.length > 0) {\n          const values: any[] = [];\n          // Collect all values from the array form\n          for (const arrayKey of arrayKeys) {\n            const value = query[arrayKey];\n            if (value) {\n              const typedValue = getTypedValue(value, type, mapper);\n              if (typedValue !== undefined) {\n                values.push(typedValue);\n              }\n            }\n          }\n          // Only add to the where statement if there are values\n          if (values.length > 0) {\n            whereStatement[key] = { in: values };\n          }\n        }\n      } else {\n        // Handle regular (non-array) parameters\n        const value = query[key];\n        if (value) {\n          const typedValue = getTypedValue(value, type, mapper);\n          if (typedValue !== undefined) {\n            whereStatement[key] = typedValue;\n          }\n        }\n      }\n    }\n  \n    return whereStatement;\n  }\n  \n  function getTypedValue(value: string, type: WhereParamTypes, mapper?: (value: string) => any) {\n    if (mapper) {\n      return mapper(value);\n    }\n  \n    switch (type) {\n      case WhereParamTypes.Number:\n        const num = Number(value);\n        return isNaN(num) ? undefined : num;\n      case WhereParamTypes.Boolean:\n        return value.toLowerCase() === 'true';\n      case WhereParamTypes.String:\n      default:\n        return value;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Public Keys in Sui System\nDESCRIPTION: Functions for updating various public keys of validators in the Sui system, including protocol, worker, and network keys.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_candidate_validator_protocol_pubkey(0x3::sui_system)\npublic entry fun update_validator_next_epoch_worker_pubkey(0x3::sui_system)\npublic entry fun update_candidate_validator_worker_pubkey(0x3::sui_system)\npublic entry fun update_validator_next_epoch_network_pubkey(0x3::sui_system)\npublic entry fun update_candidate_validator_network_pubkey(0x3::sui_system)\n```\n\n----------------------------------------\n\nTITLE: Generic Coin Move Call in PTB\nDESCRIPTION: Example of using USDC as a generic coin type in a Move call within a Programmable Transaction Block.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/stablecoins.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst [sword] = tx.moveCall({\n  target: '0xcbbf37a851ed7b625731ca497e2d4aea18cf18145fac3b78bd64f274f6a09d30::usdc_usage::buy_sword_with_arbitrary_coin', \n  typeArguments: ['0xa1ec7fc00a6f40db9693ad1415d0c193ad3906494428cf252621037bd7117e29::usdc::USDC'],\n  arguments: [\n    usdcCoin\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Getting BitVector Length in Rust\nDESCRIPTION: Implements the length function to return the length (number of usable bits) of the BitVector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/bit_vector.md#2025-04-22_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun length(bitvector: &BitVector): u64 {\n    bitvector.bit_field.length()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Tic-Tac-Toe dApp with pnpm\nDESCRIPTION: Command to install dependencies for the Tic-Tac-Toe demo application using pnpm package manager. This must be run before starting development or building the application.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/tic-tac-toe/ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Processing References to Paired Elements in Sui Move\nDESCRIPTION: A macro function that iterates through two vectors and applies a function to references of each pair of elements. The vectors are not modified, and it aborts if they have different lengths.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_31\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun zip_do_ref<$T1, $T2, $R: drop>(\n    $v1: &vector<$T1>,\n    $v2: &vector<$T2>,\n    $f: |&$T1, &$T2| -> $R,\n) {\n    let v1 = $v1;\n    let v2 = $v2;\n    let len = v1.length();\n    assert!(len == v2.length());\n    len.do!(|i| $f(&v1[i], &v2[i]));\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Constant Expressions in Move\nDESCRIPTION: Shows examples of constants using complex expressions that are evaluated at compile time.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/constants.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nconst RULE: bool = true && false;\nconst CAP: u64 = 10 * 100 + 1;\nconst SHIFTY: u8 = {\n    (1 << 1) * (1 << 2) * (1 << 3) * (1 << 4)\n};\nconst HALF_MAX: u128 = 340282366920938463463374607431768211455 / 2;\nconst REM: u256 =\n    57896044618658097711785492504343953926634992332820282019728792003956564819968 % 654321;\nconst EQUAL: bool = 1 == 1;\n```\n\n----------------------------------------\n\nTITLE: Setting up transfer policy in Rust\nDESCRIPTION: The setup_tp function uses the publisher in the registry to create a transfer policy and cap for TokenizedAsset<T>. It also generates an empty transfer policy wrapped in ProtectedTP<T> that can override kiosk lock rules under specific conditions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\npublic fun setup_tp<T: drop>(\n        registry: &Registry,\n        publisher: &Publisher,\n        ctx: &mut TxContext\n    ): (TransferPolicy<TokenizedAsset<T>>,\n        TransferPolicyCap<TokenizedAsset<T>>) {}\n```\n\n----------------------------------------\n\nTITLE: Resetting Sui Full Node Environment\nDESCRIPTION: Stops the Full node, removes the Docker container, and deletes the associated volumes. This command is useful for resolving persistent issues and starting with a clean environment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Comparing Sui Project Files for Migration\nDESCRIPTION: This shell script uses the 'diff' command to compare files in the current Sui project with their migrated versions. It checks source files, test files, and the Move.toml configuration file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/migration_paths/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmigrate\n> diff -r -s sources migration_sources\n> diff -r -s tests migration_tests\n> diff -s Move.toml Move.toml.expected\n```\n\n----------------------------------------\n\nTITLE: Defining EMetadataInvalidPubkey Error Constant in Move\nDESCRIPTION: Error constant (1) used when the pubkey_bytes field in ValidatorMetadata is invalid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\nconst EMetadataInvalidPubkey: u64 = 1;\n```\n\n----------------------------------------\n\nTITLE: Transaction Signature Decoding\nDESCRIPTION: Base64 encoded transaction signature with multiple components representing cryptographic proof of transaction authorization\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_15\n\nLANGUAGE: base64\nCODE:\n```\nAwICIrr3sYG1hx2DaVkS3levGuTv68GA1RL+6ZFbtnFV5PBPkEHuysjme9nG0hZ3hQ0eDds2CedbKkLqDyCUXMNQDwEUtr9SYWRGiJJih21cAXgpSxf5Y53HFcmzJPWfxac54l21YVx6hc7vhI1xunMzhVeQlCa53vVJiAtWKLKz+H7FBgADAPZrm85y/Gn83R6kUhXme9J8W2ilJyda6cAObtuyJ3CqAQICAwSWHr3Q2vGVFH4SQckaQs76X89S6hX3NUarydSY3jgCAQNqj1MFWmTysOPFDXdNfD2kJlQhWTiT3AbxdlJDDWozIgMDAA==\n```\n\n----------------------------------------\n\nTITLE: Building a Move Project\nDESCRIPTION: Shows how to build a Move package using the sui move build command at the root of the project.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/move.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move build\n```\n\nLANGUAGE: sh\nCODE:\n```\nUPDATING GIT DEPENDENCY https://github.com/MystenLabs/sui.git\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING smart_contract_test\n```\n\n----------------------------------------\n\nTITLE: Implementing JwkId Comparison in Move\nDESCRIPTION: Implements a function to compare two JwkId instances for equality by checking if both the issuer and key ID fields match.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\nfun jwk_id_equal(a: &JwkId, b: &JwkId): bool {\n    (&a.iss == &b.iss) && (&a.kid == &b.kid)\n}\n```\n\n----------------------------------------\n\nTITLE: GetOrder Function Definition\nDESCRIPTION: Function signature for retrieving detailed information about a specific order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nasync getOrder(poolKey: string, orderId: string) {}\n```\n\n----------------------------------------\n\nTITLE: Converting u32 to string in Move\nDESCRIPTION: This function converts a u32 value to a string representation. It uses a macro to implement the conversion logic.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u32.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_string(x: u32): String {\n    std::macros::num_to_string!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pool Token Exchange Rate for a Specific Epoch in Move\nDESCRIPTION: Returns the exchange rate between pool tokens and SUI at a given epoch. If the pool is preactive, returns a 1:1 exchange rate. Otherwise finds the latest recorded exchange rate earlier than or equal to the provided epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_37\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pool_token_exchange_rate_at_epoch(\n    pool: &StakingPool,\n    epoch: u64,\n): PoolTokenExchangeRate {\n    // If the pool is preactive then the exchange rate is always 1:1.\n    if (pool.is_preactive_at_epoch(epoch)) {\n        return initial_exchange_rate()\n    };\n    let clamped_epoch = pool.deactivation_epoch.get_with_default(epoch);\n    let mut epoch = clamped_epoch.min(epoch);\n    let activation_epoch = *pool.activation_epoch.borrow();\n    // Find the latest epoch that's earlier than the given epoch with an entry in the table\n    while (epoch >= activation_epoch) {\n        if (pool.exchange_rates.contains(epoch)) {\n            return pool.exchange_rates[epoch]\n        };\n        epoch = epoch - 1;\n    };\n    // This line really should be unreachable. Do we want an assert false here?\n    initial_exchange_rate()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EMetadataInvalidWorkerAddr Error Constant in Move\nDESCRIPTION: Error constant (7) used when the worker_address field in ValidatorMetadata is invalid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_14\n\nLANGUAGE: move\nCODE:\n```\nconst EMetadataInvalidWorkerAddr: u64 = 7;\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for Move Bytecode Verifier\nDESCRIPTION: Shows the directory structure of the bytecode verifier module, including core files, tests, and library for property-based testing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/move-execution/v1/crates/move-bytecode-verifier/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n*\n├── invalid-mutations  # Library used by proptests\n├── src                # Core bytecode verifier files\n├── tests              # Proptests\n```\n\n----------------------------------------\n\nTITLE: Attempt to Mutate an Immutable Object\nDESCRIPTION: An example of an unsuccessful attempt to mutate an immutable 'ColorObject'. It highlights the immutability constraint by showcasing how a mutation operation would fail on an immutable object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/immutable.mdx#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic fun update(\n    object: &mut ColorObject,\n    red: u8, green: u8, blue: u8,\n) {\n    object.red = red;\n    object.green = green;\n    object.blue = blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Speedscope for Profile Visualization\nDESCRIPTION: Command to install Speedscope, a visualization tool for inspecting transaction gas profiles generated by the Sui client. Speedscope is installed globally via npm.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install -g speedscope\n```\n\n----------------------------------------\n\nTITLE: Building Move Package\nDESCRIPTION: Compile the Move package using the sui move build command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move build\n```\n\n----------------------------------------\n\nTITLE: Including Linear Parts of Code - TypeScript Example\nDESCRIPTION: Demonstrates how to include a linear section of code using specific start and end markers with comments. The build process will replace these markers with the code between them, rendering a complete code block in the documentation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// docs::#IDstring\n\nimport lib from \\\"library\\\";\n...\n\n```\n\n----------------------------------------\n\nTITLE: Invalid 'use fun' Examples for Generic Type Overloading\nDESCRIPTION: Examples showing that method aliases cannot be overloaded based on generic type instantiations. Method aliases must work for all instantiations of a generic type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic struct Cup<T>(T) has copy, drop, store;\n\npublic fun value<T: copy>(c: &Cup<T>): T {\n    c.0\n}\n\nuse fun value as Cup<bool>.flag; // ERROR!\nuse fun value as Cup<u64>.num; // ERROR!\n// In both cases, `use fun` aliases cannot be generic, they must work for all instances of the type\n```\n\n----------------------------------------\n\nTITLE: Range-Based Loop in Move (Exclusive)\nDESCRIPTION: Macro function that loops through a range of u128 values (exclusive) and applies a given function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do<$R: drop>($start: u128, $stop: u128, $f: |u128| -> $R) {\n    std::macros::range_do!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Sui Node Databases\nDESCRIPTION: This sequence of commands stops the Sui node service and deletes the specific databases used by the node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo systemctl stop sui-node\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo rm -rf /opt/sui/db/authorities_db /opt/sui/db/consensus_db\n```\n\n----------------------------------------\n\nTITLE: Appending UTF-8 Bytes to String in Move\nDESCRIPTION: Appends bytes in valid UTF-8 format to a string. This function takes a mutable reference to a String and a vector of u8 bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun append_utf8(s: &mut String, bytes: vector<u8>) {\n    s.append(utf8(bytes))\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Struct Layouts with Recursive Type Definition\nDESCRIPTION: Command to generate struct layouts for struct C in module M2 with a recursive type argument, where the struct references itself in its type parameter.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/generate_struct_layout/args.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M2.mv --struct C --type-args 0x6::M2::C<u64>\n```\n\n----------------------------------------\n\nTITLE: Contains Check Implementation for ObjectTable\nDESCRIPTION: Checks if a key exists in the ObjectTable. Takes a reference to the table and a key as input, returns a boolean indicating presence.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_table.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic fun contains<K: copy + drop + store, V: key + store>(table: &ObjectTable<K, V>, k: K): bool {\n    ofield::exists_<K>(&table.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sui SDK Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to include the Sui SDK and other required dependencies in your Cargo.toml file. It includes the Sui SDK from GitHub, Tokio for async runtime support, and Anyhow for error handling.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsui_sdk = { git = \"https://github.com/mystenlabs/sui\", package = \"sui-sdk\"}\ntokio = { version = \"1.2\", features = [\"full\"] }\nanyhow = \"1.0\"\n```\n\n----------------------------------------\n\nTITLE: BCS (Binary Canonical Serialization) Operations in Sui\nDESCRIPTION: Functions for Binary Canonical Serialization operations, including conversion to bytes and parsing various data types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\npublic struct BCS(0x2::bcs)\npublic fun to_bytes(0x2::bcs)\npublic fun new(0x2::bcs)\npublic fun into_remainder_bytes(0x2::bcs)\npublic fun peel_address(0x2::bcs)\npublic fun peel_bool(0x2::bcs)\npublic fun peel_u8(0x2::bcs)\npublic fun peel_u16(0x2::bcs)\npublic fun peel_u32(0x2::bcs)\npublic fun peel_u64(0x2::bcs)\npublic fun peel_u128(0x2::bcs)\npublic fun peel_u256(0x2::bcs)\npublic fun peel_vec_length(0x2::bcs)\npublic fun peel_vec_address(0x2::bcs)\npublic fun peel_vec_bool(0x2::bcs)\npublic fun peel_vec_u8(0x2::bcs)\npublic fun peel_vec_vec_u8(0x2::bcs)\npublic fun peel_vec_u16(0x2::bcs)\npublic fun peel_vec_u32(0x2::bcs)\npublic fun peel_vec_u64(0x2::bcs)\npublic fun peel_vec_u128(0x2::bcs)\npublic fun peel_vec_u256(0x2::bcs)\npublic fun peel_enum_tag(0x2::bcs)\npublic fun peel_option_address(0x2::bcs)\npublic fun peel_option_bool(0x2::bcs)\npublic fun peel_option_u8(0x2::bcs)\npublic fun peel_option_u16(0x2::bcs)\npublic fun peel_option_u32(0x2::bcs)\npublic fun peel_option_u64(0x2::bcs)\npublic fun peel_option_u128(0x2::bcs)\npublic fun peel_option_u256(0x2::bcs)\n```\n\n----------------------------------------\n\nTITLE: Get Quantity Output for Base or Quote\nDESCRIPTION: Function to calculate output quantities given either base or quote input. Returns base quantity out, quote quantity out, and required DEEP amount.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/query-the-pool.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_quantity_out(self: &Pool, base_quantity: u64, quote_quantity: u64): (u64, u64, u64)\n```\n\n----------------------------------------\n\nTITLE: Downloading Sui Node via Curl\nDESCRIPTION: This snippet shows how to download the Sui node binary using curl, specifying the output filename.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ curl https://releases.sui.io/$SUI_SHA/sui-node -o sui-node\n```\n\n----------------------------------------\n\nTITLE: Reporting Bad Validator Command\nDESCRIPTION: Command to report a validator identified by their address for poor performance or misconduct\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/validator.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ sui validator report-validator  0xf...3d9\n```\n\n----------------------------------------\n\nTITLE: Creating StakeSubsidy Instance\nDESCRIPTION: Initializes a new StakeSubsidy instance with specified initial parameters and validates the decrease rate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/stake_subsidy.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun create(\n    balance: Balance<SUI>,\n    initial_distribution_amount: u64,\n    stake_subsidy_period_length: u64,\n    stake_subsidy_decrease_rate: u16,\n    ctx: &mut TxContext,\n): StakeSubsidy {\n    assert!(\n        stake_subsidy_decrease_rate <= BASIS_POINT_DENOMINATOR as u16,\n        ESubsidyDecreaseRateTooLarge,\n    );\n    StakeSubsidy {\n        balance,\n        distribution_counter: 0,\n        current_distribution_amount: initial_distribution_amount,\n        stake_subsidy_period_length,\n        stake_subsidy_decrease_rate,\n        extra_fields: bag::new(ctx),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Transactions with Sui Keytool\nDESCRIPTION: Demonstrates how to sign a transaction using the sui keytool sign command with base64 encoded data and a specific address. The output includes the signature details and transaction metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/keytool.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsui keytool sign --data AAABACBRRpLwgknD6ZV3mc4pB0aVhAQiVkv/heQktW3kYpE+DQEBAQABAAAwR/FCqEKXpCpl+wqMenFtnRsL0EE9a/pd3+xF3xdSNQEaEUeErlBmGWxz3Bh+9BZh2mzayodzsri7xIZNDHRA3wIAAAAAAAAAILsR2d1FIZ5+ADDYZtJ2e9CWlpAxsGd4Y2rZrjlyTUF1MEfxQqhCl6QqZfsKjHpxbZ0bC9BBPWv6Xd/sRd8XUjXoAwAAAAAAAICWmAAAAAAAAA== --address 0x3047f142a84297a42a65fb0a8c7a716d9d1b0bd0413d6bfa5ddfec45df175235\n```\n\nLANGUAGE: sh\nCODE:\n```\n╭──────────────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ suiAddress   │ 0x3047f142a84297a42a65fb0a8c7a716d9d1b0bd0413d6bfa5ddfec45df175235                                                                                               │\n│ rawTxData    │ AAABACBRRpLwgknD6ZV3mc4pB0aVhAQiVkv/heQktW3kYpE+DQEBAQABAAAwR/FCqEKXpCpl+wqMenFtnRsL0EE9a/pd3+xF3xdSNQEaEUeErlBmGWxz3Bh+9BZh2mzayodzsri7xIZNDHRA3wIAAAAAAAAAILsR │\n│              │ 2d1FIZ5+ADDYZtJ2e9CWlpAxsGd4Y2rZrjlyTUF1MEfxQqhCl6QqZfsKjHpxbZ0bC9BBPWv6Xd/sRd8XUjXoAwAAAAAAAICWmAAAAAAAAA==                                                     │\n│ intent       │ ╭─────────┬─────╮                                                                                                                                                │\n│              │ │ scope   │  0  │                                                                                                                                                │\n│              │ │ version │  0  │                                                                                                                                                │\n│              │ │ app_id  │  0  │                                                                                                                                                │\n│              │ ╰─────────┴─────╯                                                                                                                                                │\n│ rawIntentMsg │ AAAAAAABACBRRpLwgknD6ZV3mc4pB0aVhAQiVkv/heQktW3kYpE+DQEBAQABAAAwR/FCqEKXpCpl+wqMenFtnRsL0EE9a/pd3+xF3xdSNQEaEUeErlBmGWxz3Bh+9BZh2mzayodzsri7xIZNDHRA3wIAAAAAAAAA │\n│              │ ILsR2d1FIZ5+ADDYZtJ2e9CWlpAxsGd4Y2rZrjlyTUF1MEfxQqhCl6QqZfsKjHpxbZ0bC9BBPWv6Xd/sRd8XUjXoAwAAAAAAAICWmAAAAAAAAA==                                                 │\n│ digest       │ +B8Cbr16HfOVT50DoN/QF8HB0+oznm8KAYy8Rm+TQFo=                                                                                                                     │\n│ suiSignature │ ANucBEl9TIE0uv+w965DvOjlfDUll7NUtIpJgRhPc3D3y3EtZ4cvaNbm8i5pc7TNIov/qI0FhzIYf2J6PbqoNQ57F8HMWljWjbQiCLM8Lu1dhuhzvGjTNeffMP/MtMyOag==                             │\n╰──────────────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml for Sui Custom Indexer in Rust\nDESCRIPTION: Cargo.toml manifest file configuration for a Sui custom indexer project. It specifies the project dependencies including sui-data-ingestion, sui-types, and other necessary crates.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/custom-indexer.mdx#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"custom-indexer\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nsui-data-ingestion = { git = \"https://github.com/MystenLabs/sui\", branch = \"main\" }\nsui-types = { git = \"https://github.com/MystenLabs/sui\", branch = \"main\" }\nasync-trait = \"0.1.74\"\ntokio = { version = \"1.28.1\", features = [\"full\"] }\ntracing = \"0.1.37\"\nanyhow = \"1.0.75\"\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Next Epoch Primary Address - Move\nDESCRIPTION: Updates the primary address of a validator to be used in the next epoch. It interacts with the Sui system state and uses transaction context for processing. Dependencies include `SuiSystemState` and `TxContext`. Inputs are vectors representing the primary address, and expected changes are reflected at the start of the next epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_next_epoch_primary_address(self: &mut sui_system::sui_system::SuiSystemState, primary_address: vector<u8>, ctx: &sui::tx_context::TxContext)\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_next_epoch_primary_address(\n    self: &mut SuiSystemState,\n    primary_address: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_validator_next_epoch_primary_address(primary_address, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing secp256r1_verify Function in Move\nDESCRIPTION: Defines a native function to verify a Secp256r1 signature. It takes a signature, public key, message, and hash type as inputs and returns a boolean indicating whether the signature is valid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/ecdsa_r1.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun secp256r1_verify(\n    signature: &vector<u8>,\n    public_key: &vector<u8>,\n    msg: &vector<u8>,\n    hash: u8,\n): bool;\n```\n\n----------------------------------------\n\nTITLE: Running Sui Single Node Benchmark with PTB\nDESCRIPTION: This command runs the Sui single node benchmark with the PTB workload. It generates 50,000 transactions by default, which can be changed using the `--tx-count` argument.  Each transaction contains an empty PTB.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-single-node-benchmark/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"cargo run --release --bin sui-single-node-benchmark -- ptb\"\n```\n\n----------------------------------------\n\nTITLE: Destroying Referent in Move\nDESCRIPTION: Implements the destroy function to unpack the Referent struct and return the wrapped value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/borrow.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy<T: key + store>(self: Referent<T>): T {\n    let Referent { id: _, value } = self;\n    value.destroy_some()\n}\n```\n\n----------------------------------------\n\nTITLE: Example Sui CLI Version Output\nDESCRIPTION: Expected output of the Sui CLI version command, showing the version number and commit hash.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sui 1.xx.x-abc123xyz\n```\n\n----------------------------------------\n\nTITLE: Implementing max function for U16 values\nDESCRIPTION: Function that returns the larger of two u16 values using the standard macros num_max utility.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max(x: u16, y: u16): u16 {\n    std::macros::num_max!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Scoping Rules for Use Fun Aliases in Move\nDESCRIPTION: This snippet illustrates the scoping rules for 'use fun' aliases in Move. It shows how aliases can be local to their scope and how they interact with shadowing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_13\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct X() has copy, drop, store;\n    public fun foo(_: &X) {}\n    public fun bar(_: &X) {}\n}\n\nmodule b::other {\n    use a::m::X;\n\n    use fun a::m::foo as X.f;\n\n    fun example(x: &X) {\n        x.f(); // resolves to a::m::foo\n        {\n            use a::m::bar as f;\n            x.f(); // resolves to a::m::bar\n        };\n        x.f(); // still resolves to a::m::foo\n        {\n            use fun a::m::bar as X.f;\n            x.f(); // resolves to a::m::bar\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Kiosk Owner Cap Accessor\nDESCRIPTION: Function to get the 'for' field from a KioskOwnerCap, identifying the associated kiosk.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_50\n\nLANGUAGE: Move\nCODE:\n```\npublic fun kiosk_owner_cap_for(cap: &KioskOwnerCap): ID {\n    cap.for\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing max function for u256 in Move\nDESCRIPTION: Returns the larger of two u256 values using a macro from the std::macros module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max(x: u256, y: u256): u256 {\n    std::macros::num_max!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Move and Copy Semantics for Variables in Move\nDESCRIPTION: Explains the difference between move and copy operations on variables in Move, including compiler inference and usage restrictions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\nlet x = 0;\nlet y = copy x + 1;\nlet z = copy x + 2;\n\nlet x = 1;\nlet y = move x + 1;\n// let z = move x + 2; // Error!\ny + z\n```\n\n----------------------------------------\n\nTITLE: Shifting BitVector Left\nDESCRIPTION: Shifts the bits in the BitVector to the left by the specified amount. If the amount is greater than or equal to the vector's length, all bits are set to false (0).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/bit_vector.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun shift_left(bitvector: &mut BitVector, amount: u64) {\n    if (amount >= bitvector.length) {\n        let len = bitvector.bit_field.length();\n        let mut i = 0;\n        while (i < len) {\n            let elem = &mut bitvector.bit_field[i];\n            *elem = false;\n            i = i + 1;\n        };\n    } else {\n        let mut i = amount;\n        while (i < bitvector.length) {\n            if (bitvector.is_index_set(i)) bitvector.set(i - amount)\n            else bitvector.unset(i - amount);\n            i = i + 1;\n        };\n        i = bitvector.length - amount;\n        while (i < bitvector.length) {\n            unset(bitvector, i);\n            i = i + 1;\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Tuples in Move\nDESCRIPTION: Demonstrates how to destructure tuples in Move using let bindings and assignments. Shows usage with literal tuples and function return values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/primitive-types/tuples.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::example {\n    // all 3 of these functions are equivalent\n    fun returns_unit() {}\n    fun returns_2_values(): (bool, bool) { (true, false) }\n    fun returns_4_values(x: &u64): (&u64, u8, u128, vector<u8>) { (x, 0, 1, b\"foobar\") }\n\n    fun examples(cond: bool) {\n        let () = ();\n        let (mut x, mut y): (u8, u64) = (0, 1);\n        let (mut a, mut b, mut c, mut d) = (@0x0, 0, false, b\"\");\n\n        () = ();\n        (x, y) = if (cond) (1, 2) else (3, 4);\n        (a, b, c, d) = (@0x1, 1, true, b\"1\");\n    }\n\n    fun examples_with_function_calls() {\n        let () = returns_unit();\n        let (mut x, mut y): (bool, bool) = returns_2_values();\n        let (mut a, mut b, mut c, mut d) = returns_4_values(&0);\n\n        () = returns_unit();\n        (x, y) = returns_2_values();\n        (a, b, c, d) = returns_4_values(&1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Validator Description in Move\nDESCRIPTION: Fetches the description of the validator from the associated metadata. It provides further information about the validator's purpose or features.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_46\n\nLANGUAGE: Move\nCODE:\n```\npublic fun description(self: &sui_system::validator::Validator): &std::string::String {\n    &self.metadata.description\n}\n```\n\n----------------------------------------\n\nTITLE: Get All Pools Response Format\nDESCRIPTION: The JSON response format for the /get_pools endpoint, which returns detailed information about all available trading pools including asset information and pool parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t  \"pool_id\": \"string\",\n\t  \"pool_name\": \"string\",\n\t  \"base_asset_id\": \"string\",\n\t  \"base_asset_decimals\": integer,\n\t  \"base_asset_symbol\": \"string\",\n\t  \"base_asset_name\": \"string\",\n\t  \"quote_asset_id\": \"string\",\n\t  \"quote_asset_decimals\": integer,\n\t  \"quote_asset_symbol\": \"string\",\n\t  \"quote_asset_name\": \"string\",\n\t  \"min_size\": integer,\n\t  \"lot_size\": integer,\n\t  \"tick_size\": integer\n\t},\n\t...\n]\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project with Warnings as Errors\nDESCRIPTION: Command to build a Sui project while treating any warnings as errors, enforcing stricter code quality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/build_with_warnings/args.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbuild --warnings-are-errors\n```\n\n----------------------------------------\n\nTITLE: Running Move Module Test with Argument 1\nDESCRIPTION: Executes a test function in the dispatch.mv module with argument 1u8 in dry-run mode. The module is referenced from a specific storage location.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/metatests/cov/two-runs-diff-module/args.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsandbox run storage/0x0000000000000000000000000000000000000000000000000000000000000042/modules/dispatch.mv test --args 1u8 --dry-run\n```\n\n----------------------------------------\n\nTITLE: Calculate Required Voting Power for Bridge Messages\nDESCRIPTION: Determines the required voting power threshold (in scale of 10000) for different types of bridge messages including token transfers, emergency operations, committee changes and asset updates.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\npublic fun required_voting_power(self: &BridgeMessage): u64 {\n    let message_type = message_type(self);\n    if (message_type == message_types::token()) {\n        3334\n    } else if (message_type == message_types::emergency_op()) {\n        let payload = extract_emergency_op_payload(self);\n        if (payload.op_type == PAUSE) {\n            450\n        } else if (payload.op_type == UNPAUSE) {\n            5001\n        } else {\n            abort EInvalidEmergencyOpType\n        }\n    } else if (message_type == message_types::committee_blocklist()) {\n        5001\n    } else if (message_type == message_types::update_asset_price()) {\n        5001\n    } else if (message_type == message_types::update_bridge_limit()) {\n        5001\n    } else if (message_type == message_types::add_tokens_on_sui()) {\n        5001\n    } else {\n        abort EInvalidMessageType\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing max function for u8 values\nDESCRIPTION: Returns the larger of two u8 values using the std::macros::num_max macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max(x: u8, y: u8): u8 {\n    std::macros::num_max!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Sui Project Files for Migration\nDESCRIPTION: This shell script performs two comparison operations: first, it recursively compares the 'sources' and 'migration_sources' directories, then it compares the 'Move.toml' file with 'Move.toml.expected'. These comparisons are likely part of a migration process to ensure all necessary changes have been made.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/migration_names/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndiff -r -s sources migration_sources\ndiff -s Move.toml Move.toml.expected\n```\n\n----------------------------------------\n\nTITLE: Accessing Validator Project URL\nDESCRIPTION: Function to retrieve the project URL from a Validator's metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_48\n\nLANGUAGE: Move\nCODE:\n```\npublic fun project_url(self: &Validator): &Url {\n    &self.metadata.project_url\n}\n```\n\n----------------------------------------\n\nTITLE: Groth16 Zero-Knowledge Proof Operations\nDESCRIPTION: Functions for handling Groth16 zero-knowledge proof operations including proof verification and key preparation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_37\n\nLANGUAGE: move\nCODE:\n```\npublic fun proof_points_from_bytes\npublic fun prepare_verifying_key\npublic fun prepare_verifying_key_internal\nfun verify_groth16_proof\npublic fun verify_groth16_proof_internal\n```\n\n----------------------------------------\n\nTITLE: Installing Tree Sitter CLI in Rust\nDESCRIPTION: This command installs the Tree Sitter command-line interface using Cargo, Rust's package manager. It's a prerequisite for running the Move parser examples.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/tree-sitter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install tree-sitter-cli\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Sui Repository\nDESCRIPTION: Instructions for cloning the Sui repository, checking out the testnet branch, and building the sui binary.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:MystenLabs/sui.git && cd sui\ngit checkout testnet\ncargo build --bin sui\nexport SUI_BINARY=\"$(pwd)/target/debug/sui\"\n```\n\n----------------------------------------\n\nTITLE: Updating Validator P2P Address for Next Epoch in Sui System\nDESCRIPTION: Updates a validator's P2P address for the next epoch in the Sui system state. The change takes effect from the next epoch. Requires mutable access to SuiSystemState and the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_next_epoch_p2p_address(\n    self: &mut SuiSystemState,\n    p2p_address: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_validator_next_epoch_p2p_address(p2p_address, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Bridge Node Ingress\nDESCRIPTION: Command to test the ingress of the Bridge Node using curl from a remote machine.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -v {YOUR_BRIDGE_URL}\n```\n\n----------------------------------------\n\nTITLE: Compiled Version with Address Values Substituted\nDESCRIPTION: Shows the operational equivalent of the previous snippet after compilation, where the named address 'my_addr' has been replaced with its numerical value '0xC0FFEE'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/modules.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nfun example() {\n    0xC0FFEE::m::foo(@0xC0FFEE);\n}\n```\n\n----------------------------------------\n\nTITLE: Object Transfer and Sharing in Sui\nDESCRIPTION: Functions for transferring, freezing, and sharing objects in the Sui system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Receiving(0x2::transfer)\npublic fun transfer(0x2::transfer)\npublic fun public_transfer(0x2::transfer)\npublic fun freeze_object(0x2::transfer)\npublic fun public_freeze_object(0x2::transfer)\npublic fun share_object(0x2::transfer)\npublic fun public_share_object(0x2::transfer)\npublic fun receive(0x2::transfer)\npublic fun public_receive(0x2::transfer)\npublic fun receiving_object_id(0x2::transfer)\npublic(package) fun freeze_object_impl(0x2::transfer)\npublic(package) fun share_object_impl(0x2::transfer)\npublic(package) fun transfer_impl(0x2::transfer)\nfun receive_impl(0x2::transfer)\n```\n\n----------------------------------------\n\nTITLE: Initializing Bridge Transfer Limits in Move\nDESCRIPTION: Function that initializes a VecMap containing transfer limits between different blockchain networks. Sets a 5M limit for Sui to Ethereum mainnet transfers and maximum limits for testnet and custom network configurations. Uses USD value multiplier for limit calculations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/limiter.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\nfun initial_transfer_limits(): VecMap<BridgeRoute, u64> {\n    let mut transfer_limits = vec_map::empty();\n    // 5M limit on Sui -> Ethereum mainnet\n    transfer_limits.insert(\n        chain_ids::get_route(chain_ids::eth_mainnet(), chain_ids::sui_mainnet()),\n        5_000_000 * USD_VALUE_MULTIPLIER\n    );\n    // MAX limit for testnet and devnet\n    transfer_limits.insert(\n        chain_ids::get_route(chain_ids::eth_sepolia(), chain_ids::sui_testnet()),\n        MAX_TRANSFER_LIMIT\n    );\n    transfer_limits.insert(\n        chain_ids::get_route(chain_ids::eth_sepolia(), chain_ids::sui_custom()),\n        MAX_TRANSFER_LIMIT\n    );\n    transfer_limits.insert(\n        chain_ids::get_route(chain_ids::eth_custom(), chain_ids::sui_testnet()),\n        MAX_TRANSFER_LIMIT\n    );\n    transfer_limits.insert(\n        chain_ids::get_route(chain_ids::eth_custom(), chain_ids::sui_custom()),\n        MAX_TRANSFER_LIMIT\n    );\n    transfer_limits\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Template\nDESCRIPTION: Template for environment variables used in asset tokenization deployment and configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_32\n\nLANGUAGE: text\nCODE:\n```\nSUI_NETWORK = rpc endpoint of the network of your choice | auto filled by publish script\nASSET_TOKENIZATION_PACKAGE_ID = Created by publishing `asset_tokenization` package | auto filled by publish script\nREGISTRY = Created by publishing `asset_tokenization` package | auto filled by publish script\n\nTEMPLATE_PACKAGE_ID = Created by publishing `template` package\nASSET_CAP_ID = Created by publishing `template` package\nASSET_METADATA_ID = Created by publishing `template` package\nASSET_PUBLISHER = Created by publishing `template` package\n\nPROTECTED_TP = Created by calling `setup_tp` function\nTRANSFER_POLICY = Created by calling `setup_tp` function\n\nOWNER_MNEMONIC_PHRASE = your mnemonic | can be exported locally in the terminal before publishing\nBUYER_MNEMONIC_PHRASE = buyer's mnemonic | can be exported locally in the terminal before publishing\nTARGET_KIOSK = kiosk id\nBUYER_KIOSK = kiosk id\n\n\nTOKENIZED_ASSET = tokenized asset id (created by minting)\nFT1 = tokenized asset id (to be joined)\nFT2 = tokenized asset id (to be joined)\n```\n\n----------------------------------------\n\nTITLE: Defining UQ64_64 Struct in Move\nDESCRIPTION: Definition of the UQ64_64 fixed-point numeric type with 64 integer bits and 64 fractional bits, represented by an underlying 128-bit value. This binary representation provides more than 19 decimal digits of precision both before and after the decimal point.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct UQ64_64 has copy, drop, store\n{\n    0: u128\n}\n```\n\n----------------------------------------\n\nTITLE: Joining tokenized assets in Rust\nDESCRIPTION: The join function merges two tokenized assets of FT type, increasing the balance of the first by the balance of the second. The second asset is burned/removed from circulation. Returns the ID of the burned asset. Only works with FT type assets.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npublic fun join<T>(\n        self: &mut TokenizedAsset<T>,\n        other: TokenizedAsset<T>\n    ): ID {}\n```\n\n----------------------------------------\n\nTITLE: Reporting Validator Misconduct\nDESCRIPTION: Allows reporting a validator as a bad actor. Requires reporter and reportee to be active validators, different addresses, and a valid capability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun report_validator(\n    wrapper: &mut SuiSystemState,\n    cap: &UnverifiedValidatorOperationCap,\n    reportee_addr: address,\n) {\n    wrapper.load_system_state_mut().report_validator(cap, reportee_addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DEEP Price Point for Fee Discounts\nDESCRIPTION: Function to add a DEEP price point to a pool, enabling the calculation of DEEP token fee discounts. This function needs to be called periodically (every 1-10 minutes) via a cron job for pools that want to offer DEEP token fee discounts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/permissionless-pool.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\n/// Add a DEEP price point to a pool. This is required so that the pool can calculate the correct amount of DEEP tokens\n/// to charge for fee. The DEEP price point should be based on a pool that has DEEP as one of its assets.\n/// @param pool_id The ID of the pool to add the DEEP price point to.\n/// @param reference_pool_id The ID of the pool that has DEEP as one of its assets. This pool is used to calculate the price of DEEP.\n/// @param quote_asset_multiplier A multiplier to convert the price of DEEP in the reference pool to the base of the current pool.\n/// For example, if the reference_pool_id is a DEEP/USDC pool, and the current pool is BTC/USDC, then quote_asset_multiplier is 1.\n/// If the reference_pool_id is a DEEP/USDC pool, and the current pool is BTC/ETH, then quote_asset_multiplier needs to take into account the ETH/USDC price.\n/// @param use_reference_pool_price_as_mid If true, use the reference pool's price as the mid price. If false, use the reference pool's price\n/// and an additional oracle price to calculate the mid price.\npublic fun add_deep_price_point(\n    pool_id: ID,\n    reference_pool_id: ID,\n    quote_asset_multiplier: u64,\n    use_reference_pool_price_as_mid: bool,\n    ctx: &mut TxContext\n) {\n    add_deep_price_point_(pool_id, reference_pool_id, quote_asset_multiplier, use_reference_pool_price_as_mid, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Internal VDF Verification Native Function\nDESCRIPTION: Native implementation for VDF verification functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vdf.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nnative fun vdf_verify_internal(\n    input: &vector<u8>,\n    output: &vector<u8>,\n    proof: &vector<u8>,\n    iterations: u64,\n): bool;\n```\n\n----------------------------------------\n\nTITLE: Publish Package and Transfer Cap with PTB using Sui Client\nDESCRIPTION: This command publishes a Move package and transfers the upgrade capability to the sender using a Programmable Transaction Block (PTB).  This allows the sender to later upgrade the package.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client ptb `<br/>&nbsp;&nbsp;`--move-call sui::tx_context::sender `<br/>&nbsp;&nbsp;`--assign sender `<br/>&nbsp;&nbsp;`--publish \\\".\\\" `<br/>&nbsp;&nbsp;`--assign\nupgrade_cap `<br/>&nbsp;&nbsp;`--transfer-objects \\\"[upgrade_cap]\\\" sender\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Move Script\nDESCRIPTION: A basic Move script that demonstrates printing a signer using the debug module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// sources/debug_script.move\nscript {\nuse std::debug;\nfun debug_script(account: signer) {\n    debug::print(&account)\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Attacking Insecure Randomness Implementation in Sui Move\nDESCRIPTION: This snippet shows how an attacker could exploit a public randomness-dependent function by reverting the transaction when the outcome is unfavorable.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/randomness-onchain.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun attack(guess: u8, r: &Random, ctx: &mut TxContext): Ticket {\n  let t = dice::play_dice(guess, r, ctx);\n  // revert the transaction if play_dice lost\n  assert!(!dice::is_winner(&t), 0);\n  t\n}\n```\n\n----------------------------------------\n\nTITLE: VDF Operations in Sui\nDESCRIPTION: Functions for Verifiable Delay Function (VDF) operations, including input hashing and verification.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun hash_to_input(0x2::vdf)\nfun hash_to_input_internal(0x2::vdf)\npublic fun vdf_verify(0x2::vdf)\nfun vdf_verify_internal(0x2::vdf)\n```\n\n----------------------------------------\n\nTITLE: Voting on Proposal Function in Sui SDK\nDESCRIPTION: Function signature for voting on a governance proposal. It requires a poolKey, balanceManagerKey, and proposal_id to identify the specific proposal to vote on.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/staking-governance.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nvote(poolKey: string, balanceManagerKey: string, proposal_id: string)\n```\n\n----------------------------------------\n\nTITLE: Checking if a Bit is Set in BitVector\nDESCRIPTION: Returns the value of the bit at the specified index in the BitVector. Returns true if the bit is set (1) and false if unset (0). Validates that the index is within bounds.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/bit_vector.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_index_set(bitvector: &BitVector, bit_index: u64): bool {\n    assert!(bit_index < bitvector.bit_field.length(), EINDEX);\n    bitvector.bit_field[bit_index]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Leaf Struct in Move\nDESCRIPTION: Defines a Leaf struct for the Critbit tree that holds a key, value and parent reference\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Leaf<V> has drop, store {\n    key: u64,\n    value: V,\n    parent: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Systemd and Enabling Sui Node Service\nDESCRIPTION: Reloads systemd to recognize the new service unit file and enables the Sui Node service to start on boot.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/systemd/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl enable sui-node.service\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Various Kubernetes Service Types\nDESCRIPTION: This code snippet uses Go templating to generate bash commands for retrieving the application URL based on the Kubernetes service type and ingress configuration. It covers scenarios for Ingress, NodePort, LoadBalancer, and ClusterIP service types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/helm/graphql/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"graphql.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"graphql.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"graphql.fullname\" . }} --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"graphql.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: SignatureToken Type Encoding\nDESCRIPTION: Binary encoding format for Move VM type signatures. Each token is 1 byte followed by additional type information. Used to encode parameter types, return types, and type annotations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/spec/vm.md#2025-04-22_snippet_6\n\nLANGUAGE: bytecode\nCODE:\n```\n0x1: BOOL\n0x2: U8\n0x3: U64\n0x4: U128\n0x5: ADDRESS\n0x6: REFERENCE\n0x7: MUTABLE_REFERENCE\n0x8: STRUCT\n0x9: TYPE_PARAMETER\n0xA: VECTOR\n0xB: STRUCT_INST\n0xC: SIGNER\n0xD: U16\n0xE: U32\n0xF: U256\n```\n\n----------------------------------------\n\nTITLE: Expected Failure with Arithmetic Error in Move Tests\nDESCRIPTION: Shows how to use #[expected_failure(arithmetic_error, location = <location>)] to specify that a test should fail with an arithmetic error at a particular module location.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule pkg_addr::other_module {\n    fun will_arith_error() { 1/0; }\n}\n\nmodule pkg_addr::my_module {\n    use pkg_addr::other_module;\n    #[test]\n    #[expected_failure(arithmetic_error, location = Self)]\n    fun test_will_arith_error_and_pass1() { 1/0; }\n\n    #[test]\n    #[expected_failure(arithmetic_error, location = pkg_addr::other_module)]\n    fun test_will_arith_error_and_pass2() { other_module::will_arith_error() }\n\n    // FAIL: Will fail since the location we expect it the fail at is different from where the test actually failed.\n    #[test]\n    #[expected_failure(arithmetic_error, location = Self)]\n    fun test_will_arith_error_and_fail() { other_module::will_arith_error() }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project with Verbose Output\nDESCRIPTION: Build command for the Sui project with the verbose flag enabled to show detailed build output.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/public_package_different_both/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild -v\n```\n\n----------------------------------------\n\nTITLE: Checking Global Pause Status for Next Epoch in Sui Deny List\nDESCRIPTION: Checks if the global pause is enabled for the next epoch in a specific deny list configuration. It returns a boolean indicating the future pause status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun v2_is_global_pause_enabled_next_epoch(\n    deny_list: &DenyList,\n    per_type_index: u64,\n    per_type_key: vector<u8>,\n): bool {\n    if (!deny_list.per_type_exists(per_type_index, per_type_key)) return false;\n    let per_type_config = deny_list.borrow_per_type_config(per_type_index, per_type_key);\n    let setting_name = GlobalPauseKey();\n    per_type_config.read_setting_for_next_epoch(setting_name).destroy_or!(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate Move Project using Sui Move\nDESCRIPTION: This command migrates a Move project to Move 2024 at the provided path, updating the project's dependencies and syntax to the latest standards.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n\"sui move migrate PATH\"\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum U256 Value in Sui Move\nDESCRIPTION: Returns the maximum value for a u256 type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_12\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun max_value(): u256 {\n    0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Next Epoch Protocol Pubkey - Move\nDESCRIPTION: This function updates a validator's protocol public key and proof of possession to take effect in the next epoch. Inputs include the new pubkey and proof as vectors, integrating with the Sui system state. Changes are constrained to commence at the start of the following epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_28\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_next_epoch_protocol_pubkey(self: &mut sui_system::sui_system::SuiSystemState, protocol_pubkey: vector<u8>, proof_of_possession: vector<u8>, ctx: &sui::tx_context::TxContext)\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_next_epoch_protocol_pubkey(\n    self: &mut SuiSystemState,\n    protocol_pubkey: vector<u8>,\n    proof_of_possession: vector<u8>,\n    ctx: &TxContext,\n) {\n    self\n        .load_system_state_mut()\n        .update_validator_next_epoch_protocol_pubkey(protocol_pubkey, proof_of_possession, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Module Dependencies and Imports in Move\nDESCRIPTION: List of module imports required for the sui_system module implementation, including standard libraries and Sui-specific modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nuse std::address;\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::type_name;\nuse std::u64;\nuse std::vector;\nuse sui::address;\nuse sui::bag;\nuse sui::balance;\nuse sui::coin;\nuse sui::config;\nuse sui::deny_list;\nuse sui::dynamic_field;\nuse sui::dynamic_object_field;\nuse sui::event;\nuse sui::hex;\nuse sui::object;\nuse sui::pay;\n```\n\n----------------------------------------\n\nTITLE: On-chain Commands for Immutable Objects in Sui Client\nDESCRIPTION: A series of shell commands to interact with immutable objects using the Sui Client CLI. These commands cover viewing owned objects, publishing Move modules, creating, freezing, and interacting with 'ColorObject' entities on-chain.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/immutable.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ export ADDR=`sui client active-address`\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client objects $ADDR\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client publish $ROOT/examples/move/color_object --gas-budget <GAS-AMOUNT>\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call --gas-budget <GAS-AMOUNT> --package $PACKAGE --module \"color_object\" --function \"create\" --args 0 255 0\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client objects $ADDR\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call --gas-budget <GAS-AMOUNT> --package $PACKAGE --module \"color_object\" --function \"freeze_object\" --args \"$OBJECT\"\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client objects $ADDR\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client object $OBJECT\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call --gas-budget <GAS-AMOUNT> --package $PACKAGE --module \"color_object\" --function \"update\" --args \"$OBJECT\" 0 0 0\n```\n\n----------------------------------------\n\nTITLE: Resetting the database for Sui indexer (forced)\nDESCRIPTION: This command forcefully resets the database for the Sui indexer. It uses the provided DATABASE_URL to connect to the database. The `--force` flag bypasses confirmation prompts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin sui-indexer -- --database-url \"<DATABASE_URL>\" reset-database --force\n```\n\n----------------------------------------\n\nTITLE: Coin Operations - Split, Destroy, and Merge\nDESCRIPTION: Demonstrates complex coin operations including splitting gas coins, destroying zero-value coins, and merging coins back together.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/ptb.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n# Split off from gas\n--split-coins gas \"[0,1,2,3]\"\n--assign coins\n--move-call sui::coin::destroy_zero<sui::sui::SUI> coins.0\n# Can further split a split coin (and through variable bindings/result accesses)\n--split-coins coins.1 \"[0,0]\"\n--assign zcoins\n# Destroy both new coins\n--move-call sui::coin::destroy_zero<sui::sui::SUI> zcoins.0\n--move-call sui::coin::destroy_zero<sui::sui::SUI> zcoins.1\n# Can merge the split coins back\n--merge-coins gas \"[coins.1, coins.2, coins.3]\"\n--gas-budget 10000000\n```\n\n----------------------------------------\n\nTITLE: Publishing and Running Modules in Sui Sandbox\nDESCRIPTION: Two commands for interacting with the Sui sandbox: first publishing a module, then running a specific function within a published module. The run command specifies the storage path to the module and the function to execute.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/explain_arithmetic_failure/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox publish\nsandbox run storage/0x0000000000000000000000000000000000000000000000000000000000000042/modules/m.mv main\n```\n\n----------------------------------------\n\nTITLE: Defining Type Parameter Kinds in Move Binary Format\nDESCRIPTION: This snippet defines the different kinds of type parameters used in the Move binary format. Each kind is represented by a single byte and determines the constraints on type substitution.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/spec/vm.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\n0x1: ALL - the type parameter can be substituted by either a resource, or a copyable type\n0x2: COPYABLE - the type parameter must be substituted by a copyable type\n0x3: RESOURCE - the type parameter must be substituted by a resource type\n```\n\n----------------------------------------\n\nTITLE: Generating Extended Ephemeral Public Key in TypeScript\nDESCRIPTION: This snippet demonstrates how to generate an extended ephemeral public key using the @mysten/sui/zklogin package. This key is used as input for the zero-knowledge proof.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/zklogin-integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getExtendedEphemeralPublicKey } from '@mysten/sui/zklogin';\n\nconst extendedEphemeralPublicKey = getExtendedEphemeralPublicKey(ephemeralKeyPair.getPublicKey());\n```\n\n----------------------------------------\n\nTITLE: Peeling Option U16 with Sui BCS in Move\nDESCRIPTION: The `peel_option_u16` function is responsible for converting serialized byte data to an `Option<u16>`. It employs the `peel_option` method of BCS and relies on the `peel_u16` function to extract the u16 value. The mutability of the `sui::bcs::BCS` reference is crucial in this operation, enabling the function to handle possible null values of the u16 type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bcs.md#sui_bcs_peel_option_u16\">peel_option_u16</a>(<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>: &<b>mut</b> <a href=\"../sui/bcs.md#sui_bcs_BCS\">BCS</a>): Option&lt;u16&gt; {\n    <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_option\">peel_option</a>!(|<a href=\"../sui/bcs.md#sui_bcs\">bcs</a>| <a href=\"../sui/bcs.md#sui_bcs\">bcs</a>.<a href=\"../sui/bcs.md#sui_bcs_peel_u16\">peel_u16</a>())\n}\n```\n\n----------------------------------------\n\nTITLE: Public Method Aliases with 'public use fun'\nDESCRIPTION: Example showing how to create public method aliases that can be used outside the module. This allows renaming functions for cleaner method syntax that's accessible from other modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\nmodule a::cup {\n    public struct Cup<T>(T) has copy, drop, store;\n\n    public use fun cup_borrow as Cup.borrow;\n    public fun cup_borrow<T>(c: &Cup<T>): &T {\n        &c.0\n    }\n}\n```\n\nLANGUAGE: move\nCODE:\n```\nmodule b::example {\n\n    fun example<T: drop>(c: a::cup::Cup<u64>) {\n        c.borrow(); // resolves to a::cup::cup_borrow\n        c.cup_borrow(); // resolves to a::cup::cup_borrow\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Fixed-Point Number is Zero (Move)\nDESCRIPTION: Determines if a given FixedPoint32 number represents zero. This is useful for equality comparisons and preventing division by zero errors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/fixed_point32.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_zero(num: FixedPoint32): bool {\n    num.value == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bilinear Pairing in Move\nDESCRIPTION: Computes the bilinear pairing of two group elements. Takes elements from groups G1 and G2 and produces an element in G3.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun pairing<G1, G2, G3>(\n    type_: u8,\n    e1: &Element<G1>,\n    e2: &Element<G2>,\n): Element<G3> {\n    Element<G3> { bytes: internal_pairing(type_, &e1.bytes, &e2.bytes) }\n}\n```\n\n----------------------------------------\n\nTITLE: Sui Client PTB Variable Assignment and Move Call\nDESCRIPTION: This example demonstrates how to assign a value to a variable and then use it in a Move call using the `sui client ptb` command. It assigns the value `none` to the variable `my_variable` and then calls the `0x1::option::is_none` function, passing the `<u64>` type and previously assigned variable as arguments. The transaction is executed with a gas budget of 50000000.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/ptb.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client ptb \\\n--assign my_variable none \\\n--move-call 0x1::option::is_none \"<u64>\" my_variable \\\n--gas-budget 50000000\n```\n\n----------------------------------------\n\nTITLE: Address Utility Functions\nDESCRIPTION: Utility functions for working with addresses including getting address length and maximum value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/address.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun length(): u64 {\n    LENGTH\n}\n\npublic fun max(): u256 {\n    MAX\n}\n```\n\n----------------------------------------\n\nTITLE: Quote Asset Swap Function Declaration\nDESCRIPTION: Function signature for swapping exact quote amount for base amount using SwapParams.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/swaps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nswapExactQuoteForBase({ params: SwapParams });\n```\n\n----------------------------------------\n\nTITLE: Building Sui Bridge Indexer Binary\nDESCRIPTION: Command to build the Bridge Indexer binary using Cargo with release optimization\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-bridge-indexer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --bin bridge-indexer --release\n```\n\n----------------------------------------\n\nTITLE: Defining ECalledDuringNonGenesis Error Constant in Move\nDESCRIPTION: Error constant (12) used when a function that should only be called during genesis is called at other times.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_19\n\nLANGUAGE: move\nCODE:\n```\nconst ECalledDuringNonGenesis: u64 = 12;\n```\n\n----------------------------------------\n\nTITLE: Accessing Sui Keytool Help Information\nDESCRIPTION: Shows how to access help documentation for the sui keytool sign command. Displays available options including address, data, json format output, and intent parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/keytool.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsui keytool sign --help\n```\n\nLANGUAGE: sh\nCODE:\n```\nCreate signature using the private key for the given address in sui keystore. Any signature commits to a [struct IntentMessage] consisting of the Base64 encoded of the BCS serialized\ntransaction bytes itself and its intent. If intent is absent, default will be used\n\nUsage: sui keytool sign [OPTIONS] --address <ADDRESS> --data <DATA>\n\nOptions:\n  \t--address <ADDRESS>  \n  \t--data <DATA>   \t \n  \t--json           \tReturn command outputs in json format\n  \t--intent <INTENT>    \n  -h, --help           \tPrint help\n```\n\n----------------------------------------\n\nTITLE: Adding New Sui Environment Alias in Shell\nDESCRIPTION: This command adds a new alias for a custom RPC endpoint in the Sui client configuration. It requires specifying an alias and the RPC server URL.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/connect.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client new-env --alias <ALIAS> --rpc <RPC-SERVER-URL>\n```\n\n----------------------------------------\n\nTITLE: Running Sui Single Node Benchmark with Baseline Component\nDESCRIPTION: This command runs the Sui single node benchmark with the baseline component. The baseline component includes the execution layer and interaction with the DB (RocksDB).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-single-node-benchmark/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"cargo run --release --bin sui-single-node-benchmark -- --component baseline ptb\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Move Module in Sui Sandbox\nDESCRIPTION: Command to publish a Move module in the Sui sandbox environment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/metatests/cov/two-runs-diff-module/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox publish\n```\n\n----------------------------------------\n\nTITLE: Computing the Next Random Seed in Sui Simulation Testing\nDESCRIPTION: Function that computes the next random seed for test iterations by generating a new u64 value from the current seed using the random number generator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-simulator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn next_seed(seed: u64) -> u64 {\n    use rand::Rng;\n    rand::GlobalRng::new_with_seed(seed).gen::<u64>()\n}\n```\n\n----------------------------------------\n\nTITLE: Bridge Limit Update Functions\nDESCRIPTION: Functions to access properties of UpdateBridgeLimit message including sending chain, receiving chain and limit values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_14\n\nLANGUAGE: move\nCODE:\n```\npublic fun update_bridge_limit_payload_sending_chain(self: &UpdateBridgeLimit): u8 {\n    self.sending_chain\n}\n\npublic fun update_bridge_limit_payload_receiving_chain(self: &UpdateBridgeLimit): u8 {\n    self.receiving_chain\n}\n\npublic fun update_bridge_limit_payload_limit(self: &UpdateBridgeLimit): u64 {\n    self.limit\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Removal List in Move\nDESCRIPTION: Sorts a list of indexes for pending removals in ascending order using an insertion sort algorithm.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_48\n\nLANGUAGE: Move\nCODE:\n```\nfun sort_removal_list(withdraw_list: &mut vector<u64>) {\n    let length = withdraw_list.length();\n    let mut i = 1;\n    while (i < length) {\n        let cur = withdraw_list[i];\n        let mut j = i;\n        while (j > 0) {\n            j = j - 1;\n            if (withdraw_list[j] > cur) {\n                withdraw_list.swap(j, j + 1);\n            } else {\n                break\n            };\n        };\n        i = i + 1;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Creation and Field Access\nDESCRIPTION: Examples demonstrating struct creation and field access patterns in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/structs.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct Foo has drop { x: u64, y: bool }\n    public struct Baz has drop { foo: Foo }\n    public struct Positional(u64, bool) has drop;\n\n    fun example() {\n        let foo = Foo { x: 0, y: false };\n        let baz = Baz { foo: foo };\n        // Note: positional struct values are created using parentheses and\n        // based on position instead of name.\n        let pos = Positional(0, false);\n        let pos_invalid = Positional(false, 0);\n        //                           ^ ERROR! Fields are out of order and the types don't match.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing do_eq Macro for U16 in Move\nDESCRIPTION: This macro function loops from 0 to $stop (inclusive) and applies the given function $f to each u16 value in the range. It utilizes the std::macros::do_eq macro internally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u16.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do_eq<$R: drop>($stop: u16, $f: |u16| -> $R) {\n    std::macros::do_eq!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Move Toolchain Version in TOML\nDESCRIPTION: Example of how to specify the Move toolchain version information in the package manifest file (Move.toml). This section is added by external tools like the Sui package manager for on-chain source verification.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[move.toolchain-version]\ncompiler-version = \"<string>\" # The version of the Move compiler used to build the package, e.g. \"1.21.0\"\nedition = \"<string>\" # The edition of the Move language used to build the package, e.g. \"2024.alpha\"\nflavor = \"<string>\" # The flavor of the Move compiler used to build the package, e.g. \"sui\"\n```\n\n----------------------------------------\n\nTITLE: Accessor Function for Token Message Type\nDESCRIPTION: Returns the constant value for token message type. This function provides a public interface to access the TOKEN constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message_types.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun token(): u8 { TOKEN }\n```\n\n----------------------------------------\n\nTITLE: Backend API Endpoints Structure\nDESCRIPTION: HTTP endpoint specifications for the blackjack game backend, including health check, deal, hit, and stand operations. Each endpoint handles specific game actions and integrates with the blockchain.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/blackjack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nGET  /api/health           // Health check endpoint\nPOST /api/games/{id}/deal  // Initial deal transaction\nPOST /api/games/{id}/hit   // Hit move execution\nPOST /api/games/{id}/stand // Stand move execution\n```\n\n----------------------------------------\n\nTITLE: Running the Bytecode Generation Tool\nDESCRIPTION: Command line instructions for building and running the bytecode test generation tool with logging and configuration options.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/test-generation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\nRUST_LOG=info cargo run -- --iterations N --output PATH\n```\n\n----------------------------------------\n\nTITLE: Modified Module M with Removed Field\nDESCRIPTION: Updated version of module M with field g removed to demonstrate breaking change detection in Move CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\naddress 0x2 {\nmodule M {\n    struct S has key { f: u64 }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Load Sui Node Docker Image\nDESCRIPTION: This command loads the built Sui Node Docker image into the local Docker environment. It expects to be run from the `build/oci/sui-node` directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/sui-node-deterministic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"(cd build/oci/sui-node && tar -c .) | docker load\"\n```\n\n----------------------------------------\n\nTITLE: Converting Fixed-point to Integer in Move\nDESCRIPTION: Converts a fixed-point number to an integer by truncating any fractional part.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_int(a: UQ64_64): u64 {\n    std::macros::uq_to_int!(a.0, FRACTIONAL_BITS)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project with Linting Enabled\nDESCRIPTION: Command to build a Sui project with the lint check enabled, which validates code quality and style during the build process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/lint_flags/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbuild --lint\n```\n\n----------------------------------------\n\nTITLE: Listing an Item in the Kiosk\nDESCRIPTION: This command lists an item in the Kiosk for sale. You must provide the item's ID and the desired price. Ensure the item already exists in the Kiosk.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/kiosk-cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm list <item_id> <price>\n```\n\n----------------------------------------\n\nTITLE: Configuring Counter Package IDs\nDESCRIPTION: TypeScript constants file defining package IDs for different networks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const DEVNET_COUNTER_PACKAGE_ID = \"0xTODO\";\nexport const TESTNET_COUNTER_PACKAGE_ID = \"0x7b6a8f5782e57cd948dc75ee098b73046a79282183d51eefb83d31ec95c312aa\";\nexport const MAINNET_COUNTER_PACKAGE_ID = \"0xTODO\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Telemetry in Rust\nDESCRIPTION: This snippet shows how to quickly initialize telemetry using the TelemetryConfig in a Rust application. It includes necessary steps to prevent the premature termination of logging by retaining the guard object. The snippet requires the telemetry library and recommends using the builder API for flexible configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/telemetry-subscribers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n  let config = telemetry::TelemetryConfig::new(\"my_app\");\n  let guard = telemetry::init(config);\n```\n\n----------------------------------------\n\nTITLE: Building with Silenced Warnings and Warnings as Errors\nDESCRIPTION: Command that demonstrates combining contradictory flags - silencing warnings while also treating them as errors. The behavior would depend on how the CLI resolves this conflict.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/json_errors/args.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbuild --json-errors --silence-warnings --warnings-are-errors\n```\n\n----------------------------------------\n\nTITLE: Error Constants for Option Operations\nDESCRIPTION: Defines error constants for invalid Option states during operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nconst EOPTION_IS_SET: u64 = 262144;\nconst EOPTION_NOT_SET: u64 = 262145;\n```\n\n----------------------------------------\n\nTITLE: Defining Versioned struct in Move\nDESCRIPTION: Defines the Versioned struct which wraps an inner object and tracks its version. The inner object is stored as a dynamic field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/versioned.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Versioned has key, store {\n    id: sui::object::UID,\n    version: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Bigtable CLI Tool\nDESCRIPTION: Command to install the Cloud Bigtable command-line interface (cbt) tool using Google Cloud SDK.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-kvstore/src/bigtable/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngcloud components install cbt\n```\n\n----------------------------------------\n\nTITLE: Genesis Configuration Structures for Sui\nDESCRIPTION: Struct definitions for genesis configuration in Sui, including validator metadata, chain parameters, and token distribution.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic struct GenesisValidatorMetadata(0x3::genesis)\npublic struct GenesisChainParameters(0x3::genesis)\npublic struct TokenDistributionSchedule(0x3::genesis)\npublic struct TokenAllocation(0x3::genesis)\nfun create(0x3::genesis)\nfun allocate_tokens(0x3::genesis)\n```\n\n----------------------------------------\n\nTITLE: Loading inner value from Versioned object in Move\nDESCRIPTION: Functions to load the inner value of a Versioned object, either as an immutable or mutable reference.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/versioned.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun load_value<T: store>(self: &Versioned): &T {\n    dynamic_field::borrow(&self.id, self.version)\n}\n\npublic fun load_value_mut<T: store>(self: &mut Versioned): &mut T {\n    dynamic_field::borrow_mut(&mut self.id, self.version)\n}\n```\n\n----------------------------------------\n\nTITLE: Filling an Option in Move\nDESCRIPTION: Converts a none option to a some option by adding a value. Aborts if the option already holds a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun fill<Element>(t: &mut Option<Element>, e: Element) {\n    let vec_ref = &mut t.vec;\n    if (vec_ref.is_empty()) vec_ref.push_back(e)\n    else abort EOPTION_IS_SET\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sui Kiosk via CLI\nDESCRIPTION: Shows how to create a Sui Kiosk using the command-line interface with the default module function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/kiosk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sui client call \\\n    --package 0x2 \\\n    --module kiosk \\\n    --function default \\\n    --gas-budget 1000000000\n```\n\n----------------------------------------\n\nTITLE: Updating LockOwnedObjects Component with Locking Functionality in TSX\nDESCRIPTION: Updates the LockOwnedObjects component to include the useLockObjectMutation hook, enabling the locking of owned objects in the UI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_31\n\nLANGUAGE: TSX\nCODE:\n```\n// Content of src/components/locked/LockOwnedObjects.tsx not provided in the input\n```\n\n----------------------------------------\n\nTITLE: Generating Validator Information\nDESCRIPTION: Command to generate validator information and key pairs for becoming a validator candidate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator make-validator-info <name> <description> <image-url> <project-url> <host-name> <gas_price>\n```\n\n----------------------------------------\n\nTITLE: Installing React Counter dApp Template with Package Managers\nDESCRIPTION: Commands to create a new React Counter dApp using PNPM or Yarn package managers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm create @mysten/dapp --template react-e2e-counter\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn create @mysten/dapp --template react-e2e-counter\n```\n\n----------------------------------------\n\nTITLE: Installing CMake on Linux\nDESCRIPTION: Command to install CMake on Linux systems using apt-get. CMake is required for building Sui and its dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo apt-get install cmake\n```\n\n----------------------------------------\n\nTITLE: Invalid Friend Declaration Across Different Addresses in Move\nDESCRIPTION: Example of an invalid friend declaration where the module attempts to declare a module from a different address as a friend, which is not allowed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/friends.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::m {}\n\nmodule 0x42::n { friend 0x42::m; // ERROR! }\n//                      ^^^^^^^ Cannot declare modules out of the current address as a friend\n```\n\n----------------------------------------\n\nTITLE: Implementing Validator Position Update and Stake Calculation in Rust\nDESCRIPTION: This function updates the position of validators in the Sui system based on their stake, moving those below certain thresholds out of the active set, while also managing pending validators. It takes parameters for grace periods and validator reports, and returns the total stake removed through these updates.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_17\n\nLANGUAGE: Rust\nCODE:\n```\nfun update_validator_positions_and_calculate_total_stake(\n    self: &mut sui_system::validator_set::ValidatorSet,\n    low_stake_grace_period: u64,\n    validator_report_records: &mut sui::vec_map::VecMap<address, sui::vec_set::VecSet<address>>,\n    ctx: &mut sui::tx_context::TxContext,\n): u64 {\n    // take all pending validators out of the tablevec and put them in a local vector\n    let pending_active_validators = vector::tabulate!(\n        self.pending_active_validators.length(),\n        |_| self.pending_active_validators.pop_back(),\n    );\n    // Note: we count the total stake of pending validators as well!\n    let pending_total_stake = calculate_total_stakes(&pending_active_validators);\n    let initial_total_stake = calculate_total_stakes(&self.active_validators) + pending_total_stake;\n    let (\n        min_joining_voting_power_threshold,\n        low_voting_power_threshold,\n        very_low_voting_power_threshold,\n    ) = self.get_voting_power_thresholds(ctx);\n    // Iterate through all the active validators, record their low stake status, and kick them out if the condition is met.\n    let mut total_removed_stake = 0; // amount of stake to remove due to departed_validators\n    let mut i = self.active_validators.length();\n    while (i > 0) {\n        i = i - 1;\n        let validator_ref = &self.active_validators[i];\n        let validator_address = validator_ref.sui_address();\n        let validator_stake = validator_ref.total_stake();\n        // calculate the voting power for this validator in the next epoch if no validators are removed\n        // if one of more low stake validators are removed, it's possible this validator will have higher voting power--that's ok.\n        let voting_power = voting_power::derive_raw_voting_power(\n            validator_stake,\n            initial_total_stake,\n        );\n        // SIP-39: a validator can remain indefinitely with a voting power ≥ LOW_VOTING_POWER_THRESHOLD\n        if (voting_power >= low_voting_power_threshold) {\n            // The validator is safe. We remove their entry from the at_risk map if there exists one.\n            if (self.at_risk_validators.contains(&validator_address)) {\n                self.at_risk_validators.remove(&validator_address);\n            }\n            // SIP-39: as soon as the validator’s voting power falls to VERY_LOW_VOTING_POWER_THRESHOLD,\n            //      they are on probation and must acquire sufficient stake to recover to voting power\n        } else if (voting_power >= very_low_voting_power_threshold) {\n            // The stake is a bit below the threshold so we increment the entry of the validator in the map.\n            let new_low_stake_period = if (self.at_risk_validators.contains(&validator_address)) {\n                let num_epochs = &mut self.at_risk_validators[&validator_address];\n                *num_epochs = *num_epochs + 1;\n                *num_epochs\n            } else {\n                self.at_risk_validators.insert(validator_address, 1);\n                1\n            };\n            // If the grace period has passed, the validator has to leave us.\n            if (new_low_stake_period > low_stake_grace_period) {\n                let validator = self.active_validators.remove(i);\n                let removed_stake = self.process_validator_departure(\n                    validator,\n                    validator_report_records,\n                    false, // the validator is kicked out involuntarily\n                    ctx,\n                );\n                total_removed_stake = total_removed_stake + removed_stake;\n            }\n            // SIP-39: at the end of an epoch when new voting powers are computed based on stake changes,\n            //      any validator with VOTING_POWER < VERY_LOW_VOTING_POWER_THRESHOLD will be removed\n        } else {\n            // The validator's stake is lower than the very low threshold so we kick them out immediately.\n            let validator = self.active_validators.remove(i);\n            let removed_stake = self.process_validator_departure(\n                validator,\n                validator_report_records,\n                false, // the validator is kicked out involuntarily\n                ctx,\n            );\n            total_removed_stake = total_removed_stake + removed_stake;\n        }\n    };\n    // check that pending validators still have sufficient stake to be added. this was checked at\n    // the time of request_add_validator, but stake may have been withdrawn, or stakes of other\n    // validators may have increased significantly\n    pending_active_validators.do!(|mut validator| {\n        let validator_stake = validator.total_stake();\n        let voting_power = voting_power::derive_raw_voting_power(\n            validator_stake,\n            initial_total_stake,\n        );\n        if (voting_power >= min_joining_voting_power_threshold) {\n            validator.activate(ctx.epoch());\n            event::emit(ValidatorJoinEvent {\n                epoch: ctx.epoch(),\n                // Further implementation here...\n            });\n        }\n    });\n    // Additional implementation\n    total_removed_stake\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Fixed-Point to Integer\nDESCRIPTION: Converts a UQ32_32 fixed-point number to a u32 integer by truncating the fractional part.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq32_32.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_int(a: UQ32_32): u32 {\n    std::macros::uq_to_int!(a.0, FRACTIONAL_BITS)\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Sui Node Binary from S3 using wget\nDESCRIPTION: Command to download the pre-built Sui Node binary for linux/amd64 from S3 using wget.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://releases.sui.io/$SUI_SHA/sui-node\n```\n\n----------------------------------------\n\nTITLE: Move.lock Section Structure\nDESCRIPTION: Shows the structure of the main [move] section in the Move.lock file, which contains version information, digests, and dependency listings.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[move]\nversion = <string> # Lock file version, used for backwards compatibility checking.\nmanifest_digest = <hash> # Sha3-256 hash of the Move.toml file that was used to generate this lock file.\ndeps_digest = <hash> # Sha3-256 hash of the Move.lock file of all dependencies. If no depencies are present, this will be an empty string.\ndependencies = { (name = <string>)* } # List of dependencies. Not present if there are no dependencies.\n```\n\n----------------------------------------\n\nTITLE: Using standard and Sui dependencies\nDESCRIPTION: This code snippet imports various modules from the standard library and the Sui library, which are necessary for implementing the validator set functionalities. The dependencies include modules for handling addresses, balances, events, tables, and various Sui-specific system utilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse std::address;\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::type_name;\nuse std::u64;\nuse std::vector;\nuse sui::address;\nuse sui::bag;\nuse sui::balance;\nuse sui::coin;\nuse sui::config;\nuse sui::deny_list;\nuse sui::dynamic_field;\nuse sui::dynamic_object_field;\nuse sui::event;\nuse sui::hex;\nuse sui::object;\nuse sui::priority_queue;\nuse sui::sui;\nuse sui::table;\nuse sui::table_vec;\nuse sui::transfer;\nuse sui::tx_context;\nuse sui::types;\nuse sui::url;\nuse sui::vec_map;\nuse sui::vec_set;\nuse sui::versioned;\nuse sui_system::staking_pool;\nuse sui_system::validator;\nuse sui_system::validator_cap;\nuse sui_system::validator_wrapper;\nuse sui_system::voting_power;\n```\n\n----------------------------------------\n\nTITLE: Getting All Checkpoints from Sui RPC Servers\nDESCRIPTION: Command that retrieves all checkpoints from sequence 0 to the latest using a single thread, executing the operation once without repeating.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rpc-loadgen/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-rpc-loadgen -- --urls \"http://127.0.0.1:9000\" \"http://127.0.0.1:9124\" --num-threads 1 get-checkpoints --start 0 --repeat 0 --interval-in-ms 0\n```\n\n----------------------------------------\n\nTITLE: Configuration File Format for Security Watchdog Service\nDESCRIPTION: JSON configuration file that defines scheduled SQL queries with time-based validation rules. The example includes two configurations: one for validating total SUI supply remains at 10B and another for tracking a user's balance against minimum thresholds over time.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-security-watchdog/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"sui_10B\",\n    \"cron_schedule\": \"0 0 * * *\",  // Every day at midnight (UTC)\n    \"sql_query\": \"SELECT total_sui FROM total_sui_mainnet ORDER BY epoch DESC LIMIT 1\",\n    \"metric_name\": \"total_sui_10B\",\n    \"timed_exact_limits\": {\n      // total sui should always be exact 10B since\n      // the dawn of time\n      \"1970-01-01T00:00:00Z\": 10000000000.0\n    },\n    \"timed_lower_limits\": {},\n    \"timed_exact_limits\": {}\n  },\n  {\n    \"name\": \"user_x_balance\",\n    \"cron_schedule\": \"0 15 * * *\",  // Every day at 3:15 PM (UTC)\n    \"sql_query\": \"SELECT balance FROM user_balances WHERE user_id = 'x' LIMIT 1\",\n    \"metric_name\": \"user_x_balance\",\n    \"timed_exact_limits\": {},\n    \"timed_upper_limits\": {},\n    \"timed_lower_limits\": {\n      // user balance should not drop below these numbers on those dates\n      // i.e. balance should not drop below 50 SUI before 1/1/2024,\n      // balance should not drop below 100SUI before 2/1/2024\n      // and it should not drop below 150SUI before 3/1/2024\n      \"2024-01-01T15:00:00Z\": 50.0,\n      \"2024-02-01T15:00:00Z\": 100.0,\n      \"2024-03-01T15:00:00Z\": 150.0,\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Bridge Client Key\nDESCRIPTION: Command to generate a new Bridge Client key pair and save it to a specified path.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ sui-bridge-cli create-bridge-client-key <PATH_TO_BRIDGE_CLIENT_KEY>\n```\n\n----------------------------------------\n\nTITLE: Mapping Option<T> to Option<U> in Sui Move\nDESCRIPTION: The 'map' macro function maps an Option<T> to Option<U> by applying a function to a contained value. It's equivalent to Rust's t.map(f). It takes an Option<T> and a closure as parameters, and returns an Option<U>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_20\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun map<$T, $U>($o: Option<$T>, $f: |$T| -> $U): Option<$U> {\n    let o = $o;\n    if (o.is_some()) {\n        some($f(o.destroy_some()))\n    } else {\n        o.destroy_none();\n        none()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Staking Request Event in Move\nDESCRIPTION: An event struct tracking staking requests with details about the staking pool, validator, staker, and staking amount\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic struct StakingRequestEvent has copy, drop {\n    pool_id: sui::object::ID,\n    validator_address: address,\n    staker_address: address,\n    epoch: u64,\n    amount: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EGasPriceHigherThanThreshold Error Constant in Move\nDESCRIPTION: Error constant (102) used when a validator tries to set a gas price higher than the allowed threshold.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_22\n\nLANGUAGE: move\nCODE:\n```\nconst EGasPriceHigherThanThreshold: u64 = 102;\n```\n\n----------------------------------------\n\nTITLE: Split and Transfer Coins with PTB using Sui Client\nDESCRIPTION: This command splits a gas coin and transfers the resulting coin to a specified address using a Programmable Transaction Block (PTB).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client ptb `<br/>&nbsp;&nbsp;`--split-coins gas \\\"[1000]\\\" `<br/>&nbsp;&nbsp;`--assign new_coins `<br/>&nbsp;&nbsp;`--transfer-objects\n\\\"[new_coins]\\\" ADDRESS\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Database URL\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes secret containing the database URL for indexers and GraphQL services. It's recommended to create this secret before deploying the charts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/helm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic db-secret \\\n  --from-literal=db-url='postgres://username:password@host:port/dbname'\n```\n\n----------------------------------------\n\nTITLE: Create New Aliased ED25519 Address using Sui CLI\nDESCRIPTION: This command creates a new Sui address with the ED25519 scheme and associates it with a specified alias. Aliases provide a human-readable name for easier address management.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client new-address ed25519 MY_ALIAS\"\n```\n\n----------------------------------------\n\nTITLE: Updating URL String\nDESCRIPTION: Updates the inner URL string of a Url instance with a new value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/url.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun update(self: &mut Url, url: String) {\n    self.url = url;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Print Stack Trace Function in Move\nDESCRIPTION: Defines a native function that outputs the current execution stack trace for debugging purposes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/debug.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic native fun print_stack_trace();\n```\n\n----------------------------------------\n\nTITLE: Running rustfmt for Move project conventions in Rust\nDESCRIPTION: This command runs rustfmt with project-specific configuration to enforce code formatting conventions in the Move Rust project.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/coding_guidelines.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo xfmt\n```\n\n----------------------------------------\n\nTITLE: Getting SUI Amount from Exchange Rate in Move\nDESCRIPTION: Accessor function that returns the SUI amount from a PoolTokenExchangeRate struct. Used to get the SUI component of an exchange rate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_41\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sui_amount(exchange_rate: &PoolTokenExchangeRate): u64 {\n    exchange_rate.sui_amount\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing New Kiosk with Owner Cap in Sui\nDESCRIPTION: Creates a new Kiosk object with a matching KioskOwnerCap. This is the core initialization function that sets up a Kiosk with its profits at zero, owner set to sender, and extensions disabled.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new(ctx: &mut TxContext): (Kiosk, KioskOwnerCap) {\n    let kiosk = Kiosk {\n        id: object::new(ctx),\n        profits: balance::zero(),\n        owner: ctx.sender(),\n        item_count: 0,\n        allow_extensions: false,\n    };\n    let cap = KioskOwnerCap {\n        id: object::new(ctx),\n        for: object::id(&kiosk),\n    };\n    (kiosk, cap)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ASCII String and Char Structs - Move\nDESCRIPTION: Core struct definitions for handling ASCII strings and characters, including storage properties and validation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct String has copy, drop, store {\n    bytes: vector<u8>\n}\n\npublic struct Char has copy, drop, store {\n    byte: u8\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Size of a VecMap in Move\nDESCRIPTION: Returns the number of entries in the VecMap by accessing the length of the internal contents vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic fun size<K: copy, V>(self: &VecMap<K, V>): u64 {\n    self.contents.length()\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Compiled Move Bytecode in Sui Sandbox\nDESCRIPTION: This command views the compiled Move bytecode for a specific module stored at a given address in the Sui blockchain sandbox.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/module_publish_view/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsandbox view storage/0x0000000000000000000000000000000000000000000000000000000000000042/modules/Module.mv\n```\n\n----------------------------------------\n\nTITLE: Running Sui Complex Program Detection Benchmark in Shell\nDESCRIPTION: This command runs a cargo test in release mode, suppressing standard output and capturing only the time measurement for complex program detection. The --nocapture flag allows printing to stdout during the test.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/bytecode-verifier-tests/METER_TESTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo test --release -- --nocapture 1>/dev/null\n```\n\n----------------------------------------\n\nTITLE: Executing Sui Package Upgrade Command\nDESCRIPTION: This shell command demonstrates how to upgrade a Sui package using the sui client CLI. It uses the 'upgrade' subcommand and specifies the upgrade capability ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/upgrade.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsui client upgrade --upgrade-capability <UPGRADE-CAP-ID>\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Forge\nDESCRIPTION: Command to compile Solidity contracts using Forge, which is Foundry's compilation tool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/bridge/evm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge compile\n```\n\n----------------------------------------\n\nTITLE: Mermaid Graph Example - Flowchart\nDESCRIPTION: Presents an example of a Mermaid flowchart diagram. The diagram illustrates the interaction between different client types, services, and authorities within a system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    CC(CLI Client) --> ClientService\n    RC(Rest Client) --> ClientService\n    RPCC(RPC Client) --> ClientService\n    ClientService --> AuthorityAggregator\n    AuthorityAggregator --> AC1[AuthorityClient] & AC2[AuthorityClient]\n    subgraph Authority1\n      AS[AuthorityState]\n    end\n    subgraph Authority2\n      AS2[AuthorityState]\n    end\n    AC1 <==>|Network TCP| Authority1\n    AC2 <==>|Network TCP| Authority2\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Option do_mut Macro in Move\nDESCRIPTION: Macro that executes a closure on a mutable reference to the value inside an Option if it contains one. Takes a mutable reference to Option<T> and a closure.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_21\n\nLANGUAGE: move\nCODE:\n```\npublic macro fun do_mut<$T, $R: drop>($o: &mut Option<$T>, $f: |&mut $T| -> $R) {\n    let o = $o;\n    if (o.is_some()) { $f(o.borrow_mut()); }\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Postgres Service on MacOS\nDESCRIPTION: This snippet restarts the Postgres service on MacOS using `brew services`. This is required for the 'max_connections' change to take effect.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-e2e-tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew services restart postgresql@15\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants for UQ64_64 Operations\nDESCRIPTION: Defines error constants used throughout the module to handle various error conditions such as division by zero and overflow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\n#[error]\nconst EDenominator: vector<u8> = b\"Quotient specified with a zero denominator\";\n\n#[error]\nconst EQuotientTooSmall: vector<u8> = b\"Quotient specified is too small, and is outside of the supported range\";\n\n#[error]\nconst EQuotientTooLarge: vector<u8> = b\"Quotient specified is too large, and is outside of the supported range\";\n\n#[error]\nconst EOverflow: vector<u8> = b\"Overflow from an arithmetic operation\";\n\n#[error]\nconst EDivisionByZero: vector<u8> = b\"Division by zero\";\n```\n\n----------------------------------------\n\nTITLE: Updating Validators with Final Voting Power in Move\nDESCRIPTION: Updates each validator in the system with their final calculated voting power. This function takes the list of voting power information and applies it to the corresponding validators.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\nfun update_voting_power(validators: &mut vector<Validator>, info_list: vector<VotingPowerInfoV2>) {\n    info_list.destroy!(|VotingPowerInfoV2 { validator_index, voting_power, .. }| {\n        validators[validator_index].set_voting_power(voting_power);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Running C4 Diagrams with Docker and Accessing Preview Interface\nDESCRIPTION: Commands for starting the Docker container for C4 diagrams and instructions for accessing the preview interface. Includes steps for navigating to the folder, starting the container, viewing the diagrams, and managing the container lifecycle.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/move/nft-rental/c4-architecture/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Navigate a console or terminal to this folder and run `docker-compose up`.\n2. When the container is up, open http://localhost:8080.\n3. Any update on the workspace.dsl file takes immediate visual effect upon page reload.\n4. To stop the container, send a `Ctrl+C` signal to the terminal. Or run `docker-compose down` in the doc folder if you started running the container with the `-d` flag.\n```\n\n----------------------------------------\n\nTITLE: Implementing Square Root Calculation Macro in Move\nDESCRIPTION: A macro that calculates the integer square root of a number using the bit manipulation approach for efficient computation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_sqrt<$T, $U>($x: $T, $bitsize: u8): $T {\n    let x = $x;\n    let mut bit = (1: $U) << $bitsize;\n    let mut res = (0: $U);\n    let mut x = x as $U;\n    while (bit != 0) {\n        if (x >= res + bit) {\n            x = x - (res + bit);\n            res = (res >> 1) + bit;\n        } else {\n            res = res >> 1;\n        };\n        bit = bit >> 2;\n    };\n    res as $T\n}\n```\n\n----------------------------------------\n\nTITLE: Note Alert Markdown\nDESCRIPTION: This code snippet demonstrates the markdown syntax for creating a 'Note' alert using Docusaurus Admonitions. It adds emphasis to information that the reader should know, but could be overlooked. The alert explains that the system processes updates only once every 24 hours at UTC 00:00.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n:::note\n\nThe system processes updates only once every 24 hours at UTC 00:00.\n\n:::\n\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Pow Function in Move\nDESCRIPTION: Deprecated pow function that returns the result of raising a u64 base to a u8 exponent. Recommends using std::u64::pow instead.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/math.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pow(base: u64, exponent: u8): u64 {\n    base.pow(exponent)\n}\n```\n\n----------------------------------------\n\nTITLE: Hash to G2 Group Operation\nDESCRIPTION: Implements hash-to-group operation for G2 using BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_ as the domain separation tag.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_34\n\nLANGUAGE: Move\nCODE:\n```\npublic fun hash_to_g2(m: &vector<u8>): Element<G2> {\n    group_ops::hash_to(G2_TYPE, m)\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Next Epoch Validator Count\nDESCRIPTION: Function to determine the total number of validators for the next epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_25\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun next_epoch_validator_count(self: &ValidatorSet): u64 {\n    self.active_validators.length() - self.pending_removals.length() + self.pending_active_validators.length()\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Pool Token Exchange Rate\nDESCRIPTION: Creates a new PoolTokenExchangeRate struct with zero values for both SUI amount and pool token amount, representing the initial state of an exchange rate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_46\n\nLANGUAGE: Move\nCODE:\n```\nfun initial_exchange_rate(): PoolTokenExchangeRate {\n    PoolTokenExchangeRate { sui_amount: 0, pool_token_amount: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'public use fun' with Functions from Other Modules\nDESCRIPTION: Example showing how to use 'public use fun' to add methods to types from functions defined in other modules within the same package. This allows coordinating functionality across multiple modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\nmodule a::cup {\n    public struct Cup<T>(T) has copy, drop, store;\n\n    public fun new<T>(t: T): Cup<T> { Cup(t) }\n    public fun borrow<T>(c: &Cup<T>): &T {\n        &c.0\n    }\n    // `public use fun` to a function defined in another module\n    public use fun a::utils::split as Cup.split;\n}\n\nmodule a::utils {\n    use a::m::{Self, Cup};\n\n    public fun split<u64>(c: Cup<u64>): (Cup<u64>, Cup<u64>) {\n        let Cup(t) = c;\n        let half = t / 2;\n        let rem = if (t > 0) t - half else 0;\n        (cup::new(half), cup::new(rem))\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing u256 to u8 conversion in Move\nDESCRIPTION: Attempts to convert a u256 value to u8, returning None if the value is too large.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u8(x: u256): Option<u8> {\n    std::macros::try_as_u8!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Mysten Labs ZK Proving Service using cURL\nDESCRIPTION: These cURL commands demonstrate how to call the Mysten Labs-maintained ZK proving service. Two examples are provided, one using BigInt encoding and another using Base64 encoding for the input parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/zklogin-integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -X POST $PROVER_URL -H 'Content-Type: application/json' \\\n-d '{\"jwt\":\"$JWT_TOKEN\", \\\n\"extendedEphemeralPublicKey\":\"84029355920633174015103288781128426107680789454168570548782290541079926444544\", \\\n\"maxEpoch\":\"10\", \\\n\"jwtRandomness\":\"100681567828351849884072155819400689117\", \\\n\"salt\":\"248191903847969014646285995941615069143\", \\\n\"keyClaimName\":\"sub\" \\\n}'\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -X POST $PROVER_URL -H 'Content-Type: application/json' \\\n-d '{\"jwt\":\"$JWT_TOKEN\", \\\n\"extendedEphemeralPublicKey\":\"ucbuFjDvPnERRKZI2wa7sihPcnTPvuU//O5QPMGkkgA=\", \\\n\"maxEpoch\":\"10\", \\\n\"jwtRandomness\":\"S76Qi8c/SZlmmotnFMr13Q==\", \\\n\"salt\":\"urgFnwIxJ++Ooswtf0Nn1w==\", \\\n\"keyClaimName\":\"sub\" \\\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing 'do_eq' Macro Function for U8 in Sui\nDESCRIPTION: This macro function loops and applies a given function to each number from 0 to a specified stop value (inclusive) for u8 types. It uses the std::macros::do_eq macro for implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_12\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun do_eq<$R: drop>($stop: u8, $f: |u8| -> $R) {\n    std::macros::do_eq!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Wallet Event Callback Type Definition\nDESCRIPTION: Type definition for the wallet event callback object structure\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/wallet-standard.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n{\n    accounts: WalletAccount[],\n    chains: IdentifierArray,\n    features: IdentifierRecord<unknown>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sui Validator Keys in YAML\nDESCRIPTION: This YAML snippet shows how to configure the paths to private keys in the validator.yaml file. It specifies the locations for protocol, worker, and network key pairs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/docker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprotocol-key-pair:\n  path: /opt/sui/key-pairs/protocol.key\nworker-key-pair: \n  path: /opt/sui/key-pairs/worker.key\nnetwork-key-pair: \n  path: /opt/sui/key-pairs/network.key\n```\n\n----------------------------------------\n\nTITLE: Defining Safe Integer Multiplication Macro in Move\nDESCRIPTION: This macro function `uq_int_mul` performs safe multiplication of two integer values while checking for overflow. It scales the product using a specified number of fractional bits and returns the result as the original type. If the product exceeds the maximum allowed value, it triggers an abort.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun uq_int_mul<$T, $U>($val: $T, $multiplier: $T, $max_t: $T, $fractional_bits: u8, $abort_overflow: _): $T {\n    // The product of two `$T` bit values <b>has</b> the same number of bits <b>as</b> `$U`, so perform the\n    // multiplication with `$U` types and keep the full `$U` bit product\n    // to avoid losing accuracy.\n    <b>let</b> unscaled_product = $val <b>as</b> $U * ($multiplier <b>as</b> $U);\n    // The unscaled product <b>has</b> `$fractional_bits` fractional bits (from the multiplier)\n    // so rescale it by shifting away the low bits.\n    <b>let</b> product = unscaled_product >> $fractional_bits;\n    // Check whether the value is too large.\n    <b>if</b> (product > $max_t <b>as</b> $U) $abort_overflow;\n    product <b>as</b> $T\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Tic-Tac-Toe dApp in Development Mode\nDESCRIPTION: Command to start the Tic-Tac-Toe demo application in development mode using pnpm. This launches a local development server with hot-reloading for interactive development.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/tic-tac-toe/ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Comparing UQ64_64 Numbers in Move\nDESCRIPTION: Implements comparison operations (less than or equal to, less than, greater than or equal to, greater than) for UQ64_64 fixed-point numbers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun le(a: UQ64_64, b: UQ64_64): bool {\n    a.0 <= b.0\n}\n\npublic fun lt(a: UQ64_64, b: UQ64_64): bool {\n    a.0 < b.0\n}\n\npublic fun ge(a: UQ64_64, b: UQ64_64): bool {\n    a.0 >= b.0\n}\n\npublic fun gt(a: UQ64_64, b: UQ64_64): bool {\n    a.0 > b.0\n}\n```\n\n----------------------------------------\n\nTITLE: Move Framework Unit Test Command\nDESCRIPTION: Command to run framework Move unit tests after implementing a native function\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrun_framework_move_unit_tests\n```\n\n----------------------------------------\n\nTITLE: Converting u64 to u32 with Overflow Check\nDESCRIPTION: Function that attempts to convert a u64 value to u32, returning None if the value exceeds the maximum value of u32.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u32(x: u64): Option<u32> {\n    std::macros::try_as_u32!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Debug Module in Move\nDESCRIPTION: Import the std::debug module to enable debugging functionality in a Move smart contract.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/debug.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nuse std::debug;\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Chart for Indexer Reader\nDESCRIPTION: This command installs the Helm chart for the Indexer Reader service. It uses both the default values.yaml and the reader-specific values.reader.yaml files for configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/helm/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install indexer-reader indexer -f indexer/values.yaml -f indexer/values.reader.yaml\n```\n\n----------------------------------------\n\nTITLE: Building Sui with Verbose Output\nDESCRIPTION: Simple commands to build the Sui blockchain project with verbose output, including a variant with the debug flag.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/include_exclude_stdlib/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild -v\n-d -v build\n```\n\n----------------------------------------\n\nTITLE: Account Function Definition\nDESCRIPTION: Function signature for retrieving account information for a BalanceManager in a pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/pools.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nasync account(poolKey: string, managerKey: string) {}\n```\n\n----------------------------------------\n\nTITLE: Transitive Implicit Dependency Resolution Test\nDESCRIPTION: Tests how implicit dependencies are added when a package has a dependency on another package. Both packages should have the standard implicit dependencies added.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-package/tests/test_sources/implicits/README.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\na:\n  B: b\n\nb: no deps\n```\n\n----------------------------------------\n\nTITLE: Create and Use Docker Buildx Builder\nDESCRIPTION: This snippet creates a Docker Buildx builder named 'stagex' using the docker-container driver and sets it as the current builder.  This is a prerequisite for the deterministic build process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/sui-node-deterministic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"docker buildx create --driver 'docker-container' --name stagex --use\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"docker use --bootstrap stagex\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Push URL\nDESCRIPTION: This YAML snippet configures the metrics push URL for the Bridge Node, allowing it to send metrics to a remote proxy. The URL is environment-specific, supporting both testnet and mainnet. Ensure that the URL correctly points to the intended metrics proxy for accurate data transmission.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n    push-url: https://metrics-proxy.[testnet|mainnet].sui.io:8443/publish/metrics\n```\n\n----------------------------------------\n\nTITLE: Check and Record Bridge Transfer\nDESCRIPTION: Validates and records a bridge transfer against configured limits. Checks if the transfer amount exceeds the route's limit, considering token decimals and notional values. Returns true if transfer is within limits.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/limiter.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun check_and_record_sending_transfer<T>(\n    self: &mut TransferLimiter,\n    treasury: &BridgeTreasury,\n    clock: &Clock,\n    route: BridgeRoute,\n    amount: u64\n): bool {\n    if (!self.transfer_records.contains(&route)) {\n        self.transfer_records.insert(route, TransferRecord {\n            hour_head: 0,\n            hour_tail: 0,\n            per_hour_amounts: vector[],\n            total_amount: 0\n        })\n    };\n    let record = self.transfer_records.get_mut(&route);\n    let current_hour_since_epoch = current_hour_since_epoch(clock);\n    record.adjust_transfer_records(current_hour_since_epoch);\n    let route_limit = self.transfer_limits.try_get(&route);\n    assert!(route_limit.is_some(), ELimitNotFoundForRoute);\n    let route_limit = route_limit.destroy_some();\n    let route_limit_adjusted =\n        (route_limit as u128) * (treasury.decimal_multiplier<T>() as u128);\n    let value = (treasury.notional_value<T>() as u128);\n    let notional_amount_with_token_multiplier = value * (amount as u128);\n    if ((record.total_amount as u128)\n        * (treasury.decimal_multiplier<T>() as u128)\n        + notional_amount_with_token_multiplier > route_limit_adjusted\n    ) {\n        return false\n    };\n    let notional_amount = notional_amount_with_token_multiplier\n        / (treasury.decimal_multiplier<T>() as u128);\n    let notional_amount = (notional_amount as u64);\n    let new_amount = record.per_hour_amounts.pop_back() + notional_amount;\n    record.per_hour_amounts.push_back(new_amount);\n    record.total_amount = record.total_amount + notional_amount;\n    true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Sui Balance Using Bash and cURL\nDESCRIPTION: This bash script demonstrates how to use the sui_getBalance RPC method to retrieve the total balance for a Sui address. It uses cURL to send a POST request to a Sui Full node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/exchange-integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrpc=\"https://fullnode.devnet.sui.io:443\"\naddress=\"0x849d63687330447431a2e76fecca4f3c10f6884ebaa9909674123c6c662612a3\"\ndata=\"{\\\"jsonrpc\\\": \\\"2.0\\\", \\\"method\\\": \\\"sui_getBalance\\\", \\\"id\\\": 1, \\\"params\\\": [\\\"$address\\\"]}\"\ncurl -X POST -H 'Content-type: application/json' --data-raw \"$data\" $rpc\n```\n\n----------------------------------------\n\nTITLE: Importing Matter.js Physics Engine in TypeScript\nDESCRIPTION: TypeScript code snippet showing the import of Matter.js physics engine components used for simulating ball movement in the Plinko game frontend.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/plinko.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Matter, {\n  Engine,\n  Render,\n  Runner,\n  Bodies,\n  Composite,\n  Vector,\n  Events,\n  Body,\n  Common,\n} from \"matter-js\";\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Structure in Move on Sui\nDESCRIPTION: Defines the IdentifiedPayment struct which represents a payment with a unique identifier and a coin. This structure allows for tracking payments for specific goods or services by their payment_id.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/move/transfer-to-object/README.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n/// A unique payment for a good or service that can be uniquely identified by\n/// `payment_id`.\nstruct IdentifiedPayment has key, store {\n    /// Object ID\n    id: UID,\n    /// The unique id for the good/service being paid for\n    payment_id: u64,\n    /// The payment\n    coin: Coin<SUI>,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Initial Gas Objects to Sui Genesis\nDESCRIPTION: Command to add configuration for initial gas objects that should be created at genesis. This specifies the address, object ID, and value of Sui coins.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui/genesis.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sui genesis-ceremony add-gas-object \\\n    --address <SuiAddress> \\\n    --object-id <ObjectId> \\\n    --valud <# of sui coins>\n$ git add .\n$ git commit -m \"add gas object\"\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Defining Simulation Tests in Sui with Macros\nDESCRIPTION: Shows how to write simulation tests using the #[sui_test] and #[sim_test] macros, where sui_test runs in both regular tests and simulator, while sim_test runs only in the simulator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-simulator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nusing sui_macros::*;\n\n#[sui_test]\nasync fn test1() {\n    // A test that will run using `#[tokio::test]` when run via `cargo nextest`, or\n    // else a simulator test when run via `cargo simtest`.\n}\n\n#[sim_test]\nasync fn test2() {\n    // A test that will be ignored when run via `cargo nextest`, and only run\n    // via `cargo simtest`.\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Specific Validator Metadata\nDESCRIPTION: Command to display metadata for a specific validator by address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator display-metadata <validator-address>\n```\n\n----------------------------------------\n\nTITLE: Converting Unverified to Verified Validator Capability\nDESCRIPTION: Function to convert an unverified validator operation capability to a verified capability after successful validation\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_cap.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun into_verified(\n    cap: &UnverifiedValidatorOperationCap\n): ValidatorOperationCap\n```\n\n----------------------------------------\n\nTITLE: Building the Sui Project with Verbose Output\nDESCRIPTION: A shell command to build the Sui blockchain project with the verbose flag enabled to show detailed output during the build process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/unbound_dependency/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild -v\n```\n\n----------------------------------------\n\nTITLE: Declaring Friend Module with Fully Qualified Name in Move\nDESCRIPTION: Example of declaring a friend module using a fully qualified module name. Module 'b' is declared as a friend of module 'a'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/friends.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::a {\n    friend 0x42::b;\n}\n```\n\n----------------------------------------\n\nTITLE: Make Move Vector with PTB using Sui Client\nDESCRIPTION: This command creates a Move vector with the specified elements and type using a Programmable Transaction Block (PTB).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client ptb --make-move-vec \\\"<u64>\\\" \\\"[1000,2000]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Sample Configuration for Source Validation Service\nDESCRIPTION: This TOML configuration snippet defines the package repository, branch, network, and paths for the Move packages being monitored by the Sui Source Validation Service. It is used to specify how the service should retrieve source code.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-source-validation-service/README.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[packages]]\nsource = \"Repository\"\n[packages.values]\nrepository = \"https://github.com/mystenlabs/sui\"\nbranch = \"framework/mainnet\"\nnetwork = \"mainnet\"\npackages = [\n    { path = \"crates/sui-framework/packages/deepbook\", watch = \"0xdee9\" },\n    { path = \"crates/sui-framework/packages/move-stdlib\", watch = \"0x1\" },\n    { path = \"crates/sui-framework/packages/sui-framework\", watch = \"0x2\" },\n    { path = \"crates/sui-framework/packages/sui-system\", watch = \"0x3\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Maximum Value for u8\nDESCRIPTION: The max_value macro returns the maximum value for a u8 type, which is 0xFF (255).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun max_value(): u8 {\n    0xFF\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cup Container Type with Methods\nDESCRIPTION: Example defining a Cup container type with several functions that can be called as methods. These functions handle borrowing, retrieving values, and modifying the Cup's contents.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule a::cup {\n    public struct Cup<T>(T) has copy, drop, store;\n\n    public fun cup_borrow<T>(c: &Cup<T>): &T {\n        &c.0\n    }\n\n    public fun cup_value<T>(c: Cup<T>): T {\n        let Cup(t) = c;\n        t\n    }\n\n    public fun cup_swap<T: drop>(c: &mut Cup<T>, t: T) {\n        c.0 = t;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get SUI Coin from Faucet using Sui CLI\nDESCRIPTION: This command requests SUI coins from the faucet associated with the currently active network. Faucets provide test SUI for development purposes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client faucet\"\n```\n\n----------------------------------------\n\nTITLE: Using Move Build Command-Line Tool\nDESCRIPTION: Command-line usage for the Move build tool, which checks Move programs and produces serialized bytecode. It accepts source files, sender address, dependencies, and output directory parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-compiler/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmove-build 0.0.1\nCompile Move source to Move bytecode.\n\nUSAGE:\n    move-build [FLAGS] [OPTIONS] [--] [PATH_TO_SOURCE_FILE]...\n\nFLAGS:\n    -m, --source-map    Save bytecode source map to disk\n    -h, --help          Prints help information\n    -V, --version       Prints version information\n\nOPTIONS:\n    -s, --sender <ADDRESS>                           The sender address for modules and scripts\n    -d, --dependency <PATH_TO_DEPENDENCY_FILE>...    The library files needed as dependencies\n    -o, --out-dir <PATH_TO_OUTPUT_DIRECTORY>         The Move bytecode output directory [default: build]\n\nARGS:\n    <PATH_TO_SOURCE_FILE>...    The source files to check and compile\n```\n\n----------------------------------------\n\nTITLE: Executing Package Publication Transaction\nDESCRIPTION: Executes the publication transaction using SuiClient and displays the results.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\nconst client = new SuiClient({ url: getFullnodeUrl('localnet') });\nconst result = await client.signAndExecuteTransaction({\n\tsigner,\n\ttransaction: tx,\n\toptions: {\n\t\tshowEffects: true,\n\t\tshowObjectChanges: true,\n\t},\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Struct Ownership and Abilities in Move\nDESCRIPTION: Demonstrates the ownership semantics of structs in Move, including the default linear and ephemeral nature, and how to use the 'copy' and 'drop' abilities to change this behavior.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/structs.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct Foo { x: u64 }\n\n    public fun copying() {\n        let foo = Foo { x: 100 };\n        let foo_copy = copy foo; // ERROR! 'copy'-ing requires the 'copy' ability\n        let foo_ref = &foo;\n        let another_copy = *foo_ref // ERROR! dereference requires the 'copy' ability\n    }\n\n    public fun destroying_1() {\n        let foo = Foo { x: 100 };\n\n        // error! when the function returns, foo still contains a value.\n        // This destruction requires the 'drop' ability\n    }\n\n    public fun destroying_2(f: &mut Foo) {\n        *f = Foo { x: 100 } // error!\n                            // destroying the old value via a write requires the 'drop' ability\n    }\n}\n```\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct Foo { x: u64 }\n\n    public fun destroying_1_fixed() {\n        let foo = Foo { x: 100 };\n        let Foo { x: _ } = foo;\n    }\n}\n```\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct Foo has copy, drop { x: u64 }\n\n    public fun run() {\n        let foo = Foo { x: 100 };\n        let foo_copy = foo;\n        //             ^ this code copies foo,\n        //             whereas `let x = move foo` would move foo\n\n        let x = foo.x;            // x = 100\n        let x_copy = foo_copy.x;  // x = 100\n\n        // both foo and foo_copy are implicitly discarded when the function returns\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Definition: EVotingPowerOverThreshold\nDESCRIPTION: Defines a constant `EVotingPowerOverThreshold` set to 3. This is an error code indicating that the voting power exceeds a threshold.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\n<b>const</b> <a href=\"../sui_system/voting_power.md#sui_system_voting_power_EVotingPowerOverThreshold\">EVotingPowerOverThreshold</a>: u64 = 3;\n```\n\n----------------------------------------\n\nTITLE: Finalizing Sui Genesis Ceremony\nDESCRIPTION: Command for the Master of Ceremony to finalize the genesis ceremony after all validators have verified and signed the genesis object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui/genesis.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sui genesis-ceremony finalize\n```\n\n----------------------------------------\n\nTITLE: Adding Two UQ64_64 Values\nDESCRIPTION: Adds two fixed-point numbers and returns the result. Aborts if the sum overflows the maximum representable value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add(a: UQ64_64, b: UQ64_64): UQ64_64 {\n    UQ64_64(std::macros::uq_add!<u128, u256>(\n        a.0,\n        b.0,\n        std::u128::max_value!(),\n        abort EOverflow,\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: Effectuating Staged Metadata for Sui Validator\nDESCRIPTION: This function applies all staged next epoch metadata changes for a validator. It should only be called by the validator_set when advancing an epoch. It updates various validator addresses and public keys.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_92\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun effectuate_staged_metadata(self: &mut Validator) {\n    do_extract!(&mut self.metadata.next_epoch_net_address, |v| {\n        self.metadata.net_address = v\n    });\n    do_extract!(&mut self.metadata.next_epoch_p2p_address, |v| {\n        self.metadata.p2p_address = v\n    });\n    do_extract!(&mut self.metadata.next_epoch_primary_address, |v| {\n        self.metadata.primary_address = v\n    });\n    do_extract!(&mut self.metadata.next_epoch_worker_address, |v| {\n        self.metadata.worker_address = v\n    });\n    do_extract!(&mut self.metadata.next_epoch_protocol_pubkey_bytes, |v| {\n        self.metadata.protocol_pubkey_bytes = v;\n        self.metadata.proof_of_possession = self.metadata.next_epoch_proof_of_possession.extract();\n    });\n    do_extract!(&mut self.metadata.next_epoch_network_pubkey_bytes, |v| {\n        self.metadata.network_pubkey_bytes = v\n    });\n    do_extract!(&mut self.metadata.next_epoch_worker_pubkey_bytes, |v| {\n        self.metadata.worker_pubkey_bytes = v\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Summation of Group Elements (Move)\nDESCRIPTION: This native function, `internal_sum`, calculates the sum of a vector of group elements. It takes the group type as a `u8` and a vector of byte vectors representing the elements to sum. The function returns a new byte vector representing the result of summing all input elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/group_ops.md#sui_group_ops_internal_sum\">internal_sum</a>(type_: u8, e: &vector&lt;vector&lt;u8&gt;&gt;): vector&lt;u8&gt;;\n```\n\n----------------------------------------\n\nTITLE: Setting Address Variables\nDESCRIPTION: Sets shell variables for storing the generated addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nADDRESS1=<SUI-ADDRESS-ED25519>\n```\n\nLANGUAGE: sh\nCODE:\n```\nADDRESS2=<SUI-ADDRESS-SECP256K1>\n```\n\nLANGUAGE: sh\nCODE:\n```\nADDRESS3=<SUI-ADDRESS-SECP256R1>\n```\n\nLANGUAGE: sh\nCODE:\n```\nACTIVE=<ACTIVE-ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Sui Move Modules with Artifact Management\nDESCRIPTION: A sequence of shell commands for building Sui Move modules in directories C and B. The commands include verbose build operations, backing up original Move files with a '_old' suffix, removing build artifacts, and running tests.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/move_unit_tests/bytecode_deps/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild -v -p ./C\n> mv ./C/sources/Foo.move ./C/sources/Foo.move_old\n> rm -rf ./C/build/Foo/sources\nbuild -v -p ./B\n> mv ./B/sources/Bar.move ./B/sources/Bar.move_old\n> rm -rf ./B/build/Bar/sources\ntest\n```\n\n----------------------------------------\n\nTITLE: Requesting Tokens from Faucet\nDESCRIPTION: Request tokens from the Sui faucet (not available for Mainnet).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client faucet\n```\n\n----------------------------------------\n\nTITLE: Calculating Power of u32 Base with u8 Exponent\nDESCRIPTION: Computes the value of a u32 base raised to a u8 power using the std::macros::num_pow macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u32.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pow(base: u32, exponent: u8): u32 {\n    std::macros::num_pow!(base, exponent)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Two UQ32_32 Values in Move\nDESCRIPTION: Adds two fixed-point numbers and returns the result. Aborts if the sum overflows the UQ32_32 representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add(a: UQ32_32, b: UQ32_32): UQ32_32 {\n    UQ32_32(std::macros::uq_add!<u64, u128>(\n        a.0,\n        b.0,\n        std::u64::max_value!(),\n        abort EOverflow,\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: Total Object Storage Rebates Getter\nDESCRIPTION: Returns the total value of object storage rebates currently held in the storage fund.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/storage_fund.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun total_object_storage_rebates(self: &StorageFund): u64 {\n    self.total_object_storage_rebates.value()\n}\n```\n\n----------------------------------------\n\nTITLE: Sui Package Publishing Output\nDESCRIPTION: Complete transaction output showing the successful publishing of a Sui package, including dependencies verification, transaction details, and effects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/upgrade.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING my_first_package\nSuccessfully verified dependencies on-chain against source.\nTransaction Digest: GPSpH264CjQPaXQPpMHpkzyGidZnQFvd1yUH5s9ncesi\n╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Transaction Data                                                                                             │\n├──────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ Sender: PUBLISHER-ID                                                                                         │\n│ Gas Owner: PUBLISHER-ID                                                                                      │\n│ Gas Budget: 12298000 MIST                                                                                    │\n│ Gas Price: 1000 MIST                                                                                         │\n│ Gas Payment:                                                                                                 │\n│  ┌──                                                                                                         │\n│  │ ID: GAS-COIN-ID                                                                                           │\n│  │ Version: 2                                                                                                │\n│  │ Digest: QDssxM4QKnhutWCYijiWWmYPtKWnHB9xVaLqPsDHiep                                                       │\n│  └──                                                                                                         │\n│                                                                                                              │\n│ Transaction Kind: Programmable                                                                               │\n│ ╭──────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │\n│ │ Input Objects                                                                                            │ │\n│ ├──────────────────────────────────────────────────────────────────────────────────────────────────────────┤ │\n│ │ 0   Pure Arg: Type: address, Value: \"PUBLISHER-ID\"                                                       │ │\n│ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │\n│ ╭─────────────────────────────────────────────────────────────────────────╮                                  │\n│ │ Commands                                                                │                                  │\n│ ├─────────────────────────────────────────────────────────────────────────┤                                  │\n│ │ 0  Publish:                                                             │                                  │\n│ │  ┌                                                                      │                                  │\n│ │  │ Dependencies:                                                        │                                  │\n│ │  │   0x0000000000000000000000000000000000000000000000000000000000000001 │                                  │\n│ │  │   0x0000000000000000000000000000000000000000000000000000000000000002 │                                  │\n│ │  └                                                                      │                                  │\n│ │                                                                         │                                  │\n│ │ 1  TransferObjects:                                                     │                                  │\n│ │  ┌                                                                      │                                  │\n│ │  │ Arguments:                                                           │                                  │\n│ │  │   Result 0                                                           │                                  │\n│ │  │ Address: Input  0                                                    │                                  │\n│ │  └                                                                      │                                  │\n│ ╰─────────────────────────────────────────────────────────────────────────╯                                  │\n│                                                                                                              │\n│ Signatures:                                                                                                  │\n│    4NqP6CL1/LN1Ekr9NeL82PFGgVdEjrwsP82l/0mFvCd9TYO94CKBQAm8C/D6DsAuBrwu4cogQ3Mbh1huGc0yCg==                  │\n│                                                                                                              │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Setting Validator Voting Power - Move\nDESCRIPTION: This package-visible function sets a new voting power for a validator. It can only be called from within the validator_set module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_64\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun set_voting_power(self: &mut Validator, new_voting_power: u64) {\n    self.voting_power = new_voting_power;\n}\n```\n\n----------------------------------------\n\nTITLE: Owner Access Function Implementation\nDESCRIPTION: Function to retrieve the owner address associated with a VerifiedIssuer object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_issuer.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun owner(verified_issuer: &VerifiedIssuer): address {\n    verified_issuer.owner\n}\n```\n\n----------------------------------------\n\nTITLE: Building Package C and Moving Source Files\nDESCRIPTION: Command to build package C with verbose output, followed by commands to move a Move source file to a backup name and remove build artifacts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/build_with_bytecode/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuild -v -p ./C\n> mv ./C/sources/Foo.move ./C/sources/Foo.move_old\n> rm -rf ./C/build/Foo/sources\n```\n\n----------------------------------------\n\nTITLE: Generating Struct Layouts Across Modules\nDESCRIPTION: Commands to generate struct layouts for struct B in module M1 with a bool type argument, demonstrating both deep and shallow analysis across module boundaries.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/generate_struct_layout/args.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct B --type-args bool\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct B --type-args bool --shallow\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trades Data Example in DeepBook API\nDESCRIPTION: Provides an example response for the trades endpoint, showing detailed trade information for a specific pool and time range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"trade_id\": \"136321457151457660152049680\",\n        \"base_volume\": 405,\n        \"quote_volume\": 1499,\n        \"price\": 3695,\n        \"type\": \"sell\",\n        \"timestamp\": 1738096392913,\n        \"maker_order_id\": \"68160737799100866923792791\",\n        \"taker_order_id\": \"170141183460537392451039660509112362617\",\n        \"maker_balance_manager_id\": \"0x344c2734b1d211bd15212bfb7847c66a3b18803f3f5ab00f5ff6f87b6fe6d27d\",\n        \"taker_balance_manager_id\": \"0x47dcbbc8561fe3d52198336855f0983878152a12524749e054357ac2e3573d58\"\n    },\n\t...\n]\n```\n\n----------------------------------------\n\nTITLE: Executing Signed Transaction with Multisig in Sui\nDESCRIPTION: Executes a previously created and signed multisignature transaction using the Sui client CLI. This command requires the transaction bytes and the serialized multisig signatures.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client execute-signed-tx --tx-bytes $TXBYTES --signatures $MULTISIG_SERIALIZED\n```\n\n----------------------------------------\n\nTITLE: External Code Injection Example\nDESCRIPTION: This snippet shows how to inject code from an external GitHub repository using the `{@inject}` directive with the `github:` prefix. This should be done sparingly, as there's no guarantee the code remains valid.  The full GitHub org, repo, and path to the file must be specified.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n{@inject: github:<GITHUB_ORG_NAME>/<GITHUB_REPO_NAME>/<PATH_TO_FILE>}\n```\n\n----------------------------------------\n\nTITLE: Type Error Examples with Equality Operations in Move\nDESCRIPTION: Examples showing type checking errors when comparing values of different types. Move requires both operands of equality operations to be of the same type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/equality.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\n1u8 == 1u128; // ERROR!\n//     ^^^^^ expected an argument of type 'u8'\nb\"\" != 0; // ERROR!\n//     ^ expected an argument of type 'vector<u8>'\n```\n\n----------------------------------------\n\nTITLE: Deploying Sui Edge Proxy in Kubernetes\nDESCRIPTION: This YAML configuration creates a Kubernetes Deployment for the Sui Edge Proxy. It specifies the container image, command, environment variables, and volume mounts for the configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-edge-proxy/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sui-edge-proxy\n  namespace: benchmark-rpc-testnet\n  labels:\n    app: sui-edge-proxy\n    cluster: sui-fleet-usw1\n    network: testnet\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: sui-edge-proxy\n  template:\n    metadata:\n      labels:\n        app: sui-edge-proxy\n      annotations:\n        prometheus.io/path: /metrics\n        prometheus.io/port: '9184'\n        prometheus.io/scrape: 'true'\n    spec:\n      containers:\n        - name: sui-edge-proxy\n          image: mysten/sui-tools:mainnet\n          imagePullPolicy: IfNotPresent\n          command:\n            - /opt/sui/bin/sui-edge-proxy\n            - --config=/config/proxy.yaml\n          env:\n            - name: RUST_LOG\n              value: debug\n          ports:\n            - containerPort: 8080\n              protocol: TCP\n          volumeMounts:\n            - name: config-volume\n              mountPath: /config\n      volumes:\n        - name: config-volume\n          configMap:\n            name: sui-edge-proxy-config\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-config on Linux (Optional)\nDESCRIPTION: Command to install pkg-config on Linux systems using apt-get. This may be required if you have OpenSSL installed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo apt-get install pkg-config\n```\n\n----------------------------------------\n\nTITLE: Deleting Sui Database Volume with Docker Compose\nDESCRIPTION: This shell command stops the Docker Compose setup and removes the associated volumes, effectively deleting the local Sui databases.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/docker/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker-compose down -v\n```\n\n----------------------------------------\n\nTITLE: Deploying to Remote Networks with Forge Script\nDESCRIPTION: Command to deploy smart contracts to a remote blockchain network using Forge Script with broadcasting and verification enabled.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/bridge/evm/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nforge script script/deploy_bridge.s.sol --rpc-url <<alias>> --broadcast --verify\n```\n\n----------------------------------------\n\nTITLE: Sui Project Components Table\nDESCRIPTION: Markdown table listing key Sui project components and their descriptions, including tools for development, node operation, and network services.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/lists/binaries-file-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Description |\n| --- | --- |\n| `move-analyzer` | Language Server Protocol implementation. |\n| `sui` | Main Sui binary. |\n| `sui-bridge` | Sui native bridge. |\n| `sui-data-ingestion` | Capture Full node data for indexer to store in a database. |\n| `sui-faucet` | Local faucet to mint coins on local network. |\n| `sui-graphql-rpc` | GraphQL service for Sui RPC. |\n| `sui-node` | Run a local node. |\n| `sui-test-validator` | Run test validators on a local network for development. |\n| `sui-tool` | Provides utilities for Sui. |\n```\n\n----------------------------------------\n\nTITLE: Looping from 0 to Stop (Inclusive) in Move\nDESCRIPTION: Macro function that loops applying a given function to each number from 0 to stop (inclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do_eq<$R: drop>($stop: u64, $f: |u64| -> $R) {\n    std::macros::do_eq!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PCREntry Struct in Move\nDESCRIPTION: Defines a struct representing a PCR (Platform Configuration Register) entry with an index and value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/nitro_attestation.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct PCREntry has drop {\n    index: u8,\n    value: vector<u8>\n}\n```\n\n----------------------------------------\n\nTITLE: String Struct Definition\nDESCRIPTION: Defines the String struct that holds a sequence of UTF-8 encoded bytes\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/string.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct String has copy, drop, store {\n    bytes: vector<u8>\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Module Constants\nDESCRIPTION: Defines error constant for index out of bounds scenario\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nconst EINDEX_OUT_OF_BOUNDS: u64 = 131072;\n```\n\n----------------------------------------\n\nTITLE: Starting Sui Full Node in Detached Mode\nDESCRIPTION: Starts the Sui Full node in detached mode using Docker Compose. The `-d` flag ensures that the Full node runs in the background.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Retrieving tokenized asset value in Rust\nDESCRIPTION: The value function takes a tokenized asset as input and returns its associated balance value. This allows checking the quantity represented by a specific tokenized asset instance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\npublic fun value<T>(tokenized_asset: &TokenizedAsset<T>): u64 {}\n```\n\n----------------------------------------\n\nTITLE: Joining Sui Validator Set as Candidate\nDESCRIPTION: This command signs up an address as a validator candidate. It requires various metadata and initial configurations to be provided as arguments to the sui_system module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsui client call --package 0x3 --module sui_system --function request_add_validator_candidate --args 0x5 {protocol_pubkey_bytes} {network_pubkey_bytes} {worker_pubkey_bytes} {proof_of_possession} {name} {description} {image_url} {project_url} {net_address} {p2p_address} {primary_address} {worker_address} {gas_price} {commission_rate} --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Downloading Sui Node Binary from S3 using curl\nDESCRIPTION: Command to download the pre-built Sui Node binary for linux/amd64 from S3 using curl.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://releases.sui.io/$SUI_SHA/sui-node -o sui-node\n```\n\n----------------------------------------\n\nTITLE: Generating Diesel migration\nDESCRIPTION: This command uses the Diesel CLI to generate a new database migration with the specified name (`your_table_name`). This creates two SQL files (`up.sql` and `down.sql`) to define the changes to be applied and rolled back.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ndiesel migration generate your_table_name\n```\n\n----------------------------------------\n\nTITLE: Compiling Prettier Move Plugin (Bash)\nDESCRIPTION: This command compiles the Prettier Move plugin in the specified directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-analyzer/prettier-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Implementing Absolute Difference Macro in Move\nDESCRIPTION: A macro that calculates the absolute difference between two values of the same type, regardless of their order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun num_diff<$T>($x: $T, $y: $T): $T {\n    let x = $x;\n    let y = $y;\n    if (x > y) x - y\n    else y - x\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sui Test Validator with Indexer\nDESCRIPTION: This snippet demonstrates how to run the `sui-test-validator` with the indexer enabled. It requires setting up a Postgres database and ensures the database is running before executing the command. The `RUST_LOG` environment variable is set to disable consensus logging.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-test-validator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"RUST_LOG=\\\"consensus=off\\\" ./target/debug/sui-test-validator --with-indexer\"\n```\n\n----------------------------------------\n\nTITLE: DeepBook Order Options Constants\nDESCRIPTION: Constants defining the available options for orders in DeepBook, including NO_RESTRICTION, IMMEDIATE_OR_CANCEL, FILL_OR_KILL, and POST_ONLY.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\n/// No restriction on the order.  It will be filled as much as possible, and the rest will be queued in the book.\nconst NO_RESTRICTION: u8 = 0;\n/// Order must be filled immediately, or it will be canceled.\nconst IMMEDIATE_OR_CANCEL: u8 = 1;\n/// Order must be filled completely, or it will be canceled.\nconst FILL_OR_KILL: u8 = 2;\n/// Order must be queued in the book, or it will be canceled.\nconst POST_ONLY: u8 = 3;\n```\n\n----------------------------------------\n\nTITLE: Installing Sui Simulation Test Command\nDESCRIPTION: Shell command to install the simtest sub-command for Cargo, which enables running simulation tests in the Sui framework.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-simulator/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ ./scripts/simtest/install.sh\n```\n\n----------------------------------------\n\nTITLE: All Historical Volume Example Response\nDESCRIPTION: An example JSON response showing historical trading volumes for all available pools, with each value representing the total volume within the specified time range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"DEEP_SUI\": 22557460000000,\n\t\"WUSDT_USDC\": 10265000000,\n\t\"NS_USDC\": 4399650900000,\n\t\"NS_SUI\": 6975475200000,\n\t\"SUI_USDC\": 19430171000000000,\n\t\"WUSDC_USDC\": 23349574900000,\n\t\"DEEP_USDC\": 130000590000000\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sui Node Binary\nDESCRIPTION: Process for updating the Sui Node binary, including stopping the service, fetching the new binary, and restarting the service.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/systemd/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl stop sui-node\nwget https://releases.sui.io/${SUI_SHA}/sui-node\nchmod +x sui-node\nsudo mv sui-node /opt/sui/bin/\nsudo systemctl start sui-node\n```\n\n----------------------------------------\n\nTITLE: Setting Public Key Variables\nDESCRIPTION: Sets shell variables for storing public keys from different key schemes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nPKEY_1=<PUBLIC-KEY-ED25519>\n```\n\nLANGUAGE: sh\nCODE:\n```\nPKEY_2=<PUBLIC-KEY-SECP256K1>\n```\n\nLANGUAGE: sh\nCODE:\n```\nPKEY_3=<PUBLIC-KEY-SECP256R1>\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value Between Two u256 Integers in Move\nDESCRIPTION: Returns the smaller of two u256 values. This function uses the std::macros::num_min macro to determine which of the two provided values is smaller.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u256.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun min(x: u256, y: u256): u256 {\n    std::macros::num_min!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to build the dApp for production deployment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/frontend/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Copy Full Node YAML Template\nDESCRIPTION: This command copies the Sui Full Node YAML template file to a new file called 'fullnode.yaml'. This template serves as a configuration file necessary for setting up a Sui Full Node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/sui-full-node.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cp crates/sui-config/data/fullnode-template.yaml fullnode.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining ItemListed Event Struct\nDESCRIPTION: Event struct emitted when items are listed, enabling network-wide offer tracking.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic struct ItemListed<phantom T: key, store> has copy, drop {\n    kiosk: sui::object::ID,\n    id: sui::object::ID,\n    price: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interaction Function in Sui Smart Contract (Move)\nDESCRIPTION: This snippet shows the 'interact' function in a Sui smart contract that allows users to interact after passing a reCAPTCHA test. It checks for existing interaction history, verifies eligibility, and emits an interaction event.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/recaptcha.mdx#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun interact(registry: &mut Registry, clock: &Clock, ctx: &mut TxContext) {\n    // Implementation details not provided in the snippet\n}\n```\n\n----------------------------------------\n\nTITLE: Computing VRF Output and Proof\nDESCRIPTION: CLI command to compute VRF output and proof for a given input string using previously generated secret key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/ecvrf.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo run --bin ecvrf-cli prove --input 48656c6c6f2c20776f726c6421 --secret-key c0cbc5bf0b2f992fe14fee0327463c7b03d14cbbcb38ce2584d95ee0c112b40b\n```\n\n----------------------------------------\n\nTITLE: Running Fixed-Load Benchmark on Distributed Sui Validators\nDESCRIPTION: Command to run a benchmark with a committee of 10 validators under a constant load of 200 transactions per second for 3 minutes. Performance measurements are collected by scraping Prometheus metrics.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-aws-orchestrator/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-aws-orchestrator -- benchmark --committee 10 fixed-load --loads 200 --duration 180\n```\n\n----------------------------------------\n\nTITLE: Printing Validator Tool Help Information\nDESCRIPTION: Command to display help information for the Validator Tool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator --help\n```\n\n----------------------------------------\n\nTITLE: Defining TransferPolicyDestroyed Struct in Move\nDESCRIPTION: Defines the TransferPolicyDestroyed struct which is an event emitted when a publisher destroys a TransferPolicyCap. This struct allows for tracking supported policies after destruction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TransferPolicyDestroyed<T: phantom> has copy, drop\n```\n\n----------------------------------------\n\nTITLE: Generating Filtered Move Traces in Shell\nDESCRIPTION: Command to generate Move traces for specific tests in a package using the sui binary. This command filters tests based on a provided string and generates traces only for matching tests.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-analyzer/trace-debug/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsui move test FILTER_STRING --trace-execution\n```\n\n----------------------------------------\n\nTITLE: Getting Pool Token Amount from Exchange Rate in Move\nDESCRIPTION: Accessor function that returns the pool token amount from a PoolTokenExchangeRate struct. Used to get the token component of an exchange rate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_42\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pool_token_amount(exchange_rate: &PoolTokenExchangeRate): u64 {\n    exchange_rate.pool_token_amount\n}\n```\n\n----------------------------------------\n\nTITLE: Move IR Compiler Folder Structure\nDESCRIPTION: Maps the folder structure of the Move IR compiler project, showing the relationship between components including the main compiler crate, core backend logic, syntax handling, and supporting files.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-ir-compiler/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncompiler                        # Main compiler crate. This depends on stdlib.\n├── ir-to-bytecode              # Core backend compiler logic, independent of stdlib.\n│   ├── src\n│   │   ├── compiler.rs         # Main compiler logic - converts an AST generated by `syntax.rs` to a `CompiledModule` or `CompiledScript`.\n│   │   └── parser.rs           # Wrapper around Move IR syntax crate.\n│   └── syntax                  # Crate containing Move IR syntax.\n│       └── src\n│           ├── ast.rs          # Contains all the data structures used to build the AST representing the parsed Move IR input.\n│           ├── lexer.rs        # Lexer for the Move IR language.\n|           └── syntax.rs       # Parser for the Move IR language.\n└── src\n    ├── main.rs                 # Compiler driver - parses command line options and calls the parser, compiler, and bytecode verifier.\n    └── util.rs                 # Misc compiler utilities.\n```\n\n----------------------------------------\n\nTITLE: Invalid Constant Expressions in Move\nDESCRIPTION: Examples of invalid constant expressions that would cause compile-time errors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/constants.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nconst DIV_BY_ZERO: u64 = 1 / 0; // ERROR!\nconst SHIFT_BY_A_LOT: u64 = 1 << 100; // ERROR!\nconst NEGATIVE_U64: u64 = 0 - 1; // ERROR!\n```\n\n----------------------------------------\n\nTITLE: Installing cURL on Linux\nDESCRIPTION: Command to install cURL on Linux systems using apt-get. cURL is required for various installation and download tasks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo apt-get install curl\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshot Tests for Sui Framework\nDESCRIPTION: This command runs a script to update all snapshot tests for the Sui framework. It should be executed from the Sui root directory after making changes to the framework's Move code.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/update_all_snapshots.sh\n```\n\n----------------------------------------\n\nTITLE: Declaring Named Address in Move Module\nDESCRIPTION: Example of a Move module using a named address. This demonstrates how named addresses are used within Move code.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nmodule named_addr::a {\n    public fun x(): address { @named_addr }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Common Implicit Dependencies for Testing\nDESCRIPTION: Defines the base implicit dependencies used across all test cases. This establishes a standard dependency structure where i1 depends on i2, and i2 has no dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-package/tests/test_sources/implicits/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ni1:\n I2 = i2\n\ni2: no deps\n```\n\n----------------------------------------\n\nTITLE: Bullshark: Practical DAG BFT Protocol\nDESCRIPTION: First directed acyclic graph (DAG) based Byzantine Fault Tolerant protocol optimized for partial synchrony, offering low-latency fast-path and high efficiency with 125k transactions per second.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/research-papers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: research\nCODE:\n```\nBullshark: Simplified DAG-based consensus protocol with 2 seconds latency\n```\n\n----------------------------------------\n\nTITLE: U32 Integer Operations in Move\nDESCRIPTION: The 0x1::u32 module provides utility functions for working with u32 integers, including bitwise operations, math utilities, and conversion functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_50\n\nLANGUAGE: move\nCODE:\n```\n// U32 integer operations\n0x1::u32::bitwise_not       // public fun\n0x1::u32::max               // public fun\n0x1::u32::min               // public fun\n0x1::u32::diff              // public fun\n0x1::u32::divide_and_round_up // public fun\n0x1::u32::pow               // public fun\n0x1::u32::sqrt              // public fun\n0x1::u32::try_as_u8         // public fun\n0x1::u32::try_as_u16        // public fun\n0x1::u32::to_string         // public fun\n```\n\n----------------------------------------\n\nTITLE: Invalid Recursive Generic Function Calls in Move\nDESCRIPTION: Illustrates invalid recursive generic function calls in Move that could create infinitely many types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_16\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct A<T> {}\n\n    // Infinitely many types -- NOT allowed.\n    // error!\n    // foo<T> -> foo<A<T>> -> foo<A<A<T>>> -> ...\n    fun foo<T>() {\n        foo<Foo<T>>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorLeaveEvent Structure in Move\nDESCRIPTION: This struct describes the event emitted when a validator leaves the committee, detailing the epoch of leaving, the validator's address, the associated staking pool ID, and whether the exit was voluntary. It helps in tracking validator exits and maintaining committee integrity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\n<pre><code><b>public</b> <b>struct</b> <a href=\"../sui_system/validator_set.md#sui_system_validator_set_ValidatorLeaveEvent\">ValidatorLeaveEvent</a> <b>has</b> <b>copy</b>, drop\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for a Sui Package\nDESCRIPTION: Command to generate documentation using docgen with specific formatting options including template usage, section handling, and output directory configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/simple_build_with_docs/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocgen --template template.md --exclude-private-fun --no-collapsed-sections --output-directory doc --references-file template.md --section-level-start 3 --toc-depth 3\n```\n\n----------------------------------------\n\nTITLE: Creating ED25519 Address\nDESCRIPTION: Creates a new Sui address using the ED25519 key scheme.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsui client new-address ed25519\n```\n\n----------------------------------------\n\nTITLE: Publishing a Move Module in Sui Sandbox\nDESCRIPTION: Command to publish a Move module to the Sui Move sandbox environment. This makes the module available for execution in the sandbox.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/explain_stdlib_abort/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox publish\n```\n\n----------------------------------------\n\nTITLE: HAProxy Configuration for Rate Limiting\nDESCRIPTION: Example HAProxy configuration for implementing IP-based rate limiting to protect against DDoS attacks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfrontend http-in\n    bind *:80\n    # Define an ACL to count requests per IP and block if over limit\n    acl too_many_requests src_http_req_rate() gt 50\n    # Track the request rate per IP\n    stick-table type ip size 1m expire 1m store http_req_rate(1s)\n    # Check request rate and deny if the limit is exceeded\n    http-request track-sc0 src\n    http-request deny if too_many_requests\n\n    default_backend bridgevalidator\n\nbackend bridgevalidator\n    # Note the port needs to match the value in Bridge Node config, default is 9191\n    server bridgevalidator 0.0.0.0:9191\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Use Aliases with Method Calls in Move\nDESCRIPTION: This snippet shows how method aliases respect normal 'use' aliases in Move. It defines a Cup struct and demonstrates how method calls resolve when using aliases.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\nmodule a::cup {\n    public struct Cup<T>(T) has copy, drop, store;\n\n    public fun cup_borrow<T>(c: &Cup<T>): &T {\n        &c.0\n    }\n}\n\nmodule b::other {\n    use a::cup::{Cup, cup_borrow as borrow};\n\n    fun example(c: &Cup<u64>) {\n        c.borrow(); // resolves to a::cup::cup_borrow\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in Move\nDESCRIPTION: Defines the constant EInvalidVersion with a value of 0 to indicate invalid version errors in validator management. This constant is primarily used for assertions regarding version correctness.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_wrapper.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nconst EInvalidVersion: u64 = 0;\n```\n\n----------------------------------------\n\nTITLE: Implementing Escrow Dashboard with Locked Object Browsing\nDESCRIPTION: This component creates a dashboard for browsing locked objects available for escrow. It uses the LockedList component to display the objects and implements a tabbed interface for different views.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_35\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useState } from \"react\";\nimport { Tabs, Tooltip } from \"@radix-ui/themes\";\nimport { LockedList } from \"../components/locked/ApiLockedList\";\nimport { InfoCircledIcon } from \"@radix-ui/react-icons\";\n\nexport function EscrowDashboard() {\n  const tabs = [\n    {\n      name: \"Browse Locked Objects\",\n      component: () => (\n        <LockedList\n          params={{\n            deleted: \"false\",\n          }}\n          enableSearch\n        />\n      ),\n      tooltip: \"Browse locked objects you can trade for.\",\n    },\n  ];\n\n  const [tab, setTab] = useState(tabs[0].name);\n\n  return (\n    <Tabs.Root value={tab} onValueChange={setTab}>\n      <Tabs.List>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Trigger\n              key={index}\n              value={tab.name}\n              className=\"cursor-pointer\"\n            >\n              {tab.name}\n              <Tooltip content={tab.tooltip}>\n                <InfoCircledIcon className=\"ml-3\" />\n              </Tooltip>\n            </Tabs.Trigger>\n          );\n        })}\n      </Tabs.List>\n      {tabs.map((tab, index) => {\n        return (\n          <Tabs.Content key={index} value={tab.name}>\n            {tab.component()}\n          </Tabs.Content>\n        );\n      })}\n    </Tabs.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ParsedTokenTransferMessage Struct in Move\nDESCRIPTION: A struct that represents a parsed token transfer message containing version information, sequence number, source chain, payload, and the parsed payload.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct ParsedTokenTransferMessage has drop {\n    message_version: u8,\n    seq_num: u64,\n    source_chain: u8,\n    payload: vector<u8>,\n    parsed_payload: bridge::message::TokenTransferPayload\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EValidatorMetadataExceedingLengthLimit Error Constant in Move\nDESCRIPTION: Error constant (9) used when the validator metadata is too long and exceeds the allowed length limit.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_16\n\nLANGUAGE: move\nCODE:\n```\nconst EValidatorMetadataExceedingLengthLimit: u64 = 9;\n```\n\n----------------------------------------\n\nTITLE: Creating a New BCS Wrapper Instance in Move\nDESCRIPTION: Creates a new instance of the BCS wrapper struct by taking a byte vector and reversing it for better performance in subsequent operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun new(mut bytes: vector<u8>): BCS {\n    bytes.reverse();\n    BCS { bytes }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Route Limit Function\nDESCRIPTION: Function to retrieve the transfer limit for a specific bridge route.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/limiter.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_route_limit(self: &TransferLimiter, route: &BridgeRoute): u64 {\n    self.transfer_limits[route]\n}\n```\n\n----------------------------------------\n\nTITLE: Root Override with Direct Dependency Test\nDESCRIPTION: Tests how overriding an implicit dependency in the root package affects the dependencies of other packages. The root package's explicit dependencies disable implicits, but dependent packages still get implicits with the override applied.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-package/tests/test_sources/implicits/README.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\na:\n  B: b\n  I1: i1a\n\nb: no deps\ni1a: no deps\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Structure in Move\nDESCRIPTION: A struct representing a complete validator configuration, including metadata, voting power, staking pool, and commission rates\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Validator has store {\n    metadata: ValidatorMetadata,\n    voting_power: u64,\n    operation_cap_id: sui::object::ID,\n    gas_price: u64,\n    staking_pool: StakingPool,\n    commission_rate: u64,\n    // Fields for next epoch configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Sui Devnet Environment\nDESCRIPTION: Switch the sui client to use the Devnet network for deployment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client switch --env devnet\n```\n\n----------------------------------------\n\nTITLE: Building Sui with Tokio-console Support - Rust\nDESCRIPTION: This snippet provides the commands and configurations needed to build the Sui application with Tokio-console support, enabling real-time inspection of the application while it runs. It is essential to build with the special RUSTFLAGS for compatibility.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/observability.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nRUSTFLAGS=\"--cfg tokio_unstable\" cargo build\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Database\nDESCRIPTION: This snippet creates a database named 'sui_indexer_v2' and increases the maximum number of connections allowed to 500. This is necessary because many tests might run in parallel.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-e2e-tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ psql \"postgres://postgres:postgrespw@localhost:5432/postgres\" \\\n    -c \"CREATE DATABASE sui_indexer_v2;\" -c \"ALTER SYSTEM SET max_connections = 500;\"\n```\n\n----------------------------------------\n\nTITLE: Struct Definition: VotingPowerInfoV2\nDESCRIPTION: Defines a struct `VotingPowerInfoV2` to store validator index, voting power, and stake. This struct serves as an improved version of `VotingPowerInfo`. It has a `drop` ability, meaning it can be implicitly discarded.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>struct</b> <a href=\"../sui_system/voting_power.md#sui_system_voting_power_VotingPowerInfoV2\">VotingPowerInfoV2</a> <b>has</b> drop\n```\n\n----------------------------------------\n\nTITLE: Accessing and Testing the Rosetta Service\nDESCRIPTION: Commands for accessing the Rosetta service shell and using the rosetta-cli to test the data and construction APIs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rosetta/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose exec rosetta-online bash\n```\n\nLANGUAGE: shell\nCODE:\n```\nrosetta-cli --configuration-file rosetta-cli.json check:data\nrosetta-cli --configuration-file rosetta-cli.json check:construction\n```\n\n----------------------------------------\n\nTITLE: Accessing URL String\nDESCRIPTION: Returns the inner ASCII string of a Url instance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/url.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun inner_url(self: &Url): String {\n    self.url\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Sui Package Address\nDESCRIPTION: This command is used to update the Move.lock file with package address information. It takes the environment, network ID, original address, latest address, and version number as parameters to correctly track the package's deployment history.  Ensure that you replace the placeholder values with the correct information for your package.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/automated-address-management.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"sui move manage-package --environment \\\"$(sui client active-env)\\\" \\\n                        --network-id \\\"$(sui client chain-identifier)\\\" \\\n                        --original-id 'ORIGINAL-ADDRESS' \\\n                        --latest-id 'LATEST-ADDRESS' \\\n                        --version-number 'VERSION-NUMBER'\"\n```\n\n----------------------------------------\n\nTITLE: Implementing min function for u8 values\nDESCRIPTION: Returns the smaller of two u8 values using the std::macros::num_min macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun min(x: u8, y: u8): u8 {\n    std::macros::num_min!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Taking and Returning Immutable Objects\nDESCRIPTION: This code demonstrates taking an immutable 'ColorObject' using any sender and checking its invariance through 'test_scenario'. The 'return_immutable' method concludes the test by returning the immutable object to storage.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-ownership/immutable.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\n// Any sender can work.\nlet sender2 = @0x2;\nscenario.next_tx(sender2);\n{\n    let object = test_scenario::take_immutable<ColorObject>(scenario);\n    let (red, green, blue) = color_object::get_color(object);\n    assert!(red == 255 && green == 0 && blue == 255)\n    test_scenario::return_immutable(object);\n};\n```\n\n----------------------------------------\n\nTITLE: System State Inner State Management\nDESCRIPTION: Functions for creating, updating, and managing the inner state of the Sui blockchain system, including validator operations, stake management, and epoch transitions\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun create_system_parameters\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun request_add_validator_candidate\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum U64 Value in Move\nDESCRIPTION: Macro function that returns the maximum value for a u64 integer (0xFFFF_FFFF_FFFF_FFFF).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun max_value(): u64 {\n    0xFFFF_FFFF_FFFF_FFFF\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving FromCoin Action Name in Move\nDESCRIPTION: This function returns the name of the FromCoin action as a String. It doesn't take any parameters and returns a predefined string constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_44\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_coin_action(): String {\n    let from_coin_str = FROM_COIN;\n    from_coin_str.to_string()\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Groth16 Proof Verification Native Function\nDESCRIPTION: Native implementation for verifying Groth16 proofs that handles input flattening and may abort with EInvalidCurve or ETooManyPublicInputs errors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/groth16.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nnative fun verify_groth16_proof_internal(\n    curve: u8,\n    vk_gamma_abc_g1_bytes: &vector<u8>,\n    alpha_g1_beta_g2_bytes: &vector<u8>,\n    gamma_g2_neg_pc_bytes: &vector<u8>,\n    delta_g2_neg_pc_bytes: &vector<u8>,\n    public_proof_inputs: &vector<u8>,\n    proof_points: &vector<u8>,\n): bool;\n```\n\n----------------------------------------\n\nTITLE: Checking Left Child in Move Critbit Tree\nDESCRIPTION: The 'is_left_child' function determines if a node in a critbit tree is a left child of a specified parent. It requires the parent node index and the node index in question, returning a boolean indicating the left child status. This assumes the node exists in an internal structure that defines parent-child left relationships.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../deepbook/critbit.md#deepbook_critbit_is_left_child\">is_left_child</a>&lt;V: store&gt;(tree: &<a href=\"../deepbook/critbit.md#deepbook_critbit_CritbitTree\">CritbitTree</a>&lt;V&gt;, parent_index: u64, index: u64): bool {\n    table::borrow(&tree.internal_nodes, parent_index).left_child == index\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Local Network with Forge Script\nDESCRIPTION: Command to deploy smart contracts to a local Anvil blockchain instance using Forge Script with broadcasting.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/bridge/evm/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nforge script script/deploy_bridge.s.sol --fork-url anvil --broadcast\n```\n\n----------------------------------------\n\nTITLE: Upgrading Helm Chart\nDESCRIPTION: This command upgrades an existing Helm chart deployment after making changes to the values or templates.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/helm/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <name> <chart-name>\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project with Verbose Output\nDESCRIPTION: This command builds the Sui blockchain project with verbose output enabled. It uses the 'build' command with the '-v' flag for detailed logging.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/dependency_chain/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nbuild -v\n```\n\n----------------------------------------\n\nTITLE: Leaving Sui Validator Set\nDESCRIPTION: This command removes a validator from the active set starting from the next epoch. It can only be called by an active validator in the current epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsui client call --package 0x3 --module sui_system --function request_remove_validator --args 0x5 --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Building compatible Sui Binary for Genesis Creation\nDESCRIPTION: This snippet explains how to checkout and build a specific release of the Sui binary using Cargo to ensure compatibility with the network's protocol version. Outputs a sui binary compatible with mainnet release v1.19.1.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/sui-antithesis/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout releases/sui-v1.19.0-release\\ncargo build --bin sui\n```\n\n----------------------------------------\n\nTITLE: Function Name Examples\nDESCRIPTION: Shows valid naming conventions for functions in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nfun fOO() {}\nfun bar_42() {}\nfun bAZ_19() {}\n```\n\n----------------------------------------\n\nTITLE: Transfer Object with PTB using Sui Client\nDESCRIPTION: This command transfers an object to a specified address using a Programmable Transaction Block (PTB). It's possible to pass multiple objects in the array.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client ptb --transfer-objects \\\"[object_id]\\\" ADDRESS\"\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal Encoding and Decoding in Sui\nDESCRIPTION: Functions for encoding and decoding hexadecimal strings in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun encode(0x2::hex)\npublic fun decode(0x2::hex)\nfun decode_byte(0x2::hex)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Helm-Provisioned Resources\nDESCRIPTION: This command removes all resources provisioned by a specific Helm release.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/helm/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall <name>\n```\n\n----------------------------------------\n\nTITLE: Automatic Borrowing with Equality Operations in Move\nDESCRIPTION: Demonstrates the automatic borrowing feature in Move 2024 edition, where values are automatically borrowed when compared with references. This simplifies code by reducing explicit borrowing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/equality.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nlet r = &0;\n\n// In all cases, `0` is automatically borrowed as `&0`\nr == 0; // `true`\n0 == r; // `true`\nr != 0; // `false`\n0 != r; // `false`\n```\n\n----------------------------------------\n\nTITLE: Building with Warnings Treated as Errors\nDESCRIPTION: Command to build a Sui package with JSON error format where any warnings are elevated to be treated as errors, causing the build to fail if warnings are present.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/json_errors/args.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbuild --json-errors --warnings-are-errors\n```\n\n----------------------------------------\n\nTITLE: Running sui with Additional Features\nDESCRIPTION: Command to run the sui binary with options to include faucet, regenesis, indexer, PostgreSQL configurations, and GraphQL support. Intended for testing or development purposes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-rpc/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin sui -- start --with-faucet --force-regenesis --with-indexer --pg-port 5432 --pg-db-name sui_indexer_v2 --with-graphql\n```\n\n----------------------------------------\n\nTITLE: Building Sui Package with Silenced Warnings\nDESCRIPTION: Command to build a Sui package with JSON error format while silencing any warnings that might be generated during the build process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/json_errors/args.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbuild --json-errors --silence-warnings\n```\n\n----------------------------------------\n\nTITLE: Leaving the Validator Committee\nDESCRIPTION: Command for a validator to leave the committee.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator leave-committee\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Pause in Sui Deny List\nDESCRIPTION: Disables the global pause setting for a specific deny list configuration. It removes the global pause setting for the next epoch using the provided per-type index and key.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun v2_disable_global_pause(\n    deny_list: &mut DenyList,\n    per_type_index: u64,\n    per_type_key: vector<u8>,\n    ctx: &mut TxContext,\n) {\n    let per_type_config = deny_list.per_type_config_entry!(per_type_index, per_type_key, ctx);\n    let setting_name = GlobalPauseKey();\n    per_type_config.remove_for_next_epoch<_, GlobalPauseKey, bool>(\n        &mut ConfigWriteCap(),\n        setting_name,\n        ctx,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Sui Database Volume with Docker\nDESCRIPTION: This shell command inspects the Docker volume used for the Sui database.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/docker/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker volume inspect docker_suidb\n```\n\n----------------------------------------\n\nTITLE: Implementing Worker Trait for Custom Indexer in Rust\nDESCRIPTION: Defines the basic interface for implementing a custom indexer worker in Rust. The Worker trait requires implementing the process_checkpoint method to handle incoming checkpoint data.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/custom-indexer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[async_trait]\ntrait Worker: Send + Sync {\n    async fn process_checkpoint(&self, checkpoint: &CheckpointData) -> Result<()>;\n}\n```\n\n----------------------------------------\n\nTITLE: Count Validator Duplicates in Vector\nDESCRIPTION: Counts how many validators in a vector are duplicates of a given validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_28\n\nLANGUAGE: Move\nCODE:\n```\nfun count_duplicates_vec(validators: &vector<Validator>, validator: &Validator): u64 {\n    validators.count!(|v| v.is_duplicate(validator))\n}\n```\n\n----------------------------------------\n\nTITLE: Building Package B and Moving Source Files\nDESCRIPTION: Command to build package B with verbose output, followed by commands to move a Move source file from package B to package C with a backup name and remove build artifacts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/build_with_bytecode/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbuild -v -p ./B\n> mv ./B/sources/Bar.move ./C/sources/Bar.move_old\n> rm -rf ./B/build/Bar/sources\n```\n\n----------------------------------------\n\nTITLE: Structuring JoinPromise Object in Rust\nDESCRIPTION: Defines a `JoinPromise` struct to handle joining operations, ensuring the secure locking of tokenized assets until the merging is complete. Fields include item ID, the burned asset ID, and expected balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\nstruct JoinPromise {\n    /// the item where the balance of the burnt tokenized asset will be added.\n    item: ID,\n    /// burned is the id of the tokenized asset that will be burned\n    burned: ID,\n    /// the expected final balance of the item after merging\n    expected_balance: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Ed25519 Signature Generation and Verification\nDESCRIPTION: Generate and verify Ed25519 signatures using CLI and Move contract\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/signing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ntarget/debug/sigs-cli keygen --scheme ed25519 --seed 0000000000000000000000000000000000000000000000000000000000000000\ntarget/debug/sigs-cli sign --scheme ed25519 --msg $MSG --secret-key  $SK\n```\n\nLANGUAGE: move\nCODE:\n```\n    use sui::ed25519;\n\n    let msg = x\"$MSG\";\n    let pk = x\"$PK\";\n    let sig = x\"$SIG\";\n    let verify = ed25519::ed25519_verify(&sig, &pk, &msg);\n    assert!(verify == true, 0);\n```\n\n----------------------------------------\n\nTITLE: Token Address Mapping Table in Markdown\nDESCRIPTION: A markdown table listing cryptocurrency tokens and their corresponding addresses for verification purposes in the Sui ecosystem. Used to confirm token legitimacy during bridge operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics/sui-bridging.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Token   | Address                                                            |\n| ------- | ------------------------------------------------------------------ |\n| CELO    | 0xa198f3be41cda8c07b3bf3fee02263526e535d682499806979a111e88a5a8d0f |\n| WMATIC  | 0xdbe380b13a6d0f5cdedd58de8f04625263f113b3f9db32b3e1983f49e2841676 |\n| WBNB    | 0xb848cce11ef3a8f62eccea6eb5b35a12c4c2b1ee1af7755d02d7bd6218e8226f |\n| WETH    | 0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5 |\n| USDC    | 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf |\n| USDT    | 0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c |\n| WBTC    | 0x027792d9fed7f9844eb4839566001bb6f6cb4804f66aa2da6fe1ee242d896881 |\n| WAVAX   | 0x1e8b532cca6569cab9f9b9ebc73f8c13885012ade714729aa3b450e0339ac766 |\n| WFTM    | 0x6081300950a4f1e2081580e919c210436a1bed49080502834950d31ee55a2396 |\n| WGLMR   | 0x66f87084e49c38f76502d17f87d17f943f183bb94117561eb573e075fdc5ff75 |\n| WSOL    | 0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8 |\n| USDCsol | 0xb231fcda8bbddb31f2ef02e6161444aec64a514e2c89279584ac9806ce9cf037 |\n```\n\n----------------------------------------\n\nTITLE: Configuring Peering for State Sync Fullnode and Validator in Sui Network\nDESCRIPTION: This snippet demonstrates how to set up peering between a state sync fullnode and a validator in the Sui network. It includes generating a network key, configuring the fullnode to use the key, and setting up the validator to accept connections from the fullnode.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/ssfn_guide.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# create a network key for your ssfn\n$ sui keytool generate ed25519\n# record the peerId of the key\n# modify the ssfn's config to use the newly created key as a network key, eg:\n# ---\n# network-key-pair:\n#   path: /opt/sui/key-pairs/network.key\n# p2p-config:\n#   seed-peers:\n#     - address: /dns/myssfn1/udp/8084\n#       peer-id: abcdefg1 # you can grab this value via `sui keytool show [path_to_validator_keys]/network.key`\n# ...\n\n# allow your ssfn to talk to your validator by setting validator config's seed peers to point at your ssfns\n$ vim /opt/sui/config/sui-node.yaml #on validator host\n\n# p2p-config:\n#   seed-peers:\n#     - address: /dns/myssfn1/udp/8084\n#       peer-id: abcdefg1\n#     - address: /dns/myssfn2/udp/8084\n#       peer-id: abcdefg2\n```\n\n----------------------------------------\n\nTITLE: Publishing a Package in Sui Sandbox Environment\nDESCRIPTION: Command used to publish a Sui package in a sandbox development environment. This allows developers to deploy their Move modules for testing without affecting the main network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/verify_native_functions_in_publish/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsandbox publish\n```\n\n----------------------------------------\n\nTITLE: Configuring Sui Node Key Pairs\nDESCRIPTION: Example configuration for specifying the paths to the private keys in the validator.yaml file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/systemd/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprotocol-key-pair: \n  path: /opt/sui/key-pairs/protocol.key\nworker-key-pair: \n  path: /opt/sui/key-pairs/worker.key\nnetwork-key-pair: \n  path: /opt/sui/key-pairs/network.key\n```\n\n----------------------------------------\n\nTITLE: Running sui-graphql-rpc with Cargo\nDESCRIPTION: Command to start the sui-graphql-rpc server with Cargo, specifying the PostgreSQL backend feature and providing necessary binary and database arguments. It specifies the order and purpose of each argument used in the command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-rpc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --features \"pg_backend\" --bin sui-graphql-rpc start-server --db-url <DB_URL>\n```\n\n----------------------------------------\n\nTITLE: Derive Reference Gas Price in Move\nDESCRIPTION: Function to calculate reference gas price based on validator-submitted gas prices weighted by stake. Returns a gas price that satisfies 2/3 validator stake weighted consensus.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\npublic fun derive_reference_gas_price(self: &ValidatorSet): u64 {\n    let entries = self\n        .active_validators\n        .map_ref!(|v| pq::new_entry(v.gas_price(), v.voting_power()));\n    let mut pq = pq::new(entries);\n    let mut sum = 0;\n    let threshold = voting_power::total_voting_power() - voting_power::quorum_threshold();\n    let mut result = 0;\n    while (sum < threshold) {\n        let (gas_price, voting_power) = pq.pop_max();\n        result = gas_price;\n        sum = sum + voting_power;\n    };\n    result\n}\n```\n\n----------------------------------------\n\nTITLE: Order Cloning Utility\nDESCRIPTION: A package-scoped function that creates a deep copy of an Order struct with all its properties.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_47\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun clone_order(order: &Order): Order {\n    Order {\n        order_id: order.order_id,\n        client_order_id: order.client_order_id,\n        price: order.price,\n        original_quantity: order.original_quantity,\n        quantity: order.quantity,\n        is_bid: order.is_bid,\n        owner: order.owner,\n        expire_timestamp: order.expire_timestamp,\n        self_matching_prevention: order.self_matching_prevention\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Pre-built Bridge Node Binary\nDESCRIPTION: Command to download a pre-built Bridge Node binary for Linux/AMD64 using curl.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ curl https://sui-releases.s3.us-east-1.amazonaws.com/{SHA}/sui-bridge -o sui-bridge\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upgrade Ticket Policy in Move\nDESCRIPTION: Gets the kind of upgrade that the UpgradeTicket authorizes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun ticket_policy(ticket: &UpgradeTicket): u8 {\n    ticket.policy\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Char to Uppercase in Move\nDESCRIPTION: This function converts a given ASCII character (represented as a byte) to its uppercase equivalent. If the character is already in uppercase or is not a lowercase letter, it returns the original character. The function uses ASCII values to determine if a conversion is needed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../std/ascii.md#std_ascii_char_to_uppercase\">char_to_uppercase</a>(<a href=\"../std/ascii.md#std_ascii_byte\">byte</a>: <a href=\"../std/u8.md#std_u8\">u8</a>): <a href=\"../std/u8.md#std_u8\">u8</a> {\n    <b>if</b> (<a href=\"../std/ascii.md#std_ascii_byte\">byte</a> &gt;= 0x61 && <a href=\"../std/ascii.md#std_ascii_byte\">byte</a> &lt;= 0x7A) <a href=\"../std/ascii.md#std_ascii_byte\">byte</a> - 0x20 <b>else</b> <a href=\"../std/ascii.md#std_ascii_byte\">byte</a>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticatorState Struct in Move\nDESCRIPTION: Defines a singleton shared object to store the global authenticator state. The actual state is stored in a dynamic field to support future versions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct AuthenticatorState has key {\n    id: sui::object::UID,\n    version: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Coins Using Sui CLI\nDESCRIPTION: This shell command shows how to use the Sui CLI to mint coins and transfer them to a specific address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/coin.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsui client call --function mint --module mycoin --package <PACKAGE-ID> --args <TREASURY-CAP-ID> <COIN-AMOUNT> <RECIPIENT-ADDRESS> --gas-budget <GAS-AMOUNT>\n```\n\n----------------------------------------\n\nTITLE: Type Annotations for Local Variables in Move\nDESCRIPTION: This snippet shows how to use explicit type annotations for local variables in Move, which can be useful for readability and clarity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::example {\n\n    public struct S { f: u64, g: u64 }\n\n    fun annotated() {\n        let u: u8 = 0;\n        let b: vector<u8> = b\"hello\";\n        let a: address = @0x0;\n        let (x, y): (&u64, &mut u64) = (&0, &mut 1);\n        let S { f, g: f2 }: S = S { f: 0, g: 1 };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Limit Order in Move\nDESCRIPTION: Places a limit order on the CLOB and returns fill information. This function is not fully implemented and will abort.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_27\n\nLANGUAGE: Move\nCODE:\n```\npublic fun place_limit_order<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _client_order_id: u64,\n    _price: u64,\n    _quantity: u64,\n    _self_matching_prevention: u8,\n    _is_bid: bool,\n    _expire_timestamp: u64,\n    _restriction: u8,\n    _clock: &Clock,\n    _account_cap: &AccountCap,\n    _ctx: &mut TxContext\n): (u64, u64, bool, u64) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Package Manifest Example in Move.toml\nDESCRIPTION: A minimal example of a Move.toml package manifest file with only the required name field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"AName\"\n```\n\n----------------------------------------\n\nTITLE: Defining ERuleAlreadySet Constant in Move\nDESCRIPTION: Defines a constant ERuleAlreadySet, which indicates an attempt to create a rule that is already established. This constant aids in error management when policies are incorrectly modified.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\nconst ERuleAlreadySet: u64 = 3;\n```\n\n----------------------------------------\n\nTITLE: Struct Visibility and Access in Move\nDESCRIPTION: Illustrates the visibility rules for structs in Move, showing that struct types are public but field access and creation are restricted to the defining module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/structs.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct Foo has drop { x: u64 }\n\n    public fun new_foo(): Foo {\n        Foo { x: 42 }\n    }\n}\n\nmodule a::n {\n    use a::m::Foo;\n\n    public struct Wrapper has drop {\n        foo: Foo\n        //   ^ valid the type is public\n\n    }\n\n    fun f1(foo: Foo) {\n        let x = foo.x;\n        //      ^ ERROR! cannot access fields of `Foo` outside of `a::m`\n    }\n\n    fun f2() {\n        let foo_wrapper = Wrapper { foo: m::new_foo() };\n        //                               ^ valid the function is public\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Definition: MAX_VOTING_POWER\nDESCRIPTION: Defines a constant `MAX_VOTING_POWER` set to 1000.  This constant represents the maximum voting power any single validator can have, capping their influence.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\n<b>const</b> <a href=\"../sui_system/voting_power.md#sui_system_voting_power_MAX_VOTING_POWER\">MAX_VOTING_POWER</a>: u64 = 1000;\n```\n\n----------------------------------------\n\nTITLE: Running the Remote Reader Example\nDESCRIPTION: Command to execute the remote reader implementation of the custom indexer, which connects to a remote Sui node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/custom-indexer/rust/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin remote_reader\n```\n\n----------------------------------------\n\nTITLE: Defining Table Kinds in Move Binary Format\nDESCRIPTION: This snippet enumerates the different table kinds used in the Move binary format, assigning a unique byte value to each kind. It covers tables for both Modules and Scripts, as well as Module-specific tables.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/spec/vm.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\n0x1: MODULE_HANDLES - for both Modules and Scripts\n0x2: STRUCT_HANDLES - for both Modules and Scripts\n0x3: FUNCTION_HANDLES - for both Modules and Scripts\n0x4: FUNCTION_INSTANTIATIONS - for both Modules and Scripts\n0x5: SIGNATURES - for both Modules and Scripts\n0x6: CONSTANT_POOL - for both Modules and Scripts\n0x7: IDENTIFIERS - for both Modules and Scripts\n0x8: ADDRESS_IDENTIFIERS - for both Modules and Scripts\n0xA: STRUCT_DEFINITIONS - only for Modules\n0xB: STRUCT_DEF_INSTANTIATIONS - only for Modules\n0xC: FUNCTION_DEFINITIONS - only for Modules\n0xD: FIELD_HANDLES - only for Modules\n0xE: FIELD_INSTANTIATIONS - only for Modules\n0xF: FRIEND_DECLS - only for Modules, version 2 and later\n```\n\n----------------------------------------\n\nTITLE: Checking Active Sui CLI Environment\nDESCRIPTION: Command to display the current active environment for Sui CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/local-network.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client active-env\n```\n\n----------------------------------------\n\nTITLE: Transaction Digest and Status Information\nDESCRIPTION: Unique transaction digest identifying the specific blockchain transaction, showing successful execution in epoch 600\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Digest\": \"7mBWUxT6HUVDa8bii3PZJc7nhWqefTLNTsGbHYnx7ZA4\",\n  \"Status\": \"Success\",\n  \"Executed Epoch\": 600\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing range_do_eq Macro in Move\nDESCRIPTION: A macro function that iterates from a start value (inclusive) to a stop value (inclusive) and applies a function to each value in the range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do_eq<$T, $R: drop>($start: $T, $stop: $T, $f: |$T| -> $R) {\n    let mut i = $start;\n    let stop = $stop;\n    // we check `i >= stop` inside the loop instead of `i <= stop` as `while` condition to avoid\n    // incrementing `i` past the MAX integer value.\n    // Because of this, we need to check if `i > stop` and return early--instead of letting the\n    // loop bound handle it, like in the `range_do` macro.\n    if (i > stop) return;\n    loop {\n        $f(i);\n        if (i >= stop) break;\n        i = i + 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Bytecode Meter\nDESCRIPTION: Check if the module passes the bytecode meter requirements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client verify-bytecode-meter\n```\n\n----------------------------------------\n\nTITLE: PerTypeList Structure in Move\nDESCRIPTION: Defines the structure that tracks denied addresses for a specific core type, including counters and address sets.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct PerTypeList has key, store {\n    id: sui::object::UID,\n    denied_count: sui::table::Table<address, u64>,\n    denied_addresses: sui::table::Table<vector<u8>, sui::vec_set::VecSet<address>>\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Byte Vector to BLS12381 Scalar\nDESCRIPTION: This function converts a byte vector into a BLS12381 scalar element. It interfaces with a group operation to translate the bytes into the scalar space.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_from_bytes\">scalar_from_bytes</a>(bytes: &vector&lt;u8&gt;): <a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_from_bytes\">scalar_from_bytes</a>(bytes: &vector&lt;u8&gt;): Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt; {\n    <a href=\"../sui/group_ops.md#sui_group_ops_from_bytes\">group_ops::from_bytes</a>(<a href=\"../sui/bls12381.md#sui_bls12381_SCALAR_TYPE\">SCALAR_TYPE</a>, bytes, <b>false</b>)\n}\n```\n\n----------------------------------------\n\nTITLE: Token Balance Flow Diagram - Right to Left\nDESCRIPTION: Mermaid flowchart showing the relationship between Balance, Coin, and Token types with their respective abilities and conversion flows from right to left.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart RL\n    subgraph \"&nbsp;&nbsp;Balance has store { u64 }&nbsp;&nbsp;\"\n        A[\"Balance<T>\n        Supply<T>\"];\n    end\n    subgraph \"&nbsp;&nbsp;Coin has key, store { Balance }&nbsp;&nbsp;\"\n        B[\"Coin<T>\n        TreasuryCap<T>\"];\n    end\n        subgraph \"&nbsp;&nbsp;Token has key { Balance }&nbsp;&nbsp;\"\n        C[\"Token<T>\n        TreasuryCap<T>\"];\n    end\n    B-- to_balance -->A;\n    C-- to_coin -->B;\n```\n\n----------------------------------------\n\nTITLE: Defining VotingPowerAdmissionStartEpochKey Structure in Move\nDESCRIPTION: This struct serves as a key for storing the start epoch of the admission process for new validators, based on minimum voting power requirements. It facilitates the governance mechanism around validator admission in the context of voting power thresholds.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\n<pre><code><b>public</b> <b>struct</b> <a href=\"../sui_system/validator_set.md#sui_system_validator_set_VotingPowerAdmissionStartEpochKey\">VotingPowerAdmissionStartEpochKey</a> <b>has</b> <b>copy</b>, drop, store\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Borrowing Mutable Leaf by Index in Critbit Tree\nDESCRIPTION: Provides mutable access to a leaf value in the critbit tree by its index. This function returns a mutable reference to the value stored in the leaf node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_15\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun borrow_mut_leaf_by_index<V: store>(tree: &mut CritbitTree<V>, index: u64): &mut V {\n    let entry = table::borrow_mut(&mut tree.leaves, index);\n    &mut entry.value\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Path Mappings for Sui Project\nDESCRIPTION: Defines path mappings for project dependencies, enabling shorthand references to external libraries. These mappings connect library references to their physical locations in the dependencies directory, including Forge Standard Library and OpenZeppelin contracts with specific version numbers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/bridge/evm/remappings.txt#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n@forge-std=dependencies/forge-std-1.9.2/src\n@openzeppelin/foundry-upgrades=dependencies/openzeppelin-foundry-upgrades-0.3.1/src\n@openzeppelin/contracts=dependencies/@openzeppelin-contracts-5.0.1\n@openzeppelin/contracts-upgradeable=dependencies/@openzeppelin-contracts-upgradeable-5.0.1\n@forge-std-1.9.2=dependencies/forge-std-1.9.2\n@openzeppelin-foundry-upgrades-0.3.1=dependencies/openzeppelin-foundry-upgrades-0.3.1\n@openzeppelin-contracts-upgradeable-5.0.1=dependencies/@openzeppelin-contracts-upgradeable-5.0.1\n@openzeppelin-contracts-5.0.1=dependencies/@openzeppelin-contracts-5.0.1\n```\n\n----------------------------------------\n\nTITLE: Borrowing Value from Option in Move\nDESCRIPTION: Function to borrow an immutable reference to the value inside an Option, aborting if the Option is None.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow<Element>(t: &Option<Element>): &Element {\n    assert!(t.is_some(), EOPTION_NOT_SET);\n    &t.vec[0]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Sui Events for Address Using Bash and cURL\nDESCRIPTION: This bash script demonstrates how to use the sui_getEvents RPC method to filter events for a specific Sui address. It focuses on events related to SUI coins, such as coin acquisitions and gas fee payments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/exchange-integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nrpc=\"https://fullnode.devnet.sui.io:443\"\naddress=\"0x849d63687330447431a2e76fecca4f3c10f6884ebaa9909674123c6c662612a3\"\ndata=\"{\\\"jsonrpc\\\": \\\"2.0\\\", \\\"id\\\":1, \\\"method\\\": \\\"sui_getEvents\\\", \\\"params\\\": [{\\\"Recipient\\\": {\\\"AddressOwner\\\": \\\"0x849d63687330447431a2e76fecca4f3c10f6884ebaa9909674123c6c662612a3\\\"}}, null, null, true ]}\"\ncurl -X POST -H 'Content-type: application/json' --data-raw \"$data\" $rpc\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Blocks\nDESCRIPTION: Command to query transaction blocks using 4 threads against two RPC server instances, filtering by address type 'from'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rpc-loadgen/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-rpc-loadgen -- --urls \"http://127.0.0.1:9000\" \"http://127.0.0.1:9000\" --num-threads 4 query-transaction-blocks --address-type from\n```\n\n----------------------------------------\n\nTITLE: Creating and Referencing the sui_indexer_v2 Database\nDESCRIPTION: Instructions for creating a PostgreSQL database named sui_indexer_v2 and how to connect to it using a connection string. Assumes PostgreSQL is installed and user has access.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-rpc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npsql -U postgres\nCREATE DATABASE sui_indexer_v2;\n```\n\nLANGUAGE: shell\nCODE:\n```\npsql postgres://postgres:postgrespw@localhost:5432/sui_indexer_v2\n```\n\n----------------------------------------\n\nTITLE: Creating Sysctl Configuration for Network Buffer\nDESCRIPTION: This snippet shows how to create a sysctl configuration file to adjust network buffer sizes for the Sui node, ensuring persistence across reboots.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo nano /etc/sysctl.d/100-sui-node.conf\n```\n\n----------------------------------------\n\nTITLE: Implementing Asset Retrieval and Usage in Rust\nDESCRIPTION: This snippet shows a Move function that retrieves an asset by reference and passes it to the use_asset function, which is not valid within a PTB.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/simulating-refs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfun do_something(manager: &AssetManager) {\n    let asset = another_module::get_asset(manager);\n    a_module::use_asset(asset);\n}\n```\n\n----------------------------------------\n\nTITLE: Dividing Integer by UQ32_32 in Move\nDESCRIPTION: Divides a u64 integer by a UQ32_32 fixed-point number, truncating any fractional part of the quotient. Aborts if the divisor is zero or if the quotient overflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun int_div(val: u64, divisor: UQ32_32): u64 {\n    std::macros::uq_int_div!<u64, u128>(\n        val,\n        divisor.0,\n        std::u64::max_value!(),\n        FRACTIONAL_BITS,\n        abort EDivisionByZero,\n        abort EOverflow,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BlocklistValidatorEvent Structure in Move\nDESCRIPTION: Defines an event structure that represents when a validator is blocklisted or unblocklisted from the bridge committee, containing a boolean status and the public keys of the validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct BlocklistValidatorEvent has copy, drop {\n    blocklisted: bool,\n    public_keys: vector<vector<u8>>\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Scripts in Move VM\nDESCRIPTION: This function executes a Move script. It takes the serialized script, type arguments, regular arguments, sender addresses, and gas meter as input. The function loads the script, builds the argument list, and executes the script using the interpreter.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/spec/vm.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub fn execute_script(\n    &mut self,\n    script: Vec<u8>,\n    ty_args: Vec<TypeTag>,\n    args: Vec<Vec<u8>>,\n    senders: Vec<AccountAddress>,\n    gas_status: &mut impl GasMeter,\n) -> VMResult<()>;\n```\n\n----------------------------------------\n\nTITLE: Implementing do Macro for Iteration from Zero in Move\nDESCRIPTION: A macro function that loops from 0 to stop (exclusive) and applies a closure function to each value. This is a convenience wrapper around range_do that starts from 0.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u32.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic macro fun do<$R: drop>($stop: u32, $f: |u32| -> $R) {\n    std::macros::do!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Wallet with the Window\nDESCRIPTION: This code shows how to register a wallet implementation with the browser window using the registerWallet function from @mysten/wallet-standard. This makes the wallet discoverable to dApps that use the Wallet Standard.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/wallet-standard.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { registerWallet } from '@mysten/wallet-standard';\n\nregisterWallet(new YourWallet());\n```\n\n----------------------------------------\n\nTITLE: Destroying an Empty VecMap in Move\nDESCRIPTION: Destroys an empty VecMap. Aborts if the map is not empty. Extracts the contents vector and verifies it is empty before destroying it.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vec_map.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\npublic fun destroy_empty<K: copy, V>(self: VecMap<K, V>) {\n    let VecMap { contents } = self;\n    assert!(contents.is_empty(), EMapNotEmpty);\n    contents.destroy_empty()\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Database\nDESCRIPTION: Commands to reset and reinitialize the development database\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm db:reset:dev && pnpm db:setup:dev\n```\n\n----------------------------------------\n\nTITLE: Comparing Move.toml Files Using diff in Shell\nDESCRIPTION: A simple shell command that uses the diff utility with the -s flag to compare the current Move.toml file with Move.toml.expected. The -s flag ensures that identical files are reported as such.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/migration_with_blocking_errors/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndiff -s Move.toml Move.toml.expected\n```\n\n----------------------------------------\n\nTITLE: Authenticator State Management in Sui\nDESCRIPTION: Structures and functions for managing authenticator state, including JWK (JSON Web Key) operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic struct AuthenticatorState(0x2::authenticator_state)\npublic struct AuthenticatorStateInner(0x2::authenticator_state)\npublic struct JWK(0x2::authenticator_state)\npublic struct JwkId(0x2::authenticator_state)\npublic struct ActiveJwk(0x2::authenticator_state)\nfun active_jwk_equal(0x2::authenticator_state)\nfun jwk_equal(0x2::authenticator_state)\nfun jwk_id_equal(0x2::authenticator_state)\nfun string_bytes_lt(0x2::authenticator_state)\nfun jwk_lt(0x2::authenticator_state)\nfun create(0x2::authenticator_state)\nfun load_inner_mut(0x2::authenticator_state)\nfun load_inner(0x2::authenticator_state)\nfun check_sorted(0x2::authenticator_state)\nfun update_authenticator_state(0x2::authenticator_state)\nfun deduplicate(0x2::authenticator_state)\nfun expire_jwks(0x2::authenticator_state)\nfun get_active_jwks(0x2::authenticator_state)\n```\n\n----------------------------------------\n\nTITLE: Viewing and Searching Sui Node Logs\nDESCRIPTION: Commands to view, follow, and search Sui Node logs using journalctl.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njournalctl -u sui-node -f\njournalctl -u sui-node -g <SEARCH_TERM>\n```\n\n----------------------------------------\n\nTITLE: Viewing Bridge Registration\nDESCRIPTION: Command to view the registered bridge metadata on-chain, requiring a Sui fullnode URL.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ sui-bridge-cli view-bridge-registration --sui-rpc-url {SUI-FULLNODE-URL}\n```\n\n----------------------------------------\n\nTITLE: Pinging an Anemo Server with sui-tool\nDESCRIPTION: This shell command shows the usage of the sui-tool to ping an Anemo server. It requires parameters like SERVER_NAME and ADDRESS to specify which server to ping. These parameters define the network and server address respectively.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-tool/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\nSERVER_NAME=\"sui\"; \\\nADDRESS=\"1.2.3.4:5678\"; \\\ncargo run --bin sui-tool -- anemo ping --server-name \"$SERVER_NAME\" \"$ADDRESS\"\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Source Code Retrieval\nDESCRIPTION: This example illustrates the expected JSON response format when fetching source code from the Sui Source Validation Service. It contains the source code if found or an error message if it does not exist.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-source-validation-service/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"source\":\"...\"}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Functions and Structs with Type Arguments in Move\nDESCRIPTION: This snippet demonstrates how to call generic functions and use generic structs with explicit type arguments. It shows both construction and destruction of generic struct instances.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nfun foo() {\n    let x = id<bool>(true);\n    // type arguments on construction\n    let foo = Foo<bool> { x: true };\n    let bar = Bar<u64, u8> { x: 0, y: vector<u8>[] };\n\n    // type arguments on destruction\n    let Foo<bool> { x } = foo;\n    let Bar<u64, u8> { x, y } = bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Move Bytecode Verifier Project Structure\nDESCRIPTION: This snippet shows the directory structure of the Move bytecode verifier module, including core files, proptests, and libraries used for testing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-bytecode-verifier/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n*\n├── invalid-mutations  # Library used by proptests\n├── src                # Core bytecode verifier files\n├── tests              # Proptests\n```\n\n----------------------------------------\n\nTITLE: Counter Constructor Example\nDESCRIPTION: Shows a practical use of parameter-less functions for creating new data structures.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\nmodule a::example {\n  public struct Counter { count: u64 }\n\n  fun new_counter(): Counter {\n      Counter { count: 0 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and resetting to a specific branch\nDESCRIPTION: These commands use Git to fetch updates from a remote branch (upstream/devnet) and reset the local branch to match it. This is useful for ensuring the local code is up-to-date with a specific development branch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch upstream devnet && git reset --hard upstream/devnet\n```\n\n----------------------------------------\n\nTITLE: Dependency Override of Primary Implicit Dependency Test\nDESCRIPTION: Tests how overriding an implicit dependency in a dependent package is handled. The root package's implicit dependencies take precedence over the dependent package's explicit dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-package/tests/test_sources/implicits/README.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\na:\n  C: c\n\nc:\n  I1: i1a\n\ni1a: no deps\n```\n\n----------------------------------------\n\nTITLE: Publishing Modules in Sui Sandbox with Verbose Output\nDESCRIPTION: Command for publishing modules to the Sui sandbox environment with verbose output. The -v flag enables detailed logging during the publishing process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/module_disassemble/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox publish -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Manifest After Upgrade\nDESCRIPTION: TOML configuration showing how to update the package manifest after an upgrade by setting the published-at field to the new package ID while maintaining the original package ID in addresses.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/upgrade.mdx#2025-04-22_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"sui_package\"\nversion = \"0.0.1\"\npublished-at = \"<UPGRADED-PACKAGE-ID>\"\n\n[addresses]\nsui_package = \"<ORIGINAL-PACKAGE-ID>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Book Information Example in DeepBook API\nDESCRIPTION: Provides an example response for the orderbook endpoint, showing bid and ask prices and quantities for a specific pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"timestamp\": \"1733874965431\",\n\t\"bids\": [\n\t\t[\n\t\t\t\"3.715\",\n\t\t\t\"2.7\"\n\t\t],\n\t\t[\n\t\t\t\"3.713\",\n\t\t\t\"2294.8\"\n\t\t]\n\t],\n\t\"asks\": [\n\t\t[\n\t\t\t\"3.717\",\n\t\t\t\"0.9\"\n\t\t],\n\t\t[\n\t\t\t\"3.718\",\n\t\t\t\"1000\"\n\t\t]\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sui Node with Configuration File\nDESCRIPTION: Command to run the Sui Node with a specified configuration file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./sui-node --config-path /opt/sui/config/validator.yaml\n```\n\n----------------------------------------\n\nTITLE: Building Sui Framework and Updating Documentation\nDESCRIPTION: This command builds the Sui framework and updates the relevant documentation files. It should be run in the crates/sui-framework directory after making changes to code comments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUPDATE=1 cargo nextest run build_system_packages\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v1.0.7\nDESCRIPTION: Version update entry showing dependency update to @mysten/sui v1.1.0\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.7\n\n### Patch Changes\n\n- Updated dependencies [bae8f9683c]\n  - @mysten/sui@1.1.0\n```\n\n----------------------------------------\n\nTITLE: Type Inference for Generics in Move\nDESCRIPTION: This example illustrates Move's type inference capabilities for generic functions and structs. It shows how the compiler can infer type arguments without explicit specification in most cases.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nfun foo() {\n    let x = id(true);\n    //        ^ <bool> is inferred\n\n    let foo = Foo { x: true };\n    //           ^ <bool> is inferred\n\n    let Foo { x } = foo;\n    //     ^ <bool> is inferred\n}\n```\n\n----------------------------------------\n\nTITLE: Create Child Account Capability Function\nDESCRIPTION: Implements function to create child account capabilities from an admin account cap. Ensures only admin caps can create new capabilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/custodian_v2.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create_child_account_cap(admin_account_cap: &AccountCap, ctx: &mut TxContext): AccountCap {\n    assert!(object::uid_to_address(&admin_account_cap.id) == admin_account_cap.owner, EAdminAccountCapRequired);\n    AccountCap {\n        id: object::new(ctx),\n        owner: admin_account_cap.owner\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Anemo Benchmark Server\nDESCRIPTION: Command to run the Anemo benchmark server listening on port 5556. This initializes the server side of the benchmark test.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/anemo-benchmark/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntarget/debug/anemo-benchmark --port 5556\n```\n\n----------------------------------------\n\nTITLE: Updating Bridge Committee Node URL\nDESCRIPTION: Command to update the URL of a bridge node after the committee has been finalized.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ sui validator update-bridge-committee-node-url\n```\n\n----------------------------------------\n\nTITLE: Defining PlatformCap for contract deployment authorization in Rust\nDESCRIPTION: The PlatformCap struct represents a capability issued to the contract deployer, granting specific permissions and authority within the contract's functionality. It's a key authorization mechanism for platform administration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n/// Capability that is issued to the one deploying the contract\nstruct PlatformCap has key, store { id: UID }\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Local Sui Network from Source\nDESCRIPTION: Steps to build Sui from source, initialize a local network, and start Rosetta servers for development purposes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rosetta/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./sui genesis -f\n```\n\nLANGUAGE: shell\nCODE:\n```\n./sui start\n```\n\nLANGUAGE: shell\nCODE:\n```\n./sui-rosetta start-online-server\n```\n\nLANGUAGE: shell\nCODE:\n```\n./sui-rosetta start-offline-server\n```\n\nLANGUAGE: shell\nCODE:\n```\n./sui-rosetta generate-rosetta-cli-config\n```\n\n----------------------------------------\n\nTITLE: Creating Singleton Random UID in Move\nDESCRIPTION: Creates the UID for the singleton Random object. This should only be called once from the random module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun randomness_state(): UID {\n    UID {\n        id: ID { bytes: SUI_RANDOM_ID },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Self-Declaration as Friend in Move\nDESCRIPTION: Examples of invalid friend declarations where a module attempts to declare itself as a friend, which is not allowed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/friends.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::m { friend Self; // ERROR! }\n//                      ^^^^ Cannot declare the module itself as a friend\n\nmodule 0x43::m { friend 0x43::M; // ERROR! }\n//                      ^^^^^^^ Cannot declare the module itself as a friend\n```\n\n----------------------------------------\n\nTITLE: Implementing Treasury Structure in Rust\nDESCRIPTION: Definition of a Treasury struct that manages supply-related information for tokenized assets.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\nstruct Treasury<phantom T> has key, store {\n\tid: UID,\n\tsupply: Supply<T>,\n  total_supply: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UQ32_32 from Quotient in Move\nDESCRIPTION: Implements the from_quotient function to create a UQ32_32 value from a numerator and denominator. It handles edge cases and potential overflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq32_32.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun from_quotient(numerator: u64, denominator: u64): UQ32_32 {\n    UQ32_32(\n        std::macros::uq_from_quotient!<u64, u128>(\n            numerator,\n            denominator,\n            std::u64::max_value!(),\n            TOTAL_BITS,\n            FRACTIONAL_BITS,\n            abort EDenominator,\n            abort EQuotientTooSmall,\n            abort EQuotientTooLarge,\n        ),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New React App with Vite\nDESCRIPTION: Command to initialize a new React application using Vite.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/first-app/client-tssdk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm init vite\n```\n\n----------------------------------------\n\nTITLE: Sui Validator CLI Command Help\nDESCRIPTION: This shell command displays the available commands and options for the `sui validator` command in the Sui CLI. It provides a summary of each command and the available options, including configuration file setting, JSON output, confirmation prompts, and help information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/validator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage: sui validator [OPTIONS] [COMMAND]\n\nCommands:\n  make-validator-info          \t \n  become-candidate             \t \n  join-committee               \t \n  leave-committee              \t \n  display-metadata             \t \n  update-metadata              \t \n  update-gas-price              \tUpdate gas price that is used to calculate Reference Gas Price\n  report-validator              \tReport or un-report a validator\n  serialize-payload-pop         \tSerialize the payload that is used to generate Proof of Possession. This is useful to take the payload offline for an Authority protocol\n                                    \tkeypair to sign\n  display-gas-price-update-raw-txn  Print out the serialized data of a transaction that sets the gas price quote for a validator\n  help                          \tPrint this message or the help of the given subcommand(s)\n\nOptions:\n  \t--client.config <CONFIG>  Sets the file storing the state of our user accounts (an empty one will be created if missing)\n  \t--json                \tReturn command outputs in json format\n  -y, --yes                \t \n  -h, --help                \tPrint help\n```\n\n----------------------------------------\n\nTITLE: Burning a Publisher Object in Move\nDESCRIPTION: Destroys a Publisher object, removing all associated privileges.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun burn_publisher(self: Publisher) {\n    let Publisher { id, package: _, module_name: _ } = self;\n    id.delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Upgrade Commit and Immutability Functions\nDESCRIPTION: Defines functions to commit an upgrade and make a package immutable, delegating to the corresponding functions in sui::package.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\npublic fun commit_upgrade(\n    cap: &mut UpgradeCap,\n    receipt: package::UpgradeReceipt,\n) {\n    cap.cap.commit_upgrade(receipt)\n}\n\npublic fun make_immutable(cap: UpgradeCap) {\n    let UpgradeCap { id, cap, day: _ } = cap;\n    id.delete();\n    cap.make_immutable()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Infinite While Loop in Move\nDESCRIPTION: A simple example showing how to create an infinite while loop using 'true' as the condition.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nfun foo() {\n    while (true) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Assigned Named Address in TOML\nDESCRIPTION: Example of declaring an assigned named address in the Move.toml file. This sets a specific value for the named address that cannot be changed by importing packages.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"example_pkg\"\n...\n[addresses]\nnamed_addr = \"0xCAFE\"\n```\n\n----------------------------------------\n\nTITLE: Bridge Committee Signature Verification Implementation\nDESCRIPTION: Implements signature verification logic for bridge committee messages including threshold validation\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun verify_signatures(\n    self: &BridgeCommittee,\n    message: BridgeMessage,\n    signatures: vector<vector<u8>>,\n) {\n    let (mut i, signature_counts) = (0, vector::length(&signatures));\n    let mut seen_pub_key = vec_set::empty<vector<u8>>();\n    let required_voting_power = message.required_voting_power();\n    let mut message_bytes = SUI_MESSAGE_PREFIX;\n    message_bytes.append(message.serialize_message());\n    let mut threshold = 0;\n    while (i < signature_counts) {\n        let pubkey = ecdsa_k1::secp256k1_ecrecover(&signatures[i], &message_bytes, 0);\n        assert!(!seen_pub_key.contains(&pubkey), EDuplicatedSignature);\n        assert!(self.members.contains(&pubkey), EInvalidSignature);\n        let member = &self.members[&pubkey];\n        if (!member.blocklisted) {\n            threshold = threshold + member.voting_power;\n        };\n        seen_pub_key.insert(pubkey);\n        i = i + 1;\n    };\n    assert!(threshold >= required_voting_power, ESignatureBelowThreshold);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing mdbook via Cargo\nDESCRIPTION: Command to install mdbook tool using Rust's package manager Cargo\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install mdbook\n```\n\n----------------------------------------\n\nTITLE: Running Sui Sandbox Commands for Publishing and Testing in Bash\nDESCRIPTION: Commands for interacting with the Sui sandbox environment. The first command publishes a module, while the second runs a test module with the dry-run flag to simulate execution without actual state changes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/metatests/cov/plain/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsandbox publish\nsandbox run storage/0x0000000000000000000000000000000000000000000000000000000000000042/modules/M.mv test  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Building Tic-Tac-Toe dApp for Production Deployment\nDESCRIPTION: Command to build the Tic-Tac-Toe demo application for production deployment using pnpm. This creates optimized, minified files ready for hosting on a web server.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/tic-tac-toe/ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Verifying VRF Proof using CLI\nDESCRIPTION: Command to verify VRF proof and output using the fastcrypto CLI tool with public key and input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/ecvrf.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo run --bin ecvrf-cli verify --output 2b7e45821d80567761e8bb3fc519efe5ad80cdb4423227289f960319bbcf6eea1aef30c023617d73f589f98272b87563c6669f82b51dafbeb5b9cf3b17c73437 --proof 18ccf8bf316f00b387fc6e7b26f2d3ddadbf5e9c66d3a30986f12b208108551f9c6da87793a857d79261338a50430074b1dbc7f8f05e492149c51313381248b4229ebdda367146dbbbf95809c7fb330d --input 48656c6c6f2c20776f726c6421 --public-key 928744da5ffa614d65dd1d5659a8e9dd558e68f8565946ef3d54215d90cba015\n```\n\n----------------------------------------\n\nTITLE: Function Parameters Example\nDESCRIPTION: Shows different ways to define function parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nfun add(x: u64, y: u64): u64 { x + y }\n```\n\n----------------------------------------\n\nTITLE: Keypair Generation Selection Prompt\nDESCRIPTION: Prompt for selecting the key scheme to generate a keypair, offering options for ed25519, secp256k1, or secp256r1.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/initialize-sui-client-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSelect key scheme to generate keypair (0 for ed25519, 1 for secp256k1, 2: for secp256r1):\n```\n\n----------------------------------------\n\nTITLE: Accessing Validator Network Public Key\nDESCRIPTION: Function to retrieve the network public key bytes from a Validator's metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_55\n\nLANGUAGE: Move\nCODE:\n```\npublic fun network_pubkey_bytes(self: &Validator): &vector<u8> {\n    &self.metadata.network_pubkey_bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Transaction Digests in Sui Rust SDK\nDESCRIPTION: This code demonstrates how to derive a transaction digest from the intent message, sign it with a key pair, and verify the signature locally before submission.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/sign-and-send-txn.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n    // derive the digest that the keypair should sign on, i.e. the blake2b hash of `intent || tx_data`.\n    let intent_msg = IntentMessage::new(Intent::sui_transaction(), tx_data);\n    let raw_tx = bcs::to_bytes(&intent_msg).expect(\"bcs should not fail\");\n    let mut hasher = sui_types::crypto::DefaultHash::default();\n    hasher.update(raw_tx.clone());\n    let digest = hasher.finalize().digest;\n\n    // use SuiKeyPair to sign the digest.\n    let sui_sig = skp_determ_0.sign(&digest);\n\n    // if you would like to verify the signature locally before submission, use this function. if it fails to verify locally, the transaction will fail to execute in Sui.\n    let res = sui_sig.verify_secure(\n        &intent_msg,\n        sender,\n        sui_types::crypto::SignatureScheme::ED25519,\n    );\n    assert!(res.is_ok());\n```\n\n----------------------------------------\n\nTITLE: Rotating Validator Operation Cap\nDESCRIPTION: Command to create a new operation capability object, invalidating the current one, using sui_system::rotate_operation_cap function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call --package 0x3 --module sui_system --function rotate_operation_cap --args 0x5 --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Filtering Vector Elements in Rust\nDESCRIPTION: This macro function creates a new vector containing only the elements of the input vector that satisfy a given predicate function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_21\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun filter<$T: drop>($v: vector<$T>, $f: |&$T| -> bool): vector<$T> {\n    let v = $v;\n    let mut r = vector[];\n    v.do!(|e| if ($f(&e)) r.push_back(e));\n    r\n}\n```\n\n----------------------------------------\n\nTITLE: Converting UID to Address in Move\nDESCRIPTION: Gets the inner bytes of a UID's ID as an address. This function allows using a UID as an address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun uid_to_address(uid: &UID): address {\n    uid.id.bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Test Snapshots in Sui Project\nDESCRIPTION: Command to update test snapshots in the Sui project. It uses the UB=1 environment variable to trigger snapshot updates when running tests.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nUB=1 pnpm test\n```\n\n----------------------------------------\n\nTITLE: Defining ItemDelisted Event Struct\nDESCRIPTION: Event struct emitted when items are delisted from the Kiosk.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic struct ItemDelisted<phantom T: key, store> has copy, drop {\n    kiosk: sui::object::ID,\n    id: sui::object::ID\n}\n```\n\n----------------------------------------\n\nTITLE: Launching sui-graphql-rpc Server with Optional Parameters\nDESCRIPTION: Command to launch the sui-graphql-rpc server using Cargo with options to specify RPC URL, database URL, port, host, and configuration file. Useful for customizing server startup settings.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-rpc/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin sui-graphql-rpc start-server [--rpc-url] [--db-url] [--port] [--host] [--config]\n```\n\n----------------------------------------\n\nTITLE: Creating Demo Data\nDESCRIPTION: Command to generate demo data for non-locked and locked objects\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node helpers/create-demo-data.ts\n```\n\n----------------------------------------\n\nTITLE: Markdown Procedure Example\nDESCRIPTION: Demonstrates how to format a procedure using a numbered list in Markdown.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n\"To get the latest version of the Sui Wallet extension:\\n\\n1. Open Google Chrome.\\n2. Click **Extensions**, then click **Manage Extensions**.\\n3. Click **Details** for the Sui Wallet extension, then click **View in Chrome Web Store**.\"\n```\n\n----------------------------------------\n\nTITLE: Vector Do Ref Macro Implementation in Rust\nDESCRIPTION: Performs an action on each element of a vector by reference without modifying the vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/vector.md#2025-04-22_snippet_13\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun do_ref<$T, $R: drop>($v: &vector<$T>, $f: |&$T| -> $R) {\n    let v = $v;\n    v.length().do!(|i| $f(&v[i]))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BLS12-381 Cryptographic Operations in Move\nDESCRIPTION: This snippet lists public functions for BLS12-381 elliptic curve operations, including operations on G1, G2, and GT groups, as well as pairing and hashing functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\npublic fun hash_to_g1\npublic fun g1_multi_scalar_multiplication\npublic fun g1_to_uncompressed_g1\npublic fun g2_from_bytes\npublic fun g2_identity\npublic fun g2_generator\npublic fun g2_add\npublic fun g2_sub\npublic fun g2_mul\npublic fun g2_div\npublic fun g2_neg\npublic fun hash_to_g2\npublic fun g2_multi_scalar_multiplication\npublic fun gt_identity\npublic fun gt_generator\npublic fun gt_add\npublic fun gt_sub\npublic fun gt_mul\npublic fun gt_div\npublic fun gt_neg\npublic fun pairing\npublic fun uncompressed_g1_to_g1\npublic fun uncompressed_g1_sum\n```\n\n----------------------------------------\n\nTITLE: Running a Function from a Published Move Module\nDESCRIPTION: Command to run a specific function from a published Move module in the Sui sandbox. The path references the storage location using the module's address, name, and function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/explain_stdlib_abort/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsandbox run storage/0x0000000000000000000000000000000000000000000000000000000000000042/modules/m.mv bad_borrow\n```\n\n----------------------------------------\n\nTITLE: Burn Token Function in Move\nDESCRIPTION: Burns a specified amount of tokens from the bridge treasury using the treasury cap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/treasury.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun burn<T>(self: &mut BridgeTreasury, token: Coin<T>) {\n    let treasury = &mut self.treasuries[type_name::get<T>()];\n    coin::burn(treasury, token);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed-Range Inclusive Loop Macro for U16 in Rust\nDESCRIPTION: Defines a macro function 'do_eq' that applies a given function to each number from 0 to a specified u16 stop value (inclusive). It utilizes the std::macros::do_eq macro internally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_14\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun do_eq<$R: drop>($stop: u16, $f: |u16| -> $R) {\n    std::macros::do_eq!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Allow Extensions in Kiosk - Move\nDESCRIPTION: [DEPRECATED] This function is used to allow or disallow access to uid and uid_mut via the allow_extensions setting. It verifies that the caller has access before making changes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_39\n\nLANGUAGE: Move\nCODE:\n```\npublic fun set_allow_extensions(self: &mut sui::kiosk::Kiosk, cap: &sui::kiosk::KioskOwnerCap, allow_extensions: bool) {\n    assert!(self.has_access(cap), ENotOwner);\n    self.allow_extensions = allow_extensions;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Move Compiler Folder Structure Overview\nDESCRIPTION: A detailed directory tree showing the organization of the Move compiler codebase, including the compilation pipeline stages from parsing to bytecode generation, accompanying source files, and the standard library location.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-compiler/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmove-compiler                                     # Main crate\n├── src                                       # Source code for Move lang\n│   ├── lib.rs                                # The entry points into compilation\n|   |\n│   ├── parser                                # Parsing the source input into an AST\n│   │   ├── ast.rs                            # The target AST for Parsing\n│   │   ├── mod.rs                            # Module for Parsing step\n│   │   ├── lexer.rs                          # The lexer\n│   │   └── syntax.rs                         # The parser\n|   |\n│   ├── expansion                             # Expands module aliases. Fixes syntax that could not be fully expressed in the grammar (such as assignments and pack)\n│   │   ├── ast.rs                            # The target AST for Expansion\n│   │   ├── mod.rs                            # Module for Expansion step\n│   │   └── translate.rs                      # Parser ~> Expansion\n|   |\n│   ├── naming                                # Resolves names. This includes names in the current module, generics, locals, and builtin types/functions\n│   │   ├── ast.rs                            # The target AST for Naming\n│   │   ├── mod.rs                            # Module for Naming step\n│   │   └── translate.rs                      # Expansion ~> Naming\n|   |\n│   ├── typing                                # Type checks the program. The checking is bidirectional in that it infers types while also checking them\n│   |   ├── ast.rs                            # The target AST for Typing\n│   |   ├── mod.rs                            # Module for Typing step\n│   |   ├── translate.rs                      # Naming ~> Typing\n│   |   ├── core.rs                           # Core type system code. This includes the typing context and rules for types\n│   |   ├── expand.rs                         # After type inference, this expands all of the type variables with the inferred values\n│   |   └── globals.rs                        # After expanding type variables, this checks proper access for resources (checks acquires)\n|   |\n│   ├── hlir                                  # The High Level IR. It changes the AST into a statement based representation as opposed to expression based\n│   │   ├── ast.rs                            # The target AST for statement-ification\n│   │   ├── mod.rs                            # Module for High Level IR step\n│   │   └── translate.rs                      # Typing ~> High Level IR\n|   |\n│   ├── cfgir                                 # The Control Flow Graph IR. It removes the structured control flow and puts the blocks into a CFG. There are then control flow sensitive checks performed\n│   │   ├── ast.rs                            # The target AST for the CFG-ification\n│   │   ├── mod.rs                            # Module for CFG IR step\n│   │   ├── translate.rs                      # High Level IR ~> CFG IR\n│   │   ├── absint.rs                         # Abstract Interpretation library for control flow sensitive checks\n│   │   ├── cfg.rs                            # Defines the CFG itself (where the AST just labels the blocks)\n│   │   ├── locals                            # Checks proper local usage (no use after move, no resources left in locals)\n│   │   │   ├── mod.rs                        # The module for the check. Includes the transfer functions\n│   │   │   └── state.rs                      # The state used for abstract interpretation\n│   │   └── borrows                           # The Borrow Checker. Checks the reference safety properties\n│   │       ├── borrow_map.rs                 # The borrow graph used by the abstract state. Maintains internal relationships about what references are borrowing from where\n│   │       ├── mod.rs                        # The module for the check. Includes the transfer functions\n│   │       └── state.rs                      # The state used for abstract interpretation\n|   |\n│   ├── to_bytecode                           # Compilation to Move bytecode. Is not used by move-check\n│   │   ├── mod.rs                            # Module for the compilation to bytecode\n│   │   ├── translate.rs                      # CFG IR ~> Move bytecode\n│   │   ├── context.rs                        # The context maps between IR construct and bytecode handles/offsets\n│   │   ├── remove_fallthrough_jumps.rs       # The CFG IR blocks always end in a jump; Move bytecode blocks can fall through. This optimizes the usage of fallthroughs (removing unncessary jumps)\n│   │   └── labels_to_offsets.rs              # During bytecode generation, the CFG IR labels are used. This switches the labels to bytecode offsets\n|   |\n│   ├── shared                                # Shared Utilities\n│   │   ├── mod.rs                            # Shared utility code used by all modules (such as source location code)\n│   │   └── unique_map.rs                     # A wrapper around BTreeMap that produces errors on duplicate values\n|   |\n│   ├── errors                                # Errors produced by the various checks\n│   │   └── mod.rs                            # Module for Errors\n|   |\n│   ├── command_line                          # Utilities used by both command line binnaries\n│   |   └── mod.rs                            # Module for Command LIne\n|   |\n│   └── bin                                   # Command line binaries\n│       ├── move-check.rs                     # Defines the move-check command line tool\n│       └── move-build.rs                     # Defines the move-build command line tool\n|\n└── stdlib                                    # Move standard library\n    ├── modules                               # Core modules\n    └── transaction_scripts                   # Core transaction scripts\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitwise NOT Operation for u64 in Move\nDESCRIPTION: Function that returns the bitwise NOT of a u64 value, where each bit that is 1 becomes 0 and each bit that is 0 becomes 1.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bitwise_not(x: u64): u64 {\n    x ^ max_value!()\n}\n```\n\n----------------------------------------\n\nTITLE: Find Validator in TableVec\nDESCRIPTION: Searches for a validator by address in a TableVec structure, returning an Option with the index if found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_33\n\nLANGUAGE: Move\nCODE:\n```\nfun find_validator_from_table_vec(\n    validators: &TableVec<Validator>,\n    validator_address: address,\n): Option<u64> {\n    let length = validators.length();\n    let mut i = 0;\n    while (i < length) {\n        let v = &validators[i];\n        if (v.sui_address() == validator_address) {\n            return option::some(i)\n        };\n        i = i + 1;\n    };\n    option::none()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing range-based loop for u8 (exclusive)\nDESCRIPTION: Loops applying a function to each number from start to stop (exclusive) using std::macros::range_do macro. The function must return a value with the drop ability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do<$R: drop>($start: u8, $stop: u8, $f: |u8| -> $R) {\n    std::macros::range_do!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asset Information in DeepBook API\nDESCRIPTION: Describes the response format for the assets endpoint, which returns information about all coins being traded on DeepBook. The response includes details such as asset name, contract address, and deposit/withdrawal status.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"ASSET_NAME\": {\n\t\"unified_cryptoasset_id\": \"string\",\n\t\"name\": \"string\",\n\t\"contractAddress\": \"string\",\n\t\"contractAddressUrl\": \"string\",\n\t\"can_deposit\": \"string (true | false)\",\n\t\"can_withdraw\": \"string (true | false)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutable Vector Zipping in Move\nDESCRIPTION: The zip_do_mut macro iterates through two vectors v1 and v2, applying a function to mutable references of each pair of elements. It aborts if the vectors have different lengths and preserves the order of elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun zip_do_mut<$T1, $T2, $R: drop>(\n    $v1: &mut vector<$T1>,\n    $v2: &mut vector<$T2>,\n    $f: |&mut $T1, &mut $T2| -> $R,\n) {\n    let v1 = $v1;\n    let v2 = $v2;\n    let len = v1.length();\n    assert!(len == v2.length());\n    len.do!(|i| $f(&mut v1[i], &mut v2[i]));\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Dependency Structure in Sui Project\nDESCRIPTION: Shows the dependency structure of packages A, B, and C, where B has a Move.lock file, but A and C don't.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui/tests/shell_tests/dvx-953/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nA ---> B ---> C\n```\n\n----------------------------------------\n\nTITLE: Calculate SHA256 Checksum (MacOS)\nDESCRIPTION: This command calculates the SHA256 checksum of the extracted sui-node binary on a MacOS system.  This is used to verify the integrity and correctness of the build.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/sui-node-deterministic/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"shasum -a 256 opt/sui/bin/sui-node\"\n```\n\n----------------------------------------\n\nTITLE: Temp Setting Network Buffer Sizes\nDESCRIPTION: These commands set network buffer sizes temporarily for the current session. They will not persist after a reboot.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo sysctl -w net.core.wmem_max=104857600\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo sysctl -w net.core.rmem_max=104857600\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo sysctl -w net.ipv4.tcp_rmem=\"8192 262144 104857600\"\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo sysctl -w net.ipv4.tcp_wmem=\"8192 262144 104857600\"\n```\n\n----------------------------------------\n\nTITLE: Running the MEV Bot for DeepBook Order Clearing in Sui\nDESCRIPTION: Command to start the MEV bot implementation that clears expired DeepBook orders. The bot uses pnpm as the package manager to execute the start script defined in the project.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/mev_bot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install project dependencies while ignoring workspace settings\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --ignore-workspace\n```\n\n----------------------------------------\n\nTITLE: Publishing Smart Contract with Closed Loop CLI in Shell\nDESCRIPTION: Runs a command to publish a smart contract for a token using the shell script 'publish.sh'. Environment variables like PKG, POLICY, POLICY_CAP, and TREASURY_CAP are defined for setup purposes. This requires initialization of the CLI and account funding.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/regulated-token/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsh publish.sh\n\n> Environment variables for the next step:\n> PKG=0xA11CE...\n> POLICY=0xBOB...\n> POLICY_CAP=0xCA41...\n> TREASURY_CAP=0x0D15...\n>\n> To apply them to current process, run: 'source .env'\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Count from Local Sui Network\nDESCRIPTION: cURL command to retrieve the total transaction count from the local Sui network using a POST request to the local RPC endpoint.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/local-network.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ curl --location --request POST 'http://127.0.0.1:9000' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"sui_getTotalTransactionBlocks\",\n  \"params\": []\n}'\n```\n\n----------------------------------------\n\nTITLE: Override Implicit Dependency Test\nDESCRIPTION: Tests that explicit dependencies override implicit ones. When a package explicitly specifies a dependency that would otherwise be implicitly added, the implicit dependency resolution should be disabled.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-package/tests/test_sources/implicits/README.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\na:\n  I2 = i2a\n\ni2a: no deps\n```\n\n----------------------------------------\n\nTITLE: Including OpenID Providers Snippet\nDESCRIPTION: This snippet includes external documentation on supported OpenID providers for zkLogin integration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/zklogin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{@include: ../../snippets/openid-providers.mdx}\n```\n\n----------------------------------------\n\nTITLE: DeepBook Self-Matching Options Constants\nDESCRIPTION: Constants defining the available options for self-matching orders in DeepBook, including SELF_MATCHING_ALLOWED, CANCEL_TAKER, and CANCEL_MAKER.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/orders.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\n/// Self matching is allowed. The order will be matched against other orders placed by the same user.\nconst SELF_MATCHING_ALLOWED: u8 = 0;\n/// Cancel the taker order if it would match with a maker order placed by the same user.\nconst CANCEL_TAKER: u8 = 1;\n/// Cancel the maker order if it would match with a taker order placed by the same user.\nconst CANCEL_MAKER: u8 = 2;\n```\n\n----------------------------------------\n\nTITLE: Viewing Recent Sui Node Logs with Docker\nDESCRIPTION: This shell command displays the last 10 minutes of logs for the Sui validator using Docker.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/docker/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker logs --since 10m -f validator\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Scenarios with SimConfig in Rust\nDESCRIPTION: Shows how to configure multiple test scenarios using a vector of SimConfig objects. This allows running the same test under different network conditions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-simulator/README.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nfn test_scenarios -> Vec<SimConfig> {\n   vec![\n     fast_network_config(), // low latency\n     slow_network_config(), // high latency\n     lossy_network_config(), // packet loss\n   ]\n}\n\n#[sim_test(config = \"test_scenarios()\")]\nasync fn test_case() {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: List OCI Blobs to Find Sui Node Binary\nDESCRIPTION: This command lists the OCI blobs within the specified directory, sorted by size. The sui-node binary is expected to be the largest blob. This helps in identifying the correct blob to extract.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/sui-node-deterministic/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"ls -lSh build/oci/sui-node/blobs/sha256\"\n```\n\n----------------------------------------\n\nTITLE: Bytes Accessor Function Implementation\nDESCRIPTION: Implements a public accessor function to get the underlying bytes of an Element.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bytes<G>(e: &Element<G>): &vector<u8> {\n    &e.bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Struct Layouts with Configuration Options\nDESCRIPTION: Commands to generate struct layouts with special configuration options including address omission and custom separators.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/generate_struct_layout/args.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct E --type-args bool u64 u128 --omit-addresses\n\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct E --type-args bool u64 u128 --separator __\n\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct E --type-args bool u64 u128 --omit-addresses --separator __\n```\n\n----------------------------------------\n\nTITLE: Getting Reference Gas Price\nDESCRIPTION: Command to retrieve reference gas prices using 2 threads against two RPC server instances, with 10 chunks per thread.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rpc-loadgen/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-rpc-loadgen -- --urls \"http://127.0.0.1:9000\" \"http://127.0.0.1:9000\" --num-threads 2 get-reference-gas-price --num-chunks-per-thread 10\n```\n\n----------------------------------------\n\nTITLE: Set UpgradeCap Variable\nDESCRIPTION: This command sets the `upgradecap` variable in the shell environment to the object ID of the UpgradeCap object. This variable is later used as an argument when calling the `make_immutable` function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n$ upgradecap=0x4de927a10f97520311239cadb7159d4b893275bc74ab4e0af1b16c41ba8275a0\n```\n\n----------------------------------------\n\nTITLE: Find Validator in Vector\nDESCRIPTION: Locates a validator by address in a vector of validators, returning an Option with the index if found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\nfun find_validator(validators: &vector<Validator>, validator_address: address): Option<u64> {\n    validators.find_index!(|v| v.sui_address() == validator_address)\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Section Template Example\nDESCRIPTION: Template showing indented example format for documentation sections\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nIndented example for the section. (Roboto Mono Light)\n```\n\n----------------------------------------\n\nTITLE: Declaring Generic Structs in Move\nDESCRIPTION: This example shows how to define generic structs in Move. It includes two struct definitions with different numbers of type parameters, demonstrating how they can be used to name field types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic struct Foo<T> has copy, drop { x: T }\n\npublic struct Bar<T1, T2> has copy, drop {\n    x: T1,\n    y: vector<T2>,\n}\n```\n\n----------------------------------------\n\nTITLE: Generating zkLogin Nonce Computation\nDESCRIPTION: A complex computation for generating the nonce used in zkLogin, involving Poseidon hashing and bitwise operations on ephemeral public key components\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/zklogin.mdx#2025-04-22_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nnonce = ToBase64URL(Poseidon_BN254([ext_eph_pk_bigint / 2^128, ext_eph_pk_bigint % 2^128, max_epoch, jwt_randomness]).to_bytes()[len - 20..])\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Sui Kiosk Extension Errors and Permissions\nDESCRIPTION: Defines error constants for unauthorized access and extension states, as well as permission flag constants for place and lock actions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nconst ENotOwner: u64 = 0;\nconst EExtensionNotAllowed: u64 = 2;\nconst EExtensionNotInstalled: u64 = 3;\nconst PLACE: u128 = 1;\nconst LOCK: u128 = 2;\n```\n\n----------------------------------------\n\nTITLE: Publishing Test Resource Script in Move\nDESCRIPTION: A Move script that invokes the publish function of the Test module to create a new resource under the signer's account.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nscript {\nuse 0x2::Test;\nfun test_script(account: signer) {\n    Test::publish(&account)\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Curl Command to Verify Metrics Public Key\nDESCRIPTION: This Shell command is used to verify that the Bridge Node's public key is correctly returned when querying the metrics public API. It should return the public key associated with your Bridge Node, confirming that the node is configured correctly for metrics.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -i  {your-bridge-node-url-onchain}/metrics_pub_key\n```\n\n----------------------------------------\n\nTITLE: Invalid Recursive Struct Definitions in Move\nDESCRIPTION: Demonstrates invalid recursive struct definitions in Move, including direct and indirect recursion.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_14\n\nLANGUAGE: move\nCODE:\n```\npublic struct Foo<T> {\n    x: Foo<u64> // ERROR! 'Foo' containing 'Foo'\n}\n\npublic struct Bar<T> {\n    x: Bar<T> // ERROR! 'Bar' containing 'Bar'\n}\n\n// ERROR! 'A' and 'B' forming a cycle, which is not allowed either.\npublic struct A<T> {\n    x: B<T, u64>\n}\n\npublic struct B<T1, T2> {\n    x: A<T1>\n    y: A<T2>\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Gas Price\nDESCRIPTION: Commands to update the gas price for a validator, with options for using an Operation Cap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/node-tools.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsui validator update-gas-price <gas-price>\n```\n\nLANGUAGE: bash\nCODE:\n```\nsui validator update-gas-price --operation-cap-id <operation-cap-id> <gas-price>\n```\n\n----------------------------------------\n\nTITLE: Finding Closest Key in Critbit Tree - Move Implementation\nDESCRIPTION: Finds and returns the closest key to the given key in the Critbit tree. Returns 0 if tree is empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun find_closest_key<V: store>(tree: & CritbitTree<V>, key: u64): u64 {\n    if (is_empty(tree)) {\n        return 0\n    };\n    let closest_leaf_index = get_closest_leaf_index_by_key(tree, key);\n    let closeset_leaf = table::borrow(&tree.leaves, closest_leaf_index);\n    closeset_leaf.key\n}\n```\n\n----------------------------------------\n\nTITLE: Example API Call to Fetch Source Code from Service\nDESCRIPTION: This is an example of a curl command used to request the Move source code for a specific module on the Sui Source Validation Service's API. It requires the address of the package, the module name, and the network as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-source-validation-service/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://0.0.0.0:8000/api?address=0x2&module=coin&network=mainnet' --header 'X-Sui-Source-Validation-Version: 0.1'\n```\n\n----------------------------------------\n\nTITLE: Defining ENewCapNotCreatedByValidatorItself Error Constant in Move\nDESCRIPTION: Error constant (100) used when a new capability is not created by the validator itself.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_20\n\nLANGUAGE: move\nCODE:\n```\nconst ENewCapNotCreatedByValidatorItself: u64 = 100;\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Sui Coin Module in Move\nDESCRIPTION: Import statements for the Sui coin module, showing all required dependencies from both standard and Sui-specific libraries.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nuse std::address;\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::type_name;\nuse std::vector;\nuse sui::address;\nuse sui::bag;\nuse sui::balance;\nuse sui::config;\nuse sui::deny_list;\nuse sui::dynamic_field;\nuse sui::dynamic_object_field;\nuse sui::event;\nuse sui::hex;\nuse sui::object;\nuse sui::table;\nuse sui::transfer;\nuse sui::tx_context;\nuse sui::types;\nuse sui::url;\nuse sui::vec_set;\n```\n\n----------------------------------------\n\nTITLE: Executing Closure on Option Value in Sui Move\nDESCRIPTION: The 'do' macro function destroys an Option<T> and calls the provided closure on the inner value if it exists. It takes an Option<T> and a closure as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_14\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun do<$T, $R: drop>($o: Option<$T>, $f: |$T| -> $R) {\n    let o = $o;\n    if (o.is_some()) { $f(o.destroy_some()); }\n    else o.destroy_none()\n}\n```\n\n----------------------------------------\n\nTITLE: Output of Move Build Command in Shell\nDESCRIPTION: This is an example of the output from the `sui move build --dump-bytecode-as-base64` command. It includes the modules bytecode (base64 encoded), the dependency IDs, and the package digest.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nFETCHING GIT DEPENDENCY https://github.com/MystenLabs/sui.git\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING test\n{\"modules\":[<MODULE-BYTES-BASE64>],\"dependencies\":[<DEPENDENCY-IDS>],\"digest\":[59,43,173,195,216,88,176,182,18,8,24,200,200,192,196,197,248,35,118,184,207,205,33,59,228,109,184,230,50,31,235,201]}\n```\n\n----------------------------------------\n\nTITLE: Building SUI with Verbose Output\nDESCRIPTION: Command to build the SUI blockchain project with verbose output enabled using the -v flag.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/public_package_different_packages/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild -v\n```\n\n----------------------------------------\n\nTITLE: Valid Module Naming Examples in Move\nDESCRIPTION: Demonstrates valid module naming conventions in Move. Module names can start with letters and can contain underscores, letters, and digits after the first character.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/modules.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nmodule a::my_module {}\nmodule a::foo_bar_42 {}\n```\n\n----------------------------------------\n\nTITLE: Gas Budget Condition for Sui Transactions\nDESCRIPTION: This formula dictates the condition for a successful Sui transaction related to gas budget. The gas budget must be greater than or equal to the maximum of computation fees and total gas fees.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics/gas-in-sui.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"gas_budget >= max{computation_fees,total_gas_fees}\"\n```\n\n----------------------------------------\n\nTITLE: Applying Sysctl Changes\nDESCRIPTION: This command applies the changes made in the sysctl configuration file immediately, allowing the user to see the effect without rebooting.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo sysctl --system\n```\n\n----------------------------------------\n\nTITLE: Module-Level Use Declarations in Move\nDESCRIPTION: Demonstrates that 'use' declarations inside a module are usable regardless of their order of declaration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/uses.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nmodule a::example {\n    use std::vector;\n\n    fun new_vec(): vector<Option<u8>> {\n        let mut v = vector[];\n        vector::push_back(&mut v, 0);\n        vector::push_back(&mut v, 10);\n        v\n    }\n\n    use std::option::{Option, some, none};\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Package Manifest Example with Dependencies\nDESCRIPTION: A more complete Move.toml example showing package metadata, address definitions, and both local and git dependencies with address substitution.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"AName\"\nlicense = \"Apache 2.0\"\n\n[addresses]\naddress_to_be_filled_in = \"_\"\nspecified_address = \"0xB0B\"\n\n[dependencies]\n# Local dependency\nLocalDep = { local = \"projects/move-awesomeness\", addr_subst = { \"std\" = \"0x1\" } }\n# Git dependency\nMoveStdlib = { git = \"https://github.com/MystenLabs/sui.git\", subdir = \"crates/sui-framework/packages/move-stdlib\", rev = \"framework/mainnet\" }\n\n[dev-addresses] # For use when developing this module\naddress_to_be_filled_in = \"0x101010101\"\n```\n\n----------------------------------------\n\nTITLE: Bridge Committee Creation Implementation\nDESCRIPTION: Implements the creation of a new bridge committee instance with system authorization check\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun create(ctx: &TxContext): BridgeCommittee {\n    assert!(tx_context::sender(ctx) == @0x0, ENotSystemAddress);\n    BridgeCommittee {\n        members: vec_map::empty(),\n        member_registrations: vec_map::empty(),\n        last_committee_update_epoch: 0,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Security Watchdog Service using Cargo\nDESCRIPTION: Command to compile and run the Security Watchdog Service in release mode using Cargo.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-security-watchdog/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --release -p sui-security-watchdog\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier and Move Plugin (Bash)\nDESCRIPTION: This command installs Prettier and the Move plugin in the current directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-analyzer/prettier-plugin/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prettier@3.1.1 \"$SUI\"/external-crates/move/crates/move-analyzer/prettier-plugin\n```\n\n----------------------------------------\n\nTITLE: Owned Tic Tac Toe Protocol Sequence Diagram\nDESCRIPTION: Sequence diagram depicting the interaction flow in the owned protocol implementation with an Admin intermediary. Shows game creation, mark placement process, turn capability management, and game cleanup.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/tic-tac-toe/README.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    activate Player X\n    Player X->>Admin: new: Game\n    Player X->>Player X: [TurnCap]\n    deactivate Player X\n    Player X->>Game: send_mark: Mark\n    activate Admin\n    Admin->>Game: place_mark\n    Admin->>Player O: [TurnCap]\n    deactivate Admin\n    Player O->>Game: send_mark: Mark\n    activate Admin\n    Admin->>Game: place_mark\n    Admin->>Player X: [TurnCap]\n    deactivate Admin\n    Player X->>Game: ...\n    Admin->>Game: ...\n    Player O->>Game: ...\n    activate Admin\n    Admin->>Game: place_mark\n    Admin->>Player O: [Trophy]\n    deactivate Admin\n    Admin->>Game: burn\n```\n\n----------------------------------------\n\nTITLE: Configuring rust-analyzer in VS Code for pg_backend\nDESCRIPTION: Configure VS Code to enable the pg_backend feature necessary for the Diesel backend in the sui-graphql-rpc project. This step involves editing settings.json to include the 'pg_backend' feature for the Rust Analyzer.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-rpc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rust-analyzer.cargo.features\": [\"pg_backend\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Move Stdlib Module Links\nDESCRIPTION: Markdown list of links to all Move standard library module documentation, including core types, utilities, and data structures.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-  [`address`](../std/address.md#std_address)\n-  [`ascii`](../std/ascii.md#std_ascii)\n-  [`bcs`](../std/bcs.md#std_bcs)\n-  [`bit_vector`](../std/bit_vector.md#std_bit_vector)\n-  [`debug`](../std/debug.md#std_debug)\n-  [`fixed_point32`](../std/fixed_point32.md#std_fixed_point32)\n-  [`hash`](../std/hash.md#std_hash)\n-  [`macros`](../std/macros.md#std_macros)\n-  [`option`](../std/option.md#std_option)\n-  [`string`](../std/string.md#std_string)\n-  [`type_name`](../std/type_name.md#std_type_name)\n-  [`u128`](../std/u128.md#std_u128)\n-  [`u16`](../std/u16.md#std_u16)\n-  [`u256`](../std/u256.md#std_u256)\n-  [`u32`](../std/u32.md#std_u32)\n-  [`u64`](../std/u64.md#std_u64)\n-  [`u8`](../std/u8.md#std_u8)\n-  [`uq32_32`](../std/uq32_32.md#std_uq32_32)\n-  [`uq64_64`](../std/uq64_64.md#std_uq64_64)\n-  [`vector`](../std/vector.md#std_vector)\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions for sui-node Binary\nDESCRIPTION: Command to set the correct file permissions (755) for the downloaded sui-node binary.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ chmod 755 sui-node\n```\n\n----------------------------------------\n\nTITLE: Coverage Analysis Commands\nDESCRIPTION: Commands for analyzing test coverage data, including function summary and source/bytecode coverage for a specific module named 'AModule'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/package_basics/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncoverage summary --summarize-functions\ncoverage source --module AModule\ncoverage bytecode --module AModule\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database\nDESCRIPTION: Command to initialize and setup the development database\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm db:setup:dev\n```\n\n----------------------------------------\n\nTITLE: Get All Pools Example Response\nDESCRIPTION: An example JSON response from the /get_pools endpoint showing actual pool data for DEEP_SUI and DEEP_USDC trading pairs with their respective asset details and parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"pool_id\": \"0xb663828d6217467c8a1838a03793da896cbe745b150ebd57d82f814ca579fc22\",\n\t\t\"pool_name\": \"DEEP_SUI\",\n\t\t\"base_asset_id\": \"0xdeeb7a4662eec9f2f3def03fb937a663dddaa2e215b8078a284d026b7946c270::deep::DEEP\",\n\t\t\"base_asset_decimals\": 6,\n\t\t\"base_asset_symbol\": \"DEEP\",\n\t\t\"base_asset_name\": \"DeepBook Token\",\n\t\t\"quote_asset_id\": \"0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI\",\n\t\t\"quote_asset_decimals\": 9,\n\t\t\"quote_asset_symbol\": \"SUI\",\n\t\t\"quote_asset_name\": \"Sui\",\n\t\t\"min_size\": 100000000,\n\t\t\"lot_size\": 10000000,\n\t\t\"tick_size\": 10000000\n\t},\n\t{\n\t\t\"pool_id\": \"0xf948981b806057580f91622417534f491da5f61aeaf33d0ed8e69fd5691c95ce\",\n\t\t\"pool_name\": \"DEEP_USDC\",\n\t\t\"base_asset_id\": \"0xdeeb7a4662eec9f2f3def03fb937a663dddaa2e215b8078a284d026b7946c270::deep::DEEP\",\n\t\t\"base_asset_decimals\": 6,\n\t\t\"base_asset_symbol\": \"DEEP\",\n\t\t\"base_asset_name\": \"DeepBook Token\",\n\t\t\"quote_asset_id\": \"0xdba34672e30cb065b1f93e3ab55318768fd6fef66c15942c9f7cb846e2f900e7::usdc::USDC\",\n\t\t\"quote_asset_decimals\": 6,\n\t\t\"quote_asset_symbol\": \"USDC\",\n\t\t\"quote_asset_name\": \"USDC\",\n\t\t\"min_size\": 100000000,\n\t\t\"lot_size\": 10000000,\n\t\t\"tick_size\": 10000\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Codeblock Example\nDESCRIPTION: This code snippet demonstrates a codeblock example, showing a section of code, presumably from the Sui framework, related to setting multiple fields in a Display module. It highlights the importance of providing descriptive text before and after the codeblock to explain its purpose and functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\n```\nmodule sui::display {\n/// Sets multiple fields at once\npublic fun add*multiple(\n self: &mut Display,\n keys: vector`<String>`,\n values: vector`<String>`\n) { /* ... */ }\n```\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Dependencies for Sui Network Features\nDESCRIPTION: Package dependency note for enabling indexer and GraphQL functionality when starting a Sui network. The libpq-dev package is required only when using the --with-indexer and --with-graphql flags with the sui start command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/libpq-req.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nlibpq-dev\n```\n\nLANGUAGE: shell\nCODE:\n```\n--with-indexer\n```\n\nLANGUAGE: shell\nCODE:\n```\n--with-graphql\n```\n\nLANGUAGE: shell\nCODE:\n```\nsui start\n```\n\n----------------------------------------\n\nTITLE: Markdown Numbered List Capitalization\nDESCRIPTION: Illustrates creating numbered lists in Markdown with proper capitalization.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n\"1. First list item\\n2. Second list item\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Unassigned Named Address in TOML\nDESCRIPTION: Example of declaring an unassigned named address in the Move.toml file. This allows the address to be assigned any valid value by an importing package.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"example_pkg\"\n...\n[addresses]\nnamed_addr = \"_\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Kiosk with pnpm CLI\nDESCRIPTION: This command uses pnpm to create a new Kiosk. It requires a testnet account and a valid mnemonic phrase exported beforehand.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/kiosk-cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli new\n```\n\n----------------------------------------\n\nTITLE: Component for Deleting a Review - TypeScript\nDESCRIPTION: The moderatorRemovePage component allows moderators to delete inappropriate reviews. It interfaces with the backend to handle review deletions and is built in TypeScript using React.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/reviews-rating.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\n\nconst ModeratorRemovePage = ({ reviewId }) => {\n    const handleDelete = async () => {\n        await fetch(`/api/reviews/${reviewId}`, { method: 'DELETE' });\n    };\n\n    return <button onClick={handleDelete}>Delete Review</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Command\nDESCRIPTION: Command to install project dependencies while ignoring workspace settings.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/frontend/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --ignore-workspace\n```\n\n----------------------------------------\n\nTITLE: Checking Locked Objects by Address Using sui-tool in Sui\nDESCRIPTION: Command to check if all gas objects owned by a specific address are locked on a Sui RPC network using sui-tool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/avoid-equivocation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sui-tool locked-object --address 0x02a212de6a9dfa3a69e22387acfbafbb1a9e591bd9d636e7895dcfc8de05f331 --fullnode-rpc-url <https://rpc.mainnet.sui.io:443>\n```\n\n----------------------------------------\n\nTITLE: Publishing Smart Contract\nDESCRIPTION: Command to publish the smart contract using TypeScript helper script\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node helpers/publish-contracts.ts\n```\n\n----------------------------------------\n\nTITLE: U64 Integer Operations in Move\nDESCRIPTION: The 0x1::u64 module provides utility functions for working with u64 integers, including bitwise operations, math utilities, and conversion functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_51\n\nLANGUAGE: move\nCODE:\n```\n// U64 integer operations\n0x1::u64::bitwise_not       // public fun\n0x1::u64::max               // public fun\n0x1::u64::min               // public fun\n0x1::u64::diff              // public fun\n0x1::u64::divide_and_round_up // public fun\n0x1::u64::pow               // public fun\n0x1::u64::sqrt              // public fun\n0x1::u64::try_as_u8         // public fun\n0x1::u64::try_as_u16        // public fun\n0x1::u64::try_as_u32        // public fun\n0x1::u64::to_string         // public fun\n```\n\n----------------------------------------\n\nTITLE: Dynamic Field Operations in Sui\nDESCRIPTION: Functions for managing dynamic fields in objects, including adding, borrowing, and removing fields.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Field(0x2::dynamic_field)\npublic fun add(0x2::dynamic_field)\npublic fun borrow(0x2::dynamic_field)\npublic fun borrow_mut(0x2::dynamic_field)\npublic fun remove(0x2::dynamic_field)\npublic fun exists_(0x2::dynamic_field)\npublic fun remove_if_exists(0x2::dynamic_field)\npublic fun exists_with_type(0x2::dynamic_field)\npublic(package) fun field_info(0x2::dynamic_field)\npublic(package) fun field_info_mut(0x2::dynamic_field)\npublic(package) fun hash_type_and_key(0x2::dynamic_field)\npublic(package) fun add_child_object(0x2::dynamic_field)\npublic(package) fun borrow_child_object(0x2::dynamic_field)\npublic(package) fun borrow_child_object_mut(0x2::dynamic_field)\npublic(package) fun remove_child_object(0x2::dynamic_field)\npublic(package) fun has_child_object(0x2::dynamic_field)\npublic(package) fun has_child_object_with_ty(0x2::dynamic_field)\n```\n\n----------------------------------------\n\nTITLE: Running a Move Script in Sandbox\nDESCRIPTION: Command for running a Move script in the sandbox environment with a specified signer.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ move sandbox run sources/debug_script.move --signers 0xf\n```\n\n----------------------------------------\n\nTITLE: Invalid Recursive Generic Function with Control Flow in Move\nDESCRIPTION: Demonstrates an invalid recursive generic function that creates infinitely many types, even with control flow that would technically terminate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_18\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public struct A<T> {}\n\n    // Infinitely many types -- NOT allowed.\n    // error!\n    fun foo<T>(n: u64) {\n        if (n > 0) foo<A<T>>(n - 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Updates Example in DeepBook API\nDESCRIPTION: Provides an example response for the order updates endpoint, showing detailed information about a recently placed order in a specific pool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"order_id\": \"170141183464610341308794360958165054983\",\n        \"balance_manager_id\": \"0xd335e8aa19d6dc04273d77e364c936bad69db4905a4ab3b2733d644dd2b31e0a\",\n        \"timestamp\": 1738704071994,\n        \"original_quantity\": 8910,\n        \"remaining_quantity\": 8910,\n        \"filled_quantity\": 0,\n        \"price\": 22449,\n        \"status\": \"Placed\",\n        \"type\": \"sell\"\n    },\n\t...\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Next Epoch Network Public Key in Move\nDESCRIPTION: This function updates the network public key of a validator for the next epoch. It sets the new key and validates the metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_88\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_next_epoch_network_pubkey(\n    self: &mut Validator,\n    network_pubkey: vector<u8>,\n) {\n    self.metadata.next_epoch_network_pubkey_bytes = option::some(network_pubkey);\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ticker Information in DeepBook API\nDESCRIPTION: Describes the response format for the ticker endpoint, which returns volume, last price, and activity status for all trading pairs. The 'isFrozen' field indicates whether a pool is active or inactive.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TRADING_PAIR\": {\n    \"base_volume\": float,\n    \"quote_volume\": float,\n    \"last_price\": float,\n    \"isFrozen\": integer (0 | 1)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Expected Failure in Move Tests\nDESCRIPTION: Shows the simplest form of #[expected_failure] annotation that will pass if a test aborts with any error code, though this approach should be used carefully.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\n#[test]\n#[expected_failure]\nfun test_will_abort_and_pass1() { abort 1 }\n\n#[test]\n#[expected_failure]\nfun test_will_arith_error_and_pass2() { 1/0; }\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for Move Bytecode Verifier\nDESCRIPTION: Shows the directory structure of the Move bytecode verifier project, including the core verifier files, tests, and invalid mutations library.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/move-execution/v2/crates/move-bytecode-verifier/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n*\n├── invalid-mutations  # Library used by proptests\n├── src                # Core bytecode verifier files\n├── tests              # Proptests\n```\n\n----------------------------------------\n\nTITLE: Installing libssl-dev on Linux\nDESCRIPTION: Command to install libssl-dev on Linux systems using apt-get. This library is required for SSL support in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo apt-get install libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v1.0.10\nDESCRIPTION: Version update entry showing dependency update to @mysten/sui v1.2.0\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.10\n\n### Patch Changes\n\n- Updated dependencies [fef99d377f]\n  - @mysten/sui@1.2.0\n```\n\n----------------------------------------\n\nTITLE: Starting Sui Full Node with Configuration\nDESCRIPTION: This shell command starts a Sui Full Node using the 'sui-node' binary with a specified configuration file. Ensure you have a recent snapshot and a configured 'fullnode.yaml'. It's recommended to use a process manager like systemd for production environments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/sui-full-node.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ sui-node --config-path fullnode.yaml\n```\n\n----------------------------------------\n\nTITLE: Customizing Prettier Options in Move Test Files\nDESCRIPTION: Example of how to customize Prettier options for a specific Move test file by adding a comment at the top. This snippet demonstrates setting tabWidth and printWidth options.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\n// options:\n// tabWidth: 4\n// printWidth: 40\n\nmodule prettier::test {}\n```\n\n----------------------------------------\n\nTITLE: Dependency Override of Secondary Implicit Dependency Test\nDESCRIPTION: Tests how overriding a secondary implicit dependency in a dependent package is handled. The root package's implicit dependencies take precedence over the dependent package's explicit dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-package/tests/test_sources/implicits/README.md#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\na:\n  D: d\n\nd:\n  I2: i2a\n\ni2a: no deps\n```\n\n----------------------------------------\n\nTITLE: Viewing Resource Usage for All Docker Containers\nDESCRIPTION: Displays live resource usage statistics for all running Docker containers. This provides a comprehensive overview of resource allocation across the Docker environment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker stats -a\n```\n\n----------------------------------------\n\nTITLE: Implementing power function for u256 in Move\nDESCRIPTION: Calculates the power of a u256 base raised to a u8 exponent using a macro from the std::macros module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pow(base: u256, exponent: u8): u256 {\n    std::macros::num_pow!(base, exponent)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nodefw Application with Logging in Bash\nDESCRIPTION: Command to run the nodefw application with info-level logging enabled. Requires appropriate Linux capabilities or sudo privileges.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/bpf/nodefw/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=info cargo bpf run\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Container Resource Usage\nDESCRIPTION: Displays live resource usage statistics (CPU, memory, etc.) for Docker containers. This command is helpful for monitoring the performance of the Full node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker stats\n```\n\n----------------------------------------\n\nTITLE: Checking Local Database Tables\nDESCRIPTION: This snippet describes how to login to the postgres database and check the existing tables using `\\dt` command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-test-validator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"/dt\"\n```\n\n----------------------------------------\n\nTITLE: Get Active Environment using Sui CLI\nDESCRIPTION: This command retrieves the currently active environment configured in the Sui CLI.  It's a fundamental command for identifying the network used for transactions and other operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client active-env\"\n```\n\n----------------------------------------\n\nTITLE: Checking Testbed Instance Status with Sui Orchestrator\nDESCRIPTION: Command to check the current status of all deployed testbed instances. Shows which instances are available (green) and which are stopped (red).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-aws-orchestrator/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-aws-orchestrator testbed status\n```\n\n----------------------------------------\n\nTITLE: List Gas Coins for Active Address using Sui CLI\nDESCRIPTION: This command lists all gas coins available for the currently active address. Gas coins are used to pay for transaction fees.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client gas\"\n```\n\n----------------------------------------\n\nTITLE: Installing Sui TypeScript SDK\nDESCRIPTION: This Shell command installs the Sui TypeScript SDK as a dependency in a Node.js project. The SDK is used for executing publish and upgrade commands for Sui packages within TypeScript applications.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install @mysten/sui\n```\n\n----------------------------------------\n\nTITLE: Implementing bitwise NOT operation for u16\nDESCRIPTION: Returns the bitwise NOT of a u16 value by XORing with the maximum value. Flips all bits from 0 to 1 and 1 to 0.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u16.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bitwise_not(x: u16): u16 {\n    x ^ max_value!()\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Aliases in a Single Use Statement\nDESCRIPTION: Shows how to create multiple aliases for module members in a single 'use' statement.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/uses.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nuse std::vector::push_back;\nuse std::option::{some as s, none as n};\n\nfun new_vec(): vector<std::option::Option<u8>> {\n    let mut v = vector[];\n    push_back(&mut v, s(0));\n    push_back(&mut v, n());\n    v\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Function to Mutable Vector Elements in Rust\nDESCRIPTION: This macro function performs an action on each element of a vector using mutable references, allowing modification of the elements.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_18\n\nLANGUAGE: Rust\nCODE:\n```\npublic macro fun do_mut<$T, $R: drop>($v: &mut vector<$T>, $f: |&mut $T| -> $R) {\n    let v = $v;\n    v.length().do!(|i| $f(&mut v[i]))\n}\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Issues in Sui Sandbox\nDESCRIPTION: Command to run diagnostics and troubleshoot problems in the Sui sandbox environment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/doctor_with_stdlib/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsandbox doctor\n```\n\n----------------------------------------\n\nTITLE: Searching Logs for a Specific Term\nDESCRIPTION: This command searches the Sui node logs for a specific term using journalctl.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n$ journalctl -u sui-node -g <SEARCH_TERM>\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens in Sui Framework (Rust)\nDESCRIPTION: This function transfers a token to the transaction sender using the provided transaction context. It relies on the transfer module to execute the transfer operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_18\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun keep<T>(token: sui::token::Token<T>, ctx: &mut sui::tx_context::TxContext) {\n    transfer::transfer(token, ctx.sender());\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Struct Layouts Without Type Arguments\nDESCRIPTION: Command to generate struct layouts for struct G in module M1 without specifying any type arguments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/generate_struct_layout/args.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct G\n```\n\n----------------------------------------\n\nTITLE: Implementing Burn Ticket Structure in Rust\nDESCRIPTION: Definition of a BurnTicket struct that allows users to burn assets with proper authorization.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_29\n\nLANGUAGE: rust\nCODE:\n```\nstruct BurnTicket<phantom T> has key {\n\tid: UID,\n\ttokenized_asset_id: ID // the tokenized asset that this ticket gives access to burn\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MAX_COMMISSION_RATE Constant in Move\nDESCRIPTION: Constant defining the maximum commission rate (2000) that validators can set.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_23\n\nLANGUAGE: move\nCODE:\n```\nconst MAX_COMMISSION_RATE: u64 = 2000;\n```\n\n----------------------------------------\n\nTITLE: Updating Primary Address for Next Epoch in Move\nDESCRIPTION: This function updates the primary address of a validator for the next epoch. It validates the address length and stores it in the next_epoch_primary_address field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_82\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun update_next_epoch_primary_address(\n    self: &mut Validator,\n    primary_address: vector<u8>,\n) {\n    assert!(\n        primary_address.length() <= MAX_VALIDATOR_METADATA_LENGTH,\n        EValidatorMetadataExceedingLengthLimit,\n    );\n    let primary_address = primary_address.to_ascii_string().to_string();\n    self.metadata.next_epoch_primary_address = option::some(primary_address);\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Move Package for Upgrade Policy\nDESCRIPTION: Shell command to create a new Move package named 'policy' for the upgrade policy implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ sui move new policy\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sui Project in Current Directory\nDESCRIPTION: Command to create a new Sui project named 'foo' in the current directory using the '--path .' option.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/lint_flags/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnew --path . foo\n```\n\n----------------------------------------\n\nTITLE: Transferring Multiple Objects\nDESCRIPTION: Shows how to split gas into multiple coins and transfer them to a specific address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/ptb.mdx#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n--assign to_address @0x02a212de6a9dfa3a69e22387acfbafbb1a9e591bd9d636e7895dcfc8de05f331 \\\n--split-coins gas \"[1,2,3]\" \\\n--assign s \\\n--transfer-objects \"[s.0, s.1, s.2]\" to_address \\\n--gas-budget 10000000\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Order ID in DeepBook CLOB Order Query (Move)\nDESCRIPTION: This function returns the next order ID for pagination in the DeepBook CLOB order query.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/order_query.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun next_order_id(page: &OrderPage): Option<u64> {\n    page.next_order_id\n}\n```\n\n----------------------------------------\n\nTITLE: Leaving Validator Set\nDESCRIPTION: Command for an active validator to leave the validator set using sui_system::request_remove_validator function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call --package 0x3 --module sui_system --function request_remove_validator --args 0x5 --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Module Imports in Move\nDESCRIPTION: Import statements for the type_name module, importing address, ascii, option, and vector modules from the standard library.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/type_name.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nuse std::address;\nuse std::ascii;\nuse std::option;\nuse std::vector;\n```\n\n----------------------------------------\n\nTITLE: Running Format Tests After BCS Manifest Update\nDESCRIPTION: Demonstrates verifying the updated manifest by running the format tests and confirming they pass, then checking which files were modified during the update process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-core/tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhuitseeker@Garillots-MBP.localdomain➜tmp/sui/sui_core(main✗)» cargo test format 2>&1 |tail -n 40\n    Finished test [unoptimized + debuginfo] target(s) in 0.35s\n     Running unittests (/Users/huitseeker/tmp/sui/target/debug/deps/sui_core-5796871991341984)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 52 filtered out; finished in 0.00s\n\n     Running tests/format.rs (/Users/huitseeker/tmp/sui/target/debug/deps/format-ecdfa91a67810be3)\n\nrunning 1 test\n    Finished dev [unoptimized + debuginfo] target(s) in 0.20s\n     Running `target/debug/examples/generate-format test`\ntest test_format ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.48s\nhuitseeker@Garillots-MBP.localdomain➜tmp/sui/sui_core(main✗)» git status -s\n M tests/staged/sui.yaml\n M ../sui_types/src/error.rs\n M ../sui_types/src/messages.rs\n```\n\n----------------------------------------\n\nTITLE: Scalar Multiplication of BLS12-381 G1 Element\nDESCRIPTION: Performs scalar multiplication of a BLS12-381 G1 group element by a scalar.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\npublic fun g1_mul(e1: &Element<Scalar>, e2: &Element<G1>): Element<G1> {\n    group_ops::mul(G1_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prettier Move Tests with pnpm\nDESCRIPTION: Command to run the Prettier Move tests using pnpm.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Bridge Indexer Configuration\nDESCRIPTION: YAML configuration file for Bridge Indexer specifying network endpoints, contract addresses, and runtime parameters for both mainnet and testnet environments\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-bridge-indexer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nremote_store_url: https://checkpoints.mainnet.sui.io\neth_rpc_url: {eth rpc url}\nsui_rpc_url: {sui rpc url}\n\nconcurrency: 500\ncheckpoints_path: {path-for-checkpoints}\n\neth_sui_bridge_contract_address: 0xda3bD1fE1973470312db04551B65f401Bc8a92fD # <-- mainnet, 0xAE68F87938439afEEDd6552B0E83D2CbC2473623 for testnet\nmetric_port: {port to export metrics}\n\nsui_bridge_genesis_checkpoint: 55455583 # <-- mainnet, 43917829 for testnet\n# genesis block number for eth\neth_bridge_genesis_block: 20811249 # <-- mainnet, 5997013 for testnet\n\neth_ws_url: {eth websocket url}\n```\n\n----------------------------------------\n\nTITLE: Restoring from RocksDB Snapshot using AWS CLI\nDESCRIPTION: This snippet uses AWS CLI to copy a RocksDB snapshot of a specified epoch from a cloud storage bucket to a local Sui node directory for restoration. It assumes you have AWS credentials configured.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/snapshots.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws s3 cp s3://<BUCKET_NAME>/epoch_10 /opt/sui/db/authorities_db/full_node_db/live --recursive --request-payer\n```\n\n----------------------------------------\n\nTITLE: Implementing EscrowDashboard Component\nDESCRIPTION: Basic React component implementation for the Escrows page displaying a dashboard title.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nexport function EscrowDashboard() {\n  return (\n    <div>\n      <h1>Escrow Dashboard</h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Move.lock Package Entries Example\nDESCRIPTION: Example of how dependencies are recorded in the Move.lock file, showing both git and local dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/packages.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n...\n\n[[move.package]]\nname = \"A\"\nsource = { git = \"https://github.com/b/c.git\", subdir = \"e/f\", rev = \"a1b2c3\" }\n\n[[move.package]]\nname = \"B\"\nsource = { local = \"../local-dep\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table Headers\nDESCRIPTION: Example showing how to format table headers in Markdown with bold column names and proper alignment\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| **Column one** | **Column two** | **Column three** | **Column four** |\n```\n\n----------------------------------------\n\nTITLE: Viewing Sui Node Metrics\nDESCRIPTION: Commands to view and search for Sui Node metrics exposed via the local HTTP interface.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -s http://localhost:9184/metrics\ncurl http://localhost:9184/metrics | grep <METRIC>\n```\n\n----------------------------------------\n\nTITLE: Conditional Abort in Vector Operation\nDESCRIPTION: Shows how to use abort to handle error conditions in a function that pops two items from a vector, aborting if the vector doesn't have enough items.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abort-and-assert.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nuse std::vector;\nfun pop_twice<T>(v: &mut vector<T>): (T, T) {\n    if (vector::length(v) < 2) abort 42;\n    (vector::pop_back(v), vector::pop_back(v))\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Constant Value Examples in Move\nDESCRIPTION: Demonstrates constants with simple literal values of different types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/constants.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nconst MY_BOOL: bool = false;\nconst MY_ADDRESS: address = @0x70DD;\nconst BYTES: vector<u8> = b\"hello world\";\nconst HEX_BYTES: vector<u8> = x\"DEADBEEF\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Placeholder for Move Standard Library Index\nDESCRIPTION: A placeholder using markdown syntax that indicates where the Move standard library module index will be generated or inserted.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/doc_templates/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> {{move-index}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Archival Fallback in YAML\nDESCRIPTION: This configuration enables a Sui node to fallback to Mysten Labs' public S3 archives when the node lags behind. It specifies bucket details for either testnet or mainnet, and uses anonymous access via no-sign-request flag.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/archives.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstate-archive-read-config:\n  - object-store-config:\n      object-store: \"S3\"\n      # Use mysten-testnet-archives for testnet \n      # Use mysten-mainnet-archives for mainnet\n      bucket: \"mysten-<testnet|mainnet>-archives\"\n      # you can either provide your own aws credentials via \"aws-secret-access-key\" and\n      # \"aws-access-key-id\" or set no-sign-request: true\n      no-sign-request: true\n      aws-region: \"us-west-2\"\n      object-store-connection-limit: 20\n    # How many objects to read ahead when catching up  \n    concurrency: 5\n    # Whether to prune local state based on latest checkpoint in archive.\n    # This should stay false for most use cases\n    use-for-pruning-watermark: false\n```\n\n----------------------------------------\n\nTITLE: Markdown Inline Link Example\nDESCRIPTION: Demonstrates how to use inline links in Markdown, incorporating keywords from the target topic title.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n\"Before you install Sui, make sure to install the [prerequisites](/guides/developer/getting-started/sui-install.mdx#prerequisites).\"\n```\n\n----------------------------------------\n\nTITLE: Updating Asset Notional Price in Bridge Treasury\nDESCRIPTION: Updates the USD notional price for a specified token in the bridge treasury. Validates the token ID exists and new price is positive before updating. Emits an UpdateTokenPriceEvent after successful update.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/treasury.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun update_asset_notional_price(\n    self: &mut BridgeTreasury,\n    token_id: u8,\n    new_usd_price: u64,\n) {\n    let type_name = self.id_token_type_map.try_get(&token_id);\n    assert!(type_name.is_some(), EUnsupportedTokenType);\n    assert!(new_usd_price > 0, EInvalidNotionalValue);\n    let type_name = type_name.destroy_some();\n    let metadata = self.supported_tokens.get_mut(&type_name);\n    metadata.notional_value = new_usd_price;\n    emit(UpdateTokenPriceEvent {\n        token_id,\n        new_price: new_usd_price,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sui indexer as a reader\nDESCRIPTION: This command runs the Sui indexer as a reader, which acts as a JSON RPC server.  It uses the provided database URL and RPC client URL.  The `--rpc-server-worker` flag enables the JSON RPC server functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin sui-indexer -- --db-url \"<DATABASE_URL>\" --rpc-client-url \"https://fullnode.devnet.sui.io:443\" --rpc-server-worker\n```\n\n----------------------------------------\n\nTITLE: Restarting Postgres Service on Linux\nDESCRIPTION: This snippet restarts the Postgres service on Linux using `/etc/init.d/postgresql`.  This is required for the 'max_connections' change to take effect.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-e2e-tests/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n/etc/init.d/postgresql restart\n```\n\n----------------------------------------\n\nTITLE: Selecting Protocol for Benchmarking in Sui Orchestrator\nDESCRIPTION: Code example showing how to choose between benchmarking Sui or Narwhal protocols by setting the Protocol and BenchmarkType fields in the main.rs file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-aws-orchestrator/README.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n// Sui\nuse protocol::sui::{SuiBenchmarkType, SuiProtocol};\ntype Protocol = SuiProtocol;\ntype BenchmarkType = SuiBenchmarkType;\n// Narwhal\nuse protocol::narwhal::{NarwhalBenchmarkType, NarwhalProtocol};\ntype Protocol = NarwhalProtocol;\ntype BenchmarkType = NarwhalBenchmarkType;\n```\n\n----------------------------------------\n\nTITLE: Creating ASCII Character from Byte in Move\nDESCRIPTION: Function that converts a byte to a Char, validating that it represents a valid ASCII character. Aborts with EInvalidASCIICharacter if the byte is not valid ASCII.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun char(byte: u8): Char {\n    assert!(is_valid_char(byte), EInvalidASCIICharacter);\n    Char { byte }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sui CLI using Cargo\nDESCRIPTION: This shell command installs the latest version of the Sui CLI by cloning from the Sui repository on GitHub. It requires specifying a branch, which can be `main`, `devnet`, `testnet`, or `mainnet`, to determine the version to install. The `tracing` feature must be enabled to add Move test coverage and debugger support.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --locked --git https://github.com/MystenLabs/sui.git --branch <BRANCH-NAME> --features tracing sui\n```\n\n----------------------------------------\n\nTITLE: Root Override of Secondary Dependency Test\nDESCRIPTION: Tests overriding a secondary dependency in the root package. The override should propagate to all packages that would normally use the implicit dependency.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-package/tests/test_sources/implicits/README.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\na:\n  B: b\n  I2: i2a\n\nb: no deps\ni2a: no deps\n```\n\n----------------------------------------\n\nTITLE: Updating Node URL in Move\nDESCRIPTION: Updates the HTTP REST URL for a committee member. Validates that the sender is a committee member before allowing the update.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_node_url(self: &mut BridgeCommittee, new_url: vector<u8>, ctx: &TxContext)\n```\n\n----------------------------------------\n\nTITLE: Address Operations in Sui\nDESCRIPTION: Functions for address manipulation, including conversion to/from various formats and string representations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_u256(0x2::address)\npublic fun from_u256(0x2::address)\npublic fun from_bytes(0x2::address)\npublic fun to_bytes(0x2::address)\npublic fun to_ascii_string(0x2::address)\npublic fun to_string(0x2::address)\npublic fun from_ascii_bytes(0x2::address)\nfun hex_char_value(0x2::address)\npublic fun length(0x2::address)\npublic fun max(0x2::address)\n```\n\n----------------------------------------\n\nTITLE: Simple Implicit Dependency Addition Test\nDESCRIPTION: Tests the case where a package with no explicit dependencies should have the standard implicit dependencies added automatically.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-package/tests/test_sources/implicits/README.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\na: no deps\n```\n\n----------------------------------------\n\nTITLE: Prettier Configuration for Move Plugin (JSON)\nDESCRIPTION: This JSON configuration enables the Move plugin for Prettier in VSCode.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-analyzer/prettier-plugin/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\"plugins\": [\n    \"prettier-plugin-move\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Assert in Loop for Vector Bound Checking\nDESCRIPTION: Shows how to use the assert macro within a loop to check if all numbers in a vector are below a specified bound.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abort-and-assert.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nuse std::vector;\nfun check_vec(v: &vector<u64>, bound: u64) {\n    let i = 0;\n    let n = vector::length(v);\n    while (i < n) {\n        let cur = *vector::borrow(v, i);\n        assert!(cur <= bound, 42); // Now uses 'assert'\n        i = i + 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Singleton Bridge UID in Move\nDESCRIPTION: Creates the UID for the singleton Bridge object. This should only be called once from the bridge module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\nfun bridge(): UID {\n    UID {\n        id: ID { bytes: SUI_BRIDGE_ID },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sui Client PTB Transfer Objects\nDESCRIPTION: This example demonstrates how to transfer objects to a specified address using the `sui client ptb` command. It transfers objects from the `ARRAY_OF_OBJECTS` to the address `0x02a212de6a9dfa3a69e22387acfbafbb1a9e591bd9d636e7895dcfc8de05f331`, using the gas coin with ID `0x00002819ee07a66e53800495ccf5eeade8a02054a2e0827546c70e4b226f0495`.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/ptb.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client ptb --transfer-objects \"[ARRAY_OF_OBJECTS]\" @0x02a212de6a9dfa3a69e22387acfbafbb1a9e591bd9d636e7895dcfc8de05f331 --gas-coin @0x00002819ee07a66e53800495ccf5eeade8a02054a2e0827546c70e4b226f0495\n```\n\n----------------------------------------\n\nTITLE: Update Gas Price via Sui Validator CLI\nDESCRIPTION: This command updates the gas price for the next epoch to 500 MIST using the `sui validator` CLI tool. It requires the Sui CLI to be configured and connected to a Sui network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/validator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sui validator  update-gas-price 500\n```\n\n----------------------------------------\n\nTITLE: Comparing Source Directories and Move.toml Files in Sui\nDESCRIPTION: This bash script executes two diff commands to compare files between directories. The first command recursively compares 'sources' and 'migration_sources' directories, while the second compares 'Move.toml' with 'Move.toml.expected'. The -r flag enables recursive comparison and the -s flag reports when files are identical.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/migration_multiline/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndiff -r -s sources migration_sources\ndiff -s Move.toml Move.toml.expected\n```\n\n----------------------------------------\n\nTITLE: Markdown Numbered List\nDESCRIPTION: Demonstrates the correct Markdown syntax for creating a numbered list. Each item in the list starts with a number followed by a period.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n\"1. Create a fork of the repo.\\n2. Clone your fork of the repo.\\n3. Install Sui.\"\n```\n\n----------------------------------------\n\nTITLE: Verifying cURL installation on Linux\nDESCRIPTION: Command to verify that cURL has been installed correctly on Linux by checking its version.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ curl --version\n```\n\n----------------------------------------\n\nTITLE: Swapping Exact Base for Quote with Metadata in DeepBook CLOB v2 (Move)\nDESCRIPTION: Function for swapping an exact amount of base asset for quote asset while returning additional metadata about matched orders. Currently implemented as a stub that aborts with code 1337.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_22\n\nLANGUAGE: move\nCODE:\n```\npublic fun swap_exact_base_for_quote_with_metadata<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _client_order_id: u64,\n    _account_cap: &AccountCap,\n    _quantity: u64,\n    _base_coin: Coin<BaseAsset>,\n    _quote_coin: Coin<QuoteAsset>,\n    _clock: &Clock,\n    _ctx: &mut TxContext,\n): (Coin<BaseAsset>, Coin<QuoteAsset>, u64, vector<MatchedOrderMetadata<BaseAsset, QuoteAsset>>) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Running Indexer Service\nDESCRIPTION: Command to run the event indexer service independently\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm indexer\n```\n\n----------------------------------------\n\nTITLE: Displaying Validator Metadata\nDESCRIPTION: Commands to display validator metadata for the current validator or a specified validator address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/node-tools.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsui validator display-metadata\n```\n\nLANGUAGE: bash\nCODE:\n```\nsui validator display-metadata <validator-address>\n```\n\n----------------------------------------\n\nTITLE: Installing GCC on Linux\nDESCRIPTION: Command to install the GNU Compiler Collection (GCC) on Linux systems using apt-get. GCC is required for compiling Sui and its dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo apt-get install gcc\n```\n\n----------------------------------------\n\nTITLE: Comparing Sui Project Files After Migration\nDESCRIPTION: This shell script compares the contents of the 'sources' and 'tests' directories with their migrated versions, and checks if the Move.toml file matches the expected output after migration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/migration/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmigrate\n> diff -r -s sources migration_sources\n> diff -r -s tests migration_tests\n> diff -s Move.toml Move.toml.expected\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials in .aws/credentials File for Orchestrator\nDESCRIPTION: Format for storing AWS credentials in a local configuration file that grants programmatic access to AWS resources. Contains the access key ID and secret access key without specifying a region.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-aws-orchestrator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[default]\naws_access_key_id = YOUR_ACCESS_KEY_ID\naws_secret_access_key = YOUR_SECRET_ACCESS_KEY\n```\n\n----------------------------------------\n\nTITLE: Split Coin using Sui Client\nDESCRIPTION: This command splits a coin into two coins: one with the specified amount and the other with the remaining amount. Requires specifying the coin ID and the amount for the split.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client split-coin `<br/>&nbsp;&nbsp;`--coin-id COIN_ID `<br/>&nbsp;&nbsp;`--amounts 1000\"\n```\n\n----------------------------------------\n\nTITLE: Installing wget and curl with brew\nDESCRIPTION: Installs wget and curl using the homebrew package manager on macOS. These tools are commonly used for downloading files and making HTTP requests, respectively.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nbrew install wget curl\n```\n\n----------------------------------------\n\nTITLE: Testnet Peer Configuration for Sui Full Node\nDESCRIPTION: This YAML snippet provides the configuration for establishing peer connections in the Testnet environment of the Sui network, which facilitates necessary state synchronization for the Full Node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/sui-full-node.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\np2p-config:\n  seed-peers:\n    - address: /dns/yto-tnt-ssfn-01.testnet.sui.io/udp/8084\n      peer-id: 2ed53564d5581ded9b6773970ac2f1c84d39f9edf01308ff5a1ffe09b1add7b3\n    - address: /dns/yto-tnt-ssfn-00.testnet.sui.io/udp/8084\n      peer-id: 6563732e5ab33b4ae09c73a98fd37499b71b8f03c27b5cc51acc26934974aff2\n    - address: /dns/nrt-tnt-ssfn-00.testnet.sui.io/udp/8084\n      peer-id: 23a1f7cd901b6277cbedaa986b3fc183f171d800cabba863d48f698f518967e1\n    - address: /dns/ewr-tnt-ssfn-00.testnet.sui.io/udp/8084\n      peer-id: df8a8d128051c249e224f95fcc463f518a0ebed8986bbdcc11ed751181fecd38\n    - address: /dns/lax-tnt-ssfn-00.testnet.sui.io/udp/8084\n      peer-id: f9a72a0a6c17eed09c27898eab389add704777c03e135846da2428f516a0c11d\n    - address: /dns/lhr-tnt-ssfn-00.testnet.sui.io/udp/8084\n      peer-id: 9393d6056bb9c9d8475a3cf3525c747257f17c6a698a7062cbbd1875bc6ef71e\n    - address: /dns/mel-tnt-ssfn-00.testnet.sui.io/udp/8084\n      peer-id: c88742f46e66a11cb8c84aca488065661401ef66f726cb9afeb8a5786d83456e\n```\n\n----------------------------------------\n\nTITLE: Disassembling Sui Package\nDESCRIPTION: Command to disassemble a specific package named 'Test' and extract a module named 'm' for inspection.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/build_with_warnings/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndisassemble --package Test --name m\n```\n\n----------------------------------------\n\nTITLE: Running Multisig Toolkit Docker Container - Bash\nDESCRIPTION: This snippet shows the command to run the Multisig Toolkit Docker container, exposing port 4173. This allows interaction with the application through the specified port on the host machine. Ensure the image was built successfully before running this command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/multisig-toolkit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 4173:4173 multisig-toolkit:latest\n```\n\n----------------------------------------\n\nTITLE: Getting Fungible Staked Sui Pool ID in Move\nDESCRIPTION: Obtains the pool ID for a fungible staked Sui object. Requires a reference to FungibleStakedSui as input and returns an ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_25\n\nLANGUAGE: Move\nCODE:\n```\npublic fun fungible_staked_sui_pool_id(fungible_staked_sui: &sui_system::staking_pool::FungibleStakedSui): ID {\n    fungible_staked_sui.pool_id\n}\n```\n\n----------------------------------------\n\nTITLE: Escrow Component Implementation in React\nDESCRIPTION: React component for displaying individual escrow objects with cancellation functionality. Handles display of escrow status, object details, and user interactions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCurrentAccount, useSuiClientQuery } from \"@mysten/dapp-kit\";\nimport { SuiObjectDisplay } from \"@/components/SuiObjectDisplay\";\nimport { Button } from \"@radix-ui/themes\";\nimport { ArrowDownIcon, ArrowUpIcon, Cross1Icon } from \"@radix-ui/react-icons\";\nimport { CONSTANTS, QueryKey } from \"@/constants\";\nimport { ExplorerLink } from \"../ExplorerLink\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { ApiEscrowObject } from \"@/types/types\";\nimport { useCancelEscrowMutation } from \"@/mutations/escrow\";\nimport { useGetLockedObject } from \"@/hooks/useGetLockedObject\";\nimport { LockedObject } from \"../locked/LockedObject\";\n\nexport function Escrow({ escrow }: { escrow: ApiEscrowObject }) {\n  const account = useCurrentAccount();\n  const [isToggled, setIsToggled] = useState(true);\n  const { mutate: cancelEscrowMutation, isPending: pendingCancellation } =\n    useCancelEscrowMutation();\n\n  const suiObject = useSuiClientQuery(\"getObject\", {\n    id: escrow?.itemId,\n    options: {\n      showDisplay: true,\n      showType: true,\n    },\n  });\n\n  const lockedData = useQuery({\n    queryKey: [QueryKey.Locked, escrow.keyId],\n    queryFn: async () => {\n      const res = await fetch(\n        `${CONSTANTS.apiEndpoint}locked?keyId=${escrow.keyId}`,\n      );\n      return res.json();\n    },\n    select: (data) => data.data[0],\n    enabled: !escrow.cancelled,\n  });\n\n  const { data: suiLockedObject } = useGetLockedObject({\n    lockedId: lockedData.data?.objectId,\n  });\n\n  const getLabel = () => {\n    if (escrow.cancelled) return \"Cancelled\";\n    if (escrow.swapped) return \"Swapped\";\n    if (escrow.sender === account?.address) return \"You offer this\";\n    if (escrow.recipient === account?.address) return \"You'll receive this\";\n    return undefined;\n  };\n\n  return (\n    <SuiObjectDisplay\n      object={suiObject.data?.data!}\n      label={getLabel()}\n      labelClasses={getLabelClasses()}\n    >\n      /* Component JSX content */\n    </SuiObjectDisplay>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an EarmarkedPayment Struct in Move\nDESCRIPTION: A key-only struct that wraps an IdentifiedPayment and specifies which address the payment is earmarked for. This structure enables controlled payment routing in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/move/transfer-to-object/README.md#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\nstruct EarmarkedPayment has key {\n    id: UID,\n    payment: IdentifiedPayment,\n    for: address,\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sui Balance in Move\nDESCRIPTION: Fetches the current balance of a staking pool. It requires a reference to a StakingPool and returns the balance as a 64-bit unsigned integer.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sui_balance(pool: &sui_system::staking_pool::StakingPool): u64 { pool.sui_balance }\n```\n\n----------------------------------------\n\nTITLE: Running Anemo Benchmark Client\nDESCRIPTION: Command to run the Anemo benchmark client that connects to a server. Configures the client to use port 5555, connect to server at 127.0.0.1:5556, and send 10 requests each way with 5000-byte payloads.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/anemo-benchmark/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntarget/debug/anemo-benchmark --port 5555 --addrs 127.0.0.1:5556 --requests-up 10 --requests-down 10 --size-up 5000 --size-down 5000\n```\n\n----------------------------------------\n\nTITLE: Complex If Expression with Blocks in Move\nDESCRIPTION: Advanced example showing if expressions with multiple statements in blocks and nested conditions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/conditionals.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nlet maximum = if (x > y) x else y;\nif (maximum < 10) {\n    x = x + 10;\n    y = y + 10;\n} else if (x >= 10 && y >= 10) {\n    x = x - 10;\n    y = y - 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Move Package\nDESCRIPTION: Complete example of publishing a Move package to the chain, including getting the sender address, publishing the package, and transferring the upgrade capability.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/ptb.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client ptb \\\n--move-call sui::tx_context::sender \\\n--assign sender \\\n--publish \".\" \\\n--assign upgrade_cap \\\n--transfer-objects \"[upgrade_cap]\" sender \\\n--gas-budget 100000000\n```\n\n----------------------------------------\n\nTITLE: Checking Gas Coin Objects for Active Address\nDESCRIPTION: Command to view the coin objects (gas) for the active address in the Sui local network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/local-network.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client gas\n```\n\n----------------------------------------\n\nTITLE: Publishing Module in Sui Sandbox\nDESCRIPTION: This command publishes a module in the Sui blockchain sandbox environment with verbose output.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/module_publish_view/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox publish -v\n```\n\n----------------------------------------\n\nTITLE: Processing Pending Stakes and Withdraws in Move\nDESCRIPTION: Processes pending stakes and withdrawals at the end of the epoch. The function operates on a mutable reference to a Validator and a transaction context. It calls another function to handle the stakes and withdrawals.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_41\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun process_pending_stakes_and_withdraws(self: &mut sui_system::validator::Validator, ctx: &sui::tx_context::TxContext) {\n    self.staking_pool.process_pending_stakes_and_withdraws(ctx);\n    // TODO: bring this assertion back when we are ready.\n    // assert!(stake_amount(self) == self.next_epoch_stake, EInvalidStakeAmount);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Borrow Functionality in Move\nDESCRIPTION: This snippet defines structures and functions for implementing a borrow system in Move, allowing for controlled access to resources.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_22\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Referent\npublic struct Borrow\npublic fun new\npublic fun borrow\npublic fun put_back\npublic fun destroy\n```\n\n----------------------------------------\n\nTITLE: Building Userspace Component in Bash\nDESCRIPTION: Command to build the userspace component of the nodefw project.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/bpf/nodefw/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Destroying Empty ObjectBag - Move\nDESCRIPTION: This function destroys an empty ObjectBag. It takes ownership of the bag and aborts if the bag is not empty.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_bag.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_empty(bag: ObjectBag) {\n    let ObjectBag { id, size } = bag;\n    assert!(size == 0, EBagNotEmpty);\n    id.delete()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EInvalidProofOfPossession Error Constant in Move\nDESCRIPTION: Error constant (0) used when the proof_of_possession field in ValidatorMetadata is invalid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nconst EInvalidProofOfPossession: u64 = 0;\n```\n\n----------------------------------------\n\nTITLE: Creating Transfer Policy on Sui Blockchain using Shell\nDESCRIPTION: Command to create a TransferPolicy and ProtectedTP for a tokenized asset. After execution, users should save the TransferPolicy ID and ProtectedTP ID to their .env file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run call create-tp\n```\n\n----------------------------------------\n\nTITLE: Update Validator Worker Public Key\nDESCRIPTION: Updates a validator's worker public key for the next epoch. The change takes effect in the following epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_30\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_next_epoch_worker_pubkey(\n    self: &mut SuiSystemState,\n    worker_pubkey: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_validator_next_epoch_worker_pubkey(worker_pubkey, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Validator is Preactive in Move\nDESCRIPTION: Returns true if the validator is considered preactive. This provides a check on the validator's active status within the staking system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_42\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_preactive(self: &sui_system::validator::Validator): bool {\n    self.staking_pool.is_preactive()\n}\n```\n\n----------------------------------------\n\nTITLE: Mutable Publisher Access with Registry in Rust\nDESCRIPTION: Accessible only by the platform cap owner, this function provides mutable access to the publisher via the registry. It is crucial for maintaining exclusive operations on the publisher object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\npublic fun publisher_mut(\n    _: &PlatformCap,\n    registry: &mut Registry\n): &mut Publisher {}\n```\n\n----------------------------------------\n\nTITLE: Markdown Bulleted List\nDESCRIPTION: Demonstrates the correct Markdown syntax for creating a bulleted list. Each item in the list starts with a hyphen (-).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n\"Sui Explorer used to support the following browsers:\\n\\n- Firefox version X or later\\n- Chrome version X or later\\n- Edge version X or later\"\n```\n\n----------------------------------------\n\nTITLE: Starting Individual Rosetta Servers with Docker\nDESCRIPTION: Commands for starting individual Rosetta online or offline servers using docker run with the Sui Rosetta image.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rosetta/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run mysten/sui-rosetta-devnet sui-rosetta start-online-server\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker run mysten/sui-rosetta-devnet sui-rosetta start-offline-server\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure in Text Format\nDESCRIPTION: Shows the organization of the bytecode verifier module, including core files, tests, and library for property-based testing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/move-execution/v0/crates/move-bytecode-verifier/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n*\n├── invalid-mutations  # Library used by proptests\n├── src                # Core bytecode verifier files\n├── tests              # Proptests\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Testbed Instances with Sui Orchestrator\nDESCRIPTION: Command to deploy a specified number of instances per region using the sui-aws-orchestrator tool. Creates EC2 instances based on the configuration in settings.json.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-aws-orchestrator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-aws-orchestrator -- testbed deploy --instances 2\n```\n\n----------------------------------------\n\nTITLE: ASCII Character Creation and Validation - Move\nDESCRIPTION: Function to create a validated ASCII character from a byte value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun char(byte: u8): Char {\n    assert!(is_valid_char(byte), EInvalidASCIICharacter);\n    Char { byte }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigMap for Sui Edge Proxy in Kubernetes\nDESCRIPTION: This YAML configuration creates a ConfigMap named 'sui-edge-proxy-config' in the 'benchmark-rpc-testnet' namespace. It defines the proxy's listen address, metrics address, and the addresses for execution and read peers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-edge-proxy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: sui-edge-proxy-config\n  namespace: benchmark-rpc-testnet\ndata:\n  proxy.yaml: |\n    ---\n    listen-address: \"0.0.0.0:8080\"\n    metrics-address: \"0.0.0.0:9184\"\n\n    execution-peer:\n      # Fullnode address for executing requests, this is created by a ServiceExport resource, available in gke fleet clusters:\n      # https://cloud.google.com/kubernetes-engine/docs/how-to/multi-cluster-services#registering_a_service_for_export\n      address: \"http://euw2-testnet-benchmark-service.benchmark-rpc-testnet.svc.clusterset.local:9000\"\n\n    read-peer:\n      # K8s service address for routing read traffic\n      address: \"http://sui-node-benchmark.benchmark-rpc-testnet.svc.cluster.local:9000\"\n```\n\n----------------------------------------\n\nTITLE: Convert G1 Element to Uncompressed Form in Sui Framework - Move\nDESCRIPTION: The function g1_to_uncompressed_g1 converts a G1 element into its uncompressed representation. It outputs an Element of type UncompressedG1.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_25\n\nLANGUAGE: move\nCODE:\n```\npublic fun g1_to_uncompressed_g1(e: &Element<G1>): Element<UncompressedG1> {\n    group_ops::convert(G1_TYPE, UNCOMPRESSED_G1_TYPE, e)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prettier with npm Script\nDESCRIPTION: Command to run Prettier using the npm script defined in package.json.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prettier -w sources/example.move\n```\n\n----------------------------------------\n\nTITLE: Regenerating Expectations for Prettier Move Tests\nDESCRIPTION: Command to regenerate expectations for Prettier Move tests using pnpm with the UB=1 environment variable.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUB=1 pnpm test\n```\n\n----------------------------------------\n\nTITLE: Completing BOB's Swap Transaction in Escrow Test\nDESCRIPTION: Transaction simulation where BOB completes the swap by providing their locked asset and key. This demonstrates the final step of the escrow swap process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\n// BOB completes the trade\ntest_scenario::next_tx(&mut scenario, BOB);\n{\n    let escrow = test_scenario::take_shared<Escrow>(&mut scenario);\n    let locked = test_scenario::take_from_sender<Locked>(&mut scenario);\n    let key = test_scenario::take_from_sender<Key>(&mut scenario);\n    let ctx = test_scenario::ctx(&mut scenario);\n    let coin = swap(&mut escrow, locked, key, ctx);\n    transfer::public_transfer(coin, BOB);\n    test_scenario::return_shared(escrow);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying matplotlib Dependency\nDESCRIPTION: Package requirement entry for matplotlib, a comprehensive library for creating static, animated, and interactive visualizations in Python.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-aws-orchestrator/assets/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmatplotlib\n```\n\n----------------------------------------\n\nTITLE: Installing React Spinners Package\nDESCRIPTION: Commands to install the react-spinners package for UI icons.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/e2e-counter.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm add react-spinners\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add react-spinners\n```\n\n----------------------------------------\n\nTITLE: Installing libpq-dev on Linux (Optional)\nDESCRIPTION: Command to install libpq-dev on Linux systems using apt-get. This library is required if you plan to use PostgreSQL with Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo apt-get install libpq-dev\n```\n\n----------------------------------------\n\nTITLE: Building the Sui Custom Indexer with Cargo\nDESCRIPTION: Command to build the custom indexer application using Cargo, Rust's package manager and build system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/custom-indexer/rust/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Publishing and Running Sui Sandbox Module\nDESCRIPTION: Commands to publish a module to the Sui sandbox and run the Fail.mv module from a specific storage location.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/explain_user_module_abort/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox publish\nsandbox run storage/0x0000000000000000000000000000000000000000000000000000000000000002/modules/Fail.mv f\n```\n\n----------------------------------------\n\nTITLE: Snippet Inclusion Example\nDESCRIPTION: This snippet demonstrates how to include a reusable text snippet using the `{@include}` directive. The directive specifies the relative path to the snippet file within the `docs/content/snippets` directory. This functionality promotes content reuse and reduces maintenance efforts by allowing content updates in a single location.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n{@include: ../../snippets/reusable.mdx}\n```\n\n----------------------------------------\n\nTITLE: Constant References in Move\nDESCRIPTION: Shows how constants can reference other constants within the same module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/constants.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\nconst BASE: u8 = 4;\nconst SQUARE: u8 = BASE * BASE;\n```\n\n----------------------------------------\n\nTITLE: Struct Abilities Declaration\nDESCRIPTION: Examples showing different ways to declare struct abilities in Move, including pre and post-named abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/structs.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule a::m {\n    public PreNamedAbilities has copy, drop { x: u64, y: bool }\n    public struct PostNamedAbilities { x: u64, y: bool } has copy, drop;\n    public struct PostNamedAbilitiesInvalid { x: u64, y: bool } has copy, drop\n    //                                                                        ^ ERROR! missing semicolon\n\n    public struct NamedInvalidAbilities has copy { x: u64, y: bool } has drop;\n    //                                                               ^ ERROR! duplicate ability declaration\n\n    public PrePositionalAbilities has copy, drop (u64, bool)\n    public struct PostPositionalAbilities (u64, bool) has copy, drop;\n    public struct PostPositionalAbilitiesInvalid (u64, bool) has copy, drop\n    //                                                                     ^ ERROR! missing semicolon\n    public struct InvalidAbilities has copy (u64, bool) has drop;\n    //                                                  ^ ERROR! duplicate ability declaration\n}\n```\n\n----------------------------------------\n\nTITLE: Calling RPC on Anemo Server with sui-tool\nDESCRIPTION: This shell command demonstrates how to use sui-tool to make an RPC call to a specified Anemo server. Mandatory parameters include SERVER_NAME, ADDRESS, SERVICE_NAME, METHOD_NAME, and REQUEST, each defining different aspects of the RPC call configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-tool/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\nSERVER_NAME=\"sui\"; \\\nADDRESS=\"1.2.3.4:5678\"; \\\nSERVICE_NAME=\"StateSync\"; \\\nMETHOD_NAME=\"GetCheckpointSummary\"; \\\nREQUEST=\"BySequenceNumber(123)\"; \\\ncargo run --bin sui-tool -- \\\n    anemo call --server-name \"$SERVER_NAME\" \"$ADDRESS\" \"$SERVICE_NAME\" \"$METHOD_NAME\" \"$REQUEST\"\n\n```\n\n----------------------------------------\n\nTITLE: Importing ProtocolConfig Component JavaScript\nDESCRIPTION: This snippet imports the ProtocolConfig component from a specified path, likely for use within a React application related to Sui's protocol configuration. Dependencies include the '@site/src/components/ProtocolConfig' component and it is used for displaying or configuring protocol parameters. The input is the path to the component, and the output would be the ability to use this component within the file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/object-model.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ProtocolConfig from \"@site/src/components/ProtocolConfig\";\n```\n\n----------------------------------------\n\nTITLE: Installing React Dependencies with Package Managers\nDESCRIPTION: Commands to install react-hot-toast and react-router-dom dependencies using PNPM or Yarn.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm add react-hot-toast\n$ pnpm add react-router-dom\n```\n\n----------------------------------------\n\nTITLE: Installing Diesel CLI with MySQL and Postgres support\nDESCRIPTION: This command installs Diesel CLI with support for both MySQL and Postgresql.  It specifies the location of MySQL client libraries to link against the installed MySQL version. The `--force` option overwrites any existing installation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nMYSQLCLIENT_LIB_DIR=/opt/homebrew/Cellar/mysql@8.0/8.0.37/lib/ cargo install diesel_cli --no-default-features --features postgres --features mysql --force\n```\n\n----------------------------------------\n\nTITLE: Documenting a struct with Rustdoc in Rust\nDESCRIPTION: This example demonstrates how to properly document a struct using Rustdoc, including a single-line summary and a longer description with usage information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/coding_guidelines.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Represents (x, y) of a 2-dimensional grid\n///\n/// A line is defined by 2 instances.\n/// A plane is defined by 3 instances.\n#[repr(C)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n```\n\n----------------------------------------\n\nTITLE: Token Policy Cap Confirmation Function in Move\nDESCRIPTION: Function signature for confirming an action request using TokenPolicyCap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/action-request.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic fun confirm_with_policy_cap<T>(\n    token_policy_cap: &TokenPolicyCap<T>,\n    request: ActionRequest<T>,\n    ctx: &mut TxContext\n): (String, u64, address, Option<address>);\n```\n\n----------------------------------------\n\nTITLE: Installing Sui via Chocolatey\nDESCRIPTION: Command to install Sui using the Chocolatey package manager on Windows systems.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/quick-install.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ choco install sui\n```\n\n----------------------------------------\n\nTITLE: Rendering Locked Object Component in React\nDESCRIPTION: This component maps an on-chain SuiObjectData Locked object to its corresponding ApiLockedObject and delegates rendering to the Locked component. It fetches the locked item object ID using the useSuiClientQuery hook if not provided.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_33\n\nLANGUAGE: TSX\nCODE:\n```\n// LockedObject.tsx content here\n```\n\n----------------------------------------\n\nTITLE: Building and Disassembling Sui Packages\nDESCRIPTION: A sequence of shell commands for building Sui packages and disassembling package modules. The commands demonstrate package building and module disassembly operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/build_with_dep_warnings/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild\n```\n\nLANGUAGE: shell\nCODE:\n```\ndisassemble --package Test --name m\n```\n\nLANGUAGE: shell\nCODE:\n```\nbuild -p dep\n```\n\n----------------------------------------\n\nTITLE: Testing Coin Creation Helper Function\nDESCRIPTION: Helper function for creating test coins used in locked object testing. Creates a SUI coin with test-only functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nfun test_coin(ctx: &mut TxContext): Coin<SUI> {\n    coin::mint_for_testing<SUI>(1000, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Checkpoint Directory for Local Reader\nDESCRIPTION: Command to create the directory where the local reader will monitor for incoming checkpoint files.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/custom-indexer/rust/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p chk\n```\n\n----------------------------------------\n\nTITLE: Including Nonlinear Parts of Code - TypeScript Example (Pause/Resume)\nDESCRIPTION: Shows how to include code sections nonlinearly using pause and resume markers. This allows focusing on specific parts of the code while omitting others, useful for complex examples where only certain parts are relevant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// docs::#IDstring\n\nimport lib from \\\"library\\\";\n...\n// docs::#IDstring-pause:TODO\n\nconst Advanced = () => {};\n\n// docs::#IDstring-resume\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// docs::#IDstring\n\nimport lib from \\\"library\\\";\n...\n// docs::#IDstring-pause:// TODO\n\nconst Advanced = () => {};\n...\n\n// docs::#IDstring-resume\n\nreturn book;\n\n// docs::/#IDstring\n\n```\n\n----------------------------------------\n\nTITLE: Installing Sui and Sui Bridge CLI with Specific Commit\nDESCRIPTION: Command to install sui and sui-bridge-cli from a specific commit in the Sui GitHub repository, using a commit SHA.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --locked --git \"https://github.com/MystenLabs/sui.git\" --rev {SHA} sui sui-bridge-cli\n```\n\n----------------------------------------\n\nTITLE: Setting Bigtable Emulator Environment Variable\nDESCRIPTION: Command to configure the BIGTABLE_EMULATOR_HOST environment variable required for connecting to the local emulator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-kvstore/src/bigtable/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$(gcloud beta emulators bigtable env-init)\n```\n\n----------------------------------------\n\nTITLE: Running Prettier Directly\nDESCRIPTION: Command to run Prettier directly if it's installed globally.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nprettier --write sources/example.move\n```\n\n----------------------------------------\n\nTITLE: Building Sui Documentation Site Locally\nDESCRIPTION: This command builds the Sui documentation site locally. It should be executed in the 'site' directory after installing dependencies to prepare all necessary files for deployment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Spending Tokens Using Sui CLI in Bash\nDESCRIPTION: Runs a Sui CLI command to spend tokens, requiring parameters like token and amount, to facilitate spending operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/regulated-token/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsui client call --json \\\n    --package $PKG --module reg --function spend \\\n    --gas-budget 100000000 \\\n    --args \"0x_token\" \"amount\"\n```\n\n----------------------------------------\n\nTITLE: Reporting or Un-reporting Sui Validators\nDESCRIPTION: This command allows reporting or un-reporting a validator. It requires a valid UnverifiedValidatorOperationCap and uses the sui_system module to perform the action.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsui client call --package 0x3 --module sui_system --function report_validator/undo_report_validator --args 0x5 {cap_object_id} {reportee_address} --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Building Stress Testing Docker Image\nDESCRIPTION: Command to build a Docker image for Sui network stress testing with a configurable image tag\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/stress/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t stress:testing --build-arg SUI_TOOLS_IMAGE_TAG=mainnet-v1.19.1 .\n```\n\n----------------------------------------\n\nTITLE: Publishing Modules in Sui Sandbox\nDESCRIPTION: Command to publish modules to the Sui sandbox environment. This is typically used during development to deploy Move modules for testing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/metatests/cov/two-runs-same-module/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsandbox publish\n```\n\n----------------------------------------\n\nTITLE: Starting Sui with Tokio-console - Rust\nDESCRIPTION: This snippet shows how to start the Sui application with Tokio-console by setting an environment variable. This is necessary to enable the console to pick up the Sui application for inspection.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/observability.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\nSUI_TOKIO_CONSOLE=1\n```\n\n----------------------------------------\n\nTITLE: Running Sui RPC Benchmarks with Different Access Methods\nDESCRIPTION: Examples of how to run the sui-rpc-benchmark tool for different RPC access methods. Includes direct database queries, JSON RPC endpoints, and GraphQL queries with their respective command-line options.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rpc-benchmark/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Direct database queries:\ncargo run --bin sui-rpc-benchmark direct --db-url postgres://postgres:postgres@localhost:5432/sui --concurrency 50 --duration-secs 30\n\n# JSON RPC endpoints:\ncargo run --bin sui-rpc-benchmark jsonrpc --endpoint http://127.0.0.1:9000 --concurrency 50 --requests-file requests.jsonl [--methods-to-skip method1,method2]\n\n# GraphQL queries (not fully implemented):\ncargo run --bin sui-rpc-benchmark graphql --endpoint http://127.0.0.1:9000/graphql\n```\n\n----------------------------------------\n\nTITLE: Historical Volume by Balance Manager Example Request\nDESCRIPTION: An example HTTP request to retrieve historical trading volume for a specific balance manager across SUI_USDC and DEEP_SUI pools within a defined time range with volume in base asset.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_7\n\nLANGUAGE: http\nCODE:\n```\n/historical_volume_by_balance_manager_id/SUI_USDC,DEEP_SUI/0x344c2734b1d211bd15212bfb7847c66a3b18803f3f5ab00f5ff6f87b6fe6d27d?start_time=1731260703&end_time=1731692703&volume_in_base=true\n```\n\n----------------------------------------\n\nTITLE: Defining maximum value for u32 in Move\nDESCRIPTION: This macro function returns the maximum value for a u32 (0xFFFFFFFF or 4294967295).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u32.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun max_value(): u32 {\n    0xFFFF_FFFF\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Sui Source Validation Service Using Cargo\nDESCRIPTION: This snippet demonstrates the command used to build and run the Sui Source Validation Service using Cargo in Rust. It requires Cargo to be installed and properly configured.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-source-validation-service/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release --bin sui-source-validation-service crates/sui-source-validation-service/config.toml\n```\n\n----------------------------------------\n\nTITLE: Running Bigtable Initialization Script\nDESCRIPTION: Reference to the initialization script that configures the Bigtable emulator for the Sui project.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-kvstore/src/bigtable/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./src/bigtable/init.sh\n```\n\n----------------------------------------\n\nTITLE: Internal Borrow Dynamic Object Field\nDESCRIPTION: Package-internal function to borrow a reference to a dynamic object field value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_object_field.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun internal_borrow<Name: copy + drop + store, Value: key>(\n    object: &UID,\n    name: Name,\n): &Value {\n    borrow_impl!(object, name)\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Code Example\nDESCRIPTION: This code snippet shows how to format inline code within a sentence using backticks in markdown. It emphasizes that no other formatting should be used to distinguish code from surrounding text. It uses the example of a function call `display::new<T>`.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n\nThe `display::new<T>` call creates a `Display`.\n\n```\n```\n\n----------------------------------------\n\nTITLE: Copying Checkpoint Files for Testing\nDESCRIPTION: Command to copy checkpoint files to the monitored directory for the local reader to process them.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/custom-indexer/rust/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncp $YOUR_CHECKPOINT_FILE chk/\n```\n\n----------------------------------------\n\nTITLE: Installing cURL on macOS\nDESCRIPTION: Command to install or update cURL on macOS using Homebrew. This ensures you have the latest version of cURL installed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install curl\n```\n\n----------------------------------------\n\nTITLE: Converting Staked SUI to Fungible Staked SUI\nDESCRIPTION: This function converts a StakedSui object to a FungibleStakedSui object and emits a ConvertingToFungibleStakedSuiEvent.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_32\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun convert_to_fungible_staked_sui(\n    self: &mut Validator,\n    staked_sui: StakedSui,\n    ctx: &mut TxContext,\n): FungibleStakedSui {\n    let stake_activation_epoch = staked_sui.stake_activation_epoch();\n    let staked_sui_principal_amount = staked_sui.staked_sui_amount();\n    let fungible_staked_sui = self.staking_pool.convert_to_fungible_staked_sui(staked_sui, ctx);\n    event::emit(ConvertingToFungibleStakedSuiEvent {\n        pool_id: self.staking_pool_id(),\n        stake_activation_epoch,\n        staked_sui_principal_amount,\n        fungible_staked_sui_amount: fungible_staked_sui.value(),\n    });\n    fungible_staked_sui\n}\n```\n\n----------------------------------------\n\nTITLE: Looping Over u128 Range (Inclusive) in Move\nDESCRIPTION: Macro function that applies a given function to each number in a range from start to stop (inclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do_eq<$R: drop>($start: u128, $stop: u128, $f: |u128| -> $R) {\n    std::macros::range_do_eq!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Claiming Rebates in DeepBook Pool\nDESCRIPTION: Function for claiming accumulated rewards in a DeepBook pool. The balance_manager must have rewards available to claim. Upon successful execution, the balance_manager is updated with the claimed rewards and the rebate accounting is reset.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/staking-governance.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic fun claim_rebates(\n    self: &mut Pool,\n    balance_manager: &mut BalanceManager,\n    ctx: &mut TxContext\n) {\n    let pool_id = object::id(self);\n    let staking_record = begin_with_mut(&mut balance_manager.staking_records, pool_id);\n    let rebate = staking_record.accumulated_trading_rebate;\n    assert!(rebate > 0, EInsufficientRebate);\n    staking_record.accumulated_trading_rebate = 0;\n    let added_coin = coin::take(&mut self.rebate_coin, rebate, ctx);\n    coin::put(&mut balance_manager.coin, added_coin);\n}\n```\n\n----------------------------------------\n\nTITLE: Group Operations in Sui\nDESCRIPTION: Functions for performing group operations on cryptographic elements, including addition, multiplication, and pairing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Element(0x2::group_ops)\npublic fun bytes(0x2::group_ops)\npublic fun equal(0x2::group_ops)\npublic(package) fun from_bytes(0x2::group_ops)\npublic(package) fun add(0x2::group_ops)\npublic(package) fun sub(0x2::group_ops)\npublic(package) fun mul(0x2::group_ops)\npublic(package) fun div(0x2::group_ops)\npublic(package) fun hash_to(0x2::group_ops)\npublic(package) fun multi_scalar_multiplication(0x2::group_ops)\npublic(package) fun pairing(0x2::group_ops)\npublic(package) fun convert(0x2::group_ops)\npublic(package) fun sum(0x2::group_ops)\nfun internal_validate(0x2::group_ops)\nfun internal_add(0x2::group_ops)\nfun internal_sub(0x2::group_ops)\nfun internal_mul(0x2::group_ops)\nfun internal_div(0x2::group_ops)\nfun internal_hash_to(0x2::group_ops)\nfun internal_multi_scalar_mul(0x2::group_ops)\nfun internal_pairing(0x2::group_ops)\nfun internal_convert(0x2::group_ops)\nfun internal_sum(0x2::group_ops)\npublic(package) fun set_as_prefix(0x2::group_ops)\n```\n\n----------------------------------------\n\nTITLE: Implementing GT Division Operation for BLS12-381 in Move\nDESCRIPTION: Divides a GT group element by a scalar in the BLS12-381 curve. This function uses the group_ops module to perform division and will fail if the scalar is zero.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_41\n\nLANGUAGE: Move\nCODE:\n```\npublic fun gt_div(e1: &Element<Scalar>, e2: &Element<GT>): Element<GT> {\n    group_ops::div(GT_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Epoch Deny List in Sui Coin\nDESCRIPTION: This function checks if a given address is in the deny list for the current epoch, which prevents such addresses from receiving transactions involving the corresponding coin type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_26\n\nLANGUAGE: Move\nCODE:\n```\npublic fun deny_list_v2_contains_current_epoch<T>(deny_list: &sui::deny_list::DenyList, addr: address, ctx: &sui::tx_context::TxContext): bool {\n    let ty = type_name::get_with_original_ids<T>().into_string().into_bytes();\n    deny_list.v2_contains_current_epoch(DENY_LIST_COIN_INDEX, ty, addr, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Move Package Inconsistent Address Resolution Example\nDESCRIPTION: Example demonstrating how inconsistent address assignments are detected when different packages try to assign conflicting values to the same address through dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-package/README.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nP depends on Q, and assigns 0x42 to QA\nP depends on R, and assigns 0x43 to RA\nQ depends on S renaming its SA to QA\nR depends on S renaming its SA to RA\nS introduces unbound address SA\n\nResults in inconsistent assignment requiring SA to be both 0x42 and 0x43\n```\n\n----------------------------------------\n\nTITLE: Publishing a Package to Sui Sandbox\nDESCRIPTION: Command to publish a package to the Sui blockchain sandbox environment. This allows developers to deploy and test their modules in a local development environment before deploying to testnet or mainnet.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/use_named_address/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox publish\n```\n\n----------------------------------------\n\nTITLE: Updating Candidate Validator Worker Address - Move\nDESCRIPTION: Similar to the validator update function, this handles the worker address modification for candidate validators. The input is the new worker address in a vector form paired with transaction context to facilitate changes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_27\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_candidate_validator_worker_address(self: &mut sui_system::sui_system::SuiSystemState, worker_address: vector<u8>, ctx: &sui::tx_context::TxContext)\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_candidate_validator_worker_address(\n    self: &mut SuiSystemState,\n    worker_address: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_candidate_validator_worker_address(worker_address, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ECVRF Error Constants\nDESCRIPTION: Constants defining error codes for invalid hash length, public key encoding, and proof encoding in ECVRF verification.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/ecvrf.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nconst EInvalidHashLength: u64 = 1;\nconst EInvalidPublicKeyEncoding: u64 = 2;\nconst EInvalidProofEncoding: u64 = 3;\n```\n\n----------------------------------------\n\nTITLE: Updating Test Expectations for Sui Framework Changes Using cargo-insta\nDESCRIPTION: Instructions for updating test expectations when Sui framework code changes. This involves installing cargo-insta if not already installed and then running the insta test command with review flag in the sui-cost directory to update the expectations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-cost/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# required; can be omitted if cargo-insta is installed\n$ cargo install cargo-insta\n\n# run in ./sui-cost\n$ cargo insta test --review\n```\n\n----------------------------------------\n\nTITLE: Package Info and Disassembly Commands\nDESCRIPTION: Commands for viewing package information and disassembling the 'address' component from the MoveStdlib package.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/package_basics/args.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndisassemble --package MoveStdlib --name address\ninfo\n```\n\n----------------------------------------\n\nTITLE: Importing YTCarousel Component - TypeScript\nDESCRIPTION: Demonstrates how to import the YTCarousel component in a TypeScript file. This component is used to display a list of YouTube thumbnails and play selected videos.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport YTCarousel from \\\"@site/src/components/YTCarousel\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Escrow Contract Package ID\nDESCRIPTION: JSON configuration containing the package ID for the escrow contract deployed on Testnet.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/frontend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageId\": \"0xead655f291ed9e1f5cac3bc4b2cfcccec91502940c0ba4d846936268964524c9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v1.0.6\nDESCRIPTION: Version update entry showing dependency update to @mysten/sui v1.0.5\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.6\n\n### Patch Changes\n\n- Updated dependencies [369b924343]\n  - @mysten/sui@1.0.5\n```\n\n----------------------------------------\n\nTITLE: Running jeprof to View Memory Profiles - Bash\nDESCRIPTION: This snippet describes how to use the jeprof tool to generate a memory profile visualization from data collected by jemalloc. It shows the command to execute in the target directory containing the profiling output.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/observability.mdx#2025-04-22_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\njeprof --svg sui-node jeprof.xxyyzz.heap\n```\n\n----------------------------------------\n\nTITLE: Unit Return Type Examples\nDESCRIPTION: Demonstrates equivalent ways to define functions that return the unit type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\nfun just_unit(): () { () }\nfun just_unit() { () }\nfun just_unit() { }\n```\n\n----------------------------------------\n\nTITLE: Using Module Aliases in Move Functions\nDESCRIPTION: Shows how to use module aliases within a function to create a vector of optional values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/uses.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nuse std::vector;\nuse std::option as o;\n\nfun new_vec(): vector<o::Option<u8>> {\n    let mut v = vector[];\n    vector::push_back(&mut v, o::some(0));\n    vector::push_back(&mut v, o::none());\n    v\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Client for Sui Using YAML\nDESCRIPTION: This snippet provides a YAML configuration file for setting up the light client to connect to a full node and cache checkpoints. Dependencies include creating directories specified for checkpoint summaries and storing the genesis blob.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-light-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfull_node_url: \"https://fullnode.mainnet.sui.io:443\"\n# make sure this directory is created and has genesis.blob \ncheckpoint_summary_dir: \"checkpoints_dir\"\ngenesis_filename: \"genesis.blob\"\nobject_store_url: \"https://checkpoints.mainnet.sui.io\"\ngraphql_url: \"https://sui-mainnet.mystenlabs.com/graphql\"\narchive_store_config:\n  object-store: \"S3\"\n  bucket: \"mysten-mainnet-archives\"\n  no-sign-request: true\n  aws-region: \"us-west-2\"\n  object-store-connection-limit: 20\n```\n\n----------------------------------------\n\nTITLE: Implementing API Pagination for Prisma Queries\nDESCRIPTION: Utility function for parsing URL query parameters into Prisma pagination options. This function extracts and transforms pagination-related query string parameters for use with Prisma database queries.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ApiPagination = {\n    take?: number;\n    skip?: number;\n    cursor?: Record<string, any>;\n    orderBy?: Record<string, any>;\n};\n\nexport function parsePaginationForQuery(query: any) {\n    const { limit, cursor, sort } = query;\n  \n    const pagination: ApiPagination = {};\n  \n    // Handle limit parameter\n    if (limit && !isNaN(Number(limit))) {\n      pagination.take = Math.min(Number(limit), 100); // Set a reasonable maximum limit\n    } else {\n      pagination.take = 20; // Default limit\n    }\n  \n    // Handle cursor for pagination\n    if (cursor) {\n      try {\n        pagination.cursor = { id: cursor };\n      } catch (e) {\n        // If cursor is invalid, ignore it\n        console.error('Invalid cursor', e);\n      }\n    }\n  \n    // Handle sorting\n    if (sort) {\n      const [field, direction] = sort.split(':');\n      if (field && (direction === 'asc' || direction === 'desc')) {\n        pagination.orderBy = { [field]: direction };\n      }\n    } else {\n      // Default sorting\n      pagination.orderBy = { id: 'asc' };\n    }\n  \n    return pagination;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to TiDB with MySQL client and creating database\nDESCRIPTION: These commands connect to a running TiDB instance using the MySQL client and create a database named `test`.  It assumes TiDB is running on localhost (127.0.0.1) on port 4000 with the root user.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nmysql --comments --host 127.0.0.1 --port 4000 -u root\ncreate database test;\n```\n\n----------------------------------------\n\nTITLE: Removing City from Weather Oracle in Sui Move\nDESCRIPTION: Function to remove a city from the weather oracle. It removes the CityWeatherOracle object associated with the given geoname_id and deletes it.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/weather-oracle.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npublic fun remove_city(\n    _: &AdminCap,\n    oracle: &mut WeatherOracle,\n    geoname_id: u32\n    ) {\n        let CityWeatherOracle {\n            id,\n            geoname_id: _,\n            name: _,\n            country: _,\n            latitude: _,\n            positive_latitude: _,\n            longitude: _,\n            positive_longitude: _,\n            weather_id: _,\n            temp: _,\n            pressure: _,\n            humidity: _,\n            visibility: _,\n            wind_speed: _,\n            wind_deg: _,\n            wind_gust: _,\n            clouds: _,\n            dt: _ } = dof::remove(&mut oracle.id, geoname_id);\n        object::delete(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Duplicate Friend Declarations in Move\nDESCRIPTION: Example of invalid friend declarations where a module is declared as a friend multiple times, which is not allowed in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/friends.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::a {}\n\nmodule 0x42::m {\n    use 0x42::a as aliased_a;\n    friend 0x42::A;\n    friend aliased_a; // ERROR!\n//         ^^^^^^^^^ Duplicate friend declaration '0x42::a'. Friend declarations in a module must be unique\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Sui Project with pnpm\nDESCRIPTION: Commands to build and run tests for the Sui project using pnpm. These commands should be executed in the project's root directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Rotating Operation Capability\nDESCRIPTION: Creates and registers a new UnverifiedValidatorOperationCap, transferring it to validator and revoking the original.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun rotate_operation_cap(self: &mut SuiSystemState, ctx: &mut TxContext) {\n    self.load_system_state_mut().rotate_operation_cap(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Voting on Proposals in DeepBook Pool\nDESCRIPTION: Function for voting on governance proposals in a DeepBook pool. Users with non-zero voting power can cast votes, with all voting power allocated to a single proposal. If a user has already voted, their previous vote is removed and reallocated to the new proposal.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/staking-governance.mdx#2025-04-22_snippet_3\n\nLANGUAGE: move\nCODE:\n```\npublic fun vote(\n    self: &mut Pool,\n    balance_manager: &mut BalanceManager,\n    proposal_id: ID,\n    ctx: &mut TxContext\n) {\n    let pool_id = object::id(self);\n    let staking_record = begin_with_mut(&mut balance_manager.staking_records, pool_id);\n    assert!(staking_record.active_stake > 0, EInsufficientStake);\n    let proposals = &mut self.proposals;\n    assert!(table::contains(proposals, proposal_id), EProposalNotFound);\n    \n    // If the user already voted, remove the previous vote\n    if (option::is_some(&staking_record.proposal_voted_for)) {\n        let previous_proposal_id = *option::borrow(&staking_record.proposal_voted_for);\n        if (table::contains(proposals, previous_proposal_id)) {\n            let previous_proposal = table::borrow_mut(proposals, previous_proposal_id);\n            previous_proposal.vote_count = previous_proposal.vote_count - staking_record.active_stake;\n        };\n    };\n    \n    // Add the vote to the new proposal\n    let proposal = table::borrow_mut(proposals, proposal_id);\n    proposal.vote_count = proposal.vote_count + staking_record.active_stake;\n    option::fill(&mut staking_record.proposal_voted_for, proposal_id);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Object Fields in Move\nDESCRIPTION: This snippet defines the Wrapper structure and associated functions for implementing dynamic object fields in Move, allowing for flexible object composition.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_29\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Wrapper\npublic fun add\npublic fun borrow\npublic fun borrow_mut\npublic fun remove\npublic fun exists_\npublic fun exists_with_type\npublic fun id\npublic(package) fun internal_add\npublic(package) fun internal_borrow\npublic(package) fun internal_borrow_mut\npublic(package) fun internal_remove\npublic(package) fun internal_exists_with_type\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v1.0.9\nDESCRIPTION: Version update entry showing dependency update to @mysten/sui v1.1.2\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.9\n\n### Patch Changes\n\n- Updated dependencies [0dfff33b95]\n  - @mysten/sui@1.1.2\n```\n\n----------------------------------------\n\nTITLE: Token Transfer Request Function in Move\nDESCRIPTION: Function signature for creating a token transfer ActionRequest in Sui blockchain.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/action-request.mdx#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\npublic fun transfer<T>(\n    t: Token<T>, recipient: address, ctx: &mut TxContext\n): ActionRequest<T>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Value of Fixed Point Number in Move\nDESCRIPTION: Provides access to the underlying raw u64 value of a FixedPoint32 number for performing less common operations directly.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/fixed_point32.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_raw_value(num: FixedPoint32): u64 {\n    num.value\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Sui Move CLI Help\nDESCRIPTION: Shows the available subcommands and options for the sui move command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/move.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage: sui move [OPTIONS] <COMMAND>\n\nCommands:\n  build\n  coverage \t  Inspect test coverage for this package. A previous test run with the `--coverage` flag must have previously been run\n  disassemble\n  manage-package  Record addresses (Object IDs) for where this package is published on chain (this command sets variables in Move.lock)\n  migrate         Migrate to Move 2024 for the package at `path`. If no path is provided defaults to current directory\n  new             Create a new Move package with name `name` at `path`. If `path` is not provided the package will be created in the directory `name`\n  test     \t  Run Move unit tests in this package\n  help            Print this message or the help of the given subcommand(s)\n\nOptions:\n  -p, --path <PACKAGE_PATH>                 \tPath to a package which the command should be run with respect to\n  -d, --dev                                 \tCompile in 'dev' mode. The 'dev-addresses' and 'dev-dependencies' fields will be used if this flag is set. This flag is useful for\n                                            \tdevelopment of packages that expose named addresses that are not set to a specific value\n  \t--test                                \tCompile in 'test' mode. The 'dev-addresses' and 'dev-dependencies' fields will be used along with any code in the 'tests' directory\n  \t--doc                                 \tGenerate documentation for packages\n  \t--abi                                 \tGenerate ABIs for packages\n  \t--install-dir <INSTALL_DIR>           \tInstallation directory for compiled artifacts. Defaults to current directory\n  \t--force                               \tForce recompilation of all packages\n  \t--fetch-deps-only                     \tOnly fetch dependency repos to MOVE_HOME\n  \t--skip-fetch-latest-git-deps          \tSkip fetching latest git dependencies\n  \t--default-move-flavor <DEFAULT_FLAVOR>\tDefault flavor for move compilation, if not specified in the package's config\n  \t--default-move-edition <DEFAULT_EDITION>  Default edition for move compilation, if not specified in the package's config\n  \t--dependencies-are-root               \tIf set, dependency packages are treated as root packages. Notably, this will remove warning suppression in dependency packages\n  -h, --help                                \tPrint help\n  -V, --version                             \tPrint version\n```\n\n----------------------------------------\n\nTITLE: Invalid Complex Recursive Generic Function Calls in Move\nDESCRIPTION: Shows a more complex example of invalid recursive generic function calls in Move that could create infinitely many types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_17\n\nLANGUAGE: move\nCODE:\n```\nmodule a::n {\n    public struct A<T> {}\n\n    // Infinitely many types -- NOT allowed.\n    // error!\n    // foo<T1, T2> -> bar<T2, T1> -> foo<T2, A<T1>>\n    //   -> bar<A<T1>, T2> -> foo<A<T1>, A<T2>>\n    //   -> bar<A<T2>, A<T1>> -> foo<A<T2>, A<A<T1>>>\n    //   -> ...\n    fun foo<T1, T2>() {\n        bar<T2, T1>();\n    }\n\n    fun bar<T1, T2> {\n        foo<T1, A<T2>>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Forge Soldeer\nDESCRIPTION: Command to install project dependencies using Forge Soldeer, which manages dependencies for Solidity projects in Foundry.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/bridge/evm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge soldeer update\n```\n\n----------------------------------------\n\nTITLE: Running Sui Testsuite for Complex Program Detection Time\nDESCRIPTION: This command runs the Sui project's testsuite in release mode, suppressing standard output and capturing only the time measurement for complex program detection or acceptance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/move-execution/v1/crates/bytecode-verifier-tests/METER_TESTING.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo test --release -- --nocapture 1>/dev/null\n```\n\n----------------------------------------\n\nTITLE: Building Sui Package with JSON Error Format\nDESCRIPTION: Command to build a Sui package with errors formatted as JSON for easier parsing and programmatic handling.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/json_errors/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild --json-errors\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project with Silenced Warnings\nDESCRIPTION: Command to build a Sui project while suppressing warning messages for a cleaner output.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/build_with_warnings/args.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbuild --silence-warnings\n```\n\n----------------------------------------\n\nTITLE: Running Sui Module Tests with Different Arguments in Dry-Run Mode\nDESCRIPTION: Commands to execute the 'test' function from a published module with different numeric arguments in dry-run mode. The commands target a specific module at address 0x42 and pass 0u8 and 1u8 as test arguments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/metatests/cov/two-runs-same-module/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsandbox run storage/0x0000000000000000000000000000000000000000000000000000000000000042/modules/M.mv test --args 0u8 --dry-run\n```\n\nLANGUAGE: bash\nCODE:\n```\nsandbox run storage/0x0000000000000000000000000000000000000000000000000000000000000042/modules/M.mv test --args 1u8 --dry-run\n```\n\n----------------------------------------\n\nTITLE: Visualizing Ask Orders Crit-bit Tree Structure\nDESCRIPTION: Flowchart diagram showing the hierarchical structure of ask orders in the crit-bit tree, demonstrating how orders are organized by price levels and time priority.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/pools.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    A{\"Ask crit-bit tree\"};\n    B(\"Price level: 1000000000\\nOrders queue: A > B > ...\");\n    C(\"Price level: 1100000000\\nOrder queue: C\");\n    A-->B;\n    A-->C;\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Struct Layouts with Different Type Arguments\nDESCRIPTION: Commands to generate struct layouts for struct C in module M2 with different primitive type arguments including u64, address, and vector<u8>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/generate_struct_layout/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M2.mv --struct C --type-args u64\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M2.mv --struct C --type-args address\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M2.mv --struct C --type-args vector<u8>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asset Information Example in DeepBook API\nDESCRIPTION: Provides an example response for the assets endpoint, showing detailed information about multiple assets traded on DeepBook.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"NS\": {\n    \"unified_cryptoasset_id\": \"32942\",\n    \"name\": \"Sui Name Service\",\n    \"contractAddress\": \"0x5145494a5f5100e645e4b0aa950fa6b68f614e8c59e17bc5ded3495123a79178\",\n    \"contractAddressUrl\": \"https://suiscan.xyz/mainnet/object/0x5145494a5f5100e645e4b0aa950fa6b68f614e8c59e17bc5ded3495123a79178\",\n    \"can_deposit\": \"true\",\n    \"can_withdraw\": \"true\"\n  },\n  \"AUSD\": {\n    \"unified_cryptoasset_id\": \"32864\",\n    \"name\": \"AUSD\",\n    \"contractAddress\": \"0x2053d08c1e2bd02791056171aab0fd12bd7cd7efad2ab8f6b9c8902f14df2ff2\",\n    \"contractAddressUrl\": \"https://suiscan.xyz/mainnet/object/0x2053d08c1e2bd02791056171aab0fd12bd7cd7efad2ab8f6b9c8902f14df2ff2\",\n    \"can_deposit\": \"true\",\n    \"can_withdraw\": \"true\"\n  },\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Disassembling Sui Package\nDESCRIPTION: Commands for building a Sui package and disassembling a specific module named 'm' from the 'Test' package. These are common operations when developing and debugging Sui smart contracts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/disassemble_module/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild\ndisassemble --package Test --name m\n```\n\n----------------------------------------\n\nTITLE: Looping from 0 to Stop (Inclusive) in Move\nDESCRIPTION: Macro function that applies a given function to each number from 0 to stop (inclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_15\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do_eq<$R: drop>($stop: u64, $f: |u64| -> $R) {\n    std::macros::do_eq!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Term List\nDESCRIPTION: Demonstrates how to create a term list in Markdown using bold text for the term followed by its definition.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n\"**Term:** A description of the term.\\n**DAG:** A directed acyclic graph (DAG) is a data modeling or structuring tool typically used in cryptocurrencies.\"\n```\n\n----------------------------------------\n\nTITLE: Setting Candidate Commission Rate in Move\nDESCRIPTION: Sets the new commission rate for a candidate validator. It asserts that the validator is preactive and that the new commission rate does not exceed the maximum allowed. The function takes a mutable reference to a Validator and a new commission rate as a u64.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_39\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun set_candidate_commission_rate(self: &mut sui_system::validator::Validator, new_commission_rate: u64) {\n    assert!(self.is_preactive(), ENotValidatorCandidate);\n    assert!(new_commission_rate <= MAX_COMMISSION_RATE, ECommissionRateTooHigh);\n    self.commission_rate = new_commission_rate;\n}\n```\n\n----------------------------------------\n\nTITLE: Disassembling Sui Move Bytecode\nDESCRIPTION: Command to disassemble the bytecode of a Move module. This command targets a specific package named 'Test', a module named 'm', and outputs the bytecode map.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/disassemble_module_source_map/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndisassemble --package Test --name m --bytecode-map\n```\n\n----------------------------------------\n\nTITLE: Configuring Testbed Settings in JSON Format for Sui Orchestrator\nDESCRIPTION: Example JSON configuration that defines the testbed parameters including cloud provider, regions, instance specifications, repository information, and output directories for the Sui Orchestrator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-aws-orchestrator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"testbed_id\": \"alberto-0\",\n\t\"cloud_provider\": \"aws\",\n\t\"token_file\": \"/Users/alberto/.aws/credentials\",\n\t\"ssh_private_key_file\": \"/Users/alberto/.ssh/aws\",\n\t\"regions\": [\n\t\t\"us-east-1\",\n\t\t\"us-west-2\",\n\t\t\"ca-central-1\",\n\t\t\"eu-central-1\",\n\t\t\"ap-northeast-1\",\n\t\t\"eu-west-1\",\n\t\t\"eu-west-2\",\n\t\t\"ap-south-1\",\n\t\t\"ap-southeast-1\",\n\t\t\"ap-southeast-2\"\n\t],\n\t\"specs\": \"m5d.8xlarge\",\n\t\"repository\": {\n\t\t\"url\": \"https://github.com/MystenLabs/sui.git\",\n\t\t\"commit\": \"main\"\n\t},\n\t\"results_directory\": \"./results\",\n\t\"logs_directory\": \"./logs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Call Move Package Function using Sui Client\nDESCRIPTION: This command calls a function within a Move package. It requires specifying the package ID, module name, and function name.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client call `<br/>&nbsp;&nbsp;`--package PACKAGE `<br/>&nbsp;&nbsp;`--module MODULE `<br/>&nbsp;&nbsp;`--function FUNCTION\"\n```\n\n----------------------------------------\n\nTITLE: Creating Progress File for Local Reader\nDESCRIPTION: Command to initialize the progress tracking file for the local reader implementation with a starting checkpoint value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/custom-indexer/rust/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\necho \"{\\\"local_reader\\\": 1}\" > /tmp/local_reader_progress\n```\n\n----------------------------------------\n\nTITLE: Testing Sui Edge Proxy with cURL\nDESCRIPTION: This bash command sends a test JSON-RPC request to the locally running Sui Edge Proxy using cURL, querying for the latest checkpoint sequence number.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-edge-proxy/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --silent --location --request POST '127.0.0.1:8080' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"sui_getLatestCheckpointSequenceNumber\",\n    \"params\": []\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining EMetadataInvalidPrimaryAddr Error Constant in Move\nDESCRIPTION: Error constant (6) used when the primary_address field in ValidatorMetadata is invalid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_13\n\nLANGUAGE: move\nCODE:\n```\nconst EMetadataInvalidPrimaryAddr: u64 = 6;\n```\n\n----------------------------------------\n\nTITLE: Dropping a Critbit Tree\nDESCRIPTION: Deallocates resources associated with a critbit tree. This function is used to clean up when a tree is no longer needed, properly releasing the memory used by internal nodes and leaves.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_18\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun drop<V: store + drop>(tree: CritbitTree<V>) {\n    let CritbitTree<V> {\n        root: _,\n        internal_nodes,\n        leaves,\n        min_leaf: _,\n        max_leaf: _,\n        next_internal_node_index: _,\n        next_leaf_index: _,\n    } = tree;\n    table::drop(internal_nodes);\n    table::drop(leaves);\n}\n```\n\n----------------------------------------\n\nTITLE: Effectuate Staged Metadata in Move\nDESCRIPTION: Implementation of effectuate_staged_metadata function that updates the staged metadata for active validators\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\nfun effectuate_staged_metadata(self: &mut ValidatorSet) {\n    self.active_validators.do_mut!(|v| v.effectuate_staged_metadata());\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing State Sync Fullnode Configuration in Sui Network\nDESCRIPTION: This configuration snippet shows how to optimize a state sync fullnode by disabling indexing, enabling pruning, and setting up metrics reporting to Mysten's metric proxy. These settings help reduce the database footprint and improve performance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/ssfn_guide.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenable-index-processing: false\n\nauthority-store-pruning-config:\n  num-latest-epoch-dbs-to-retain: 3\n  epoch-db-pruning-period-secs: 3600\n  max-checkpoints-in-batch: 10\n  max-transactions-in-batch: 1000\n  num-epochs-to-retain: 0\n  num-epochs-to-retain-for-checkpoints: 2\n  periodic-compaction-threshold-days: 1\n\nmetrics:\n  push-interval-seconds: 60\n  push-url: https://metrics-proxy.mainnet.sui.io:8443/publish/metrics\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sui Client CLI Environment\nDESCRIPTION: Command to set up the Sui account and CLI environment, including generating a key pair and config file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY client\n```\n\n----------------------------------------\n\nTITLE: Defining RedeemingFungibleStakedSuiEvent Struct in Move\nDESCRIPTION: Event structure emitted when a fungible staked SUI is redeemed, containing pool ID, fungible staked SUI amount, and resulting SUI amount.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic struct RedeemingFungibleStakedSuiEvent has copy, drop\n```\n\n----------------------------------------\n\nTITLE: Issuer Access Function Implementation\nDESCRIPTION: Function to retrieve the issuer string associated with a VerifiedIssuer object.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_issuer.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun issuer(verified_issuer: &VerifiedIssuer): &String {\n    &verified_issuer.issuer\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Linked Table Length in Move\nDESCRIPTION: This function calculates the number of key-value pairs in a linked table. It requires the linked table to be passed as a parameter and returns the count as an unsigned 64-bit integer. The key type must have 'copy', 'drop', and 'store' traits and the value type must have 'store'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun length<K: copy, drop, store, V: store>(table: &sui::linked_table::LinkedTable<K, V>): u64\n```\n\nLANGUAGE: Move\nCODE:\n```\npublic fun length<K: copy + drop + store, V: store>(table: &LinkedTable<K, V>): u64 {\n    table.size\n}\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project\nDESCRIPTION: Basic command to build a Sui blockchain project using the Sui CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/build_with_warnings/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild\n```\n\n----------------------------------------\n\nTITLE: Checking Missing Checkpoint Processing\nDESCRIPTION: Utility command that analyzes log files to identify which checkpoints have not been processed yet by the load generator threads.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rpc-loadgen/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncat sui-rpc-loadgen.b844f547-d354-4871-b958-1ea3fe23a0a8.log.2023-03-23 | awk '/Finished processing/{print $7}' | sort -n | uniq | awk 'BEGIN{last=0}{for(i=last+1;i<$1;i++) print i; last=$1} END{print last}' | tee missing_numbers.txt && wc -l missing_numbers.txt\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project with Verbose Output\nDESCRIPTION: Command to build the Sui project with verbose logging enabled using the -v flag.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/unbound_address/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild -v\n```\n\n----------------------------------------\n\nTITLE: Defining VDF Error Constant\nDESCRIPTION: Defines an error constant for invalid input validation in the VDF module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/vdf.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nconst EInvalidInput: u64 = 0;\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Source Code Retrieval\nDESCRIPTION: This JSON snippet shows the format of an error response when a source code retrieval fails in the Sui Source Validation Service. It is important for clients to handle these errors gracefully.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-source-validation-service/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"error\":\"...\"}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the dApp in development mode.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/frontend/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Bridging Source Code Repository Locations\nDESCRIPTION: Open-source repository locations for different components of the Sui Bridge implementation\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/tokenomics/sui-bridging.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Move: https://github.com/MystenLabs/sui/tree/main/crates/sui-framework/packages/bridge\n- Solidity: https://github.com/MystenLabs/sui/tree/main/bridge/evm\n- Bridged ETH (Move): https://github.com/MystenLabs/sui/tree/main/bridge/move/tokens/eth\n- Bridge Node: https://github.com/MystenLabs/sui/tree/main/crates/sui-bridge\n- Bridge Indexer: https://github.com/MystenLabs/sui/tree/main/crates/sui-bridge-indexer\n```\n\n----------------------------------------\n\nTITLE: Struct Destructuring in Move\nDESCRIPTION: This snippet shows how to use struct destructuring to declare multiple variables from a struct in Move, including nested structs and references.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/variables.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::example {\n    public struct X(u64)\n    public struct Y { x1: X, x2: X }\n\n    fun new_x(): X {\n        X(1)\n    }\n\n    fun example() {\n        let Y { x1: X(f), x2 } = Y { x1: new_x(), x2: new_x() };\n        assert!(f + x2.f == 2, 42);\n\n        let Y { x1: X(f1), x2: X(f2) } = Y { x1: new_x(), x2: new_x() };\n        assert!(f1 + f2 == 2, 42);\n\n        let mut y = Y { x1: new_x(), x2: new_x() };\n\n        let Y { x1: X(f), x2 } = &y;\n        assert!(*f + x2.f == 2, 42);\n\n        let Y { x1: X(f1), x2: X(f2) } = &mut y;\n        *f1 = *f1 + 1;\n        *f2 = *f2 + 1;\n        assert!(*f1 + *f2 == 4, 42);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conceptual Declaration of Vector with Conditional Abilities\nDESCRIPTION: A conceptual representation of how the built-in vector type in Move might be declared with conditional abilities that depend on its element type.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/abilities.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\nvector<T> has copy, drop, store;\n```\n\n----------------------------------------\n\nTITLE: Executing SUI Build Command with Verbose Output and Dependency Tracking\nDESCRIPTION: This command runs the build process for the SUI project with verbose output (-v flag) and dependency information (-d flag). It's likely used in a development or CI/CD context to compile and assemble the SUI blockchain platform components.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/dev_address/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nbuild -v -d\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Installation Commands\nDESCRIPTION: Commands to install and configure Tailwind CSS and its dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm add tailwindcss@latest postcss@latest autoprefixer@latest\n$ npx tailwindcss init -p\n```\n\n----------------------------------------\n\nTITLE: Executing Sui Testsuite with Performance Timing Output in Shell\nDESCRIPTION: This command runs the Sui project testsuite in release mode, suppressing standard output and capturing only the timing information for complex program detection or acceptance. It uses cargo to run the tests and redirects stdout to /dev/null.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/move-execution/v2/crates/bytecode-verifier-tests/METER_TESTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo test --release -- --nocapture 1>/dev/null\n```\n\n----------------------------------------\n\nTITLE: Markdown Code Example\nDESCRIPTION: Illustrates how to include code within a Markdown document.  The example shows a heading \"ObjectName\" followed by a sentence using the term `ObjectName` within backticks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n\"## ObjectName\\n\\n`ObjectName` is an object.\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Dependency Conflict Error in Sui Project\nDESCRIPTION: Shows the error message encountered when resolving dependencies for package A, highlighting conflicting dependencies between C and B -> C paths.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui/tests/shell_tests/dvx-953/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nFailed to build Move modules: When resolving dependencies for package A, conflicting dependencies found:\nAt C\n        Bridge = { git = \"https://github.com/MystenLabs/sui.git\", rev = \"04f11afaf5e0\", subdir = \"crates/sui-framework/packages/bridge\" }\n        D = { local = \"../D\" }\n        MoveStdlib = { git = \"https://github.com/MystenLabs/sui.git\", rev = \"04f11afaf5e0\", subdir = \"crates/sui-framework/packages/move-stdlib\" }\n        Sui = { git = \"https://github.com/MystenLabs/sui.git\", rev = \"04f11afaf5e0\", subdir = \"crates/sui-framework/packages/sui-framework\" }\n        SuiSystem = { git = \"https://github.com/MystenLabs/sui.git\", rev = \"04f11afaf5e0\", subdir = \"crates/sui-framework/packages/sui-system\" }\nAt B -> C\n        Bridge = { git = \"https://github.com/MystenLabs/sui.git\", rev = \"04f11afaf5e0\", subdir = \"crates/sui-framework/packages/bridge\" }\n        D = { local = \"../D\" }\n        MoveStdlib = { git = \"https://github.com/MystenLabs/sui.git\", rev = \"04f11afaf5e0\", subdir = \"crates/sui-framework/packages/move-stdlib\" }\n        Sui = { git = \"https://github.com/MystenLabs/sui.git\", rev = \"04f11afaf5e0\", subdir = \"crates/sui-framework/packages/sui-framework\" }\n        SuiSystem = { git = \"https://github.com/MystenLabs/sui.git\", rev = \"04f11afaf5e0\", subdir = \"crates/sui-framework/packages/sui-system\" }.\n```\n\n----------------------------------------\n\nTITLE: Borrowing Leaf by Index in Critbit Tree\nDESCRIPTION: Provides immutable access to a leaf value in the critbit tree by its index. Returns a reference to the value stored in the leaf at the specified index.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_16\n\nLANGUAGE: move\nCODE:\n```\npublic fun borrow_leaf_by_index<V: store>(tree: & CritbitTree<V>, index: u64): &V {\n    let entry = table::borrow(&tree.leaves, index);\n    &entry.value\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Sui Node Keys\nDESCRIPTION: Commands to generate the required keys for a Sui Node using the sui keytool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsui keytool generate bls12381\nsui keytool generate ed25519\nsui keytool generate ed25519\nsui keytool generate ed25519\n```\n\n----------------------------------------\n\nTITLE: Implementing Updated LockedDashboard with Tabs\nDESCRIPTION: Enhanced version of LockedDashboard component implementing tab functionality using RadixUI Tabs.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { Tabs } from \"@radix-ui/themes\";\nimport { LockOwnedObjects } from \"@/components/locked/LockOwnedObjects\";\n\nexport function LockedDashboard() {\n  const tabs = [\n    {\n      name: \"Lock Owned objects\",\n      component: () => <LockOwnedObjects />,\n    },\n  ];\n\n  const [tab, setTab] = useState(tabs[0].name);\n\n  return (\n    <Tabs.Root value={tab} onValueChange={setTab}>\n      <Tabs.List>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Trigger\n              key={index}\n              value={tab.name}\n              className=\"cursor-pointer\"\n            >\n              {tab.name}\n            </Tabs.Trigger>\n          );\n        })}\n      </Tabs.List>\n      {tabs.map((tab, index) => {\n        return (\n          <Tabs.Content key={index} value={tab.name}>\n            {tab.component()}\n          </Tabs.Content>\n        );\n      })}\n    </Tabs.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Sui Node Logging Configuration\nDESCRIPTION: Commands to view and change the logging configuration of a running Sui Node using the admin interface.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl localhost:1337/logging\ncurl localhost:1337/logging -d \"info\"\n```\n\n----------------------------------------\n\nTITLE: Looping Over U64 Range (Exclusive) in Move\nDESCRIPTION: Macro function that loops applying a given function to each number from start to stop (exclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do<$R: drop>($start: u64, $stop: u64, $f: |u64| -> $R) {\n    std::macros::range_do!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Coin Constants in Move\nDESCRIPTION: Constants for error codes and configuration values used in coin operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/coin.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\nconst EBadWitness: u64 = 0;\nconst EInvalidArg: u64 = 1;\nconst ENotEnough: u64 = 2;\nconst EGlobalPauseNotAllowed: u64 = 3;\nconst DENY_LIST_COIN_INDEX: u64 = 0;\n```\n\n----------------------------------------\n\nTITLE: Start Local Faucet using sui-faucet\nDESCRIPTION: This command starts a local faucet, providing SUI coins for a local Sui network. Note this is a separate binary and needs to be run in a separate terminal.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n\"sui-faucet\"\n```\n\n----------------------------------------\n\nTITLE: Getting Objects in Chunks\nDESCRIPTION: Command to retrieve objects with 2 threads against two RPC server instances, processing them in chunks of 20 objects at a time.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rpc-loadgen/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-rpc-loadgen -- --urls \"http://127.0.0.1:9000\" \"http://127.0.0.1:9000\" --num-threads 2 get-object --chunk-size 20\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project with Conflicting Lint Options\nDESCRIPTION: Command with both lint enablement and disablement flags, which demonstrates conflicting options. The behavior would depend on how the build tool handles such conflicts.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/lint_flags/args.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbuild --lint --no-lint\n```\n\n----------------------------------------\n\nTITLE: Module Dependencies Declaration\nDESCRIPTION: Imports required standard and Sui-specific modules for the implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/poseidon.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::vector;\nuse sui::address;\nuse sui::bcs;\nuse sui::hex;\n```\n\n----------------------------------------\n\nTITLE: Defining Borrow Hot Potato Struct\nDESCRIPTION: A hot potato struct used to ensure items borrowed via borrow_val are properly returned to the Kiosk.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Borrow {\n    kiosk_id: sui::object::ID,\n    item_id: sui::object::ID\n}\n```\n\n----------------------------------------\n\nTITLE: Convert Byte Array to G2 Element in Sui Framework - Move\nDESCRIPTION: This function g2_from_bytes converts a byte vector to an Element of type G2. It relies on the from_bytes method provided by the group_ops module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_26\n\nLANGUAGE: move\nCODE:\n```\npublic fun g2_from_bytes(bytes: &vector<u8>): Element<G2> {\n    group_ops::from_bytes(G2_TYPE, bytes, false)\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Executing sui-tool from Source\nDESCRIPTION: This shell command illustrates how to build and run the sui-tool from source using Cargo. The tool accepts various command-line arguments (<args>) for configuration. The command requires Cargo as a dependency.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-tool/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\ncargo run --bin sui-tool -- <args>\n\n```\n\n----------------------------------------\n\nTITLE: Reviewing Helm Deployment History\nDESCRIPTION: This command displays the deployment history for a specific Helm release.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/helm/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm history <name>\n```\n\n----------------------------------------\n\nTITLE: Comparing Source Files and Configuration During Sui Project Migration\nDESCRIPTION: This shell script performs two comparison operations: first comparing the 'sources' directory with 'migration_sources', and then comparing the 'Move.toml' file with its expected version 'Move.toml.expected'. These comparisons are likely part of a migration process to verify changes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/migration_address_block/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndiff -r -s sources migration_sources\ndiff -s Move.toml Move.toml.expected\n```\n\n----------------------------------------\n\nTITLE: Running Sandbox Experiment Tests with Different Parameters\nDESCRIPTION: This snippet demonstrates multiple ways to run sandbox experiment tests using the 'sandbox exp-test' command. It includes examples of specifying different test directories, running coverage tests, and executing multiple test runs for the same or different modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/metatests/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox exp-test -p dummy/test_1/args.txt\nsandbox exp-test -p dummy/test_2\nsandbox exp-test -p dummy\nsandbox exp-test -p cov/plain --track-cov\nsandbox exp-test -p cov/two-runs-same-module --track-cov\nsandbox exp-test -p cov/two-runs-diff-module --track-cov\n```\n\n----------------------------------------\n\nTITLE: Installing Move-Analyzer via Cargo\nDESCRIPTION: Command to install the move-analyzer language server using Cargo. This is a manual installation method when pre-built binaries aren't available for a platform.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-analyzer/editors/code/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --git https://github.com/MystenLabs/sui sui-move-lsp\n```\n\n----------------------------------------\n\nTITLE: File Reference for Native Move Function Implementation\nDESCRIPTION: Reference paths and file patterns for implementing native Move functions, including the Move interface file, Rust implementation, testing files, and gas configuration updates.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n./sui-framework/{name}.move\n./sui-framework/src/natives/{name}.rs\n{name}_tests.move\n```\n\n----------------------------------------\n\nTITLE: Listing Keytool Addresses\nDESCRIPTION: Lists all addresses created using the Sui keytool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/multisig.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsui keytool list\n```\n\n----------------------------------------\n\nTITLE: Package Manifest Configuration\nDESCRIPTION: Example of a package manifest file showing version specifications for both the package and its dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/versioning.mdx#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"some_pkg\"\nversion = \"1.0.0\"\n\n[dependencies]\nanother_pkg = { git = \"https://github.com/another_pkg/another_pkg.git\" , version = \"2.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Accessing Validator Proof of Possession\nDESCRIPTION: Function to retrieve the proof of possession bytes from a Validator's metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_54\n\nLANGUAGE: Move\nCODE:\n```\npublic fun proof_of_possession(self: &Validator): &vector<u8> {\n    &self.metadata.proof_of_possession\n}\n```\n\n----------------------------------------\n\nTITLE: Running Trace Execution Test and Comparing Results in Shell\nDESCRIPTION: This command executes a trace execution test with a specific flag and then compares the generated traces with saved traces using the diff utility. It's used to detect changes in execution behavior or performance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/tracing_tests/tracing-unit-tests/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntest -t 1 --trace-execution\n> diff -qr traces saved_traces\n```\n\n----------------------------------------\n\nTITLE: Loading and Upgrading Validator in Move\nDESCRIPTION: Defines load_validator_maybe_upgrade, which returns the latest Validator version. It upgrades the ValidatorWrapper lazily if the current version is outdated, utilizing the upgrade_to_latest function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_wrapper.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\npublic(package) fun load_validator_maybe_upgrade(self: &mut sui_system::validator_wrapper::ValidatorWrapper): &mut sui_system::validator::Validator\n{\n    self.upgrade_to_latest();\n    self.inner.load_value_mut()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Section Heading\nDESCRIPTION: Demonstrates the correct Markdown syntax for creating a section heading. This example uses a level 2 heading (##) to define the section.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n\"## This is a section heading\"\n```\n\n----------------------------------------\n\nTITLE: Defining VerifiedIssuer Struct in Move\nDESCRIPTION: Defines a struct representing proof that a user's address was created using zklogin with a specific issuer. Contains fields for ID, owner address, and issuer string.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_issuer.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct VerifiedIssuer has key {\n    id: sui::object::UID,\n    owner: address,\n    issuer: std::string::String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ActiveJwk Comparison in Move\nDESCRIPTION: Implements a function to compare two ActiveJwk instances for equality, ignoring the epoch field and focusing on the JWK and JwkId components.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\nfun active_jwk_equal(a: &ActiveJwk, b: &ActiveJwk): bool {\n    // note: epoch is ignored\n    jwk_equal(&a.jwk, &b.jwk) && jwk_id_equal(&a.jwk_id, &b.jwk_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Value with Default from Option in Move\nDESCRIPTION: Function to get the value inside an Option, returning a default value if the Option is None.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_with_default<Element: copy + drop>(t: &Option<Element>, default: Element): Element {\n    let vec_ref = &t.vec;\n    if (vec_ref.is_empty()) default else vec_ref[0]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Size of Sui Node Databases\nDESCRIPTION: This command checks the size of the Sui node databases located in the specified directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ du -sh /opt/sui/db/\n```\n\n----------------------------------------\n\nTITLE: Building a Move Package\nDESCRIPTION: Commands for building a Move package, including options for specifying the package location and build output directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ move build # Builds the Move package you are currently in\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ move build -p <path> # Builds the Move package at <path>\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ move build --build-dir <path_to_save_to> # Build current Move package and save artifacts under <path_to_save_to>\n```\n\n----------------------------------------\n\nTITLE: Deactivating Validator Staking Pool - Move\nDESCRIPTION: Deactivates a validator's staking pool for a specified deactivation epoch. This function modifies the validator's state to stop accepting new stakes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_28\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun deactivate(self: &mut Validator, deactivation_epoch: u64)\n```\n\n----------------------------------------\n\nTITLE: Generating Struct Layouts with Phantom Type Ignoring\nDESCRIPTION: Commands to generate struct layouts for various structs in the phantoms module with the --ignore-phantom-types flag, demonstrating how phantom types are handled in struct keys.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/generate_struct_layout/args.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct A --type-args bool --ignore-phantom-types\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct A --type-args u64 --ignore-phantom-types\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct B --type-args bool u8 --ignore-phantom-types\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct C --type-args u8 u64 u128 --ignore-phantom-types\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct D --type-args bool u64 --ignore-phantom-types\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/phantoms.mv --struct E --type-args bool u64 u128 --ignore-phantom-types\n```\n\n----------------------------------------\n\nTITLE: Processing Paired Elements from Two Vectors in Sui Move\nDESCRIPTION: A macro function that destroys two vectors by calling a function on each pair of elements. It aborts if the vectors have different lengths, and processes the elements in their original order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_29\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun zip_do<$T1, $T2, $R: drop>(\n    $v1: vector<$T1>,\n    $v2: vector<$T2>,\n    $f: |$T1, $T2| -> $R,\n) {\n    let v1 = $v1;\n    let mut v2 = $v2;\n    v2.reverse();\n    let len = v1.length();\n    assert!(len == v2.length());\n    v1.do!(|el1| $f(el1, v2.pop_back()));\n    v2.destroy_empty();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Name using Sui CLI\nDESCRIPTION: Command to update a validator's name using the Sui CLI by calling the sui_system::update_validator_name function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsui client call --package 0x3 --module sui_system --function update_validator_name --args 0x5 \\\"new_validator_name\\\" --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Publishing and Running Sui Modules in Sandbox\nDESCRIPTION: CLI commands for publishing a module to Sui sandbox and executing a module function named 'looper' with a gas budget of 100 units. The module is located at a specific storage path.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/gas_metering/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsandbox publish\nsandbox run storage/0x0000000000000000000000000000000000000000000000000000000000000042/modules/m.mv looper --gas-budget 100\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cut Usage with Dry Run Option\nDESCRIPTION: Shows how to use the 'cut' binary with the '--dry-run' option to inspect potential copies without making changes to the filesystem.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/sui-execution/cut/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nUse the `--dry-run` option to inspect the copies\\nthat `cut` would make without committing them to the filesystem.\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated create_account Function in Move\nDESCRIPTION: Implements a deprecated function for creating an account. It simply aborts with a DEPRECATED constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun create_account(_ctx: &mut TxContext): AccountCap {\n    abort DEPRECATED\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Address Length in Move for Sui Blockchain\nDESCRIPTION: This function returns the length of an address in the Sui blockchain. It's currently hardcoded to 32 bytes but should be converted to a native function for platform independence.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/address.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun length(): u64 {\n    32\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing a Boolean Value from BCS Bytes in Move\nDESCRIPTION: Reads a boolean value from BCS-serialized bytes. It ensures the value is either 0 (false) or 1 (true), and aborts with an error code otherwise.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_6\n\nLANGUAGE: move\nCODE:\n```\npublic fun peel_bool(bcs: &mut BCS): bool {\n    let value = bcs.peel_u8();\n    if (value == 0) false\n    else if (value == 1) true\n    else abort ENotBool\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unquote Integer Division in Move\nDESCRIPTION: This macro function performs division on fixed-point numbers represented as integers. It handles scaling, fractional bits, division by zero check, and overflow checks. The function takes the value, divisor, maximum value, number of fractional bits, division by zero abort condition, and an overflow abort condition as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun uq_int_div<$T, $U>(\n    $val: $T,\n    $divisor: $T,\n    $max_t: $T,\n    $fractional_bits: u8,\n    $abort_division_by_zero: _,\n    $abort_overflow: _,\n): $T {\n    let val = $val;\n    let divisor = $divisor;\n    // Check for division by zero.\n    if (divisor == 0) $abort_division_by_zero;\n    // First convert to $U to increase the number of bits to the next integer size\n    // and then shift left to add `$fractional_bits` fractional zero bits to the dividend.\n    let scaled_value = val as $U << $fractional_bits;\n    let quotient = scaled_value / (divisor as $U);\n    // Check whether the value is too large.\n    if (quotient > $max_t as $U) $abort_overflow;\n    quotient as $T\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Underlying Bytes of an ASCII String in Move\nDESCRIPTION: Returns a reference to the underlying bytes of an ASCII string. It takes a reference to a String and returns a reference to a vector of u8.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/ascii.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic fun as_bytes(string: &String): &vector<u8> {\n    &string.bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Code Coverage with Forge\nDESCRIPTION: Command to generate code coverage reports for Solidity contracts using Forge's coverage analysis tool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/bridge/evm/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nforge coverage\n```\n\n----------------------------------------\n\nTITLE: Building and deploying Move book\nDESCRIPTION: Commands for building the book and moving files for deployment\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmdbook build\n```\n\nLANGUAGE: shell\nCODE:\n```\nmv L/* .\n```\n\n----------------------------------------\n\nTITLE: Running mdbook preview commands\nDESCRIPTION: Commands for previewing the book content either statically or with live updates\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmdbook serve\n```\n\nLANGUAGE: shell\nCODE:\n```\nmdbook watch\n```\n\n----------------------------------------\n\nTITLE: Parsing Move Files with Tree Sitter\nDESCRIPTION: This command runs the Tree Sitter parser on all Move files in the tests directory. It generates a quiet output (-q flag) and includes the tree (-t flag) representation of the parsed code.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/tree-sitter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntree-sitter parse -q -t tests/*.move\n```\n\n----------------------------------------\n\nTITLE: Installing Move Extension via Command Line\nDESCRIPTION: Command-line method to install the Move VS Code extension using the VS Code executable. Provides an alternative installation approach for users comfortable with terminal commands.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/ide/move.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ code --install-extension mysten.move\n```\n\n----------------------------------------\n\nTITLE: Check Pending Validator Duplicates\nDESCRIPTION: Verifies if a new validator is a duplicate of any pending validators in the validator set.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_29\n\nLANGUAGE: Move\nCODE:\n```\nfun is_duplicate_with_pending_validator(self: &ValidatorSet, new_validator: &Validator): bool {\n    count_duplicates_tablevec(&self.pending_active_validators, new_validator) > 0\n}\n```\n\n----------------------------------------\n\nTITLE: Updating JSON-RPC Address in Full Node Config\nDESCRIPTION: Modifies the `fullnode-template.yaml` file to change the JSON-RPC address to listen on all interfaces (0.0.0.0) instead of only localhost (127.0.0.1). This allows external access to the Full node's RPC interface.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsed -i 's/127.0.0.1/0.0.0.0/' fullnode-template.yaml\n```\n\n----------------------------------------\n\nTITLE: Building Sui Genesis Object\nDESCRIPTION: Commands for the Master of Ceremony to build the genesis object after all validators and gas objects have been added.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui/genesis.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sui genesis-ceremony build\n$ git add .\n$ git commit -m \"build genesis\"\n$ git push\n```\n\n----------------------------------------\n\nTITLE: ASCII String Manipulation Module in Move\nDESCRIPTION: The 0x1::ascii module provides functions for handling ASCII strings, including character manipulation, validation, and string transformations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_42\n\nLANGUAGE: move\nCODE:\n```\n// ASCII string manipulation functions\n0x1::ascii::pop_char          // public fun\n0x1::ascii::length           // public fun\n0x1::ascii::append           // public fun\n0x1::ascii::insert           // public fun\n0x1::ascii::substring        // public fun\n0x1::ascii::as_bytes         // public fun\n0x1::ascii::into_bytes       // public fun\n0x1::ascii::byte             // public fun\n0x1::ascii::is_valid_char    // public fun\n0x1::ascii::is_printable_char // public fun\n0x1::ascii::is_empty         // public fun\n0x1::ascii::to_uppercase     // public fun\n0x1::ascii::to_lowercase     // public fun\n0x1::ascii::index_of         // public fun\n0x1::ascii::char_to_uppercase // fun (internal)\n0x1::ascii::char_to_lowercase // fun (internal)\n```\n\n----------------------------------------\n\nTITLE: Running Sui Tests with Seed and Iteration Parameters\nDESCRIPTION: These commands demonstrate how to run Sui tests with different seed values and number of iterations. The --seed parameter sets a specific seed for randomization, while --rand-num-iters controls the number of random iterations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/random_test_flag_correctness/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntest --seed 1 --rand-num-iters 10\n```\n\nLANGUAGE: shell\nCODE:\n```\ntest --seed 2 --rand-num-iters 0\n```\n\nLANGUAGE: shell\nCODE:\n```\ntest --rand-num-iters 0\n```\n\nLANGUAGE: shell\nCODE:\n```\ntest --rand-num-iters 100\n```\n\n----------------------------------------\n\nTITLE: Handling URLs in Move\nDESCRIPTION: This snippet defines the Url structure and associated functions for creating, manipulating, and querying URLs in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Url\npublic fun new_unsafe\npublic fun new_unsafe_from_bytes\npublic fun inner_url\npublic fun update\n```\n\n----------------------------------------\n\nTITLE: Displaying Key Pair Data with Sui Keytool\nDESCRIPTION: Shows how to display key pair information stored in a .key file using the sui keytool show command. Outputs include Sui address, base64 public key, key scheme, flag, and peer ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/keytool.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsui keytool show 0x5d8aa70f17d9343813d3ba6a59ecf5e8a23ffb487938e860999a722989eaef25.key\n```\n\nLANGUAGE: sh\nCODE:\n```\n╭─────────────────┬──────────────────────────────────────────────────────────────────────╮\n│ suiAddress      │  0x5d8aa70f17d9343813d3ba6a59ecf5e8a23ffb487938e860999a722989eaef25  │\n│ publicBase64Key │  AC+AKTAGf9iv0JqeLXXlsr4PUzBXb9VY8lK7xiZMS50GSu6                     │\n│ keyScheme       │  ed25519                                                             │\n│ flag            │  0                                                                   │\n│ peerId          │  a4c019ff62bf426a78b5d796caf83d4cc15dbf5563c94aef1899312e74192bba    │\n╰─────────────────┴──────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Starting Development Preview of Sui Documentation Site\nDESCRIPTION: This command starts the development server for the Sui documentation site and serves it on localhost at port 3000. It should be run after building the site to enable live updates and testing.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Destroying AWS Testbed Instances After Benchmarking\nDESCRIPTION: Command to terminate all deployed EC2 instances when the testbed is no longer needed. AWS may not immediately delete terminated instances, which can take a few hours.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-aws-orchestrator/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-aws-orchestrator -- testbed destroy\n```\n\n----------------------------------------\n\nTITLE: Error Output Format for Failed Metric Checks\nDESCRIPTION: Example of error output from the sui-metric-checker tool when metrics fail to meet threshold conditions. Shows both connection/retry errors and threshold validation failures with the specific metrics that failed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-metric-checker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nError: Following queries failed to meet threshold conditions: [\n    \"After 3 retry attempts - Did not get expected response from server for histogram_quantile(0.5, sum by(le) (rate(latency_s_bucket{network=\\\"private-testnet\\\"}[15m])))\",\n    \"After 3 retry attempts - Did not get expected response from server for histogram_quantile(0.95, sum by(le) (rate(latency_s_bucket{network=\\\"private-testnet\\\"}[15m])))\",\n    \"After 3 retry attempts - Did not get expected response from server for sum(rate(num_success{network=\\\"private-testnet\\\"}[5m]))\",\n    \"Query \\\"histogram_quantile(0.50, sum by(le) (rate(batch_execution_latency_bucket{network=\\\"private-testnet\\\"}[15m])))\\\" returned value of 3.112150385622982 which is Greater 3\",\n    \"Query \\\"avg(rate(total_transaction_effects{network=\\\"private-testnet\\\"}[5m]))\\\" returned value of 1.081275647819765 which is Less 5500\",\n    \"Query \\\"avg (rate(batch_size_sum{network=\\\"private-testnet\\\"}[5m]))\\\" returned value of 0.24698238962944846 which is Less 5500\",\n]\n```\n\n----------------------------------------\n\nTITLE: BLS12-381 Cryptographic Operations in Sui\nDESCRIPTION: Functions and structures for BLS12-381 elliptic curve cryptography, including scalar operations and group element manipulations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Scalar(0x2::bls12381)\npublic struct G1(0x2::bls12381)\npublic struct G2(0x2::bls12381)\npublic struct GT(0x2::bls12381)\npublic struct UncompressedG1(0x2::bls12381)\npublic fun bls12381_min_sig_verify(0x2::bls12381)\npublic fun bls12381_min_pk_verify(0x2::bls12381)\npublic fun scalar_from_bytes(0x2::bls12381)\npublic fun scalar_from_u64(0x2::bls12381)\npublic fun scalar_zero(0x2::bls12381)\npublic fun scalar_one(0x2::bls12381)\npublic fun scalar_add(0x2::bls12381)\npublic fun scalar_sub(0x2::bls12381)\npublic fun scalar_mul(0x2::bls12381)\npublic fun scalar_div(0x2::bls12381)\npublic fun scalar_neg(0x2::bls12381)\npublic fun scalar_inv(0x2::bls12381)\npublic fun g1_from_bytes(0x2::bls12381)\npublic fun g1_identity(0x2::bls12381)\npublic fun g1_generator(0x2::bls12381)\npublic fun g1_add(0x2::bls12381)\npublic fun g1_sub(0x2::bls12381)\npublic fun g1_mul(0x2::bls12381)\npublic fun g1_div(0x2::bls12381)\npublic fun g1_neg(0x2::bls12381)\n```\n\n----------------------------------------\n\nTITLE: Cloning Sui GitHub Repository\nDESCRIPTION: Clones the Sui repository from GitHub using a specific branch name. Essential for installation from source using Cargo, the Rust package manager.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/MystenLabs/sui.git -b branch-name\n```\n\n----------------------------------------\n\nTITLE: Returning Unit Value Examples\nDESCRIPTION: Shows equivalent ways to return the unit value from a function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_23\n\nLANGUAGE: move\nCODE:\n```\nfun foo() { return }\nfun foo() { return () }\n```\n\n----------------------------------------\n\nTITLE: Importing Protocol Component in React/TSX\nDESCRIPTION: Importing a custom Protocol component from a local site component directory, likely used for rendering gRPC protocol documentation or interface.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/fullnode-protocol.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Protocol from \"../../site/src/components/Protocol\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Tick Level in DeepBook CLOB Order Query (Move)\nDESCRIPTION: This function returns the next tick level for pagination in the DeepBook CLOB order query.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/order_query.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun next_tick_level(page: &OrderPage): Option<u64> {\n    page.next_tick_level\n}\n```\n\n----------------------------------------\n\nTITLE: Get Notional Value Function in Move\nDESCRIPTION: Retrieves the notional value for a given token type from the bridge treasury.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/treasury.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun notional_value<T>(self: &BridgeTreasury): u64 {\n    let metadata = self.get_token_metadata<T>();\n    metadata.notional_value\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Move Plugin Globally\nDESCRIPTION: Command to install the Prettier Move plugin globally using npm. This allows for CLI usage of the plugin.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g prettier @mysten/prettier-plugin-move\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Project URL in Sui System\nDESCRIPTION: Updates a validator's project URL in the Sui system state. Requires mutable access to SuiSystemState and the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_19\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_validator_project_url(\n    self: &mut SuiSystemState,\n    project_url: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_validator_project_url(project_url, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Misperforming Validators in Sui\nDESCRIPTION: This shell command is used to report a validator as misperforming or non-compliant. It relies on the Sui client and takes the Sui address of the validator to be reported, along with necessary package and module parameters. It requires the gas budget to ensure the transaction is processed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-config.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sui client call --package <PACKAGE-ID> --module sui_system --function report_validator --args 0x5 0x44840a79dd5cf1f5efeff1379f5eece04c72db13512a2e31e8750f5176285446 --gas-budget <GAS-AMOUNT>\n```\n\n----------------------------------------\n\nTITLE: Generating Sui Genesis Configuration\nDESCRIPTION: This snippet shows how to generate a Sui genesis configuration with faucet and store it in a specified directory. The `-f` flag forces overwriting any existing configuration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-test-validator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n\"sui genesis -f --with-faucet --working-dir=[some-directory]\"\n```\n\n----------------------------------------\n\nTITLE: Item Locking Function in Move\nDESCRIPTION: Protected function for locking items in a Kiosk requiring lock permission. Includes validation of extension installation and permissions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk_extension.md#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\npublic fun lock<Ext: drop, T: key + store>(\n    _ext: Ext,\n    self: &mut Kiosk,\n    item: T,\n    _policy: &TransferPolicy<T>,\n) {\n    assert!(is_installed<Ext>(self), EExtensionNotInstalled);\n    assert!(can_lock<Ext>(self), EExtensionNotAllowed);\n    self.lock_internal(item)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fastcrypto CLI\nDESCRIPTION: Instructions for setting up the fastcrypto CLI tool for signature generation\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/signing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit@github.com:MystenLabs/fastcrypto.git\ncd fastcrypto/\ncargo build --bin sigs-cli\n```\n\n----------------------------------------\n\nTITLE: Downloading Private Security Fixes for Sui\nDESCRIPTION: This command downloads signed binaries and docker artifacts incorporating security fixes. It uses a script to fetch the necessary files from a specified directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n./download_private.sh <directory-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Fungible Tokens on Sui Blockchain in TypeScript\nDESCRIPTION: Code snippet from mint.ts showing how to create a Fungible Token without metadata. The getVecMapValues function returns empty arrays for keys and values, indicating the creation of an FT rather than an NFT.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\n// example without metadata -> FT\nfunction getVecMapValues() {\n\n    const keys : string[] = [];\n    const values : string[] = [];\n\n    return { keys, values };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StakedSui Struct in Move\nDESCRIPTION: A self-custodial object holding staked SUI tokens with fields for pool identification, activation epoch tracking, and the staked SUI balance.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic struct StakedSui has key, store\n{\n    id: sui::object::UID,\n    pool_id: sui::object::ID,\n    stake_activation_epoch: u64,\n    principal: sui::balance::Balance<sui::sui::SUI>\n}\n```\n\n----------------------------------------\n\nTITLE: Popping an Element from TableVec in Sui Move\nDESCRIPTION: Implements the pop_back function to remove and return the last element from the TableVec.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/table_vec.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun pop_back<Element: store>(t: &mut TableVec<Element>): Element {\n    let length = length(t);\n    assert!(length > 0, EIndexOutOfBound);\n    t.contents.remove(length - 1)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Demo Escrows\nDESCRIPTION: Command to generate demo escrow data\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node helpers/create-demo-escrows.ts\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project with Verbose Output in Shell\nDESCRIPTION: This command builds the Sui project using the build tool (likely Cargo for Rust projects) with verbose output enabled. The -v flag typically increases the verbosity of the build process, providing more detailed information about each step.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/public_package/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nbuild -v\n```\n\n----------------------------------------\n\nTITLE: Using nondeterministic! Macro for Random ObjectID in Rust\nDESCRIPTION: Demonstrates the use of the nondeterministic! macro to generate a random ObjectID outside the deterministic environment of the simulator. This is useful for operations that require true randomness.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-simulator/README.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nlet path = dir.join(format!(\"DB_{:?}\", nondeterministic!(ObjectID::random())));\n```\n\n----------------------------------------\n\nTITLE: Installing Bridge Node using Cargo\nDESCRIPTION: Commands to install the Bridge Node using Cargo, either from a specific branch or commit.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --locked --git \"https://github.com/MystenLabs/sui.git\" --branch {BRANCH-NAME} sui-bridge\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --locked --git \"https://github.com/MystenLabs/sui.git\" --rev {SHA-NAME} sui-bridge\n```\n\n----------------------------------------\n\nTITLE: Checking Terminal Connection in Shell\nDESCRIPTION: Tests if file descriptor 1 (stdout) is connected to a terminal. The test -t 1 command returns true (0) if stdout is connected to a terminal, and false (non-zero) otherwise.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/clever_errors/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntest -t 1\n```\n\n----------------------------------------\n\nTITLE: Code Injection Example\nDESCRIPTION: This snippet demonstrates how to inject code from the Sui repository directly into the documentation using the `{@inject}` directive. This ensures that the code displayed in the documentation is always up-to-date with the source code in the repository. The file location is automatically used as the title for the codeblock.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n{@inject: examples/move/hero/sources/example.move}\n```\n\n----------------------------------------\n\nTITLE: Updating Kiosk Owner in Move\nDESCRIPTION: Updates the owner field of a Kiosk with a custom address. Requires owner authentication via KioskOwnerCap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/kiosk.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic fun set_owner_custom(self: &mut Kiosk, cap: &KioskOwnerCap, owner: address) {\n    assert!(self.has_access(cap), ENotOwner);\n    self.owner = owner\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Kubernetes Deployments\nDESCRIPTION: This snippet uses Go templating and bash commands to determine and output the appropriate application URL based on the Kubernetes service configuration. It handles Ingress, NodePort, LoadBalancer, and ClusterIP service types, providing specific instructions for each scenario.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/helm/indexer/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"indexer.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"indexer.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"indexer.fullname\" . }} --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"indexer.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Type Argument Specification and Inference\nDESCRIPTION: Shows how type arguments can be either explicitly specified or inferred.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/functions.md#2025-04-22_snippet_17\n\nLANGUAGE: move\nCODE:\n```\nmodule aexample {\n    public fun id<T>(x: T): T { x }\n}\n\nmodule b::other {\n    fun call_all() {\n        a::example::id(0);\n        a::example::id<u64>(0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token ID Retrieval Function in Move\nDESCRIPTION: Defines a function to retrieve the token ID for a given token type from the BridgeTreasury.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/treasury.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun token_id<T>(self: &BridgeTreasury): u8 {\n    let metadata = self.get_token_metadata<T>();\n    metadata.id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Sui Package Upgrade Policies in Move\nDESCRIPTION: Defines constants representing different package upgrade policies in Sui, including COMPATIBLE, ADDITIVE, and DEP_ONLY.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\nconst COMPATIBLE: u8 = 0;\nconst ADDITIVE: u8 = 128;\nconst DEP_ONLY: u8 = 192;\n```\n\n----------------------------------------\n\nTITLE: Adding UQ64_64 Fixed-Point Numbers\nDESCRIPTION: Function to add two fixed-point numbers, with overflow checking to abort if the sum would exceed the representable range.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq64_64.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun add(a: UQ64_64, b: UQ64_64): UQ64_64 {\n    UQ64_64(std::macros::uq_add!<u128, u256>(a.0, b.0, std::u128::max_value!(), abort EOverflow))\n}\n```\n\n----------------------------------------\n\nTITLE: Full Node with Indexing and Aggressive Pruning\nDESCRIPTION: Pruning configuration for a Full node that supports indexing while aggressively pruning historic data\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/data-management.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauthority-store-pruning-config:\n  num-epochs-to-retain: 5\n  num-epochs-to-retain-for-checkpoints: 2\n```\n\n----------------------------------------\n\nTITLE: Registering Bridge Committee\nDESCRIPTION: Command to register a Bridge Validator with the bridge committee, specifying the authority key path and URL.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/bridge-node-configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ sui validator register-bridge-committee --bridge-authority-key-path <BRIDGE-AUTHORITY-KEY-PATH> --bridge-authority-url <BRIDGE-AUTHORITY-URL>\n```\n\n----------------------------------------\n\nTITLE: Updating Child Node in Move Critbit Tree\nDESCRIPTION: The 'update_child' function updates the child of a specified parent node in a critbit tree. It requires the parent node index, the new child index, and a boolean indicating if it is a left child. The function ensures the parent is non-null and updates the child while managing parent-child relationships for both internal nodes and leaf nodes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\n<b>fun</b> <a href=\"../deepbook/critbit.md#deepbook_critbit_update_child\">update_child</a>&lt;V: store&gt;(tree: &<b>mut</b> <a href=\"../deepbook/critbit.md#deepbook_critbit_CritbitTree\">CritbitTree</a>&lt;V&gt;, parent_index: u64, new_child: u64, <a href=\"../deepbook/critbit.md#deepbook_critbit_is_left_child\">is_left_child</a>: bool) {\n    <b>assert</b>!(parent_index != <a href=\"../deepbook/critbit.md#deepbook_critbit_PARTITION_INDEX\">PARTITION_INDEX</a>, <a href=\"../deepbook/critbit.md#deepbook_critbit_ENullParent\">ENullParent</a>);\n    <b>if</b> (<a href=\"../deepbook/critbit.md#deepbook_critbit_is_left_child\">is_left_child</a>) {\n        table::borrow_mut(&<b>mut</b> tree.internal_nodes, parent_index).left_child = new_child;\n    } <b>else</b>{\n        table::borrow_mut(&<b>mut</b> tree.internal_nodes, parent_index).right_child = new_child;\n    };\n    <b>if</b> (new_child &gt; <a href=\"../deepbook/critbit.md#deepbook_critbit_PARTITION_INDEX\">PARTITION_INDEX</a>) {\n        table::borrow_mut(&<b>mut</b> tree.leaves, <a href=\"../deepbook/critbit.md#deepbook_critbit_MAX_U64\">MAX_U64</a> - new_child).parent = parent_index;\n    } <b>else</b> {\n        table::borrow_mut(&<b>mut</b> tree.internal_nodes, new_child).parent = parent_index;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Sui Installation in Shell\nDESCRIPTION: This command checks if Sui is installed on the system by returning the path to the Sui binary.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/connect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ which sui\n```\n\n----------------------------------------\n\nTITLE: Creating Multisig Public Key in TypeScript\nDESCRIPTION: Function to create a multisig public key from an array of public keys. It deduplicates keys based on their Sui addresses and sets up a multisig configuration with threshold 1 and equal weights for all keys.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/tic-tac-toe.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function multiSigPublicKey(keys: PublicKey[]): MultiSigPublicKey {\n  const deduplicated: { [key: string]: PublicKey } = {};\n  for (const key of keys) {\n    deduplicated[key.toSuiAddress()] = key;\n  }\n\n  return MultiSigPublicKey.fromPublicKeys({\n    threshold: 1,\n    publicKeys: Object.values(deduplicated).map((publicKey) => {\n      return { publicKey, weight: 1 };\n    }),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Per Type List - Move\nDESCRIPTION: The `per_type_list` function is responsible for generating a new instance of a per-type deny list, initializing structures to maintain the count of denied addresses and their actual lists.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/deny_list.md#2025-04-22_snippet_24\n\nLANGUAGE: Move\nCODE:\n```\nfun per_type_list(ctx: &mut sui::tx_context::TxContext): sui::deny_list::PerTypeList {\n    sui::deny_list::PerTypeList {\n        id: object::new(ctx),\n        denied_count: table::new(ctx),\n        denied_addresses: table::new(ctx),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Sui Node Logs with Docker Compose\nDESCRIPTION: This shell command displays and follows the logs for the Sui validator using Docker Compose.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/docker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker compose logs -f validator\n```\n\n----------------------------------------\n\nTITLE: Converting Option to Vector in Sui Move\nDESCRIPTION: Converts the option into a vector of length 1 if it is Some, and an empty vector otherwise.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_17\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_vec<Element>(t: Option<Element>): vector<Element> {\n    let Option { vec } = t;\n    vec\n}\n```\n\n----------------------------------------\n\nTITLE: Using YTCarousel Component - JSX\nDESCRIPTION: Shows how to use the YTCarousel component with an array of YouTube video IDs. This allows displaying a carousel of video thumbnails and a player for the selected video.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<YTCarousel ids={[\\\"dQw4w9WgXcQ\\\",\\\"EwTZ2xpQwpA\\\",\\\"1TewCPi92ro\\\"]}/>\n```\n\n----------------------------------------\n\nTITLE: Build and Test Commands for Move\nDESCRIPTION: Core Move CLI commands for building the project and running tests with coverage analysis using a single thread.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/package_basics/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild\ntest --coverage --threads 1\n```\n\n----------------------------------------\n\nTITLE: Constant Definition: ERelativePowerMismatch\nDESCRIPTION: Defines a constant `ERelativePowerMismatch` set to 2. This is an error code indicating a mismatch in relative voting power.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\n<b>const</b> <a href=\"../sui_system/voting_power.md#sui_system_voting_power_ERelativePowerMismatch\">ERelativePowerMismatch</a>: u64 = 2;\n```\n\n----------------------------------------\n\nTITLE: Implementing Unquote Integer Multiplication in Move\nDESCRIPTION: This macro function performs multiplication on fixed-point numbers represented as integers. It handles scaling, fractional bits, and overflow checks. The function takes the value, multiplier, maximum value, number of fractional bits, and an overflow abort condition as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/macros.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun uq_int_mul<$T, $U>(\n    $val: $T,\n    $multiplier: $T,\n    $max_t: $T,\n    $fractional_bits: u8,\n    $abort_overflow: _,\n): $T {\n    // The product of two `$T` bit values has the same number of bits as `$U`, so perform the\n    // multiplication with `$U` types and keep the full `$U` bit product\n    // to avoid losing accuracy.\n    let unscaled_product = $val as $U * ($multiplier as $U);\n    // The unscaled product has `$fractional_bits` fractional bits (from the multiplier)\n    // so rescale it by shifting away the low bits.\n    let product = unscaled_product >> $fractional_bits;\n    // Check whether the value is too large.\n    if (product > $max_t as $U) $abort_overflow;\n    product as $T\n}\n```\n\n----------------------------------------\n\nTITLE: Sui Client PTB Command Options\nDESCRIPTION: This snippet displays the available options for the `sui client ptb` command, including options for assigning variables, dry runs, gas management, move calls, coin splitting/merging, object transfers, package publishing/upgrading, and output serialization.  It provides a summary of each option's purpose and includes examples for common use cases. The output is intended for command-line usage, displaying flags and descriptions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/ptb.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\nBuild, preview, and execute programmable transaction blocks. Depending on your shell, you might have to use quotes around arrays or other passed values. Use --help to see examples for how to use the core functionality of this\ncommand.\n\nUsage: sui client ptb [OPTIONS]\n\nOptions:\n      --assign <NAME> <VALUE>\n          Assign a value to a variable name to use later in the PTB.\n           If only a name is supplied, the result of the last transaction is bound to that name.\n           If a name and value are supplied, then the name is bound to that value.\n\n          Examples:\n           --assign MYVAR 100\n           --assign X [100,5000]\n           --split-coins gas [1000, 5000, 75000]\n           --assign new_coins # bound new_coins to the result of previous transaction\n\n      --dry-run\n          Perform a dry run of the PTB instead of executing it.\n\n      --gas-coin <ID>\n          The object ID of the gas coin to use. If not specified, it will try to use the first gas coin that it finds that has at least the requested gas-budget balance.\n\n      --gas-budget <MIST>\n          An optional gas budget for this PTB (in MIST). If gas budget is not provided, the tool will first perform a dry run to estimate the gas cost, and then it will execute the transaction. Please note that this incurs a small\n          cost in performance due to the additional dry run call.\n\n      --make-move-vec <TYPE> <[VALUES]>\n          Given n-values of the same type, it constructs a vector. For non objects or an empty vector, the type tag must be specified.\n\n          Examples:\n           --make-move-vec <u64> []\n           --make-move-vec <u64> [1, 2, 3, 4]\n           --make-move-vec <std::option::Option<u64>> [none,none]\n           --make-move-vec <sui::coin::Coin<sui::sui::SUI>> [gas]\n\n      --merge-coins <INTO_COIN> <[COIN OBJECTS]>\n          Merge N coins into the provided coin.\n\n          Examples:\n           --merge-coins @coin_object_id [@coin_obj_id1, @coin_obj_id2]\n\n      --move-call <PACKAGE::MODULE::FUNCTION> <TYPE_ARGS> <FUNCTION_ARGS>\n          Make a move call to a function.\n\n          Examples:\n           --move-call std::option::is_none <u64> none\n           --assign a none\n           --move-call std::option::is_none <u64> a\n\n      --split-coins <COIN> <[AMOUNT]>\n          Split the coin into N coins as per the given array of amounts.\n\n          Examples:\n           --split-coins gas [1000, 5000, 75000]\n           --assign new_coins # bounds the result of split-coins command to variable new_coins\n           --split-coins @coin_object_id [100]\n\n      --transfer-objects <[OBJECTS]> <TO>\n          Transfer objects to the specified address.\n\n          Examples:\n           --transfer-objects [obj1, obj2, obj3] @address\n\n           --split-coins gas [1000, 5000, 75000]\n           --assign new_coins # bound new_coins to result of split-coins to use next\n           --transfer-objects [new_coins.0, new_coins.1, new_coins.2] @to_address\n\n      --publish <MOVE_PACKAGE_PATH>\n          Publish the Move package. It takes as input the folder where the package exists.\n\n          Examples:\n           --move-call sui::tx_context::sender\n           --assign sender\n           --publish \".\"\n           --assign upgrade_cap\n           --transfer-objects \"[upgrade_cap]\" sender\n\n      --upgrade <MOVE_PACKAGE_PATH>\n          Upgrade the move package. It takes as input the folder where the package exists.\n\n      --preview\n          Preview the list of PTB transactions instead of executing them.\n\n      --serialize-unsigned-transaction\n          Instead of executing the transaction, serialize the bcs bytes of the unsigned transaction data using base64 encoding.\n\n      --serialize-signed-transaction\n          Instead of executing the transaction, serialize the bcs bytes of the signed transaction data using base64 encoding.\n\n      --summary\n          Show only a short summary (digest, execution status, gas cost). Do not use this flag when you need all the transaction data and the execution effects.\n\n      --warn-shadows\n          Enable shadow warning when the same variable name is declared multiple times. Off by default.\n\n      --json\n          Return command outputs in json format.\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n```\n\n----------------------------------------\n\nTITLE: String Bytes Comparison in Move\nDESCRIPTION: Implements byte-by-byte comparison of two strings, returning true if the first string is lexicographically less than the second\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\nfun string_bytes_lt(a: &String, b: &String): bool {\n    let a_bytes = a.as_bytes();\n    let b_bytes = b.as_bytes();\n    if (a_bytes.length() < b_bytes.length()) {\n        true\n    } else if (a_bytes.length() > b_bytes.length()) {\n        false\n    } else {\n        let mut i = 0;\n        while (i < a_bytes.length()) {\n            let a_byte = a_bytes[i];\n            let b_byte = b_bytes[i];\n            if (a_byte < b_byte) {\n                return true\n            } else if (a_byte > b_byte) {\n                return false\n            };\n            i = i + 1;\n        };\n        false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Peeling Vector of Vector of u8 from BCS in Move\nDESCRIPTION: Deserializes a vector of vectors of u8 (e.g., a vector of strings) from BCS format. It uses nested peel_vec calls to handle the two-dimensional structure.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun peel_vec_vec_u8(bcs: &mut BCS): vector<vector<u8>> {\n    bcs.peel_vec!(|bcs| bcs.peel_vec_u8())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing do_eq Macro for Inclusive Iteration from Zero in Move\nDESCRIPTION: A macro function that loops from 0 to stop (inclusive) and applies a closure function to each value. This is a convenience wrapper around range_do_eq that starts from 0.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u32.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\npublic macro fun do_eq<$R: drop>($stop: u32, $f: |u32| -> $R) {\n    std::macros::do_eq!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Cargo Test Commands\nDESCRIPTION: Commands to run and review cargo tests for framework changes\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo insta test\ncargo insta review\n```\n\n----------------------------------------\n\nTITLE: CritbitTree Size and Empty Check Functions\nDESCRIPTION: Utility functions to check the size and empty status of the tree\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun size<V: store>(tree: &CritbitTree<V>): u64 {\n    table::length(&tree.leaves)\n}\n\npublic(package) fun is_empty<V: store>(tree: &CritbitTree<V>): bool {\n    table::is_empty(&tree.leaves)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Sui Address\nDESCRIPTION: This example shows how to get the current active Sui address using the 'sui client active-address' command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client active-address\n0x514692f08249c3e9951234ce29074695840422564bff85e424b56de462913e0d\n```\n\n----------------------------------------\n\nTITLE: Multi Get Transaction Blocks\nDESCRIPTION: Command to retrieve multiple transaction blocks simultaneously using 4 threads against two RPC server instances.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rpc-loadgen/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-rpc-loadgen -- --urls \"http://127.0.0.1:9000\" \"http://127.0.0.1:9000\" --num-threads 4 multi-get-transaction-blocks\n```\n\n----------------------------------------\n\nTITLE: Getting Item ID from TransferRequest in Move\nDESCRIPTION: Getter function that returns the item ID field from a TransferRequest struct. Takes a reference to a TransferRequest<T> and returns a sui::object::ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_27\n\nLANGUAGE: move\nCODE:\n```\npublic fun item<T>(self: &sui::transfer_policy::TransferRequest<T>): sui::object::ID { self.item }\n```\n\n----------------------------------------\n\nTITLE: Running the development server with pnpm\nDESCRIPTION: This command starts the development server using pnpm and turbo. It enables interactive development and testing of the Kiosk demo application.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/kiosk/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm turbo dev\n```\n\n----------------------------------------\n\nTITLE: Using Wallet Aliases for Local Addresses\nDESCRIPTION: Shows how to reference local wallet addresses using their defined aliases without the '@' prefix, simplifying object transfers and interactions\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/address-prefix.mdx#2025-04-22_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n--transfer-objects my_alias\n```\n\n----------------------------------------\n\nTITLE: Division with Rounding Up for u64 Values in Move\nDESCRIPTION: Performs integer division of two u64 values, rounding the result up to the nearest integer when there's a remainder.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_and_round_up(x: u64, y: u64): u64 {\n    std::macros::num_divide_and_round_up!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Constraints in Struct Instantiation in Move\nDESCRIPTION: Demonstrates how constraints are checked at instantiation sites for structs in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/generics.md#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\npublic struct Foo<T: copy> { x: T }\n\npublic struct Bar { x: Foo<u8> }\n//                         ^^ valid, u8 has `copy`\n\npublic struct Baz<T> { x: Foo<T> }\n//                            ^ ERROR! T does not have 'copy'\n```\n\n----------------------------------------\n\nTITLE: Addressing Objects with Literal Prefix\nDESCRIPTION: Demonstrates how to prefix addresses and object IDs with '@' to distinguish hexadecimal values in Sui CLI or interactions\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/address-prefix.mdx#2025-04-22_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n@0x1234...address\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Move Plugin Per-Project\nDESCRIPTION: Command to install the Prettier Move plugin as a dev dependency in a project.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D prettier @mysten/prettier-plugin-move\n```\n\n----------------------------------------\n\nTITLE: Constants Definition in Move\nDESCRIPTION: Defines core constants including float scaling factors and error codes used throughout the module\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/math.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\nconst FLOAT_SCALING: u64 = 1000000000;\nconst FLOAT_SCALING_U128: u128 = 1000000000;\nconst EUnderflow: u64 = 1;\n```\n\n----------------------------------------\n\nTITLE: Executing PaySui Transactions\nDESCRIPTION: Command to execute PaySui transactions 100 times against a single RPC server URL using one thread. Currently only supports single-thread operation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rpc-loadgen/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-rpc-loadgen -- --urls \"http://127.0.0.1:9000\" --num-threads 1 pay-sui --repeat 100\n```\n\n----------------------------------------\n\nTITLE: Creating New URL Without Validation\nDESCRIPTION: Creates a new Url instance without performing any validation on the input string.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/url.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun new_unsafe(url: String): Url {\n    Url { url }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Disabled Check zklogin ID Function in Move\nDESCRIPTION: The check_zklogin_id function is meant to validate a zklogin identity using an address and other identity parameters. It also is non-functional by design, currently asserting false and returning false. It expects parameters like address, key claim name and value, issuer, audience, and pin hash, adhering to EFunctionDisabled assertion.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_id.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun check_zklogin_id(\n    _address: address,\n    _key_claim_name: &String,\n    _key_claim_value: &String,\n    _issuer: &String,\n    _audience: &String,\n    _pin_hash: u256,\n): bool {\n    assert!(false, EFunctionDisabled);\n    false\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Move VM Codebase\nDESCRIPTION: Shows the organization of the Move VM codebase with its main directories: src for VM core files, tests for proptests, and vm-runtime for the interpreter and runtime data types.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-binary-format/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── src             # VM core files\n├── tests           # Proptests\n└── vm-runtime      # Interpreter and runtime data types (see README in that folder)\n```\n\n----------------------------------------\n\nTITLE: Generating Struct Layouts with Complex Type Parameters\nDESCRIPTION: Commands to generate struct layouts for struct A in module M1 with complex type arguments including nested type parameters, in both deep and shallow modes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/generate_struct_layout/args.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct A --type-args 0x6::M1::S<u64>\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct A --type-args vector<0x6::M1::S<u64>>\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct A --type-args 0x6::M1::S<u64> --shallow\nsandbox generate struct-layouts --module storage/0x0000000000000000000000000000000000000000000000000000000000000006/modules/M1.mv --struct A --type-args vector<0x6::M1::S<u64>> --shallow\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Friend Modules in Move\nDESCRIPTION: Example of declaring multiple friend modules. Both modules 'B' and 'C' are considered friends of module 'A'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/friends.md#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::a {\n\n    friend 0x42::b;\n    friend 0x42::c;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Between Two u8 Values\nDESCRIPTION: The max function returns the larger of two u8 values using the std::macros::num_max macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max(x: u8, y: u8): u8 {\n    std::macros::num_max!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Move Module\nDESCRIPTION: Command for publishing a Move module in the sandbox environment with verbose output.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ move sandbox publish -v\n```\n\n----------------------------------------\n\nTITLE: Bridge Error Constants in Move\nDESCRIPTION: Error code constants for various bridge operation failure scenarios.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\nconst EUnexpectedMessageType: u64 = 0;\nconst EUnauthorisedClaim: u64 = 1;\nconst EMalformedMessageError: u64 = 2;\nconst EUnexpectedTokenType: u64 = 3;\nconst EUnexpectedChainID: u64 = 4;\nconst ENotSystemAddress: u64 = 5;\nconst EUnexpectedSeqNum: u64 = 6;\nconst EWrongInnerVersion: u64 = 7;\nconst EBridgeUnavailable: u64 = 8;\nconst EUnexpectedOperation: u64 = 9;\nconst EInvariantSuiInitializedTokenTransferShouldNotBeClaimed: u64 = 10;\nconst EMessageNotFoundInRecords: u64 = 11;\nconst EUnexpectedMessageVersion: u64 = 12;\nconst EBridgeAlreadyPaused: u64 = 13;\nconst EBridgeNotPaused: u64 = 14;\nconst ETokenAlreadyClaimedOrHitLimit: u64 = 15;\nconst EInvalidBridgeRoute: u64 = 16;\nconst EMustBeTokenMessage: u64 = 17;\nconst EInvalidEvmAddress: u64 = 18;\nconst ETokenValueIsZero: u64 = 19;\n```\n\n----------------------------------------\n\nTITLE: Updating apt-get package manager on Linux\nDESCRIPTION: Command to update the apt-get package manager on Linux systems. This ensures you have the latest package information before installing dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Deriving Sui Addresses Using Rust\nDESCRIPTION: Derives a 32-byte Sui address using Blake2b hash function by concatenating a signature scheme flag and public key. Supports multiple signature schemes like Ed25519 and Secp256k1.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet flag = 0x00; // 0x00 = ED25519, 0x01 = Secp256k1, 0x02 = Secp256r1, 0x03 = MultiSig\n// Hash the [flag, public key] bytearray using Blake2b\nlet mut hasher = DefaultHash::default();\nhasher.update([flag]);\nhasher.update(pk);\nlet arr = hasher.finalize();\nlet sui_address_string = hex::encode(arr);\n```\n\n----------------------------------------\n\nTITLE: Executing Closure on Option Reference in Sui Move\nDESCRIPTION: The 'do_ref' macro function executes a closure on the reference to the value inside an Option if it holds one. It takes a reference to an Option<T> and a closure as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_15\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun do_ref<$T, $R: drop>($o: &Option<$T>, $f: |&$T| -> $R) {\n    let o = $o;\n    if (o.is_some()) { $f(o.borrow()); }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Verifying Specific Sui Private Binary\nDESCRIPTION: This command downloads and verifies a specific binary that may not be included in the main download script. It requires the directory name and binary name as arguments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n./download_and_verify_private_binary.sh <directory-name> <binary-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing do_eq Macro in Move\nDESCRIPTION: A convenience macro that iterates from 0 (inclusive) to a stop value (inclusive) and applies a function to each value. It's a wrapper around range_do_eq.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/macros.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do_eq<$T, $R: drop>($stop: $T, $f: |$T| -> $R) {\n    range_do_eq!(0, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Sui Validator Help Output\nDESCRIPTION: Displays the full help output for the report-validator command including all available arguments and options like operation-cap-id, undo-report, gas-budget and json output format.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/validator.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nReport or un-report a validator\n\nUsage: sui validator report-validator [OPTIONS] <reportee-address>\n\nArguments:\n  <reportee-address>  The Sui Address of the validator is being reported or un-reported\n\nOptions:\n  \t--operation-cap-id <operation-cap-id>  Optional when sender is reporter validator itself and it holds the Cap object. Required when sender is not the reporter validator itself.\n                                         \tValidator's OperationCap ID can be found by using the `display-metadata` subcommand\n  \t--undo-report <undo-report>        \tIf true, undo an existing report [possible values: true, false]\n  \t--gas-budget <gas-budget>          \tGas budget for this transaction\n  \t--json                             \tReturn command outputs in json format\n  -h, --help                             \tPrint help\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Range of u8 Values (Exclusive)\nDESCRIPTION: The range_do macro loops through a range of u8 values from start to stop (exclusive) and applies a function to each value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do<$R: drop>($start: u8, $stop: u8, $f: |u8| -> $R) {\n    std::macros::range_do!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Move Call with Option Type\nDESCRIPTION: Example showing how to execute a Move call using the --move-call command to check if an option type is none. Demonstrates usage of standard library name resolution.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/ptb.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n--assign A none\n--move-call std::option::is_none \"<u64>\" A\n```\n\n----------------------------------------\n\nTITLE: Implementing Sqrt Function for u64 in Move\nDESCRIPTION: Deprecated sqrt function that returns the square root of a u64 value. Recommends using std::u64::sqrt instead.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/math.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sqrt(x: u64): u64 {\n    x.sqrt()\n}\n```\n\n----------------------------------------\n\nTITLE: Multiplying Fixed-Point Numbers\nDESCRIPTION: Multiplies two UQ32_32 fixed-point numbers, truncating any fractional part of the product. Aborts if the product would overflow.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/uq32_32.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun mul(a: UQ32_32, b: UQ32_32): UQ32_32 {\n    UQ32_32(int_mul(a.0, b))\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Gas Price\nDESCRIPTION: Commands to update the gas price for a validator, with options for direct update or using an operation cap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator update-gas-price <gas-price>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator update-gas-price --operation-cap-id <operation-cap-id> <gas-price>\n```\n\n----------------------------------------\n\nTITLE: Looping from 0 to Stop (Exclusive) in Move\nDESCRIPTION: Macro function that applies a given function to each number from 0 to stop (exclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_14\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do<$R: drop>($stop: u64, $f: |u64| -> $R) {\n    std::macros::do!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Reference to Active, Pending, or Candidate Validator in Move\nDESCRIPTION: Retrieves a reference to a validator based on their address and validator type (active, pending, or candidate). The function checks different collections to find the validator based on the specified category.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_41\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun get_active_or_pending_or_candidate_validator_ref(\n    self: &mut ValidatorSet,\n    validator_address: address,\n    which_validator: u8,\n): &Validator {\n    let mut validator_index_opt = find_validator(&self.active_validators, validator_address);\n    if (validator_index_opt.is_some() || which_validator == ACTIVE_VALIDATOR_ONLY) {\n        let validator_index = validator_index_opt.extract();\n        return &self.active_validators[validator_index]\n    };\n    let mut validator_index_opt = find_validator_from_table_vec(\n        &self.pending_active_validators,\n        validator_address,\n    );\n    if (validator_index_opt.is_some() || which_validator == ACTIVE_OR_PENDING_VALIDATOR) {\n        let validator_index = validator_index_opt.extract();\n        return &self.pending_active_validators[validator_index]\n    };\n    self.validator_candidates[validator_address].load_validator_maybe_upgrade()\n}\n```\n\n----------------------------------------\n\nTITLE: Dividing U64 by FixedPoint32\nDESCRIPTION: Divides a u64 integer by a fixed-point number, handling the scale conversion and checking for division by zero and overflow conditions. The result is truncated to remove any fractional part.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/fixed_point32.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_u64(val: u64, divisor: FixedPoint32): u64 {\n    // Check for division by zero.\n    assert!(divisor.value != 0, EDIVISION_BY_ZERO);\n    // First convert to 128 bits and then shift left to\n    // add 32 fractional zero bits to the dividend.\n    let scaled_value = val as u128 << 32;\n    let quotient = scaled_value / (divisor.value as u128);\n    // Check whether the value is too large.\n    assert!(quotient <= MAX_U64, EDIVISION);\n    // the value may be too large, which will cause the cast to fail\n    // with an arithmetic error.\n    quotient as u64\n}\n```\n\n----------------------------------------\n\nTITLE: Type Assignments for While Loops in Move\nDESCRIPTION: Demonstrates that a while expression always has unit type () in Move, showing explicit type annotation for a while loop.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/control-flow/loops.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\nlet () = while (i < 10) { i = i + 1 };\n```\n\n----------------------------------------\n\nTITLE: Empty Check for ObjectTable\nDESCRIPTION: Checks if the ObjectTable is empty. Takes a reference to the table and returns a boolean indicating if size is 0.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_table.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic fun is_empty<K: copy + drop + store, V: key + store>(table: &ObjectTable<K, V>): bool {\n    table.size == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Validator Removal in Move\nDESCRIPTION: Processes a request to remove a validator from the active set. The validator's index is added to a pending removals list to be processed at the end of the epoch.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun request_remove_validator(self: &mut ValidatorSet, ctx: &TxContext) {\n    let validator_address = ctx.sender();\n    let validator_index = find_validator(\n        &self.active_validators,\n        validator_address,\n    ).destroy_or!(abort ENotAValidator);\n    assert!(!self.pending_removals.contains(&validator_index), EValidatorAlreadyRemoved);\n    self.pending_removals.push_back(validator_index);\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Order Canceled Event in Move\nDESCRIPTION: Emits an OrderCanceled event with details of the canceled order.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_30\n\nLANGUAGE: Move\nCODE:\n```\nfun emit_order_canceled<BaseAsset, QuoteAsset>(\n    pool_id: ID,\n    order: &Order\n) {\n    event::emit(OrderCanceled<BaseAsset, QuoteAsset> {\n        pool_id,\n        client_order_id: order.client_order_id,\n        order_id: order.order_id,\n        is_bid: order.is_bid,\n        owner: order.owner,\n        original_quantity: order.original_quantity,\n        base_asset_quantity_canceled: order.quantity,\n        price: order.price\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Looping from 0 to Stop (Inclusive) in Move\nDESCRIPTION: Macro function that applies a given function to each number from 0 to stop (inclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u128.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun do_eq<$R: drop>($stop: u128, $f: |u128| -> $R) {\n    std::macros::do_eq!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Gas Balance for Specific Address in Sui CLI\nDESCRIPTION: This command checks the gas balance for a specific address (named 'eloquent-amber') using the Sui CLI. It shows the gas coin ID, MIST balance, and SUI balance for the address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/client.mdx#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client gas eloquent-amber\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object ID from ObjectBag - Move\nDESCRIPTION: This function retrieves the ID of an object associated with a given key in the ObjectBag. It returns an Option type containing the ID if found.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_bag.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun value_id<K: copy + drop + store>(bag: &ObjectBag, k: K): Option<ID> {\n    ofield::id(&bag.id, k)\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Single Hex Byte in Move\nDESCRIPTION: This helper function decodes a single hexadecimal character to its decimal value. It handles both uppercase and lowercase characters and aborts on invalid input.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/hex.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\nfun decode_byte(hex: u8): u8 {\n    if (48 <= hex && hex < 58) {\n        hex - 48\n    } else if (65 <= hex && hex < 71) {\n        10 + hex - 65\n    } else if (97 <= hex && hex < 103) {\n        10 + hex - 97\n    } else {\n        abort ENotValidHexCharacter\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Module Name from TypeName in Move\nDESCRIPTION: The get_module function extracts the module name from a TypeName object. It aborts if given a primitive type. The function parses the TypeName string, skipping the address part and extracting the module name up to the next colon.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/type_name.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_module(self: &TypeName): String {\n    assert!(!self.is_primitive(), ENonModuleType);\n    // Starts after address and a double colon: `<addr as HEX>::`\n    let mut i = address::length() * 2 + 2;\n    let str_bytes = self.name.as_bytes();\n    let mut module_name = vector[];\n    let colon = ASCII_COLON;\n    loop {\n        let char = &str_bytes[i];\n        if (char != &colon) {\n            module_name.push_back(*char);\n            i = i + 1;\n        } else {\n            break\n        }\n    };\n    ascii::string(module_name)\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Single Order in Move on SUI Blockchain\nDESCRIPTION: Function signature for canceling a single limit order in the SUI Move contract. Takes a pool, order ID, and account capability object, and aborts if the order ID is invalid or not submitted by the transaction sender.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv2/trade-and-swap.mdx#2025-04-22_snippet_12\n\nLANGUAGE: move\nCODE:\n```\n/// parameters expected by this func\n///\n///   0. `[pool]` Object ID refers to the pool of the trading pair\n///   1. `[order_id]` Order ID of the placed limit order\n///   2. `[account_cap]` Object ID of the account_cap authorizing the\n///       accessilility to the escrow account\n\n/// Returns none\npublic fun cancel_order<BaseAsset, QuoteAsset>(\n        pool: &mut Pool<BaseAsset, QuoteAsset>,\n        order_id: u64,\n        account_cap: &AccountCap\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing min function for U16 values\nDESCRIPTION: Function that returns the smaller of two u16 values using the standard macros num_min utility.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u16.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun min(x: u16, y: u16): u16 {\n    std::macros::num_min!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Transactions Flow in Sui\nDESCRIPTION: This Mermaid flowchart visualizes the transaction flow involving objects and their interactions in the Sui blockchain. It demonstrates how ownership of coins changes during transactions and their parallel execution.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    id1(Object A\\nfa:fa-coins 5 SUI\\n fa:fa-person Tom):::object-a;\n    id2(Object C\\nfa:fa-coins 1 SUI\\n fa:fa-person Alice);\n    id3(Object A\\nfa:fa-coins 4 SUI\\n fa:fa-person Tom):::object-a;\n    id4(Object B\\nfa:fa-coins 2 SUI\\n fa:fa-person John):::object-b;\n    id5(Object B\\nfa:fa-coins 2 SUI\\n fa:fa-person Anna):::object-b;\n    id6(Object B\\nfa:fa-coins 2 SUI\\n fa:fa-person Tom):::object-b;\n    id7(Object A\\nfa:fa-coins 6 SUI\\n fa:fa-person John):::object-a;\n    id1-->|tx-1|id2;\n    id1-->|tx-1|id3;\n    id4-->|tx-2|id5;\n    id5-->|tx-3|id6;\n    id3-->|tx-4|id7;\n    id6-->|tx-4|id7;\n    classDef object-a fill:#f225;\n    classDef object-b fill:#ff43;\n```\n\n----------------------------------------\n\nTITLE: Implementing Bid Order Iteration Function in Move\nDESCRIPTION: Function that retrieves a paginated list of bid orders from a Pool. Supports filtering by tick level, order ID, expiration timestamp, and maximum order ID. Can return results in ascending or descending order by tick level.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/order_query.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun iter_bids<T1, T2>(\n    pool: &Pool<T1, T2>,\n    // tick level to start from\n    start_tick_level: Option<u64>,\n    // order id within that tick level to start from\n    start_order_id: Option<u64>,\n    // if provided, do not include orders with an expire timestamp less than the provided value (expired order),\n    // value is in microseconds\n    min_expire_timestamp: Option<u64>,\n    // do not show orders with an ID larger than max_id--\n    // i.e., orders added later than this one\n    max_id: Option<u64>,\n    // if true, the orders are returned in ascending tick level.\n    ascending: bool,\n): OrderPage {\n    let bids = clob_v2::bids(pool);\n    let mut orders = iter_ticks_internal(\n        bids,\n        start_tick_level,\n        start_order_id,\n        min_expire_timestamp,\n        max_id,\n        ascending\n    );\n    let (orders, has_next_page, next_tick_level, next_order_id) = if (vector::length(&orders) > PAGE_LIMIT) {\n        let last_order = vector::pop_back(&mut orders);\n        (orders, true, some(clob_v2::tick_level(&last_order)), some(clob_v2::order_id(&last_order)))\n    } else {\n        (orders, false, none(), none())\n    };\n    OrderPage {\n        orders,\n        has_next_page,\n        next_tick_level,\n        next_order_id\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EPolicyNotSatisfied Constant in Move\nDESCRIPTION: Defines a constant EPolicyNotSatisfied, which indicates that the number of receipts does not match the TransferPolicy requirements. This constant assists in error handling related to policy validation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\nconst EPolicyNotSatisfied: u64 = 0;\n```\n\n----------------------------------------\n\nTITLE: Defining Compatible Policy Function in Move\nDESCRIPTION: This function exposes a constant representing a compatible upgrade policy. It returns a constant value indicating the policy.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/package.md#2025-04-22_snippet_18\n\nLANGUAGE: Move\nCODE:\n```\npublic fun compatible_policy(): u8 { COMPATIBLE }\n\n```\n\n----------------------------------------\n\nTITLE: Updating Validator P2P Address using Sui CLI\nDESCRIPTION: Command to update a validator's P2P address for the next epoch using the Sui CLI by calling the sui_system::update_validator_next_epoch_p2p_address function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsui client call --package 0x3 --module sui_system --function update_validator_next_epoch_p2p_address --args 0x5 \"[4, 192, 168, 1, 1]\" --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Deterministic Signer Using a Seed in Rust\nDESCRIPTION: This snippet defines a deterministic signer that utilizes a seed, domain, and key identifier. This is particularly useful for custodial services where user keys are derived from non-standard identifiers like email addresses. Dependencies include the `signature_seed.rs` file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-types/src/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n/// Deterministic signer using a seed, domain, and some key identifier.\n/// Intended for scenarios where user keys aren't derived from standard methods like BIP44/BIP32.\n```\n\n----------------------------------------\n\nTITLE: Implementing u256 to u16 conversion in Move\nDESCRIPTION: Attempts to convert a u256 value to u16, returning None if the value is too large.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u16(x: u256): Option<u16> {\n    std::macros::try_as_u16!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Addresses to Denylist Using Sui CLI in Bash\nDESCRIPTION: Utilizes the Sui CLI to add addresses to a denylist. The command requires parameters like Policy, PolicyCap, and a vector of addresses that need to be added to the denylist, enhancing security by controlling access.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/regulated-token/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsui client call --json \\\n    --package $PKG --module denylist_rule --function add_records \\\n    --gas-budget 100000000 \\\n    --args $POLICY $POLICY_CAP \"[<0xaddress>]\"\n```\n\n----------------------------------------\n\nTITLE: U16 Integer Operations in Move\nDESCRIPTION: The 0x1::u16 module provides utility functions for working with u16 integers, including bitwise operations, math utilities, and conversion functions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_48\n\nLANGUAGE: move\nCODE:\n```\n// U16 integer operations\n0x1::u16::bitwise_not       // public fun\n0x1::u16::max               // public fun\n0x1::u16::min               // public fun\n0x1::u16::diff              // public fun\n0x1::u16::divide_and_round_up // public fun\n0x1::u16::pow               // public fun\n0x1::u16::sqrt              // public fun\n0x1::u16::try_as_u8         // public fun\n0x1::u16::to_string         // public fun\n```\n\n----------------------------------------\n\nTITLE: Mapping Option<T> to Option<U> by Reference in Sui Move\nDESCRIPTION: The 'map_ref' macro function maps an Option<T> to Option<U> by applying a function to a contained value by reference. The original Option<T> is preserved. It's similar to Rust's t.map(f). It takes a reference to an Option<T> and a closure as parameters, and returns an Option<U>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_21\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun map_ref<$T, $U>($o: &Option<$T>, $f: |&$T| -> $U): Option<$U> {\n    let o = $o;\n    if (o.is_some()) some($f(o.borrow()))\n    else none()\n}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Example with Beta\nDESCRIPTION: This snippet demonstrates how to use the `beta` frontmatter entry in an MDX file to indicate the beta status of a feature or service. It shows how to specify the environments (e.g., devnet, testnet) where the feature is available.  The inclusion of this frontmatter triggers a beta status box at the top of the rendered documentation page.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: Page title\ndescription: A page of info describing a beta feature.\nbeta: devnet, testnet\n---\n```\n\n----------------------------------------\n\nTITLE: Inserting an Element into a Vector at a Specific Index in Move\nDESCRIPTION: This function inserts an element at the specified index in the vector, shifting all subsequent elements to the right. It preserves the order of elements but has O(n) complexity. It aborts if the index is out of bounds.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun insert<Element>(v: &mut vector<Element>, e: Element, mut i: u64) {\n    let len = v.length();\n    // i too big abort\n    if (i > len) abort EINDEX_OUT_OF_BOUNDS;\n    v.push_back(e);\n    while (i < len) {\n        v.swap(i, len);\n        i = i + 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting First Some Value from Two Options in Sui Move\nDESCRIPTION: The 'or' macro function selects the first Some value from two Options, or None if both are None. It's equivalent to Rust's a.or(b). It takes two Option<T> parameters and returns an Option<T>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_17\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun or<$T>($o: Option<$T>, $default: Option<$T>): Option<$T> {\n    let o = $o;\n    if (o.is_some()) {\n        o\n    } else {\n        o.destroy_none();\n        $default\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sponsored Programmable Transaction Blocks in Sui\nDESCRIPTION: Illustrates the process of creating sponsored Programmable Transaction Blocks (PTBs) using the PTB builder. It shows how to build a transaction with the 'onlyTransactionKind' flag and then construct a sponsored transaction from the resulting kind bytes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/sui-101/building-ptb.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = new Transaction();\n// ... add some transactions...\n\nconst kindBytes = await tx.build({ provider, onlyTransactionKind: true });\n\n// Construct a sponsored transaction from the kind bytes:\nconst sponsoredTx = Transaction.fromKind(kindBytes);\n\n// You can now set the sponsored transaction data that is required:\nsponsoredTx.setSender(sender);\nsponsoredTx.setGasOwner(sponsor);\nsponsoredTx.setGasPayment(sponsorCoins);\n```\n\n----------------------------------------\n\nTITLE: Applying Closure to Some Value or Returning None in Sui Move\nDESCRIPTION: The 'and' macro function applies a closure to the value if it's Some, otherwise returns None. It's equivalent to Rust's t.and_then(f). It takes an Option<T> and a closure as parameters, and returns an Option<U>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_18\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun and<$T, $U>($o: Option<$T>, $f: |$T| -> Option<$U>): Option<$U> {\n    let o = $o;\n    if (o.is_some()) {\n        $f(o.destroy_some())\n    } else {\n        o.destroy_none();\n        none()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Example with Effort\nDESCRIPTION: This snippet demonstrates how to use the `effort` frontmatter entry in an MDX file to indicate the level of effort required to complete a guide. It shows how to specify the effort level as `small`, `medium`, or `large`. Including this frontmatter displays an effort level indicator at the top of the guide.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: A Guides\ndescription: A guide on how to do this thing in Sui.\neffort: medium\n---\n```\n\n----------------------------------------\n\nTITLE: Defining EMetadataInvalidWorkerPubkey Error Constant in Move\nDESCRIPTION: Error constant (3) used when the worker_pubkey_bytes field in ValidatorMetadata is invalid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_10\n\nLANGUAGE: move\nCODE:\n```\nconst EMetadataInvalidWorkerPubkey: u64 = 3;\n```\n\n----------------------------------------\n\nTITLE: Creating Wrapped Objects in Move\nDESCRIPTION: This Move code defines structures for Inner and Outer objects, and a function to create a wrapped object. It demonstrates how objects can be nested within other objects in Sui.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/versioning.mdx#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule example::wrapped {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n\n    struct Inner has key, store {\n        id: UID,\n        x: u64,\n    }\n\n    struct Outer has key {\n        id: UID,\n        inner: Inner,\n    }\n\n    entry fun make_wrapped(ctx: &mut TxContext) {\n        let inner = Inner {\n            id: object::new(ctx),\n            x: 42,\n        };\n\n        let outer = Outer {\n            id: object::new(ctx),\n            inner,\n        };\n\n        transfer::transfer(outer, tx_context::sender(ctx));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating square root for u32 in Move\nDESCRIPTION: This function calculates the nearest lower integer square root for a u32 value. It uses a macro to implement the square root algorithm.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u32.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun sqrt(x: u32): u32 {\n    std::macros::num_sqrt!<u32, u64>(x, 32)\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Balance in StorageFund Module for Sui System in Rust\nDESCRIPTION: This function calculates and returns the total balance of the StorageFund by summing the total object storage rebates and the non-refundable balance. It takes a reference to a StorageFund object and returns the total balance as a u64 value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/storage_fund.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npublic fun total_balance(self: &StorageFund): u64 {\n    self.total_object_storage_rebates.value() + self.non_refundable_balance.value()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UQ32_32 Struct in Move\nDESCRIPTION: Defines a fixed-point numeric type with 32 integer bits and 32 fractional bits, represented by an underlying 64-bit value. This binary representation provides more than 9 decimal digits of precision both before and after the decimal point (18 digits total).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic struct UQ32_32 has copy, drop, store\n```\n\n----------------------------------------\n\nTITLE: VerifiedID Deletion Function\nDESCRIPTION: Function to safely delete a VerifiedID object and cleanup associated resources.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_id.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun delete(verified_id: VerifiedID) {\n    let VerifiedID { id, owner: _, key_claim_name: _, key_claim_value: _, issuer: _, audience: _ } =\n        verified_id;\n    id.delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Unstaking Tokens Function in Sui SDK\nDESCRIPTION: Function signature for unstaking from a specific pool. It requires a poolKey to identify the pool and a balanceManagerKey for the balance manager.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/staking-governance.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nunstake(poolKey: string, balanceManagerKey: string);\n```\n\n----------------------------------------\n\nTITLE: Updating Candidate Validator P2P Address in Sui System\nDESCRIPTION: Updates a candidate validator's P2P address in the Sui system state. Requires mutable access to SuiSystemState and the transaction context.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_23\n\nLANGUAGE: Move\nCODE:\n```\npublic entry fun update_candidate_validator_p2p_address(\n    self: &mut SuiSystemState,\n    p2p_address: vector<u8>,\n    ctx: &TxContext,\n) {\n    self.load_system_state_mut().update_candidate_validator_p2p_address(p2p_address, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Loading System State in Sui System\nDESCRIPTION: Function to load the current system state object, which contains all the chain's governance data.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_38\n\nLANGUAGE: Move\nCODE:\n```\nfun load_system_state(self: &mut SuiSystemState): &SuiSystemStateInnerV2 {\n    load_inner_maybe_upgrade(self)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing destroy_or Macro Function in Sui Move\nDESCRIPTION: A macro function that destroys the Option<T> and returns the value inside if it holds one, or returns the default value otherwise. This is more efficient than destroy_with_default as it only evaluates the default when needed.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/option.md#2025-04-22_snippet_24\n\nLANGUAGE: sui-move\nCODE:\n```\npublic macro fun destroy_or<$T>($o: Option<$T>, $default: $T): $T {\n    let o = $o;\n    if (o.is_some()) {\n        o.destroy_some()\n    } else {\n        o.destroy_none();\n        $default\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated OrderPlaced Event in Move\nDESCRIPTION: Defines the deprecated OrderPlaced event struct which is used to represent an order being placed in the system. It includes details about the order such as pool ID, order ID, and quantity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic struct OrderPlaced<phantom BaseAsset, phantom QuoteAsset> has copy, drop, store {\n    pool_id: sui::object::ID,\n    order_id: u64,\n    is_bid: bool,\n    owner: sui::object::ID,\n    base_asset_quantity_placed: u64,\n    price: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Transferring Unverified Validator Operation Cap in Move\nDESCRIPTION: Creates a new UnverifiedValidatorOperationCap, transfers it to the validator, and registers it which revokes the previous cap's permission. This function ensures the operation is performed by the validator itself.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_73\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun new_unverified_validator_operation_cap_and_transfer(\n    self: &mut Validator,\n    ctx: &mut TxContext,\n) {\n    let sender = ctx.sender();\n    assert!(sender == self.metadata.sui_address, ENewCapNotCreatedByValidatorItself);\n    let new_id = validator_cap::new_unverified_validator_operation_cap_and_transfer(sender, ctx);\n    self.operation_cap_id = new_id;\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Sui Framework Snapshot\nDESCRIPTION: This command executes the `sui-framework-snapshot` binary using `cargo run`. This process generates a snapshot of the Sui framework, which is then committed to the `main` branch to record the state corresponding to the new protocol version. This ensures consistency and traceability of the framework state for each version.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework-snapshot/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run --bin sui-framework-snapshot\n```\n\n----------------------------------------\n\nTITLE: Voting Power Calculation Formula in DeepBook Governance\nDESCRIPTION: Formula for calculating a user's voting power in the DeepBook governance system based on their staked amount (S) and a voting power cutoff (V_c). The formula applies a square root function to limit the influence of large stakeholders.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/design.mdx#2025-04-22_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\LARGE V=\\min\\lparen S,V_c \\rparen + \\max\\lparen \\sqrt{S} - \\sqrt{V_c} ,0 \\rparen\n```\n\n----------------------------------------\n\nTITLE: BalanceManager Read Functions in Move\nDESCRIPTION: Utility functions for checking proof validity, retrieving balances, owner information, and object ID of a BalanceManager. Used for balance verification and information retrieval.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3/balance-manager.mdx#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\npublic fun validate_proof(self: &BalanceManager, proof: &TradeProof) {\n    assert!(object::id(self) == proof.for, EWrongProof);\n}\n\npublic fun balance<T>(self: &BalanceManager): u64 {\n    let type = type_name::get<T>();\n    if (!table::contains(&self.balances, type)) {\n        0\n    } else {\n        balance::value(table::borrow(&self.balances, type))\n    }\n}\n\npublic fun owner(self: &BalanceManager): address {\n    self.owner\n}\n\npublic fun id(self: &BalanceManager): ID {\n    object::id(self)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing bitwise not operation for u32 in Move\nDESCRIPTION: This function returns the bitwise not of a u32 value. It XORs the input with the maximum u32 value to flip all bits.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u32.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bitwise_not(x: u32): u32 {\n    x ^ max_value!()\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Objects using Sui TypeScript SDK\nDESCRIPTION: This snippet demonstrates how to use the Sui TypeScript SDK to create a transaction that receives a coin object sent to an account.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transfers/transfer-to-object.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = new Transaction();\ntx.moveCall({\n  target: `${examplePackageId}::account::accept_payment`,\n  arguments: [tx.object(\"0xcafe\"), tx.object(\"0xc0ffee\")]\n});\nconst result = await client.signAndExecuteTransaction({\n      transaction: tx,\n  });\n```\n\n----------------------------------------\n\nTITLE: Get Active Validator Addresses\nDESCRIPTION: Returns the addresses of all currently active validators in the system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/sui_system.md#2025-04-22_snippet_36\n\nLANGUAGE: Move\nCODE:\n```\npublic fun active_validator_addresses(wrapper: &mut SuiSystemState): vector<address> {\n    wrapper.load_system_state_mut().active_validator_addresses()\n}\n```\n\n----------------------------------------\n\nTITLE: Looping Over U64 Range (Inclusive) in Move\nDESCRIPTION: Macro function that applies a given function to each number in a range from start to stop (inclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do_eq<$R: drop>($start: u64, $stop: u64, $f: |u64| -> $R) {\n    std::macros::range_do_eq!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Action Request Creation Function in Move\nDESCRIPTION: Function signature for creating a new custom ActionRequest.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/action-request.mdx#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic fun new_request<T>(\n    name: vector<u8>,\n    amount: u64,\n    recipient: option<address>,\n    spent_balance: option<Balance<T>>,\n    ctx: &mut TxContext\n): ActionRequest<T>;\n```\n\n----------------------------------------\n\nTITLE: Generating ECVRF Key Pair using CLI\nDESCRIPTION: Command to generate a 32-byte secret key and public key pair using the fastcrypto CLI tool.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/ecvrf.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo run --bin ecvrf-cli keygen\n```\n\n----------------------------------------\n\nTITLE: Depositing Stake Rewards into Staking Pool in Move\nDESCRIPTION: Deposits stakes rewards into the validator's staking pool, which is executed at the end of an epoch. The function accepts a mutable reference to a Validator and a reward of type Balance<SUI>.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_40\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun deposit_stake_rewards(self: &mut sui_system::validator::Validator, reward: Balance<SUI>) {\n    self.next_epoch_stake = self.next_epoch_stake + reward.value();\n    self.staking_pool.deposit_rewards(reward);\n}\n```\n\n----------------------------------------\n\nTITLE: VerifiedID Accessor Functions\nDESCRIPTION: Collection of public getter functions to access the fields of a VerifiedID struct safely.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/zklogin_verified_id.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun owner(verified_id: &VerifiedID): address {\n    verified_id.owner\n}\n\npublic fun key_claim_name(verified_id: &VerifiedID): &String {\n    &verified_id.key_claim_name\n}\n\npublic fun key_claim_value(verified_id: &VerifiedID): &String {\n    &verified_id.key_claim_value\n}\n\npublic fun issuer(verified_id: &VerifiedID): &String {\n    &verified_id.issuer\n}\n\npublic fun audience(verified_id: &VerifiedID): &String {\n    &verified_id.audience\n}\n```\n\n----------------------------------------\n\nTITLE: Function Structure for Shared Objects\nDESCRIPTION: This snippet exemplifies how to design functions for shared objects in Move. It highlights the creation and sharing of objects, ensuring that they follow best practices for instantiation and transfer.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/conventions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\nmodule conventions::shop;\n\npublic struct Shop has key {\n    id: UID\n}\n\npublic fun new(ctx: &mut TxContext): Shop {\n    Shop {\n        id: object::new(ctx)\n    }\n}\n\npublic fun share(shop: Shop) {\n    transfer::share_object(shop);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Project for Sui SDK\nDESCRIPTION: This JSON snippet is used to configure a TypeScript project that uses ES module syntax. The `package.json` must include a `type` property set to `module` to ensure compatibility with ES modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"type\": \"module\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a new Sui package and examining its .gitignore\nDESCRIPTION: This snippet creates a new Sui package named 'example' using the 'new -p package' command, then displays the contents of the .gitignore file and lists all files (including hidden ones) in the package directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/new_clobber/gitignore_exists/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnew -p package example\n>cat package/.gitignore\n>ls -A package\n```\n\n----------------------------------------\n\nTITLE: Get Address Function in Move\nDESCRIPTION: Function that extracts the address part from a TypeName as an ASCII String. Aborts if the type is primitive.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/type_name.md#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\npublic fun get_address(self: &TypeName): String {\n    assert!(!self.is_primitive(), ENonModuleType);\n    // Base16 (string) representation of an address has 2 symbols per byte.\n    let len = address::length() * 2;\n    let str_bytes = self.name.as_bytes();\n    let mut addr_bytes = vector[];\n    let mut i = 0;\n    // Read `len` bytes from the type name and push them to addr_bytes.\n    while (i < len) {\n        addr_bytes.push_back(str_bytes[i]);\n        i = i + 1;\n    };\n    ascii::string(addr_bytes)\n}\n```\n\n----------------------------------------\n\nTITLE: Define Constants in Move\nDESCRIPTION: Defines several constants representing error codes and action tags used within the token policy system. These constants are used to indicate specific errors during action execution or to identify different types of actions.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>const</b> <a href=\\\"../sui/token.md#sui_token_EUnknownAction\\\">EUnknownAction</a>: u64 = 0;\\n\"\n```\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>const</b> <a href=\\\"../sui/token.md#sui_token_ENotApproved\\\">ENotApproved</a>: u64 = 1;\\n\"\n```\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>const</b> <a href=\\\"../sui/token.md#sui_token_ENotAuthorized\\\">ENotAuthorized</a>: u64 = 2;\\n\"\n```\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>const</b> <a href=\\\"../sui/token.md#sui_token_EBalanceTooLow\\\">EBalanceTooLow</a>: u64 = 3;\\n\"\n```\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>const</b> <a href=\\\"../sui/token.md#sui_token_ENotZero\\\">ENotZero</a>: u64 = 4;\\n\"\n```\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>const</b> <a href=\\\"../sui/token.md#sui_token_ECantConsumeBalance\\\">ECantConsumeBalance</a>: u64 = 5;\\n\"\n```\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>const</b> <a href=\\\"../sui/token.md#sui_token_ENoConfig\\\">ENoConfig</a>: u64 = 6;\\n\"\n```\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>const</b> <a href=\\\"../sui/token.md#sui_token_EUseImmutableConfirm\\\">EUseImmutableConfirm</a>: u64 = 7;\\n\"\n```\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>const</b> <a href=\\\"../sui/token.md#sui_token_SPEND\\\">SPEND</a>: vector&lt;u8&gt; = vector[115, 112, 101, 110, 100];\\n\"\n```\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>const</b> <a href=\\\"../sui/token.md#sui_token_TRANSFER\\\">TRANSFER</a>: vector&lt;u8&gt; = vector[116, 114, 97, 110, 115, 102, 101, 114];\\n\"\n```\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>const</b> <a href=\\\"../sui/token.md#sui_token_TO_COIN\\\">TO_COIN</a>: vector&lt;u8&gt; = vector[116, 111, 95, 99, 111, 105, 110];\\n\"\n```\n\nLANGUAGE: Move\nCODE:\n```\n\"<b>const</b> <a href=\\\"../sui/token.md#sui_token_FROM_COIN\\\">FROM_COIN</a>: vector&lt;u8&gt; = vector[102, 114, 111, 109, 95, 99, 111, 105, 110];\\n\"\n```\n\n----------------------------------------\n\nTITLE: Constant Definition: QUORUM_THRESHOLD\nDESCRIPTION: Defines a constant `QUORUM_THRESHOLD` set to 6667. This constant represents the minimum amount of voting power required to reach a quorum, ensuring that decisions are made with sufficient consensus.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/voting_power.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\n<b>const</b> <a href=\"../sui_system/voting_power.md#sui_system_voting_power_QUORUM_THRESHOLD\">QUORUM_THRESHOLD</a>: u64 = 6667;\n```\n\n----------------------------------------\n\nTITLE: Comparison Operations for UQ32_32 in Move\nDESCRIPTION: Implements less than or equal to, less than, greater than or equal to, and greater than comparisons for UQ32_32 fixed-point numbers.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun le(a: UQ32_32, b: UQ32_32): bool {\n    a.0 <= b.0\n}\n\npublic fun lt(a: UQ32_32, b: UQ32_32): bool {\n    a.0 < b.0\n}\n\npublic fun ge(a: UQ32_32, b: UQ32_32): bool {\n    a.0 >= b.0\n}\n\npublic fun gt(a: UQ32_32, b: UQ32_32): bool {\n    a.0 > b.0\n}\n```\n\n----------------------------------------\n\nTITLE: Peeling Enum Tag from BCS in Move\nDESCRIPTION: Deserializes an enum tag from BCS format. It peels a vector length as the tag value, ensuring it's within the u32 range. This is used for deserializing enum variants in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bcs.md#2025-04-22_snippet_13\n\nLANGUAGE: Move\nCODE:\n```\npublic fun peel_enum_tag(bcs: &mut BCS): u32 {\n    let tag = bcs.peel_vec_length();\n    assert!(tag <= std::u32::max_value!() as u64, EOutOfRange);\n    tag as u32\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Configuration Management in Move\nDESCRIPTION: This snippet defines structures and functions for managing configuration settings in Move, including support for epoch-based updates.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_30\n\nLANGUAGE: Move\nCODE:\n```\npublic struct Config\npublic struct Setting\npublic struct SettingData\npublic(package) fun new\npublic(package) fun share\npublic(package) fun transfer\npublic(package) fun add_for_next_epoch\npublic(package) fun remove_for_next_epoch\npublic(package) fun exists_with_type\npublic(package) fun exists_with_type_for_next_epoch\npublic(package) fun borrow_for_next_epoch_mut\npublic(package) fun read_setting_for_next_epoch\npublic(package) fun read_setting\nfun read_setting_impl\n```\n\n----------------------------------------\n\nTITLE: Querying Historical Volume with Interval in DeepBook API\nDESCRIPTION: Demonstrates the response format for historical volume data with specified intervals. The response includes time ranges and corresponding pool volumes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"[time_1_start, time_1_end]\": {\n\t\t\"pool_name_1\": [maker_volume, taker_volume],\n\t\t\"pool_name_2\": …\n\t},\n\t\"[time_2_start, time_2_end]\": {\n\t\t\"pool_name_1\": [maker_volume, taker_volume],\n\t\t\"pool_name_2\": …\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing bitwise_not operation in Move\nDESCRIPTION: Returns the bitwise not of a u8 value by XORing with the maximum possible u8 value. Each bit that is 1 becomes 0 and each bit that is 0 becomes 1.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u8.md#2025-04-22_snippet_0\n\nLANGUAGE: Move\nCODE:\n```\npublic fun bitwise_not(x: u8): u8 {\n    x ^ max_value!()\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Validator Network Address\nDESCRIPTION: Function to retrieve the network address from a Validator's metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_49\n\nLANGUAGE: Move\nCODE:\n```\npublic fun network_address(self: &Validator): &String {\n    &self.metadata.net_address\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Listed Item Struct in Move\nDESCRIPTION: Struct representing a listed item, used as a dynamic field key in the renter's Bag. Includes store, copy, and drop abilities.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_2\n\nLANGUAGE: move\nCODE:\n```\npublic struct Listed has store, copy, drop { id: ID }\n```\n\n----------------------------------------\n\nTITLE: Sui Tracing and Logging Configuration\nDESCRIPTION: Environment variable configuration for enabling detailed tracing and logging in Sui, with trace-level logging for specific components\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/observability.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ SUI_TRACING_ENABLE=1 RUST_LOG=\"info,sui_core=trace\" ./sui start\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sui Node Metrics\nDESCRIPTION: This command retrieves all metrics exposed by the Sui node via its local HTTP interface.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -s http://localhost:9184/metrics\n```\n\n----------------------------------------\n\nTITLE: Verifying and Signing Sui Genesis\nDESCRIPTION: Commands for each validator to verify and sign the built genesis object using their key file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui/genesis.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sui genesis-ceremony verify-and-sign \\\n    --key-file <path to key file>\n$ git add .\n$ git commit -m \"sign genesis\"\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Declaring Friend Module with Module Name Alias in Move\nDESCRIPTION: Example of declaring a friend module using a module name alias introduced via the 'use' statement. Module 'b' is declared as a friend of module 'a'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/friends.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x42::a {\n    use 0x42::b;\n    friend b;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Constant Declaration Syntax in Move\nDESCRIPTION: Shows the basic syntax for declaring constants in Move modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/constants.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nconst <name>: <type> = <expression>;\n```\n\n----------------------------------------\n\nTITLE: Alternative 'use fun' With Path Aliases\nDESCRIPTION: Example showing how 'use fun' can work with path aliases instead of fully qualified paths. Function aliases can be combined with regular module aliases for more concise code.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/method-syntax.md#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\n    use a::cup::{Self, cup_swap};\n\n    use fun cup::cup_borrow as Cup.borrow;\n    use fun cup::cup_value as Cup.value;\n    use fun cup_swap as Cup.set;\n```\n\n----------------------------------------\n\nTITLE: Installing Required Modules for Sui Documentation Site\nDESCRIPTION: This command installs the necessary modules required to build the Sui documentation site using the pnpm package manager. It needs to be run in the 'site' directory to ensure all dependencies are ready for the build process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Updating Gas Price Survey Quote for Sui Validator\nDESCRIPTION: This command updates the Gas Price Survey Quote for a validator. It requires a valid UnverifiedValidatorOperationCap and uses the sui_system module to set the new gas price.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/sui_for_node_operators.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsui client call --package 0x3 --module sui_system --function request_set_gas_price --args 0x5 {cap_object_id} {new_gas_price} --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Query Transaction Block by Digest\nDESCRIPTION: Retrieves transaction block information including gas details and effects using a specific digest.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/graphql-rpc.mdx#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  transactionBlock(digest: \"FdKFgsQ9iRrxW6b1dh9WPGuNuaJWMXHJn1wqBQSqVqK2\") {\n    gasInput {\n      gasSponsor {\n        address\n      }\n      gasPrice\n      gasBudget\n    }\n    effects {\n      status\n      timestamp\n      checkpoint {\n        sequenceNumber\n      }\n      epoch {\n        epochId\n        referenceGasPrice\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New BitVector in Rust\nDESCRIPTION: Implements the new function to create a BitVector with a specified length. It validates the length and initializes the bit field with false values.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/bit_vector.md#2025-04-22_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\npublic fun new(length: u64): BitVector {\n    assert!(length > 0, ELENGTH);\n    assert!(length < MAX_SIZE, ELENGTH);\n    let mut counter = 0;\n    let mut bit_field = vector::empty();\n    while (counter < length) {\n        bit_field.push_back(false);\n        counter = counter + 1;\n    };\n    BitVector {\n        length,\n        bit_field,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Error Constants and Time Calculation for Upgrade Policy\nDESCRIPTION: Defines additional error constants and a milliseconds-per-day constant for use in the upgrade policy implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_8\n\nLANGUAGE: move\nCODE:\n```\n// Request to authorize upgrade on the wrong day of the week.\nconst ENotAllowedDay: u64 = 2;\n\nconst MS_IN_DAY: u64 = 24 * 60 * 60 * 1000;\n```\n\n----------------------------------------\n\nTITLE: Emitting Order Canceled Events in DeepBook CLOB (Move)\nDESCRIPTION: Helper function that emits an OrderCanceled event when an order is canceled. The event includes details about the canceled order such as pool ID, order ID, price, and quantity.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_21\n\nLANGUAGE: move\nCODE:\n```\nfun emit_order_canceled<BaseAsset, QuoteAsset>(\n    pool_id: ID,\n    order: &Order\n) {\n    event::emit(OrderCanceled<BaseAsset, QuoteAsset> {\n        pool_id,\n        order_id: order.order_id,\n        is_bid: order.is_bid,\n        owner: order.owner,\n        base_asset_quantity_canceled: order.quantity,\n        price: order.price\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Fragments\nDESCRIPTION: This snippet shows a GraphQL query that uses fragments to reuse parts of the query. It uses fragments to select fields on `DynamicField`, `DynamicFieldValue` and `MoveValue`. The use of fragments is designed to avoid repetition and improve query organization.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/graphql-rpc.mdx#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery DynamicField {\n  object(\n    address: \"0xb57fba584a700a5bcb40991e1b2e6bf68b0f3896d767a0da92e69de73de226ac\"\n  ) {\n    dynamicField(\n      name: {\n        type: \"0x2::kiosk::Listing\",\n        bcs: \"NLArx1UJguOUYmXgNG8Pv8KbKXLjWtCi6i0Yeq1VhfwA\",\n      }\n    ) {\n      ...DynamicFieldSelect\n    }\n  }\n}\n\nfragment DynamicFieldSelect on DynamicField {\n  name {\n    ...MoveValueFields\n  }\n  value {\n    ...DynamicFieldValueSelection\n  }\n}\n\nfragment DynamicFieldValueSelection on DynamicFieldValue {\n  __typename\n  ... on MoveValue {\n    ...MoveValueFields\n  }\n  ... on MoveObject {\n    hasPublicTransfer\n    contents {\n      ...MoveValueFields\n    }\n  }\n}\n\nfragment MoveValueFields on MoveValue {\n  type {\n    repr\n  }\n  data\n  bcs\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Price for Candidate Validator in Sui Move\nDESCRIPTION: Updates the gas price for a candidate (preactive) validator. Unlike active validators, this change takes effect immediately for both current and next epoch gas prices.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_37\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun set_candidate_gas_price(\n    self: &mut Validator,\n    verified_cap: ValidatorOperationCap,\n    new_price: u64,\n) {\n    assert!(self.is_preactive(), ENotValidatorCandidate);\n    assert!(new_price < MAX_VALIDATOR_GAS_PRICE, EGasPriceHigherThanThreshold);\n    let validator_address = *verified_cap.verified_operation_cap_address();\n    assert!(validator_address == self.metadata.sui_address, EInvalidCap);\n    self.next_epoch_gas_price = new_price;\n    self.gas_price = new_price;\n}\n```\n\n----------------------------------------\n\nTITLE: Sui Lutris: Consensusless Blockchain Platform\nDESCRIPTION: First smart-contract platform achieving sub-second finality by integrating consensusless agreement with high-throughput consensus protocol. Enables safe transaction execution with low latency and efficient reconfiguration.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/research-papers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: research\nCODE:\n```\nSui Lutris: Sub-second finality blockchain platform with 150k ops/s throughput\n```\n\n----------------------------------------\n\nTITLE: Creating Unverified Validator Operation Capability\nDESCRIPTION: Function to create a new unverified validator operation capability, restricting creation to the validator itself or genesis/test scenarios\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_cap.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun new_unverified_validator_operation_cap_and_transfer(\n    validator_address: address, \n    ctx: &mut TxContext\n): ID\n```\n\n----------------------------------------\n\nTITLE: JWT Header Example for zkLogin\nDESCRIPTION: Demonstrates the required JWT header fields for zkLogin, specifying the algorithm, key identifier, and token type\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/cryptography/zklogin.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alg\": \"RS256\",\n  \"kid\": \"c3afe7a9bda46bae6ef97e46c95cda48912e5979\",\n  \"typ\": \"JWT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active JWKs from Authenticator State in Move\nDESCRIPTION: This function retrieves the current active JSON Web Keys (JWKs) from the authenticator state. It's called during node startup to load the current JWK state from the chain. Only the system address (0x0) is authorized to call this function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/authenticator_state.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\nfun get_active_jwks(self: &AuthenticatorState, ctx: &TxContext): vector<ActiveJwk> {\n    assert!(ctx.sender() == @0x0, ENotSystemAddress);\n    self.load_inner().active_jwks\n}\n```\n\n----------------------------------------\n\nTITLE: ASCII String Creation and Validation - Move\nDESCRIPTION: Functions to create ASCII strings with validation from byte vectors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/ascii.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic fun string(bytes: vector<u8>): String {\n    let x = try_string(bytes);\n    assert!(x.is_some(), EInvalidASCIICharacter);\n    x.destroy_some()\n}\n\npublic fun try_string(bytes: vector<u8>): Option<String> {\n    let is_valid = bytes.all!(|byte| is_valid_char(*byte));\n    if (is_valid) option::some(String { bytes })\n    else option::none()\n}\n```\n\n----------------------------------------\n\nTITLE: Token Policy Cap Confirmation Example in JavaScript\nDESCRIPTION: Example of confirming a transfer request using TokenPolicyCap in a JavaScript client.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/action-request.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = new Transaction();\nlet tokenType = '0x....::my_token::MY_TOKEN';\nlet myTokenArg = tx.object('0x...token_object');\nlet receiverArg = tx.pure.address('0x...receiver');\nlet tokenPolicyCapArg = tx.object('0x...token_policy_cap');\n\nlet request = tx.moveCall({\n\ttarget: '0x2::token::transfer',\n\targuments: [myTokenArg, receiverArg],\n\ttypeArguments: [tokenType],\n});\n\ntx.moveCall({\n\ttarget: '0x2::token::confirm_with_policy_cap',\n\targuments: [tokenPolicyCapArg, request],\n\ttypeArguments: [tokenType],\n});\n```\n\n----------------------------------------\n\nTITLE: Staking Tokens Function in Sui SDK\nDESCRIPTION: Function signature for staking a specified amount into a pool. It requires a poolKey to identify the pool, a balanceManagerKey for the balance manager, and a stakeAmount to specify how much to stake.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/staking-governance.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nstake(poolKey: string, balanceManagerKey: string, stakeAmount: number);\n```\n\n----------------------------------------\n\nTITLE: Retrieving UID in SUI Transfer Policy - Move\nDESCRIPTION: The `uid` function allows access to a TransferPolicy's unique identifier as a UID object. It necessitates the TransferPolicy and UID modules, providing a UID reference when given a TransferPolicy reference.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_24\n\nLANGUAGE: move\nCODE:\n```\npublic fun uid<T>(self: &sui::transfer_policy::TransferPolicy<T>): &sui::object::UID\n```\n\nLANGUAGE: move\nCODE:\n```\npublic fun uid<T>(self: &TransferPolicy<T>): &UID { &self.id }\n```\n\n----------------------------------------\n\nTITLE: Disassembling Move Package with Debug Options\nDESCRIPTION: Command to disassemble a Move package named 'Test' with extended debug output enabled via --Xdebug flag. The command provides low-level bytecode inspection capabilities for the named module/contract.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/canonicalize_module/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndisassemble --Xdebug --package Test --name c\n```\n\n----------------------------------------\n\nTITLE: Initializing proxy module in Rust\nDESCRIPTION: The init function creates the Publisher object, wraps it in the Registry, and shares the Registry object. This establishes the foundation for publisher-related operations in the proxy module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nfun init(otw: PROXY, ctx: &mut TxContext) {}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Range of u8 Values (Inclusive)\nDESCRIPTION: The range_do_eq macro loops through a range of u8 values from start to stop (inclusive) and applies a function to each value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u8.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do_eq<$R: drop>($start: u8, $stop: u8, $f: |u8| -> $R) {\n    std::macros::range_do_eq!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Sui Node Binary from Source\nDESCRIPTION: Clones the Sui repository, checks out a specific version, builds the binary, and moves it to the appropriate directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/systemd/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/MystenLabs/sui.git && cd sui\ngit checkout $SUI_SHA\ncargo build --release --bin sui-node\nmv ./target/release/sui-node /opt/sui/bin/sui-node\n```\n\n----------------------------------------\n\nTITLE: Defining CommitteeMemberRegistration Structure in Move\nDESCRIPTION: Defines the structure for registering a committee member, containing their Sui address, bridge public key, and HTTP REST URL for communication.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/committee.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic struct CommitteeMemberRegistration has copy, drop, store {\n    sui_address: address,\n    bridge_pubkey_bytes: vector<u8>,\n    http_rest_url: vector<u8>\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Sui Node via Wget\nDESCRIPTION: This snippet demonstrates how to download the Sui node binary directly from the Sui releases using wget.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ wget https://releases.sui.io/$SUI_SHA/sui-node\n```\n\n----------------------------------------\n\nTITLE: DeepBook Module Imports\nDESCRIPTION: Module import statements for the DeepBook CLOB module showing dependencies from the DeepBook library, standard library, and Sui framework.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nuse deepbook::critbit;\nuse deepbook::custodian;\nuse deepbook::math;\nuse std::address;\nuse std::ascii;\nuse std::bcs;\nuse std::option;\nuse std::string;\nuse std::type_name;\nuse std::vector;\nuse sui::address;\nuse sui::bag;\nuse sui::balance;\nuse sui::clock;\nuse sui::coin;\nuse sui::config;\nuse sui::deny_list;\nuse sui::dynamic_field;\nuse sui::dynamic_object_field;\nuse sui::event;\nuse sui::hex;\nuse sui::linked_table;\nuse sui::object;\nuse sui::sui;\nuse sui::table;\nuse sui::transfer;\nuse sui::tx_context;\nuse sui::types;\nuse sui::url;\nuse sui::vec_set;\n```\n\n----------------------------------------\n\nTITLE: Converting UQ32_32 to Integer in Move\nDESCRIPTION: Converts a UQ32_32 fixed-point number to a u32 integer, truncating any fractional part.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_int(a: UQ32_32): u32 {\n    std::macros::uq_to_int!(a.0, FRACTIONAL_BITS)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Sui local network with indexer enabled\nDESCRIPTION: This command starts a local Sui network using the `sui` binary, including a faucet and enabling the indexer.  It requires `libpq` to be installed and configured, along with a database set up for the indexer. The command specifies the Postgres port and database name.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin sui -- start --with-faucet --force-regenesis --with-indexer --pg-port 5432 --pg-db-name sui_indexer_v2\n```\n\n----------------------------------------\n\nTITLE: Getting Paid Amount from TransferRequest in Move\nDESCRIPTION: Getter function that returns the paid amount field from a TransferRequest struct. Takes a reference to a TransferRequest<T> and returns a u64 value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/transfer_policy.md#2025-04-22_snippet_28\n\nLANGUAGE: move\nCODE:\n```\npublic fun paid<T>(self: &sui::transfer_policy::TransferRequest<T>): u64 { self.paid }\n```\n\n----------------------------------------\n\nTITLE: Swapping Exact Quote for Base with Metadata in DeepBook CLOB v2 (Move)\nDESCRIPTION: Function for swapping an exact amount of quote asset for base asset while returning additional metadata about matched orders. Currently implemented as a stub that aborts with code 1337.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/clob_v2.md#2025-04-22_snippet_24\n\nLANGUAGE: move\nCODE:\n```\npublic fun swap_exact_quote_for_base_with_metadata<BaseAsset, QuoteAsset>(\n    _pool: &mut Pool<BaseAsset, QuoteAsset>,\n    _client_order_id: u64,\n    _account_cap: &AccountCap,\n    _quantity: u64,\n    _clock: &Clock,\n    _quote_coin: Coin<QuoteAsset>,\n    _ctx: &mut TxContext,\n): (Coin<BaseAsset>, Coin<QuoteAsset>, u64, vector<MatchedOrderMetadata<BaseAsset, QuoteAsset>>) {\n    abort 1337\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Sui Database Size on Disk\nDESCRIPTION: This shell command checks the size of the Sui database volume on disk.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/docker/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo du -sh /var/lib/docker/volumes/docker_suidb/_data\n```\n\n----------------------------------------\n\nTITLE: Extract Sui Node Binary from OCI Blob\nDESCRIPTION: This command extracts the sui-node binary from the identified OCI blob. Replace `<blob-digest>` with the actual digest of the blob containing the sui-node binary.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/sui-node-deterministic/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"tar xf build/oci/sui-node/blobs/sha256/<blob-digest>\"\n```\n\n----------------------------------------\n\nTITLE: Building Sui with Debug Symbols for Profiling - Rust\nDESCRIPTION: This snippet outlines the command to build the Sui project with debug symbols, which is required for accurate memory profiling using jemalloc.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/observability.mdx#2025-04-22_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\ncargo build --profile bench-profiling\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Value of Fixed-Point Number (Move)\nDESCRIPTION: Retrieves the raw u64 value from a FixedPoint32 number. This allows for direct manipulation of the underlying representation for advanced operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/fixed_point32.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun get_raw_value(num: FixedPoint32): u64 {\n    num.value\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Local Sui Network using Docker Compose\nDESCRIPTION: Instructions for navigating to the Dockerfile directory, building the image, and starting the container for a local Sui network with Rosetta API support.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rosetta/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd <sui project directory>/crate/sui-rosetta/docker/sui-rosetta-local\n```\n\nLANGUAGE: shell\nCODE:\n```\n./build.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Deriving zkLogin Sui Address in TypeScript\nDESCRIPTION: TypeScript code to derive a zkLogin Sui address using the JWT token and user salt with the jwtToAddress function from the Sui zkLogin SDK.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/cryptography/zklogin-integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { jwtToAddress } from '@mysten/sui/zklogin';\n\nconst zkLoginUserAddress = jwtToAddress(jwt, userSalt);\n```\n\n----------------------------------------\n\nTITLE: Running Move Module Test with Argument 0\nDESCRIPTION: Executes a test function in the dispatch.mv module with argument 0u8 in dry-run mode. The module is referenced from a specific storage location.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/metatests/cov/two-runs-diff-module/args.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsandbox run storage/0x0000000000000000000000000000000000000000000000000000000000000042/modules/dispatch.mv test --args 0u8 --dry-run\n```\n\n----------------------------------------\n\nTITLE: Extracting Raw Value from UQ32_32 in Move\nDESCRIPTION: The to_raw function extracts the raw u64 value from a UQ32_32 fixed-point number. It takes a UQ32_32 as input and returns the underlying u64 value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_raw(a: std::uq32_32::UQ32_32): u64 {\n    a.0\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Git on macOS\nDESCRIPTION: Command to install Git on macOS using Homebrew. Git is required for version control and accessing repositories.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install git\n```\n\n----------------------------------------\n\nTITLE: Multiplying UQ64_64 Fixed-Point Numbers in Move\nDESCRIPTION: Multiplies two UQ64_64 fixed-point numbers, truncating any fractional part of the product. Aborts if the product overflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq64_64.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun mul(a: UQ64_64, b: UQ64_64): UQ64_64 {\n    UQ64_64(int_mul(a.0, b))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Divide and Round Up Function in Move\nDESCRIPTION: Deprecated divide_and_round_up function that divides two u64 values and rounds up the result. Recommends using std::u64::divide_and_round_up instead.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/math.md#2025-04-22_snippet_7\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_and_round_up(x: u64, y: u64): u64 {\n    x.divide_and_round_up(y)\n}\n```\n\n----------------------------------------\n\nTITLE: Using SuiNodeHandle with Async Operations in Simulator\nDESCRIPTION: Shows how to perform async operations on a SuiNode while maintaining the proper simulator node context through the SuiNodeHandle abstraction.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-simulator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nhandle.with_async(|node| async move {\n    let state = node.state();\n    do_async_stuff_to_state(state).await;\n}).await;\n```\n\n----------------------------------------\n\nTITLE: Example Transaction ID for Pagination in Event Tracking\nDESCRIPTION: Shows the structure of a transaction ID used in Sui for pagination of event results. Includes txDigest and eventSeq attributes necessary for defining nextCursor.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": {\"txDigest\": \"GZQN9pE3Zr9ZfLzBK1BfVCXtbjx5xKMxPSEKaHDvL3E2\", \"eventSeq\": 6019}}\n```\n\n----------------------------------------\n\nTITLE: Querying Total Transaction Blocks in Sui using JSON-RPC\nDESCRIPTION: This snippet demonstrates how to get the total number of transaction blocks in the Sui network using JSON-RPC.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/graphql-migration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"sui_getTotalTransactionBlocks\",\n  \"params\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Custom Profiling - Bash\nDESCRIPTION: This snippet shows an example configuration of environment variables for jemalloc profiling, illustrating how to customize profiling behavior beyond the defaults.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/observability.mdx#2025-04-22_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n_RJEM_MALLOC_CONF=\"prof:true,lg_prof_interval:24,lg_prof_sample:19\"\n```\n\n----------------------------------------\n\nTITLE: Adding Validator Candidate\nDESCRIPTION: Command to register as a validator candidate using sui_system::request_add_validator_candidate function with metadata and initial configurations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client call --package 0x3 --module sui_system --function request_add_validator_candidate --args 0x5 {protocol_pubkey_bytes} {network_pubkey_bytes} {worker_pubkey_bytes} {proof_of_possession} {name} {description} {image_url} {project_url} {net_address} {p2p_address} {primary_address} {worker_address} {gas_price} {commission_rate} --gas-budget 10000\n```\n\n----------------------------------------\n\nTITLE: Running Sui Edge Proxy Locally for Development\nDESCRIPTION: This bash command runs the Sui Edge Proxy locally using cargo, with debug logging enabled and a specified configuration file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-edge-proxy/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=debug cargo run -- --config=sui-edge-proxy-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Extracting Value from Option in Sui Move\nDESCRIPTION: Converts a some option to a none by removing and returning the stored value. Aborts if the option does not hold a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_10\n\nLANGUAGE: Move\nCODE:\n```\npublic fun extract<Element>(t: &mut Option<Element>): Element {\n    assert!(t.is_some(), EOPTION_NOT_SET);\n    t.vec.pop_back()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Sui Network\nDESCRIPTION: This command initiates the Docker Compose to bring up multiple Sui Network components, including validators and a full node. Optionally, it clears previously stored data in '/tmp/sui'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/sui-antithesis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(optional) `rm -r /tmp/sui`\\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Publishing Module Bundle with Incorrect Dependency Order in Sui Sandbox\nDESCRIPTION: Command examples showing error cases and a successful case when publishing modules with dependencies. The examples demonstrate how module ordering matters when module B depends on module A, and how to correctly specify the order using the --override-ordering flag.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/multi_module_publish/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# expect failure as B depends on A and A is missing in the bundle\nsandbox publish --bundle --override-ordering B -v\n\n# expect failure as B depends on A but A appears after B in the bundle\nsandbox publish --bundle --override-ordering B --override-ordering A -v\n\n# expect success: this is the correct order of publishing A and B\n# with friend relationship\nsandbox publish --bundle --override-ordering A --override-ordering B -v\nsandbox view storage/0x0000000000000000000000000000000000000000000000000000000000000007/modules/A.mv\nsandbox view storage/0x0000000000000000000000000000000000000000000000000000000000000007/modules/B.mv\n```\n\n----------------------------------------\n\nTITLE: Getting All Balances\nDESCRIPTION: Command to retrieve all balances using 2 threads against two RPC server instances, processing them in chunks of 20 at a time.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-rpc-loadgen/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-rpc-loadgen -- --urls \"http://127.0.0.1:9000\" \"http://127.0.0.1:9000\" --num-threads 2 get-all-balances --chunk-size 20\n```\n\n----------------------------------------\n\nTITLE: Installing Sui Node Binary from Pre-built Source\nDESCRIPTION: Downloads the pre-built Sui Node binary from Amazon S3, makes it executable, and moves it to the appropriate directory.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/systemd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwget https://releases.sui.io/$SUI_SHA/sui-node\nchmod +x sui-node\nsudo mv sui-node /opt/sui/bin\n```\n\n----------------------------------------\n\nTITLE: Dividing u128 with ceiling rounding\nDESCRIPTION: Divides a u128 by another and rounds up the result, useful for calculations requiring ceiling division.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_4\n\nLANGUAGE: Move\nCODE:\n```\npublic fun divide_and_round_up(x: u128, y: u128): u128 {\n    std::macros::num_divide_and_round_up!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project with Combined Warning Options\nDESCRIPTION: Command that both silences warnings and treats any remaining warnings as errors, providing strict building behavior.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/build_with_warnings/args.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbuild --silence-warnings --warnings-are-errors\n```\n\n----------------------------------------\n\nTITLE: Safe Conversion from u64 to u32 in Move\nDESCRIPTION: Attempts to convert a u64 value to u32, returning None if the value exceeds the maximum value of u32 (4294967295).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/u64.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun try_as_u32(x: u64): Option<u32> {\n    std::macros::try_as_u32!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL 8.0 via Homebrew\nDESCRIPTION: This command installs MySQL version 8.0 using Homebrew. This specific version is required for compatibility with TiDB.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nbrew install mysql@8.0\n```\n\n----------------------------------------\n\nTITLE: Paging through Package Versions in Sui using GraphQL\nDESCRIPTION: This GraphQL query finds all versions of the Sui framework and lists their modules.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/graphql-migration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  packageVersions(address: \"0x2\") {\n    nodes {\n      version\n      modules {\n        nodes {\n          name\n        }\n      }\n    }\n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Getting Amount from ActionRequest in Move\nDESCRIPTION: This function returns the Amount of an ActionRequest. It takes an ActionRequest as input and returns a u64 value representing the amount.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_46\n\nLANGUAGE: Move\nCODE:\n```\npublic fun amount<T>(self: &ActionRequest<T>): u64 { self.amount }\n```\n\n----------------------------------------\n\nTITLE: Getting Docker Container ID\nDESCRIPTION: Lists running Docker containers and their IDs. This is necessary to identify the specific container for further inspection.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Structure\nDESCRIPTION: Frontmatter and content structure for the DeepBook documentation page, including title, description, and import statement.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: DeepBook\ndescription: A central limit order book that offers features and functionality for marketplaces on Sui. Token exchanges leveraging the layer can feature transparency, a full range of trading options, and customer privacy.\n---\n\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Empty Table Destructor\nDESCRIPTION: Destroys an empty ObjectTable. Aborts if table is not empty. Takes ownership of the table.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/object_table.md#2025-04-22_snippet_9\n\nLANGUAGE: move\nCODE:\n```\npublic fun destroy_empty<K: copy + drop + store, V: key + store>(table: ObjectTable<K, V>) {\n    let ObjectTable { id, size } = table;\n    assert!(size == 0, ETableNotEmpty);\n    id.delete()\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Topic Title\nDESCRIPTION: Demonstrates the correct Markdown syntax for creating a topic title. This example uses a level 2 heading (##) to define the title.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n\"## title: This is a Topic Title\"\n```\n\n----------------------------------------\n\nTITLE: Byte Array Reversal Utility\nDESCRIPTION: Reverses the order of bytes in a byte vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message.md#2025-04-22_snippet_20\n\nLANGUAGE: Move\nCODE:\n```\nfun reverse_bytes(mut bytes: vector<u8>): vector<u8> {\n    vector::reverse(&mut bytes);\n    bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Sui Package Upgrade Script\nDESCRIPTION: Shell command to execute the upgrade script. This script should be run on a Tuesday when the day-of-week custom policy allows upgrades.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\n$ node upgrade.js\n```\n\n----------------------------------------\n\nTITLE: Jaeger Tracing Container Initialization\nDESCRIPTION: Docker command to run a local Jaeger tracing container for distributed tracing visualization and analysis\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/observability.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run -d -p6831:6831/udp -p6832:6832/udp -p16686:16686 jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Defining ECommissionRateTooHigh Error Constant in Move\nDESCRIPTION: Error constant (8) used when the commission rate set by the validator exceeds the allowed threshold.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_15\n\nLANGUAGE: move\nCODE:\n```\nconst ECommissionRateTooHigh: u64 = 8;\n```\n\n----------------------------------------\n\nTITLE: Implementing Option and Macro in Move\nDESCRIPTION: Macro that executes a closure on the value if Some, otherwise returns None. Equivalent to Rust's and_then() method.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_23\n\nLANGUAGE: move\nCODE:\n```\npublic macro fun and<$T, $U>($o: Option<$T>, $f: |$T| -> Option<$U>): Option<$U> {\n    let o = $o;\n    if (o.is_some()) {\n        $f(o.destroy_some())\n    } else {\n        o.destroy_none();\n        none()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Staked SUI - Move\nDESCRIPTION: Internal helper function that unwraps a StakedSui object and returns the underlying SUI balance while cleaning up the object ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/staking_pool.md#2025-04-22_snippet_15\n\nLANGUAGE: move\nCODE:\n```\nfun unwrap_staked_sui(staked_sui: StakedSui): Balance<SUI> {\n    let StakedSui { id, principal, .. } = staked_sui;\n    id.delete();\n    principal\n}\n```\n\n----------------------------------------\n\nTITLE: Get Type Name with Original IDs Function in Move\nDESCRIPTION: Native function to get a TypeName representation of type T, using original IDs for package IDs in fully qualified type names.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/type_name.md#2025-04-22_snippet_5\n\nLANGUAGE: move\nCODE:\n```\npublic native fun get_with_original_ids<T>(): TypeName;\n```\n\n----------------------------------------\n\nTITLE: Publishing Sui Package to Sandbox Environment using CLI\nDESCRIPTION: A command to publish a Sui package to a sandbox environment using the Sui CLI. The -v flag enables verbose output during the publishing process.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/build_modules_and_scripts/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-v sandbox publish\n```\n\n----------------------------------------\n\nTITLE: Building Local Stress Image with Docker\nDESCRIPTION: This snippet provides the commands to build a local Docker image for stress testing the Sui Network. It requires Docker and a specified SUI_TOOLS_IMAGE_TAG. The output is a Docker image labeled 'stress:testing'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/sui-antithesis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd docker/stress\\ndocker build -t stress:testing --build-arg SUI_TOOLS_IMAGE_TAG=mainnet-v1.19.1 .\n```\n\n----------------------------------------\n\nTITLE: Getting Staking Pool ID - Move\nDESCRIPTION: This function returns the object ID of a validator's staking pool by using the object::id function on the staking_pool field.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_70\n\nLANGUAGE: Move\nCODE:\n```\npublic fun staking_pool_id(self: &Validator): ID {\n    object::id(&self.staking_pool)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Forge\nDESCRIPTION: Command to run the test suite for Solidity contracts using Forge's testing functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/bridge/evm/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforge test\n```\n\n----------------------------------------\n\nTITLE: Installing Git CLI on Linux\nDESCRIPTION: Command to install Git and the Git CLI on Linux systems using apt-get. This is required for version control and accessing repositories.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo apt-get install git-all\n```\n\n----------------------------------------\n\nTITLE: GT Group Addition Operation\nDESCRIPTION: Implements addition operation for GT group elements using the group_ops::add function.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_38\n\nLANGUAGE: Move\nCODE:\n```\npublic fun gt_add(e1: &Element<GT>, e2: &Element<GT>): Element<GT> {\n    group_ops::add(GT_TYPE, e1, e2)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Sui Package Publishing\nDESCRIPTION: Sets up basic constants for the Sui CLI binary location and policy package ID.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst SUI = 'sui';\nconst POLICY_PACKAGE_ID = '<POLICY-PACKAGE>';\n```\n\n----------------------------------------\n\nTITLE: Module M with Struct Definition\nDESCRIPTION: Initial version of module M defining a struct S with two fields for demonstrating breaking changes detection.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\naddress 0x2 {\nmodule M {\n    struct S has key { f: u64, g: u64 }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum of Two u64 Values in Move\nDESCRIPTION: Function that returns the larger of two u64 values using the std::macros::num_max macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic fun max(x: u64, y: u64): u64 {\n    std::macros::num_max!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Sui Node from Source\nDESCRIPTION: This command compiles the Sui node from source using Cargo, Rust's package manager and build system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/validator-tasks.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo build --release --bin sui-node\n```\n\n----------------------------------------\n\nTITLE: Defining InternalNode Struct in Move\nDESCRIPTION: Defines an InternalNode struct containing a mask and references to children and parent nodes\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct InternalNode has drop, store {\n    mask: u64,\n    left_child: u64,\n    right_child: u64,\n    parent: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Move CLI using Cargo\nDESCRIPTION: Commands for installing the Move CLI tool using Cargo, either from a local path or directly from the GitHub repository.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cargo install --path move/language/tools/move-cli\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ cargo install --git https://github.com/move-language/move move-cli --branch main\n```\n\n----------------------------------------\n\nTITLE: Looping from 0 to U256 Value (Inclusive) in Sui Move\nDESCRIPTION: Applies a function to each number from 0 to a specified stop value (inclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_16\n\nLANGUAGE: Sui Move\nCODE:\n```\npublic macro fun do_eq<$R: drop>($stop: u256, $f: |u256| -> $R) {\n    std::macros::do_eq!($stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Group Element Conversion (Move)\nDESCRIPTION: The `internal_convert` function converts a group element from one type to another. This native function takes the source group type (`from_type_`), the destination group type (`to_type_`), and the element to convert (`e`) as a byte vector. It returns the converted group element as a new byte vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/group_ops.md#2025-04-22_snippet_21\n\nLANGUAGE: Move\nCODE:\n```\n<b>native</b> <b>fun</b> <a href=\"../sui/group_ops.md#sui_group_ops_internal_convert\">internal_convert</a>(from_type_: u8, to_type_: u8, e: &vector&lt;u8&gt;): vector&lt;u8&gt;;\n```\n\n----------------------------------------\n\nTITLE: Building Sui Package\nDESCRIPTION: Executes the Sui CLI to build the package and get bytecode and dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst { modules, dependencies } = JSON.parse(\n\texecSync(`${SUI} move build --dump-bytecode-as-base64 --path ${packagePath}`, {\n\t\tencoding: 'utf-8',\n\t}),\n);\n```\n\n----------------------------------------\n\nTITLE: Historical Volume by Balance Manager Example Response\nDESCRIPTION: An example JSON response showing historical trading volumes for a specific balance manager across pools, with separate values for maker and taker volumes in the base asset.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-indexer.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"DEEP_SUI\": [\n\t\t14207960000000,\n\t\t3690000000\n\t],\n\t\"SUI_USDC\": [\n\t\t2089300100000000,\n\t\t17349400000000\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Next Epoch Worker Address in Move\nDESCRIPTION: Updates the worker address of a validator for the next epoch. This function checks the length of the new address and sets it in the validator's metadata.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_84\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun update_next_epoch_worker_address(\n    self: &mut Validator,\n    worker_address: vector<u8>,\n) {\n    assert!(\n        worker_address.length() <= MAX_VALIDATOR_METADATA_LENGTH,\n        EValidatorMetadataExceedingLengthLimit,\n    );\n    let worker_address = worker_address.to_ascii_string().to_string();\n    self.metadata.next_epoch_worker_address = option::some(worker_address);\n    self.metadata.validate_metadata();\n}\n```\n\n----------------------------------------\n\nTITLE: Download Genesis Blob for Sui Network\nDESCRIPTION: These commands download the genesis blob for different Sui networks (Devnet, Testnet, Mainnet) using 'curl'. The genesis blob is a required file for setting up the initial state of the node in the specific network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/sui-full-node.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -fLJO https://github.com/MystenLabs/sui-genesis/raw/main/devnet/genesis.blob\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -fLJO https://github.com/MystenLabs/sui-genesis/raw/main/testnet/genesis.blob\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -fLJO https://github.com/MystenLabs/sui-genesis/raw/main/mainnet/genesis.blob\n```\n\n----------------------------------------\n\nTITLE: Creating Payments to Shared Register Objects Without Transfer-to-Object\nDESCRIPTION: Implements a function to make payments to a shared register object without using transfer-to-object. It adds the payment as a dynamic field under the register object, requiring serial processing of payments.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/move/transfer-to-object/README.md#2025-04-22_snippet_1\n\nLANGUAGE: move\nCODE:\n```\npublic fun make_shared_payment(\n    register_uid: &mut UID,\n    payment_id: u64,\n    coin: Coin<SUI>,\n    ctx: &mut TxContext\n) {\n    let identified_payment = IdentifiedPayment {\n        id: object::new(ctx),\n        payment_id,\n        coin,\n    };\n    // Add the payment as a dynamic field under the register object\n    dynamic_field::add(register_uid, payment_id, identified_payment)\n}\n```\n\n----------------------------------------\n\nTITLE: Base Asset Swap Function Declaration\nDESCRIPTION: Function signature for swapping exact base amount for quote amount using SwapParams.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/deepbookv3-sdk/swaps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nswapExactBaseForQuote({ params: SwapParams });\n```\n\n----------------------------------------\n\nTITLE: Reporting Validator Peers\nDESCRIPTION: Commands to report validator peers, with options for direct reporting or using an operation cap.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator report-validator <reportee-address>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator update-gas-price --operation-cap-id <operation-cap-id> <gas-price>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order ID from Order Object in DeepBook CLOB (Move)\nDESCRIPTION: This function retrieves the order ID from an Order object in the DeepBook CLOB implementation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/order_query.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun order_id(order: &Order): u64 {\n    clob_v2::order_id(order)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Active Validator Status\nDESCRIPTION: Function to verify if a given address belongs to an active validator.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_set.md#2025-04-22_snippet_26\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun is_active_validator_by_sui_address(self: &ValidatorSet, validator_address: address): bool {\n    find_validator(&self.active_validators, validator_address).is_some()\n}\n```\n\n----------------------------------------\n\nTITLE: Getting BitVector Length\nDESCRIPTION: Returns the length (number of usable bits) of the BitVector by accessing the length of the underlying bit_field vector.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/bit_vector.md#2025-04-22_snippet_5\n\nLANGUAGE: Move\nCODE:\n```\npublic fun length(bitvector: &BitVector): u64 {\n    bitvector.bit_field.length()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sui Move tests with gas limit\nDESCRIPTION: Command to run Move tests with a gas consumption limit of 0 using the Sui CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/unit-testing.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ sui move test -i 0\n```\n\n----------------------------------------\n\nTITLE: Starting Sui Node with Docker Compose\nDESCRIPTION: This shell command starts the Sui Node in detached mode using Docker Compose.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/docker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Verified Validator Operation Capability Struct\nDESCRIPTION: Represents a verified capability object for performing privileged validator operations after successful verification\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator_cap.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct ValidatorOperationCap has drop {\n    authorizer_validator_address: address\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Upgraded Package with Sui CLI\nDESCRIPTION: Shell command to interact with the upgraded smart contract by calling the 'nudge' function from the example module using the Sui Client CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\n$ sui client call --gas-budget 10000000 \\\n    --package '<UPGRADED-EXAMPLE-PACKAGE>' \\\n    --module 'example' \\\n    --function 'nudge'\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage Archival Fallback in YAML\nDESCRIPTION: This configuration enables a Sui node to fallback to Mysten Labs' GCS archives. It specifies the bucket for mainnet (noting testnet archive isn't available on GCS) and requires a Google service account credentials file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/archives.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstate-archive-read-config:\n  - object-store-config:\n      object-store: \"GCS\"\n      # Use mysten-mainnet-archives for mainnet\n      # Notice there is no archive bucket setup for testnet in GCS\n      bucket: \"mysten-<testnet|mainnet>-archives\"\n      # Use your gcloud service account credentials\n      google-service-account: \"</path/to/service/account/credentials>\"\n      object-store-connection-limit: 20\n    # How many objects to read ahead when catching up  \n    concurrency: 5\n    # Whether to prune local state based on latest checkpoint in archive.\n    # This should stay false for most use cases\n    use-for-pruning-watermark: false\n```\n\n----------------------------------------\n\nTITLE: Retrieving ToCoin Action Name in Move\nDESCRIPTION: This function returns the name of the ToCoin action as a String. It doesn't take any parameters and returns a predefined string constant.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/token.md#2025-04-22_snippet_43\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_coin_action(): String {\n    let to_coin_str = TO_COIN;\n    to_coin_str.to_string()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EInvalidCap Error Constant in Move\nDESCRIPTION: Error constant (101) used when a capability code is not valid.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui_system/validator.md#2025-04-22_snippet_21\n\nLANGUAGE: move\nCODE:\n```\nconst EInvalidCap: u64 = 101;\n```\n\n----------------------------------------\n\nTITLE: Transaction Execution Workflow\nDESCRIPTION: Execution process for transactions with owned or shared input objects\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-architecture/transaction-lifecycle.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nExecution Scenarios:\n- No shared objects: Execute immediately\n- Contains shared objects: Submit to consensus layer for ordering and execution\n```\n\n----------------------------------------\n\nTITLE: Publishing Bundle with Custom Ordering in Sui Sandbox\nDESCRIPTION: This command publishes a bundle in the Sui sandbox environment. It uses the '--bundle' flag to indicate a bundle publication and overrides the ordering for modules M and N using the '--override-ordering' option.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/verify_native_functions_in_multi_module_publish/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsandbox publish --bundle --override-ordering M --override-ordering N\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Container Bash Shell\nDESCRIPTION: Opens a bash shell inside the specified Docker container. Replace `$CONTAINER_ID` with the actual container ID obtained from `docker ps`.  This allows direct interaction with the Full node's environment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/fullnode/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it $CONTAINER_ID /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Destroying None Option in Sui Move\nDESCRIPTION: Unpacks the option. Aborts if the option holds a value.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/std/option.md#2025-04-22_snippet_16\n\nLANGUAGE: Move\nCODE:\n```\npublic fun destroy_none<Element>(t: Option<Element>) {\n    assert!(t.is_none(), EOPTION_IS_SET);\n    let Option { vec } = t;\n    vec.destroy_empty()\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Validator Information\nDESCRIPTION: Command to display the validator's metadata and test the network connection.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator display-metadata\n```\n\n----------------------------------------\n\nTITLE: Markdown Bulleted List Capitalization\nDESCRIPTION: Illustrates creating bulleted lists in Markdown with proper capitalization.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n\"* First list item\\n* Second list item\"\n```\n\n----------------------------------------\n\nTITLE: Converting U128 to String in Move\nDESCRIPTION: Converts a u128 value to its string representation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u128.md#2025-04-22_snippet_11\n\nLANGUAGE: Move\nCODE:\n```\npublic fun to_string(x: u128): String {\n    std::macros::num_to_string!(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Simulator Test with SimConfig in Rust\nDESCRIPTION: Demonstrates how to configure a simulator test using SimConfig. The example shows defining a custom configuration function and applying it to a test case using the #[sim_test] macro.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-simulator/README.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nfn my_config() -> SimConfig {\n   ...\n}\n\n#[sim_test(config = \"my_config()\")]\nasync fn test_case() {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Bridge Message Types in Move\nDESCRIPTION: Defines numeric constants for various bridge message types. Each constant represents a specific operation type in the bridge system.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/message_types.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nconst TOKEN: u8 = 0;\nconst COMMITTEE_BLOCKLIST: u8 = 1;\nconst EMERGENCY_OP: u8 = 2;\nconst UPDATE_BRIDGE_LIMIT: u8 = 3;\nconst UPDATE_ASSET_PRICE: u8 = 4;\nconst ADD_TOKENS_ON_SUI: u8 = 6;\n```\n\n----------------------------------------\n\nTITLE: Defining Bridge Event Structs in Move\nDESCRIPTION: Defines structs for events emitted by the bridge, including TokenDepositedEvent for when tokens are deposited and EmergencyOpEvent for emergency operations.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/bridge/bridge.md#2025-04-22_snippet_1\n\nLANGUAGE: Move\nCODE:\n```\npublic struct TokenDepositedEvent has copy, drop {\n    seq_num: u64,\n    source_chain: u8,\n    sender_address: vector<u8>,\n    target_chain: u8,\n    target_address: vector<u8>,\n    token_type: u8,\n    amount: u64\n}\n\npublic struct EmergencyOpEvent has copy, drop {\n    frozen: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript SDK E2E Tests on Local Sui Network\nDESCRIPTION: Command to run end-to-end tests using the TypeScript SDK to populate a local Sui network with example data. This requires starting a local network with indexer and GraphQL services enabled.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/local-network.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm --filter @mysten/sui test:e2e\n```\n\n----------------------------------------\n\nTITLE: Transaction Pruning Configuration for Sui Nodes\nDESCRIPTION: Configuration for managing transaction and effects pruning, with options to control the retention of historical checkpoint data\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/operator/data-management.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthority-store-pruning-config:\n  num-latest-epoch-dbs-to-retain: 3\n  epoch-db-pruning-period-secs: 3600\n  num-epochs-to-retain: 0\n  max-checkpoints-in-batch: 10\n  max-transactions-in-batch: 1000\n  num-epochs-to-retain-for-checkpoints: 2\n  periodic-compaction-threshold-days: 1\n```\n\n----------------------------------------\n\nTITLE: Implementing borrow operations for LinkedTable in Move\nDESCRIPTION: Provides immutable and mutable borrowing of values from the LinkedTable by key. Aborts if the key doesn't exist.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/linked_table.md#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\npublic fun borrow<K: copy + drop + store, V: store>(table: &LinkedTable<K, V>, k: K): &V {\n    &field::borrow<K, Node<K, V>>(&table.id, k).value\n}\n\npublic fun borrow_mut<K: copy + drop + store, V: store>(\n    table: &mut LinkedTable<K, V>,\n    k: K,\n): &mut V {\n    &mut field::borrow_mut<K, Node<K, V>>(&mut table.id, k).value\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration API - Modify Config\nDESCRIPTION: API function for modifying existing rule configurations. Requires both rule witness and TokenPolicy owner approval.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/standards/closed-loop-token/rules.mdx#2025-04-22_snippet_4\n\nLANGUAGE: move\nCODE:\n```\n// module: sui::token\npublic fun rule_config_mut<T, Rule: drop, Config: store>(\n    _rule: Rule, policy: &mut TokenPolicy<T>, policy_cap: &TokenPolicyCap<T>\n): &mut Config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Sui Node with Ansible Playbook\nDESCRIPTION: This command runs the Ansible playbook to configure everything for a Sui Node. It uses the inventory file and specifies the target host.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/ansible/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nansible-playbook -i inventory.yaml sui-node.yaml -e host=$inventory_name\n```\n\n----------------------------------------\n\nTITLE: Publishing Asset Tokenization Package Command\nDESCRIPTION: Shell command for publishing the asset tokenization package to the Sui network.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/asset-tokenization.mdx#2025-04-22_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\n$ sui client publish --gas-budget <GAS-BUDGET>\n```\n\n----------------------------------------\n\nTITLE: Vector Length Function\nDESCRIPTION: Native function to get the length of a vector\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/vector.md#2025-04-22_snippet_2\n\nLANGUAGE: Move\nCODE:\n```\npublic native fun length<Element>(v: &vector<Element>): u64;\n```\n\n----------------------------------------\n\nTITLE: Initializing Sui Move Package for reCAPTCHA Module\nDESCRIPTION: Creates a new Sui Move package named 'recaptcha' using the Sui CLI.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/recaptcha.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move new recaptcha\n```\n\n----------------------------------------\n\nTITLE: Adding Closing Syntax - TypeScript Example\nDESCRIPTION: Illustrates how to include only the first part of a code source when the end directive needs to be placed before the closing syntax. Appending the necessary syntax to the end directive ensures well-formed code is displayed in the document.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/mdx-components.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// docs::#funcBasic\nfunction func(){ \n    const basic = () => {\n        const basic2 = () => {};\n        // docs::/#funcBasic};}\n        const inter = () => {};\n    };\n    const advanced = () => {};\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Locked Coin Stake to Validator Pool\nDESCRIPTION: Function to add user stake to a validator's staking pool using a locked SUI coin. Takes a locked coin, validator address, and transaction context as parameters.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/exchange-integration-guide.mdx#2025-04-22_snippet_14\n\nLANGUAGE: move\nCODE:\n```\npublic fun request_add_stake_with_locked_coin(\n   self: &mut SuiSystemState,\n   stake: LockedCoin<SUI>,\n   validator_address: address,\n   ctx: &mut TxContext,\n) {\n   let (balance, lock) = locked_coin::into_balance(stake);\n   validator_set::request_add_stake(&mut self.validators, validator_address, balance, option::some(lock), ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Root Override with Conflicting Dependencies Error Test\nDESCRIPTION: Tests error detection when overriding causes conflicting dependency versions. This should result in an error because i1b and b have incompatible dependencies on i2.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-package/tests/test_sources/implicits/README.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\na:\n  B: b\n  I1: i1b\n\nb: no deps\n\ni1b:\n  I2: i2a\n```\n\n----------------------------------------\n\nTITLE: Creating a New Move Project\nDESCRIPTION: Demonstrates how to create a new Move project using the sui move new command, which automatically creates the necessary directory structure and Move.toml file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/move.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sui move new smart_contract_test\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ ls -l smart_contract_test\n```\n\nLANGUAGE: sh\nCODE:\n```\nMove.toml\nSources\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ cat smart_contract_test/Move.toml\n```\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"smart_contract_test\"\nversion = \"0.0.1\"\n\n[dependencies]\nSui = { git = \"https://github.com/MystenLabs/sui.git\", subdir = \"crates/sui-framework/packages/sui-framework\", rev = \"framework/testnet\" }\n\n[addresses]\nsmart_contract_test = \"0x0\"\n```\n\n----------------------------------------\n\nTITLE: Creating Postgres Role\nDESCRIPTION: This snippet creates a Postgres role named 'postgres' with superuser privileges and a password. It uses the current user's name to initially connect and execute the CREATE ROLE command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-graphql-e2e-tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ME=$(whoami)\n$ psql \"postgres://$ME:$ME@localhost:5432/postgres\" \\\n    -c \"CREATE ROLE postgres WITH SUPERUSER LOGIN PASSWORD 'postgrespw';\"\n```\n\n----------------------------------------\n\nTITLE: Running Sui Indexer Alt with Cargo\nDESCRIPTION: This command demonstrates how to run the sui-indexer-alt binary with required parameters. It specifies a database URL, remote store URL for checkpoints, disables watermark checking, and sets checkpoint range boundaries with a configuration file.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer-alt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin sui-indexer-alt -- indexer               \\\n  --database-url {url}                                   \\\n  --remote-store-url https://checkpoints.mainnet.sui.io  \\\n  --skip-watermark                                       \\\n  --first-checkpoint 68918060 --last-checkpoint 68919060 \\\n  --config indexer_alt_config.toml\n```\n\n----------------------------------------\n\nTITLE: Running the Sui Metric Checker CLI with Authentication Parameters\nDESCRIPTION: Command to run the sui-metric-checker CLI tool with required authentication parameters (API key, user), configuration file path, and Prometheus URL. Demonstrates how to execute the tool with debug logging enabled.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-metric-checker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=debug cargo run --package sui-metric-checker --bin sui-metric-checker  -- --api-key xxxxxxxx --api-user xxxx_metrics --config checks.yaml --url https://xxxx.sui.io/prometheus\n```\n\n----------------------------------------\n\nTITLE: Viewing Kiosk Contents with pnpm CLI\nDESCRIPTION: This command lists the contents of the Kiosk. It includes optional flags for searching by Kiosk ID or user address. This is useful to inspect items available in the Kiosk.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/kiosk-cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli contents\n```\n\nLANGUAGE: bash\nCODE:\n```\n# pnpm cli contents --id <kiosk_id>\n```\n\nLANGUAGE: bash\nCODE:\n```\n# pnpm cli contents --address <address>\n```\n\n----------------------------------------\n\nTITLE: Defining sender Function Signature in Move\nDESCRIPTION: Specifies the signature of the sender function from the sui::tx_context module, which is used in another MoveCall command.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/transactions/prog-txn-blocks.mdx#2025-04-22_snippet_11\n\nLANGUAGE: move\nCODE:\n```\npublic fun sender(ctx: &TxContext): address\n```\n\n----------------------------------------\n\nTITLE: Installing move-analyzer Binary with Cargo\nDESCRIPTION: Manual installation method for the move-analyzer binary using Cargo. This command clones the Sui repository and installs the Move Language Server Protocol (LSP) binary for development and analysis purposes.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/ide/move.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --git https://github.com/MystenLabs/sui.git sui-move-lsp\n```\n\n----------------------------------------\n\nTITLE: Finding Leftmost Leaf in CritbitTree Subtree (Move)\nDESCRIPTION: Helper function to find the leftmost leaf in a subtree of the CritbitTree, starting from a given root node.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/deepbook/critbit.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\nfun left_most_leaf<V: store>(tree: &CritbitTree<V>, root: u64): u64 {\n    let mut ptr = root;\n    while (ptr < PARTITION_INDEX){\n        ptr = table::borrow(& tree.internal_nodes, ptr).left_child;\n    };\n    ptr\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dynamic Field Info in Move\nDESCRIPTION: This function retrieves information about a dynamic field, including its UID and address.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/dynamic_field.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\npublic(package) fun field_info<Name: copy + drop + store>(\n    object: &UID,\n    name: Name,\n): (&UID, address) {\n    let object_addr = object.to_address();\n    let hash = hash_type_and_key(object_addr, name);\n    let Field { id, name: _, value } = borrow_child_object<Field<Name, ID>>(object, hash);\n    (id, value.to_address())\n}\n```\n\n----------------------------------------\n\nTITLE: Create New Environment using Sui CLI\nDESCRIPTION: This command creates a new environment with a given RPC URL and alias. This is useful for connecting to different Sui networks.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/cheatsheet.mdx#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n\"sui client new-env --rpc URL --alias ALIAS\"\n```\n\n----------------------------------------\n\nTITLE: Markdown comment for documentation references in Sui project\nDESCRIPTION: A hidden comment in markdown syntax indicating that this file contains references which can be used from documentation for the Sui project.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/doc_templates/references.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[//]: # (\"File containing references which can be used from documentation\")\n```\n\n----------------------------------------\n\nTITLE: Testing Terminal Output Condition in Shell\nDESCRIPTION: Uses the test command (-t flag) to check if file descriptor 1 (stdout) is associated with a terminal device. Returns 0 if stdout is a terminal, 1 if not.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/unit_test_named_address_resolution/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntest -t 1\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to run both the API and indexer services\nSOURCE: https://github.com/mystenlabs/sui/blob/main/examples/trading/api/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Utilities in Move\nDESCRIPTION: This snippet defines a utility function for checking if a type is a one-time witness in Move.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/published_api.txt#2025-04-22_snippet_25\n\nLANGUAGE: Move\nCODE:\n```\npublic fun is_one_time_witness\n```\n\n----------------------------------------\n\nTITLE: Sui Full Node Server URL Prompt\nDESCRIPTION: Prompt requesting the Sui Full node server URL, which defaults to Sui Testnet if not specified.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/snippets/initialize-sui-client-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSui Full node server URL (Defaults to Sui Testnet if not specified) :\n```\n\n----------------------------------------\n\nTITLE: Installing CMake on macOS\nDESCRIPTION: Command to install CMake on macOS using Homebrew. CMake is required for building Sui and its dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/getting-started/sui-install.mdx#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install cmake\n```\n\n----------------------------------------\n\nTITLE: Invalid Circular Constant References in Move\nDESCRIPTION: Demonstrates invalid circular references between constants that cause compile-time errors.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/book/src/constants.md#2025-04-22_snippet_7\n\nLANGUAGE: move\nCODE:\n```\nconst A: u16 = B + 1;\nconst B: u16 = A + 1; // ERROR!\n```\n\n----------------------------------------\n\nTITLE: Verify an Object in Sui Blockchain with CLI\nDESCRIPTION: This command checks and retrieves the details of a specified object using the Sui CLI light client, requiring the object ID in hex format. Returns the object information in JSON format if valid, else returns an error.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-light-client/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sui-light-client --config light_client.yaml object -o 0xa514c85e1844189a54f4bfabc0928cbcac2137b928bef61adade84bbb486fd1f\n```\n\n----------------------------------------\n\nTITLE: Looping Over U64 Range (Exclusive) in Move\nDESCRIPTION: Macro function that applies a given function to each number in a range from start to stop (exclusive).\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u64.md#2025-04-22_snippet_12\n\nLANGUAGE: Move\nCODE:\n```\npublic macro fun range_do<$R: drop>($start: u64, $stop: u64, $f: |u64| -> $R) {\n    std::macros::range_do!($start, $stop, $f)\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing in Sui Sandbox\nDESCRIPTION: Command to publish modules in the Sui sandbox environment.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/sandbox_tests/generate_struct_layout/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsandbox publish\n```\n\n----------------------------------------\n\nTITLE: Multiplying Integer by UQ32_32 in Move\nDESCRIPTION: Multiplies a u64 integer by a UQ32_32 fixed-point number, truncating any fractional part of the product. Aborts if the product overflows.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/uq32_32.md#2025-04-22_snippet_9\n\nLANGUAGE: Move\nCODE:\n```\npublic fun int_mul(val: u64, multiplier: UQ32_32): u64 {\n    std::macros::uq_int_mul!<u64, u128>(\n        val,\n        multiplier.0,\n        std::u64::max_value!(),\n        FRACTIONAL_BITS,\n        abort EOverflow,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bridge Indexer Binary\nDESCRIPTION: Command to execute the Bridge Indexer with a specified configuration file\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-bridge-indexer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbridge-indexer --config-path config.yaml\n```\n\n----------------------------------------\n\nTITLE: Referencing SharedObjectCongestionTracker in Rust\nDESCRIPTION: This code snippet shows the location of the SharedObjectCongestionTracker in the Sui codebase, which is responsible for tracking the congestion budget usage of shared objects.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/advanced/local-fee-markets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`SharedObjectCongestionTracker`](https://github.com/MystenLabs/sui/blob/main/crates/sui-core/src/authority/shared_object_congestion_tracker.rs)\n```\n\n----------------------------------------\n\nTITLE: Listing Sui Keytool CLI Commands\nDESCRIPTION: This snippet shows the usage and available commands for the Sui Keytool CLI. It includes options for key management, signature operations, and zkLogin functionality.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/cli/keytool.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUsage: sui keytool [OPTIONS] <COMMAND>\n\nCommands:\n  convert                           \tConvert private key from legacy formats (e.g. Hex or Base64) to Bech32 encoded 33 byte `flag || private key` begins with `suiprivkey`\n  decode-or-verify-tx                   Given a Base64 encoded transaction bytes, decode its components. If a signature is provided, verify the signature against the transaction \n  \t\t\t\t\t\t\tand output the result.\n  decode-multi-sig                  \tGiven a Base64 encoded MultiSig signature, decode its components. If tx_bytes is passed in, verify the multisig\n  generate                          \tGenerate a new keypair with key scheme flag {ed25519 | secp256k1 | secp256r1} with optional derivation path, default to\n                                        \tm/44'/784'/0'/0'/0' for ed25519 or m/54'/784'/0'/0/0 for secp256k1 or m/74'/784'/0'/0/0 for secp256r1. Word length can be { word12 |\n                                        \tword15 | word18 | word21 | word24} default to word12 if not specified\n  import                            \tAdd a new key to sui.keystore using either the input mnemonic phrase or a private key (from the Wallet), the key scheme flag {ed25519 |\n                                        \tsecp256k1 | secp256r1} and an optional derivation path, default to m/44'/784'/0'/0'/0' for ed25519 or m/54'/784'/0'/0/0 for secp256k1\n                                        \tor m/74'/784'/0'/0/0 for secp256r1. Supports mnemonic phrase of word length 12, 15, 18`, 21, 24\n  list                              \tList all keys by its Sui address, Base64 encoded public key, key scheme name in sui.keystore\n  load-keypair                      \tThis reads the content at the provided file path. The accepted format can be [enum SuiKeyPair] (Base64 encoded of 33-byte `flag ||\n                                        \tprivkey`) or `type AuthorityKeyPair` (Base64 encoded `privkey`). This prints out the account keypair as Base64 encoded `flag ||\n                                        \tprivkey`, the network keypair, worker keypair, protocol keypair as Base64 encoded `privkey`\n  multi-sig-address                 \tTo MultiSig Sui Address. Pass in a list of all public keys `flag || pk` in Base64. See `keytool list` for example public keys\n  multi-sig-combine-partial-sig     \tProvides a list of participating signatures (`flag || sig || pk` encoded in Base64), threshold, a list of all public keys and a list of\n                                        \ttheir weights that define the MultiSig address. Returns a valid MultiSig signature and its sender address. The result can be used as\n                                        \tsignature field for `sui client execute-signed-tx`. The sum of weights of all signatures must be >= the threshold\n  multi-sig-combine-partial-sig-legacy\n  show                              \tRead the content at the provided file path. The accepted format can be [enum SuiKeyPair] (Base64 encoded of 33-byte `flag || privkey`)\n                                        \tor `type AuthorityKeyPair` (Base64 encoded `privkey`). It prints its Base64 encoded public key and the key scheme flag\n  sign                              \tCreate signature using the private key for the given address in sui keystore. Any signature commits to a [struct IntentMessage]\n                                        \tconsisting of the Base64 encoded of the BCS serialized transaction bytes itself and its intent. If intent is absent, default will be\n                                        \tused\n  sign-kms                          \tCreates a signature by leveraging AWS KMS. Pass in a key-id to leverage Amazon KMS to sign a message and the base64 pubkey. Generate\n                                        \tPubKey from pem using MystenLabs/base64pemkey Any signature commits to a [struct IntentMessage] consisting of the Base64 encoded of the\n                                        \tBCS serialized transaction bytes itself and its intent. If intent is absent, default will be used\n  unpack                            \tThis takes [enum SuiKeyPair] of Base64 encoded of 33-byte `flag || privkey`). It outputs the keypair into a file at the current\n                                        \tdirectory where the address is the filename, and prints out its Sui address, Base64 encoded public key, the key scheme, and the key\n                                        \tscheme flag\n  zk-login-sign-and-execute-tx      \tGiven the max_epoch, generate an OAuth url, ask user to paste the redirect with id_token, call salt server, then call the prover\n                                        \tserver, create a test transaction, use the ephemeral key to sign and execute it by assembling to a serialized zkLogin signature\n  zk-login-enter-token              \tA workaround to the above command because sometimes token pasting does not work. All the inputs required here are printed from the\n                                        \tcommand above\n  zk-login-sig-verify               \tGiven a zkLogin signature, parse it if valid. If tx_bytes provided, it verifies the zkLogin signature based on provider and its latest\n                                        \tJWK fetched. Example request: sui keytool zk-login-sig-verify --sig $SERIALIZED_ZKLOGIN_SIG --tx-bytes $TX_BYTES --provider Google\n                                        \t--curr-epoch 10\n  help                              \tPrint this message or the help of the given subcommand(s)\n\nOptions:\n  \t--keystore-path <KEYSTORE_PATH>\n  \t--json                       \tReturn command outputs in json format\n  -h, --help                       \tPrint help\n```\n\n----------------------------------------\n\nTITLE: NFT Rental Initialization Flow\nDESCRIPTION: Sequence diagram showing the initialization process for NFT rental system including setup_renting, TransferPolicy creation, and extension installation for both renter and borrower.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/nft/nft-rental.mdx#2025-04-22_snippet_17\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Creator\n    participant Renter\n    participant Borrower\n    participant nft_rental module\n    participant Renter's Extension\n    participant Borrower's Extension\n\tparticipant transfer_policy module\n    participant kiosk_lock_rule module\n    participant blockchain\nrect rgba(191, 223, 255, 0.2) \n\t\tnote right of Creator: Setup Renting\n    Creator->>nft_rental module: Use Publisher and amountBP as inputs\n    nft_rental module-->>blockchain: Shares ProtectedTP and RentalPolicy\n    end\nrect rgba(191, 223, 255, 0.2) \n\t\tnote right of Creator: Create TransferPolicy\n    Creator ->> transfer_policy module: Use Publisher as input to create TransferPolicy\n    transfer_policy module -->> blockchain: Shares TransferPolicy\n    transfer_policy module-->> Creator: Returns TransferPolicyCap\n    end\nopt Add lock rule\n    Creator ->> kiosk_lock_rule module: Use TransferPolicyCap as input in kiosk_lock_rule::add\n    blockchain ->> kiosk_lock_rule module: Use TransferPolicy as input in kiosk_lock_rule::add\n    kiosk_lock_rule module -->> blockchain: Shares TransferPolicy with lock rule\n    kiosk_lock_rule module -->> Creator: Returns TransferPolicyCap\n    end\nrect rgba(191, 223, 255, 0.2)\n\t\tnote right of Renter: Install Extension\n    Renter->>nft_rental module: Use kiosk, kioskOwnerCap as input to install extension\n    nft_rental module-->>Renter's Extension: Extension is installed to kiosk\n    end\nrect rgba(191, 223, 255, 0.2)\n\t\tnote right of Borrower: Install Extension\n    Borrower->>nft_rental module: Use kiosk, kioskOwnerCap as input to install extension\n    nft_rental module-->>Borrower's Extension: Extension is installed to kiosk\n    end\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Coin Function in Sui Move\nDESCRIPTION: Function to mint a test coin for use in escrow module tests. It creates a new test coin with a specified value and returns it.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/guides/developer/app-examples/trustless-swap.mdx#2025-04-22_snippet_6\n\nLANGUAGE: Move\nCODE:\n```\n#[test_only]\nfun test_coin(amount: u64, ctx: &mut TxContext): Coin<SUI> {\n    coin::mint_for_testing(amount, ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prettier Script to package.json\nDESCRIPTION: Example of adding a Prettier script to package.json for running Prettier with the Move plugin.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/tooling/prettier-move/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"prettier\": \"prettier --write .\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Documentation Generation Results\nDESCRIPTION: Commands to verify the generated documentation by searching for the term 'documentation' in the generated file and displaying the template file used for generation.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/simple_build_with_docs/args.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngrep documentation doc/0000000000000000000000000000000000000000000000000000000000000006/Foo.md\ncat doc/template.md\n```\n\n----------------------------------------\n\nTITLE: Starting Bigtable Emulator\nDESCRIPTION: Command to start the Google Cloud Bigtable emulator for local development.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-kvstore/src/bigtable/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngcloud beta emulators bigtable start\n```\n\n----------------------------------------\n\nTITLE: Starting Postgresql service via Homebrew\nDESCRIPTION: This command starts the Postgresql service using Homebrew.  This makes the Postgresql server available in the background for other processes to connect to.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew services start postgresql@version\n```\n\n----------------------------------------\n\nTITLE: Markdown Relative Link Example\nDESCRIPTION: Demonstrates how to use relative links in Markdown to link to other topics within the documentation, including the `.mdx` extension.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/references/contribute/style-guide.mdx#2025-04-22_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n\"To learn more, see [Examples of Sui Smart Contracts](/guides/developer/app-examples.mdx).\"\n```\n\n----------------------------------------\n\nTITLE: Creating One Scalar for BLS12381\nDESCRIPTION: This function produces a scalar representing one in the BLS12381 context, using defined byte representation for 'one'.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-framework/docs/sui/bls12381.md#2025-04-22_snippet_8\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_one\">scalar_one</a>(): <a href=\"../sui/group_ops.md#sui_group_ops_Element\">sui::group_ops::Element</a>&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">sui::bls12381::Scalar</a>&gt;\n```\n\nLANGUAGE: Move\nCODE:\n```\n<b>public</b> <b>fun</b> <a href=\"../sui/bls12381.md#sui_bls12381_scalar_one\">scalar_one</a>(): Element&lt;<a href=\"../sui/bls12381.md#sui_bls12381_Scalar\">Scalar</a>&gt; {\n    <b>let</b> one = <a href=\"../sui/bls12381.md#sui_bls12381_SCALAR_ONE_BYTES\">SCALAR_ONE_BYTES</a>;\n    <a href=\"../sui/group_ops.md#sui_group_ops_from_bytes\">group_ops::from_bytes</a>(<a href=\"../sui/bls12381.md#sui_bls12381_SCALAR_TYPE\">SCALAR_TYPE</a>, &one, <b>true</b>)\n}\n```\n\n----------------------------------------\n\nTITLE: Minting and Transferring Tokens with Sui CLI in Bash\nDESCRIPTION: Executes a command to mint and transfer tokens using the Sui CLI. The command requires parameters such as TreasuryCap, amount, and recipient address, allowing the user to mint and transfer a specific amount to a designated recipient.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/dapps/regulated-token/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsui client call --json \\\n    --package $PKG --module reg --function mint_and_transfer \\\n    --gas-budget 100000000 \\\n    --args $TREASURY_CAP \"amount\" \"0x_recipient\"\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project with Verbose Output\nDESCRIPTION: Command to build the Sui project with verbose (-v) output flag enabled to show detailed build process information.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/public_package_different_addresses/args.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild -v\n```\n\n----------------------------------------\n\nTITLE: Specifying Feature Parameter for Package Naming\nDESCRIPTION: Explains how to use the '--feature' or '-f' parameter to disambiguate names of copied crates from their originals.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/sui-execution/cut/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`cut` accepts a `--feature` (or `-f`) parameter that is used to\\ndisambiguate the names of copied crates from their originals.  When a\\ncrate A with name `\"a\"` is copied as part of feature `foo`, its copy,\\nA', will have name `\"a-foo\"`.\n```\n\n----------------------------------------\n\nTITLE: Setting Root Directory for Cut Operation\nDESCRIPTION: Describes how to specify the root directory for the 'cut' operation, either automatically or using the '--root' parameter.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/sui-execution/cut/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nBy default,\\nit sets this to the ancestor of the current working directory that\\ncontains a `.git` directory.  If such an ancestor does not exist, or\\nit does not contain a `Cargo.toml` that contains a `[workspace]`\\nfield, then the `--root` must be explicitly supplied.\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Postgres\nDESCRIPTION: These commands set environment variables required for Postgresql. LDFLAGS and CPPFLAGS specify the location of libraries and include files, while PATH adds the Postgresql binaries to the system's executable search path. This allows other tools to find and use Postgresql.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-indexer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport LDFLAGS=\"-L/opt/homebrew/opt/postgresql@15/lib\"\nexport CPPFLAGS=\"-I/opt/homebrew/opt/postgresql@15/include\"\nexport PATH=\"/opt/homebrew/opt/postgresql@15/bin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Calculate SHA256 Checksum (Linux)\nDESCRIPTION: This command calculates the SHA256 checksum of the extracted sui-node binary on a Linux system. This is used to verify the integrity and correctness of the build.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docker/sui-node-deterministic/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"sha256sum opt/sui/bin/sui-node\"\n```\n\n----------------------------------------\n\nTITLE: Repository URL Format with Private GitHub Access Token\nDESCRIPTION: JSON snippet showing how to format the repository URL when using a private GitHub repository. Includes placement of the personal access token in the URL for authentication.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/crates/sui-aws-orchestrator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"repository\": {\n  \"url\": \"http://[your_token]@github.com/mystenlabs/sui.git\",\n  \"commit\": \"main\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing absolute difference for u256 in Move\nDESCRIPTION: Calculates the absolute difference between two u256 values using a macro from the std::macros module.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-stdlib/docs/std/u256.md#2025-04-22_snippet_3\n\nLANGUAGE: Move\nCODE:\n```\npublic fun diff(x: u256, y: u256): u256 {\n    std::macros::num_diff!(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests in Rust\nDESCRIPTION: Shows how to structure unit tests in Rust, placing them in a separate module within the same file as the code being tested.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/documentation/coding_guidelines.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nstruct Foo {\n}\n\nimpl Foo {\n  pub fn magic_number() -> u8 {\n    42\n  }\n}\n\n#[cfg(test)]\nmod tests {\n  #test\n  fn verify_magic_number() {\n    assert_eq!(Foo::magic_number(), 42);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sui Upgrade Policy Publish Console Output\nDESCRIPTION: Complete console output showing a successful policy publish transaction, including transaction data, effects, gas costs, and dependencies.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/docs/content/concepts/sui-move-concepts/packages/custom-policies.mdx#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nUPDATING GIT DEPENDENCY https://github.com/MystenLabs/sui.git\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING policy\nSuccessfully verified dependencies on-chain against source.\nTransaction Digest: 5BzYX5iV6GP2RaSkZ7JPBRmListD5cEVC7REoKsNoCYc\n╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Transaction Data                                                                                             │\n├──────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ Sender: 0x65437300e280695a40df8cf524c7bca6ad62574cac3a52d3b085ad628c797241                                   │\n│ Gas Owner: 0x65437300e280695a40df8cf524c7bca6ad62574cac3a52d3b085ad628c797241                                │\n│ Gas Budget: 11773600 MIST                                                                                    │\n│ Gas Price: 1000 MIST                                                                                         │\n│ Gas Payment:                                                                                                 │\n│  ┌──                                                                                                         │\n│  │ ID: 0x057d71e1f7e8341c5f2b203ae5fcb33c024afcc7f1c8c264fe0fe74dddcd828c                                    │\n│  │ Version: 149516398                                                                                        │\n│  │ Digest: HRU5orvkMeouFUVf7MXUpJpXP6W7u8DBzhyMichbW8KP                                                      │\n│  └──                                                                                                         │\n│                                                                                                              │\n│ Transaction Kind: Programmable                                                                               │\n│ ╭──────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │\n│ │ Input Objects                                                                                            │ │\n│ ├──────────────────────────────────────────────────────────────────────────────────────────────────────────┤ │\n│ │ 0   Pure Arg: Type: address, Value: \\\"0x65437300e280695a40df8cf524c7bca6ad62574cac3a52d3b085ad628c797241\\\" │ │\n│ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │\n│ ╭─────────────────────────────────────────────────────────────────────────╮                                  │\n│ │ Commands                                                                │                                  │\n│ ├─────────────────────────────────────────────────────────────────────────┤                                  │\n│ │ 0  Publish:                                                             │                                  │\n│ │  ┌                                                                      │                                  │\n│ │  │ Dependencies:                                                        │                                  │\n│ │  │   0x0000000000000000000000000000000000000000000000000000000000000001 │                                  │\n│ │  │   0x0000000000000000000000000000000000000000000000000000000000000002 │                                  │\n│ │  └                                                                      │                                  │\n│ │                                                                         │                                  │\n│ │ 1  TransferObjects:                                                     │                                  │\n│ │  ┌                                                                      │                                  │\n│ │  │ Arguments:                                                           │                                  │\n│ │  │   Result 0                                                           │                                  │\n│ │  │ Address: Input  0                                                    │                                  │\n│ │  └                                                                      │                                  │\n│ ╰─────────────────────────────────────────────────────────────────────────╯                                  │\n│                                                                                                              │\n│ Signatures:                                                                                                  │\n│    ijPCo4IFqacqAN64UAaJR+J5YhE3+IiEhXA5eEJiI0LZo1y3+byq1WHb3lgU8HLLJTgp+Cuv5GYHsBN5tofYAA==                  │\n│                                                                                                              │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n╭───────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Transaction Effects                                                                               │\n├───────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ Digest: 5BzYX5iV6GP2RaSkZ7JPBRmListD5cEVC7REoKsNoCYc                                              │\n│ Status: Success                                                                                   │\n│ Executed Epoch: 589                                                                               │\n│                                                                                                   │\n│ Created Objects:                                                                                  │\n│  ┌──                                                                                              │\n│  │ ID: 0x4de927a10f97520311239cadb7159d4b893275bc74ab4e0af1b16c41ba8275a0                         │\n│  │ Owner: Account Address ( 0x65437300e280695a40df8cf524c7bca6ad62574cac3a52d3b085ad628c797241 )  │\n│  │ Version: 149516399                                                                             │\n│  │ Digest: HLSLcEb3S8t3Zb4cjjSw8dsYhExLyLJ3ParJt2fnoZUu                                           │\n│  └──                                                                                              │\n│  ┌──                                                                                              │\n│  │ ID: 0xa864e0122efbd1755c387c31bf4ce45c649548d2238c8fcffab4f77cfdab7c1a                         │\n│  │ Owner: Immutable                                                                               │\n│  │ Version: 1                                                                                     │\n│  │ Digest: C9YEPnbCs8dtMUTPrXaSNziXkLWSEnz2zaZsxp1rYYCk                                           │\n│  └──                                                                                              │\n│ Mutated Objects:                                                                                  │\n│  ┌──                                                                                              │\n│  │ ID: 0x057d71e1f7e8341c5f2b203ae5fcb33c024afcc7f1c8c264fe0fe74dddcd828c                         │\n│  │ Owner: Account Address ( 0x65437300e280695a40df8cf524c7bca6ad62574cac3a52d3b085ad628c797241 )  │\n│  │ Version: 149516399                                                                             │\n│  │ Digest: F4zEiy3eS1h9V2EfrV3WXWe8bktA28sbKxzNCqtTRK2T                                           │\n│  └──                                                                                              │\n│ Gas Object:                                                                                       │\n│  ┌──                                                                                              │\n│  │ ID: 0x057d71e1f7e8341c5f2b203ae5fcb33c024afcc7f1c8c264fe0fe74dddcd828c                         │\n│  │ Owner: Account Address ( 0x65437300e280695a40df8cf524c7bca6ad62574cac3a52d3b085ad628c797241 )  │\n│  │ Version: 149516399                                                                             │\n│  │ Digest: F4zEiy3eS1h9V2EfrV3WXWe8bktA28sbKxzNCqtTRK2T                                           │\n│  └──                                                                                              │\n│ Gas Cost Summary:                                                                                 │\n│    Storage Cost: 9773600 MIST                                                                     │\n│    Computation Cost: 1000000 MIST                                                                 │\n│    Storage Rebate: 978120 MIST                                                                    │\n│    Non-refundable Storage Fee: 9880 MIST                                                          │\n│                                                                                                   │\n│ Transaction Dependencies:                                                                         │\n│    F2edqX6W9HXU7KzVmfwv9fhGMB6fbjrFo3gVd73S4tK5                                                   │\n│    Gtwgse64nSVXhQvmqCpwCe5xJz9N4VypvEGJUy5DyG4e                                                   │\n╰───────────────────────────────────────────────────────────────────────────────────────────────────╯\n╭─────────────────────────────╮\n│ No transaction block events │\n╰─────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Becoming a Validator Candidate\nDESCRIPTION: Command to submit an on-chain transaction to become a validator candidate.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/nre/validator_tool.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$SUI_BINARY validator become-candidate {path-to}validator.info\n```\n\n----------------------------------------\n\nTITLE: Building Sui Project without Linting\nDESCRIPTION: Command to build a Sui project with linting disabled, which skips code style and quality checks to focus on compilation only.\nSOURCE: https://github.com/mystenlabs/sui/blob/main/external-crates/move/crates/move-cli/tests/build_tests/lint_flags/args.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbuild --no-lint\n```"
  }
]