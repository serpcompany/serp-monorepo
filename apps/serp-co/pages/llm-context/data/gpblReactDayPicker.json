[
  {
    "owner": "gpbl",
    "repo": "react-day-picker",
    "content": "TITLE: Implementing DayPicker with Inline Calendar Input\nDESCRIPTION: Shows how to create an input field bound to a DayPicker calendar component with inline display. Handles date selection, input synchronization, and month navigation. Uses date-fns for date parsing and formatting.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/input-fields.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useId, useState } from \"react\";\n\nimport { format, isValid, parse } from \"date-fns\";\nimport { DayPicker } from \"react-day-picker\";\n\n/** Render an input field bound to a DayPicker calendar. */\nexport function Input() {\n  const inputId = useId();\n\n  // Hold the month in state to control the calendar when the input changes\n  const [month, setMonth] = useState(new Date());\n\n  // Hold the selected date in state\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);\n\n  // Hold the input value in state\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleDayPickerSelect = (date: Date | undefined) => {\n    if (!date) {\n      setInputValue(\"\");\n      setSelectedDate(undefined);\n    } else {\n      setSelectedDate(date);\n      setMonth(date);\n      setInputValue(format(date, \"MM/dd/yyyy\"));\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value); // keep the input value in sync\n\n    const parsedDate = parse(e.target.value, \"MM/dd/yyyy\", new Date());\n\n    if (isValid(parsedDate)) {\n      setSelectedDate(parsedDate);\n      setMonth(parsedDate);\n    } else {\n      setSelectedDate(undefined);\n    }\n  };\n\n  return (\n    <div>\n      <label htmlFor={inputId}>\n        <strong>Date: </strong>\n      </label>\n      <input\n        style={{ fontSize: \"inherit\" }}\n        id={inputId}\n        type=\"text\"\n        value={inputValue}\n        placeholder=\"MM/dd/yyyy\"\n        onChange={handleInputChange}\n      />\n      <DayPicker\n        month={month}\n        onMonthChange={setMonth}\n        mode=\"single\"\n        selected={selectedDate}\n        onSelect={handleDayPickerSelect}\n        footer={`Selected: ${selectedDate?.toDateString()}`}\n      />\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing a Date and Time Picker with React DayPicker and HTML Time Input\nDESCRIPTION: A React component that combines DayPicker for date selection with an HTML time input for selecting time. It uses date-fns to handle date and time manipulation, maintaining a synchronized state between the date picker and time input.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/timepicker.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { ChangeEventHandler, useState } from \"react\";\n\nimport { setHours, setMinutes } from \"date-fns\";\nimport { DayPicker } from \"react-day-picker\";\n\nexport function InputTime() {\n  const [selected, setSelected] = useState<Date>();\n  const [timeValue, setTimeValue] = useState<string>(\"00:00\");\n\n  const handleTimeChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    const time = e.target.value;\n    if (!selected) {\n      setTimeValue(time);\n      return;\n    }\n    const [hours, minutes] = time.split(\":\").map((str) => parseInt(str, 10));\n    const newSelectedDate = setHours(setMinutes(selected, minutes), hours);\n    setSelected(newSelectedDate);\n    setTimeValue(time);\n  };\n\n  const handleDaySelect = (date: Date | undefined) => {\n    if (!timeValue || !date) {\n      setSelected(date);\n      return;\n    }\n    const [hours, minutes] = timeValue\n      .split(\":\")\n      .map((str) => parseInt(str, 10));\n    const newDate = new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      hours,\n      minutes\n    );\n    setSelected(newDate);\n  };\n\n  return (\n    <div>\n      <form style={{ marginBlockEnd: \"1em\" }}>\n        <label>\n          Set the time:{\" \"}\n          <input type=\"time\" value={timeValue} onChange={handleTimeChange} />\n        </label>\n      </form>\n      <DayPicker\n        mode=\"single\"\n        selected={selected}\n        onSelect={handleDaySelect}\n        footer={`Selected date: ${selected ? selected.toLocaleString() : \"none\"}`}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Single Date Picker in React\nDESCRIPTION: Example of a simple date picker component using react-day-picker with the single selection mode. It demonstrates importing the component and styles, setting up state for date selection, and rendering the DayPicker with basic configuration.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/start.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { DayPicker } from \"react-day-picker\";\nimport \"react-day-picker/style.css\";\n\nexport function MyDatePicker() {\n  const [selected, setSelected] = useState<Date>();\n\n  return (\n    <DayPicker\n      animate\n      mode=\"single\"\n      selected={selected}\n      onSelect={setSelected}\n      footer={\n        selected ? `Selected: ${selected.toLocaleDateString()}` : \"Pick a day.\"\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic React DayPicker Component\nDESCRIPTION: Example showing how to create a basic date picker component using React DayPicker. Demonstrates importing the component, setting up state management for date selection, and basic configuration using mode, selected and onSelect props.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/start.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { DayPicker } from \"react-day-picker\";\nimport \"react-day-picker/dist/style.css\";\n\nexport function MyDatePicker() {\n  const [selected, setSelected] = useState();\n  return <DayPicker mode=\"single\" selected={selected} onSelect={setSelected} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DayPicker with Range Mode\nDESCRIPTION: Configures DayPicker to enable selection of a continuous range of dates.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker mode=\"range\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Selections in DayPicker\nDESCRIPTION: Demonstrates how to customize the behavior of selection mode using the select and onSelect props in DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { DayPicker } from \"react-day-picker\";\n\nexport function App() {\n  const [selected, setSelected] = useState<Date[] | undefined>();\n  const handleSelect = (newSelected) => {\n    // Update the selected dates\n    setSelected(newSelected);\n  };\n  return (\n    <DayPicker mode=\"multiple\" selected={selected} onSelect={handleSelect} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Date Picker with React DayPicker\nDESCRIPTION: This snippet demonstrates how to create a simple date picker using the DayPicker component from react-day-picker. It includes state management for the selected date and displays the selection in the footer.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/intro.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DayPicker } from \"react-day-picker\";\nimport \"react-day-picker/style.css\";\n\nfunction MyDatePicker() {\n  const [selected, setSelected] = useState<Date>();\n\n  return (\n    <DayPicker\n      animate\n      mode=\"single\"\n      selected={selected}\n      onSelect={setSelected}\n      footer={\n        selected ? `Selected: ${selected.toLocaleDateString()}` : \"Pick a day.\"\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React DayPicker Implementation with Single Selection Mode\nDESCRIPTION: A simple example of implementing DayPicker with single date selection. It shows how to import the component and styles, set up state for the selected date, and render the component with appropriate props.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DayPicker } from \"react-day-picker\";\nimport \"react-day-picker/dist/style.css\";\n\nfunction MyDatePicker() {\n  const [selected, setSelected] = useState<Date>();\n  return <DayPicker mode=\"single\" selected={selected} onSelect={setSelected} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Date Picker Component with React DayPicker\nDESCRIPTION: Example code showing how to implement a simple date picker using the DayPicker component. It demonstrates setting up single date selection mode with state management and a custom footer that displays the selected date.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DayPicker } from \"react-day-picker\";\nimport \"react-day-picker/style.css\";\n\nfunction MyDatePicker() {\n  const [selected, setSelected] = useState<Date>();\n\n  return (\n    <DayPicker\n      mode=\"single\"\n      selected={selected}\n      onSelect={setSelected}\n      footer={\n        selected ? `Selected: ${selected.toLocaleDateString()}` : \"Pick a day.\"\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Date Selection in React DayPicker\nDESCRIPTION: Example of implementing multi-selection behavior (similar to mode=\"multiple\") using an array of dates in state. Includes functionality to add and remove dates from the selection and a reset button.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-selections.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { isSameDay } from \"date-fns\";\nimport { DayMouseEventHandler, DayPicker } from \"react-day-picker\";\n\nexport function CustomMultiple() {\n  const [value, setValue] = useState<Date[]>([]);\n\n  const handleDayClick: DayMouseEventHandler = (day, modifiers) => {\n    const newValue = [...value];\n    if (modifiers.selected) {\n      const index = value.findIndex((d) => isSameDay(day, d));\n      newValue.splice(index, 1);\n    } else {\n      newValue.push(day);\n    }\n    setValue(newValue);\n  };\n\n  const handleResetClick = () => setValue([]);\n\n  let footer = <>Please pick one or more days.</>;\n\n  if (value.length > 0)\n    footer = (\n      <>\n        You selected {value.length} days.{\" \"}\n        <button onClick={handleResetClick}>Reset</button>\n      </>\n    );\n\n  return (\n    <DayPicker\n      onDayClick={handleDayClick}\n      modifiers={{ selected: value }}\n      footer={footer}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Month Navigation\nDESCRIPTION: Demonstrates how to create a controlled month navigation with a 'Go to Today' button using React state management.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/navigation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { addMonths } from \"date-fns\";\nimport { DayPicker } from \"react-day-picker\";\n\nexport function Controlled() {\n  const today = new Date();\n  const nextMonth = addMonths(today, 1);\n\n  const [month, setMonth] = useState(nextMonth);\n\n  return (\n    <>\n      <DayPicker month={month} onMonthChange={setMonth} />\n      <button onClick={() => setMonth(today)}>Go to Today</button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Modal Date Picker Dialog with React DayPicker\nDESCRIPTION: This component implements a date picker as a modal dialog using the HTML dialog element for accessibility. It manages the dialog state, focus trapping, and body scroll behavior. The component provides bidirectional updates between the input field and the calendar, with proper date parsing and formatting.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/input-fields.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useId, useRef, useState } from \"react\";\n\nimport { format, isValid, parse } from \"date-fns\";\nimport { DayPicker } from \"react-day-picker\";\n\nexport function Dialog() {\n  const dialogRef = useRef<HTMLDialogElement>(null);\n  const dialogId = useId();\n  const headerId = useId();\n\n  // Hold the month in state to control the calendar when the input changes\n  const [month, setMonth] = useState(new Date());\n\n  // Hold the selected date in state\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);\n\n  // Hold the input value in state\n  const [inputValue, setInputValue] = useState(\"\");\n\n  // Hold the dialog visibility in state\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  // Function to toggle the dialog visibility\n  const toggleDialog = () => setIsDialogOpen(!isDialogOpen);\n\n  // Hook to handle the body scroll behavior and focus trapping.\n  useEffect(() => {\n    const handleBodyScroll = (isOpen: boolean) => {\n      document.body.style.overflow = isOpen ? \"hidden\" : \"\";\n    };\n    if (!dialogRef.current) return;\n    if (isDialogOpen) {\n      handleBodyScroll(true);\n      dialogRef.current.showModal();\n    } else {\n      handleBodyScroll(false);\n      dialogRef.current.close();\n    }\n    return () => {\n      handleBodyScroll(false);\n    };\n  }, [isDialogOpen]);\n\n  /**\n   * Function to handle the DayPicker select event: update the input value and\n   * the selected date, and set the month.\n   */\n  const handleDayPickerSelect = (date: Date) => {\n    if (!date) {\n      setInputValue(\"\");\n      setSelectedDate(undefined);\n    } else {\n      setSelectedDate(date);\n      setInputValue(format(date, \"MM/dd/yyyy\"));\n    }\n    dialogRef.current?.close();\n  };\n  /**\n   * Handle the input change event: parse the input value to a date, update the\n   * selected date and set the month.\n   */\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value); // keep the input value in sync\n\n    const parsedDate = parse(e.target.value, \"MM/dd/yyyy\", new Date());\n\n    if (isValid(parsedDate)) {\n      setSelectedDate(parsedDate);\n      setMonth(parsedDate);\n    } else {\n      setSelectedDate(undefined);\n    }\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"date-input\">\n        <strong>Pick a Date: </strong>\n      </label>\n      <input\n        style={{ fontSize: \"inherit\" }}\n        id=\"date-input\"\n        type=\"text\"\n        value={inputValue}\n        placeholder={\"MM/dd/yyyy\"}\n        onChange={handleInputChange}\n      />{\" \"}\n      <button\n        style={{ fontSize: \"inherit\" }}\n        onClick={toggleDialog}\n        aria-controls=\"dialog\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={isDialogOpen}\n        aria-label=\"Open calendar to choose booking date\"\n      >\n        📆\n      </button>\n      <p aria-live=\"assertive\" aria-atomic=\"true\">\n        {selectedDate !== undefined\n          ? selectedDate.toDateString()\n          : \"Please type or pick a date\"}\n      </p>\n      <dialog\n        role=\"dialog\"\n        ref={dialogRef}\n        id={dialogId}\n        aria-modal\n        aria-labelledby={headerId}\n        onClose={() => setIsDialogOpen(false)}\n      >\n        <DayPicker\n          month={month}\n          onMonthChange={setMonth}\n          initialFocus\n          mode=\"single\"\n          selected={selectedDate}\n          onSelect={handleDayPickerSelect}\n          footer={\n            <p aria-live=\"assertive\" aria-atomic=\"true\">\n              {selectedDate !== undefined && (\n                <>Selected: {selectedDate.toDateString()}</>\n              )}\n            </p>\n          }\n        />\n      </dialog>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ISO Week Dates in react-day-picker\nDESCRIPTION: Sets the ISOWeek prop to enable ISO 8601 week date formatting in the calendar, which affects week numbers and calculation.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/localization.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker ISOWeek />\n```\n\n----------------------------------------\n\nTITLE: Initializing DayPicker with Single Mode in React\nDESCRIPTION: Sets up DayPicker component in single selection mode, allowing only one day to be selected at a time.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker mode=\"single\" />\n```\n\n----------------------------------------\n\nTITLE: Single Mode Selection in React DayPicker\nDESCRIPTION: Basic implementation of single date selection mode. Uses useState hook to manage the selected date state.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/selection-modes.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { DayPicker } from \"react-day-picker\";\n\nexport function App() {\n  const initiallySelectedDate = new Date();\n  const [selectedDate, setSelectedDate] = useState(initiallySelectedDate);\n  return (\n    <DayPicker\n      mode=\"single\"\n      selected={selectedDate}\n      onSelect={setSelectedDate}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing React Day Picker with Tailwind CSS Classes\nDESCRIPTION: Example showing how to customize the React Day Picker component using Tailwind CSS classes. Demonstrates using getDefaultClassNames() to extend default styles and applying custom Tailwind classes for today's date, selected day, root element, and navigation chevrons.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/styling.mdx#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DayPicker, getDefaultClassNames } from \"react-day-picker\";\n\nexport function MyCalendar() {\n  const defaultClassNames = getDefaultClassNames();\n  return (\n    <DayPicker\n      mode=\"single\"\n      classNames={{\n        today: `border-amber-500`, // Add a border to today's date\n        selected: `bg-amber-500 border-amber-500 text-white`, // Highlight the selected day\n        root: `${defaultClassNames.root} shadow-lg p-5`, // Add a shadow to the root element\n        chevron: `${defaultClassNames.chevron} fill-amber-500` // Change the color of the chevron\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DayPicker with Multiple Mode\nDESCRIPTION: Sets up DayPicker to allow selection of multiple individual days.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker mode=\"multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Field with Inline DayPicker Calendar in React\nDESCRIPTION: This component creates an input field bound to a DayPicker calendar. It manages state for the selected date, input value, and current month. The implementation handles bidirectional updates between the input and calendar, with proper date parsing and formatting using date-fns.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/input-fields.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useId, useState } from \"react\";\n\nimport { format, isValid, parse } from \"date-fns\";\nimport { DayPicker } from \"react-day-picker\";\n\n/** Render an input field bound to a DayPicker calendar. */\nexport function Input() {\n  const inputId = useId();\n\n  // Hold the month in state to control the calendar when the input changes\n  const [month, setMonth] = useState(new Date());\n\n  // Hold the selected date in state\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);\n\n  // Hold the input value in state\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleDayPickerSelect = (date: Date | undefined) => {\n    if (!date) {\n      setInputValue(\"\");\n      setSelectedDate(undefined);\n    } else {\n      setSelectedDate(date);\n      setMonth(date);\n      setInputValue(format(date, \"MM/dd/yyyy\"));\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value); // keep the input value in sync\n\n    const parsedDate = parse(e.target.value, \"MM/dd/yyyy\", new Date());\n\n    if (isValid(parsedDate)) {\n      setSelectedDate(parsedDate);\n      setMonth(parsedDate);\n    } else {\n      setSelectedDate(undefined);\n    }\n  };\n\n  return (\n    <div>\n      <label htmlFor={inputId}>\n        <strong>Date: </strong>\n      </label>\n      <input\n        style={{ fontSize: \"inherit\" }}\n        id={inputId}\n        type=\"text\"\n        value={inputValue}\n        placeholder=\"MM/dd/yyyy\"\n        onChange={handleInputChange}\n      />\n      <DayPicker\n        month={month}\n        onMonthChange={setMonth}\n        mode=\"single\"\n        selected={selectedDate}\n        onSelect={handleDayPickerSelect}\n        footer={\n          <p aria-live=\"assertive\" aria-atomic=\"true\">\n            Selected: {selectedDate?.toDateString()}\n          </p>\n        }\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Months Display\nDESCRIPTION: Shows how to configure the calendar to display multiple months simultaneously.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/customization.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker numberOfMonths={2} />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Required Selection in DayPicker\nDESCRIPTION: Configures DayPicker to require a selection, preventing the user from unselecting the chosen date.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker mode=\"single\" required />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Components in React DayPicker\nDESCRIPTION: This snippet demonstrates how to pass custom components to the DayPicker component using the components prop. It shows how to override the Day and MonthGrid components with custom implementations.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-components.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker\n  components={{\n    Day: CustomDaycell,\n    MonthGrid: CustomMonthGrid\n    // etc\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Focus for React Day Picker\nDESCRIPTION: A code example showing how to enable auto-focus on a React Day Picker component in single selection mode. The autoFocus prop ensures the calendar receives focus when it opens, improving keyboard navigation accessibility.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/accessibility.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker mode=\"single\" autoFocus />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode for DayPicker\nDESCRIPTION: CSS code showing how to implement dark mode styling for DayPicker by switching CSS variables.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/styling.mdx#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n[data-theme=\"dark\"] .rdp,\n.dark .rdp {\n  --rdp-accent-color: var(--rdp-accent-color-dark);\n  --rdp-background-color: var(--rdp-background-color-dark);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Paged Navigation in React DayPicker\nDESCRIPTION: Shows how to use paged navigation with multiple months, jumping by the specified number of months at a time.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/customization.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker numberOfMonths={2} pagedNavigation />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Modifiers in React DayPicker\nDESCRIPTION: This snippet demonstrates how to use custom modifiers in DayPicker to mark specific days as 'booked' and handle clicks on those days. It uses the 'modifiers' prop to define booked days and the 'onDayClick' event handler to check if a clicked day is booked.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-modifiers.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker\n  modifiers={{\n    booked: [\n      new Date(2022, 5, 8),\n      new Date(2022, 5, 9),\n      new Date(2022, 5, 10),\n      { from: new Date(2022, 5, 15), to: new Date(2022, 5, 20) }\n    ]\n  }}\n  onDayClick={(date, modifiers) => {\n    if (modifiers.booked) {\n      alert(\"This day is already booked.\");\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Range Selection in React DayPicker\nDESCRIPTION: Implementation of date range selection allowing users to select a continuous range of dates.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/selection-modes.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { addDays } from \"date-fns\";\nimport { DateRange, DayPicker } from \"react-day-picker\";\n\nexport function Range() {\n  const initialRange: DateRange = {\n    from: new Date(),\n    to: addDays(new Date(), 4)\n  };\n\n  const [range, setRange] = useState<DateRange | undefined>(initialRange);\n\n  return <DayPicker mode=\"range\" selected={range} onSelect={setRange} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Persian Calendar in react-day-picker\nDESCRIPTION: Shows how to import the Persian calendar version of DayPicker to display dates according to the Solar Hijri calendar system.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/localization.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n- import { DayPicker } from 'react-day-picker';\n+ import { DayPicker } from 'react-day-picker/persian';\n```\n\n----------------------------------------\n\nTITLE: Paged Navigation with Multiple Months\nDESCRIPTION: Implementation of paged navigation when displaying multiple months.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/customization.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker numberOfMonths={2} pagedNavigation />\n```\n\n----------------------------------------\n\nTITLE: Implementing Week Selection in React DayPicker\nDESCRIPTION: Example of how to select an entire week when a day is clicked using startOfWeek and endOfWeek functions from date-fns. The selected week is stored in state and passed to the modifiers prop to highlight the selected range.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-selections.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from \"react\";\n\nimport { endOfWeek, startOfWeek } from \"date-fns\";\nimport { DateRange, DayPicker, isDateInRange } from \"react-day-picker\";\n\n/** Select the whole week when the day is clicked. */\nexport function CustomWeek() {\n  const [selectedWeek, setSelectedWeek] = useState<DateRange | undefined>();\n\n  return (\n    <DayPicker\n      showWeekNumber\n      showOutsideDays\n      modifiers={{\n        selected: selectedWeek,\n        range_start: selectedWeek?.from,\n        range_end: selectedWeek?.to,\n        range_middle: (date: Date) =>\n          selectedWeek\n            ? isDateInRange(date, selectedWeek, { excludeEnds: true })\n            : false\n      }}\n      onDayClick={(day, modifiers) => {\n        if (modifiers.selected) {\n          setSelectedWeek(undefined); // clear the selection if the day is already selected\n          return;\n        }\n        setSelectedWeek({\n          from: startOfWeek(day),\n          to: endOfWeek(day)\n        });\n      }}\n      footer={\n        selectedWeek &&\n        `Week from ${selectedWeek?.from?.toLocaleDateString()} to\n            ${selectedWeek?.to?.toLocaleDateString()}`\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Dates in DayPicker\nDESCRIPTION: Demonstrates how to disable specific dates (weekends in this case) in DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker mode=\"range\" disabled={{ dayOfWeek: [0, 6] }} />\n```\n\n----------------------------------------\n\nTITLE: Disabling Past Dates in DayPicker\nDESCRIPTION: Shows how to disable all dates before the current date in DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker mode=\"single\" disabled={{ before: new Date() }} />\n```\n\n----------------------------------------\n\nTITLE: Custom Week Number Click Handler\nDESCRIPTION: Example of implementing a custom click handler for week numbers using custom components.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/customization.mdx#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker\n  showWeekNumber\n  components={{\n    WeekNumber: (props) => (\n      <button onClick={() => alert(`Week ${props.weekNumber}`)}>\n        {props.weekNumber}\n      </button>\n    )\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Selections in DayPicker\nDESCRIPTION: Demonstrates how to control the selected date in DayPicker using state and the onSelect callback.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function App() {\n  const [selected, setSelected] = React.useState<Date | undefined>();\n  return <DayPicker mode=\"single\" selected={selected} onSelect={setSelected} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Multiple Selections in DayPicker\nDESCRIPTION: Shows how to manage multiple selected dates using state and the onSelect callback in DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport function App() {\n  const [selected, setSelected] = React.useState<Date[] | undefined>();\n\n  return (\n    <DayPicker mode=\"multiple\" selected={selected} onSelect={setSelected} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spanish Locale in React DayPicker\nDESCRIPTION: Example showing how to configure React DayPicker to use Spanish localization by importing and applying the Spanish locale from date-fns.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/localization.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { es } from \"date-fns/locale\";\n\n<DayPicker locale={es} />; // Set the locale to Spanish\n```\n\n----------------------------------------\n\nTITLE: Enabling Month Transition Animation in react-day-picker\nDESCRIPTION: Shows how to enable animated transitions between months using the animate prop. This simple configuration uses the default animation settings.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/navigation.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker animate />\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Day Selection in React DayPicker\nDESCRIPTION: This example demonstrates how to implement multiple day selection in React DayPicker. It manages an array of selected dates with useState and provides functionality to add, remove, and reset selections.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/custom-selections.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { isSameDay } from \"date-fns\";\nimport { DayMouseEventHandler, DayPicker } from \"react-day-picker\";\n\nexport function CustomMultiple() {\n  const [value, setValue] = useState<Date[]>([]);\n\n  const handleDayClick: DayMouseEventHandler = (day, modifiers) => {\n    const newValue = [...value];\n    if (modifiers.selected) {\n      const index = value.findIndex((d) => isSameDay(day, d));\n      newValue.splice(index, 1);\n    } else {\n      newValue.push(day);\n    }\n    setValue(newValue);\n  };\n\n  const handleResetClick = () => setValue([]);\n\n  let footer = <>Please pick one or more days.</>;\n\n  if (value.length > 0)\n    footer = (\n      <>\n        You selected {value.length} days.{\" \"}\n        <button onClick={handleResetClick}>Reset</button>\n      </>\n    );\n\n  return (\n    <DayPicker\n      onDayClick={handleDayClick}\n      modifiers={{ selected: value }}\n      footer={footer}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Dates in React DayPicker\nDESCRIPTION: Example of disabling specific days (weekends) in the DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/selection-modes.mdx#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker\n  mode=\"single\"\n  disabled={{ daysOfWeek: [0, 6] }} // Disable Sundays and Saturdays\n/>\n```\n\n----------------------------------------\n\nTITLE: Range Selection with Min/Max in React DayPicker\nDESCRIPTION: Range selection with minimum and maximum limits on the number of selectable dates.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/selection-modes.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { DateRange, DayPicker } from \"react-day-picker\";\n\nexport function RangeMinMax() {\n  const [range, setRange] = useState<DateRange | undefined>();\n\n  return (\n    <DayPicker\n      defaultMonth={new Date(2022, 8)}\n      mode=\"range\"\n      min={3}\n      max={6}\n      selected={range}\n      onSelect={setRange}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Date Selection in React DayPicker\nDESCRIPTION: Example of implementing single date selection behavior (similar to mode=\"single\") using custom handlers. The component maintains a selected date in state and toggles selection when a day is clicked.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-selections.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { DayPicker, DayPickerProps } from \"react-day-picker\";\n\nexport function CustomSingle() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>();\n\n  const modifiers: DayPickerProps[\"modifiers\"] = {};\n  if (selectedDate) {\n    modifiers.selected = selectedDate;\n  }\n  return (\n    <DayPicker\n      modifiers={modifiers}\n      onDayClick={(day, modifiers) => {\n        if (modifiers.selected) {\n          setSelectedDate(undefined);\n        } else {\n          setSelectedDate(day);\n        }\n      }}\n      footer={selectedDate && `You selected ${selectedDate.toDateString()}`}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DayPicker with Dialog Modal\nDESCRIPTION: Demonstrates implementation of DayPicker within a modal dialog using HTML dialog element. Includes accessibility features, focus management, and body scroll handling. Uses date-fns for date operations.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/input-fields.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useId, useRef, useState } from \"react\";\n\nimport { format, isValid, parse } from \"date-fns\";\nimport { DayPicker } from \"react-day-picker\";\n\nexport function Dialog() {\n  const dialogRef = useRef<HTMLDialogElement>(null);\n  const dialogId = useId();\n  const headerId = useId();\n\n  // Hold the month in state to control the calendar when the input changes\n  const [month, setMonth] = useState(new Date());\n\n  // Hold the selected date in state\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);\n\n  // Hold the input value in state\n  const [inputValue, setInputValue] = useState(\"\");\n\n  // Hold the dialog visibility in state\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  // Function to toggle the dialog visibility\n  const toggleDialog = () => setIsDialogOpen(!isDialogOpen);\n\n  // Hook to handle the body scroll behavior and focus trapping.\n  useEffect(() => {\n    const handleBodyScroll = (isOpen: boolean) => {\n      document.body.style.overflow = isOpen ? \"hidden\" : \"\";\n    };\n    if (!dialogRef.current) return;\n    if (isDialogOpen) {\n      handleBodyScroll(true);\n      dialogRef.current.showModal();\n    } else {\n      handleBodyScroll(false);\n      dialogRef.current.close();\n    }\n    return () => {\n      handleBodyScroll(false);\n    };\n  }, [isDialogOpen]);\n\n  const handleDayPickerSelect = (date: Date) => {\n    if (!date) {\n      setInputValue(\"\");\n      setSelectedDate(undefined);\n    } else {\n      setSelectedDate(date);\n      setInputValue(format(date, \"MM/dd/yyyy\"));\n    }\n    dialogRef.current?.close();\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value); // keep the input value in sync\n\n    const parsedDate = parse(e.target.value, \"MM/dd/yyyy\", new Date());\n\n    if (isValid(parsedDate)) {\n      setSelectedDate(parsedDate);\n      setMonth(parsedDate);\n    } else {\n      setSelectedDate(undefined);\n    }\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"date-input\">\n        <strong>Pick a Date: </strong>\n      </label>\n      <input\n        style={{ fontSize: \"inherit\" }}\n        id=\"date-input\"\n        type=\"text\"\n        value={inputValue}\n        placeholder={\"MM/dd/yyyy\"}\n        onChange={handleInputChange}\n      />{\" \"}\n      <button\n        style={{ fontSize: \"inherit\" }}\n        onClick={toggleDialog}\n        aria-controls=\"dialog\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={isDialogOpen}\n        aria-label=\"Open calendar to choose booking date\"\n      >\n        📆\n      </button>\n      <p aria-live=\"assertive\" aria-atomic=\"true\">\n        {selectedDate !== undefined\n          ? selectedDate.toDateString()\n          : \"Please type or pick a date\"}\n      </p>\n      <dialog\n        role=\"dialog\"\n        ref={dialogRef}\n        id={dialogId}\n        aria-modal\n        aria-labelledby={headerId}\n        onClose={() => setIsDialogOpen(false)}\n      >\n        <DayPicker\n          month={month}\n          onMonthChange={setMonth}\n          autoFocus\n          mode=\"single\"\n          selected={selectedDate}\n          onSelect={handleDayPickerSelect}\n          footer={\n            selectedDate !== undefined &&\n            `Selected: ${selectedDate.toDateString()}`\n          }\n        />\n      </dialog>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Persian Calendar with English Locale in react-day-picker\nDESCRIPTION: Customizes the Persian calendar to use English (US) locale and Western Arabic numerals instead of the default Farsi settings.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/localization.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DayPicker, enUS } from \"react-day-picker/persian\";\n\nexport function PersianEn() {\n  return <DayPicker locale={enUS} numerals=\"latn\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-Zoned Date Selection in React Day Picker\nDESCRIPTION: Example of implementing a date picker with time zone support using TZDate object. Shows how to handle date selection while maintaining time zone consistency.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/time-zone.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DayPicker, TZDate } from \"react-day-picker\";\n\nexport function TimeZone() {\n  const timeZone = \"America/New_York\";\n  const [selected, setSelected] = useState<Date | undefined>(\n    new TZDate(2024, 12, 10, timeZone) // Make sure you use `TZDate` instead of `Date`\n  );\n  return (\n    <DayPicker\n      mode=\"single\"\n      timeZone={timeZone}\n      selected={selected}\n      onSelect={setSelected}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Navigation Controls in react-day-picker\nDESCRIPTION: Demonstrates how to completely hide the navigation bar using the hideNavigation prop. This example also shows using the captionLayout=\"dropdown\" to provide an alternative navigation method.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/navigation.mdx#2025-04-18_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker hideNavigation captionLayout=\"dropdown\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Time Zone Configuration in React Day Picker\nDESCRIPTION: Examples of setting different time zones using the timeZone prop in DayPicker component. Shows usage of UTC, IANA time zone identifiers, and UTC offset formats.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/time-zone.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker timeZone=\"UTC\" /> // Use Coordinated Universal Time\n<DayPicker timeZone=\"Pacific/Kiritimati\" /> // Use Line Islands Time\n<DayPicker timeZone=\"+02:00\" /> // Use UTC+2\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Persian Calendar in react-day-picker\nDESCRIPTION: Uses the getDateLib function to format dates according to the Persian calendar while maintaining Gregorian date selection.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/localization.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DayPicker, getDateLib } from \"react-day-picker/persian\";\n\nexport function PersianCalendar() {\n  const [selected, setSelected] = React.useState(new Date());\n  const dateLib = getDateLib();\n  return (\n    <DayPicker\n      mode=\"single\"\n      selected={selected}\n      required\n      onSelect={setSelected}\n      footer={`Selected: ${dateLib.format(selected)}`}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling US Broadcast Calendar in react-day-picker\nDESCRIPTION: Sets the broadcastCalendar prop to switch to the US Broadcast Calendar format where weeks start on Monday and each month has either 28 or 35 days.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/localization.mdx#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker broadcastCalendar />\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Formatting in React DayPicker\nDESCRIPTION: This example shows how to customize the date formatting in the DayPicker component. It uses the 'formatters' prop to provide a custom function for formatting the caption of the month.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/translation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { format } from \"date-fns\";\n\n<DayPicker\n  formatters={{\n    formatCaption: (date, options) => format(date, \"LLLL yyyy\", options)\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Caption Component with Navigation\nDESCRIPTION: Creates a custom Caption component with next/previous buttons for month navigation. Uses the useNavigation hook to navigate between months and formats the display month.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/custom-components.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { format } from \"date-fns\";\nimport { CaptionProps, DayPicker, useNavigation } from \"react-day-picker\";\n\nfunction CustomCaptionComponent(props: CaptionProps) {\n  const { goToMonth, nextMonth, previousMonth } = useNavigation();\n  return (\n    <h2>\n      {format(props.displayMonth, \"MMM yyy\")}\n      <button\n        disabled={!previousMonth}\n        onClick={() => previousMonth && goToMonth(previousMonth)}\n      >\n        Previous\n      </button>\n      <button\n        disabled={!nextMonth}\n        onClick={() => nextMonth && goToMonth(nextMonth)}\n      >\n        Next\n      </button>\n    </h2>\n  );\n}\n\nexport function CustomCaption() {\n  return (\n    <DayPicker\n      components={{\n        Caption: CustomCaptionComponent\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Today Button with react-day-picker\nDESCRIPTION: Shows how to implement a \"Go to Today\" button that navigates to the current month when clicked. Uses the controlled month pattern with useState and date-fns for date manipulation.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/navigation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { addMonths } from \"date-fns\";\nimport { DayPicker } from \"react-day-picker\";\n\nexport function Controlled() {\n  const today = new Date();\n  const nextMonth = addMonths(today, 1);\n\n  const [month, setMonth] = useState(nextMonth);\n\n  return (\n    <>\n      <DayPicker month={month} onMonthChange={setMonth} />\n      <button onClick={() => setMonth(today)}>Go to Today</button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Devanagari Numerals for Hindi Localization in React DayPicker\nDESCRIPTION: This snippet demonstrates how to use Devanagari numerals for Hindi localization in the DayPicker component. It sets the 'numerals' prop to 'deva' and uses the Hindi locale.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/translation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { hi } from \"date-fns/locale/hi\";\n\n<DayPicker numerals=\"deva\" locale={hi} />;\n```\n\n----------------------------------------\n\nTITLE: Excluding Disabled Dates from Range Selection\nDESCRIPTION: Configures DayPicker to exclude disabled dates from range selection and reset the range if a disabled date is selected.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker\n  mode=\"range\"\n  // Disable weekends\n  disabled={{ dayOfWeek: [0, 6] }}\n  // Reset range when a disabled date is included\n  excludeDisabled\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining DayPickerSingleProps Interface in TypeScript\nDESCRIPTION: This code snippet defines the DayPickerSingleProps interface, which extends DayPickerBase and includes various optional properties for configuring the DayPicker component in single selection mode.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerSingleProps.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DayPickerSingleProps extends DayPickerBase {\n  ISOWeek?: boolean;\n  captionLayout?: CaptionLayout;\n  className?: string;\n  classNames?: Partial<StyledElement<string>>;\n  components?: CustomComponents;\n  defaultMonth?: Date;\n  dir?: string;\n  disableNavigation?: boolean;\n  disabled?: Matcher | Matcher[];\n  firstWeekContainsDate?: 1 | 4;\n  fixedWeeks?: boolean;\n  footer?: ReactNode;\n  formatters?: Partial<Formatters>;\n  fromDate?: Date;\n  fromMonth?: Date;\n  fromYear?: number;\n  hidden?: Matcher | Matcher[];\n  hideHead?: boolean;\n  id?: string;\n  initialFocus?: boolean;\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Required Single Selection in React DayPicker\nDESCRIPTION: Implementation of single date selection with required prop to prevent deselection.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/selection-modes.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker\n  mode=\"single\"\n  selected={selectedDate}\n  onSelect={setSelectedDate}\n  required // A date must be selected\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Week Start Day in React DayPicker\nDESCRIPTION: Demonstrates how to set a custom start day for the week using the weekStartsOn prop.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/localization.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker weekStartsOn={0} />\n```\n\n----------------------------------------\n\nTITLE: Setting RTL Direction in React DayPicker\nDESCRIPTION: Demonstrates how to configure right-to-left text direction with Arabic locale.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/localization.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { arSA } from \"date-fns/locale\";\n\n<DayPicker locale={arSA} dir=\"rtl\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing light/dark mode for DayPicker\nDESCRIPTION: Shows how to create a light and dark mode theme for DayPicker by setting different accent colors based on the current theme.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/styling.mdx#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.rdp-root {\n  --rdp-accent-color: blue; /* Use blue as the accent color. */\n}\n[data-theme=\"dark\"] .rdp-root {\n  --rdp-accent-color: yellow; /* Use yellow as the accent color in dark mode. */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Select Dropdown Component with React Day Picker\nDESCRIPTION: Creates a custom dropdown component that integrates with React Day Picker for date selection. The implementation includes two main components: CustomSelectDropdown for handling the select functionality and CustomDropdown for integrating with DayPicker. Uses shadcn/ui's Select component structure for styling and functionality.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-components.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { DayButtonProps, DayPicker } from \"react-day-picker\";\n\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\n\nexport function CustomSelectDropdown(props: DropdownProps) {\n  const { options, value, onChange } = props;\n\n  const handleValueChange = (newValue: string) => {\n    if (onChange) {\n      const syntheticEvent = {\n        target: {\n          value: newValue\n        }\n      } as React.ChangeEvent<HTMLSelectElement>;\n\n      onChange(syntheticEvent);\n    }\n  };\n\n  return (\n    <Select value={value?.toString()} onValueChange={handleValueChange}>\n      <SelectTrigger>\n        <SelectValue />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>\n          {options?.map((option) => (\n            <SelectItem\n              key={option.value}\n              value={option.value.toString()}\n              disabled={option.disabled}\n            >\n              {option.label}\n            </SelectItem>\n          ))}\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  );\n}\n\nexport function CustomDropdown() {\n  const [selected, setSelected] = useState<Date | undefined>();\n\n  return (\n    <DayPicker\n      captionLayout=\"dropdown\"\n      components={{ Dropdown: CustomSelectDropdown }}\n      mode=\"single\"\n      selected={selected}\n      onSelect={setSelected}\n      footer={\n        selected\n          ? `Selected: ${selected.toLocaleDateString()}`\n          : \"Pick a day.\"\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Month with State in react-day-picker\nDESCRIPTION: Demonstrates how to programmatically control the displayed month using React state. This example creates a controlled component that starts from October 2024 and updates when the month changes.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/navigation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { DayPicker } from \"react-day-picker\";\n\nexport function Controlled() {\n  const [month, setMonth] = useState(new Date(2024, 9)); // Start from October 2024\n  return <DayPicker month={month} onMonthChange={setMonth} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Week Numbers in React DayPicker\nDESCRIPTION: Demonstrates how to show week numbers and handle click events on them using 'showWeekNumber' and 'onWeekNumberClick' props.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/customization.mdx#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker showWeekNumber onWeekNumberClick={setWeekNumber} />\n```\n\n----------------------------------------\n\nTITLE: Customizing disabled days with custom class names\nDESCRIPTION: Demonstrates how to apply a custom class name specifically to disabled days in the DayPicker calendar.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/styling.mdx#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<DayPicker classNames={{ disabled: \"my-disabled_style\" }} />\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection with Min/Max in React DayPicker\nDESCRIPTION: Multiple date selection with minimum and maximum limits on selectable dates.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/selection-modes.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { DayPicker } from \"react-day-picker\";\n\nexport function App() {\n  const initiallySelectedDates = [new Date(), addDays(new Date(), 1)];\n  const [selected, setSelected] = useState(initiallySelectedDates);\n  return (\n    <DayPicker\n      mode=\"multiple\"\n      min={2} // At least 2 dates must be selected\n      max={5} // Maximum 5 dates can be selected\n      selected={selected}\n      onSelect={(dates) => setSelected(dates ?? [])}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reduced Motion for Accessibility in react-day-picker\nDESCRIPTION: Shows how to respect user preference for reduced motion by disabling animations with a media query. This improves accessibility for users who may be sensitive to motion.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/navigation.mdx#2025-04-18_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@media (prefers-reduced-motion: reduce) {\n  .custom-animate {\n    --rdp-animation_duration: 0s;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Month Navigation\nDESCRIPTION: Demonstrates how to disable month navigation in the DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/navigation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker disableNavigation />\n```\n\n----------------------------------------\n\nTITLE: Customizing Animation with CSS Variables in react-day-picker\nDESCRIPTION: Demonstrates how to customize the month transition animation duration and timing function using CSS variables. Creates a custom class that modifies the animation properties.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/navigation.mdx#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.custom-animate {\n  --rdp-animation_duration: 0.1s; /* Change the duration of the transition. */\n  --rdp-animation_timing: ease-in; /* Choose a different timing function. */\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker animate className=\"custom-animate\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DayButton with Double-Click in React DayPicker\nDESCRIPTION: This example demonstrates how to create a custom DayButton component that selects days on double-click instead of single-click. It uses React context to manage the selected date state and overrides the default click behavior.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-components.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\n\nimport { DayButtonProps, DayPicker } from \"react-day-picker\";\n\nconst SelectedDateContext = React.createContext<{\n  selected?: Date;\n  setSelected?: React.Dispatch<React.SetStateAction<Date | undefined>>;\n}>({});\n\nfunction DayButton(props: DayButtonProps) {\n  const { day, modifiers, ...buttonProps } = props;\n\n  const { setSelected } = React.use(SelectedDateContext);\n  return (\n    <button\n      {...buttonProps}\n      onClick={() => setSelected?.(undefined)}\n      onDoubleClick={() => setSelected?.(day.date)}\n    />\n  );\n}\n\nexport function CustomDayButton() {\n  const [selected, setSelected] = React.useState<Date>();\n\n  return (\n    <SelectedDateContext.Provider value={{ selected, setSelected }}>\n      <DayPicker\n        mode=\"single\"\n        selected={selected}\n        onSelect={setSelected}\n        components={{\n          DayButton\n        }}\n        footer={selected?.toDateString() || \"Double click to select a date\"}\n      />\n    </SelectedDateContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying custom class names to DayPicker components\nDESCRIPTION: Shows how to override the default class names of specific DayPicker elements with custom class names using the classNames prop.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/styling.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker classNames={{ root: \"my-calendar\" }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Multiple Selection in DayPicker\nDESCRIPTION: Sets up DayPicker to require multiple selections, preventing deselection of chosen dates.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker mode=\"multiple\" required selected={[new Date()]} />\n```\n\n----------------------------------------\n\nTITLE: Customizing DayPicker CSS Variables\nDESCRIPTION: Example of customizing DayPicker appearance by overriding default CSS variables.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/styling.mdx#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --rdp-accent-color: indigo;\n  --rdp-background-color: gray;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useDayPicker Hook in React DayPicker\nDESCRIPTION: This snippet shows how to import and use the useDayPicker hook to access the DayPicker context in a custom component. The hook provides access to the current state and functions of the calendar.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-components.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { useDayPicker } from \"react-day-picker\";\n```\n\n----------------------------------------\n\nTITLE: Using CSS modules with DayPicker\nDESCRIPTION: Demonstrates how to use CSS modules with DayPicker by importing the style.module.css file and passing the imported styles to the classNames prop.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/styling.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DayPicker } from \"react-day-picker\";\nimport classNames from \"react-day-picker/style.module.css\";\n\nconsole.log(classNames); // Output the class names as parsed by CSS modules.\n\nexport function MyDatePicker() {\n  return <DayPicker mode=\"single\" classNames={classNames} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Selected State Control in React Day Picker\nDESCRIPTION: Code changes required to implement controlled state for the selected prop using useState hook\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/upgrading.mdx#2025-04-18_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n+ const [selected, setSelected] = useState<Date | undefined>(undefined);\n  <DayPicker\n    mode=\"single\"\n    selected={selected} // controlled prop\n+   onSelect={setSelected} // update the selected date\n  />\n```\n\n----------------------------------------\n\nTITLE: Customizing ARIA Labels for Italian Localization in React DayPicker\nDESCRIPTION: This snippet demonstrates how to customize ARIA labels for the DayPicker component in Italian. It uses the 'labels' prop to provide translated versions of various UI elements and date formats.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/translation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { format } from \"date-fns\";\nimport { it } from \"react-day-picker/locale\";\n\nfunction ItalianLabels() {\n  return (\n    <DayPicker\n      locale={it}\n      labels={{\n        labelDayButton: (date, { today, selected }) => {\n          let label = format(date, \"PPPP\", { locale: it });\n          if (today) label = `Oggi, ${label}`;\n          if (selected) label = `${label}, selezionato`;\n          return label;\n        },\n        labelWeekNumber: (weekNumber) => `Settimana ${weekNumber}`,\n        labelNext: () => \"Prossimo mese\",\n        labelPrevious: () => \"Mese precedente\",\n        labelMonthDropdown: () => \"Seleziona il mese\",\n        labelYearDropdown: () => \"Seleziona l'anno\"\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Modifiers with CSS Classes in React DayPicker\nDESCRIPTION: This example shows how to apply custom CSS classes to days with specific modifiers in DayPicker. It defines 'booked' days and applies a custom class to them.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-modifiers.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst bookedDays = [\n  new Date(2021, 5, 8),\n  new Date(2021, 5, 9),\n  new Date(2021, 5, 11)\n];\nexport function ModifiersWithClassnames() {\n  return (\n    <DayPicker\n      defaultMonth={bookedDays[0]}\n      modifiers={{\n        booked: bookedDays\n      }}\n      modifiersClassNames={{\n        booked: \"my-booked-class\"\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Day Content Component in React DayPicker\nDESCRIPTION: Creates a custom DayContent component that replaces the 19th day of the month with a party emoji. This example demonstrates how to create a custom component that can be passed to DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/custom-components.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type DayContentProps } from \"react-day-picker\";\n\n/** Replace the 19th with an emoji */\nexport function CustomDayContent(props: DayContentProps) {\n  return (\n    <span style={{ position: \"relative\", overflow: \"visible\" }}>\n      {props.date.getDate() === 19 ? ` 🎉` : props.date.getDate()}\n    </span>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useNavigation Hook in React DayPicker\nDESCRIPTION: A React hook that returns NavigationContextValue to enable month and year navigation within DayPicker components. This hook is designed for use in internal or custom components and provides access to navigation state and controls.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/useNavigation.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseNavigation(): NavigationContextValue\n```\n\n----------------------------------------\n\nTITLE: Using the 'selected' Modifier in React DayPicker\nDESCRIPTION: This example shows how to use the built-in 'selected' modifier to mark the current date as selected in DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-modifiers.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker selected={new Date()} />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Component in DayPicker\nDESCRIPTION: Demonstrates how to pass a custom component to the DayPicker using the components prop. This example shows how to replace the default DayContent component with a custom implementation.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/custom-components.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CustomDayContent } from \"./CustomDayContent\";\n\n<DayPicker\n  components={{\n    DayContent: CustomDayContent // Replace the DayContent component\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Customizing DayPicker with CSS variables\nDESCRIPTION: Demonstrates how to customize the appearance of DayPicker by overriding CSS variables in your application's global CSS file.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/styling.mdx#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.rdp-root {\n  --rdp-accent-color: indigo; /* Change the accent color to indigo. */\n  --rdp-accent-background-color: #f0f0f0; /* Change the accent background color. */\n  /* Add more CSS variables here. */\n}\n```\n\n----------------------------------------\n\nTITLE: Footer with Live Region Implementation\nDESCRIPTION: Implementation of a footer component that acts as a live region for accessibility announcements.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/customization.mdx#2025-04-18_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Footer() {\n  const [selected, setSelected] = React.useState<Date>();\n  return (\n    <DayPicker\n      mode=\"single\"\n      selected={selected}\n      onSelect={setSelected}\n      footer={\n        selected\n          ? `You picked ${selected.toLocaleDateString()}.`\n          : \"Please pick a date.\"\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Numbering System in React DayPicker\nDESCRIPTION: Complete example showing how to implement a custom numbering system using Arabic numerals with custom formatters.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/localization.mdx#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { format } from \"date-fns/format\";\nimport { arSA } from \"date-fns/locale\";\nimport { DayPicker, Formatters } from \"react-day-picker\";\n\nconst NU_LOCALE = \"ar-u-nu-arab\";\n\nconst formatDay = (day) => day.getDate().toLocaleString(NU_LOCALE);\nconst formatWeekNumber = (weekNumber) => weekNumber.toLocaleString(NU_LOCALE);\nconst formatMonthCaption = (date, options) => {\n  const y = date.getFullYear().toLocaleString(NU_LOCALE);\n  const m = format(date, \"LLLL\", options);\n  return `${m} ${y}`;\n};\n\nexport function NumberingSystemExample() {\n  return (\n    <DayPicker\n      locale={arSA}\n      dir=\"rtl\"\n      showWeekNumber\n      formatters={{\n        formatDay,\n        formatMonthCaption,\n        formatWeekNumber\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the 'disabled' Modifier in React DayPicker\nDESCRIPTION: This snippet demonstrates how to use the 'disabled' modifier to disable specific days of the week (Sundays and Saturdays) in DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-modifiers.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker mode=\"range\" disabled={{ dayOfWeek: [0, 6] }} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Week Selection in React DayPicker\nDESCRIPTION: This example demonstrates how to select an entire week when clicking on a day in React DayPicker. It uses date-fns functions to determine week boundaries and tracks selection state with useState.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/custom-selections.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { endOfWeek, isSameWeek, startOfWeek } from \"date-fns\";\nimport { DateRange, DayPicker } from \"react-day-picker\";\n\n/** Select the whole week when the day is clicked. */\nexport function CustomWeek() {\n  const [selectedWeek, setSelectedWeek] = useState<DateRange | undefined>();\n\n  return (\n    <DayPicker\n      showWeekNumber\n      modifiers={{\n        selected: selectedWeek\n      }}\n      onDayClick={(day, modifiers) => {\n        if (modifiers.selected) {\n          setSelectedWeek(undefined); // clear the selection if the week is already selected\n          return;\n        }\n        setSelectedWeek({\n          from: startOfWeek(day),\n          to: endOfWeek(day)\n        });\n      }}\n      onWeekNumberClick={(weekNumber, dates) => {\n        if (selectedWeek?.from && isSameWeek(dates[0], selectedWeek.from)) {\n          setSelectedWeek(undefined); // clear the selection if the week is already selected\n          return;\n        }\n        setSelectedWeek({\n          from: startOfWeek(dates[0]),\n          to: endOfWeek(dates[dates.length - 1])\n        });\n      }}\n      footer={\n        selectedWeek && (\n          <p>\n            Week from {selectedWeek.from.toLocaleDateString()} to\n            {selectedWeek.to.toLocaleDateString()}\n          </p>\n        )\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Locale in react-day-picker\nDESCRIPTION: Imports a Spanish locale from react-day-picker/locale and applies it to the DayPicker component to display the calendar in Spanish.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/localization.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// import the locale object\nimport { es } from \"react-day-picker/locale\";\n\n// use the locale object\n<DayPicker locale={es} />;\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Styles to React Day Picker\nDESCRIPTION: Shows how to apply inline styles to React Day Picker elements using the styles prop. Demonstrates styling the month caption with a bottom border and padding.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/styling.mdx#2025-04-18_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst monthCaptionStyle = {\n  borderBottom: \"1px solid currentColor\",\n  paddingBottom: \"0.5em\"\n};\n// ...\n<DayPicker\n  styles={{\n    month_caption: monthCaptionStyle\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Validating DateRange Type in TypeScript\nDESCRIPTION: Type guard function that checks if an unknown value conforms to the DateRange type interface. Returns a boolean indicating whether the input value is a valid DateRange object. Used for type checking and validation in React DayPicker components.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/isDateRange.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisDateRange(value): value is DateRange\n```\n\n----------------------------------------\n\nTITLE: Using the 'hidden' Modifier in React DayPicker\nDESCRIPTION: This example shows how to use the 'hidden' modifier to remove specific days from the calendar in DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-modifiers.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst hiddenDays = [\n  new Date(2022, 5, 10),\n  new Date(2022, 5, 20),\n  new Date(2022, 5, 11)\n];\n\n<DayPicker defaultMonth={hiddenDays[0]} hidden={hiddenDays} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing ISO Week Dates in React DayPicker\nDESCRIPTION: Example of enabling ISO week date format with week numbers display.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/localization.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker\n  showWeekNumber\n  ISOWeek // Switch to ISO week\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Month in DayPicker\nDESCRIPTION: Shows how to set a specific default month in the DayPicker component using the defaultMonth prop.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/navigation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker defaultMonth={new Date(1979, 8)} />\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Animation Functions in react-day-picker\nDESCRIPTION: Shows how to override the default animation functions for more advanced customization of month transitions. This example demonstrates the class naming pattern used for animations.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/navigation.mdx#2025-04-18_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.rdp-caption_after_enter {\n  animation:; /* Your value here */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS styles in React or frameworks with bundlers\nDESCRIPTION: Shows how to import the default CSS styles in a React application that uses a bundler like webpack or a framework like Next.js or Gatsby.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/styling.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"react-day-picker/style.css\";\n```\n\n----------------------------------------\n\nTITLE: Installing React DayPicker Package\nDESCRIPTION: Command to install the react-day-picker package using npm or yarn.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/start.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-day-picker\n```\n\n----------------------------------------\n\nTITLE: CustomComponents Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining customizable components for react-day-picker. Each component is optional and can return null or an Element. Components include Caption, CaptionLabel, Day, DayContent, Dropdown, Footer, Head, HeadRow, Icons, Months, Row, and WeekNumber.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/CustomComponents.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CustomComponents {\n  Caption?: (props: CaptionProps) => null | Element;\n  CaptionLabel?: (props: CaptionLabelProps) => null | Element;\n  Day?: (props: DayProps) => null | Element;\n  DayContent?: (props: DayContentProps) => null | Element;\n  Dropdown?: (props: DropdownProps) => null | Element;\n  Footer?: (props: FooterProps) => null | Element;\n  Head?: () => null | Element;\n  HeadRow?: () => null | Element;\n  IconDropdown?: (props: StyledComponent) => null | Element;\n  IconLeft?: (props: StyledComponent) => null | Element;\n  IconRight?: (props: StyledComponent) => null | Element;\n  Months?: (props: MonthsProps) => null | Element;\n  Row?: (props: RowProps) => null | Element;\n  WeekNumber?: (props: WeekNumberProps) => null | Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Components in react-day-picker\nDESCRIPTION: This code snippet demonstrates how to update custom components in react-day-picker v9. It shows the changes required for the 'components' prop, specifically replacing IconRight and IconLeft with a new Chevron component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/upgrading.mdx#2025-04-18_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  <DayPicker\n    components={{\n-     IconRight: MyRightIcon,\n-     IconLeft: MyLeftIcon,\n+     Chevron: (props) => {\n+       if (props.orientation === \"left\") {\n+         return <ChevronLeftIcon {...props} />;\n+       }\n+       return <ChevronRightIcon {...props} />;\n+     },\n    }}\n  />\n```\n\n----------------------------------------\n\nTITLE: Customizing First Week of Year in React DayPicker\nDESCRIPTION: Shows how to configure the first week of the year calculation with week numbers display.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/localization.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker\n  showWeekNumber\n  firstWeekContainsDate={1} // First week must contain Monday\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Date Range Limits\nDESCRIPTION: Shows how to limit the date range for navigation using fromYear and toYear props.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/navigation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker defaultMonth={new Date(2024, 0)} fromYear={2024} toYear={2026} />\n```\n\n----------------------------------------\n\nTITLE: Setting Start and End Month Limits in react-day-picker\nDESCRIPTION: Demonstrates how to restrict the date range for month navigation using startMonth and endMonth props. This example limits navigation between January 2024 and December 2025.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/navigation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker startMonth={new Date(2024, 0)} endMonth={new Date(2025, 11)} />\n```\n\n----------------------------------------\n\nTITLE: Defining DayPicker Component in TypeScript/JSX\nDESCRIPTION: This snippet defines the DayPicker function component. It accepts props of various types (DayPickerSingleProps, DayPickerMultipleProps, DayPickerRangeProps, or DayPickerDefaultProps) and returns a JSX.Element. The component is used for creating date pickers, calendars, and date inputs in web applications.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/DayPicker.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDayPicker(props): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Installing React DayPicker Dependencies\nDESCRIPTION: Command to install react-day-picker and its peer dependency date-fns using npm package manager.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/start.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-day-picker date-fns\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Navigation in React DayPicker\nDESCRIPTION: Shows how to use dropdown navigation in DayPicker. Requires setting both 'fromYear' and 'toYear' props.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/customization.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker captionLayout=\"dropdown\" fromYear={2010} toYear={2024} />\n<DayPicker captionLayout=\"dropdown-buttons\" fromYear={2010} toYear={2024} />\n```\n\n----------------------------------------\n\nTITLE: Disabling Weekend Days in React-Day-Picker\nDESCRIPTION: Shows how to disable specific days of the week (Sundays and Saturdays) using the disabled modifier.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/custom-modifiers.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Disable Sundays and Saturdays\n<DayPicker disabled={{ dayOfWeek: [0, 6] }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Caption Layout in React DayPicker\nDESCRIPTION: Demonstrates how to set the caption layout for the DayPicker component. The default layout is 'buttons'.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/customization.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker captionLayout=\"buttons\" /> // Default value\n```\n\n----------------------------------------\n\nTITLE: Setting RTL Text Direction for Arabic Localization in React DayPicker\nDESCRIPTION: This example shows how to set the text direction to right-to-left for Arabic localization in the DayPicker component. It uses the 'dir' prop with the value 'rtl'.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/translation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { arSA } from \"react-day-picker/locale\";\n\n<DayPicker locale={arSA} dir=\"rtl\" />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Range Selection in DayPicker\nDESCRIPTION: Sets up DayPicker to require range selection, preventing deselection of the chosen range.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker mode=\"range\" required />\n```\n\n----------------------------------------\n\nTITLE: Using DayPicker Context Hook in TypeScript\nDESCRIPTION: Hook function that provides access to the DayPicker context values. Returns a DayPickerContextValue object that contains props passed to DayPicker component. Used in internal and custom components to access DayPicker's context.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/useDayPicker.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseDayPicker(): DayPickerContextValue\n```\n\n----------------------------------------\n\nTITLE: Installing React DayPicker with npm or yarn\nDESCRIPTION: Command to install react-day-picker and its peer dependency date-fns using npm or yarn.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-day-picker date-fns\n```\n\n----------------------------------------\n\nTITLE: Checking Date Matches Using isMatch Function in TypeScript\nDESCRIPTION: Demonstrates how to use the isMatch() function to check if a date falls within any of the provided date ranges. The example shows checking a specific date (June 19, 2022) against two different date ranges using DateRange matchers.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/isMatch.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst day = new Date(2022, 5, 19);\nconst matcher1: DateRange = {\n   from: new Date(2021, 12, 21),\n   to: new Date(2021, 12, 30)\n}\nconst matcher2: DateRange = {\n   from: new Date(2022, 5, 1),\n   to: new Date(2022, 5, 23)\n}\n\nconst isMatch(day, [matcher1, matcher2]); // true, since day is in the matcher1 range.\n```\n\n----------------------------------------\n\nTITLE: Hidden Days Implementation in React-Day-Picker\nDESCRIPTION: Example of hiding specific dates in the calendar using the hidden modifier.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/custom-modifiers.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst hiddenDays = [\n  new Date(2022, 5, 10),\n  new Date(2022, 5, 20),\n  new Date(2022, 5, 11)\n];\n\n<DayPicker defaultMonth={hiddenDays[0]} hidden={hiddenDays} />;\n```\n\n----------------------------------------\n\nTITLE: Dropdown Caption Layout with Date Range\nDESCRIPTION: Shows how to configure a dropdown caption layout with specified start and end months for calendar navigation.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/customization.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker\n  captionLayout=\"dropdown\"\n  defaultMonth={new Date(2024, 6)}\n  startMonth={new Date(2024, 6)}\n  endMonth={new Date(2025, 9)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Month in react-day-picker\nDESCRIPTION: Configures the initial month displayed by the DayPicker component using the defaultMonth prop. This example shows how to set September 1979 as the starting month.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/navigation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker defaultMonth={new Date(1979, 8)} />\n```\n\n----------------------------------------\n\nTITLE: Updating DayPicker Modifier Syntax in React\nDESCRIPTION: Shows how to update the syntax for defining modifiers in React Day Picker v5.0.0. The new syntax allows using dates, arrays, or ranges directly instead of functions.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n<DayPicker\n-     selectedDays={ day => DateUtils.isSameDay(day, this.state.selectedDay)}\n+     selectedDays={ this.state.selectedDay }\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Modifier CSS Styling\nDESCRIPTION: CSS styling implementation for the custom booked modifier with a strikethrough effect.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/custom-modifiers.mdx#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.booked {\n  position: relative;\n}\n/* Strikeout */\n.booked::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: currentColor;\n  z-index: 1;\n  transform: rotate(-45deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Today Modifier Event Handling\nDESCRIPTION: Implementation of click handling for the today modifier with dynamic footer updates.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/custom-modifiers.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ModifiersToday() {\n  const initialFooter = <p>Try clicking the today's date.</p>;\n  const [footer, setFooter] = useState(initialFooter);\n\n  const handleDayClick: DayMouseEventHandler = (day, modifiers) => {\n    if (modifiers.today) {\n      setFooter(<p>You clicked the today's date.</p>);\n    } else {\n      setFooter(initialFooter);\n    }\n  };\n  return <DayPicker onDayClick={handleDayClick} footer={footer} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React DayPicker via npm\nDESCRIPTION: Command to install the React DayPicker package from npm. This is the first step required before using the component in a React application.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-day-picker\n```\n\n----------------------------------------\n\nTITLE: Implementing the 'today' Modifier in React DayPicker\nDESCRIPTION: This snippet demonstrates how to use the 'today' modifier to handle clicks on the current date and how to set a custom 'today' date in DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-modifiers.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  const handleDayClick: DayMouseEventHandler = (day, modifiers) => {\n    if (modifiers.today) {\n      alert(\"You clicked the today's date.\");\n    }\n  };\n  return (\n    <DayPicker onDayClick={handleDayClick} today={new Date(2019, 12, 22)} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Caption Function Component Declaration in React DayPicker\nDESCRIPTION: The Caption function component renders the caption of a month in react-day-picker. It accepts CaptionProps and returns a JSX.Element. The caption's layout can be configured using the DayPickerBase.captionLayout prop.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/Caption.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nCaption(props): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining DateFormatter Type Alias in TypeScript for React Day Picker\nDESCRIPTION: This code snippet defines the DateFormatter type alias. It represents a function that takes a Date object and optional formatting options, and returns a ReactNode. The function can be used to customize date formatting in React Day Picker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DateFormatter.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDateFormatter: (date, options?) => ReactNode\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Import for react-day-picker v7.0.0\nDESCRIPTION: Updates the TypeScript import statement to use the default import for react-day-picker version 7.0.0 when upgrading from v6.2.1.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- import { DayPicker } from 'react-day-picker`;\n+ import DayPicker from 'react-day-picker';\n```\n\n----------------------------------------\n\nTITLE: Styling Modifiers with CSS in React DayPicker\nDESCRIPTION: This CSS snippet defines the styles for the custom 'my-booked-class' used in the previous example to style booked days in the calendar.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/guides/custom-modifiers.mdx#2025-04-18_snippet_6\n\nLANGUAGE: postcss\nCODE:\n```\n.my-booked-class {\n  background-color: tomato;\n  color: white;\n  border-radius: 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Default Styles in React App\nDESCRIPTION: Shows how to import the default CSS styles for React DayPicker in a React application.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/styling.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"react-day-picker/dist/style.css\";\n```\n\n----------------------------------------\n\nTITLE: Custom Booked Days Modifier Implementation\nDESCRIPTION: Demonstrates creating a custom 'booked' modifier with custom styling and click handling.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/custom-modifiers.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst bookedDays = [\n  new Date(2024, 5, 8),\n  new Date(2024, 5, 9),\n  new Date(2024, 5, 10),\n  { from: new Date(2024, 5, 15), to: new Date(2024, 5, 20) }\n];\nexport function ModifiersCustom() {\n  const handleDayClick: DayMouseEventHandler = (day, { booked }) => {\n    alert(`Day ${day.toLocaleDateString()} is booked? ` + booked);\n  };\n\n  return (\n    <DayPicker\n      defaultMonth={new Date(2024, 5)}\n      modifiers={{ booked: bookedDays }}\n      modifiersClassNames={{ booked: \"booked\" }}\n      onDayClick={handleDayClick}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Different Matcher Types in React Day Picker\nDESCRIPTION: Demonstrates various ways to implement the Matcher type alias in React Day Picker. Shows examples of boolean, date, array, before/after, day of week, interval, range, and function matchers. Each matcher type serves a different purpose in matching specific days.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/Matcher.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// will always match the day\nconst booleanMatcher: Matcher = true;\n\n// will match the today's date\nconst dateMatcher: Matcher = new Date();\n\n// will match the days in the array\nconst arrayMatcher: Matcher = [\n  new Date(2019, 1, 2),\n  new Date(2019, 1, 4)\n];\n\n// will match days after the 2nd of February 2019\nconst afterMatcher: DateAfter = { after: new Date(2019, 1, 2) };\n// will match days before the 2nd of February 2019 }\nconst beforeMatcher: DateBefore = { before: new Date(2019, 1, 2) };\n\n// will match Sundays\nconst dayOfWeekMatcher: DayOfWeek = {\n  dayOfWeek: 0\n};\n\n// will match the included days, except the two dates\nconst intervalMatcher: DateInterval = {\n  after: new Date(2019, 1, 2),\n  before: new Date(2019, 1, 5)\n};\n\n// will match the included days, including the two dates\nconst rangeMatcher: DateRange = {\n  from: new Date(2019, 1, 2),\n  to: new Date(2019, 1, 5)\n};\n\n// will match when the function return true\nconst functionMatcher: Matcher = (day: Date) => {\n  return day.getMonth() === 2; // match when month is March\n};\n```\n\n----------------------------------------\n\nTITLE: Outside Days Display Configuration\nDESCRIPTION: Example of enabling the display of days falling outside the current month.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/customization.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker showOutsideDays />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature - useActiveModifiers Hook\nDESCRIPTION: Function signature for the useActiveModifiers hook that takes a required day parameter and an optional displayMonth parameter, returning an ActiveModifiers type.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/useActiveModifiers.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseActiveModifiers(day: Date, displayMonth?: Date): ActiveModifiers\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Selector for Localized Styling in React Day Picker\nDESCRIPTION: Demonstrates the change in CSS selector for styling localized versions of React Day Picker, using the lang HTML attribute instead of a specific class name.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n- .DayPicker--de {\n+ .DayPicker[lang=\"de\"] {\n  background: yellow;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DaySelectionMode Type Alias in TypeScript\nDESCRIPTION: This snippet defines the DaySelectionMode type alias, which is a union type of string literals representing different day selection modes in DayPicker. It includes 'single' for selecting single days, 'multiple' for selecting multiple days, 'range' for selecting a range of days, and 'default' for customizing selection behavior.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DaySelectionMode.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DaySelectionMode = \"single\" | \"multiple\" | \"range\" | \"default\"\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules with DayPicker\nDESCRIPTION: Demonstrates how to use CSS modules with React DayPicker by importing the style module and passing it to the classNames prop.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/styling.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DayPicker } from \"react-day-picker\";\nimport { default as defaultStyles } from \"react-day-picker/dist/style.module.css\";\n\nexport function DatePicker() {\n  return <DayPicker classNames={defaultStyles} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring useInput Function in TypeScript for react-day-picker\nDESCRIPTION: This snippet defines the useInput function, which takes UseInputOptions as a parameter and returns a UseInputValue. It is used to bind an input field to DayPicker, providing props and setters for the integration.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/useInput.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseInput(options: UseInputOptions): UseInputValue\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Selectable Dates in Multiple Mode\nDESCRIPTION: Configures DayPicker to limit the number of selectable dates in multiple selection mode.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker mode=\"multiple\" min={2} max={5} />\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Styles to DayPicker\nDESCRIPTION: Example of applying inline styles to DayPicker components using the styles prop.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/styling.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst monthCaptionStyle = {\n  borderBottom: \"1px solid currentColor\",\n  paddingBottom: \"0.5em\"\n};\n// ...\n<DayPicker\n  styles={{\n    month_caption: monthCaptionStyle\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Defining WeekNumberFormatter Type in TypeScript\nDESCRIPTION: Type definition for a function that takes a week number and optional formatting options including locale, returning a ReactNode. Used for customizing the display of week numbers in React Day Picker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/WeekNumberFormatter.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nWeekNumberFormatter: (weekNumber: number, options?: { locale?: Locale }) => ReactNode\n```\n\n----------------------------------------\n\nTITLE: Defining Today's Date Property in DayPickerBase Interface (TypeScript)\nDESCRIPTION: Defines an optional 'today' property to set the current date, which will receive the 'today' modifier for styling.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoday?: Date\n```\n\n----------------------------------------\n\nTITLE: CaptionDropdowns Function Component Declaration in TypeScript/JSX\nDESCRIPTION: Function component that renders a navigation caption with dropdowns for month and year selection. Takes CaptionProps as parameter and returns a JSX Element.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/CaptionDropdowns.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nCaptionDropdowns(props: CaptionProps): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Displaying Outside Days in React DayPicker\nDESCRIPTION: Demonstrates how to show days falling into other months using the 'showOutsideDays' prop.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/customization.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker showOutsideDays />\n```\n\n----------------------------------------\n\nTITLE: Rendering Month Caption in React Day Picker with TypeScript\nDESCRIPTION: Function component that renders the caption for the displayed month. Takes CaptionLabelProps as parameter and returns a JSX Element. Used specifically when captionLayout prop is set to 'buttons'.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/CaptionLabel.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nCaptionLabel(props: CaptionLabelProps): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Nights for Range Selection\nDESCRIPTION: Configures DayPicker to set minimum and maximum number of nights for range selection.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/selection-modes.mdx#2025-04-18_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker mode=\"range\" min={1} max={6} />\n```\n\n----------------------------------------\n\nTITLE: SelectRangeContextValue Interface Definition\nDESCRIPTION: Interface definition for SelectRangeContextValue containing three main properties: selected (DateRange), modifiers (SelectRangeModifiers), and an optional onDayClick event handler.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/SelectRangeContextValue.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SelectRangeContextValue {\n  selected: undefined | DateRange;\n  modifiers: SelectRangeModifiers;\n  onDayClick?: DayClickEventHandler;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DayProps Interface in TypeScript for react-day-picker\nDESCRIPTION: This snippet defines the DayProps interface with two properties: date of type Date representing the date to render, and displayMonth of type Date representing the month where the date is displayed.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayProps.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DayProps {\n  date: Date;\n  displayMonth: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Week Start Property in DayPickerBase Interface (TypeScript)\nDESCRIPTION: Defines an optional 'weekStartsOn' property to set the index of the first day of the week, overriding the locale's default.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nweekStartsOn?: 0 | 2 | 1 | 3 | 4 | 5 | 6\n```\n\n----------------------------------------\n\nTITLE: Defining DayClickEventHandler Type Alias in TypeScript for React Day Picker\nDESCRIPTION: This code snippet defines the DayClickEventHandler type alias as a function that takes a Date object, an ActiveModifiers object, and a MouseEvent, and returns void. It is used to handle day click events in the React Day Picker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DayClickEventHandler.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDayClickEventHandler: (day: Date, activeModifiers: ActiveModifiers, e: MouseEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Weeks in React DayPicker\nDESCRIPTION: Shows how to always display 6 weeks per month using 'fixedWeeks' and 'showOutsideDays' props.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/customization.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker showOutsideDays fixedWeeks />\n```\n\n----------------------------------------\n\nTITLE: Defining DayPicker Properties in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definitions for various properties of the DayPicker component, including event handlers and configuration options.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerDefaultProps.md#2025-04-18_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DayPickerProps {\n  onDayTouchMove?: DayTouchEventHandler;\n  onDayTouchStart?: DayTouchEventHandler;\n  onMonthChange?: MonthChangeEventHandler;\n  onNextClick?: MonthChangeEventHandler;\n  onPrevClick?: MonthChangeEventHandler;\n  onWeekNumberClick?: WeekNumberClickEventHandler;\n  pagedNavigation?: boolean;\n  reverseMonths?: boolean;\n  selected?: Matcher | Matcher[];\n  showOutsideDays?: boolean;\n  showWeekNumber?: boolean;\n  style?: CSSProperties;\n  styles?: Partial<Omit<StyledElement<CSSProperties>, InternalModifiersElement>>;\n  title?: string;\n  toDate?: Date;\n  toMonth?: Date;\n  toYear?: number;\n  today?: Date;\n  weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Modifier Usage in React-Day-Picker\nDESCRIPTION: Demonstrates the basic usage of built-in modifiers like selected, disabled, and hidden in DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/custom-modifiers.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker selected={new Date()} />\n<DayPicker disabled={new Date()} />\n<DayPicker hidden={new Date()} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Head Component in React Day Picker\nDESCRIPTION: The Head function is a TypeScript component that renders the table head for the calendar view. It returns a JSX.Element and is located in the src/components/Head.tsx file.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/Head.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction Head(): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining DayModifiers Type Alias in TypeScript\nDESCRIPTION: Defines the DayModifiers type alias as a Record with Modifier keys and Matcher or array of Matcher values. This type is used for custom modifiers in the DayPickerBase component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DayModifiers.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DayModifiers = Record<Modifier, Matcher | Matcher[]>\n```\n\n----------------------------------------\n\nTITLE: Defining DayPickerProps Union Type in TypeScript\nDESCRIPTION: Type alias declaration that combines four different prop interfaces for the DayPicker component: DayPickerDefaultProps, DayPickerSingleProps, DayPickerMultipleProps, and DayPickerRangeProps. This type definition provides type safety for different selection modes in the DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DayPickerProps.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype DayPickerProps = DayPickerDefaultProps | DayPickerSingleProps | DayPickerMultipleProps | DayPickerRangeProps\n```\n\n----------------------------------------\n\nTITLE: Replacing Date Range Props in React Day Picker\nDESCRIPTION: Examples of replacing fromDate and toDate props with new startMonth, endMonth, and hidden props\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/upgrading.mdx#2025-04-18_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n <DayPicker\n-   fromDate={new Date(2010, 11, 03)}\n+   startMonth={new Date(2010, 11)}\n+   hidden={[{ before: new Date(2010, 11, 03) }]}\n />\n```\n\nLANGUAGE: diff\nCODE:\n```\n <DayPicker\n-   toDate={new Date(2010, 11, 03)}\n+   endMonth={new Date(2010, 11)}\n+   hidden={[{ after: new Date(2010, 11, 03) }]}\n />\n```\n\n----------------------------------------\n\nTITLE: Adding inline styles in HTML without bundlers\nDESCRIPTION: Shows how to include the DayPicker styles in a plain HTML file when not using a bundler by adding them directly in a style tag.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/styling.mdx#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  /* Copy the content of the style.css file here. */\n</style>\n```\n\n----------------------------------------\n\nTITLE: Function Signature for SelectSingleProvider in React DayPicker\nDESCRIPTION: The SelectSingleProvider function signature that accepts SelectSingleProviderProps and returns a JSX.Element. It provides the values for the SelectSingleProvider context.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/SelectSingleProvider.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nSelectSingleProvider(props): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Disabling Month Navigation in react-day-picker\nDESCRIPTION: Shows how to prevent users from navigating between months by setting the disableNavigation prop to true. This locks the calendar to display only the current month.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/navigation.mdx#2025-04-18_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker disableNavigation />\n```\n\n----------------------------------------\n\nTITLE: Updating Formatters in React Day Picker\nDESCRIPTION: Examples showing how to update formatters to return strings instead of ReactNodes and use custom components\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/upgrading.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker\n  formatters={{\n    formatCaption: (month) => format(month, \"LLLL y\") // ✅ return a string\n  }}\n  components={{\n    Caption: ({ children }) => <strong>{children}</strong> // ✅ return a ReactElement\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining UseInputOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the UseInputOptions interface, which extends Pick<DayPickerBase> and adds properties for input handling in a date picker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/UseInputOptions.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface UseInputOptions extends Pick<DayPickerBase, \"locale\" | \"fromDate\" | \"toDate\" | \"fromMonth\" | \"toMonth\" | \"fromYear\" | \"toYear\" | \"today\"> {\n  defaultSelected?: Date;\n  format?: string;\n  required?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalModifier Enumeration for DayPicker in TypeScript\nDESCRIPTION: This enumeration defines the internal modifiers used by DayPicker. It includes modifiers for disabled days, hidden days, outside days, range selection, selected days, and today's date. Each modifier is associated with a string value that represents its internal name.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/enumerations/InternalModifier.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum InternalModifier {\n  Disabled = \"disabled\",\n  Hidden = \"hidden\",\n  Outside = \"outside\",\n  RangeEnd = \"range_end\",\n  RangeMiddle = \"range_middle\",\n  RangeStart = \"range_start\",\n  Selected = \"selected\",\n  Today = \"today\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Deprecated Props in react-day-picker\nDESCRIPTION: This code snippet shows how to update deprecated props in react-day-picker v9. It demonstrates replacing 'fromYear' and 'toYear' with 'startMonth' and 'endMonth' respectively, using Date objects to specify the range.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/upgrading.mdx#2025-04-18_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  <DayPicker\n-   fromYear={2010}\n+   startMonth={new Date(2010, 0)}  // January 2010\n-   toYear={2021}\n+   endMonth={new Date(2021, 11)} // December 2021\n  />\n```\n\n----------------------------------------\n\nTITLE: Keyboard Navigation Controls Table in Markdown\nDESCRIPTION: Defines the keyboard navigation mappings for the DayPicker component, including arrow keys, page navigation, and selection controls.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/accessibility.mdx#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Keys                         | Function                            |\n| ---------------------------- | ----------------------------------- |\n| <kbd>Arrow Top</kbd>         | Move focus to the previous week     |\n| <kbd>Arrow Right</kbd>       | Move focus to the next day          |\n| <kbd>Arrow Bottom</kbd>      | Move focus to the next week         |\n| <kbd>Arrow Left</kbd>        | Move focus to the previous day      |\n| <kbd>Page Up</kbd>           | Move focus to the previous month    |\n| <kbd>Page Down</kbd>         | Move focus to the next month        |\n| <kbd>Shift + Page Up</kbd>   | Move focus to the previous year     |\n| <kbd>Shift + Page Down</kbd> | Move focus to the next year         |\n| <kbd>Home</kbd>              | Move focus to the start of the week |\n| <kbd>End</kbd>               | Move focus to the end of the week   |\n| <kbd>Enter/Space</kbd>       | Select the focused day              |\n```\n\n----------------------------------------\n\nTITLE: Defining useSelectRange Hook in TypeScript for React Day Picker\nDESCRIPTION: This snippet defines the useSelectRange hook, which returns a SelectRangeContextValue. It's intended for use in internal or custom components of the React Day Picker library.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/useSelectRange.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseSelectRange(): SelectRangeContextValue\n```\n\n----------------------------------------\n\nTITLE: Multiple Date Selection in React DayPicker\nDESCRIPTION: Implementation of multiple date selection mode allowing users to select multiple dates.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/selection-modes.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { DayPicker } from \"react-day-picker\";\n\nexport function App() {\n  const initiallySelectedDates = [new Date(), addDays(new Date(), 1)];\n\n  const [selectedDates, setSelectedDates] = useState<Date[]>([]);\n\n  return (\n    <DayPicker\n      mode=\"multiple\"\n      selected={selectedDates}\n      onSelect={(dates) => setSelectedDates(dates || [])}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Modifiers Type Alias in TypeScript\nDESCRIPTION: Type alias declaration that intersects CustomModifiers and InternalModifiers types to create the complete set of modifiers used by DayPicker component. Located in src/types/Modifiers.ts at line 12.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/Modifiers.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Modifiers = CustomModifiers & InternalModifiers\n```\n\n----------------------------------------\n\nTITLE: Declaring DayPickerContext Variable in TypeScript for React Day Picker\nDESCRIPTION: Defines a constant DayPickerContext as a React Context with a type of undefined or DayPickerContextValue. This context is used to share props and perform calculations for rendering days in the DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/variables/DayPickerContext.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DayPickerContext: Context<undefined | DayPickerContextValue>\n```\n\n----------------------------------------\n\nTITLE: Accessing Modifiers in onDayClick Handler (JavaScript)\nDESCRIPTION: Demonstrates how to check for a 'selected' modifier in the onDayClick event handler. The code shows both the old array-based approach and the new object-based approach introduced in v2.0.0.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nonDayClick(e, day, modifiers) {\n  if (modifiers.selected === true) {\n    console.log('This day is selected')\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nonDayClick(e, day, { selected }) {\n  if (selected) {\n    console.log('This day is selected')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Translating ARIA Labels in React DayPicker\nDESCRIPTION: Example showing how to translate ARIA labels for accessibility.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/localization.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker\n  labels={{\n    labelNext: () => \"Prossimo mese\"\n    labelPrevious: () => \"Mese precedente\"\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining DayPickerContextValue Interface in TypeScript\nDESCRIPTION: This code snippet defines the DayPickerContextValue interface, which extends DayPickerBase and includes additional properties and overrides for the DayPicker component context.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerContextValue.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DayPickerContextValue extends DayPickerBase {\n  captionLayout: CaptionLayout;\n  classNames: Required<Partial<StyledElement<string>>>;\n  formatters: Formatters;\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Caption Layout Configuration in React DayPicker\nDESCRIPTION: Demonstrates how to set the basic caption layout to 'label' which shows the month and year.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/customization.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker captionLayout=\"label\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing FocusProvider Component in React\nDESCRIPTION: Function component that provides the FocusContext to its children. Takes FocusProviderProps as input and returns a JSX.Element. Located in the Focus context module of React Day Picker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/FocusProvider.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nFocusProvider(props): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Rendering Week Numbers with TypeScript and JSX\nDESCRIPTION: The WeekNumber function component accepts WeekNumberProps and returns a JSX Element. It conditionally renders either a button (when onWeekNumberClick is provided) or a span element containing the week number. The component is used within the React DayPicker library for displaying week numbers in a calendar interface.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/WeekNumber.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nWeekNumber(props): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining SelectSingleContext in TypeScript for react-day-picker\nDESCRIPTION: Declares a constant SelectSingleContext as a React Context. It can hold either undefined or a SelectSingleContextValue. This context is used to share information about selected days in single selection mode and can be accessed using the useSelectSingle hook.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/variables/SelectSingleContext.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst SelectSingleContext: Context<undefined | SelectSingleContextValue>\n```\n\n----------------------------------------\n\nTITLE: Type Guard Function for DateInterval in React DayPicker\nDESCRIPTION: A type guard function that checks if a given value is of type DateInterval. It returns a boolean indicating whether the matcher parameter conforms to the DateInterval type interface.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/isDateInterval.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisDateInterval(matcher): matcher is DateInterval\n```\n\n----------------------------------------\n\nTITLE: Customizing Locale Settings in react-day-picker\nDESCRIPTION: Demonstrates how to customize specific parts of the locale by extending the defaultLocale object with custom translations.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/localization.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DayPicker, defaultLocale } from \"react-day-picker\";\n\n<DayPicker\n  locale={{\n    localize: {\n      ...defaultLocale.localize,\n      day: (day) => \"custom-localized-day\"\n    }\n  }}\n  month={new Date(2023, 0, 1)}\n  mode=\"single\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: CaptionNavigation Function Signature in React Day Picker\nDESCRIPTION: Function signature for CaptionNavigation component that renders a caption with button-based navigation. It accepts CaptionProps as a parameter and returns a JSX Element.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/CaptionNavigation.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nCaptionNavigation(props): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining DayPickerDefaultProps Interface in TypeScript\nDESCRIPTION: This code snippet defines the DayPickerDefaultProps interface, which extends DayPickerBase and includes various optional properties for configuring the DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerDefaultProps.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DayPickerDefaultProps extends DayPickerBase {\n  ISOWeek?: boolean;\n  captionLayout?: CaptionLayout;\n  className?: string;\n  classNames?: Partial<StyledElement<string>>;\n  components?: CustomComponents;\n  defaultMonth?: Date;\n  dir?: string;\n  disableNavigation?: boolean;\n  disabled?: Matcher | Matcher[];\n  firstWeekContainsDate?: 1 | 4;\n  fixedWeeks?: boolean;\n  footer?: ReactNode;\n  formatters?: Partial<Formatters>;\n  fromDate?: Date;\n  fromMonth?: Date;\n  fromYear?: number;\n  hidden?: Matcher | Matcher[];\n  hideHead?: boolean;\n  id?: string;\n  initialFocus?: boolean;\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Formatters Type Alias in TypeScript for React Day Picker\nDESCRIPTION: This code snippet defines the Formatters type alias, which is an object containing various date formatting functions. Each formatter is assigned a specific purpose, such as formatting captions, days, months, week numbers, and weekday names.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/Formatters.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nFormatters: {\n  \"formatCaption\": DateFormatter;\n  \"formatDay\": DateFormatter;\n  \"formatMonthCaption\": DateFormatter;\n  \"formatWeekNumber\": WeekNumberFormatter;\n  \"formatWeekdayName\": DateFormatter;\n  \"formatYearCaption\": DateFormatter;\n}\n```\n\n----------------------------------------\n\nTITLE: NavigationProvider Function Definition in React Day Picker\nDESCRIPTION: This function serves as a provider for the NavigationContext in the react-day-picker library. It accepts an object props with an optional children property of type ReactNode and returns a JSX Element.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/NavigationProvider.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Provides the values for the [NavigationContext](../variables/NavigationContext.md).\n */\nfunction NavigationProvider(props: { children?: ReactNode }): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining CaptionLayout Type Alias in TypeScript\nDESCRIPTION: Defines a type alias called CaptionLayout that specifies three possible layout options for the calendar caption: dropdown, buttons, or dropdown-buttons. This type is used to control how the month/year navigation controls are displayed in the React Day Picker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/CaptionLayout.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CaptionLayout = \"dropdown\" | \"buttons\" | \"dropdown-buttons\"\n```\n\n----------------------------------------\n\nTITLE: Defining SelectRangeContext in TypeScript for React Day Picker\nDESCRIPTION: Declares a constant SelectRangeContext as a React Context. It can hold either undefined or a SelectRangeContextValue object. This context is used to share information about selected days in range selection mode and is accessed via the useSelectRange hook.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/variables/SelectRangeContext.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst SelectRangeContext: Context<undefined | SelectRangeContextValue>\n```\n\n----------------------------------------\n\nTITLE: Type Guard Function for DayPickerMultipleProps in TypeScript\nDESCRIPTION: A type guard function that checks if the provided props object conforms to the DayPickerMultipleProps interface. Takes either DayPickerContextValue or DayPickerProps as input and returns a boolean indicating if the props are for multiple date selection.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/isDayPickerMultiple.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisDayPickerMultiple(props): props is DayPickerMultipleProps\n```\n\n----------------------------------------\n\nTITLE: Configuring First Week Calculation in react-day-picker\nDESCRIPTION: Sets the firstWeekContainsDate prop to 1 (Monday) to define how the first week of the year is calculated, which affects week numbering.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/localization.mdx#2025-04-18_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker\n  showWeekNumber\n  firstWeekContainsDate={1} // First week must contain Monday\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining DayContentProps Interface in TypeScript for React Day Picker\nDESCRIPTION: This code snippet defines the DayContentProps interface with three properties: date, displayMonth, and activeModifiers. It provides type information and source references for each property.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayContentProps.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DayContentProps {\n  date: Date;\n  displayMonth: Date;\n  activeModifiers: ActiveModifiers;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationContextValue Interface in TypeScript\nDESCRIPTION: Interface definition that includes properties for current month, display months, navigation methods, and date validation. Used for managing calendar navigation state in react-day-picker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/NavigationContextValue.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NavigationContextValue {\n  currentMonth: Date;\n  displayMonths: Date[];\n  goToMonth: (month: Date) => void;\n  goToDate: (date: Date, refDate?: Date) => void;\n  nextMonth?: Date;\n  previousMonth?: Date;\n  isDateDisplayed: (day: Date) => boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useSelectMultiple Hook in TypeScript for react-day-picker\nDESCRIPTION: This code snippet defines the useSelectMultiple hook, which returns a SelectMultipleContextValue. It is intended for use in internal or custom components within the react-day-picker project.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/useSelectMultiple.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseSelectMultiple(): SelectMultipleContextValue\n```\n\n----------------------------------------\n\nTITLE: Defining DateAfter Type Alias in TypeScript for React Day Picker\nDESCRIPTION: This code snippet defines the DateAfter type alias. It is an object type with a single property 'after' of type Date. This type is used to create a matcher for dates that occur after a specified date, not including the specified date itself.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DateAfter.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DateAfter = {\"after\": Date;}\n```\n\n----------------------------------------\n\nTITLE: Declaring useSelectSingle Hook in TypeScript\nDESCRIPTION: This snippet defines the useSelectSingle hook, which returns a SelectSingleContextValue. It's designed for use in internal or custom components within the react-day-picker library.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/useSelectSingle.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseSelectSingle(): SelectSingleContextValue\n```\n\n----------------------------------------\n\nTITLE: Type Guard Function for DateBefore Type in TypeScript\nDESCRIPTION: A type guard function that determines if a provided value matches the DateBefore type interface. Takes an unknown value as input and returns a type predicate indicating if the value is of type DateBefore.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/isDateBeforeType.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisDateBeforeType(value): value is DateBefore\n```\n\n----------------------------------------\n\nTITLE: UseInputValue Interface Definition in TypeScript\nDESCRIPTION: Interface definition for UseInputValue that includes properties for DayPicker integration, input field handling, and date selection management. Contains dayPickerProps, inputProps, reset(), and setSelected() methods.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/UseInputValue.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseInputValue {\n  dayPickerProps: InputDayPickerProps;\n  inputProps: InputProps;\n  reset: () => void;\n  setSelected: (day: Date | undefined) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StyledComponent Type Interface in TypeScript\nDESCRIPTION: TypeScript type definition for components that can be styled. Includes props for React children, CSS class names, and inline styles using CSSProperties.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/StyledComponent.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"children\": ReactNode;\n  \"className\": string;\n  \"style\": CSSProperties;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for Day Component in React\nDESCRIPTION: Declaration for a Day function component that renders a day cell as a button or span element based on modifiers. It accepts DayProps as its parameter and returns a JSX.Element.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/Day.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDay(props): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining DayPickerProviderProps Interface Properties in TypeScript\nDESCRIPTION: Interface declaration for DayPickerProviderProps containing two properties: an optional children property of type ReactNode and a required initialProps property of type DayPickerProps.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerProviderProps.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DayPickerProviderProps {\n  children?: ReactNode;\n  initialProps: DayPickerProps;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonProps Type Alias in TypeScript for React Day Picker\nDESCRIPTION: This code snippet defines the ButtonProps type alias as JSX.IntrinsicElements['button'], which means it includes all the standard HTML button element properties. This type is used for the Button component in the React Day Picker library.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/ButtonProps.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ButtonProps = JSX.IntrinsicElements[\"button\"]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for CaptionProps\nDESCRIPTION: Defines the CaptionProps interface with three properties: displayIndex (optional number), displayMonth (required Date), and id (optional string). These props are used to configure the Caption component's display and accessibility features.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/CaptionProps.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CaptionProps {\n  displayIndex?: number;  // Index of the month where caption is displayed\n  displayMonth: Date;    // The month where the caption is displayed\n  id?: string;          // ID for heading element, matches Table's labelled-by\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MonthChangeEventHandler Type Alias in TypeScript\nDESCRIPTION: Declares a type alias for a function that handles month change events in a calendar. It takes a Date object as a parameter and returns void.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/MonthChangeEventHandler.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nMonthChangeEventHandler: (month: Date) => void\n```\n\n----------------------------------------\n\nTITLE: Defining DayPickerSingle Mode in TypeScript\nDESCRIPTION: Sets the mode property of the DayPickerSingle component to 'single'.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerSingleProps.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nmode: \"single\"\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type Guard for DayPickerRangeProps\nDESCRIPTION: This function is a TypeScript type guard that checks if the given props are of type DayPickerRangeProps. It takes a parameter of type DayPickerContextValue or DayPickerProps and returns a boolean indicating whether the props are DayPickerRangeProps.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/isDayPickerRange.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nisDayPickerRange(props): props is DayPickerRangeProps\n```\n\n----------------------------------------\n\nTITLE: Defining ClassNames Type Alias in TypeScript for React DayPicker\nDESCRIPTION: This code snippet defines a type alias named ClassNames as a Partial of StyledElement<string>. It represents the class names of each element in the React DayPicker component, allowing for flexible styling of different parts of the calendar.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/ClassNames.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ClassNames = Partial<StyledElement<string>>\n```\n\n----------------------------------------\n\nTITLE: Defining SelectRangeEventHandler Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the SelectRangeEventHandler type alias as a function that takes four parameters: range, selectedDay, activeModifiers, and e. It returns void and is used for handling the selection of a range of days in react-day-picker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/SelectRangeEventHandler.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nSelectRangeEventHandler: (range: DateRange | undefined, selectedDay: Date, activeModifiers: ActiveModifiers, e: MouseEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Defining SelectMultipleModifiers Type in TypeScript\nDESCRIPTION: Type alias that picks the Disabled modifier from the Modifiers type, used to represent modifiers that are changed during multiple date selection.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/SelectMultipleModifiers.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SelectMultipleModifiers = Pick<Modifiers, InternalModifier.Disabled>\n```\n\n----------------------------------------\n\nTITLE: Defining DayRender Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the DayRender type alias, which is a complex type combining various properties and types used for rendering days in a calendar component. It includes properties for active modifiers, button and div props, visibility states, and selected days.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DayRender.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDayRender: {\n  \"activeModifiers\": ActiveModifiers;\n  \"buttonProps\": StyledComponent & Pick<ButtonProps, \"disabled\" | \"aria-selected\" | \"tabIndex\"> & DayEventHandlers;\n  \"divProps\": StyledComponent;\n  \"isButton\": boolean;\n  \"isHidden\": boolean;\n  \"selectedDays\": SelectedDays;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DayPointerEventHandler Type Alias in TypeScript\nDESCRIPTION: Type definition for a pointer event handler function that receives a Date object, active modifiers, and the pointer event object. Used to handle pointer interactions with calendar days in React DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DayPointerEventHandler.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDayPointerEventHandler: (day: Date, activeModifiers: ActiveModifiers, e: PointerEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Defining DayPickerRangeProps Interface in TypeScript\nDESCRIPTION: This code snippet defines the DayPickerRangeProps interface, which extends DayPickerBase and includes various optional properties for customizing the DayPicker component in range mode.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerRangeProps.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DayPickerRangeProps extends DayPickerBase {\n  ISOWeek?: boolean;\n  captionLayout?: CaptionLayout;\n  className?: string;\n  classNames?: Partial<StyledElement<string>>;\n  components?: CustomComponents;\n  defaultMonth?: Date;\n  dir?: string;\n  disableNavigation?: boolean;\n  disabled?: Matcher | Matcher[];\n  firstWeekContainsDate?: 1 | 4;\n  fixedWeeks?: boolean;\n  footer?: ReactNode;\n  formatters?: Partial<Formatters>;\n  fromDate?: Date;\n  fromMonth?: Date;\n  fromYear?: number;\n  hidden?: Matcher | Matcher[];\n  hideHead?: boolean;\n  id?: string;\n  initialFocus?: boolean;\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalModifiersElement Type Alias in TypeScript\nDESCRIPTION: Defines a union type of internal style modifier strings used by React DayPicker to style different day states. These modifiers should not be used directly in styles or classNames props, but rather through modifiersStyles or modifiersClassNames props.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/InternalModifiersElement.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype InternalModifiersElement = \"day_outside\" | \"day_selected\" | \"day_disabled\" | \"day_hidden\" | \"day_range_start\" | \"day_range_end\" | \"day_range_middle\" | \"day_today\"\n```\n\n----------------------------------------\n\nTITLE: Defining ModifiersStyles Type Alias in TypeScript for react-day-picker\nDESCRIPTION: This type alias combines a Record of Modifier to CSSProperties with a Partial Record of InternalModifier to CSSProperties. It is used to specify styles for day elements based on different modifiers in the react-day-picker library.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/ModifiersStyles.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ModifiersStyles = Record<Modifier, CSSProperties> & Partial<Record<InternalModifier, CSSProperties>>\n```\n\n----------------------------------------\n\nTITLE: Defining SelectMultipleEventHandler Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the SelectMultipleEventHandler type alias. It is a function type that takes four parameters: an array of Date objects or undefined, a selected Date, an ActiveModifiers object, and a MouseEvent. The function returns void.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/SelectMultipleEventHandler.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nSelectMultipleEventHandler: (days: Date[] | undefined, selectedDay: Date, activeModifiers: ActiveModifiers, e: MouseEvent) => void\n```\n\n----------------------------------------\n\nTITLE: DayPickerProvider Function Definition in TypeScript\nDESCRIPTION: Function signature for DayPickerProvider which takes DayPickerProviderProps as input and returns a JSX.Element. This component serves as the context provider for DayPickerContext, managing default props initialization.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/DayPickerProvider.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDayPickerProvider(props: DayPickerProviderProps): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining MonthsProps Type Interface in TypeScript\nDESCRIPTION: TypeScript type alias declaration for MonthsProps that defines the props interface for the Months component. It contains a single required property 'children' of type ReactNode.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/MonthsProps.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MonthsProps = {\n  children: ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WeekNumberClickEventHandler Type in TypeScript\nDESCRIPTION: Type alias for a function that handles click events on week numbers. Takes week number, array of dates, and mouse event as parameters and returns void. Used to implement click behavior for week numbers in React Day Picker calendar interface.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/WeekNumberClickEventHandler.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nWeekNumberClickEventHandler: (weekNumber: number, dates: Date[], e: MouseEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Days for Range Selection in TypeScript\nDESCRIPTION: Defines an optional property 'min' to set the minimum number of days that can be selected in a range.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerRangeProps.md#2025-04-18_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n> `optional` **min**: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining InputProps Type Alias in TypeScript\nDESCRIPTION: Type definition that picks specific HTML input attributes (onBlur, onChange, onFocus, value, placeholder) from InputHTMLAttributes interface for use with useInput hook.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/InputProps.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype InputProps = Pick<InputHTMLAttributes<HTMLInputElement>, \"onBlur\" | \"onChange\" | \"onFocus\" | \"value\" | \"placeholder\">\n```\n\n----------------------------------------\n\nTITLE: Defining SelectSingleContextValue Interface Properties in TypeScript\nDESCRIPTION: Interface definition containing two properties: 'selected' for storing the selected date and optional 'onDayClick' event handler for enabling single date selection.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/SelectSingleContextValue.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SelectSingleContextValue {\n  selected: undefined | Date;\n  onDayClick?: DayClickEventHandler;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DayFocusEventHandler Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the DayFocusEventHandler type alias. It represents a function that takes a Date object, an ActiveModifiers object, and a FocusEvent or KeyboardEvent, and returns void. This type is used for handling focus events on day elements in react-day-picker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DayFocusEventHandler.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDayFocusEventHandler: (day: Date, activeModifiers: ActiveModifiers, e: FocusEvent | KeyboardEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationContext in TypeScript for React DayPicker\nDESCRIPTION: Declares a constant NavigationContext using React's Context API. This context provides navigation functionality for DayPicker component and can be accessed through the useNavigation hook. The context value can be either undefined or of type NavigationContextValue.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/variables/NavigationContext.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst NavigationContext: Context<undefined | NavigationContextValue>\n```\n\n----------------------------------------\n\nTITLE: Defining DateRange Type Interface in TypeScript\nDESCRIPTION: Type declaration for representing a date range with an optional 'from' date and a required 'to' date. Used for matching date ranges where both dates are inclusive, unlike DateInterval.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DateRange.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype DateRange = {\n  from: Date | undefined;\n  to: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Labels Type Declaration in TypeScript\nDESCRIPTION: Type alias defining a map of functions for translating ARIA labels in React Day Picker. Includes functions for day labels, month/year dropdown labels, navigation buttons, week numbers and weekday labels. Note that labelDay is deprecated.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/Labels.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"labelDay\": DayLabel;\n  \"labelMonthDropdown\": () => string;\n  \"labelNext\": NavButtonLabel;\n  \"labelPrevious\": NavButtonLabel;\n  \"labelWeekNumber\": WeekNumberLabel;\n  \"labelWeekday\": WeekdayLabel;\n  \"labelYearDropdown\": () => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Days for Range Selection in TypeScript\nDESCRIPTION: Defines an optional property 'max' to set the maximum number of days that can be selected in a range.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerRangeProps.md#2025-04-18_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n> `optional` **max**: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Styles Property in DayPickerBase Interface (TypeScript)\nDESCRIPTION: Defines an optional 'styles' property for changing inline styles of HTML elements. It uses complex type manipulation with Partial and Omit.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nstyles?: Partial<Omit<StyledElement<CSSProperties>, InternalModifiersElement>>\n```\n\n----------------------------------------\n\nTITLE: Rendering Day Cell Content in React Day Picker (TypeScript/JSX)\nDESCRIPTION: The DayContent function renders the content of a day cell in a calendar component. It takes DayContentProps as its parameter and returns a JSX Element. This function is defined in the src/components/DayContent.tsx file of the react-day-picker project.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/DayContent.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDayContent(props: DayContentProps): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining FocusContextValue Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the FocusContextValue type alias, which includes methods for managing focus on calendar days, as well as properties for the currently focused day and the day that will be focused.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/FocusContextValue.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nFocusContextValue: {\n  \"blur\": () => void;\n  \"focus\": (day) => void;\n  \"focusDayAfter\": () => void;\n  \"focusDayBefore\": () => void;\n  \"focusEndOfWeek\": () => void;\n  \"focusMonthAfter\": () => void;\n  \"focusMonthBefore\": () => void;\n  \"focusStartOfWeek\": () => void;\n  \"focusTarget\": Date | undefined;\n  \"focusWeekAfter\": () => void;\n  \"focusWeekBefore\": () => void;\n  \"focusYearAfter\": () => void;\n  \"focusYearBefore\": () => void;\n  \"focusedDay\": Date | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Row Component Function Signature in React Day Picker\nDESCRIPTION: The Row function component takes RowProps as input and returns a JSX.Element that renders a row in the calendar with days and week number.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/Row.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nRow(props): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining Styles Type Alias in TypeScript for React Day Picker\nDESCRIPTION: This code snippet defines the Styles type alias as a partial of the StyledElement type, omitting InternalModifiersElement. It is used for inline styling of elements in React Day Picker, excluding day modifiers which should be styled using the modifiersStyles prop.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/Styles.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Styles = Partial<Omit<StyledElement<CSSProperties>, InternalModifiersElement>>\n```\n\n----------------------------------------\n\nTITLE: Defining InternalModifiers Type in TypeScript\nDESCRIPTION: Type alias that creates a Record mapping InternalModifier enum values to arrays of Matcher functions. This type is used to manage internal modifiers in React DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/InternalModifiers.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype InternalModifiers = Record<InternalModifier, Matcher[]>\n```\n\n----------------------------------------\n\nTITLE: Specifying Selected Days in TypeScript\nDESCRIPTION: Defines the property for setting the selected days in the DayPickerMultiple component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerMultipleProps.md#2025-04-18_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nselected?: Date[]\n```\n\n----------------------------------------\n\nTITLE: Defining onSelect Event Handler in TypeScript\nDESCRIPTION: Specifies the event handler for when days are added or removed from the selection in the DayPickerMultiple component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerMultipleProps.md#2025-04-18_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nonSelect?: SelectMultipleEventHandler\n```\n\n----------------------------------------\n\nTITLE: Adding a Date to a DateRange in React Day Picker\nDESCRIPTION: The addToRange function adds a day to an existing DateRange, handling undefined values and checking if the day is already in the range. It accepts a day (Date) and an optional range (DateRange) parameter and returns a DateRange or undefined.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/addToRange.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\naddToRange(day, range?): DateRange | undefined\n```\n\n----------------------------------------\n\nTITLE: Defining DayLabel Type Alias in TypeScript for react-day-picker\nDESCRIPTION: This code snippet defines the DayLabel type alias as a function that takes a Date object, ActiveModifiers, and optional options including locale. It returns a string representing the ARIA label for the Day component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DayLabel.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDayLabel: (day: Date, activeModifiers: ActiveModifiers, options?: { locale?: Locale }) => string\n```\n\n----------------------------------------\n\nTITLE: Rendering Styled Select Component in React\nDESCRIPTION: The Dropdown function component takes DropdownProps as input and returns a JSX.Element. It renders a styled select component with a caption and custom drop-down icon. The component is defined in the src/components/Dropdown.tsx file.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/Dropdown.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDropdown(props: DropdownProps): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining SelectMultipleContextValue Interface in TypeScript\nDESCRIPTION: This snippet defines the SelectMultipleContextValue interface with three properties: selected, modifiers, and an optional onDayClick event handler. It includes type annotations and source file references.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/SelectMultipleContextValue.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SelectMultipleContextValue {\n  selected: undefined | Date[];\n  modifiers: SelectMultipleModifiers;\n  onDayClick?: DayClickEventHandler;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Button Component in React with TypeScript\nDESCRIPTION: A TypeScript function component that renders an HTML button element with reset styling. Takes standard HTML button attributes as props and returns a ReactNode. The component omits the ref prop from DetailedHTMLProps and adds RefAttributes for proper ref handling.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/Button.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nButton(props): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Defining ActiveModifiers Type Usage in React DayPicker\nDESCRIPTION: Example demonstrating the usage of ActiveModifiers type to define active modifiers for a calendar day. Shows how to specify both selected and custom modifiers as boolean flags.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/ActiveModifiers.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst activeModifiers: ActiveModifiers = {\n  selected: true,\n  customModifier: true\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Mode Configuration\nDESCRIPTION: Type definition for the multiple selection mode in DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerMultipleProps.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"multiple\"\n```\n\n----------------------------------------\n\nTITLE: WeekNumberProps Interface Definition in TypeScript\nDESCRIPTION: Interface definition specifying the required props for the WeekNumber component. It includes dates property for storing week dates and number property for the week number.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/WeekNumberProps.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WeekNumberProps {\n  dates: Date[];\n  number: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WeekdayLabel Type in TypeScript\nDESCRIPTION: TypeScript type alias for a function that takes a Date object and optional locale settings to generate ARIA-compliant weekday labels. The function accepts a date parameter and optional configuration object containing locale information, returning a formatted string.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/WeekdayLabel.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nWeekdayLabel: (day: Date, options?: { locale?: Locale }) => string\n```\n\n----------------------------------------\n\nTITLE: IconRight Component Function Declaration\nDESCRIPTION: TypeScript function declaration for the IconRight component that renders the next month navigation button. Takes StyledComponent props as a parameter and returns a JSX Element. Located in src/components/IconRight.tsx\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/IconRight.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nIconRight(props: StyledComponent): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Months Function Component Declaration in TypeScript/JSX\nDESCRIPTION: Declaration of the Months function component that renders the wrapper for month grids. It accepts MonthsProps as parameters and returns a JSX Element.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/Months.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Render the wrapper for the month grids.\n */\nMonths(props: MonthsProps): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Rendering IconLeft Navigation Component in TypeScript/JSX\nDESCRIPTION: A React component that renders the previous month navigation button. Takes StyledComponent props as a parameter and returns a JSX Element. Used within the navigation system of the React DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/IconLeft.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nIconLeft(props: StyledComponent): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining DayKeyboardEventHandler Type in TypeScript\nDESCRIPTION: Type definition for a keyboard event handler function that takes a Date object, ActiveModifiers, and KeyboardEvent parameters. Used to handle keyboard interactions with calendar days in React Day Picker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DayKeyboardEventHandler.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDayKeyboardEventHandler: (day: Date, activeModifiers: ActiveModifiers, e: KeyboardEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Fixed Weeks Display with Week Numbers\nDESCRIPTION: Configuration for displaying a fixed 6-week calendar grid with week numbers.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/customization.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker fixedWeeks showWeekNumber />\n```\n\n----------------------------------------\n\nTITLE: Defining WeekNumberLabel Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the WeekNumberLabel type alias as a function that takes a number and an optional options object, and returns a string. It is used to generate ARIA labels for week numbers in the react-day-picker library.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/WeekNumberLabel.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nWeekNumberLabel: (n: number, options?: { locale?: Locale }) => string\n```\n\n----------------------------------------\n\nTITLE: Defining NavButtonLabel Type Alias in TypeScript\nDESCRIPTION: This code defines a type alias for a function that returns ARIA labels for navigation buttons. It takes optional month and options parameters and returns a string.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/NavButtonLabel.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nNavButtonLabel: (month?: Date, options?: { locale?: Locale }) => string\n```\n\n----------------------------------------\n\nTITLE: Rendering IconDropdown Component in React with TypeScript\nDESCRIPTION: The IconDropdown function component renders an icon within a styled dropdown. It accepts a StyledComponent props parameter and returns a JSX Element.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/IconDropdown.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nIconDropdown(props): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining isDayPickerDefault Function in TypeScript\nDESCRIPTION: This function takes DayPickerProps as an argument and returns a boolean indicating whether the props are of type DayPickerDefaultProps. It's a type guard function used for type checking in TypeScript.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/isDayPickerDefault.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisDayPickerDefault(props): props is DayPickerDefaultProps\n```\n\n----------------------------------------\n\nTITLE: Rendering HeadRow Component in React\nDESCRIPTION: The HeadRow function component renders the table head row containing weekday names for a calendar interface. It returns a JSX.Element representing the rendered row.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/HeadRow.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction HeadRow(): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining CustomModifiers Type Alias in TypeScript\nDESCRIPTION: CustomModifiers is defined as a Record type that maps Modifier keys to arrays of Matcher values. It is used for custom modifiers in the DayPicker component, similar to DayModifiers but only accepting arrays of Matchers.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/CustomModifiers.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CustomModifiers = Record<Modifier, Matcher[]>\n```\n\n----------------------------------------\n\nTITLE: Week Number Display\nDESCRIPTION: Basic configuration for displaying week numbers in the calendar.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/customization.mdx#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker showWeekNumber />\n```\n\n----------------------------------------\n\nTITLE: Defining SelectSingleEventHandler Type Alias in TypeScript for React Day Picker\nDESCRIPTION: This type alias defines the function signature for handling single day selection events in React Day Picker. It takes four parameters: the selected day, the previously selected day, active modifiers, and the mouse event. The function doesn't return any value.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/SelectSingleEventHandler.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nSelectSingleEventHandler: (day: Date | undefined, selectedDay: Date, activeModifiers: ActiveModifiers, e: MouseEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Defining FocusContext in TypeScript for React Day Picker\nDESCRIPTION: This snippet defines the FocusContext variable as a React Context. It is used to share information about the focused day for keyboard interactions in the React Day Picker component. The context value can be either undefined or of type FocusContextValue.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/variables/FocusContext.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst FocusContext: Context<undefined | FocusContextValue>\n```\n\n----------------------------------------\n\nTITLE: Defining Footer Component in TypeScript React\nDESCRIPTION: This snippet defines the Footer component as a function that takes FooterProps and returns a JSX.Element. The component is empty by default, allowing for customization through props.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/Footer.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction Footer(props: FooterProps): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: SelectMultipleProvider Function Signature in TypeScript/JSX\nDESCRIPTION: Function signature for SelectMultipleProvider that returns a JSX.Element and takes SelectMultipleProviderProps as input. It provides values for the SelectMultipleContext in the react-day-picker library.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/SelectMultipleProvider.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nSelectMultipleProvider(props): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining SelectMultipleProviderInternal Function in TypeScript/JSX\nDESCRIPTION: This code snippet defines the SelectMultipleProviderInternal function, which takes a single parameter of type SelectMultipleProviderInternalProps and returns a JSX.Element. The function is likely used to provide context for selecting multiple dates in a calendar component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/SelectMultipleProviderInternal.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nSelectMultipleProviderInternal(__namedParameters: SelectMultipleProviderInternalProps): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining DateBefore Type Alias in TypeScript for react-day-picker\nDESCRIPTION: This code snippet defines the DateBefore type alias. It represents an object with a 'before' property of type Date. This type is used to match days falling before the specified date, excluding the date itself.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DateBefore.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DateBefore = {\n  \"before\": Date;\n};\n```\n\n----------------------------------------\n\nTITLE: Default Caption Layout Configuration in TypeScript\nDESCRIPTION: Default value for the captionLayout property showing buttons layout.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerMultipleProps.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuttons\n```\n\n----------------------------------------\n\nTITLE: Defining DayMouseEventHandler Type in TypeScript\nDESCRIPTION: TypeScript type alias definition for a function that handles mouse events on calendar days. Takes a Date object, active modifiers object, and MouseEvent as parameters and returns void.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DayMouseEventHandler.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDayMouseEventHandler: (day: Date, activeModifiers: ActiveModifiers, e: MouseEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Defining StyledElement Type Alias in TypeScript for React Day Picker\nDESCRIPTION: This code snippet defines a type alias called StyledElement that maps various calendar component names to their style definitions. It uses a generic type parameter T which can be either a string (for class names) or CSSProperties (for inline styles).\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/StyledElement.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype StyledElement<T> = {\n  \"button\": T;\n  \"button_reset\": T;\n  \"caption\": T;\n  \"caption_between\": T;\n  \"caption_dropdowns\": T;\n  \"caption_end\": T;\n  \"caption_label\": T;\n  \"caption_start\": T;\n  \"cell\": T;\n  \"day\": T;\n  \"day_disabled\": T;\n  \"day_hidden\": T;\n  \"day_outside\": T;\n  \"day_range_end\": T;\n  \"day_range_middle\": T;\n  \"day_range_start\": T;\n  \"day_selected\": T;\n  \"day_today\": T;\n  \"dropdown\": T;\n  \"dropdown_icon\": T;\n  \"dropdown_month\": T;\n  \"dropdown_year\": T;\n  \"head\": T;\n  \"head_cell\": T;\n  \"head_row\": T;\n  \"month\": T;\n  \"months\": T;\n  \"multiple_months\": T;\n  \"nav\": T;\n  \"nav_button\": T;\n  \"nav_button_next\": T;\n  \"nav_button_previous\": T;\n  \"nav_icon\": T;\n  \"root\": T;\n  \"row\": T;\n  \"table\": T;\n  \"tbody\": T;\n  \"tfoot\": T;\n  \"vhidden\": T;\n  \"weeknumber\": T;\n  \"with_weeknumber\": T;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FooterProps Interface in TypeScript\nDESCRIPTION: Interface definition for the Footer component props that includes an optional displayMonth property of Date type. This interface is used to type-check the properties passed to the Footer component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/FooterProps.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FooterProps {\n  displayMonth?: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DayOfWeek Type Alias in TypeScript for React Day Picker\nDESCRIPTION: This snippet defines the DayOfWeek type alias, which is an object with a 'dayOfWeek' property containing an array of numbers. It's used to match specific days of the week (0-6, where 0 is Sunday) in the React Day Picker library.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DayOfWeek.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DayOfWeek = {\n  \"dayOfWeek\": number[];\n}\n```\n\n----------------------------------------\n\nTITLE: SelectRangeProviderInternal Function Definition in TypeScript React\nDESCRIPTION: Function signature for SelectRangeProviderInternal which is used in the react-day-picker library. It takes a named parameter object of type SelectRangeProviderInternalProps and returns a JSX Element. This function is part of the date range selection context.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/SelectRangeProviderInternal.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nSelectRangeProviderInternal(__namedParameters: SelectRangeProviderInternalProps): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Defining RootContext Type Alias in TypeScript\nDESCRIPTION: Type definition that combines RootContextProps interface with a required children property of type ReactNode. This type is used to define the shape of props accepted by the RootProvider component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/RootContext.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RootContext = RootContextProps & { children: ReactNode }\n```\n\n----------------------------------------\n\nTITLE: Rendering DayPicker Anatomy Images in React\nDESCRIPTION: This code snippet demonstrates how to render images showing the anatomy of the DayPicker component using React JSX. It includes separate images for light and dark modes, with styling for responsive display.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/anatomy.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BrowserWindow shadow={false}>\n  <div style={{ overflow: \"auto\" }}>\n    <a href=\"/img/anatomy-light.png\">\n      <img\n        style={{\n          maxWidth: 600,\n          width: \"100%\",\n          margin: \"2em auto\",\n          display: \"block\"\n        }}\n        alt=\"The elements of a DayPicker component.\"\n        src=\"/img/anatomy-light.png#gh-light-mode-only\"\n      />\n    </a>\n    <a href=\"/img/anatomy-dark.png\">\n      <img\n        style={{\n          maxWidth: 600,\n          width: \"100%\",\n          margin: \"2em auto\",\n          display: \"block\"\n        }}\n        alt=\"The elements of a DayPicker component.\"\n        src=\"/img/anatomy-dark.png#gh-dark-mode-only\"\n      />\n    </a>\n  </div>\n</BrowserWindow>\n```\n\n----------------------------------------\n\nTITLE: Defining DayTouchEventHandler Type in TypeScript\nDESCRIPTION: Type definition for a function that handles touch events on calendar days. Takes a Date object, active modifiers object, and touch event as parameters, returning void.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DayTouchEventHandler.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDayTouchEventHandler: (day: Date, activeModifiers: ActiveModifiers, e: TouchEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Defining SelectRangeModifiers Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the SelectRangeModifiers type alias using TypeScript's Pick utility type. It selects specific modifiers from the Modifiers type that are relevant to range selection, including Disabled, RangeEnd, RangeMiddle, and RangeStart.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/SelectRangeModifiers.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype SelectRangeModifiers = Pick<Modifiers, InternalModifier.Disabled | InternalModifier.RangeEnd | InternalModifier.RangeMiddle | InternalModifier.RangeStart>\n```\n\n----------------------------------------\n\nTITLE: Default Outside Days Display Configuration in TypeScript\nDESCRIPTION: Default configuration value for showing days from adjacent months in the DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerSingleProps.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Defining FocusProviderProps Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the FocusProviderProps type alias. It specifies that the type has a single property 'children' of type ReactNode. This is typically used for components that wrap other components and provide context or functionality.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/FocusProviderProps.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype FocusProviderProps = {\n  \"children\": ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SelectRangeProviderProps Interface Properties in TypeScript\nDESCRIPTION: Interface definition containing two properties: an optional children property of type ReactNode and a required initialProps property of type DayPickerBase.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/SelectRangeProviderProps.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SelectRangeProviderProps {\n  children?: ReactNode;\n  initialProps: DayPickerBase;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DropdownProps Interface in TypeScript\nDESCRIPTION: This code snippet defines the DropdownProps interface, which includes various optional properties for customizing the Dropdown component. It specifies types for aria-label, caption, children, className, name, onChange, style, and value properties.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DropdownProps.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DropdownProps {\n  \"aria-label\"?: string;\n  caption?: ReactNode;\n  children?: ReactNode;\n  className?: string;\n  name?: string;\n  onChange?: ChangeEventHandler<HTMLSelectElement>;\n  style?: CSSProperties;\n  value?: string | number;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring SelectSingleProviderInternal Function in TypeScript/JSX\nDESCRIPTION: This snippet defines the SelectSingleProviderInternal function, which takes a single parameter of type SelectSingleProviderInternal and returns a JSX.Element. The function is likely used as a provider component for the SelectSingle context in the react-day-picker library.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/SelectSingleProviderInternal.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction SelectSingleProviderInternal(__namedParameters: SelectSingleProviderInternal): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Default Locale Configuration in TypeScript\nDESCRIPTION: Default locale configuration for the date picker component set to en-US.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerDefaultProps.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nen-US\n```\n\n----------------------------------------\n\nTITLE: Defining ModifiersClassNames Type in TypeScript\nDESCRIPTION: Type alias that combines a Record of Modifier to string mappings with a partial Record of InternalModifier to string mappings. Used to assign CSS classnames to day elements based on their modifier status.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/ModifiersClassNames.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRecord<Modifier, string> & Partial<Record<InternalModifier, string>>\n```\n\n----------------------------------------\n\nTITLE: Default Page Navigation Configuration in TypeScript\nDESCRIPTION: Default configuration value for paged navigation in the DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerSingleProps.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Default HideHead Configuration in TypeScript\nDESCRIPTION: Default boolean value for hideHead property showing false as default.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerMultipleProps.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Defining DayPickerBase Interface in TypeScript for react-day-picker\nDESCRIPTION: This code snippet defines the DayPickerBase interface, which specifies the props for the DayPicker component. It includes various optional properties for customizing the calendar's appearance and behavior, such as mode, selected, onSelect, fromDate, toDate, and many others.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerContextValue.md#2025-04-18_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface DayPickerBase {\n  /** The initial month to display */\n  defaultMonth?: Date;\n  /** Function to disable day */\n  disableNavigation?: boolean;\n  /** Function to disable day */\n  disabled?: DateAfter | DayOfWeek[] | Matcher | Matcher[];\n  /** The first allowed month (inclusive) */\n  fromDate?: Date;\n  /** Hide the navigation bar */\n  hideHead?: boolean;\n  /** Labels for the ARIA attributes */\n  labels?: Labels;\n  /** The locale(s) to use for formatting dates */\n  locale?: Locale | Locale[];\n  /** The mode to use the calendar */\n  mode?: 'default' | 'multiple' | 'range' | 'single';\n  /** Style to apply to the container element */\n  style?: CSSProperties;\n  /** The last allowed month (inclusive) */\n  toDate?: Date;\n  /** The number of months displayed */\n  numberOfMonths?: number;\n  /** The class name to add to the container element */\n  className?: string;\n  /** Event fired when a day is clicked */\n  onDayClick?: DayClickEventHandler;\n  /** Event fired when the month changes */\n  onMonthChange?: MonthChangeEventHandler;\n  /** Event fired when a selection is made */\n  onSelect?: SelectEventHandler;\n  /** The initial selected day(s) */\n  selected?: Date | Date[] | DateRange | undefined;\n  /** Render function for the footer */\n  footer?: React.ReactNode | ((currentMonth: Date) => React.ReactNode);\n  // ... (other properties)\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Row Component Props\nDESCRIPTION: Interface definition specifying the required properties for the Row component in React-Day-Picker. Includes dates array, displayMonth, and weekNumber properties.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/RowProps.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RowProps {\n  /** The days contained in the week. */\n  dates: Date[];\n\n  /** The month where the row is displayed. */\n  displayMonth: Date;\n\n  /** The number of the week to render. */\n  weekNumber: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Title Property in DayPickerBase Interface (TypeScript)\nDESCRIPTION: Defines an optional 'title' property of type string to add a title attribute to the container element.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle?: string\n```\n\n----------------------------------------\n\nTITLE: Paged Navigation Default Configuration\nDESCRIPTION: Default configuration for paged navigation behavior when displaying multiple months.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Declaring Modifier Type in TypeScript\nDESCRIPTION: Defines a type alias 'Modifier' as a string type, used for representing different styles or states of days in a calendar component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/Modifier.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Modifier = string;\n```\n\n----------------------------------------\n\nTITLE: Updating Class Names in React Day Picker\nDESCRIPTION: Examples of updating class names to match the new naming convention in v9\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/upgrading.mdx#2025-04-18_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n <DayPicker\n   classNames={{\n-    day_disabled: 'day-disabled',\n+    disabled: 'day-disabled', // applies `.day_disabled` to disabled days\n   }}\n />\n```\n\nLANGUAGE: diff\nCODE:\n```\n <DayPicker\n   classNames={{\n-    cell: 'day-cell',\n+    day: 'day-cell',\n-    day: 'day-button',\n+    day_button: 'day-button',\n   }}\n />\n```\n\n----------------------------------------\n\nTITLE: Show Outside Days Default Configuration\nDESCRIPTION: Default configuration for displaying days from adjacent months.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Defining Date Range Properties in DayPickerBase Interface (TypeScript)\nDESCRIPTION: Defines optional properties 'toDate', 'toMonth', and 'toYear' to set the latest date, month, and year for month navigation.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoDate?: Date\ntoMonth?: Date\ntoYear?: number\n```\n\n----------------------------------------\n\nTITLE: Default Week Numbers Display Configuration in TypeScript\nDESCRIPTION: Default configuration value for showing week numbers in the DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerSingleProps.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Default Value for Paged Navigation\nDESCRIPTION: Sets the default value for the pagedNavigation prop which controls month navigation display.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerContextValue.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: CaptionLabelProps Interface Definition\nDESCRIPTION: TypeScript interface defining the props for the CaptionLabel component. Includes optional displayIndex for month position, required displayMonth Date object, and optional id for accessibility.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/CaptionLabelProps.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CaptionLabelProps {\n  displayIndex?: number;  // The index of the month where the caption is displayed\n  displayMonth: Date;    // The month where the caption is displayed\n  id?: string;          // The ID for the heading element\n}\n```\n\n----------------------------------------\n\nTITLE: Default Number of Months Configuration\nDESCRIPTION: Sets the default value for the number of months displayed in the calendar.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n1\n```\n\n----------------------------------------\n\nTITLE: Using containerProps in React Day Picker\nDESCRIPTION: Shows how to use the new containerProps prop in React Day Picker v5.0.0 to pass props to the container div element, improving performance.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n<DayPicker\n-    data-thing=\"foo\"\n+    containerProps={{ 'data-thing': 'foo' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Example Component in React-DayPicker\nDESCRIPTION: This snippet demonstrates the structure of an example component in the React-DayPicker project. Each example is a React component that exports a small application using DayPicker with specific props.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/development/architecture.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function ExampleName() [\n  return <DayPicker {...props} />;\n]\n```\n\n----------------------------------------\n\nTITLE: Reverse Months Default Configuration\nDESCRIPTION: Default configuration for displaying months in reverse order when showing multiple months.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Default Value Setting for Paged Navigation\nDESCRIPTION: Sets the default value for the pagedNavigation property which controls month pagination display.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerRangeProps.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Default Mode Configuration in TypeScript\nDESCRIPTION: Default mode configuration option for the day picker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerDefaultProps.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"default\"\n```\n\n----------------------------------------\n\nTITLE: Using FocusContext Hook in React\nDESCRIPTION: Hook that returns FocusContextValue for handling focus state of elements within React Day Picker components. This hook is designed for internal and custom component implementations.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/useFocusContext.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseFocusContext(): FocusContextValue\n```\n\n----------------------------------------\n\nTITLE: Default Value for captionLayout Property\nDESCRIPTION: Defines the default value for the captionLayout property in DayPickerBase interface.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuttons\n```\n\n----------------------------------------\n\nTITLE: Updating HTML Structure for Accessibility in react-day-picker v6.0.0\nDESCRIPTION: Shows the changes to the HTML structure of the DayPicker component to improve accessibility. A new wrapper div is added inside the main DayPicker div.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n<div className=\"DayPicker\">\n+ <div className=\"DayPicker-wrapper\">\n  <!-- rendered stuff here -->\n+ </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Frontmatter for Documentation Page\nDESCRIPTION: YAML frontmatter configuration that sets up the page display properties, hiding the default title while setting a custom title and defining the sidebar position.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/changelog.mdx#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nhide_title: true\ntitle: Changelog\nsidebar_position: 4\n---\n```\n\n----------------------------------------\n\nTITLE: Default Value for disableNavigation Property\nDESCRIPTION: Defines the default value for the disableNavigation property in DayPickerBase interface.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Installing React Day Picker v9\nDESCRIPTION: Commands to upgrade to the latest version of React Day Picker and remove date-fns if not directly used\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/upgrading.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-day-picker@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm remove date-fns\n```\n\n----------------------------------------\n\nTITLE: Default Month Count Configuration in TypeScript\nDESCRIPTION: Default configuration for the number of months to display in the calendar view.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerDefaultProps.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n1\n```\n\n----------------------------------------\n\nTITLE: Function Signature for SelectRangeProvider in React\nDESCRIPTION: The function signature for SelectRangeProvider which takes SelectRangeProviderProps as a parameter and returns a JSX.Element. This function provides the values for the SelectRangeProvider context.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/SelectRangeProvider.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSelectRangeProvider(props): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Default Locale Configuration in TypeScript\nDESCRIPTION: Default configuration for the locale property in DayPicker component, setting it to en-US.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerContextValue.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nen-US\n```\n\n----------------------------------------\n\nTITLE: Updating DayPicker Input State in JavaScript\nDESCRIPTION: Fixes an issue where the DayPicker input state was not correctly set when the value prop updates in controlled mode.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// When DayPicker input state is controlled, correctly set the input text if the `value` prop updates\n```\n\n----------------------------------------\n\nTITLE: Default Value for hideHead Property\nDESCRIPTION: Defines the default value for the hideHead property in DayPickerBase interface.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Import for React DayPicker v8\nDESCRIPTION: Diff showing the change in CSS import path from the old version to the new version of React DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/upgrading.mdx#2025-04-18_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import `react-day-picker/lib/style.css`\n+ import `react-day-picker/dist/style.css`\n```\n\n----------------------------------------\n\nTITLE: Default Navigation Configuration in TypeScript\nDESCRIPTION: Default boolean value for disableNavigation property showing false as default.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerMultipleProps.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Implementing RootProvider Component in React TypeScript\nDESCRIPTION: A function component that serves as the root context provider for React DayPicker. It accepts RootContext props and returns a JSX Element. Located in src/contexts/RootProvider.tsx at line 28.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/RootProvider.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nRootProvider(props): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Default Value for Reverse Months\nDESCRIPTION: Sets the default value for rendering months in reversed order when numberOfMonths is greater than 1.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerContextValue.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Fixing DayPickerInput Value Recomputation in JavaScript\nDESCRIPTION: Addresses a bug where DayPickerInput value does not recompute when the locale changes.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Fix DayPickerInput value does not recompute on `locale` change (fix #938) (#939)\n```\n\n----------------------------------------\n\nTITLE: Default Value Setting for Week Numbers\nDESCRIPTION: Sets the default value for displaying week numbers in the calendar view.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerRangeProps.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Using disabledDays and selectedDays Props (JSX)\nDESCRIPTION: Shows how to use the new disabledDays and selectedDays props introduced in v2.0.0. These props accept functions that determine which days should be disabled or selected.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<DayPicker\n  selectedDays={(day) => isDaySelected(day)}\n  disabledDays={(day) => isDayDisabled(day)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Default Value Setting for Reverse Months\nDESCRIPTION: Sets the default value for the reverseMonths property which controls the order of month display when multiple months are shown.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerRangeProps.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Defining SelectMultipleContext in TypeScript for React DayPicker\nDESCRIPTION: Creates a React Context for sharing selected days in multiple selection mode. The context value is either undefined or of type SelectMultipleContextValue. It can be accessed using the useSelectMultiple hook.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/variables/SelectMultipleContext.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst SelectMultipleContext: Context<undefined | SelectMultipleContextValue>\n```\n\n----------------------------------------\n\nTITLE: Default Value for Show Outside Days\nDESCRIPTION: Sets the default value for showing days falling in the next or previous month.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerContextValue.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Setting overlayHasFocus in JavaScript\nDESCRIPTION: Updates the overlayHasFocus state to false when hiding after a day click.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Set overlayHasFocus to false in hideAfterDayClick (#941)\n```\n\n----------------------------------------\n\nTITLE: React DayPicker Context Variables Table\nDESCRIPTION: Markdown table listing the context variables used in React DayPicker with their descriptions.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/index.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable                                                    | Description                                                                  |\n| :---------------------------------------------------------- | :--------------------------------------------------------------------------- |\n| [DayPickerContext](variables/DayPickerContext.md)           | The DayPicker context shares the props passed to DayPicker within internal   |\n| [FocusContext](variables/FocusContext.md)                   | The Focus context shares details about the focused day for the keyboard      |\n| [NavigationContext](variables/NavigationContext.md)         | The Navigation context shares details and methods to navigate the months in  |\n| [SelectMultipleContext](variables/SelectMultipleContext.md) | The SelectMultiple context shares details about the selected days when in    |\n| [SelectRangeContext](variables/SelectRangeContext.md)       | The SelectRange context shares details about the selected days when in range |\n| [SelectSingleContext](variables/SelectSingleContext.md)     | The SelectSingle context shares details about the selected days when in      |\n```\n\n----------------------------------------\n\nTITLE: Illustrating Removed Event Handlers in React Day Picker\nDESCRIPTION: Demonstrates the removal of specific month change event handlers in favor of a more general onMonthChange prop.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nonNextMonthClick and onNextMonthClick props have been removed. Use onMonthChange instead.\n```\n\n----------------------------------------\n\nTITLE: Default Month Ordering Configuration in TypeScript\nDESCRIPTION: Default configuration value for reverse month ordering in the DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerSingleProps.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Defining SelectMultipleProviderProps Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the SelectMultipleProviderProps type alias. It specifies two properties: 'children' of type ReactNode and 'initialProps' of type DayPickerBase. This type is likely used for the props of a provider component in the SelectMultiple context of the react-day-picker library.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/SelectMultipleProviderProps.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype SelectMultipleProviderProps = {\n  \"children\": ReactNode;\n  \"initialProps\": DayPickerBase;\n}\n```\n\n----------------------------------------\n\nTITLE: Default FixedWeeks Configuration in TypeScript\nDESCRIPTION: Default boolean value for fixedWeeks property showing false as default.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerMultipleProps.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Documentation Code Block for React-DayPicker Examples\nDESCRIPTION: This snippet shows how code examples are formatted in the documentation markdown files. The 'example' keyword and fileName attribute are used to identify blocks that should be replaced by the source of an actual example.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/development/architecture.mdx#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```tsx example fileName=\"ExampleName.tsx\"\nexport function ExampleName() [\n  return <DayPicker {...props} />;\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Compiler in Watch Mode for React DayPicker\nDESCRIPTION: Command to run the TypeScript compiler in watch mode for the ESM export of React DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm tsc --project tsconfig-esm.json --watch\n```\n\n----------------------------------------\n\nTITLE: Disabling Navigation Buttons with CSS in react-day-picker v6.0.0\nDESCRIPTION: Shows how to hide navigation buttons using CSS when they are not needed, addressing changes in how fromMonth/toMonth props are handled in v6.0.0.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.DayPicker-NavButton--interactionDisabled { display: none; }\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Changelog in React\nDESCRIPTION: This code snippet imports a Changelog component from a markdown file and renders it within the current page. It's typically used in documentation or project websites to display version history.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/changelog.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Changelog from \"../../CHANGELOG.md\";\n\n<Changelog />\n```\n\n----------------------------------------\n\nTITLE: Type Guard Function for DateAfter Type in TypeScript\nDESCRIPTION: This function serves as a type guard that checks if an unknown value matches the DateAfter type. It takes any value as input and returns a boolean with type narrowing, allowing TypeScript to recognize the value as DateAfter in conditional blocks.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/isDateAfterType.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisDateAfterType(value): value is DateAfter\n```\n\n----------------------------------------\n\nTITLE: Defining InputDayPickerProps Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the InputDayPickerProps type alias as a Pick type from DayPickerSingleProps. It includes specific props like fromDate, toDate, locale, month, onDayClick, onMonthChange, selected, and today.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/InputDayPickerProps.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype InputDayPickerProps = Pick<DayPickerSingleProps, \"fromDate\" | \"toDate\" | \"locale\" | \"month\" | \"onDayClick\" | \"onMonthChange\" | \"selected\" | \"today\">\n```\n\n----------------------------------------\n\nTITLE: Default Locale Configuration in TypeScript\nDESCRIPTION: Default configuration for the locale setting in DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerMultipleProps.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nen-US\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up React DayPicker Repository\nDESCRIPTION: Instructions for cloning the React DayPicker repository and installing dependencies using pnpm.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/gpbl/react-day-picker.git\ncd react-day-picker\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Improving TypeScript Typings for React-Day-Picker\nDESCRIPTION: Enhances TypeScript definitions, utilizing TypeScript 3.1 and adding types for formatDate and parseDate functions.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Improve typings, use TypeScript 3.1 (#929)\n// Add formatDate and parseDate to typings (#873)\n// Make `format` optional (#923)\n// Remove `initialMonth` from `defaultProps` (#874)\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode for React DayPicker\nDESCRIPTION: Command to run the tests in watch mode for the React DayPicker project.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm run test-watch\n```\n\n----------------------------------------\n\nTITLE: Building DayPicker Static Website\nDESCRIPTION: Command to generate static website content in the build directory that can be deployed to any static hosting service.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm build\n```\n\n----------------------------------------\n\nTITLE: Interface Declaration - SelectSingleProviderProps in TypeScript\nDESCRIPTION: Interface definition for SelectSingleProvider component props, specifying both optional children property of ReactNode type and required initialProps property of DayPickerBase type.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/SelectSingleProviderProps.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SelectSingleProviderProps {\n  children?: ReactNode;\n  initialProps: DayPickerBase;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale in TypeScript\nDESCRIPTION: Defines the default value for the locale property as 'en-US'.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerSingleProps.md#2025-04-18_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nen-US\n```\n\n----------------------------------------\n\nTITLE: Installing React DayPicker v8 and date-fns Dependency\nDESCRIPTION: Command to upgrade React DayPicker to the latest version and install the new peer dependency date-fns using npm or yarn.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/upgrading.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-day-picker@latest date-fns\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Website for React DayPicker\nDESCRIPTION: Command to run the documentation website for React DayPicker at http://localhost:2001 using pnpm workspace.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter website run start\n```\n\n----------------------------------------\n\nTITLE: Updating Event Handler Signature in React Day Picker\nDESCRIPTION: Demonstrates the change in event handler signature for React Day Picker v5.0.0. The Synthetic Event is now passed as the last argument instead of the first.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\nonDayClick={\n- (e, day, modifiers) => {\n+ (day, modifiers, e) => {\n    e.preventDefault();\n    console.log(day);\n    console.log(modifiers);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Month Configuration in TypeScript\nDESCRIPTION: Default value specification for defaultMonth property.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerMultipleProps.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nThe current month\n```\n\n----------------------------------------\n\nTITLE: Installing DayPicker Website Dependencies\nDESCRIPTION: Command to install the required dependencies for the DayPicker website project.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm\n```\n\n----------------------------------------\n\nTITLE: Updating DayPickerInput Usage for react-day-picker v7.0.0\nDESCRIPTION: Demonstrates how to update DayPickerInput usage after the removal of moment.js dependency, introducing parseDate and formatDate props.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n  import DayPicker from 'react-day-picker/DayPickerInput'\n+ import { formatDate, parseDate, } from 'react-day-picker/moment';\n\n  function MyDayPicker() {\n    return (\n      <DayPickerInput\n        placeholder=\"Please choose a date\"\n        format=\"LL\"\n+       formatDate={formatDate}\n+       parseDate={parseDate}\n      >\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Default Value Setting for Outside Days\nDESCRIPTION: Sets the default value for showing days from adjacent months in the calendar view.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerRangeProps.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Updating DayPickerInput Props for react-day-picker v7.0.0\nDESCRIPTION: Shows how to pass additional props to the input component using the new inputProps prop in DayPickerInput for version 7.0.0.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n<DayPickerInput\n   placeholder=\"Type a day\"\n   value={this.state.selectedDay}\n-  onFocus={myFocusHandler}\n-  className=\"my-input-css\"\n+  inputProps={{\n+   onFocus: myFocusHandler,\n+   className: 'my-input-css,\n+  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining DayPickerRange Mode Property in TypeScript\nDESCRIPTION: Specifies the mode property for the DayPickerRange component, setting it to 'range'.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerRangeProps.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **mode**: `\"range\"`\n```\n\n----------------------------------------\n\nTITLE: Default Value for fixedWeeks Property\nDESCRIPTION: Defines the default value for the fixedWeeks property in DayPickerBase interface.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/interfaces/DayPickerBase.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Day Selection in React DayPicker\nDESCRIPTION: This example shows how to implement single day selection functionality manually with React DayPicker. It tracks the selected date with useState and provides toggle behavior.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/advanced-guides/custom-selections.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nimport { DayPicker, DayPickerProps } from \"react-day-picker\";\n\nexport function CustomSingle() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>();\n\n  const modifiers: DayPickerProps[\"modifiers\"] = {};\n  if (selectedDate) {\n    modifiers.selected = selectedDate;\n  }\n  return (\n    <DayPicker\n      modifiers={modifiers}\n      onDayClick={(day, modifiers) => {\n        if (modifiers.selected) {\n          setSelectedDate(undefined);\n        } else {\n          setSelectedDate(day);\n        }\n      }}\n      footer={selectedDate && `You selected ${selectedDate.toDateString()}`}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DateInterval Type Alias in TypeScript\nDESCRIPTION: Defines a DateInterval type alias with 'after' and 'before' properties of type Date. This type is used to match days falling within a specific date range, excluding the boundary dates.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/type-aliases/DateInterval.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DateInterval = {\n  \"after\": Date;\n  \"before\": Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Deprecated Types in react-day-picker\nDESCRIPTION: This code snippet demonstrates how to update deprecated types in react-day-picker v9 when using TypeScript. It shows replacing 'DayPickerDefaultProps' with 'PropsBase'.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/upgrading.mdx#2025-04-18_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- import type { DayPickerDefaultProps } from 'react-day-picker';\n+ import type { PropsBase } from 'react-day-picker';\n```\n\n----------------------------------------\n\nTITLE: Type Guard Function for DayOfWeek Type in React Day Picker\nDESCRIPTION: This function checks if the provided value is of the DayOfWeek type. It takes an unknown value as input and returns a type predicate indicating whether the value is a DayOfWeek type.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/isDayOfWeekType.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisDayOfWeekType(value): value is DayOfWeek\n```\n\n----------------------------------------\n\nTITLE: Function Signature for useDayRender Hook in React Day Picker\nDESCRIPTION: TypeScript function signature for the useDayRender hook that takes a day date, display month, and button reference as parameters. Returns a DayRender type object used for rendering Day components. This hook is essential when creating custom Day component implementations.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/useDayRender.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseDayRender(day: Date, displayMonth: Date, buttonRef: RefObject<HTMLButtonElement>): DayRender\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Guard for DayPickerSingleProps in TypeScript\nDESCRIPTION: This function serves as a type guard to check if the provided props are of type DayPickerSingleProps. It takes a parameter of type DayPickerContextValue or DayPickerProps and returns a boolean indicating whether the props are DayPickerSingleProps.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/functions/isDayPickerSingle.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nisDayPickerSingle(props): props is DayPickerSingleProps\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Updated Event Handler in React Day Picker\nDESCRIPTION: Shows the new format for event handlers in React Day Picker v1.0.1, where the event is now the first argument.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nonDayClick(e, day, modifiers)\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Selector for DayPicker Styling in v6.0.0\nDESCRIPTION: Demonstrates how to update custom CSS selectors to target the new wrapper element introduced in v6.0.0 for styling the DayPicker component.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- .DayPicker {\n+ .DayPicker-wrapper {\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Deprecated Types Package for React DayPicker\nDESCRIPTION: Command to remove the @types/react-day-picker package, which is no longer needed in version 8.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/upgrading.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @types/react-day-picker\n```\n\n----------------------------------------\n\nTITLE: MIT License Text\nDESCRIPTION: The full MIT license text granting permissions to use, modify and distribute the react-day-picker software, with copyright notice for Giampaolo Bellavite and contributors.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/license.mdx#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2014-2024 Giampaolo Bellavite <io@gpbl.dev> and contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Installing the Latest Version of React DayPicker\nDESCRIPTION: Command to install the latest version of the React DayPicker package using npm. This snippet shows how to update to the latest version of the library.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-day-picker@latest\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Changelog Component\nDESCRIPTION: React/JSX code that imports a Markdown file as a component and renders it within the page.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/changelog.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Changelog from \"../../../CHANGELOG.md\";\n\n<Changelog />\n```\n\n----------------------------------------\n\nTITLE: Running Examples App for React DayPicker\nDESCRIPTION: Command to run the examples app for React DayPicker at http://localhost:5173 using pnpm workspace.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter examples-app run dev\n```\n\n----------------------------------------\n\nTITLE: Updating CommonJS Import for react-day-picker v7.0.0\nDESCRIPTION: Changes the CommonJS import statement to use the default export for react-day-picker version 7.0.0.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- var DayPicker = require('react-day-picker`)\n+ var DayPicker = require('react-day-picker`).default\n```\n\n----------------------------------------\n\nTITLE: Starting DayPicker Local Development Server\nDESCRIPTION: Command to start a local development server with hot-reloading capabilities. Opens a browser window automatically and reflects changes live without server restart.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Enumerations\nDESCRIPTION: Table listing available enumerations in React Day Picker, including InternalModifier which contains names of modifiers used internally by DayPicker.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/index.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Enumeration                                          | Description                                                      |\n| :--------------------------------------------------- | :--------------------------------------------------------------- |\n| [InternalModifier](enumerations/InternalModifier.md) | The name of the modifiers that are used internally by DayPicker. |\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration indicating the draft status of the documentation page.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/development/code-of-conduct.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Interfaces\nDESCRIPTION: Detailed table listing all available interfaces in React Day Picker, including component props, context values, and utility interfaces.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/index.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Interface                                                              | Description                                                                                         |\n| :--------------------------------------------------------------------- | :-------------------------------------------------------------------------------------------------- |\n| [CaptionLabelProps](interfaces/CaptionLabelProps.md)                   | The props for the [CaptionLabel](functions/CaptionLabel.md) component.                              |\n| [CaptionProps](interfaces/CaptionProps.md)                             | Represent the props of the [Caption](functions/Caption.md) component.                               |\n| [CustomComponents](interfaces/CustomComponents.md)                     | Map of the components that can be changed using the `components` prop.                              |\n| [DayContentProps](interfaces/DayContentProps.md)                       | Represent the props for the [DayContent](functions/DayContent.md) component.                        |\n| [DayPickerBase](interfaces/DayPickerBase.md)                           | The base props for the [DayPicker](functions/DayPicker.md) component and the                        |\n| [DayPickerContextValue](interfaces/DayPickerContextValue.md)           | The value of the [DayPickerContext](variables/DayPickerContext.md) extends the props from DayPicker |\n| [DayPickerDefaultProps](interfaces/DayPickerDefaultProps.md)           | The props for the [DayPicker](functions/DayPicker.md) component when using `mode=\"default\"` or      |\n| [DayPickerMultipleProps](interfaces/DayPickerMultipleProps.md)         | The props for the [DayPicker](functions/DayPicker.md) component when using `mode=\"multiple\"`.       |\n| [DayPickerProviderProps](interfaces/DayPickerProviderProps.md)         | The props for the [DayPickerProvider](functions/DayPickerProvider.md).                              |\n| [DayPickerRangeProps](interfaces/DayPickerRangeProps.md)               | The props for the [DayPicker](functions/DayPicker.md) component when using `mode=\"range\"`.          |\n| [DayPickerSingleProps](interfaces/DayPickerSingleProps.md)             | The props for the [DayPicker](functions/DayPicker.md) component when using `mode=\"single\"`.         |\n| [DayProps](interfaces/DayProps.md)                                     | Represent the props used by the [Day](functions/Day.md) component.                                  |\n| [DropdownProps](interfaces/DropdownProps.md)                           | The props for the [Dropdown](functions/Dropdown.md) component.                                      |\n| [FooterProps](interfaces/FooterProps.md)                               | -                                                                                                   |\n| [NavigationContextValue](interfaces/NavigationContextValue.md)         | Represents the value of the [NavigationContext](variables/NavigationContext.md).                    |\n| [RowProps](interfaces/RowProps.md)                                     | The props for the [Row](functions/Row.md) component.                                                |\n| [SelectMultipleContextValue](interfaces/SelectMultipleContextValue.md) | Represents the value of a [SelectMultipleContext](variables/SelectMultipleContext.md).              |\n| [SelectRangeContextValue](interfaces/SelectRangeContextValue.md)       | Represents the value of a [SelectRangeContext](variables/SelectRangeContext.md).                    |\n| [SelectRangeProviderProps](interfaces/SelectRangeProviderProps.md)     | -                                                                                                   |\n| [SelectSingleContextValue](interfaces/SelectSingleContextValue.md)     | Represents the value of a [SelectSingleContext](variables/SelectSingleContext.md).                  |\n| [SelectSingleProviderProps](interfaces/SelectSingleProviderProps.md)   | -                                                                                                   |\n| [UseInputOptions](interfaces/UseInputOptions.md)                       | -                                                                                                   |\n| [UseInputValue](interfaces/UseInputValue.md)                           | Represent the value returned by [useInput](functions/useInput.md).                                  |\n| [WeekNumberProps](interfaces/WeekNumberProps.md)                       | The props for the [WeekNumber](functions/WeekNumber.md) component.                                  |\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Type Aliases for React Day Picker\nDESCRIPTION: A table listing various type aliases used in the React Day Picker library, including their names and brief descriptions. The table uses Markdown syntax for formatting.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/api/index.md#2025-04-18_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n| Type alias                                                                 | Description                                                                                          |\n| :------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------------------- |\n| [ActiveModifiers](type-aliases/ActiveModifiers.md)                         | The modifiers that are matching a day in the calendar. Use the                                       |\n| [ButtonProps](type-aliases/ButtonProps.md)                                 | The props for the [Button](functions/Button.md) component.                                           |\n| [CaptionLayout](type-aliases/CaptionLayout.md)                             | The layout of the caption:                                                                           |\n| [ClassNames](type-aliases/ClassNames.md)                                   | The class names of each element.                                                                     |\n| [CustomModifiers](type-aliases/CustomModifiers.md)                         | A map of matchers used as custom modifiers by DayPicker component. This is                           |\n| [DateAfter](type-aliases/DateAfter.md)                                     | A matcher to match a day falling after the specified date, with the date not                         |\n| [DateBefore](type-aliases/DateBefore.md)                                   | A matcher to match a day falling before the specified date, with the date not                        |\n| [DateFormatter](type-aliases/DateFormatter.md)                             | -                                                                                                    |\n| [DateInterval](type-aliases/DateInterval.md)                               | A matcher to match a day falling before and/or after two dates, where the                            |\n| [DateRange](type-aliases/DateRange.md)                                     | A matcher to match a range of dates. The range can be open. Differently from                         |\n| [DayClickEventHandler](type-aliases/DayClickEventHandler.md)               | -                                                                                                    |\n| [DayFocusEventHandler](type-aliases/DayFocusEventHandler.md)               | -                                                                                                    |\n| [DayKeyboardEventHandler](type-aliases/DayKeyboardEventHandler.md)         | -                                                                                                    |\n| [DayLabel](type-aliases/DayLabel.md)                                       | -                                                                                                    |\n| [DayModifiers](type-aliases/DayModifiers.md)                               | The custom modifiers passed to the [DayPickerBase.modifiers](interfaces/DayPickerBase.md#modifiers). |\n| [DayMouseEventHandler](type-aliases/DayMouseEventHandler.md)               | -                                                                                                    |\n| [DayOfWeek](type-aliases/DayOfWeek.md)                                     | A matcher to match a date being one of the specified days of the week (`0-6`,                        |\n| [DayPickerProps](type-aliases/DayPickerProps.md)                           | -                                                                                                    |\n| [DayPointerEventHandler](type-aliases/DayPointerEventHandler.md)           | -                                                                                                    |\n| [DayRender](type-aliases/DayRender.md)                                     | -                                                                                                    |\n| [DaySelectionMode](type-aliases/DaySelectionMode.md)                       | Selection modes supported by DayPicker.                                                              |\n| [DayTouchEventHandler](type-aliases/DayTouchEventHandler.md)               | -                                                                                                    |\n| [FocusContextValue](type-aliases/FocusContextValue.md)                     | Represents the value of the [FocusContext](variables/FocusContext.md).                               |\n| [FocusProviderProps](type-aliases/FocusProviderProps.md)                   | -                                                                                                    |\n| [Formatters](type-aliases/Formatters.md)                                   | Represent a map of formatters used to render localized content.                                      |\n| [InputDayPickerProps](type-aliases/InputDayPickerProps.md)                 | The props to attach to the DayPicker component when using [useInput](functions/useInput.md).         |\n| [InputProps](type-aliases/InputProps.md)                                   | The props to attach to the input field when using [useInput](functions/useInput.md).                 |\n| [InternalModifiers](type-aliases/InternalModifiers.md)                     | Map of matchers used for the internal modifiers.                                                     |\n| [InternalModifiersElement](type-aliases/InternalModifiersElement.md)       | These elements must not be in the `styles` or `classNames` records as they                           |\n| [Labels](type-aliases/Labels.md)                                           | Map of functions to translate ARIA labels for the relative elements.                                 |\n| [Matcher](type-aliases/Matcher.md)                                         | A value or a function that matches a specific day.                                                   |\n| [Modifier](type-aliases/Modifier.md)                                       | A _modifier_ represents different styles or states of a day displayed in the                         |\n| [Modifiers](type-aliases/Modifiers.md)                                     | The modifiers used by DayPicker.                                                                     |\n| [ModifiersClassNames](type-aliases/ModifiersClassNames.md)                 | The classnames to assign to each day element matching a modifier.                                    |\n| [ModifiersStyles](type-aliases/ModifiersStyles.md)                         | The style to apply to each day element matching a modifier.                                          |\n| [MonthChangeEventHandler](type-aliases/MonthChangeEventHandler.md)         | -                                                                                                    |\n| [MonthsProps](type-aliases/MonthsProps.md)                                 | The props for the [Months](functions/Months.md) component.                                           |\n| [NavButtonLabel](type-aliases/NavButtonLabel.md)                           | -                                                                                                    |\n| [RootContext](type-aliases/RootContext.md)                                 | The props of [RootProvider](functions/RootProvider.md).                                              |\n| [SelectMultipleEventHandler](type-aliases/SelectMultipleEventHandler.md)   | -                                                                                                    |\n| [SelectMultipleModifiers](type-aliases/SelectMultipleModifiers.md)         | Represent the modifiers that are changed by the multiple selection.                                  |\n| [SelectMultipleProviderProps](type-aliases/SelectMultipleProviderProps.md) | -                                                                                                    |\n| [SelectRangeEventHandler](type-aliases/SelectRangeEventHandler.md)         | -                                                                                                    |\n| [SelectRangeModifiers](type-aliases/SelectRangeModifiers.md)               | Represent the modifiers that are changed by the range selection.                                     |\n| [SelectSingleEventHandler](type-aliases/SelectSingleEventHandler.md)       | -                                                                                                    |\n| [StyledComponent](type-aliases/StyledComponent.md)                         | Props of a component that can be styled via classNames or inline-styles.                             |\n| [StyledElement](type-aliases/StyledElement.md)                             | The style (either via class names or via in-line styles) of an element.                              |\n| [Styles](type-aliases/Styles.md)                                           | The inline-styles of each styled element, to use with the `styles` prop. Day                         |\n| [WeekNumberClickEventHandler](type-aliases/WeekNumberClickEventHandler.md) | -                                                                                                    |\n| [WeekNumberFormatter](type-aliases/WeekNumberFormatter.md)                 | -                                                                                                    |\n| [WeekNumberLabel](type-aliases/WeekNumberLabel.md)                         | -                                                                                                    |\n| [WeekdayLabel](type-aliases/WeekdayLabel.md)                               | -                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Code of Conduct in MDX\nDESCRIPTION: This code snippet shows how to import an external Markdown file (CODE_OF_CONDUCT.md) and render it within an MDX documentation page. It demonstrates the pattern of importing Markdown content from the GitHub repository structure into the documentation site.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/development/code-of-conduct.md#2025-04-18_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\nhide_title: true\ntitle: Code Of Conduct\nsidebar_position: 2\n---\n\nimport CodeOfConduct from \"../../../.github/CODE_OF_CONDUCT.md\";\n\n<CodeOfConduct />\n```\n\n----------------------------------------\n\nTITLE: Configuring Week Start Day in react-day-picker\nDESCRIPTION: Sets the first day of the week to Sunday (0) using the weekStartsOn prop, overriding the default locale setting.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/docs/docs/localization.mdx#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker weekStartsOn={0} /> // Start the week on Sunday\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Months in React DayPicker\nDESCRIPTION: Demonstrates how to show multiple months in the calendar using the 'numberOfMonths' prop.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/website/versioned_docs/version-8.10.1/using-daypicker/customization.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DayPicker numberOfMonths={2} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions in Markdown Table\nDESCRIPTION: This markdown table shows which versions of react-day-picker are supported for security updates. It uses checkmarks and crosses to indicate support status.\nSOURCE: https://github.com/gpbl/react-day-picker/blob/main/SECURITY.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 8.9     | :white_check_mark: |\n| < 8.9   | :x:                |\n```"
  }
]