[
  {
    "owner": "avo-hq",
    "repo": "docs.avohq.io",
    "content": "TITLE: Basic Avo Resource Definition for Post Model - Ruby\nDESCRIPTION: Defines a minimal Avo resource class for the Post model with no includes or search customization. The 'fields' method declares a single 'id' field as the record identifier. This file is meant to be a starting point for further resource definition and enables basic CRUD operations on Post records in the Avo admin panel.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.includes = []\n  # self.search = {\n  #   query: -> { query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false) }\n  # }\n\n  def fields\n    field :id, as: :id\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Number Field in Avo\nDESCRIPTION: This code snippet demonstrates how to define a number field named `age` in Avo. The `as: :number` option specifies that this field should be rendered as a number input. No additional options like `min`, `max`, or `step` are specified, so the default values will be used.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/number.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :age, as: :number\n```\n\n----------------------------------------\n\nTITLE: Extending Avo Base Resource | Ruby\nDESCRIPTION: This code shows how to create a custom `Avo::BaseResource` file in your application (`app/avo/base_resource.rb`) that inherits from `Avo::Resources::Base`. This allows you to add methods or override behavior (like the `field` method shown here) that all your resources will inherit, providing a way to implement shared functionality across your admin interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_23\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/base_resource.rb\nmodule Avo\n  class BaseResource < Avo::Resources::Base\n    # Example custom method: make all number fields cast their values to float\n    def field(id, **args, &block)\n      if args[:as] == :number\n        args[:format_using] = -> { value.to_f }\n      end\n\n      super(id, **args, &block)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Avo Resource for Post Model with Fields and Associations - Ruby\nDESCRIPTION: Defines the Avo resource class for the Post model aligning with its schema, associations, and enums. It declares no extra includes or active search configuration but specifies a comprehensive 'fields' method covering standard attributes (id, name, body, is_featured, published_at, user_id, status), file attachments (cover_photo, audio, attachments), relationship fields (user as belongs_to; comments and reviews as has_many), and tagging support. The 'status' field is a select input bound to the Post.statuses enum and facilitates rich admin CRUD capabilities leveraging Avo and Rails features.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.includes = []\n  # self.search = {\n  #   query: -> { query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false) }\n  # }\n\n  def fields\n    field :id, as: :id\n    field :name, as: :text\n    field :body, as: :textarea\n    field :is_featured, as: :boolean\n    field :published_at, as: :datetime\n    field :user_id, as: :number\n    field :status, as: :select, enum: ::Post.statuses\n    field :cover_photo, as: :file\n    field :audio, as: :file\n    field :attachments, as: :files\n    field :user, as: :belongs_to\n    field :comments, as: :has_many\n    field :reviews, as: :has_many\n    field :tags, as: :tags\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including a Specific Helper in Avo Fields (Ruby)\nDESCRIPTION: Provides a solution to make a specific helper (e.g., `PostsHelper`) available in Avo fields. It involves creating a module (`FieldExtensions`) that includes the desired helper and then including this module into `Avo::Fields::BaseField` within a `Rails.configuration.to_prepare` block, typically in an initializer like `config/initializers/avo.rb`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/use-own-helpers-in-resource-files.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # Usual Avo config\nend\n\nmodule FieldExtensions\n  # Include a specific helper\n  include PostsHelper\nend\n\nRails.configuration.to_prepare do\n  Avo::Fields::BaseField.include FieldExtensions\nend\n```\n\n----------------------------------------\n\nTITLE: Assigning String Representation of Avo Resource Class to use_resource Option (Ruby)\nDESCRIPTION: Assigns the resource class via its string representation (\"Avo::Resources::Post\") to the `use_resource` option, which Avo accepts as an alternative to a direct class reference. Requires the Avo gem to correctly resolve the string to a resource class, and expects the named class to exist within the application's Avo resources.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/associations_use_resource_option_common.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n\"Avo::Resources::Post\"\n```\n\n----------------------------------------\n\nTITLE: Configuring authenticate_with method - Ruby\nDESCRIPTION: This snippet shows how to configure the `authenticate_with` attribute to handle authentication. This takes a block, which is evaluated as a `before_action` in Avo's `ApplicationController`.  You implement the authentication logic within this block.  The example uses `authenticate_admin_user`, but any custom authentication logic can be used, including redirecting based on session data, or any other authentication method provided within the Rails application. The input is any before_action authentication.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authentication.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.authenticate_with do\n    authenticate_admin_user\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.authenticate_with do\n    redirect_to '/' unless session[:user_id] == 1 # hard code user ids here\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Organizing Fields for Specific Avo Views Using Ruby\nDESCRIPTION: Shows how to organize and declare fields separately for different CRUD views in Avo: display_fields (index and show) and form_fields (edit, update, new, create). It includes a custom helper method (tool_fields) that adds additional fields with specific options like hiding on forms. This pattern allows flexible configuration of visible and editable fields per view context. Dependencies include Ruby and the Avo gem, using standard method definitions and field options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef display_fields\n  base_fields\n  tool_fields\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef form_fields\n  base_fields\n  tool_fields\n  tool Avo::ResourceTools::CityEditor, only_on: :forms\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Notice that even if those fields are hidden on the form, we still include them on `form_fields`.\n# This is because we want to be able to edit them using the tool.\n# When submitting the form, we need this fields declared on the resource in order to know how to process them and fill the record.\ndef tool_fields\n  with_options hide_on: :forms do\n    field :name, as: :text, help: \"The name of your city\", filterable: true\n    field :population, as: :number, filterable: true\n    field :is_capital, as: :boolean, filterable: true\n    field :features, as: :key_value\n    field :image_url, as: :external_image\n    field :tiny_description, as: :markdown\n    field :status, as: :badge, enum: ::City.statuses\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef base_fields\n  field :id, as: :id\n  field :coordinates, as: :location, stored_as: [:latitude, :longitude]\n  field :city_center_area,\n    as: :area,\n    geometry: :polygon,\n    mapkick_options: {\n      style: \"mapbox://styles/mapbox/satellite-v9\",\n      controls: true\n    },\n    datapoint_options: {\n      label: \"Paris City Center\",\n      tooltip: \"Bonjour mes amis!\",\n      color: \"#009099\"\n    }\n  field :description,\n    as: :trix,\n    attachment_key: :description_file,\n    visible: -> { resource.params[:show_native_fields].blank? }\n  field :metadata,\n    as: :code,\n    format_using: -> {\n      if view.edit?\n        JSON.generate(value)\n      else\n        value\n      end\n    },\n    update_using: -> do\n      ActiveSupport::JSON.decode(value)\n    end\n\n  field :created_at, as: :date_time, filterable: true\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Text Field in Avo Admin - Ruby\nDESCRIPTION: This snippet demonstrates how to declare a text field using the `field` method in an Avo resource, specifying the database column (`name`) and the field type (`as: :text`). This allows users to view, edit, and update the `name` field in the admin panel.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text\n```\n\n----------------------------------------\n\nTITLE: Customizing current_user Resource Name for Sign-out (Ruby)\nDESCRIPTION: This snippet customizes the resource name part of Avo's sign-out path resolution. Add to config/initializers/avo.rb to set config.current_user_resource_name (e.g., :current_user or :current_admin), matching the destroy_session path your app provides. Adjust this if your log-out path is not destroy_user_session_path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authentication.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_resource_name = :current_user\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON with pretty_generate (Ruby)\nDESCRIPTION: This code formats a JSON object for display using `JSON.pretty_generate`. It retrieves the `meta` field from the record, converts it to a JSON representation with `.as_json`, and then applies `JSON.pretty_generate` for formatting. This uses the `:code` field type with JavaScript syntax highlighting. This also ensures the field is only displayed when data is present. It provides a readable display within the Avo admin interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/format-ruby-object-to-json.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, as: :code, language: 'javascript' do\n  if record.meta.present?\n    JSON.pretty_generate(record.meta.as_json)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting a field as readonly in Ruby\nDESCRIPTION: Makes a field readonly, preventing users from editing it on New and Edit views. Note that this doesn't prevent DOM manipulation to bypass the restriction.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, readonly: true\n```\n\n----------------------------------------\n\nTITLE: Defining Attachments on Models and Eager Loading with self.attachments in Avo Resource - Ruby\nDESCRIPTION: Illustrates how to specify attachments on a model using ActiveStorage methods and then eager load them with self.attachments in Avo resource to optimize loading of attached files on the Index view. Requires ActiveStorage set up in the Rails app and the Avo framework. The sample includes both model and corresponding resource configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  has_one_attached :cover_photo\n  has_one_attached :audio\n  has_many_attached :attachments\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.attachments = [:cover_photo, :audio, :attachments]\nend\n```\n\n----------------------------------------\n\nTITLE: Extending Avo BaseResourcesController for Custom Authentication - Ruby\nDESCRIPTION: Creates a subclass of Avo::ResourcesController named Avo::BaseResourcesController to add custom authentication logic before any resource controller actions. This example includes an Authentication module and runs a 'before_action' filter 'is_logged_in?' to enforce login checks. This extension enables injection of shared logic such as authentication across all Avo admin controllers by having resource controllers inherit from this base.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/avo/base_resources_controller.rb\nclass Avo::BaseResourcesController < Avo::ResourcesController\n  include AuthenticationController::Authentication\n\n  before_action :is_logged_in?\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Model and Avo Resource\nDESCRIPTION: This command generates a Rails model along with the corresponding Avo resource. The command creates a model named 'car' with 'make' (string) and 'mileage' (integer) attributes, and an Avo resource file for managing it in the CRUD UI. It simplifies the setup of an admin interface for the model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate model car make:string mileage:integer\n```\n\n----------------------------------------\n\nTITLE: Defining HasAndBelongsToMany Association in Ruby with Avo\nDESCRIPTION: Basic implementation of a HasAndBelongsToMany association field in Avo. This defines a relationship to the users resource, allowing many-to-many associations between the current model and the users model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/associations/has_and_belongs_to_many.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :users, as: :has_and_belongs_to_many\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Country/City Selects with Stimulus and Rails in Avo\nDESCRIPTION: Demonstrates how to create dependent select fields (country and city) in an Avo resource form. Includes the Avo resource definition (Ruby) with Stimulus targets/actions, Rails routing, a controller endpoint to fetch cities based on the selected country, the model providing data, and the Stimulus controller (JavaScript) handling the fetch request, updating the city options, and managing loading states. This setup enables dynamic updates to the city field when the country field changes in the 'New' and 'Edit' views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/stimulus-integration.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/course.rb\nclass Avo::Resources::Course < Avo::BaseResource\n  self.stimulus_controllers = \"course-resource\"\n\n  def fields\n    field :id, as: :id\n    field :name, as: :text\n    field :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h, html: {\n      edit: {\n        input: {\n          data: {\n            course_resource_target: \"countryFieldInput\", # Make the input a target\n            action: \"input->course-resource#onCountryChange\" # Add an action on change\n          }\n        }\n      }\n    }\n    field :city, as: :select, options: Course.cities.values.flatten.map { |city| [city, city] }.to_h, html: {\n      edit: {\n        input: {\n          data: {\n            course_resource_target: \"cityFieldInput\" # Make the input a target\n          }\n        }\n      }\n    }\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  if defined? ::Avo\n    Avo::Engine.routes.draw do\n      scope :resources do\n        get \"courses/cities\", to: \"courses#cities\"\n      end\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::CoursesController < Avo::ResourcesController\n  def cities\n    render json: get_cities(params[:country]) # return an array of cities based on the country we received\n  end\n\n  private\n\n  def get_cities(country)\n    return [] unless Course.countries.include?(country)\n\n    Course.cities[country.to_sym]\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Course < ApplicationRecord\n  def self.countries\n    [\"USA\", \"Japan\", \"Spain\", \"Thailand\"]\n  end\n\n  def self.cities\n    {\n      USA: [\"New York\", \"Los Angeles\", \"San Francisco\", \"Boston\", \"Philadelphia\"],\n      Japan: [\"Tokyo\", \"Osaka\", \"Kyoto\", \"Hiroshima\", \"Yokohama\", \"Nagoya\", \"Kobe\"],\n      Spain: [\"Madrid\", \"Valencia\", \"Barcelona\"],\n      Thailand: [\"Chiang Mai\", \"Bangkok\", \"Phuket\"]\n    }\n  end\nend\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\";\n\nconst LOADER_CLASSES = \"absolute bg-gray-100 opacity-10 w-full h-full\";\n\nexport default class extends Controller {\n  static targets = [\"countryFieldInput\", \"cityFieldInput\", \"citySelectWrapper\"];\n\n  static values = {\n    view: String,\n  };\n\n  // Te fields initial value\n  static initialValue;\n\n  get placeholder() {\n    return this.cityFieldInputTarget.ariaPlaceholder;\n  }\n\n  set loading(isLoading) {\n    if (isLoading) {\n      // create a loader overlay\n      const loadingDiv = document.createElement(\"div\");\n      loadingDiv.className = LOADER_CLASSES;\n      loadingDiv.dataset.target = \"city-loader\";\n\n      // add the loader overlay\n      this.citySelectWrapperTarget.prepend(loadingDiv);\n      this.citySelectWrapperTarget.classList.add(\"opacity-50\");\n    } else {\n      // remove the loader overlay\n      this.citySelectWrapperTarget\n        .querySelector('[data-target=\"city-loader\"]')\n        .remove();\n      this.citySelectWrapperTarget.classList.remove(\"opacity-50\");\n    }\n  }\n\n  async connect() {\n    // Add the controller functionality only on forms\n    if ([\"edit\", \"new\"].includes(this.viewValue)) {\n      this.captureTheInitialValue();\n\n      // Trigger the change on load\n      await this.onCountryChange();\n    }\n  }\n\n  // Read the country select.\n  // If there's any value selected show the cities and prefill them.\n  async onCountryChange() {\n    if (this.hasCountryFieldInputTarget && this.countryFieldInputTarget) {\n      // Get the country\n      const country = this.countryFieldInputTarget.value;\n      // Dynamically fetch the cities for this country\n      const cities = await this.fetchCitiesForCountry(country);\n\n      // Clear the select of options\n      Object.keys(this.cityFieldInputTarget.options).forEach(() => {\n        this.cityFieldInputTarget.options.remove(0);\n      });\n\n      // Add blank option\n      this.cityFieldInputTarget.add(new Option(this.placeholder));\n\n      // Add the new cities\n      cities.forEach((city) => {\n        this.cityFieldInputTarget.add(new Option(city, city));\n      });\n\n      // Check if the initial value is present in the cities array and select it.\n      // If not, select the first item\n      const currentOptions = Array.from(this.cityFieldInputTarget.options).map(\n        (item) => item.value\n      );\n      if (currentOptions.includes(this.initialValue)) {\n        this.cityFieldInputTarget.value = this.initialValue;\n      } else {\n        // Select the first item\n        this.cityFieldInputTarget.value =\n          this.cityFieldInputTarget.options[0].value;\n      }\n    }\n  }\n\n  // Private\n\n  captureTheInitialValue() {\n    this.initialValue = this.cityFieldInputTarget.value;\n  }\n\n  async fetchCitiesForCountry(country) {\n    if (!country) {\n      return [];\n    }\n\n    this.loading = true;\n\n    const response = await fetch(\n      `${window.Avo.configuration.root_path}/resources/courses/cities?country=${country}`\n    );\n    const data = await response.json();\n\n    this.loading = false;\n\n    return data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirection Path After Create and Update with self.after_create_path / self.after_update_path in Avo Resource - Ruby\nDESCRIPTION: Sets custom redirection behavior after resource creation or update by assigning values (:show, :edit, :index) to self.after_create_path and self.after_update_path in the resource. Useful for workflow customization following resource changes; defaults to :show if not set.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.after_create_path = :index\n  self.after_update_path = :edit\nend\n```\n\n----------------------------------------\n\nTITLE: Defining title as a lambda for dynamic computation\nDESCRIPTION: This pattern shows assigning a lambda to the `title` attribute, allowing dynamic computation of the title based on the resource or record. It provides direct access to the record object within the lambda for custom title generation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_23\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/comment.rb\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.title = -> {\n    ActionView::Base.full_sanitizer.sanitize(record.body).truncate 30\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Turbo Behavior in Avo (Ruby)\nDESCRIPTION: Demonstrates configuring Turbo options within Avo using `config.turbo` in the initializer. This example shows setting `instant_click: true` within a lambda assigned to the configuration option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.turbo = -> do\n  {\n    instant_click: true\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring a Time Field with Flatpickr in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to define a custom form field named 'starting_at' as a Time field within a Ruby application, utilizing Flatpickr for time selection. The configuration sets the field to use a 24-hour picker, specifies picker and display formats, and enables relative time adjustment by default. Required dependencies include Ruby, the field configuration system (likely in Rails or AvoHQ), and integration with Flatpickr and Luxon for formatting. The main parameters are 'as' for field type, 'picker_format' for the edit/new views, 'format' for the index/show views, 'relative' to control timezone adjustments, and 'picker_options' for direct Flatpickr configuration. Inputs are user-selected times, outputs are formatted strings according to the defined tokens.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/time.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :starting_at,\n  as: :time,\n  picker_format: 'H:i',\n  format: \"HH:mm\",\n  relative: true,\n  picker_options: {\n    time_24hr: true\n  }\n```\n\n----------------------------------------\n\nTITLE: Skip Show View Configuration in Avo (Ruby)\nDESCRIPTION: This code snippet shows how to skip the default show view and use the edit view instead. Setting the `skip_show_view` configuration option to true in the `avo.rb` initializer achieves this.  After setting the option, Avo will redirect to the edit view after completing actions such as updating a record or running an action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.skip_show_view = true\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling field conditionally based on view in Avo using Ruby\nDESCRIPTION: This code snippet demonstrates how to disable a field based on the current view (e.g., edit) using a lambda expression. It utilizes the `disabled` option and provides access to Avo execution context variables like `view`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nfield :id, as: :number, disabled: -> { view == :edit } # make the field disabled only on the new edit view\n```\n\n----------------------------------------\n\nTITLE: Adding Ransack Dependency to Gemfile\nDESCRIPTION: Shows how to add the Ransack gem as a dependency to your application, which is required for Avo's search functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\ngem 'ransack'\n```\n\n----------------------------------------\n\nTITLE: Formatting Field Values Using format_using Block in Avo (Ruby)\nDESCRIPTION: Explains how to use format_using to customize how a field's value is displayed in all views. The block has access to value, view, and contextual objects. Example formats a boolean field as a thumb emoji (👍/👎) except in form views, where the raw value is displayed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :is_writer, as: :text, format_using: -> {\n  if view.form?\n    value\n  else\n    value.present? ? '👍' : '👎'\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: Team Model and Avo Resource with Has Many Users Association - Ruby\nDESCRIPTION: Defines the Team model and its associated Avo resource where the resource title is the team name. The resource declares fields for id with link, team name text, and a has_many association to users. Avo infers this association to link to the User resource, allowing the admin UI to display associated team users. Supports nested resource rendering within the admin interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/team.rb\nclass Team < ApplicationRecord\nend\n\n# app/avo/resources/team.rb\nclass Avo::Resources::Team < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :name, as: :text\n    field :users, as: :has_many\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Iconed Items to Avo Profile Menu in Ruby\nDESCRIPTION: Configures the profile menu of the Avo interface to include custom menu items with icons. The profile menu automatically includes a sign-out link, but developers can add additional items using link_to with icon options to enhance the user profile navigation experience.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.profile_menu = -> {\n    link_to \"Profile\", path: \"/profile\", icon: \"user-circle\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Set Sign Out Path for Avo\nDESCRIPTION: Configures Avo to use `sessions_path` for signing out the user, aligning with the `SessionsController` used by the Rails authentication scaffold. This ensures the sign-out link in Avo directs to the correct path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rails-authentication-scaffold.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # other pieces of configuration\n\n  # tell Avo how to sign out the authenticated user.\n  config.sign_out_path_name = :session_path\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the Post Model\nDESCRIPTION: This Ruby code defines the Post model including attributes, validations, and associations. The model defines a schema for the posts, sets validations for the 'name' attribute, and includes associations to cover photo, audio, attachments, users, comments, reviews, and tags. This model is associated with the Avo resource allowing for data management.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# == Schema Information\n#\n# Table name: posts\n#\n#  id           :bigint           not null, primary key\n#  name         :string\n#  body         :text\n#  is_featured  :boolean\n#  published_at :datetime\n#  user_id      :bigint\n#  created_at   :datetime         not null\n#  updated_at   :datetime         not null\n#  status       :integer          default(\"draft\")\n#\nclass Post < ApplicationRecord\n  enum status: [:draft, :published, :archived]\n\n  validates :name, presence: true\n\n  has_one_attached :cover_photo\n  has_one_attached :audio\n  has_many_attached :attachments\n\n  belongs_to :user, optional: true\n  has_many :comments, as: :commentable\n  has_many :reviews, as: :reviewable\n\n  acts_as_taggable_on :tags\nend\n```\n\n----------------------------------------\n\nTITLE: Allowing Field Editing Through Associations in Ruby\nDESCRIPTION: Demonstrates how to keep a belongs_to field enabled when visiting through an association using allow_via_detaching option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations/belongs_to.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentResource < Avo::BaseResource\n  self.title = :id\n\n  field :id, as: :id\n  field :body, as: :textarea\n\n  field :commentable,\n    as: :belongs_to,\n    polymorphic_as: :commentable,\n    types: [::Post, ::Project],\n    allow_via_detaching: true\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Fields with Conditional Logic in Avo Resource Using Ruby\nDESCRIPTION: Demonstrates defining fields within an Avo resource class with conditional logic to display or hide fields based on runtime context, such as the current user's admin status. The code shows how to use built-in variables like current_user for field visibility. Prerequisites include the Avo gem and a configured user model with an is_admin? method. Inputs include user context, and output is conditional display/editing of the 'cv' field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id\n    field :first_name, as: :text\n    field :last_name, as: :text\n    field :email, as: :text\n    field :is_admin?, as: :boolean\n    field :active, as: :boolean\n\n    if current_user.is_admin?\n      field :cv, as: :file\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing field components in Ruby\nDESCRIPTION: Shows how to customize the view components used for rendering a field using both hash and block syntax approaches.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nfield :description,\n  as: :text,\n  components: {\n    index_component: Avo::Fields::Admin::TextField::IndexComponent,\n    show_component: Avo::Fields::Admin::TextField::ShowComponent,\n    edit_component: \"Avo::Fields::Admin::TextField::EditComponent\"\n  }\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfield :description,\n  as: :text,\n  components: -> do\n    {\n      show_component: Avo::Fields::Admin::TextField::ShowComponent,\n      edit_component: \"Avo::Fields::Admin::TextField::EditComponent\"\n    }\n  end\n```\n\n----------------------------------------\n\nTITLE: Defining Avo CSV Export Action (Ruby)\nDESCRIPTION: This Ruby class defines an Avo action named 'Export CSV' that allows users to select records and export their data to a CSV file. It inherits from `Avo::BaseAction`, defines user-selectable columns using the `fields` method, and implements the CSV generation and download logic within the `handle` method. It utilizes Ruby's built-in CSV library.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/export-to-csv.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/export_csv.rb\nclass Avo::Actions::ExportCsv < Avo::BaseAction\n  self.name = \"Export CSV\"\n  self.no_confirmation = false\n  self.standalone = true\n\n  def fields\n    # Add more fields here for custom user-selected columns\n    field :id, as: :boolean\n    field :created_at, as: :boolean\n  end\n\n  def handle(records:, fields:, resource:, **args)\n    # uncomment if you want to download all the records if none was selected\n    # records = resource.model_class.all if records.blank?\n\n    return error \"No record selected\" if records.blank?\n\n    # uncomment to get all the models' attributes.\n    # attributes = get_attributes_from_record records.first\n\n    # uncomment to get some attributes\n    # attributes = get_some_attributes\n\n    attributes = get_attributes_from_fields fields\n\n    # uncomment to get all the models' attributes if none were selected\n    # attributes = get_attributes_from_record records.first if attributes.blank?\n\n    file = CSV.generate(headers: true) do |csv|\n      csv << attributes\n\n      records.each do |record|\n        csv << attributes.map do |attr|\n          record.send(attr)\n        end\n      end\n    end\n\n    download file, \"#{resource.plural_name}.csv\"\n  end\n\n  def get_attributes_from_record(record)\n    record.class.columns_hash.keys\n  end\n\n  def get_attributes_from_fields(fields)\n    fields.select { |key, value| value }.keys\n  end\n\n  def get_some_attributes\n    [\"id\", \"created_at\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Avo authentication using authenticate\\_with method\nDESCRIPTION: Set the `authenticate_with` option in the Avo initializer with a block containing a method call, like `<code>authenticate_admin_user</code></code>. This block is evaluated as a `before_action` in Avo's `ApplicationController` to handle authentication logic before accessing Avo pages.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authentication.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.authenticate_with do\n    authenticate_admin_user\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Detailed Avo Resource Fields with Customization for Post Model - Ruby\nDESCRIPTION: Shows an advanced example of the 'Post' Avo resource file, emphasizing rich field configurations. It sets the resource title attribute, defines various field types including 'trix' editor for body with placeholder and display options, image file fields with linking, boolean flags, and computed properties like 'is_published' with custom logic. Also demonstrates belongs_to association field customization with placeholder support. This snippet users Avo DSL to tailor admin UI presentation and behavior for better UX.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.title = :id\n  self.includes = []\n\n  def fields\n    field :id, as: :id\n    field :name, as: :text, required: true\n    field :body, as: :trix, placeholder: \"Add the post body here\", always_show: false\n    field :cover_photo, as: :file, is_image: true, link_to_record: true\n    field :is_featured, as: :boolean\n\n    field :is_published, as: :boolean do\n      record.published_at.present?\n    end\n\n    field :user, as: :belongs_to, placeholder: \"—\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Determining Avo View Context with Symbol Comparison in Ruby\nDESCRIPTION: Uses direct symbol comparison (view == :show, etc.) to branch logic based on the resource view. This Ruby snippet is concise and idiomatic for developers preferring symbols in conditionals. Requires the view object (Avo::ViewInquirer); no additional dependencies. Inputs are symbols representing each view, with outputs being code branches for CRUD contexts; best suited where input normalization is enforced.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/views.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nif view == :show\n  # Code for the \"show\" view\nelsif view == :index\n  # Code for the \"index\" view\nelsif view == :edit\n  # Code for the \"edit\" view\nelsif view == :new\n  # Code for the \"new\" view\nend\n\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Policy Class for an Avo Resource in Ruby\nDESCRIPTION: Explains how to override Avo's default policy inference (based on the resource's model class) by explicitly assigning a custom policy class (e.g., `PhotoCommentPolicy`). This is done within the Avo resource definition using `self.authorization_policy = PolicyClassName`. This feature requires Avo version 2.17 or later.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/photo_comment.rb\nclass Avo::Resources::PhotoComment < Avo::BaseResource\n  self.model_class = \"Comment\"\n  self.authorization_policy = PhotoCommentPolicy\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Basic and Default Hidden Fields in Avo (Ruby)\nDESCRIPTION: Demonstrates defining a hidden input field in Avo using `as: :hidden`. The first example shows a basic hidden field `group_id`. The second example shows a `user_id` hidden field with a default value dynamically set using a lambda (`-> { current_user.id }`). These fields render as `<input type=\"hidden\" />` on New/Edit views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/hidden.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# Basic\nfield :group_id, as: :hidden\n\n# With default\nfield :user_id, as: :hidden, default: -> { current_user.id }\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Action Links in Avo (Ruby)\nDESCRIPTION: This snippet shows how to use the `link_arguments` class method on an Avo action class to dynamically generate a path and data hash for linking to a resource action. It requires the action class and a resource instance, optionally including specific arguments to customize the action invocation. The example demonstrates embedding this functionality within a field definition in a resource to generate an editable text link. Inputs include a resource instance and any action-specific arguments; outputs are a path string and a data attribute hash used for the link_to helper. Dependencies include Avo's resource and action classes and Rails' link_to helper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/guides-and-tutorials.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  field :name, as: :text, name: \"Name (click to edit)\", only_on: :index do\n    path, data = Avo::Actions::City::Update.link_arguments(\n      resource: resource,\n      arguments: {\n        cities: Array[resource.record.id],\n        render_name: true\n      }\n    )\n\n    link_to resource.record.name, path, data: data\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Record Previews in Avo Resources with Ruby\nDESCRIPTION: This snippet demonstrates how to add a preview field to an Avo resource and configure which fields should appear in the preview popover. It uses the show_on: :preview option to specify fields that should be visible in the preview, and hide_on: :index to control visibility in other contexts.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/record-previews.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Team < Avo::BaseResource\n  def fields\n    field :preview, as: :preview\n    field :name,\n     as: :text,\n     sortable: true,\n     show_on: :preview\n    field :color,\n      as: Avo::Fields::ColorPickerField,\n      hide_on: :index,\n      show_on: :preview\n    field :description,\n      as: :textarea,\n      show_on: :preview\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Custom Link Field Using Avo Text Field in Ruby\nDESCRIPTION: Defines a custom link field named partner_home on an Avo resource using the format_using option with a lambda. The field formats the stored URL as a clickable link opening in a new browser tab. Dependencies include the Avo framework and a partner URL helper method avo.resources_partner_url. The lambda receives the current model to construct the related partner URL dynamically.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/custom-link-field.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# with the format_using option\nfield :partner_home, as: :text, format_using: -> { link_to(value, value, target: \"_blank\") } do |model, *args|\n  avo.resources_partner_url model.partner.id\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Sortable Block for Associations - Ruby\nDESCRIPTION: This snippet extends the previous example. When you have a `Post` model which `has_many` `Comments` and want to sort by the last created comment, you can use a block with the include to sort the posts by comments.created_at.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  field :last_commented_at,\n    as: :date,\n    sortable: ->(query, direction) {\n      query.includes(:comments).order(\"comments.created_at #{direction}\")\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Avo Default and Custom Paths in Rails routes.rb Ruby\nDESCRIPTION: This snippet demonstrates how to mount the Avo admin panel in your Rails application's routes file (`config/routes.rb`). The `mount_avo` method integrates Avo and its engines into your application's routing map. By default, Avo is mounted at the path specified by `Avo.configuration.root_path`, but you can override this using the `at:` argument to specify a custom path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/routing.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  # Mounts Avo at Avo.configuration.root_path\n  mount_avo\n\n  # Mounts Avo at `/custom_path` instead of the default\n  mount_avo at: \"custom_path\"\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Avo Fields on Edit View (Ruby)\nDESCRIPTION: Demonstrates using the `disabled: true` option within an Avo resource definition to disable specific fields (`:name` as text, `:status` as select) only on the Edit view, preventing users from modifying their values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# disabled will disable the field on the `Edit` view\nfield :name, as: :text, disabled: true\nfield :status, as: :select, disabled: true\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Field in Avo Admin - Ruby\nDESCRIPTION: This snippet shows how to declare a boolean field (`is_available`) using the `field` method in an Avo resource, with the field type set to `boolean`. This displays a boolean input (e.g., a checkbox) in the admin panel and converts the snake case name into a humanized label. The `is_available` field will render the label as *Is available*.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :is_available, as: :boolean\n```\n\n----------------------------------------\n\nTITLE: Combining Avo Select and Badge Fields for Updating (Ruby)\nDESCRIPTION: Shows the recommended pattern for managing a value displayed by a `Badge` field. A `Select` field (`as: :select`) is used for updating the value, hidden from index and show views (`hide_on: [:show, :index]`). A separate `Badge` field (`as: :badge`) displays the value on the index and show views, mapping the internal values to appropriate badge types.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/badge.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :stage, as: :select, hide_on: [:show, :index], options: { 'Discovery': :discovery, 'Idea': :idea, 'Done': :done, 'On hold': 'on hold', 'Cancelled': :cancelled, 'Drafting': :drafting }, placeholder: 'Choose the stage.'\nfield :stage, as: :badge, options: { info: [:discovery, :idea], success: :done, warning: 'on hold', danger: :cancelled, neutral: :drafting }\n```\n\n----------------------------------------\n\nTITLE: Defining STI Models in Ruby on Rails\nDESCRIPTION: Illustrates the basic setup for Single Table Inheritance (STI) in Ruby on Rails by defining a base `User` class and a derived `SuperUser` class. Includes a comment showing that querying the base class (`User.all`) can return instances of both the base and derived classes due to Rails' STI behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/associations.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\nend\n\n# app/models/super_user.rb\nclass SuperUser < User\nend\n\n# User.all.map(&:class) => [User, SuperUser]\n```\n\n----------------------------------------\n\nTITLE: Discovering Fields and Associations in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to use `discover_columns` and `discover_associations` within an Avo resource to automatically configure fields and associations from the database. It automatically detects the structure and configures the fields for you. The code is a simplified version of a User resource configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-discovery.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  # ...\n\n  def fields\n    discover_columns\n    discover_associations\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs with Visibility Controls\nDESCRIPTION: Example showing how to control visibility of both tab groups and individual tabs using boolean values or lambda functions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tabs.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ntabs visible: -> { resource.record.enabled? } do\n  tab name: \"General Information\" do\n    panel do\n      field :name, as: :text\n      field :email, as: :text\n    end\n  end\n  tab \"Admin Information\", visible: -> { current_user.is_admin? } do\n    panel do\n      field :role, as: :text\n      field :permissions, as: :text\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Default Options for Boolean Group in Ruby\nDESCRIPTION: This snippet displays the default configuration for the `options` parameter in a `BooleanGroup` field definition. The `options` should be a `Hash` with the keys and values matching your record's database values, offering default labels. This config provides different keys (`info`, `success`, `warning`, `danger`) for UI representation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/boolean_group.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  info: :info,\n  success: :success,\n  danger: :danger,\n  warning: :warning\n}\n```\n\n----------------------------------------\n\nTITLE: Include BasicAuth Concern in Avo ApplicationController Ruby\nDESCRIPTION: This snippet configures Rails to include the `BasicAuth` concern into Avo's `ApplicationController` when the application is prepared. This is achieved within a `Rails.configuration.to_prepare` block, ensuring the concern is included at the appropriate time. Requires the `BasicAuth` module and `Avo::ApplicationController` to be defined.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/basic-authentication.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Add this to include it in Avo's ApplicationController\nRails.configuration.to_prepare do\n  # Add basic authentication to Avo\n  Avo::ApplicationController.include BasicAuth\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Field Values with Rails Helpers - Ruby\nDESCRIPTION: Shows how to format a field value with Rails helpers, like `number_to_currency`. This is done by calling the helper using `view_context` within the `format_using` block to provide correct formatting.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nfield :price, as: :number, format_using: -> { view_context.number_to_currency(value) }\n```\n\n----------------------------------------\n\nTITLE: Defining Current User Method in Avo Configuration Using Ruby\nDESCRIPTION: This code defines the method Avo uses to find the currently signed-in user by setting `current_user_method` to `:current_user` inside the Avo initializer. This is essential for authorization policies to correctly identify the user making requests and apply the correct access rules.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_method = :current_user\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an Avo Resource without ActiveRecord in Ruby\nDESCRIPTION: Defines an Avo resource `AgingOrderResource` configured to work with a non-ActiveRecord data source. It specifies `:id` as the title field, disables default ActiveRecord includes (`self.includes = []`), lists the fields to display with their types and formatting options, and applies the custom `GracePeriod` filter. This setup relies on a custom model and data loading mechanism.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rest-api-integration.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass AgingOrderResource < Avo::BaseResource\n  self.title = :id\n  self.includes = []\n\n  field :id, as: :text\n  field :folio_number, as: :text\n  field :order_submitted_at, as: :date_time, timezone: 'Chennai', format: '%B %d, %Y %H:%M %Z'\n  field :amc_name, as: :text\n  field :scheme, as: :text\n  field :primary_investor_id, as: :text\n  field :order_type, as: :text\n  field :systematic, as: :boolean\n  field :order_reference, as: :text\n  field :amount, as: :text\n  field :units, as: :text\n  field :age, as: :text\n\n  filter GracePeriod\nend\n```\n\n----------------------------------------\n\nTITLE: Conditionally Showing Actions in Avo Resource Controls Using Ruby\nDESCRIPTION: Demonstrates usage of conditional logic within the `show_controls` lambda to dynamically render action buttons based on resource state. It shows how to use standard Ruby `if` statements to display an action only when a specific condition (`record.something?`) is true, alongside other control buttons like back and edit. The action is customized with style, color, and icon attributes. Visibility blocks are ignored in this context; conditional logic must be used explicitly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customizable-controls.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.show_controls = -> do\n    back_button label: \"\", title: \"Go back now\"\n\n    # visibility conditional\n    if record.something?\n      action Avo::Actions::ReleaseFish, style: :primary, color: :fuchsia, icon: \"heroicons/outline/globe\"\n    end\n\n    edit_button label: \"\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Controlling Tabs and Tab Visibility with Lambdas - Ruby\nDESCRIPTION: Demonstrates usage of the 'visible' option on 'tabs' and 'tab' components. The 'visible' option accepts a lambda to dynamically show or hide tab groups or individual tabs based on conditions (e.g., user roles or record status). Requires context of resource and user methods (e.g., current_user, resource.record). Inputs: visibility lambdas; outputs: tabs shown/hidden in the UI accordingly. Constraints: referenced methods must be defined in the current context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tabs.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ntabs visible: -> { resource.record.enabled? } do\n  tab name: \"General Information\" do\n    panel do\n      field :name, as: :text\n      field :email, as: :text\n    end\n  end\n  tab \"Admin Information\", visible: -> { current_user.is_admin? } do\n    panel do\n      field :role, as: :text\n      field :permissions, as: :text\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Unscoping Index Query in Avo Resource (Ruby)\nDESCRIPTION: Overrides the default_scope for the Index view of Project resources by setting self.index_query to a lambda that calls query.unscoped. Ensures index queries ignore default_scope ordering. Dependencies: self.index_query must accept and use a query object.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Project < Avo::BaseResource\n  self.title = :name\n  self.index_query = -> { query.unscoped }\nend\n```\n\n----------------------------------------\n\nTITLE: Comparing Field Definition Approaches in Avo Resources\nDESCRIPTION: Demonstrates the discouraged approach using if/else statements inside the fields method versus the recommended approach using the visible option. The recommended approach maintains a consistent field list while dynamically controlling visibility.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/best-practices.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Scenario 1\ndef fields\n  if params[:special_case].present?\n    field :special_field, as: :text\n  else\n    field :regular_field, as: :text\n  end\nend\n\n# Scenario 2\ndef fields\n  field :special_field, as: :text, visible: -> { params[:special_case].present? }\n  field :regular_field, as: :text, visible: -> { params[:special_case].present? }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing the `handle` Method for an Avo Action in Ruby\nDESCRIPTION: Defines the core logic for the `ToggleInactive` Avo action within the `handle` method. It iterates through selected records (`query`), toggles their `inactive` status, optionally notifies the user based on form fields (`fields[:notify_user]`, `fields[:message]`), and provides success feedback using `succeed`. The method receives `query`, `fields`, `current_user`, and `resource` arguments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  self.name = \"Toggle Inactive\"\n\n  def fields\n    field :notify_user, as: :boolean\n    field :message, as: :textarea\n  end\n\n  def handle(query:, fields:, current_user:, resource:, **args)\n    query.each do |record|\n      # Toggle the inactive status\n      record.update!(inactive: !record.inactive)\n\n      # Send notification if requested\n      if fields[:notify_user]\n        # Assuming there's a notify method\n        record.notify(fields[:message])\n      end\n    end\n\n    succeed \"Successfully toggled status for #{query.count}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Fields in an Avo Array Resource (Ruby)\nDESCRIPTION: Demonstrates a full Avo Array Resource class (`Avo::Resources::Movie`) inheriting from `Avo::Resources::ArrayResource`. It includes the `records` method to provide data and defines fields (`id`, `name`, `release_date`, `fun_fact`) using Avo's DSL within the `fields` method, including main panel and sidebar layouts, conditional visibility (`visible`, `only_on`), and custom display logic for fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/array-resources.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Movie < Avo::Resources::ArrayResource\n  def records\n    [\n      {\n        id: 1,\n        name: \"The Shawshank Redemption\",\n        release_date: \"1994-09-23\"\n      },\n      {\n        id: 2,\n        name: \"The Godfather\",\n        release_date: \"1972-03-24\",\n        fun_fact: \"The iconic cat in the opening scene was a stray found by director Francis Ford Coppola on the studio lot.\"\n      },\n      {\n        id: 3,\n        name: \"Pulp Fiction\",\n        release_date: \"1994-10-14\"\n      }\n    ]\n  end\n\n  def fields\n    main_panel do\n      field :id, as: :id\n      field :name, as: :text\n      field :release_date, as: :date\n      field :fun_fact, only_on: :index, visible: -> { resource.record.fun_fact.present? } do\n        record.fun_fact.truncate_words(10)\n      end\n\n      sidebar do\n        field :fun_fact do\n          record.fun_fact || \"There is no register of a fun fact for #{record.name}\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Associations with self.includes in Avo Resource - Ruby\nDESCRIPTION: Shows how to assign associated models or nested associations to the self.includes property to eager load them, improving performance and preventing n+1 queries on the Index view. Requires the Avo framework and appropriate association definitions on the related models. Accepts both simple flat and deeply nested association arrays.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.includes = [:user, :tags]\n\n  # or a very nested scenario\n  self.includes = [files_attachments: :blob, users: [:comments, :teams, post: [comments: :user]]]\nend\n```\n\n----------------------------------------\n\nTITLE: Use Lambda for Visibility - Ruby\nDESCRIPTION: This snippet demonstrates the correct way to conditionally show fields based on runtime information like the current user's role, by using a lambda within the `visible` block.  This ensures the condition is evaluated at request time rather than at boot time. The `with_options` method simplifies the code.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentResource < Avo::BaseResource\n  field :id, as: :id\n  with_options visible: -> (resource:) { context[:current_user].admin?} do\n    field :body, as: :textarea\n    field :tiny_name, as: :text, only_on: :index, as_description: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining belongs_to scope - Ruby\nDESCRIPTION: This Ruby snippet defines the scope of a `belongs_to` association in the Avo framework. It uses the `scope` option to pass a block that attaches scopes to the `query` object, allowing filtering of records. The block is executed within the execution context. The output is a filtered set of associated records, and it requires Avo's framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/associations_scope_option_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :user,\n  as: :belongs_to,\n  scope: -> { query.approved }\n```\n\n----------------------------------------\n\nTITLE: Customizing Primary and Background Colors in Avo (Ruby)\nDESCRIPTION: This configuration focuses on customizing the primary color palette and background color within Avo. It defines the `colors` hash with `background` and four required shades (100, 400, 500, 600) for the primary color. Colors can be specified in hex or RGB format.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/branding.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.branding = {\n    colors: {\n      background: \"248 246 242\",\n      100 => \"#C5F1D4\",\n      400 => \"#3CD070\",\n      500 => \"#30A65A\",\n      600 => \"#247D43\",\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Filter Arguments in Filter Implementation in Ruby\nDESCRIPTION: Demonstrates how to access arguments passed from the resource in a filter's implementation. The NameFilter uses the case_insensitive argument to determine its visibility and query behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::Name < Avo::Filters::TextFilter\n  self.name = \"Name filter\"\n  self.button_label = \"Filter by name\"\n  self.visible = -> do\n    arguments[:case_insensitive]\n  end\n\n  def apply(request, query, value)\n    if arguments[:case_insensitive]\n      query.where(\"LOWER(name) LIKE ?\", \"%#{value.downcase}%\")\n    else\n      query.where(\"name LIKE ?\", \"%#{value}%\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Chart Colors in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to customize the colors used in Avo's dashboard charts. It assigns an array of hex color strings to the `chart_colors` key within the `config.branding` hash. These colors are passed directly to the underlying chart.js library.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/branding.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.branding = {\n    chart_colors: ['#FFB435', \"#FFA102\", \"#CC8102\", '#FFB435', \"#FFA102\", \"#CC8102\"],\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Using Redirect Response in Ruby Avo Actions\nDESCRIPTION: Example of using the redirect_to response type in an Avo action to navigate to a different page after action execution. Supports standard redirect parameters.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(query:, **args)\n  query.each do |project|\n    project.update active: false\n  end\n\n  succeed 'Done!'\n  redirect_to avo.resources_users_path\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Avo on a Subdomain in Rails Routes (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates how to configure Rails routes (`config/routes.rb`) to mount the Avo engine. It uses a `constraint` based on the `host` to ensure Avo is only accessible when the request's host is 'avo' (e.g., `avo.yourdomain.com`), mounting it at the root path (`/`) for that specific subdomain.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/installation.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nconstraint host: 'avo' do\n  mount_avo at: '/'\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Field Options from Declaration (Ruby)\nDESCRIPTION: This Ruby code demonstrates how to define field-specific options in the field's initialization and use them.  The code allows options like `max`, `step`, `display_value`, and `value_suffix` to be passed as arguments. This provides flexibility in configuring the custom field from within the resource definition, making it reusable and configurable.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Fields::ProgressBarField < Avo::Fields::BaseField\n  attr_reader :max\n  attr_reader :step\n  attr_reader :display_value\n  attr_reader :value_suffix\n\n  def initialize(name, **args, &block)\n    super(name, **args, &block)\n\n    @max = args[:max] || 100\n    @step = args[:step] || 1\n    @display_value = args[:display_value] || false\n    @value_suffix = args[:value_suffix] || nil\n  end\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :progress, as: :progress_bar, step: 10, display_value: true, value_suffix: \"%\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Card Visibility Conditionally within an Avo Card in Ruby\nDESCRIPTION: Defines the visibility of the `UsersCount` card using the `visible` class attribute, set to a lambda. The lambda receives `context`, `params`, `parent` (the dashboard instance), and the `card` object, enabling dynamic visibility control based on conditions like user roles or request parameters.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersCount < Avo::Dashboards::MetricCard\n  self.id = \"users_metric\"\n  self.label = \"Users count\"\n  self.visible = -> do\n    # You have access to context, params, parent (the current dashboard), and current card\n    true\n  end\n\n  def query\n    result User.count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Association Scope in Ruby ActiveRecord Field Declaration\nDESCRIPTION: This snippet demonstrates how to use the `scope` parameter to customize the query for associated records in a Ruby model field declaration. The code utilizes a lambda block to specify that only records matching the `query.approved` condition are fetched via the association. It requires ActiveRecord and expects that the `query` object and `approved` method are defined in the association context. Input is the association definition; output is a filtered collection of associated records. Ensure that the surrounding context supports custom scoping via a block and that methods referenced in the scope exist.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/associations_scope_option_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :user,\n  as: :belongs_to,\n  scope: -> { query.approved }\n```\n\n----------------------------------------\n\nTITLE: Declaring Tag Resources in Avo for Ruby\nDESCRIPTION: This Ruby snippet registers the taggings and tags resources within the Avo admin interface. It makes these models accessible as resources that can be managed through the Avo dashboard, facilitating browsing and manipulating tags and their associations. There are no specific dependencies beyond having Avo and acts-as-taggable-on configured. This snippet primarily defines resource routing with no parameters or outputs. It assumes routes are part of a Rails routes file or an Avo-specific definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/act-as-taggable-on-integration.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nresource :taggings\nresource :tags\n```\n\n----------------------------------------\n\nTITLE: Avo Action Download File\nDESCRIPTION: This code defines an Avo action named `DownloadFile`.  It generates a CSV file from project data and initiates a file download to the user's browser. `may_download_file` must be set to `true` for the download to work.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass DownloadFile < Avo::BaseAction\n  self.name = \"Download file\"\n  self.may_download_file = true\n\n  def handle(**args)\n    models = args[:models]\n\n    filename = \"projects.csv\"\n    report_data = []\n\n    models.each do |project|\n      report_data << project.generate_report_data\n    end\n\n    succeed 'Done!'\n\n    if report_data.present? and filename.present?\n      download report_data, filename\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Protocol to Text Field in Avo (Ruby)\nDESCRIPTION: This snippet shows how to prepend a protocol prefix to the `email` field's value on the `Index` and `Show` views. The `protocol` option is set to `:mailto`, creating a `mailto` link.  Avo framework is required. The field will now automatically be rendered as a link.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/text.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :email,\n  as: :text,\n  protocol: :mailto\n```\n\n----------------------------------------\n\nTITLE: Customizing Resources per Page in Resource Index View\nDESCRIPTION: Adjusts the number of resource entries displayed per page in the index view via `config.per_page`. It improves navigation for large datasets. The key parameter is an integer value of resources per page.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.per_page = 24\nend\n```\n\n----------------------------------------\n\nTITLE: Modifying Action link_arguments method in Ruby\nDESCRIPTION: This code snippet demonstrates the change required for the `link_arguments` method in Avo actions. The `arguments` encoding and encryption are now handled internally, so developers only need to pass the `arguments` as a hash.  The `path` returned will include the encoded arguments. This simplifies the action argument handling process.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name,\n  as: :text,\n  filterable: true,\n  name: \"name (click to edit)\",\n  only_on: :index do\n\n  arguments = Base64.encode64 Avo::Services::EncryptionService.encrypt( # [!code --]\n    message: {                                                          # [!code --]\n      cities: Array[resource.record.id],                                # [!code --]\n      render_name: true                                                 # [!code --]\n    },                                                                  # [!code --]\n    purpose: :action_arguments                                          # [!code --]\n  )                                                                     # [!code --]\n\n  arguments = {                                                         # [!code ++]\n    cities: Array[resource.record.id],                                  # [!code ++]\n    render_name: true                                                   # [!code ++]\n  }                                                                     # [!code ++]\n\n  path, data = Avo::Actions::City::Update.link_arguments(\n    resource: resource,\n    arguments: arguments\n  )\n\n  link_to resource.record.name, path, data: data\nend\n```\n\n----------------------------------------\n\nTITLE: Delegating Field/Action Authorization to Policy Class in Ruby\nDESCRIPTION: Demonstrates a pattern for authorizing specific UI elements or actions within an Avo resource by delegating the check to its policy class. The resource field uses the `disabled` option to call `@resource.authorization.authorize_action(:amount?, raise_exception: false)`. The corresponding policy class defines the `amount?` method containing the authorization logic (e.g., checking if `user.admin?`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/resources/product.rb\nfield :amount,\n      as: :money,\n      currencies: %w[USD],\n      sortable: true,\n      filterable: true,\n      copyable: true,\n      # define ability to change the amount in policy class instead of doing it here\n      disabled: -> { !@resource.authorization.authorize_action(:amount?, raise_exception: false) }\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/policies/product_policy.rb\n# Define ability to change the amount in Product Policy\ndef amount?\n  user.admin?\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Scopes for Avo Views in Ruby\nDESCRIPTION: Shows how to define a nested `Scope` class within a Pundit policy (`PostPolicy`) to control record visibility in Avo's Index, Show, and Edit views. The `resolve` method conditionally returns an ActiveRecord scope based on user attributes (e.g., `user.admin?`), filtering the records displayed. Note that this scope doesn't automatically apply to association views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PostPolicy < ApplicationPolicy\n  class Scope < Scope\n    def resolve\n      if user.admin?\n        scope.all\n      else\n        scope.where(published: true)\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Scope 'has_many' Association in Avo Resource - Ruby\nDESCRIPTION: This code defines an Avo resource for the `User` model. It includes a `comments` field as a `has_many` association, and it applies a scope to the association query, filtering comments to only include those that are `approved`. This ensures that only approved comments are displayed in the user's resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/scopes_common.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :comments, as: :has_many, scope: -> { query.approved }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering a basic action in Avo resource (Ruby)\nDESCRIPTION: Shows how to register a simple action within a resource class using the `action` method, making it available in the Actions dropdown. This is a fundamental step for adding interactivity to resources.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/registration.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  def actions\n    # Basic registration\n    action Avo::Actions::ToggleInactive\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Field Label in Avo Admin - Ruby\nDESCRIPTION: This snippet shows how to customize the label of a field using the `name` property within the `field` method. It overrides the default humanized label for the `is_available` field, setting it to 'Availability'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :is_available, as: :boolean, name: 'Availability'\n```\n\n----------------------------------------\n\nTITLE: Default Avo Action Structure (Ruby)\nDESCRIPTION: Shows the default Ruby code generated for a new Avo action file (`app/avo/actions/toggle_inactive.rb`). It defines a class inheriting from `Avo::BaseAction`, sets the action's display name, includes commented-out placeholders for visibility logic and fields, and provides a basic `handle` method structure to process records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/generator.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  self.name = \"Toggle Inactive\"\n  # self.visible = -> do\n  #   true\n  # end\n\n  # def fields\n  #   # Add Action fields here\n  # end\n\n  def handle(query:, fields:, current_user:, resource:, **args)\n    query.each do |record|\n      # Do something with your records.\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an Avo Boolean Field (Ruby)\nDESCRIPTION: Defines a field named ':is_published' as a boolean type within an Avo resource using `as: :boolean`. It sets a custom display 'name' to 'Published' and configures custom string values 'yes' and 'no' via `true_value` and `false_value` to represent true and false states, respectively, overriding the default boolean/numeric representations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/boolean.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :is_published,\n  as: :boolean,\n  name: 'Published',\n  true_value: 'yes',\n  false_value: 'no'\n```\n\n----------------------------------------\n\nTITLE: Configuring current_user Method with Block - Ruby\nDESCRIPTION: This snippet demonstrates how to configure the `current_user_method` when the current user is obtained from another object, such as `Current.user`. A block is passed to the configuration option, which is evaluated to retrieve the current user. This provides flexibility when the user retrieval mechanism is more complex. The method name is configured with a block, and the logic inside of the block determines how to retrieve the current user. The input is a block that retrieves the current user.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authentication.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_method do\n    Current.user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring ProgressBar Field Options in Ruby\nDESCRIPTION: This example shows how to customize the `ProgressBar` field using various options. It sets the maximum value (`max`) to 150, the slider step increment (`step`) to 10, explicitly enables the value display (`display_value`), and adds a percentage sign suffix (`value_suffix`) to the displayed value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/progress_bar.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :progress,\n  as: :progress_bar,\n  max: 150,\n  step: 10,\n  display_value: true,\n  value_suffix: \"%\"\n```\n\n----------------------------------------\n\nTITLE: Setting a static description for a resource\nDESCRIPTION: This snippet demonstrates assigning a string to the `description` attribute of a resource class, which will be displayed on all relevant views like Index, Show, Edit, and New. It provides an easy way to add contextual information about the resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_24\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.title = :name\n  self.description = \"These are the users of the app.\"\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Action Name in Ruby\nDESCRIPTION: Shows how to customize an action's display name using either a static string or a dynamic block that changes based on the current record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/customization.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.name = \"Release fish\"\n\n  # Or as a block\n  self.name = -> {\n    record.present? ? \"Release #{record.name}?\" : \"Release fish\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to Progress Bar in CSS\nDESCRIPTION: This CSS snippet defines styles for a progress bar element, including its appearance and behavior. It uses Tailwind CSS utility classes (`@apply`) for styling. It sets the height, background color, border, and rounded corners for the progress bar itself, its background, and its value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_14\n\nLANGUAGE: css\nCODE:\n```\nprogress {\n  @apply h-2 bg-white border border-gray-400 rounded shadow-inner;\n}\nprogress[value]::-webkit-progress-bar {\n  @apply bg-white border border-gray-500 rounded shadow-inner;\n}\nprogress[value]::-webkit-progress-value{\n  @apply bg-green-600 rounded;\n\n}\nprogress[value]::-moz-progress-bar {\n  @apply bg-green-600 rounded appearance-none;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Resource Filters in Avo\nDESCRIPTION: Shows how to register multiple filters for a Course resource in Avo, including country and city filters.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/course.rb\nclass Avo::Resources::Course < Avo::BaseResource\n  def filters\n    filter Avo::Filters::CourseCountryFilter\n    filter Avo::Filters::CourseCityFilter\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Suggestions for Avo Tags Field - Ruby\nDESCRIPTION: This code shows how to provide dynamic suggestions for the tags field by using a lambda that returns an array. It involves setting up an Avo resource and a Rails model method returning an array of tag suggestions. Required dependencies: Avo and typical Rails model structure. Main parameters include the field name, tags type, and a lambda referencing record methods. The output is a dropdown with context-specific suggestions shown in the UI. Input is the resource record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/course.rb\nclass Avo::Resources::Course < Avo::BaseResource\n  def fields\n    field :skills, as: :tags, suggestions: -> { record.skill_suggestions }\n  end\nend\n\n# app/models/course.rb\nclass Course < ApplicationRecord\n  def skill_suggestions\n    ['example suggestion', 'example tag', self.name]\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Configuring RoleResource\nDESCRIPTION: This snippet configures the `RoleResource` file to display role names and associate them with accounts. It sets the title to `:name` and specifies the associated accounts. It defines fields for the role's name and a `has_and_belongs_to_many` association with `accounts`. This allows role names to be displayed and associated with accounts in the Avo interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rolify-integration.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass RoleResource < Avo::BaseResource\n  self.title = :name\n  self.includes = []\n\n  field :name, as: :text\n  field :accounts, as: :has_and_belongs_to_many\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Fields in Avo\nDESCRIPTION: This Ruby code shows how to define fields for an Avo resource. It includes examples of different field types such as id, text, trix (text editor), file, boolean, and belongs_to. The `fields` method declares all fields available for records in the Avo interface. Further customization options such as `required`, `placeholder`, and `is_image` are also displayed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.title = :id\n  self.includes = []\n\n  def fields\n    field :id, as: :id\n    field :name, as: :text, required: true\n    field :body, as: :trix, placeholder: \"Add the post body here\", always_show: false\n    field :cover_photo, as: :file, is_image: true, link_to_record: true\n    field :is_featured, as: :boolean\n\n    field :is_published, as: :boolean do\n      record.published_at.present?\n    end\n\n    field :user, as: :belongs_to, placeholder: \"—\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic ProgressBar Field in Ruby\nDESCRIPTION: This snippet demonstrates the basic declaration of a `ProgressBar` field for an attribute named `:progress`. It uses the `as: :progress_bar` option to specify the field type, which renders a progress element on Index/Show views and a range input on Edit/New views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/progress_bar.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :progress, as: :progress_bar\n```\n\n----------------------------------------\n\nTITLE: MiniPost Resource Definition\nDESCRIPTION: This Ruby code defines a custom Avo resource named `MiniPost` that maps to the `Post` model using the `model_class` option. This configuration facilitates the reuse of the `Post` model with a new resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::MiniPost < Avo::BaseResource\n  self.model_class = \"Post\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring License Key in Avo Initializer - Ruby\nDESCRIPTION: This snippet demonstrates how to assign your purchased Avo license key in the config/initializers/avo.rb file. Set the license key directly as a string or by using an environment variable (ENV['AVO_LICENSE_KEY']) within the Avo.configure block. No external dependencies are required beyond the Avo gem. The license_key parameter should be your unique product key or a secure environment variable; it is a required setting for activating paid features. The initializer must be present for Avo to validate production licenses correctly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/licensing.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.license_key = '************************' # or use ENV['AVO_LICENSE_KEY']\nend\n```\n\n----------------------------------------\n\nTITLE: Authorizing Array Field View (Ruby)\nDESCRIPTION: This Ruby code demonstrates how to explicitly authorize the viewing of an array field (specifically `attendees`) within an Avo resource using a policy. This ensures that users have the necessary permissions to access the array data.  The example defines a `view_attendees?` method in the `CoursePolicy` that returns `true`, effectively granting access.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/array.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/policies/course_policy.rb\nclass CoursePolicy < ApplicationPolicy\n  def view_attendees? = true\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments from Dashboard to Card in Avo Using Ruby\nDESCRIPTION: Demonstrates how to declare the same card multiple times with different arguments by using the arguments parameter. Useful for customizing card queries (for example, distinguishing between all users and active users) without duplicating card code. Requires corresponding cards to accept and process the arguments; inputs are hashes, outputs are rendered card results.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dashboards.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::Dashy < Avo::Dashboards::BaseDashboard\n  self.id = \"dashy\"\n  self.name = \"Dashy\"\n\n  def cards\n    card Avo::Cards::UsersCount\n    card Avo::Cards::UsersCount, arguments: {\n      active_users: true\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Authorizing Resource Search in Policy\nDESCRIPTION: Control which resources are searchable by defining the `search?` method in the corresponding policy file. Returning `true` enables search for that resource in both the resource index and global search (if enabled). Returning `false` hides the search box and excludes the resource from global search.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass UserPolicy < ApplicationPolicy\n  def search?\n    true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including All Application Helpers in Avo Fields (Ruby)\nDESCRIPTION: Presents a dynamic solution to include all application helpers located in `app/helpers` into Avo fields. It uses `ActionController::Base.all_helpers_from_path` and `ActionController::Base.modules_for_helpers` to discover and include all helper modules into `Avo::Fields::BaseField` via an intermediate module (`FieldExtensions`) and a `Rails.configuration.to_prepare` block in an initializer.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/use-own-helpers-in-resource-files.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # Usual Avo config\nend\n\nmodule FieldExtensions\n  # Include all helpers\n  helper_names = ActionController::Base.all_helpers_from_path Rails.root.join(\"app\", \"helpers\")\n  helpers = ActionController::Base.modules_for_helpers helper_names\n  helpers.each do |helper|\n    send(:include, helper)\n  end\nend\n\nRails.configuration.to_prepare do\n  Avo::Fields::BaseField.include FieldExtensions\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Current Tenant by Subdomain in Rails Controller Concern Ruby\nDESCRIPTION: Defines a module Multitenancy to be included in the Avo ApplicationController. It sets the current tenant before each request by extracting the subdomain from the request host, signing out users if subdomain or tenant is missing, and assigning the tenant to ActsAsTenant and Avo's current tenant context. This enables request-based tenant selection supporting subdomain multitenancy and integrates seamlessly with Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/acts_as_tenant_integration.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Multitenancy, to set the current account/tenant.\nmodule Multitenancy\n  extend ActiveSupport::Concern\n\n  included do\n    prepend_before_action :set_current_account\n  end\n\n  def set_current_account\n    hosts = request.host.split('.')\n\n    # just to make sure we are using subdomain path\n    subdomain = (hosts[0] if hosts.length > 2)\n\n    # We only allow users to login from their account specific subdomain not outside of it.\n    sign_out(current_user) if subdomain.blank?\n\n    current_account = Account.find_by(subdomain:)\n    sign_out(current_user) if current_account.blank?\n\n    # set tenant for Avo and ActAsTenant\n    ActsAsTenant.current_tenant = current_account\n    Avo::Current.tenant = current_account\n    Avo::Current.tenant_id = current_account.id\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  # configuration values\nend\n\nRails.configuration.to_prepare do\n  Avo::ApplicationController.include Multitenancy\nend\n```\n\n----------------------------------------\n\nTITLE: Adding self.index_query option in Ruby\nDESCRIPTION: Demonstrates how to eager load attachments in Avo resources using the `self.index_query` option. This allows to use a custom scope to modify the query for the index page. In this example, it eager loads the image attachment.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Product < Avo::BaseResource\n   self.index_query = -> {\n    query.includes image_attachment: :blob\n  }\n\n  def fields\n    field :image, as: :file, is_image: true\n  end\n```\n\n----------------------------------------\n\nTITLE: Adding self.includes option in Ruby\nDESCRIPTION: Demonstrates how to eager load attachments in Avo resources using the `self.includes` option. This is used to specify the associations to eager load to avoid the N+1 query problem. In this example, it eager loads the user and photo attachment.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::PhotoComment < Avo::BaseResource\n  self.includes = [:user, [photo_attachment: :blob]]\n\n  def fields\n    field :user, as: :belongs_to\n    field :photo, as: :file, is_image: true\n  end\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Sort Logic for Computed or Association Fields in Avo (Ruby)\nDESCRIPTION: Reveals how to handle sorting for computed fields or associations where sortable: true doesn't work. Defines a lambda for sortable: that receives the query and direction, and can return a custom ActiveRecord query. Used for custom orderings, such as by post count or on complex associations. Supports additional block logic for display.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  field :is_writer,\n    as: :text,\n    sortable: -> {\n      # Order by something else completely, just to make a test case that clearly and reliably does what we want.\n      query.order(id: direction)\n    },\n    hide_on: :edit do\n      record.posts.to_a.size > 0 ? \"yes\" : \"no\"\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Standard Avo Resource Inheritance | Ruby\nDESCRIPTION: This example shows the standard structure of an Avo resource file. It inherits from `Avo::BaseResource`, which will be your custom one if defined, or the default Avo base resource otherwise. This is where you define resource-specific configurations, fields, filters, etc.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_24\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post_resource.rb\nmodule Avo::Resources::Post < Avo::BaseResource\n  # Your existing configuration for the Post resource\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard Links in Avo Menu\nDESCRIPTION: Demonstrates how to create a menu item linking to a dashboard using the `dashboard` helper, specifying the dashboard ID or name. The label can also be customized.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndashboard :dashy\ndashboard \"Sales\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo to use Devise current_user (Ruby)\nDESCRIPTION: This snippet demonstrates how to instruct the Avo framework to use Devise's current_user method for user authentication. Add this configuration inside config/initializers/avo.rb. No external dependencies beyond Devise are required. The config.current_user_method parameter should be set as a symbol referencing :current_user, and the method should return the User object for the currently signed-in user or nil.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authentication.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_method = :current_user\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Select Filter with Dynamic Options (Ruby)\nDESCRIPTION: Shows how to create a Select filter where the available `options` are generated dynamically, typically from a database query or other logic. The `options` method can access the current `applied_filters` state.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nclass AuthorFilter < Avo::Filters::SelectFilter\n  self.name = 'Author'\n\n  def apply(request, query, value)\n    query = query.where(author_id: value) if value.present?\n    query\n  end\n\n  # Example `applied_filters`\n  # applied_filters = {\n  #   \"CourseCountryFilter\" => {\n  #     \"USA\" => true,\n  #     \"Japan\" => true,\n  #     \"Spain\" => false,\n  #     \"Thailand\" => false,\n  #   }\n  # }\n  def options\n    # Here you have access to the `applied_filters` object too\n    Author.select(:id, :name).each_with_object({}) { |author, options| options[author.id] = author.name }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Avo Action Message Responses\nDESCRIPTION: This code demonstrates the use of message response methods in an Avo action. It showcases `succeed`, `warn`, `inform`, and `error` to render different types of alerts to the user upon action completion.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(**args)\n  # Demo handle action\n\n  succeed \"Success response ✌️\"\n  warn \"Warning response ✌️\"\n  inform \"Info response ✌️\"\n  error \"Error response ✌️\"\nend\n```\n\n----------------------------------------\n\nTITLE: Definition of User Model and Basic Avo Resource - Ruby\nDESCRIPTION: Provides a simple User Rails model and corresponding Avo resource that uses the 'name' attribute as the resource title. The resource defines id with link, email displayed as a gravatar avatar with link, and first and last names as required text fields including placeholders. This setup creates a basic user interface within the admin panel listing users with avatar and names.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\nend\n\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :email, as: :gravatar, link_to_record: true, as_avatar: :circle\n    field :first_name, as: :text, required: true, placeholder: \"John\"\n    field :last_name, as: :text, required: true, placeholder: \"Doe\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Policy Scope (Ruby)\nDESCRIPTION: Explains how to create a nested `Scope` class within an Avo resource policy (like `PostPolicy`) to filter the records displayed in the Index view based on the current user's role or attributes, returning a modified ActiveRecord relation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PostPolicy < ApplicationPolicy\n  class Scope < Scope\n    def resolve\n      if user.admin?\n        scope.all\n      else\n        scope.where(published: true)\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Post Model with Schema and Associations - Ruby\nDESCRIPTION: Defines the Post ActiveRecord model including schema attributes, enum for status, validations, file attachments, and associations. Attributes include typical blog post fields and relationships such as belongs_to user (optional), has_many comments and reviews with polymorphic interfaces, and acts_as_taggable_on for tags. This rich model structure informs the corresponding Avo resource about available fields and associations to map for the CRUD UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# == Schema Information\n#\n# Table name: posts\n#\n#  id           :bigint           not null, primary key\n#  name         :string\n#  body         :text\n#  is_featured  :boolean\n#  published_at :datetime\n#  user_id      :bigint\n#  created_at   :datetime         not null\n#  updated_at   :datetime         not null\n#  status       :integer          default(\"draft\")\n#\nclass Post < ApplicationRecord\n enum status: [:draft, :published, :archived]\n\n validates :name, presence: true\n\n has_one_attached :cover_photo\n has_one_attached :audio\n has_many_attached :attachments\n\n belongs_to :user, optional: true\n has_many :comments, as: :commentable\n has_many :reviews, as: :reviewable\n\n acts_as_taggable_on :tags\nend\n```\n\n----------------------------------------\n\nTITLE: Passing and Accessing Arguments in Avo Actions for Conditional Behavior in Ruby\nDESCRIPTION: Demonstrates passing arguments to an Avo action declared on a resource and accessing those arguments inside the action's `handle` method and visibility block. The arguments hash supports customizing behavior dynamically, such as conditionally changing success messages based on the `special_message` argument. Requires defining arguments in the resource and referencing `arguments` in the action class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass FishResource < Avo::BaseResource\n  self.title = :name\n\n  field :id, as: :id\n  field :name, as: :text\n  field :user, as: :belongs_to\n  field :type, as: :text, hide_on: :forms\n\n  action DummyAction, arguments: {\n    special_message: true\n  }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass DummyAction < Avo::BaseAction\n  self.name = \"Dummy action\"\n  self.standalone = true\n  self.visible = -> do\n    arguments[:special_message]\n  end\n\n  def handle(**args)\n    if arguments[:special_message]\n      succeed \"I love 🥑\"\n    else\n      succeed \"Success response ✌️\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Backend Controller for Country-to-City JSON API - Ruby\nDESCRIPTION: Implements the Avo::CoursesController#cities action to serve a JSON array of cities for a given country, checked against a whitelist. Relies on a Course model for valid countries and city lists. Inputs: 'country' parameter (querystring); Output: JSON city array. If an invalid country is given, returns an empty array. It separates the city data retrieval into a private method for clarity and maintainability.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::CoursesController < Avo::ResourcesController\n  def cities\n    render json: get_cities(params[:country]) # return an array of cities based on the country we received\n  end\n\n  private\n\n  def get_cities(country)\n    return [] unless Course.countries.include?(country)\n\n    Course.cities[country.to_sym]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Post Resource - All Fields Defined\nDESCRIPTION: This Ruby code shows a full definition of the `Post` Avo resource. It includes the id, name, body, is_featured, published_at, user_id, status, cover_photo, audio, attachments, user, comments, reviews, and tags fields and how each will be displayed through Avo's built-in field types. This resource configuration determines the structure of the administration UI for the Post model, specifying the types and presentation of each attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.includes = []\n  # self.search = {\n  #   query: -> { query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false) }\n  # }\n\n  def fields\n    field :id, as: :id\n    field :name, as: :text\n    field :body, as: :textarea\n    field :is_featured, as: :boolean\n    field :published_at, as: :datetime\n    field :user_id, as: :number\n    field :status, as: :select, enum: ::Post.statuses\n    field :cover_photo, as: :file\n    field :audio, as: :file\n    field :attachments, as: :files\n    field :user, as: :belongs_to\n    field :comments, as: :has_many\n    field :reviews, as: :has_many\n    field :tags, as: :tags\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Resource Search Across Associations using Ransack\nDESCRIPTION: Configures the search functionality for the `Avo::Resources::Application` resource to search across attributes of the associated `Client` model. It uses `joins(:client)` to link the tables and `ransack` to define multiple search conditions (e.g., `client_email_cont`, `client_phone_number_cont`) combined with an 'or' operator (`m: 'or'`). Requires the Ransack gem and Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/application.rb\nclass Avo::Resources::Application < Avo::BaseResource\n  self.search = {\n    query: -> {\n      query\n        .joins(:client)\n        .ransack(\n          id_eq: params[:q],\n          name_cont: params[:q],\n          workflow_name_cont: params[:q],\n          client_id_eq: params[:q],\n          client_first_name_cont: params[:q],\n          client_last_name_cont: params[:q],\n          client_email_cont: params[:q],\n          client_phone_number_cont: params[:q],\n          m: 'or'\n        ).result(distinct: false)\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Sample Ruby code defining a Rails action class with handle method\nDESCRIPTION: This Ruby code snippet demonstrates the structure of a custom Avo action class inheriting from Avo::BaseAction, including setting a name, (optional) visibility, defining fields, and implementing the handle method that processes a collection of records. It provides the essential template for customizing actions in a Rails application using Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/generator.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  self.name = \"Toggle Inactive\"\n  # self.visible = -> do\n  #   true\n  # end\n\n  # def fields\n  #   # Add Action fields here\n  # end\n\n  def handle(query:, fields:, current_user:, resource:, **args)\n    query.each do |record|\n      # Do something with your records.\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs in Avo Resource\nDESCRIPTION: Basic example of implementing tabs in an Avo resource class. Shows how to organize fields into tabbed sections with panels and association fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tabs.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :email, as: :text, name: \"User Email\", required: true\n\n    tabs do\n      tab \"User information\", description: \"Some information about this user\" do\n        panel do\n          field :first_name, as: :text, required: true, placeholder: \"John\"\n          field :last_name, as: :text, required: true, placeholder: \"Doe\"\n          field :active, as: :boolean, name: \"Is active\", show_on: :show\n        end\n      end\n\n      field :teams, as: :has_and_belongs_to_many\n      field :people, as: :has_many\n      field :spouses, as: :has_many\n      field :projects, as: :has_and_belongs_to_many\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing an Avo Multiple Select Filter in Ruby\nDESCRIPTION: Provides a complete example of an Avo Multiple Select filter (`Avo::Filters::PostStatus`). It defines the `name`, the `apply` method which modifies the query based on the selected `value` (passed as an array of strings), and the `options` method defining the choices. An optional `default` method can return an array of default selections.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::PostStatus < Avo::Filters::MultipleSelectFilter\n  self.name = \"Status\"\n\n  # `value` comes as an array of strings\n  # Ex: ['admins', 'non_admins']\n  def apply(request, query, value)\n    if value.include? 'admins'\n      query = query.admins\n    end\n\n    if value.include? 'non_admins'\n      query = query.non_admins\n    end\n\n    query\n  end\n\n  def options\n    {\n      admins: \"Admins\",\n      non_admins: \"Non admins\",\n    }\n  end\n\n  # Optional method to set the default state.\n  # def default\n  #   ['admins', 'non_admins']\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring `default_url_options` for Avo Routing (Ruby)\nDESCRIPTION: Explains how to add parameters to Avo's `default_url_options` using `config.default_url_options` in the initializer (e.g., `[:account_id]`). This works in conjunction with scoped routes in `routes.rb` to automatically include parameters like `account_id` in generated paths, facilitating features like route-level multitenancy.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_25\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.default_url_options = [:account_id]\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/config/routes.rb\nRails.application.routes.draw do\n  # Use to test out route-based multitenancy\n  scope \"/account/:account_id\" do\n    mount_avo\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Conditionally Marking Avo Field as Required (Block)\nDESCRIPTION: Shows how to use a Ruby block with the `required` option to conditionally apply the visual required indicator. The block is executed in the `ViewRecordHost` context, providing access to variables like `view`, `record`, `params`, `context`, `view_context`, and `current_user` for dynamic behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, required: -> { view == :new } # make the field required only on the new view and not on edit\n```\n\n----------------------------------------\n\nTITLE: Configuring resource parent controller via initializer\nDESCRIPTION: This snippet shows how to set the parent controller for Avo resources in the avo.rb initializer using the `resource_parent_controller` option. It ensures that newly generated resources inherit from a specified controller, promoting consistency across the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  # ...\n  config.resource_parent_controller = \"Avo::BaseResourcesController\" # \"Avo::ResourcesController\" is default value\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Providing Input Placeholders for Fields in Avo (Ruby)\nDESCRIPTION: Demonstrates using the placeholder: option to set placeholder text for empty input fields in Edit and New views. Allows suggesting expected input format or values to users. Only applies to supported field types such as text fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, placeholder: 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Defining Multitenancy Controller Concern (Ruby)\nDESCRIPTION: Defines an ActiveSupport::Concern module named 'Multitenancy'. This concern includes a 'prepend_before_action' callback 'set_current_account' which extracts the subdomain from the request host, finds the corresponding Account, and sets the current tenant for both ActsAsTenant and Avo. It includes basic sign-out logic for invalid subdomains/accounts. Depends on the 'Account' model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/acts_as_tenant_integration.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# Multitenancy, to set the current account/tenant.\nmodule Multitenancy\n  extend ActiveSupport::Concern\n\n  included do\n    prepend_before_action :set_current_account\n  end\n\n  def set_current_account\n    hosts = request.host.split('.')\n\n    # just to make sure we are using subdomain path\n    subdomain = (hosts[0] if hosts.length > 2)\n\n    # We only allow users to login from their account specific subdomain not outside of it.\n    sign_out(current_user) if subdomain.blank?\n\n    current_account = Account.find_by(subdomain:)\n    sign_out(current_user) if current_account.blank?\n\n    # set tenant for Avo and ActAsTenant\n    ActsAsTenant.current_tenant = current_account\n    Avo::Current.tenant = current_account\n    Avo::Current.tenant_id = current_account.id\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a HasMany Through Association in Avo Using Ruby\nDESCRIPTION: Configures a HasMany association named :members that is linked through an intermediate association :memberships. This enables displaying related :members records via the :memberships join model. The :through option informs Avo to resolve this nested association structure. Used when the relationship is not direct but through another model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/associations/has_many.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :members,\n  as: :has_many,\n  through: :memberships\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Fields in Avo Resource with hide_on (Ruby)\nDESCRIPTION: Illustrates hiding a field on specified views using the hide_on: option. Passes an array of views (e.g., :index, :show) where the field should not appear. Supports various Avo view symbols to finely control field visibility across New, Edit, Index, and Show.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :body, as: :text, hide_on: [:index, :show]\n```\n\n----------------------------------------\n\nTITLE: Enabling Audit Logging globally in Avo configuration\nDESCRIPTION: Sets the `enabled` flag to `true` within `Avo::AuditLogging.configure` to activate audit logging feature across the application. Wraps this setting in a block for configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  # ...\nend\n\nAvo::AuditLogging.configure do |config|  \n  # config.enabled = false\n  config.enabled = true\n  # config.author_model = \"User\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining filterable fields in Avo resource - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to declare resource fields in an Avo BaseResource class and mark specific fields as filterable by adding the `filterable: true` attribute. This enables Avo to recognize these fields for dynamic filtering using Ransack. Dependencies include having Avo and Ransack gems installed and configured. Expected input is the resource fields to filter on; output is the addition of filter options in the UI's Index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Project < Avo::BaseResource\n  def fields\n    field :name, as: :text\n    field :status, as: :status, filterable: true\n    field :stage, as: :badge, filterable: true\n    field :country, as: :country, filterable: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Securing Avo Route For Admins Only Using Devise (Ruby - routes.rb)\nDESCRIPTION: This routes.rb snippet provides finer control by authenticating only admins. The block authenticate :user, -> user { user.admin? } do ... ensures /avo is mounted only for users with user.admin? == true. Insert into config/routes.rb to permit only admin users to access Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authentication.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nauthenticate :user, -> user { user.admin? } do\n  mount_avo at: '/avo'\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Basic External Link Avo Menu Ruby\nDESCRIPTION: Demonstrates how to add a simple external link to the Avo menu using the `link_to` helper. It shows specifying the link text, target path, and opening it in a new tab using `target: :_blank`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlink_to \"Google\", path: \"https://google.com\", target: :_blank\n```\n\n----------------------------------------\n\nTITLE: Initializing KeyValue Field in Avo (Ruby)\nDESCRIPTION: This code snippet demonstrates how to initialize a `KeyValue` field in an Avo resource.  It defines the `meta` field as a `key_value` type, allowing the editing of flat key-value pairs stored in JSON format in the database. There are no explicit dependencies beyond the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/key_value.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, as: :key_value\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Middleware for Multitenancy in Rails\nDESCRIPTION: This middleware intercepts requests to extract the account ID from the URL path. It then attempts to find the corresponding account in the database and, if found, sets `Current.account`. If the account is not found, the request is redirected to the root path. The request path is then rewritten to remove the account ID.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multitenancy.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n## Multitenant Account Middleware\n#\n# Included in the Rails engine if enabled.\n#\n# Used for setting the Account by the first ID in the URL like Basecamp 3.\n# This means we don't have to include the Account ID in every URL helper.\n# From JumpstartRails AccountMiddleware\n\nclass AccountMiddleware\n  def initialize(app)\n    @app = app\n  end\n\n  # http://example.com/12345/projects\n  def call(env)\n    request = ActionDispatch::Request.new env\n    # Fetch the account id from the path\n    _, account_id, request_path = request.path.split(\"/\", 3)\n\n    # Check if the id is a number\n    if /\\d+/.match?(account_id)\n      # See if that account is present in the database.\n      if (account = Account.find_by(id: account_id))\n        # If the account is present, set the Current.account to that\n        Current.account = account\n      else\n        # If not, redirect to the root path\n        return [302, {\"Location\" => \"/\"}, []]\n      end\n\n      request.script_name = \"/#{account_id}\"\n      request.path_info = \"/#{request_path}\"\n    end\n\n    @app.call(request.env)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using a computed property for resource title\nDESCRIPTION: Defines a method in the model that sanitizes and truncates content to generate a human-friendly title for the resource when no standard attribute exists.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resources.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/models/comment.rb\nclass Comment < ApplicationRecord\n  def tiny_name\n    ActionView::Base.full_sanitizer.sanitize(body).truncate 30\n  end\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/comment_resource.rb\nclass CommentResource < Avo::BaseResource\n  self.title = :tiny_name\n  # field definitions\nend\n```\n\n----------------------------------------\n\nTITLE: Using Pre-made resource-edit#disable Method\nDESCRIPTION: Shows how to use the built-in disable method to disable fields based on another field's value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/stimulus-integration.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_skills, as: :boolean, html: {\n  edit: {\n    input: {\n      data: {\n        action: \"input->resource-edit#disable\", # use the pre-made stimulus method on input\n        resource_edit_disable_target_param: \"countrySelectInput\", # target to be disabled\n        # resource_edit_disable_targets_param: [\"countrySelectWrapper\"] # add more than one target to disable\n      }\n    }\n  }\n}\nfield :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h\n```\n\n----------------------------------------\n\nTITLE: Initializing Select field with options\nDESCRIPTION: This code snippet demonstrates how to initialize a `Select` field in Avo with static options. The `options` hash defines the labels and values for the select options. `display_with_value` is set to `true` to display the values instead of the labels. A placeholder is also provided.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/select.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :type, as: :select, options: { 'Large container': :large, 'Medium container': :medium, 'Tiny container': :tiny }, display_with_value: true, placeholder: 'Choose the type of the container.'\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Sorting for Avo Fields (Ruby)\nDESCRIPTION: Shows the standard method for making a database-backed field sortable on the Avo Index view by simply adding the `sortable: true` option to its definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, sortable: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Query for Avo Resource (Ruby)\nDESCRIPTION: This snippet shows how to configure the `search_query` option for an Avo resource. This is a prerequisite for using the `searchable` option in associated resources. It uses `ransack` to search for records based on the `id` or `link` attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/associations_searchable_option_common.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/course_link_resource.rb\nclass CourseLinkResource < Avo::BaseResource\n  self.search_query = -> do\n    scope.ransack(id_eq: params[:q], link_cont: params[:q], m: \"or\").result(distinct: false)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: File Field Basic Usage with Active Storage - Ruby\nDESCRIPTION: This snippet demonstrates the basic implementation of a `file` field in Avo, utilizing Active Storage for file uploads. The `is_image: true` option specifies that the uploaded file is an image.  Avo uses the application's Active Storage settings and any supported disk services.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/file.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :avatar, as: :file, is_image: true\n```\n\n----------------------------------------\n\nTITLE: Custom Query Logic for Dynamic Filters in Avo using Ruby\nDESCRIPTION: Demonstrates how to override the default filtering system with a custom query defined via a lambda for a dynamic filter in Avo. Using the `query` option within the field's `filterable` hash or the `dynamic_filter` method, the filter conditionally modifies the query depending on `filter_param.condition` (e.g., case sensitive or insensitive matching). Access to `query` and `filter_param` objects allows fine control of the filter's behavior on database queries.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# Using field's filterable option\nfield :first_name,\n  as: :text,\n  filterable: {\n    # ...\n    query: -> {\n      case filter_param.condition.to_sym\n      when :case_sensitive\n        query.where(\"name = ?\", filter_param.value)\n      when :not_case_sensitive\n        query.where(\"LOWER(name) = ?\", filter_param.value.downcase)\n      end\n    }\n    # ...\n  }\n\n# Using dynamic_filter method\ndynamic_filter :first_name,\n  query: -> {\n    case filter_param.condition.to_sym\n    when :case_sensitive\n      query.where(\"name = ?\", filter_param.value)\n    when :not_case_sensitive\n      query.where(\"LOWER(name) = ?\", filter_param.value.downcase)\n    end\n  }\n```\n\n----------------------------------------\n\nTITLE: Overriding Cache Hash in Avo Resource\nDESCRIPTION: This snippet demonstrates overriding the `cache_hash` method in an Avo resource.  It extends the default cache key generation by adding a static string `\"SOMETHING_NEW\"` to the cache key components.  This will bust the cache when that string is changed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def cache_hash(parent_record)\n    result = [record, file_hash, \"SOMETHING_NEW\"]\n\n    if parent_record.present?\n      result << parent_record\n    end\n\n    result\n  end\n\n  # fields, cards and more\nend\n```\n\n----------------------------------------\n\nTITLE: Using ProgressBarField with Options in Avo Resource Definition - Ruby\nDESCRIPTION: Illustrates how to define the 'progress' field in the Avo Project resource using the custom progress bar field with options 'step', 'display_value', and 'value_suffix' to render a progress bar with 10 increments, visible value, and a '%' suffix. This allows UI customization directly from the resource definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Project < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :progress, as: :progress_bar, step: 10, display_value: true, value_suffix: \"%\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Computed Field in Avo (Ruby)\nDESCRIPTION: Demonstrates defining a computed field named `full_name` in Avo. The provided block accesses the `record` variable, made available via the ExecutionContext, to concatenate `first_name` and `last_name`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/execution-context.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :full_name, as: :text do\n  \"#{record.first_name} #{record.last_name}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Avo Field Labels (Ruby)\nDESCRIPTION: Shows how to override the default generated label for an Avo field using the `name:` option. This example changes the label for the `:is_available` boolean field to \"Availability\".\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :is_available, as: :boolean, name: \"Availability\"\n```\n\n----------------------------------------\n\nTITLE: Creating AvoJsonFields concern (Ruby)\nDESCRIPTION: This Ruby code defines a module `AvoJsonFields` intended as a concern for handling JSON fields in Rails models. The module extends `ActiveSupport::Concern` and includes a class method `avo_json_fields`. The `avo_json_fields` method dynamically defines getter and setter methods (`_json` and `_json=`) for each specified field. The getter method formats the JSON using `JSON.pretty_generate`, and the setter parses incoming strings using `JSON.parse`.  It includes basic error handling to manage parsing errors. This improves code reusability and keeps the model clean.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/format-ruby-object-to-json.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule AvoJsonFields\n  extend ActiveSupport::Concern\n\n  class_methods do\n    def avo_json_fields(*fields)\n      fields.each do |field|\n        define_method \"#{field}_json\" do\n          JSON.pretty_generate(send(field).as_json)\n        end\n\n        define_method \"#{field}_json=\" do |value|\n          begin\n            send(\"#{field}=\", JSON.parse(value))\n          rescue JSON::ParserError => e\n            # handle or ignore it\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hiding Avo Media Library Menu Item in Ruby\nDESCRIPTION: This Ruby snippet sets the 'visible' option to false within the Avo::MediaLibrary configuration, hiding the Media Library menu item from the sidebar. Place it in your config/initializers/avo.rb file. When the 'visible' property is false, users will not see the Media Library option in the Avo interface; other features remain unaffected.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/media-library.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nif defined?(Avo::MediaLibrary)\n  Avo::MediaLibrary.configure do |config|\n    config.visible = false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining HasMany Through Association (Ruby)\nDESCRIPTION: This snippet shows how to define a `HasMany` association using the `:through` option, which specifies an intermediate model for a many-to-many relationship. It associates `members` through `memberships`.  This requires the presence of `memberships` which acts as the join table.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/has_many.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :members,\n  as: :has_many,\n  through: :memberships\n```\n\n----------------------------------------\n\nTITLE: Implementing an Avo Boolean Filter in Ruby\nDESCRIPTION: Provides a complete example of an Avo Boolean filter (`Avo::Filters::Featured`). It defines the filter's `name`, the `apply` method which modifies the ActiveRecord query based on selected checkbox values (passed as a hash with stringified keys in `values`), and the `options` method which defines the available checkboxes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::Featured < Avo::Filters::BooleanFilter\n  self.name = 'Featured filter'\n\n  # `values` comes as a hash with stringified keys\n  # Eg:\n  # {\n  #   'is_featured': true\n  # }\n  def apply(request, query, values)\n    return query if values['is_featured'] && values['is_unfeatured']\n\n    if values['is_featured']\n      query = query.where(is_featured: true)\n    elsif values['is_unfeatured']\n      query = query.where(is_featured: false)\n    end\n\n    query\n  end\n\n  def options\n    {\n      is_featured: \"Featured\",\n      is_unfeatured: \"Unfeatured\"\n    }\n  end\n\n  # Optional method to set the default state.\n  # def default\n  #   {\n  #     is_featured: true\n  #   }\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Labels for KeyValue Field in Ruby\nDESCRIPTION: Demonstrates how to personalize UI labels such as key header, value header, add row button, and delete row button by passing custom string values to respective properties while defining the KeyValue field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/key_value.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :meta, # The database field ID\n  as: :key_value, # The field type.\n  key_label: \"Meta key\", # Custom value for key header. Defaults to 'Key'.\n  value_label: \"Meta value\", # Custom value for value header. Defaults to 'Value'.\n  action_text: \"New item\", # Custom value for button to add a row. Defaults to 'Add'.\n  delete_text: \"Remove item\" # Custom value for button to delete a row. Defaults to 'Delete'.\n```\n\n----------------------------------------\n\nTITLE: Configuring AccountResource for Role Management\nDESCRIPTION: This snippet shows how to configure the `AccountResource` to manage assigned roles using Avo. It defines a virtual field `assigned_roles` to display the roles as tags and a `roles` field to allow the assignment of roles.  It also uses a `hide_on: :forms` option for the tags and `attach_scope` to prevent duplicate role assignments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rolify-integration.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass AccountResource < Avo::BaseResource\n  # ...\n\n  field :assigned_roles, as: :tags, hide_on: :forms do\n    record.roles.map {|role|role.name}\n  end\n\n  # Only show roles that have not already been assigned to the object, because Avo does not use the add_role method, so it is possible to assign a role twice\n  field :roles, as: :has_many, attach_scope: -> { query.where.not(id: parent.roles.pluck(:id)) }\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Discovering Columns Excluding Fields in Avo (Ruby)\nDESCRIPTION: This snippet shows the use of the `except` option within `discover_columns` and `discover_associations` to exclude certain fields from discovery. This is useful for hiding internal or sensitive data from the Avo interface. This example provides a configuration to exclude `metadata` and `internal_notes` for columns and `audit_logs` for associations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-discovery.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  # ...\n\n  def fields\n    discover_columns except: [:metadata, :internal_notes]\n    discover_associations except: [:audit_logs]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Tool Layout | Avo Resource Tools | ERB\nDESCRIPTION: Implements the main ERB partial for the `NestedFishReviews` resource tool (`_nested_fish_reviews.html.erb`). It wraps the content with the `nested-form` Stimulus controller attributes, defines a template for new forms, renders initial nested forms (if any), and adds a button (`a_link`) that triggers the Stimulus controller to add new review form instances dynamically.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/nested-records-when-creating.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<!-- app/views/avo/resource_tools/_nested_fish_reviews.html.erb -->\n<div class=\"flex flex-col\">\n  <%= content_tag :div,data: { controller: 'nested-form', nested_form_wrapper_selector_value: '.nested-form-wrapper' } do %>\n    <%= render Avo::PanelComponent.new(name: \"Reviews\", description: \"Create some reviews for this fish\") do |c| %>\n      <% c.with_bare_content do %>\n        <% if form.present? %>\n          <template data-nested-form-target=\"template\">\n            <%= form.fields_for :reviews, Review.new, multiple: true, child_index: 'NEW_RECORD' do |todo_fields| %>\n              <%= render \"avo/partials/fish_review\", f: todo_fields %>\n            <% end %>\n          </template>\n          <div class=\"space-y-4\">\n            <%= form.fields_for :reviews, Review.new, multiple: true do |todo_fields| %>\n              <%= render \"avo/partials/fish_review\", f: todo_fields %>\n            <% end %>\n            <div data-nested-form-target=\"target\"></div>\n          </div>\n        <% end %>\n      <% end %>\n      <% c.with_footer_tools do %>\n        <div class=\"mt-4\">\n          <%= a_link 'javascript:void(0);', icon: 'plus', color: :primary, style: :outline, data: {action: \"click->nested-form#add\"} do %>\n            Add another review\n          <% end %>\n        </div>\n      <% end %>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Feedback Notifications in Avo Actions (Ruby)\nDESCRIPTION: Shows how to display multiple types of notifications (`succeed`, `warn`, `inform`, `error`) sequentially after an Avo action executes. This is achieved by calling each respective feedback method within the action's `handle` method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  def handle(**args)\n    succeed \"Success response ✌️\"\n    warn \"Warning response ✌️\"\n    inform \"Info response ✌️\"\n    error \"Error response ✌️\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Model Associations in Ruby on Rails\nDESCRIPTION: Defines standard Ruby on Rails Active Record associations between `Application` and `Client` models. The `Application` model `belongs_to` a `Client`, and the `Client` model `has_many` `applications`, establishing a one-to-many relationship necessary for associated searches.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/application.rb\nclass Application < ApplicationRecord\n  belongs_to :client\nend\n\n# app/models/client.rb\nclass Client < ApplicationRecord\n  has_many :applications\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authorization Method Names (Ruby)\nDESCRIPTION: Demonstrates how to use the `authorization_methods` configuration option within the Avo initializer (`Avo.configure`) to specify alternative names for the policy methods that Avo uses for standard resource actions, allowing integration with existing policy naming conventions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.root_path = '/avo'\n  config.app_name = 'Avocadelicious'\n  config.license_key = ENV['AVO_LICENSE_KEY']\n  config.authorization_methods = {\n    index: 'avo_index?',\n    show: 'avo_show?',\n    edit: 'avo_edit?',\n    new: 'avo_new?',\n    update: 'avo_update?',\n    create: 'avo_create?',\n    destroy: 'avo_destroy?',\n    search: 'avo_search?',\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Location Field with Separate Latitude and Longitude Columns in Avo (Ruby)\nDESCRIPTION: This code declares a Location field whose values are stored across two database columns: 'latitude' and 'longitude'. The 'stored_as' option instructs Avo to use the specified columns, providing two distinct form inputs and composing the map point using both column values. Requires the 'mapkick-rb' gem and a valid MAPBOX_ACCESS_TOKEN environment variable. The field is editable with a form showing separate latitude and longitude fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/location.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :coordinates, as: :location, stored_as: [:latitude, :longitude]\n```\n\n----------------------------------------\n\nTITLE: Including Multitenancy Concern in Avo Configuration in Ruby\nDESCRIPTION: Modifies Avo's initializer to include the Multitenancy concern in Avo::ApplicationController. This ensures tenant-setting logic runs on every request. It uses Rails.configuration.to_prepare to apply the inclusion when Rails reloads classes during development. There are no additional parameters, but the Multitenancy module must be defined and loaded beforehand.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/multitenancy.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  # configuration values\nend\n\nRails.configuration.to_prepare do\n  Avo::ApplicationController.include Multitenancy\nend\n```\n\n----------------------------------------\n\nTITLE: Registering a Filter within a Resource\nDESCRIPTION: This snippet demonstrates how to register a custom filter in an Avo resource by defining the `filters` method and including the filter class, enabling filtering capabilities on resource data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id\n  end\n\n  def filters\n    filter Avo::Filters::Published\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enable Click Row to View Record in Avo (Ruby)\nDESCRIPTION: This configuration enables users to click on a row in a table to navigate to the Show view of that record. It sets the `click_row_to_view_record` option to `true` in the `avo.rb` initializer.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.click_row_to_view_record = true\nend\n```\n\n----------------------------------------\n\nTITLE: Multiple Select Filter Class\nDESCRIPTION: This class allows filtering records based on multiple selected options through a multi-select dropdown. The `apply` method filters the query based on the presence of specific values in the selected array. Options are defined as a hash with ids and labels and can have a default array set.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Filters::PostStatus < Avo::Filters::MultipleSelectFilter\n  self.name = \"Status\"\n\n  # `value` as array of strings\n  def apply(request, query, value)\n    if value.include? 'admins'\n      query = query.admins\n    end\n\n    if value.include? 'non_admins'\n      query = query.non_admins\n    end\n\n    query\n  end\n\n  def options\n    {\n      admins: \"Admins\",\n      non_admins: \"Non admins\"\n    }\n  end\n\n  # Optional default array\n  # def default\n  #   ['admins', 'non_admins']\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo with Custom current_user Method (Ruby)\nDESCRIPTION: This snippet shows how to set a custom authentication method for Avo, such as current_admin, instead of the default current_user. Use this inside config/initializers/avo.rb to support authentication systems other than Devise. Ensure that the specified method returns the correct user/admin object and matches your application's authentication logic.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authentication.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_method = :current_admin\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Resource Caching in Avo Index View\nDESCRIPTION: Turn off the default caching of resource rows on the index view, which is useful when using visibility rules based on user roles.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.cache_resources_on_index_view = false\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Active Storage File Attachments in Trix Editor Field using Ruby\nDESCRIPTION: Configures a Trix field with file attachment capabilities by specifying an attachment key that corresponds to the Active Storage attachments association on the model. This allows drag-and-drop file uploads which are then managed as Active Record attachments. The model must have a matching `has_many_attached` declaration for the given attachment key to link uploaded files properly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/trix.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :trix, attachment_key: :trix_attachments\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  has_many_attached :trix_attachments\nend\n```\n\n----------------------------------------\n\nTITLE: Building a Tag Suggestions API Endpoint with Rails Controller - Ruby\nDESCRIPTION: This controller action returns a list of tag suggestions as JSON, mapping Skill records into value/label objects for use by the tags field in Avo. It expects to be called via HTTP GET with an optional user query in params. Required dependencies are Rails models and controller setup. Outputs an array of hashes suitable for dynamic consumption by the tags UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/avo/skills_controller.rb\nclass Avo::SkillsController < Avo::ResourcesController\n  def skills_for_user\n    # You can access the user input by using params[\"q\"]\n    skills = Skill.all.map do |skill|\n      {\n        value: skill.id,\n        label: skill.name\n      }\n    end\n    render json: skills\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Declaring 'activestorage' and 'image_processing' gems in Gemfile\nDESCRIPTION: This snippet demonstrates how to include the 'activestorage' gem for file upload management and the 'image_processing' gem for high-level image transformations in your Ruby project's Gemfile. It includes inline comments explaining each gem’s purpose and prerequisites.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/files_gem_common.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# Active Storage makes it simple to upload and reference files\ngem \"activestorage\"\n\n# High-level image processing wrapper for libvips and ImageMagick/GraphicsMagick\ngem \"image_processing\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Avo Action - Ruby\nDESCRIPTION: This snippet defines a custom Avo action named \"ReleaseFish\". It includes a name, a confirmation message, and a text area input field for the message. The `handle` method iterates through the provided models, calls the `release` method on each, and then succeeds with a success message that includes the number of released fish and the message from the input field.  Dependencies include Avo and Ruby on Rails. The key parameters are the `args` hash, including models, fields and current user. The output is a success message.  There are no inherent limitations beyond those of the underlying model's `release` method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/testing.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass ReleaseFish < Avo::BaseAction\n  self.name = \"Release fish\"\n  self.message = \"Are you sure you want to release this fish?\"\n\n  field :message, as: :textarea, help: \"Tell the fish something before releasing.\"\n\n  def handle(**args)\n    args[:models].each do |model|\n      model.release\n    end\n\n    succeed \"#{args[:models].count} fish released with message '#{args[:fields][:message]}'.\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Row Controls in Avo Index Table - Ruby\nDESCRIPTION: This snippet provides a custom row_controls lambda for the Fish resource in Avo to customize the buttons shown at the end of each index table row (and grid rows). It includes an action button, edit/show/delete buttons (with custom titles and confirmation), an actions_list dropdown, as well as context-sensitive controls that hide or change depending on params[:view_type]. It also adds dynamic link_to elements with interpolated data such as record.name. The block utilizes Avo-provided helpers and action classes, and requires access to context variables like params and record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customizable-controls.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.row_controls = -> do\n    action Avo::Actions::ReleaseFish, label: \"Release #{record.name}\", style: :primary, color: :blue,\n      icon: \"heroicons/outline/hand-raised\" unless params[:view_type] == \"grid\"\n    edit_button title: \"Edit this Fish now!\"\n    show_button title: \"Show this Fish now!\"\n    delete_button title: \"Delete this Fish now!\", confirmation_message: \"Are you sure you want to delete this Fish?\"\n    actions_list style: :primary, color: :slate, label: \"Actions\" unless params[:view_type] == \"grid\"\n    action Avo::Actions::ReleaseFish, title: \"Release #{record.name}\", icon: \"heroicons/outline/hand-raised\", style: :icon\n    link_to \"Information about #{record.name}\", \"https://en.wikipedia.org/wiki/#{record.name}\",\n      icon: \"heroicons/outline/information-circle\", target: :_blank, style: :icon\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Select Filter Class for Single-Choice Filtering\nDESCRIPTION: This class implements a select dropdown filter, enabling users to filter records based on one selected option. The `apply` method processes the selected value to filter records accordingly, and the `options` method provides the dropdown options. A default selection can also be set.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Filters::Published < Avo::Filters::SelectFilter\n  self.name = 'Published status'\n\n  # `value` is a string representing selected option\n  def apply(request, query, value)\n    case value\n    when 'published'\n      query.where.not(published_at: nil)\n    when 'unpublished'\n      query.where(published_at: nil)\n    else\n      query\n    end\n  end\n\n  def options\n    {\n      published: \"Published\",\n      unpublished: \"Unpublished\"\n    }\n  end\n\n  # Optional default value\n  # def default\n  #   :published\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Search Query for Avo Resource (Ruby)\nDESCRIPTION: This code snippet defines a custom search query for the `CourseLink` Avo resource, using `ransack`.  It constructs a search query that filters the results based on the `id` and `link` fields, allowing for searching by ID or link content, using an OR condition.  It assumes you have `ransack` and Avo set up correctly and that you have properly defined the search.  The output is the result of the ransack query.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/associations_searchable_option_common.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  self.search = {\n    query: -> {\n      query.ransack(id_eq: params[:q], link_cont: params[:q], m: \"or\").result(distinct: false)\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining REST Endpoint for Dynamic Filter Values in Ruby on Rails\nDESCRIPTION: Defines a controller action within an Avo resource controller that returns a JSON array of objects with keys: value, label, and optionally avatar. The response can be filtered based on user input retrieved as params[\"q\"]. This endpoint serves as a data source to dynamically populate filter options in Avo UI components. It requires Rails and the Avo gem to be setup, and presumes routing to this action is configured properly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::CitiesController < Avo::ResourcesController\n  def tags\n    # You can access the user input by using params[\"q\"]\n    render json: [\n      {\n        value: 1,\n        label: \"one\",\n        avatar: \"https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop\"\n      },\n      {\n        value: 2,\n        label: \"two\",\n        avatar: \"https://images.unsplash.com/photo-1567254790685-6b6d6abe4689?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop\"\n      },\n      {\n        value: 3,\n        label: \"three\",\n        avatar: \"https://images.unsplash.com/photo-1560765447-da05a55e72f8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop\"\n      }\n    ]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic External Image Field in Avo (Ruby)\nDESCRIPTION: Defines an Avo resource field named `:logo` that displays an image. It uses the `external_image` type, which expects the corresponding attribute on the resource record to contain the image URL. This renders the image on Index and Show views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/external_image.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :logo, as: :external_image\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Result Click Path\nDESCRIPTION: By default, clicking a search result navigates to the record's show page. Use the `result_path` option to specify a different destination path. This lambda has access to the `record` object and should return a valid URL path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(name_eq: params[:q]).result(distinct: false) },\n    result_path: -> { avo.resources_city_path record, custom: \"yup\" }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Chartkick Card\nDESCRIPTION: This snippet defines a Chartkick card, configuring its `id`, `label`, `chart_type`, `description`, and `cols`.  The `query` method generates sample data for the chart.  The supported `chart_type` options include: `line_chart`, `pie_chart`, `column_chart`, `bar_chart`, `area_chart`, and `scatter_chart`. Requires the Chartkick gem and the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::UserSignups < Avo::Cards::ChartkickCard\n  self.id = 'user_signups'\n  self.label = 'User signups'\n  self.chart_type = :area_chart\n  self.description = 'Some tiny description'\n  self.cols = 2\n  # self.rows = 1\n  # self.chart_options = { library: { plugins: { legend: { display: true } } } }\n  # self.flush = true\n  # self.legend = false\n  # self.scale = false\n  # self.legend_on_left = false\n  # self.legend_on_right = false\n\n  def query\n    points = 16\n    i = Time.new.year.to_i - points\n    base_data =\n      Array\n        .new(points)\n        .map do\n          i += 1\n          [i.to_s, rand(0..20)]\n        end\n        .to_h\n\n    data = [\n      { name: 'batch 1', data: base_data.map { |k, v| [k, rand(0..20)] }.to_h },\n      { name: 'batch 2', data: base_data.map { |k, v| [k, rand(0..40)] }.to_h },\n      { name: 'batch 3', data: base_data.map { |k, v| [k, rand(0..10)] }.to_h }\n    ]\n\n    result data\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Authorizing Search in Policy Files\nDESCRIPTION: Demonstrates how to authorize search operations using the search? method in policy files, which controls whether search is available for a resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserPolicy < ApplicationPolicy\n  def search?\n    true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic App Name with Block in Avo\nDESCRIPTION: Sets the application name dynamically by passing a lambda that calls the I18n translation method, allowing for localization or other dynamic name assignments. Dependencies include the I18n library.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.app_name = -> { I18n.t \"app_name\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Filters in Avo Resource (Ruby)\nDESCRIPTION: Demonstrates how to include custom filters in an Avo resource by defining the `filters` method within the `Avo::Resources::Course` class. It uses the `filter` helper method to add the `Avo::Filters::CourseCountryFilter` and `Avo::Filters::CourseCityFilter` to the resource, making them available in the Avo UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/course.rb\nclass Avo::Resources::Course < Avo::BaseResource\n  def filters\n    filter Avo::Filters::CourseCountryFilter\n    filter Avo::Filters::CourseCityFilter\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including Multitenancy Concern in Avo Controller (Ruby)\nDESCRIPTION: Modifies the Avo initializer to include the 'Multitenancy' concern into Avo's base application controller ('Avo::ApplicationController'). This ensures that the logic for setting the current tenant based on the subdomain is executed before any Avo controller actions, correctly scoping data within the Avo admin interface. Depends on the 'Multitenancy' concern module.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/acts_as_tenant_integration.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  # configuration values\nend\n\nRails.configuration.to_prepare do\n  Avo::ApplicationController.include Multitenancy\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying External Image in Avo Grid Cover with Computed URL (Ruby)\nDESCRIPTION: Configures an Avo grid `:cover` position to display an external image. It uses a computed block to generate the image URL dynamically based on `record.url`, similar to a standard field, and adds the `link_to_record: true` option to make the cover image clickable and navigate to the record's show page.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/external_image.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\ncover :logo, as: :external_image, link_to_record: true do\n  \"//logo.clearbit.com/#{URI.parse(record.url).host}?size=180\"\nrescue\n  nil\nend\n```\n\n----------------------------------------\n\nTITLE: Installing the avo-meta Ruby Gem via Gemfile\nDESCRIPTION: Includes the 'avo-meta' gem from a custom source in the Gemfile for managing resource meta attributes in Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-meta.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ngem \"avo-meta\", source: \"https://packager.dev/avo-hq/\"\n```\n\n----------------------------------------\n\nTITLE: Applying Authorization Rules to Menu Items\nDESCRIPTION: Shows how to use the `authorize` method within the `visible` option to integrate authorization rules, ensuring menu items are only visible if the current user is authorized.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    resource :team, visible: -> do\n      # authorize current_user, MODEL_THAT_NEEDS_TO_BE_AUTHORIZED, METHOD_THAT_NEEDS_TO_BE_AUTHORIZED\n      authorize current_user, Team, \"index?\", raise_exception: false\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Single Review Partial Template in ERB\nDESCRIPTION: Defines a reusable ERB partial that contains the form fields for a single review, including a trix editor for the body and a belongs_to field for the user association.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/nested-records-when-creating.md#_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<!-- app/views/avo/partials/_fish_review.html.erb -->\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_body do %>\n    <div class=\"nested-form-wrapper divide-y\" data-new-record=\"<%= f.object.new_record? %>\">\n      <%= avo_edit_field :body, as: :trix, form: f, help: \"What should the review say\", required: true %>\n      <%= avo_edit_field :user, as: :belongs_to, form: f, help: \"Who created the review\", required: true %>\n    </div>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Customizing Redirect Paths After Create/Update with `after_create_path` and `after_update_path` in Ruby\nDESCRIPTION: This snippet defines custom redirect destinations after creating or updating a resource, allowing navigation to index, show, or edit views. It offers flexible user flow control based on resource actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_40\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.after_create_path = :index\n  self.after_update_path = :edit\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Money Field with Currency Options in Ruby\nDESCRIPTION: This snippet demonstrates how to define a money field named :price in an Avo resource using Ruby. It specifies the currencies available in a dropdown by passing an array of ISO currency codes via the `currencies` option. This field visualizes and manages monetary values within the admin interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/money.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :price, as: :money, currencies: %w[EUR USD RON PEN]\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Group Field in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to declare a `boolean_group` field within an Avo resource.  It showcases how to define the field with its name and specify the options.  The `options` key-value pairs map database keys to user-friendly labels. This snippet is used to define a roles field in a resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/boolean_group.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :roles,\n  as: :boolean_group,\n  name: \"User roles\",\n  options: {\n    admin: \"Administrator\",\n    manager: \"Manager\",\n    writer: \"Writer\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination in Avo Resource\nDESCRIPTION: This snippet shows how to configure pagination behavior in an Avo resource, providing control over the pagination count and style. By setting `self.pagination[:type]` to `:countless`, the pagination count on the index page can be disabled. The `type` key accepts the values `:default` and `:countless`. Additionally, the `size` can be configured to control the page links.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nself.pagination = -> do\n  {\n    type: :default,\n    size: [1, 2, 2, 1],\n  }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nself.pagination = {\n  type: :default,\n  size: [1, 2, 2, 1],\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nself.pagination = -> do\n  {\n    type: :countless\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Ordering with acts_as_list in Avo Resources\nDESCRIPTION: Sets up basic record ordering functionality using acts_as_list gem's methods to move records higher, lower, to the top, or to the bottom. This configuration shows the ordering options in a popover on the index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/records-reordering.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  self.ordering = {\n    visible_on: :index,\n    actions: {\n      higher: -> { record.move_higher },\n      lower: -> { record.move_lower },\n      to_top: -> { record.move_to_top },\n      to_bottom: -> { record.move_to_bottom },\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining HasOne Association Field in Avo Using Ruby\nDESCRIPTION: Defines a has_one association field in a Ruby model within the Avo framework by declaring a field with the :has_one type. This code snippet enables displaying the associated model's details unfolded on the parent model's show view, providing interaction buttons for attaching and detaching the associated record. Requires the Avo framework and a properly configured Ruby on Rails model with the has_one association and preferably setting the 'inverse_of' attribute to optimize model relation handling.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/associations/has_one.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :admin, as: :has_one\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Action Policy Method (Ruby)\nDESCRIPTION: Shows the policy method (`amount?`) defined in the resource policy class (`ProductPolicy`) that corresponds to the authorization check initiated from the resource field definition, containing the actual logic to determine if the user is authorized for that specific field interaction.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\n# Define ability to change the amount in Product Policy\ndef amount?\n  user.admin?\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Query Scope and Inline Ordering in Avo Resource Using Ruby\nDESCRIPTION: This snippet demonstrates setting a custom query scope for an Avo resource to ensure records are ordered by position in ascending order, while also enabling always-visible ordering buttons. The resolve_query_scope lambda applies a position-based ordering to queries, and ordering actions are configured as before with acts_as_list. Dependencies include Avo and acts_as_list. Inputs are resource class/relation queries and user button clicks; outputs are sorted, reorderable records specifically on the index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/records-reordering.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseLinkResource < Avo::BaseResource\n  self.resolve_query_scope = ->(model_class:) do\n    model_class.order(position: :asc)\n  end\n\n  self.ordering = {\n    display_inline: true,\n    visible_on: :index, # :index or :association\n    actions: {\n      higher: -> { record.move_higher }, # has access to record, resource, options, params\n      lower: -> { record.move_lower },\n      to_top: -> { record.move_to_top },\n      to_bottom: -> { record.move_to_bottom }\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Comparing Avo View Context via String, Symbol, Predicate, and Membership Methods in Ruby\nDESCRIPTION: Demonstrates several approaches to determine the current Avo resource view in Ruby, including direct equality checks using strings and symbols, predicate method checks (such as view.show?), and using the in? method for collection membership. Requires access to the 'view' object (instance of Avo::ViewInquirer). Inputs may be strings or symbols representing view names and outputs are boolean results. Useful for customizing behavior depending on the CRUD context of a resource; no external dependencies required.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/views.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nview == \"edit\" # Check against a string\nview == :edit # Check against a symbol\nview.edit? # Ask if it's a view\nview.form? # Ask if it's a collection of views\nview.in? [:edit, :new] # Check against an array of symbols\nview.in? [\"edit\", \"new\"] # Check against an array of strings\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Show View Controls in Ruby for Avo Resources\nDESCRIPTION: Example of customizing the show controls for a Fish resource in Avo. It demonstrates how to configure various types of controls including back button, custom links with Turbo support, delete and detach buttons, actions list with exclusions, and individual actions with styling options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customizable-controls.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass FishResource < Avo::BaseResource\n  self.show_controls = -> do\n    back_button label: \"\", title: \"Go back now\"\n    link_to \"Fish.com\", \"https://fish.com\", icon: \"heroicons/outline/academic-cap\", target: :_blank\n    link_to \"Turbo demo\", \"/admin/resources/fish/#{params[:id]}?change_to=🚀🚀🚀 New content here 🚀🚀🚀\",\n      class: \".custom-class\",\n      data: {\n        turbo_frame: \"fish_custom_action_demo\"\n      }\n    delete_button label: \"\", title: \"something\"\n    detach_button label: \"\", title: \"something\"\n    actions_list exclude: [ReleaseFish], style: :primary, color: :slate\n    action ReleaseFish, style: :primary, color: :fuchsia, icon: \"heroicons/outline/globe\"\n    edit_button label: \"\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Authenticating Avo with Custom Block Using authenticate_with (Ruby)\nDESCRIPTION: This configures Avo to run custom logic in ApplicationController before actions by setting config.authenticate_with. Place this block in config/initializers/avo.rb and define any authentication process (e.g., authenticate_admin_user). Protected methods from the main app's ApplicationController cannot be used directly unless defined publicly or within the block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authentication.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.authenticate_with do\n    authenticate_admin_user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Localization for a Resource in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to specify a custom translation key for a resource within Avo by adding the self.translation_key attribute in the resource class file. It requires the avo gem and is used to direct Avo to the correct translation lookup for displaying resource labels. The primary parameter is self.translation_key, which should match the structure in your YAML locale files. Outputs are the localized labels rendered within the admin panel; ensure the translation keys exist to prevent fallback to default names.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/i18n.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  self.title = :name\n  self.translation_key = 'avo.resource_translations.user'\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Options for Select Field in Avo (Ruby)\nDESCRIPTION: Demonstrates assigning custom options to a select field with the options: parameter. This allows specifying dropdown choices for the select input. The options must be provided as an array; in this example, %w[first second third] creates an array of string options for selection.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# options will set the dropdown options for a select field\nfield :status, as: :select, options: %w[first second third]\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Select Filter (Ruby)\nDESCRIPTION: Defines a basic Avo Select filter. The `apply` method receives a single `value` representing the selected option key (as a string or symbol). The `options` method defines the key-value pairs for the dropdown list.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PublishedFilter < Avo::Filters::SelectFilter\n  self.name = 'Published status'\n\n  # `value` comes as a string\n  # Eg: 'published'\n  def apply(request, query, value)\n    case value\n    when 'published'\n      query.where.not(published_at: nil)\n    when 'unpublished'\n      query.where(published_at: nil)\n    else\n      query\n    end\n  end\n\n  def options\n    {\n      published: \"Published\",\n      unpublished: \"Unpublished\"\n    }\n  end\n\n  # Optional method to set the default state.\n  # def default\n  #   :published\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Avo Action\nDESCRIPTION: This code registers an Avo action named `ToggleActive` with the `UserResource`. By including the `action ToggleActive` line, the action will be available in the Avo interface when managing user records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserResource < Avo::BaseResource\n  self.title = :name\n  self.search = [:id, :first_name, :last_name]\n\n  field :id, as: :id\n  # other fields\n\n  action ToggleActive\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring a Files Field with Active Storage in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to declare a field supporting multiple file uploads using the 'as: :files' option within a Rails form or data structure. It is dependent on Active Storage being set up and assumes inclusion in a compatible context (such as a Rails resource declaration). The field name ('documents') represents the attribute linked to the set of files, and 'as: :files' configures the field for multi-file support. No direct input/output is shown; instead, it prepares the field for file association. Ensure Active Storage is installed and configured in your Rails project before using.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/files.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :documents, as: :files\n```\n\n----------------------------------------\n\nTITLE: Defining Team Model\nDESCRIPTION: This Ruby code defines a Team model. It provides the base for creating the Avo team resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/team.rb\nclass Team < ApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Resource with Sidebar Fields in Avo Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to define a resource class in Avo with a main panel that includes fields and a sidebar. The sidebar contains specific fields like email and active status, displayed only on show pages. It also exemplifies embedding custom resource tools within the sidebar.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-sidebar.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    main_panel do\n      field :id, as: :id, link_to_record: true\n      field :first_name, as: :text, placeholder: \"John\"\n      field :last_name, as: :text, placeholder: \"Doe\"\n\n      # We can also add custom resource tools\n      tool UserTimeline\n\n      sidebar do\n        field :email, as: :gravatar, link_to_record: true, only_on: :show\n        field :active, as: :boolean, name: \"Is active\", only_on: :show\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Select with ActiveRecord Enum - Ruby\nDESCRIPTION: Within an Avo resource, this Ruby code demonstrates how to use an existing ActiveRecord `enum` (`::Project.types`) as the source for the `Select` field's options instead of defining them directly via the `options` parameter. It also includes common settings like `display_with_value` and `placeholder`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/select.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  field :type,\n    as: :select,\n    enum: ::Project.types,\n    display_with_value: true,\n    placeholder: 'Choose the type of the container.'\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a DateTime Field in Ruby with Custom Attributes\nDESCRIPTION: This Ruby code snippet demonstrates how to define a DateTime field with specific attributes such as name, picker format, display format, timezone, and 24-hour time setting. It provides a practical example of configuring a DateTime picker in a Ruby-based web framework, highlighting options for customization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/date_time.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :joined_at,\n  as: :date_time,\n  name: \"Joined at\",\n  picker_format: \"Y-m-d H:i:S\",\n  format: \"yyyy-LL-dd TT\",\n  time_24hr: true,\n  timezone: \"PST\"\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Options for Boolean Group (Ruby)\nDESCRIPTION: This snippet shows how to dynamically generate options for a `boolean_group` field using a lambda.  The lambda has access to the `record`, `resource`, `view`, and `field` properties. The options hash will use the record's features with humanized names as visible labels.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/boolean_group.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Project < Avo::BaseResource\n  field :features,\n    as: :boolean_group,\n    options: -> do\n      record.features.each_with_object({}) do |feature, hash|\n        hash[feature.id] = feature.name.humanize\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Fields Using a Ruby Block in Avo\nDESCRIPTION: Shows how to create a computed field whose value isn't backed by a database column. The field accepts a block that receives the record, resource, and view, enabling custom value logic. Handles exceptions gracefully and returns a fallback value if needed. Only displayed on the Index and Show views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nfield 'Has posts', as: :boolean do\n  record.posts.present?\nrescue\n  false\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an API Controller for Tag Suggestions - Ruby (SkillsController)\nDESCRIPTION: Implements an Avo controller action that provides a list of skills for the tags field, returned as an array of hashes containing skill IDs and names. This enables frontend fields to dynamically retrieve suggestions via AJAX. Requires the 'Skill' model to respond to 'all' and 'name'; returns JSON on GET requests.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::SkillsController < Avo::ResourcesController\n  def skills_for_user\n    skills = Skill.all.map do |skill|\n      {\n        value: skill.id,\n        label: skill.name\n      }\n    end\n    render json: skills\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering an Avo Filter in a Ruby Resource\nDESCRIPTION: Demonstrates how to register a defined Avo filter class (e.g., `Avo::Filters::Published`) within an Avo Resource class (`Avo::Resources::Post`). This is done by calling the `filter` method inside the `filters` definition block of the resource, making the filter available on the resource's index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id\n  end\n\n  def filters\n    filter Avo::Filters::Published\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Field in Ruby with Avo\nDESCRIPTION: Example of configuring a Status field named 'progress' with custom conditions for failed, loading, and success states. The field will display different visual indicators based on the value of the record's progress attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/status.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :progress,\n  as: :status,\n  failed_when: [:closed, :rejected, :failed],\n  loading_when: [:loading, :running, :waiting, \"in progress\"],\n  success_when: [:done],\n```\n\n----------------------------------------\n\nTITLE: Initializing Select field with computed options\nDESCRIPTION: This snippet demonstrates how to use a lambda function to compute the options for the `Select` field dynamically. The lambda has access to the `record`, `resource`, `view`, and `field` properties, allowing it to fetch data from the database or other sources. The result is an array of key-value pairs for the select options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/select.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  field :type,\n    as: :select,\n    options: -> do\n      record.get_types_from_the_database.map { |type| [type.name, type.id] }\n    end,\n    placeholder: 'Choose the type of the container.'\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Row Controls in Avo Index (Ruby)\nDESCRIPTION: This snippet explains how to customize the controls displayed at the end of each table row or grid item in the Avo resource's index view using the `row_controls` class attribute. The block includes a conditional action button (`action`) based on the view type, edit, show, and delete buttons with custom titles and confirmation messages, a conditional action list (`actions_list`), and icon-styled action and link controls (`action`, `link_to`) using the `record` object for dynamic content.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customizable-controls.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.row_controls = -> do\n    action Avo::Actions::ReleaseFish, label: \"Release #{record.name}\", style: :primary, color: :blue,\n      icon: \"heroicons/outline/hand-raised\" unless params[:view_type] == \"grid\"\n    edit_button title: \"Edit this Fish now!\"\n    show_button title: \"Show this Fish now!\"\n    delete_button title: \"Delete this Fish now!\", confirmation_message: \"Are you sure you want to delete this Fish?\"\n    actions_list style: :primary, color: :slate, label: \"Actions\" unless params[:view_type] == \"grid\"\n    action Avo::Actions::ReleaseFish, title: \"Release #{record.name}\", icon: \"heroicons/outline/hand-raised\", style: :icon\n    link_to \"Information about #{record.name}\", \"https://en.wikipedia.org/wiki/#{record.name}\",\n      icon: \"heroicons/outline/information-circle\", target: :_blank, style: :icon\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Resource Tool on Fish Resource in Ruby\nDESCRIPTION: Adds the NestedFishReviews tool to the FishResource, configuring it to appear only on the New view. Also includes the has_many field for reviews.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/nested-records-when-creating.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass FishResource < Avo::BaseResource\n  # other fields actions, filters and more\n\n  field :reviews, as: :has_many\n\n  tool NestedFishReviews, only_on: :new\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing meta attribute in ERB template\nDESCRIPTION: Shows how to access the field's meta attribute within an ERB template to conditionally display different content based on meta values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_32\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args do %>\n  <% if @field.meta[:foo] %>\n    <%= @resource.record.foo_value %>\n  <% else %>\n    <%= @field.value %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Search Results Count Per Resource in Avo Using Lambda - Ruby\nDESCRIPTION: Demonstrates how to dynamically compute the number of search results to show for the User resource by assigning a lambda to results_count. The lambda checks if the current user is an admin and returns 30 results if true, otherwise 10, allowing dynamic adjustment of search results per user context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.search = {\n    results_count: -> { user.admin? ? 30 : 10 }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring ID Field in Ruby for Avo HQ\nDESCRIPTION: Basic declaration of an 'id' field in Avo HQ. This code defines an ID field that will be displayed on Index and Show views by default. It can be customized with additional options like link_to_record to make it clickable.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/id.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :id, as: :id\n```\n\n----------------------------------------\n\nTITLE: Configuring Select with Options Hash - Ruby\nDESCRIPTION: This Ruby snippet demonstrates a basic configuration of the Avo `Select` field using a static Hash. The Hash keys serve as display labels, and the values are stored in the database. It also shows setting a placeholder and enabling value display.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/select.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :type, as: :select, options: { 'Large container': :large, 'Medium container': :medium, 'Tiny container': :tiny }, display_with_value: true, placeholder: 'Choose the type of the container.'\n```\n\n----------------------------------------\n\nTITLE: Defining a Text Input Field in Avo (Ruby)\nDESCRIPTION: This Ruby snippet demonstrates the basic creation of a text input field in an Avo resource by using the field method with the :title field and specifying the :text type. No additional dependencies beyond Avo are required. The field's value is mapped to the corresponding database attribute, and it renders as a regular <input type=\"text\" /> on the form.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/text.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :title, as: :text\n```\n\n----------------------------------------\n\nTITLE: Configure Avo authentication with inline logic\nDESCRIPTION: Provide inline authentication logic within the block for `authenticate_with` in the Avo initializer. This is necessary if the required authentication methods or session data are not accessible directly within Avo's controller context, allowing you to implement authentication checks explicitly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authentication.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.authenticate_with do\n    redirect_to '/' unless session[:user_id] == 1 # hard code user ids here\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Avo Views Using String Array Membership in Ruby\nDESCRIPTION: Utilizes view.in? with a string array (e.g., view.in? [\"new\", \"edit\"]) to check for membership among multiple view types, enabling grouped logic per set of views in Ruby. Inputs are arrays of strings matching Avo view keys, and outputs are view-specific responses. Requires only the view object; comparable to symbol-array variant but for string-based systems.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/views.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nif view.in? [\"new\", \"edit\"]\n  # Code for the \"new\" and \"edit\" views\nelsif view.in? [\"show\", \"index\"]\n  # Code for the \"show\" and \"index\" views\nend\n\n```\n\n----------------------------------------\n\nTITLE: Using Authorization Rules with Menu Items in Avo\nDESCRIPTION: Example of integrating authorization rules with menu item visibility to show or hide items based on user permissions. The authorize method can be used in the visible option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    resource :team, visible: -> do\n      # authorize current_user, MODEL_THAT_NEEDS_TO_BE_AUTHORIZED, METHOD_THAT_NEEDS_TO_BE_AUTHORIZED\n      authorize current_user, Team, \"index?\", raise_exception: false\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Show Controls in Avo Resource - Ruby\nDESCRIPTION: This Ruby code customizes the control buttons for the 'Show' view of the Fish resource in Avo by assigning a lambda to self.show_controls. It demonstrates adding a custom back button, multiple link_to actions with icons and target attributes, a delete and detach button, an actions_list dropdown (with exclusions and custom style/color), a named action with a custom icon, and finally an edit button. Required dependencies include the Avo framework and associated action classes like Avo::Actions::ReleaseFish. Parameters such as label, title, icon, style, color, and exclude control which buttons appear and their behavior. The block has access to params, allowing context-sensitive configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customizable-controls.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.show_controls = -> do\n    back_button label: \"\", title: \"Go back now\"\n    link_to \"Fish.com\", \"https://fish.com\", icon: \"heroicons/outline/academic-cap\", target: :_blank\n    link_to \"Turbo demo\", \"/admin/resources/fish/#{params[:id]}?change_to=🚀🚀🚀 New content here 🚀🚀🚀\",\n      class: \".custom-class\",\n      data: {\n        turbo_frame: \"fish_custom_action_demo\"\n      }\n    delete_button label: \"\", title: \"something\"\n    detach_button label: \"\", title: \"something\"\n    actions_list label: \"Runnables\", exclude: [ReleaseFish], style: :primary, color: :slate\n    action Avo::Actions::ReleaseFish, style: :primary, color: :fuchsia, icon: \"heroicons/outline/globe\"\n    edit_button label: \"\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Sorting Posts by Last Commented At with Custom Query in Avo Resource (Ruby)\nDESCRIPTION: Gives an example of a custom sortable lambda that sorts posts based on their most recent comment's creation time. The field uses query.includes to preload comments and orders according to the latest comment. Includes the model implementation of the computed last_commented_at method to return a timestamp from associated records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  field :last_commented_at,\n    as: :date,\n    sortable: -> {\n      query.includes(:comments).order(\"comments.created_at #{direction}\")\n    }\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  has_many :comments\n\n  def last_commented_at\n    comments.last&.created_at\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Reactivity with react_on in Ruby\nDESCRIPTION: This snippet illustrates the use of the `react_on` option for dynamic field reactivity in Ruby, specifically within an Avo resource.  The `react_on` option is used to trigger a re-evaluation of the field's options when changes occur in other fields.  This example configures the `city` field to react to changes in the `country` field, ensuring that the available city options dynamically update based on the selected country.  It also uses the `*_was` methods to access the original value before the change.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nfield :country,\n      as: :select,\n      options: Course.countries,\n      include_blank: \"No country\"\n\n    field :city,\n      as: :select,\n      react_on: :country,\n      options: -> { Course.cities.dig(@record.country&.to_sym) || [\"\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing Select field with enum\nDESCRIPTION: This example shows how to use an Active Record enum to populate the options for the `Select` field.  The enum is defined in the model, and then the `enum` option in the Avo resource is set to the enum's hash. `display_with_value` is also set to `true`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/select.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/project.rb\nclass Project < ApplicationRecord\n  enum type: { 'Large container': 'large', 'Medium container': 'medium', 'Tiny container': 'small' }\nend\n\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  field :type,\n    as: :select,\n    enum: ::Project.types,\n    display_with_value: true,\n    placeholder: 'Choose the type of the container.'\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Record Finding with `to_param` in Avo (Ruby)\nDESCRIPTION: Implements a custom `find_record_method` in an Avo Post resource (`Avo::Resource::Post`) to handle record lookup based on either an ID or a custom slug generated by the `to_param` method in the associated `Post` model. This ensures Avo can find records using the custom parameterized `name` as a slug for Show and Edit views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resource::Post < Avo::BaseResource\n  self.find_record_method = -> {\n    # When using friendly_id, we need to check if the id is a slug or an id.\n    # If it's a slug, we need to use the find_by_slug method.\n    # If it's an id, we need to use the find method.\n    # If the id is an array, we need to use the where method in order to return a collection.\n    if id.is_a?(Array)\n      id.first.to_i == 0 ? query.where(slug: id) : query.where(id: id)\n    else\n      id.to_i == 0 ? query.find_by_slug(id) : query.find(id)\n    end\n  }\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/models/post.rb\nclass Post < ApplicationRecord\n  before_save :update_slug\n\n  def to_param\n    slug || id\n  end\n\n  def update_slug\n    self.slug = name.parameterize\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Avo current\\_user method with Devise\nDESCRIPTION: Set the `current_user_method` in the Avo initializer to `<code>:current_user</code></code> to tell Avo to use the standard Devise helper for identifying the logged-in user. This is typically done in the Avo initializer file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authentication.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_method = :current_user\nend\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Avo Field Visibility using Lambdas (Ruby)\nDESCRIPTION: Provides examples of using a lambda with the `visible:` option for fine-grained control over field visibility. The lambda has access to `context`, `resource`, and `resource.record`, allowing conditions based on user roles, resource properties, or record attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfield :is_featured, as: :boolean, visible: -> { context[:user].is_admin? }  # show field based on the context object\nfield :is_featured, as: :boolean, visible: -> { resource.name.include? 'user' } # show field based on the resource name\nfield :is_featured, as: :boolean, visible: -> { resource.record.published_at.present? } # show field based on a record attribute\n```\n\n----------------------------------------\n\nTITLE: Customizing Edit Controls in Avo (Ruby)\nDESCRIPTION: This snippet shows how to customize controls for the Avo resource's edit page by defining the `edit_controls` class attribute. The block specifies controls such as a back button, a custom link (`link_to`), delete and detach buttons, an action list (`actions_list`) excluding a specific action, a conditional action button (`action`) that appears unless it's a 'new' view, and a save button with a custom label.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customizable-controls.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.edit_controls = -> do\n    back_button label: \"\", title: \"Go back now\"\n    link_to \"Fish.com\", \"https://fish.com\", icon: \"heroicons/outline/academic-cap\", target: :_blank\n    delete_button label: \"\", title: \"something\"\n    detach_button label: \"\", title: \"something\"\n    actions_list exclude: [Avo::Actions::ReleaseFish], style: :primary, color: :slate, label: \"Runnables\"\n    action Avo::Actions::ReleaseFish, style: :primary, color: :fuchsia, icon: \"heroicons/outline/globe\" if view != :new\n    save_button label: \"Save Fish\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using URL helpers within Avo (Corrected)\nDESCRIPTION: Demonstrates the corrected way to use Rails URL helpers within the Avo admin panel. Prepending the helper with `main_app` ensures Rails finds the correct route within the engine's context. This is crucial for the URL helper to function as expected.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/faq.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :partner_home, as: :text, as_html: true do |model, *args|\n  link_to 'Partner', main_app.partner_home_url(model)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Dashboard Class in Avo with Cards in Ruby\nDESCRIPTION: Defines a custom dashboard by subclassing Avo::Dashboards::BaseDashboard. Sets unique id, name, description, and grid column layout, and specifies multiple metric or chart cards using the card method. Requires prior installation of Avo and configured cards such as ExampleMetric or ExampleAreaChart; expects outputs as rendered dashboard widgets.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dashboards.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::MyDashboard < Avo::Dashboards::BaseDashboard\n  self.id = 'my_dashboard'\n  self.name = 'Dashy'\n  self.description = 'The first dashbaord'\n  self.grid_cols = 3\n\n  def cards\n    card Avo::Cards::ExampleMetric\n    card Avo::Cards::ExampleAreaChart\n    card Avo::Cards::ExampleScatterChart\n    card Avo::Cards::PercentDone\n    card Avo::Cards::AmountRaised\n    card Avo::Cards::ExampleLineChart\n    card Avo::Cards::ExampleColumnChart\n    card Avo::Cards::ExamplePieChart\n    card Avo::Cards::ExampleBarChart\n    divider label: \"Custom partials\"\n    card Avo::Cards::ExampleCustomPartial\n    card Avo::Cards::MapCard\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Dynamic Tag Values from API for Tags Filters in Avo using Ruby\nDESCRIPTION: Describes the use of the `fetch_values_from` option (available from version 3.13) to dynamically fetch filter values for tags filters from a remote endpoint. This enables the filter input to send queries to the server and retrieve matching suggestions dynamically. The option is compatible only with tags filters and can be defined as a lambda returning a URL, commonly used with the field's filterable option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nfield :tags, as: :tags,\n  fetch_values_from: -> { \"/avo-filters/resources/cities/tags\" },\n  filterable: true\n```\n\n----------------------------------------\n\nTITLE: User Resource Definition\nDESCRIPTION: This Ruby code defines an Avo resource for the `User` model. It specifies the display title, included fields, and their configurations, such as text and gravatar. This allows management of the User model through the Avo admin panel, including editing, viewing, and interacting with user data. \nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :email, as: :gravatar, link_to_record: true, as_avatar: :circle\n    field :first_name, as: :text, required: true, placeholder: \"John\"\n    field :last_name, as: :text, required: true, placeholder: \"Doe\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Searchable Polymorphic Belongs To in Ruby\nDESCRIPTION: Demonstrates combining the searchable and polymorphic features for a belongs_to field to handle large collections of different record types.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations/belongs_to.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentResource < Avo::BaseResource\n  self.title = :id\n\n  field :id, as: :id\n  field :body, as: :textarea\n\n  field :commentable, as: :belongs_to, polymorphic_as: :commentable, types: [::Post, ::Project], searchable: true\nend\n```\n\n----------------------------------------\n\nTITLE: Controlling Sidebar Visibility with `self.visible_on_sidebar` in Ruby\nDESCRIPTION: This property hides a resource from the sidebar menu, which is useful for resources that should not be publicly accessible or for administrative purposes. It only affects automatic menu generation and not custom menus.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_38\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::TeamMembership < Avo::BaseResource\n  self.visible_on_sidebar = false\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Resource for Active Storage Attachment (Ruby)\nDESCRIPTION: This code defines an Avo resource for Active Storage attachments, specifying the title, model class, and fields to display. It includes fields for ID, filename, service URL (as an external image), and creation timestamp. It requires the `avo` gem and assumes the existence of `ActiveStorage::Attachment` model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/use-active-storage-attachments-as-associations.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass ActiveRecordAttachmentResource < Avo::BaseResource\n  self.title = :filename\n  self.model_class = \"ActiveStorage::Attachment\"\n\n  field :id, as: :id\n  field :filename, as: :text\n  field :service_url, as: :external_image, name: \"Image\"\n  field :created_at, as: :date_time\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Avo HQ Progress Bar Field in Ruby\nDESCRIPTION: Defines a field named `:progress` using the Avo HQ `progress_bar` custom field type. This field type automatically renders as a HTML `progress` element on Index and Show views and an `input[type=range]` slider on Edit and New views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/progress_bar.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :progress, as: :progress_bar\n```\n\n----------------------------------------\n\nTITLE: Securing Avo Routes Using Devise Authenticate Block (Ruby - routes.rb)\nDESCRIPTION: This routes.rb snippet restricts access to /avo by wrapping the mount_avo directive in authenticate :user do ..., requiring a user to be authenticated. This leverages Devise's route constraints. Add or modify this block in config/routes.rb. Only authenticated users can access the Avo dashboard.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authentication.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nauthenticate :user do\n  mount_avo at: '/avo'\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Dynamic Filters Options in Ruby Initializer\nDESCRIPTION: This Ruby snippet shows how to configure the dynamic filters UI in Avo by setting options such as changing the filter button label and making the filters always expanded by default. The configuration goes inside the Avo initializer or relevant config file, wrapped with a conditional to check that DynamicFilters is defined. This allows customization of the filter bar behavior and appearance globally within the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  # Other Avo configurations\nend\n\nif defined?(Avo::DynamicFilters)\n  Avo::DynamicFilters.configure do |config|\n    config.button_label = \"Advanced filters\"\n    config.always_expanded = true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Parsing Field Value Before Update Using update_using Option in Avo (Ruby)\nDESCRIPTION: Explains how to preprocess and parse field input before saving to the database using update_using. The block receives raw input, performs transformation (such as JSON decoding), and the result is persisted. Useful for fields needing preprocessing, such as code or JSON input.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :metadata,\n  as: :code,\n  update_using: -> do\n    ActiveSupport::JSON.decode(value)\n  end\n```\n\n----------------------------------------\n\nTITLE: Grouping fields in a cluster using Avo DSL\nDESCRIPTION: This code snippet demonstrates how to use the `cluster` DSL within an Avo resource to group multiple fields horizontally within a panel. It shows how to define a panel named \"Address\" and then use the `cluster` block to group `street_address`, `city`, and `zip_code` fields. The `stacked: true` option is used on each field to enhance readability within the cluster.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resource-clusters.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::Person < Avo::BaseResource\n  def fields\n    panel \"Address\" do\n      cluster do\n        field :street_address, stacked: true do\n          \"1234 Elm Street\"\n        end\n\n        field :city, stacked: true do\n          \"Los Angeles\"\n        end\n\n        field :zip_code, stacked: true do\n          \"15234\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Optional: skipping the default `Show` view in Avo\nDESCRIPTION: Sets the default resource view to `:edit`, skipping the `Show` page, which simplifies navigation, especially when only editing records is required.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.resource_default_view = :edit\nend\n```\n\n----------------------------------------\n\nTITLE: Team Resource Definition\nDESCRIPTION: This Ruby code defines an Avo resource for the `Team` model.  It specifies how the fields are displayed through the Avo admin panel, including `id`, `name`, and `users` association, and uses a `has_many` association to relate to the `User` resource.  This facilitates team management and allows for displaying teams and users through the admin interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/team.rb\nclass Avo::Resources::Team < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :name, as: :text\n    field :users, as: :has_many\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Aligning text on Index view in Avo using Ruby\nDESCRIPTION: This code snippet demonstrates how to align text on the Index view using the `html` option with CSS classes. Specifically, it shows how to right-align a number field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Project < Avo::BaseResource\n  field :users_required, as: :number, html: {index: {wrapper: {classes: \"text-right\"}}}\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Avo Features via Configuration (Ruby)\nDESCRIPTION: Shows how to disable specific Avo features, like `:global_search`, by assigning an array of feature symbols to `config.disabled_features` in the Avo initializer (`config/initializers/avo.rb`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.disabled_features = [:global_search]\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Textarea Field Using Ruby DSL\nDESCRIPTION: This snippet shows how to define a field as a textarea using a Ruby DSL syntax. It is used to render a <textarea /> HTML element within form views such as editing or creating new records. It requires a Ruby environment with DSL support for form definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/textarea.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :textarea\n```\n\n----------------------------------------\n\nTITLE: Controlling Item Visibility Avo Menu Ruby\nDESCRIPTION: Explains how to conditionally show or hide menu items using the `visible` option. It demonstrates using a lambda block that has access to `context`, `current_user`, `params`, and `view_context` to determine visibility based on dynamic conditions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    resource :user, visible: -> do\n      context[:something] == :something_else\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic UI Persistence Driver in Avo (Ruby)\nDESCRIPTION: Enables UI state persistence using a lambda assigned to `config.persistence` in the Avo initializer. This example dynamically sets the `:driver` to `:session`, allowing for context-based configuration if needed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_32\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.persistence = -> do\n  {\n    driver: :session\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Tags Field in Avo Resource - Ruby\nDESCRIPTION: This snippet demonstrates how to declare a tags field in an Avo resource by specifying the field name and its type. It requires the Avo Rails admin gem. No additional configuration is needed for basic use. It adds a field expecting an array of tags to be entered or selected by the user. The main input is the field name, and it outputs a tags field on Avo resource forms and views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills, as: :tags\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Metric Card\nDESCRIPTION: This snippet demonstrates the basic definition of a metric card within the Avo framework. It sets the card's `id`, `label`, `description`, `cols`, `rows`, and `display_header` attributes. The label and description are defined using lambdas. These settings are standard for all card types and control various display aspects of the card within the parent's grid. No dependencies are specifically needed for basic card definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = \"users_metric\"\n  self.label = -> { \"Users count\" }\n  self.description = -> { \"Users description\" }\n  self.cols = 1\n  self.rows = 1\n  self.display_header = true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Menu with Sections, Groups, and Resources\nDESCRIPTION: This snippet demonstrates configuring the `main_menu` within the Avo initializer to structure the sidebar menu. It defines sections and groups to organize resources (like `course`, `course_link`, `post`, and `comment`), dashboards, and custom links.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    section \"Resources\", icon: \"heroicons/outline/academic-cap\" do\n      group \"Academia\" do\n        resource :course\n        resource :course_link\n      end\n\n      group \"Blog\", collapsable: true, collapsed: true do\n        dashboard :dashy\n\n        resource :post\n        resource :comment\n      end\n    end\n\n    section I18n.t('avo.other'), icon: \"heroicons/outline/finger-print\", collapsable: true, collapsed: true do\n      link_to 'Avo HQ', path: 'https://avohq.io', target: :_blank\n      link_to 'Jumpstart Rails', path: 'https://jumpstartrails.com/', target: :_blank\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Dynamically Restrict View Types Based on Business Logic (Ruby)\nDESCRIPTION: This snippet illustrates assigning a lambda to 'view_types' for dynamic control based on context such as user roles. Inside the lambda, logic determines available view types, for example, allowing both ':table' and ':grid' for admins, or only ':table' for regular users. It accesses context variables like 'current_user' and 'resource'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-view-types.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  # ...\n  self.view_types = -> do\n    if current_user.is_admin?\n      [:table, :grid]\n    else\n      :table\n    end\n  end\n  #...\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Current User Method in Avo\nDESCRIPTION: This code snippet configures Avo to use the `current_user` method to determine the current user. This is essential for authorization purposes, allowing Avo to enforce policies based on the user's role or permissions. The configuration is done in the `avo.rb` initializer file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_method = :current_user\nend\n```\n\n----------------------------------------\n\nTITLE: Generating an Avo Resource\nDESCRIPTION: This command generates an Avo resource named 'post'. It creates a resource file and sets up the basic structure for managing a `Post` model through the Avo admin interface. This allows the creation of a user interface for the model. If the model already exists, the generated resource will include fields defined for the attributes and associations of the model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:resource post\n```\n\n----------------------------------------\n\nTITLE: Overriding API Client Actions in a Custom Controller - Ruby\nDESCRIPTION: Presents a custom Avo controller override for the save_record method, adding logic for different endpoints and parameters on create vs update. Uses a hypothetical MyCustomApi client and demonstrates per-action branching and API status code validation. Requires the custom API client, Ruby on Rails, and access to record data and authorization headers. Input: resource data and action context; output: boolean indicating success based on the external API response status.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/http-resources.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/avo/authors_controller.rb\nclass Avo::AuthorsController < Avo::Core::Controllers::Http\n  def save_record\n    if action_name == \"create\"\n      response = MyCustomApi.post(\"/authors\", body: @record.to_json, headers: auth_headers)\n    else\n      response = MyCustomApi.put(\"/authors/#{@record.id}\", body: @record.to_json, headers: auth_headers)\n    end\n\n    response.status == 200\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using `arguments` to pass custom data to Avo action (Ruby)\nDESCRIPTION: Demonstrates how to pass static or dynamic arguments to an action via the `arguments` option, making data available throughout the action class for conditional logic or customization. The arguments can be accessed inside methods like `handle` and `fields`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/registration.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  def actions\n    action Avo::Actions::ToggleInactive,\n      arguments: {\n        special_message: true\n      }\n\n    # As a proc for dynamic arguments\n    action Avo::Actions::ToggleInactive,\n      arguments: -> do\n        {\n          special_message: resource.view.index? && current_user.is_admin?\n        }\n      end\n  end\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  def handle(**args)\n    if arguments[:special_message]\n      succeed \"I love ᾕ1\"\n    else\n      succeed \"Success response ✌️\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Field with Options Avo Ruby\nDESCRIPTION: Demonstrates how to define a DateTime field in an Avo resource with common configuration options. This includes setting display format (`format`), input picker format (`picker_format`), enabling 24-hour time (`time_24hr`), and specifying a default timezone (`timezone`). These options control how the date and time are presented and input by the user.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/date_time.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :joined_at,\n  as: :date_time,\n  name: \"Joined at\",\n  picker_format: \"Y-m-d H:i:S\",\n  format: \"yyyy-LL-dd TT\",\n  time_24hr: true,\n  timezone: \"PST\"\n```\n\n----------------------------------------\n\nTITLE: Enabling PaperTrail for Change Tracking\nDESCRIPTION: Add PaperTrail to a model to enable detailed change tracking and the ability to revert changes in the audit log.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/product.rb\n\nclass Product < ApplicationRecord\n  has_paper_trail\n\n  belongs_to :user, optional: true\n\n  validates_presence_of :price\nend\n```\n\n----------------------------------------\n\nTITLE: Permitting Parameters from Avo Resource Tool - Ruby\nDESCRIPTION: Shows how to permit parameters generated by inputs within a resource tool partial for safe mass assignment to the model. This is done by adding the parameter names (including nested and array parameters) to the `self.extra_params` array in the Avo resource class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resource-tools.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.extra_params = [:fish_type, :something_else, properties: [], information: [:name, :history]]\n\n  def fields\n    tool Avo::ResourceTools::FishInformation, show_on: :forms\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Markdown Field in Avo Resource (Ruby)\nDESCRIPTION: Shows how to define a field named `body` in an Avo resource file, specifying the field type as `:markdown`. This utilizes the custom Marksmith editor for rich text editing and is the basic syntax for integrating the markdown field into an Avo resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/markdown.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :body, as: :markdown\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Properties for SuperTextField and TextField in Avo - Ruby\nDESCRIPTION: Defines Ruby classes for 'SuperTextField' and 'TextField' inheriting from a base field, adding properties such as 'link_to_record', 'as_html', and 'protocol'. The initializer adds these properties with respective types, supporting field configuration and behavior customization in Avo's framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Avo\n  module Fields\n    class SuperTextField < BaseField\n      attr_reader :link_to_record\n      attr_reader :as_html\n      attr_reader :protocol\n\n      def initialize(id, **args, &block)\n        super(id, **args, &block)\n\n        add_boolean_prop args, :link_to_record\n        add_boolean_prop args, :as_html\n        add_string_prop args, :protocol\n      end\n    end\n  end\nend\n\nmodule Avo\n  module Fields\n    class TextField < BaseField\n      attr_reader :link_to_record\n      attr_reader :as_html\n      attr_reader :protocol\n\n      def initialize(id, **args, &block)\n        super(id, **args, &block)\n\n        add_boolean_prop args, :link_to_record\n        add_boolean_prop args, :as_html\n        add_string_prop args, :protocol\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Policy Scopes to Avo Association Fields in Ruby\nDESCRIPTION: Demonstrates applying a policy scope to a `has_many` association field (e.g., `:comments`) within an Avo resource definition. The `scope` option accepts a lambda that uses `Pundit.policy_scope` to apply the scope defined in the associated model's policy (`CommentPolicy::Scope`) to the association query, ensuring consistent filtering in association views. The `parent` (e.g., `Post` instance) and the base `query` are available within the lambda.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\n# The `parent` is the Post instance that the user is seeing. ex: Post.find(1)\n# The `query` is the Active Record query being done on the comments. ex: post.comments\nfield :comments, as: :has_many, scope: -> { Pundit.policy_scope(parent, query) }\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Field in Avo (Ruby)\nDESCRIPTION: This snippet shows how to fully customize a `text` field in Avo with various options. It sets the field name, marks it as required and readonly, enables HTML rendering, adds a placeholder, and formats the output using a lambda. It depends on the Avo framework. The result will be a text field with specified configurations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/text.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :title, # The database field ID\n  as: :text, # The field type\n  name: 'Post title', # The label you want displayed\n  required: true, # Display it as required\n  readonly: true, # Display it disabled\n  as_html: true # Should the output be parsed as html\n  placeholder: 'My shiny new post', # Update the placeholder text\n  format_using: -> { value.truncate 3 } # Format the output\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Query Scope for has_many Associations in Rails with Avo\nDESCRIPTION: This Ruby code snippet demonstrates how to customize search within a Rails model when using Avo, particularly for models with has_many associations. It checks the request parameters to determine if the search is within a has_many association and modifies the search scope accordingly by applying different ordering. The lambda assigns a dynamic ransack query result based on the association context, enabling tailored search results.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/search_query_scope_common.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nself.search_query = -> do\n  if params[:via_association] == 'has_many'\n    scope.ransack(id_eq: params[:q], m: \"or\").result(distinct: false).order(name: :asc)\n  else\n    scope.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Tags Field Implementation in Ruby\nDESCRIPTION: Demonstrates how to create a basic tags field in an Avo resource to store multiple values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills, as: :tags\n```\n\n----------------------------------------\n\nTITLE: Monetizing Model Attribute Using money-rails in Ruby\nDESCRIPTION: This snippet illustrates how to apply monetization to a model attribute using the `monetize` method from the money-rails gem. The field expects a corresponding monetized database column (e.g., price_cents), enabling Avo's money field to correctly render and handle currency values. This monetization setup is critical for full functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/money.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmonetize :price_cents\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Formatting and Parsing with Ruby Lambdas for Codemirror Field\nDESCRIPTION: This Ruby snippet provides an explicit implementation for formatting and parsing JSON content in a code editor field using custom lambdas. It formats the code with JSON.pretty_generate if present, and parses the value on update with JSON.parse. Dependencies are Ruby's JSON module and codemirror integration. Inputs must be JSON-serializable; the output is prettified JSON in the editor. This is functionally equivalent to using the 'pretty_generated: true' parameter but allows for custom logic.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/code.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :code,\n  format_using: -> {\n    value.blank? ? value : JSON.pretty_generate(value)\n  },\n  update_using: -> {\n    JSON.parse(value)\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Gravatar Field (Ruby)\nDESCRIPTION: This snippet demonstrates the basic configuration of the Avo `Gravatar` field. It shows how to specify options like disabling rounding, setting the size in pixels, and providing a default image URL if the email is not found on Gravatar.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/gravatar.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :email,\n  as: :gravatar,\n  rounded: false,\n  size: 60,\n  default_url: 'some image url'\n```\n\n----------------------------------------\n\nTITLE: Enabling Grid View in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to enable the grid view for a resource in Avo.  It configures the `grid_view` class attribute, defining a `card` block that specifies how the resource data should be displayed in the grid. This block receives a `record` as input and returns a hash containing the `cover_url`, `title`, and `body` to be displayed on the card.  The `record` object provides access to the resource's attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/grid-view.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.grid_view = {\n    card: -> do\n      {\n        cover_url:\n          if record.cover_photo.attached?\n            main_app.url_for(record.cover_photo.url)\n          end,\n        title: record.name,\n        body: record.truncated_body\n      }\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashboard Visibility with Conditional Logic\nDESCRIPTION: Example of controlling dashboard visibility based on user roles, request parameters, or context. The dashboard will only be visible when the conditions in the visible block return true.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dashboards.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::ComplexDash < Avo::Dashboards::BaseDashboard\n  self.id = \"complex_dash\"\n  self.name = \"Complex dash\"\n  self.description = \"Complex dash description\"\n  self.visible = -> do\n    current_user.is_admin?\n    # or\n    params[:something] == 'something else'\n    # or\n    context[:your_param] == params[:something_else]\n  end\n\n  def cards\n    card Avo::Cards::UsersCount\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Avo current\\_user method with a custom helper\nDESCRIPTION: Set the `current_user_method` to the symbol of your custom helper method, such as `<code>:current_admin</code></code>, if your application uses a non-standard name for accessing the current user object. This configuration resides in the Avo initializer.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authentication.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_method = :current_admin\nend\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic File Upload Field with Active Storage in Ruby on Rails\nDESCRIPTION: This snippet shows how to define a file upload field in a Ruby on Rails form using Avo, leveraging Active Storage for file handling. It supports images and can be extended with variants or extra options for customization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/file.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :avatar, as: :file, is_image: true\n```\n\n----------------------------------------\n\nTITLE: Adding Record Count Indicators to Avo Resource Tabs in Ruby\nDESCRIPTION: Defines an Avo resource (`Avo::Resources::User`) that dynamically adds a count of associated records (`teams`, `people`) to the tab names using a helper method (`name_with_counter`). The helper method uses `sanitize` to output HTML safely and applies Tailwind CSS classes for styling the counter badge. Note the potential performance impact of running count queries on each load.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/tabs-counter-indicator.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    main_panel do\n    end\n\n    tabs do\n      tab name_with_counter(\"Teams\", record&.teams&.size) do\n        field :teams, as: :has_and_belongs_to_many\n      end\n      tab name_with_counter(\"People\", record&.people&.size) do\n        field :people, as: :has_many\n      end\n    end\n  end\n\n  def name_with_counter(name, counter)\n    view_context.sanitize(\n      \"#{name} \" \\\n      \"<span class='bg-gray-500 ml-1 px-1 text-white text-xs rounded font-semibold'>\" \\\n        \"#{counter}\" \\\n      \"</span>\"\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the Data Source for an Avo Array Resource in Ruby\nDESCRIPTION: Defines the `records` instance method within an Avo Array Resource class. This method serves as the primary data source, returning an array of hashes or Active Record objects that the resource will manage and display. Each element in the array represents a record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/array-resources.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef records\n  [\n    {\n      id: 1,\n      name: \"The Shawshank Redemption\",\n      release_date: \"1994-09-23\"\n    },\n    {\n      id: 2,\n      name: \"The Godfather\",\n      release_date: \"1972-03-24\",\n      fun_fact: \"The iconic cat in the opening scene was a stray found by director Francis Ford Coppola on the studio lot.\"\n    },\n    {\n      id: 3,\n      name: \"Pulp Fiction\",\n      release_date: \"1994-10-14\"\n    }\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination as Lambda or Hash in Avo Resource (Ruby)\nDESCRIPTION: Demonstrates two ways to configure pagination on an Avo resource: as a lambda that returns a hash, or as a direct hash assignment. Options include type (:default or :countless) and size for pagination links. Used to fine-tune performance for large datasets or modify pagination appearance.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nself.pagination = -> do\n  {\n    type: :default,\n    size: [1, 2, 2, 1],\n  }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nself.pagination = {\n  type: :default,\n  size: [1, 2, 2, 1],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Index Field Wrapper with Field Parameter - Avo (ERB)\nDESCRIPTION: This ERB snippet wraps content in the Index view using the `index_field_wrapper` helper and passes in all available arguments via the spread operator. It renders a Boolean check component based on the field value. The `field` parameter is typically included within `field_wrapper_args`, representing the current field instance. Dependencies include `field_wrapper_args` and `Avo::Fields::Common::BooleanCheckComponent`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= index_field_wrapper **field_wrapper_args do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Fields in Avo (Ruby)\nDESCRIPTION: Illustrates how to create a computed field in Avo, displayed only on Show and Index views. The provided block calculates the field's value based on the `record`, `resource`, and `view`. This example checks if a record has associated posts.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nfield 'Has posts', as: :boolean do\n  record.posts.present?\nrescue\n  false\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Basic Fields in Avo Resource Using Ruby\nDESCRIPTION: Shows a straightforward declaration of multiple fields within an Avo resource's fields method, mapping various model attributes to field types like id, text, boolean, and file. This snippet serves as a basic example of typical field usage in Avo, with no conditional logic. Dependencies include Ruby, Avo gem, and a standard Rails model backing the resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id\n    field :first_name, as: :text\n    field :last_name, as: :text\n    field :email, as: :text\n    field :active, as: :boolean\n    field :cv, as: :file\n    field :is_admin?, as: :boolean\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Conditions Hash for Text Dynamic Filters in Ruby\nDESCRIPTION: This Ruby snippet defines a hash mapping symbolic keys to filter condition labels for text filters in dynamic filtering. It includes many conditions such as 'Contains', 'Does not contain', 'Is', 'Is not', 'Starts with', 'Ends with', 'Is null', 'Is not null', 'Is present', and 'Is blank'. The hash is inverted with `.invert` and is used by Avo to build text filter options and queries.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  contains: \"Contains\",\n  does_not_contain: \"Does not contain\",\n  is: \"Is\",\n  is_not: \"Is not\",\n  starts_with: \"Starts with\",\n  ends_with: \"Ends with\",\n  is_null: \"Is null\",\n  is_not_null: \"Is not null\",\n  is_present: \"Is present\",\n  is_blank: \"Is blank\",\n}.invert\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authorization Method Names in Avo Ruby\nDESCRIPTION: Explains how to override Avo's default Pundit method names (e.g., `index?`, `show?`) used for authorization checks. This is achieved in the Avo configuration initializer (`config/initializers/avo.rb`) by setting the `authorization_methods` hash, mapping standard Avo actions (like `:index`, `:show`) to custom policy method names (like `'avo_index?'`, `'avo_show?'`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.root_path = '/avo'\n  config.app_name = 'Avocadelicious'\n  config.license_key = ENV['AVO_LICENSE_KEY']\n  config.authorization_methods = {\n    index: 'avo_index?',\n    show: 'avo_show?',\n    edit: 'avo_edit?',\n    new: 'avo_new?',\n    update: 'avo_update?',\n    create: 'avo_create?',\n    destroy: 'avo_destroy?',\n    search: 'avo_search?',\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Field with Hidden Input in ERB\nDESCRIPTION: This ERB code renders a custom color picker field using a `hidden-input` Stimulus controller. It wraps the field inside a `div` with `data-controller=\"hidden-input\"`. If `@field.always_show` is false, it adds a link to show the content using `data: { action: 'click->hidden-input#showContent' }`. The content is wrapped in a `div` with class \"hidden\" if `@field.always_show` is false. It displays the field value within a styled `div`.  This shows how to use Stimulus controller.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_16\n\nLANGUAGE: erb\nCODE:\n```\n# app/components/avo/fields/color_picker_field/show_component.html.erb\n\n<%= show_field_wrapper field: @field, index: @index do %>\n  <div data-controller=\"hidden-input\">\n    <% unless @field.always_show %>\n      <%= link_to t('avo.show_content'), 'javascript:void(0);', class: 'font-bold inline-block', data: { action: 'click->hidden-input#showContent' } %>\n    <% end %>\n    <div <% unless @field.always_show %> class=\"hidden\" <% end %> data-hidden-input-target=\"content\">\n      <div style=\"background-color: <%= @field.value %>\"\n        class=\"h-6 px-1 rounded-md text-white text-sm flex items-center justify-center leading-none\"\n      >\n        <%= @field.value %>\n      </div>\n    </div>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Defining Active Storage Association for Trix Attachments in Rails Model (Ruby)\nDESCRIPTION: Shows the necessary `has_many_attached` declaration within a Rails model (e.g., `Post`) to integrate with the Avo Trix field's attachment feature. The association name (`:trix_attachments` in this example) must match the value provided to the `attachment_key` option in the Avo field definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/trix.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  has_many_attached :trix_attachments\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Conditions Hash for Boolean Dynamic Filters in Ruby\nDESCRIPTION: This Ruby snippet defines a hash mapping filter condition keys to human-readable labels for Boolean filters in dynamic filtering. The `.invert` method is called to swap keys and values, facilitating easy lookup of filter condition names. The available conditions include 'Is true', 'Is false', 'Is null', and 'Is not null'. This hash aids in constructing appropriate filter options compatible with Avo's dynamic filter system.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  is_true: \"Is true\",\n  is_false: \"Is false\",\n  is_null: \"Is null\",\n  is_not_null: \"Is not null\",\n}.invert\n```\n\n----------------------------------------\n\nTITLE: Defining a Number Field in Avo\nDESCRIPTION: This snippet shows how to define a number field in Avo using the `field` method. It sets the field's type to `:number`. The `age` symbol represents the attribute the field is bound to.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/number.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :age, as: :number\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Main and Profile Menus Ruby\nDESCRIPTION: Provides a comprehensive example of configuring both `main_menu` and `profile_menu` in the Avo initializer. It showcases nested sections and groups containing various item types like `dashboard`, `resource`, `tool`, and `link_to`, including the use of `all_dashboards` and `all_tools` helpers for automatically including items.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    section I18n.t(\"avo.dashboards\"), icon: \"dashboards\" do\n      dashboard :dashy, visible: -> { true }\n      dashboard :sales, visible: -> { true }\n\n      group \"All dashboards\", visible: false do\n        all_dashboards\n      end\n    end\n\n    section \"Resources\", icon: \"heroicons/outline/academic-cap\" do\n      group \"Academia\" do\n        resource :course\n        resource :course_link\n      end\n\n      group \"Blog\" do\n        resource :posts\n        resource :comments\n      end\n\n      group \"Other\" do\n        resource :fish\n      end\n    end\n\n    section \"Tools\", icon: \"heroicons/outline/finger-print\" do\n      all_tools\n    end\n\n    group do\n      link_to \"Avo\", path: \"https://avohq.io\"\n      link_to \"Google\", path: \"https://google.com\", target: :_blank\n    end\n  }\n  config.profile_menu = -> {\n    link_to \"Profile\", path: \"/profile\", icon: \"user-circle\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Generating an Avo Dashboard with Sample Cards\nDESCRIPTION: Example dashboard class generated by the rails generator. It shows how to define a dashboard with its properties and add various card types to display metrics and charts.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dashboards.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::MyDashboard < Avo::Dashboards::BaseDashboard\n  self.id = 'my_dashboard'\n  self.name = 'Dashy'\n  self.description = 'The first dashbaord'\n  self.grid_cols = 3\n\n  def cards\n    card Avo::Cards::ExampleMetric\n    card Avo::Cards::ExampleAreaChart\n    card Avo::Cards::ExampleScatterChart\n    card Avo::Cards::PercentDone\n    card Avo::Cards::AmountRaised\n    card Avo::Cards::ExampleLineChart\n    card Avo::Cards::ExampleColumnChart\n    card Avo::Cards::ExamplePieChart\n    card Avo::Cards::ExampleBarChart\n    divider label: \"Custom partials\"\n    card Avo::Cards::ExampleCustomPartial\n    card Avo::Cards::MapCard\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using form option with avo_edit_field (ERB)\nDESCRIPTION: This snippet shows how to pass the `form` object to `avo_edit_field` when rendering a field in a create or edit view. The `form` object is provided by the Avo resource tool and is necessary for proper form submission and handling.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-field-components.md#_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= avo_edit_field :name, as: :text, form: form %>\n```\n\n----------------------------------------\n\nTITLE: Avo Resource Auto-generated - Post.rb\nDESCRIPTION: This Ruby code defines an Avo resource for the `post` model. It sets the base configuration for the resource with included attributes and associations from the model. The `fields` method defines how attributes of the Post model are presented in the Avo admin panel. The `includes` option defines eager loading and `self.search` allows custom search configurations. This ensures an admin UI is available for the Post model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.includes = []\n  # self.search = {\n  #   query: -> { query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false) }\n  # }\n\n  def fields\n    field :id, as: :id\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Images to Search Results\nDESCRIPTION: Demonstrates how to enhance search results with images by providing an image URL (requires Avo Pro license).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(name_cont: params[:q], m: \"or\").result(distinct: false) },\n    item: -> do\n      {\n        title: \"[#{record.id}]#{record.name}\",\n        description: ActionView::Base.full_sanitizer.sanitize(record.body).truncate(130),\n        image_url: main_app.url_for(record.cover_photo),\n      }\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Timestamps using Discreet Information in Avo (Ruby)\nDESCRIPTION: Illustrates configuring `discreet_information` to show the record's `created_at` and `updated_at` timestamps in a tooltip when hovering over an icon by setting the attribute to the symbol `:timestamps`. Requires the Avo resource class and assumes the record responds to `created_at` and `updated_at`. The `:timestamps_badge` option can be used for badge styling.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/discreet-information.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = :timestamps\n\n  # fields and other resource configuration\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Taggable Skills Field in Avo Resource Using Ruby\nDESCRIPTION: Defines a 'skills' field as a tag input in an Avo resource for the Course model. This snippet extends Avo::BaseResource to expose the 'skills' attribute as a tags field type, enabling users to add multiple skill tags in the admin interface. It requires Avo framework and assumes a corresponding database column supporting arrays of text.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Course < Avo::BaseResource\n  def fields\n    field :skills, as: :tags\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Action Link with `link_arguments` in Avo Resource (Ruby)\nDESCRIPTION: This code snippet demonstrates how to use the `link_arguments` method to generate the path and data necessary to create a link to an Avo action within a resource's field definition. It utilizes the `resource` instance and an action class to generate the link. The code assumes that you have defined an Avo resource and an Avo action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/guides-and-tutorials.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  field :name, as: :text, name: \"Name (click to edit)\", only_on: :index do\n    path, data = Avo::Actions::City::Update.link_arguments(\n      resource: resource,\n      arguments: {\n        cities: Array[resource.record.id],\n        render_name: true\n      }\n    )\n\n    link_to resource.record.name, path, data: data\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Conditionally Marking Avo Fields as Required (Ruby)\nDESCRIPTION: Demonstrates using a lambda with the `required:` option to dynamically add the required asterisk indicator based on context, such as the current view (`:new` or `:edit`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, required: -> { view == :new } # make the field required only on the new view and not on edit\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attribute Validation in Rails Model - Ruby\nDESCRIPTION: This snippet shows how to add a custom validation method, age_must_be_over_18, in a Rails User model to ensure the age attribute is over 18 before allowing save or update actions. Dependencies include Rails (ActiveRecord) and having an age field on the User model. The validation method checks the age value and, if it is less than 18, appends an error to the errors object. This prevents the action from completing and triggers an error notification for the user. Inputs include user attributes; the output is either a valid record or a user-visible error message when the age is too low.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-errors.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\n  validate :age_must_be_over_18\n\n  private\n\n  def age_must_be_over_18\n    # Add a custom error to the record if age is less than 18.\n    if age < 18\n      errors.add(:age, \"must be over 18.\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Aging Order Resource Configuration for Avo\nDESCRIPTION: Configures the Avo resource for aging orders with various field types including text, date_time, and boolean. Applies the GracePeriod filter to enable filtering functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/rest-api-integration.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass AgingOrderResource < Avo::BaseResource\n  self.title = :id\n  self.includes = []\n\n  field :id, as: :text\n  field :folio_number, as: :text\n  field :order_submitted_at, as: :date_time, timezone: 'Chennai', format: '%B %d, %Y %H:%M %Z'\n  field :amc_name, as: :text\n  field :scheme, as: :text\n  field :primary_investor_id, as: :text\n  field :order_type, as: :text\n  field :systematic, as: :boolean\n  field :order_reference, as: :text\n  field :amount, as: :text\n  field :units, as: :text\n  field :age, as: :text\n\n  filter GracePeriod\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Tenant Session Switch Controller in Ruby\nDESCRIPTION: Defines a Rails controller action to update the tenant ID stored in user session, enabling switching of active tenant context in session-based multitenancy. The update action sets session[:tenant_id] from params[:id] and redirects back to the referring page or root path if unavailable. It inherits from Avo::ApplicationController and depends on session management and routing support for the update action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/multitenancy.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::SwitchAccountsController < Avo::ApplicationController\n  def update\n    # set the new tenant in session\n    session[:tenant_id] = params[:id]\n\n    redirect_back fallback_location: root_path\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Context Data in Avo Configuration\nDESCRIPTION: This snippet demonstrates attaching custom data to the global `context` object via `set_context`, making data accessible in resource and action classes. It’s useful for sharing current user or request params but is advised not to store `current_user` directly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.set_context do\n    {\n      foo: 'bar',\n      params: request.params,\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic HasMany Field in Avo Using Ruby\nDESCRIPTION: Defines a HasMany association field named :projects in an Avo resource using Ruby. This field shows associated records in a panel below regular fields on the Show view by default. Requires the field to be declared with the :has_many type within the resource definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/associations/has_many.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :projects, as: :has_many\n```\n\n----------------------------------------\n\nTITLE: Using Pre-made resource-edit#toggle Method\nDESCRIPTION: Shows how to use the built-in toggle method to show/hide fields based on another field's value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/stimulus-integration.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_country, as: :boolean, html: {\n  edit: {\n    input: {\n      data: {\n        action: \"input->resource-edit#toggle\", # use the pre-made stimulus method on input\n        resource_edit_toggle_target_param: \"countrySelectWrapper\", # target to be toggled\n        # resource_edit_toggle_targets_param: [\"countrySelectWrapper\"] # add more than one target\n      }\n    }\n  }\n}\nfield :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant Model with Migration using Rails Ruby\nDESCRIPTION: Defines the Account model as the tenant entity with attributes for name and subdomain. The migration creates the accounts table with indexes on subdomain (unique) and created_at for efficient queries. The model enforces presence, uniqueness (case insensitive), and maximum length validations for the name and subdomain fields to maintain data integrity.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/acts_as_tenant_integration.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Migration\nclass CreateAccounts < ActiveRecord::Migration[7.1]\n  def change\n    create_table :accounts do |t|\n      t.string :name\n      t.string :subdomain\n\n      t.timestamps\n    end\n\n    add_index :accounts, :subdomain, unique: true\n    add_index :accounts, :created_at\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Account model handles Tenant management\nclass Account < ApplicationRecord\n  MAX_SUBDOMAIN_LENGTH = 20\n\n  validates :name, :subdomain, presence: true\n  validates_uniqueness_of :name, :subdomain, case_sensitive: false\n  validates_length_of :subdomain, :name, maximum: MAX_SUBDOMAIN_LENGTH\n\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Current Model for Account in Rails\nDESCRIPTION: This Ruby code defines the `Current` model, which uses `ActiveSupport::CurrentAttributes` to hold the current account. This model allows you to store and access the current account throughout the application, based on the multitenancy approach.  Dependencies:  `ActiveSupport` is required.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/multitenancy.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/current.rb\nclass Current < ActiveSupport::CurrentAttributes\n  attribute :account\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Queries for Target Resources in Avo (Ruby)\nDESCRIPTION: Provides example search configurations for `Post` and `Project` Avo resources using `self.search = { query: -> { ... } }`. This setup defines how Avo searches for records within these resources and is essential for the `searchable: true` option on `belongs_to` fields pointing to them. It typically uses `ransack` for query building.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/belongs_to.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.search = {\n    query: -> {\n      query.ransack(id_eq: params[:q], name_cont: params[:q], body_cont: params[:q], m: \"or\").result(distinct: false)\n    }\n  }\nend\n\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  self.search = {\n    query: -> {\n      query.ransack(id_eq: params[:q], name_cont: params[:q], country_cont: params[:q], m: \"or\").result(distinct: false)\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Global Timezone and Currency in Avo\nDESCRIPTION: Defines default timezone and currency for date, datetime, and currency fields across the app. Dependencies involve Avo's core configuration system; inputs are string values representing timezone and currency code.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.timezone = 'UTC'\n  config.currency = 'USD'\nend\n```\n\n----------------------------------------\n\nTITLE: Setting scope options in a custom scope class in Ruby\nDESCRIPTION: This snippet explains how to configure optional display properties for a custom scope, such as 'name', 'description', 'scope', 'visible', and 'default'. These options determine how the scope appears and behaves in the Avo interface, including default application and custom query modifications.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/scopes.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Scopes::EvenId < Avo::Advanced::Scopes::BaseScope\n  self.name = \"Even\"\n  self.description = \"Only records that have an even ID.\"\n  self.scope = -> { query.where(\"#{resource.model_key}.id % 2 = ?\", \"0\") }\n  self.visible = -> { true }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Query to Search within Associated Client Attributes in Avo Resource - Ruby\nDESCRIPTION: Defines a custom search query within an Avo resource for Application that joins the associated Client model and uses the ransack gem to filter Application records based on multiple attributes of both Application and Client models. It accepts a query parameter and performs an OR search across id, name, workflow name, client ID, and client's first name, last name, email, and phone number, returning non-distinct results.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/application.rb\nclass Avo::Resources::Application < Avo::BaseResource\n  self.search = {\n    query: -> {\n      query\n        .joins(:client)\n        .ransack(\n          id_eq: params[:q],\n          name_cont: params[:q],\n          workflow_name_cont: params[:q],\n          client_id_eq: params[:q],\n          client_first_name_cont: params[:q],\n          client_last_name_cont: params[:q],\n          client_email_cont: params[:q],\n          client_phone_number_cont: params[:q],\n          m: 'or'\n        ).result(distinct: false)\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Options for SelectFilter in Ruby\nDESCRIPTION: Shows how to create a select filter with dynamic options in Avo. The filter allows filtering by Author and demonstrates how to access applied filters from other filters.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::Author < Avo::Filters::SelectFilter\n  self.name = 'Author'\n\n  def apply(request, query, value)\n    query = query.where(author_id: value) if value.present?\n    query\n  end\n\n  # Example `applied_filters`\n  # applied_filters = {\n  #   \"Avo::Filters::CourseCountryFilter\" => {\n  #     \"USA\" => true,\n  #     \"Japan\" => true,\n  #     \"Spain\" => false,\n  #     \"Thailand\" => false,\n  #   }\n  # }\n  def options\n    # Here you have access to the `applied_filters` object too\n    Author.select(:id, :name).each_with_object({}) { |author, options| options[author.id] = author.name }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring current_user Method (Devise) - Ruby\nDESCRIPTION: This snippet configures Avo to use the `current_user` method provided by Devise for user authentication. It assumes a standard Devise setup where the currently logged-in user is accessible through this method.  The `config.current_user_method` option tells Avo how to retrieve the current user object. This snippet requires the `avo` gem and a Rails application using devise. It sets `current_user_method` to `:current_user` within the `avo.rb` initializer file. The output is the authenticated user object which provides user-specific data and authorization. The input is the Rails app.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authentication.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_method = :current_user\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Text Field Options (Ruby)\nDESCRIPTION: This Ruby code defines a base class for custom text fields. It includes instance variables for `link_to_record`, `as_html`, and `protocol`, initializing them with default values and adding them to the field's attributes. This allows for the control of specific options associated with text fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nmodule Avo\n  module Fields\n    class SuperTextField < BaseField\n      attr_reader :link_to_record\n      attr_reader :as_html\n      attr_reader :protocol\n\n      def initialize(id, **args, &block)\n        super(id, **args, &block)\n\n        add_boolean_prop args, :link_to_record\n        add_boolean_prop args, :as_html\n        add_string_prop args, :protocol\n      end\n    end\n  end\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nmodule Avo\n  module Fields\n    class TextField < BaseField\n      attr_reader :link_to_record\n      attr_reader :as_html\n      attr_reader :protocol\n\n      def initialize(id, **args, &block)\n        super(id, **args, &block)\n\n        add_boolean_prop args, :link_to_record\n        add_boolean_prop args, :as_html\n        add_string_prop args, :protocol\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding an Index on created_at Column in Rails Migration\nDESCRIPTION: Example migration that adds an index to the created_at column of the users table. This optimization is recommended since Avo sorts records by created_at by default in the Index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/best-practices.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Example migration\nclass AddIndexOnUsersCreatedAt < ActiveRecord::Migration[7.1]\n  def change\n    add_index :users, :created_at\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Filter Display Name in Ruby\nDESCRIPTION: Demonstrates how to set the display name for an Avo filter using the `self.name` attribute. This name is shown to the user in the filters panel. A static string or a lambda (for dynamic/internationalized names, available from v3.14.0) can be used. The lambda provides access to Avo::ExecutionContext attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nself.name = \"User names filter\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Requires Avo v3.14.0+\nself.name = -> { I18n.t(\"avo.filter.name\") }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Filter with Arguments in Avo\nDESCRIPTION: This snippet demonstrates how to access and use filter arguments within a filter class. The NameFilter checks the case_insensitive argument to determine visibility and modify the query behavior accordingly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::Name < Avo::Filters::TextFilter\n  self.name = \"Name filter\"\n  self.button_label = \"Filter by name\"\n  self.visible = -> do\n    arguments[:case_insensitive]\n  end\n\n  def apply(request, query, value)\n    if arguments[:case_insensitive]\n      query.where(\"LOWER(name) LIKE ?\", \"%#{value.downcase}%\")\n    else\n      query.where(\"name LIKE ?\", \"%#{value}%\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customize Grid Card Styling in Avo Resource Ruby\nDESCRIPTION: Apply custom styling to grid card elements using the `html` option within the `grid_view` configuration. This allows adding Tailwind CSS classes to specific wrappers for the title, body, and cover image.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/grid-view.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.grid_view = {\n    card: -> do\n      {\n        cover_url:\n          if record.cover_photo.attached?\n            main_app.url_for(record.cover_photo.url)\n          end,\n        title: record.name,\n        body: record.truncated_body\n      }\n    end,\n    html: -> do\n      {\n        title: {\n          index: {\n            wrapper: {\n              classes: \"bg-blue-50 rounded-md p-2\"\n            }\n          }\n        },\n        body: {\n          index: {\n            wrapper: {\n              classes: \"bg-gray-50 rounded-md p-1\"\n            }\n          }\n        },\n        cover: {\n          index: {\n            wrapper: {\n              classes: \"blur-sm\"\n            }\n          }\n        }\n      }\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Belongs To Association in Avo (Ruby)\nDESCRIPTION: Defines a simple `belongs_to` association named `:user` within an Avo resource. This will render a link to the associated user on Index and Show views, and a dropdown selector on New and Edit views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/belongs_to.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :user, as: :belongs_to\n```\n\n----------------------------------------\n\nTITLE: Creating links to records from index fields in Ruby\nDESCRIPTION: Makes fields in the index table view clickable, linking directly to the record's show page, reducing the need to click the show icon.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n# for id field\nfield :id, as: :id, link_to_record: true\n\n# for text field\nfield :name, as: :text, link_to_record: true\n\n# for gravatar field\nfield :email, as: :gravatar, link_to_record: true\n```\n\n----------------------------------------\n\nTITLE: Customizing Location Map Display Using mapkick_options in Avo (Ruby)\nDESCRIPTION: This snippet configures the Location field to use the 'mapkick_options' parameter for advanced customization of the rendered map, such as specifying the Mapbox map style and enabling or disabling map controls. Requires the 'mapkick-rb' gem (version 3.16.2 or later) and a valid MAPBOX_ACCESS_TOKEN environment variable. The 'stored_as' option saves coordinates as separate columns; mapkick_options supports all settings accepted by Mapkick.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/location.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :coordinates,\n  as: :location,\n  stored_as: [:latitude, :longitude],\n  mapkick_options: {\n    style: 'mapbox://styles/mapbox/satellite-v9',\n    controls: true\n  }\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Link for Custom Field Using Avo Text Field with as_html in Ruby\nDESCRIPTION: Defines a custom link field named partner_home on an Avo resource using the as_html option. This snippet conditionally generates an HTML anchor tag linking to the partner's resource page, displaying the partner's first name as the link text. It requires presence checks for the partner association to avoid nil errors and depends on Avo URL helpers for resource linking.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/custom-link-field.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# with the as_html option\nfield :partner_home, as: :text, as_html: true do |model, *args|\n  if model.partner.present?\n    link_to model.partner.first_name, avo.resources_partner_url(model.partner.id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Resource with Panels in Ruby\nDESCRIPTION: This snippet shows how to define a resource class with fields organized into a main panel and additional panels, including customizations for each panel's name and description. It demonstrates the use of the `panel` method to group fields and how to add custom panels within a resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-panels.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :email, as: :text, name: \"User Email\", required: true\n\n    panel name: \"User information\", description: \"Some information about this user\" do\n      field :first_name, as: :text, required: true, placeholder: \"John\"\n      field :last_name, as: :text, required: true, placeholder: \"Doe\"\n      field :active, as: :boolean, name: \"Is active\", show_on: :show\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting nullability options for a field in Avo using Ruby\nDESCRIPTION: This code snippet shows how to configure the `nullable` option to explicitly store `NULL` values in the database when the field is empty. The `null_values` method defines which values are interpreted as `NULL`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n# using default options\nfield :updated_status, as: :status, failed_when: [:closed, :rejected, :failed], loading_when: [:loading, :running, :waiting], nullable: true\n\n# using custom null values\nfield :body, as: :textarea, nullable: true, null_values: ['0', '', 'null', 'nil', nil]\n```\n\n----------------------------------------\n\nTITLE: Prepending Authentication Before Action in Avo Controller with Ruby\nDESCRIPTION: This snippet modifies the Avo `ApplicationController` to enforce authentication by including an `Authentication` concern and prepending the `require_authentication` before action callback. The `new_session_path` method is delegated to `main_app` to maintain correct routing for the login page. Prepending the callback ensures authentication is checked very early in the request lifecycle, securing admin access accordingly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rails-authentication-scaffold.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/controllers/avo/application_controller.rb\nmodule Avo\n  class ApplicationController < BaseApplicationController\n    include Authentication\n    delegate :new_session_path, to: :main_app\n\n    # we are prepending the action to ensure it will be fired very early on in the request lifecycle\n    prepend_before_action :require_authentication\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Media Library in Avo\nDESCRIPTION: Code to enable the Media Library feature in Avo by setting the enabled flag to true in the configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/media-library.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nif defined?(Avo::MediaLibrary)\n  Avo::MediaLibrary.configure do |config|\n    config.enabled = true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Course City Filter in Ruby with Avo\nDESCRIPTION: A boolean filter class that filters courses by city. It includes methods for applying the filter to queries and dynamically generating city options based on selected countries.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseCityFilter < Avo::Filters::BooleanFilter\n  self.name = \"Course city filter\"\n\n  def apply(request, query, values)\n    query.where(city: values.select { |city, selected| selected }.keys)\n  end\n\n  def options\n    cities_for_countries countries\n  end\n\n  private\n\n  # Get a hash of cities for certain countries\n  # Example payload:\n  # countries = [\"USA\", \"Japan\"]\n  def cities_for_countries(countries_array = [])\n    countries_array\n      .map do |country|\n        # Get the cities for this country\n        Course.cities.stringify_keys[country]\n      end\n      .flatten\n      # Prepare to transform to a Hash\n      .map { |city| [city, city] }\n      # Turn to a Hash\n      .to_h\n  end\n\n  # Get the value of the selected countries\n  # Example payload:\n  # applied_filters = {\n  #   \"CourseCountryFilter\" => {\n  #     \"USA\" => true,\n  #     \"Japan\" => true,\n  #     \"Spain\" => false,\n  #     \"Thailand\" => false,\n  #   }\n  # }\n  def countries\n    if applied_filters[\"CourseCountryFilter\"].present?\n      # Fetch the value of the countries filter\n      applied_filters[\"CourseCountryFilter\"]\n        # Keep only the ones selected\n        .select { |country, selected| selected }\n        # Pluck the name of the coutnry\n        .keys\n    else\n      # Return empty array\n      []\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting textarea with `simple_format`\nDESCRIPTION: Demonstrates how to use the `format_using` option with the `simple_format` helper to render newlines correctly in a `textarea` field. This wraps each newline-separated paragraph in `<p>` tags for proper display.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/faq.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentResource < Avo::BaseResource\n  field :body,\n    as: :textarea,\n    format_using: -> do\n      simple_format value\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Sort Column in Avo Resource\nDESCRIPTION: This code shows how to configure the default sort column for the `Index` view in an Avo resource using the `default_sort_column` option. The specified column will be used for sorting the records in ascending or descending order. If the specified column does not exist, Avo will use the default column. It's recommended to add an index to this column for improved performance.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.default_sort_column = :last_name\n\n  def fields\n    field :id, as: :id\n    field :last_name, as: :text\n  end\n\n  # other resource configurations...\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Attachment Permissions via method_missing in ApplicationPolicy - Ruby\nDESCRIPTION: This Ruby code snippet adds a `method_missing` override to the `ApplicationPolicy` class to dynamically handle calls to attachment action methods like `upload_logo?`, `delete_logo?`, or `download_logo?`. It uses a regex pattern to extract the action and attachment name from the method name, then looks up these in a predefined `attachment_concerns` hash to delegate authorization decisions. This reduces repetitive code by centralizing attachment permission logic. It depends on the presence of an `attachment_concerns` method returning a suitable hash and requires Ruby's standard `method_missing` mechanism.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/attachment-policy-extension-for-pundit.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef method_missing(method_name, *args)\n  if method_name.to_s =~ /^(upload|delete|download)_(.+)\\?$/\n    action = Regexp.last_match(1).to_sym\n    attachment = Regexp.last_match(2).to_sym\n\n    return attachment_concerns[attachment][action] if attachment_concerns.key?(attachment) &&\n                                                      attachment_concerns[attachment].key?(action)\n  end\n\n  super\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Scope for Index Page in Avo Resource (Ruby)\nDESCRIPTION: This code snippet demonstrates how to customize the query used to fetch records for the Index view in Avo.  It uses `index_query` to specify a lambda that orders the records by the `last_name` attribute in ascending order. It enhances the default Avo query.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.index_query = -> {\n    query.order(last_name: :asc)\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Conditions Hash for Select Dynamic Filters in Ruby\nDESCRIPTION: This Ruby snippet provides a hash mapping condition keys to descriptive labels for select type filters. It includes conditions 'Is', 'Is not', 'Is null', and 'Is not null'. The hash is inverted to facilitate dynamic lookup of conditions within the Avo filtering system for select fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  is: \"Is\",\n  is_not: \"Is not\",\n  is_null: \"Is null\",\n  is_not_null: \"Is not null\",\n}.invert\n```\n\n----------------------------------------\n\nTITLE: Configuring Textarea Rows in Ruby\nDESCRIPTION: This snippet shows how to render a textarea field and set the number of visible rows to 5 using the rows option in Ruby. This customization applies to both Edit and New views within the UI. It requires the same Ruby DSL as the basic example, but adds a key integer parameter, rows, whose value controls the textarea's height. Expected input for rows is any integer, with the default being 5 if not specified. The output is a textarea input with the visible rows set according to the rows value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/textarea.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :textarea, rows: 5\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Base Resources Controller\nDESCRIPTION: This Ruby code defines a base controller for Avo resources, `Avo::BaseResourcesController`, extending from `Avo::ResourcesController`.  It adds authentication using `include AuthenticationController::Authentication` and a `before_action` to verify if a user is logged in using the `is_logged_in?` method.  This allows for executing actions before the Avo pages are loaded, such as authentication checks.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/avo/base_resources_controller.rb\nclass Avo::BaseResourcesController < Avo::ResourcesController\n  include AuthenticationController::Authentication\n\n  before_action :is_logged_in?\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Avo Action\nDESCRIPTION: This code defines the `handle` method for an Avo action. It retrieves the selected models and field values, iterates through the models, toggles their active status, and optionally sends a notification email using the provided message. The method concludes by calling `succeed` with a success message.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(**args)\n  models, fields = args.values_at(:models, :fields)\n\n  models.each do |model|\n    if model.active\n      model.update active: false\n    else\n      model.update active: true\n    end\n\n    # Optionally, you may send a notification with the message to that user.\n    UserMailer.with(user: model).toggle_inactive(fields[\"message\"]).deliver_later\n  end\n\n  succeed 'Perfect!'\nend\n```\n\n----------------------------------------\n\nTITLE: Sample Resource Tool Partial (ERB)\nDESCRIPTION: This is a sample resource tool partial generated by Avo. It demonstrates the basic structure and provides placeholders for content. It illustrates how to access variables such as `tool`, `@resource`, `@resource.model`, `form`, `params`, `Avo::Current.context`, and `current_user` within the partial.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-field-components.md#_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new title: \"Post info\" do |c| %>\n    <% c.with_tools do %>\n      <%= a_link('/avo', icon: 'heroicons/solid/academic-cap', style: :primary) do %>\n        Dummy link\n      <% end %>\n    <% end %>\n    <% c.with_body do %>\n      <div class=\"flex flex-col p-4 min-h-24\">\n        <div class=\"space-y-4\">\n          <h3>🪧 This partial is waiting to be updated</h3>\n          <p>\n            You can edit this file here <code class='p-1 rounded bg-gray-500 text-white text-sm'>app/views/avo/resource_tools/post_info.html.erb</code>.\n          </p>\n          <p>\n            The resource tool configuration file should be here <code class='p-1 rounded bg-gray-500 text-white text-sm'>app/avo/resource_tools/post_info.rb</code>.\n          </p>\n          <%# In this partial, you have access to the following variables:\n             # tool\n             # @resource\n             # @resource.model\n             # form (on create & edit pages. please check for presence first)\n             # params\n             # Avo::Current.context\n             # current_user\n          %>\n        </div>\n      </div>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Filterable Fields in Avo Resource Using Ruby\nDESCRIPTION: This Ruby snippet demonstrates adding the `filterable: true` attribute to specific fields within an Avo resource class to enable dynamic filtering on those fields in the <Index /> view. The example marks 'status', 'stage', and 'country' fields as filterable, which allows users to apply filters on these attributes at runtime. It depends on the Avo framework and requires that the corresponding model's `ransackable_attributes` includes these field names as strings to work properly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Project < Avo::BaseResource\n  def fields\n    field :name, as: :text\n    field :status, as: :status, filterable: true\n    field :stage, as: :badge, filterable: true\n    field :country, as: :country, filterable: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Scoping Avo Routes by Locale in Ruby on Rails\nDESCRIPTION: Defines application routes within a locale-specific URL scope using Ruby on Rails routing DSL. This snippet configures the application to mount Avo under a dynamic :locale prefix, allowing URLs like /en/resources or /fr/resources. It requires Ruby on Rails, the Avo gem, and should be added to the config/routes.rb file. The :locale parameter becomes available to nested routes, enabling locale-aware navigation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multi-language-urls.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  scope \":locale\" do\n    mount_avo\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting Plain Text with Avo EncryptionService in Ruby\nDESCRIPTION: Demonstrates how to use the `Avo::Services::EncryptionService` to encrypt a simple string and then decrypt it in Ruby. Requires Avo and Rails with proper secret key base setup. The `message` parameter contains the text to encrypt, while `purpose` is a symbol for scoping the encryption and must match for decryption. Returns an encrypted string or the original plaintext after decryption. Inputs must be serializable string data and outputs will be an encrypted string and its decrypted equivalent.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/encryption-service.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsecret_encryption = Avo::Services::EncryptionService.encrypt(message: \"Secret string\", purpose: :demo)\n# \"x+rnETtClF2cb80PtYzlULnVB0vllf+FvwoqBpPbHWa8q6vlml5eRWrwFMcYrjI6--h2MiT1P5ctTUjwfQ--k2WsIRknFVE53QwXADDDJw==\"\n\nAvo::Services::EncryptionService.decrypt(message: secret_encryption, purpose: :demo)\n# \"Secret string\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Name Mapping in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to customize the mapping of column names to field types using `column_names_mapping`. It configures how certain column names are converted into field types, allowing for greater customization. This example shows how to map `published_at` and `role` columns to specific Avo field types with additional settings.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-discovery.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # ...\n\n  config.column_names_mapping = {\n    published_at: { field: :date_time, timezone: 'UTC' },\n    role: { field: :select, enum: -> { User.roles } }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Using URL helpers within Avo\nDESCRIPTION: Demonstrates how to correctly use Rails URL helpers within the Avo admin panel.  Since Avo is a Rails engine, you need to prepend the helper with `main_app` to ensure Rails can find the correct route.  This is necessary for URL helpers to function correctly within Avo's context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/faq.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :partner_home, as: :text, as_html: true do |model, *args|\n  link_to 'Partner', partner_home_url(model)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining AgingOrder ActiveModel for API-backed Data in Ruby\nDESCRIPTION: Implements an AgingOrder model using ActiveModel modules to behave like an ActiveRecord model without database persistence. It declares attr_accessors for attributes, class methods to define column names and JSON keys, and an all method fetching data from an external REST API via HTTParty. The model supports seamless integration with Avo by encapsulating API data as model instances.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rest-api-integration.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass AgingOrder\n  include ActiveModel::Model\n  include ActiveModel::Conversion\n  include ActiveModel::Validations\n  extend ActiveModel::Naming\n\n  attr_accessor :id, :investment_date, :folio_number, :order_submitted_at,\n                :amc_name, :scheme, :primary_investor_id, :order_type, :systematic,\n                :order_reference, :amount, :units, :age\n\n  class << self\n    def column_names\n      %i[id investment_date folio_number order_submitted_at amc_name\n         scheme primary_investor_id order_type systematic\n         order_reference amount units age]\n    end\n\n    def base_class\n      AgingOrder\n    end\n\n    def root_key\n      'data'\n    end\n\n    def count_key\n      'total_elements'\n    end\n\n    def all(query)\n      response = HTTParty.get(ENV['AGING_URL'], query: query)\n      JSON.parse(response.body)\n    end\n  end\n\n  def persisted?\n    id.present?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Polymorphic Belongs To Association in Avo (Ruby)\nDESCRIPTION: Configures a polymorphic `belongs_to` association named `:commentable`. The `polymorphic_as` option specifies the association name used in the model with `polymorphic: true`, and `types` lists the possible target model types (e.g., `::Post`, `::Project`). Both options are mandatory for defining polymorphic fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/belongs_to.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :commentable, as: :belongs_to, polymorphic_as: :commentable, types: [::Post, ::Project]\n```\n\n----------------------------------------\n\nTITLE: Rendering a Textarea Field with Ruby\nDESCRIPTION: This snippet demonstrates how to render a textarea input field in Ruby by using the field method with :textarea as the type. No additional options are provided, so the textarea will use the default settings. The input expects users to enter multiline text, and no special dependencies are required beyond the Ruby environment supporting this DSL. The output is a textarea field in the UI, with all properties set to their defaults.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/textarea.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :textarea\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Discreet Information Items in Avo (Ruby)\nDESCRIPTION: Demonstrates how to display multiple pieces of discreet information using an array. It includes built-in timestamps, a custom item with a dynamic tooltip and icon based on record status, and another custom item with a dynamic label, a static URL, and target.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/discreet-information.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = [\n    :timestamps,\n    {\n      tooltip: -> { sanitize(\"Product is <strong>#{record.published_at ? \"published\" : \"draft\"}</strong>\", tags: %w[strong]) },\n      icon: -> { \"heroicons/outline/#{record.published_at ? \"eye\" : \"eye-slash\"}\" }\n    },\n    {\n      label: -> { record.published_at ? \"😬\" : \"😬\" },\n      url: -> { \"https://avohq.io\" },\n      url_target: :_blank\n    }\n  ]\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = [\n    :timestamps,\n    {\n      tooltip: -> { sanitize(\"Product is <strong>#{record.published_at ? \"published\" : \"draft\"}</strong>\", tags: %w[strong]) },\n      icon: -> { \"heroicons/outline/#{record.published_at ? \"eye\" : \"eye-slash\"}\" }\n    },\n    {\n      label: -> { record.published_at ? \"✅\" : \"🙄\" },\n      url: -> { \"https://avohq.io\" },\n      url_target: :_blank\n    }\n  ]\n\n  # fields and other resource configuration\nend\n```\n\n----------------------------------------\n\nTITLE: Adding accepts_nested_attributes_for to Parent Model in Ruby\nDESCRIPTION: Configures the Fish model to accept nested attributes for its reviews association, enabling the creation of reviews alongside the parent fish record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/nested-records-when-creating.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Fish < ApplicationRecord\n  has_many :reviews, as: :reviewable\n\n  accepts_nested_attributes_for :reviews\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Searchable Has Many Association in Avo Resource (Ruby)\nDESCRIPTION: This snippet demonstrates how to enable the `searchable` option for a `has_many` association in an Avo resource. This transforms the attach field/modal into a searchable experience for selecting associated records. The `searchable: true` option is added to the `links` field definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/associations_searchable_option_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseLink < Avo::BaseResource\n  field :links,\n    as: :has_many,\n    searchable: true\nend\n```\n\n----------------------------------------\n\nTITLE: Override destroy_fail_action - Ruby\nDESCRIPTION: This snippet shows how to override the `destroy_fail_action` method. It defines what happens when a resource is not successfully destroyed. The example redirects the user back to the referrer or the resources path with an error message. It uses `params[:referrer]` for navigation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ndef destroy_fail_action\n  respond_to do |format|\n    format.html { redirect_back fallback_location: params[:referrer] || resources_path(resource: @resource, turbo_frame: params[:turbo_frame], view_type: params[:view_type]), error: destroy_fail_message }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Safely extending ApplicationController with concerns in Ruby\nDESCRIPTION: This snippet shows the proper way to extend Avo::ApplicationController using a concern. It demonstrates creating a multitenancy concern and including it in the controller through initializers, which is upgrade-safe.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-application-controller.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/concerns/multitenancy.rb\nmodule Multitenancy\n  extend ActiveSupport::Concern\n\n  included do\n    before_action :multitenancy_detector\n    # or\n    prepend_before_action :multitenancy_detector\n  end\n\n  def multitenancy_detector\n    # your logic here\n  end\nend\n\n# configuration/initializers/avo.rb\nRails.configuration.to_prepare do\n  Avo::ApplicationController.include Multitenancy\nend\n```\n\n----------------------------------------\n\nTITLE: Set Current User for Avo\nDESCRIPTION: Configures Avo to fetch the current authenticated user using `Current.user`, which is the thread-safe global used by the Rails authentication scaffold. This ensures Avo knows who the current user is for authorization and personalization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rails-authentication-scaffold.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # other pieces of configuration\n\n  # tell Avo how to find the current authenticated user.\n  config.current_user_method do\n    Current.user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Scoping records in attach modal\nDESCRIPTION: This snippet shows how to use `attach_scope` with a `belongs_to` association to limit the records that can be attached. It scopes the query to only include non-admin users.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/associations_attach_scope_option_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :user,\n  as: :belongs_to,\n  attach_scope: -> { query.non_admins }\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Password Field in Avo (Ruby)\nDESCRIPTION: This Ruby code snippet defines a field named `:password` within an Avo resource configuration. Using `as: :password` instructs Avo to render this field as a standard HTML password input (`<input type=\"password\">`), typically visible only on `Edit` and `New` views by default.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/password.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :password, as: :password\n```\n\n----------------------------------------\n\nTITLE: Defining Record Previews in Avo Resource with Ruby\nDESCRIPTION: This Ruby snippet defines a resource class `Avo::Resources::Team` inheriting from `Avo::BaseResource`. It sets up the `preview` field as a preview type and marks specific fields (`name`, `color`, `description`) with `show_on: :preview` to include them in the record preview popover. Key functionalities include field type declaration, visibility control (`hide_on`, `show_on`), and sortable text fields. This setup requires the Avo gem to function and depends on Avo's DSL for resource fields. The snippet illustrates how to customize which fields appear in the preview, allowing a tailored summary display of records. The input is the resource record, and the output is the rendered preview popover in the Avo admin panel.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/record-previews.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Team < Avo::BaseResource\n  def fields\n    field :preview, as: :preview\n    field :name,\n     as: :text,\n     sortable: true,\n     show_on: :preview\n    field :color,\n      as: Avo::Fields::ColorPickerField,\n      hide_on: :index,\n      show_on: :preview\n    field :description,\n      as: :textarea,\n      show_on: :preview\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Dashboard Name with I18n in Avo\nDESCRIPTION: Example of setting a dynamic dashboard name using a Proc and I18n localization. Available in Avo version 3.14.2 and above.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dashboards.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nself.name = -> { I18n.t(\"avo.dashboards.dashy.name\") }\n```\n\n----------------------------------------\n\nTITLE: Setting Card Refresh Frequency\nDESCRIPTION: This snippet shows how to configure a card to automatically refresh its data at a specified interval.  The `refresh_every` attribute accepts a number of seconds (or a time duration using `minutes` or other time units). The card's data will then be automatically updated without requiring a page reload. Requires the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = 'users_metric'\n  self.refresh_every = 10.minutes\nend\n```\n\n----------------------------------------\n\nTITLE: Bulk Authorization for File Attachments in Ruby\nDESCRIPTION: Example of using metaprogramming to define multiple file attachment authorization methods at once with the same value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n[:cover_photo, :audio].each do |file|\n  [:upload, :download, :delete].each do |action|\n    define_method \"#{action}_#{file}?\" do\n      true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Changing Dynamic Filter Type - Ruby\nDESCRIPTION: This snippet shows the change in the dynamic filter type for custom filters, deprecating the `:array` type in favor of the `:tags` type.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef filters\n  dynamic_filter :the_filter,\n    type: :array # [!code --]\n    type: :tags # [!code ++]\nend\n```\n\n----------------------------------------\n\nTITLE: Generating an Avo Boolean Filter using Rails CLI\nDESCRIPTION: Shows the Rails generator commands to create a new Avo Boolean filter file. Running either command scaffolds a filter class inheriting from `Avo::Filters::BooleanFilter`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:filter featured\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:filter featured --type boolean\n```\n\n----------------------------------------\n\nTITLE: Avo Unauthorized Action Log Format in Development (Bash)\nDESCRIPTION: Displays the detailed log format generated in the development environment (since Avo v3.11.7) when a developer user attempts an unauthorized action. The log includes the policy class, the action name, the global ID (GID) of the user making the request, and the GID of the record involved, aiding in debugging permissions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nweb     | [Avo->] Unauthorized action 'reorder?' for 'UserPolicy'\nweb     | user: gid://dummy/User/20\nweb     | record: gid://dummy/User/31\n```\n\n----------------------------------------\n\nTITLE: Defining the `records` Method for Data Provision in Array Resource\nDESCRIPTION: This Ruby method provides a static array of hashes representing movie records with fields such as `id`, `name`, and `release_date`. It serves as the fallback data source for the array-backed resource, allowing dynamic or static data to be returned as needed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/array-resources.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef records\n  [\n    {\n      id: 1,\n      name: \"The Shawshank Redemption\",\n      release_date: \"1994-09-23\"\n    },\n    {\n      id: 2,\n      name: \"The Godfather\",\n      release_date: \"1972-03-24\",\n      fun_fact: \"The iconic cat in the opening scene was a stray found by director Francis Ford Coppola on the studio lot.\"\n    },\n    {\n      id: 3,\n      name: \"Pulp Fiction\",\n      release_date: \"1994-10-14\"\n    }\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Main Menu with Sections Ruby\nDESCRIPTION: Shows how to define the main sidebar menu in `config/initializers/avo.rb` using `Avo.configure`, setting `config.main_menu` to a lambda block. It demonstrates creating `section` and `group` elements to organize `resource` and `dashboard` links, including internationalization (`I18n.t`) and collapsable groups.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    section \"Resources\", icon: \"heroicons/outline/academic-cap\" do\n      group \"Academia\" do\n        resource :course\n        resource :course_link\n      end\n\n      group \"Blog\", collapsable: true, collapsed: true do\n        dashboard :dashy\n\n        resource :post\n        resource :comment\n      end\n    end\n\n    section I18n.t('avo.other'), icon: \"heroicons/outline/finger-print\", collapsable: true, collapsed: true do\n      link_to 'Avo HQ', path: 'https://avohq.io', target: :_blank\n      link_to 'Jumpstart Rails', path: 'https://jumpstartrails.com/', target: :_blank\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Delimiters for Splitting Tag Input - Ruby\nDESCRIPTION: Configures the tags field to split user input using custom delimiters, such as commas or space characters. The 'delimiters' option receives an array of delimiter characters. Helps accommodate different input patterns for tag entry, defaulting to comma (\",\") if not set.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  delimiters: [\",\", \" \"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Partial Card in Ruby\nDESCRIPTION: Defines a custom partial card that renders content from a specified partial template. This example shows the basic configuration with column and row specifications.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass ExampleCustomPartial < Avo::Dashboards::PartialCard\n  self.id = \"users_custom_card\"\n  self.cols = 1\n  self.rows = 4\n  self.partial = \"avo/cards/custom_card\"\n  # self.display_header = true\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Badge field secondary option to neutral in 3.0.1.beta9\nDESCRIPTION: Shows how to update the Badge field configuration by renaming the 'secondary' option to 'neutral' which better reflects its intended use.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nfield :stage,\n  as: :badge,\n  options: {\n    info: [:discovery, :idea],\n    success: :done,\n    warning: \"on hold\",\n    danger: :cancelled,\n    secondary: :drafting\n  }\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfield :stage,\n  as: :badge,\n  options: {\n    info: [:discovery, :idea],\n    success: :done,\n    warning: \"on hold\",\n    danger: :cancelled,\n    neutral: :drafting\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale in Avo Configuration After Version 2.11\nDESCRIPTION: Provides code to set a default locale in the Avo configuration, affecting locale behavior in Avo requests. This setting influences which language content is displayed for the admin interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multilingual-content.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.locale = :en # default is nil\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing City Filter with Dynamic Options in Ruby\nDESCRIPTION: Shows a city filter implementation that reacts to selected countries in another filter, displaying only cities from selected countries.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/filters/course_city.rb\nclass Avo::Filters::CourseCity < Avo::Filters::BooleanFilter\n  self.name = \"Course city filter\"\n\n  def apply(request, query, values)\n    query.where(city: values.select { |city, selected| selected }.keys)\n  end\n\n  def options\n    cities_for_countries countries\n  end\n\n  private\n\n  # Get a hash of cities for certain countries\n  # Example payload:\n  # countries = [\"USA\", \"Japan\"]\n  def cities_for_countries(countries_array = [])\n    countries_array\n      .map do |country|\n        # Get the cities for this country\n        Course.cities.stringify_keys[country]\n      end\n      .flatten\n      # Prepare to transform to a Hash\n      .map { |city| [city, city] }\n      # Turn to a Hash\n      .to_h\n  end\n\n  # Get the value of the selected countries\n  # Example payload:\n  # applied_filters = {\n  #   \"Avo::Filters::CourseCountryFilter\" => {\n  #     \"USA\" => true,\n  #     \"Japan\" => true,\n  #     \"Spain\" => false,\n  #     \"Thailand\" => false,\n  #   }\n  # }\n  def countries\n    if applied_filters[\"Avo::Filters::CourseCountryFilter\"].present?\n      # Fetch the value of the countries filter\n      applied_filters[\"Avo::Filters::CourseCountryFilter\"]\n        # Keep only the ones selected\n        .select { |country, selected| selected }\n        # Pluck the name of the coutnry\n        .keys\n    else\n      # Return empty array\n      []\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Text Filter (Ruby)\nDESCRIPTION: Defines an Avo Text filter. The `apply` method receives a single `value` as a string containing the text entered by the user. The `button_label` can customize the filter's button text.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nclass NameFilter < Avo::Filters::TextFilter\n  self.name = \"Name filter\"\n  self.button_label = \"Filter by name\"\n\n  # `value` comes as text\n  # Eg: 'avo'\n  def apply(request, query, value)\n    query.where('LOWER(name) LIKE ?', \"%#{value}%\")\n  end\n\n  # def default\n  #   'avo'\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Options to Edit Field using Avo::EditField ERB\nDESCRIPTION: Demonstrates how standard Avo field options, such as `help`, `required`, `readonly`, `placeholder`, and `nullable`, can be applied directly when using the `avo_edit_field` helper in a partial. It also shows using a Ruby lambda for a conditional `readonly` option based on the `current_user`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-field-components.md#_snippet_5\n\nLANGUAGE: ERB\nCODE:\n```\n<%= avo_edit_field :name, as: :text, form: form, help: \"The user's name\", readonly: -> { !current_user.is_admin? }, placeholder: \"John Doe\", nullable: true %>\n```\n\n----------------------------------------\n\nTITLE: Defining the Preview Field in Ruby\nDESCRIPTION: This snippet registers the 'preview' field as an icon in the resource form, enabling the preview popup feature for each record in the Index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/preview.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :preview, as: :preview\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Associations Using `self.includes` in Ruby\nDESCRIPTION: This snippet demonstrates configuring eager loading of associations in Avo resources using `self.includes` to prevent N+1 query issues. It specifies which associations to load for the Post resource, including nested associations, enhancing query efficiency.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_30\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.includes = [:user, :tags]\n\n  # or a very nested scenario\n  self.includes = [files_attachments: :blob, users: [:comments, :teams, post: [comments: :user]]]\nend\n```\n\n----------------------------------------\n\nTITLE: Discovering Fields and Associations (Ruby)\nDESCRIPTION: This example demonstrates the basic usage of `discover_columns` and `discover_associations` to automatically configure fields for the `User` resource.  It shows the minimal setup needed to enable automatic field discovery. The functionality relies on the underlying database schema and Avo configurations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-discovery.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  # ...\n\n  def fields\n    discover_columns\n    discover_associations\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Tabs and Panels in Avo Resource - Ruby\nDESCRIPTION: Defines an Avo resource class with fields grouped into tabs and panels. The snippet demonstrates how to use the 'tabs' and 'tab' DSLs to structure resource UI, grouping fields like 'first_name', 'last_name', and associations such as 'teams' and 'projects', giving each tab a name and description. Requires the avo gem (Rails engine for admin dashboards), with the fields specified using their types and optional display or validation parameters. Inputs are defined in code by developer, outputs in the admin UI; main constraint is correct structure as per Avo DSL.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tabs.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :email, as: :text, name: \"User Email\", required: true\n\n    tabs do\n      tab \"User information\", description: \"Some information about this user\" do\n        panel do\n          field :first_name, as: :text, required: true, placeholder: \"John\"\n          field :last_name, as: :text, required: true, placeholder: \"Doe\"\n          field :active, as: :boolean, name: \"Is active\", show_on: :show\n        end\n      end\n\n      field :teams, as: :has_and_belongs_to_many\n      field :people, as: :has_many\n      field :spouses, as: :has_many\n      field :projects, as: :has_and_belongs_to_many\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Routes and Controller to Avo Engine in Rails Ruby\nDESCRIPTION: This example shows how to define custom routes that live within the Avo engine's routing context and implement the corresponding controller. Using `Avo::Engine.routes.draw`, you can add routes pointing to custom controllers (like `Avo::SwitchAccountsController`) or specific resource actions within the Avo namespace. This allows extending Avo's functionality with custom pages or operations accessible within the admin panel's URL structure. The example includes both the routes drawing block and the related controller implementation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/routing.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# routes.rb\nRails.application.routes.draw do\n  mount_avo\n\n  # your other app routes\nend\n\nif defined? ::Avo\n  Avo::Engine.routes.draw do\n    # new route in new controller\n    put \"switch_accounts/:id\", to: \"switch_accounts#update\", as: :switch_account\n\n    scope :resources do\n      # append a route to a resource controller\n      get \"courses/cities\", to: \"courses#cities\"\n    end\n  end\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/controllers/avo/switch_accounts_controller.rb\nclass Avo::SwitchAccountsController < Avo::ApplicationController\n  def update\n    session[:tenant_id] = params[:id]\n\n    redirect_back fallback_location: root_path\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding fields to the sidebar in Avo Resource\nDESCRIPTION: This code snippet demonstrates how to add fields to the sidebar of an Avo resource using the `sidebar` block. It defines a `UserResource` class and adds `email` and `active` fields to the sidebar, configuring their display properties like `as_avatar` and `only_on`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resource-sidebar.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserResource < Avo::BaseResource\n  field :id, as: :id, link_to_resource: true\n  field :first_name, as: :text, placeholder: \"John\"\n  field :last_name, as: :text, placeholder: \"Doe\"\n\n  sidebar do\n    field :email, as: :gravatar, link_to_resource: true, as_avatar: :circle, only_on: :show\n    field :active, as: :boolean, name: \"Is active\", only_on: :show\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Avo Pagination for REST API Data in Ruby\nDESCRIPTION: Overrides default Avo pagination methods (`pagy_get_items`, `pagy_get_vars`) within the `Avo::AgingOrdersController`. This customization enables pagination for data fetched from a REST API via a custom collection object (likely the `LazyLoader`). `pagy_get_items` retrieves the items from the collection, while `pagy_get_vars` sets pagination variables like total count and current page, adapting Pagy to the custom data source.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rest-api-integration.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Avo\n  class AgingOrdersController < Avo::ResourcesController\n    def pagy_get_items(collection, _pagy)\n      collection.all.items\n    end\n\n    def pagy_get_vars(collection, vars)\n      collection.where(page: page, size: per_page)\n\n      vars[:count] = collection.all.count\n      vars[:page] = params[:page]\n      vars\n    end\n\n    private\n\n    def per_page\n      params[:per_page] || Avo.configuration.per_page\n    end\n\n    def page\n      params[:page]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Avo TextFilter (Ruby)\nDESCRIPTION: Defines an Avo `TextFilter` named \"Name filter\". The `apply` method implements the filtering logic, querying the database for records where the `name` attribute matches the provided `value` using a case-insensitive partial match (LIKE query). The input `value` is expected to be a string.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::Name < Avo::Filters::TextFilter\n  self.name = \"Name filter\"\n  self.button_label = \"Filter by name\"\n\n  # `value` comes as text\n  # Eg: 'avo'\n  def apply(request, query, value)\n    query.where('LOWER(name) LIKE ?', \"%#{value}%\")\n  end\n\n  # def default\n  #   'avo'\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering Association Attach Modal Records in Ruby\nDESCRIPTION: This snippet shows how to use `attach_scope` for associations like `has_many` or `has_and_belongs_to_many` in Avo. The block filters the records available in the Attach modal, ensuring only records not already associated with the `parent` record are shown. It accesses the `parent` object's ID to exclude already associated members from the `query` using a `where.not` clause.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/associations_attach_scope_option_common.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :members,\n  as: :{{ $frontmatter.field_type }},\n  attach_scope: -> { query.where.not(team_id: parent.id) }\n```\n\n----------------------------------------\n\nTITLE: Inheriting Association Policies Automatically (Ruby)\nDESCRIPTION: Shows how to use the `inherit_association_from_policy` helper from `Avo::Pro::Concerns::PolicyHelpers` to automatically generate standard association policy methods (create, edit, show, etc.) based on another resource's policy. Requires including the `PolicyHelpers` concern in the `ApplicationPolicy`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\ninherit_association_from_policy :comments, CommentPolicy\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Field Associations using for_attribute in Ruby-Vue\nDESCRIPTION: This snippet demonstrates how to declare two fields, 'reviews' and 'special_reviews', in a resource using Ruby-Vue syntax. The 'special_reviews' field uses the for_attribute option to associate with the 'reviews' relationship but applies a custom scope via a lambda, enabling differentiation of association logic within the same resource. Dependencies include a Ruby on Rails model with corresponding associations, the Ruby-Vue framework, and correctly defined field types in frontmatter. Both fields expect a valid field type property, and the code assumes the presence of a 'query.special_reviews' scope handler.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/association.md#_snippet_0\n\nLANGUAGE: ruby-vue\nCODE:\n```\nfield :reviews,\n  as: :{{ $frontmatter.field_type }}\n\nfield :special_reviews,\n  as: :{{ $frontmatter.field_type }},\n  for_attribute: :reviews,\n  scope: -> { query.special_reviews }\n```\n\n----------------------------------------\n\nTITLE: Defining Textarea Field in Avo (Ruby)\nDESCRIPTION: This snippet defines a `textarea` field named `:body` using the `field` method in the Avo framework.  This creates a textarea element in the admin panel. It requires the Avo gem to be installed and configured in your Rails application. The output will be a textarea element displayed within your admin panel interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/textarea.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :textarea\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit Authorization - Ruby\nDESCRIPTION: The code snippet demonstrates how to configure explicit authorization in an Avo application. It uses `config.explicit_authorization = true` to deny access when policy classes or methods are missing, enhancing security by ensuring actions without explicit authorization are denied by default. You can set it to `false` to allow access if policies are missing, or set a `Proc` for custom logic.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  # Set to true to deny access when policies or methods are missing\n  # Set to false to allow access when policies or methods are missing\n  config.explicit_authorization = true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring explicit_authorization in Avo\nDESCRIPTION: Demonstrates how to configure the explicit_authorization setting in Avo to control how missing policy classes or methods are handled.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  # Set to true to deny access when policies or methods are missing\n  # Set to false to allow access when policies or methods are missing\n  config.explicit_authorization = true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Menu with Various Dashboard, Resources, and Tools Items\nDESCRIPTION: This snippet expands on menu customization by including dashboards, different resource groupings, and tools within the `main_menu`. It demonstrates using `section`, `group`, `dashboard`, `resource`, and `all_tools` helpers for menu organization. It also includes a `profile_menu` configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    section I18n.t(\"avo.dashboards\"), icon: \"dashboards\" do\n      dashboard :dashy, visible: -> { true }\n      dashboard :sales, visible: -> { true }\n\n      group \"All dashboards\", visible: false do\n        all_dashboards\n      end\n    end\n\n    section \"Resources\", icon: \"heroicons/outline/academic-cap\" do\n      group \"Academia\" do\n        resource :course\n        resource :course_link\n      end\n\n      group \"Blog\" do\n        resource :posts\n        resource :comments\n      end\n\n      group \"Other\" do\n        resource :fish\n      end\n    end\n\n    section \"Tools\", icon: \"heroicons/outline/finger-print\" do\n      all_tools\n    end\n\n    group do\n      link_to \"Avo\", path: \"https://avohq.io\"\n      link_to \"Google\", path: \"https://google.com\", target: :_blank\n    end\n  }\n  config.profile_menu = -> {\n    link_to \"Profile\", path: \"/profile\", icon: \"user-circle\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Scoping BelongsTo Association in AvoHQ (Ruby)\nDESCRIPTION: Configures a `belongs_to` field (`:user`) in an AvoHQ resource to only display records that match the `approved` scope applied to the `query` object. This lambda block runs within AvoHQ's `ExecutionContext`, providing access to the `query` object representing the associated model's query builder.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/associations_scope_option_common.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :user,\n  as: :belongs_to,\n  scope: -> { query.approved }\n```\n\n----------------------------------------\n\nTITLE: Authorizing Visibility of Avo Menu Items in Ruby\nDESCRIPTION: Demonstrates usage of the authorize helper within the visible block of menu items to restrict visibility based on user permissions. It invokes an authorization method (index? here) on a policy class (TeamPolicy) using the current user and resource class, optionally preventing exceptions on failure.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.main_menu = -> {\n    resource :team, visible: -> {\n      # authorize current_user, THE_RESOURCE_MODEL, THE_POLICY_METHOD, raise_exception: false\n      authorize current_user, Team, \"index?\", raise_exception: false\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Translation Key in Avo Ruby\nDESCRIPTION: Configures an Avo resource to use a specific key for localization. The `self.translation_key` class attribute links the resource to a corresponding entry in locale files. This changes the resource's label throughout the Avo interface, including titles and navigation links. Requires a YAML locale file with a matching resource translation key.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/i18n.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  self.title = :name\n  self.translation_key = 'avo.resource_translations.user'\nend\n```\n\n----------------------------------------\n\nTITLE: Format Tags Using Custom Function in Ruby\nDESCRIPTION: Demonstrates the newer format_using option for customizing tag display when storing IDs as values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  fetch_values_from: \"/avo/resources/skills/skills_for_user\",\n  format_using: -> {\n    Skill.find(value).map do |skill|\n      {\n        value: skill.id,\n        label: skill.name\n      }\n    end\n  }\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Hidden vs. BelongsTo Fields in Avo (Ruby)\nDESCRIPTION: Illustrates conditionally rendering fields based on user permissions defined in the context. If the `current_user` is an admin (`context[:current_user].admin?`), a visible `belongs_to` field for `user` is shown using `visible: -> (resource:) { context[:current_user].admin? }`. Otherwise, a hidden `user_id` field is rendered with the `current_user.id` as the default value, controlled by `visible: -> (resource:) { !context[:current_user].admin? }`. This prevents overriding the user selection when the `belongs_to` field is visible.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/hidden.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# If the current_user is a admin \n# 1. Allow them to see and select a user.\n# 2. Remove the user_id field to prevent user_id it from overriding the user selection.\n# Otherwise set the user_id to the current user and hide the field.\nfield :user, as: :belongs_to, visible: -> (resource:) { context[:current_user].admin? }\nfield :user_id, as: :hidden, default: -> { current_user.id }, visible: -> (resource:) { !context[:current_user].admin? }\n```\n\n----------------------------------------\n\nTITLE: Formatting Avo Field Values Conditionally (Ruby)\nDESCRIPTION: Demonstrates using the `format_using` block to apply custom formatting to a field's value across all views. This example conditionally displays emojis ('👍'/'👎') for a boolean `:is_writer` field on display views, while showing the raw value on form views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nfield :is_writer, as: :text, format_using: -> {\n  if view.form?\n    value\n  else\n    value.present? ? '👍' : '👎'\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Search for a Resource\nDESCRIPTION: Demonstrates how to enable search functionality for a resource by configuring the search class attribute with a basic Ransack query.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(name_eq: params[:q]).result(distinct: false) }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Avo Field Editing and Submission (Ruby)\nDESCRIPTION: Explains how `disabled: true` renders a field as non-editable on form views (New/Edit). This prevents users from modifying the value and excludes the field's value from being submitted during updates or creations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, disabled: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Avo Media Library in Ruby\nDESCRIPTION: This Ruby snippet enables the Media Library feature in Avo by setting the 'enabled' configuration to true within the Avo::MediaLibrary configuration block. The feature is disabled by default and must be explicitly enabled. Place this code in your config/initializers/avo.rb file; ensure that the Avo::MediaLibrary constant is defined. When enabled, this exposes asset management capabilities for your application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/media-library.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nif defined?(Avo::MediaLibrary)\n  Avo::MediaLibrary.configure do |config|\n    config.enabled = true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example Hash for Radio Field Options (Ruby)\nDESCRIPTION: This code snippet provides an example of how to define options for an Avo radio field using a hash. Each key-value pair represents a selectable option in the radio button. The keys are used as the persistent values, and the values are displayed as labels to the user. The output is a hash used for setting the options of the radio button field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/radio.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\noptions: {\n  admin: \"Administrator\",\n  manager: \"Manager\",\n  writer: \"Writer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Tools Routes for Avo and Rails\nDESCRIPTION: This code configures the routes for custom Avo tools, ensuring they are correctly mounted within the Avo engine. By moving the routes into the Avo engine, the application can properly handle the account identifier in the URL helpers, which is essential for multitenancy.  Dependencies: The Avo framework must be installed and configured, and the `mount_avo` method needs to be available.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/multitenancy.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  scope :avo do\n    get \"custom_page\", to: \"avo/tools#custom_page\"\n  end\n\n  devise_for :users\n\n  # Your routes\n\n  authenticate :user, -> user { user.admin? } do\n    mount_avo\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  devise_for :users\n\n  # Your routes\n\n  authenticate :user, -> user { user.admin? } do\n    mount_avo\n  end\nend\n\n# Move Avo custom tools routes to Avo engine\nif defined? ::Avo\n  Avo::Engine.routes.draw do\n    # make sure you don't add the `avo/` prefix to the controller below\n    get 'custom_page', to: \"tools#custom_page\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring User Resource in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates a more complex example of configuring a user resource in Avo. It declares fields for user-related attributes, including `id`, `first_name`, `last_name`, `email`, `active`, `cv`, and `is_admin?`.  It also shows how to conditionally include the `cv` field based on the current user's admin status.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id\n    field :first_name, as: :text\n    field :last_name, as: :text\n    field :email, as: :text\n    field :active, as: :boolean\n    field :cv, as: :file\n    field :is_admin?, as: :boolean\n  end\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id\n    field :first_name, as: :text\n    field :last_name, as: :text\n    field :email, as: :text\n    field :is_admin?, as: :boolean\n    field :active, as: :boolean\n\n    if current_user.is_admin?\n      field :cv, as: :file\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Sort Direction in Avo Resource\nDESCRIPTION: This code demonstrates how to customize the default sort direction in the Avo resource using `self.default_sort_direction`. This sets the sort order to either `:desc` (descending) or `:asc` (ascending). By default, the order is `:desc` using the `default_sort_column`\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Task < Avo::BaseResource\n  self.default_sort_column = :position\n  self.default_sort_direction = :asc\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant Context via Controller Concern for Route-Based Tenancy in Ruby\nDESCRIPTION: The following Ruby code demonstrates setting up a controller concern to manage tenant context by intercepting requests. It uses `prepend_before_action :set_tenant` to run a method before every action, which sets `Avo::Current.tenant_id` and `Avo::Current.tenant` based on the `tenant_id` parameter in the URL. This concern is included into `Avo::ApplicationController` through Rails' configuration to ensure tenant scoping for all Avo actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/multitenancy.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  # configuration values\nend\n\nRails.configuration.to_prepare do\n  Avo::ApplicationController.include Multitenancy\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Multitenancy\n  extend ActiveSupport::Concern\n\n  included do\n    prepend_before_action :set_tenant\n  end\n\n  def set_tenant\n    Avo::Current.tenant_id = params[:tenant_id]\n    Avo::Current.tenant = Account.find params[:tenant_id]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Providing Dynamic Filter Data in Model (Ruby)\nDESCRIPTION: Defines class methods on the `Course` model (`countries` and `cities`) that serve as data sources for dynamic Avo filters. `countries` returns a list of country names, and `cities` returns a hash where keys are countries and values are arrays of associated city names, providing the necessary data for dependent filter options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/course.rb\nclass Course < ApplicationRecord\n  def self.countries\n    [\"USA\", \"Japan\", \"Spain\", \"Thailand\"]\n  end\n\n  def self.cities\n    {\n      USA: [\"New York\", \"Los Angeles\", \"San Francisco\", \"Boston\", \"Philadelphia\"],\n      Japan: [\"Tokyo\", \"Osaka\", \"Kyoto\", \"Hiroshima\", \"Yokohama\", \"Nagoya\", \"Kobe\"],\n      Spain: [\"Madrid\", \"Valencia\", \"Barcelona\"],\n      Thailand: [\"Chiang Mai\", \"Bangkok\", \"Phuket\"]\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Getter and Setter Methods for Non-existing Model Fields\nDESCRIPTION: Ruby code snippet demonstrating how to implement getter and setter methods for custom fields that don't have corresponding attributes in the model, ensuring proper rendering in Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n  def custom_field\n  end\n\n  def custom_field=(value)\n  end\n```\n\n----------------------------------------\n\nTITLE: Installing Money Field and money-rails Gems in Ruby\nDESCRIPTION: This snippet shows the necessary Gemfile entries to install the avo-money_field and money-rails gems. These dependencies are required to add money field support in Avo, including monetization capabilities at the model level.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/money.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\n\ngem \"avo-money_field\"\ngem \"money-rails\", \"~> 1.12\"\n```\n\n----------------------------------------\n\nTITLE: Enforcing Dashboard Authorization by Role in Avo Using Ruby\nDESCRIPTION: Defines custom authorization logic for a dashboard with self.authorize, allowing only admins (or any arbitrary condition) to access the dashboard. The block has access to current_user, params, request, context, and view_context. Inputs are user and request context; output is a boolean for permission.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dashboards.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::Dashy < Avo::Dashboards::BaseDashboard\n  self.id = 'dashy'\n  self.authorize = -> do\n    # You have access to current_user, params, request, context, adn view_context.\n    current_user.is_admin?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Cards to Avo Resource\nDESCRIPTION: This code snippet shows how to add cards to an Avo resource using the `def cards` method. It adds two `Avo::Cards::ExampleMetric` cards and one `Avo::Cards::ExampleAreaChart` card, configuring each with specific options like `cols`, `label`, `description`, and `arguments`. One card is conditionally rendered based on whether the current view is a form.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id\n    field :name, as: :text\n    field :email, as: :text\n    field :roles, as: :boolean_group, options: {admin: \"Administrator\", manager: \"Manager\", writer: \"Writer\"}\n  end\n\n  def cards\n    card Avo::Cards::ExampleAreaChart, cols: 3\n    card Avo::Cards::ExampleMetric, cols: 2\n    card Avo::Cards::ExampleMetric,\n      label: \"Active users metric\",\n      description: \"Count of the active users.\",\n      arguments: { active_users: true },\n      visible: -> { !resource.view.form? }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Edit View with Range Input and Dynamic Display - ERB and JavaScript\nDESCRIPTION: This ERB template renders a range input field for editing the progress bar value with attributes 'max' and 'step' from the field's options. It dynamically displays the numeric value above the slider, optionally appending a suffix. The embedded JavaScript listens to 'input' events on the range input, updating the displayed value live as the user interacts. This improves UX by providing feedback while adjusting the value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_10\n\nLANGUAGE: erb\nCODE:\n```\n<%= edit_field_wrapper field: @field, index: @index, form: @form, resource: @resource, displayed_in_modal: @displayed_in_modal do %>\n  <% if @field.display_value %>\n    <div class=\"text-center text-sm font-semibold w-full leading-none mb-1\">\n      <span class=\"js-progress-bar-value-<%= @field.id %>\"><%= @field.value %></span><%= @field.value_suffix if @field.value_suffix.present? %>\n    </div>\n  <% end %>\n  <%= @form.range_field @field.id,\n    class: 'w-full',\n    placeholder: @field.placeholder,\n    disabled: @field.readonly,\n    min: 0,\n    max: @field.max,\n    step: @field.step,\n    %>\n<% end %>\n\n<script>\n// Get the input and value elements\nvar input = document.getElementById('project_progress');\n// Scope the selector to the current field. You might have more than one progress field on the page.\nvar log = document.querySelector('.js-progress-bar-value-<%= @field.id %>');\n\n// Add an event listener for when the input is updated\ninput.addEventListener('input', updateValue);\n\n// Update the value element with the value from the input\nfunction updateValue(e) {\n  log.textContent = e.target.value;\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Avo ReleaseFish Action - Ruby\nDESCRIPTION: This code defines a custom Avo action named `ReleaseFish`. This action takes a query and fields as input. It iterates through the query and calls the `release` method on each fish object. It uses a text area to collect a message and displays a success message upon completion. Dependencies: Avo framework and Ruby.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/testing.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.name = \"Release fish\"\n  self.message = \"Are you sure you want to release this fish?\"\n\n  def fields\n    field :message, as: :textarea, help: \"Tell the fish something before releasing.\"\n  end\n\n  def handle(query:, fields:, **_)\n    query.each(&:release)\n\n    succeed \"#{query.count} fish released with message '#{fields[:message]}'.\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Unscoping Queries in Avo Index View\nDESCRIPTION: This snippet demonstrates how to unscope queries on the `Index` view in an Avo resource. This allows the removal of a `default_scope` on a model, if defined. It uses `self.index_query = -> { query.unscoped }` to achieve this.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Project < Avo::BaseResource\n  self.title = :name\n  self.index_query = -> { query.unscoped }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing HasOne Field in Ruby\nDESCRIPTION: Basic implementation of a HasOne field in Avo to display a has_one association. This allows viewing the associated record in an unfolded format, with options to attach and detach records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/has_one.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :admin, as: :has_one\n```\n\n----------------------------------------\n\nTITLE: Adding Ransack Gem Dependency\nDESCRIPTION: To use Ransack with Avo's search feature, you must add it as a dependency in your application's Gemfile. This snippet shows the required line to include the Ransack gem.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# Gemfile\ngem 'ransack'\n```\n\n----------------------------------------\n\nTITLE: Customizing Avo DateTimeFilter (Ruby)\nDESCRIPTION: Demonstrates configuring an Avo `DateTimeFilter` for time-only selection (`type = :time`, `mode = :single`). It overrides the `picker_options` method to merge custom configurations for the underlying flatpickr library and implements the `apply` method to filter records based on an exact time match using `to_char`. The input `value` will be the selected time string.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nclass Avo::Filters::StartingAt < Avo::Filters::DateTimeFilter\n  self.name = \"The starting at filter\"\n  self.button_label = \"Filter by start time\"\n  self.empty_message = \"Search by start time\"\n  self.type = :time\n  self.mode = :single\n\n  def picker_options(value)\n    super.merge({\n      minuteIncrement: 3\n    })\n  end\n\n  def apply(request, query, value)\n    query.where(\"to_char(starting_at, 'HH24:MI:SS') = ?\", value)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating TailwindCSS import path in CSS\nDESCRIPTION: This CSS snippet shows how to update the path for the TailwindCSS import in Avo. The symlink generated by the `avo:sym_link` task was renamed from `tmp/avo/base.css` to `tmp/avo/avo.base.css`. Therefore, the import statement needs to be updated in the `avo.tailwind.css` file to reflect this change.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n/* app/assets/stylesheets/avo/avo.tailwind.css */\n\n@import '../../../../tmp/avo/base.css'; // [!code --]\n@import '../../../../tmp/avo/avo.base.css'; // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Adding Account Switcher View in ERB for Session-Based Multitenancy\nDESCRIPTION: Creates a view partial rendering links to switch between user accounts (tenants) dynamically. It iterates over current_user.accounts, generating links with visual indication for the active tenant based on the session tenant ID. Links send PUT requests to a switch_account route. This snippet depends on a Rails view context with 'current_user', proper routing for 'switch_account_path', and Turbo Drive enabled for handling PUT method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/multitenancy.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<% current_user.accounts.each do |account| %>\n  <%= link_to account.name, switch_account_path(account.id), class: class_names({\"underline\": session[:tenant_id].to_s == account.id.to_s}), data: {turbo_method: :put} %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Overriding ApplicationController methods with prepended concerns in Ruby\nDESCRIPTION: This snippet shows how to override existing methods in Avo::ApplicationController by prepending a concern instead of including it. It demonstrates overriding the fill_record method while preserving the original functionality with super.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-application-controller.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/concerns/application_controller_overrides.rb\nmodule ApplicationControllerOverrides\n  extend ActiveSupport::Concern\n\n  # we use the `prepended` block instead of `included`\n  prepended do\n    before_action :some_hook\n  end\n\n  def some_hook\n    # your logic here\n  end\n\n  def fill_record\n    # do some logic here\n    super\n  end\nend\n\n# configuration/initializers/avo.rb\nRails.configuration.to_prepare do\n  # we will prepend instead of include\n  Avo::ApplicationController.prepend ApplicationControllerOverrides\nend\n```\n\n----------------------------------------\n\nTITLE: Closing Suggestions Dropdown on Select in Tags Field - Ruby\nDESCRIPTION: This snippet enables the suggestions dropdown to close after a user selects a tag by setting close_on_select to true. It enhances user experience by minimizing manual actions. Dependencies are Avo and Post model suggestions. The field is configured with a lambda for suggestions. Inputs include user click events; output is the automatic closing of dropdown.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nfield :items,\n  as: :tags,\n  suggestions: -> { Post.tags_suggestions },\n  close_on_select: true\n\n```\n\n----------------------------------------\n\nTITLE: Configure Persistent UI State in Avo (Ruby)\nDESCRIPTION: This configuration enables persistence of UI state such as pagination and static filters across user interactions. It sets the `:driver` for persistence to `:session` in the `avo.rb` initializer.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.persistence = {\n    driver: :session\n  }\n\n  # Or with a dynamic block\n\n  config.persistence = -> do\n    {\n      driver: :session\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Date Field with Custom Format in Ruby\nDESCRIPTION: This Ruby code snippet defines a date field called `birthday` with specific display and input configurations, including formatting style, first day of week, placeholder text, and date picker options. It sets the display format for index and show views using `format`, and input format for edit and new views using `picker_format`. Dependencies include the underlying framework and date handling libraries.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/date.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :birthday,\n  as: :date,\n  first_day_of_week: 1,\n  picker_format: \"F J Y\",\n  format: \"yyyy-LL-dd\",\n  placeholder: \"Feb 24th 1955\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Ranges for an Avo Metric Card in Ruby\nDESCRIPTION: Configures the available date ranges for querying data in the `UsersMetric` card. It sets the `initial_range` (default range, e.g., 30 days) and defines a hash of `ranges` mapping user-friendly labels to values (days as integers or specific string identifiers like 'TODAY', 'MTD', 'QTD', 'YTD', 'ALL').\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.label = 'Users count'\n  self.initial_range = 30\n  self.ranges = {\n    \"7 days\": 7,\n    \"30 days\": 30,\n    \"60 days\": 60,\n    \"365 days\": 365,\n    Today: \"TODAY\",\n    \"Month to date\": \"MTD\",\n    \"Quarter to date\": \"QTD\",\n    \"Year to date\": \"YTD\",\n    All: \"ALL\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Action in Ruby Avo\nDESCRIPTION: Defines a standalone action in Avo that is not necessarily tied to any model. It is marked by `self.standalone = true` and implements a `handle` method that takes keyword arguments like fields, current_user, and resource. This pattern allows the action to be executed independently, useful for global or utility actions. Requires inheriting from Avo::BaseAction.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass DummyAction < Avo::BaseAction\n  self.name = \"Dummy action\"\n  self.standalone = true\n\n  def handle(**args)\n    fields, current_user, resource = args.values_at(:fields, :current_user, :resource)\n\n    # Do something here\n\n    succeed 'Yup'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying a pre-release version in Gemfile\nDESCRIPTION: Shows how to specify a pre-release version of the Avo gem in your `Gemfile`. This allows you to test pre-release features before they are pushed to the main branch. Replace `1.19.1.pre.1` with the desired pre-release version.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/faq.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\n\n# ... other gems\n\ngem 'avo', '1.19.1.pre.1'\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow to Use Gem Server Token in YAML\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow that sets the BUNDLE_PACKAGER__DEV environment variable from repository secrets. It enables authentication to the private gem server during CI job runs by exposing the stored Gem Server Token as an environment variable. Key input includes the repository secret named BUNDLE_PACKAGER__DEV. The job runs on Ubuntu and includes the environment for all steps within the job context. This ensures secure authentication in automated pipeline environments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/gem-server-authentication.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Tests\n\non:\n  pull_request:\n    branches:\n      - main\n\nenv:\n  BUNDLE_PACKAGER__DEV: ${{secrets.BUNDLE_PACKAGER__DEV}}\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      # Testing and deployment steps\n```\n\n----------------------------------------\n\nTITLE: Implementing policy! method with Pundit\nDESCRIPTION: Implements the policy! method that receives user and record parameters and returns the policy or raises an error if no policy is found.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\ndef policy!(user, record)\n  Pundit.policy!(user, record)\nrescue Pundit::NotDefinedError => error\n  raise NoPolicyError.new error.message\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Form Inputs in an Avo Resource Tool Partial Using ERB\nDESCRIPTION: Shows an ERB partial template for the FishInformation resource tool containing custom inputs embedded in the resource's form. Uses conditional rendering based on the presence of a form object, text fields for single and multiple values, and nested fields_for to handle nested attributes with hashes. Fields include fish_type, properties (multi-value), and nested information inputs with explanations for which parameters are passed to the model. Demonstrates how to integrate custom UI inputs inside Avo's resource tool partials with basic styling.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-tools.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<!-- _fish_information.html.erb -->\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new(title: @resource.model.name) do |c| %>\n    <% c.with_tools do %>\n      <%= a_link('/admin', icon: 'heroicons/solid/academic-cap', style: :primary) do %>\n        Primary\n      <% end %>\n    <% end %>\n\n    <% c.with_body do %>\n      <div class=\"flex flex-col p-4 min-h-24\">\n        <div class=\"space-y-4\">\n          <% if form.present? %>\n            <%= form.label :fish_type %>\n            <%= form.text_field :fish_type, value: 'default type of fish', class: input_classes %>\n            <br>\n\n            <%= form.label :properties %>\n            <%= form.text_field :properties, multiple: true, value: 'property 1', class: input_classes %>\n            <%= form.text_field :properties, multiple: true, value: 'property 2', class: input_classes %>\n            <br>\n\n            <% form.fields_for :information do |information_form| %>\n              <%= form.label :information_name %>\n              <%= information_form.text_field :name, value: 'information name', class: input_classes %>\n              <div class=\"text-gray-600 mt-2 text-sm\">This is going to be passed to the model</div>\n              <br>\n              <%= form.label :information_history %>\n              <%= information_form.text_field :history, value: 'information history', class: input_classes %>\n              <div class=\"text-gray-600 mt-2 text-sm\">This is going to be passed to the model</div>\n              <br>\n              <%= form.label :information_age %>\n              <%= information_form.text_field :age, value: 'information age', class: input_classes %>\n              <div class=\"text-gray-600 mt-2 text-sm\">This is NOT going to be passed to the model</div>\n            <% end %>\n          <% end %>\n        </div>\n      </div>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining ActiveRecord Associations for Application and Client Models - Ruby\nDESCRIPTION: Defines two ActiveRecord models, Application and Client, with a belongs_to and has_many association respectively. Application belongs to Client, and Client has many Applications, establishing a one-to-many relationship necessary for querying associated records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/application.rb\nclass Application < ApplicationRecord\n  belongs_to :client\nend\n\n# app/models/client.rb\nclass Client < ApplicationRecord\n  has_many :applications\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Avo::ApplicationController Methods Using Ruby Concern in Ruby\nDESCRIPTION: Illustrates how to override existing methods and add hooks in Avo::ApplicationController safely by defining a Ruby concern. Instead of including, the concern is prepended to allow overriding controller methods such as 'fill_record' and adding before_action hooks executed early in the lifecycle. The example also uses the 'prepended' callback to hook behavior and delegates to 'super' to preserve base functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-application-controller.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/concerns/application_controller_overrides.rb\nmodule ApplicationControllerOverrides\n  extend ActiveSupport::Concern\n\n  # we use the `prepended` block instead of `included`\n  prepended do\n    before_action :some_hook\n  end\n\n  def some_hook\n    # your logic here\n  end\n\n  def fill_record\n    # do some logic here\n    super\n  end\nend\n\n# configuration/initializers/avo.rb\nRails.configuration.to_prepare do\n  # we will prepend instead of include\n  Avo::ApplicationController.prepend ApplicationControllerOverrides\nend\n```\n\n----------------------------------------\n\nTITLE: Configuration of Stimulus controller in Avo tool\nDESCRIPTION: The provided snippets demonstrate how to integrate and configure Stimulus JS controllers within the Avo tool, illustrating the steps needed to register a controller in the application's Stimulus instance and then to trigger it from an Avo tool or custom view.  This includes defining the controller file, importing it in the `avo.custom.js` entrypoint, registering it with the Stimulus application, and finally using the controller in an Avo view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app/javascript/controllers/sample_controller.js\nimport { Controller } from \"@hotwired/stimulus\";\n\nexport default class extends Controller {\n  connect() {\n    console.log(\"Hey from sample controller 👋\");\n  }\n}\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app/javascript/avo.custom.js\nimport SampleController from \"controllers/sample_controller\";\n\n// Hook into the stimulus instance provided by Avo\nconst application = window.Stimulus;\napplication.register(\"course-resource\", SampleController);\n\n// eslint-disable-next-line no-console\nconsole.log(\"Hi from Avo custom JS 👋\");\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n<!-- app/views/avo/_sample_tool.html.erb -->\n<div data-controller=\"sample\">\n  <!-- content here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configure Avo to use Pundit\nDESCRIPTION: This snippet configures Avo to use Pundit for authorization. It sets the `authorization_client` configuration option to `:pundit` within the `config/initializers/avo.rb` file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Example of enabling authorization client in Avo configuration\nconfig.authorization_client = :pundit\n```\n\n----------------------------------------\n\nTITLE: Implementing React Method for Dynamic Filter Behavior in Ruby\nDESCRIPTION: Shows the implementation of the react method that runs after all filters are applied. This method allows for dynamic behavior where selecting a country automatically selects its first city when no cities are explicitly selected.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ndef react\n  # Check if the user selected a country\n  if applied_filters[\"Avo::Filters::CourseCountryFilter\"].present? && applied_filters[\"Avo::Filters::CourseCityFilter\"].blank?\n    # Get the selected countries, get their cities, and select the first one.\n    selected_countries = applied_filters[\"Avo::Filters::CourseCountryFilter\"]\n      .select do |name, selected|\n        selected\n      end\n\n    # Get the first city\n    cities = cities_for_countries(selected_countries.keys)\n    first_city = cities.first.first\n\n    # Return the first city selected as a Hash\n    [[first_city, true]].to_h\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Avo View Using 'Ask' Style\nDESCRIPTION: This code snippet demonstrates how to check the current Avo view using the 'ask' style, utilizing methods like `view.show?`, `view.index?`, `view.edit?`, and `view.new?` to determine the current view. The `view` object is an instance of the `Avo::ViewInquirer` class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/views.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nif view.show?\n  # Code for the \"show\" view\nelsif view.index?\n  # Code for the \"index\" view\nelsif view.edit?\n  # Code for the \"edit\" view\nelsif view.new?\n  # Code for the \"new\" view\nelsif view.form?\n  # Code for the \"new\" or \"edit\" views\nelsif view.display?\n  # Code for the \"index or \"show\" views\nend\n```\n\n----------------------------------------\n\nTITLE: Adding All Tools Avo Menu Ruby\nDESCRIPTION: Demonstrates using the `all_tools` helper to automatically include all registered Avo tools in a menu group. This helper simplifies adding all available tools without listing them individually.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"App\", icon: \"heroicons/outline/beaker\" do\n  group \"All tools\", icon: \"tools\" do\n    all_tools\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Avo Action Confirmation Message (Ruby)\nDESCRIPTION: Specifies the message shown in the confirmation modal before an action runs. Supports a static string or a dynamic block that leverages the execution context (`resource.record`) for a more specific message.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/customization.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.message = \"Are you sure you want to release the fish?\"\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.message = -> {\n    if resource.record.present?\n      \"Are you sure you want to release the #{resource.record.name}?\"\n    else\n      \"Are you sure you want to release the fish?\"\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Reloadable Feature (Ruby-Vue)\nDESCRIPTION: This snippet shows how to enable the reloadable feature dynamically using a block. The `reloadable` option accepts a block, in which conditions can be specified to determine when the reload icon should be visible. This uses the `current_user` method to check if the user is an admin.  Dependencies: Requires the Avo framework and access to the `current_user` method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/reloadable.md#_snippet_1\n\nLANGUAGE: ruby-vue\nCODE:\n```\nfield :reviews, as: :{{ $frontmatter.field_type }},\n  reloadable: -> {\n    current_user.is_admin?\n  }\n```\n\n----------------------------------------\n\nTITLE: Configure Tags Field for Array Fields - Ruby\nDESCRIPTION: Configures an `items` field in Avo to function as tags using an array field provided by Rails. This example shows how to define custom setter and getter methods for array fields in the model. No specific gem dependencies.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  def fields\n    field :items, as: :tags\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  def items=(items)\n    puts [\"items->\", items].inspect\n  end\n\n  def items\n    %w(1 2 3 4)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Query with filterable Option\nDESCRIPTION: This snippet demonstrates how to customize a filter's query using the `query` option within the `filterable` option. It defines a lambda function that modifies the query based on the filter's condition. This allows for case-sensitive or case-insensitive filtering based on the provided input.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nfield :first_name,\n  as: :text,\n  filterable: {\n    # ...\n    query: -> {\n      case filter_param.condition.to_sym\n      when :case_sensitive\n        query.where(\"name = ?\", filter_param.value)\n      when :not_case_sensitive\n        query.where(\"LOWER(name) = ?\", filter_param.value.downcase)\n      end\n    }\n    # ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization in Avo Menu Items with Ruby\nDESCRIPTION: Demonstrates how to use the 'authorize' helper in a menu configuration to control the visibility of a menu item based on user permissions. This example authorizes a Team resource using the 'index?' method from the TeamPolicy class without raising exceptions on failure.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.main_menu = -> {\n    resource :team, visible: -> {\n      # authorize current_user, THE_RESOURCE_MODEL, THE_POLICY_METHOD, raise_exception: false\n      authorize current_user, Team, \"index?\", raise_exception: false\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Menu Section Avo Menu Ruby\nDESCRIPTION: Describes how to define a major category or section in the Avo menu using the `section` helper. It shows setting the section's title and icon (using Heroicons syntax) and nesting other menu items within its block to organize the sidebar structure.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"Resources\", icon: \"heroicons/outline/academic-cap\" do\n  resource :course\n  resource :course_link\nend\n```\n\n----------------------------------------\n\nTITLE: Using Computed External Image URL in Avo Field (Ruby)\nDESCRIPTION: Defines an Avo resource field named `:logo` as an `external_image` with a computed value. The block calculates the image URL dynamically, using `record.url` and handling potential parsing errors. This is useful for generating URLs based on other record attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/external_image.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :logo, as: :external_image do\n  \"//logo.clearbit.com/#{URI.parse(record.url).host}?size=180\"\nrescue\n  nil\nend\n```\n\n----------------------------------------\n\nTITLE: Using the `silent` Response with Redirection in Avo Actions (Ruby)\nDESCRIPTION: Demonstrates how to suppress the default notification message after an Avo action completes by calling the `silent` method. This is often used in conjunction with `redirect_to` to navigate the user to a new page without displaying any feedback alerts.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  def handle(**args)\n    redirect_to \"/admin/some-tool\"\n    silent\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Avo Routes Within Tenant Scope in Ruby on Rails\nDESCRIPTION: This Ruby snippet shows how to define routing in a Rails application to scope Avo routes under a dynamic `tenant_id` path segment. By using `scope \"/:tenant_id\"`, the application prefixes all Avo routes with the tenant identifier, enabling route-based tenancy where tenants are specified in URLs. This requires that subsequent request handling extracts and uses this tenant ID to scope queries and logic.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/multitenancy.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  scope \"/:tenant_id\" do\n    mount_avo\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking the Current Avo View - Multiple ways\nDESCRIPTION: This code snippet demonstrates multiple ways to check the current Avo view in Ruby, including comparing against a string or symbol, using the `view.edit?` method, and checking if the view is in a collection of views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/views.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nview == \"edit\" # Check against a string\nview == :edit # Check against a symbol\nview.edit? # Ask if it's a view\nview.form? # Ask if it's a collection of views\nview.in? [:edit, :new] # Check against an array of symbols\nview.in? [\"edit\", \"new\"] # Check against an array of strings\n```\n\n----------------------------------------\n\nTITLE: Controlling Avo Action Visibility with a Lambda in Ruby\nDESCRIPTION: Defines a standalone Avo action with visibility controlled by a lambda assigned to `self.visible`. The lambda receives a `view` context variable and returns a boolean to toggle visibility on specific views (e.g., only visible on the index view). This allows context-aware action display customization in the UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass DummyAction < Avo::BaseAction\n  self.name = \"Dummy action\"\n  self.standalone = true\n  self.visible = -> { view == :index }\n\n  def handle(**args)\n    fields, current_user, resource = args.values_at(:fields, :current_user, :resource)\n\n    # Do something here\n\n    succeed 'Yup'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Displayed Tags and Values with format_using - Ruby\nDESCRIPTION: This snippet uses the format_using option to transform stored tag values into label-value pairs for display. A lambda retrieves Skill records by ID, outputting an array of hashes with value and label. Inputs are value (ID list), resource, and record. Requires Skill model and works on Avo tags fields with backend lookups. Supersedes fetch_labels.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  fetch_values_from: \"/avo/resources/skills/skills_for_user\",\n  format_using: -> {\n    Skill.find(value).map do |skill|\n      {\n        value: skill.id,\n        label: skill.name\n      }\n    end\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Triggering File Downloads from Avo Actions (Ruby)\nDESCRIPTION: Explains how to initiate a file download from an Avo action using the `download` response. It requires setting `self.may_download_file = true` within the action class. The `download` method takes the file content (e.g., `report_data`) and the desired `filename` as arguments. The example shows generating CSV data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/download_file.rb\nclass Avo::Actions::DownloadFile < Avo::BaseAction\n  self.name = \"Download file\"\n  self.may_download_file = true\n\ndef handle(query:, **args)\n    filename = \"projects.csv\"\n    report_data = []\n\n    query.each do |project|\n      report_data << project.generate_report_data\n    end\n\n    succeed 'Done!'\n\n    if report_data.present? and filename.present?\n      download report_data, filename\n    end\n  end\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/project.rb\n```\n\n----------------------------------------\n\nTITLE: Creating Heading Field with Ruby\nDESCRIPTION: This Ruby code snippet defines a heading field labeled \"User information\". It uses the `heading` method, which likely comes from a framework or library specific to the project. The purpose of this snippet is to add a visual separation layer in the user interface, likely on the 'Show', 'Edit', or 'Create' views. No database column association is intended.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/heading.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nheading \"User information\"\n```\n\n----------------------------------------\n\nTITLE: Limiting Visible Suggestions for Tags Field - Ruby\nDESCRIPTION: This code restricts the number of tag suggestions shown at once using suggestions_max_items. It is useful for improving UX when suggestion lists are long. The configuration requires the Avo tags field and a value for suggestions_max_items. Inputs are tags and configuration options; output is a UI limited to the specified number of visible suggestions. Requires only standard Avo setup.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  suggestions: %w(one two three),\n  suggestions_max_items: 2\n\n```\n\n----------------------------------------\n\nTITLE: Defining a custom scope class in Ruby for Admins role\nDESCRIPTION: This Ruby class defines an 'Admins' scope for filtering users with admin roles in the database. It sets display name, tooltip description, associated model scope, and visibility control, inheriting from Avo's BaseScope to integrate with the Avo admin interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/scopes.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/scopes/admins.rb\nclass Avo::Scopes::Admins < Avo::Advanced::Scopes::BaseScope\n  self.name = \"Admins\" # Name displayed on the scopes bar\n  self.description = \"Admins only\" # This is the tooltip value\n  self.scope = :admins # valid scope on the model you're using it\n  self.visible = -> { true } # control the visibility\nend\n\n# app/models/user.rb\nclass User < ApplicationRecord\n  scope :admins, -> { where role: :admin } # This is used in the scope file above\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Pundit Policy Scope in Ruby\nDESCRIPTION: This method applies a policy scope to a given model, taking a user, model, and an optional policy class. It attempts to determine the scope from a given or auto-detected policy class using `scope_for_policy_class`. If found, the scope is applied by calling `resolve` on the scope object.  If not found, it falls back to `Pundit.policy_scope!`.  It also catches `Pundit::NotDefinedError` and raises a `NoPolicyError`. Requires the `pundit` gem.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\ndef apply_policy(user, model, policy_class: nil)\n  # Try and figure out the scope from a given policy or auto-detected one\n  scope_from_policy_class = scope_for_policy_class(policy_class)\n\n  # If we discover one use it.\n  # Else fallback to pundit.\n  if scope_from_policy_class.present?\n    scope_from_policy_class.new(user, model).resolve\n  else\n    Pundit.policy_scope!(user, model)\n  end\nrescue Pundit::NotDefinedError => error\n  raise NoPolicyError.new error.message\nend\n```\n\n----------------------------------------\n\nTITLE: Using actions_list Exclude Option in Avo Controls - Ruby\nDESCRIPTION: Demonstrates how to exclude specific actions from the 'actions_list' dropdown in Avo resource controls by passing one or more action classes to the exclude parameter. This approach removes individual actions from the default dropdown so they can be presented separately as custom action buttons. Dependencies include Avo and user-defined action classes such as DisableAccount and ExportSelection.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customizable-controls.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nactions_list exclude: DisableAccount\n# Or\nactions_list exclude: [ExportSelection, PublishPost]\n```\n\n----------------------------------------\n\nTITLE: Customizing After Create Path in Avo Controller\nDESCRIPTION: Shows how to override the after_create_path method to customize where the user is redirected after successfully creating a record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef after_create_path\n  \"/avo/resources/users\"\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Context per Request with Multitenancy Concern in Ruby\nDESCRIPTION: Defines a Rails controller concern to set current tenant information for each request in Avo's ApplicationController. It sets the tenant ID and tenant object using parameters or session data depending on tenancy strategy. This concern uses ActiveSupport::Concern with a before action to assign tenant info to Avo::Current storage. It depends on an 'Account' model representing tenants and the presence of params or session keys for tenant ID.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/multitenancy.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Multitenancy\n  extend ActiveSupport::Concern\n\n  included do\n    prepend_before_action :set_tenant\n  end\n\n  def set_tenant\n    Avo::Current.tenant_id = params[:tenant_id]\n    Avo::Current.tenant = Account.find params[:tenant_id]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Heading Field Computed Ruby\nDESCRIPTION: Defines a Heading field using a computed block to dynamically generate the text content. Note that computed headings are not rendered on form views (Edit/Create); use the `label` option for consistent rendering across all views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/heading.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :some_id, as: :heading do\n  \"user information\"\nend\n```\n\n----------------------------------------\n\nTITLE: Limiting Displayed Suggestions in Ruby\nDESCRIPTION: Shows how to limit the number of suggestions displayed at once, requiring users to narrow down their search.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  suggestions: %w(one two three),\n  suggestions_max_items: 2\n```\n\n----------------------------------------\n\nTITLE: Generating a Custom Field from Template (Bash)\nDESCRIPTION: This bash command demonstrates how to generate a new Avo custom field (`super_text`) based on an existing field (`text`).  The `--field_template text` argument ensures that the generated components for the new field will mirror the code of the original text field, allowing easy customization and extension of existing field functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ bin/rails generate avo:field super_text --field_template text\n      create  app/components/avo/fields/super_text_field\n      create  app/components/avo/fields/super_text_field/edit_component.html.erb\n      create  app/components/avo/fields/super_text_field/edit_component.rb\n      create  app/components/avo/fields/super_text_field/index_component.html.erb\n      create  app/components/avo/fields/super_text_field/index_component.rb\n      create  app/components/avo/fields/super_text_field/show_component.html.erb\n      create  app/components/avo/fields/super_text_field/show_component.rb\n      create  app/avo/fields/super_text_field.rb\n```\n\n----------------------------------------\n\nTITLE: Migrating Existing Users to Default Account Seed (Ruby)\nDESCRIPTION: Provides a Rails seed script snippet to associate existing users with a default account. It first finds or creates a specific account ('Nepal' with subdomain 'sahsantoshh') and then iterates through all existing users (using 'unscoped' to bypass tenancy) in batches to update their 'account_id' to this default account. Includes a small sleep for throttling. Requires the 'Account' model and the 'account_id' column on the 'users' table.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/acts_as_tenant_integration.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# Create default/first account where we want to associate exiting data\naccount = Account.find_or_create_by!(name: 'Nepal', subdomain: 'sahsantoshh')\n\nUser.unscoped.in_batches do |relation|\n  relation.update_all(account_id: account.id)\n  sleep(0.01) # throttle\nend\n```\n\n----------------------------------------\n\nTITLE: Integrating Avo Asset Building into Rails Deployment (Ruby)\nDESCRIPTION: This Ruby code snippet modifies the `Rakefile` to enhance the standard `assets:precompile` Rake task. It ensures that the `avo:build-assets` task is executed automatically after assets are precompiled, which is necessary when installing Avo directly from its GitHub repository instead of using the gem.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/installation.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# Rakefile\nRake::Task[\"assets:precompile\"].enhance do\n  Rake::Task[\"avo:build-assets\"].execute\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Avo on a Subdomain in Rails Routes\nDESCRIPTION: Ruby code snippet illustrating how to restrict Avo's routes to a specific subdomain ('avo') using route constraints, enabling deployment on custom hostnames or subdomains.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/installation.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nconstraint host: 'avo' do\n  mount_avo at: '/'\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Tags and Array Field Accessors in Avo Resource and Rails Model Using Ruby\nDESCRIPTION: Shows an Avo resource defining an 'items' field as tags, alongside the corresponding Post model defining custom getter and setter methods for the 'items' attribute. The setter logs incoming items to the console, while the getter returns a static array of strings, illustrating how to handle array fields with tagging in Rails models.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  def fields\n    field :items, as: :tags\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  def items=(items)\n    puts [\"items->\", items].inspect\n  end\n\n  def items\n    %w(1 2 3 4)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running the installer for Audit Logging in Rails\nDESCRIPTION: Generates necessary migrations, resources, and controllers for audit logging by executing the provided Rails generator command.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:audit_logging install\n```\n\n----------------------------------------\n\nTITLE: Adding Ransack dependency to Gemfile\nDESCRIPTION: Shows how to add Ransack as a dependency to your application, which is required for the default search functionality in Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/search.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\ngem 'ransack'\n```\n\n----------------------------------------\n\nTITLE: Customizing Index Query Scope in Avo Resource (Ruby)\nDESCRIPTION: Defines a custom query scope using `index_query` within an Avo resource (`Avo::Resources::User`) to modify how records are fetched for the Index view. This example demonstrates ordering users by `last_name` in ascending order.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.index_query = -> {\n    query.order(last_name: :asc)\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling All KeyValue field Actions in Avo Resource (Ruby)\nDESCRIPTION: This snippet shows how to use the `disabled: true` option as a shortcut to prevent all editing, adding, and deleting actions for the KeyValue field, effectively making it read-only.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/key_value.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, # The database field ID\n  as: :key_value, # The field type.\n  disabled: true # Option to disable editing keys, editing values, adding rows, and deleting rows. Defaults to false.\n```\n\n----------------------------------------\n\nTITLE: Conditional Search Query Logic for Has_Many Associations in Ruby\nDESCRIPTION: This Ruby code snippet shows how to customize search behavior in Avo based on whether the search is within a 'has_many' association. It defines a lambda that returns a query with specific ordering when 'params[:via_association]' equals 'has_many'. The code depends on the 'ransack' gem for constructing search queries and is intended for integration within Avo's resource classes for dynamic search filtering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/search_query_scope_common.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nself.search = {\n  query: -> {\n    if params[:via_association] == 'has_many'\n      query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false).order(name: :asc)\n    else\n      query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n    end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining extra_params in Ruby\nDESCRIPTION: This snippet configures the `extra_params` for the `Avo::Resources::Fish` resource, permitting the `reviews_attributes` parameters to be passed to the model. This is essential for allowing the nested form data to be correctly saved. It specifies the attributes to be permitted within the `reviews_attributes` hash, such as `:body` and `:user_id`.  It should be placed in your Avo resource definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/nested-records-when-creating.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.extra_params = [reviews_attributes: [:body, :user_id]]\n\n  # other fields actions, filters and more\n  def fields\n    field :reviews, as: :has_many\n\n    tool Avo::ResourceTools::NestedFishReviews, only_on: :new\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing AccountResource to display and manage roles\nDESCRIPTION: Modify the AccountResource to display assigned roles as tags and handle role assignment, preventing duplicate role assignments by showing only unassigned roles in the attachment form.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/rolify-integration.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass AccountResource < Avo::BaseResource\n  # ...\n\n  field :assigned_roles, as: :tags, hide_on: :forms do |model, resource, view|\n    model.roles.map {|role|role.name}\n  end\n   \n  # Only show roles that have not already been assigned to the object, because Avo does not use the add_role method, so it is possible to assign a role twice\n  field :roles, as: :has_many, attach_scope: -> { query.where.not(id: parent.roles.pluck(:id)) }\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Avo Resource with Custom Model Class Option - Bash and Ruby\nDESCRIPTION: Using the '--model-class' CLI option allows creating an Avo resource with a custom resource name associated with an existing model different from the resource's class name. For example, generating a resource named 'MiniPost' that uses the 'Post' model. The CLI command is shown, followed by the resource Ruby class overriding the 'model_class' property to map to 'Post'. This enables multiple resources backed by the same model with distinct configurations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:resource mini-post --model-class post\n```\n\n----------------------------------------\n\nTITLE: Generated Rails model command for Car with Avo resource\nDESCRIPTION: This command generates a Rails model named Car with specified attributes, along with the corresponding Avo Resource and Controller files unless skipped with the '--skip-avo-resource' flag.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resources.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nbin/rails generate model car make:string mileage:integer\n```\n\n----------------------------------------\n\nTITLE: Configuring AccountResource to display and assign roles in Avo\nDESCRIPTION: Customizes the 'AccountResource' to show assigned roles as tags and provides a 'has_many' relationship for attaching new roles. Enables role management directly within Avo's interface, facilitating role assignment and oversight.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rolify-integration.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass AccountResource < Avo::BaseResource\n  # ...\n\n  field :assigned_roles, as: :tags, hide_on: :forms do\n    record.roles.map {|role|role.name}\n  end\n\n  # Only show roles not already assigned to avoid duplication\n  field :roles, as: :has_many, attach_scope: -> { query.where.not(id: parent.roles.pluck(:id)) }\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Associating User Model with Tenant using Acts As Tenant Ruby\nDESCRIPTION: Adds a foreign key column account_id to the existing users table for tenant association, indexing it for lookup optimization. The User model declares 'acts_as_tenant :account' to scope queries and enforce tenant isolation automatically. This setup assumes existing user authentication and enables row-level multitenancy on users.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/acts_as_tenant_integration.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddAccountToUsers < ActiveRecord::Migration\n  def up\n    add_column :users, :account_id, :integer # if we have existing user set null to true then update the data using seed\n    add_index  :users, :account_id\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Authentication\nclass User < ActiveRecord::Base\n  acts_as_tenant(:account)\nend\n```\n\n----------------------------------------\n\nTITLE: Controlling Action Visibility in Ruby\nDESCRIPTION: Shows how to control action visibility on different views using the visible attribute, which accepts a boolean or a block for dynamic visibility control.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/customization.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/global_report.rb\nclass Avo::Actions::GlobalReport < Avo::BaseAction\n  self.name = \"Generate Global Report\"\n  self.standalone = true\n  self.visible = true\n\n  # Or as a block\n  self.visible = -> { view.index? }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Error on Missing Policies (Ruby)\nDESCRIPTION: Demonstrates how to set the `raise_error_on_missing_policy` configuration option within the Avo initializer to force Avo to raise an error if a resource does not have a corresponding policy class, ensuring all resources are covered by an authorization policy.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.root_path = '/avo'\n  config.app_name = 'Avocadelicious'\n  config.license_key = ENV['AVO_LICENSE_KEY']\n  config.raise_error_on_missing_policy = true\nend\n```\n\n----------------------------------------\n\nTITLE: Ejecting All Field Components for Text Field in Avo\nDESCRIPTION: Command to eject all components (index, show, edit) for the text field type. Creates the components in the application to allow for customization of text field rendering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/eject-views.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrails g avo:eject --field-components text\n```\n\n----------------------------------------\n\nTITLE: Initializing a Country Field with Display Code Option in Avo (Ruby)\nDESCRIPTION: This snippet configures a Country field in an Avo resource, specifying both its type and an option to display the country code. The 'display_code' parameter, when set to true, shows the ISO code in Index and Show views, otherwise it displays only the country name. This requires the 'countries' gem as a dependency and expects the field to be part of an Avo resource file. Inputs include the field name and options; output is a configured field in the UI. The default value for 'display_code' is false.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/country.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :country, as: :country, display_code: true\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Export to CSV Action in Avo Using Ruby\nDESCRIPTION: This Ruby snippet defines a custom action class in the Avo admin framework that allows users to export selected records into a CSV file. The action includes configurable fields that let users choose which attributes to include. It handles retrieving the selected records and dynamically generates a CSV file with the chosen attributes. Dependencies include the Rails environment and CSV library. The action provides methods to extract attributes from field selections or model records and supports error handling when no records are selected.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/export-to-csv.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::ExportCsv < Avo::BaseAction\n  self.name = \"Export CSV\"\n  self.no_confirmation = false\n  self.standalone = true\n\n  def fields\n    # Add more fields here for custom user-selected columns\n    field :id, as: :boolean\n    field :created_at, as: :boolean\n  end\n\n  def handle(records:, fields:, resource:, **args)\n    # uncomment if you want to download all the records if none was selected\n    # records = resource.model_class.all if records.blank?\n\n    return error \"No record selected\" if records.blank?\n\n    # uncomment to get all the models' attributes.\n    # attributes = get_attributes_from_record records.first\n\n    # uncomment to get some attributes\n    # attributes = get_some_attributes\n\n    attributes = get_attributes_from_fields fields\n\n    # uncomment to get all the models' attributes if none were selected\n    # attributes = get_attributes_from_record records.first if attributes.blank?\n\n    file = CSV.generate(headers: true) do |csv|\n      csv << attributes\n\n      records.each do |record|\n        csv << attributes.map do |attr|\n          record.send(attr)\n        end\n      end\n    end\n\n    download file, \"#{resource.plural_name}.csv\"\n  end\n\n  def get_attributes_from_record(record)\n    record.class.columns_hash.keys\n  end\n\n  def get_attributes_from_fields(fields)\n    fields.select { |key, value| value }.keys\n  end\n\n  def get_some_attributes\n    [\"id\", \"created_at\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Avo Boolean Filter (Ruby)\nDESCRIPTION: Illustrates how to set a default state for a Boolean filter using the optional `default` method. This method should return a hash mirroring the structure of the `options` hash, indicating which boolean choices are selected by default when the filter loads.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass FeaturedFilter < Avo::Filters::BooleanFilter\n  self.name = 'Featured status'\n\n  def apply(request, query, values)\n    return query if values['is_featured'] && values['is_unfeatured']\n\n    if values['is_featured']\n      query = query.where(is_featured: true)\n    elsif values['is_unfeatured']\n      query = query.where(is_featured: false)\n    end\n\n    query\n  end\n\n  def options\n    {\n      is_featured: \"Featured\",\n      is_unfeatured: \"Unfeatured\"\n    }\n  end\n\n  def default\n    {\n      is_featured: true\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding 'rolify' gem to Gemfile\nDESCRIPTION: Includes the 'rolify' gem in the application's Gemfile to enable role management features. Requires manual addition and installation prior to use.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rolify-integration.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ngem \"rolify\"\n```\n\n----------------------------------------\n\nTITLE: Defining HasAndBelongsToMany Association in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to define a `has_and_belongs_to_many` association. It defines a field named `:users` and configures it as a `has_and_belongs_to_many` association.  This snippet uses a field declaration within a larger context (e.g., a model or resource definition) to link users to a resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations/has_and_belongs_to_many.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :users, as: :has_and_belongs_to_many\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Links in Avo Menu\nDESCRIPTION: Shows how to create menu items linking to resources using the `resource` helper. The resource can be specified by symbol or full name, and the label and params options can be used.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nresource :posts\nresource \"Avo::Resources::Comments\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-ActiveRecord Model for Avo in Ruby\nDESCRIPTION: Defines a plain Ruby `AgingOrder` class that mimics an ActiveModel interface using includes like `ActiveModel::Model`. This allows it to be used with Avo without inheriting from ActiveRecord::Base. It defines attributes with `attr_accessor` and class methods (`column_names`, `base_class`, `all`, etc.) required by Avo and the custom data loader. The `all` method uses `HTTParty` to fetch data from an external API specified by `ENV['AGING_URL']`, handling JSON parsing.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rest-api-integration.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass AgingOrder\n  include ActiveModel::Model\n  include ActiveModel::Conversion\n  include ActiveModel::Validations\n  extend ActiveModel::Naming\n\n  attr_accessor :id, :investment_date, :folio_number, :order_submitted_at,\n                :amc_name, :scheme, :primary_investor_id, :order_type, :systematic,\n                :order_reference, :amount, :units, :age\n\n  class << self\n    def column_names\n      %i[id investment_date folio_number order_submitted_at amc_name\n         scheme primary_investor_id order_type systematic\n         order_reference amount units age]\n    end\n\n    def base_class\n      AgingOrder\n    end\n\n    def root_key\n      'data'\n    end\n\n    def count_key\n      'total_elements'\n    end\n\n    def all(query)\n      response = HTTParty.get(ENV['AGING_URL'], query: query)\n      JSON.parse(response.body)\n    end\n  end\n\n  def persisted?\n    id.present?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Location Field with Default Storage in Avo (Ruby)\nDESCRIPTION: This snippet configures a 'coordinates' field as a Location field in an Avo resource. By default, it stores the coordinates as a single database column using a comma-delimited string in the format 'latitude,longitude'. Requires the 'mapkick-rb' gem in the Gemfile and a valid MAPBOX_ACCESS_TOKEN environment variable. On display, shows an interactive map, and on edit allows direct coordinate editing in a single field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/location.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :coordinates, as: :location\n```\n\n----------------------------------------\n\nTITLE: Defining an Action with Custom Labels and No Confirmation in Ruby Avo\nDESCRIPTION: Defines a custom action class inheriting from Avo::BaseAction that sets custom name, confirmation message, and button labels, and disables the confirmation modal. This snippet demonstrates basic configuration of an action's metadata including labels you see in the UI. It requires the Avo Ruby gem and depends on inheriting from Avo::BaseAction.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass TogglePublished < Avo::BaseAction\n  self.name = 'Mark inactive'\n  self.message = 'Are you sure you want to mark this user as inactive?'\n  self.confirm_button_label = 'Mark inactive'\n  self.cancel_button_label = 'Not yet'\n  self.no_confirmation = true\n```\n\n----------------------------------------\n\nTITLE: Redirecting Users After an Avo Action with `redirect_to` (Ruby)\nDESCRIPTION: Demonstrates using the `redirect_to` response in an Avo action to navigate the user to a specified path (e.g., `avo.resources_users_path`) after the action's `handle` method finishes execution. Options like `allow_other_host` and `status` can also be passed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\ndef handle(query:, **args)\n  query.each do |project|\n    project.update active: false\n  end\n\n  succeed 'Done!'\n  redirect_to avo.resources_users_path\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Translations in Avo I18n Locale File (YAML)\nDESCRIPTION: Provides the YAML structure for defining pluralized translations for an Avo resource under the `resource_translations` key within the Avo namespace in a locale file. These translations are used when the resource's `translation_key` is set accordingly. Requires a Rails I18n setup and a corresponding locale file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/localization.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# avo.es.yml\nes:\n  avo:\n    dashboard: 'Dashboard'\n    # ... other translation keys\n    resource_translations:\n      user:\n        zero: 'usuarios'\n        one: 'usuario'\n        other: 'usuarios'\n```\n\n----------------------------------------\n\nTITLE: Setting use_resource Option for Record Link\nDESCRIPTION: Demonstrates using the `use_resource` option to explicitly specify which Avo resource should be used to display the linked record. This is particularly useful when multiple resources are defined for the same model or you want to use a specific resource for display purposes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/record_link.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfield :post, as: :record_link, use_resource: \"big_post\"\n\nfield :admin, as: :record_link, use_resource: \"AdminUser\"\n\nfield :thumbnail, as: :record_link, use_resource: \"Avo::Resources::TinyPhoto\"\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Assets with Avo AssetManager (Ruby)\nDESCRIPTION: Shows how to use `Avo.asset_manager.add_javascript` within the `avo_boot` hook to include a specific JavaScript file in the Avo layout's `<head>` section. The path provided should point to the location where the asset is served, often configured via middleware.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/plugins.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.asset_manager.add_javascript \"/avo-kanban-assets/avo_kanban\"\n```\n\n----------------------------------------\n\nTITLE: Show & Edit Field Wrapper Component Usage in ERB\nDESCRIPTION: Explains usage of the shareable show/edit field wrapper component/helper, showcasing how to access and configure label, help text, styles, and layout options such as stacking and full-width display. Usage examples illustrate configuring options for different display needs in show and edit views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-wrappers.md#_snippet_1\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, dash_if_blank: false do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, compact: true do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, data: {controller: \"boolean-check\"} do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, full_width: true do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, help: \"Specify if the post is published or not.\" do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, label: \"Post is published\" do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, style: \"background: red\" do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Custom resource file inheriting from a user-defined base resource\nDESCRIPTION: This snippet indicates that resource files, such as Post resource, should inherit from the custom `Avo::BaseResource` class. This allows all resources to automatically include shared methods and logic defined in the application's base class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_20\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post_resource.rb\nmodule Avo::Resources::Post < Avo::BaseResource\n  # Your existing configuration for the Post resource\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Actions in Avo Resources (Ruby)\nDESCRIPTION: This snippet demonstrates the basic registration of an action within an Avo resource using the `action` method inside the `actions` block. It defines which actions are available for a specific resource. Requires Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/registration.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def actions\n    # Basic registration\n    action Avo::Actions::ToggleInactive\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Default Create, Update, and Destroy Actions for HTTP Resource Controller - Ruby\nDESCRIPTION: Defines the default controller methods for handling create, update, and destroy via the external API using resource client calls in Avo HTTP controllers. save_record dispatches to the underlying API depending on the controller action, returning true if the API signals success. destroy_model issues a DELETE request to the API. Requirements: an Avo HTTP resource with a fully implemented client interface. Inputs include resource data and action name; outputs are booleans signaling operation success.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/http-resources.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Core::Controllers::Http\n  def save_record\n    # Perform either a create or update request based on the current controller action\n    response = @resource.client.send(action_name, @record)\n\n    # Should return true if the operation succeeded, false otherwise\n    response.success?\n  end\n\n  def destroy_model\n    # Perform a DELETE request to remove the record via the external API\n    @resource.client.delete(@record.id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using a Helper Method Inside an Avo Resource Computed Field - Ruby\nDESCRIPTION: Shows usage of the extract_excerpt helper method inside a computed field in an Avo resource class for the Post model. The excerpt field calls extract_excerpt on the model's body attribute to provide a sanitized and truncated text snippet. Without further configuration, this results in an error because the helper method is not in scope within the computed field block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/use-own-helpers-in-resource-files.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  def fields\n    field :excerpt, as: :text do |model|\n      extract_excerpt model.body\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Authorizing Field Actions in Resource (Ruby)\nDESCRIPTION: Illustrates how to use `@resource.authorization.authorize_action` within a resource field definition (e.g., setting the `disabled` option) to delegate the authorization check for that specific field interaction (implicitly tied to an `amount?` method in the policy) to the associated policy class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :amount,\n      as: :money,\n      currencies: %w[USD],\n      sortable: true,\n      filterable: true,\n      copyable: true,\n      # define ability to change the amount in policy class instead of doing it here\n      disabled: -> { !@resource.authorization.authorize_action(:amount?, raise_exception: false) }\n```\n\n----------------------------------------\n\nTITLE: Basic View Components for Custom ProgressBarField - ERB\nDESCRIPTION: ERB templates for the edit, index, and show view components of the custom progress bar field. The edit component currently renders a text field with validation and placeholder options. The index and show components simply display the field's current value wrapped properly in Avo's field wrappers, serving as basic placeholders for further customization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= edit_field_wrapper field: @field, index: @index, form: @form, resource: @resource, displayed_in_modal: @displayed_in_modal do %>\n  <%= @form.text_field @field.id,\n    class: helpers.input_classes('w-full', has_error: @field.model_errors.include?(@field.id)),\n    placeholder: @field.placeholder,\n    disabled: @field.readonly %>\n<% end %>\n\n<%= index_field_wrapper field: @field do %>\n  <%= @field.value %>\n<% end %>\n\n<%= show_field_wrapper field: @field, index: @index do %>\n  <%= @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Filter in Avo\nDESCRIPTION: Demonstrates how to generate and implement a text filter in Avo. The filter allows filtering records by name with a case-insensitive search.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrails generate avo:filter name --type text\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::Name < Avo::Filters::TextFilter\n  self.name = \"Name filter\"\n  self.button_label = \"Filter by name\"\n\n  # `value` comes as text\n  # Eg: 'avo'\n  def apply(request, query, value)\n    query.where('LOWER(name) LIKE ?', \"%#{value}%\")\n  end\n\n  # def default\n  #   'avo'\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Avo's Styles with TailwindCSS\nDESCRIPTION: This CSS code demonstrates how to import Tailwind's base, components, and utility styles into a custom stylesheet to customize Avo's appearance. It also provides an example of how to add custom components using the `@layer components` directive. This is how you can customize your Avo space. Dependencies include TailwindCSS.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tailwindcss-integration.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss/base';\n/* Have all of Avo's custom and plugins styles available. */\n@import '../../../../tmp/avo/avo.base.css';\n@import 'tailwindcss/components';\n@import 'tailwindcss/utilities';\n\n/*\n\n@layer components {\n  .btn-primary {\n    @apply py-2 px-4 bg-blue-200;\n  }\n}\n\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting Up Active Storage Attachments in Ruby Model for Trix Editor\nDESCRIPTION: This Ruby snippet defines a model class `Post` that has many attached files named `trix_attachments` using Rails' Active Storage. This association relates to the previously defined Trix editor field with `attachment_key: :trix_attachments`, enabling file attachments to be saved and linked to the model records transparently. This setup is required for managing uploaded files within the Trix editor when used with plain database columns.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/trix.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  has_many_attached :trix_attachments\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing API Endpoint for Tag Suggestions in Ruby\nDESCRIPTION: Demonstrates how to create an API endpoint for dynamic tag suggestions in a controller and set up the necessary routing.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/avo/skills_controller.rb\nclass Avo::SkillsController < Avo::ResourcesController\n  def skills_for_user\n    # You can access the user input by using params[\"q\"]\n    skills = Skill.all.map do |skill|\n      {\n        value: skill.id,\n        label: skill.name\n      }\n    end\n    render json: skills\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  # your routes\n\n  authenticate :user, ->(user) { user.is_admin? } do\n    mount_avo\n  end\nend\n\nif defined? ::Avo\n  Avo::Engine.routes.draw do\n    scope :resources do\n      # Add route for the skills_for_user action\n      get \"skills/skills_for_user\", to: \"skills#skills_for_user\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Logic for Metric Cards in Ruby\nDESCRIPTION: Detailed implementation of the query method for a metric card, showing how to calculate results based on date ranges and return formatted data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cards.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.label = 'Users count'\n  self.description = 'Some tiny description'\n  self.cols = 1\n  # self.rows = 1\n  # self.initial_range = 30\n  # self.ranges = {\n  #   \"7 days\": 7,\n  #   \"30 days\": 30,\n  #   \"60 days\": 60,\n  #   \"365 days\": 365,\n  #   Today: \"TODAY\",\n  #   \"Month to date\": \"MTD\",\n  #   \"Quarter to date\": \"QTD\",\n  #   \"Year to date\": \"YTD\",\n  #   All: \"ALL\",\n  # }\n  # self.prefix = '$'\n  # self.suffix = '%'\n  # self.refresh_every = 10.minutes\n\n  def query\n    from = Date.today.midnight - 1.week\n    to = DateTime.current\n\n    if range.present?\n      if range.to_s == range.to_i.to_s\n        from = DateTime.current - range.to_i.days\n      else\n        case range\n        when 'TODAY'\n          from = DateTime.current.beginning_of_day\n        when 'MTD'\n          from = DateTime.current.beginning_of_month\n        when 'QTD'\n          from = DateTime.current.beginning_of_quarter\n        when 'YTD'\n          from = DateTime.current.beginning_of_year\n        when 'ALL'\n          from = Time.at(0)\n        end\n      end\n    end\n\n    result User.where(created_at: from..to).count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Locale File Structure for Portuguese Translations (YAML)\nDESCRIPTION: This YAML example describes a locale file for Brazilian Portuguese (pt-BR). It includes both field_translations and resource_translations sections, each using pluralization keys. This file must be included in your Rails config/locales directory and correctly loaded. Inputs are translation keys; outputs are Portuguese labels for fields and resources in Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/i18n.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/locales/avo.pt-BR.yml\npt-BR:\n  avo:\n    field_translations:\n      file:\n        zero: 'arquivos'\n        one: 'arquivo'\n        other: 'arquivos'\n    resource_translations:\n      user:\n        zero: 'usuários'\n        one: 'usuário'\n        other: 'usuários'\n```\n\n----------------------------------------\n\nTITLE: Assigning Stimulus Controllers to Avo Actions\nDESCRIPTION: Shows how to enable stimulus controllers on an Avo action using the stimulus_controllers option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/stimulus-integration.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::ShowCurrentTime < Avo::BaseAction\n  self.stimulus_controllers = \"city-in-country\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::ShowCurrentTime < Avo::BaseAction\n  self.stimulus_controllers = \"course-resource select-field association-fields\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an Avo Action in Ruby\nDESCRIPTION: This Ruby code defines a basic Avo action. It outlines the structure of an action class, including the action's name, visibility, fields (commented out), and the `handle` method which processes selected records.  It's a template for customization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/generate.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  self.name = \"Toggle Inactive\"\n  # self.visible = -> do\n  #   true\n  # end\n\n  # def fields\n  #   # Add Action fields here\n  # end\n\n  def handle(query:, fields:, current_user:, resource:, **args)\n    query.each do |record|\n      # Do something with your records.\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Behavior of Attribute Updates Before Version 3.7.0\nDESCRIPTION: Explains that prior to version 3.7.0, Avo would overwrite the entire attribute with only the keys sent from the client, potentially removing existing data not included in the update payload. Uses JSON examples to illustrate the data loss issue.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/boolean_group.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// Before update.\n{\n  \"feature_enabled\": true,\n  \"another_feature_enabled\": false,\n  \"something_else\": \"some_value\" // this will disappear\n}\n\n// After update.\n{\n  \"feature_enabled\": true,\n  \"another_feature_enabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Scoped Has_Many Association in Avo Resource Pre-2.5.0 in Ruby\nDESCRIPTION: Shows how to apply an approved scope to the comments has_many field in the UserResource class for Avo versions before 2.5.0. The scope is passed as a lambda that calls the approved scope directly, limiting displayed comments to those approved when showing the association in the Avo interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/scopes_common.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/user_resource.rb\nclass UserResource < Avo::BaseResource\n  # Before v2.5.0\n  field :comments, as: :has_many, scope: -> { approved }\nend\n```\n\n----------------------------------------\n\nTITLE: TeamUser Resource Definition\nDESCRIPTION: This Ruby code defines a new Avo resource named `TeamUser`. This resource manages the display of the users associated with a team in the admin panel. The resource includes fields for `id`, `name`, and `projects_count`.  This configuration provides a custom view for the `User` when displayed through a `has_many` association from the `Team` resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/team_user.rb\nclass Avo::Resources::TeamUser < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :name, as: :text\n    field :projects_count, as: :number\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a View-Specific Field Organization in Avo Resource\nDESCRIPTION: This snippet demonstrates how to use the ResourceExtensions concern to organize fields by view type in an Avo resource. It shows how to define fields that appear on all views and then specify additional fields that should only appear on specific views (index, show, create, edit).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/manage-information-heavy-resources.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass ExampleResource < Avo::BaseResource\n  include ResourceExtensions\n\n  field :id, as: :id\n  field :name, as: :text\n\n  index do\n    field :some_field, as: :text\n    field :some_index_field, as: :text, sortable: true\n  end\n\n  show do\n    field :some_show_field, as: :markdown\n    field :some_field, as: :text\n  end\n\n  create do\n    field :some_create_field, as: :number\n  end\n\n  edit do\n    field :some_create_field, as: :number, readonly: true\n    field :some_field\n    field :some_editable_field, as: :text\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Field Translation Key in Avo Resource (Ruby)\nDESCRIPTION: Assigns a specific translation key to an individual field within an Avo resource. This key is used to find the localized label for that field in the I18n locale files. Requires the field to be defined within an Avo resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/localization.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project_resource.rb\nclass ProjectResource < Avo::BaseResource\n  self.title = :name\n\n  field :id, as: :id\n  # ... other fields\n  field :files, as: :files, translation_key: 'avo.field_translations.file'\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Model Resource Mapping\nDESCRIPTION: This Ruby code configures Avo to use the `User` resource as the default for the `User` model. It adds the setting to the `config/initializers/avo.rb` file. It is used to override the alphabetical order of resource lookup and ensures that the desired resource is always used when referencing the User model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.model_resource_mapping = {\n    'User': 'Avo::Resources::User'\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Search via Initializer\nDESCRIPTION: To disable the global search feature entirely for all users, configure the `disabled_features` option in the Avo initializer (`config/initializers/avo.rb`) to include `:global_search`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.disabled_features = [:global_search]\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Kamal Secret File to Store Gem Server Token\nDESCRIPTION: This snippet shows the contents of the .kamal/secrets file, where the BUNDLE_PACKAGER__DEV token is defined. This file is used by Kamal to provide secrets to the deployment process securely. The actual token replaces the 'xxx' placeholder.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/gem-server-authentication.md#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n# However you set your secrets in Kamal\nBUNDLE_PACKAGER__DEV=xxx\n```\n\n----------------------------------------\n\nTITLE: Referencing Policies for Association Authorization (Ruby)\nDESCRIPTION: Demonstrates how a policy method (like `edit_comments?` in `PostPolicy`) can delegate authorization checks to another policy (like `CommentPolicy#edit?`) to avoid duplicating authorization logic for associated resources.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CommentPolicy\n  # ... more policy methods\n  def edit\n    record.user_id == current_user.id\n  end\nend\n\nclass PostPolicy\n  # ... more policy methods\n  def edit_comments?\n    Pundit.policy!(user, record).edit?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Suggestions with dynamic_filter (array)\nDESCRIPTION: Demonstrates setting static suggestions for a text input filter with the `dynamic_filter` method using an array.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :first_name,\n  suggestions: [\"Avo\", \"Cado\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Skills Array Column to Courses Table in Rails Migration Using Ruby\nDESCRIPTION: Creates a Rails database migration that adds a new 'skills' column to the 'courses' table. The column is a text array with a default empty array, enabling storage of multiple skill tags per course. This migration utilizes ActiveRecord's array and default options to store multiple tags in one column efficiently.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddSkillsToCourses < ActiveRecord::Migration[6.0]\n  def change\n    add_column :courses, :skills, :text, array: true, default: []\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Automatic Refresh Interval for an Avo Metric Card in Ruby\nDESCRIPTION: Configures the `UsersMetric` card to automatically refresh its data every 10 minutes using the `refresh_every` setting. The value is specified in seconds (e.g., `10.minutes` converts to 600 seconds).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.refresh_every = 10.minutes\nend\n```\n\n----------------------------------------\n\nTITLE: Graceful API Error Handling in Parsing Procs - Ruby\nDESCRIPTION: Demonstrates raising a custom Avo::HttpError when an API response contains an error, which is a standard idiom for surfacing issues to the UI in Avo. Requires the avo-http_resource gem and a response hash compliant with the documented contract. Input is an HTTP response hash; output is either progression or an exception to the HTTP controller, resulting in a flash error message shown to the user.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/http-resources.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nraise Avo::HttpError.new response[\"message\"] if response[\"error\"].present?\n```\n\n----------------------------------------\n\nTITLE: Swapping disabled and readonly options for fields in Avo using Ruby\nDESCRIPTION: This snippet details how to swap the usage of the 'disabled' and 'readonly' field options to better comply with HTML standards. Previously, the 'disabled' option lacked full protection against form submission manipulation, so the semantics are reversed: 'disabled' is used for form protection and 'readonly' for UI restriction. Two field configurations before and after swapping are illustrated.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-2-avo-3-upgrade.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name,\n  as: :text,\n  disabled: -> { !Avo::Current.user.is_admin? } // [!code --]\n  readonly: -> { !Avo::Current.user.is_admin? } // [!code ++]\n\nfield :hidden_info,\n  as: :text,\n  readonly: -> { !Avo::Current.user.is_admin? } // [!code --]\n  disabled: -> { !Avo::Current.user.is_admin? } // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Avo Resources | Ruby\nDESCRIPTION: This configuration snippet, placed in `config/initializers/avo.rb`, demonstrates how to disable Avo's eager-loading of resources and explicitly list the resources you want to make available using the `config.resources` array. Resources not listed here will not appear in the Avo UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.resources = [\n    \"Avo::Resources::User\",\n    \"Avo::Resources::Fish\",\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Data Attributes to Any Item Avo Menu Ruby\nDESCRIPTION: Shows how to add arbitrary HTML `data` attributes to any Avo menu item (not just `link_to`) using the `data` option. This is useful for integrating with frontend frameworks like Turbo, providing an example adding `data: {turbo: false}` to a resource link.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    resource :user, data: {turbo: false}\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Select with Computed Options Lambda - Ruby\nDESCRIPTION: This Ruby code, within an Avo resource, shows how to dynamically generate select options using a lambda function assigned to the `options` parameter. The lambda provides access to the `record`, `resource`, `view`, and `field` context, allowing options to be computed based on other data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/select.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  field :type,\n    as: :select,\n    options: -> do\n      record.get_types_from_the_database.map { |type| [type.name, type.id] }\n    end,\n    placeholder: 'Choose the type of the container.'\nend\n```\n\n----------------------------------------\n\nTITLE: Including Multitenancy in ApplicationController - Ruby\nDESCRIPTION: This snippet demonstrates how to include the `Multitenancy` concern into `Avo::ApplicationController`. This uses the `Rails.configuration.to_prepare` block, which ensures the inclusion happens after the application has been initialized. This approach avoids direct modification of Avo's core files, enabling upgrades and keeping the application maintainable. \nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/avo-application-controller.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nRails.configuration.to_prepare do\n  Avo::ApplicationController.include Multitenancy\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix\nDESCRIPTION: This snippet demonstrates the use of `prefix` and `suffix` options to add formatting before and after the displayed data within a metric card.  Requires the Avo framework.  The prefix and suffix are displayed directly next to the numerical result.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = 'users_metric'\n  self.prefix = '$'\n  self.suffix = '%'\nend\n```\n\n----------------------------------------\n\nTITLE: Extending Array Class with Limit Method in Ruby\nDESCRIPTION: Adds a `limit` method to Ruby's built-in `Array` class through a Rails initializer. This method simply calls the existing `take` method. This monkey patch provides an ActiveRecord-like `limit` interface for arrays, potentially used by the custom pagination or `LazyLoader` implementation for consistency or compatibility.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rest-api-integration.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Array\n  def limit(upto)\n    take(upto)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Resource Policy (Ruby)\nDESCRIPTION: Demonstrates how to use the `self.authorization_policy` class method within an Avo resource definition to explicitly assign a different policy class than the one Avo would infer from the resource's model, allowing flexible policy mapping.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/photo_comment.rb\nclass Avo::Resources::PhotoComment < Avo::BaseResource\n  self.model_class = \"Comment\"\n  self.authorization_policy = PhotoCommentPolicy\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Scope in Rails Routes for Avo in Ruby\nDESCRIPTION: Configures Rails routes to scope Avo's mounted routes under a dynamic tenant identifier segment in the URL path. This approach enables route-based tenancy by capturing the tenant ID from the URL, allowing tenant-specific scoping for all Avo requests. Dependencies include a standard Rails routing DSL. The key parameter is ':tenant_id' which represents the tenant identifier segment in URLs like '/foo/'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/multitenancy.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  scope \"/:tenant_id\" do\n    mount_avo\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Rails Model with Avo Resource via CLI - Bash\nDESCRIPTION: Generates a new Rails model named 'car' with attributes 'make' and 'mileage', along with the corresponding Avo resource and controller. The command initializes the standard Rails files and automatically creates Avo resource files to enable CRUD operations on the model within the admin UI. Dependencies include Rails and Avo gems set up in the project.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate model car make:string mileage:integer\n```\n\n----------------------------------------\n\nTITLE: Generating a New Custom Field with Avo CLI - Bash\nDESCRIPTION: This snippet shows how to use the Rails/Avo code generator to scaffold a new custom field called 'progress_bar'. The command creates Ruby classes, ERB view components, and configuration files in the specified directories. Dependencies include Rails and the Avo gem installed within the project.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n▶ bin/rails generate avo:field progress_bar\n      create  app/components/avo/fields/progress_bar_field\n      create  app/components/avo/fields/progress_bar_field/edit_component.html.erb\n      create  app/components/avo/fields/progress_bar_field/edit_component.rb\n      create  app/components/avo/fields/progress_bar_field/index_component.html.erb\n      create  app/components/avo/fields/progress_bar_field/index_component.rb\n      create  app/components/avo/fields/progress_bar_field/show_component.html.erb\n      create  app/components/avo/fields/progress_bar_field/show_component.rb\n      create  app/avo/fields/progress_bar_field.rb\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo to Use Pundit Authorization Client in Ruby\nDESCRIPTION: This snippet demonstrates how to configure Avo to use Pundit as the authorization client by updating the Avo initializer file. Setting `config.authorization_client` to `:pundit` enables the integration so Avo enforces policies defined via Pundit for resource access control.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.authorization_client = :pundit\n```\n\n----------------------------------------\n\nTITLE: Download and Save Avo's llms.txt for Cursor (Project Setup)\nDESCRIPTION: This command downloads Avo's llms.txt file and saves it to the `.cursor/rules/avo.mdc` directory within your project. This allows Cursor to use the file for code generation by default in the project context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/cursor.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://avohq.io/llms.txt --create-dirs -o .cursor/rules/avo.mdc\n```\n\n----------------------------------------\n\nTITLE: Controlling Associated Resources View Count\nDESCRIPTION: Specifies the number of associated resources shown in `has_many` associations in index view via `config.via_per_page`. This enhances the usability when managing associations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.via_per_page = 8\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Cover Photo Source via Symbol in Avo Using Ruby\nDESCRIPTION: Specifies the cover photo source by using a symbol that calls the cover_photo field on the record. This direct approach is simpler when the cover photo corresponds straightforwardly to an attribute on the record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cover-and-profile-photos.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nself.cover_photo = {\n  source: :cover_photo # this will run `record.cover_photo`\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding the Header on an Avo Metric Card in Ruby\nDESCRIPTION: Configures the `UsersMetric` card to hide its header, which includes the label and ranges dropdown, by setting `display_header` to `false`. This is useful for embedding content like maps that should fill the entire card space.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.display_header = false\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Localization in Avo (Ruby)\nDESCRIPTION: This Ruby snippet illustrates how to localize a specific field by supplying a translation_key within the field declaration. Requires the avo gem. The translation_key option in the field method links the field to the corresponding YAML translations for multi-language support. The inputs are field configuration parameters (e.g., field name, type, translation_key), which determine the label rendered for users; ensure the associated YAML keys exist.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/i18n.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id\n    # ... other fields\n    field :files, as: :files, translation_key: 'avo.field_translations.file'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Trix Editor Field with Attachments Enabled in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to define a form field named `body` as a Trix WYSIWYG editor within the Avo admin framework, while enabling file attachments by specifying an `attachment_key`. The `attachment_key` symbol must correspond to an association on the Ruby model that uses Active Storage for file attachments. This enables drag-and-drop or attached files directly within the editor, linking them to the database record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/trix.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :trix, attachment_key: :trix_attachments\n```\n\n----------------------------------------\n\nTITLE: Enabling PaperTrail for change logs on models\nDESCRIPTION: Adds `has_paper_trail` in the model to enable version tracking, allowing the display of change logs and the ability to revert changes within the activity details view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ApplicationRecord\n  has_paper_trail\n\n  belongs_to :user, optional: true\n\n  validates_presence_of :price\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Declaration of a Trix Field in Ruby\nDESCRIPTION: This simple Ruby snippet initializes a form field called `body` as a Trix editor without additional options. It demonstrates the minimal setup for integrating the Trix WYSIWYG editor in the Avo admin panel, storing the editor's resulting HTML in a string or text column of the database.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/trix.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :trix\n```\n\n----------------------------------------\n\nTITLE: Configuring Zeitwerk Autoloader in Rails Application (Ruby)\nDESCRIPTION: This Ruby code snippet shows how to configure a Rails application (`config/application.rb`) to use the `:zeitwerk` autoloader and load the default configuration for Rails 6.1 or a higher version. This configuration is required by Avo and ensures compatibility, especially when upgrading older Rails applications.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/installation.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nconfig.autoloader = :zeitwerk\nconfig.load_defaults 6.1 # 6.1 or higher, depending on your rails version\n```\n\n----------------------------------------\n\nTITLE: Targeting Avo Field Label in Edit View (Object Notation) (Ruby)\nDESCRIPTION: This snippet illustrates the basic structure for using the `html` option in object notation to target the field's label element specifically for the 'edit' view (also applies to 'new').\n\nDependencies: Avo framework.\n\nParameters: `html` option with a nested hash structure `edit: { label: {} }`. Attributes (`style`, `classes`, `data`) would be added inside the inner `{}`.\n\nExpected Input: A hash structure specifying the 'edit' view and 'label' target.\n\nExpected Output: Configures the Avo field definition to allow adding HTML attributes to the edit/new view label.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/html.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    label: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Avo in Bullet Train via Template (Shell/Ruby)\nDESCRIPTION: This shell command executes a Ruby script (`bin/rails app:template`) to apply a specific Avo template designed for Bullet Train applications, fetched from `https://v3.avohq.io/templates/bullet-train.template`. This automates the integration of Avo into an existing Bullet Train project.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/installation.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nbin/rails app:template LOCATION=https://v3.avohq.io/templates/bullet-train.template\n```\n\n----------------------------------------\n\nTITLE: Including a Specific Helper Module in Avo BaseField to Fix Scope Issues - Ruby\nDESCRIPTION: Provides a solution to include the PostsHelper module within Avo::Fields::BaseField so that its methods are available inside computed fields. This snippet is intended to go into an initializer (e.g., config/initializers/avo.rb) and uses Rails' to_prepare hook to include the helper module dynamically. It preserves usual Avo configuration while extending the BaseField class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/use-own-helpers-in-resource-files.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # Usual Avo config\nend\n\nmodule FieldExtensions\n  # Include a specific helper\n  include PostsHelper\nend\n\nRails.configuration.to_prepare do\n  Avo::Fields::BaseField.include FieldExtensions\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Tags Field with ActsAsTaggableOn - Ruby\nDESCRIPTION: Configures a `tags` field in Avo to integrate with the `acts-as-taggable-on` gem. Includes options for customization such as placeholder text, suggestions, and enforcing suggestions. Requires the `acts-as-taggable-on` gem and a corresponding model configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  def fields\n    field :tags,\n      as: :tags,\n      acts_as_taggable_on: :tags,\n      close_on_select: false,\n      placeholder: 'add some tags',\n      suggestions: -> { Post.tags_suggestions },\n      enforce_suggestions: true,\n      help: 'The only allowed values here are `one`, `two`, and `three`'\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  acts_as_taggable_on :tags\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Admin and Developer Role Methods in Avo (Ruby)\nDESCRIPTION: This configuration customizes the method names used by Avo to determine admin and developer roles on the current_user object. Place this in config/avo.rb. Set config.is_admin_method and config.is_developer_method to match your application's admin (e.g., is_admin?) and developer-checking (e.g., is_developer?) methods respectively.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authentication.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# config/avo.rb\nAvo.configure do |config|\n  config.is_admin_method = :is_admin?\n  config.is_developer_method = :is_developer?\nend\n```\n\n----------------------------------------\n\nTITLE: StimulusJS Controller for Dynamic City/County Selection - JavaScript\nDESCRIPTION: JavaScript Stimulus controller to handle city selection logic based on country changes. On country field change, fetches cities from the backend API and updates the city select field accordingly, including displaying a loader and restoring previous values when possible. Requires Hotwired Stimulus, global window.Avo configuration, and properly targeted DOM elements (with Stimulus data-controller). Inputs: current field DOM; Outputs: dynamic DOM updates via options manipulation. Constraints: designed for 'edit' and 'new' Rails/Avo forms.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\";\n\nconst LOADER_CLASSES = \"absolute bg-gray-100 opacity-10 w-full h-full\";\n\nexport default class extends Controller {\n  static targets = [\"countryFieldInput\", \"cityFieldInput\", \"citySelectWrapper\"];\n\n  static values = {\n    view: String,\n  };\n\n  // Te fields initial value\n  static initialValue;\n\n  get placeholder() {\n    return this.cityFieldInputTarget.ariaPlaceholder;\n  }\n\n  set loading(isLoading) {\n    if (isLoading) {\n      // create a loader overlay\n      const loadingDiv = document.createElement(\"div\");\n      loadingDiv.className = LOADER_CLASSES;\n      loadingDiv.dataset.target = \"city-loader\";\n\n      // add the loader overlay\n      this.citySelectWrapperTarget.prepend(loadingDiv);\n      this.citySelectWrapperTarget.classList.add(\"opacity-50\");\n    } else {\n      // remove the loader overlay\n      this.citySelectWrapperTarget\n        .querySelector('[data-target=\"city-loader\"]')\n        .remove();\n      this.citySelectWrapperTarget.classList.remove(\"opacity-50\");\n    }\n  }\n\n  async connect() {\n    // Add the controller functionality only on forms\n    if ([\"edit\", \"new\"].includes(this.viewValue)) {\n      this.captureTheInitialValue();\n\n      // Trigger the change on load\n      await this.onCountryChange();\n    }\n  }\n\n  // Read the country select.\n  // If there's any value selected show the cities and prefill them.\n  async onCountryChange() {\n    if (this.hasCountryFieldInputTarget && this.countryFieldInputTarget) {\n      // Get the country\n      const country = this.countryFieldInputTarget.value;\n      // Dynamically fetch the cities for this country\n      const cities = await this.fetchCitiesForCountry(country);\n\n      // Clear the select of options\n      Object.keys(this.cityFieldInputTarget.options).forEach(() => {\n        this.cityFieldInputTarget.options.remove(0);\n      });\n\n      // Add blank option\n      this.cityFieldInputTarget.add(new Option(this.placeholder));\n\n      // Add the new cities\n      cities.forEach((city) => {\n        this.cityFieldInputTarget.add(new Option(city, city));\n      });\n\n      // Check if the initial value is present in the cities array and select it.\n      // If not, select the first item\n      const currentOptions = Array.from(this.cityFieldInputTarget.options).map(\n        (item) => item.value\n      );\n      if (currentOptions.includes(this.initialValue)) {\n        this.cityFieldInputTarget.value = this.initialValue;\n      } else {\n        // Select the first item\n        this.cityFieldInputTarget.value =\n          this.cityFieldInputTarget.options[0].value;\n      }\n    }\n  }\n\n  // Private\n\n  captureTheInitialValue() {\n    this.initialValue = this.cityFieldInputTarget.value;\n  }\n\n  async fetchCitiesForCountry(country) {\n    if (!country) {\n      return [];\n    }\n\n    this.loading = true;\n\n    const response = await fetch(\n      `${window.Avo.configuration.root_path}/resources/courses/cities?country=${country}`\n    );\n    const data = await response.json();\n\n    this.loading = false;\n\n    return data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Edit View Component (ERB)\nDESCRIPTION: This ERB code customizes the edit view component for the `progress_bar` custom field. It displays the value with a suffix if `display_value` is true, renders a range input and includes javascript for real time updating.  The range input uses the settings defined previously in the field definitions. This allows users to interact with the progress bar.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_13\n\nLANGUAGE: ERB\nCODE:\n```\n# app/components/avo/fields/progress_bar_field/edit_component.html.erb\n<%= edit_field_wrapper field: @field, index: @index, form: @form, resource: @resource, displayed_in_modal: @displayed_in_modal do %>\n  <!-- Show the progress input with the settings we passed to the field. -->\n  <% if @field.display_value %>\n    <div class=\"text-center text-sm font-semibold w-full leading-none mb-1\">\n      <!-- Add the suffix if value_suffix is set -->\n      <span class=\"js-progress-bar-value-<%= @field.id %>\"><%= @field.value %></span><%= @field.value_suffix if @field.value_suffix.present? %>\n    </div>\n  <% end %>\n  <!-- Add the range input with the settings we passed to the field -->\n  <%= @form.range_field @field.id,\n    class: 'w-full',\n    placeholder: @field.placeholder,\n    disabled: @field.readonly,\n    min: 0,\n    # add the field-specific options\n    max: @field.max,\n    step: @field.step,\n    %>\n<% end %>\n\n<script>\n// Get the input and value elements\nvar input = document.getElementById('project_progress');\n// Scope the selector to the current field. You might have more than one progress field on the page.\nvar log = document.querySelector('.js-progress-bar-value-<%= @field.id %>');\n\n// Add an event listener for when the input is updated\ninput.addEventListener('input', updateValue);\n\n// Update the value element with the value from the input\nfunction updateValue(e) {\n  log.textContent = e.target.value;\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling Audit Logging for an Action\nDESCRIPTION: Configure a specific Avo action to track and log activities by setting the audit_logging class attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::ChangePrice < Avo::BaseAction\n  self.name = \"Change Price\"\n\n  self.audit_logging = {\n    activity: true\n  }\n\n  def fields\n    field :price, as: :number, default: -> { resource.record.price rescue nil }\n  end\n\n  def handle(query:, fields:, current_user:, resource:, **args)\n    query.each do |record|\n      record.update!(price: fields[:price])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Applying HTML Attributes using Method Notation within Block (Ruby)\nDESCRIPTION: This snippet demonstrates an alternative syntax within the block notation, using method calls like `classes(...)` and `data(...)` for applying attributes. This is functionally equivalent to returning a string or hash from nested blocks but can be more concise.\n\nDependencies: Avo framework.\n\nParameters: `html` option assigned a Ruby lambda (`-> do ... end`) using method calls for attributes.\n\nExpected Input: A Ruby block using method calls like `classes`, `style`, or `data`.\n\nExpected Output: Configures the Avo field definition to render HTML attributes determined by the values passed to the methods within the block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/html.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :has_skills,\n  as: :boolean,\n  html: -> do\n    edit do\n      wrapper do\n        classes(\"hidden\")\n        data({action: \"click->admin#do_something_admin\"})\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Discovering Columns with Options in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to use the `only` option with `discover_columns` and `discover_associations` to specify which fields should be discovered and exclude all others. This allows for precise control over which fields are exposed in the Avo interface. It assumes the existence of `Post` resources and their associations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-discovery.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  # ...\n\n  def fields\n    discover_columns only: [:title, :body, :published_at]\n    discover_associations only: [:author, :comments]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Menu for Language Switching After Version 2.10\nDESCRIPTION: Shows Ruby code to set the profile menu with links for switching between languages using query parameters, integrated into the Avo configuration. Enables changing the locale for the entire website or current request depending on the parameters used.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multilingual-content.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.profile_menu = -> {\n    link \"Switch to Portuguese\", path: \"?set_locale=pt-BR\"\n    link \"Switch to English\", path: \"?set_locale=en\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for a Boolean Filter in Ruby\nDESCRIPTION: Demonstrates how to set default checked states for a Boolean filter by implementing the optional `default` method. This method should return a hash similar to the `values` payload, indicating which options should be initially checked.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::Featured < Avo::Filters::BooleanFilter\n  # ... (name, apply, options methods omitted for brevity)\n\n  def default\n    {\n      is_featured: true\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing avo-record_link_field Gem in Ruby\nDESCRIPTION: This snippet demonstrates how to add the avo-record_link_field gem to your application's Gemfile, which is a prerequisite for using the record_link field in Avo. Ensure that Bundler is installed, then run 'bundle install' after adding this line to install the dependency. No parameters are required, but your app must use Ruby and Bundler for dependency management.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/record_link.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"avo-record_link_field\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Card Data\nDESCRIPTION: This snippet demonstrates formatting data returned from the card's `query` method using the `format` option. It uses the `number_to_social` helper to format the displayed value. Requires the Avo framework and potentially the `number_to_social` helper (from Rails or a similar library, if not defined within Avo). Inputs are the raw data returned from the query, output is the formatted data to be shown.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::AmountRaised < Avo::Cards::MetricCard\n  self.id = \"amount_raised\"\n  self.label = \"Amount raised\"\n  self.prefix = \"$\"\n  self.format = -> {\n    number_to_social value, start_at: 1_000\n  }\n\n  def query\n    result 9001\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Logic from Avo Resource Tool Partial - ERB\nDESCRIPTION: Demonstrates how to access instance variables and methods defined in the resource tool class from within the corresponding ERB partial. The partial has access to the `tool` instance, allowing calls like `tool.foo` to access variables and `tool.custom_method_call` to invoke methods.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resource-tools.md#_snippet_8\n\nLANGUAGE: ERB\nCODE:\n```\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new title: \"Post info\" do |c|\n\n    <% c.with_body do %>\n      <p>\n        This variable was declared in the initializer:\n        <%= tool.foo %>\n      </p>\n\n      <p>\n        This is a method called on the tool:\n        <%= tool.custom_method_call %>\n      </p>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Index Field Wrapper Optional Configurations\nDESCRIPTION: Showcases additional options for the index field wrapper such as center_content for centering content, flush for removing padding, data attributes for attaching data, full_width for expanding the field, and references to resource and field instances. These configurations enable flexible styling and behavior in index views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-wrappers.md#_snippet_1\n\nLANGUAGE: ERB\nCODE:\n```\n<%= index_field_wrapper **field_wrapper_args, center_content: true do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Install bundle - Hashid Rails\nDESCRIPTION: Executes the `bundle install` command to install the gems specified in the Gemfile. This ensures that all required dependencies, including the `hashid-rails` gem, are installed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/custom-ids.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Enabling Reloadable Feature (Ruby-Vue)\nDESCRIPTION: This snippet demonstrates enabling the reloadable feature using a direct boolean value. It sets the `reloadable` option to `true`, making the reload icon always visible next to the specified association field. Dependencies: Requires the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/reloadable.md#_snippet_0\n\nLANGUAGE: ruby-vue\nCODE:\n```\nfield :reviews, as: :{{ $frontmatter.field_type }}, reloadable: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Copyable Field Option in Ruby\nDESCRIPTION: This snippet shows how to enable the `copyable` option for a text-based field in Ruby.  When set to `true`, a copy icon appears next to the field's value in the UI, allowing users to easily copy the field's content to their clipboard. This is suitable for fields like unique identifiers, URLs, or other text values that users frequently need to copy.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, copyable: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Avo Mounting in Rails Routes\nDESCRIPTION: Shows how to mount Avo in a Rails application using the default configuration path or a custom path. The first example uses the default Avo.configuration.root_path, while the second example mounts Avo at a custom '/custom_path' location.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/routing.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  # Mounts Avo at Avo.configuration.root_path\n  mount_avo\n\n  # Mounts Avo at `/custom_path` instead of the default\n  mount_avo at: \"custom_path\"\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Sort Column in Avo Resource (Ruby)\nDESCRIPTION: Changes the default sort column for the User resource to :last_name using self.default_sort_column. Includes a fields method declaring the sortable columns. The specified column must exist in the model; otherwise, the default 'created_at' is used. Requires DB index for optimal performance.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.default_sort_column = :last_name\n\n  def fields\n    field :id, as: :id\n    field :last_name, as: :text\n  end\n\n  # other resource configurations...\nend\n```\n\n----------------------------------------\n\nTITLE: Using Computed Value for Gravatar Email in Avo Ruby\nDESCRIPTION: This snippet illustrates how to use a computed value (a Ruby block) to determine the email address used by the `Gravatar` field. The block receives the current `model` instance as an argument. It demonstrates constructing an email address dynamically (e.g., from a `google_username` attribute) and returning it. Avo will then use this returned email string to perform the Gravatar lookup, allowing for flexibility when the email is not stored directly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/gravatar.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :email, as: :gravatar do |model|\n  \"#{model.google_username}@gmail.com\"\nend\n```\n\n----------------------------------------\n\nTITLE: Customize Avo role check methods\nDESCRIPTION: Modify the method names Avo calls on the `current_user` object to determine admin and developer roles by setting `is_admin_method` and `is_developer_method` in the Avo configuration. The default methods are `<code>:is_admin?</code></code> and `<code>:is_developer?</code></code>, respectively.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authentication.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# config/avo.rb\nAvo.configure do |config|\n  config.is_admin_method = :is_admin?\n  config.is_developer_method = :is_developer?\nend\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Conditions for Filters in Avo using Ruby\nDESCRIPTION: Illustrates how to provide custom filter conditions by specifying a hash of condition keys and their display labels. This can be set either in the field's `filterable` option or through the `dynamic_filter` method. The conditions control how the filter behaves and what options appear to the user for filtering logic.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# Using field's filterable option\nfield :first_name,\n  as: :text,\n  filterable: {\n    # ...\n    conditions: {\n      case_sensitive: \"Case sensitive\",\n      not_case_sensitive: \"Not case sensitive\"\n    }.invert\n    # ...\n  }\n\n# Using dynamic_filter method\ndynamic_filter :first_name,\n  conditions: {\n    case_sensitive: \"Case sensitive\",\n    not_case_sensitive: \"Not case sensitive\"\n  }.invert\n```\n\n----------------------------------------\n\nTITLE: Defining ordering actions in Avo resource with act_as_list gem\nDESCRIPTION: This snippet demonstrates how to configure ordering actions such as 'higher', 'lower', 'to_top', and 'to_bottom' within an Avo resource class. It utilizes lambda functions that call methods provided by the acts_as_list gem to change a record's position, enabling reordering of records via buttons in the UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/records-reordering.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  self.ordering = {\n    visible_on: :index,\n    actions: {\n      higher: -> { record.move_higher },\n      lower: -> { record.move_lower },\n      to_top: -> { record.move_to_top },\n      to_bottom: -> { record.move_to_bottom },\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Language Switcher Dropdown Before Version 2.3.0\nDESCRIPTION: Shows ERB code for ejecting and customizing the profile dropdown partial, allowing support for multiple languages. Adds links to switch locales between English and Portuguese based on the current locale, modifying the dropdown UI with language-specific options. Dependencies include Rails view helpers and the application's user model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multilingual-content.md#_snippet_2\n\nLANGUAGE: ERB\nCODE:\n```\n<% destroy_user_session_path = \"destroy_#{Avo.configuration.current_user_resource_name}_session_path\".to_sym %>\n\n<div <% if main_app.respond_to?(destroy_user_session_path) %> data-controller=\"toggle-panel\" <% end %>>\n  <a href=\"javascript:void(0);\" class=\"flex items-center cursor-pointer font-semibold text-gray-700\" data-action=\"click->toggle-panel#togglePanel\">\n    <% if _current_user.respond_to?(:avatar) &&  _current_user.avatar.present? %>\n      <%= image_tag _current_user.avatar, class: \"h-12 rounded-full border-4 border-white mr-1\" %>\n    <% end %>\n    <% if _current_user.respond_to?(:name) && _current_user.name.present? %>\n      <%= _current_user.name %>\n    <% elsif _current_user.respond_to?(:email) && _current_user.email.present? %>\n      <%= _current_user.email %>\n    <% else %>\n      Avo user\n    <% end %>\n    <% if main_app.respond_to?(destroy_user_session_path) %>\n      <%= svg 'chevron-down', class: \"ml-1 h-4\" %>\n    <% end %>\n  </a>\n\n  <% if main_app.respond_to?(destroy_user_session_path) %>\n    <div class=\"hidden absolute inset-auto right-0 mr-6 mt-0 py-4 bg-white rounded-xl min-w-[200px] shadow-context\" data-toggle-panel-target=\"panel\">\n      <%= button_to t('avo.sign_out'), main_app.send(:destroy_user_session_path), method: :delete, form: { \"data-turbo\" => \"false\" }, class: \"appearance-none bg-white text-left cursor-pointer text-green-600 font-semibold hover:text-white hover:bg-green-500 block px-4 py-1 w-full\" %>\n    </div>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Session Authentication with Redirection in Avo (Ruby)\nDESCRIPTION: This snippet shows custom session-based authentication using a block in config.authenticate_with. If session[:user_id] does not match the hardcoded value (1), the request is redirected to '/'. Use this in config/initializers/avo.rb for simple, manual user ID checks. This is not recommended for production as it uses static user IDs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authentication.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.authenticate_with do\n    redirect_to '/' unless session[:user_id] == 1 # hard code user ids here\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Avo Field\nDESCRIPTION: Shows two ways to set a default value for a field displayed on the New view using the `default` option. It can accept a fixed value (e.g., a string) or a Ruby block (callback function) that calculates the default value dynamically. The block is evaluated in the `ResourceViewRecordHost`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_20\n\nLANGUAGE: Ruby\nCODE:\n```\n# using a value\nfield :name, as: :text, default: 'John'\n\n# using a callback function\nfield :level, as: :select, options: { 'Beginner': :beginner, 'Advanced': :advanced }, default: -> { Time.now.hour < 12 ? 'advanced' : 'beginner' }\n```\n\n----------------------------------------\n\nTITLE: Implementing Multitenant Account Middleware in Rails\nDESCRIPTION: The `AccountMiddleware` class is designed to intercept incoming requests, extract the account ID from the URL, and retrieve the corresponding `Account` object from the database.  If a valid account is found, it sets `Current.account` and adjusts the request path accordingly. If the account is not present, it redirects to the root path.  Dependencies: `ActionDispatch::Request`, `Account` model.  Inputs: Incoming HTTP requests. Outputs: Modified requests and, potentially, redirects.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/multitenancy.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n## Multitenant Account Middleware\n#\n# Included in the Rails engine if enabled.\n#\n# Used for setting the Account by the first ID in the URL like Basecamp 3.\n# This means we don't have to include the Account ID in every URL helper.\n# From JumpstartRails AccountMiddleware\n\nclass AccountMiddleware\n  def initialize(app)\n    @app = app\n  end\n\n  # http://example.com/12345/projects\n  def call(env)\n    request = ActionDispatch::Request.new env\n    # Fetch the account id from the path\n    _, account_id, request_path = request.path.split(\"/\", 3)\n\n    # Check if the id is a number\n    if /\\d+/.match?(account_id)\n      # See if that account is present in the database.\n      if (account = Account.find_by(id: account_id))\n        # If the account is present, set the Current.account to that\n        Current.account = account\n      else\n        # If not, redirect to the root path\n        return [302, {\"Location\" => \"/\"}, []]\n      end\n\n      request.script_name = \"/#{account_id}\"\n      request.path_info = \"/#{request_path}\"\n    end\n\n    @app.call(request.env)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Custom List Control in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates the usage of the `list` control to create a custom dropdown containing a mix of links and actions within Avo. It shows how to configure the list's appearance with a label, icon, style, color, and title, and then populate it with `link_to` and `action` elements inside the block, allowing for flexible grouping of related navigation or actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customizable-controls.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nlist label: \"Custom Index List\", icon: \"heroicons/outline/cube-transparent\", style: :primary, color: :slate, title: \"A custom list\" do\n  link_to \"Google\", \"https://google.com\", icon: \"heroicons/outline/academic-cap\"\n  action Avo::Actions::Sub::DummyAction, icon: \"heroicons/outline/globe\"\n  link_to \"Fish.com\", \"https://fish.com\", icon: \"heroicons/outline/fire\", target: :_blank\nend\n```\n\n----------------------------------------\n\nTITLE: Parsing Avo Field Values Before Update (Ruby)\nDESCRIPTION: Explains the `update_using` option, allowing preprocessing of a form field's value before it's saved to the database. This example uses it to decode a JSON string from a `:metadata` code field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nfield :metadata,\n  as: :code,\n  update_using: -> do\n    ActiveSupport::JSON.decode(value)\n  end\n```\n\n----------------------------------------\n\nTITLE: Auto-Closing Suggestions Dropdown on Select - Ruby\nDESCRIPTION: Demonstrates use of 'close_on_select: true' to close the suggestions dropdown immediately after a tag is chosen in an Avo tags field. Takes a lambda suggestion list from the Post model. Useful for reducing clicks and streamlining user workflow; no external requirements.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nfield :items,\n  as: :tags,\n  suggestions: -> { Post.tags_suggestions },\n  close_on_select: true\n```\n\n----------------------------------------\n\nTITLE: Add FriendlyID gem to Gemfile\nDESCRIPTION: Adds the `friendly_id` gem to the application's Gemfile.  This is a prerequisite for using FriendlyID to generate pretty URLs and unique IDs. The gem version is specified as '~> 5.5.0'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/custom-ids.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"friendly_id\", \"~> 5.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Authorizing ransackable attributes for filtering - Ruby\nDESCRIPTION: These Ruby snippets show how to authorize which model attributes are searchable and filterable with Ransack. The first example explicitly lists filterable fields as strings, which Ransack requires. The alternative example uses a helper method to authorize all attributes at once. Inputs are the model class and allowed attributes; output enables filtering on specific columns in Avo's dynamic filters. This is crucial for correct backend query construction and to avoid symbol usage in the attribute list.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Project < ApplicationRecord\n  def self.ransackable_attributes(auth_object = nil)\n    [\"status\", \"stage\", \"country\"] # the array items should be strings not symbols\n  end\nend\n\n# Or authorize ALL attributes at once\n\nclass Project < ApplicationRecord\n  def self.ransackable_attributes(auth_object = nil)\n    authorizable_ransackable_attributes\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Computed Field Example in Avo\nDESCRIPTION: This code demonstrates how to define a computed field in Avo using a block. The block accesses the `record` to compile the full name. The execution context provides the `record`, `resource`, `view`, `view_context`, `request`, and `current_user` to the block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/execution-context.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :full_name, as: :text do\n  \"#{record.first_name} #{record.last_name}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Filter Button Label in Ruby\nDESCRIPTION: Shows how to customize the label displayed on the button that applies the filter using `self.button_label`. Similar to `self.name`, it accepts a static string or a lambda (v3.14.0+) for dynamic content, providing access to Avo::ExecutionContext.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nself.button_label = \"Filter by user names\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Requires Avo v3.14.0+\nself.button_label = -> { I18n.t(\"avo.filter.button_label\") }\n```\n\n----------------------------------------\n\nTITLE: Integrating Rich Text Editors with Media Library\nDESCRIPTION: Examples of field definitions for trix, rhino, and markdown editors that will automatically integrate with the Media Library feature.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/media-library.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :trix\nfield :body, as: :rhino\nfield :body, as: :markdown\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Value for a Select Filter in Ruby\nDESCRIPTION: Illustrates how to pre-select an option in a Select filter by implementing the optional `default` method. This method should return the key (as a string or symbol) of the option that should be selected by default.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::Published < Avo::Filters::SelectFilter\n  # ... (name, apply, options methods omitted for brevity)\n\n  def default\n    :published\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for Custom Filter Value Endpoints in Ruby on Rails\nDESCRIPTION: Sets up routing for a custom Avo resource endpoint to expose the tags method defined in the CitiesController. Uses conditional routing for the Avo engine to namespace the route under resources/cities/tags. This enables frontend calls to fetch dynamic filter options from the defined controller action. The routes file must integrate with Rails routing DSL and the Avo engine.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # your routes...\nend\n\nif defined? ::Avo\n  Avo::Engine.routes.draw do\n    scope :resources do\n      get \"cities/tags\", to: \"cities#tags\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Dividers on Dashboards in Ruby\nDESCRIPTION: This code shows how to add dividers between cards on an Avo dashboard to improve organization. The `divider` method is used within the `cards` method of the dashboard class, allowing you to specify a label for the divider or simply create a visual separation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::Dashy < Avo::Dashboards::BaseDashboard\n  def cards\n    card Avo::Cards::ExampleColumnChart\n    card Avo::Cards::ExamplePieChart\n    card Avo::Cards::ExampleBarChart\n    divider label: \"Custom partials\"\n    card Avo::Cards::ExampleCustomPartial\n    card Avo::Cards::MapCard\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Row Control Settings - Ruby\nDESCRIPTION: This snippet demonstrates how to configure global row control settings within the Avo framework. It uses `Avo.configure` to set the `resource_row_controls_config` which controls the placement, floating, and hover behavior of row controls across all resources. This configuration resides in `config/initializers/avo.rb` and allows for overriding settings on a resource level.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/table-view.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.resource_row_controls_config = {\n    placement: :right,\n    float: false,\n    show_on_hover: false\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring a Codemirror Code Editor Field in Ruby\nDESCRIPTION: This snippet demonstrates how to declare a code editor field in Ruby using the codemirror package, setting the field to use the 'dracula' theme and 'css' syntax highlighting. Requires the codemirror package and integration in the relevant Ruby context. The parameters include 'theme' for the visual style and 'language' for syntax highlighting. The expected input is CSS code; output is code editing functionality with theming and highlighting applied. This field will be hidden in Index views by default and is limited to provided codemirror language and theme options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/code.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :custom_css, as: :code, theme: 'dracula', language: 'css'\n```\n\n----------------------------------------\n\nTITLE: Configuring Fields to Show in Preview Popup\nDESCRIPTION: This snippet demonstrates how to specify which fields are visible within the preview popup by adding the `show_on :preview` option to the desired fields. It allows customization of the preview content similar to view visibility settings.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/preview.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n  field :name, as: :text, show_on :preview\n```\n\n----------------------------------------\n\nTITLE: Using Custom Field in Resource (Ruby)\nDESCRIPTION: This Ruby code demonstrates how to incorporate the custom `progress_bar` field into an Avo resource (`Project`).  It defines the resource's title and uses the `field` method to add the custom field to the resource's fields. The `as: :progress_bar` option tells Avo to use the custom field component.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :progress, as: :progress_bar\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Resource Description Based on View and User Roles in Ruby\nDESCRIPTION: This Ruby class defines a resource for User in Avo, setting a descriptive text that varies based on the view context (:index or others) and the current user's admin status. It depends on objects like view, current_user, and record to generate contextual descriptions for resource pages.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_29\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.title = :name\n  self.description = -> do\n    if view == :index\n    \"These are the users of the app\"\n    else\n      if current_user.is_admin?\n        \"You can update all properties for this user: #{record.id}\"\n      else\n        \"You can update some properties for this user: #{record.id}\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Gems for Money Field (Ruby)\nDESCRIPTION: This snippet demonstrates adding required gems to the Gemfile for the money field to function.  It installs `avo-money_field` and `money-rails`.  The `money-rails` gem is essential for handling money-related data in the model.  The version constraints are included to maintain compatibility.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/money.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\n\ngem \"avo-money_field\"\ngem \"money-rails\", \"~> 1.12\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Table Inheritance (STI) in Avo\nDESCRIPTION: Example of Ruby code showing how to implement Single Table Inheritance with User and SuperUser models, and how to properly configure the Avo resource with model_class to handle STI correctly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\nend\n\n# app/models/super_user.rb\nclass SuperUser < User\nend\n\n# User.all.map(&:class) => [User, SuperUser]\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/super_user.rb\nclass Avo::Resources::SuperUser < Avo::BaseResource\n  self.title = :name\n  self.includes = []\n  self.model_class = \"SuperUser\"\n\n  def fields\n    field :id, as: :id\n    field :name, as: :text\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Associations on Show and Edit Views with `self.single_includes` in Ruby\nDESCRIPTION: This configuration uses `self.single_includes` to eager load associations specifically for the Show and Edit views, optimizing data loading when these views are accessed. It is used to improve performance by reducing database queries.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_31\n\nLANGUAGE: Ruby\nCODE:\n```\nself.single_includes\n```\n\n----------------------------------------\n\nTITLE: Adding All Resources Excluding Specific Avo Menu Ruby\nDESCRIPTION: Demonstrates using the `all_resources` helper to automatically include all registered Avo resources in a menu group. It shows how to use the `exclude` option with an array of symbols or strings to omit specific resources like `:users` and `:orders`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"App\", icon: \"heroicons/outline/beaker\" do\n  group \"Resources\", icon: \"resources\" do\n    all_resources exclude: [:users, :orders]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Tool with Avo CLI in Bash\nDESCRIPTION: This bash command uses the Rails generator to scaffold a new custom tool called 'dashboard' for Avo. It creates necessary controller, view, and partial files and adds a route to the application's routes. Dependencies: Rails with the Avo gem installed. Input: tool name (here, 'dashboard'); Output: multiple new files and route entries. Ensure you run from the Rails application root.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-tools.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:tool dashboard\n      create  app/views/avo/sidebar/items/_dashboard.html.erb\n      insert  app/controllers/avo/tools_controller.rb\n      create  app/views/avo/tools/dashboard.html.erb\n       route  namespace :avo do\n  get \"dashboard\", to: \"tools#dashboard\"\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a scope with custom query logic\nDESCRIPTION: Shows how to implement a scope with a custom query using a lambda function instead of a model scope.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/scopes.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Scopes::EvenId < Avo::Advanced::Scopes::BaseScope\n  self.name = \"Even\"\n  self.description = \"Only records that have an even ID.\"\n  self.scope = -> { query.where(\"#{resource.model_key}.id % 2 = ?\", \"0\") }\n  self.visible = -> { true }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Tools Controller for custom Avo tools\nDESCRIPTION: Example of the controller code generated for managing custom tools in Avo, with a specific action for the dashboard tool.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-tools.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::ToolsController < Avo::ApplicationController\n  def dashboard\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Auto-Generated Association Policy (Ruby)\nDESCRIPTION: Demonstrates how to define a custom implementation for an association policy method (like `destroy_comments?`) even when using the `inherit_association_from_policy` helper, allowing for specific overrides of the default inherited logic.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\ninherit_association_from_policy :comments, CommentPolicy\n\ndef destroy_comments?\n  false\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a custom dashboard view with Avo components\nDESCRIPTION: ERB template for a custom dashboard tool in Avo, demonstrating the use of Avo panel components, custom helpers, and proper structure for tool views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-tools.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new title: 'Dashboard', display_breadcrumbs: true do |c| %>\n    <% c.with_tools do %>\n      <div class=\"text-sm italic\">This is the panels tools section.</div>\n    <% end %>\n\n    <% c.with_body do %>\n      <div class=\"flex flex-col justify-between py-6 min-h-24\">\n        <div class=\"px-6 space-y-4\">\n          <h3>What a nice new tool 👋</h3>\n\n          <%= custom_helper %>\n        </div>\n      </div>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Providing Suggestions for Text-Based Dynamic Filters in Avo using Ruby\nDESCRIPTION: Explains how to enhance text-input filters by providing suggestions using the `suggestions` option, which can be an array of strings, a proc returning an array, or an array of hashes (with value, label, and optional avatar keys, for tags filters). This feature improves user experience by showing relevant options dynamically, including support for accessing `params` or `parent_record` within procs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# Using field's filterable option\nfield :first_name,\n  as: :text,\n  filterable: {\n    # ...\n    suggestions: [\"Avo\", \"Cado\"]\n    # ...\n  }\n\n# Using dynamic_filter method\ndynamic_filter :first_name,\n  suggestions: [\"Avo\", \"Cado\"]\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Using field's filterable option\nfield :first_name,\n  as: :text,\n  filterable: {\n    # ...\n    suggestions: -> { [\"Avo\", \"Cado\", params[:extra_suggestion]] }\n    # ...\n  }\n\n# Using dynamic_filter method\ndynamic_filter :first_name,\n  suggestions: -> { [\"Avo\", \"Cado\", params[:extra_suggestion]] }\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Using field's filterable option\nfield :tags,\n  as: :tags,\n  filterable: {\n    # ...\n    suggestions: [\n      {\n        value: 1,\n        label: 'one',\n        avatar: 'https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop'\n      }\n    ]\n    # ...\n  }\n\n# Using dynamic_filter method\ndynamic_filter :tags,\n  suggestions: [\n    {\n      value: 1,\n      label: 'one',\n      avatar: 'https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop'\n    }\n  ]\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Using field's filterable option\nfield :tags,\n  as: :tags,\n  filterable: {\n    # ...\n    suggestions: -> {\n      [\n        {\n          value: 1,\n          label: 'one', # or params[:something]\n          avatar: 'https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop'\n        }\n      ]\n    }\n    # ...\n  }\n\n# Using dynamic_filter method\ndynamic_filter :tags,\n  suggestions: -> {\n    [\n      {\n        value: 1,\n        label: 'one', # or params[:something]\n        avatar: 'https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop'\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Cards in Avo Resource\nDESCRIPTION: This code defines the `cards` method within an Avo resource to add custom cards to the resource's UI. It demonstrates how to include pre-defined cards and configure their properties such as label, description, and visibility based on the resource context. The cards are displayed in the Avo interface to provide additional information or functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id\n    field :name, as: :text\n    field :email, as: :text\n    field :roles, as: :boolean_group, options: {admin: \"Administrator\", manager: \"Manager\", writer: \"Writer\"}\n  end\n\n  def cards\n    card Avo::Cards::ExampleAreaChart, cols: 3\n    card Avo::Cards::ExampleMetric, cols: 2\n    card Avo::Cards::ExampleMetric,\n      label: \"Active users metric\",\n      description: \"Count of the active users.\",\n      arguments: { active_users: true },\n      visible: -> { !resource.view.form? }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default and Forced Locales in Ruby\nDESCRIPTION: This snippet defines two methods to manage the application's locale. `set_default_locale` sets the `I18n.locale` and `I18n.default_locale` based on the `set_locale` parameter, effectively changing the locale for all subsequent requests. `set_force_locale` temporarily changes the locale for a specific block of code using the `force_locale` parameter, ensuring the locale reverts to the original value after the block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/multilingual-content.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef set_default_locale\n  I18n.locale = params[:set_locale] || I18n.default_locale\n\n  I18n.default_locale = I18n.locale\nend\n\n# Temporary set the locale\ndef set_force_locale\n  if params[:force_locale].present?\n    initial_locale = I18n.locale.to_s.dup\n    I18n.locale = params[:force_locale]\n    yield\n    I18n.locale = initial_locale\n  else\n    yield\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Dynamically Disabling Avo Features Based on User Role (Ruby)\nDESCRIPTION: Illustrates dynamically disabling Avo features using a lambda for `config.disabled_features` in the Avo initializer. This example disables `:global_search` for users who are not admins by checking `current_user.is_admin?`. The lambda provides access to the `Avo::ExecutionContext`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.disabled_features = -> { current_user.is_admin? ? [] : [:global_search] }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Context with Session-Based Tenancy in Ruby\nDESCRIPTION: Adjusts the Multitenancy concern's set_tenant method to determine tenant from session data or default to the current user's first account. This enables session-based tenancy without changing routing patterns. The method uses session[:tenant_id] or falls back to current_user.accounts.first. The rest of the concern's structure remains consistent with route-based tenancy.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/multitenancy.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Multitenancy\n  extend ActiveSupport::Concern\n\n  included do\n    prepend_before_action :set_tenant\n  end\n\n  def set_tenant\n    Avo::Current.tenant = Account.find session[:tenant_id] || current_user.accounts.first\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Authorizing Array Field Association Viewing - Application Policy - Ruby\nDESCRIPTION: Since the Avo `Array` field inherits authorization behavior from `has_many`, this Ruby snippet demonstrates how to explicitly authorize viewing the associated data in a policy file. Define a method named `view_<association_name>?` (replacing `<association_name>` with the field name, e.g., `attendees`) and return `true` to grant permission.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/array.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/policies/course_policy.rb\nclass CoursePolicy < ApplicationPolicy\n  def view_attendees? = true\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Avo Field Layout to Stacked\nDESCRIPTION: Shows how to apply the `stacked: true` option to a specific field definition. This overrides the default inline layout for that field, causing its label and input/display area to occupy the full available horizontal space, which is useful for complex or wide field types like `key_value`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_25\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :meta, as: :key_value, stacked: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Panel Behavior in Course Resource\nDESCRIPTION: Resource configuration that keeps the filters panel open when filters are applied. This improves user experience by allowing users to make multiple filter selections without reopening the panel.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseResource < Avo::BaseResource\n  self.keep_filters_panel_open = true\n\n  field :id, as: :id\n  field :name, as: :text\n  field :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h\n  field :city, as: :select, options: Course.cities.values.flatten.map { |country| [country, country] }.to_h\n  field :links, as: :has_many, searchable: true, placeholder: \"Click to choose a link\"\n\n  filter CourseCountryFilter\n  filter CourseCityFilter\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Option for Record Link Field in Avo with Ruby\nDESCRIPTION: This snippet demonstrates how to configure the 'target' option in the record_link field for an Avo resource, allowing links to open in a new tab (_blank) or self. The example uses 'target: :blank', but you can set it to :self or nil as needed. This affects the HTML 'target' attribute of the generated link and requires no additional dependencies beyond Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/record_link.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :post, as: :record_link, target: :blank\n```\n\n----------------------------------------\n\nTITLE: Implementing View Scope Methods in Avo Resources Using a Ruby Concern\nDESCRIPTION: This Ruby module leverages ActiveSupport::Concern to add class methods for defining fields scoped to specific Avo resource views: index, show, create, and edit. Each method wraps a given block with 'with_options', specifying the context via the 'only_on' option, allowing subsequent field declarations to be automatically filtered per view. It is intended as a reusable mixin to cleanly organize resource fields without inheritance complications. Dependencies include ActiveSupport for concern functionality and the Avo framework's 'with_options' method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/manage-information-heavy-resources.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"active_support/concern\"\n\nmodule ResourceExtensions\n  extend ActiveSupport::Concern\n\n  class_methods do\n    def index(&block)\n      with_options only_on: :index, &block\n    end\n\n    def show(&block)\n      with_options only_on: :show, &block\n    end\n\n    def create(&block)\n      with_options only_on: :new, &block\n    end\n\n    def edit(&block)\n      with_options only_on: :edit, &block\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Group Field in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to define a `BooleanGroup` field within an Avo context. It specifies the field name, and its options, which map to the keys in the database.  The `options` argument provides a mapping between user-friendly labels and underlying boolean values stored in the database. The field targets a `Hash` that stores boolean values in the database.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/boolean_group.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :roles, as: :boolean_group, name: 'User roles', options: { admin: 'Administrator', manager: 'Manager', writer: 'Writer' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Static UI Persistence Driver in Avo (Ruby)\nDESCRIPTION: Enables UI state persistence (like pagination and static filters) by setting the `:driver` within `config.persistence` in the Avo initializer. This example uses `:session` storage for persistence.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_31\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.persistence = {\n    driver: :session\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting a default value for a field in Avo using Ruby\nDESCRIPTION: This code snippet shows how to set a default value for a field on the New view using the `default` option.  It can accept either a static value or a block. The block gets executed and must return the default value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\n# using a value\nfield :name, as: :text, default: 'John'\n\n# using a callback function\nfield :level, as: :select, options: { 'Beginner': :beginner, 'Advanced': :advanced }, default: -> { Time.now.hour < 12 ? 'advanced' : 'beginner' }\n```\n\n----------------------------------------\n\nTITLE: Configuring fetch_values_from with String in Avo HQ\nDESCRIPTION: Sets up a dynamic filter to fetch values from a specified endpoint using a static string. The endpoint should return objects with value, label and optional avatar properties.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nfetch_values_from: \"/avo-filters/resources/cities/tags\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Rails Helper (Ruby)\nDESCRIPTION: Defines a Ruby module `PostsHelper` containing a method `extract_excerpt`. This method uses `ActionView::Base.full_sanitizer` to sanitize HTML and `truncate` to shorten a given string, intended for use within Avo resource fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/use-own-helpers-in-resource-files.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/helpers/posts_helper.rb\nmodule PostsHelper\n  def extract_excerpt(body)\n    ActionView::Base.full_sanitizer.sanitize(body).truncate 120\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Assigning Stimulus Controllers to Avo Resources\nDESCRIPTION: Shows how to enable one or more stimulus controllers on an Avo resource file using the stimulus_controllers option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/stimulus-integration.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Course < Avo::BaseResource\n  self.stimulus_controllers = \"course-resource\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Course < Avo::BaseResource\n  self.stimulus_controllers = \"course-resource select-field association-fields\"\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Map Card with Embedded iFrame\nDESCRIPTION: Implementation of a map card using a partial with an embedded Google Maps iframe, with header display disabled for flush content rendering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/cards/map_card.rb\nclass Avo::Cards::MapCard < Avo::Cards::PartialCard\n  self.id = \"map_card\"\n  self.label = \"Map card\"\n  self.partial = \"avo/cards/map_card\"\n  self.display_header = false\n  self.cols = 2\n  self.rows = 4\nend\n```\n\n----------------------------------------\n\nTITLE: Adding ActionDispatch::Flash Middleware in Rails\nDESCRIPTION: This code snippet demonstrates how to add the `ActionDispatch::Flash` middleware to a Rails application configured in `api_only` mode. This middleware is necessary for Avo to function correctly.  It should be added to the `config.middleware.use` section of the `application.rb` file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/api-only-app.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"boot\"\n\nrequire \"rails/all\"\n\n# Require the gems listed in Gemfile, including any gems\n# you've limited to :test, :development, or :production.\nBundler.require(*Rails.groups)\n\nmodule RailApi\n  class Application < Rails::Application\n    # Initialize configuration defaults for originally generated Rails version.\n    config.load_defaults 7.0\n\n    # Only loads a smaller set of middleware suitable for API only apps.\n    # Middleware like session, flash, cookies can be added back manually.\n    # Skip views, helpers and assets when generating a new resource.\n    config.api_only = true\n    config.middleware.use ::ActionDispatch::Flash\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Scoping Search Logic for Global vs. Resource Search\nDESCRIPTION: To perform different search queries depending on whether the search is initiated from the global search or the resource index page, check the `params[:global]` flag within the `query` lambda. This allows for tailored search behavior in each context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Order < Avo::BaseResource\n  self.search = {\n    query: -> {\n      if params[:global]\n        # Perform global search\n        query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n      else\n        # Perform resource search\n        query.ransack(id_eq: params[:q], details_cont: params[:q], m: \"or\").result(distinct: false)\n      end\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing KeyValue Field Labels in Avo (Ruby)\nDESCRIPTION: This code snippet shows how to customize the labels for the key header, value header, add row button, and delete row button in an Avo `KeyValue` field. It utilizes the `key_label`, `value_label`, `action_text`, and `delete_text` options to set custom text values. The code depends on the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/key_value.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, # The database field ID\n  as: :key_value, # The field type.\n  key_label: \"Meta key\", # Custom value for key header. Defaults to 'Key'.\n  value_label: \"Meta value\", # Custom value for value header. Defaults to 'Value'.\n  action_text: \"New item\", # Custom value for button to add a row. Defaults to 'Add'.\n  delete_text: \"Remove item\" # Custom value for button to delete a row. Defaults to 'Delete'.\n```\n\n----------------------------------------\n\nTITLE: Conditionally Disabling Global Search\nDESCRIPTION: Demonstrates how to conditionally disable global search based on the current user's role using a callable.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.disabled_features = -> { current_user.is_admin? ? [] : [:global_search] }\nend\n```\n\n----------------------------------------\n\nTITLE: Copying and Modifying Avo::ApplicationController in Ruby\nDESCRIPTION: Demonstrates the approach of copying the entire Avo::ApplicationController source code into the app's own controller file to add custom methods and before_actions like a multitenancy detector. This method works but is fragile, as future updates to Avo can break the app due to mismatched controller code. The snippet includes standard Rails controller protections, action hooks, and modules included by default from Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-application-controller.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Avo\n  class ApplicationController < ::ActionController::Base\n    include Pagy::Backend\n    include Avo::ApplicationHelper\n    include Avo::UrlHelpers\n\n    protect_from_forgery with: :exception\n    around_action :set_avo_locale\n    before_action :multitenancy_detector\n\n    # ... more Avo::ApplicationController methods\n\n    def multitenancy_detector\n      # your logic here\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Link Field with as_html Option in Ruby\nDESCRIPTION: This snippet demonstrates another approach to creating a custom link field. It uses the `as_html` option, allowing direct HTML rendering in the field. The code checks for the presence of a partner. If a partner exists, it generates an HTML link using `link_to`, with the partner's first name as the link text, linked to the partner's detail page URL. This requires the Avo framework and a `partner` association. The output is an HTML link if a partner is present; otherwise, it renders nothing.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/custom-link-field.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# with the as_html option\nfield :partner_home, as: :text, as_html: true do\n  if record.partner.present?\n    link_to record.partner.first_name, avo.resources_partner_url(record.partner.id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache When 'root_path' Changes\nDESCRIPTION: This snippet emphasizes the use of 'Rails.cache.clear' to invalidate cached resource links and controls when routing paths change, ensuring cache consistency. Alternatively, adding 'root_path' to 'cache_hash' can localize cache invalidation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cache.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# To invalidate all cache when root_path changes:\nRails.cache.clear\n\n# Or, override 'cache_hash' to include 'root_path' for targeted invalidation\n```\n\n----------------------------------------\n\nTITLE: Defining a `normalizes` Proc in a Rails Model (Ruby)\nDESCRIPTION: Example of using a `normalizes` proc in an Active Record model. This pattern can cause serialization failures with Avo's 'Select All' feature when filtering on the normalized attribute, leading to a `TypeError: no _dump_data is defined for class Proc`. This issue requires a configuration change for Rails versions before 7.1.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/select-all.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nnormalizes :status, with: ->(status) { status }\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamic Record Count Scope in Avo (Ruby)\nDESCRIPTION: This Ruby snippet defines a custom scope class for Avo that displays a dynamic record count beside the scope name using an HTML span. It utilizes lambda functions for the name, description, scope, and visibility, where the name lambda sanitizes HTML output and includes the result of scoped_query.count. The scope lambda uses custom query logic (query.finished.invert_where), and Tailwind CSS classes are used for styling. Dependencies: Avo, Tailwind CSS integration (optional for styling), and ActiveRecord. The scope assumes access to methods like sanitize, scoped_query, and the existence of finished/invert_where query scopes. Inputs include resource, scope, and query objects; output is a scope with name and description shown in the admin UI. This pattern may impact performance on large datasets due to the count query being executed on each page load.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/display-scope-record-count.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Scopes::Scheduled < Avo::Advanced::Scopes::BaseScope\n  self.name = -> {\n    sanitize(\n      \"Scheduled \" \\\n      \"<span class='bg-gray-500 px-1 text-white text-xs rounded font-semibold'>\" \\\n        \"#{scoped_query.count}\" \\\n      \"</span>\"\n    )\n  }\n  self.description = -> { \"All the scheduled jobs.\" }\n  self.scope = -> { query.finished.invert_where }\n  self.visible = -> { true }\nend\n```\n\n----------------------------------------\n\nTITLE: HasMany Through Association Implementation in Ruby\nDESCRIPTION: Implementation of a HasMany association with the through option in Avo. This code defines a members field that uses a through relationship via memberships to establish the association.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations/has_many.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :members,\n  as: :has_many,\n  through: :memberships\n```\n\n----------------------------------------\n\nTITLE: Using attach_fields with HasMany Through (Ruby)\nDESCRIPTION: This snippet shows the usage of the `attach_fields` option when using `has_many :through` to show extra fields from the join table when attaching related records. It specifies a lambda that defines extra fields, such as a `review` field. If polymorphism is involved, it requires a hidden field to store the type.  This enables a custom form for association.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/has_many.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :patrons,\n  as: :has_many,\n  through: :patronships,\n  attach_fields: -> {\n    field :review, as: :text\n  }\n```\n\n----------------------------------------\n\nTITLE: Override update_success_action - Ruby\nDESCRIPTION: This snippet shows how to override the `update_success_action` method.  It defines the behavior after a resource is updated successfully. It redirects the user to a specified path with a success message.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_success_action\n  respond_to do |format|\n    format.html { redirect_to after_update_path, notice: update_success_message }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Permitting Additional Strong Parameters in Avo Resource (Ruby)\nDESCRIPTION: Configures the Fish resource class to allow extra parameters beyond the default permitted params for CRUD operations, using the `extra_params` attribute. It explicitly permits properties as an array and information as a nested hash with name and history keys. This setup is necessary to enable mass-assignment of those params to the model. Additionally includes the tool definition from the previous snippet. Requires that the model supports receiving these new attributes to avoid assignment errors.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-tools.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.extra_params = [:fish_type, :something_else, properties: [], information: [:name, :history]]\n\n  def fields\n    tool Avo::ResourceTools::FishInformation, show_on: :forms\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Ransack Search for a Resource\nDESCRIPTION: Enable search for a specific Avo resource by setting the `self.search` attribute within the resource class. The `query` lambda receives `params` (including the search string `params[:q]`) and a `query` variable representing the base authorized scope, allowing you to apply Ransack matchers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(name_eq: params[:q]).result(distinct: false) }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Links and Default Controls in Avo Show Controls (Ruby)\nDESCRIPTION: Illustrates how to inject custom UI elements such as a link before the default action controls in the `show_controls` block of an Avo resource. The example uses a lambda to prepend a 'View on site' hyperlink targeting a new tab before invoking `default_controls` to append the standard controls. This allows flexible UI customization without redefining all control buttons.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customizable-controls.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nself.show_controls = -> do\n  # This link will be added before all other controls.\n  link_to \"View on site\", post_path(record), target: :_blank\n  default_controls\nend\n```\n\n----------------------------------------\n\nTITLE: Add Avo Kanban Gem and Install Dependencies\nDESCRIPTION: Add the `avo-kanban` gem to your application's Gemfile to include the Kanban board feature. After adding the gem, run `bundle install` to download and integrate the dependency into your project.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/kanban-boards.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ngem \"avo-kanban\", source: \"https://packager.dev/avo-hq/\"\n```\n\nLANGUAGE: Bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Adding Limit Method to Ruby Array Class for Compatibility\nDESCRIPTION: Extends Ruby's built-in Array class by adding a 'limit' method as an alias to the existing 'take' method. This allows calling limit(upto) on any array to retrieve up to the specified number of elements, facilitating consistency in interface possibly expected by other parts of the application or frameworks.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rest-api-integration.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Array\n  def limit(upto)\n    take(upto)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Custom List Dropdown with Actions and Links in Avo - Ruby\nDESCRIPTION: This code creates a custom 'list' dropdown control in Avo version 3.13+, combining custom links and actions with icons and additional properties. The list block accepts only link_to and action elements, each supporting options like target and icon. It demonstrates grouping related navigation and action items into a unified dropdown. Avo 3.13 or later is required as well as custom actions and resource classes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customizable-controls.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nlist label: \"Custom Index List\", icon: \"heroicons/outline/cube-transparent\", style: :primary, color: :slate, title: \"A custom list\" do\n  link_to \"Google\", \"https://google.com\", icon: \"heroicons/outline/academic-cap\"\n  action Avo::Actions::Sub::DummyAction, icon: \"heroicons/outline/globe\"\n  link_to \"Fish.com\", \"https://fish.com\", icon: \"heroicons/outline/fire\", target: :_blank\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Link with Ruby using as_html\nDESCRIPTION: This snippet builds a custom link field using the `as_html` option. The `as_html: true` setting instructs Avo to treat the block's return value as raw HTML.  A conditional statement ensures that the link is only rendered if a partner exists.  It uses the `link_to` helper to generate the HTML link. The `record.partner.first_name` serves as the link text and `avo.resources_partner_url(record.partner.id)` provides the URL. It relies on the Avo framework. A resource model is required. Input: A partner record. Output: An HTML link to the partner resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/custom-link-field.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :partner_home, as: :text, as_html: true do\n  if record.partner.present?\n    link_to record.partner.first_name, avo.resources_partner_url(record.partner.id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource with Filter Arguments in Avo\nDESCRIPTION: This example shows how to pass arguments to a filter when attaching it to a resource. The Fish resource passes a case_insensitive argument to the NameFilter that will affect its behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id\n    field :name, as: :text\n    field :user, as: :belongs_to\n    field :type, as: :text, hide_on: :forms\n  end\n\n  def filters\n    filter Avo::Filters::NameFilter, arguments: {\n      case_insensitive: true\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Routes to Avo Engine in Rails\nDESCRIPTION: Example of adding custom routes to the Avo engine in a Rails application. Shows how to create a new route for switching accounts and appending a route to a resource controller, along with implementing a corresponding controller.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/routing.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# routes.rb\nRails.application.routes.draw do\n  mount_avo\n\n  # your other app routes\nend\n\nif defined? ::Avo\n  Avo::Engine.routes.draw do\n    # new route in new controller\n    put \"switch_accounts/:id\", to: \"switch_accounts#update\", as: :switch_account\n\n    scope :resources do\n      # append a route to a resource controller\n      get \"courses/cities\", to: \"courses#cities\"\n    end\n  end\nend\n\n# app/controllers/avo/switch_accounts_controller.rb\nclass Avo::SwitchAccountsController < Avo::ApplicationController\n  def update\n    session[:tenant_id] = params[:id]\n\n    redirect_back fallback_location: root_path\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Computed Value for Avo Gravatar Field (Ruby)\nDESCRIPTION: This snippet illustrates how to provide a computed value for the `Gravatar` field using a block. This allows you to dynamically generate the email address used for the Gravatar lookup based on other attributes of the record, such as a username.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/gravatar.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :email, as: :gravatar do\n  \"#{record.google_username}@gmail.com\"\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Tool Routes in Rails\nDESCRIPTION: This snippet demonstrates how to correctly place Avo custom tool routes within the Avo engine's routing scope. This ensures that URL helpers correctly include the account ID in the params when using route-level multitenancy.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multitenancy.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  devise_for :users\n\n  # Your routes\n\n  authenticate :user, -> user { user.admin? } do\n    mount_avo\n  end\nend\n\n# Move Avo custom tools routes to Avo engine\nif defined? ::Avo\n  Avo::Engine.routes.draw do\n    # make sure you don't add the `avo/` prefix to the controller below\n    get 'custom_page', to: \"tools#custom_page\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Authorization Rules for Avo Dashboards\nDESCRIPTION: Demonstrates how to implement dashboard authorization using a block that can access the current user, parameters, request, context, and view context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dashboards.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::Dashy < Avo::Dashboards::BaseDashboard\n  self.id = 'dashy'\n  self.authorize = -> do\n    # You have access to current_user, params, request, context, adn view_context.\n    current_user.is_admin?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using close_modal in an Avo Action (Ruby)\nDESCRIPTION: Illustrates how to use the `close_modal` response method in an Avo action's `handle` method. After performing some operation and potentially adding success or error messages, calling `close_modal` will flash all accumulated messages and close the action modal using Turbo Streams without a page reload, keeping the underlying form or page state intact. `do_nothing` is mentioned as an alias.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Actions::CloseModal < Avo::BaseAction\n  self.name = \"Close modal\"\n\n  def handle(**args)\n    # do_something_here\n    succeed \"Modal closed!!\"\n    close_modal\n    # or\n    do_nothing\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom ProgressBarField in Avo - Ruby\nDESCRIPTION: Defines a new Ruby class 'ProgressBarField' inheriting from 'Avo::Fields::BaseField' to register a custom progress bar field in Avo's admin panel. The initializer passes all arguments to the superclass and provides a base for further customization or options. This class is used to associate the progress bar type with resource fields for UI rendering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Fields::ProgressBarField < Avo::Fields::BaseField\n  def initialize(name, **args, &block)\n    super(name, **args, &block)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Avo License Key via ENV Variable - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to configure the Avo license key using an environment variable within the `config/initializers/avo.rb` initializer. This approach allows for secure and dynamic license key management, especially in production environments. The `ENV[\"AVO_LICENSE_KEY\"]` retrieves the license key from the environment variables, which is then assigned to the `config.license_key` attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/license-troubleshooting.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.license_key = ENV[\"AVO_LICENSE_KEY\"]\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Tool Instance Variables and Methods in ERB Partial\nDESCRIPTION: Demonstrates an ERB partial that renders an Avo panel and displays instance variables and method call results from the resource tool instance `tool`. It illustrates how to access Ruby instance data and methods defined in the tool class from within the view partial, enabling cleaner logic separation. Assumes the presence of the `tool` object injected into the partial and the related Avo Panel component system to provide UI structure.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-tools.md#_snippet_8\n\nLANGUAGE: erb\nCODE:\n```\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new title: \"Post info\" do |c| %>\n\n    <% c.with_body do %>\n      <p>\n        This variable was declared in the initializer:\n        <%= tool.foo %>\n      </p>\n\n      <p>\n        This is a method called on the tool:\n        <%= tool.custom_method_call %>\n      </p>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Controls to the 'tools' Slot of Avo::PanelComponent (ERB)\nDESCRIPTION: Illustrates how to use the 'tools' slot within an Avo::PanelComponent to add controls, such as links created with the `a_link` helper. This slot is typically used for actions related to the panel's content and collapses under the title on smaller screens.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-components/avo-panel-component.md#_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new(name: \"Dashboard\") do |c| %>\n  <% c.with_tools do %>\n    <%= a_link('/admin', icon: 'heroicons/solid/academic-cap', style: :primary) do %>\n      Admin\n    <% end %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Items Avo Menu Ruby\nDESCRIPTION: Illustrates how to use the `render` method within the Avo menu configuration to include custom renderable objects like partials or View Components. It shows examples of rendering partials with and without locals, and rendering a View Component instance.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrender \"avo/sidebar/items/custom_tool\"\nrender \"avo/sidebar/items/custom_tool\", locals: { something: :here }\nrender Super::Dooper::Component.new(something: :here)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Context in Avo\nDESCRIPTION: Configure a custom context object that can hold arbitrary data like request parameters, which can be accessed throughout Avo resources and actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.set_context do\n    {\n      foo: 'bar',\n      params: request.params,\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Tabs in Avo Resource (Ruby)\nDESCRIPTION: This snippet demonstrates how to define tabs within an Avo resource to group panels and fields. The `tabs` block is used to create tab groups, and the `tab` block defines individual tabs with a name and description. Fields and panels are then placed within each tab to organize the resource's content. Association fields like `has_many` and `has_and_belongs_to_many` don't need to be wrapped in panels.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/tabs.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserResource < Avo::BaseResource\n  field :id, as: :id, link_to_resource: true\n  field :email, as: :text, name: \"User Email\", required: true\n\n  tabs do\n    tab \"User information\", description: \"Some information about this user\" do\n      panel do\n        field :first_name, as: :text, required: true, placeholder: \"John\"\n        field :last_name, as: :text, required: true, placeholder: \"Doe\"\n        field :active, as: :boolean, name: \"Is active\", show_on: :show\n      end\n    end\n\n    field :teams, as: :has_and_belongs_to_many\n    field :people, as: :has_many\n    field :spouses, as: :has_many\n    field :projects, as: :has_and_belongs_to_many\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Model Method (Ruby)\nDESCRIPTION: This Ruby code shows how to fetch data for an array field by defining a method on the associated model. Avo will call this method to retrieve the data when the field is rendered. In this case, the `attendees` method within the `Course` model fetches the first 6 users from the `User` model.  This allows dynamic data population from the database.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/array.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Course < ApplicationRecord\n  def attendees\n    User.all.first(6) # Example fetching first 6 users\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Reloading Records After Avo Action (Ruby)\nDESCRIPTION: Shows how to use `reload_records` or its alias `reload_record` within an Avo action's `handle` method to update the view of specific records on an index page using Turbo Stream after they have been modified by the action. This method accepts either an array of records or a single record to refresh their corresponding rows in the table view. Note: This feature is specifically for Index pages, not associations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\ndef handle(query:, fields:, **args)\n  query.each do |record|\n    record.update! active: !record.active\n\n    record.notify fields[:message] if fields[:notify_user]\n  end\n\n  reload_records(query)\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nreload_records([record_1, record_2])\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nreload_record(record)\n```\n\n----------------------------------------\n\nTITLE: Configuring `avo_edit_field` with Standard Options (ERB)\nDESCRIPTION: Example of using `avo_edit_field` with common Avo field options like `help` (for displaying help text), `readonly` (using a lambda for conditional logic based on `current_user`), `placeholder`, and `nullable`. These options customize the field's appearance and behavior in the rendered form.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-field-components.md#_snippet_4\n\nLANGUAGE: ERB\nCODE:\n```\n<%= avo_edit_field :name, as: :text, form: form, help: \"The user's name\", readonly: -> { !current_user.is_admin? }, placeholder: \"John Doe\", nullable: true %>\n```\n\n----------------------------------------\n\nTITLE: Pre-made Stimulus Methods: `resource-edit#toggle` in Ruby\nDESCRIPTION: Shows how to trigger the built-in `toggle` method from the `resource-edit` Stimulus controller to hide/show a form field or wrapper by referencing the target parameter. Used to toggle visibility based on interactions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :has_country, as: :boolean, html: {\n  edit: {\n    input: {\n      data: {\n        action: \"input->resource-edit#toggle\",\n        resource_edit_toggle_target_param: \"countrySelectWrapper\"\n      }\n    }\n  }\n}\nfield :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h\n```\n\n----------------------------------------\n\nTITLE: Adding Iconed Links to the Avo Profile Menu in Ruby\nDESCRIPTION: This example shows how to add custom links with icons to the profile menu in Avo by configuring `config.profile_menu`. Using the `link_to` helper, a link labeled 'Profile' is added with a path and a user-circle icon. This enhances the profile menu UI and is placed inside the Avo initializer configuration block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.profile_menu = -> {\n    link_to \"Profile\", path: \"/profile\", icon: \"user-circle\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Avo Action Reload Response\nDESCRIPTION: This code demonstrates the use of the `reload` response in an Avo action. It updates the active status of each project and then triggers a full-page reload after displaying a success message.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(**args)\n  models = args[:models]\n\n  models.each do |project|\n    project.update active: false\n  end\n\n  succeed 'Done!'\n  reload\nend\n```\n\n----------------------------------------\n\nTITLE: Updating TailwindCSS 4 rounded utility classes\nDESCRIPTION: Example of updating HTML classes to accommodate TailwindCSS 4's renamed rounded utilities, showing both the old and new class names.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tailwind-4-migration.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"rounded-sm\"> <!-- TailwindCSS 3 -->  // [!code --]\n<div class=\"rounded-xs\"> <!-- TailwindCSS 4 --> // [!code ++]\n  Content\n</div>\n\n<div class=\"rounded\"> <!-- TailwindCSS 3 -->  // [!code --]\n<div class=\"rounded-sm\"> <!-- TailwindCSS 4 --> // [!code ++]\n  Content\n</div>\n```\n\n----------------------------------------\n\nTITLE: Controlling Field Visibility with Helpers - Ruby\nDESCRIPTION: In ProgressBarField, the hide_on helper is called in the initializer to control visibility in forms. This ensures the field does not appear in specified views, supporting view-specific customization. Prerequisite: Avo framework with configured helpers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/fields/progress_bar_field.rb\nclass ProgressBarField < Avo::Fields::BaseField\n  attr_reader :max\n  attr_reader :step\n  attr_reader :display_value\n  attr_reader :value_suffix\n\n  def initialize(name, **args, &block)\n    super(name, **args, &block)\n\n    @max = args[:max] || 100\n    @step = args[:step] || 1\n    @display_value = args[:display_value] || false\n    @value_suffix = args[:value_suffix] || nil\n\n    hide_on :forms\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Field Options with avo_edit_field (ERB)\nDESCRIPTION: This snippet illustrates how to use various field options such as `help`, `readonly`, `placeholder`, and `nullable` with the `avo_edit_field` helper. It allows customizing the field's behavior and appearance based on specific conditions, such as the current user's role.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-field-components.md#_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<%= avo_edit_field :name, as: :text, form: form, help: \"The user's name\", readonly: -> { !current_user.is_admin? }, placeholder: \"John Doe\", nullable: true %>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Fields with `avo_field` (ERB)\nDESCRIPTION: Demonstrates the `avo_field` helper, which conditionally renders either a show field (`avo_show_field`) or an edit field (`avo_edit_field`) based on the value of the `view` option. This option can be set explicitly to `:show` or `:edit`, or dynamically using a helper method (e.g., `ExampleHelper.view_conditional`). This simplifies logic when a partial needs to adapt to different view contexts (show vs. edit/new).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-field-components.md#_snippet_5\n\nLANGUAGE: ERB\nCODE:\n```\n<%= avo_field :name, as: :text, view: :show %>\n<%= avo_field :name, as: :text, view: :edit %>\n<%= avo_field :name, as: :text, view: ExampleHelper.view_conditional %>\n```\n\n----------------------------------------\n\nTITLE: Creating Sections in Avo Menu\nDESCRIPTION: Example of creating a section in the Avo menu. Sections are large categories that can contain grouped menu items, with support for icons and nesting of resources.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"Resources\", icon: \"heroicons/outline/academic-cap\" do\n  resource :course\n  resource :course_link\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Hatchbox Environment Variable for Bundler Authentication Using YAML\nDESCRIPTION: This snippet defines the environment variable BUNDLE_PACKAGER__DEV in a Hatchbox app's environment tab in YAML format. It enables bundler to authenticate to the private gem server with the provided token when deploying or running the app on Hatchbox. The value 'xxx' should be replaced with the actual token. It must be set through the Hatchbox interface or configuration file supporting YAML environment variables.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/gem-server-authentication.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nBUNDLE_PACKAGER__DEV: xxx\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Display of Ordering Buttons\nDESCRIPTION: Enhances the ordering functionality by displaying the order buttons inline rather than in a popover. This makes reordering more accessible for resources that require frequent reordering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/records-reordering.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  self.ordering = {\n    display_inline: true,\n    visible_on: :index,\n    actions: {\n      higher: -> { record.move_higher },\n      lower: -> { record.move_lower },\n      to_top: -> { record.move_to_top },\n      to_bottom: -> { record.move_to_bottom },\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Field Specific Options (Ruby)\nDESCRIPTION: This Ruby code extends the `ProgressBarField` to include field-specific options such as `max`, `step`, `display_value`, and `value_suffix`. It initializes these attributes with default values within the `initialize` method, enabling customization through field declaration or configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Fields::ProgressBarField < Avo::Fields::BaseField\n  attr_reader :max\n  attr_reader :step\n  attr_reader :display_value\n  attr_reader :value_suffix\n\n  def initialize(name, **args, &block)\n    super(name, **args, &block)\n\n    @max = 100\n    @step = 1\n    @display_value = false\n    @value_suffix = nil\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Composing Dynamic Fields with HTML Attributes and Stimulus\nDESCRIPTION: Demonstrates how to make fields respond to each other by combining HTML attributes with Stimulus controllers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/stimulus-integration.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n  field :has_skills, as: :boolean, html: {\n    edit: {\n      input: {\n        data: {\n          # On click run the toggleSkills method on the toggle-fields controller\n          action: \"input->toggle-fields#toggleSkills\",\n        }\n      }\n    }\n  }\n  field :skills, as: :tags, html: {\n    edit: {\n      wrapper: {\n        # hide this field by default\n        classes: \"hidden\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Rendering partials using the render method in Avo menu\nDESCRIPTION: Demonstrates rendering renderable objects, such as partials or View Components, in an Avo menu. It includes examples of passing locals to partials.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrender \"avo/sidebar/items/custom_tool\"\nrender \"avo/sidebar/items/custom_tool\", locals: { something: :here }\nrender Super::Dooper::Component.new(something: :here)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Metric Card Query\nDESCRIPTION: This snippet shows how to calculate and display data in a metric card using the `query` and `result` methods. It accesses the `range` parameter to determine the time window to use for data aggregation, calculating user counts from a database, and finally calling `result` with the calculated count. Depends on the Avo framework and a database connection. It uses the model `User` and the concept of date ranges and counts.  The output is the computed count to be shown on the card.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = 'users_metric'\n  self.label = 'Users count'\n  self.description = 'Some tiny description'\n  self.cols = 1\n  # self.rows = 1\n  # self.initial_range = 30\n  # self.ranges = {\n  #   \"7 days\": 7,\n  #   \"30 days\": 30,\n  #   \"60 days\": 60,\n  #   \"365 days\": 365,\n  #   Today: \"TODAY\",\n  #   \"Month to date\": \"MTD\",\n  #   \"Quarter to date\": \"QTD\",\n  #   \"Year to date\": \"YTD\",\n  #   All: \"ALL\",\n  # }\n  # self.prefix = '$'\n  # self.suffix = '%'\n  # self.refresh_every = 10.minutes\n\n  def query\n    from = Date.today.midnight - 1.week\n    to = DateTime.current\n\n    if range.present?\n      if range.to_s == range.to_i.to_s\n        from = DateTime.current - range.to_i.days\n      else\n        case range\n        when 'TODAY'\n          from = DateTime.current.beginning_of_day\n        when 'MTD'\n          from = DateTime.current.beginning_of_month\n        when 'QTD'\n          from = DateTime.current.beginning_of_quarter\n        when 'YTD'\n          from = DateTime.current.beginning_of_year\n        when 'ALL'\n          from = Time.at(0)\n        end\n      end\n    end\n\n    result User.where(created_at: from..to).count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Authorization Method Names in Ruby\nDESCRIPTION: Configuration example showing how to override the default Pundit method names with custom Avo-specific method names.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.root_path = '/avo'\n  config.app_name = 'Avocadelicious'\n  config.license = 'pro'\n  config.license_key = ENV['AVO_LICENSE_KEY']\n  config.authorization_methods = {\n    index: 'avo_index?',\n    show: 'avo_show?',\n    edit: 'avo_edit?',\n    new: 'avo_new?',\n    update: 'avo_update?',\n    create: 'avo_create?',\n    destroy: 'avo_destroy?',\n    search: 'avo_search?',\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring and Rendering an Avo Field in a Custom Partial (Ruby/ERB)\nDESCRIPTION: Shows the typical workflow: declare a field (e.g., `:name`) in an Avo resource file using Ruby, then render it within a custom ERB partial using the `avo_edit_field` helper. This integrates Avo's UI components into custom views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-field-components.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# In your resource file\nfield :name, as: :text\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<!-- In your partial file -->\n<%= avo_edit_field :name, as: :text %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic App Name with I18n in Avo\nDESCRIPTION: Configure a dynamic application name using I18n or other dynamic methods by passing a block to the app_name configuration option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.app_name = -> { I18n.t \"app_name\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring a Text Field in Avo Using Ruby\nDESCRIPTION: This snippet demonstrates how to define a simple text input field in Avo for a Ruby on Rails application. No additional options are provided, rendering a standard <input type=\"text\" /> for the specified attribute. Requires the Avo gem to be installed. The input value corresponds to the :title field and is displayed and editable in forms. No special formatting or display behavior is applied.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/text.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :title, as: :text\n```\n\n----------------------------------------\n\nTITLE: Custom Delimiters for Tags in Ruby\nDESCRIPTION: Shows how to set custom delimiters for separating tag input, allowing both commas and spaces.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  delimiters: [\",\", \" \"]\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Variant with Resize in Ruby on Rails Using Active Storage\nDESCRIPTION: This code demonstrates how to process an image variant by resizing it to a 150x150 pixel limit using Active Storage's variant processing in a Ruby on Rails environment. It utilizes a lambda function with the format_using option to generate the variant dynamically.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/file.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :photo,\n  as: :file,\n  format_using: -> {\n    value.variant(resize_to_limit: [150, 150]).processed.image\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Tool Visibility on Resource Views in Ruby for Avo\nDESCRIPTION: Modifies the Post resource class by adding a resource tool and controlling its visibility specifically to the edit view using the `show_on` option. This snippet demonstrates integration of resource tools inside resource field definitions to display or hide them on specified views. It requires Avo framework's resource DSL and the previously defined PostInfo resource tool. Shows how to customize which views display a tool through Avo's view scoping options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-tools.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  def fields\n    tool Avo::ResourceTools::PostInfo, show_on: :edit\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Help Text for Polymorphic Associations in Ruby\nDESCRIPTION: Demonstrates how to add help text to polymorphic associations using polymorphic_help and help options for better user guidance.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations/belongs_to.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentResource < Avo::BaseResource\n  self.title = :id\n\n  field :id, as: :id\n  field :body, as: :textarea\n  field :excerpt, as: :text, show_on: :index, as_description: true do |model|\n    ActionView::Base.full_sanitizer.sanitize(model.body).truncate 60\n  rescue\n    \"\"\n  end\n\n  field :reviewable,\n    as: :belongs_to,\n    polymorphic_as: :reviewable,\n    types: [::Post, ::Project, ::Team],\n    polymorphic_help: \"Choose the type of record to review\",\n    help: \"Choose the record you need.\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Text Field in Avo (Ruby)\nDESCRIPTION: This code snippet shows how to define a basic `text` field in an Avo resource.  The `field` method is used to define a field named `title` as a `text` type. No dependencies are required other than the Avo framework itself. This will render a standard text input field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/text.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :title, as: :text\n```\n\n----------------------------------------\n\nTITLE: Mounting Avo Under a Locale Scope in Rails Routes\nDESCRIPTION: Demonstrates how to mount Avo under a :locale scope in Rails routes. This allows for URL localization, though a more detailed implementation is available in the multi-language URLs guide.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/routing.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nRails.application.routes.draw do\n  scope \":locale\" do\n    mount_avo\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Access ActionView helpers in Avo Resources\nDESCRIPTION: Shows how to access and use `ActionView` helper methods within Avo Resource and Field definitions via `view_context`. This enables using standard Rails helpers for formatting and generating HTML within Avo's admin interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/faq.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  def fields\n    field :id, as: :id\n    field :body,\n      as: :textarea,\n      format_using: -> do\n        view_context.content_tag(:div, style: 'white-space: pre-line') { value }\n      end\n    field :computed_field, as: :text do\n      view_context.link_to(\"Login\", main_app.new_user_session_path)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo's home_path\nDESCRIPTION: Illustrates how to set the homepage for the Avo admin panel using the `home_path` configuration option. This configuration redirects users to the specified path when navigating to `/avo`.  This code should be placed within the Avo initializer file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/faq.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\n\nAvo.configure do |config|  config.root_path = '/avo'\n  config.license = 'pro'\n  config.license_key = ENV['AVO_LICENSE_KEY']\n  config.id_links_to_resource = true\n  config.home_path = '/avo/resources/posts'\n  config.set_context do\n    {\n      foo: 'bar',\n      user: current_user,\n      params: request.params,\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Label Fetching (Deprecated) in Ruby\nDESCRIPTION: Shows the deprecated fetch_labels option for customizing tag display labels when using IDs as values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  fetch_values_from: \"/avo/resources/skills/skills_for_user\",\n  fetch_labels: -> {\n    Skill.where(id: record.skills).pluck(:name)\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Avo Field Layout to Stacked\nDESCRIPTION: Demonstrates how to modify the Avo configuration in the `avo.rb` initializer file. Setting `config.field_wrapper_layout = :stacked` changes the default layout for *all* fields throughout the application to the stacked style, making each field occupy the full horizontal width unless explicitly set otherwise.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.field_wrapper_layout = :stacked\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Protocol Prefix to Text Field in Avo (Ruby)\nDESCRIPTION: Demonstrates configuring a text field to render its value as a link with a specified protocol prefix (e.g., 'mailto'). By setting the protocol option, this field will automatically prepend the value in the Index and Show views for actions such as composing an email. This relies on Avo's built-in protocol handling and expects the field's value to be a valid address; protocol can be set to 'mailto', 'tel', or any custom string.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/text.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :email,\n  as: :text,\n  protocol: :mailto\n```\n\n----------------------------------------\n\nTITLE: Manually Delegating Authorization for Associations in Ruby\nDESCRIPTION: Demonstrates reusing authorization logic from an associated model's policy (`CommentPolicy`) within the parent model's policy (`PostPolicy`) using `Pundit.policy!`. This approach calls the `edit?` method of the `CommentPolicy` to determine the result for `edit_comments?` in the `PostPolicy`, avoiding redundant code.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CommentPolicy\n  # ... more policy methods\n  def edit\n    record.user_id == current_user.id\n  end\nend\n\nclass PostPolicy\n  # ... more policy methods\n  def edit_comments?\n    Pundit.policy!(user, record).edit?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading for Tabs\nDESCRIPTION: Example showing how to enable lazy loading for tab content to improve performance by only loading data when a tab is selected.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tabs.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ntabs do\n  tab \"Address\", lazy_load: true do\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example Custom Profile Menu Item Partial in ERB\nDESCRIPTION: Provides an example ERB snippet for custom profile menu items, demonstrating usage of the Avo::ProfileItemComponent with customizable label, path, and icon properties. This allows developers to insert bespoke menu items into the profile dropdown.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_23\n\nLANGUAGE: erb\nCODE:\n```\n<%# Example link below %>\n<%#= render Avo::ProfileItemComponent.new label: 'Profile', path: '/profile', icon: 'user-circle' %>\n```\n\n----------------------------------------\n\nTITLE: Passing URL Parameters to Action Show Page to Set Field Defaults in Avo (Ruby)\nDESCRIPTION: This code demonstrates how to access parameters from the parent page's URL via the `request.referer` header in an Avo action and use them to dynamically set default values of action fields. Specifically, it parses the referer URI to extract query parameters into a hash with indifferent access, then conditionally sets the default of a hidden field based on the value of the `hey` parameter. This technique allows actions to adapt their initial field states based on navigation context. Dependencies include Ruby's URI library, Rails' request object, and Avo's action field DSL.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/guides-and-tutorials.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Action\n  def fields\n    # Accessing the parameters passed from the parent view\n    field :some_field, as: :hidden, default: -> {\n      # Parsing the request referer to extract parameters\n      parent_params = URI.parse(request.referer).query.split(\"&\").map { |param| param.split(\"=\")}.to_h.with_indifferent_access\n      # Checking if the `hey` parameter equals `ya`\n      if parent_params[:hey] == 'ya'\n        :yes\n      else\n        :no\n      end\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Rails Helper Method in posts_helper.rb - Ruby\nDESCRIPTION: Defines the PostsHelper module containing the extract_excerpt method, which sanitizes provided HTML content and truncates it to 120 characters. This helper is intended to be used for processing the body field of a Post model to generate a shortened, safe excerpt string. It depends on ActionView's sanitization and truncation methods.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/use-own-helpers-in-resource-files.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/helpers/posts_helper.rb\nmodule PostsHelper\n  def extract_excerpt(body)\n    ActionView::Base.full_sanitizer.sanitize(body).truncate 120\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Searchable Field in Avo Resource (Ruby)\nDESCRIPTION: This snippet demonstrates how to enable the searchable feature for the `links` field within the `CourseLink` Avo resource. It uses the `as: :has_many` to define a relationship and sets `searchable: true` to activate the search functionality. This makes the field's attach field or modal searchable.  The code requires the Avo gem to be installed and configured, along with a defined Avo resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/associations_searchable_option_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  def fields\n    field :links,\n      as: :has_many,\n      searchable: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Edit Controls in Avo Resource - Ruby\nDESCRIPTION: This snippet demonstrates customizing the control set for the 'Edit' view of the Fish resource in Avo by providing a lambda to self.edit_controls. It defines back, link, delete, detach, and save buttons, as well as an actions_list dropdown and a conditional custom action button depending on the view context (e.g., not available during creation). This setup utilizes the same supported options as other control types, including custom labels, titles, icons, and style properties. The block's logic allows for dynamic rendering of controls depending on the view. Avo and custom action classes are required.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customizable-controls.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.edit_controls = -> do\n    back_button label: \"\", title: \"Go back now\"\n    link_to \"Fish.com\", \"https://fish.com\", icon: \"heroicons/outline/academic-cap\", target: :_blank\n    delete_button label: \"\", title: \"something\"\n    detach_button label: \"\", title: \"something\"\n    actions_list exclude: [Avo::Actions::ReleaseFish], style: :primary, color: :slate, label: \"Runnables\"\n    action Avo::Actions::ReleaseFish, style: :primary, color: :fuchsia, icon: \"heroicons/outline/globe\" if view != :new\n    save_button label: \"Save Fish\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Policy for Authorization Control in Avo\nDESCRIPTION: Implements a policy class for the AgingOrder resource that restricts access based on user roles. Uses LazyLoader to integrate with the Pundit authorization system in Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/rest-api-integration.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass AgingOrderPolicy < ApplicationPolicy\n  class Scope < Scope\n    def resolve\n      LazyLoader.new(scope)\n    end\n  end\n\n  def index?\n    user.admin?\n  end\n\n  def show?\n    false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering and Using a Custom Stimulus Controller in an Avo Tool\nDESCRIPTION: Illustrates the setup process for using a custom Stimulus controller within an Avo tool. Shows the creation of a simple Stimulus controller (JavaScript), how to register it with Avo's Stimulus application instance in a custom JS entrypoint, and how to apply the controller to an element within an Avo tool's ERB template using the `data-controller` attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/stimulus-integration.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// app/javascript/controllers/sample_controller.js\nimport { Controller } from \"@hotwired/stimulus\";\n\nexport default class extends Controller {\n  connect() {\n    console.log(\"Hey from sample controller 👋\");\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// app/javascript/avo.custom.js\nimport SampleController from \"controllers/sample_controller\";\n\n// Hook into the stimulus instance provided by Avo\nconst application = window.Stimulus;\napplication.register(\"course-resource\", SampleController);\n\n// eslint-disable-next-line no-console\nconsole.log(\"Hi from Avo custom JS 👋\");\n```\n\nLANGUAGE: erb\nCODE:\n```\n<!-- app/views/avo/_sample_tool.html.erb -->\n<div data-controller=\"sample\">\n  <!-- content here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Overriding Avo Resource cache_hash Method in Ruby\nDESCRIPTION: Shows how to override the `cache_hash` method within an Avo resource class (`Avo::BaseResource`). This customization allows you to include associated records or other factors in the cache key computation for a specific resource, ensuring the cache is invalidated when relevant data changes. Requires the Avo gem.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cache.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n  class Avo::Resources::User < Avo::BaseResource\n    def fields\n      # your fields\n    end\n\n    def cache_hash(parent_record)\n      # record.post will now be taken under consideration\n      result = [record, file_hash, record.post]\n\n      if parent_record.present?\n        result << parent_record\n      end\n\n      result\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Integrating has_many_attached with Avo Resource (Ruby)\nDESCRIPTION: This code shows how to integrate a `has_many_attached` association in a Rails model with an Avo resource. It defines a `Project` model with a `has_many_attached :files` association, then configures the `ProjectResource` to include a `files_attachments` field as a `has_many` association. Make sure to use the `_attachments` suffix for the field name.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/use-active-storage-attachments-as-associations.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Project < ApplicationRecord\n  has_many_attached :files\nend\n\nclass ProjectResource < Avo::BaseResource\n  # Please make sure you use the _attachments suffix.\n  # So the :files key from the model file becomes :files_attachments on the resource file.\n  field :files_attachments, as: :has_many\nend\n```\n\n----------------------------------------\n\nTITLE: Using Avo and Main App Path Helpers in Rails\nDESCRIPTION: This code snippet demonstrates how to use path helpers in a Rails application when integrating with a Rails engine like Avo. It showcases prepending the engine name (e.g., `avo`, `main_app`) to the path helper to correctly reference routes within the engine or the main application. This ensures that links point to the correct locations within either the Avo engine or the main Rails application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/rails-and-hotwire.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# When referencing an Avo route, use avo\nlink_to 'Users', avo.resources_users_path\nlink_to user.name, avo.resources_user_path(user)\n\n# When referencing a path for your app, use main_app\nlink_to \"Contact\", main_app.contact_path\nlink_to post.name, main_app.posts_path(post)\n```\n\n----------------------------------------\n\nTITLE: Decoding filters using Avo::Filters::BaseFilter.decode_filters in Ruby\nDESCRIPTION: Shows how to decode filter parameters from a request using the `decode_filters` method, making the filters usable within an action. The method transforms serialized filter data into a Ruby hash for further processing, depending on the filters' encoding format. Dependencies are the Avo filter classes, and the method is explicitly standalone, usable anywhere in the code.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nclass DummyAction < Avo::BaseAction\n  self.name = \"Dummy action\"\n\n  def handle(**args)\n    filters = Avo::Filters::BaseFilter.decode_filters(params[:filters])\n\n    do_something_important_with_the_filters filters\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering Belongs To Attach Modal Records in Ruby\nDESCRIPTION: This snippet demonstrates using the `attach_scope` option on a `belongs_to` Avo field to filter the available records in the Attach modal. The provided block executes within an `ExecutionContext`, receiving the `query` object (the collection of records to filter) and the `parent` object (the record being edited). It applies a custom scope (`non_admins`) to the query.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/associations_attach_scope_option_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :user,\n  as: :belongs_to,\n  attach_scope: -> { query.non_admins }\n```\n\n----------------------------------------\n\nTITLE: Defining a basic Avo::PostsController inheriting from Avo::BaseResourcesController\nDESCRIPTION: This snippet defines a controller for managing Post resources within the Avo admin interface. It inherits from Avo::BaseResourcesController to leverage standard resource behaviors. Additional guidance explains that controllers should inherit from specific Avo base controllers, with options to customize inheritance via generator options or configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/controllers/avo/posts_controller.rb\nclass Avo::PostsController < Avo::BaseResourcesController\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Attributes for Dynamic Filters in Avo using Ruby\nDESCRIPTION: Demonstrates how to customize the database columns that the filter queries against by setting the `query_attributes` option. Supports specifying a single attribute or multiple attributes as symbols (including association attributes) in either the `filterable` field option or the `dynamic_filter` method. This allows filters to target multiple columns or related model attributes for filtering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# Using field's filterable option\nfield :name,\n  as: :text,\n  filterable: {\n    # ...\n    query_attributes: [:first_name, :last_name]\n    # ...\n  }\n\n# Using dynamic_filter method\ndynamic_filter :name,\n  type: :text,\n  query_attributes: [:first_name, :last_name]\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Using field's filterable option\nfield :user,\n  as: :belongs_to,\n  filterable: {\n    label: \"User (email & first_name)\",\n    icon: \"heroicons/solid/users\",\n    query_attributes: [:user_email, :user_first_name]\n  }\n\n# Using dynamic_filter method\ndynamic_filter label: \"User (email & first_name)\",\n  icon: \"heroicons/solid/users\",\n  query_attributes: [:user_email, :user_first_name]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Fields in Avo Resources with Ruby-Vue\nDESCRIPTION: This snippet demonstrates how to declare nested fields in an Avo resource class, including shortcut, explicit on specific views, and limit configurations for 'has_many' or 'has_and_belongs_to_many' relationships. It highlights the usage of nested options in various scenarios.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/nested_common.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/book.rb\nclass Avo::Resources::Book < Avo::BaseResource\n  def fields\n    # Shortcut for full nesting\n    field :{{ $frontmatter.field_type === 'has_one' ? 'author' : 'authors' }}, as: :{{ $frontmatter.field_type }}, nested: true\n\n    # Explicit nesting on new only\n    field :{{ $frontmatter.field_type === 'has_one' ? 'author' : 'authors' }}, as: :{{ $frontmatter.field_type }}, nested: { on: :new }\n\n    # Explicit nesting on edit only\n    field :{{ $frontmatter.field_type === 'has_one' ? 'author' : 'authors' }}, as: :{{ $frontmatter.field_type }}, nested: { on: :edit }\n\n    # Explicit nesting on both new and edit\n    field :{{ $frontmatter.field_type === 'has_one' ? 'author' : 'authors' }}, as: :{{ $frontmatter.field_type }}, nested: { on: :forms }\n\n    # Limit nested creation (for has_many or has_and_belongs_to_many only)\n    field :authors,\n      as: :{{ $frontmatter.field_type }},\n      nested: { on: [:new, :edit], limit: 2 }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Context to Include Current Account\nDESCRIPTION: This snippet shows how to configure the Avo context within an initializer to include the `Current.account`. This makes the account information available throughout the Avo interface and its components.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multitenancy.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.set_context do\n    {\n      foo: 'bar',\n      user: current_user,\n      params: request.params,\n      account: Current.account\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Resource Tool Class - Ruby\nDESCRIPTION: Defines a basic Avo resource tool by inheriting from `Avo::BaseResourceTool`. It sets the display name of the tool and optionally specifies a custom partial path if different from the default convention.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resource-tools.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::ResourceTools::PostInfo < Avo::BaseResourceTool\n  self.name = \"Post info\"\n  # self.partial = \"avo/resource_tools/post_info\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo with custom settings\nDESCRIPTION: Shows how to configure Avo using the initializer file (`config/initializers/avo.rb`).  It demonstrates setting the `root_path`, `license_key`, `id_links_to_resource`, `home_path` and setting the `context` block which makes custom data available in various Avo blocks.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/faq.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\n\nAvo.configure do |config| \n  config.root_path = '/avo'\n  config.license_key = ENV['AVO_LICENSE_KEY']\n  config.id_links_to_resource = true\n  config.home_path = '/avo/resources/posts'\n  config.set_context do\n    {\n      foo: 'bar',\n      user: current_user,\n      params: request.params,\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Composing Attributes for Dynamic Fields in Avo\nDESCRIPTION: This code snippet demonstrates how to combine attributes to create dynamic fields in Avo using Stimulus.js. The `has_skills` boolean field triggers the `toggleSkills` method on the `toggle-fields` controller when its value changes, which toggles the visibility of the `skills` tags field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_skills, as: :boolean, html: {\n  edit: {\n    input: {\n      data: {\n        # On click run the toggleSkills method on the toggle-fields controller\n        action: \"input->toggle-fields#toggleSkills\",\n      }\n    }\n  }\n}\nfield :skills, as: :tags, html: {\n  edit: {\n    wrapper: {\n      # hide this field by default\n      classes: \"hidden\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Options Attribute Description with Hash and Proc\nDESCRIPTION: This snippet explains the 'options' attribute for the radio field, which can accept either a Hash or a Proc for dynamic options. It provides examples of a static Hash and a Proc that dynamically generates options based on record roles, illustrating flexibility in option sourcing.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/radio.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\noptions: {\n  admin: \"Administrator\",\n  manager: \"Manager\",\n  writer: \"Writer\"\n}\n```\n\nLANGUAGE: Ruby\nCODE:\n```\noptions: -> do\n  record.roles.each_with_object({}) do |role, hash|\n    hash[role.id] = role.name.humanize\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Classes and Data Attributes using Block Notation - Ruby\nDESCRIPTION: Illustrates using the block notation for the `html` option to dynamically set `classes` and `data` attributes. This allows access to variables like `current_user`, `record`, and `resource` for conditional logic or complex attribute generation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/html.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_skills,\n  as: :boolean,\n  html: -> do\n    edit do\n      wrapper do\n        classes do\n          \"hidden\"\n        end\n        data do\n          if current_user.admin?\n            {\n              action: \"click->admin#do_something_admin\"\n            }\n          else\n            {\n              record: record,\n              resource: resource,\n            }\n          end\n        end\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Customizing Query Attributes with filterable Option\nDESCRIPTION: This snippet demonstrates using the `query_attributes` option within the `filterable` hash to specify which database columns a filter should apply to.  It combines the `first_name` and `last_name` columns for filtering a name.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name,\n  as: :text,\n  filterable: {\n    # ...\n    query_attributes: [:first_name, :last_name]\n    # ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Registering Cards with Chart Options in Dashboard Configuration\nDESCRIPTION: Two approaches for configuring chart options when registering a card in a dashboard class - using a hash directly or using a callable block that provides access to execution context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::Dashy < Avo::Dashboards::BaseDashboard\n  def cards\n    card Avo::Cards::ExampleAreaChart,\n      chart_options: {\n        library: {\n          plugins: {\n            legend: {display: true}\n          }\n        }\n      }\n\n    # OR\n\n    card Avo::Cards::ExampleAreaChart,\n      chart_options: -> do\n        {\n          library: {\n            plugins: {\n              legend: {display: true}\n            }\n          }\n        }\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Integrating `friendly_id` Gem with Avo Resource (Ruby)\nDESCRIPTION: Configures `find_record_method` in an Avo User resource (`Avo::Resources::User`) to work with the `friendly_id` gem. It uses `query.friendly.find` to look up records by their slugs, enabling user-friendly URLs. The corresponding `User` model includes `extend FriendlyId` and `friendly_id :name, use: :slugged`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  self.find_record_method = -> {\n    if id.is_a?(Array)\n      query.where(slug: id)\n    else\n      # We have to add .friendly to the query\n      query.friendly.find id\n    end\n  }\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\n  extend FriendlyId\n\n  friendly_id :name, use: :slugged\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing CourseCity Boolean Filter Class in Ruby\nDESCRIPTION: Defines a CourseCity filter class that extends Avo's BooleanFilter to filter courses by city. It includes dynamic option generation based on selected countries, filter application logic, and reactive behavior to automatically select the first city when a country is chosen.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::CourseCity < Avo::Filters::BooleanFilter\n  self.name = \"Course city filter\"\n\n  def apply(request, query, values)\n    query.where(city: values.select { |city, selected| selected }.keys)\n  end\n\n  def options\n    cities_for_countries countries\n  end\n\n  # applied_filters = {\n  #   \"Avo::Filters::CourseCountryFilter\" => {\n  #     \"USA\" => true,\n  #     \"Japan\" => true,\n  #     \"Spain\" => false,\n  #     \"Thailand\" => false,\n  #   }\n  # }\n  def react\n    # Check if the user selected a country\n    if applied_filters[\"Avo::Filters::CourseCountryFilter\"].present? && applied_filters[\"Avo::Filters::CourseCityFilter\"].blank?\n      # Get the selected countries, get their cities, and select the first one.\n      selected_countries = applied_filters[\"Avo::Filters::CourseCountryFilter\"].select do |name, selected|\n        selected\n      end\n\n      # Get the first city\n      cities = cities_for_countries(selected_countries.keys)\n      first_city = cities.first.first\n\n      # Return the first city as selected\n      [[first_city, true]].to_h\n    end\n  end\n\n  private\n\n  # Get a hash of cities for certain countries\n  # Example payload:\n  # countries = [\"USA\", \"Japan\"]\n  def cities_for_countries(countries_array = [])\n    countries_array\n      .map do |country|\n        # Get the cities for this country\n        Course.cities.stringify_keys[country]\n      end\n      .flatten\n      # Prepare to transform to a Hash\n      .map { |city| [city, city] }\n      # Turn to a Hash\n      .to_h\n  end\n\n  # Get the value of the selected countries\n  # Example `applied_filters` payload:\n  # applied_filters = {\n  #   \"Avo::Filters::CourseCountryFilter\" => {\n  #     \"USA\" => true,\n  #     \"Japan\" => true,\n  #     \"Spain\" => false,\n  #     \"Thailand\" => false,\n  #   }\n  # }\n  def countries\n    if applied_filters[\"Avo::Filters::CourseCountryFilter\"].present?\n      # Fetch the value of the countries filter\n      applied_filters[\"Avo::Filters::CourseCountryFilter\"]\n        # Keep only the ones selected\n        .select { |country, selected| selected }\n        # Pluck the name of the coutnry\n        .keys\n    else\n      # Return empty array\n      []\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Tags Field with Suggestions in Avo Resource - Ruby\nDESCRIPTION: Illustrates the use of the 'suggestions' option to provide users with a dropdown list of recommended tags in an Avo resource. Requires a lambda (using the current record) to suggest tags via a method defined in the corresponding model. Accepts and displays suggestions dynamically based on the record's state; returns an array of strings as suggestions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseResource < Avo::BaseResource\n  field :skills, as: :tags, suggestions: -> { record.skill_suggestions }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Course < ApplicationRecord\n  def skill_suggestions\n    ['example suggestion', 'example tag', self.name]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Index Controls in Avo Resource - Ruby\nDESCRIPTION: This Ruby code snippet customizes the control buttons displayed in the 'Index' view of the Fish resource in Avo with a lambda assigned to self.index_controls. The block defines a custom link, a filtered actions_list and individual actions that appear only if Fish.count > 0, and attach/create buttons with custom labels. The list of controls can change dynamically based on record counts or other runtime parameters, allowing for finely-grained UI behaviors. The code leverages Avo's DSL and expects supporting resource and action classes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customizable-controls.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.index_controls = -> do\n    link_to \"Fish.com\", \"https://fish.com\", icon: \"heroicons/outline/academic-cap\", target: :_blank\n    actions_list exclude: [Avo::Actions::DummyAction], style: :primary, color: :slate, label: \"Runnables\" if Fish.count > 0\n    action Avo::Actions::DummyAction, style: :primary, color: :fuchsia, icon: \"heroicons/outline/globe\" if Fish.count > 0\n    attach_button label: \"Attach one Fish\"\n    create_button label: \"Create a new and fresh Fish\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Making Devise Password Optional with self.devise_password_optional in Avo Resource - Ruby\nDESCRIPTION: Enables updating devise-authenticated models (e.g., User) without requiring the password field by setting self.devise_password_optional to true. Helps avoid validation errors when password is omitted in user updates. Requires Devise gem and Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.devise_password_optional = true\nend\n```\n\n----------------------------------------\n\nTITLE: Adding custom tool routes in Rails application\nDESCRIPTION: Configuration for adding routes for custom Avo tools within the Avo namespace, showing how they relate to other Avo-related routes in the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-tools.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  namespace :avo do\n    get \"dashboard\", to: \"tools#dashboard\"\n  end\n\n  authenticate :user, ->(user) { user.admin? } do\n    mount_avo\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard Action in Avo::ToolsController in Ruby\nDESCRIPTION: This Ruby controller snippet defines a new action, 'dashboard', in a controller inheriting from Avo::ApplicationController. The empty method serves as the action endpoint rendered by the custom tool's route and view. Requires the Avo gem and a Rails application setup. Expects requests to the dashboard route; output is the rendering of the dashboard view. Limitations: The method currently has no logic but may be extended for more functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-tools.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::ToolsController < Avo::ApplicationController\n  def dashboard\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Show Field with Custom Value using Avo::ShowField ERB\nDESCRIPTION: Shows how to use the `avo_show_field` helper to render a non-editable field within a partial. It demonstrates using the `value:` option to explicitly provide the data to be displayed, which is useful for showing computed or external data like a CDN image URL.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-field-components.md#_snippet_4\n\nLANGUAGE: ERB\nCODE:\n```\n<%= avo_show_field(:photo, as: :external_image, value: record.cdn_image) %>\n```\n\n----------------------------------------\n\nTITLE: Using view_context in Rails\nDESCRIPTION: This snippet demonstrates how to use the `view_context` attribute within `Avo::Current`.  `view_context` provides access to view helpers like `link_to`.  The snippet creates an HTML link using the `link_to` method, pointing to avohq.io.  It relies on the Rails framework and ActionView::Rendering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-current.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nview_context.link_to \"Avo\", \"https://avohq.io\"\n```\n\n----------------------------------------\n\nTITLE: Marking Avo Fields as Required (Visual Indicator - Ruby)\nDESCRIPTION: Shows how `required: true` adds a visual asterisk (*) to a field's label, indicating it is mandatory. Note that this is purely cosmetic and requires separate model-level validation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, required: true\n```\n\n----------------------------------------\n\nTITLE: Setting Card Ranges\nDESCRIPTION: This snippet demonstrates how to set ranges for a metric card, enabling users to filter data based on pre-defined time intervals. The `initial_range` attribute sets the default selection, while the `ranges` hash specifies available options.  The `ranges` option leverages the `options_for_select` helper, allowing flexibility in how the range options are displayed and handled.  Requires Avo framework.  The keys of the ranges hash are displayed to the user and the values are passed to the query method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = 'users_metric'\n  self.label = 'Users count'\n  self.initial_range = 30\n  self.ranges = {\n    \"7 days\": 7,\n    \"30 days\": 30,\n    \"60 days\": 60,\n    \"365 days\": 365,\n    Today: \"TODAY\",\n    \"Month to date\": \"MTD\",\n    \"Quarter to date\": \"QTD\",\n    \"Year to date\": \"YTD\",\n    All: \"ALL\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Course Model with Static Country and City Data - Ruby\nDESCRIPTION: Defines 'Course' model class methods for supported countries and per-country cities. Used as a data provider for both form select options and backend city lookups. No dependencies except ActiveRecord/ApplicationRecord. Input: none; Output: country array or city-hash. Limitation: Data is static and in-memory, not persisted.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass Course < ApplicationRecord\n  def self.countries\n    [\"USA\", \"Japan\", \"Spain\", \"Thailand\"]\n  end\n\n  def self.cities\n    {\n      USA: [\"New York\", \"Los Angeles\", \"San Francisco\", \"Boston\", \"Philadelphia\"],\n      Japan: [\"Tokyo\", \"Osaka\", \"Kyoto\", \"Hiroshima\", \"Yokohama\", \"Nagoya\", \"Kobe\"],\n      Spain: [\"Madrid\", \"Valencia\", \"Barcelona\"],\n      Thailand: [\"Chiang Mai\", \"Bangkok\", \"Phuket\"]\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Conditions Hash for Date Dynamic Filters in Ruby\nDESCRIPTION: This Ruby snippet defines a hash that maps symbolic keys to descriptive condition labels used in date type dynamic filters. It includes conditions like 'Is', 'Is not', 'Is on or before', 'Is on or after', 'Is within', 'Is null', and 'Is not null' for filtering date attributes. The hash is inverted with `.invert` to facilitate conditions lookup within Avo's filtering system for date fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  is: \"Is\",\n  is_not: \"Is not\",\n  lte: \"Is on or before\",\n  gte: \"Is on or after\",\n  is_within: \"Is within\",\n  is_null: \"Is null\",\n  is_not_null: \"Is not null\",\n}.invert\n```\n\n----------------------------------------\n\nTITLE: Marking Avo Field as Required (Visual)\nDESCRIPTION: Demonstrates how to use the `required: true` option on an Avo field definition to add a visual asterisk indicator. This option is cosmetic and does not enforce validation; model validation (`validates :name, presence: true`) must be added separately. Available on Avo versions below 2.14, or when overriding auto-detection.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, required: true\n```\n\n----------------------------------------\n\nTITLE: Defining Actions in Avo Resources Using Ruby\nDESCRIPTION: Demonstrates how to declare action buttons within Avo resource classes using the `action` helper. It clarifies that using `action` only displays the action button, and that the action must also be registered manually in the resource's `actions` method for functionality. The snippet shows setting style, color, icon, and passing arguments to actions in both `show_controls` and `actions` declarations. Requires Avo gem version 3.10.7 or lower.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customizable-controls.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.title = :name\n\n  self.show_controls = -> do\n    # In order to use it here\n    action Avo::Actions::ReleaseFish, style: :primary, color: :fuchsia, arguments: {\n      action_on_show_controls: \"Will use this arguments\"\n    }\n  end\n\n  # 👇 Also declare it here 👇\n  def actions\n    action Avo::Actions::ReleaseFish, arguments: {\n      action_from_list: \"Will use this arguments\"\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Applying database migrations for avo_meta\nDESCRIPTION: Executes database migrations to create or update tables required for storing meta schemas and data, finalizing setup.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-meta.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Generating a DateTime Filter in Avo\nDESCRIPTION: Shows how to generate a date time filter in Avo. This filter is ideal for date selection with options for including time and range selection.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrails generate avo:filter created_at --type date_time\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nclass Avo::Filters::CreatedAt < Avo::Filters::DateTimeFilter\n  self.name = \"Created at\"\n  # self.type = :date_time\n  # self.mode = :range\n  # self.visible = -> do\n  #   true\n  # end\n\n  def apply(request, query, value)\n    query\n  end\n\n  # def format\n  #   case type\n  #   when :date_time\n  #     'yyyy-LL-dd TT'\n  #   when :date\n  #     'yyyy-LL-dd'\n  #   end\n  # end\n\n  # def picker_format\n  #   case type\n  #   when :date_time\n  #     'Y-m-d H:i:S'\n  #   when :time\n  #     'Y-m-d'\n  #   end\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Including Polymorphic Type in attach_fields (Ruby)\nDESCRIPTION: This snippet illustrates how to include a hidden field for the type in the `attach_fields` option when the through model uses polymorphism. This configuration allows the system to properly handle the association with polymorphic types, storing it as a hidden field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/has_many.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :patrons,\n  as: :has_many,\n  through: :patronships,\n  attach_fields: -> {\n    field :review, as: :text\n    field :patronship_type, as: :hidden, default: \"TheType\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Preview Policy in Application Policy (Ruby)\nDESCRIPTION: Code snippet showing how to add the preview? method to the ApplicationPolicy class to maintain backward compatibility with Avo 3.18.0's new authorization requirements for preview endpoints.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/policies/application_policy.rb\nclass ApplicationPolicy\n  def preview? = true\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Action Visibility in Avo Show Controls\nDESCRIPTION: Example of conditionally showing or hiding actions in the show controls based on record properties. This allows for dynamic control visibility depending on the current state of the record being viewed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customizable-controls.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass FishResource < Avo::BaseResource\n  self.show_controls = -> do\n    back_button label: \"\", title: \"Go back now\"\n\n    # visibility conditional\n    if record.something?\n      action ReleaseFish, style: :primary, color: :fuchsia, icon: \"heroicons/outline/globe\"\n    end\n\n    edit_button label: \"\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring main menu with audit logging section in Avo\nDESCRIPTION: Adds a section to the Avo main menu, grouping all activities under 'AuditLogging' with an icon and linking to `avo_activity` resource for holistic activity overview.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.main_menu = -> {\n    section \"AuditLogging\", icon: \"presentation-chart-bar\" do\n      resource :avo_activity\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting Avo Field as Readonly (Block)\nDESCRIPTION: Demonstrates setting the `readonly` option using a Ruby block. This allows the readonly state to be dynamic, based on the current view or other context available within the `ViewRecordHost`, such as `view`, `record`, `params`, etc.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :id, as: :number, readonly: -> { view == :edit } # make the field readonly only on the new edit view\n```\n\n----------------------------------------\n\nTITLE: Fetching Tags Suggestions Dynamically from an API - Ruby (Resource Field Definition)\nDESCRIPTION: Configures a tags field to fetch possible tag values from a backend API endpoint using the 'fetch_values_from' option. The endpoint returns a JSON array of objects with 'value' and 'label' keys. Useful for dynamic, database-driven suggestions, especially within custom Avo Actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  fetch_values_from: \"/avo/resources/skills/skills_for_user\"\n```\n\n----------------------------------------\n\nTITLE: Extending Avo::ApplicationController Using Ruby Concern in Ruby\nDESCRIPTION: Shows how to safely extend Avo::ApplicationController by creating a Ruby concern module containing custom logic such as a multitenancy detector method and a before_action hook. The concern is then included in Avo::ApplicationController during Rails initialization using Rails.configuration.to_prepare. This approach keeps the original controller intact and future-proof by injecting functionality modularly with the 'included' block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-application-controller.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/concerns/multitenancy.rb\nmodule Multitenancy\n  extend ActiveSupport::Concern\n\n  included do\n    before_action :multitenancy_detector\n    # or\n    prepend_before_action :multitenancy_detector\n  end\n\n  def multitenancy_detector\n    # your logic here\n  end\nend\n\n# configuration/initializers/avo.rb\nRails.configuration.to_prepare do\n  Avo::ApplicationController.include Multitenancy\nend\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding HTML Data Attributes (Block Notation) to Avo Field Wrapper in Edit View (Ruby)\nDESCRIPTION: This snippet uses the block notation to dynamically determine the `data` attributes based on the current context, such as the `current_user`. The block provides access to variables like `params`, `current_user`, `record`, and `resource`.\n\nDependencies: Avo framework.\n\nParameters: `html` option assigned a Ruby lambda (`-> do ... end`). The block returns a hash structure similar to the object notation.\n\nExpected Input: A Ruby block evaluating to a hash that specifies views, elements, and attributes.\n\nExpected Output: Configures the Avo field definition to render dynamic HTML attributes on the wrapper in the edit/new view based on the block's logic.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/html.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :has_skills,\n  as: :boolean,\n  html: -> do\n    edit do\n      wrapper do\n        classes do\n          \"hidden\"\n        end\n        data do\n          if current_user.admin?\n            {\n              action: \"click->admin#do_something_admin\"\n            }\n          else\n            {\n              record: record,\n              resource: resource,\n            }\n          end\n        end\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone for DateTime Field\nDESCRIPTION: Examples of setting the timezone for a DateTime field in Avo, showing both static timezone specification and dynamic timezone selection based on the record's properties.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/date_time.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :started_at, as: :date_time, timezone: \"EET\"\n# Or\nfield :started_at, as: :date_time, timezone: -> { record.timezone }\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN exclusion for Avo assets using Ruby code\nDESCRIPTION: This Ruby code snippet configures the Rails asset host to exclude Avo's assets under the '/avo' path from being served through a CDN, ensuring that these assets are served directly from the app server. It sets the asset host based on an environment variable while preserving the exclusion rule.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-asset-pipeline.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_controller.asset_host = Proc.new do |source|\n  # Exclude assets under the \"/avo\" path from CDN\n  next nil if source.start_with?(\"/avo\")\n\n  # Set the general asset host (CDN) using an environment variable\n  ENV.fetch(\"ASSET_HOST\")\nend\n```\n\n----------------------------------------\n\nTITLE: Defining FriendlyID in Model (Ruby)\nDESCRIPTION: This code snippet shows how to integrate FriendlyID within a model in Ruby on Rails.  The `extend FriendlyId` call and `friendly_id :name, use: :finders` configure the model to use the FriendlyId gem.  The `:name` parameter specifies the column to use for the slug, and `:finders` enables finding records using the slug.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/custom-ids.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post.rb\nclass Post < ApplicationRecord\n  extend FriendlyId\n\n  # This post model have a name column\n  friendly_id :name, use: :finders\nend\n```\n\n----------------------------------------\n\nTITLE: Fixing Conflicting Ruby Rails Route Helper\nDESCRIPTION: This Ruby on Rails route definition creates RESTful routes for a resource accessed via the '/resources' URL path. However, it uses the `as: 'articles'` option to rename the generated path helpers to start with 'articles_' (e.g., `articles_path`). This avoids conflicting with Avo's internal `resources_path` helper while keeping the desired URL structure.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/internal-model-names.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nresources :resources, as: 'articles'\n```\n\n----------------------------------------\n\nTITLE: Computed Fields in Avo Admin - Ruby\nDESCRIPTION: This snippet shows how to define a computed field. The `field` method is used to define a computed field with a block. This block receives the `model`, `resource`, and `view`, allowing to compute and show values in index and show views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nfield 'Has posts', as: :boolean do |model, resource, view|\n  model.posts.present?\nrescue\n  false\nend\n```\n\n----------------------------------------\n\nTITLE: Appending Turbo Stream Responses in Avo Action (Ruby)\nDESCRIPTION: Explains how to use `append_to_response` to add custom Turbo Stream responses to the default action response. This method accepts a Proc or lambda that is executed within the controller context and should return a single `turbo_stream` response or an array of responses, allowing for dynamic page updates like changing the page title after an action completes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\ndef handle(**args)\n  succeed \"Modal closed!!\"\n  close_modal\n\n  append_to_response -> {\n    turbo_stream.set_title(\"Cool title ;)\")\n  }\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nappend_to_response -> {\n  [\n    turbo_stream.set_title(\"Cool title\"),\n    turbo_stream.set_title(\"Cool title 2\")\n  ]\n}\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nappend_to_response -> {\n  turbo_stream.set_title(\"Cool title\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using the bare_content slot\nDESCRIPTION: This snippet demonstrates the usage of the `bare_content` slot, typically used with the grid view. This slot removes the background and displays content flush in the container. The example shows how to insert content within the slot.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-components/avo-panel-component.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_bare_content do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring `home_path` with a lambda function in Avo\nDESCRIPTION: Defines a dynamic `home_path` using a lambda to redirect users to a specific dashboard path. Useful for customizing the landing page upon logo click, integrating with other configurations like breadcrumbs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.home_path = -> { avo.dashboard_path(:dashy) }\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Field as HTML in Avo Using Ruby\nDESCRIPTION: This snippet shows how to render a text field's value as HTML within Index and Show views in Avo. The :as_html option is set to true, and a block returns a custom HTML anchor tag string as the field's output. Requires Avo gem. The block receives relevant arguments and should output valid HTML. Security considerations apply, as this will not escape HTML content, so ensure all outputs are properly sanitized to prevent XSS vulnerabilities.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/text.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :title, as: :text, as_html: true do |&args|\n  '<a href=\"https://avohq.io\">Avo</a>'\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Column Names Mapping in Ruby\nDESCRIPTION: Demonstrates how to override specific column name mappings to field types globally in the Avo configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-discovery.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # ...\n\n  config.column_names_mapping = {\n    published_at: { field: :date_time, timezone: 'UTC' },\n    role: { field: :select, enum: -> { User.roles } }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Result Path for Search Results\nDESCRIPTION: Shows how to customize the URL that users are redirected to when clicking on a search result.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(name_eq: params[:q]).result(distinct: false) },\n    result_path: -> { avo.resources_city_path record, custom: \"yup\" }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Links to the Avo Profile Menu\nDESCRIPTION: Shows how to configure the profile menu by adding a custom link with an icon. The profile menu appears in the user profile component, and the sign-out link is automatically included by Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.profile_menu = -> {\n    link_to \"Profile\", path: \"/profile\", icon: \"user-circle\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Options in Field Class - Ruby\nDESCRIPTION: Shows how to add custom options (max, step, display_value, value_suffix) to the ProgressBarField Ruby class. These are made available via attr_reader and given default values in the initializer. Prerequisites: Inherits from Avo::Fields::BaseField.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/fields/progress_bar_field.rb\nclass ProgressBarField < Avo::Fields::BaseField\n  attr_reader :max\n  attr_reader :step\n  attr_reader :display_value\n  attr_reader :value_suffix\n\n  def initialize(name, **args, &block)\n    super(name, **args, &block)\n\n    @max = 100\n    @step = 1\n    @display_value = false\n    @value_suffix = nil\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring STI for Child Resource Redirect in Avo\nDESCRIPTION: This code shows how to configure an Avo resource to redirect to a child resource when a parent record is clicked on.  The `link_to_child_resource` option, when set to `true` on the parent resource (`Person`), redirects users from the Index view of the parent (`Person`) to the appropriate child record (`Child` or `Spouse`).  This requires models using Single Table Inheritance (STI).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Person < Avo::BaseResource\n  self.link_to_child_resource = true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring sidebar menu with custom Meta section in Avo\nDESCRIPTION: Sets up the main menu in 'avo.rb' initializer to include a 'Meta' section linked to the 'meta_schema' resource, ensuring the menu entry appears in the sidebar.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-meta.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.main_menu = -> {\n    section \"Meta\" do\n      resource :meta_schema\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Index View Component (ERB)\nDESCRIPTION: This ERB code customizes the `index` view component for the `progress_bar` custom field. It conditionally shows the value with a suffix if `display_value` is true and renders a progress bar. This provides a visual representation of the progress values in the index view with the provided configurations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_12\n\nLANGUAGE: ERB\nCODE:\n```\n# app/components/avo/fields/progress_bar_field/index_component.html.erb\n<%= index_field_wrapper field: @field do %>\n  <!-- If display_value is set to true, show the value above the progress bar -->\n  <% if @field.display_value %>\n    <div class=\"text-center text-sm font-semibold w-full leading-none mb-1\">\n      <!-- Add the suffix if value_suffix is set -->\n      <%= @field.value %><%= @field.value_suffix if @field.value_suffix.present? %>\n    </div>\n  <% end %>\n\n  <!-- Show the progress input with the settings we passed to the field. -->\n  <progress max=\"<%= @field.max %>\" value=\"<%= @field.value %>\" class=\"block w-24\"></progress>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configure Avo current\\_user method using a block\nDESCRIPTION: Provide a block to the `current_user_method` configuration if the current user object is accessed through a method that cannot be directly symbolized (e.g., accessing a value from a global `Current` object). The block should return the user object.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authentication.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_method do\n    Current.user\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Arguments in Avo (Ruby)\nDESCRIPTION: This snippet shows how to pass custom data as arguments to an action, allowing customization of the action's behavior.  Arguments are accessible throughout the action class, including the `handle` and `fields` methods. The example demonstrates both static and dynamic argument configuration (using a proc).  Requires Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/registration.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def actions\n    action Avo::Actions::ToggleInactive,\n      arguments: {\n        special_message: true\n      }\n\n    # Or as a proc to make it dynamic\n    action Avo::Actions::ToggleInactive,\n      arguments: -> do\n        {\n          special_message: resource.view.index? && current_user.is_admin?\n        }\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting a static title attribute for a resource\nDESCRIPTION: This snippet shows how to assign a specific attribute, like `slug`, as the title of the resource. When enabled, the resource will display the `slug` attribute value as its title instead of default options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.title = :slug # it will now reference @post.slug to show the title\nend\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to Edit View Input Placeholder - Ruby\nDESCRIPTION: Shows the basic structural placeholder for adding HTML attributes to the actual `input` element of a field in the `edit` view using the object notation. This structure also applies to the New view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/html.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    input: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Titles for Custom Pages in Avo\nDESCRIPTION: Set custom page titles for Avo tools or pages by assigning a value to the @page_title instance variable in the controller.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::ToolsController < Avo::ApplicationController\n  def custom_tool\n    @page_title = \"Custom tool page title\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing and using scopes in Avo\nDESCRIPTION: Demonstrates how to define a scope class and implement a corresponding model scope. Shows both the scope definition and the model implementation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/scopes.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/scopes/admins.rb\nclass Avo::Scopes::Admins < Avo::Advanced::Scopes::BaseScope\n  self.name = \"Admins\" # Name displayed on the scopes bar\n  self.description = \"Admins only\" # This is the tooltip value\n  self.scope = :admins # valid scope on the model you're using it\n  self.visible = -> { true } # control the visibility\nend\n\n# app/models/user.rb\nclass User < ApplicationRecord\n  scope :admins, -> { where role: :admin } # This is used in the scope file above\nend\n```\n\n----------------------------------------\n\nTITLE: Describing `picker_format` Option for Date Input Fields\nDESCRIPTION: This part details the `picker_format` setting, which controls how dates are formatted in the date picker UI on edit and new forms. It defaults to `Y-m-d` and uses tokens compatible with the `flatpickr` library, allowing localization and input consistency.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/date.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Adding Badge to Grid Item with Label in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to add a badge label to grid items in Avo. It adds a `badge_label` to the `card` configuration. The label's value is determined by a conditional statement that checks the `updated_at` attribute of the record.  This snippet is dependent on the Avo framework and requires access to the `record` object.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/grid-view.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nself.grid_view = {\n  card: -> do\n    {\n      cover_url: record.image.attached? ? main_app.url_for(record.image.variant(resize: \"300x300\")) : nil,\n      title: record.title,\n      body: simple_format(record.description),\n      badge_label: (record.updated_at < 1.week.ago ? \"New\" : \"Updated\"),\n    }\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: Adding meta_panel to Avo resource fields\nDESCRIPTION: Includes the 'meta_panel' method within the resource's 'fields' method to display and edit meta attributes in Avo's resource views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-meta.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  # ...\n\n  def fields\n    # ...\n\n    meta_panel\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing TailwindCSS Integration for Avo (Rails/Bash)\nDESCRIPTION: This Bash command executes a Rails generator provided by Avo to set up the TailwindCSS integration. It installs the `tailwindcss-rails` gem, creates necessary configuration files (`config/avo/tailwind.config.js`), generates base stylesheet directories, creates a custom stylesheet file (`app/assets/stylesheets/avo/tailwind.css`), and updates your `Procfile.dev` and `package.json` with compilation commands.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tailwindcss-integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:tailwindcss:install\n```\n\n----------------------------------------\n\nTITLE: Authorizing Actions with Pundit - Ruby\nDESCRIPTION: The `authorize` method receives the user, record, action, and an optional policy_class, and uses Pundit to authorize the action. It handles `Pundit::NotDefinedError` and `Pundit::NotAuthorizedError` exceptions, raising custom exceptions for better error handling.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\ndef authorize(user, record, action, policy_class: nil)\n  Pundit.authorize(user, record, action, policy_class: policy_class)\nrescue Pundit::NotDefinedError => error\n  raise NoPolicyError.new error.message\nrescue Pundit::NotAuthorizedError => error\n  raise NotAuthorizedError.new error.message\nend\n```\n\n----------------------------------------\n\nTITLE: Requiring the Countries Gem in Ruby on Rails\nDESCRIPTION: This snippet demonstrates how to include the 'countries' gem in your Ruby application's Gemfile to enable comprehensive country data support. The gem provides country objects with ISO code information, which is essential for the functionality of the country field in Avo. After adding this to the Gemfile, run 'bundle install' to install the dependency. There are no input or output parameters; this is a standard Ruby gem requirement.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/country.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# All sorts of useful information about every country packaged as convenient little country objects.\ngem \"countries\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Resource for Record Link Field in Avo using use_resource Option in Ruby\nDESCRIPTION: This snippet shows how to specify which Avo resource class should be used to generate the link for a related record using the 'use_resource' option. This is helpful in apps where multiple resources exist for a model, such as AdminUser, big_post, or TinyPhoto. Setting the correct resource ensures the link and title resolve as intended.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/record_link.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :post, as: :record_link, use_resource: \"big_post\"\n\nfield :admin, as: :record_link, use_resource: \"AdminUser\"\n\nfield :thumbnail, as: :record_link, use_resource: \"Avo::Resources::TinyPhoto\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Current Model for Account Management in Rails\nDESCRIPTION: This snippet defines the `Current` model, inheriting from `ActiveSupport::CurrentAttributes`, and establishes an `account` attribute. This allows for storing and accessing the current account context throughout the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multitenancy.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/current.rb\nclass Current < ActiveSupport::CurrentAttributes\n  attribute :account\nend\n```\n\n----------------------------------------\n\nTITLE: Add Prefixed IDs gem to Gemfile\nDESCRIPTION: Adds the `prefixed_ids` gem to the application's Gemfile. This is a prerequisite for using prefixed IDs to autogenerate prefixed IDs. No version is specified.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/custom-ids.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"prefixed_ids\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Field with Options in Ruby\nDESCRIPTION: This example shows how to customize a number field named `:age` by setting the `min`, `max`, and `step` attributes. The `min` attribute sets the minimum allowed value (0), `max` sets the maximum allowed value (120), and `step` defines the interval for incrementing/decrementing the value (5).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/number.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :age, as: :number, min: 0, max: 120, step: 5\n```\n\n----------------------------------------\n\nTITLE: Using meta_json field in Avo (Ruby)\nDESCRIPTION: This demonstrates how to utilize the generated `meta_json` getter method, created via the `avo_json_fields` concern, within an Avo resource configuration. It defines a field `meta_json` with the `:code` type and specifies the `javascript` language. The `name` option is used to map the display back to the original field name (`meta`).  The `only_on` option restricts display of the field to `show`, `new`, and `edit` views.  This creates a visually formatted JSON representation of the `meta` field within the specified Avo Admin views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/format-ruby-object-to-json.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta_json, as: :code, name: :meta, only_on: %i[show new edit], language: \"javascript\"\n```\n\n----------------------------------------\n\nTITLE: Implementing CourseCity Boolean Filter in Ruby for Avo\nDESCRIPTION: This code defines a filter class that allows filtering courses by city in Avo admin panel. It implements dynamic filtering options based on country selection, and includes reactive behavior to automatically select the first available city when a country is selected but no city is chosen.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::CourseCity < Avo::Filters::BooleanFilter\n  self.name = \"Course city filter\"\n\n  def apply(request, query, values)\n    query.where(city: values.select { |city, selected| selected }.keys)\n  end\n\n  def options\n    cities_for_countries countries\n  end\n\n  # applied_filters = {\n  #   \"Avo::Filters::CourseCountryFilter\" => {\n  #     \"USA\" => true,\n  #     \"Japan\" => true,\n  #     \"Spain\" => false,\n  #     \"Thailand\" => false,\n  #   }\n  # }\n  def react\n    # Check if the user selected a country\n    if applied_filters[\"Avo::Filters::CourseCountryFilter\"].present? && applied_filters[\"Avo::Filters::CourseCityFilter\"].blank?\n      # Get the selected countries, get their cities, and select the first one.\n      selected_countries = applied_filters[\"Avo::Filters::CourseCountryFilter\"].select do |name, selected|\n        selected\n      end\n\n      # Get the first city\n      cities = cities_for_countries(selected_countries.keys)\n      first_city = cities.first.first\n\n      # Return the first city as selected\n      [[first_city, true]].to_h\n    end\n  end\n\n  private\n\n  # Get a hash of cities for certain countries\n  # Example payload:\n  # countries = [\"USA\", \"Japan\"]\n  def cities_for_countries(countries_array = [])\n    countries_array\n      .map do |country|\n        # Get the cities for this country\n        Course.cities.stringify_keys[country]\n      end\n      .flatten\n      # Prepare to transform to a Hash\n      .map { |city| [city, city] }\n      # Turn to a Hash\n      .to_h\n  end\n\n  # Get the value of the selected countries\n  # Example `applied_filters` payload:\n  # applied_filters = {\n  #   \"Avo::Filters::CourseCountryFilter\" => {\n  #     \"USA\" => true,\n  #     \"Japan\" => true,\n  #     \"Spain\" => false,\n  #     \"Thailand\" => false,\n  #   }\n  # }\n  def countries\n    if applied_filters[\"Avo::Filters::CourseCountryFilter\"].present?\n      # Fetch the value of the countries filter\n      applied_filters[\"Avo::Filters::CourseCountryFilter\"]\n        # Keep only the ones selected\n        .select { |country, selected| selected }\n        # Pluck the name of the coutnry\n        .keys\n    else\n      # Return empty array\n      []\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Actions to Resource Controls with the 'action' Helper in Avo (Ruby)\nDESCRIPTION: This Ruby snippet demonstrates various usages of the 'action' helper to attach different action classes (such as DisableAccount, ExportSelection, and PublishPost) to Avo resource controls, optionally specifying arguments, button styles, colors, and icons. The code assumes an Avo Rails application with corresponding Action classes defined and illustrates how to provide specific configurations when attaching actions to resource views. Inputs include the action class and optional keyword arguments for customizing the control's appearance and behavior; no outputs are returned directly as these helpers modify the resource UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customizable-controls.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\naction Avo::Actions::DisableAccount\naction Avo::Actions::DisableAccount, arguments: { hide_some_fields: true }\naction Avo::Actions::ExportSelection, style: :text\naction Avo::Actions::PublishPost, color: :fuchsia, icon: \"heroicons/outline/eye\"\n```\n\n----------------------------------------\n\nTITLE: Custom find record method using `friendly_id`\nDESCRIPTION: Specifies a custom method for fetching a single record using a friendly ID or slug, allowing flexibility in URL parameters and model lookup strategies.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  self.find_record_method = ->(model_class:, id:, params:) do\n    id.to_i == 0 ? model_class.find_by_slug(id) : model_class.find(id)\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  before_save :update_slug\n\n  def to_param\n    slug || id\n  end\n\n  def update_slug\n    self.slug = name.parameterize\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Chartkick Area Chart Card in Ruby\nDESCRIPTION: Creates a UserSignups card that displays user signup data as an area chart. The card generates random data points for three batches of users over a period of years.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserSignups < Avo::Dashboards::ChartkickCard\n  self.id = 'user_signups'\n  self.label = 'User signups'\n  self.chart_type = :area_chart\n  self.description = 'Some tiny description'\n  self.cols = 2\n  # self.rows = 1\n  # self.chart_options = { library: { plugins: { legend: { display: true } } } }\n  # self.flush = true\n  # self.legend = false\n  # self.scale = false\n  # self.legend_on_left = false\n  # self.legend_on_right = false\n\n  def query\n    points = 16\n    i = Time.new.year.to_i - points\n    base_data =\n      Array\n        .new(points)\n        .map do\n          i += 1\n          [i.to_s, rand(0..20)]\n        end\n        .to_h\n\n    data = [\n      { name: 'batch 1', data: base_data.map { |k, v| [k, rand(0..20)] }.to_h },\n      { name: 'batch 2', data: base_data.map { |k, v| [k, rand(0..40)] }.to_h },\n      { name: 'batch 3', data: base_data.map { |k, v| [k, rand(0..10)] }.to_h }\n    ]\n\n    result data\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Tag Suggestions Dynamically from API Endpoint - Ruby\nDESCRIPTION: This field configuration lets you have tag suggestions fetched from a server endpoint dynamically via the fetch_values_from option. It's intended for large or frequently updated tag lists. Inputs include user query strings, and the field hits the specified URL to fetch updated suggestions each time. The output is a dynamic dropdown of tag suggestions. Dependencies: Configured backend endpoint returning value-label pairs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  fetch_values_from: \"/avo/resources/skills/skills_for_user\"\n\n```\n\n----------------------------------------\n\nTITLE: Integrate FriendlyID into ActiveRecord model\nDESCRIPTION: Extends the ActiveRecord model with `FriendlyId` and configures it to use the `name` attribute for generating friendly IDs. It also specifies that `FriendlyId` should be used for finding records. This allows finding posts using a human-readable name instead of the numerical ID.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/custom-ids.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post.rb\nclass Post < ApplicationRecord\n  extend FriendlyId\n\n  # This post model have a name column\n  friendly_id :name, use: :finders\nend\n```\n\n----------------------------------------\n\nTITLE: Preventing Modal Backdrop Click Closing in Ruby\nDESCRIPTION: Shows how to prevent users from closing an action modal by clicking on the backdrop, introduced in Avo version 3.14.0.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/customization.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  self.close_modal_on_backdrop_click = false\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the Avo Tools Controller in Rails\nDESCRIPTION: This Ruby code defines a controller within the Avo namespace to handle custom pages or tools within the Avo admin interface. It sets the page title and adds a breadcrumb to the page.  Dependencies: The Avo framework must be installed and configured. The class extends Avo::ApplicationController.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/multitenancy.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/avo/tools_controller.rb\nclass Avo::ToolsController < Avo::ApplicationController\n  def custom_page\n    @page_title = \"Your custom page\"\n\n    add_breadcrumb \"Your custom page\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example Color Palettes for Avo Branding (Ruby)\nDESCRIPTION: Provides several pre-defined color palettes (Blue, Red, Green, Orange) compatible with Avo's branding configuration. Each palette includes the four necessary shades (100, 400, 500, 600) to be used within the `config.branding[:colors]` hash.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/branding.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.branding = {\n  colors: {\n    # BLUE\n    100 => \"#CEE7F8\",\n    400 => \"#399EE5\",\n    500 => \"#0886DE\",\n    600 => \"#066BB2\",\n    # RED\n    100 => \"#FACDD4\",\n    400 => \"#F06A7D\",\n    500 => \"#EB3851\",\n    600 => \"#E60626\",\n    # GREEN\n    100 => \"#C5F1D4\",\n    400 => \"#3CD070\",\n    500 => \"#30A65A\",\n    600 => \"#247D43\",\n    # ORANGE\n    100 => \"#FFECCC\",\n    400 => \"#FFB435\",\n    500 => \"#FFA102\",\n    600 => \"#CC8102\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting a Specific Avo Partial Template\nDESCRIPTION: This snippet allows ejecting any specific partial view by providing its file path, enabling detailed customization. Keep in mind that ejected views won’t auto-update with new releases and require manual maintenance.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\n▶ bin/rails generate avo:eject app/views/layouts/avo/application.html.erb\n```\n\n----------------------------------------\n\nTITLE: Styling Progress Bars with Tailwind CSS\nDESCRIPTION: CSS styles for styling progress bars using Tailwind CSS utility classes. Includes styling for the progress element itself and browser-specific pseudo-elements for progress bar appearance.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\nprogress {\n  @apply h-2 bg-white border border-gray-400 rounded shadow-inner;\n}\nprogress[value]::-webkit-progress-bar {\n  @apply bg-white border border-gray-500 rounded shadow-inner;\n}\nprogress[value]::-webkit-progress-value{\n  @apply bg-green-600 rounded;\n\n}\nprogress[value]::-moz-progress-bar {\n  @apply bg-green-600 rounded appearance-none;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fields to Show in Preview Popup in Ruby\nDESCRIPTION: Example of how to make a field visible in the preview popup by using the show_on :preview option. This determines which record information will be displayed when hovering over the preview icon.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/preview.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, show_on :preview\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Actions in Resource Show Controls in Avo (Ruby)\nDESCRIPTION: This Ruby class example shows how to use conditional logic with if/else statements to control the visibility of actions inside a resource's show_controls block in Avo. The approach demonstrates adding core control buttons (back_button, edit_button), and dynamically including an action button based on a record attribute (record.something?). It requires the Avo framework and access to an individual resource record in context. Inputs include the current record object; outputs are the rendered control buttons with conditions applied. Limitations include that the action's 'visible' block is not evaluated when used inside show_controls.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customizable-controls.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.show_controls = -> do\n    back_button label: \"\", title: \"Go back now\"\n\n    # visibility conditional\n    if record.something?\n      action Avo::Actions::ReleaseFish, style: :primary, color: :fuchsia, icon: \"heroicons/outline/globe\"\n    end\n\n    edit_button label: \"\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Text for Avo Fields (Ruby)\nDESCRIPTION: Illustrates using the `placeholder:` option to display instructional text within an input field (e.g., `:name`) on the New and Edit views when the field is empty.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, placeholder: 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Implementing Stimulus Methods for Dynamic Interaction in JavaScript\nDESCRIPTION: Defines a Stimulus controller with a target corresponding to a specific field wrapper. The `toggleSkills` method toggles the `hidden` class on the targeted element, enabling show/hide functionality controlled via data attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\";\n\nexport default class extends Controller {\n  static targets = [\"skillsTagsWrapper\"];\n\n  toggleSkills() {\n    this.skillsTagsWrapperTarget.classList.toggle(\"hidden\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a default scope for a resource\nDESCRIPTION: Shows how to set a default scope that is applied when navigating to the resources page, with both static and dynamic options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/scopes.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef scopes\n  scope Avo::Scopes::OddId\n  # EvenId scope is applied as default\n  scope Avo::Scopes::EvenId, default: true\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef scopes\n  scope Avo::Scopes::OddId\n  scope Avo::Scopes::EvenId, default: -> { current_user.admin? }\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Static Map Rendering with 'static' Option in Ruby\nDESCRIPTION: This snippet demonstrates how to enable static map images in the Location field by setting the 'static' option to true, using the 'mapkick-static' gem. It allows rendering non-interactive maps with specified styles.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/location.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :coordinates,\n  as: :location,\n  stored_as: [:latitude, :longitude],\n  static: true,\n  mapkick_options: {\n    style: 'mapbox://styles/mapbox/satellite-v9'\n  }\n```\n\n----------------------------------------\n\nTITLE: Displaying Timestamps Discreetly in Avo (Ruby)\nDESCRIPTION: Sets the `discreet_information` option to display the `created_at` and `updated_at` timestamps. Using the `:timestamps` value adds an icon that reveals the timestamps on hover.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/discreet-information.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = :timestamps\n\n  # fields and other resource configuration\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an External Image Field in Avo with Ruby\nDESCRIPTION: Defines a field named 'logo' as an external image in an Avo resource. The image URL is expected to be stored directly in the database field. This snippet requires Avo framework and Rails helpers for image_tag rendering. It provides a simple approach to display images on Index and Show views by passing the field value to the external_image field type.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/external_image.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :logo, as: :external_image\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Filters in Ruby\nDESCRIPTION: Illustrates how to control the visibility of an Avo filter based on specific conditions using the `self.visible` attribute with a lambda. The lambda receives context variables like `current_user`, `params`, `resource`, etc., and must return `true` or `false` to show or hide the filter.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nself.visible = -> do\n  #   You have access to:\n  #   block\n  #   context\n  #   current_user\n  #   params\n  #   parent_model\n  #   parent_resource\n  #   resource\n  #   view\n  #   view_context\n  true\nend\n```\n\n----------------------------------------\n\nTITLE: File Download Response in Ruby Avo Actions\nDESCRIPTION: Example of implementing a file download response in an Avo action. Requires setting self.may_download_file to true and generates a CSV file for download based on record data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::DownloadFile < Avo::BaseAction\n  self.name = \"Download file\"\n  self.may_download_file = true\n\ndef handle(query:, **args)\n    filename = \"projects.csv\"\n    report_data = []\n\n    query.each do |project|\n      report_data << project.generate_report_data\n    end\n\n    succeed 'Done!'\n\n    if report_data.present? and filename.present?\n      download report_data, filename\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including All Helpers Programmatically in Avo's BaseField Class in Ruby on Rails\nDESCRIPTION: This code snippet shows how to dynamically include all helper modules from the app/helpers directory into the Avo::Fields::BaseField class, enabling all helper methods to be accessible within resource files. It uses Rails helper loading mechanisms to gather and include helpers during application preparation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/use-own-helpers-in-resource-files.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # Usual Avo config\nend\n\nmodule FieldExtensions\n  # Include all helpers\n  helper_names = ActionController::Base.all_helpers_from_path Rails.root.join(\"app\", \"helpers\")\n  helpers = ActionController::Base.modules_for_helpers helper_names\n  helpers.each do |helper|\n    send(:include, helper)\n  end\nend\n\nRails.configuration.to_prepare do\n  Avo::Fields::BaseField.include FieldExtensions\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Mapping Fields Sidebar Data in Vue.js\nDESCRIPTION: This snippet uses the `useData` composable from VitePress to access the site's configuration, specifically the sidebar data. It targets the sidebar section corresponding to '/2.0/' and filters to find the 'Fields' item.  Then, the snippet maps the item's sub-items to an array containing `text` and a modified `link`. The link modification replaces '.md' with '.html'. It requires VitePress and Vue.js to be set up correctly with a sidebar configuration defined. The output is an array of objects, each containing the text and the associated HTML link for a field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields.md#_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n  import {useData} from 'vitepress'\n  const {site} = useData()\n  const fields = site.value.themeConfig.sidebar['/2.0/']\n    .find((item) => item.text === 'Fields')\n    .items\n    .map((item) => ({\n      text: item.text,\n      link: item.link.replace('.md', '.html')\n    }))\n```\n\n----------------------------------------\n\nTITLE: Generating a Basic Avo Action using Rails Generator (Bash)\nDESCRIPTION: This command uses the Rails generator provided by Avo to create a new action file named 'toggle_inactive'. It scaffolds the basic structure for an Avo action within the `app/avo/actions/` directory.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/generator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:action toggle_inactive\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Model Class with self.model_class in Avo Resource - Ruby\nDESCRIPTION: Details how to manually specify a model class for an Avo resource when models are namespaced or reused. Here, self.model_class is set to a string identifying the model, and custom fields are defined in resource fields method. Requires the Avo framework and the referenced model to exist.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::DelayedJob < Avo::BaseResource\n  self.model_class = \"Delayed::Job\"\n\n  def fields\n    field :id, as: :id\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Suggestions with dynamic_filter (Array of Hashes)\nDESCRIPTION: Demonstrates using an array of hashes for tags, when creating dynamic filters.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :tags,\n  suggestions: [\n    {\n      value: 1,\n      label: 'one',\n      avatar: 'https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n    },\n    # ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Using URL helpers in Avo\nDESCRIPTION: Demonstrates how to use Rails URL helpers within the Avo admin panel by prepending them with `main_app`. This is necessary because Avo runs as a Rails engine, and Rails needs to know which engine to find the route for.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/faq.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :partner_home, as: :text, as_html: true do\n  link_to 'Partner', main_app.partner_home_url(record)\nend\n```\n\n----------------------------------------\n\nTITLE: Using redirect_to for Action Response\nDESCRIPTION: Demonstrates how to redirect users to different locations after an action is executed using the redirect_to method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.name = \"Release fish back into the ocean\"\n\n  def handle(models:, **args)\n    models.each do |fish|\n      fish.update released: true\n    end\n\n    succeed \"Fish released back into the ocean 🌊\"\n    redirect_to \"/admin/resources/fish\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPickerField Class in Avo\nDESCRIPTION: Ruby class for a custom ColorPickerField in Avo that inherits from BaseField. It includes configuration for always_show option which determines if the field content is always visible or can be toggled.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/fields/color_picker_field.rb\nclass Avo::Fields::ColorPickerField < Avo::Fields::BaseField\n  attr_reader :always_show\n\n  def initialize(id, **args, &block)\n    super(id, **args, &block)\n\n    @always_show = args[:always_show] || false\n    @allow_non_colors = args[:allow_non_colors]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing the Query Logic for an Avo Metric Card in Ruby\nDESCRIPTION: Provides a detailed example of the `query` method within a `UsersMetric` card. It calculates `from` and `to` dates based on the selected `range` (handling integer days and string identifiers like 'TODAY', 'MTD'), queries the `User` model within the date range, and sets the card's value using the `result` method. The method has access to `context`, `params`, `range`, `dashboard`, and `card`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.label = 'Users count'\n  self.description = 'Some tiny description'\n  self.cols = 1\n  # self.rows = 1\n  # self.initial_range = 30\n  # self.ranges = [7, 30, 60, 365, 'TODAY', 'MTD', 'QTD', 'YTD', 'ALL']\n  # self.prefix = '$'\n  # self.suffix = '%'\n  # self.refresh_every = 10.minutes\n\n  def query\n    from = Date.today.midnight - 1.week\n    to = DateTime.current\n\n    if range.present?\n      if range.to_s == range.to_i.to_s\n        # Integer check: 7, 30, 60, 365\n        from = DateTime.current - range.to_i.days\n      else\n        # String check: 'TODAY', 'MTD', 'QTD', 'YTD', 'ALL'\n        case range\n        when 'TODAY'\n          from = DateTime.current.beginning_of_day\n        when 'MTD'\n          from = DateTime.current.beginning_of_month\n        when 'QTD'\n          from = DateTime.current.beginning_of_quarter\n        when 'YTD'\n          from = DateTime.current.beginning_of_year\n        when 'ALL'\n          from = Time.at(0)\n        end\n      end\n    end\n\n    # Call the `result` method with the resulting value\n    # Value should be an integer/float\n    result User.where(created_at: from..to).count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cities Tags Controller in Avo HQ\nDESCRIPTION: Creates a controller for handling city tag requests in Avo. The tags action returns a JSON array of objects with value, label, and avatar properties, supporting filter dropdown with avatars.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::CitiesController < Avo::ResourcesController\n  def tags\n    # You can access the user input by using params[\"q\"]\n    render json: [\n      {\n        value: 1,\n        label: \"one\",\n        avatar: \"https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop\"\n      },\n      {\n        value: 2,\n        label: \"two\",\n        avatar: \"https://images.unsplash.com/photo-1567254790685-6b6d6abe4689?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop\"\n      },\n      {\n        value: 3,\n        label: \"three\",\n        avatar: \"https://images.unsplash.com/photo-1560765447-da05a55e72f8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop\"\n      }\n    ]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Integrating helpers into Avo Tools Controller\nDESCRIPTION: Example of including custom application helpers in the Avo tools controller to make them available in custom tool views, with sample helper code.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-tools.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/helpers/home_helper.rb\nmodule HomeHelper\n  def custom_helper\n    'hey from custom helper'\n  end\nend\n\n# app/controllers/avo/tools_controller.rb\nclass Avo::ToolsController < Avo::ApplicationController\n  helper HomeHelper\n\n  def dashboard\n    @page_title = \"Dashboard\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Store with Lambda in Avo\nDESCRIPTION: This snippet sets a custom cache store in Avo initialization, using a lambda to select a store dynamically, useful for environment-specific configurations. It replaces the default store with 'ActiveSupport::Cache.lookup_store(:solid_cache_store)'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cache.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nconfig.cache_store = -> {\n  ActiveSupport::Cache.lookup_store(:solid_cache_store)\n}\n\n# or\n\nconfig.cache_store = ActiveSupport::Cache.lookup_store(:solid_cache_store)\n```\n\n----------------------------------------\n\nTITLE: Adding Dashboard Links Avo Menu Ruby\nDESCRIPTION: Shows how to add links to Avo dashboards using the `dashboard` helper within the menu configuration. It demonstrates referencing dashboards by their ID (symbol, e.g., `:dashy`) or their name (string, e.g., `\"Sales\"`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ndashboard :dashy\ndashboard \"Sales\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Card Visibility in Ruby\nDESCRIPTION: Shows how to conditionally display a dashboard card based on dynamic conditions using the 'visible' option with a lambda.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Dashy < Avo::Dashboards::BaseDashboard\n  self.name = \"Dashy\"\n\n  card UsersCount, visible: -> {\n    # You have access to context, params, parent (the current dashboard)\n    true\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring `picker_options` for Flatpickr Integration\nDESCRIPTION: This snippet discusses the `picker_options` setting, which allows passing additional options directly to the `flatpickr` date picker plugin. The default is an empty object `{}`, and the configuration can override other settings. The section highlights dependencies on `flatpickr` library and warns about potential conflicts with other options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/date.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Customizing Show and Index Views for ProgressBarField with ERB Templates\nDESCRIPTION: Provides ERB template code for the show and index components of the progress bar field. These templates check if 'display_value' is true to show a textual value with an optional suffix, and render an HTML 'progress' element with the field's max and value attributes. This adds a visual progress bar UI along with the numeric display for enhanced user experience.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_9\n\nLANGUAGE: erb\nCODE:\n```\n<%= show_field_wrapper field: @field, index: @index do %>\n  <% if @field.display_value %>\n    <div class=\"text-center text-sm font-semibold w-full leading-none mb-1\">\n      <%= @field.value %><%= @field.value_suffix if @field.value_suffix.present? %>\n    </div>\n  <% end %>\n  <progress max=\"<%= @field.max %>\" value=\"<%= @field.value %>\" class=\"block w-full\"></progress>\n<% end %>\n\n<%= index_field_wrapper field: @field do %>\n  <% if @field.display_value %>\n    <div class=\"text-center text-sm font-semibold w-full leading-none mb-1\">\n      <%= @field.value %><%= @field.value_suffix if @field.value_suffix.present? %>\n    </div>\n  <% end %>\n  <progress max=\"<%= @field.max %>\" value=\"<%= @field.value %>\" class=\"block w-24\"></progress>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Including Avo::Metaable module in a Rails model\nDESCRIPTION: Mixes in the Avo::Metaable module into a model (e.g., User) to enable meta attributes management, creating associated schema and resource UI elements.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-meta.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nclass User < ApplicationRecord\n  include Avo::Metaable\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing view component directory in Avo\nDESCRIPTION: Overrides the default view component directory to a custom path for organization or project structure preferences.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.view_component_path = \"app/frontend/components\"\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Solid Cache Gem to Gemfile in Ruby\nDESCRIPTION: Provides the line to add the `solid_cache` gem to your Rails application's Gemfile. This is the initial step required to integrate Solid Cache into your project. Requires Bundler.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cache.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"solid_cache\"\n```\n\n----------------------------------------\n\nTITLE: Updating TailwindCSS 4 border color defaults\nDESCRIPTION: Example of updating HTML classes to accommodate TailwindCSS 4's changed default border color, showing how to explicitly specify border colors.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tailwind-4-migration.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"border p-4\"> <!-- TailwindCSS 3 -->  // [!code --]\n<div class=\"border border-gray-200 p-4\"> <!-- TailwindCSS 4 --> // [!code ++]\n  Content with default gray border\n</div>\n```\n\n----------------------------------------\n\nTITLE: Override create_success_action - Ruby\nDESCRIPTION: This snippet demonstrates how to override the `create_success_action` method.  It defines the behavior after a resource is created successfully. It redirects the user to a specified path with a success message, informing them of the outcome.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_success_action\n  respond_to do |format|\n    format.html { redirect_to after_create_path, notice: create_success_message}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Auto-Refresh for Dashboard Cards in Ruby\nDESCRIPTION: Example of configuring automatic data refresh for a dashboard card using the refresh_every property.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cards.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.refresh_every = 10.minutes\nend\n```\n\n----------------------------------------\n\nTITLE: Decorating Field Values Using decorate Option in Avo (Ruby)\nDESCRIPTION: Describes replacing format_using with decorate from Avo v3.20 onwards. The decorate block applies only on display views, allowing formatted output such as emojis or HTML. The field can still specify block defaults after configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :is_writer, as: :text, decorate: -> { value.present? ? '👍' : '👎' }\n\nfield :company_url,\n  as: :text,\n  decorate: -> {\n    link_to(value, value, target: \"_blank\")\n  } do\n  main_app.companies_url(record)\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Active Storage Attachments for Trix Field in Avo (Ruby)\nDESCRIPTION: Configures the `:body` Trix field to support file attachments using Rails Active Storage. The `attachment_key` option must be provided with a symbol corresponding to the `has_many_attached` association defined on the associated model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/trix.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :trix, attachment_key: :trix_attachments\n```\n\n----------------------------------------\n\nTITLE: Ejecting View Component with Rails Generator --component Option - Ruby on Rails - Bash\nDESCRIPTION: This snippet describes ejecting a specific view component from Avo (e.g., Index::TableRowComponent) using the Rails generator with the --component option. Two syntaxes are demonstrated: a Ruby namespaced class and a path-like format; both result in generating the component Ruby file and ERB template. This is suitable for advanced UI customization and requires the Avo gem and Rails installed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/eject-views.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:eject --component Avo::Index::TableRowComponent\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:eject --component avo/index/table_row_component\n```\n\nLANGUAGE: bash\nCODE:\n```\ncreate  app/components/avo/index/table_row_component.rb\ncreate  app/components/avo/index/table_row_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Prevent Avo Action Modal Backdrop Click Close (Ruby)\nDESCRIPTION: Disables the default behavior of closing the action modal when the user clicks outside the modal area (on the backdrop). This ensures the user must interact with the modal's buttons to proceed or cancel.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/customization.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  self.close_modal_on_backdrop_click = false\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Avo Field Using an Existing Field Template - Bash\nDESCRIPTION: Shows how to duplicate an existing Avo field using the Rails generator with the '--field_template' argument, allowing reuse of an existing field's code as a starting point for a new field. The generated components will inherit the existing field's code structure for streamlined extension or modification.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate avo:field super_text --field_template text\n      create  app/components/avo/fields/super_text_field\n      create  app/components/avo/fields/super_text_field/edit_component.html.erb\n      create  app/components/avo/fields/super_text_field/edit_component.rb\n      create  app/components/avo/fields/super_text_field/index_component.html.erb\n      create  app/components/avo/fields/super_text_field/index_component.rb\n      create  app/components/avo/fields/super_text_field/show_component.html.erb\n      create  app/components/avo/fields/super_text_field/show_component.rb\n      create  app/avo/fields/super_text_field.rb\n```\n\n----------------------------------------\n\nTITLE: Using `prefixed_ids` gem for record lookup\nDESCRIPTION: Configures the model with `has_prefix_id` to enable record lookup via prefixed IDs; Avo automatically handles search queries with such IDs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass Course < ApplicationRecord\n  has_prefix_id :course\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Action\nDESCRIPTION: This code defines an Avo action named `ToggleInactive`. It includes fields for controlling user notification and a customizable message. The `handle` method updates the active status of selected models and optionally sends a notification email.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass ToggleInactive < Avo::BaseAction\n  self.name = 'Toggle inactive'\n\n  field :notify_user, as: :boolean, default: true\n  field :message, as: :text, default: 'Your account has been marked as inactive.'\n\n  def handle(**args)\n    models, fields, current_user, resource = args.values_at(:models, :fields, :current_user, :resource)\n\n    models.each do |model|\n      if model.active\n        model.update active: false\n      else\n        model.update active: true\n      end\n\n      # Optionally, you may send a notification with the message to that user from inside the action\n      UserMailer.with(user: model).toggle_inactive(fields[\"message\"]).deliver_later\n    end\n\n    succeed 'Perfect!'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Show Component for Custom Field (ERB)\nDESCRIPTION: This ERB snippet defines the show view component for the `progress_bar` custom field. It renders the field's value within an Avo show field wrapper. It displays the current value of the field in the show view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_5\n\nLANGUAGE: ERB\nCODE:\n```\n# app/components/avo/fields/progress_bar_field/show_component.html.erb\n<%= show_field_wrapper field: @field, index: @index do %>\n  <%= @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Customizing Show Controls in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to override the default controls on an Avo resource's show page using the `show_controls` class attribute. It defines a block containing various controls like a back button, custom links (`link_to`), delete and detach buttons, an action list (`actions_list`) excluding a specific action, a standalone action button (`action`), and an edit button, allowing for complete customization of the view's header controls.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customizable-controls.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.show_controls = -> do\n    back_button label: \"\", title: \"Go back now\"\n    link_to \"Fish.com\", \"https://fish.com\", icon: \"heroicons/outline/academic-cap\", target: :_blank\n    link_to \"Turbo demo\", \"/admin/resources/fish/#{params[:id]}?change_to=🚀🚀🚀 New content here 🚀🚀🚀\",\n      class: \".custom-class\",\n      data: {\n        turbo_frame: \"fish_custom_action_demo\"\n      }\n    delete_button label: \"\", title: \"something\"\n    detach_button label: \"\", title: \"something\"\n    actions_list label: \"Runnables\", exclude: [ReleaseFish], style: :primary, color: :slate\n    action Avo::Actions::ReleaseFish, style: :primary, color: :fuchsia, icon: \"heroicons/outline/globe\"\n    edit_button label: \"\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering DownloadFile Action\nDESCRIPTION: This code registers the `DownloadFile` action with the `ProjectResource`, making it available to users for downloading project data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProjectResource < Avo::BaseResource\n\n  # fields here\n\n  action DownloadFile\nend\n```\n\n----------------------------------------\n\nTITLE: Associating Existing User Records to Tenant with Seeds Script Ruby\nDESCRIPTION: Creates or finds a default tenant Account, then batches through all existing User records (unscoped) to associate them with this tenant by setting account_id. The update_all method is used for performance, with a slight delay between batches to throttle database load. This prepares existing data for multitenancy compliance.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/acts_as_tenant_integration.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Create default/first account where we want to associate exiting data\naccount = Account.find_or_create_by!(name: 'Nepal', subdomain: 'sahsantoshh')\n\nUser.unscoped.in_batches do |relation|\n  relation.update_all(account_id: account.id)\n  sleep(0.01) # throttle\nend\n```\n\n----------------------------------------\n\nTITLE: Using the 'body' Slot in Avo::PanelComponent (ERB)\nDESCRIPTION: Highlights the usage of the 'body' slot, which serves as the primary container for displaying the main content within the Avo::PanelComponent.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-components/avo-panel-component.md#_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_body do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Defining Extra Permitted Parameters in Avo Resource\nDESCRIPTION: This Ruby snippet configures which parameters are permitted in create/update requests for the resource by setting 'extra_params', including nested attributes, to ensure they can be mass-assigned safely and processed correctly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resource-tools.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nclass FishResource < Avo::BaseResource\n  self.extra_params = [:fish_type, :something_else, properties: [], information: [:name, :history]]\n\n  tool FishInformation, show_on: :forms\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Route for Skills Suggestions in Rails - Ruby\nDESCRIPTION: This code defines and mounts the Rails route required for dynamic tag suggestion fetching, enabling the tags field to connect to the backend action that serves tag suggestions. It is required as part of backend setup in apps using Avo. The main input is a HTTP GET request; the output is the response from the controller action. Dependencies: Rails routing, user authentication, and Avo engine mounting.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  # your routes\n\n  authenticate :user, ->(user) { user.is_admin? } do\n    mount_avo\n  end\nend\n\nif defined? ::Avo\n  Avo::Engine.routes.draw do\n    scope :resources do\n      # Add route for the skills_for_user action\n      get \"skills/skills_for_user\", to: \"skills#skills_for_user\"\n    end\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamic Filter with dynamic_filter Method\nDESCRIPTION: This snippet illustrates defining a custom dynamic filter using the `dynamic_filter` method within the `filters` method of a model. This is an alternative approach to defining filters that allows for a more programmatic configuration and control over the filter's behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ndef filters\n  # ...\n  dynamic_filter :first_name\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Making a field readonly in Avo using Ruby\nDESCRIPTION: This code snippet demonstrates how to make a field read-only, preventing user edits on New and Edit views. It uses the `readonly` option. Note that this does not prevent users from enabling the field in the DOM and sending arbitrary values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, readonly: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Time Field with Ruby\nDESCRIPTION: This code snippet demonstrates how to configure the `Time` field in Avo using Ruby. It sets the `picker_format`, `format`, and `relative` options, as well as passes `time_24hr` option to flatpickr through `picker_options`. The field is named `starting_at`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/time.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :starting_at,\n  as: :time,\n  picker_format: 'H:i',\n  format: \"HH:mm\",\n  relative: true,\n  picker_options: {\n    time_24hr: true\n  }\n```\n\n----------------------------------------\n\nTITLE: ExecutionContext Helpers Example\nDESCRIPTION: This code illustrates how to use helpers within the `Avo::ExecutionContext`. A helper method `simple_name` is defined in `ProductsHelper`.  This helper is then called from within a field's `format_using` block, accessing it via the `helpers` object.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/execution-context.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# products_helper.rb\nclass ProductsHelper\n  # Strips the \"CODE_\" prefix from the name\n  def simple_name(name)\n    name.gsub \"CODE_\", \"\"\n  end\nend\n\nfield :name, as: :text, format_using: -> { helpers.simple_name(value) }\n```\n\n----------------------------------------\n\nTITLE: Setting use_resource Option with Avo Resource Class in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates specifying the resource to be used in Avo association tables by assigning the resource class directly (e.g., Avo::Resources::Post). This approach requires the Avo framework to be installed and the specified resource class to be defined and loaded in the application. The key parameter is the resource class constant, and the expected behavior is for the association table to display or redirect using the given resource. Limitations include the need for the class to be accessible in the context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/associations_use_resource_option_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nAvo::Resources::Post\n```\n\n----------------------------------------\n\nTITLE: Requiring Confirmation Before Saving with self.confirm_on_save in Avo Resource - Ruby\nDESCRIPTION: Demonstrates enabling confirmation dialogs before saving a resource by setting self.confirm_on_save to true in an Avo resource class. Requires Avo version 3.10.10 or newer. Adds friction to save actions to reduce accidental changes; defaults to false if not set.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.confirm_on_save = true\nend\n```\n\n----------------------------------------\n\nTITLE: Avo Unauthorized Action Log Format in Production (Bash)\nDESCRIPTION: Shows the simplified log format for unauthorized actions in the production environment (since Avo v3.11.7). For security, it only includes the policy class and the attempted action name, omitting user and record identifiers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_15\n\nLANGUAGE: Bash\nCODE:\n```\nweb     | [Avo->] Unauthorized action 'act_on?' for 'UserPolicy'\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop Reordering in Avo\nDESCRIPTION: Enables drag-and-drop functionality for record reordering with the insert_at action. This beta feature allows users to reposition records by dragging them to the desired position.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/records-reordering.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nself.ordering = {\n  display_inline: true,\n  visible_on: %i[index association], # :index or :association or both\n  # position: -> { record.position },\n  drag_and_drop: true,\n  actions: {\n    higher: -> { record.move_higher }, # has access to record, resource, options, params\n    lower: -> { record.move_lower },\n    to_top: -> { record.move_to_top },\n    to_bottom: -> { record.move_to_bottom },\n    insert_at: -> { record.insert_at position }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Options for Avo Select Fields (Ruby)\nDESCRIPTION: Illustrates how to populate the dropdown options for an Avo select field (`:status`). The `options:` parameter accepts an array of strings, which become the available choices in the select input.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# options will set the dropdown options for a select field\nfield :status, as: :select, options: %w[first second third]\n```\n\n----------------------------------------\n\nTITLE: Implementing Country Filter for Courses in Ruby\nDESCRIPTION: Shows the implementation of a boolean filter for filtering courses by country, with options dynamically generated from the Course model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/filters/course_country.rb\nclass Avo::Filters::CourseCountry < Avo::Filters::BooleanFilter\n  self.name = \"Course country filter\"\n\n  def apply(request, query, values)\n    query.where(country: values.select { |country, selected| selected }.keys)\n  end\n\n  def options\n    Course.countries.map { |country| [country, country] }.to_h\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Array Field with Static Data - Avo Resource - Ruby\nDESCRIPTION: This Ruby snippet shows how to define an `Array` field within an Avo resource's `fields` method and provide the data directly using a block. This is suitable for displaying static or pre-defined array data within the Avo interface. The block must return an array of data, typically hashes representing records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/array.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Course < Avo::BaseResource\n  def fields\n    field :attendees, as: :array do\n      [\n        { id: 1, name: \"John Doe\", role: \"Software Developer\", organization: \"TechCorp\" },\n        { id: 2, name: \"Jane Smith\", role: \"Data Scientist\", organization: \"DataPros\" }\n      ]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running bundle install to include the gem dependencies\nDESCRIPTION: Executes the command to install the gem specified in the Gemfile, ensuring the Avo::Meta package is available in the Rails application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-meta.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle\n```\n\n----------------------------------------\n\nTITLE: Configuring global stacked layout in Avo using Ruby\nDESCRIPTION: This code snippet shows how to globally configure all fields to use the `stacked` layout by changing the `field_wrapper_layout` initializer option to `:stacked`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.field_wrapper_layout = :stacked\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a Link to Discreet Information in Avo (Ruby)\nDESCRIPTION: Demonstrates how to make the discreet information icon a clickable link using the `url` option within a hash. The URL is generated dynamically using a lambda, potentially using Rails URL helpers like `main_app`. Requires the Avo resource class and access to relevant URL helpers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/discreet-information.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = {\n    tooltip: -> { \"Product is #{record.published_at ? \"published\" : \"draft\"}\" },\n    icon: \"heroicons/outline/academic-cap\",\n    url: -> { main_app. } # Example incomplete in source, intended to use a path helper\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Logger Configuration for Avo (Ruby)\nDESCRIPTION: This snippet allows for configuring a custom logger for Avo, enabling a different output stream to capture Avo's logs. It configures the `config.logger` Proc to define a custom logger that outputs to a file with a specific datetime format and message format.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n## == Logger ==\nconfig.logger = -> {\n  file_logger = ActiveSupport::Logger.new(Rails.root.join(\"log\", \"avo.log\"))\n\n  file_logger.datetime_format = \"%Y-%m-%d %H:%M:%S\"\n  file_logger.formatter = proc do |severity, time, progname, msg|\n    \"[Avo] #{time}: #{msg}\\n\".tap do |i|\n      puts i\n    end\n  end\n\n  file_logger\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Avo Control Buttons for Various Resource Views (Ruby)\nDESCRIPTION: This snippet lists the standard control buttons added by Avo in different resource view contexts (show controls, form controls, index controls, and row controls) in Ruby. No dependencies are required for reading this snippet, but practical usage assumes an Avo resource. It serves as a reference for understanding which controls are automatically included, allowing developers to identify which controls must be overridden or supplemented for custom behavior. The listed commands (e.g., back_button, edit_button) represent built-in Avo helpers and do not produce direct output.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customizable-controls.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# show controls\nback_button\ndelete_button\ndetach_button\nactions_list\nedit_button\n\n# form (edit & new) controls\nback_button\ndelete_button\nactions_list\nsave_button\n\n# index controls\nattach_button\nactions_list\ncreate_button\n\n# row controls\norder_controls\nshow_button\nedit_button\ndetach_button\ndelete_button\n```\n\n----------------------------------------\n\nTITLE: Render newlines for textarea field\nDESCRIPTION: Demonstrates how to render newlines correctly when using the `textarea` field in Avo, addressing the issue of newlines not being displayed on the Show view. It presents using `simple_format` or the `white-space: pre-line` style rule as solutions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/faq.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  def fields\n    field :body, as: :textarea\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  def fields\n    field :body,\n      as: :textarea,\n      format_using: -> do\n        simple_format value\n      end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  def fields\n    field :body,\n      as: :textarea,\n      format_using: -> do\n        content_tag(:div, style: 'white-space: pre-line') { value }\n      end\n    end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  def fields\n    field :body,\n      as: :textarea,\n      format_using: -> do\n        content_tag(:div, class: 'whitespace-pre-line') { value }\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: Apply the database migrations created by the installer to set up the necessary tables for audit logging.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Boolean condition mappings for dynamic filters - Ruby\nDESCRIPTION: This Ruby hash defines condition keys and human-readable labels for boolean filters used with dynamic filters in Avo. The `.invert` method is applied to swap keys and values for internal mapping purposes. Dependencies include this structure being used when rendering filter condition options. The hash maps conditions like 'Is true' and 'Is null' for boolean fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  is_true: \"Is true\",\n  is_false: \"Is false\",\n  is_null: \"Is null\",\n  is_not_null: \"Is not null\",\n}.invert\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Attachments in Resources via `self.attachments` in Ruby\nDESCRIPTION: This snippet illustrates how to load file attachments on the Index view using `self.attachments`. It requires that the model declares Active Storage attachments and the resource metadata to specify which attachments to load, improving performance when displaying models with attachments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_32\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  has_one_attached :cover_photo\n  has_one_attached :audio\n  has_many_attached :attachments\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.attachments = [:cover_photo, :audio, :attachments]\nend\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Help Helper in Avo Field (Ruby)\nDESCRIPTION: Shows how to apply the `markdown_help` method to an Avo field's `help:` attribute. It uses a Ruby heredoc (`<<~MARKDOWN`) to embed multiline Markdown content directly within the field definition, which is then processed by the helper to generate the HTML displayed as the field's help text in the Avo UI. Requires the `MarkdownHelpText` module to be available.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/use-markdown-in-help-attributes.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n field :description_copy, as: :markdown,\n    help: markdown_help(<<~MARKDOWN\n      # Dog\n      ## Cat\n      ### bird\n      paragraph about hats **bold hat**\n\n      ~~~\n      class Ham\n        def wow\n          puts \"wow\"\n        end\n      end\n      ~~~\n\n      `code thinger`\n\n      - one\n      - two\n      - three\n    MARKDOWN\n    )\n```\n\n----------------------------------------\n\nTITLE: Ejecting Logo Partial with Rails Generator - Ruby on Rails - Bash\nDESCRIPTION: This snippet demonstrates how to eject the default logo partial in an Avo-powered Rails app using the command line. It uses the Rails generator command with the avo:eject option and --partial :logo to extract the '_logo.html.erb' partial into the app/views/avo/partials directory. The resulting file can be customized by the developer and will override the default Avo logo. Requires Ruby on Rails and the Avo gem to be installed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/eject-views.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:eject --partial :logo\n```\n\nLANGUAGE: bash\nCODE:\n```\nRunning via Spring preloader in process 20947\n      create  app/views/avo/logo/_logo.html.erb\n```\n\n----------------------------------------\n\nTITLE: Override destroy_success_message - Ruby\nDESCRIPTION: This snippet demonstrates how to override the `destroy_success_message` method. It sets the success message displayed to the user after a resource is successfully destroyed. This example uses internationalization with the `t` helper method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\ndef destroy_success_message\n  t(\"avo.resource_destroyed\", attachment_class: @attachment_class)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting the Tooltip for Discreet Information in Avo (Ruby)\nDESCRIPTION: Shows how to configure the `tooltip` option within a hash for `discreet_information`. The tooltip content is generated dynamically using a lambda based on the `record.published_at` status. Requires the Avo resource class and access to the `record` object.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/discreet-information.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = {\n    tooltip: -> { \"Product is #{record.published_at ? \"published\" : \"draft\"}\" },\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Example Boolean Filter `values` Payload in Ruby\nDESCRIPTION: Shows the structure of the `values` hash received by the `apply` method in a Boolean filter. It's a hash where keys are the option names (stringified) and values are booleans indicating if the corresponding checkbox was checked.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# Example values payload\n{\n  'is_featured': true,\n  'is_unfeatured': false,\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling global search feature\nDESCRIPTION: Shows how to disable the global search functionality in the Avo configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/search.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.disabled_features = [:global_search]\nend\n```\n\n----------------------------------------\n\nTITLE: Adding `search?` Method to Policy Classes in Avo Ruby Authorization\nDESCRIPTION: Illustrates the requirement to add a `search?` method in policy classes to authorize whether users can see the search box and perform search queries. Also shows how to customize the authorization method name using `config.authorization_methods` in Avo configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserPolicy < ApplicationPolicy\n  def search?\n    true\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.authorization_methods = {\n    search: 'avo_search?',\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Marking Fields as Required with required Option or Dynamic Logic in Avo (Ruby)\nDESCRIPTION: Shows two ways to indicate a field is required: statically with required: true and dynamically with a lambda. The lambda variant allows conditionally marking fields as required based on the view or context. The required mark is visual only; ensure model validations are set up separately.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, required: true\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, required: -> { view == :new } # make the field required only on the new view and not on edit\n```\n\n----------------------------------------\n\nTITLE: Setting Zoom Level for Location Field Map in Ruby\nDESCRIPTION: Customizes the zoom level of the map display for a location field. The zoom parameter accepts values from 0 (most zoomed out) to 22 (most zoomed in).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/location.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :coordinates, as: :location, zoom: 5\n```\n\n----------------------------------------\n\nTITLE: Simplifying Avo Field Display Formatting with `decorate` (Ruby)\nDESCRIPTION: Introduces the `decorate` option (available since v3.20) as a simpler alternative to `format_using` for formatting field values only on display views (Index/Show). This example reformats the `:is_writer` field to show emojis.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nfield :is_writer, as: :text, decorate: -> { value.present? ? '👍' : '👎' }\n```\n\n----------------------------------------\n\nTITLE: Configuring search result with custom label\nDESCRIPTION: Shows how to customize the search result label using the as_label option and computed fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/search.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  self.title = :name\n  self.search_query = -> do\n    scope.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n  end\n\n  field :id, as: :id\n  field :name, as: :text, required: true, as_label: true\n  field :complex_name, as: :text, hide_on: :all, as_label: true do |model|\n    \"[#{model.id}]#{model.name}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for Avo Cities Tags Endpoint\nDESCRIPTION: Defines a custom route within the Avo engine that handles requests for city tags. The route is defined conditionally if Avo is available and maps to the CitiesController's tags action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # your routes...\nend\n\nif defined? ::Avo\n  Avo::Engine.routes.draw do\n    scope :resources do\n      get \"cities/tags\", to: \"cities#tags\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Avo Pro Gems in Ruby\nDESCRIPTION: Specifies the Avo Pro tier dependencies in a Ruby Gemfile. It includes the basic `avo` gem (>= 3.2.1) and the `avo-pro` gem (>= 3.2.0), which must be sourced from the private packager.dev repository. Requires access to the specified source.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/avo_in_gemfile.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\ngem \"avo\", \">= 3.2.1\"\ngem \"avo-pro\", \">= 3.2.0\", source: \"https://packager.dev/avo-hq/\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Panel with Custom Helper in Dashboard ERB View\nDESCRIPTION: This ERB snippet renders a custom dashboard using the Avo::PanelComponent in a Rails view. It uses slots for organizing dashboard content and demonstrates calling the custom_helper method from an included helper. Dependencies: Avo gem and accessible helpers via the controller. Parameters: The variable @page_title and any helper methods must be set/available. Output: HTML displaying panels and dynamic helper output.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-tools.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n# app/views/avo/tools/dashboard.html.erb\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new title: 'Dashboard', display_breadcrumbs: true do |c| %>\n    <% c.with_tools do %>\n      <div class=\"text-sm italic\">This is the panels tools section.</div>\n    <% end %>\n\n    <% c.with_body do %>\n      <div class=\"flex flex-col justify-between py-6 min-h-24\">\n        <div class=\"px-6 space-y-4\">\n          <h3>What a nice new tool 👋</h3>\n\n          <%= custom_helper %>\n        </div>\n      </div>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking Avo View - Form or Display using 'Ask' style\nDESCRIPTION: This code snippet shows how to check if the current Avo view is a `form` (`new`, `edit`) or `display` (`index`, `show`) using the 'ask' style, by calling the methods `view.form?` and `view.display?`\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/views.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nif view.form?\n  # Code for the \"new\" and \"edit\" views\nelsif view.display?\n  # Code for the \"show\" and \"index\" views\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Contextual Variables in Avo Action Visibility Block in Ruby\nDESCRIPTION: Shows an example of the variables accessible inside the `visible` lambda block for Avo actions, including block, context, current_user, params, parent_resource, resource, view, and view_context. These variables enable fine-grained control of whether an action is visible based on the runtime context, user, or resource state. Used from Avo version 2.9.0 onward.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nself.visible = -> do\n  #   You have access to:\n  #   block\n  #   context\n  #   current_user\n  #   params\n  #   parent_resource (can access the parent_model by parent_resource.model)\n  #   resource (can access the model by resource.model)\n  #   view\n  #   view_context\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Field in Ruby using Avo HQ\nDESCRIPTION: This snippet demonstrates how to define a password field in an Avo resource. The password field renders as an HTML input with type='password' that is only visible on Edit and New views by default.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/password.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :password, as: :password\n```\n\n----------------------------------------\n\nTITLE: Using the footer_controls slot\nDESCRIPTION: This snippet illustrates the usage of the `footer_controls` slot. This slot is similar to the `tools` slot but is placed at the bottom of the panel. The example shows how to insert content within the footer control slot.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-components/avo-panel-component.md#_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_footer_controls do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Displaying Record ID using Discreet Information in Avo (Ruby)\nDESCRIPTION: Shows how to configure `discreet_information` to display the record's ID next to the title in an Avo resource page by setting the attribute to the symbol `:id`. This requires an `Avo::Resources::Post` class (or similar Avo resource). The `:id_badge` option can be used for badge styling.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/discreet-information.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = :id\n\n  # fields and other resource configuration\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Discreet Information Items in Avo (Ruby)\nDESCRIPTION: Demonstrates setting `discreet_information` as an array to display multiple items in an Avo resource. This example shows how to include timestamps (`:timestamps`), a dynamic icon and tooltip based on `record.published_at`, and a dynamic label with a link opening in a new tab. Requires an `Avo::Resources::Post` class and access to the `record` object within lambdas. Uses `sanitize` for safe HTML in tooltips.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/discreet-information.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = [\n    :timestamps,\n    {\n      tooltip: -> { sanitize(\"Product is <strong>#{record.published_at ? \"published\" : \"draft\"}</strong>\", tags: %w[strong]) },\n      icon: -> { \"heroicons/outline/#{record.published_at ? \"eye\" : \"eye-slash\"}\" }\n    },\n    {\n      label: -> { record.published_at ? \"🚀\" : \"😬\" },\n      url: -> { \"https://avohq.io\" },\n      url_target: :_blank\n    }\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Adding accepts_nested_attributes_for in Ruby\nDESCRIPTION: This snippet configures the `Fish` model to accept nested attributes for its `reviews` association. It allows for creating or updating `Review` records through the `Fish` model.  It requires a `has_many` association and the `reviews` should be defined as an association in `Fish` model. The expected output is to allow creation or updates of reviews on the Fish's create/update page.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/nested-records-when-creating.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Fish < ApplicationRecord\n  has_many :reviews, as: :reviewable\n\n  accepts_nested_attributes_for :reviews\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing model methods for custom fields\nDESCRIPTION: This Ruby code provides an example of methods that need to be implemented within the model if a custom field is created without existing model getters and setters. This ensures that the custom field can interact with the model by allowing to read and write its content. It declares `custom_field` and `custom_field=` to enable functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n  def custom_field\n  end\n\n  def custom_field=(value)\n  end\n```\n\n----------------------------------------\n\nTITLE: Assigning Avo Resource Class to use_resource Option (Ruby)\nDESCRIPTION: Directly assigns the Avo resource class `Avo::Resources::Post` to the `use_resource` option, instructing Avo to display or redirect to the specified association resource. Requires the Avo gem and the corresponding resource class to be defined in your application. Expects a valid resource class and assumes standard Rails/Avo project structure.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/associations_use_resource_option_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nAvo::Resources::Post\n```\n\n----------------------------------------\n\nTITLE: Configuring Marshalling Format Version in Rails Application\nDESCRIPTION: Shows how to configure the `marshalling_format_version` in a Ruby on Rails application's `config/application.rb` file. Setting this to `7.1` or higher resolves serialization issues related to `normalize` procs encountered with Avo's 'Select All' feature in applications created before Rails 7.1.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/select-all.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\n\nconfig.active_record.marshalling_format_version = 7.1\n```\n\n----------------------------------------\n\nTITLE: Using Computed Values with Record Link Field in Avo in Ruby\nDESCRIPTION: This group of snippets demonstrates how to use blocks with the record_link field to generate links based on custom logic or service calls. The block should return an instance of the record (e.g., Post.find 42, User.find user_id), optionally using options like 'add_via_params' and 'use_resource'. These patterns allow dynamic display logic for field values in Avo resource definitions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/record_link.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nfield :post, as: :record_link do\n  # This will generate a link similar to this\n  # https://example.com/avo/resources/posts/42\n  Post.find 42\nend\n\n# or\n\nfield :creator, as: :record_link, add_via_params: false do\n  user_id = SomeService.new(comment: record).fetch_user_id # returns 31\n\n  # This will generate a link similar to this\n  # https://example.com/avo/resources/users/31\n  User.find user_id\nend\n\n# or\n\nfield :creator, as: :record_link, use_resource: \"AdminUser\", add_via_params: false do\n  user_id = SomeService.new(comment: record).fetch_user_id # returns 31\n\n  # This will generate a link similar to this\n  # https://example.com/avo/resources/admin_users/31\n  User.find user_id\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Conditions with filterable Option\nDESCRIPTION: This snippet provides an example of customizing filter conditions using the `conditions` option within the `filterable` hash. It shows how to define custom labels for different filtering conditions, offering a more user-friendly experience.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nfield :first_name,\n  as: :text,\n  filterable: {\n    # ...\n    conditions: {\n      case_sensitive: \"Case sensitive\",\n      not_case_sensitive: \"Not case sensitive\"\n    }.invert\n    # ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Passing Build Argument in Docker Compose Command For Bundler Authentication\nDESCRIPTION: This bash snippet shows how to pass the BUNDLE_PACKAGER__DEV token as a build argument to a docker compose build command, enabling bundler inside the build process to authenticate to the gem server. The token placeholder 'xxx' should be replaced with the actual Gem Server Token during the build.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/gem-server-authentication.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose build --build-arg BUNDLE_PACKAGER__DEV=xxx\n```\n\n----------------------------------------\n\nTITLE: Defining an Avo Dashboard Class in Ruby\nDESCRIPTION: Defines a new Avo dashboard class `MyDashboard` inheriting from `Avo::Dashboards::BaseDashboard`. It sets the dashboard's unique `id`, display `name`, `description`, grid layout (`grid_cols`), and lists the cards to be included, including `ExampleMetric`, chart cards, custom partials, and dividers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyDashboard < Avo::Dashboards::BaseDashboard\n  self.id = 'my_dashboard'\n  self.name = 'Dashy'\n  self.description = 'The first dashbaord'\n  self.grid_cols = 3\n\n  card ExampleMetric\n  card ExampleAreaChart\n  card ExampleScatterChart\n  card PercentDone\n  card AmountRaised\n  card ExampleLineChart\n  card ExampleColumnChart\n  card ExamplePieChart\n  card ExampleBarChart\n  divider label: \"Custom partials\"\n  card ExampleCustomPartial\n  card MapCard\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Authorization Client in Avo Ruby\nDESCRIPTION: Shows how to replace Avo's default authorization client (Pundit) with a custom implementation. In the Avo initializer (`config/initializers/avo.rb`), set the `authorization_client` configuration option to the class name of your custom client, provided as a string (e.g., `'Services::AuthorizationClients::CustomClient'`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.authorization_client = 'Services::AuthorizationClients::CustomClient'\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Course Model with Country and City Data in Ruby\nDESCRIPTION: Shows the Course model definition with class methods that provide countries and city data for dynamic filtering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/course.rb\nclass Course < ApplicationRecord\n  def self.countries\n    [\"USA\", \"Japan\", \"Spain\", \"Thailand\"]\n  end\n\n  def self.cities\n    {\n      USA: [\"New York\", \"Los Angeles\", \"San Francisco\", \"Boston\", \"Philadelphia\"],\n      Japan: [\"Tokyo\", \"Osaka\", \"Kyoto\", \"Hiroshima\", \"Yokohama\", \"Nagoya\", \"Kobe\"],\n      Spain: [\"Madrid\", \"Valencia\", \"Barcelona\"],\n      Thailand: [\"Chiang Mai\", \"Bangkok\", \"Phuket\"]\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default View Type in Index View in Ruby\nDESCRIPTION: This snippet configures the default view type in the Index view to be a grid layout instead of the default table. It can be static or dynamically determined via a lambda that checks request attributes, such as user agent, to select the view type.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_35\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.default_view_type = :grid\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nself.default_view_type = -> {\n  mobile_user = request.user_agent =~ /Mobile/\n  mobile_user ? :table : :grid\n}\n```\n\n----------------------------------------\n\nTITLE: Suggestions with filterable Option (Proc, Array of Hashes)\nDESCRIPTION: Demonstrates setting suggestions for a tags filter with a Proc, returning an array of hashes containing value, label, and avatar with the filterable option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nfield :tags,\n  as: :tags,\n  filterable: {\n    # ...\n    suggestions: -> {\n      [\n        {\n          value: 1,\n          label: 'one', # or params[:something]\n          avatar: 'https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n        },\n        # ...\n      ]\n    }\n    # ...\n  }\n```\n\n----------------------------------------\n\nTITLE: fetch_values_from with filterable Option\nDESCRIPTION: Shows how to use `fetch_values_from` to dynamically retrieve tag values from an external API using the filterable option.  This option is compatible only with `tags` filters, and is used for the `filterable` field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nfield :tags, as: :tags,\n  fetch_values_from: -> { \"/avo-filters/resources/cities/tags\" }\n  filterable: true\n```\n\n----------------------------------------\n\nTITLE: Override create_fail_action - Ruby\nDESCRIPTION: This snippet shows how to override the `create_fail_action` method.  It defines the behavior when a resource creation fails. It renders the `new` template with error messages, signaling to the user that there was an issue.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_fail_action\n  respond_to do |format|\n    flash.now[:error] = create_fail_message\n    format.html { render :new, status: :unprocessable_entity }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Conditionally Disabling Global Search via Initializer (Callable)\nDESCRIPTION: For more dynamic control, the `disabled_features` option can accept a lambda. This lambda has access to the `Avo::ExecutionContext` and can be used to conditionally disable global search based on factors like the current user's attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.disabled_features = -> { current_user.is_admin? ? [] : [:global_search] }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource-Specific Row Controls - Ruby\nDESCRIPTION: This code shows how to customize row controls for a specific resource in Avo, overriding the global configuration. It defines the `row_controls_config` option within a resource class (`Avo::Resources::User`) to set the placement, floating, and hover behavior of the controls for that particular resource.  The file path is `app/avo/resources/user.rb`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/table-view.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  self.row_controls_config = {\n    placement: :right,\n    float: false,\n    show_on_hover: false,\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Generating an Avo Multiple Select Filter using Rails CLI\nDESCRIPTION: Shows the Rails generator command to create a new Avo Multiple Select filter file. This scaffolds a filter class inheriting from `Avo::Filters::MultipleSelectFilter`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrails generate avo:filter post_status --type multiple_select\n```\n\n----------------------------------------\n\nTITLE: Hiding Record Selector in Avo Resource\nDESCRIPTION: This snippet demonstrates how to hide the record selector checkbox in an Avo resource.  It uses the `record_selector` class attribute and sets it to `false`. This is useful when you want to optimize the UI by removing unnecessary elements from resources that will never need to be selected, improving horizontal space use.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.record_selector = false\nend\n```\n\n----------------------------------------\n\nTITLE: Assigning Unique Tab Group ID in Tabs - Ruby\nDESCRIPTION: Shows assigning a unique ID to a 'tabs' group using the id: option in the Avo DSL. This enables tab persistence/bookmarking for better UX, ensuring that the same tab remains selected across page views. Requires an Avo resource context, and expects the unique id parameter and at least one field definition inside the block. Typically used to make tab navigation stable via URL or browser controls.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tabs.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ntabs id: :some_random_uniq_id do\n  field :posts, as: :has_many, show_on: :edit\nend\n```\n\n----------------------------------------\n\nTITLE: Grouping resources with the group helper\nDESCRIPTION: Illustrates using the group helper to organize menu items.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ngroup \"Blog\" do\n  resource :posts\n  resource :categories\n  resource :comments\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Buttons on Form Footers via Avo Initializer - Ruby\nDESCRIPTION: Demonstrates setting the global config.buttons_on_form_footers option to true in the Avo initializer to show Back and Save buttons at the form footer on New and Edit screens. This improves user experience for lengthy forms. Place this setting inside the Avo.configure block in config/initializers/avo.rb.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.buttons_on_form_footers = true\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Action Arguments (Ruby)\nDESCRIPTION: This snippet demonstrates how to access the arguments defined in the `actions` block inside the `handle` method of an Avo action class. It conditionally succeeds the action based on the value of the `special_message` argument. Requires Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/registration.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  def handle(**args)\n    if arguments[:special_message]\n      succeed \"I love 🥑\"\n    else\n      succeed \"Success response ✌️\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Policy Classes for Resources in Ruby\nDESCRIPTION: Example of how to specify a custom policy class for a resource rather than using the default inferred from the model name.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass PhotoCommentResource < Avo::BaseResource\n  self.model_class = ::Comment\n  self.authorization_policy = PhotoCommentPolicy\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Using Computed Values in Record Link Field\nDESCRIPTION: Demonstrates how to use a block to compute the linked record's value dynamically. Inside the block, you can run Ruby code to fetch the record, providing flexibility for complex record retrieval logic.  These examples shows the flexibility to use the `use_resource` option as well.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/record_link.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nfield :post, as: :record_link do\n  # This will generate a link similar to this\n  # https://example.com/avo/resources/posts/42\n  Post.find 42\nend\n\n# or\n\nfield :creator, as: :record_link, add_via_params: false do\n  user_id = SomeService.new(comment: record).fetch_user_id # returns 31\n\n  # This will generate a link similar to this\n  # https://example.com/avo/resources/users/31\n  User.find user_id\nend\n\n# or\n\nfield :creator, as: :record_link, use_resource: \"AdminUser\", add_via_params: false do\n  user_id = SomeService.new(comment: record).fetch_user_id # returns 31\n\n  # This will generate a link similar to this\n  # https://example.com/avo/resources/admin_users/31\n  User.find user_id\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Avo Field (Static)\nDESCRIPTION: Uses the `disabled: true` option to render a field as visually disabled on the New and Edit views. Unlike `readonly`, this option does *not* prevent the field's value from being submitted if a user manually re-enables it in the browser's developer tools.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, disabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo resource to scope comments to approved ones (Ruby)\nDESCRIPTION: This snippet extends an Avo resource for User by customizing the 'fields' method to include a 'comments' has_many field with an 'approved' scope. The scope is applied using a lambda that references the current query, enabling only approved comments to display in the association.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/scopes_common.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :comments, as: :has_many, scope: -> { query.approved }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Index Query for Proper Record Ordering\nDESCRIPTION: Implements custom index query to ensure records are displayed in the correct order based on their position attribute, combined with ordering functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/records-reordering.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  self.index_query = -> {\n    query.order(position: :asc)\n  }\n\n  self.ordering = {\n    display_inline: true,\n    visible_on: :index, # :index or :association\n    actions: {\n      higher: -> { record.move_higher }, # has access to record, resource, options, params\n      lower: -> { record.move_lower },\n      to_top: -> { record.move_to_top },\n      to_bottom: -> { record.move_to_bottom }\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Find Method for Show/Edit Pages (Ruby)\nDESCRIPTION: This snippet shows how to override the default find method used by Avo for fetching a single record on Show and Edit pages. It configures the `find_record_method` to use conditional logic based on whether the ID is an array and/or numeric to locate records using either `slug` or `id`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resource::Post < Avo::BaseResource\n  self.find_record_method = -> {\n    # When using friendly_id, we need to check if the id is a slug or an id.\n    # If it's a slug, we need to use the find_by_slug method.\n    # If it's an id, we need to use the find method.\n    # If the id is an array, we need to use the where method in order to return a collection.\n    if id.is_a?(Array)\n      id.first.to_i == 0 ? query.where(slug: id) : query.where(id: id)\n    else\n      id.to_i == 0 ? query.find_by_slug(id) : query.find(id)\n    end\n  }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  before_save :update_slug\n\n  def to_param\n    slug || id\n  end\n\n  def update_slug\n    self.slug = name.parameterize\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Field Translation Key in Avo Ruby\nDESCRIPTION: Configures an A specific field within an Avo resource to use a translation key. The `translation_key:` option on the field declaration links the field's label to a corresponding entry in locale files. This localizes the field's label wherever it appears in Avo views (index, show, edit). Requires a YAML locale file with a matching field translation key.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/i18n.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id\n    # ... other fields\n    field :files, as: :files, translation_key: 'avo.field_translations.file'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Translations in a YAML Locale File (YAML)\nDESCRIPTION: This snippet provides a YAML configuration for resource translation in Spanish. Dependencies include the Rails I18n framework and loading this file within your Rails application. The section resource_translations specifies translations for pluralization rules. The structure (zero, one, other) follows Rails I18n conventions, supporting singular and plural forms. Ensure keys exactly align with those referenced by self.translation_key in the Ruby resource class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/i18n.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# avo.es.yml\nes:\n  avo:\n    dashboard: 'Dashboard'\n    # ... other translation keys\n    resource_translations:\n      user:\n        zero: 'usuarios'\n        one: 'usuario'\n        other: 'usuarios'\n```\n\n----------------------------------------\n\nTITLE: Using label and params options on resource links\nDESCRIPTION: Demonstrates how to customize the labels and add query parameters to resource links in the Avo menu.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nresource :posts, label: \"News posts\"\nresource :posts, params: { status: \"published\" }\nresource :users, params: -> do\n  decoded_filter = {\"Avo::Filters::IsAdmin\"=>[\"non_admins\"]}\n\n  { encoded_filters: Avo::Filters::BaseFilter.encode_filters(decoded_filter)}\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic View Types in Avo Resource (Ruby)\nDESCRIPTION: Dynamically configures the available view types for an Avo resource by assigning a block (lambda) to `self.view_types`. The block has access to context like `current_user`, `params`, etc., allowing conditional logic (e.g., showing `[:table, :grid]` for admins and only `:table` for others).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-view-types.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  # ...\n  self.view_types = -> do\n    if current_user.is_admin?\n      [:table, :grid]\n    else\n      :table\n    end\n  end\n  #...\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Global Search Results Count in Avo Configuration\nDESCRIPTION: Sets the default number of search results displayed across all Avo resources globally. This configuration is placed within the Avo initializer (`Avo.configure`) and sets the `search_results_count` property to a desired integer (e.g., 16).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.search_results_count = 16\nend\n```\n\n----------------------------------------\n\nTITLE: Using `prefixed_ids` Gem with Avo Model (Ruby)\nDESCRIPTION: Demonstrates adding `has_prefix_id` to a Rails model (`Course`) to enable the `prefixed_ids` gem. Avo automatically handles record lookup with these prefixed IDs without requiring specific configuration in the Avo resource itself.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_20\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Course < ApplicationRecord\n  has_prefix_id :course\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Permitted Parameters in Model - Ruby\nDESCRIPTION: Demonstrates how an ActiveRecord model can receive and process the parameters permitted via `extra_params` from a resource tool. It shows setter methods (`fish_type=`, `properties=`, `information=`) being defined on the model to explicitly handle the incoming values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resource-tools.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Fish < ApplicationRecord\n  self.inheritance_column = nil # required in order to use the type DB attribute\n\n  def fish_type=(value)\n    self.type = value\n  end\n\n  def properties=(value)\n    # properties should be an array\n    puts [\"properties in the Fish model->\", value].inspect\n  end\n\n  def information=(value)\n    # properties should be a hash\n    puts [\"information in the Fish model->\", value].inspect\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Override after_update_path - Ruby\nDESCRIPTION: This snippet demonstrates how to override the `after_update_path` method. It defines the path to redirect to after a resource has been successfully updated. The example redirects to the users resource index page.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef after_update_path\n  \"/avo/resources/users\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Boolean Filter for Dynamic Example (Ruby)\nDESCRIPTION: Defines a Boolean filter used in a dynamic filtering example. This filter allows selecting multiple countries and applies the filtering logic to the query based on the selected boolean values, demonstrating how one filter can influence another.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/filters/course_country_filter.rb\nclass CourseCountryFilter < Avo::Filters::BooleanFilter\n  self.name = \"Course country filter\"\n\n  def apply(request, query, values)\n    query.where(country: values.select { |country, selected| selected }.keys) # .keys is needed because values keys are stringified\n  end\n\n  def options\n    Course.countries.map { |country| [country, country] }.to_h\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Standalone Avo Action\nDESCRIPTION: This snippet shows how to define an Avo action as standalone by setting `self.standalone = true` within the action class.  This makes the action executable without requiring any specific records to be selected.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/generate.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/export_users.rb\n\nclass Avo::Actions::ExportUsers < Avo::BaseAction\n  self.name = \"Export Users\"\n  self.standalone = true\n\n  # ... rest of the action code\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling ID Links to Resources in Index View\nDESCRIPTION: This snippet adds links to resource IDs in the index view for quick navigation, controlled by `config.id_links_to_resource`. It requires enabling the option in Avo configuration and affects how resource entries are linked.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.root_path = '/avo'\n  config.app_name = 'Avocadelicious'\n  config.id_links_to_resource = true\nend\n```\n\n----------------------------------------\n\nTITLE: Adding External Link to Avo Resource\nDESCRIPTION: This code demonstrates how to add an external link to an Avo resource. The `self.external_link` option is set to a lambda function that returns a URL.  The lambda has access to the `record` and `Avo::ExecutionContext` attributes.  In this case, it uses `main_app.post_path(record)` to generate a URL to the public path of a post.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.external_link = -> { # [!code focus]\n    main_app.post_path(record) # [!code focus]\n  } # [!code focus]\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Rails Helpers in Avo Field Formatters (Ruby)\nDESCRIPTION: Demonstrates using standard Rails view helpers like `number_to_currency` within an Avo `format_using` block. Access to helpers is provided through `view_context`. This formats a `:price` field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nfield :price, as: :number, format_using: -> { view_context.number_to_currency(value) }\n```\n\n----------------------------------------\n\nTITLE: Customizing Cache Hash in Avo\nDESCRIPTION: This code defines a custom `cache_hash` method within an Avo resource. It calculates a cache key based on the record, file hashes of the resource and policy files, and optionally the parent record if the resource is displayed as an association. The purpose is to bust the cache when resource or policy files change or when associated data changes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\ndef cache_hash(parent_record)\n  result = [record, file_hash]\n\n  if parent_record.present?\n    result << parent_record\n  end\n\n  result\nend\n\ndef file_hash\n  content_to_be_hashed = \"\"\n\n  file_name = self.class.underscore_name.tr(\" \", \"_\")\n  resource_path = Rails.root.join(\"app\", \"avo\", \"resources\", \"#{file_name}.rb\").to_s\n  if File.file? resource_path\n    content_to_be_hashed += File.read(resource_path)\n  end\n\n  # policy file hash\n  policy_path = Rails.root.join(\"app\", \"policies\", \"#{file_name.gsub(\"_resource\", \"\")}_policy.rb\").to_s\n  if File.file? policy_path\n    content_to_be_hashed += File.read(policy_path)\n  end\n\n  Digest::MD5.hexdigest(content_to_be_hashed)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding the avo_upgrade gem for automatic upgrade tool in Ruby\nDESCRIPTION: This snippet shows how to add the \"avo_upgrade\" gem to the development group in the Gemfile to enable the automatic upgrade tool that assists in migrating from Avo version 2 to 3. It requires a Rails environment with bundler installed. Once added, the upgrade command can be run, and the gem should be removed afterward to keep the environment clean.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-2-avo-3-upgrade.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngroup :development do\n  gem \"avo_upgrade\"\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Link with Ruby using format_using\nDESCRIPTION: This snippet demonstrates the creation of a custom link field using the `format_using` option. It uses a lambda to dynamically generate the link's HTML. The lambda takes the `value` (which defaults to the value associated with the field) and uses `link_to` along with `avo.resources_partner_url` (presumably an Avo helper) and the `target` attribute to open in a new tab. Dependencies include the Avo framework, a resource model (`record.partner`), and a view helper `link_to`.\n\nInput: A partner ID (record.partner.id).\nOutput: An HTML link to the partner's resource in a new tab.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/custom-link-field.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :partner_home, as: :text, format_using: -> { link_to(value, value, target: \"_blank\") } do\n  avo.resources_partner_url record.partner.id\nend\n```\n\n----------------------------------------\n\nTITLE: Adding header help text to search results\nDESCRIPTION: Shows how to add instructional help text to the search results header using the search_query_help attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/search.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  self.title = :name\n  self.search_query = -> do\n    scope.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n  end\n  self.search_query_help = \"- search by id\"\n\n  field :id, as: :id\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a new scope using Avo CLI (bash)\nDESCRIPTION: This snippet demonstrates how to generate a new scope class named 'admins' using the Avo command-line tool. It simplifies the creation process by automating boilerplate code generation for custom scopes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/scopes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:scope admins\n```\n\n----------------------------------------\n\nTITLE: Hiding Card Header\nDESCRIPTION: This snippet demonstrates how to hide the card's header (label and ranges dropdown) to allow the card to be embedded seamlessly within a dashboard.  The `display_header` attribute is set to false. This is useful for cards displaying full-width content like maps. Requires the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = 'users_metric'\n  self.display_header = false\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling specific action logging in Avo Resource class\nDESCRIPTION: Example showing how to configure the Product resource to disable audit logging for 'edit' and 'show' actions while keeping logging enabled for other actions. This is done by setting the audit_logging class attribute with a configuration hash.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Product < Avo::BaseResource\n  self.audit_logging = {\n    activity: true,\n    actions: {\n      edit: false,\n      show: false\n    }\n  }\n\n  def fields\n    main_menu do\n      field :id, as: :id, link_to_record: true\n      field :name, as: :text, link_to_record: true\n      field :price, as: :number, step: 1\n\n      sidebar do\n        tool Avo::ResourceTools::Timeline\n      end\n    end\n    # ...\n    field :avo_activities, as: :has_many\n  end\n\n  def actions\n    action Avo::Actions::ChangePrice\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Using 'touch: true' on Model Associations\nDESCRIPTION: This code demonstrates how to ensure cache invalidation when associated models change, by adding 'touch: true' to the association. It preserves cache coherence when related records are updated by automatically updating the parent record's timestamp.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cache.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  has_many :comments, dependent: :destroy\nend\n\nclass Comment < ApplicationRecord\n  belongs_to :post, touch: true\nend\n```\n\n----------------------------------------\n\nTITLE: Avo ExecutionContext Class Definition\nDESCRIPTION: This code defines the `Avo::ExecutionContext` class. It holds state such as `target`, `context`, `params`, `view_context`, `current_user`, and `request`. It initializes these attributes from the provided arguments and defaults to `Avo::Current` if not initialized. It executes the target block within its context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/execution-context.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Avo\n  class ExecutionContext\n\n    attr_accessor :target, :context, :params, :view_context, :current_user, :request\n\n    def initialize(**args)\n      # If target don't respond to call, handle will return target\n      # In that case we don't need to initialize the others attr_accessors\n      return unless (@target = args[:target]).respond_to? :call\n\n      args.except(:target).each do |key,value|\n        singleton_class.class_eval { attr_accessor \"#{key}\" }\n        instance_variable_set(\"@#{key}\", value)\n      end\n\n      # Set defaults on not initialized accessors\n      @context      ||= Avo::Current.context\n      @params       ||= Avo::Current.params\n      @view_context ||= Avo::Current.view_context\n      @current_user ||= Avo::Current.current_user\n      @request      ||= Avo::Current.request\n    end\n\n    delegate :authorize, to: Avo::Services::AuthorizationService\n\n    # Return target if target is not callable, otherwise, execute target on this instance context\n    def handle\n      target.respond_to?(:call) ? instance_exec(&target) : target\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hiding Avo Field Label with CSS\nDESCRIPTION: This CSS snippet hides the label of an `external_image` field with the ID \"logo\" on the `Team` resource in Avo. It targets the specific label element using data attributes provided by Avo and sets its display property to `none`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/hide-field-labels.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n[data-resource-name=\"TeamResource\"] [data-field-type=\"external_image\"][data-field-id=\"logo\"] [data-slot=\"label\"]{\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Avo Controller for REST API Pagination\nDESCRIPTION: Implements a custom controller that extends Avo's ResourcesController to handle pagination with external API data. Overrides pagination methods to work with the non-ActiveRecord data source.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/rest-api-integration.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Avo\n  class AgingOrdersController < Avo::ResourcesController\n    def pagy_get_items(collection, _pagy)\n      collection.all.items\n    end\n\n    def pagy_get_vars(collection, vars)\n      collection.where(page: page, size: per_page)\n\n      vars[:count] = collection.all.count\n      vars[:page] = params[:page]\n      vars\n    end\n\n    private\n\n    def per_page\n      params[:per_page] || Avo.configuration.per_page\n    end\n\n    def page\n      params[:page]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Authorize Avo Action Execution (Ruby)\nDESCRIPTION: Implements access control logic for an action, hiding it if unauthorized and blocking attempts. Accepts a static boolean or a dynamic block leveraging the execution context (e.g., `current_user`) for authorization checks.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/customization.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Actions::GlobalReport < Avo::BaseAction\n  self.authorize = false\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Actions::GlobalReport < Avo::BaseAction\n  self.authorize = -> {\n    current_user.is_admin?\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Using reload_records in Action Response\nDESCRIPTION: Shows how to refresh specific table rows using Turbo Stream after an action is executed on index pages.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(query:, fields:, **args)\n  query.each do |record|\n    record.update! active: !record.active\n\n    record.notify fields[:message] if fields[:notify_user]\n  end\n\n  reload_records(query)\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nreload_records([record_1, record_2])\n```\n\nLANGUAGE: ruby\nCODE:\n```\nreload_record(record)\n```\n\n----------------------------------------\n\nTITLE: Custom Logging of ViewComponent Performance Data - Ruby\nDESCRIPTION: This snippet extends ViewComponent with a custom LogSubscriber class to log loading times and allocation counts for each component render. The code defines a method to format log messages with the component name, duration, and allocation details, and attaches the subscriber to the view_component instrumentation. Place this code in config/initializers/view_component.rb. It depends on ActiveSupport::LogSubscriber and a properly configured Rails application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/views-performance.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule ViewComponent\n  class LogSubscriber < ActiveSupport::LogSubscriber\n    define_method :'!render' do |event|\n      info do\n        message = +\"  Rendered #{event.payload[:name]}\"\n        message << \" (Duration: #{event.duration.round(1)}ms\"\n        message << \" | Allocations: #{event.allocations})\"\n      end\n    end\n  end\nend\n\nViewComponent::LogSubscriber.attach_to :view_component\n```\n\n----------------------------------------\n\nTITLE: Avo Resource for Namespaced Model Using model_class Override - Ruby\nDESCRIPTION: Defines an Avo resource associated with a deeply namespaced model 'Super::Dooper::Trooper::Model' by naming the resource class 'SuperDooperTrooperModel' and explicitly setting 'self.model_class' to the namespaced model string. This approach works around the current limitation that Avo resource files cannot be namespaced and must reside at the root of 'app/avo/resources'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::SuperDooperTrooperModel < Avo::BaseResource\n  self.model_class = \"Super::Dooper::Trooper::Model\"\nend\n```\n\n----------------------------------------\n\nTITLE: Using All Tools Helper in Avo Menu\nDESCRIPTION: Example of using the all_tools helper in an Avo menu, which automatically renders links to all available tools.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"App\", icon: \"heroicons/outline/beaker\" do\n  group \"All tools\", icon: \"tools\" do\n    all_tools\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy for User and Record - Ruby\nDESCRIPTION: The `policy` method receives a user and a record and returns the associated policy. It leverages the Pundit library for this purpose. There are no dependencies beyond Pundit itself, and the output is the policy object.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\ndef policy(user, record)\n  Pundit.policy(user, record)\nend\n```\n\n----------------------------------------\n\nTITLE: Global Configuration of Search Results Count in Avo - Ruby\nDESCRIPTION: Shows how to globally configure the number of search results displayed in the Avo admin panel by setting the search_results_count option within the Avo configuration block. This affects all resources unless overridden.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.search_results_count = 16\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Avo View - Form or Display using String Comparator\nDESCRIPTION: This code snippet demonstrates how to check if the current Avo view is a `form` (`new`, `edit`) or `display` (`index`, `show`) using string comparators `view.in? [\"new\", \"edit\"]` and `view.in? [\"show\", \"index\"]`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/views.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nif view.in? [\"new\", \"edit\"]\n  # Code for the \"new\" and \"edit\" views\nelsif view.in? [\"show\", \"index\"]\n  # Code for the \"show\" and \"index\" views\nend\n```\n\n----------------------------------------\n\nTITLE: Making Field Visibility Conditional with Lambda in Avo (Ruby)\nDESCRIPTION: Demonstrates various ways to make a field's visibility conditional using the visible: parameter. The value can be a boolean or a lambda; in lambdas, the context, resource, and record are accessible to determine dynamic visibility. Used to restrict or allow access based on user role, resource name, or record attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :is_featured, as: :boolean, visible: -> { context[:user].is_admin? }  # show field based on the context object\nfield :is_featured, as: :boolean, visible: -> { resource.name.include? 'user' } # show field based on the resource name\nfield :is_featured, as: :boolean, visible: -> { resource.record.published_at.present? } # show field based on a record attribute\n```\n\n----------------------------------------\n\nTITLE: Using `for_attribute` Option in Avo using Ruby\nDESCRIPTION: This code snippet demonstrates how to specify the target attribute on the model for each field using the `for_attribute` option. It allows linking a field to a different attribute than its id, enabling secondary fields for a primary attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nfield :status, as: :select, options: [:one, :two, :three], only_on: :forms\n\nfield :secondary_field_for_status,\n  as: :badge,\n  for_attribute: :status,\n  options: {info: :one, :success: :two, warning: :three},\n  except_on: :forms,\n  help: \"Secondary field for status using the for_attribute option\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Partial Card in Avo\nDESCRIPTION: Definition of a partial card class that renders custom content from a partial template, with highlighted partial path and options for controlling size and header display.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::ExampleCustomPartial < Avo::Cards::PartialCard\n  self.id = \"users_custom_card\"\n  self.cols = 1\n  self.rows = 4\n  self.partial = \"avo/cards/custom_card\"\n  # self.display_header = true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundler Globally for Local Dev\nDESCRIPTION: Shows how to configure Bundler globally to associate the Gem Server Token with the `https://packager.dev/avo-hq/` source. This is the recommended approach for local development environments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle config set --global https://packager.dev/avo-hq/ xxx\n```\n\n----------------------------------------\n\nTITLE: Define Dashboard Cards in Avo (Ruby)\nDESCRIPTION: Demonstrates how to define cards within an Avo dashboard class (`Avo::Dashboards::Dashy`). It shows adding various card types like `ExampleMetric`, `ExampleAreaChart`, and `ExampleScatterChart`, using a `divider`, and setting conditional visibility with `visible: -> { true }`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-2-avo-3-upgrade.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::Dashy < Avo::Dashboards::BaseDashboard\n  self.id = \"dashy\"\n  self.name = \"Dashy\"\n\n  def cards\n    card Avo::Cards::ExampleMetric, visible: -> { true }\n    card Avo::Cards::ExampleAreaChart\n    divider\n    card Avo::Cards::ExampleScatterChart\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Suggestions with dynamic_filter (Proc, Array of Hashes)\nDESCRIPTION: Shows how to use a Proc that returns an array of hashes with `value`, `label` and `avatar` to dynamically provide suggestions to the tags filter using the `dynamic_filter` method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :tags,\n  suggestions: -> {\n    [\n      {\n        value: 1,\n        label: 'one', # or params[:something]\n        avatar: 'https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n      },\n      # ...\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Using value option with avo_show_field (ERB)\nDESCRIPTION: This snippet demonstrates how to use the `value` option with `avo_show_field` to display a pre-defined value for a field.  The example shows displaying an external image using the `cdn_image` attribute of the `record` object.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-field-components.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<%= avo_show_field(:photo, as: :external_image, value: record.cdn_image) %>\n```\n\n----------------------------------------\n\nTITLE: Overriding Update Success Action in Avo Controller\nDESCRIPTION: Demonstrates how to customize the controller response when a record is successfully updated by overriding update_success_action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_success_action\n  respond_to do |format|\n    format.html { redirect_to after_update_path, notice: update_success_message }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Static View Types in Avo Resource (Ruby)\nDESCRIPTION: Configures an Avo resource to display multiple specific view types, in this case `:table` and `:grid`. The `self.view_types` attribute is set to an array of symbols. The order in the array determines the order of icons in the view switcher.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-view-types.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  # ...\n  self.view_types = [:table, :grid]\n  #...\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Grid View in Avo (Ruby)\nDESCRIPTION: This snippet shows how to set the grid view as the default view for a resource's index page in Avo.  It utilizes the `default_view_type` class attribute, setting its value to `:grid`. This ensures that when a user accesses the index view of a resource, the grid view is displayed by default, rather than the default listing view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/grid-view.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.default_view_type = :grid\nend\n```\n\n----------------------------------------\n\nTITLE: Proc for Radio Field Options (Ruby)\nDESCRIPTION: This code provides an example of using a Proc (anonymous function) to dynamically generate options for an Avo radio field. It iterates over a record's roles and builds a hash where keys are role IDs and values are humanized role names. The output is a hash created by the proc used for setting the options of the radio button field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/radio.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\noptions: -> do\n  record.roles.each_with_object({}) do |role, hash|\n    hash[role.id] = role.name.humanize\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Attaching Conditional CSS Classes in Avo Resource Field Definition - Ruby\nDESCRIPTION: Defines a custom fields method in a Ruby Avo resource to conditionally apply a CSS class, 'soft-deleted', to the id field wrapper if the record’s id is even. This relies on the record object and leverages Avo’s DSL for field configuration. Inputs include the current record, and outputs are rendered HTML with selected classes. Requires the Avo framework and a resource model with an id attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/conditionally-render-styled-rows.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef fields\n  field :id, as: :id, html: -> {\n    index do\n      wrapper do\n        classes do\n          # We\\'ll mark every record that has an even `id`\n          if record.id % 2 == 0\n            \"soft-deleted\"\n          end\n        end\n      end\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Records in Avo Field Visibility Blocks (Ruby)\nDESCRIPTION: Highlights a potential issue where `resource.record` might be `nil` within `visible` blocks, particularly during resource creation. It recommends using the safe navigation operator (`&.`) to prevent errors when accessing record attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# `resource.record` is nil when submitting the form on resource creation\nfield :name, as: :text, visible -> { resource.record.enabled? }\n\n# Do this instead\nfield :name, as: :text, visible -> { resource.record&.enabled? }\n```\n\n----------------------------------------\n\nTITLE: File Field with Image Variant - Ruby\nDESCRIPTION: This snippet shows how to display a processed variant of an image uploaded through the `file` field using the `format_using` option. It resizes the image to a maximum size of 150x150 pixels using `variant(resize_to_limit: [150, 150])` and then displays the processed image.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/file.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :photo,\n  as: :file,\n  format_using: -> {\n    value.variant(resize_to_limit: [150, 150]).processed.image\n  }\n```\n\n----------------------------------------\n\nTITLE: Combining Manual and Discovered Fields (Ruby)\nDESCRIPTION: This example shows how to combine manually defined fields with automatically discovered ones. It defines a custom field and then uses `discover_columns` and `discover_associations` to include the rest of the fields. It also demonstrates the flexibility of the field configuration and order.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-discovery.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  # ...\n\n  def fields\n    field :custom_field, as: :text\n\n    discover_columns except: [:custom_field]\n    discover_associations\n\n    field :another_custom_field, as: :boolean\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Reload Response in Ruby Avo Actions\nDESCRIPTION: Example of using the reload response type in an Avo action to refresh the page after updating records. This is the default behavior if no other response type is specified.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(query:, **args)\n  query.each do |project|\n    project.update active: false\n  end\n\n  succeed 'Done!'\n  reload # This is optional since reload is the default behavior\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Avo View - Form or Display using Symbol Comparator\nDESCRIPTION: This code snippet demonstrates how to check if the current Avo view is a `form` (`new`, `edit`) or `display` (`index`, `show`) using symbol comparators `view.in? [:new, :edit]` and `view.in? [:show, :index]`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/views.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nif view.in? [:new, :edit]\n  # Code for the \"new\" and \"edit\" views\nelsif view.in? [:show, :index]\n  # Code for the \"show\" and \"index\" views\nend\n```\n\n----------------------------------------\n\nTITLE: Using the 'bare_content' Slot in Avo::PanelComponent (ERB)\nDESCRIPTION: Demonstrates using the `with_bare_content` slot helper to render content directly within the panel container without default background styling. This is often used for specific layouts like grid views where content should be flush with the container.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-components/avo-panel-component.md#_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_bare_content do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Both Main and Profile Menus in Avo\nDESCRIPTION: Complete example showing configuration of both main_menu and profile_menu in Avo. The main_menu includes sections for dashboards, resources grouped by category, tools, and external links, while the profile_menu provides a simple profile link.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    section I18n.t(\"avo.dashboards\"), icon: \"dashboards\" do\n      dashboard :dashy, visible: -> { true }\n      dashboard :sales, visible: -> { true }\n\n      group \"All dashboards\", visible: false do\n        all_dashboards\n      end\n    end\n\n    section \"Resources\", icon: \"heroicons/outline/academic-cap\" do\n      group \"Academia\" do\n        resource :course\n        resource :course_link\n      end\n\n      group \"Blog\" do\n        resource :posts\n        resource :comments\n      end\n\n      group \"Other\" do\n        resource :fish\n      end\n    end\n\n    section \"Tools\", icon: \"heroicons/outline/finger-print\" do\n      all_tools\n    end\n\n    group do\n      link_to \"Avo\", path: \"https://avohq.io\"\n      link_to \"Google\", path: \"https://google.com\", target: :_blank\n    end\n  }\n  config.profile_menu = -> {\n    link_to \"Profile\", path: \"/profile\", icon: \"user-circle\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling KeyValue Field entirely in Avo (Ruby)\nDESCRIPTION: This code snippet shows how to completely disable an Avo `KeyValue` field, preventing editing of keys and values, and adding or deleting rows.  It sets the `disabled` option to `true`. This code relies on the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/key_value.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, # The database field ID\n  as: :key_value, # The field type.\n  disabled: true, # Option to disable editing keys, editing values, adding rows, and deleting rows. Defaults to false.\n```\n\n----------------------------------------\n\nTITLE: Associating a Stimulus Controller with a DOM Container - ERB\nDESCRIPTION: Shows how to attach a StimulusJS controller to an HTML element using data-controller in an ERB template. When loaded, this will instantiate the registered 'sample' controller for the div, enabling Stimulus functionality. Input: HTML rendered in Rails view; Output: initialized StimulusJS controller instance in the browser. No dependencies other than the Stimulus controller registration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_18\n\nLANGUAGE: erb\nCODE:\n```\n<!-- app/views/avo/_sample_tool.html.erb -->\n<div data-controller=\"sample\">\n  <!-- content here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Passing Data and Styling to Field Wrapper\nDESCRIPTION: Shows how to pass additional data attributes such as StimulusJS controllers, and inline styles for customization of wrapper appearance, including usage of the 'data' and 'style' options in the helper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-wrappers.md#_snippet_4\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, data: {controller: \"boolean-check\"} do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, style: \"background: red\" do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Customizing View Components in Avo\nDESCRIPTION: This code snippet demonstrates how to customize the view components used by Avo. It uses the `self.components` resource option to specify custom components for different views (Index, Show, New, Edit). These custom components will be rendered instead of the default Avo components. The keys must be strings and component initializers must accept all arguments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nself.components = {\n  resource_index_component: Avo::Views::Users::ResourceIndexComponent,\n  resource_show_component: \"Avo::Views::Users::ResourceShowComponent\",\n  resource_edit_component: \"Avo::Views::Users::ResourceEditComponent\",\n  resource_new_component: Avo::Views::Users::ResourceEditComponent\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nself.components = {\n  \"Avo::Views::ResourceIndexComponent\": Avo::Custom::ResourceIndexComponent,\n  \"Avo::Views::ResourceShowComponent\": \"Avo::Custom::ResourceShowComponent\",\n  \"Avo::Views::ResourceEditComponent\": \"Avo::Custom::ResourceEditComponent\",\n  \"Avo::Index::GridItemComponent\": \"Avo::Custom::GridItemComponent\",\n  \"Avo::Index::ResourceMapComponent\": \"Avo::Custom::ResourceMapComponent\",\n  \"Avo::Index::ResourceTableComponent\": \"Avo::Custom::ResourceTableComponent\",\n  \"Avo::Index::TableRowComponent\": \"Avo::Custom::TableRowComponent\"\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nself.components = {\n  resource_index_component: Avo::MyDir::Views::ResourceIndexComponent\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'default' scope option to set default scope in Ruby\nDESCRIPTION: This example shows how to assign a scope as the default for the resource page, either by passing 'default: true' or as a block that evaluates a condition (e.g., checking if the current user is an admin). This ensures a scope is automatically applied upon page load.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/scopes.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef scopes\n  scope Avo::Scopes::OddId\n  scope Avo::Scopes::EvenId, default: true\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef scopes\n  scope Avo::Scopes::OddId\n  scope Avo::Scopes::EvenId, default: -> { current_user.admin? }\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a Resource Tool to Display Custom Inputs on Forms in Ruby\nDESCRIPTION: Extends the Fish resource class to include a custom resource tool named FishInformation that will only be shown on form views (new and edit). This snippet is preparatory for adding additional form inputs beyond standard CRUD fields. The `tool` method integrates the resource tool into the resource fields and restricts its display with `show_on: :forms`. This requires the FishInformation resource tool to be defined and generated beforehand.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-tools.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::ResourcesFish < Avo::BaseResource\n  def fields\n    tool Avo::ResourceTools::FishInformation, show_on: :forms\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using the 'only' Option with Field Discovery in Ruby\nDESCRIPTION: Demonstrates how to use the 'only' option to specify which fields should be discovered, excluding all others.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-discovery.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  # ...\n\n  def fields\n    discover_columns only: [:title, :body, :published_at]\n    discover_associations only: [:author, :comments]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Field Value as HTML in Avo (Ruby)\nDESCRIPTION: This Ruby snippet customizes the rendering of a text field's value as HTML in the Index and Show views. By setting as_html: true and providing a block, developers can inject raw HTML output, such as links, for display. Requires Avo, and care should be taken to sanitize inputs to avoid XSS vulnerabilities; intended for use when rich formatted outputs are needed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/text.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :title, as: :text, as_html: true do\n  '<a href=\"https://avohq.io\">Avo</a>'\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo - Ruby\nDESCRIPTION: This snippet demonstrates configuring the Avo framework in a Rails initializer file. It sets the root path, license key, enables ID links to resources, sets the home path, and configures the context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/faq.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\n\nAvo.configure do |config|\n  config.root_path = '/avo'\n  config.license_key = ENV['AVO_LICENSE_KEY']\n  config.id_links_to_resource = true\n  config.home_path = '/avo/resources/posts'\n  config.set_context do\n    {\n      foo: 'bar',\n      user: current_user,\n      params: request.params,\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Ejecting Specific Field Component View in Avo\nDESCRIPTION: Command to eject only the edit component for the text field type. Uses the --view parameter to specify which view component to extract.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/eject-views.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrails g avo:eject --field-components text --view edit\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic SelectFilter (Ruby)\nDESCRIPTION: Defines an Avo `SelectFilter` for `Author`. The `apply` method filters records based on the selected author ID. The `options` method dynamically retrieves author IDs and names from the database to populate the filter options, demonstrating how to access previously applied filter values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::Author < Avo::Filters::SelectFilter\n  self.name = 'Author'\n\n  def apply(request, query, value)\n    query = query.where(author_id: value) if value.present?\n    query\n  end\n\n  # Example `applied_filters`\n  # applied_filters = {\n  #   \"Avo::Filters::CourseCountryFilter\" => {\n  #     \"USA\" => true,\n  #     \"Japan\" => true,\n  #     \"Spain\" => false,\n  #     \"Thailand\" => false,\n  #   }\n  # }\n  def options\n    # Here you have access to the `applied_filters` object too\n    Author.select(:id, :name).each_with_object({}) { |author, options| options[author.id] = author.name }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring dynamic filter options in Avo initializer - Ruby\nDESCRIPTION: This Ruby snippet shows how to customize the dynamic filters in Avo using the `Avo::DynamicFilters.configure` block inside the Avo initializer file (`avo.rb`). It demonstrates changing the filters button label with `button_label` and setting filters to always be expanded with `always_expanded`. This requires the Avo gem with dynamic filters enabled and should be placed within the existing Avo configuration block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  # Other Avo configurations\nend\n\nif defined?(Avo::DynamicFilters)\n  Avo::DynamicFilters.configure do |config|\n    config.button_label = \"Advanced filters\"\n    config.always_expanded = true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Override create_fail_message - Ruby\nDESCRIPTION: This snippet demonstrates overriding the `create_fail_message` method.  This sets the error message displayed to the user when a resource creation fails. The example utilizes the `t` helper for internationalization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_fail_message\n  t \"avo.you_missed_something_check_form\"\nend\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route for City Selection API - Ruby\nDESCRIPTION: Adds a custom GET route within the Avo engine's namespace for 'resources/courses/cities', mapping it to the 'cities' action in Avo::CoursesController. It enables AJAX requests from the frontend to retrieve city lists based on selected country. Prerequisite: Avo engine must be loaded. Input is an HTTP GET parameter 'country'; output is a JSON array of cities. The route is only active when Avo is defined, ensuring it doesn't collide with other namespaces.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  if defined? ::Avo\n    Avo::Engine.routes.draw do\n      scope :resources do\n        get \"courses/cities\", to: \"courses#cities\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Account Switcher in View and Controller for Session-Based Multitenancy in Ruby on Rails\nDESCRIPTION: These snippets implement an account switcher feature to allow users to change their active tenant session dynamically. The ERB view code iterates over `current_user.accounts` generating links that trigger a PUT request to update the tenant session. The corresponding controller action updates `session[:tenant_id]` to reflect the selected account and redirects back. This works in tandem with the session-based tenancy concern to maintain correct tenant scoping.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/multitenancy.md#_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<% current_user.accounts.each do |account| %>\n  <%= link_to account.name, switch_account_path(account.id), class: class_names({\"underline\": session[:tenant_id].to_s == account.id.to_s}), data: {turbo_method: :put} %>\n<% end %>\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::SwitchAccountsController < Avo::ApplicationController\n  def update\n    # set the new tenant in session\n    session[:tenant_id] = params[:id]\n\n    redirect_back fallback_location: root_path\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Conditions Hash for Tags Dynamic Filters in Ruby\nDESCRIPTION: This Ruby snippet provides a hash with keys representing tag filter conditions and values describing their semantics, including 'Are', 'Contain', 'Overlap', and 'Contained in'. These conditions are inverted with `.invert` for compatibility with Avo's tagging dynamic filters. Note that the 'Contained in' condition requires the 'active_record_extended' gem, and it is incompatible with the 'acts-as-taggable-on' gem.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  array_is: \"Are\",\n  array_contains: \"Contain\",\n  array_overlap: \"Overlap\",\n  array_contained_in: \"Contained in\" # (active_record_extended gem required)\n}.invert\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Authorization Policy Method Name\nDESCRIPTION: If you already use a `search?` method in your policies for a different purpose, you can configure Avo to use a different method name for search authorization. This is done in the Avo initializer using `config.authorization_methods`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.authorization_methods = {\n    search: 'avo_search?'\n  }\n  end\n```\n\n----------------------------------------\n\nTITLE: Defining a Files Field with Active Storage in Ruby\nDESCRIPTION: This Ruby code snippet defines a form field for uploading multiple files using Active Storage in a Rails application. It assigns the 'documents' field as 'files', enabling multiple file uploads with an easy-to-use interface. The snippet requires Active Storage to be set up and integrated into the Rails model and form.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/files.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :documents, as: :files\n```\n\n----------------------------------------\n\nTITLE: Set Default Grid View for Avo Resource Ruby\nDESCRIPTION: Make the grid view the default display type for the resource's Index view. This is achieved by setting the `default_view_type` class attribute to `:grid` within the Avo resource definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/grid-view.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.default_view_type = :grid\nend\n```\n\n----------------------------------------\n\nTITLE: Using avo_json_fields in Model (Ruby)\nDESCRIPTION: This code snippet demonstrates how to use the `avo_json_fields` concern within a Rails model.  It defines a model `Page` and calls the `avo_json_fields` class method, passing `:meta` as an argument. This tells the concern to generate `meta_json` (getter) and `meta_json=` (setter) methods for the `meta` field. The getter will format the `meta` attribute as JSON for display using `JSON.pretty_generate`. The setter will parse the input string and set the corresponding model attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/format-ruby-object-to-json.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Page < ApplicationRecord\n  avo_json_fields :meta\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Components for Resource Views in Avo (Ruby)\nDESCRIPTION: Customizes which components are used for index, show, edit, and new resource views by assigning values to self.components. Components can be provided as class constants or strings, and from Avo v3.11.8, keys must be strings matching the default component names. Custom view components must accept the same arguments as the originals. No required parameters, but custom component classes should be properly namespaced and initialized.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nself.components = {\n  resource_index_component: Avo::Views::Users::ResourceIndexComponent,\n  resource_show_component: \"Avo::Views::Users::ResourceShowComponent\",\n  resource_edit_component: \"Avo::Views::Users::ResourceEditComponent\",\n  resource_new_component: Avo::Views::Users::ResourceEditComponent\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nself.components = {\n  \"Avo::Views::ResourceIndexComponent\": Avo::Custom::ResourceIndexComponent,\n  \"Avo::Views::ResourceShowComponent\": \"Avo::Custom::ResourceShowComponent\",\n  \"Avo::Views::ResourceEditComponent\": \"Avo::Custom::ResourceEditComponent\",\n  \"Avo::Index::GridItemComponent\": \"Avo::Custom::GridItemComponent\",\n  \"Avo::Index::ResourceMapComponent\": \"Avo::Custom::ResourceMapComponent\",\n  \"Avo::Index::ResourceTableComponent\": \"Avo::Custom::ResourceTableComponent\",\n  \"Avo::Index::TableRowComponent\": \"Avo::Custom::TableRowComponent\"\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nself.components = {\n  resource_index_component: Avo::MyDir::Views::ResourceIndexComponent\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Boolean Filter (Ruby)\nDESCRIPTION: Defines a basic Avo Boolean filter. The `apply` method modifies the ActiveRecord query based on the boolean values (`true`/`false`) selected for each option. The `options` method defines the available boolean choices displayed to the user.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass FeaturedFilter < Avo::Filters::BooleanFilter\n  self.name = 'Featured filter'\n\n  # `values` comes as a hash with stringified keys\n  # Eg:\n  # {\n  #   'is_featured': true\n  # }\n  def apply(request, query, values)\n    return query if values['is_featured'] && values['is_unfeatured']\n\n    if values['is_featured']\n      query = query.where(is_featured: true)\n    elsif values['is_unfeatured']\n      query = query.where(is_featured: false)\n    end\n\n    query\n  end\n\n  def options\n    {\n      is_featured: \"Featured\",\n      is_unfeatured: \"Unfeatured\"\n    }\n  end\n\n  # Optional method to set the default state.\n  # def default\n  #   {\n  #     is_featured: true\n  #   }\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Avo Fields (Ruby)\nDESCRIPTION: Demonstrates using the `hide_on` visibility helper to prevent a field (`:body`) from being displayed on specific Avo views, in this case, the Index and Show views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :text, hide_on: [:index, :show]\n```\n\n----------------------------------------\n\nTITLE: Using touch: true for Association Cache Invalidation in Ruby\nDESCRIPTION: Demonstrates how to use the `touch: true` option on a Rails `belongs_to` association in model definitions. When the associated child record (e.g., Comment) is updated, this option automatically updates the `updated_at` timestamp of the parent record (e.g., Post), which can help invalidate cache keys depending on the parent.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cache.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n  class Post < ApplicationRecord\n    has_many :comments, dependent: :destroy\n  end\n```\n\nLANGUAGE: ruby\nCODE:\n```\n  class Comment < ApplicationRecord\n    belongs_to :post, touch: true\n  end\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundler Globally for Private Gem Server Authentication Using Bash\nDESCRIPTION: This snippet shows how to configure bundler on the local development environment so that it uses the Gem Server Token automatically when accessing the private gem server. The token is set globally for the specified gem server URL via bundler's config command. The input is the token replacing 'xxx'. This makes bundler aware of authentication without changing the Gemfile or specifying the token each time.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/gem-server-authentication.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle config set --global https://packager.dev/avo-hq/ xxx\n```\n\n----------------------------------------\n\nTITLE: Upgrading Avo MetricCard Query Definition (Ruby)\nDESCRIPTION: Illustrates the necessary syntax change for defining a MetricCard's query logic when upgrading Avo to version 2.6+. It shows the transition from using a `query do...end` block to defining a `def query` method, emphasizing that the underlying logic and context access remain the same.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nclass AmountRaised < Avo::Dashboards::MetricCard\n  self.id = \"amount_raised\"\n  self.label = \"Amount raised\"\n  # self.description = \"Some description\"\n  # self.cols = 1\n  # self.initial_range = 30\n  # self.prefix = \"\"\n  # self.suffix = \"\"\n\n  # Before\n  query do\n    result 9001\n  end\n\n  # Current\n  def query\n    result 9001\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Branding - Complete Example\nDESCRIPTION: This snippet configures the branding settings of an Avo application. It sets custom colors for the UI, chart colors, logos, a placeholder image for missing images, and a favicon.  It requires the Avo gem to be installed and configured correctly in the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/branding.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.branding = {\n    colors: {\n      background: \"248 246 242\",\n      100 => \"#C5F1D4\",\n      400 => \"#3CD070\",\n      500 => \"#30A65A\",\n      600 => \"#247D43\",\n    },\n    chart_colors: ['#FFB435', \"#FFA102\", \"#CC8102\", '#FFB435', \"#FFA102\", \"#CC8102\"],\n    logo: \"/avo-assets/logo.png\",\n    logomark: \"/avo-assets/logomark.png\",\n    placeholder: \"/avo-assets/placeholder.svg\",\n    favicon: \"/avo-assets/favicon.ico\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Set resource title to a model attribute or computed method\nDESCRIPTION: Within a resource class, setting 'self.title' to a specific attribute or method (e.g., ':name' or a custom method) determines how resources are identified in UI elements like search results, enhancing readability and usability.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resources.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  self.title = :name\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the ID Field Using Avo Framework in Ruby\nDESCRIPTION: This snippet defines an 'id' field in a resource using the Avo framework in Ruby, marking it explicitly as an ID field. It is intended to be used in the Index and Show views to display the record's identifier. The field can be enhanced with options such as 'as_link_to_resource' to link it directly to the record's detail page, improving navigation. No additional dependencies beyond Avo and Ruby are required.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/id.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :id, as: :id\n```\n\n----------------------------------------\n\nTITLE: Enabling search for a resource with Ransack\nDESCRIPTION: Demonstrates how to add the search_query class variable to a resource file to enable search functionality using Ransack's query language.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/search.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserResource < Avo::BaseResource\n  self.title = :name\n  self.search_query = -> do\n    scope.ransack(id_eq: params[:q], first_name_cont: params[:q], last_name_cont: params[:q], m: \"or\").result(distinct: false)\n  end\n\n  # fields go here\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Scoped Record Count with Callable Scope Options in Avo using Ruby\nDESCRIPTION: Defines a custom scope class in Avo that displays the scope's name along with the count of records matching the scope by utilizing the callable `name` option. The example uses the `scoped_query.count` method to fetch the number of records after the scope is applied. It sanitizes the output as HTML to allow embedding of styled elements using Tailwind CSS classes. The scope filters records based on a specific condition defined in the `scope` lambda and marks the scope as visible with the `visible` callable. This technique requires the Active Record query interface and may impact performance on large datasets due to repeated count queries on each page load.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/display-scope-record-count.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Scopes::Scheduled < Avo::Advanced::Scopes::BaseScope\n  self.name = -> {\n    sanitize(\n      \"Scheduled \" \\\n      \"<span class='bg-gray-500 px-1 text-white text-xs rounded font-semibold'>\" \\\n        \"#{scoped_query.count}\" \\\n      \"</span>\"\n    )\n  }\n  self.description = -> { \"All the scheduled jobs.\" }\n  self.scope = -> { query.finished.invert_where }\n  self.visible = -> { true }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsable Sidebar Sections in Avo Using Ruby\nDESCRIPTION: Explains how to make sidebar sections collapsable to reduce vertical space usage. By setting the collapsable: true option, a toggle arrow is displayed, allowing users to expand or collapse the section with their choice saved in Local Storage for persistence across page reloads.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"Resources\", icon: \"resources\", collapsable: true do\n  resource :course\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Policy for AgingOrder with LazyLoader in Ruby\nDESCRIPTION: Creates an AgingOrderPolicy inheriting from ApplicationPolicy to define authorization rules and scope resolution for AgingOrder resource. The Scope class uses LazyLoader to manage the resource collection for authorized users. The index? method permits access only to admin users, while show? denies access universally. This policy integrates authorization control with API-backed data loading.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rest-api-integration.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass AgingOrderPolicy < ApplicationPolicy\n  class Scope < Scope\n    def resolve\n      LazyLoader.new(scope)\n    end\n  end\n\n  def index?\n    user.admin?\n  end\n\n  def show?\n    false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Delimiters for Tags Input - Ruby\nDESCRIPTION: This snippet changes which characters split user input into tags by specifying delimiters, such as comma and space, for the tags field. It's useful for customizing parsing behavior based on user preference or locale. The main input is the delimiters array; the output is different tag splits in the UI. No special dependencies outside of Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  delimiters: [\",\", \" \"]\n\n```\n\n----------------------------------------\n\nTITLE: Generated Avo Resource file for Car model\nDESCRIPTION: This code defines the Avo resource class for the Car model, specifying the display title, included relationships, and fields for ID, make, and mileage, facilitating CRUD UI configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resources.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CarResource < Avo::BaseResource\n  self.title = :id\n  self.includes = []\n  # self.search_query = -> do\n  #   scope.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n  # end\n\n  field :id, as: :id\n  # Generated fields from model\n  field :make, as: :text\n  field :mileage, as: :number\n  # add fields here\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Belongs To in an Avo Resource (Ruby)\nDESCRIPTION: Shows a complete `Avo::Resources::Comment` resource definition including a polymorphic `belongs_to` field named `:commentable`. It uses `polymorphic_as: :commentable` and `types: [::Post, ::Project]` to establish the polymorphic relationship within the resource's fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/belongs_to.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.title = :id\n\n  def fields\n    field :id, as: :id\n    field :body, as: :textarea\n    field :excerpt, as: :text, show_on: :index do\n      ActionView::Base.full_sanitizer.sanitize(record.body).truncate 60\n    rescue\n      \"\"\n    end\n\n    field :commentable, as: :belongs_to, polymorphic_as: :commentable, types: [::Post, ::Project]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Field Discovery Implementation in Ruby\nDESCRIPTION: Shows how to implement basic field discovery in an Avo resource class using the discover_columns and discover_associations methods.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-discovery.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  # ...\n\n  def fields\n    discover_columns\n    discover_associations\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Links Avo Menu Ruby\nDESCRIPTION: Shows how to add links to specific Avo resources using the `resource` helper within the menu configuration. It demonstrates referencing resources by their short symbol name (e.g., `:posts`) or their full class name string (e.g., `\"Avo::Resources::Comments\"`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nresource :posts\nresource \"Avo::Resources::Comments\"\n```\n\n----------------------------------------\n\nTITLE: Defining Account Tenant Model (Ruby)\nDESCRIPTION: Defines the 'Account' class as an ActiveRecord model associated with the 'accounts' table. This model represents the application's tenant. It includes validations to ensure the presence and uniqueness (case-insensitive) of the name and subdomain, and limits their maximum length.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/acts_as_tenant_integration.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Account model handles Tenant management\nclass Account < ApplicationRecord\n  MAX_SUBDOMAIN_LENGTH = 20\n\n  validates :name, :subdomain, presence: true\n  validates_uniqueness_of :name, :subdomain, case_sensitive: false\n  validates_length_of :subdomain, :name, maximum: MAX_SUBDOMAIN_LENGTH\n\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Include Blank Option - Ruby\nDESCRIPTION: This Ruby code demonstrates adding a 'blank' or default option to the Avo `Select` field using the `include_blank` parameter. When set to a string, that string appears as the first option, typically used to allow the user to select no value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/select.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  field :type,\n    as: :select,\n    include_blank: 'No type'\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Global Timezone and Currency in Avo Configuration\nDESCRIPTION: This snippet sets global timezone and currency options for consistent display of date, datetime, and currency fields across the app. It requires modifying the Avo initializer with `config.timezone` and `config.currency` attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.timezone = 'UTC'\n  config.currency = 'USD'\nend\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting Serialized Objects with Custom Serializer in Ruby using Avo EncryptionService\nDESCRIPTION: Shows how to encrypt and decrypt Ruby objects using the `Avo::Services::EncryptionService` with a custom serializer, such as Marshal. Requires the `serializer` parameter that must support serialization/deserialization of the given object. Inputs are typically ActiveRecord objects or custom classes, and the outputs after decryption are the original objects restored from the encrypted state. The `purpose` parameter is mandatory and must match for both encryption and decryption. Ensure a secret key base is available through environment or Rails credentials.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/encryption-service.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsecret_encryption = Avo::Services::EncryptionService.encrypt(message:Course::Link.first, purpose: :demo, serializer: Marshal)\n# \"1UTtkhu9BDywzz8yl8/7cBZnOoM1wnILDJbT7gP+zz8M/t1Dve4QTFQP5nfHZdYK9KvFDwkizm8DTHyNZdixDtCO/M7yNMlzL8Mry1RQ3AF0qhhTzFeqb5UqyQv/Cuq+NWvQ+GXv3gFckXaNqsFSX5yDccEpRDpyNkYT4MFxOa+8hVR4roebkNKB89lb73anBDTHsTAd37y2LFiv2YaiFguPQ/...\"\n\nAvo::Services::EncryptionService.decrypt(message: secret_encryption, purpose: :demo, serializer: Marshal)\n# #<Course::Link:0x00007fd28dc44c00 id: 1, link: \"http://ortiz.com/cher_mohr\", course_id: 1, created_at: Thu, 07 Dec 2023 11:05:13.779644000 UTC +00:00, updated_at: Thu, 07 Dec 2023 11:05:13.779644000 UTC +00:00, position: 1>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields to Forms with Resource Tools in Avo\nDESCRIPTION: This Ruby code illustrates enabling custom form fields through a resource tool, including attaching input fields directly and nested with 'fields_for', allowing complex data structures to be submitted and handled by the model. It also specifies permitted parameters in the resource's 'extra_params' and demonstrates model setter methods.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resource-tools.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nclass FishResource < Avo::BaseResource\n  tool FishInformation, show_on: :forms\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Belongs To Field Implementation in Ruby\nDESCRIPTION: Demonstrates the simplest implementation of a belongs_to association field in an Avo resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations/belongs_to.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :user, as: :belongs_to\n```\n\n----------------------------------------\n\nTITLE: Configure Field Inputs as Stimulus Targets in Ruby\nDESCRIPTION: Adds data attributes for input elements within forms, enabling targeting of specific input fields like nameTextInput, createdAtDateTimeInput, and hasSkillsTagsInput. These targets support complex inputs including searchable or polymorphic fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# Inputs get `data-[CONTROLLER]-target=\"nameTextInput\"`\nfield :name, as: :text\n\n# Inputs get `data-[CONTROLLER]-target=\"createdAtDateTimeInput\"`\nfield :created_at, as: :date_time\n\n# Inputs get `data-[CONTROLLER]-target=\"hasSkillsTagsInput\"`\nfield :has_skills, as: :tags\n```\n\n----------------------------------------\n\nTITLE: Command to manually generate a resource for post model\nDESCRIPTION: This command creates an Avo resource for the 'post' model explicitly, facilitating custom resource class creation and configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resources.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nbin/rails generate avo:resource post\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails API-Only Application with Middleware Adjustments in Ruby\nDESCRIPTION: This snippet configures a Rails API-only application by setting `config.api_only = true` and manually adding the `ActionDispatch::Flash` middleware to ensure compatibility with the Avo admin gem. It requires Rails 7.0 and proper middleware setup since API-only mode disables some default middleware like flash and session which are needed by Avo. The snippet is intended for Rails apps using Avo prior to version 2.9 and addresses missing route helpers such as `new` and `edit`. It also highlights general middleware handling for API-only apps where views, helpers, and assets are disabled by default.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/api-only-app.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire_relative \"boot\"\n\nrequire \"rails/all\"\n\n# Require the gems listed in Gemfile, including any gems\n# you\"ve limited to :test, :development, or :production.\nBundler.require(*Rails.groups)\n\nmodule RailApi\n  class Application < Rails::Application\n    # Initialize configuration defaults for originally generated Rails version.\n    config.load_defaults 7.0\n\n    # Only loads a smaller set of middleware suitable for API only apps.\n    # Middleware like session, flash, cookies can be added back manually.\n    # Skip views, helpers and assets when generating a new resource.\n    config.api_only = true\n    config.middleware.use ::ActionDispatch::Flash\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Modified Team Resource Using Custom TeamUser Resource for Users Field - Ruby\nDESCRIPTION: Adjusts the Team resource to use the TeamUser resource instead of the default User resource for the 'users' association field by specifying 'use_resource: Avo::Resources::TeamUser'. This changes how associated users show in the admin UI, overriding the default alphabetical resolution of resource classes for the User model, which helps disambiguate multiple resources per model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/team.rb\nclass Avo::Resources::Team < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :name, as: :text\n    field :users, as: :has_many, use_resource: Avo::Resources::TeamUser\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Tool Controller in Avo\nDESCRIPTION: Defines a custom tool controller within the `Avo` namespace.  The `custom_page` action sets a page title and adds a breadcrumb for a custom page in the Avo interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multitenancy.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/avo/tools_controller.rb\nclass Avo::ToolsController < Avo::ApplicationController\n  def custom_page\n    @page_title = \"Your custom page\"\n\n    add_breadcrumb \"Your custom page\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Map Card in Ruby\nDESCRIPTION: This snippet shows how to create a map card in Avo using a partial.  It sets the card's `id`, `label`, `partial`, `display_header`, `cols`, and `rows` attributes to define its content and layout.  The `display_header` attribute is set to false to hide the header, allowing the embedded content to fill the container.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/cards/map_card.rb\nclass Avo::Cards::MapCard < Avo::Cards::PartialCard\n  self.id = \"map_card\"\n  self.label = \"Map card\"\n  self.partial = \"avo/cards/map_card\"\n  self.display_header = false\n  self.cols = 2\n  self.rows = 4\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Show/Edit Field Wrapper with dash_if_blank Option - Avo (ERB)\nDESCRIPTION: This ERB snippet demonstrates using the `field_wrapper` helper for Show/Edit views in Avo, disabling the dash placeholder for blank values by setting `dash_if_blank: false`. It renders a Boolean check component based on the field value. Required dependencies include `field_wrapper_args` and the Boolean check component. The `dash_if_blank` option controls the display for blanks.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, dash_if_blank: false do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Defining Field in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to define a field within an Avo resource. It declares a field named `:name` and specifies it as a text field (`as: :text`). This establishes how data from the database is displayed and edited within an Avo resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\ndef fields\n  field :name, as: :text\nend\n```\n\n----------------------------------------\n\nTITLE: Creating External Links in Avo Menu\nDESCRIPTION: Example of using the link_to menu item type in Avo to create links to external websites. The target: :_blank option makes the link open in a new tab and displays a tiny external link icon.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlink_to \"Google\", path: \"https://google.com\", target: :_blank\n```\n\n----------------------------------------\n\nTITLE: Rendering Field Links in Vue.js\nDESCRIPTION: This snippet iterates through the 'fields' array (generated in the previous snippet) and renders each field as a list item containing a link.  The `v-for` directive is used for iteration, and the `v-bind:href` directive binds the `link` property of each field object to the `href` attribute of the `<a>` tag. The `{{field.text}}` displays the text of each field. This requires the previous snippet to have been executed and populate the 'fields' array. The output is an unordered list containing links to different fields, each link displaying the text of its corresponding field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields.md#_snippet_1\n\nLANGUAGE: Vue.js\nCODE:\n```\n<ul>\n  <li v-for=\"field in fields\">\n    <a :href=\"field.link\">{{field.text}}</a>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using append_to_response in Action Response\nDESCRIPTION: Demonstrates how to append additional Turbo Stream responses to the default action response.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(**args)\n  succeed \"Modal closed!!\"\n  close_modal\n\n  append_to_response -> {\n    turbo_stream.set_title(\"Cool title ;)\")\n  }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nappend_to_response -> {\n  [\n    turbo_stream.set_title(\"Cool title\"),\n    turbo_stream.set_title(\"Cool title 2\")\n  ]\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nappend_to_response -> {\n  turbo_stream.set_title(\"Cool title\")\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Association Policy Methods (Ruby)\nDESCRIPTION: Illustrates the policy methods that are automatically defined by the `inherit_association_from_policy` helper for an association, demonstrating how they delegate the check to the policy of the associated resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\ndef create_comments?\n  CommentPolicy.new(user, record).create?\nend\n\ndef edit_comments?\n  CommentPolicy.new(user, record).edit?\nend\n\ndef update_comments?\n  CommentPolicy.new(user, record).update?\nend\n\ndef destroy_comments?\n  CommentPolicy.new(user, record).destroy?\nend\n\ndef show_comments?\n  CommentPolicy.new(user, record).show?\nend\n\ndef reorder_comments?\n  CommentPolicy.new(user, record).reorder?\nend\n\ndef act_on_comments?\n  CommentPolicy.new(user, record).act_on?\nend\n\ndef view_comments?\n  CommentPolicy.new(user, record).index?\nend\n\n# Since Version 3.10.0\n\ndef attach_comments?\n  CommentPolicy.new(user, record).attach?\nend\n\ndef detach_comments?\n  CommentPolicy.new(user, record).detach?\nend\n```\n\n----------------------------------------\n\nTITLE: Default actions configuration for Avo audit logging\nDESCRIPTION: Lists the default configuration values for all available actions in Avo's audit logging system. By default, all actions are set to true, meaning they will be logged when audit logging is enabled.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  index: true,\n  new: true,\n  create: true,\n  edit: true,\n  update: true,\n  show: true,\n  destroy: true,\n  attach: true,\n  detach: true,\n  handle: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Display in Ruby with Custom State Mappings\nDESCRIPTION: This Ruby code snippet defines a domain-specific language (DSL) method to set up a status indicator for a record. It maps different input values to specific status states such as 'failed', 'loading', and 'success'. The configuration allows customization of what values trigger each state, with default empty arrays, and supports multiple input types like symbols or strings. The snippet serves as an example of flexible status management in Ruby applications, potentially for UI components.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/status.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :progress,\n  as: :status,\n  failed_when: [:closed, :rejected, :failed],\n  loading_when: [:loading, :running, :waiting, \"in progress\"],\n  success_when: [:done],\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Types Mapping in Avo (Ruby)\nDESCRIPTION: This snippet illustrates the use of `column_types_mapping` to override the default mapping of database column types to Avo field types. This configuration allows for control over the field types created based on the database column's type globally.  It provides configurations for `jsonb` and `decimal` types.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-discovery.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # ...\n\n  config.column_types_mapping = {\n    jsonb: { field: :code, language: 'json' },\n    decimal: { field: :number, decimals: 2 }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication for Avo using a Concern\nDESCRIPTION: Complete implementation showing how to create a BasicAuth concern and include it in Avo's ApplicationController. The code creates a concern module with the authentication logic and then includes it in Avo's controller through Rails.configuration.to_prepare.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/basic-authentication.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/concerns/basic_auth.rb\nmodule BasicAuth\n  extend ActiveSupport::Concern\n\n  # Authentication strategy came from this article:\n  # https://dev.to/kevinluo201/setup-a-basic-authentication-in-rails-with-http-authentication-388e\n  included do\n    http_basic_authenticate_with name: \"adrian\", password: \"password\"\n  end\nend\n\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # Avo configuration\nend\n\n# Add this to include it in Avo's ApplicationController\nRails.configuration.to_prepare do\n  # Add basic authentication to Avo\n  Avo::ApplicationController.include BasicAuth\nend\n```\n\n----------------------------------------\n\nTITLE: Disable Field with Avo's Resource-Edit Stimulus Method\nDESCRIPTION: This code demonstrates how to use the `resource-edit#disable` Stimulus.js method in Avo to disable a field based on the input of another field. When the `has_skills` boolean field changes, it disables the `countrySelectInput` target, preventing the user from interacting with the country select field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_skills, as: :boolean, html: {\n  edit: {\n    input: {\n      data: {\n        action: \"input->resource-edit#disable\", # use the pre-made stimulus method on input\n        resource_edit_disable_target_param: \"countrySelectInput\", # target to be disabled\n        # resource_edit_disable_targets_param: [\"countrySelectWrapper\"] # add more than one target to disable\n      }\n    }\n  }\n}\nfield :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_skills, as: :boolean, html: {\n  edit: {\n    input: {\n      data: {\n        action: \"input->resource-edit#disable\", # use the pre-made stimulus method on input\n        resource_edit_disable_target_param: \"countrySelectWrapper\", # target the wrapper so all inputs are disabled\n        # resource_edit_disable_targets_param: [\"countrySelectWrapper\"] # add more than one target to disable\n      }\n    }\n  }\n}\nfield :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h\n```\n\n----------------------------------------\n\nTITLE: Generate Pundit Policy for Kanban Board Resource\nDESCRIPTION: Generate a Pundit policy file for the Avo Kanban `Board` resource. This policy file can be used to define authorization rules controlling user access and permissions for managing boards and their components.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/kanban-boards.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nrails generate pundit:policy board\n```\n\n----------------------------------------\n\nTITLE: Permitting Nested Attributes Parameters in Resource Class\nDESCRIPTION: Extends the Fish resource to whitelist the reviews_attributes parameters, allowing the nested form data to be properly processed during record creation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/nested-records-when-creating.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass FishResource < Avo::BaseResource\n  self.extra_params = [reviews_attributes: [:body, :user_id]]\n\n  # other fields actions, filters and more\n\n  field :reviews, as: :has_many\n\n  tool NestedFishReviews, only_on: :new\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Index Controls in Avo (Ruby)\nDESCRIPTION: This snippet illustrates how to override the default controls displayed on the Avo resource's index page using the `index_controls` class attribute. The block includes a custom link (`link_to`), conditional action list (`actions_list`) and action button (`action`) that only appear if the `Fish` count is greater than zero, an attach button, and a create button with a custom label, tailoring the available actions on the index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customizable-controls.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.index_controls = -> do\n    link_to \"Fish.com\", \"https://fish.com\", icon: \"heroicons/outline/academic-cap\", target: :_blank\n    actions_list exclude: [Avo::Actions::DummyAction], style: :primary, color: :slate, label: \"Runnables\" if Fish.count > 0\n    action Avo::Actions::DummyAction, style: :primary, color: :fuchsia, icon: \"heroicons/outline/globe\" if Fish.count > 0\n    attach_button label: \"Attach one Fish\"\n    create_button label: \"Create a new and fresh Fish\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Authorizing search in policy files\nDESCRIPTION: Shows how to authorize search operations for resources using the search? method in policy files, introduced in Avo 2.29.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/search.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserPolicy < ApplicationPolicy\n  def search?\n    true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Show & Edit Field Wrapper Component and Layout\nDESCRIPTION: Indicates that the Show and Edit field wrappers use the same component. Details the division of the wrapper into three areas—Label, Value, and Extra—with explanations on how each area displays field information, help texts, and validation messages. Describes optional parameters for customizing appearance and behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-wrappers.md#_snippet_2\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, dash_if_blank: false do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Settings for an Avo Metric Card in Ruby\nDESCRIPTION: Sets base configuration options for a `UsersMetric` card, inheriting from `Avo::Dashboards::MetricCard`. It defines the unique `id`, display `label`, tooltip `description`, grid width (`cols`), grid height (`rows`), and whether to `display_header` (defaults to true).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.label = 'Users count'\n  self.description = 'Users description'\n  self.cols = 1\n  self.rows = 1\n  self.display_header = true\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Create Failure Message in Avo Controller\nDESCRIPTION: Shows how to override the error message displayed to users when record creation fails.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_fail_message\n  t \"avo.you_missed_something_check_form\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Avo's current user method\nDESCRIPTION: This snippet configures Avo to use the `current_user` method to determine the current user. This method is used by Pundit policies to authorize actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_method = :current_user\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Query Attributes with dynamic_filter Method\nDESCRIPTION: This snippet shows how to customize query attributes for a dynamic filter defined using the `dynamic_filter` method. It is similar to the previous snippet but achieves the same functionality using a different method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :name,\n  type: :text,\n  query_attributes: [:first_name, :last_name]\n```\n\n----------------------------------------\n\nTITLE: Basic HasMany Field Implementation in Ruby\nDESCRIPTION: The basic implementation of a HasMany field in Avo. This code defines a projects field as a has_many association which will be displayed on the Show view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations/has_many.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :projects, as: :has_many\n```\n\n----------------------------------------\n\nTITLE: Configuring nullable fields in Ruby\nDESCRIPTION: Enables storing NULL values in the database for empty fields and allows customization of which values should be interpreted as NULL.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\n# using default options\nfield :updated_status, as: :status, failed_when: [:closed, :rejected, :failed], loading_when: [:loading, :running, :waiting], nullable: true\n\n# using custom null values\nfield :body, as: :textarea, nullable: true, null_values: ['0', '', 'null', 'nil', nil]\n```\n\n----------------------------------------\n\nTITLE: Applying Scoped Has_Many Association in Avo Resource Post-2.5.0 in Ruby\nDESCRIPTION: Demonstrates the updated syntax for applying an approved scope to the comments has_many field in UserResource for Avo versions 2.5.0 and above. The scope lambda now calls approved on a query object, making the parent record available for more precise scoping. This improves flexibility in filtering associated models.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/scopes_common.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/user_resource.rb\nclass UserResource < Avo::BaseResource\n  # After v2.5.0\n  field :comments, as: :has_many, scope: -> { query.approved }\nend\n```\n\n----------------------------------------\n\nTITLE: Determining Avo View Context with Predicate Methods (Ask) in Ruby\nDESCRIPTION: Shows a Ruby case structure using predicate methods on the Avo view object (e.g., view.show?, view.index?) to branch logic based on current view context. This pattern simplifies handling multiple view types within a single code block. Requires the view object (Avo::ViewInquirer); no further dependencies. Key parameters are the CRUD view states and predicate methods. Input is the view context and outputs are conditional code blocks for each view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/views.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nif view.show?\n  # Code for the \"show\" view\nelsif view.index?\n  # Code for the \"index\" view\nelsif view.edit?\n  # Code for the \"edit\" view\nelsif view.new?\n  # Code for the \"new\" view\nelsif view.form?\n  # Code for the \"new\" or \"edit\" views\nelsif view.display?\n  # Code for the \"index or \"show\" views\nend\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Dynamic Filter with Query Attributes in Avo using Ruby\nDESCRIPTION: Example showing how to declare a custom dynamic filter with a filter ID that does not match a database column, by setting the `query_attributes` option to specify the actual column(s) used for filtering. This enables flexible naming of filters while targeting the correct model attributes in queries.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :custom_population, query_attributes: :population\n```\n\n----------------------------------------\n\nTITLE: Conditionally Showing Media Library Menu Item\nDESCRIPTION: Example of conditionally showing the Media Library menu item based on the current user's role using a lambda function.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/media-library.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nif defined?(Avo::MediaLibrary)\n  Avo::MediaLibrary.configure do |config|\n    config.visible = -> { Avo::Current.user.is_developer? }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Labels for Tags Fetched by ID - Ruby\nDESCRIPTION: Shows how to use the 'fetch_labels' option in the tags field to convert stored IDs into readable labels, enhancing display in Show/Index views when using 'fetch_values_from'. The lambda queries the Skill model for names matching present IDs. Required when tags store foreign keys rather than labels.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  fetch_values_from: \"/avo/resources/skills/skills_for_user\",\n  fetch_labels: -> {\n    Skill.where(id: record.skills).pluck(:name)\n  }\n```\n\n----------------------------------------\n\nTITLE: Registering Resource Tool | Avo Resource | Ruby\nDESCRIPTION: Includes the custom `Avo::ResourceTools::NestedFishReviews` tool within the `fields` definition of the `Avo::Resources::Fish` class. The `only_on: :new` option ensures this tool, which contains the nested form logic, is only displayed on the resource creation page.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/nested-records-when-creating.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  # other fields actions, filters and more\n\n  def fields\n    field :reviews, as: :has_many\n\n    tool Avo::ResourceTools::NestedFishReviews, only_on: :new\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using cURL to Fetch Grok Configuration\nDESCRIPTION: This code snippet demonstrates how to retrieve Grok configuration or instructions via cURL, by accessing a specific URL. It helps users automate or programmatically obtain necessary setup information.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/grok.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://avohq.io/llms.txt\n```\n\n----------------------------------------\n\nTITLE: Styling Badge with Color in Avo (Ruby)\nDESCRIPTION: This code snippet explains how to style the badge displayed on grid items by setting a `badge_color`.  The `badge_color` is set in the `card` configuration, and its value is determined by a conditional statement, allowing you to dynamically set the color based on the record data.  This snippet depends on the Avo framework and utilizes TailwindCSS color names.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/grid-view.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nself.grid_view = {\n  card: -> do\n    {\n      cover_url: record.image.attached? ? main_app.url_for(record.image.variant(resize: \"300x300\")) : nil,\n      title: record.title,\n      body: simple_format(record.description),\n      badge_label: (record.updated_at < 1.week.ago ? \"New\" : \"Updated\"),\n      badge_color: (record.updated_at < 1.week.ago ? \"green\" : \"orange\")\n    }\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: Adding description to search results (Pro feature)\nDESCRIPTION: Demonstrates how to add a description to search results using the as_description option, which is a Pro feature.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/search.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  self.title = :name\n  self.search_query = -> do\n    scope.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n  end\n\n  field :id, as: :id\n  field :name, as: :text, required: true, as_label: true\n  field :complex_name, as: :text, hide_on: :all, as_label: true do |model|\n    \"[#{model.id}]#{model.name}\"\n  end\n  field :excerpt, as: :text, as_description: true do |model|\n    ActionView::Base.full_sanitizer.sanitize(model.body).truncate 130\n  rescue\n    \"\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom CSV Export Action in Avo (Ruby)\nDESCRIPTION: Defines an Avo action `ExportCsv` that allows users to export selected model records to a CSV file. The action includes optional fields (`id`, `created_at`) for user-selected columns, generates the CSV content using the standard `CSV` library, and triggers a download. It requires the `avo` gem and access to the application's models.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/export-to-csv.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/export_csv.rb\nclass ExportCsv < Avo::BaseAction\n  self.name = \"Export CSV\"\n  self.may_download_file = true\n\n  # Add more fields here for custo user-selected columns\n  field :id, as: :boolean\n  field :created_at, as: :boolean\n\n  def handle(models:, resource:, fields:, **)\n    columns = models.first.class.columns_hash.keys\n    # Uncomment below to use the user-selected fields\n    # columns = get_columns_from_fields(fields)\n\n    return error \"No record selected\" if models.blank?\n\n    file = CSV.generate(headers: true) do |csv|\n      csv << columns\n\n      models.each do |record|\n        csv << columns.map do |attr|\n          record.send(attr)\n        end\n      end\n    end\n\n    download file, \"#{resource.plural_name}.csv\"\n  end\n\n  def get_columns_from_fields(fields)\n    fields.select { |key, value| value }.keys\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Predicate Methods for Collection-Based Avo View Checks in Ruby\nDESCRIPTION: Utilizes view.form? and view.display? predicates to determine whether the current CRUD view belongs to the 'form' (new or edit) or 'display' (index or show) group in Ruby. Simplifies branching when multiple views are handled the same way. Requires the view object; inputs are implicit view states. Outputs are grouped code blocks for related views; no special constraints beyond those of Avo's view system.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/views.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nif view.form?\n  # Code for the \"new\" and \"edit\" views\nelsif view.display?\n  # Code for the \"show\" and \"index\" views\nend\n\n```\n\n----------------------------------------\n\nTITLE: DB Payload Example for Boolean Group (JSON)\nDESCRIPTION: This JSON example showcases the expected structure of the data stored in the database when using a `boolean_group` field. The keys represent attribute names, and the values are boolean values indicating if the attribute is enabled or not.  This example will be stored as the value of the boolean group field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/boolean_group.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"admin\": true,\n  \"manager\": true,\n  \"writer\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Resource Controller | Ruby\nDESCRIPTION: This snippet shows the basic structure for a custom Avo resource controller. It demonstrates inheriting from `Avo::BaseResourcesController`, which is the recommended parent class for resource-specific controllers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::PostsController < Avo::BaseResourcesController\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional User Field Visibility with Hidden Override in AvoHQ (Ruby)\nDESCRIPTION: This snippet shows how to use conditional logic for field visibility in AvoHQ form resources. If the current user is an admin, the user can select users via a belongs_to field, and the user_id hidden field is omitted to prevent override. For non-admin users, the user_id field is set as hidden with a default value derived from the current user's ID, ensuring correct attribution. This requires a context hash containing current_user and works within AvoHQ resource declaration. Inputs include role-based visibility lambdas; outputs are context-sensitive form fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/hidden.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# If the current_user is a admin\n# 1. Allow them to see and select a user.\n# 2. Remove the user_id field to prevent user_id it from overriding the user selection.\n# Otherwise set the user_id to the current user and hide the field.\nfield :user, as: :belongs_to, visible: -> { context[:current_user].admin? }\nfield :user_id, as: :hidden, default: -> { current_user.id }, visible: -> { !context[:current_user].admin? }\n```\n\n----------------------------------------\n\nTITLE: Enforcing Business Logic in Join Table with Custom Validation - Ruby on Rails\nDESCRIPTION: This snippet provides a custom validation for a Rails join table model, TeamMembership, to prevent a banned user from being associated with a team. It depends on Rails (ActiveRecord) with proper associations and presumes a banned? method exists on the user. The custom_validation method checks the user's status, and if banned, adds an error to the user attribute, blocking the save or update operation and displaying an error message. Key parameters include associated user and team instances; expected behavior is that banned users cannot join teams via this model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-errors.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/team_membership.rb\nclass TeamMembership < ApplicationRecord\n  belongs_to :team\n  belongs_to :user\n\n  validate :custom_validation\n\n  private\n\n  def custom_validation\n    if user.banned?\n      errors.add(:user, \"is banned.\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Clickable Links with Avo Field Formatters (Ruby)\nDESCRIPTION: Shows using `format_using` to render a URL field (`:company_url`) as a clickable link (`link_to`) on display views, while keeping it as a plain text input on form views. It also includes an optional block for computing the value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nfield :company_url,\n  as: :text,\n  format_using: -> {\n    if view == :new || view == :edit\n      value\n    else\n      link_to(value, value, target: \"_blank\")\n    end\n  } do\n  main_app.companies_url(record)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard with Dividers in Ruby\nDESCRIPTION: Defines a dashboard named 'Dashy' that arranges multiple cards and includes a divider to separate cards into logical sections.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass Dashy < Avo::Dashboards::BaseDashboard\n  self.id = 'dashy'\n  self.name = 'Dashy'\n  self.description = 'The first dashbaord'\n  self.grid_cols = 3\n\n  card ExampleMetric\n  card ExampleAreaChart\n  card ExampleScatterChart\n  card PercentDone\n  card AmountRaised\n  card ExampleLineChart\n  card ExampleColumnChart\n  card ExamplePieChart\n  card ExampleBarChart\n  divider label: \"Custom partials\"\n  card ExampleCustomPartial\n  card MapCard\nend\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to Edit View Label Placeholder - Ruby\nDESCRIPTION: Shows the basic structural placeholder for adding HTML attributes to the `label` element of a field in the `edit` view using the object notation. This structure also applies to the New view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/html.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    label: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Regular Avo Action\nDESCRIPTION: This command generates a regular Avo action, meaning it requires record selection. The generated file will reside in `app/avo/actions`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/generate.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Generate a regular action\nbin/rails generate avo:action mark_as_featured\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Resource for STI Subclass in Ruby\nDESCRIPTION: Shows how to configure an Avo resource (`Avo::Resources::SuperUser`) for a subclass in an STI setup. It specifically highlights setting `self.model_class = \"SuperUser\"` to ensure Avo correctly identifies the model associated with this resource, preventing potential confusion caused by STI when Rails casts models to their final class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/associations.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/super_user.rb\nclass Avo::Resources::SuperUser < Avo::BaseResource\n  self.title = :name\n  self.includes = []\n  self.model_class = \"SuperUser\"\n\n  def fields\n    field :id, as: :id\n    field :name, as: :text\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware to Set Current Account Based on URL Parameter\nDESCRIPTION: Implements middleware that intercepts incoming HTTP requests, extracts the account ID from the URL path, verifies its existence in the database, and sets the Current.account accordingly. If the account does not exist, it redirects to the root path. This middleware is integrated into the Rails stack to enable route-level multitenancy.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/multitenancy.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n## Multitenant Account Middleware\n#\n# Included in the Rails engine if enabled.\n#\n# Used for setting the Account by the first ID in the URL like Basecamp 3.\n# This means we don't have to include the Account ID in every URL helper.\n# From JumpstartRails AccountMiddleware\n\nclass AccountMiddleware\n  def initialize(app)\n    @app = app\n  end\n\n  # http://example.com/12345/projects\n  def call(env)\n    request = ActionDispatch::Request.new env\n    # Fetch the account id from the path\n    _, account_id, request_path = request.path.split(\"/\", 3)\n\n    # Check if the id is a number\n    if /\\d+/.match?(account_id)\n      # See if that account is present in the database.\n      if (account = Account.find_by(id: account_id))\n        # If the account is present, set the Current.account to that\n        Current.account = account\n      else\n        # If not, redirect to the root path\n        return [302, {\"Location\" => \"/\"}, []]\n      end\n\n      request.script_name = \"/#{account_id}\"\n      request.path_info = \"/#{request_path}\"\n    end\n\n    @app.call(request.env)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Resource Mapping to Resolve Multiple Resources - Ruby\nDESCRIPTION: Sets a configuration in the Avo initializer to explicitly map the 'User' Rails model to the 'Avo::Resources::User' resource. This mapping short-circuits the default alphabetical resolution of resources when multiple resources exist for the same model and ensures the correct default resource interface is used unless overridden. It improves consistency across associations and admin views requiring the User resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.model_resource_mapping = {\n    'User': 'Avo::Resources::User'\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Customize Avo sign-out path resource name (custom)\nDESCRIPTION: Set `current_user_resource_name` to the symbol representing your custom resource name, like `<code>:current_admin</code></code>, if your sign-out path helper follows a different convention such as `destroy_current_admin_session_path`. This is configured in the Avo initializer.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authentication.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_resource_name = :current_admin\nend\n\n```\n\n----------------------------------------\n\nTITLE: Replacing `resolve_find_scope` with `find_record_method` in Avo Ruby Resources\nDESCRIPTION: Shows the upgrade from using the deprecated `resolve_find_scope` lambda to the new `find_record_method` that allows more precise control to find records by ID, supporting gems like `friendly` and `prefixed_ids`. The new method accepts `model_class`, `id`, and `params` parameters to customize the record lookup.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nself.resolve_find_scope = ->(model_class:) do\n  model_class.friendly\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# After\nself.find_record_method = ->(model_class:, id:, params:) do\n  model_class.friendly.find id\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Ranges for User Metric Card in Ruby\nDESCRIPTION: Adds range selection capability to the user metric card, allowing users to select time ranges like 7 days, 30 days, or predefined periods like 'Today' or 'YTD'. Uses a hash to define ranges with labels and values, and supports setting an initial default range. Implements the `ranges` attribute for dropdown options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = 'users_metric'\n  self.label = 'Users count'\n  self.initial_range = 30\n  self.ranges = {\n    \"7 days\": 7,\n    \"30 days\": 30,\n    \"60 days\": 60,\n    \"365 days\": 365,\n    Today: \"TODAY\",\n    \"Month to date\": \"MTD\",\n    \"Quarter to date\": \"QTD\",\n    \"Year to date\": \"YTD\",\n    All: \"ALL\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Controlling Action Visibility by View in Avo - Ruby\nDESCRIPTION: This Ruby snippet shows using the 'visible' lambda to restrict action display to specific views (index and show) in Avo versions prior to 2.19. It demonstrates passing 'resource' and 'view' as arguments and returning true only for allowed views. Place this line inside an action class to control where actions appear.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nself.visible = -> (resource:, view:) { view.in?([:index, :show]) }\n```\n\n----------------------------------------\n\nTITLE: Customizing Card Query Logic in Avo with Conditional Arguments in Ruby\nDESCRIPTION: Implements a MetricCard that alters its query logic depending on dashboard arguments. Accesses the arguments hash to apply a conditional (such as filtering to only active users). Depends on an ActiveRecord User model and an .active scope; expects arguments to be present or absent, returns an integer user count.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dashboards.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::UsersCount < Avo::Cards::MetricCard\n  self.id = \"users_metric\"\n  self.label = \"Users count\"\n\n  # You have access to context, params, range, current parent, and current card\n  def query\n    scope = User\n\n    if arguments[:active_users].present?\n      scope = scope.active\n    end\n\n    result scope.count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Avo Filter on Resource (Ruby)\nDESCRIPTION: Shows how to add a defined filter to an Avo resource. Filters are registered within the resource class definition using the `filter` method, passing the filter class name.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  self.title = :name\n  self.search = :id\n\n  field :id, as: :id\n  # other fields\n\n  filter PublishedFilter\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling audit logging for actions in Avo\nDESCRIPTION: Within an action class, assign `self.audit_logging = { activity: true }` to track execution of specific actions like 'Change Price' and record their activities.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::ChangePrice < Avo::BaseAction\n  self.name = \"Change Price\"\n\n  self.audit_logging = {\n    activity: true\n  }\n\n  def fields\n    field :price, as: :number, default: -> { resource.record.price rescue nil }\n  end\n\n  def handle(query:, fields:, current_user:, resource:, **args)\n    query.each do |record|\n      record.update!(price: fields[:price])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining 'approved' scope in Comment model (Ruby)\nDESCRIPTION: This snippet defines a scope named 'approved' within the Comment ActiveRecord model to filter comments with 'approved' set to true. It includes an optional association to User. The scope simplifies querying only approved comments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/scopes_common.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :user, optional: true\n\n  scope :approved, -> { where(approved: true) }\nend\n```\n\n----------------------------------------\n\nTITLE: Filter Avo access in Rails routes using authenticate block\nDESCRIPTION: Wrap the `mount_avo` call within an `authenticate` block in your Rails `routes.rb` file. This restricts access to the `/avo` path only to users authenticated by your application's primary authentication method (e.g., Devise `authenticate :user`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authentication.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nauthenticate :user do\n  mount_avo at: '/avo'\nend\n\n```\n\n----------------------------------------\n\nTITLE: Number Field with Min, Max, and Step\nDESCRIPTION: This code shows how to define an Avo number field with `min`, `max`, and `step` attributes. `min: 0` sets the minimum allowed value to 0, `max: 120` sets the maximum to 120, and `step: 5` sets the increment/decrement step to 5. This restricts the allowed values of the age field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/number.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :age, as: :number, min: 0, max: 120, step: 5\n```\n\n----------------------------------------\n\nTITLE: Initializing Progress Bar Field in Avo\nDESCRIPTION: This code initializes a basic progress bar field named `progress` in Avo. It uses the `progress_bar` field type. No specific options are set, so default values are used.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/progress_bar.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :progress, as: :progress_bar\n```\n\n----------------------------------------\n\nTITLE: Combining Select and Badge Fields in Avo (Ruby)\nDESCRIPTION: This example shows how to use a `select` field (hidden on show and index views) to update the value of the `stage` attribute, which is then displayed as a badge.  The select field provides a UI for changing the stage, while the badge field provides a visual representation of the stage. The select field is hidden on the `show` and `index` views to avoid redundancy, as the badge field already displays the `stage`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/badge.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :stage, as: :select, hide_on: [:show, :index], options: { 'Discovery': :discovery, 'Idea': :idea, 'Done': :done, 'On hold': 'on hold', 'Cancelled': :cancelled, 'Drafting': :drafting }, placeholder: 'Choose the stage.'\nfield :stage, as: :badge, options: { info: [:discovery, :idea], success: :done, warning: 'on hold', danger: :cancelled, neutral: :drafting }\n```\n\n----------------------------------------\n\nTITLE: Applying HTML Attributes (Object Notation) to Avo Field Wrapper in Edit View (Ruby)\nDESCRIPTION: This snippet demonstrates how to add static `style`, `classes`, and `data` attributes to the field's wrapper element specifically for the 'edit' view (which also applies to 'new'). The `style` and `classes` are provided as strings, while `data` is a Ruby Hash.\n\nDependencies: Avo framework.\n\nParameters: `html` option with a nested hash structure `edit: { wrapper: { style: '...', classes: '...', data: {...} } }`.\n\nExpected Input: A hash containing key-value pairs for `style`, `classes`, and `data`.\n\nExpected Output: Configures the Avo field definition to render the specified HTML attributes on the wrapper in the edit/new view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/html.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    wrapper: {\n      style: \"background: red; text: white;\" # string\n      classes: \"absolute h-[41px] w-full\" # string\n      data: {\n        action: \"input->resource-edit#toggle\",\n        resource_edit_toggle_target_param: \"skills_tags_wrapper\",\n      } # Hash\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Override destroy_success_action - Ruby\nDESCRIPTION: This snippet shows how to override the `destroy_success_action` method.  It defines the behavior after a resource is successfully destroyed. The user is redirected to the specified path with a success message.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ndef destroy_success_action\n  respond_to do |format|\n    format.html { redirect_to after_destroy_path, notice: destroy_success_message }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining CourseResource in Avo\nDESCRIPTION: This code defines a `CourseResource` class that extends `Avo::BaseResource`. It configures fields like `id`, `name`, `country`, and `city`. The `country` field is a select dropdown populated from `Course.countries`, and the `city` field is also a select dropdown, whose options are dynamically populated based on the selected country, with `data` attributes set up to make it work with Stimulus.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_24\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CourseResource < Avo::BaseResource\n  self.stimulus_controllers = \"course-resource\"\n\n  field :id, as: :id\n  field :name, as: :text\n  field :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h, html: {\n    edit: {\n      input: {\n        data: {\n          course_resource_target: \"countryFieldInput\", # Make the input a target\n          action: \"input->course-resource#onCountryChange\" # Add an action on change\n        }\n      }\n    }\n  }\n  field :city, as: :select, options: Course.cities.values.flatten.map { |city| [city, city] }.to_h, html: {\n    edit: {\n      input: {\n        data: {\n          course_resource_target: \"cityFieldInput\" # Make the input a target\n        }\n      }\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Utilizing All Helpers for Dynamic Menu Population\nDESCRIPTION: Demonstrates the usage of `all_dashboards`, `all_resources`, and `all_tools` within sections and groups to dynamically include menu items.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"App\", icon: \"heroicons/outline/beaker\" do\n  group \"Dashboards\", icon: \"dashboards\" do\n    all_dashboards\n  end\n\n  group \"Resources\", icon: \"resources\" do\n    all_resources\n  end\n\n  group \"All tools\", icon: \"tools\" do\n    all_tools\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring disabled field with conditional block in Ruby\nDESCRIPTION: Makes a field disabled conditionally based on the current view. The field will be disabled only on the edit view, keeping it enabled elsewhere.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nfield :id, as: :number, disabled: -> { view == :edit } # make the field disabled only on the new edit view\n```\n\n----------------------------------------\n\nTITLE: Using keep_modal_open in Action Response\nDESCRIPTION: Shows how to keep the action modal open after execution, especially useful when handling errors to allow users to correct their input.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::KeepModalOpenAction < Avo::BaseAction\n  self.name = \"Keep Modal Open\"\n  self.standalone = true\n\n  def fields\n    field :name, as: :text\n    field :birthday, as: :date\n  end\n\n  def handle(fields:, **args)\n    User.create fields\n    succeed \"All good ✌️\"\n  rescue => error\n    error \"Something happened: #{error.message}\"\n    keep_modal_open\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Avo Action Display Name (Ruby)\nDESCRIPTION: Sets the display name for an Avo action. Can be a static string or a dynamic block that uses the execution context (like `record`) to determine the name, useful for personalization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/customization.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.name = \"Release fish\"\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.name = -> {\n    record.present? ? \"Release #{record.name}?\" : \"Release fish\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Decorating Metric Data with Prefix and Suffix in Ruby\nDESCRIPTION: Enhances metric value display by adding a prefix or suffix, such as currency symbols or percentage signs. Uses `prefix` and `suffix` attributes with static values as well as callables that access request params or parent values for dynamic formatting.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = 'users_metric'\n  self.prefix = '$'\n  self.suffix = '%'\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = 'users_metric'\n  self.prefix = -> { params[:prefix] || parent.prefix }\n  self.suffix = -> { params[:suffix] || parent.suffix }\nend\n```\n\n----------------------------------------\n\nTITLE: Toggle Field Visibility with Avo's Resource-Edit Stimulus Method\nDESCRIPTION: This code snippet shows how to use the pre-made `resource-edit#toggle` Stimulus.js method in Avo to toggle the visibility of a field based on the input of another field. When the `has_country` boolean field changes, it toggles the visibility of the `countrySelectWrapper` target, effectively showing or hiding the country select field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_country, as: :boolean, html: {\n  edit: {\n    input: {\n      data: {\n        action: \"input->resource-edit#toggle\", # use the pre-made stimulus method on input\n        resource_edit_toggle_target_param: \"countrySelectWrapper\", # target to be toggled\n        # resource_edit_toggle_targets_param: [\"countrySelectWrapper\"] # add more than one target\n      }\n    }\n  }\n}\nfield :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h\n```\n\n----------------------------------------\n\nTITLE: Registering and Displaying Resource Actions in Customizable Blocks in Avo (Ruby)\nDESCRIPTION: This Ruby class shows the proper technique for both displaying an action button inside a custom block (using show_controls) and explicitly registering it in the actions method, required for Avo versions less than 3.10.7. Dependencies include the Avo framework and defined Action classes. The class demonstrates passing specific arguments to each action instance, working with the Lambda-based 'show_controls', and clarifies that using action inside customizable blocks only renders the button and does not register the action for backend processing unless explicitly declared in actions. Inputs are action classes with optional arguments; output is the registered and rendered resource controls.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customizable-controls.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.title = :name\n\n  self.show_controls = -> do\n    # In order to use it here\n    action Avo::Actions::ReleaseFish, style: :primary, color: :fuchsia, arguments: {\n      action_on_show_controls: \"Will use this arguments\"\n    }\n  end\n\n  # 👇 Also declare it here 👇\n  def actions\n    action Avo::Actions::ReleaseFish, arguments: {\n      action_from_list: \"Will use this arguments\"\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Numeric Fields Using Rails Helpers in Avo (Ruby)\nDESCRIPTION: Demonstrates formatting a numeric field using a standard Rails view helper inside a format_using block. Utilizes view_context.number_to_currency to render the field as formatted currency. The format applies to all views unless conditional logic is used inside the block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :price, as: :number, format_using: -> { view_context.number_to_currency(value) }\n```\n\n----------------------------------------\n\nTITLE: Adding help text to a field in Avo using Ruby\nDESCRIPTION: This code snippet demonstrates how to add help text to a field using the `help` option. The help text can be plain text or HTML. This provides additional context for users.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n# using the text value\nfield :custom_css, as: :code, theme: 'dracula', language: 'css', help: \"This enables you to edit the user's custom styles.\"\n\n# using HTML value\nfield :password, as: :password, help: 'You may verify the password strength <a href=\"http://www.passwordmeter.com/\">here</a>.'\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Avo BooleanFilter for City (Ruby)\nDESCRIPTION: Defines an Avo `BooleanFilter` for filtering courses by `city`. The `apply` method filters records based on the selected city keys (where value is true). The `options` method dynamically generates the available city options by checking the state of the `Avo::Filters::CourseCountryFilter` via `applied_filters`, providing only cities belonging to the selected countries. Helper methods facilitate retrieving and formatting this data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/filters/course_city.rb\nclass Avo::Filters::CourseCity < Avo::Filters::BooleanFilter\n  self.name = \"Course city filter\"\n\n  def apply(request, query, values)\n    query.where(city: values.select { |city, selected| selected }.keys)\n  end\n\n  def options\n    cities_for_countries countries\n  end\n\n  private\n\n  # Get a hash of cities for certain countries\n  # Example payload:\n  # countries = [\"USA\", \"Japan\"]\n  def cities_for_countries(countries_array = [])\n    countries_array\n      .map do |country|\n        # Get the cities for this country\n        Course.cities.stringify_keys[country]\n      end\n      .flatten\n      # Prepare to transform to a Hash\n      .map { |city| [city, city] }\n      # Turn to a Hash\n      .to_h\n  end\n\n  # Get the value of the selected countries\n  # Example payload:\n  # applied_filters = {\n  #   \"Avo::Filters::CourseCountryFilter\" => {\n  #     \"USA\" => true,\n  #     \"Japan\" => true,\n  #     \"Spain\" => false,\n  #     \"Thailand\" => false,\n  #   }\n  # }\n  def countries\n    if applied_filters[\"Avo::Filters::CourseCountryFilter\"].present?\n      # Fetch the value of the countries filter\n      applied_filters[\"Avo::Filters::CourseCountryFilter\"]\n        # Keep only the ones selected\n        .select { |country, selected| selected }\n        # Pluck the name of the coutnry\n        .keys\n    else\n      # Return empty array\n      []\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a regular action (Bash)\nDESCRIPTION: This bash command provides an example of generating a regular Avo action. This creates an action that operates on selected records. It serves as a base to be customized. A Rails application with Avo is required.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/generate.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Generate a regular action\nbin/rails generate avo:action mark_as_featured\n```\n\n----------------------------------------\n\nTITLE: Overriding method_missing to Dynamically Handle Attachment Permission Checks in Ruby for Pundit\nDESCRIPTION: This Ruby snippet adds a method_missing handler to ApplicationPolicy, intercepting undefined methods matching attachment action patterns (upload, delete, download). It extracts the action and attachment from the method name, then looks up a permissions hash (attachment_concerns) to dynamically delegate permission checks. If no match is found, it falls back to the superclass. This reduces repetitive method definitions by resolving permissions at runtime based on naming conventions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/attachment-policy-extension-for-pundit.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\ndef method_missing(method_name, *args)\n  if method_name.to_s =~ /^(upload|delete|download)_(.+)\\?$/\n    action = Regexp.last_match(1).to_sym\n    attachment = Regexp.last_match(2).to_sym\n\n    return attachment_concerns[attachment][action] if attachment_concerns.key?(attachment) &&\n                                                      attachment_concerns[attachment].key?(action)\n  end\n\n  super\nend\n```\n\n----------------------------------------\n\nTITLE: Adding All Dashboards Excluding Specific Avo Menu Ruby\nDESCRIPTION: Demonstrates using the `all_dashboards` helper to automatically include all registered Avo dashboards in a menu group. It shows how to use the `exclude` option with an array of symbols or strings to omit specific dashboards like `:sales` and `:analytics`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"App\", icon: \"heroicons/outline/beaker\" do\n  group \"Dashboards\", icon: \"dashboards\" do\n    all_dashboards exclude: [:sales, :analytics]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Options with Callable Blocks in Ruby\nDESCRIPTION: Example of using callable blocks with self.chartkick_options in a ChartkickCard class to customize chart appearance, particularly for configuring legend display options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::ExampleAreaChart < Avo::Cards::ChartkickCard\n  self.chart_options: -> do\n    {\n      library: {\n        plugins: {\n          legend: {display: true}\n        }\n      }\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Resource Index View Type\nDESCRIPTION: Chooses between `:table` and `:grid` view types for resource index via `config.default_view_type`. Useful for customizing how resource lists are displayed to suit usability preferences.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.default_view_type = :table\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Field Options to Discovered Fields in Ruby\nDESCRIPTION: Demonstrates how to add custom options to all discovered fields or associations, useful for applying consistent configurations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-discovery.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  # ...\n\n  def fields\n    discover_columns help: \"Automatically discovered fields\"\n    discover_associations searchable: false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including a Specific Helper Module in Avo's BaseField Class in Ruby on Rails\nDESCRIPTION: This code snippet demonstrates how to include a specific helper module, such as PostsHelper, into the Avo::Fields::BaseField class by defining a module and including it inside a Rails initializer. This allows helper methods like 'extract_excerpt' to be used within resource definitions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/use-own-helpers-in-resource-files.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # Usual Avo config\nend\n\nmodule FieldExtensions\n  # Include a specific helper\n  include PostsHelper\nend\n\nRails.configuration.to_prepare do\n  Avo::Fields::BaseField.include FieldExtensions\nend\n```\n\n----------------------------------------\n\nTITLE: Setting use_resource Option with String Representation in Ruby\nDESCRIPTION: This Ruby code snippet shows how to configure the use_resource option in Avo association tables using a string representation of the resource class (e.g., \"Avo::Resources::Post\"). This pattern is useful when the class may be lazy-loaded or the string will be resolved at runtime. Dependencies include the Avo framework and proper autoloading or constantize logic for class name strings. The input is a string, and the output is dynamically resolving the correct resource for display. Ensure the string matches the intended resource class exactly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/associations_use_resource_option_common.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n\"Avo::Resources::Post\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Actions from Actions List in Avo (Ruby)\nDESCRIPTION: This snippet provides examples of using the `exclude` option within the `actions_list` control in Avo. It demonstrates how to prevent specific actions from appearing in the default actions dropdown, allowing developers to render those actions as standalone buttons elsewhere if needed. The exclusion can be a single action class or an array of action classes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customizable-controls.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nactions_list exclude: DisableAccount\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nactions_list exclude: [ExportSelection, PublishPost]\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Field Options in Avo Using Ruby\nDESCRIPTION: This example demonstrates configuring various options on a text field in Avo, including setting labels, required and readonly status, HTML rendering, placeholder text, and output formatting. Each option customizes a specific aspect: name sets the display label, required enforces input, readonly disables editing, as_html parses value as HTML, placeholder changes the default input hint, and format_using applies value formatting (e.g., truncation). Requires Avo gem and that format_using receives a lambda for customizing display.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/text.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :title, # The database field ID\n  as: :text, # The field type\n  name: 'Post title', # The label you want displayed\n  required: true, # Display it as required\n  readonly: true, # Display it disabled\n  as_html: true # Should the output be parsed as html\n  placeholder: 'My shiny new post', # Update the placeholder text\n  format_using: -> { value.truncate 3 } # Format the output\n```\n\n----------------------------------------\n\nTITLE: Aligning Avo Field Text in Index View\nDESCRIPTION: Demonstrates using the `index_text_align` option on a field definition within an Avo resource class. This allows controlling the horizontal alignment of the field's content specifically in the Index view table, with valid values being `:right` or `:center`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_24\n\nLANGUAGE: Ruby\nCODE:\n```\nclass ProjectResource < Avo::BaseResource\n  field :users_required, as: :number, index_text_align: :right\nend\n```\n\n----------------------------------------\n\nTITLE: Defining ActiveRecord Enum - Ruby\nDESCRIPTION: This Ruby snippet defines an ActiveRecord `enum` on a `Project` model. This enum provides a convenient way to manage a set of predefined states or types, which can then be easily used as options for an Avo `Select` field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/select.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/models/project.rb\nclass Project < ApplicationRecord\n  enum type: { 'Large container': 'large', 'Medium container': 'medium', 'Tiny container': 'small' }\nend\n```\n\n----------------------------------------\n\nTITLE: Authorizing Ransackable Attributes in Rails Model Using Ruby\nDESCRIPTION: This Ruby snippet illustrates how to declare which attributes are authorized for Ransack filtering in the Rails model by overriding the `self.ransackable_attributes` method. The first example explicitly lists filterable field names as strings to enable filtering on 'status', 'stage', and 'country'. The second example shows how to authorize all attributes for filtering using a helper method. Correct configuration is critical as Avo relies on Ransack for filter queries and requires attributes to be strings, not symbols.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Project < ApplicationRecord\n  def self.ransackable_attributes(auth_object = nil)\n    [\"status\", \"stage\", \"country\"] # the array items should be strings not symbols\n  end\nend\n\n# Or authorize ALL attributes at once\n\nclass Project < ApplicationRecord\n  def self.ransackable_attributes(auth_object = nil)\n    authorizable_ransackable_attributes\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Heading Field Basic Ruby\nDESCRIPTION: Defines a basic Heading field in Avo. The content displayed will default to a humanized version of the field name.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/heading.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :user_information, as: :heading\n```\n\n----------------------------------------\n\nTITLE: Adding Database Index on created_at Column Using ActiveRecord Migration in Ruby\nDESCRIPTION: Illustrates how to create a Rails migration to add an index on the created_at column of the users table. This optimization supports Avo's default sort order on the index view, improving query performance and UI responsiveness when listing records. Requires Rails 7.1 or later and familiarity with ActiveRecord migrations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/best-practices.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddIndexOnUsersCreatedAt < ActiveRecord::Migration[7.1]\n  def change\n    add_index :users, :created_at\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing apply_policy method with Pundit\nDESCRIPTION: Implements the apply_policy method to apply a policy scope to a query, with fallback options if no scope is found.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\ndef apply_policy(user, model, policy_class: nil)\n  # Try and figure out the scope from a given policy or auto-detected one\n  scope_from_policy_class = scope_for_policy_class(policy_class)\n\n  # If we discover one use it.\n  # Else fallback to pundit.\n  if scope_from_policy_class.present?\n    scope_from_policy_class.new(user, model).resolve\n  else\n    Pundit.policy_scope!(user, model)\n  end\nrescue Pundit::NotDefinedError => error\n  raise NoPolicyError.new error.message\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Field in Avo Resource (Ruby)\nDESCRIPTION: This Ruby snippet demonstrates how to define a `Time` field within an Avo resource for the `:starting_at` attribute. It configures the field to use a 24-hour format for both the flatpickr time picker (`picker_format: 'H:i'`, `picker_options: { time_24hr: true }`) and the display value (`format: \"HH:mm\"` using Luxon tokens), while keeping the time relative to the user's browser timezone (`relative: true`). This setup requires the Avo HQ framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/time.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :starting_at,\n  as: :time,\n  picker_format: 'H:i',\n  format: \"HH:mm\",\n  relative: true,\n  picker_options: {\n    time_24hr: true\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Avo Resource Description as String | Ruby\nDESCRIPTION: This example shows the simplest way to add a description to an Avo resource by setting the `self.description` class attribute to a static string. This description will be displayed on the Index, Show, Edit, and New views for the resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_28\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.title = :name\n  self.description = \"These are the users of the app.\"\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Picker Display with Stimulus Controller in ERB\nDESCRIPTION: This ERB template renders a color display block inside a wrapper, with a toggle link to show or hide the color value. It utilizes Rails helpers (`show_field_wrapper`, `link_to`) and Stimulus data attributes for interactivity. The color is dynamically set via inline styles, and visibility is managed through conditional classes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_11\n\nLANGUAGE: HTML/ERB\nCODE:\n```\n<%= show_field_wrapper field: @field, index: @index do %>\n  <div data-controller=\"hidden-input\">\n    <% unless @field.always_show %>\n      <%= link_to t('avo.show_content'), 'javascript:void(0);', class: 'font-bold inline-block', data: { action: 'click->hidden-input#showContent' } %>\n    <% end %>\n    <div <% unless @field.always_show %> class=\"hidden\" <% end %> data-hidden-input-target=\"content\">\n      <div style=\"background-color: <%= @field.value %>\"\n        class=\"h-6 px-1 rounded-md text-white text-sm flex items-center justify-center leading-none\"\n      >\n        <%= @field.value %>\n      </div>\n    </div>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Adding acts_as_tenant Gem Dependency (Ruby)\nDESCRIPTION: Adds the 'acts_as_tenant' gem to the application's Gemfile. This is the foundational step to incorporate the gem's multitenancy features into the application. Requires running 'bundle install' after adding the line.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/acts_as_tenant_integration.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'acts_as_tenant'\n```\n\n----------------------------------------\n\nTITLE: Allowing Optional Password Updates in Devise-backed Resources in Ruby\nDESCRIPTION: This setting makes password fields optional when updating resources that use Devise for authentication, preventing validation errors when no new password is provided. It achieves this by setting `self.devise_password_optional` to true.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_37\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.devise_password_optional = true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Field Wrapper with dash_if_blank Option - Avo (ERB)\nDESCRIPTION: This ERB snippet demonstrates using the `index_field_wrapper` helper in Avo to wrap a field for the Index view, disabling the default dash for blank values by setting `dash_if_blank: false`. It renders a Boolean check component to visually represent the field status. Dependencies include access to `field_wrapper_args` and the `Avo::Fields::Common::BooleanCheckComponent`. The main parameter is `dash_if_blank`, controlling placeholder rendering for blank fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<%= index_field_wrapper **field_wrapper_args, dash_if_blank: false do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Ejecting Avo Partial Views for Customization\nDESCRIPTION: This snippet shows how to generate Ejected views for various Avo partials like logo, header, footer, scripts, and sidebar, enabling customization of appearance and layout. Once ejected, these partials are maintained manually.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\n▶ bin/rails generate avo:eject :logo\n```\n\n----------------------------------------\n\nTITLE: Passing Extra Parameters to Markdown Preview Renderer (Ruby)\nDESCRIPTION: Shows how to include additional parameters when defining the `markdown` field using the `extra_preview_params` option. This hash of parameters is sent to the markdown preview renderer, allowing custom logic within the renderer to use context-specific data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/markdown.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :body, as: :markdown, extra_preview_params: { foo: :bar }\n```\n\n----------------------------------------\n\nTITLE: Defining a Normalize Proc in a Ruby on Rails Model\nDESCRIPTION: Demonstrates defining a `normalizes` proc within a Ruby on Rails model. This specific example normalizes the `status` attribute using a lambda. Be aware that using such procs can cause serialization issues (TypeError: no _dump_data is defined for class Proc) with Avo's 'Select All' feature when filtering on the normalized attribute in Rails versions before 7.1.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/select-all.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nnormalizes :status, with: ->(status) { status }\n```\n\n----------------------------------------\n\nTITLE: Configuring AgingOrder Resource in Avo Admin Framework using Ruby\nDESCRIPTION: Sets up the AgingOrderResource class inheriting from Avo::BaseResource to define the resource fields and their types displayed in the admin interface. It includes various text and boolean fields, date-time formatting with Chennai timezone, and applies the GracePeriod filter to the resource. This enables Avo to handle REST API backed data via the provided model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rest-api-integration.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass AgingOrderResource < Avo::BaseResource\n  self.title = :id\n  self.includes = []\n\n  field :id, as: :text\n  field :folio_number, as: :text\n  field :order_submitted_at, as: :date_time, timezone: 'Chennai', format: '%B %d, %Y %H:%M %Z'\n  field :amc_name, as: :text\n  field :scheme, as: :text\n  field :primary_investor_id, as: :text\n  field :order_type, as: :text\n  field :systematic, as: :boolean\n  field :order_reference, as: :text\n  field :amount, as: :text\n  field :units, as: :text\n  field :age, as: :text\n\n  filter GracePeriod\nend\n```\n\n----------------------------------------\n\nTITLE: Model Attribute Setters for Handling Permitted Params in Rails\nDESCRIPTION: This Ruby code shows how to define setter methods in the model to handle incoming parameters. For example, 'fish_type=' assigns the value to the 'type' attribute, and other setters can process or transform nested data like 'properties' or 'information' hashes, supporting custom behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resource-tools.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Fish < ApplicationRecord\n  self.inheritance_column = nil # required in order to use the type DB attribute\n\n  def fish_type=(value)\n    self.type = value\n  end\n\n  def properties=(value)\n    # properties should be an array\n    puts [\"properties in the Fish model->\", value].inspect\n  end\n\n  def information=(value)\n    # properties should be a hash\n    puts [\"information in the Fish model->\", value].inspect\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Avo Action Structure\nDESCRIPTION: This code snippet shows the basic structure of a generated Avo action file.  It defines an action class inheriting from `Avo::BaseAction`. The `handle` method is where the action's logic is implemented to process selected records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/generate.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  self.name = \"Toggle Inactive\"\n  # self.visible = -> do\n  #   true\n  # end\n\n  # def fields\n  #   # Add Action fields here\n  # end\n\n  def handle(query:, fields:, current_user:, resource:, **args)\n    query.each do |record|\n      # Do something with your records.\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Resource Parent Controller | Ruby\nDESCRIPTION: This snippet shows how to set the `resource_parent_controller` configuration option in the `config/initializers/avo.rb` file. This setting defines the default parent class for controllers and resources generated by Avo when the `--parent-controller` option is not used.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  # ...\n  config.resource_parent_controller = \"Avo::BaseResourcesController\" # \"Avo::ResourcesController\" is default value\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Reordering authorization policy method\nDESCRIPTION: This example shows how to define a 'reorder?' method within an authorization policy class to control whether a user is permitted to perform reordering actions. You can use 'edit?' or implement custom permission logic based on user capabilities.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/records-reordering.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CourseLinkPolicy < ApplicationPolicy\n  def reorder? = edit?\n\n  # or a custom permission\n  def reorder?\n    user.can_reorder_items?\n  end\n\n  # other policy methods\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Link Omitting Path Keyword Avo Menu Ruby\nDESCRIPTION: Shows that the `path` keyword can be omitted when using `link_to` in Avo menus, making the syntax similar to standard Rails `link_to` helpers. It provides an example using a Rails route helper like `main_app.root_path`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.main_menu = -> {\n  # These two are equivalent\n  link_to \"Home\", path: main_app.root_path\n  link_to \"Home\", main_app.root_path\n}\n```\n\n----------------------------------------\n\nTITLE: Applying custom index query scope for ordering\nDESCRIPTION: This snippet customizes the database query in the index view to apply an ascending order based on 'position'. It uses the 'index_query' lambda to alter queries within Avo, preventing global scope changes and enabling controlled ordering behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/records-reordering.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  self.index_query = -> {\n    query.order(position: :asc)\n  }\n  self.ordering = {\n    display_inline: true,\n    visible_on: :index,\n    actions: {\n      higher: -> { record.move_higher },\n      lower: -> { record.move_lower },\n      to_top: -> { record.move_to_top },\n      to_bottom: -> { record.move_to_bottom }\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Rails Model Without Avo Resource - Bash\nDESCRIPTION: Creates a Rails model named 'car' with attributes 'make' and 'kms' but skips generation of the corresponding Avo resource files by including the '--skip-avo-resource' flag. This is useful when an Avo admin interface is not desired for this model. The command depends on Rails CLI and the Avo generator recognizing the flag.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate model car make:string kms:integer --skip-avo-resource\n```\n\n----------------------------------------\n\nTITLE: Implementing Stimulus Controller for Course Resource\nDESCRIPTION: This is a Stimulus controller (`course_resource_controller.js`) that manages the dynamic behavior of country and city selection in the course resource form. The controller uses targets `countryFieldInput`, `cityFieldInput`, and `citySelectWrapper` to interact with the form elements. It handles actions like fetching city data based on the selected country (`onCountryChange`) and displaying a loading indicator. It connects when the view is in edit or new modes, and it fetches and populates the city options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\";\n\nconst LOADER_CLASSES = \"absolute bg-gray-100 opacity-10 w-full h-full\";\n\nexport default class extends Controller {\n  static targets = [\"countryFieldInput\", \"cityFieldInput\", \"citySelectWrapper\"];\n\n  static values = {\n    view: String,\n  };\n\n  // Te fields initial value\n  static initialValue;\n\n  get placeholder() {\n    return this.cityFieldInputTarget.ariaPlaceholder;\n  }\n\n  set loading(isLoading) {\n    if (isLoading) {\n      // create a loader overlay\n      const loadingDiv = document.createElement(\"div\");\n      loadingDiv.className = LOADER_CLASSES;\n      loadingDiv.dataset.target = \"city-loader\";\n\n      // add the loader overlay\n      this.citySelectWrapperTarget.prepend(loadingDiv);\n      this.citySelectWrapperTarget.classList.add(\"opacity-50\");\n    } else {\n      // remove the loader overlay\n      this.citySelectWrapperTarget\n        .querySelector('[data-target=\"city-loader\"]')\n        .remove();\n      this.citySelectWrapperTarget.classList.remove(\"opacity-50\");\n    }\n  }\n\n  async connect() {\n    // Add the controller functionality only on forms\n    if ([\"edit\", \"new\"].includes(this.viewValue)) {\n      this.captureTheInitialValue();\n\n      // Trigger the change on load\n      await this.onCountryChange();\n    }\n  }\n\n  // Read the country select.\n  // If there's any value selected show the cities and prefill them.\n  async onCountryChange() {\n    if (this.hasCountryFieldInputTarget && this.countryFieldInputTarget) {\n      // Get the country\n      const country = this.countryFieldInputTarget.value;\n      // Dynamically fetch the cities for this country\n      const cities = await this.fetchCitiesForCountry(country);\n\n      // Clear the select of options\n      Object.keys(this.cityFieldInputTarget.options).forEach(() => {\n        this.cityFieldInputTarget.options.remove(0);\n      });\n\n      // Add blank option\n      this.cityFieldInputTarget.add(new Option(this.placeholder));\n\n      // Add the new cities\n      cities.forEach((city) => {\n        this.cityFieldInputTarget.add(new Option(city, city));\n      });\n\n      // Check if the initial value is present in the cities array and select it.\n      // If not, select the first item\n      const currentOptions = Array.from(this.cityFieldInputTarget.options).map(\n        (item) => item.value\n      );\n      if (currentOptions.includes(this.initialValue)) {\n        this.cityFieldInputTarget.value = this.initialValue;\n      } else {\n        // Select the first item\n        this.cityFieldInputTarget.value =\n          this.cityFieldInputTarget.options[0].value;\n      }\n    }\n  }\n\n  // Private\n\n  captureTheInitialValue() {\n    this.initialValue = this.cityFieldInputTarget.value;\n  }\n\n  async fetchCitiesForCountry(country) {\n    if (!country) {\n      return [];\n    }\n\n    this.loading = true;\n\n    const response = await fetch(\n      `${window.Avo.configuration.root_path}/resources/courses/cities?country=${country}`\n    );\n    const data = await response.json();\n\n    this.loading = false;\n\n    return data;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Dashboard Link Label Avo Menu Ruby\nDESCRIPTION: Explains how to change the default label displayed for a dashboard link in the Avo menu. It shows using the `label` option to provide a custom string, such as changing the label for `:dashy` to \"Dashy Dashboard\".\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ndashboard :dashy, label: \"Dashy Dashboard\"\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Search Results Count for an Avo Resource using Lambda\nDESCRIPTION: Dynamically sets the number of search results for a specific Avo resource (`Avo::Resources::User`) using a lambda function. The `results_count` key within the `self.search` hash is assigned a lambda that can evaluate conditions (e.g., `user.admin?`) to return different result counts based on the context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.search = {\n    results_count: -> { user.admin? ? 30 : 10 }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Attachment Concerns for Policies to Map Permissions - Ruby\nDESCRIPTION: This snippet defines the `attachment_concerns` method inside a model-specific Pundit policy in Ruby. The method returns a hash mapping attachments (e.g., `logo`) to another hash specifying permitted actions (`upload`, `delete`, `download`) and their associated boolean authorization logic (delegated here to the `update?` method). This structure works with the dynamic `method_missing` implementation to enable automatic resolution of attachment permissions. It must be implemented per policy to represent allowed actions and requires the existence of the referenced boolean methods or logic.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/attachment-policy-extension-for-pundit.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef attachment_concerns\n  {\n    logo: {\n      upload: update?,\n      delete: update?,\n      download: update?\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Width in Avo\nDESCRIPTION: Control the width of the content container by enabling or disabling full-width display for index views or all views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.full_width_index_view = false\n  config.full_width_container = false\nend\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Reloadable Feature with Block (Ruby)\nDESCRIPTION: Shows how to use a lambda block (`-> { ... }`) with the `reloadable` option to dynamically control the visibility of the reload icon based on specific conditions. The block executes within the Avo ExecutionContext, providing access to context methods like `current_user`. In this example, the reload icon appears only if the `current_user` is an admin (`current_user.is_admin?` returns true).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/reloadable.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :reviews, as: :{{ $frontmatter.field_type }},\n  reloadable: -> {\n    current_user.is_admin?\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Routes for Custom Tools Integration with Avo\nDESCRIPTION: Modifies the application's routes to integrate custom tools within Avo's engine, ensuring consistent URL generation and account awareness. The first snippet defines routes under a scope; the second moves custom tool routes into the Avo engine routes block, enabling proper handling of account IDs in URLs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/multitenancy.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nRails.application.routes.draw do\n  scope :avo do\n    get \"custom_page\", to: \"avo/tools#custom_page\"\n  end\n\n  devise_for :users\n\n  # Your routes\n\n  authenticate :user, -> user { user.admin? } do\n    mount Avo::Engine => Avo.configuration.root_path\n  end\nend\n\n# config/routes.rb\nRails.application.routes.draw do\n  devise_for :users\n\n  # Your routes\n\n  authenticate :user, -> user { user.admin? } do\n    mount Avo::Engine => Avo.configuration.root_path\n  end\nend\n\n# Move Avo custom tools routes to Avo engine\nif defined? ::Avo\n  Avo::Engine.routes.draw do\n    # make sure you don't add the `avo/` prefix to the controller below\n    get 'custom_page', to: \"tools#custom_page\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Static Select Options for Avo Filters in Ruby\nDESCRIPTION: Demonstrates how to customize static options for select-type filters using arrays or hashes in Ruby. Arrays use elements as both label and value, whereas hashes define label-value pairs. The invert method is shown for swapping keys and values in hashes. These options directly populate select dropdowns in filters without relying on external endpoints. The snippets target use inside dynamic_filter method calls for Avo filters.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :version,\n  type: :select,\n  options: [\"Label 1\", \"Label 2\"]\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :version,\n  type: :select,\n  options: {\n    value_1: \"Label 1\",\n    value_2: \"Label 2\"\n  }.invert\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :version,\n  type: :select,\n  options: {\n    \"Label 1\" => :value_1,\n    \"Label 2\" => :value_2\n  }\n```\n\n----------------------------------------\n\nTITLE: Integrating Solid Cache with Rails\nDESCRIPTION: This section guides how to set up Solid Cache with a Rails application, including adding the gem, installing migrations, and configuring the environment to use ':solid_cache_store'. It streamlines cache management and enhances performance.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cache.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\ngem \"solid_cache\"\n\n# Then run:\n$ bundle\n\n# Or install directly:\n$ gem install solid_cache\n\n# Add migration:\n$ bin/rails solid_cache:install:migrations\n\n# Run migration:\n$ bin/rails db:migrate\n\n# Configure environment (example for production):\n# config/environments/production.rb\nconfig.cache_store = :solid_cache_store\n```\n\n----------------------------------------\n\nTITLE: Displaying User Activity in User Resource\nDESCRIPTION: Add a field to the User resource to display all activities authored by that user.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :email, as: :text, link_to_record: true\n    field :products, as: :has_many\n    field :avo_authored, as: :has_many, name: \"Activity\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring `marshalling_format_version` in Rails (Ruby)\nDESCRIPTION: Configuration setting within `config/application.rb` to resolve serialization issues caused by `normalizes` procs in Rails applications prior to version 7.1. Setting `config.active_record.marshalling_format_version` to 7.1 or higher enables proper serialization of procs, preventing errors with Avo's 'Select All' feature.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/select-all.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\n\nconfig.active_record.marshalling_format_version = 7.1\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource Tool View Partial with ERB in Avo\nDESCRIPTION: Provides an ERB partial template to customize the UI of the custom resource tool named \"Post info\" within Avo. The template uses Avo's PanelComponent to wrap tool content into a styled panel supporting tool-specific body and tools sections. It renders a dummy link and displays static instructions. The partial exposes useful variables like the tool instance, resource, model, form object, params, current context, and user. Requires the Avo Rails engine and related helpers to render correctly. It serves as a scaffold to be expanded for custom tool views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-tools.md#_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new title: \"Post info\" do |c| %>\n    <% c.with_tools do %>\n      <%= a_link('/avo', icon: 'heroicons/solid/academic-cap', style: :primary) do %>\n        Dummy link\n      <% end %>\n    <% end %>\n\n    <% c.with_body do %>\n      <div class=\"flex flex-col p-4 min-h-24\">\n        <div class=\"space-y-4\">\n          <h3>🪧 This partial is waiting to be updated</h3>\n\n          <p>\n            You can edit this file here <code class=\"p-1 rounded bg-gray-500 text-white text-sm\">app/views/avo/resource_tools/post_info.html.erb</code>.\n          </p>\n\n          <p>\n            The resource tool configuration file should be here <code class=\"p-1 rounded bg-gray-500 text-white text-sm\">app/avo/resource_tools/post_info.rb</code>.\n          </p>\n\n          <%\n            # In this partial, you have access to the following variables:\n            # tool\n            # @resource\n            # @resource.model\n            # form (on create & edit pages. please check for presence first)\n            # params\n            # Avo::Current.context\n            # current_user\n          %>\n        </div>\n      </div>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text to Polymorphic Belongs To Fields in Avo (Ruby)\nDESCRIPTION: Demonstrates using the `polymorphic_help` and `help` options within a polymorphic `belongs_to` field definition in an Avo resource. `polymorphic_help` provides guidance for the type selection dropdown, while `help` adds context to the record selection dropdown.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/belongs_to.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.title = :id\n\n  def fields\n    field :id, as: :id\n    field :body, as: :textarea\n    field :excerpt, as: :text, show_on: :index do\n      ActionView::Base.full_sanitizer.sanitize(record.body).truncate 60\n    rescue\n      \"\"\n    end\n\n    field :reviewable,\n      as: :belongs_to,\n      polymorphic_as: :reviewable,\n      types: [::Post, ::Project, ::Team],\n      polymorphic_help: \"Choose the type of record to review\",\n      help: \"Choose the record you need.\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Field Editor Options in Avo - Ruby\nDESCRIPTION: Demonstrates usage examples of configuring the Avo markdown field editor with options to disable attachments from the media library and file uploads. These configurations are boolean flags passed into the field declaration, controlling the visibility of attachment UI elements in the editor.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/markdown.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :markdown, media_library: false\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :markdown, file_uploads: false\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :markdown, extra_preview_params: { foo: :bar }\n```\n\n----------------------------------------\n\nTITLE: Defining HasMany Association (Ruby)\nDESCRIPTION: This snippet demonstrates the basic usage of the `field` method to define a `HasMany` association in a Ruby-based Avo configuration.  It specifies the associated model (`projects`) and designates it as a `has_many` field.  The result is a panel showing related records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/has_many.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :projects, as: :has_many\n```\n\n----------------------------------------\n\nTITLE: Using All Helper Methods Avo Menu Ruby\nDESCRIPTION: Shows a combined example demonstrating the use of `all_dashboards`, `all_resources`, and `all_tools` helpers within different groups inside a section. These helpers automatically include all registered items of that type in the menu.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"App\", icon: \"heroicons/outline/beaker\" do\n  group \"Dashboards\", icon: \"dashboards\" do\n    all_dashboards\n  end\n\n  group \"Resources\", icon: \"resources\" do\n    all_resources\n  end\n\n  group \"All tools\", icon: \"tools\" do\n    all_tools\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting a Callable Confirmation Message for Avo Action in Ruby\nDESCRIPTION: Defines an Avo action with a callable `self.message` attribute as a lambda, enabling dynamic confirmation message generation based on the current context, including access to variables like record, current_user, and params. This feature requires Avo version 2.21 or higher and enables more flexible UX by customizing messages per record or user.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass ReleaseFish < Avo::BaseAction\n  self.message = -> {\n    # you have access to:\n    # - params\n    # - current_user\n    # - context\n    # - view_context\n    # - request\n    # - resource\n    # - record\n    \"Are you sure you want to release the #{record.name}?\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Searchable Belongs To Fields in Ruby\nDESCRIPTION: Shows how to implement a searchable belongs_to field that provides better user experience when dealing with many records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations/belongs_to.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentResource < Avo::BaseResource\n  self.title = :id\n\n  field :id, as: :id\n  field :body, as: :textarea\n\n  field :user, as: :belongs_to, searchable: true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Column Types Mapping in Ruby\nDESCRIPTION: Shows how to override database column type mappings to field types globally in the Avo configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-discovery.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # ...\n\n  config.column_types_mapping = {\n    jsonb: { field: :code, language: 'json' },\n    decimal: { field: :number, decimals: 2 }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding 'cache_hash' Method to Include Associations\nDESCRIPTION: This snippet shows how to customize cache key computation in Avo resources by overriding the 'cache_hash' method to include associated records like 'post'. This allows cache invalidation to consider related data, improving cache accuracy.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cache.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    # your fields\n  end\n\n  def cache_hash(parent_record)\n    # record.post will now be taken under consideration\n    result = [record, file_hash, record.post]\n\n    if parent_record.present?\n      result << parent_record\n    end\n\n    result\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Divider Visibility in Ruby\nDESCRIPTION: Example of controlling divider visibility using a lambda function that gives access to context variables to determine if a divider should be displayed in the dashboard.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ndivider label: \"Custom partials\", visible: -> {\n  # You have access to:\n  # context\n  # params\n  # parent (the current dashboard or resource)\n  # dashboard (will be nil when parent is resource)\n  # resource (will be nil when parent is dashboard)\n  true\n}\n```\n\n----------------------------------------\n\nTITLE: Keeping Filters Panel Open in Avo Resource\nDESCRIPTION: This snippet shows how to keep the filters panel open when changing values in an Avo resource. The `keep_filters_panel_open` resource option is set to `true`. This is useful when the user needs to modify multiple filters without having the panel collapse after each change.  It also demonstrates using fields and filters inside the resource configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Course < Avo::BaseResource\n  self.keep_filters_panel_open = true\n\n  def fields\n    field :id, as: :id\n    field :name, as: :text\n  end\n\n  def filters\n    filter Avo::Filters::CourseCountryFilter\n    filter Avo::Filters::CourseCityFilter\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Current User Method in Avo with Ruby\nDESCRIPTION: This snippet configures Avo to correctly identify the currently authenticated user by specifying a custom method. It uses the Rails 8 thread-safe global `Current.user` as the source for the current user, ensuring Avo can fetch the authenticated user consistently for authorization and context purposes. The snippet is placed in the Avo initializer file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rails-authentication-scaffold.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # other pieces of configuration\n\n  # tell Avo how to find the current authenticated user.\n  config.current_user_method do\n    Current.user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Organizing actions with dividers in Avo (Ruby)\nDESCRIPTION: Demonstrates how to insert visual separators between groups of actions using the `divider` method, optionally with labels for clarity. Improves layout and usability within the actions dropdown menu.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/registration.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  def actions\n    # User status actions\n    action Avo::Actions::ActivateUser\n    action Avo::Actions::DeactivateUser\n\n    divider\n\n    # Communication actions\n    action Avo::Actions::SendWelcomeEmail\n    action Avo::Actions::SendPasswordReset\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Boolean Value (Configuration)\nDESCRIPTION: Specifies the default state or value for a boolean configuration option. When the option is not explicitly set by the user, it will automatically assume this value. No external dependencies are required for defining this static default.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/default_boolean_false.md#_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Controlling Card Visibility in Ruby\nDESCRIPTION: This code snippet demonstrates how to control the visibility of a card in Avo using the `visible` option.  The `visible` option can be set to a boolean value or a block that returns a boolean value. The block has access to the `context`, `params`, `parent`, `dashboard`, `resource` and `current card` objects.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::UsersCount < Avo::Cards::MetricCard\n  self.id = \"users_metric\"\n  self.label = \"Users count\"\n  self.visible = -> do\n    # You have access to:\n    # context\n    # params\n    # parent (the current dashboard or resource)\n    # dashboard (will be nil when parent is resource)\n    # resource (will be nil when parent is dashboard)\n    # current card\n    true\n  end\n\n  def query\n    result User.count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using navigate_to_action for Multi-step Actions\nDESCRIPTION: Shows how to create a multi-step process by redirecting to another action and passing arguments between actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::City::PreUpdate < Avo::BaseAction\n  self.name = \"Update\"\n\n  def fields\n    field :name, as: :boolean\n    field :population, as: :boolean\n  end\n\n  def handle(query:, fields:, **args)\n    navigate_to_action Avo::Actions::City::Update,\n      arguments: {\n        cities: query.map(&:id),\n        render_name: fields[:name],\n        render_population: fields[:population]\n      }\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::City::Update < Avo::BaseAction\n  self.name = \"Update\"\n  self.visible = -> { false }\n\n  def fields\n    field :name, as: :text if arguments[:render_name]\n    field :population, as: :number if arguments[:render_population]\n  end\n\n  def handle(fields:, **args)\n    City.find(arguments[:cities]).each do |city|\n      city.update! fields\n    end\n\n    succeed \"City updated!\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Options for Select - Ruby\nDESCRIPTION: This code snippet shows how to compute the options dynamically for a `select` field in Avo, written in Ruby. It uses a lambda expression assigned to the `options` parameter, where it can access the model, resource, view, and field. The lambda uses the model to fetch types from a database and formats them into the required array format.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/select.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project_resource.rb\nclass ProjectResource < Avo::BaseResource\n  field :type,\n    as: :select,\n    options: ->(model:, resource:, view:, field:) do\n      model.get_types_from_the_database.map { |type| [type.name, type.id] }\n    end,\n    placeholder: \\'Choose the type of the container.\\'\n```\n\n----------------------------------------\n\nTITLE: Configuring a Standalone Avo Action Manually (Ruby)\nDESCRIPTION: Illustrates how to make an existing Avo action standalone by setting the class attribute `self.standalone = true` within the action's Ruby class definition. This allows the action to be run without selecting specific records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/generator.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/export_users.rb\n\nclass Avo::Actions::ExportUsers < Avo::BaseAction\n  self.name = \"Export Users\"\n  self.standalone = true\n\n  # ... rest of the action code\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Initial Breadcrumbs in Avo\nDESCRIPTION: Configure custom initial breadcrumbs to replace the default 'Home' item with custom text and paths.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.set_initial_breadcrumbs do\n    add_breadcrumb \"Casa\", root_path\n    add_breadcrumb \"Something else\", something_other_path\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Fully Customizing a Text Field in Avo (Ruby)\nDESCRIPTION: This advanced Ruby snippet shows how to apply multiple customizations to a text field in Avo, including label override, required and readonly attributes, HTML rendering, custom placeholder, and output formatting using a lambda. All options are provided inline with the field definition, and the format_using lambda processes the value before display. Developers must ensure compatibility with Avo version in use and that the field's custom formatting logic suits their data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/text.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :title, # The database field ID\n  as: :text, # The field type\n  name: 'Post title', # The label you want displayed\n  required: true, # Display it as required\n  readonly: true, # Display it disabled\n  as_html: true # Should the output be parsed as html\n  placeholder: 'My shiny new post', # Update the placeholder text\n  format_using: -> { value.truncate 3 } # Format the output\n```\n\n----------------------------------------\n\nTITLE: Using reload in Action Response\nDESCRIPTION: Shows how to reload the current page after an action completes using the reload method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::ToggleActive < Avo::BaseAction\n  def handle(models:, **args)\n    models.each do |model|\n      if model.active?\n        model.update active: false\n      else\n        model.update active: true\n      end\n    end\n\n    succeed \"Toggled\"\n    reload\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using view_context in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates the use of `view_context`. It's an instance of `ActionView::Rendering` used to access methods and variables available in partials. The example shows how to generate a link using `link_to` method.  It depends on the Rails framework and the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-current.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nview_context.link_to \"Avo\", \"https://avohq.io\"\n```\n\n----------------------------------------\n\nTITLE: Control Avo Action Turbo Behavior (Ruby)\nDESCRIPTION: Toggles Turbo Drive integration for the action's execution. Setting `self.turbo = false` prevents Turbo from intercepting the action request, useful when traditional form submission behavior is needed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/customization.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  self.turbo = false\nend\n```\n\n----------------------------------------\n\nTITLE: Kamal Deploy Configuration for Secrets\nDESCRIPTION: Details the configuration required in Kamal's `deploy.yml` to include the `BUNDLE_PACKAGER__DEV` secret during the build process, allowing it to be used securely.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Configure builder setup.\n\nbuilder:\n  arch: amd64\n  secrets:\n    - BUNDLE_PACKAGER__DEV\n```\n\n----------------------------------------\n\nTITLE: Configuring Countless Pagination in Avo\nDESCRIPTION: This code snippet demonstrates how to configure endless (countless) pagination in an Avo resource.  It sets the `pagination` option to a lambda that returns a hash specifying `type: :countless` and an empty size array. This configuration removes the pagination controls.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nself.pagination = -> do\n  {\n    type: :countless,\n    size: []\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Avo Action in a Namespace\nDESCRIPTION: This command generates a new Avo action within a namespace. This helps organize actions into logical groups.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/generate.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Generate an action in a namespace\nbin/rails generate avo:action admin/approve_user\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Card Visibility in Ruby\nDESCRIPTION: Example of controlling card visibility using a lambda function that gives access to context variables like current_user, params, and parent objects to determine if a card should be displayed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::UsersCount < Avo::Cards::MetricCard\n  self.id = \"users_metric\"\n  self.label = \"Users count\"\n  self.visible = -> do\n    # You have access to:\n    # context\n    # params\n    # parent (the current dashboard or resource)\n    # dashboard (will be nil when parent is resource)\n    # resource (will be nil when parent is dashboard)\n    # current card\n    true\n  end\n\n  def query\n    result User.count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Ejecting Field Components with Rails Generator --field-components Option - Ruby on Rails - Bash\nDESCRIPTION: This snippet explains how to eject one or more field-related components (e.g., text field UI components) from Avo using the Rails generator and --field-components flag. The default command without --scope extracts all relevant components (edit, index, show) for project-wide overrides. Dependencies include Rails and Avo; the generated Ruby and ERB files become editable in your app/components/avo/fields directory.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/eject-views.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrails g avo:eject --field-components text\n```\n\nLANGUAGE: bash\nCODE:\n```\n      create  app/components/avo/fields/text_field\n      create  app/components/avo/fields/text_field/edit_component.html.erb\n      create  app/components/avo/fields/text_field/edit_component.rb\n      create  app/components/avo/fields/text_field/index_component.html.erb\n      create  app/components/avo/fields/text_field/index_component.rb\n      create  app/components/avo/fields/text_field/show_component.html.erb\n      create  app/components/avo/fields/text_field/show_component.rb\n```\n\n----------------------------------------\n\nTITLE: Mounting Avo under Scope in Rails routes.rb Ruby\nDESCRIPTION: This code illustrates how to place the Avo routes under a Rails scope, such as a `:locale` scope, within your application's `config/routes.rb`. Wrapping `mount_avo` inside a `scope` block makes Avo's URLs inherit the scope's parameters. Note that configuring Avo's `default_url_options` may be necessary for link generation within Avo to include the scope.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/routing.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/routes.rb\n\nRails.application.routes.draw do\n  scope \":locale\" do\n    mount_avo\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Avo View Using String Comparator\nDESCRIPTION: This code snippet demonstrates how to check the current Avo view by comparing the `view` object directly with strings such as `\"show\"`, `\"index\"`, `\"edit\"`, and `\"new\"`. The `view` object is an instance of the `Avo::ViewInquirer` class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/views.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nif view == \"show\"\n  # Code for the \"show\" view\nelsif view == \"index\"\n  # Code for the \"index\" view\nelsif view == \"edit\"\n  # Code for the \"edit\" view\nelsif view == \"new\"\n  # Code for the \"new\" view\nend\n```\n\n----------------------------------------\n\nTITLE: Hiding Media Library Menu Item\nDESCRIPTION: Configuration to hide the Media Library menu item from the sidebar by setting the visible option to false.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/media-library.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nif defined?(Avo::MediaLibrary)\n  Avo::MediaLibrary.configure do |config|\n    config.visible = false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Cover Photo Source Configuration (Ruby)\nDESCRIPTION: This code configures the cover photo's source. It uses a block (lambda) to determine the image based on the current view.  If `view.index?` is true, it uses `DEFAULT_IMAGE`; otherwise, it calls `record.cover_photo`. The code provides different images for the index and record views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cover-and-profile-photos.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nself.cover_photo = {\n  source: -> {\n    if view.index?\n      # We're on the index page and don't have a record to reference\n      DEFAULT_IMAGE\n    else\n      # We have a record so we can reference it's cover_photo\n      record.cover_photo\n    end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Menu Item Visibility in Avo\nDESCRIPTION: Example of using the visible option to conditionally show or hide menu items based on context, current user, or other factors. The visible option can be a boolean or a block with access to context variables.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    resource :user, visible: -> do\n      context[:something] == :something_else\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Bypassing Action Confirmation Modal in Ruby\nDESCRIPTION: Shows how to bypass the confirmation modal by setting no_confirmation to true, executing the action immediately upon triggering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/customization.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.no_confirmation = true\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache for Resource Rows on Index View\nDESCRIPTION: Turns off caching of resource rows or grid items with `config.cache_resources_on_index_view`, beneficial when fields depend on user roles or dynamic data changes. When using conditional fields, caching should be disabled.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.cache_resources_on_index_view = false\nend\n```\n\n----------------------------------------\n\nTITLE: Override after_create_path - Ruby\nDESCRIPTION: This snippet shows how to override the `after_create_path` method in a resource controller.  It defines the path to redirect to after a resource has been successfully created.  The example redirects to the users resource index page.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef after_create_path\n  \"/avo/resources/users\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Fields in Avo Resource (Ruby-Vue)\nDESCRIPTION: Demonstrates how to define nested fields within an Avo resource by specifying the 'nested' option in various ways. Dependencies include the Avo framework for Ruby on Rails and the target resource class. Key parameters are: 'nested' (can be true, a hash, or have :on and :limit options), field name, and field type (such as 'has_one' or 'has_many'). Inputs are resource field definitions, and the effect is to control the visibility and nesting behavior of associated records in various form views. Any limit applies only to 'has_many' or 'has_and_belongs_to_many' associations. Example covers full nesting, view-specific nesting, and limited nested record creation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/nested_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/book.rb\nclass Avo::Resources::Book < Avo::BaseResource\n  def fields\n    # Shortcut for full nesting\n    field :{{ $frontmatter.field_type === 'has_one' ? 'author' : 'authors' }}, as: :{{ $frontmatter.field_type }}, nested: true\n\n    # Explicit nesting on new only\n    field :{{ $frontmatter.field_type === 'has_one' ? 'author' : 'authors' }}, as: :{{ $frontmatter.field_type }}, nested: { on: :new }\n\n    # Explicit nesting on edit only\n    field :{{ $frontmatter.field_type === 'has_one' ? 'author' : 'authors' }}, as: :{{ $frontmatter.field_type }}, nested: { on: :edit }\n\n    # Explicit nesting on both new and edit\n    field :{{ $frontmatter.field_type === 'has_one' ? 'author' : 'authors' }}, as: :{{ $frontmatter.field_type }}, nested: { on: :forms }\n\n    # Limit nested creation (for has_many or has_and_belongs_to_many only)\n    field :authors,\n      as: :{{ $frontmatter.field_type }},\n      nested: { on: [:new, :edit], limit: 2 }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding POST Forms to Avo Profile Menu Links in Ruby\nDESCRIPTION: Enables profile menu items to perform POST requests by specifying method and params options on link_to, allowing actions like sign out with custom parameters. This is useful for secure operations requiring HTTP methods other than GET.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.profile_menu = -> {\n    link_to \"Sign out\", path: main_app.destroy_user_session_path, icon: \"user-circle\", method: :post, params: {custom_param: :here}\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting Objects using Avo Encryption Service with Serializer (Ruby)\nDESCRIPTION: Illustrates how to encrypt and decrypt a Ruby object (`Course::Link.first`) using the Avo::Services::EncryptionService. It specifically highlights the use of the `serializer: Marshal` option to handle object serialization/deserialization during the encryption/decryption process.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/encryption-service.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsecret_encryption = Avo::Services::EncryptionService.encrypt(message:Course::Link.first, purpose: :demo, serializer: Marshal)\n# \"1UTtkhu9BDywzz8yl8/7cBZnOoM1wnILDJbT7gP+zz8M/t1Dve4QTFQP5nfHZdYK9KvFDwkizm8DTHyNZdixDtCO/M7yNMlzL8Mry1RQ3AF0qhhTzFeqb5UqyQv/Cuq+NWvQ+GXv3gFckXaNqsFSX5yDccEpRDpyNkYT4MFxOa+8hVR4roebkNKB89lb73anBDTHsTAd37y2LFiv2YaiFguPQ/...\n\nAvo::Services::EncryptionService.decrypt(message: secret_encryption, purpose: :demo, serializer: Marshal)\n# #<Course::Link:0x00007fd28dc44c00 id: 1, link: \"http://ortiz.com/cher_mohr\", course_id: 1, created_at: Thu, 07 Dec 2023 11:05:13.779644000 UTC +00:00, updated_at: Thu, 07 Dec 2023 11:05:13.779644000 UTC +00:00, position: 1>\n```\n\n----------------------------------------\n\nTITLE: Using Range Input and JavaScript in Edit View - ERB/JavaScript\nDESCRIPTION: Implements a ranged slider input in the edit component, accompanied by JavaScript that updates the visual value dynamically as the user interacts. Requires valid @field options, proper input IDs, and may need adaptation for multiple progress bars. The JavaScript should ideally be extracted for reuse. Prerequisite: Rails, correct DOM structure.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_8\n\nLANGUAGE: erb\nCODE:\n```\n# app/components/avo/fields/progress_bar_field/edit_component.html.erb\n<%= edit_field_wrapper field: @field, index: @index, form: @form, resource: @resource, displayed_in_modal: @displayed_in_modal do %>\n  <!-- Show the progress input with the settings we passed to the field. -->\n  <% if @field.display_value %>\n    <div class=\"text-center text-sm font-semibold w-full leading-none mb-1\">\n      <!-- Add the suffix if value_suffix is set -->\n      <span class=\"js-progress-bar-value-<%= @field.id %>\"><%= @field.value %></span><%= @field.value_suffix if @field.value_suffix.present? %>\n    </div>\n  <% end %>\n  <!-- Add the range input with the settings we passed to the field -->\n  <%= @form.range_field @field.id,\n    class: 'w-full',\n    placeholder: @field.placeholder,\n    disabled: @field.readonly,\n    min: 0,\n    # add the field-specific options\n    max: @field.max,\n    step: @field.step,\n    %>\n<% end %>\n\n<script>\n// Get the input and value elements\nvar input = document.getElementById('project_progress');\n// Scope the selector to the current field. You might have more than one progress field on the page.\nvar log = document.querySelector('.js-progress-bar-value-<%= @field.id %>');\n\n// Add an event listener for when the input is updated\ninput.addEventListener('input', updateValue);\n\n// Update the value element with the value from the input\nfunction updateValue(e) {\n  log.textContent = e.target.value;\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale for Avo (After v2.11)\nDESCRIPTION: This code snippet shows how to set the default locale for Avo within the Avo configuration. Setting `config.locale = :en` in the initializer configures the default locale.  This affects how Avo handles locales for its internal requests, and needs to be set in the application initializer.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/multilingual-content.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.locale = :en # default is nil\nend\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Files Using Avo.asset_manager.add_javascript (Ruby)\nDESCRIPTION: This snippet shows how to add JavaScript files to the Avo dashboard using the AssetManager's `add_javascript` method. Similar to stylesheets, assets can be specified via direct paths or Rails engine directory paths to include custom scripts within the `<head>` section.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/asset-manager.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.asset_manager.add_javascript \"/public/magic_file.js\"\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.asset_manager.add_javascript Avo::Engine.root.join(\"app\", \"javascripts\", \"magic_file.js\")\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Resource Fields with View-Specific Blocks in Ruby\nDESCRIPTION: This snippet defines an ExampleResource class that inherits from Avo::BaseResource and includes the ResourceExtensions concern to organize resource fields by view type. It declares fields for various views like index, show, create, and edit by using blocks that are scoped to these actions. Dependencies include Avo and Ruby on Rails environment. The snippet illustrates how fields can be assigned different types and options such as :sortable and :readonly, supporting tailored data presentation and interaction per view within an Avo resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/manage-information-heavy-resources.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass ExampleResource < Avo::BaseResource\n  include ResourceExtensions\n\n  field :id, as: :id\n  field :name, as: :text\n\n  index do\n    field :some_field, as: :text\n    field :some_index_field, as: :text, sortable: true\n  end\n\n  show do\n    field :some_show_field, as: :markdown\n    field :some_field, as: :text\n  end\n\n  create do\n    field :some_create_field, as: :number\n  end\n\n  edit do\n    field :some_create_field, as: :number, readonly: true\n    field :some_field\n    field :some_editable_field, as: :text\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Actions in Ruby\nDESCRIPTION: Demonstrates how to create standalone actions that aren't tied to specific model records, useful for global operations like generating reports or running maintenance tasks.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/customization.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/global_report.rb\nclass Avo::Actions::GlobalReport < Avo::BaseAction\n  self.name = \"Generate Global Report\"\n  self.standalone = true\nend\n```\n\n----------------------------------------\n\nTITLE: Using 'stored_as' Option to Separate Latitude and Longitude Columns in Ruby\nDESCRIPTION: This snippet shows how to configure the Location field to use two separate database columns, 'latitude' and 'longitude', by setting the 'stored_as' option. This enables editing and displaying coordinates in separate fields, simplifying data management.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/location.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :coordinates, as: :location, stored_as: [:latitude, :longitude]\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Controls Placement in Avo Table View\nDESCRIPTION: Configure the placement of resource controls on the table view to appear on the left side instead of the default right side position.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.resource_controls_placement = :left\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring options with Array for Select Filter in Avo HQ\nDESCRIPTION: Defines a dynamic filter of select type with options provided as an array. When using an array, each element serves as both the option value and label in the select dropdown.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :version,\n  type: :select,\n  options: [\"Label 1\", \"Label 2\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization for Menu Item Visibility in Avo Using Ruby\nDESCRIPTION: This snippet configures authorization logic for menu items in Avo by using the `authorize` helper within a visibility lambda block. It shows how to restrict the `resource :team` menu item’s visibility based on a policy method (`index?`). The `authorize` method is called with the current user, resource class, the authorization method name, and an option not to raise exceptions. This requires an authorization setup (such as Pundit) to define policy classes and methods accordingly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.main_menu = -> {\n    resource :team, visible: -> {\n      # authorize current_user, THE_RESOURCE_MODEL, THE_POLICY_METHOD, raise_exception: false\n      authorize current_user, Team, \"index?\", raise_exception: false\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Badge Field with Custom Mappings in Ruby\nDESCRIPTION: This Ruby code snippet defines a 'stage' field as a badge type, mapping specific database values to visual badge categories such as info, success, warning, danger, and neutral. The options hash allows customization of these mappings, affecting how records are displayed on index and show views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/badge.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :stage,\n  as: :badge,\n  options: {\n    info: [:discovery, :idea],\n    success: :done,\n    warning: 'on hold',\n    danger: :cancelled,\n    neutral: :drafting\n  } # The mapping of custom values to badge values.\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Action Show Page in Avo (Ruby)\nDESCRIPTION: This code shows how to access parameters passed from a resource view to an Avo action. It demonstrates how to parse the `request.referer` to extract parameters from the URL and use them to populate fields in the action. The code assumes you have a resource view that can pass parameters in the URL when navigating to an action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/guides-and-tutorials.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Action\n  def fields\n    # Accessing the parameters passed from the parent view\n    field :some_field, as: :hidden, default: -> {\n      # Parsing the request referer to extract parameters\n      parent_params = URI.parse(request.referer).query.split(\"&\").map { |param| param.split(\"=\")}.to_h.with_indifferent_access\n      # Checking if the `hei` parameter equals `ya`\n      if parent_params[:hey] == 'ya'\n        :yes\n      else\n        :no\n      end\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Form Fields in Avo Resource with Stimulus Actions - Ruby\nDESCRIPTION: Defines a resource in Avo with fields for ID, name, country, and city. The 'country' field is configured as a select input with options and is wired to trigger a StimulusJS action on input change. The 'city' field is also a select input, set as a Stimulus target for dynamic population. Requires the Avo gem and Course model providing country/city data. Inputs correspond to field configurations for CRUD forms, outputting dynamic select tag attributes for JS interaction.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/course.rb\nclass Avo::Resources::Course < Avo::BaseResource\n  self.stimulus_controllers = \"course-resource\"\n\n  def fields\n    field :id, as: :id\n    field :name, as: :text\n    field :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h, html: {\n      edit: {\n        input: {\n          data: {\n            course_resource_target: \"countryFieldInput\", # Make the input a target\n            action: \"input->course-resource#onCountryChange\" # Add an action on change\n          }\n        }\n      }\n    }\n    field :city, as: :select, options: Course.cities.values.flatten.map { |city| [city, city] }.to_h, html: {\n      edit: {\n        input: {\n          data: {\n            course_resource_target: \"cityFieldInput\" # Make the input a target\n          }\n        }\n      }\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Standalone Avo Action Example\nDESCRIPTION: This command generates a standalone Avo action which doesn't require record selection, which is used for global operations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/generate.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Generate a standalone action\nbin/rails generate avo:action generate_monthly_report --standalone\n```\n\n----------------------------------------\n\nTITLE: Hiding Fields Based on View (Ruby)\nDESCRIPTION: This Ruby code shows how to hide a custom field on specific views using the `hide_on` method. It sets up the `ProgressBarField` class and uses `hide_on :forms` to prevent the field from appearing in the forms view. This gives more control over which fields appear in which view in the Avo admin interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Fields::ProgressBarField < Avo::Fields::BaseField\n  attr_reader :max\n  attr_reader :step\n  attr_reader :display_value\n  attr_reader :value_suffix\n\n  def initialize(name, **args, &block)\n    super(name, **args, &block)\n\n    @max = args[:max] || 100\n    @step = args[:step] || 1\n    @display_value = args[:display_value] || false\n    @value_suffix = args[:value_suffix] || nil\n\n    hide_on :forms\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting global stacked layout in Ruby\nDESCRIPTION: Configures all fields throughout the application to use the stacked layout by changing the initializer option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.field_wrapper_layout = :stacked\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying JSON as Code in Avo Admin (Ruby)\nDESCRIPTION: This snippet demonstrates how to display a JSON object, stored in a database field named `meta`, as formatted code in the Avo Admin interface. It utilizes the `:code` field type and specifies the `javascript` language for syntax highlighting. This requires the `meta` field to exist in the underlying database model. The output is displayed in a code editor within Avo Admin, making the JSON data easier to read.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/format-ruby-object-to-json.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, as: :code, language: 'javascript'\n```\n\n----------------------------------------\n\nTITLE: Defining a Resource Tool Configuration in Ruby\nDESCRIPTION: This snippet shows how to create a Ruby class extending Avo::BaseResourceTool to configure a custom resource tool named 'Post info', including setting its display name and optional partial override.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resource-tools.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PostInfo < Avo::BaseResourceTool\n  self.name = \"Post info\"\n  # self.partial = \"avo/resource_tools/post_info\"\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Has_Many Association in User Model in Ruby\nDESCRIPTION: Defines a has_many association named comments on the User model connecting a user to multiple comments. This establishes the basic relationship used later in Avo resource definitions to manage and scope the associated comments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/scopes_common.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\n  has_many :comments\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Turbo Behavior in Avo (Ruby)\nDESCRIPTION: This configures how Turbo behaves in Avo by defining configuration options inside `config.turbo`. The options are configured with a lambda that returns a hash.  This can be configured in the `avo.rb` initializer.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.turbo = -> do\n    {\n      instant_click: true\n    }\n  end\n```\n\n----------------------------------------\n\nTITLE: Avo Action - Update\nDESCRIPTION: This code defines an Avo action named `Update`. This action receives encrypted arguments from the `PreUpdate` action, decrypts them and dynamically renders fields for the user to update. It updates the user model based on the provided fields and displays a success message.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Update < Avo::BaseAction\n  self.name = \"Update\"\n  self.message = \"\"\n  self.visible = -> do\n    false\n  end\n\n  {\n    first_name: :text,\n    last_name: :text,\n    user_email: :text,\n    active: :boolean,\n    admin: :boolean\n  }.each do |field_name, field_type|\n    field field_name.to_sym, as: field_type, visible: -> (resource:) {\n      Avo::Services::EncryptionService.decrypt(\n        message: Base64.decode64(resource.params[:arguments]),\n        purpose: :action_arguments\n      ).dig(\"render_#{field_name}\".to_sym)\n    }\n  end\n\n  def handle(models:, fields:, **args)\n    non_roles_fields = fields.slice!(:admin)\n\n    models.each { |model| model.update!(non_roles_fields) }\n\n    fields.each do |field_name, field_value|\n      models.each { |model|  model.update! roles: model.roles.merge!({\"#{field_name}\": field_value}) }\n    }\n\n    succeed \"User(s) updated!\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Token as Docker Compose Build Argument\nDESCRIPTION: Shows how to pass the `BUNDLE_PACKAGER__DEV` value as a build argument when using `docker compose build`, making the token available for use in the Dockerfile.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose build --build-arg BUNDLE_PACKAGER__DEV=xxx\n```\n\n----------------------------------------\n\nTITLE: Using `friendly_id` gem with custom find method\nDESCRIPTION: Overrides the default record lookup to use `friendly_id` for prettier URLs and slug-based lookups, enhancing SEO.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserResource < Avo::BaseResource\n  self.find_record_method = ->(model_class:, id:, params:) do\n    model_class.friendly.find! id\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  extend FriendlyId\n  friendly_id :name, use: :slugged\nend\n```\n\n----------------------------------------\n\nTITLE: Configurable Field Options via Arguments - Ruby\nDESCRIPTION: Enhances ProgressBarField to accept option overrides from the field declaration. Options max, step, display_value, and value_suffix can be set via keyword arguments, falling back to defaults if not present. Usage example shows applying these options in the field declaration of a resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/fields/progress_bar_field.rb\nclass ProgressBarField < Avo::Fields::BaseField\n  attr_reader :max\n  attr_reader :step\n  attr_reader :display_value\n  attr_reader :value_suffix\n\n  def initialize(name, **args, &block)\n    super(name, **args, &block)\n\n    @max = args[:max] || 100\n    @step = args[:step] || 1\n    @display_value = args[:display_value] || false\n    @value_suffix = args[:value_suffix] || nil\n  end\nend\n\n# app/avo/resources/progress_bar_field.rb\nclass ProjectResource < Avo::BaseResource\n  self.title = :name\n\n  field :id, as: :id, link_to_resource: true\n  field :progress, as: :progress_bar, step: 10, display_value: true, value_suffix: \"%\"\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTML Renderer for Redcarpet in Ruby\nDESCRIPTION: Defines a Ruby module with a custom renderer class inheriting from Redcarpet::Render::HTML. The renderer overrides methods to generate HTML with specific CSS classes for headers, paragraphs, code blocks, inline code, and lists, facilitating styled Markdown rendering. Dependencies include the 'redcarpet' gem. This renderer is used to convert Markdown content into HTML with custom styles.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/use-markdown-in-help-attributes.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nmodule MarkdownHelpText\n  class Renderer < Redcarpet::Render::HTML\n    def header(text, level)\n      case level\n      when 1 then %(<h1 class=\"mb-4\">#{text}</h1>)\n      when 2 then %(<h2 class=\"mb-4\">#{text}</h1>)\n      else\n        %(<h#{level} class=\"mb-2\">#{text}</h#{level}>)\n      end\n    end\n\n    def paragraph(text)\n      %(<p class=\"mb-2\">#{text}</p>)\n    end\n\n    def block_code(code, language)\n      <<~HTML\n        <pre class=\"mb-2 p-1 rounded bg-gray-500 text-white text-sm\">\n        <code class=\"#{language}\">#{code.chomp}</code>\n        </pre>\n      HTML\n    end\n\n    def codespan(code)\n      %(<code class=\"mb-2 p-1 rounded bg-gray-500 text-white text-sm\">#{code}</code>)\n    end\n\n    def list(contents, list_type)\n      list_style = case list_type\n             when \"ul\" then \"list-disc\"\n             when \"ol\" then \"list-decimal\"\n             else \"list-none\"\n             end\n      %(<#{list_type} class=\"ml-8 mb-2 #{list_style}\">#{contents}</#{list_type}>)\n    end\n  end\n\n  def markdown_help(content, renderer: Renderer)\n    markdown = Redcarpet::Markdown.new(\n      renderer.new,\n      filter_html: false,\n      escape_html: false,\n      autolink: true,\n      fenced_code_blocks: true\n    ).render(content)\n\n    %(<section>#{markdown}</section>)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic EasyMDE Field Implementation in Ruby\nDESCRIPTION: Demonstrates how to create a basic EasyMDE field for a description attribute in Avo. This field converts text written in the editor into raw Markdown and stores it in the database.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/easy_mde.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :description, as: :easy_mde\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom ViewComponent Path\nDESCRIPTION: Changes the directory where Avo generates view components, useful if components are stored outside the default `app/components`. Updating `view_component_path` directs generation tools accordingly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.view_component_path = \"app/frontend/components\"\nend\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to Show View Content Placeholder - Ruby\nDESCRIPTION: Shows the basic structural placeholder for adding HTML attributes to the `content` element (the field's value display) in the `show` view using the object notation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/html.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  show: {\n    content: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom View Component Path in Avo\nDESCRIPTION: Configure Avo to generate field view components in a custom directory instead of the default app/components location.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.view_component_path = \"app/frontend/components\"\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Avo resource for roles using Rails generator\nDESCRIPTION: Create an Avo resource for the Role model to enable management of roles through the Avo admin interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/rolify-integration.md#_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nbin/rails generate avo:resource role\n```\n\n----------------------------------------\n\nTITLE: Default View Components for Custom Field - ERB\nDESCRIPTION: Provides the generated ERB templates for the edit, index, and show components of the ProgressBarField. These default to simple text field rendering and value display. They depend on instance variables @field, @index, @form, and partial helpers (edit_field_wrapper, index_field_wrapper, show_field_wrapper).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n# app/components/avo/fields/progress_bar_field/edit_component.html.erb\n<%= edit_field_wrapper field: @field, index: @index, form: @form, resource: @resource, displayed_in_modal: @displayed_in_modal do %>\n  <%= @form.text_field @field.id,\n    class: helpers.input_classes('w-full', has_error: @field.model_errors.include?(@field.id)),\n    placeholder: @field.placeholder,\n    disabled: @field.readonly %>\n<% end %>\n\n# app/components/avo/fields/progress_bar_field/index_component.html.erb\n<%= index_field_wrapper field: @field do %>\n  <%= @field.value %>\n<% end %>\n\n# app/components/avo/fields/progress_bar_field/show_component.html.erb\n<%= show_field_wrapper field: @field, index: @index do %>\n  <%= @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Implementing the ExecutionContext Class in Avo (Ruby)\nDESCRIPTION: Provides the source code for the `Avo::ExecutionContext` class. It initializes with a target block and various context objects (like `context`, `params`, `current_user`), dynamically adds accessors for custom arguments, sets defaults using `Avo::Current`, delegates authorization, and includes a `handle` method to execute the target block within the instance's context if it's callable.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/execution-context.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Avo\n  class ExecutionContext\n\n    attr_accessor :target, :context, :params, :view_context, :current_user, :request\n\n    def initialize(**args)\n      # If target don't respond to call, handle will return target\n      # In that case we don't need to initialize the others attr_accessors\n      return unless (@target = args[:target]).respond_to? :call\n\n      args.except(:target).each do |key,value|\n        singleton_class.class_eval { attr_accessor \"#{key}\" }\n        instance_variable_set(\"@#{key}\", value)\n      end\n\n      # Set defaults on not initialized accessors\n      @context      ||= Avo::Current.context\n      @params       ||= Avo::Current.params\n      @view_context ||= Avo::Current.view_context\n      @current_user ||= Avo::Current.current_user\n      @request      ||= Avo::Current.request\n    end\n\n    delegate :authorize, to: Avo::Services::AuthorizationService\n\n    # Return target if target is not callable, otherwise, execute target on this instance context\n    def handle\n      target.respond_to?(:call) ? instance_exec(&target) : target\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Asset Middleware for Avo Plugins\nDESCRIPTION: Shows how to create a middleware that serves static asset files from the plugin's directory. This allows the plugin to expose its JavaScript and CSS files to the parent Rails application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/plugins.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Avo\n  module FeedView\n    class Engine < ::Rails::Engine\n      isolate_namespace Avo::FeedView\n\n      initializer \"avo-feed-view.init\" do\n        ActiveSupport.on_load(:avo_boot) do\n          Avo.plugin_manager.register :feed_view\n        end\n      end\n\n      config.app_middleware.use(\n        Rack::Static,\n        urls: [\"/feed-view-assets\"], # 👈 This is the path where the files will be served\n        root: root.join(\"app\", \"assets\", \"builds\") # 👈 This is the path where the files are located\n      )\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Dashboards to Avo Menu\nDESCRIPTION: Examples of referencing dashboards in the Avo menu using the dashboard helper. Dashboards can be referenced by ID or name and can have custom labels.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndashboard :dashy\ndashboard \"Sales\"\ndashboard :dashy, label: \"Dashy Dashboard\"\n```\n\n----------------------------------------\n\nTITLE: Configuring options with Inverted Hash for Select Filter in Avo HQ\nDESCRIPTION: Defines a dynamic filter with options provided as an inverted hash, where the original keys become values and values become keys. This format makes the hash's values appear as labels in the dropdown.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :version,\n  type: :select,\n  options: {\n    value_1: \"Label 1\",\n    value_2: \"Label 2\"\n  }.invert\n```\n\n----------------------------------------\n\nTITLE: Ejecting and Customizing Avo Profile Menu Extra Partial with Bash and ERB\nDESCRIPTION: Shows how to eject the _profile_menu_extra.html.erb partial using a Rails generator command to enable adding custom content or forms within the profile menu. The example ERB snippet illustrates rendering a profile item component with label, path, and icon, facilitating advanced menu customizations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:eject --partial :profile_menu_extra\n```\n\n----------------------------------------\n\nTITLE: Specifying Action Icons in Avo (Ruby)\nDESCRIPTION: This snippet illustrates how to specify an icon for an action in the dropdown menu using the `icon` option. Avo supports Heroicons by default. Requires Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/registration.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def actions\n    action Avo::Actions::ToggleInactive, icon: \"heroicons/outline/globe\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Parameters to Resource Link Avo Menu Ruby\nDESCRIPTION: Demonstrates how to add query parameters to a resource link in the Avo menu using the `params` option. It shows examples of providing parameters as a static hash (`{ status: \"published\" }`) and using a dynamic block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nresource :posts, params: { status: \"published\" }\nresource :users, params: -> do\n  decoded_filter = {\"Avo::Filters::IsAdmin\"=>[\"non_admins\"]}\n\n  { encoded_filters: Avo::Filters::BaseFilter.encode_filters(decoded_filter)}\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Stylesheet Assets to Avo\nDESCRIPTION: Shows how to add CSS files to be loaded by Avo. The asset manager adds the specified stylesheet to the head section of Avo's layout file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/plugins.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.asset_manager.add_stylesheet \"/avo-kanban-assets/avo_kanban\"\n```\n\n----------------------------------------\n\nTITLE: Override create_success_message - Ruby\nDESCRIPTION: This snippet shows how to override the `create_success_message` method.  This defines the success message displayed to the user upon a successful create action.  The example uses the internationalization (i18n) functionality through the `t` method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_success_message\n  \"#{@resource.name} #{t(\"avo.was_successfully_created\")}.\" \nend\n```\n\n----------------------------------------\n\nTITLE: Generating Avo DateTimeFilter (Bash)\nDESCRIPTION: Provides the command-line instruction to generate a new Avo filter specifically of type `date_time`. This command creates the necessary Ruby file structure for a custom date/time filter named 'created_at' within the Avo application directory.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrails generate avo:filter created_at --type date_time\n```\n\n----------------------------------------\n\nTITLE: Implementing React Method for Dynamic Filter Behavior in Avo\nDESCRIPTION: This snippet demonstrates how to implement the react method in an Avo filter to create dynamic filter behavior. It checks if a country filter has been applied but no city filter has been selected, then automatically selects the first available city from the selected countries.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\ndef react\n  # Check if the user selected a country\n  if applied_filters[\"Avo::Filters::CourseCountryFilter\"].present? && applied_filters[\"Avo::Filters::CourseCityFilter\"].blank?\n    # Get the selected countries, get their cities, and select the first one.\n    selected_countries = applied_filters[\"Avo::Filters::CourseCountryFilter\"]\n      .select do |name, selected|\n        selected\n      end\n\n    # Get the first city\n    cities = cities_for_countries(selected_countries.keys)\n    first_city = cities.first.first\n\n    # Return the first city selected as a Hash\n    [[first_city, true]].to_h\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: ExecutionContext Usage Example\nDESCRIPTION: This code demonstrates how to use the `Avo::ExecutionContext`. It creates a block `SOME_BLOCK` and then instantiates `Avo::ExecutionContext` with the block and a record. The `handle` method is then called to execute the block within the execution context, allowing access to the record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/execution-context.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Use it like so.\nSOME_BLOCK = -> {\n  \"#{record.first_name} #{record.last_name}\"\n}\n\nAvo::ExecutionContext.new(target: &SOME_BLOCK, record: User.first).handle\n```\n\n----------------------------------------\n\nTITLE: Configuring ID Field in AvoHQ Resource Definition - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to declare an 'id' field within an AvoHQ resource using the field declaration API. By specifying 'field :id, as: :id', it tells AvoHQ to display the primary key on the Index and Show views by default. Required dependencies include a functioning AvoHQ installation and a resource file context. Inputs involve the field name as a symbol, and the output is a configured field in the UI. Optionally, developers may set the 'link_to_record' option for extra navigation functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/id.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :id, as: :id\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text to Search Results Header\nDESCRIPTION: Demonstrates how to add instructional text to the search results header using the help attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false) },\n    help: -> { \"- search by id\" }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Mapping Field Types to Filter Types in Ruby\nDESCRIPTION: This Ruby method provides a simple mapping from field types to filter types for versions of Avo prior to 3.10.0 where filters are not configurable. Given a field type symbol, it returns the appropriate filter type symbol such as :boolean, :date, :number, :select, or :text. This function centralizes the logic for determining the filter input type dynamically based on field metadata.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ndef field_to_filter(type)\n  case type.to_sym\n  when :boolean\n    :boolean\n  when :date, :date_time, :time\n    :date\n  when :id, :number, :progress_bar\n    :number\n  when :select, :badge, :country, :status\n    :select\n  when :text, :textarea, :code, :markdown, :password, :trix\n    :text\n  else\n    :text\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic StimulusJS Controller Connect Example - JavaScript\nDESCRIPTION: Sample StimulusJS controller that logs a message when connected to a DOM element. Demonstrates creating a controller for general use within the Avo app context. Requires Hotwired Stimulus. No parameters, logs to browser console on connection. Designed for instructional and test purposes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// app/javascript/controllers/sample_controller.js\nimport { Controller } from \"@hotwired/stimulus\";\n\nexport default class extends Controller {\n  connect() {\n    console.log(\"Hey from sample controller 👋\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Initial Breadcrumbs in Avo\nDESCRIPTION: This snippet sets initial breadcrumb trail items with `set_initial_breadcrumbs`, allowing customization of the navigation path displayed in the header. It adds specific breadcrumb links to the default home path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.set_initial_breadcrumbs do\n    add_breadcrumb \"Casa\", root_path\n    add_breadcrumb \"Something else\", something_other_path\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Callable Prefix and Suffix\nDESCRIPTION: This snippet demonstrates the ability to use callable options for the `prefix` and `suffix` attributes. These blocks are executed, granting access to the execution context. This lets you dynamically determine the prefix or suffix, based on parameters or parent attributes. Requires Avo framework. The output is generated dynamically and displayed next to the metric value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = 'users_metric'\n  self.prefix = -> { params[:prefix] || parent.prefix }\n  self.suffix = -> { params[:suffix] || parent.suffix }\nend\n```\n\n----------------------------------------\n\nTITLE: Using Icons with Sections in Avo Menu\nDESCRIPTION: Examples of using different icons with sections in the Avo menu. Both local icons and Heroicons (in solid or outline variants) can be used.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"Resources\", icon: \"heroicons/outline/academic-cap\" do\n  resource :course\nend\n\nsection \"Resources\", icon: \"heroicons/solid/finger-print\" do\n  resource :course\nend\n\nsection \"Resources\", icon: \"heroicons/outline/adjustments\" do\n  resource :course\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Markdown Renderer in Avo with Multiple Parsers - Ruby\nDESCRIPTION: Defines a customizable Markdown renderer class within the Marksmith module that selects one of three markdown parsers (`commonmarker`, `kramdown`, `redcarpet`) based on configuration. The renderer converts Markdown strings into HTML output using parser-specific methods and encoding adjustments. This class allows overriding the default rendering behavior to suit different parsing requirements, expecting a UTF-8 encoded string as input and outputting HTML.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/markdown.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Marksmith\n  class Renderer\n    def initialize(body:)\n      @body = body\n    end\n\n    def render\n      if Marksmith.configuration.parser == \"commonmarker\"\n        render_commonmarker\n      elsif Marksmith.configuration.parser == \"kramdown\"\n        render_kramdown\n      else\n        render_redcarpet\n      end\n    end\n\n    def render_commonmarker\n      # commonmarker expects an utf-8 encoded string\n      body = @body.to_s.dup.force_encoding(\"utf-8\")\n      Commonmarker.to_html(body)\n    end\n\n    def render_redcarpet\n      ::Redcarpet::Markdown.new(\n        ::Redcarpet::Render::HTML,\n        tables: true,\n        lax_spacing: true,\n        fenced_code_blocks: true,\n        space_after_headers: true,\n        hard_wrap: true,\n        autolink: true,\n        strikethrough: true,\n        underline: true,\n        highlight: true,\n        quote: true,\n        with_toc_data: true\n      ).render(@body)\n    end\n\n    def render_kramdown\n      body = @body.to_s.dup.force_encoding(\"utf-8\")\n      Kramdown::Document.new(body).to_html\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Combining HTML Attributes for Dynamic Fields in Ruby\nDESCRIPTION: Demonstrates how to combine Stimulus-related HTML options for inputs and wrappers to enable interactive behaviors like toggling visibility and disabling fields using Stimulus controllers. Targeted attributes should be specified within the `html` hash.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :has_skills, as: :boolean, html: {\n  edit: {\n    input: {\n      data: {\n        # On click run the toggleSkills method\n        action: \"input->toggle-fields#toggleSkills\",\n      }\n    }\n  }\n}\n\nfield :skills, as: :tags, html: {\n  edit: {\n    wrapper: {\n      # hide this field by default\n      classes: \"hidden\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Associations in Ruby\nDESCRIPTION: This code defines example model associations, allowing a Comment model to link to a Post model. These associations define how a record link will function by specifying the relationships between different models in the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/record_link.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Comment < ApplicationRecord\n  # Your model must return an instance of a record\n  has_one :post\n  # or\n  belongs_to :post\n  # or\n  def post\n    # trivially find a post\n    Post.find 42\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring and Parsing API Data in an HTTP Resource - Ruby\nDESCRIPTION: Defines a custom Avo::Resources::Author class inheriting from Avo's HTTP resource base, outlining options for connecting to an external API. This includes endpoint assignment, parsing strategies for collections, single records, counts, optional custom finders, and ID obfuscation logic with Base64. The fields method describes API data mapping to resource fields. Prerequisites: avo-http_resource gem, an external API for authors, and optional Base64/Rails dependencies. Inputs are parsed HTTP responses; outputs are structured data in the resource model. This approach allows fine-tuned error management and resource field mapping.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/http-resources.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/author.rb\nclass Avo::Resources::Author < Avo::Core::Resources::Http\n  # The base URL for your external API\n  self.endpoint = \"https://api.openalex.org/authors\"\n\n  # How to extract the list of records from the API response\n  self.parse_collection = -> {\n    raise Avo::HttpError.new response[\"message\"] if response[\"error\"].present?\n    response[\"results\"]\n  }\n\n  # How to extract a single record from the API response\n  self.parse_record = -> {\n    raise Avo::HttpError.new response[\"message\"] if response[\"error\"].present?\n    response\n  }\n\n  # How to extract the total count of records (useful for pagination)\n  self.parse_count = -> { response[\"meta\"][\"count\"] }\n\n  # Optional: custom method to find a record if the ID is encoded or non-standard\n  self.find_record_method = -> { query.find Base64.decode64(id) }\n\n  # Optional: redefines model behavior to obfuscate the ID via Base64\n  self.model_class_eval = -> {\n    define_method :to_param do\n      Base64.encode64(id)\n    end\n  }\n\n  def fields\n    field :id, as: :id\n    field :display_name\n    field :cited_by_count, name: \"Total citations\"\n    field :works_count, name: \"Total works\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting a Single View Type in Avo Resource (Ruby)\nDESCRIPTION: This snippet shows how to assign a single view type, such as ':table', to an Avo resource, restricting the view switcher to only that view and hiding other view options. It requires overriding the 'view_types' attribute at the class level.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-view-types.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  # ...\n  self.view_types = :table\n  #...\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering Requests in routes.rb - Ruby\nDESCRIPTION: This snippet demonstrates how to filter requests to Avo based on authentication status using `authenticate`.  It leverages the `authenticate` method in your `routes.rb` file, typically in a Rails application. The first example uses the `:user` scope provided by devise (assuming Devise is used), which ensures only authenticated users can access Avo. The second example further filters access by including a block that permits access only to users who are administrators. This provides an extra layer of security. The input is the Rails app.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authentication.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nauthenticate :user do\n  mount Avo::Engine => '/avo'\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nauthenticate :user, -> user { user.admin? } do\n  mount Avo::Engine => '/avo'\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Account model with rolify\nDESCRIPTION: Modify the Account model to include rolify functionality, enabling role-based authorization for user accounts.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/rolify-integration.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Account < ApplicationRecord\n  rolify\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Page Steps for Resource Index\nDESCRIPTION: Sets available step options for resource pagination with `config.per_page_steps`, allowing users to change how many resources are visible per page dynamically.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.per_page_steps = [12, 24, 48, 72]\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Show View Component (ERB)\nDESCRIPTION: This ERB code customizes the `show` view component of the `progress_bar` field. It includes conditional rendering of the value with a suffix if `display_value` is set to true and renders a progress bar using the settings passed to the field.  This example builds a visual representation of the progress value in the show view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_11\n\nLANGUAGE: ERB\nCODE:\n```\n# app/components/avo/fields/progress_bar_field/show_component.html.erb\n<%= show_field_wrapper field: @field, index: @index do %>\n  <!-- If display_value is set to true, show the value above the progress bar -->\n  <% if @field.display_value %>\n    <div class=\"text-center text-sm font-semibold w-full leading-none mb-1\">\n      <!-- Add the suffix if value_suffix is set -->\n      <%= @field.value %><%= @field.value_suffix if @field.value_suffix.present? %>\n    </div>\n  <% end %>\n\n  <!-- Show the progress input with the settings we passed to the field. -->\n  <progress max=\"<%= @field.max %>\" value=\"<%= @field.value %>\" class=\"block w-full\"></progress>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Rails App with Avo - Bash\nDESCRIPTION: This snippet demonstrates how to create a new Rails application pre-installed with Avo using a remote Rails template. The command fetches the template from a specified URL and applies it to a new app with your chosen name (APP_NAME). It requires Ruby, Rails, internet access, and permissions to run shell commands. Replace APP_NAME with the desired application name. The output is a functional Rails project set up with Avo; the process assumes standard Rails setup and may need further configuration depending on your environment.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/common/technical-support.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrails new -m https://avo.cool/new.rb APP_NAME\n```\n\n----------------------------------------\n\nTITLE: Generating a standalone action in Rails (Bash)\nDESCRIPTION: This bash command generates a standalone Avo action using the `--standalone` option. This allows the action to be triggered without needing any records selected. It's suitable for actions such as generating reports or exporting all records. Prerequisites include a Rails app with the Avo gem.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/generate.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:action export_users --standalone\n```\n\n----------------------------------------\n\nTITLE: Adding URL Link to Discreet Information Icon in Avo (Ruby)\nDESCRIPTION: Illustrates how to make the discreet information icon a clickable link by providing a URL via the `url` option. This example uses a dynamic lambda to generate the URL.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/discreet-information.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = {\n    tooltip: -> { \"Product is #{record.published_at ? \"published\" : \"draft\"}\" },\n    icon: \"heroicons/outline/academic-cap\",\n    url: -> { main_app. }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Bulk Authorizing File Attachments (Ruby)\nDESCRIPTION: Shows how to use Ruby meta-programming (e.g., `define_method`) to quickly define policy methods for multiple file actions (upload, download, delete) across different file fields, setting the same authorization rule for all of them.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n[:cover_photo, :audio].each do |file|\n  [:upload, :download, :delete].each do |action|\n    define_method \"#{action}_#{file}?\" do\n      true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Custom ProgressBarField in Avo Resource Definition - Ruby\nDESCRIPTION: Demonstrates how to define fields within an Avo resource, including usage of the custom progress bar field by specifying 'field :progress, as: :progress_bar'. The 'title' attribute is set to use the 'name' attribute for identifying resources. This allows the custom progress bar field to be rendered in forms and index/show views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :progress, as: :progress_bar\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to Show View Wrapper Placeholder - Ruby\nDESCRIPTION: Shows the basic structural placeholder for adding HTML attributes to the `wrapper` element of a field in the `show` view using the object notation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/html.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  show: {\n    wrapper: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring options with Direct Hash for Select Filter in Avo HQ\nDESCRIPTION: Defines a dynamic filter with options provided as a direct hash mapping, where keys are labels displayed to users and values are the internal values used by the filter when selected.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :version,\n  type: :select,\n  options: {\n    \"Label 1\" => :value_1,\n    \"Label 2\" => :value_2\n  }\n```\n\n----------------------------------------\n\nTITLE: Including All Rails Helper Modules in Avo BaseField Programmatically - Ruby\nDESCRIPTION: An alternative solution that dynamically includes all helper modules from the app/helpers directory into Avo::Fields::BaseField. This allows all defined helpers to be accessible within Avo resource computed fields without including them individually. It uses Rails Controller helper introspection methods and can be placed in an initializer file alongside usual Avo configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/use-own-helpers-in-resource-files.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # Usual Avo config\nend\n\nmodule FieldExtensions\n  # Include all helpers\n  helper_names = ActionController::Base.all_helpers_from_path Rails.root.join(\"app\", \"helpers\")\n  helpers = ActionController::Base.modules_for_helpers helper_names\n  helpers.each do |helper|\n    send(:include, helper)\n  end\nend\n\nRails.configuration.to_prepare do\n  Avo::Fields::BaseField.include FieldExtensions\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Lazy Loader for REST API Data in Ruby\nDESCRIPTION: Defines a `LazyLoader` class responsible for fetching and managing data from a REST API for Avo. It mimics an ActiveRecord relation, allowing chaining of methods like `where`, `offset`, and `limit`. It fetches data lazily via the `api_response` method when `items` or `count` is called, parses the JSON, instantiates model objects (`@klass.new`), and stores the results. It requires the associated model class (`@klass`) to provide `all`, `root_key`, and `count_key` methods.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rest-api-integration.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass LazyLoader\n  def initialize(klass)\n    @offset, @limit = nil\n    @params = {}\n    @items = []\n    @count = 0\n    @klass = klass\n  end\n\n  def where(query)\n    @params = @params.merge(query)\n    self\n  end\n\n  def items\n    all\n    @items\n  end\n\n  def count(_attr = nil)\n    all\n    @count\n  end\n\n  def offset(value)\n    @offset = value\n    self\n  end\n\n  def limit(value)\n    @limit = value\n    items[@offset, @limit]\n  end\n\n  def all\n    api_response\n    self\n  end\n\n  def to_sql\n    \"\"\n  end\n\n  private\n\n  def api_response\n    @api_response ||= begin\n      json = @klass.all(@params)\n      json.fetch(@klass.root_key, []).map do |obj|\n        @items << @klass.new(obj)\n      end\n      @count = json.fetch(@klass.count_key, @items.size)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Page Titles in Avo with Instance Variable\nDESCRIPTION: This example shows how to specify a custom page title by assigning a string to `@page_title` in your controller action. Avo uses the `meta-tags` gem to render the page title dynamically.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::ToolsController < Avo::ApplicationController\n  def custom_tool\n    @page_title = \"Custom tool page title\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Tool Visibility on Specific Views\nDESCRIPTION: This Ruby code snippet shows how to set a resource tool to be visible only on the 'edit' view by using options like 'show_on' within a resource class, enabling granular control over tool placement.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resource-tools.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  tool PostInfo, show_on: :edit\nend\n```\n\n----------------------------------------\n\nTITLE: Adding icons to actions with `icon` option in Avo (Ruby)\nDESCRIPTION: Illustrates how to specify an icon for an action to enhance visual cues in the dropdown menu, supporting Heroicons by default. Icons help users quickly identify actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/registration.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  def actions\n    action Avo::Actions::ToggleInactive, icon: \"heroicons/outline/globe\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Stimulus Controller with Hidden Input in Custom Field - Ruby\nDESCRIPTION: Introduces always_show and allow_non_colors attributes to a ColorPickerField class, enabling toggling of field visibility based on the always_show argument. This prepares the field for integration with Avo's built-in Stimulus controllers for dynamic hidden/shown content. Prerequisites: Avo, Stimulus support enabled.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/fields/color_picker_field.rb\nclass ColorPickerField < Avo::Fields::BaseField\n  attr_reader :always_show\n\n  def initialize(id, **args, &block)\n    super(id, **args, &block)\n\n    @always_show = args[:always_show] || false\n    @allow_non_colors = args[:allow_non_colors]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining has_and_belongs_to_many Field in Avo (Ruby)\nDESCRIPTION: Defines a `has_and_belongs_to_many` association named `users` using the `field` method in Avo. This will create a field that allows the selection of multiple users and associates them with the current record. No specific dependencies are outlined in the immediate context, but Avo itself is a prerequisite.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/has_and_belongs_to_many.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :users, as: :has_and_belongs_to_many\n```\n\n----------------------------------------\n\nTITLE: Enable Grid View in Avo Resource Ruby\nDESCRIPTION: Configure an Avo resource to enable the grid view option in the view switcher. This snippet defines the structure and content of each grid card using a lambda that returns a hash with `cover_url`, `title`, and `body` keys based on the current record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/grid-view.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.grid_view = {\n    card: -> do\n      {\n        cover_url:\n          if record.cover_photo.attached?\n            main_app.url_for(record.cover_photo.url)\n          end,\n        title: record.name,\n        body: record.truncated_body\n      }\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Required Gems After Dependency Slimming - Ruby\nDESCRIPTION: This snippet lists the required Ruby gems to include in the Gemfile when upgrading Avo from 2.17 to 2.18. Each gem corresponds to an optional feature (authorization, file uploads, image processing, country fields, JavaScript charts). Add these lines to your Gemfile and run bundle install. No parameters required; be sure to only include the gems required by the features you use.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# Minimal authorization through OO design and pure Ruby classes\ngem \"pundit\"\n\n# Active Storage makes it simple to upload and reference files\ngem \"activestorage\"\n\n# High-level image processing wrapper for libvips and ImageMagick/GraphicsMagick\ngem \"image_processing\"\n\n# All sorts of useful information about every country packaged as convenient little country objects.\ngem \"countries\"\n\n# Create beautiful JavaScript charts with one line of Ruby\ngem \"chartkick\"\n```\n\n----------------------------------------\n\nTITLE: Installing Countries Gem Dependency for Avo\nDESCRIPTION: Required gem dependency that must be added to your Gemfile to use the Country field in Avo. The countries gem provides information about countries as convenient objects.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/country.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# All sorts of useful information about every country packaged as convenient little country objects.\ngem \"countries\"\n```\n\n----------------------------------------\n\nTITLE: Field Wrapper with Help Text Option in Edit View - Avo (ERB)\nDESCRIPTION: This snippet illustrates passing a custom help string (`help: ...`) to the `field_wrapper` helper so that explanatory text appears below the field in the Edit view. Useful for user guidance and best practices. Requires `field_wrapper_args` and the Boolean check component. The `help` parameter receives the extra instruction text.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_11\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, help: \"Specify if the post is published or not.\" do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Customize Chart Options with a Block in Ruby\nDESCRIPTION: This code snippet demonstrates how to customize chart options in Avo using a callable block. The `chart_options` block allows modification of the chart's library settings, such as enabling the legend. It is defined within an `Avo::Cards::ChartkickCard` class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::ExampleAreaChart < Avo::Cards::ChartkickCard\n  self.chart_options: -> do\n    {\n      library: {\n        plugins: {\n          legend: {display: true}\n        }\n      }\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating an Avo scope with Rails generator\nDESCRIPTION: Shows how to generate a new scope using the Avo Rails generator command.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/scopes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:scope admins\n```\n\n----------------------------------------\n\nTITLE: Enabling audit logging for specific resources in Avo\nDESCRIPTION: Use `self.audit_logging` class attribute in resource classes to specify whether activities on the resource should be tracked. Set `activity: true` to enable tracking for that resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Product < Avo::BaseResource\n  self.audit_logging = {\n    activity: true\n  }\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :name, as: :text, link_to_record: true\n    field :price, as: :number, step: 1\n    # ...\n  end\n\n  def actions\n    action Avo::Actions::ChangePrice\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Discreet Information as a Badge in Avo (Ruby)\nDESCRIPTION: Shows how to render the discreet information item as a badge instead of just an icon/label by setting the `as` option to `:badge`. This example combines it with tooltip, icon, and URL configurations. Requires the Avo resource class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/discreet-information.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = {\n    tooltip: -> { \"Product is #{record.published_at ? \"published\" : \"draft\"}\" },\n    icon: \"heroicons/outline/academic-cap\",\n    url: -> { main_app. },\n    as: :badge\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Data Attributes to Menu Items in Avo\nDESCRIPTION: Example of adding data attributes to menu items using the data option. This can be used for special behavior such as disabling Turbo for specific links.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    resource :user, data: {turbo: false}\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Sortable Block in Avo Admin - Ruby\nDESCRIPTION: Demonstrates the use of a custom `sortable` block to define sorting behavior for computed fields or associations.  The block receives the query and the direction, allowing for custom ordering based on related data or other conditions. It should return a query.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nfield :is_writer,\n  as: :text,\n  sortable: ->(query, direction) {\n    query.order(id: direction)\n  },\n  hide_on: :edit do |model, resource, view, field|\n    model.posts.to_a.size > 0 ? \"yes\" : \"no\"\n  end\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Custom Action\nDESCRIPTION: This Ruby code defines a custom Avo action named 'Release fish'. It inherits from `Avo::BaseAction`, specifies the action's name and a confirmation message, defines a 'message' field using a textarea, and implements a `handle` method to process the selected records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/testing.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.name = \"Release fish\"\n  self.message = \"Are you sure you want to release this fish?\"\n\n  def fields\n    field :message, as: :textarea, help: \"Tell the fish something before releasing.\"\n  end\n\n  def handle(query:, fields:, **_)\n    query.each(&:release)\n\n    succeed \"#{query.count} fish released with message '#{fields[:message]}'.\"\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Field Behavior (Ruby)\nDESCRIPTION: This Ruby code defines the `ProgressBarField` class, inheriting from `Avo::Fields::BaseField`.  It initializes the field, setting default values and allowing for customization. The `initialize` method is used to setup the field. This class provides the base functionality for the progress bar field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Fields::ProgressBarField < Avo::Fields::BaseField\n  def initialize(name, **args, &block)\n    super(name, **args, &block)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Text as HTML in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to display the `title` field's value as HTML on the `Index` and `Show` views using the `as_html` option. The block provided to the `field` method returns the HTML to be rendered. Avo framework is required. It returns a link to avohq.io.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/text.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :title, as: :text, as_html: true do\n  '<a href=\"https://avohq.io\">Avo</a>'\nend\n```\n\n----------------------------------------\n\nTITLE: Using Record Link Field in Avo Resource\nDESCRIPTION: This snippet demonstrates how to use the `record_link` field within an Avo resource. It configures the field to display a link to a related record, which is useful for viewing and navigating through associated records from within the Avo admin panel. The record returned by the `post` method is what's displayed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/record_link.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  def fields\n    # This will run `record.post` and try to display whatever is returned.\n    field :post, as: :record_link\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Scoping Records for Belongs To Associations using attach_scope in Avo (Ruby)\nDESCRIPTION: Demonstrates filtering the records available in a `belongs_to` dropdown or search field using the `attach_scope` option. The example shows a `:user` field in the `Post` resource using a lambda (`-> { query.non_admins }`) that applies a `non_admins` scope (defined in the `User` model) to the query, thus limiting the selectable users.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/belongs_to.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\n  scope :non_admins, -> { where \"(roles->>'admin')::boolean != true\" }\nend\n\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  def fields\n    field :user, as: :belongs_to, attach_scope: -> { query.non_admins }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hiding ProgressBarField on Specific Views with Visibility Helper - Ruby\nDESCRIPTION: Demonstrates adding visibility control to the ProgressBarField class by calling 'hide_on :forms' in the initializer. This hides the progress bar field when rendering forms but keeps it visible on other views, enabling fine-grained UI control in Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Fields::ProgressBarField < Avo::Fields::BaseField\n  attr_reader :max\n  attr_reader :step\n  attr_reader :display_value\n  attr_reader :value_suffix\n\n  def initialize(name, **args, &block)\n    super(name, **args, &block)\n\n    @max = args[:max] || 100\n    @step = args[:step] || 1\n    @display_value = args[:display_value] || false\n    @value_suffix = args[:value_suffix] || nil\n\n    hide_on :forms\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Field Wrapper HTML with Stimulus Targets\nDESCRIPTION: Shows how Avo generates HTML markup with Stimulus targets for field wrappers based on defined controllers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/stimulus-integration.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"relative flex flex-col md:flex-row md:items-center pb-2 md:pb-0 leading-tight min-h-14\" data-field-id=\"has_skills\" data-field-type=\"boolean\" data-resource-edit-target=\"hasSkillsBooleanWrapper\" data-course-resource-target=\"hasSkillsBooleanWrapper\" data-select-field-target=\"hasSkillsBooleanWrapper\" data-association-fields-target=\"hasSkillsBooleanWrapper\">\n  <!-- Rest of the field content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Debugging with `resource-edit#debugOnInput` in Ruby\nDESCRIPTION: Uses the pre-made `debugOnInput` method to output event and value data to the console for debugging purposes. Assists in verifying correct field targeting and event handling during development.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :some_field, as: :text, html: {\n  edit: {\n    input: {\n      data: {\n        action: \"input->resource-edit#debugOnInput\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Dashboard Route for Avo in Ruby on Rails\nDESCRIPTION: This route snippet nests a custom dashboard route within the Avo namespace and illustrates securing routes under authentication. Dependencies: Rails routing DSL. Key parameters: user must have admin privileges to access. Output: '/avo/dashboard' endpoint, routed to tools#dashboard. Constraints: Ensure 'mount_avo' and routes are configured inside authentication block for protection.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-tools.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  namespace :avo do\n    get \"dashboard\", to: \"tools#dashboard\"\n  end\n\n  authenticate :user, ->(user) { user.admin? } do\n    mount_avo\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using `decorate` for Link Formatting in Avo Fields (Ruby)\nDESCRIPTION: Shows how to use the `decorate` option for display-only formatting, specifically rendering a `:company_url` field as a clickable link on Index and Show views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nfield :company_url,\n  as: :text,\n  decorate: -> {\n    link_to(value, value, target: \"_blank\")\n  } do\n  main_app.companies_url(record)\nend\n```\n\n----------------------------------------\n\nTITLE: Removing the default All scope\nDESCRIPTION: Demonstrates how to remove the default 'All' scope when defining resource scopes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/scopes.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def scopes\n    remove_scope_all\n    scope Avo::Scopes::Admins\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Resource Tool Partial Template in ERB\nDESCRIPTION: This ERB template defines the UI for the resource tool, including rendering a panel with a link, informative text, and placeholders for variables accessible within the partial. It provides a structure for further customization of the resource tool interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resource-tools.md#_snippet_1\n\nLANGUAGE: ERB\nCODE:\n```\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new title: \"Post info\" do |c| %>\n    <% c.with_tools do %>\n      <%= a_link('/avo', icon: 'heroicons/solid/academic-cap', style: :primary) do %>\n        Dummy link\n      <% end %>\n    <% end %>\n\n    <% c.with_body do %>\n      <div class=\"flex flex-col p-4 min-h-24\">\n        <div class=\"space-y-4\">\n          <h3>🪧 This partial is waiting to be updated</h3>\n\n          <p>\n            You can edit this file here <code class='p-1 rounded bg-gray-500 text-white text-sm'>app/views/avo/resource_tools/post_info.html.erb</code>.\n          </p>\n\n          <p>\n            The resource tool configuration file should be here <code class='p-1 rounded bg-gray-500 text-white text-sm'>app/avo/resource_tools/post_info.rb</code>.\n          </p>\n\n          <%\n            # In this partial, you have access to the following variables:\n            # tool\n            # @resource\n            # @resource.model\n            # form (on create & edit pages. please check for presence first)\n            # params\n            # Avo::App.context\n            # current_user\n          %>\n        </div>\n      </div>\n    <% end %>\n  <% end %>\n</div>\n\n<img :src=\"('/assets/img/resource-tools/resource-tool-partial.png')\" alt=\"Avo resource tool partial\" class=\"border mb-4\" />\n```\n\n----------------------------------------\n\nTITLE: Production Unauthorized Action Log (Bash)\nDESCRIPTION: Provides an example of the log output generated in the production environment when a user attempts an unauthorized action within Avo, including details about the policy and action attempted, but excluding user and record details for privacy/security.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_15\n\nLANGUAGE: Bash\nCODE:\n```\nweb     | [Avo->] Unauthorized action 'act_on?' for 'UserPolicy'\n```\n\n----------------------------------------\n\nTITLE: Using Field Wrapper with Field Parameter in Show/Edit - Avo (ERB)\nDESCRIPTION: This code uses the `field_wrapper` helper for Show/Edit views, passing the field instance within `field_wrapper_args` and rendering a Boolean check. This general-purpose wrapper provides context for field customization and presentation. Requires `field_wrapper_args` and `Avo::Fields::Common::BooleanCheckComponent`. The key parameter is `field`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_10\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple View Types in Avo Resource (Ruby)\nDESCRIPTION: This snippet demonstrates assigning an array of view types, such as ':table' and ':grid', to enable multiple views for the resource. The order of icons on the switcher follows the array declaration, allowing customization of available views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-view-types.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  # ...\n  self.view_types = [:table, :grid]\n  #...\nend\n```\n\n----------------------------------------\n\nTITLE: Using the footer slot\nDESCRIPTION: This snippet displays how to populate the `footer` slot. The footer is the lowest available area at the end of the component and is used to add content to the panel's footer.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-components/avo-panel-component.md#_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_footer do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Providing a Value to `avo_show_field` (ERB)\nDESCRIPTION: Shows how to use the `avo_show_field` helper to display a field in a read-only view (like a show page or custom panel). The `value` option is used to explicitly pass the data to be displayed (e.g., `record.cdn_image`), which is useful when the value comes from a source other than the default resource model attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-field-components.md#_snippet_3\n\nLANGUAGE: ERB\nCODE:\n```\n<%= avo_show_field(:photo, as: :external_image, value: record.cdn_image) %>\n```\n\n----------------------------------------\n\nTITLE: Adding Stylesheet Files Using Avo.asset_manager.add_stylesheet (Ruby)\nDESCRIPTION: This snippet demonstrates how to add stylesheet files to Avo's layout using the AssetManager's `add_stylesheet` method. It supports loading assets from a direct path or from the Rails engine root directory. The method ensures stylesheets are properly included inside the `<head>` element of the dashboard.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/asset-manager.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.asset_manager.add_stylesheet \"/public/magic_file.css\"\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.asset_manager.add_stylesheet Avo::Engine.root.join(\"app\", \"assets\", \"stylesheets\", \"magic_file.css\")\n```\n\n----------------------------------------\n\nTITLE: Setting Home Path with Custom Breadcrumbs in Avo\nDESCRIPTION: Configure both the home path and initial breadcrumbs to create a cohesive navigation experience in the Avo admin panel.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.home_path = \"/avo/dashboard\"\n  config.set_initial_breadcrumbs do\n    add_breadcrumb \"Dashboard\", \"/avo/dashboard\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic EasyMDE Field in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates the basic syntax for defining an `easy_mde` field within an Avo resource. It associates the field with a database column (e.g., `:description`) and renders an EasyMDE Markdown editor on the Edit/New views. The content is stored as raw Markdown text.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/easy_mde.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :description, as: :easy_mde\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo to Raise Errors on Missing Policies in Ruby\nDESCRIPTION: Shows how to enforce the presence of policy classes for all Avo resources by modifying the Avo initializer (`config/initializers/avo.rb`). Setting `config.raise_error_on_missing_policy = true` changes the default behavior, causing Avo to raise an error if a resource lacks a corresponding policy, thus improving application security.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.root_path = '/avo'\n  config.app_name = 'Avocadelicious'\n  config.license_key = ENV['AVO_LICENSE_KEY']\n  config.raise_error_on_missing_policy = true\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Model-like Class for REST API Data in Avo\nDESCRIPTION: Implements an ActiveModel-compliant class that mimics an ActiveRecord model but fetches data from a REST API. Includes necessary methods for compatibility with Avo and defines API interaction.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/rest-api-integration.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass AgingOrder\n  include ActiveModel::Model\n  include ActiveModel::Conversion\n  include ActiveModel::Validations\n  extend ActiveModel::Naming\n\n  attr_accessor :id, :investment_date, :folio_number, :order_submitted_at,\n                :amc_name, :scheme, :primary_investor_id, :order_type, :systematic,\n                :order_reference, :amount, :units, :age\n\n  class << self\n    def column_names\n      %i[id investment_date folio_number order_submitted_at amc_name\n         scheme primary_investor_id order_type systematic\n         order_reference amount units age]\n    end\n\n    def base_class\n      AgingOrder\n    end\n\n    def root_key\n      'data'\n    end\n\n    def count_key\n      'total_elements'\n    end\n\n    def all(query)\n      response = HTTParty.get(ENV['AGING_URL'], query: query)\n      JSON.parse(response.body)\n    end\n  end\n\n  def persisted?\n    id.present?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Combining Manual and Discovered Fields in Ruby\nDESCRIPTION: Shows how to combine manually defined fields with discovered fields in an Avo resource, demonstrating field placement and exclusion options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-discovery.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  # ...\n\n  def fields\n    field :custom_field, as: :text\n\n    discover_columns except: [:custom_field]\n    discover_associations\n\n    field :another_custom_field, as: :boolean\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Options within an Avo Card in Ruby\nDESCRIPTION: Shows how to access custom `options` passed from the dashboard within the card's `query` method. The `UsersCount` card checks for the presence of `options[:active_users]` to conditionally modify its database query (e.g., adding `scope.active`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersCount < Avo::Dashboards::MetricCard\n  self.id = \"users_metric\"\n  self.label = \"Users count\"\n\n  # You have access to context, params, range, current dashboard, and current card\n  def query\n    scope = User\n\n    if options[:active_users].present?\n      scope = scope.active\n    end\n\n    result scope.count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Metric Card with Arguments in Avo\nDESCRIPTION: Example of a metric card that can receive and process arguments from the dashboard. Shows how to modify the query based on passed arguments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dashboards.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::UsersCount < Avo::Cards::MetricCard\n  self.id = \"users_metric\"\n  self.label = \"Users count\"\n\n  # You have access to context, params, range, current parent, and current card\n  def query\n    scope = User\n\n    if arguments[:active_users].present?\n      scope = scope.active\n    end\n\n    result scope.count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Filter for Grace Period in Avo using Ruby\nDESCRIPTION: Defines a custom boolean filter named 'Grace period' for Avo resources to filter queries based on a 'grace_period' attribute. It inherits from Avo::Filters::BooleanFilter, overrides the apply method to filter the query according to the selected filter value, and provides a predefined option mapping. This requires the Avo framework to support boolean filters and integrates into resource filtering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rest-api-integration.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass GracePeriod < Avo::Filters::BooleanFilter\n  self.name = 'Grace period'\n\n  def apply(_request, query, value)\n    query.where(value)\n  end\n\n  def options\n    {\n      grace_period: 'Within graceperiod'\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Result Title Display\nDESCRIPTION: Customize how search results are displayed by setting the `item -> title` option within the `self.search` configuration. This lambda block provides access to the `record` object, allowing you to format the title using model attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(name_cont: params[:q], m: \"or\").result(distinct: false) },\n    item: -> do\n      {\n        title: \"[#{record.id}]#{record.name}\",\n      }\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Locale in Ruby Initializer\nDESCRIPTION: Sets the default locale specifically for Avo interface requests. The `config.locale` attribute in the `Avo.configure` block specifies the desired locale (e.g., `:en`). If left as `nil` (the default), Avo will fall back to the application's `config.i18n.default_locale` setting. This configuration does not affect the locale used by the rest of the Rails application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/i18n.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.locale = :en # default is nil\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Authorization Client in Ruby\nDESCRIPTION: Example showing how to change the authorization client from the default Pundit to a custom implementation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.authorization_client = 'Services::AuthorizationClients::CustomClient'\nend\n```\n\n----------------------------------------\n\nTITLE: Using Field Wrapper with Resource Parameter in Show/Edit - Avo (ERB)\nDESCRIPTION: This code demonstrates the `field_wrapper` helper used in Show/Edit views, passing in all `field_wrapper_args` which typically includes the resource instance. It renders the Boolean check component for field visualization. Dependencies are `field_wrapper_args` and the Boolean check component. The common parameter is `resource`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_13\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Setting Avo Resource Default View Type (Ruby)\nDESCRIPTION: Sets the default view type for an Avo resource's index page to the map view. By assigning `:map` to the `self.default_view_type` class attribute, users will see the map view automatically when navigating to the resource index. This setting is only effective if map view is enabled and configured for the resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/map-view.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CityResource < Avo::BaseResource\n  self.default_view_type = :map\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Pretty JSON Formatting in Codemirror Code Field in Ruby\nDESCRIPTION: Demonstrates how to create a code field that automatically pretty prints and parses JSON data in Ruby using the codemirror package. The 'pretty_generated: true' flag will format JSON data for display and ensure it is parsed on save. This setup expects valid JSON input and outputs prettified JSON; if invalid JSON is provided, parsing may fail. Required dependencies include codemirror and Ruby's JSON module.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/code.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :code, pretty_generated: true\n```\n\n----------------------------------------\n\nTITLE: Using the 'Sidebar' Slot in Avo::PanelComponent (ERB)\nDESCRIPTION: Demonstrates adding content to the 'Sidebar' slot (note the capitalization in the code: `with_Sidebar`). This slot displays content in a separate, smaller area positioned to the right of the main 'body' within the Avo::PanelComponent.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-components/avo-panel-component.md#_snippet_7\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_Sidebar do %>\n    Something tiny here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Setting Action Cancel Button Label in Ruby\nDESCRIPTION: Shows how to customize the cancel button label on an action using either a static string or a dynamic block that changes based on the current record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/customization.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.cancel_button_label = \"Cancel release\"\n\n  # Or as a block\n  self.cancel_button_label = -> {\n    if resource.record.present?\n      \"Cancel release on #{resource.record.name}\"\n    else\n      \"Cancel release\"\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced Suggestions with Objects for Tags Field - Ruby\nDESCRIPTION: This snippet illustrates how to supply an array of objects for tag suggestions, each containing value, label, and an optional avatar URL. It is implemented in a static model method, fitting scenarios where suggestions need custom labels and visuals. Must run within a Rails model. Outputs structured suggestions for richer UI experiences. No inputs required; outputs an array of hashes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post.rb\nclass Post < ApplicationRecord\n  def self.tags_suggestions\n    # Example of an array of more advanced objects\n    [\n      {\n        value: 1,\n        label: 'one',\n        avatar: 'https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n      },\n      {\n        value: 2,\n        label: 'two',\n        avatar: 'https://images.unsplash.com/photo-1567254790685-6b6d6abe4689?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n      },\n      {\n        value: 3,\n        label: 'three',\n        avatar: 'https://images.unsplash.com/photo-1560765447-da05a55e72f8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n      },\n    ]\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Using the 'except' Option with Field Discovery in Ruby\nDESCRIPTION: Shows how to use the 'except' option to exclude specific fields from discovery.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-discovery.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  # ...\n\n  def fields\n    discover_columns except: [:metadata, :internal_notes]\n    discover_associations except: [:audit_logs]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Model Class for a Resource with `self.model_class` in Ruby\nDESCRIPTION: This code assigns a specific model class to an Avo resource, supporting cases where models are namespaced or when multiple resources relate to a single model. It ensures Avo uses the correct model, even if it is outside the default namespace.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_36\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::DelayedJob < Avo::BaseResource\n  self.model_class = \"Delayed::Job\"\n\n  def fields\n    field :id, as: :id\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Field with Min, Max, and Step\nDESCRIPTION: This snippet demonstrates configuring the `number` field with `min`, `max`, and `step` options. These options set the corresponding HTML attributes on the input element, controlling the allowed range and increment values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/number.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :age, as: :number, min: 0, max: 120, step: 5\n```\n\n----------------------------------------\n\nTITLE: Setting Field Meta with Ruby\nDESCRIPTION: This snippet demonstrates setting meta information for a field using a block in Ruby. The `meta` option allows you to associate additional data with a field, which can be accessed within the field template. This specific example uses the `statuses` of a record to generate an array of IDs for the field's meta data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nfield :status,\n  as: :badge,\n  meta: -> do\n    record.statuses.map(&:id)\n  end\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Resource Description in Avo Resource - Ruby\nDESCRIPTION: Demonstrates how to use a lambda to set the resource description dynamically based on context, with access to the record, resource, current user, and parameters. Dependencies include the Avo framework and the User resource definition. The description content changes depending on the current view and user permissions, modifying the text shown to the user in context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.title = :name\n  self.description = -> do\n    if view == :index\n    \"These are the users of the app\"\n    else\n      if current_user.is_admin?\n        \"You can update all properties for this user: #{record.id}\"\n      else\n        \"You can update some properties for this user: #{record.id}\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating summarizable fields in Ruby\nDESCRIPTION: Enables visual data summaries for columns, displaying charts in table headers to represent data distribution at a glance.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\ndef fields\n  field :status, as: :select, summarizable: true\n  field :status, as: :badge, summarizable: true\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Dashboard Authorization in Ruby\nDESCRIPTION: Sets up authorization rules for a dashboard using a lambda that can access the current user, request parameters, and other context to determine access permissions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass Dashy < Avo::Dashboards::BaseDashboard\n  self.id = 'dashy'\n  self.authorization = -> do\n    # You have access to current_user, params, request, context, adn view_context.\n    current_user.is_admin?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Error Raising for Missing Policies in Ruby\nDESCRIPTION: Configuration example showing how to make Avo raise errors when a resource is missing a corresponding policy.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.root_path = '/avo'\n  config.app_name = 'Avocadelicious'\n  config.license = 'pro'\n  config.license_key = ENV['AVO_LICENSE_KEY']\n  config.raise_error_on_missing_policy = true\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Links and Default Controls to Resource Show Controls in Avo (Ruby)\nDESCRIPTION: This Ruby code snippet illustrates how to prepend a custom link (using link_to) before the default Avo-provided controls in a resource's show_controls block, leveraging the default_controls helper. It requires Rails routing helpers for path generation and a valid Avo resource setup. Inputs include a record object for dynamic path construction; the output is a customized control bar in the resource view featuring both custom and default controls. The snippet highlights flexible insertion points for controls and the use of Lambda-based configuration blocks.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customizable-controls.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nself.show_controls = -> do\n  # This link will be added before all other controls.\n  link_to \"View on site\", post_path(record), target: :_blank\n  default_controls\nend\n```\n\n----------------------------------------\n\nTITLE: Removing the default 'All' scope in a resource in Ruby\nDESCRIPTION: This example demonstrates how to remove the default 'All' scope (which includes all records) from the resource's scope list by calling 'remove_scope_all' inside the 'scopes' method before registering custom scopes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/scopes.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def scopes\n    remove_scope_all\n    scope Avo::Scopes::Admins\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pundit Policy in Ruby\nDESCRIPTION: This method retrieves the Pundit policy for a given user and record.  It utilizes `Pundit.policy` to fetch the relevant policy object. It takes the user and record as input and returns the corresponding policy instance.  Requires the `pundit` gem. Primarily designed for accessing the policy associated with a specific user and record context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\ndef policy(user, record)\n  Pundit.policy(user, record)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Avo Select Filter (Ruby)\nDESCRIPTION: Demonstrates setting a default value for a Select filter using the `default` method. This method should return the key (as a string or symbol) of the option that should be pre-selected when the filter loads.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PublishedFilter < Avo::Filters::SelectFilter\n  self.name = 'Published status'\n\n  def apply(request, query, value)\n    case value\n    when 'published'\n      query.where.not(published_at: nil)\n    when 'unpublished'\n      query.where(published_at: nil)\n    else\n      query\n    end\n  end\n\n  def options\n    {\n      'published': 'Published',\n      'unpublished': 'Unpublished',\n    }\n  end\n\n  def default\n    :published\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hiding Resource from Global Search\nDESCRIPTION: If a resource should only be searchable from its index page and not appear in the global search results, set `hide_on_global: true` within the `self.search` configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::TeamMembership < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false) },\n    item: -> do\n      {\n        description: record.level,\n      }\n    end,\n    hide_on_global: true\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Trix Editor Field with Attachments Disabled in Ruby\nDESCRIPTION: This Ruby snippet configures a Trix editor field named `body` with attachment functionality disabled by setting the `attachments_disabled` option to true. This removes the attachments button from the editor toolbar, effectively restricting the editor to plain text or HTML input without file uploading capabilities.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/trix.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :trix, attachments_disabled: true\n```\n\n----------------------------------------\n\nTITLE: Targeting Avo Field Wrapper in Index View (Object Notation) (Ruby)\nDESCRIPTION: This snippet illustrates the basic structure for using the `html` option in object notation to target the field's wrapper element specifically for the 'index' view.\n\nDependencies: Avo framework.\n\nParameters: `html` option with a nested hash structure `index: { wrapper: {} }`. Attributes (`style`, `classes`, `data`) would be added inside the inner `{}`.\n\nExpected Input: A hash structure specifying the 'index' view and 'wrapper' target.\n\nExpected Output: Configures the Avo field definition to allow adding HTML attributes to the index view wrapper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/html.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  index: {\n    wrapper: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating an HTTP Resource Using Rails CLI - Bash\nDESCRIPTION: Demonstrates how to generate an HTTP Resource in an Avo-enabled Rails project using the command-line generator with the --http flag. Assumes Rails and Avo are installed. Input is a CLI command. Output is new resource files created, prepared to interact with an external endpoint.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/http-resources.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:resource Author --http\n```\n\n----------------------------------------\n\nTITLE: Controlling Filename Display for Files in AvoHQ (Ruby)\nDESCRIPTION: Controls whether the filename caption is displayed below the file input or link in the AvoHQ UI. Setting this option to `false` hides the filename. Defaults to `true`, showing the filename.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/file_options_common.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :cover_video, as: :file, display_filename: false\n```\n\n----------------------------------------\n\nTITLE: Setting default values for fields in Ruby\nDESCRIPTION: Demonstrates how to provide default values for fields on the New view using either fixed values or callback functions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n# using a value\nfield :name, as: :text, default: 'John'\n\n# using a callback function\nfield :level, as: :select, options: { 'Beginner': :beginner, 'Advanced': :advanced }, default: -> { Time.now.hour < 12 ? 'advanced' : 'beginner' }\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Resource Controller - Ruby\nDESCRIPTION: This snippet demonstrates how to define a custom resource controller in Avo. It shows the inheritance structure, indicating how the custom controller inherits from Avo::ResourcesController. This allows developers to override default behaviors and customize controller actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::CoursesController < Avo::ResourcesController\nend\n```\n\n----------------------------------------\n\nTITLE: Assigning Multiple Stimulus Controllers to Avo Resource View - Ruby\nDESCRIPTION: Allows specifying multiple Stimulus controllers for a resource by assigning a space-separated list to `self.stimulus_controllers`. This setup enables DOM targets and controller logic from each listed controller to be applied to the resource's views. It is useful for modular design, where different Stimulus controllers handle different field behaviors. Requires the respective controllers and asset pipeline configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseResource < Avo::BaseResource\n  self.stimulus_controllers = \"course-resource select-field association-fields\"\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Array Field Data from Model Method - Rails Model - Ruby\nDESCRIPTION: If no block is provided for the Avo `Array` field, Avo attempts to fetch data by calling a method with the same name on the associated model. This Ruby code shows how to implement such a method (`attendees` in this example) on a Rails model (`Course`) to provide dynamic data to the Avo field. The method should return an array of records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/array.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Course < ApplicationRecord\n  def attendees\n    User.all.first(6) # Example fetching first 6 users\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: LLM Integration Setup Link\nDESCRIPTION: Provides a direct link to the text file (llms.txt) which contains Avo documentation for integration with LLMs in various code editors. This text file allows AI models to generate accurate Avo code.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://avohq.io/llms.txt\n```\n\n----------------------------------------\n\nTITLE: Using Enum for Select Options - Ruby\nDESCRIPTION: This code demonstrates how to set the options of a `select` field from an Active Record enum in Avo with Ruby.  The first snippet defines an enum in the `Project` model.  The second snippet uses the `enum` parameter within a `field` declaration to link the select options to the `Project` model's enum.  The `display_with_value` and `placeholder` are included.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/select.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/project.rb\nclass Project < ApplicationRecord\n  enum type: { \\'Large container\\': \\'large\\', \\'Medium container\\': \\'medium\\', \\'Tiny container\\': \\'small\\' }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project_resource.rb\nclass ProjectResource < Avo::BaseResource\n  field :type,\n    as: :select,\n    enum: ::Project.types,\n    display_with_value: true,\n    placeholder: \\'Choose the type of the container.\\'\n```\n\n----------------------------------------\n\nTITLE: Ejecting Arbitrary Template Partial with Rails Generator - Ruby on Rails - Bash\nDESCRIPTION: This snippet shows how to eject any partial template from Avo using its full path with the Rails avo:eject generator. The --partial option specifies the complete path to the view you want to override. This places a copy of the targeted file in your app, allowing for full customization. The Rails and Avo gem must be installed; the input is the file path, and the output is the creation of the specified file in your Rails views directory.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/eject-views.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:eject --partial app/views/layouts/avo/application.html.erb\n```\n\nLANGUAGE: bash\nCODE:\n```\n      create  app/views/layouts/avo/application.html.erb\n```\n\n----------------------------------------\n\nTITLE: Rendering Edit Field with Form Context using Avo::EditField ERB\nDESCRIPTION: Illustrates how to pass the `form` object provided by Avo to the `avo_edit_field` helper when rendering fields in 'edit' or 'new' views. Passing the `form:` option is crucial for ensuring the field integrates correctly with the surrounding form for data binding and submission.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-field-components.md#_snippet_3\n\nLANGUAGE: ERB\nCODE:\n```\n<%= avo_edit_field :name, as: :text, form: form %>\n```\n\n----------------------------------------\n\nTITLE: Assigning Stimulus Controllers to Avo Resource View - Ruby\nDESCRIPTION: Defines the stimulus_controllers property in a resource class (`CourseResource`) to assign one or more Stimulus JS controllers to an Avo resource view. This enables dynamic behavior by attaching specified Stimulus controllers to the resource's DOM elements. The controllers are specified as a space-separated string and can be referenced in subsequent field customizations or DOM event handling. Requires Avo framework and proper Stimulus controller definitions in your JavaScript asset pipeline.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseResource < Avo::BaseResource\n  self.stimulus_controllers = \"course-resource\"\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Policy Scopes in Ruby\nDESCRIPTION: Example of defining a policy scope to filter records based on user permissions, for use in Avo's Index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostPolicy < ApplicationPolicy\n  class Scope < Scope\n    def resolve\n      if user.admin?\n        scope.all\n      else\n        scope.where(published: true)\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo HQ Progress Bar Field Options in Ruby\nDESCRIPTION: Demonstrates how to configure the `:progress` field with several options: setting the maximum value (`max: 150`), controlling the slider increment (`step: 10`), enabling the display of the current value above the slider (`display_value: true`), and adding a percentage symbol as a suffix to the displayed value (`value_suffix: \"%\"`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/progress_bar.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :progress,\n  as: :progress_bar,\n  max: 150,\n  step: 10,\n  display_value: true,\n  value_suffix: \"%\"\n```\n\n----------------------------------------\n\nTITLE: Using Field Wrapper with View Parameter in Show/Edit - Avo (ERB)\nDESCRIPTION: This code shows the `field_wrapper` helper for Show/Edit contexts, using all `field_wrapper_args` that may include a `view` parameter for contextual display logic (e.g., differentiating between Show and Edit). It renders the Boolean check for field values and requires `field_wrapper_args` and the Boolean check component.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_16\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring License Request Timeout Error Display - Ruby\nDESCRIPTION: This code allows you to control the display of license request timeout errors in the Avo interface. By setting config.display_license_request_timeout_error to false inside your config/initializers/avo.rb, you suppress the UI badge for these errors (default is true). This can be useful in environments with intermittent network access or where user interface clarity is paramount. No additional dependencies are required, but the parameter should be set before Avo loads in your Rails application lifecycle.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/licensing.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.display_license_request_timeout_error = false\nend\n```\n\n----------------------------------------\n\nTITLE: Define Skills Tag Field in Avo Resource - Ruby\nDESCRIPTION: Defines a `skills` field as a tags field within an Avo resource. This allows users to manage skills as tags associated with a course. No specific dependencies beyond Avo setup.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Course < Avo::BaseResource\n  def fields\n    field :skills, as: :tags\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Ejecting View Component in Avo with Path Format\nDESCRIPTION: Alternative command to eject a view component using the file path format instead of class name. Both approaches produce the same output.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/eject-views.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:eject --component avo/index/table_row_component\n```\n\n----------------------------------------\n\nTITLE: Closing Dropdown After Selection in Ruby\nDESCRIPTION: Demonstrates how to configure the dropdown to close after a user selects an item.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nfield :items,\n  as: :tags,\n  suggestions: -> { Post.tags_suggestions },\n  close_on_select: true\n```\n\n----------------------------------------\n\nTITLE: Defining Default (Type :default) Pagination in Avo (Ruby)\nDESCRIPTION: Sets up pagination of type :default with page size links as [1, 2, 2, 1] for the resource. Useful for typical datasets with manageable row counts. Accepts optional lambda or direct hash forms.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nself.pagination = -> do\n  {\n    type: :default,\n    size: [1, 2, 2, 1],\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Attachments in Trix Editor Field Using Ruby\nDESCRIPTION: Shows how to disable the attachment upload button in the Trix editor toolbar by setting the `attachments_disabled` option to true. This configuration limits the field to text content editing only, without allowing file attachments. It is useful when only pure text editing is desired without the overhead or complexity of managing attachments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/trix.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :trix, attachments_disabled: true\n```\n\n----------------------------------------\n\nTITLE: Rendering Heroicons in ERB Views (Avo)\nDESCRIPTION: Shows how to render different variants (outline, mini) of Heroicons within ERB templates using the `svg` helper method. It requires specifying the correct path structure: `heroicons/VARIANT/ICON_NAME`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/icons.md#_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= svg \"heroicons/outline/academic-cap.svg\" %>\n\n<%= svg \"heroicons/mini/arrow-path-rounded-square.svg\" %>\n```\n\n----------------------------------------\n\nTITLE: Including Application Helpers in Avo Controllers in Ruby\nDESCRIPTION: This Ruby code demonstrates how to include a custom application helper in an Avo tool controller to make helper methods available in custom tool views. The module HomeHelper provides the custom_helper method, which is then included using the helper keyword in the controller. Required dependencies: the helper module must be present in app/helpers. Inputs: none explicit—helpers must be defined and referenced appropriately in views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-tools.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/helpers/home_helper.rb\nmodule HomeHelper\n  def custom_helper\n    'hey from custom helper'\n  end\nend\n\n# app/controllers/avo/tools_controller.rb\nclass Avo::ToolsController < Avo::ApplicationController\n  helper HomeHelper\n\n  def dashboard\n    @page_title = \"Dashboard\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generated PostResource class with fields\nDESCRIPTION: This code defines the PostResource class for Avo, setting the resource's title, including associations, and adding individual fields for ID, name, body, media attachments, and relations like user, comments, reviews, and tags.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resources.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  self.title = :id\n  self.includes = []\n  # self.search_query = -> do\n  #   scope.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n  # end\n\n  field :id, as: :id\n  # Generated fields from model\n  field :name, as: :text\n  field :body, as: :textarea\n  field :is_featured, as: :boolean\n  field :published_at, as: :datetime\n  field :user_id, as: :number\n  field :status, as: :select, enum: ::Post.statuses\n  field :cover_photo, as: :file\n  field :audio, as: :file\n  field :attachments, as: :files\n  field :user, as: :belongs_to\n  field :comments, as: :has_many\n  field :reviews, as: :has_many\n  field :tags, as: :tags\n  # add fields here\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling copyable option for text field in Ruby\nDESCRIPTION: Demonstrates how to enable the copyable option on a text field, which adds a clipboard icon that allows users to copy the field value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, copyable: true\n```\n\n----------------------------------------\n\nTITLE: Using Index Field Wrapper with Resource Parameter - Avo (ERB)\nDESCRIPTION: This snippet uses the `index_field_wrapper` with all `field_wrapper_args`, illustrating that the resource instance is commonly included in these arguments. The Boolean check component renders according to the field value. The `resource` parameter refers to the resource context the field is part of. Dependencies involve `field_wrapper_args` and the Boolean check component.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<%= index_field_wrapper **field_wrapper_args do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Toggling Filename Display in Ruby File Fields\nDESCRIPTION: Controls the visibility of the uploaded file's caption using the 'display_filename' option. Use within a Ruby form field definition; the option accepts boolean values to show or hide the filename beneath the file input. This allows customization of UI based on specific user or application needs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/file_options_common.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :cover_video, as: :file, display_filename: false\n```\n\n----------------------------------------\n\nTITLE: Configure model_resource_mapping for custom resource selection\nDESCRIPTION: This configuration in initializer sets the default resource for the User model to UserResource, overriding the default alphabetical search and ensuring consistent resource mapping across the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resources.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.model_resource_mapping = {\n    'User': 'UserResource'\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Update Success Message in Avo Controller\nDESCRIPTION: Shows how to override the message displayed to users after successfully updating a record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_success_message\n  \"#{@resource.name} #{t(\"avo.was_successfully_updated\")}.\"\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Query Attributes for Belongs_to Association with dynamic_filter\nDESCRIPTION: Similar to the previous example, this snippet illustrates applying a filter to associated columns for a belongs_to association, but this time using the `dynamic_filter` method. It uses `user_email` and `user_first_name` as the query attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter label: \"User (email & first_name)\",\n  icon: \"heroicons/solid/users\",\n  query_attributes: [:user_email, :user_first_name]\n```\n\n----------------------------------------\n\nTITLE: Specifying Index View Fields in Avo Resource (Ruby)\nDESCRIPTION: This code shows how to control field visibility on the index view of an Avo resource. Fields defined outside the `panel` block are visible by default on the index view, while those inside the `panel` are hidden unless explicitly shown. The `only_on: :index` option can be used to define a custom field only for the index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/tabs.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserResource < Avo::BaseResource\n  # Only these fields will be visible on the `Index` view\n  field :id, as: :id, link_to_resource: true\n  field :email, as: :text, name: \"User Email\", required: true\n  field :name, as: :text, only_on: :index do |model|\n    \"#{model.first_name} #{model.last_name}\"\n  end\n\n  # These fields will be hidden on the `Index` view\n  panel name: \"User information\", description: \"Some information about this user\" do\n    field :first_name, as: :text, required: true, placeholder: \"John\"\n    field :last_name, as: :text, required: true, placeholder: \"Doe\"\n    field :active, as: :boolean, name: \"Is active\", show_on: :show\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using panel_wrapper Option in Avo Sidebar - Ruby\nDESCRIPTION: This code snippet demonstrates how to use the `panel_wrapper` option when rendering a custom tool inside a sidebar in Avo. Setting `panel_wrapper` to `false` prevents the `white_panel_classes` from being applied to the tool. This is useful when you want to customize the appearance of the tool without the default styling.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resource-sidebar.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsidebar panel_wrapper: false do\n  tool Avo::ResourceTools::SidebarTool\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Stylesheet Assets with Avo AssetManager (Ruby)\nDESCRIPTION: Shows how to use `Avo.asset_manager.add_stylesheet` within the `avo_boot` hook to include a specific CSS file in the Avo layout's `<head>` section. The path provided should point to the location where the asset is served, often configured via middleware.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/plugins.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.asset_manager.add_stylesheet \"/avo-kanban-assets/avo_kanban\"\n```\n\n----------------------------------------\n\nTITLE: Extending Avo::BaseResource with custom methods\nDESCRIPTION: This example demonstrates customizing the base resource class `Avo::BaseResource` by creating a subclass `Avo::BaseResource` in your application. It adds a method to make all number fields cast their values to float. Developing such shared methods supports consistent behavior across all resources.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/base_resource.rb\nmodule Avo\n  class BaseResource < Avo::Resources::Base\n    # Example custom method: make all number fields cast their values to float\n    def field(id, **args, &block)\n      if args[:as] == :number\n        args[:format_using] = -> { value.to_f }\n      end\n\n      super(id, **args, &block)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generate a resource with specified model class\nDESCRIPTION: This command generates an Avo resource named MiniPostResource for the Post model explicitly by specifying the '--model-class' parameter, useful for custom or alias resource names.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resources.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nbin/rails generate avo:resource mini-post --model-class post\n```\n\n----------------------------------------\n\nTITLE: Attaching Dynamic HTML Attributes Using Block Notation - Ruby\nDESCRIPTION: Utilizes the block/proc notation for dynamically assigning classes and data attributes to a field's wrapper. The block context exposes `params`, `current_user`, `record`, and `resource`, allowing context-aware customization such as providing different data-action values for admins vs. non-admins. Required for advanced customization in multi-tenant or role-based scenarios.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_skills,\n  as: :boolean,\n  html: -> do\n    edit do\n      wrapper do\n        classes do\n          \"hidden\"\n        end\n        data do\n          if current_user.admin?\n            {\n              action: \"click->admin#do_something_admin\"\n            }\n          else\n            {\n              record: record,\n              resource: resource,\n            }\n          end\n        end\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Disabling Avo License Timeout Error Display in Ruby\nDESCRIPTION: This configuration snippet demonstrates how to hide the badge that signals a license request timeout error. By setting `config.display_license_request_timeout_error` to `false` in `config/initializers/avo.rb`, you prevent the visual notification from appearing in the Avo interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/licensing.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.display_license_request_timeout_error = false\nend\n```\n\n----------------------------------------\n\nTITLE: Tags condition mappings for dynamic filters - Ruby\nDESCRIPTION: This Ruby hash defines conditions to filter array or tag-type fields within Avo dynamic filters, such as 'Are', 'Contain', 'Overlap', and 'Contained in'. The 'Contained in' condition requires the `active_record_extended` gem and is incompatible with the `acts-as-taggable-on` gem. The `.invert` method is employed to swap keys and values internally for use in query translation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  array_is: \"Are\",\n  array_contains: \"Contain\",\n  array_overlap: \"Overlap\",\n  array_contained_in: \"Contained in\" # (active_record_extended gem required)\n}.invert\n```\n\n----------------------------------------\n\nTITLE: Initializing Avo::PanelComponent with Title, Description, Tools, and Body (ERB)\nDESCRIPTION: Demonstrates rendering an Avo::PanelComponent with a dynamic title and description, a 'tools' slot containing a link, and a 'body' slot with custom HTML content. It utilizes ERB syntax to embed Ruby variables (`@product.name`, `@product.description`) and helpers (`a_link`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-components/avo-panel-component.md#_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new(title: @product.name, description: @product.description) do |c| %>\n  <% c.with_tools do %>\n    <%= a_link(@product.link, icon: 'heroicons/solid/academic-cap', style: :primary, color: :primary) do %>\n      View product\n    <% end %>\n  <% end %>\n\n  <% c.with_body do %>\n    <div class=\"flex flex-col p-4 min-h-24\">\n      <div class=\"space-y-4\">\n        <h3>Product information</h3>\n\n        <p>Style: shiny</p>\n      </div>\n    </div>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Loading for Tab Content - Ruby\nDESCRIPTION: Demonstrates deferring tab content loading by setting 'lazy_load: true' on a tab, so data is fetched only when the tab is activated, improving performance. Particularly relevant for tabs with expensive queries or large associations. Supported since Avo v3.17.0. In forms, lazy loading is automatically disabled to avoid data issues on submit.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tabs.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ntabs do\n  tab \"Address\", lazy_load: true do\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Multiple Stimulus Controllers in Avo Action - Ruby\nDESCRIPTION: Shows how to attach several Stimulus controllers to an action by specifying them as a space-separated string in `self.stimulus_controllers`. This enables modular Stimulus logic per action, similar to resources. No default view controllers or view value attributes are assigned to actions as with resources.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass ShowCurrentTime < Avo::BaseAction\n  self.stimulus_controllers = \"course-resource select-field association-fields\"\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing current_user Resource Name - Ruby\nDESCRIPTION: This snippet shows how to customize the resource name part of the sign-out path if your app doesn't use the standard `destroy_user_session_path`.  This is typically used with methods such as `destroy_current_user_session_path`. The `current_user_resource_name` option is set to the correct resource name.  It assumes the existence of a sign-out path.  If a different path name is used such as `destroy_current_admin_session_path` then the `current_user_resource_name` is set to `current_admin`. The input is the name of the current user's resource, which is used to create the sign out path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authentication.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_resource_name = :current_user\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling ID Links to Resources in Index View\nDESCRIPTION: Activates links on resource IDs in index rows to navigate directly to the resource's show page by setting `config.id_links_to_resource` to true. Requires a configuration block in the initializer.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.root_path = '/avo'\n  config.app_name = 'Avocadelicious'\n  config.id_links_to_resource = true\nend\n```\n\n----------------------------------------\n\nTITLE: Field Wrapper with Form Parameter in Edit View - Avo (ERB)\nDESCRIPTION: This snippet demonstrates usage of `field_wrapper` with the set of arguments typically containing the form instance for Edit views. The Boolean check component is rendered according to the field's value. Dependencies involve `field_wrapper_args`, which should bundle the form reference. The `form` parameter allows access to the underlying Rails form object.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_9\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Registering Stimulus Controller | Avo Custom JS | JavaScript\nDESCRIPTION: Registers the `NestedForm` Stimulus controller from the `stimulus-rails-nested-form` package within the Avo custom JavaScript file. This controller provides the dynamic functionality to add or remove nested form fields on the client side.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/nested-records-when-creating.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Probably app/javascript/avo.custom.js\nimport { Application } from '@hotwired/stimulus'\nimport NestedForm from 'stimulus-rails-nested-form'\n\nconst application = Application.start()\napplication.register('nested-form', NestedForm)\n```\n\n----------------------------------------\n\nTITLE: Adding Logic Inside a Resource Tool Class in Ruby\nDESCRIPTION: Extends the PostInfo resource tool class to include an initializer that accepts keyword arguments, calls super to maintain framework integration, and sets instance variables that can be accessed from the partial templates via the `tool` object. Provides a custom method to encapsulate business logic within the tool class rather than in the view, promoting separation of concerns. The snippet explains what context objects are available within the tool and shows how to expose data and behavior for the partial's use. Requires the Avo resource tool class to be subclassed appropriately.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-tools.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::ResourceTools::PostInfo < Avo::BaseResourceTool\n  self.name = \"Post info\"\n  # self.partial = \"avo/resource_tools/post_info\"\n\n  attr_reader :foo\n\n  def initialize(**kwargs)\n    super **kwargs # It's important to call super with the same keyword arguments\n\n    # You'll have access to the following objects:\n    # resource - when attached to a resource\n    # parent - which is the object it's attached to (resource if attached to a resource)\n    # view\n\n    @foo = :bar # Add your variables\n  end\n\n  def custom_method_call\n    :called\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Conflicting Ruby Rails Route Helper\nDESCRIPTION: This standard Ruby on Rails route definition creates RESTful routes for a resource named 'resources'. It generates path helpers like `resources_path`. This helper name directly conflicts with Avo's internal `resources_path` helper, which is crucial for the admin panel's functionality, and will override it.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/internal-model-names.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nresources :resources\n```\n\n----------------------------------------\n\nTITLE: Limiting Maximum Visible Suggestions for Tags Field - Ruby\nDESCRIPTION: Configures a tags field to display a maximum number of suggestions at once. Uses the 'suggestions_max_items' option, hiding excess entries until the query narrows them. Prevents overwhelming the dropdown for large suggestion sets; the parameter accepts integers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  suggestions: %w(one two three),\n  suggestions_max_items: 2\n```\n\n----------------------------------------\n\nTITLE: Defining Attachment Permission Configuration with attachment_concerns in Pundit Policy Using Ruby\nDESCRIPTION: This Ruby snippet defines an attachment_concerns method in a model-specific policy to specify permission mappings for each attachment and action. Here, it configures the :logo attachment with upload, delete, and download permissions all delegated to the existing update? check. This hash structure is used by the dynamic method_missing implementation to resolve attachment permission checks at runtime.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/attachment-policy-extension-for-pundit.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\ndef attachment_concerns\n  {\n    logo: {\n      upload: update?,\n      delete: update?,\n      download: update?\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Resource Map View (Ruby)\nDESCRIPTION: Configures the map view for an Avo resource using the `self.map_view` attribute. It defines map options using `mapkick_options`, specifies how to extract geospatial data (latitude, longitude) and tooltip for individual records via the `record_marker` lambda, and controls the adjacent table's display settings with the `table` hash. This configuration requires the `mapkick` gem.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/map-view.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CityResource < Avo::BaseResource\n  # ...\n  self.map_view = {\n    mapkick_options: {\n      controls: true\n    },\n    record_marker: -> {\n      {\n        latitude: record.coordinates.first,\n        longitude: record.coordinates.last,\n        tooltip: record.name\n      }\n    },\n    table: {\n      visible: true,\n      layout: :right\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Define User Model with 'has_many' Association - Ruby\nDESCRIPTION: This code defines the `User` model with a `has_many` association to the `Comment` model. This sets up the relationship between users and their comments, which is later used in the Avo resource to display associated comments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/scopes_common.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\n  has_many :comments\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of an Avo Resource Controller in Ruby\nDESCRIPTION: Shows the inheritance pattern for an Avo resource controller. Each resource controller inherits from ResourcesController, which inherits from BaseController.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::CoursesController < Avo::ResourcesController\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cache Store in Ruby\nDESCRIPTION: This snippet demonstrates how to configure a custom cache store for Avo.  It provides two ways to set the `cache_store` option: a block that returns a cache store object or directly assigning a cache store object. The block syntax enables different cache stores based on the environment.  No specific dependencies are listed, but this assumes the existence of a valid cache store like 'solid_cache_store'. It shows two examples, the first uses a lambda for dynamic selection, the second directly assigns a cache store. The output is the configuration of the cache store.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cache.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nconfig.cache_store = -> {\n  ActiveSupport::Cache.lookup_store(:solid_cache_store)\n}\n\n# or\n\nconfig.cache_store = ActiveSupport::Cache.lookup_store(:solid_cache_store)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Avo Media Library Menu Using a Block in Ruby\nDESCRIPTION: This Ruby code configures the Media Library menu item's visibility based on a condition, using a lambda block for dynamic control. It leverages the Avo::Current.user object, commonly to show the menu only to developer users. Place this in config/initializers/avo.rb; ensure the context object and method (is_developer?) exist in your setup.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/media-library.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nif defined?(Avo::MediaLibrary)\n  Avo::MediaLibrary.configure do |config|\n    config.visible = -> { Avo::Current.user.is_developer? }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Avo Field Definition with for_attribute (Ruby-Vue)\nDESCRIPTION: Defines two fields related to reviews in an Avo resource. The `special_reviews` field uses the `for_attribute` option to specify that it's based on the `reviews` association but with a custom scope (`query.special_reviews`). This allows having different views or filters applied to the same underlying data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/association.md#_snippet_0\n\nLANGUAGE: ruby-vue\nCODE:\n```\nfield :reviews,\n  as: :{{ $frontmatter.field_type }}\n\nfield :special_reviews,\n  as: :{{ $frontmatter.field_type }},\n  for_attribute: :reviews,\n  scope: -> { query.special_reviews }\n```\n\n----------------------------------------\n\nTITLE: Enabling Map View in Avo Resource Using Ruby\nDESCRIPTION: This Ruby snippet shows how to enable the map view for an Avo resource by setting the `map_view` class attribute. It configures mapkick options for controls visibility, defines a lambda for dynamically generating record markers based on database coordinates and tooltips, and configures the table's visibility and layout next to the map. Dependencies include the `mapkick-rb` gem and a valid Mapbox access token via the `MAPBOX_ACCESS_TOKEN` environment variable. Inputs are pulled from the resource's `coordinates` field, and the output is an integrated map display with corresponding markers and adjacent data table.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/map-view.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  # ...\n  self.map_view = {\n    mapkick_options: {\n      controls: true\n    },\n    record_marker: -> {\n      {\n        latitude: record.coordinates.first,\n        longitude: record.coordinates.last,\n        tooltip: record.name\n      }\n    },\n    table: {\n      visible: true,\n      layout: :right\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default View Type for Resource Listing with self.default_view_type in Avo Resource - Ruby\nDESCRIPTION: Shows both static and dynamic configuration of default_view_type for changing the display of resource index pages (e.g., :table or :grid). The lambda form demonstrates conditional selection based on user agent, leveraging the execution context in Avo version 3.5.6 and up. Useful for customizing resource presentation per device or user.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.default_view_type = :grid\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.default_view_type = -> {\n    mobile_user = request.user_agent =~ /Mobile/\n\n    mobile_user ? :table : :grid\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Result Title\nDESCRIPTION: Demonstrates how to customize the title of search results to display more complex information.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(name_cont: params[:q], m: \"or\").result(distinct: false) },\n    item: -> do\n      {\n        title: \"[#{record.id}]#{record.name}\",\n      }\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Define Virtual Status Property on Rails Model\nDESCRIPTION: Implement virtual getter and setter methods for a property like 'status' on a Rails model (`Post`). This allows mapping Kanban column values to complex logic involving multiple database attributes, enabling records without a direct status column to participate in the board.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/kanban-boards.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  def status\n    if published_at.present?\n      \"published\"\n    elsif published_status == \"draft\"\n      \"draft\"\n    else\n      \"private\"\n    end\n  end\n\n  def status=(value)\n    if value == \"published\"\n      published_at = Time.now\n      published_status = \"draft\"\n    elsif value == \"draft\"\n      published_at = nil\n      published_status = \"draft\"\n    elsif value == \"draft\"\n      published_at = nil\n      published_status = nil\n    end\n\n    save!\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Rows for Textarea in Avo (Ruby)\nDESCRIPTION: This snippet configures the number of rows displayed in the textarea element for the `:body` field. It uses the `rows` option, set to `5` in this example. This setting affects the visual height of the textarea within the Edit and New views of the Avo admin interface. The input is an integer, specifying the number of rows. The output is a textarea element with the specified row height.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/textarea.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :textarea, rows: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo License Key in Ruby\nDESCRIPTION: Add your purchased Avo license key to the Avo configuration file. The license key can be directly added or stored in an environment variable for better security.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/licensing.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.license_key = '************************' # or use ENV['AVO_LICENSE_KEY']\nend\n```\n\n----------------------------------------\n\nTITLE: Assign Stimulus Controllers to Resource Views in Ruby\nDESCRIPTION: Sets Stimulus controllers for resource views (`Index`, `Show`, `Edit`, `New`) using the `stimulus_controllers` option on resource class. Multiple controllers can be added separated by spaces, enabling dynamic front-end behavior within resource pages.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Course < Avo::BaseResource\n  self.stimulus_controllers = \"course-resource\"\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Course < Avo::BaseResource\n  self.stimulus_controllers = \"course-resource select-field association-fields\"\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Search Provider\nDESCRIPTION: Shows how to use a custom search provider instead of Ransack by returning an array of structured hashes with the required properties.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Project < Avo::BaseResource\n  self.search = {\n    query: -> do\n      [\n        { _id: 1, _label: \"Record One\", _url: \"https://example.com/1\" },\n        { _id: 2, _label: \"Record Two\", _url: \"https://example.com/2\" },\n        { _id: 3, _label: \"Record Three\", _url: \"https://example.com/3\" }\n      ]\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Hiding Record Selector in Avo Resource (Ruby)\nDESCRIPTION: Disables the record selector checkbox for the Comment resource by setting the self.record_selector attribute to false. Requires the resource class to inherit from Avo::BaseResource. No parameters are needed; this disables the checkbox in all index views for the resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.record_selector = false\nend\n```\n\n----------------------------------------\n\nTITLE: Enforcing Tags Suggestions Exclusively - Ruby\nDESCRIPTION: This snippet shows how to make the tags field accept only values from the suggestions array by setting enforce_suggestions to true. The required parameters include the field name, type, suggestions, and enforce_suggestions. When enforce_suggestions is true, custom tags are not accepted. This requires only the Avo framework and is best for controlled vocabularies. The output is a UI that enforces predefined tag selection.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  suggestions: %w(one two three),\n  enforce_suggestions: true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Field Nullability\nDESCRIPTION: Explains how to use the `nullable: true` option to instruct Avo to store an explicit `NULL` in the database when a field is empty or `nil`. It also shows how to use `null_values` to define a custom array of values that should be interpreted and stored as `NULL` instead of their literal string representation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\n# using default options\nfield :updated_status, as: :status, failed_when: [:closed, :rejected, :failed], loading_when: [:loading, :running, :waiting], nullable: true\n\n# using custom null values\nfield :body, as: :textarea, nullable: true, null_values: ['0', '', 'null', 'nil', nil]\n```\n\n----------------------------------------\n\nTITLE: Adding Global Activity Overview to Menu\nDESCRIPTION: Configure the main menu to include a section with access to all activities across the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\n\nAvo.configure do |config|\n  config.main_menu = -> {\n    section \"AuditLogging\", icon: \"presentation-chart-bar\" do\n      resource :avo_activity\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Example Field-to-Wrapper Target Mapping with Data Attributes - Ruby\nDESCRIPTION: Shows how Avo automatically generates stimulus target data attributes for field wrappers based on field name and type. Each field, when defined with its type, will have a corresponding data attribute (e.g., `data-[controller]-target`) for use in targeting by Stimulus controllers. No changes to field parameters are required to enable this convention.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Wrappers get the `data-[CONTROLLER]-target=\"nameTextWrapper\"` attribute and can be targeted using nameTextWrapperTarget\nfield :name, as: :text\n\n# Wrappers get the `data-[CONTROLLER]-target=\"createdAtDateTimeWrapper\"` attribute and can be targeted using createdAtDateTimeWrapperTarget\nfield :created_at, as: :date_time\n\n# Wrappers get the `data-[CONTROLLER]-target=\"hasSkillsTagsWrapper\"` attribute and can be targeted using hasSkillsTagsWrapperTarget\nfield :has_skills, as: :tags\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authorization Client (Ruby)\nDESCRIPTION: Shows how to configure the `authorization_client` option within the Avo initializer to specify a custom class responsible for handling authorization logic, overriding the default behavior (Pundit or no client) and allowing integration with other authorization gems or custom systems.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.authorization_client = 'Services::AuthorizationClients::CustomClient'\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the 'area' field in Ruby model\nDESCRIPTION: This snippet shows how to declare the 'area' field in a Ruby model, mapping it to the 'area' attribute with an alias. It establishes the field's association within the application to display map polygons.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/area.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :center_area, as: :area\n```\n\n----------------------------------------\n\nTITLE: Adding Javascript Files with Avo Asset Manager in Ruby\nDESCRIPTION: Illustrates the usage of `Avo.asset_manager.add_javascript` for incorporating custom JavaScript files into the Avo application's `<head>`. It takes a file path string as an argument. Examples demonstrate adding a script from the public directory and building a path using `Avo::Engine.root` relative to the engine's javascripts directory.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/asset-manager.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.asset_manager.add_javascript \"/public/magic_file.js\"\nAvo.asset_manager.add_javascript Avo::Engine.root.join(\"app\", \"javascripts\", \"magic_file.js\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Indicators on Tabs in Ruby for Avo\nDESCRIPTION: This code snippet shows how to add counter indicators to Avo resource tabs by creating a helper method that formats the tab name with an HTML counter badge. The approach uses Tailwind CSS classes for styling and the view_context.sanitize method to render HTML within the tab name.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/tabs-counter-indicator.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    main_panel do\n    end\n\n    tabs do\n      tab name_with_counter(\"Teams\", record&.teams&.size) do\n        field :teams, as: :has_and_belongs_to_many\n      end\n      tab name_with_counter(\"People\", record&.people&.size) do\n        field :people, as: :has_many\n      end\n    end\n  end\n\n  def name_with_counter(name, counter)\n    view_context.sanitize(\n      \"#{name} \" \\\n      \"<span class='bg-gray-500 ml-1 px-1 text-white text-xs rounded font-semibold'>\" \\\n        \"#{counter}\" \\\n      \"</span>\"\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Title Option with Tabs Group - Ruby\nDESCRIPTION: Illustrates specifying a title for a group of tabs via the 'title' option in the tabs DSL in Avo. The group title acts as an overall label on the tabs container, providing more context to users. Needs an Avo resource definition with a tabs group; outputs a labeled group in the UI. Limitation: option available since version 3.15.0.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tabs.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ntabs title: \"Tabs group title\" do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Function for Dynamic Home Path in Avo\nDESCRIPTION: Define a dynamic home path using a lambda function, which is evaluated at runtime to determine the redirect location.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.home_path = -> { avo_dashboards.dashboard_path(:dashy) }\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Gem Server Token Build Argument to Docker CLI\nDESCRIPTION: This bash snippet demonstrates how to pass the BUNDLE_PACKAGER__DEV token as a build argument when executing docker build from the command line. It shows both directly passing the token string or exporting it as an environment variable beforehand for convenience. This allows bundler inside the Docker build to authenticate using the provided token. It expects the user to replace 'xxx' with the actual token string.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/gem-server-authentication.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Pass the key to the build argument\ndocker build --build-arg BUNDLE_PACKAGER__DEV=xxx\n\n# OR\n\n# Set the key as an environment variable on your machine\n# Somewhere in your `.bashrc` or `.bash_profile` file\nexport BUNDLE_PACKAGER__DEV=xxx\n# Then pass it to the build argument from there\ndocker build --build-arg BUNDLE_PACKAGER__DEV=$BUNDLE_PACKAGER__DEV\n```\n\n----------------------------------------\n\nTITLE: Stimulus Data Target Attribute Example in View Markup - HTML\nDESCRIPTION: Demonstrates an HTML div element annotated with multiple Stimulus JS target data attributes corresponding to assigned controllers. Used in an edit view for a boolean field, this markup enables multiple Stimulus controllers to simultaneously interact with the same DOM target. Attributes include both field metadata (`data-field-id`, `data-field-type`) and a set of `data-[controller]-target` entries.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"relative flex flex-col md:flex-row md:items-center pb-2 md:pb-0 leading-tight min-h-14\"\n  data-field-id=\"has_skills\"\n  data-field-type=\"boolean\"\n  data-resource-edit-target=\"hasSkillsBooleanWrapper\"\n  data-course-resource-target=\"hasSkillsBooleanWrapper\"\n  data-select-field-target=\"hasSkillsBooleanWrapper\"\n  data-association-fields-target=\"hasSkillsBooleanWrapper\"\n>\n  <!-- Rest of the field content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Query for Avo Resource (Ruby)\nDESCRIPTION: This Ruby code snippet configures the search query for the `CourseLink` resource in Avo. It defines a `search` block that utilizes Ransack to search across the `id` and `link` fields for the provided query `q` in the URL params. It uses the `ransack` method with the `id_eq`, and `link_cont` predicates along with the `or` meta-predicate to search for matches. The `distinct: false` option makes the results include duplicates. Prerequisites include the Avo framework, and Ransack gem and the appropriate database setup. The input is a search query from the user. The output is a result set that matches the search criteria.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/associations_searchable_option_common.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/course_link.rb\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  self.search = {\n    query: -> {\n      query.ransack(id_eq: params[:q], link_cont: params[:q], m: \"or\").result(distinct: false)\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Static Pagination Configuration in Avo (Ruby)\nDESCRIPTION: Configures default pagination settings for Avo using a hash assigned to `config.pagination` in the initializer. This example sets the pagination `type` to `:countless` for all tables application-wide.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.pagination = {\n  type: :countless\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Avo MetricCard (Ruby)\nDESCRIPTION: Defines the basic configuration for an Avo MetricCard, setting its unique ID, display label, default time range, and a hash of available time ranges for user selection. This card is intended to display the count of users.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.label = 'Users count'\n  self.initial_range = 30\n  self.ranges = {\n    \"7 days\": 7,\n    \"30 days\": 30,\n    \"60 days\": 60,\n    \"365 days\": 365,\n    Today: \"TODAY\",\n    \"Month to date\": \"MTD\",\n    \"Quarter to date\": \"QTD\",\n    \"Year to date\": \"YTD\",\n    All: \"ALL\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Rails Routes for Avo Resource\nDESCRIPTION: This snippet defines a route within the Rails application that exposes a custom endpoint for fetching cities related to a specific course resource using the Avo engine. The route leverages `Avo::Engine.routes.draw` to define a custom path within Avo's scope, specifically to enable a course resource's custom routes to `/resources/courses/cities` which directs to the courses controller, providing cities data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_25\n\nLANGUAGE: Ruby\nCODE:\n```\nRails.application.routes.draw do\n  if defined? ::Avo\n    Avo::Engine.routes.draw do\n      scope :resources do\n        get \"courses/cities\", to: \"courses#cities\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Add HTML Attributes to Edit Field Wrapper - Ruby\nDESCRIPTION: Prepares a placeholder for setting customized HTML attributes on the wrapper of a field in the edit view. Can be filled with class, style, or data customizations for fine-tuning behavior and styling in the administrative interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    wrapper: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing deprecated index_text_align with HTML classes in Avo using Ruby\nDESCRIPTION: This snippet shows how to replace the removed 'index_text_align' field option with a new approach using the 'html' option specifying wrapper classes for index view text alignment. The example converts right text alignment from the previous concise option to a nested hash specifying CSS classes controlling alignment.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-2-avo-3-upgrade.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nfield :users_required, as: :number, index_text_align: :right\n\n# After\nfield :users_required, as: :number, html: {index: {wrapper: {classes: \"text-right\"}}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo-Specific Locale (Ruby)\nDESCRIPTION: Sets the default locale specifically for requests handled by Avo. This configuration is done within the `Avo.configure` block and overrides the application-wide locale only for the Avo admin interface. Setting it to `nil` uses the application's default locale.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/localization.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.locale = :en # default is nil\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling File Uploads for Markdown Field (Ruby)\nDESCRIPTION: Illustrates how to disable the direct \"Upload files\" option in the markdown editor within an Avo resource. Setting the `file_uploads` option to `false` prevents users from uploading files directly into the markdown field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/markdown.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :body, as: :markdown, file_uploads: false\n```\n\n----------------------------------------\n\nTITLE: Adding Nested Attributes | Rails Model | Ruby\nDESCRIPTION: Adds the `accepts_nested_attributes_for` method to the parent ActiveRecord model (`Fish`). This enables the model to handle the saving of attributes for associated records (`reviews`) passed via the parent model's parameters, which is necessary for creating nested records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/nested-records-when-creating.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Fish < ApplicationRecord\n  has_many :reviews, as: :reviewable\n\n  accepts_nested_attributes_for :reviews\nend\n```\n\n----------------------------------------\n\nTITLE: Add HTML Attributes to Index Field Wrapper - Ruby\nDESCRIPTION: Illustrates how to specify custom HTML attribute containers for a field's wrapper in the index view, even if left empty. This pattern provides a template for adding style, class, or data attributes to wrappers as needed. No dynamic context is provided in this minimal example.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  index: {\n    wrapper: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stimulus Controllers in View DOM Example - HTML\nDESCRIPTION: Shows a parent div containing multiple Stimulus controller attributes: both `data-controller` listing the active controllers and `data-[controller]-view-value` attributes indicating the view context (`edit`, `show`, etc). This allows Stimulus controllers to distinguish which page or resource state they are operating within. Requires Avo and Stimulus properly set up.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"space-y-12\"\n  data-model-id=\"280\"\n  data-controller=\"resource-edit course-resource\"\n  data-resource-edit-view-value=\"edit\"\n  data-course-resource-view-value=\"edit\"\n>\n  <!-- The fields and panels -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Stylesheets with Avo Asset Manager in Ruby\nDESCRIPTION: Demonstrates how to use `Avo.asset_manager.add_stylesheet` to include custom CSS files in the Avo application's `<head>`. The method accepts a string representing the path to the stylesheet. Examples show referencing a file in the public directory and using `Avo::Engine.root` to construct a path relative to the engine's root.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/asset-manager.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.asset_manager.add_stylesheet \"/public/magic_file.css\"\nAvo.asset_manager.add_stylesheet Avo::Engine.root.join(\"app\", \"assets\", \"stylesheets\", \"magic_file.css\")\n```\n\n----------------------------------------\n\nTITLE: Add HTML Attributes to Show Field Wrapper - Ruby\nDESCRIPTION: Sets up an empty HTML attribute container for a field's wrapper in the show view, ready to be populated with custom class, style, or data attributes as required. Follows the same structure as the index wrapper example and is used for presentation customization in show views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  show: {\n    wrapper: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Map Card with Embedded Google Maps in Ruby and HTML\nDESCRIPTION: Demonstrates how to create a card with an embedded Google Maps iframe where the header is hidden. Includes both the Ruby card definition and the HTML partial template.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/cards/map_card.rb\nclass MapCard < Avo::Dashboards::PartialCard\n  self.id = \"map_card\"\n  self.label = \"Map card\"\n  self.partial = \"avo/cards/map_card\"\n  self.display_header = false\n  self.cols = 2\n  self.rows = 4\nend\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- app/views/avo/cards/_map_card.html.erb -->\n<iframe src=\"https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d17991.835132857846!2d-73.98926852562143!3d40.742050491245955!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sro!4v1647079626880!5m2!1sen!2sro\" width=\"100%\" height=\"100%\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Defining a Movie Array Resource with Fields and Conditional Display\nDESCRIPTION: This Ruby class defines a custom Array Resource for movies, including the `records` method to supply data and a `fields` method to configure resource fields. It displays the `fun_fact` field only on index pages and when the `fun_fact` is present, employing conditional logic and dynamic content. Additionally, a sidebar shows either the fun fact or a placeholder message.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/array-resources.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Movie < Avo::Resources::ArrayResource\n  def records\n    [\n      {\n        id: 1,\n        name: \"The Shawshank Redemption\",\n        release_date: \"1994-09-23\"\n      },\n      {\n        id: 2,\n        name: \"The Godfather\",\n        release_date: \"1972-03-24\",\n        fun_fact: \"The iconic cat in the opening scene was a stray found by director Francis Ford Coppola on the studio lot.\"\n      },\n      {\n        id: 3,\n        name: \"Pulp Fiction\",\n        release_date: \"1994-10-14\"\n      }\n    ]\n  end\n\n  def fields\n    main_panel do\n      field :id, as: :id\n      field :name, as: :text\n      field :release_date, as: :date\n      field :fun_fact, only_on: :index, visible: -> { resource.record.fun_fact.present? } do\n        record.fun_fact.truncate_words(10)\n      end\n\n      sidebar do\n        field :fun_fact do\n          record.fun_fact || \"There is no register of a fun fact for #{record.name}\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Query Attributes for Belongs_to Association\nDESCRIPTION: This snippet shows how to apply a filter to associated columns for a belongs_to association. Specifically, it demonstrates filtering on `user_email` and `user_first_name` attributes associated with a `user` association.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nfield :user,\n  as: :belongs_to,\n  filterable: {\n    label: \"User (email & first_name)\",\n    icon: \"heroicons/solid/users\",\n    query_attributes: [:user_email, :user_first_name]\n  }\n```\n\n----------------------------------------\n\nTITLE: Customizing Discreet Information with Hash Options in Avo (Ruby)\nDESCRIPTION: Demonstrates customizing a single discreet information item using a hash. This example configures a dynamic tooltip based on `record.published_at`, a specific Heroicon, and a dynamic URL using `main_app.post_path`. Requires the Avo resource class and access to the `record` object and Rails URL helpers (`main_app`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/discreet-information.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = {\n    tooltip: -> { \"Product is #{record.published_at ? \"published\" : \"draft\"}\" },\n    icon: -> { \"heroicons/outline/#{record.published_at ? \"eye\" : \"eye-slash\"}\" }\n    url: -> { main_app.post_path record }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Dynamic Filters in Avo using Ruby\nDESCRIPTION: Shows two ways to define dynamic filters in Avo using Ruby: by changing the field's `filterable` option from `true` to an empty hash to enable customization, and by using the `dynamic_filter` method inside the `filters` method. These are foundational methods for setting up custom filters with configurable options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nfield :first_name,\n  as: :text,\n  filterable: true # [!code --]\n  filterable: { } # [!code ++]\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef filters\n  # ...\n  dynamic_filter :first_name\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Form Inputs in Avo Resource Tool Partial - ERB\nDESCRIPTION: Illustrates how to add standard and nested form inputs within a resource tool partial using the `form` object, which is available on resource create/edit pages. It shows examples for a basic text field, multiple text fields, and nested fields using `form.fields_for`. Comments indicate whether specific nested fields are permitted by `extra_params`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resource-tools.md#_snippet_4\n\nLANGUAGE: ERB\nCODE:\n```\n<!-- _fish_information.html.erb -->\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new(title: @resource.model.name) do |c|\n    <% c.with_tools do %>\n      <%= a_link('/admin', icon: 'heroicons/solid/academic-cap', style: :primary) do %>\n        Primary\n      <% end %>\n    <% end %>\n\n    <% c.with_body do %>\n      <div class=\"flex flex-col p-4 min-h-24\">\n        <div class=\"space-y-4\">\n          <% if form.present? %>\n            <%= form.label :fish_type %>\n            <%= form.text_field :fish_type, value: 'default type of fish', class: input_classes %>\n            <br>\n\n            <%= form.label :properties %>\n            <%= form.text_field :properties, multiple: true, value: 'property 1', class: input_classes %>\n            <%= form.text_field :properties, multiple: true, value: 'property 2', class: input_classes %>\n            <br>\n\n            <% form.fields_for :information do |information_form| %>\n              <%= form.label :information_name %>\n              <%= information_form.text_field :name, value: 'information name', class: input_classes %>\n              <div class=\"text-gray-600 mt-2 text-sm\">This is going to be passed to the model</div>\n              <br>\n              <%= form.label :information_history %>\n              <%= information_form.text_field :history, value: 'information history', class: input_classes %>\n              <div class=\"text-gray-600 mt-2 text-sm\">This is going to be passed to the model</div>\n              <br>\n              <%= form.label :information_age %>\n              <%= information_form.text_field :age, value: 'information age', class: input_classes %>\n              <div class=\"text-gray-600 mt-2 text-sm\">This is NOT going to be passed to the model</div>\n            <% end %>\n          <% end %>\n        </div>\n      </div>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Specific File Field Authorization Methods in Avo Ruby Policies\nDESCRIPTION: Demonstrates how to implement granular file attachment authorization in policy classes by defining general and field-specific methods (`upload_attachments?`, `download_attachments?`, `delete_attachments?`, and also `upload_{FIELD_ID}?`, `download_{FIELD_ID}?`, `delete_{FIELD_ID}?`). Uses `define_method` to dynamically create permissions for specific file fields, allowing flexible control over file operations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef upload_attachments?\n  true\nend\n\n def download_attachments?\n  true\nend\n\n def delete_attachments?\n  true\nend\n\n [:cover_photo, :audio].each do |file|\n  [:upload, :download, :delete].each do |action|\n    define_method \"#{action}_#{file}?\" do\n      true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Avo Record Link Gem in Ruby\nDESCRIPTION: This snippet demonstrates adding the `avo-record_link_field` gem to the Gemfile to enable the record link functionality. This gem provides the necessary functionality for the record link field to work within the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/record_link.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"avo-record_link_field\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Metric Card in Ruby\nDESCRIPTION: Defines a metric card class for displaying a single numeric value related to users, with standard settings like id, label, description, size, and display header. Uses lambda functions for dynamic label and description, ensuring configurable and dynamic card rendering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = \"users_metric\"\n  self.label = -> { \"Users count\" }\n  self.description = -> { \"Users description\" }\n  self.cols = 1\n  self.rows = 1\n  self.display_header = true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Ordering Actions in Avo Resource Using Ruby\nDESCRIPTION: This snippet configures ordering functionality for a resource in Avo Admin by assigning a hash to the self.ordering class attribute. It defines actions (higher, lower, to_top, to_bottom) as lambda functions that invoke methods provided by the acts_as_list gem, allowing record reordering within the resource. Dependencies include Avo and acts_as_list; each action uses the current record object and can also access resource, options, and params. Buttons are shown as a popover in the index view, and expected input is user interaction for reordering; expected output is a reordered list of records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/records-reordering.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseLinkResource < Avo::BaseResource\n  self.ordering = {\n    visible_on: :index,\n    actions: {\n      higher: -> { record.move_higher },\n      lower: -> { record.move_lower },\n      to_top: -> { record.move_to_top },\n      to_bottom: -> { record.move_to_bottom },\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing include_blank - Ruby\nDESCRIPTION: This snippet demonstrates the usage of the `include_blank` option within a `select` field definition in Avo with Ruby.  It uses a string to display as the blank option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/select.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project_resource.rb\nclass ProjectResource < Avo::BaseResource\n  field :type,\n    as: :select,\n    include_blank: \\'No type\\'\nend\n```\n\n----------------------------------------\n\nTITLE: Making an existing Avo action standalone in Ruby\nDESCRIPTION: This Ruby snippet shows how to configure an existing Avo action to be standalone.  It sets `self.standalone = true` within the action class. This bypasses the requirement to select records before the action can be used. It requires the Avo gem and a valid Avo action class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/generate.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/export_users.rb\n\nclass Avo::Actions::ExportUsers < Avo::BaseAction\n  self.name = \"Export Users\"\n  self.standalone = true\n\n  # ... rest of the action code\nend\n```\n\n----------------------------------------\n\nTITLE: Testing an Avo Action - Ruby/RSpec\nDESCRIPTION: This Ruby code utilizes RSpec to test the `ReleaseFish` Avo action. It sets up a test environment with a fish object, a user, and a resource object. It defines a test case that simulates the action being performed with specific arguments. It then sets expectations for the action to receive the `succeed` method and the `release` method on the fish model and calls the action handle method with provided args.  Dependencies include Rails, RSpec, and the Avo gem. It takes an `args` hash as an input, including fields, current user, the resource and models. The output is the successful execution of the action. It is constrained by the proper set up of the testing environment.  It requires the model to have a release method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/testing.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rails_helper'\n\nRSpec.feature ReleaseFish, type: :feature do\n  let(:fish) { create :fish }\n  let(:current_user) { create :user }\n  let(:resource) { UserResource.new.hydrate model: fish }\n\n  it \"tests the dummy action\" do\n    args = {\n      fields: {\n        message: \"Bye fishy!\"\n      },\n      current_user: current_user,\n      resource: resource,\n      models: [fish]\n    }\n\n    action = described_class.new(model: fish, resource: resource, user: current_user, view: :edit)\n\n    expect(action).to receive(:succeed).with \"1 fish released with message 'Bye fishy!'.\"\n    expect(fish).to receive(:release)\n\n    action.handle **args\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example PostResource with custom title and fields\nDESCRIPTION: This code shows a PostResource class with the title set to the name attribute and includes various fields, including text, textarea, file uploads, boolean, belongs to, and tags, demonstrating detailed resource customization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resources.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  self.title = :name\n  self.includes = []\n\n  field :id, as: :id\n  field :name, as: :text, required: true\n  field :body, as: :trix, placeholder: \"Add the post body here\", always_show: false\n  field :cover_photo, as: :file, is_image: true, link_to_resource: true\n  field :is_featured, as: :boolean\n  field :is_published, as: :boolean do |model|\n    model.published_at.present?\n  end\n  field :user, as: :belongs_to, placeholder: \"—\"\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Destroy Success Action in Avo Controller\nDESCRIPTION: Demonstrates how to customize the controller response when a record is successfully destroyed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ndef destroy_success_action\n  respond_to do |format|\n    format.html { redirect_to after_destroy_path, notice: destroy_success_message }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Attachments for Show and Edit Views with `self.single_attachments` in Ruby\nDESCRIPTION: This configuration loads specified attachments only for Show and Edit views, providing performance benefits when editing or viewing records with attachments by reducing unnecessary data loading.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\nself.single_attachments\n```\n\n----------------------------------------\n\nTITLE: Using the 'bare_sidebar' Slot for Unstyled Sidebar Content (ERB)\nDESCRIPTION: Shows how to use the `with_bare_sidebar` slot helper to render sidebar content without the default white background styling, similar to the `bare_content` slot. This allows for custom styling or integrating sidebar content seamlessly with surrounding elements.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-components/avo-panel-component.md#_snippet_7\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_bare_sidebar do %>\n    Something tiny here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Defining Rails STI Models - Ruby\nDESCRIPTION: Defines two Ruby on Rails models, `User` and `SuperUser`, demonstrating a basic Single Table Inheritance setup where `SuperUser` inherits from `User`. Includes a comment showing how querying the parent model returns instances of both classes, illustrating the behavior Avo needs to handle.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\nend\n\n# app/models/super_user.rb\nclass SuperUser < User\nend\n\n# User.all.map(&:class) => [User, SuperUser]\n```\n\n----------------------------------------\n\nTITLE: ExecutionContext Custom Variables Example\nDESCRIPTION: This code shows how to pass custom variables to the `Avo::ExecutionContext`. It instantiates `Avo::ExecutionContext` with a block, a record, a view, and a resource. These variables are then available within the block's execution context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/execution-context.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAvo::ExecutionContext.new(target: &SOME_BLOCK, record: User.first, view: :index, resource: resource).handle\n```\n\n----------------------------------------\n\nTITLE: Example Avo I18n Locale File Structure (YAML)\nDESCRIPTION: Provides a complete example of a YAML locale file showing the typical structure for Avo translations. It includes both `field_translations` and `resource_translations` nested under the Avo namespace for a specific locale key (`pt-BR`). This structure is necessary for Rails' I18n to correctly load and use the translations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/localization.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/locales/avo.pt-BR.yml\npt-BR:\n  avo:\n    field_translations:\n      file:\n        zero: 'arquivos'\n        one: 'arquivo'\n        other: 'arquivos'\n    resource_translations:\n      user:\n        zero: 'usuários'\n        one: 'usuário'\n        other: 'usuários'\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Discreet Information as Badge in Avo (Ruby)\nDESCRIPTION: Configures a custom discreet information item to be displayed as a badge instead of the default icon/tooltip. This is achieved using the `as: :badge` option within the hash.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/discreet-information.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = {\n    tooltip: -> { \"Product is #{record.published_at ? \"published\" : \"draft\"}\" },\n    icon: \"heroicons/outline/academic-cap\",\n    url: -> { main_app. },\n    as: :badge\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Example of HTML with View Value in Stimulus Controllers\nDESCRIPTION: Shows how Avo includes view values in generated HTML for Stimulus controllers to use.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/stimulus-integration.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"space-y-12\" data-model-id=\"280\" data-controller=\"resource-edit course-resource\" data-resource-edit-view-value=\"edit\" data-course-resource-view-value=\"edit\">\n  <!-- The fields and panels -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Sign Out Path for Avo with Ruby\nDESCRIPTION: This snippet sets the sign-out path for Avo’s logout link to align with the Rails scaffolded sessions controller. It assigns the `sign_out_path_name` configuration to `:session_path`, which matches the route for signing out users via the `SessionsController`. This ensures that the sign-out link in Avo points to the correct path for user logout.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rails-authentication-scaffold.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # other pieces of configuration\n\n  # tell Avo how to sign out the authenticated user.\n  config.sign_out_path_name = :session_path\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Avo via Rails Application Template (Shell)\nDESCRIPTION: This shell command uses `bin/rails app:template` to apply an application template located at `https://avohq.io/app-template`. This template automates the steps required to install and configure Avo into the current Rails project, providing a one-command setup.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/installation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbin/rails app:template LOCATION='https://avohq.io/app-template'\n```\n\n----------------------------------------\n\nTITLE: Using Application Helpers Inside Avo\nDESCRIPTION: This snippet shows how to use application helpers within Avo resources. It involves including the helper module in the Avo controller and then referencing the helper methods through the `view_context.controller` object in the resource file. This allows you to reuse existing application logic within your Avo interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/rails-and-hotwire.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/helpers/application_helper.rb\nmodule ApplicationHelper\n  def render_copyright_info\n    \"Copyright #{Date.today.year}\"\n  end\nend\n\n# app/controller/avo/products_controller.rb\nclass Avo::ProductsController < Avo::ResourcesController\n  include ApplicationHelper\nend\n\n# app/avo/resources/products_resource.rb\nclass ProductsResource < Avo::BaseResource\n  field :copyright, as: :text do |model|\n    view_context.controller.render_copyright_info\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaced Resource\nDESCRIPTION: This Ruby code shows how to define an Avo resource for a namespaced model. The model class uses the `model_class` option in this specific case, to specify the model class path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::SuperDooperTrooperModel < Avo::BaseResource\n  self.model_class = \"Super::Dooper::Trooper::Model\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Default-Scoped ActiveRecord Model (Ruby)\nDESCRIPTION: Adds a default_scope to the Project ActiveRecord model to always order records by the 'name' column ascending. This scope is applied to all queries unless explicitly removed. No inputs or parameters; output is automatically-altered query ordering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nclass Project < ApplicationRecord\n  default_scope { order(name: :asc) }\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Confirmation Dialogs on Save in Avo Resources in Ruby\nDESCRIPTION: This setting adds a confirmation prompt before saving a resource by toggling `self.confirm_on_save` to true. It relies on version 3.10.10 or higher and helps prevent accidental saves, adding an extra layer of validation during data updates.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_34\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.confirm_on_save = true\nend\n```\n\n----------------------------------------\n\nTITLE: Ejecting and Customizing Avo Profile Menu Partial Using Bash and ERB\nDESCRIPTION: This code shows how to eject the `_profile_menu_extra.html.erb` partial from Avo for customization by running a Rails generator command using Bash. After ejecting, the user can customize the partial's content with custom ERB templates, potentially adding profile menu items with the `Avo::ProfileItemComponent`. This supports advanced personalization of the profile menu UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:eject --partial :profile_menu_extra\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo License Key and Type in Ruby\nDESCRIPTION: This snippet shows how to configure your Avo license type ('pro') and add your purchased license key within the `config/initializers/avo.rb` file. The license key can be provided directly as a string or fetched from an environment variable.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/licensing.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.license = 'pro'\n  config.license_key = '************************' # or use ENV['AVO_LICENSE_KEY']\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Branding Options in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates the complete branding configuration within the `Avo.configure` block. It sets custom colors for the UI (background and primary shades), chart colors, paths for the logo, logomark, placeholder image, and favicon.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/branding.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.branding = {\n    colors: {\n      background: \"248 246 242\",\n      100 => \"#C5F1D4\",\n      400 => \"#3CD070\",\n      500 => \"#30A65A\",\n      600 => \"#247D43\",\n    },\n    chart_colors: ['#FFB435', \"#FFA102\", \"#CC8102\", '#FFB435', \"#FFA102\", \"#CC8102\"],\n    logo: \"/avo-assets/logo.png\",\n    logomark: \"/avo-assets/logomark.png\",\n    placeholder: \"/avo-assets/placeholder.svg\",\n    favicon: \"/avo-assets/favicon.ico\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Custom TeamUser Resource for Alternate User Representation - Ruby\nDESCRIPTION: Creates an alternate resource named TeamUser for users associated with teams when the default User resource is not suitable. It uses the user's name as the title and defines simpler fields: id as link, name as text, and projects_count as a number. This allows the team users' grid to reflect counts and basic user info distinct from the main User resource representation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/team_user.rb\nclass Avo::Resources::TeamUser < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :name, as: :text\n    field :projects_count, as: :number\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Importing TailwindCSS and Avo Base Styles (CSS)\nDESCRIPTION: This CSS snippet shows the recommended structure for your main Avo Tailwind stylesheet (`app/assets/stylesheets/avo/tailwind.css`). It imports the standard Tailwind layers (`base`, `components`, `utilities`) and, importantly, includes an import for Avo's pre-compiled base styles (`../../../../tmp/avo/avo.base.css`) to ensure that Avo's internal styling is available and correctly ordered relative to Tailwind's layers and any custom styles you define.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tailwindcss-integration.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss/base';\n/* Have all of Avo's custom and plugins styles available. */\n@import '../../../../tmp/avo/avo.base.css';\n@import 'tailwindcss/components';\n@import 'tailwindcss/utilities';\n\n/*\n\n@layer components {\n  .btn-primary {\n    @apply py-2 px-4 bg-blue-200;\n  }\n}\n\n*/\n```\n\n----------------------------------------\n\nTITLE: Passing Data Attributes to Field Wrapper - Avo (ERB)\nDESCRIPTION: This example shows how to provide custom data attributes, such as attaching a StimulusJS controller, to the `field_wrapper` helper with the `data` parameter. This allows for enhanced interactivity via frontend JavaScript. `field_wrapper_args` and the Boolean check component are required. The `data` parameter expects a hash of attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_7\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, data: {controller: \"boolean-check\"} do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Defining Field Translations in a YAML Locale File (YAML)\nDESCRIPTION: This YAML snippet presents configuration for field label translations, matching the translation_key in your Avo field declaration. It uses pluralization rules (zero, one, other), following Rails I18n practices. To function, the file must be placed in your Rails locale path and loaded by Rails. Inputs are keys for each field; outputs are localized field labels in the UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/i18n.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# avo.es.yml\nes:\n  avo:\n    dashboard: 'Dashboard'\n    # ... other translation keys\n    field_translations:\n      file:\n        zero: 'archivos'\n        one: 'archivo'\n        other: 'archivos'\n```\n\n----------------------------------------\n\nTITLE: Setting Resources Visible in `has_many` Associations in Index View\nDESCRIPTION: This snippet controls how many associated records are visible in `has_many` relation index views via `config.via_per_page`. It influences performance and UI display when managing related resources.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.via_per_page = 8\nend\n```\n\n----------------------------------------\n\nTITLE: Using the 'bare_content' Slot in Avo::PanelComponent (ERB)\nDESCRIPTION: Demonstrates how to use the 'bare_content' slot. This is often employed in contexts like Avo's Grid view to display content flush within the container, without the panel's default background or padding.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-components/avo-panel-component.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_bare_content do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring has_one and belongs_to Associations for Avo Record Link in Ruby\nDESCRIPTION: This snippet shows how to define model associations and a custom method in a Ruby on Rails model to return related records for use with the record_link field in Avo. The Comment model can use has_one, belongs_to, or a computed method to retrieve a Post instance. When called, 'Comment.first.post' will return the associated Post object. Ensure ActiveRecord is used and related resources are configured in Avo for proper operation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/record_link.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Comment < ApplicationRecord\n  # Your model must return an instance of a record\n  has_one :post\n  # or\n  belongs_to :post\n  # or\n  def post\n    # trivially find a post\n    Post.find 42\n  end\nend\n\n# Calling the method like so will give us an instance of a Post\nComment.first.post => #<post:0x00000001685bb558 ...>\n\nclass Avo::Resources::Comment < Avo::BaseResource\n  def fields\n    # This will run `record.post` and try to display whatever is returned.\n    field :post, as: :record_link\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Destroy Failure Handling in Avo Controller\nDESCRIPTION: Shows how to customize the controller response when record deletion fails by overriding destroy_fail_action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ndef destroy_fail_action\n  respond_to do |format|\n    format.html { redirect_back fallback_location: params[:referrer] || resources_path(resource: @resource, turbo_frame: params[:turbo_frame], view_type: params[:view_type]), error: destroy_fail_message }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Avo License Validation Payload Structure (Ruby)\nDESCRIPTION: This snippet illustrates the structure of the data payload sent from your Avo installation to the Avo HQ license validation service. It includes details like the license type, key, Avo and Rails versions, Ruby version, environment, request details (IP, host, port), application name, and Avo specific metadata.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/licensing.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# HQ ping payload\n{\n  license: Avo.configuration.license,\n  license_key: Avo.configuration.license_key,\n  avo_version: Avo::VERSION,\n  rails_version: Rails::VERSION::STRING,\n  ruby_version: RUBY_VERSION,\n  environment: Rails.env,\n  ip: current_request.ip,\n  host: current_request.host,\n  port: current_request.port,\n  app_name: Rails.application.class.to_s.split(\"::\").first,\n  avo_metadata: avo_metadata\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting View Component with Custom Scope in Avo\nDESCRIPTION: Command to eject the ResourceIndexComponent with a custom 'admins' scope. This creates a scoped version that can be customized without affecting other uses of the component.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/eject-views.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrails g avo:eject --component Avo::Views::ResourceIndexComponent --scope admins\n```\n\n----------------------------------------\n\nTITLE: Different Queries for Global and Resource Searches\nDESCRIPTION: Shows how to implement different search behaviors for global and resource-specific searches using the params[:global] flag.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Order < Avo::BaseResource\n  self.search = {\n    query: -> {\n      if params[:global]\n        # Perform global search\n        query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n      else\n        # Perform resource search\n        query.ransack(id_eq: params[:q], details_cont: params[:q], m: \"or\").result(distinct: false)\n      end\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Refresh for Metric Card in Ruby\nDESCRIPTION: Configures a metric card to refresh its data automatically at specified intervals, enhancing real-time data display on dashboards. Uses the `refresh_every` attribute with a duration value (e.g., 10 minutes).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = 'users_metric'\n  self.refresh_every = 10.minutes\nend\n```\n\n----------------------------------------\n\nTITLE: Installing FriendlyID Gem (Ruby)\nDESCRIPTION: This snippet demonstrates the installation of the FriendlyID gem. This gem is used for generating pretty URLs and unique IDs. It involves adding the gem to the Gemfile and then running `bundle install`. The version specified is ~> 5.5.0.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/custom-ids.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"friendly_id\", \"~> 5.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Sidebar Data in Vue\nDESCRIPTION: This Vue.js code snippet uses `vitepress` to access and process data from the site's theme configuration, specifically focusing on extracting the sidebar items from the `/3.0/` section of the sidebar configuration. It maps these items to an array of objects, each containing text and a modified link.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\nimport {useData} from 'vitepress'\n  const {site} = useData()\n  const fields = site.value.themeConfig.sidebar['/3.0/']\n    .find((item) => item.text === 'Field types')\n    .items\n    .map((item) => ({\n      text: item.text,\n      link: item.link.replace('.md', '.html')\n    }))\n```\n\n----------------------------------------\n\nTITLE: Accessing meta attributes in application code\nDESCRIPTION: Retrieves the value of a meta attribute (e.g., 'shoe_size') from a user instance via the 'meta' association.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-meta.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\n@user.meta.shoe_size\n```\n\n----------------------------------------\n\nTITLE: Updating Visibility Block Syntax in Avo Actions - Ruby\nDESCRIPTION: This snippet demonstrates how to update the visibility block in Avo actions by removing the block arguments, making the syntax compatible with Avo v2.19 and above. No external dependencies are required. The 'Before' example uses '(resource:, view:)' as arguments; the 'After' version uses an empty block argument list. The change improves forward-compatibility and allows future access to new parameters.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nself.visible = ->(resource:, view:) do\n  true\nend\n\n# After\nself.visible = -> do\n  true\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Account model with 'rolify' integration\nDESCRIPTION: Configures the 'Account' model to include 'rolify' functionality, establishing the necessary associations for role management. The model setup enables assigning roles to accounts within the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rolify-integration.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Account < ApplicationRecord\n  rolify\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Set Map View as Default for Avo Resource Index (Ruby)\nDESCRIPTION: This Ruby snippet within an Avo resource class sets the `default_view_type` attribute to `:map`. This makes the map view the initial display when navigating to the resource's index page in Avo, instead of the standard table view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/map-view.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  self.default_view_type = :map\nend\n```\n\n----------------------------------------\n\nTITLE: Avo HQ License Validation Ping Payload - Ruby\nDESCRIPTION: This Ruby hash describes the payload sent from your Avo instance to the HQ license validation service. It collects runtime environment details including versions, IP, host, and application metadata, which are sent via HTTP for license validation. This occurs at Rails app boot and every hour during use. The payload parameters include license, license_key (string), various version strings, environment (Rails.env), and server/app-specific data. No direct code execution is required; understanding this structure helps debug or customize communication with Avo HQ.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/licensing.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# HQ ping payload\n{\n  license: Avo.configuration.license,\n  license_key: Avo.configuration.license_key,\n  avo_version: Avo::VERSION,\n  rails_version: Rails::VERSION::STRING,\n  ruby_version: RUBY_VERSION,\n  environment: Rails.env,\n  ip: current_request.ip,\n  host: current_request.host,\n  port: current_request.port,\n  app_name: Rails.application.class.to_s.split(\"::\").first,\n  avo_metadata: avo_metadata\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Solid Cache Gem Using Bash\nDESCRIPTION: This shell command installs the 'solid_cache' gem.  It uses the RubyGems package manager, assuming Ruby and RubyGems are already installed on the system. The output is the successful installation of the gem and its dependencies. The command is an alternative installation method other than using Bundler.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cache.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gem install solid_cache\n```\n\n----------------------------------------\n\nTITLE: Configuring fetch_values_from with Proc in Avo HQ\nDESCRIPTION: Sets up a dynamic filter to fetch values from an endpoint using a Proc that evaluates to a string. This provides more flexibility for dynamic endpoint determination.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nfetch_values_from: -> { \"/avo-filters/resources/cities/tags\" }\n```\n\n----------------------------------------\n\nTITLE: Generating an Avo Action\nDESCRIPTION: This command uses the Rails generator to create a new Avo action file. It creates a Ruby file in the `app/avo/actions/` directory with a basic action structure. The generated action requires record selection by default.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/generate.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:action toggle_inactive\n```\n\n----------------------------------------\n\nTITLE: Custom Controller Action for Avo Tools Page\nDESCRIPTION: Defines a controller action within Avo's tools controller to render a custom page, set its title, and add breadcrumb navigation. This facilitates creating custom pages accessible via Avo's interface, leveraging Rails controllers and view rendering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/multitenancy.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::ToolsController < Avo::ApplicationController\n  def custom_page\n    @page_title = \"Your custom page\"\n\n    add_breadcrumb \"Your custom page\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Avo Tags Field with PostgreSQL Array Column - Ruby\nDESCRIPTION: Demonstrates integration of the tags field with a PostgreSQL array column. Defines the field in an Avo resource and shows a database migration that adds a text array column (with an empty array as default) to the underlying courses table. Requires PostgreSQL as DBMS; ensures compatibility with array types for tag storage.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseResource < Avo::BaseResource\n  field :skills, as: :tags\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddSkillsToCourses < ActiveRecord::Migration[6.0]\n  def change\n    add_column :courses, :skills, :text, array: true, default: []\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Assigning Dashboard Name Using String or Proc in Avo with Ruby\nDESCRIPTION: Sets the user-displayed dashboard name either as a fixed string or as a Proc for runtime evaluation (such as using I18n for localization). Requires Avo 3.14.2+ for the Proc syntax. Inputs are static or dynamic expressions; outputs are the dashboard name shown in the UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dashboards.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nself.name = \"Dashy\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\nself.name = -> { I18n.t(\"avo.dashboards.dashy.name\") }\n```\n\n----------------------------------------\n\nTITLE: Sample Avo Resource Tool Partial Structure (ERB)\nDESCRIPTION: Example ERB template for an Avo resource tool partial (`app/views/avo/resource_tools/post_info.html.erb`). It demonstrates using `Avo::PanelComponent` and provides placeholders and comments indicating available variables like `@resource`, `form`, `params`, `current_user`, etc., within which custom fields can be added using Avo helpers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-field-components.md#_snippet_0\n\nLANGUAGE: ERB\nCODE:\n```\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new title: \"Post info\" do |c| %>\n    <% c.with_tools do %>\n      <%= a_link('/avo', icon: 'heroicons/solid/academic-cap', style: :primary) do %>\n        Dummy link\n      <% end %>\n    <% end %>\n    <% c.with_body do %>\n      <div class=\"flex flex-col p-4 min-h-24\">\n        <div class=\"space-y-4\">\n          <h3>🪧 This partial is waiting to be updated</h3>\n          <p>\n            You can edit this file here <code class='p-1 rounded bg-gray-500 text-white text-sm'>app/views/avo/resource_tools/post_info.html.erb</code>.\n          </p>\n          <p>\n            The resource tool configuration file should be here <code class='p-1 rounded bg-gray-500 text-white text-sm'>app/avo/resource_tools/post_info.rb</code>.\n          </p>\n          <%\n            # In this partial, you have access to the following variables:\n            # tool\n            # @resource\n            # @resource.model\n            # form (on create & edit pages. please check for presence first)\n            # params\n            # Avo::Current.context\n            # current_user\n          %>\n        </div>\n      </div>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Field-Specific Options to ProgressBarField in Avo - Ruby\nDESCRIPTION: Shows how to extend the ProgressBarField class by adding accessor attributes for 'max', 'step', 'display_value', and 'value_suffix'. The initializer sets default values or assigns them from arguments, enabling configuration of behavior and appearance. This enhances the field's flexibility for rendering and interaction.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Fields::ProgressBarField < Avo::Fields::BaseField\n  attr_reader :max\n  attr_reader :step\n  attr_reader :display_value\n  attr_reader :value_suffix\n\n  def initialize(name, **args, &block)\n    super(name, **args, &block)\n\n    @max = args[:max] || 100\n    @step = args[:step] || 1\n    @display_value = args[:display_value] || false\n    @value_suffix = args[:value_suffix] || nil\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Branding Colors\nDESCRIPTION: This code snippet configures the colors used within the Avo application's UI. It sets the background color and several color variants, identified by numeric keys. The color format can be hex or rgb. These colors are used throughout the interface to provide visual consistency and branding elements.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/branding.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.branding = {\n    colors: {\n      background: \"248 246 242\",\n      100 => \"#C5F1D4\",\n      400 => \"#3CD070\",\n      500 => \"#30A65A\",\n      600 => \"#247D43\",\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Partial Card in Ruby\nDESCRIPTION: This snippet demonstrates how to create a partial card in Avo.  It sets the card's `id`, `cols`, `rows`, and `partial` attributes to define its structure and content.  The `partial` attribute specifies the path to the ERB file that will render the card's content.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Cards::ExampleCustomPartial < Avo::Cards::PartialCard\n  self.id = \"users_custom_card\"\n  self.cols = 1\n  self.rows = 4\n  self.partial = \"avo/cards/custom_card\"\n  # self.display_header = true\nend\n```\n\n----------------------------------------\n\nTITLE: Keeping Filters Panel Open in Avo Resource (Ruby)\nDESCRIPTION: Prevents the filters panel from closing automatically when changing filter values in the Course resource. The self.keep_filters_panel_open option is set to true, with fields and filters defined explicitly. Requires Avo::Filters::CourseCountryFilter and CourseCityFilter dependencies. Inputs are filter interactions in the UI, output is persistent filter panel state.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Course < Avo::BaseResource\n  self.keep_filters_panel_open = true\n\n  def fields\n    field :id, as: :id\n    field :name, as: :text\n  end\n\n  def filters\n    filter Avo::Filters::CourseCountryFilter\n    filter Avo::Filters::CourseCityFilter\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Field Values in Avo Admin - Ruby\nDESCRIPTION: This snippet demonstrates how to format the value of a field using the `format_using` block. This block can be used to process the database value and returns formatted data. The `value` argument is removed since version 2.36 and now you have access to a bunch of variables inside this block, all the defaults that [`Avo::ExecutionContext`](../3.0/execution-context.html) provides plus `value`, `model`, `key`, `resource`, `view` and `field`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nfield :is_writer, as: :text, format_using: -> {\n  if view == :new || view == :edit\n    value\n  else\n    value.present? ? '👍' : '👎'\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Create Success Action in Avo Controller\nDESCRIPTION: Demonstrates how to customize the controller response when a record is successfully created by overriding create_success_action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_success_action\n  respond_to do |format|\n    format.html { redirect_to after_create_path, notice: create_success_message}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Trix Editor Field with Default Configuration in Ruby\nDESCRIPTION: Defines a Trix editor field named 'body' associated with a text or string database column, storing the resulting HTML content. This snippet illustrates the minimal setup to render the Trix WYSIWYG editor in a form without any attachment options specified. It depends on the Ruby application having the Trix editor integrated and supports rendering HTML content stored in the specified field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/trix.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :trix\n```\n\n----------------------------------------\n\nTITLE: Enabling Search for Belongs To Associations in Avo (Ruby)\nDESCRIPTION: Configures a standard `belongs_to` association named `:user` to be searchable by adding the `searchable: true` option within the Avo resource definition. This replaces the default dropdown with a search interface, suitable for associations with many records. Requires search configuration on the target resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/belongs_to.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.title = :id\n\n  def fields\n    field :id, as: :id\n    field :body, as: :textarea\n\n    field :user, as: :belongs_to, searchable: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Restricting File Types with accept Option in Ruby\nDESCRIPTION: Configures a file input field to accept only specific file types using the 'accept' option. This example limits uploads to only image files using the 'image/*' MIME type pattern.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/file_options_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :cover_video, as: :file, accept: \"image/*\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Suggestions with Avatars in Ruby\nDESCRIPTION: Demonstrates using more complex objects for suggestions that include values, labels, and avatars for each suggestion.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post.rb\nclass Post < ApplicationRecord\n  def self.tags_suggestions\n    # Example of an array of more advanced objects\n    [\n      {\n        value: 1,\n        label: 'one',\n        avatar: 'https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n      },\n      {\n        value: 2,\n        label: 'two',\n        avatar: 'https://images.unsplash.com/photo-1567254790685-6b6d6abe4689?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n      },\n      {\n        value: 3,\n        label: 'three',\n        avatar: 'https://images.unsplash.com/photo-1560765447-da05a55e72f8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n      },\n    ]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a MiniPost Resource with Model Override\nDESCRIPTION: This command generates a resource named 'mini-post' and associates it with the existing 'Post' model class. This allows the creation of an alternative resource for the same model. The model class parameter allows you to use an existing model with the generated resource, avoiding duplication.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:resource mini-post --model-class post\n```\n\n----------------------------------------\n\nTITLE: Defining Code Field with codemirror in Ruby\nDESCRIPTION: This Ruby code snippet defines a code field using the `:code` as: option, leveraging the codemirror library for the code editor. It sets the theme and language for syntax highlighting. The snippet requires the Avo framework and codemirror to be available. It takes theme and language as arguments, enabling customization of the editor's appearance and language.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/code.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :custom_css, as: :code, theme: 'dracula', language: 'css'\n```\n\n----------------------------------------\n\nTITLE: Enabling inline display of order buttons in Avo resource\nDESCRIPTION: This code configures the resource to display ordering buttons inline in the index view by setting 'display_inline: true'. This makes the reordering controls always visible, streamlining frequent reordering scenarios.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/records-reordering.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  self.ordering = {\n    display_inline: true,\n    visible_on: :index,\n    actions: {\n      higher: -> { record.move_higher },\n      lower: -> { record.move_lower },\n      to_top: -> { record.move_to_top },\n      to_bottom: -> { record.move_to_bottom },\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Running Bundle Install in Bash\nDESCRIPTION: This Bash command executes the Bundler tool to install the gems defined in the Gemfile of a Ruby on Rails project. The primary dependency is Bundler, which must be installed.  The input is the list of gems in the Gemfile.  The expected output is the successful installation of the gems and their dependencies, including 'solid_cache' if added in the Gemfile.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cache.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle\n```\n\n----------------------------------------\n\nTITLE: Creating Account Tenant Migration (Ruby)\nDESCRIPTION: Generates a database migration file to create the 'accounts' table, which serves as the tenant model. The table includes fields for 'name' and 'subdomain', along with timestamps and indexes for efficient lookup and uniqueness of the subdomain. Requires running 'rails db:migrate' to apply the schema change.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/acts_as_tenant_integration.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Migration\nclass CreateAccounts < ActiveRecord::Migration[7.1]\n  def change\n    create_table :accounts do |t|\n      t.string :name\n      t.string :subdomain\n\n      t.timestamps\n    end\n\n    add_index :accounts, :subdomain, unique: true\n    add_index :accounts, :created_at\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Lazy Loader for API Data Pagination in Avo\nDESCRIPTION: Creates a LazyLoader class that simulates ActiveRecord query interface but works with API data. Supports pagination, filtering, and counting operations necessary for Avo to display data properly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/rest-api-integration.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass LazyLoader\n  def initialize(klass)\n    @offset, @limit = nil\n    @params = {}\n    @items = []\n    @count = 0\n    @klass = klass\n  end\n\n  def where(query)\n    @params = @params.merge(query)\n    self\n  end\n\n  def items\n    all\n    @items\n  end\n\n  def count(_attr = nil)\n    all\n    @count\n  end\n\n  def offset(value)\n    @offset = value\n    self\n  end\n\n  def limit(value)\n    @limit = value\n    items[@offset, @limit]\n  end\n\n  def all\n    api_response\n    self\n  end\n\n  def to_sql\n    \"\"\n  end\n\n  private\n\n  def api_response\n    @api_response ||= begin\n      json = @klass.all(@params)\n      json.fetch(@klass.root_key, []).map do |obj|\n        @items << @klass.new(obj)\n      end\n      @count = json.fetch(@klass.count_key, @items.size)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Avo under nested path in Rails routes\nDESCRIPTION: Shows how to correctly mount the Avo engine under a nested route like `/uk/admin`, emphasizing route ordering and scope placement to ensure proper URL structure and engine behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # other routes\n\n  authenticate :user, ->(user) { user.is_admin? } do\n    scope :uk do\n      scope :admin do\n        get \"dashboard\", to: \"avo/tools#dashboard\" # custom tool added before engine\n      end\n\n      mount Avo::Engine, at: Avo.configuration.root_path # engine mounted last\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Development Unauthorized Action Log (Bash)\nDESCRIPTION: Provides an example of the log output generated in the development environment when a user attempts an unauthorized action within Avo, including details about the policy, action, user, and record involved.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nweb     | [Avo->] Unauthorized action 'reorder?' for 'UserPolicy'\nweb     | user: gid://dummy/User/20\nweb     | record: gid://dummy/User/31\n```\n\n----------------------------------------\n\nTITLE: Enabling Direct File Uploads in Ruby Form Fields\nDESCRIPTION: Configures a file field to use direct uploads to a cloud provider, bypassing the application server. Prerequisites include a Ruby on Rails setup with a 'pro' license and cloud storage integration. The 'direct_upload' option helps manage large files and optimizes performance by offloading server workload during uploads.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/file_options_common.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :cover_video, as: :file, direct_upload: true\n```\n\n----------------------------------------\n\nTITLE: Embedding Markdown Help Content in Ruby Help Attribute using Custom Renderer\nDESCRIPTION: Shows how to assign Markdown-formatted help text to a Ruby attribute using the 'markdown_help' function defined in the previous code. The Markdown content includes headers, paragraphs, code blocks, inline code, and list items. This helps render styled help documentation within the application. Dependencies include the module with the custom renderer; it is used to generate styled HTML output from Markdown content.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/use-markdown-in-help-attributes.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :description_copy, as: :markdown,\n    help: markdown_help(<<~MARKDOWN\n      # Dog\n      ## Cat\n      ### bird\n      paragraph about hats **bold hat**\n\n      ~~~\n      class Ham\n        def wow\n          puts \"wow\"\n        end\n      end\n      ~~~\n\n      `code thinger`\n\n      - one\n      - two\n      - three\n    MARKDOWN\n    )\n```\n\n----------------------------------------\n\nTITLE: Using meta option for passing arbitrary data in Ruby\nDESCRIPTION: Sends custom data to fields, which is useful for custom fields or when using custom components with built-in fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\n# meta as a hash\nfield :status,\n  as: :custom_status,\n  meta: {foo: :bar}\n```\n\n----------------------------------------\n\nTITLE: Example ERB Template for Custom Avo Profile Menu Items\nDESCRIPTION: This ERB snippet provides an example link rendering inside the customized profile menu partial using Avo's `ProfileItemComponent`. It demonstrates usage of this component with parameters for label, path, and icon, which helps in building consistent profile menu items in a Rails view template.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_27\n\nLANGUAGE: erb\nCODE:\n```\n<%# Example link below %>\n<%#= render Avo::ProfileItemComponent.new label: 'Profile', path: '/profile', icon: 'user-circle' %>\n```\n\n----------------------------------------\n\nTITLE: Example Rails Model Methods for Dynamic Filter Options (Ruby)\nDESCRIPTION: Provides an example of a Ruby on Rails model defining class methods to supply data for dynamic filter options. These methods can be used by Avo filters to populate dropdowns or other filter controls.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/models/course.rb\nclass Course < ApplicationRecord\n  def self.countries\n    [\"USA\", \"Japan\", \"Spain\", \"Thailand\"]\n  end\n\n  def self.cities\n    {\n      USA: [\"New York\", \"Los Angeles\", \"San Francisco\", \"Boston\", \"Philadelphia\"],\n      Japan: [\"Tokyo\", \"Osaka\", \"Kyoto\", \"Hiroshima\", \"Yokohama\", \"Nagoya\", \"Kobe\"],\n      Spain: [\"Madrid\", \"Valencia\", \"Barcelona\"],\n      Thailand: [\"Chiang Mai\", \"Bangkok\", \"Phuket\"]\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Approved Scope on Comments Model in Ruby\nDESCRIPTION: Defines an ActiveRecord scope named \"approved\" on the Comment model that filters comments with the approved attribute set to true. The Comment model also declares an optional belongs_to association with the User model. This sets up the backend filtering logic to be used in resource scoping.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/scopes_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :user, optional: true\n\n  scope :approved, -> { where(approved: true) }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Position Attribute for Drag and Drop\nDESCRIPTION: Specifies a custom position attribute for drag-and-drop functionality when the default position attribute name is not used in the model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/records-reordering.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nself.ordering = {\n  display_inline: true,\n  visible_on: %i[index association], # :index or :association or both\n  position: -> { record.position_in_list },\n  drag_and_drop: true,\n  actions: {\n    higher: -> { record.move_higher }, # has access to record, resource, options, params\n    lower: -> { record.move_lower },\n    to_top: -> { record.move_to_top },\n    to_bottom: -> { record.move_to_bottom },\n    insert_at: -> { record.insert_at position }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Override update_success_message - Ruby\nDESCRIPTION: This snippet shows how to override the `update_success_message` method. This defines the success message displayed to the user upon a successful update action. It utilizes internationalization through the `t` helper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_success_message\n  \"#{@resource.name} #{t(\"avo.was_successfully_updated\")}.\" \nend\n```\n\n----------------------------------------\n\nTITLE: Add Skills Column to Courses Table - Ruby Migration\nDESCRIPTION: Adds a `skills` column to the `courses` table as a text array with a default value of an empty array. This facilitates storing multiple skills as tags for each course. Requires ActiveRecord and a database connection.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddSkillsToCourses < ActiveRecord::Migration[6.0]\n  def change\n    add_column :courses, :skills, :text, array: true, default: []\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Options to a Card from an Avo Dashboard in Ruby\nDESCRIPTION: Demonstrates passing arbitrary custom options to a card instance from within a dashboard definition. The `Dashy` dashboard includes two `UsersCount` cards; the second instance receives an `options` hash `{ active_users: true }` to modify its behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Dashy < Avo::Dashboards::BaseDashboard\n  self.id = \"dashy\"\n  self.name = \"Dashy\"\n\n  card UsersCount\n  card UsersCount, options: {\n    active_users: true\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Pagination Configuration in Avo (Ruby)\nDESCRIPTION: Configures default pagination settings for Avo using a lambda assigned to `config.pagination` in the initializer. This example dynamically sets the pagination `type` to `:countless`, allowing for more complex logic if needed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_28\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.pagination = -> do\n  {\n    type: :countless,\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Alert Dismiss Time in Avo Using Ruby\nDESCRIPTION: This snippet demonstrates how to configure the alert dismissal duration in a Ruby on Rails application using the Avo configuration block. It sets the alert_dismiss_time parameter, which controls how long alerts stay visible in milliseconds before automatically disappearing. The default value is 5000ms, and this example shows it being changed to 8000ms. This is useful for customizing user interface behavior related to notifications.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.alert_dismiss_time = 8000\nend\n```\n\n----------------------------------------\n\nTITLE: Index Field Wrapper Component Usage with Options\nDESCRIPTION: Defines how to use the Index <index_field_wrapper> component or helper with specific options such as dash_if_blank, center_content, and flush. Demonstrates passing parameters to control display and styling of index fields, including rendering boolean check components.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-wrappers.md#_snippet_0\n\nLANGUAGE: ERB\nCODE:\n```\n<%= index_field_wrapper **field_wrapper_args, dash_if_blank: false do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Creating Form Actions in the Avo Profile Menu\nDESCRIPTION: Demonstrates how to add a form-based link to the profile menu that uses POST method and includes custom parameters. This example shows a custom sign-out implementation that posts to a Rails session destruction path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.profile_menu = -> {\n    link_to \"Sign out\", path: main_app.destroy_user_session_path, icon: \"user-circle\", method: :post, params: {custom_param: :here}\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Timeline Tool to Resource Sidebar\nDESCRIPTION: Configure a resource to display a timeline of activities in the sidebar using the Avo::ResourceTools::Timeline tool.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Product < Avo::BaseResource\n  self.audit_logging = {\n    activity: true\n  }\n\n  def fields\n    main_panel do\n      field :id, as: :id, link_to_record: true\n      field :name, as: :text, link_to_record: true\n      field :price, as: :number, step: 1\n\n      sidebar do\n        tool Avo::ResourceTools::Timeline\n      end\n    end\n\n    field :avo_activities, as: :has_many\n  end\n\n  def actions\n    action Avo::Actions::ChangePrice\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Changing Avo Configuration to Use Root Path in Ruby\nDESCRIPTION: This snippet shows how to modify the Avo configuration in the initializer file to set the root_path to '/' instead of the default '/avo'. This change makes Avo run at the root URL of your application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/run-avo-on-the-root-path.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  # other pieces of configuration\n\n  # Change the path to `/` to make it the root path\n  config.root_path = '/'\nend\n```\n\n----------------------------------------\n\nTITLE: Updating TailwindCSS CSS import in Stylesheet\nDESCRIPTION: This CSS snippet replaces the previous CSS imports with TailwindCSS 4 compatible imports, including the base, components, utilities, and custom styles from Avo. It also contains commented examples for custom @layer definitions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tailwind-4-migration.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n/* app/assets/stylesheets/avo/avo.tailwind.css */\n@import 'tailwindcss/base';\n@import 'tailwindcss';\n@import '../../../../tmp/avo/avo.base.css';\n@import 'tailwindcss/components';\n@import 'tailwindcss/utilities';\n\n/*\n@layer components {\n  .btn-primary {\n    @apply py-2 px-4 bg-blue-200;\n  }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Heading field in Avo (Ruby)\nDESCRIPTION: Illustrates defining a Heading field whose content is determined by a Ruby block. Note that computed headings are only rendered on the Show view and will not appear on Edit or Create forms.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/heading.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :some_id, as: :heading do\n  \"user information\"\nend\n```\n\n----------------------------------------\n\nTITLE: Showing/Hiding Fields with Visibility Block - Ruby\nDESCRIPTION: Demonstrates how to dynamically show or hide a field using a `visible` block. The block receives the `resource` and optionally the `context`. The field `is_featured` is shown based on whether the user is an admin or based on other conditions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfield :is_featured, as: :boolean, visible: -> (resource:) { context[:user].is_admin? }  # show field based on the context object\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfield :is_featured, as: :boolean, visible: -> (resource:) { resource.name.include? 'user' } # show field based on the resource name\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfield :is_featured, as: :boolean, visible: -> (resource:) { resource.model.published_at.present? } # show field based on a model attribute\n```\n\n----------------------------------------\n\nTITLE: Customizing Grid View Styles in Avo (Ruby)\nDESCRIPTION: This snippet shows how to customize the appearance of grid view cards using the `html` option.  It configures the `grid_view` class attribute, defining an `html` block. Within the `html` block, you specify styling options for different elements like title, body, and cover using TailwindCSS classes. The provided example sets a background color and rounded corners for the title and body elements and applies a blur effect to the cover image.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/grid-view.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.grid_view = {\n    card: -> do\n      {\n        cover_url:\n          if record.cover_photo.attached?\n            main_app.url_for(record.cover_photo.url)\n          end,\n        title: record.name,\n        body: record.truncated_body\n      }\n    end,\n    html: -> do\n      {\n        title: {\n          index: {\n            wrapper: {\n              classes: \"bg-blue-50 rounded-md p-2\"\n            }\n          }\n        },\n        body: {\n          index: {\n            wrapper: {\n              classes: \"bg-gray-50 rounded-md p-1\"\n            }\n          }\n        },\n        cover: {\n          index: {\n            wrapper: {\n              classes: \"blur-sm\"\n            }\n          }\n        }\n      }\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Spell Checker for EasyMDE Field in Avo (Ruby)\nDESCRIPTION: This snippet shows how to enable the built-in spell checker for an `easy_mde` field in Avo. By setting the `spell_checker` option to `true`, the editor will provide spell-checking functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/easy_mde.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :description, as: :easy_mde, spell_checker: true\n```\n\n----------------------------------------\n\nTITLE: Declaring Rhino Field in Avo (Ruby)\nDESCRIPTION: This Ruby code snippet declares a field named `body` within the Avo framework, utilizing the `:rhino` field type. This configures the field to use the Rhino Editor for rich text input. The field leverages the capabilities of TipTap, ActiveStorage, ActionText, and the Media Library. The `as: :rhino` part signifies the use of the Rhino editor for the specific field. It assumes the Avo framework is initialized and configured correctly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/rhino.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :rhino\n```\n\n----------------------------------------\n\nTITLE: Using Path Helpers in Rails Engine with Avo\nDESCRIPTION: This snippet demonstrates how to reference URL paths within the Rails engine context by prefixing with 'avo.' for resource paths and 'main_app.' for main application paths, ensuring proper path resolution in embedded environments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resource-tools.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n# For Avo paths\navo.resources_posts_path(1)\n\n# For main app paths\nmain_app.posts_path(1)\n```\n\n----------------------------------------\n\nTITLE: Overriding Base Card Settings from an Avo Dashboard in Ruby\nDESCRIPTION: Illustrates overriding default card settings like `label`, `description`, grid dimensions (`cols`, `rows`), and `refresh_every` interval directly from the dashboard definition when declaring a card instance. This allows reusing card logic (like `UsersCount`) with different presentations and behaviors.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Dashy < Avo::Dashboards::BaseDashboard\n  self.id = \"dashy\"\n  self.name = \"Dashy\"\n\n  card UsersCount\n  card UsersCount,\n    label: \"Active users\",\n    description: \"Active users count\",\n    cols: 2,\n    rows: 2,\n    refresh_every: 2.minutes,\n    options: {\n      active_users: true\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Stimulus Controller GIF Illustration\nDESCRIPTION: An image demonstrates the 'hidden-input' Stimulus controller managing the show/hide functionality of the color display block, providing visual context for the interactive behavior described in the component.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_12\n\nLANGUAGE: Image\nCODE:\n```\n ![:src=\"('/assets/img/stimulus/hidden_input_color.gif')\" alt=\"Hidden input controller\" class=\"border mb-4\" ]\n```\n\n----------------------------------------\n\nTITLE: Cover Photo Source with Symbol (Ruby)\nDESCRIPTION: This sets the cover photo source using a symbol, `:cover_photo`. This will cause Avo to run `record.cover_photo` to fetch the image. It's a simple way to use a direct attribute of the record as the cover photo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cover-and-profile-photos.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nself.cover_photo = {\n  source: :cover_photo # this will run `record.cover_photo`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default and Force Locale in Ruby on Rails\nDESCRIPTION: Defines methods to set the application's locale globally via params or temporarily for a specific request, utilizing I18n.locale and I18n.default_locale. Dependencies include Rails' I18n module; key parameters are :set_locale and :force_locale.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multilingual-content.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ndef set_default_locale\n  I18n.locale = params[:set_locale] || I18n.default_locale\n  I18n.default_locale = I18n.locale\nend\n\ndef set_force_locale\n  if params[:force_locale].present?\n    initial_locale = I18n.locale.to_s.dup\n    I18n.locale = params[:force_locale]\n    yield\n    I18n.locale = initial_locale\n  else\n    yield\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customization Options for the CodeMirror Code Field\nDESCRIPTION: A detailed list of customization options available for the CodeMirror code editor, including theme, language, height, tab size, indentation method, and line wrapping. Each option describes default values, possible settings, and links to themes or additional resources, enabling tailored code editing experiences.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/code.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- **theme**: Sets the editor's color theme; defaults to `'material-darker'` with choices like `'eclipse'` and `'dracula'`. \n- **language**: Specifies syntax highlighting language, defaulting to `'javascript'`, with options like `'css'` and `'ruby'`.\n- **height**: Adjusts editor height, default is `'auto'`; can be set in pixels.\n- **tab_size**: Defines the number of spaces per tab, default is `2`.\n- **indent_with_tabs**: Chooses indentation method; default is `false` (spaces).\n- **line_wrapping**: Enables or disables line wrapping; default is `true`.\n```\n\n----------------------------------------\n\nTITLE: Enabling Sortable Fields in Avo Admin - Ruby\nDESCRIPTION: This snippet adds the `sortable` option to the `field` definition. This allows the field to be sortable in the <Index /> view of the admin panel. The sortable option is set to `true`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, sortable: true\n```\n\n----------------------------------------\n\nTITLE: Add prefixed ID to ActiveRecord model\nDESCRIPTION: Adds the `has_prefix_id` method to the ActiveRecord model to enable autogeneration of prefixed IDs. It specifies `:post` as the prefix to be used for the IDs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/custom-ids.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post.rb\nclass Post < ApplicationRecord\n  has_prefix_id :post\nend\n```\n\n----------------------------------------\n\nTITLE: Adding account_id Column to Users Migration (Ruby)\nDESCRIPTION: Creates a database migration to add an 'account_id' column and an index to the existing 'users' table. This column establishes the foreign key relationship linking users to their respective tenant accounts. If existing users need to be migrated, the column can be made nullable initially. Requires running 'rails db/migrate'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/acts_as_tenant_integration.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddAccountToUsers < ActiveRecord::Migration\n  def up\n    add_column :users, :account_id, :integer # if we have existing user set null to true then update the data using seed\n    add_index  :users, :account_id\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Model-Based Array Suggestions for Tags - Ruby\nDESCRIPTION: Shows how to implement more advanced suggestions for the tags field, returning an array of objects that include value, label, and avatar keys. Designed for use with Avo tags fields accepting complex dropdown suggestions. The method should be class-level and return an array of hashes; these can include user avatars for better UX in suggestion dropdowns.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  def self.tags_suggestions\n    [\n      {\n        value: 1,\n        label: 'one',\n        avatar: 'https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n      },\n      {\n        value: 2,\n        label: 'two',\n        avatar: 'https://images.unsplash.com/photo-1567254790685-6b6d6abe4689?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n      },\n      {\n        value: 3,\n        label: 'three',\n        avatar: 'https://images.unsplash.com/photo-1560765447-da05a55e72f8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n      },\n    ]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding avatar to search results (Pro feature)\nDESCRIPTION: Shows how to enhance search results with avatars using the as_avatar option, which is a Pro feature.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/search.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  self.title = :name\n  self.search_query = -> do\n    scope.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n  end\n\n  field :id, as: :id\n  field :name, as: :text, required: true, as_label: true\n  field :complex_name, as: :text, hide_on: :all, as_label: true do |model|\n    \"[#{model.id}]#{model.name}\"\n  end\n  field :excerpt, as: :text, as_description: true do |model|\n    ActionView::Base.full_sanitizer.sanitize(model.body).truncate 130\n  rescue\n    \"\"\n  end\n  field :cover_photo, as: :file, is_image: true, as_avatar: :rounded\nend\n```\n\n----------------------------------------\n\nTITLE: Registering resource tool in Avo\nDESCRIPTION: This code snippet shows how to define nested fields and register the tool.  This snippet registers the `NestedFishReviews` resource tool in the `Avo::Resources::Fish` resource, displaying it only on the 'new' view. It defines the `reviews` field as `has_many`, enabling the display of the nested records. The `only_on: :new` parameter ensures that the tool appears only on the creation form.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/nested-records-when-creating.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  # other fields actions, filters and more\n\n  def fields\n    field :reviews, as: :has_many\n\n    tool Avo::ResourceTools::NestedFishReviews, only_on: :new\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Summarizable Field Definition in Avo using Ruby\nDESCRIPTION: This code snippet shows how to enable the `summarizable` option for select and badge fields to generate a visual summary of data distribution in the table header.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\ndef fields\n  field :status, as: :select, summarizable: true\n  field :status, as: :badge, summarizable: true\nend\n```\n\n----------------------------------------\n\nTITLE: Include Hashid Rails in ActiveRecord model\nDESCRIPTION: Includes the `Hashid::Rails` module in the ActiveRecord model to enable hashid functionality. This allows the model to generate and use hashids for its IDs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/custom-ids.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post.rb\nclass Post < ApplicationRecord\n  include Hashid::Rails\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo's TailwindCSS with Rakefile\nDESCRIPTION: This Ruby code snippet modifies the Rakefile to ensure the necessary tasks are executed in the correct order during the asset precompilation process. It adds dependencies for the `avo:sym_link` and `avo:yarn_install` tasks and ensures the `yarn avo:tailwindcss` command runs during compilation. Dependencies include the Rake library and other tasks defined in the project.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tailwindcss-integration.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# When running `rake assets:precompile` this is the order of events:\n# 1 - Task `avo:yarn_install`\n# 2 - Task `avo:sym_link`\n# 3 - Cmd  `yarn avo:tailwindcss`\n# 4 - Task `assets:precompile`\nRake::Task[\"assets:precompile\"].enhance([\"avo:sym_link\"])\nRake::Task[\"avo:sym_link\"].enhance([\"avo:yarn_install\"])\nRake::Task[\"avo:sym_link\"].enhance do\n  `yarn avo:tailwindcss`\nend\n```\n\n----------------------------------------\n\nTITLE: Edit Component for Custom Field (ERB)\nDESCRIPTION: This ERB snippet defines the edit view component for the `progress_bar` custom field. It renders a text field within an Avo wrapper. It utilizes helpers and incorporates error handling using the `model_errors` method, ensuring the field is properly integrated within the admin interface.  It also uses the `placeholder` and `readonly` parameters.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_3\n\nLANGUAGE: ERB\nCODE:\n```\n# app/components/avo/fields/progress_bar_field/edit_component.html.erb\n<%= edit_field_wrapper field: @field, index: @index, form: @form, resource: @resource, displayed_in_modal: @displayed_in_modal do %>\n  <%= @form.text_field @field.id,\n    class: helpers.input_classes('w-full', has_error: @field.model_errors.include?(@field.id)),\n    placeholder: @field.placeholder,\n    disabled: @field.readonly %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Formatting textarea with `white-space: pre-line`\nDESCRIPTION: Shows how to use the `format_using` option with the `content_tag` helper and the `white-space: pre-line` style to render newlines in a `textarea` field. This CSS style preserves newlines and whitespace.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/faq.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentResource < Avo::BaseResource\n  field :body,\n    as: :textarea,\n    format_using: -> do\n      content_tag(:div, style: 'white-space: pre-line') { value }\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Applying acts_as_tenant to User Model (Ruby)\nDESCRIPTION: Applies the 'acts_as_tenant' macro to the 'User' model, specifying 'account' as the tenant association. This configuration automatically scopes all database queries made through the User model by the currently set tenant, ensuring data isolation between tenants. Requires the 'account_id' column to exist on the 'users' table.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/acts_as_tenant_integration.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# Authentication\nclass User < ActiveRecord::Base\n  acts_as_tenant(:account)\nend\n```\n\n----------------------------------------\n\nTITLE: Invoking Windsurf with Context URL (Bash)\nDESCRIPTION: This bash command is intended to be used within a chat window supporting the '@web' command. It directs the system to fetch context from the specified URL (https://avohq.io/llms.txt) before processing the user's subsequent prompt for Avo code generation via Windsurf.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/windsurf.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@web https://avohq.io/llms.txt\n```\n\n----------------------------------------\n\nTITLE: Updating TailwindCSS pipeline configuration in JavaScript/Node.js\nDESCRIPTION: This code block shows how to modify the `tailwind.config.js` to remove the 'content' property and import TailwindCSS styles, ensuring compatibility with TailwindCSS 4 when using a custom pipeline. It highlights the import of Tailwind utilities, base, and components, as well as custom CSS integrations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tailwind-4-migration.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst avoPreset = require('../../tmp/avo/tailwind.preset.js')\n\nmodule.exports = {\n  presets: [avoPreset],\n  content: [\n    ...avoPreset.content,\n    './app/views/**/*.html.erb',\n    './app/helpers/**/*.rb',\n    './app/javascript/**/*.js',\n    './app/components/avo/**/*.html.erb',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Radio Field in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates the declaration of a radio field named `role` within an Avo resource. The field is configured with the `:radio` type, a human-readable name, and a set of options to select from.  Dependencies include the Avo framework. The output is a radio button field within a resource management interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/radio.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :role,\n  as: :radio,\n  name: \"User role\",\n  options: {\n    admin: \"Administrator\",\n    manager: \"Manager\",\n    writer: \"Writer\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Sorting Avo Resources by Associated Record Timestamps (Ruby)\nDESCRIPTION: Provides a multi-file example (Resource and Model) for custom sorting based on related data. The Post resource defines a sortable `:last_commented_at` field that orders Posts based on the `created_at` timestamp of their latest Comment. The corresponding Post model defines the `last_commented_at` helper method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# [app/avo/resources/post.rb]\nclass Avo::Resources::Post < Avo::BaseResource\n  field :last_commented_at,\n    as: :date,\n    sortable: -> {\n      query.includes(:comments).order(\"comments.created_at #{direction}\")\n    }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# [app/models/post.rb]\nclass Post < ApplicationRecord\n  has_many :comments\n\n  def last_commented_at\n    comments.last&.created_at\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Ranges for Dashboard Cards in Ruby\nDESCRIPTION: Example of setting up configurable date ranges for a metric card, allowing users to select different time periods for data aggregation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cards.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.label = 'Users count'\n  self.initial_range = 30\n  self.ranges = {\n    \"7 days\": 7,\n    \"30 days\": 30,\n    \"60 days\": 60,\n    \"365 days\": 365,\n    Today: \"TODAY\",\n    \"Month to date\": \"MTD\",\n    \"Quarter to date\": \"QTD\",\n    \"Year to date\": \"YTD\",\n    All: \"ALL\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Country Field Implementation in Avo\nDESCRIPTION: Example of how to define a Country field in Avo with the display_code option enabled. This will show both the country name and code on Index and Show views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/country.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :country, as: :country, display_code: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tool Route in Rails in Ruby\nDESCRIPTION: This Ruby snippet adds a namespaced route for the custom 'dashboard' tool within the Rails routes file, and demonstrates how to place it inside an authentication block for admin-only access. Requires Rails routing knowledge and a proper Avo configuration. Inputs are HTTP GET requests; outputs are routed to the dashboard action in the tools controller. The nested route ensures only authorized users see the dashboard tool. Constraints: Only available to users passing the admin check.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-tools.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nRails.application.routes.draw do\n  namespace :avo do\n    get \"dashboard\", to: \"tools#dashboard\"\n  end\n\n  authenticate :user, ->(user) { user.admin? } do\n    mount Avo::Engine => Avo.configuration.root_path\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Control Avo Action Visibility (Ruby)\nDESCRIPTION: Determines whether an action is displayed on particular Avo views (index, show, edit). Visibility can be static (boolean) or dynamic based on a block accessing the execution context, including the `view` type.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/customization.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/global_report.rb\nclass Avo::Actions::GlobalReport < Avo::BaseAction\n  self.name = \"Generate Global Report\"\n  self.standalone = true\n  self.visible = true\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/global_report.rb\nclass Avo::Actions::GlobalReport < Avo::BaseAction\n  self.name = \"Generate Global Report\"\n  self.standalone = true\n  self.visible = -> { view.index? }\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Field Wrappers as Stimulus Targets in Ruby\nDESCRIPTION: Defines Stimulus targets for field wrappers using data attributes. The naming convention `[FIELD_NAME][FIELD_TYPE]WrapperTarget` allows targeting elements like nameTextWrapper, createdAtDateTimeWrapper, etc., facilitating manipulation via JS controllers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# Wrappers get `data-[CONTROLLER]-target=\"nameTextWrapper\"`\nfield :name, as: :text\n\n# Wrappers get `data-[CONTROLLER]-target=\"createdAtDateTimeWrapper\"`\nfield :created_at, as: :date_time\n\n# Wrappers get `data-[CONTROLLER]-target=\"hasSkillsTagsWrapper\"`\nfield :has_skills, as: :tags\n```\n\n----------------------------------------\n\nTITLE: Configuring Solid Cache in Ruby\nDESCRIPTION: This snippet illustrates how to configure Solid Cache as the Rails cache store. It is intended to be added to the environment configuration files (e.g., `config/environments/production.rb`). It requires the 'solid_cache' gem to be installed and the database migrations to have been run. The output is the Rails application configured to use Solid Cache for caching.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cache.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :solid_cache_store\n```\n\n----------------------------------------\n\nTITLE: Declaring Avo Field in Resource (Ruby)\nDESCRIPTION: This snippet shows how to define a field in an Avo resource file. This is a prerequisite for using the field in a custom partial. The example defines a `name` field as a text input.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-field-components.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# In your resource file\nfield :name, as: :text\n```\n\n----------------------------------------\n\nTITLE: Creating an Avo Resource Using Gemini via Bash Command\nDESCRIPTION: This snippet demonstrates how to extend the Gemini integration command by appending a natural language prompt to generate a specific Avo resource, in this case, a product model resource. It builds upon the base command and allows users to specify what kind of Avo resource Gemini should create automatically. The example assumes the user appends the textual prompt after the URL endpoint to initiate code generation tailored to the prompt content. It expects the Gemini backend to interpret the request and respond with valid Avo resource code.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/gemini.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://avohq.io/llms.txt create an Avo resource for a product model\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to Sidebar in Avo Resource - Ruby\nDESCRIPTION: This code snippet demonstrates how to add fields to the sidebar of an Avo resource. It defines a User resource with fields for id, first name, last name, and a custom tool. It also includes a sidebar with fields for email and active status, which are only displayed on the show page. This allows for a more compact display of certain fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resource-sidebar.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    main_panel do\n      field :id, as: :id, link_to_record: true\n      field :first_name, as: :text, placeholder: \"John\"\n      field :last_name, as: :text, placeholder: \"Doe\"\n\n      # We can also add custom resource tools\n      tool UserTimeline\n\n      sidebar do\n        field :email, as: :gravatar, link_to_record: true, only_on: :show\n        field :active, as: :boolean, name: \"Is active\", only_on: :show\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Associations Lookup List Limit in Avo (Ruby)\nDESCRIPTION: This code snippet allows to configure the limit of the number of records per query when listing association options. It sets `associations_lookup_list_limit` configuration to 1000.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.associations_lookup_list_limit = 1000\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Review Form Partial | Avo Partials | ERB\nDESCRIPTION: Defines an ERB partial (`_fish_review.html.erb`) that serves as the template for a single nested review form. It uses Avo's `avo_edit_field` helper with the form builder (`f`) to render fields like `:body` and `:user` for an individual review record, including validation attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/nested-records-when-creating.md#_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<!-- app/views/avo/partials/_fish_review.html.erb -->\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_body do %>\n    <div class=\"nested-form-wrapper divide-y\" data-new-record=\"<%= f.object.new_record? %>\">\n      <%= avo_edit_field :body, as: :trix, form: f, help: \"What should the review say\", required: true %>\n      <%= avo_edit_field :user, as: :belongs_to, form: f, help: \"Who created the review\", required: true %>\n    </div>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Migrating database changes for audit logging\nDESCRIPTION: Executes database migrations to apply the setup for audit logging resources, controllers, and tables.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Adding Avo Resource Tool to Resource Fields - Ruby\nDESCRIPTION: Shows how to include a resource tool within the `fields` definition of an Avo resource class. The `tool` helper is used, and visibility can be controlled using options like `show_on`, restricting the tool's appearance to specific views (e.g., `:edit`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resource-tools.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  def fields\n    tool Avo::ResourceTools::PostInfo, show_on: :edit\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Dynamic Options for BooleanGroup Field\nDESCRIPTION: Illustrates how to compute options dynamically using a lambda that accesses record data to generate the options hash, enabling context-aware label mapping for boolean roles or features. Requires familiarity with resource classes and lambda syntax in Ruby.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/boolean_group.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Project < Avo::BaseResource\n  field :features,\n    as: :boolean_group,\n    options: -> do\n      record.features.each_with_object({}) do |feature, hash|\n        hash[feature.id] = feature.name.humanize\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing TailwindCSS for Avo (Rails)\nDESCRIPTION: This command installs and configures TailwindCSS for an Avo Rails application. It handles the installation of necessary gems, generates configuration files, and sets up the build process. Dependencies include the tailwindcss-rails gem and a project that supports a package.json file and yarn.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tailwindcss-integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:tailwindcss:install\n```\n\n----------------------------------------\n\nTITLE: Bundling Ruby Gems Excluding Paid Gems Using Bash and Gemfile Configuration\nDESCRIPTION: This snippet shows how to optionally exclude paid Avo gems from the bundle installation by grouping them under an optional group named ':avo' in the Gemfile. The bash command demonstrates running bundle install with environment variables to install the optional group selectively. This is useful for distributing Rails apps without requiring paid gems. The ruby Gemfile snippet defines the gem source, version constraints, and grouping for the 'avo-advanced' gem.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/gem-server-authentication.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nRAILS_GROUPS=avo BUNDLE_WITH=avo bundle install\n```\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'avo',\n\ngroup :avo, optional: true do\n  source \"https://packager.dev/avo-hq/\" do\n    gem \"avo-advanced\", \"~> 3.17\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyLoader for Efficient API Data Fetching in Ruby\nDESCRIPTION: Defines a LazyLoader class to support deferred loading and caching of API data for any given model class. It manages query parameters, pagination with offset and limit, and caches loaded items and total count. The api_response private method fetches and parses JSON responses using the model's class method 'all', converting each element into a model instance. This class facilitates seamless interaction with paginated REST API endpoints.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rest-api-integration.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass LazyLoader\n  def initialize(klass)\n    @offset, @limit = nil\n    @params = {}\n    @items = []\n    @count = 0\n    @klass = klass\n  end\n\n  def where(query)\n    @params = @params.merge(query)\n    self\n  end\n\n  def items\n    all\n    @items\n  end\n\n  def count(_attr = nil)\n    all\n    @count\n  end\n\n  def offset(value)\n    @offset = value\n    self\n  end\n\n  def limit(value)\n    @limit = value\n    items[@offset, @limit]\n  end\n\n  def all\n    api_response\n    self\n  end\n\n  def to_sql\n    \"\"\n  end\n\n  private\n\n  def api_response\n    @api_response ||= begin\n      json = @klass.all(@params)\n      json.fetch(@klass.root_key, []).map do |obj|\n        @items << @klass.new(obj)\n      end\n      @count = json.fetch(@klass.count_key, @items.size)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Members with VPTeamMembers Component (VitePress)\nDESCRIPTION: Utilizes the custom VitePress VPTeamMembers component within a Markdown context to display the team information. It binds the 'members' array (defined in the script setup) to the ':members' prop and sets the visual size of the component to 'small'. This renders the team members defined in the script section.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/team.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Team\n\n<VPTeamMembers size=\"small\" :members=\"members\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Entire Sign-out Path in Avo (Ruby)\nDESCRIPTION: This snippet configures the entire sign-out path for Avo by setting config.sign_out_path_name. Use this in config/initializers/avo.rb if your sign-out path is named differently (e.g., logout_path). When both current_user_resource_name and sign_out_path_name are set, sign_out_path_name will take precedence.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authentication.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.sign_out_path_name = :logout_path\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Default URL Options for Avo (Ruby)\nDESCRIPTION: This example demonstrates how to configure default URL options for Avo, which allows adding parameters to all generated paths.  It sets the `config.default_url_options` to include the `account_id` parameter which adds `/account/:account_id` to all paths.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.default_url_options = [:account_id]\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # Use to test out route-based multitenancy\n  scope \"/account/:account_id\" do\n    mount_avo\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Static Search Results Count for a Specific Avo Resource\nDESCRIPTION: Overrides the global search results count for a specific Avo resource (`Avo::Resources::User`). The `results_count` key is added to the `self.search` hash within the resource definition, specifying a fixed number of results (e.g., 5) for searches performed on this resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.search = {\n    results_count: 5\n    query: -> {},\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Avo Resource Tool Partial - ERB\nDESCRIPTION: Provides the default ERB template for a resource tool partial. It demonstrates structuring content using `Avo::PanelComponent` and shows examples of adding links using `a_link`. It also includes comments listing the variables available within the partial context, such as `tool`, `@resource`, `form`, and `current_user`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resource-tools.md#_snippet_1\n\nLANGUAGE: ERB\nCODE:\n```\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new title: \"Post info\" do |c|\n    <% c.with_tools do %>\n      <%= a_link('/avo', icon: 'heroicons/solid/academic-cap', style: :primary) do %>\n        Dummy link\n      <% end %>\n    <% end %>\n\n    <% c.with_body do %>\n      <div class=\"flex flex-col p-4 min-h-24\">\n        <div class=\"space-y-4\">\n          <h3>🪧 This partial is waiting to be updated</h3>\n\n          <p>\n            You can edit this file here <code class=\"p-1 rounded bg-gray-500 text-white text-sm\">app/views/avo/resource_tools/post_info.html.erb</code>.\n          </p>\n\n          <p>\n            The resource tool configuration file should be here <code class=\"p-1 rounded bg-gray-500 text-white text-sm\">app/avo/resource_tools/post_info.rb</code>.\n          </p>\n\n          <%\n            # In this partial, you have access to the following variables:\n            # tool\n            # @resource\n            # @resource.model\n            # form (on create & edit pages. please check for presence first)\n            # params\n            # Avo::Current.context\n            # current_user\n          %>\n        </div>\n      </div>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Taggable Tags Field in Avo Resource with ActsAsTaggableOn Using Ruby\nDESCRIPTION: Defines a 'tags' field in the Avo resource for Post model, configured to use the acts-as-taggable-on gem for tagging capabilities. It customizes the tag field with features like closing behavior, placeholder text, tag suggestions, enforced suggestions, and help text. This requires the acts-as-taggable-on gem, integration in the Post model, and proper setup of tag suggestions via 'Post.tags_suggestions'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  def fields\n    field :tags,\n      as: :tags,\n      acts_as_taggable_on: :tags,\n      close_on_select: false,\n      placeholder: 'add some tags',\n      suggestions: -> { Post.tags_suggestions },\n      enforce_suggestions: true,\n      help: 'The only allowed values here are `one`, `two`, and `three`'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Map Appearance and Behavior with 'mapkick_options' in Ruby\nDESCRIPTION: This snippet illustrates how to pass custom options to the Mapkick gem via 'mapkick_options', such as setting the map style and enabling controls, allowing for tailored map presentation within the Location field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/location.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :coordinates,\n  as: :location,\n  stored_as: [:latitude, :longitude],\n  mapkick_options: {\n    style: 'mapbox://styles/mapbox/satellite-v9',\n    controls: true\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Arguments in Fish Resource\nDESCRIPTION: Example of passing arguments to a filter from a resource. This allows customizing filter behavior based on the resource context, such as enabling case-insensitive searching.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass FishResource < Avo::BaseResource\n  self.title = :name\n\n  field :id, as: :id\n  field :name, as: :text\n  field :user, as: :belongs_to\n  field :type, as: :text, hide_on: :forms\n\n  filter NameFilter, arguments: {\n    case_insensitive: true\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Zeitwerk Autoloading in Rails 6.1+\nDESCRIPTION: Ruby code snippet demonstrating how to configure Rails to use the Zeitwerk autoloader for compatibility with Avo and Rails 6.1+ defaults when upgrading from Rails 5.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/installation.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.autoloader = :zeitwerk\nconfig.load_defaults 6.1 # 6.1 or higher, depending on your rails version\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Tool with Avo Generator in Bash\nDESCRIPTION: This Bash snippet uses Rails' command-line generator to scaffold the structure for a new custom tool named \"dashboard\" in an Avo-administered Rails app. Running this command results in new view partials, a controller modification, and a route update needed for a custom dashboard tool. No additional dependencies are required, but a working Rails project with the Avo gem installed is necessary. Inputs include the desired tool name; outputs are file changes summarized in the terminal. Limitations: Assumes Avo and Rails are installed and configured.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-tools.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nbin/rails generate avo:tool dashboard\n      create  app/views/avo/sidebar/items/_dashboard.html.erb\n      insert  app/controllers/avo/tools_controller.rb\n      create  app/views/avo/tools/dashboard.html.erb\n       route  namespace :avo do\n  get \"dashboard\", to: \"tools#dashboard\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Multiple Select Filter (Ruby)\nDESCRIPTION: Defines an Avo Multiple Select filter. The `apply` method receives an array of strings, where each string is a key from the `options` hash that has been selected. The `options` method provides the available key-value pairs for the multi-select list.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PostStatusFilter < Avo::Filters::MultipleSelectFilter\n  self.name = \"Status\"\n\n  # `value` comes as an array of strings\n  # Ex: ['admins', 'non_admins']\n  def apply(request, query, value)\n    if value.include? 'admins'\n      query = query.admins\n    end\n\n    if value.include? 'non_admins'\n      query = query.non_admins\n    end\n\n    query\n  end\n\n  def options\n    {\n      admins: \"Admins\",\n      non_admins: \"Non admins\",\n    }\n  end\n\n  # Optional method to set the default state.\n  # def default\n  #   ['admins', 'non_admins']\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Disallowing Specific Values in Tags Field - Ruby\nDESCRIPTION: This snippet demonstrates how to use the disallowed option to block certain tag values from being stored by supplying an array of strings. Requires Avo and a tags field definition. The main parameters are the field name, type, and disallowed array. The input is user tags, and when any match the disallowed list, they are rejected. There are no external dependencies beyond standard field setup.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  disallowed: [\"not\", \"that\"]\n\n```\n\n----------------------------------------\n\nTITLE: Generating a custom tool using Rails generator\nDESCRIPTION: Commands to generate a new custom tool named 'dashboard' in Avo, showing the files that will be created and modified during the process.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-tools.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n▶ bin/rails generate avo:tool dashboard\n      create  app/views/avo/sidebar/items/_dashboard.html.erb\n      insert  app/controllers/avo/tools_controller.rb\n      create  app/views/avo/tools/dashboard.html.erb\n       route  namespace :avo do\n  get \"dashboard\", to: \"tools#dashboard\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Collapsible Sidebar Sections in Avo with Ruby\nDESCRIPTION: This snippet demonstrates enabling collapsible behavior for sidebar `section` items in the Avo admin interface by setting the `collapsable` option to true. It includes an example with an icon and a nested resource. Additionally, it shows how to set the default collapsed state with the `collapsed` option. This feature improves navigation by allowing users to collapse or expand menu groups, with preferences saved in Local Storage.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"Resources\", icon: \"resources\", collapsable: true do\n  resource :course\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"Resources\", icon: \"resources\", collapsable: true, collapsed: true do\n  resource :course\nend\n```\n\n----------------------------------------\n\nTITLE: Cover Photo Configuration in Avo (Ruby)\nDESCRIPTION: This code snippet shows how to configure the cover photo in Avo, including size, visibility, and source.  It sets the `size` to `:md`, `visible_on` to `[:show, :forms]`, and uses a lambda for the `source` which checks for the index view and provides a default image if needed, otherwise it retrieves `record.cover_photo`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cover-and-profile-photos.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nself.cover_photo = {\n  size: :md, # :sm, :md, :lg\n  visible_on: [:show, :forms], # can be :show, :index, :edit, or a combination [:show, :index]\n  source: -> {\n    if view.index?\n      # We're on the index page and don't have a record to reference\n      DEFAULT_IMAGE\n    else\n      # We have a record so we can reference it's cover_photo\n      record.cover_photo\n    end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Hash for Radio Field Options (Ruby)\nDESCRIPTION: This code defines an empty hash, representing the default value for the `options` attribute in an Avo radio field. The empty hash indicates that no pre-defined options are set initially, allowing for dynamic population or no values being preselected. There are no dependencies and the output is a empty hash, used as a default value within the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/radio.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Declaring KeyValue field in Avo Resource (Ruby)\nDESCRIPTION: This snippet shows the basic declaration of a KeyValue field in an Avo resource. It maps a database column (like `:meta`) storing JSON data to the KeyValue field type.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/key_value.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, as: :key_value\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar Appearance with panel_wrapper Option in Avo Ruby\nDESCRIPTION: This Ruby snippet shows how to render a custom tool inside a resource sidebar with the `panel_wrapper` option set to false. This customization prevents the application of default styling classes to the sidebar wrapper, allowing for tailored layout or styling when integrating custom tools into the sidebar.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-sidebar.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsidebar panel_wrapper: false do\n  tool Avo::ResourceTools::SidebarTool\nend\n```\n\n----------------------------------------\n\nTITLE: Using keep_modal_open in an Avo Action (Ruby)\nDESCRIPTION: Demonstrates the use of `keep_modal_open` within an Avo action. The action attempts to create a `User` record based on modal input fields. If the creation is successful, it sends a success message. If an error occurs during creation, it sends an error message and calls `keep_modal_open` to prevent the modal from closing, allowing the user to correct inputs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Actions::KeepModalOpenAction < Avo::BaseAction\n  self.name = \"Keep Modal Open\"\n  self.standalone = true\n\n  def fields\n    field :name, as: :text\n    field :birthday, as: :date\n  end\n\n  def handle(fields:, **args)\n    User.create fields\n    succeed \"All good ✌️\"\n  rescue => error\n    error \"Something happened: #{error.message}\"\n    keep_modal_open\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: How Avo Computes Panels\nDESCRIPTION: Explains the internal process by which Avo categorizes fields into panels, the role of standalone fields, and the logic for automatically creating a main panel when one is not explicitly declared. It highlights that association fields like `has_many` are automatically assigned dedicated panels.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-panels.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Hooking into Avo Lifecycle and Managing Assets (Ruby)\nDESCRIPTION: Illustrates using `ActiveSupport.on_load(:avo_boot)` within a Rails Engine initializer to add/remove concerns from Avo base classes and register JavaScript/CSS assets via `Avo.asset_manager`. Also shows using `ActiveSupport.on_load(:avo_init)` to execute code on every Avo request, potentially modifying the request context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/plugins.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Avo\n  module FeedView\n    class Engine < ::Rails::Engine\n      isolate_namespace Avo::FeedView\n\n      initializer \"avo-feed-view.init\" do\n        ActiveSupport.on_load(:avo_boot) do\n          Avo.plugin_manager.register :feed_view\n\n          # Add some concerns\n          Avo::Resources::Base.include Avo::FeedView::Concerns::FeedViewConcern\n\n          # Remove some concerns\n          Avo::Resources::Base.included_modules.delete(Avo::Concerns::SOME_CONCERN)\n\n          # Add asset files to be loaded by Avo\n          # These assets will be added to Avo's `application.html.erb` layout file\n          Avo.asset_manager.add_javascript \"/avo-advanced-assets/avo_advanced\"\n          Avo.asset_manager.add_stylesheet \"/avo-kanban-assets/avo_kanban\"\n        end\n\n        ActiveSupport.on_load(:avo_init) do\n          # Run some code on each request\n          Avo::FeedView::Current.something = VALUE\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding POST Method Forms to Avo Profile Menu Links in Ruby\nDESCRIPTION: This snippet details adding a profile menu link in Avo that submits a POST request, useful for actions like signing out. It configures `link_to` with additional `method` and `params` options to support HTTP form submission semantics. This allows customization of logout or other form actions within the profile menu and expects a valid path helper such as `main_app.destroy_user_session_path`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.profile_menu = -> {\n    link_to \"Sign out\", path: main_app.destroy_user_session_path, icon: \"user-circle\", method: :post, params: {custom_param: :here}\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Generating an Array Resource using Rails CLI\nDESCRIPTION: This command scaffolds a new Array Resource named 'Movie' in the Avo framework, enabling the resource to manage array data structures. It requires the `--array` flag to set up necessary configurations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/array-resources.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:resource Movie --array\n```\n\n----------------------------------------\n\nTITLE: Customizing Dashboard Card Properties from Parent\nDESCRIPTION: Shows how to override card properties like label, description, size, visibility, and refresh rate when declaring cards in a dashboard.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dashboards.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::Dashy < Avo::Dashboards::BaseDashboard\n  self.id = \"dashy\"\n  self.name = \"Dashy\"\n\n  def cards\n    card Avo::Cards::UsersCount\n    card Avo::Cards::UsersCount,\n      label: \"Active users\",\n      description: \"Active users count\",\n      cols: 2,\n      rows: 2,\n      visible: -> { true }\n      refresh_every: 2.minutes,\n      arguments: {\n        active_users: true\n      }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing avo-http_resource Gem - Bash\nDESCRIPTION: This Bash snippet installs required dependencies for enabling HTTP Resource support in an Avo project. First, the gem is declared in the Gemfile, then 'bundle install' makes it available. Prerequisites: an initialized Ruby project with Bundler and a Gemfile. Input is a command run in the terminal. Output is installation of the necessary gem, after which HTTP Resources can be configured in the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/http-resources.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"avo-http_resource\", source: \"https://packager.dev/avo-hq/\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Defining a Markdown Field Using Ruby DSL\nDESCRIPTION: This Ruby code snippet demonstrates how to declare a `Markdown` field named `description` in an Avo resource, specifying its type as `:markdown`. It sets up the field for rendering Markdown content in the admin panel.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/markdown.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :description, as: :markdown\n```\n\n----------------------------------------\n\nTITLE: Setting Default Sort Direction in Avo Resource (Ruby)\nDESCRIPTION: Customizes the sort direction for the Task resource by setting self.default_sort_direction to :asc and specifying self.default_sort_column. Accepts either :asc or :desc as parameters. Dependencies: Avo::BaseResource parent; column should exist and be indexed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Task < Avo::BaseResource\n  self.default_sort_column = :position\n  self.default_sort_direction = :asc\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Resource Tool Configuration in Ruby\nDESCRIPTION: Defines a custom resource tool class by inheriting from Avo::BaseResourceTool. This class sets the tool's display name and optionally overrides the partial path for the UI. It provides a centralized configuration to integrate the tool into Avo's resource views. This snippet requires the Avo gem and runs within a Rails environment. Expected usage is to generate the tool with Rails generator and customize this file to manage tool metadata and behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-tools.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::ResourceTools::PostInfo < Avo::BaseResourceTool\n  self.name = \"Post info\"\n  # self.partial = \"avo/resource_tools/post_info\"\nend\n```\n\n----------------------------------------\n\nTITLE: Grouping Fields with Cluster DSL in Avo Resource - Ruby\nDESCRIPTION: Defines a Ruby class for an Avo resource representing a Person, showcasing the use of the cluster DSL nested inside a panel to horizontally group address-related fields. Each field is wrapped with the stacked option to improve UI readability and layout within the cluster. The fields include static values for street address, city, and zip code. This requires the Avo framework with support for resource panels and field wrappers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-clusters.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Person < Avo::BaseResource\n  def fields\n    panel \"Address\" do\n      cluster do\n        field :street_address, stacked: true do\n          \"1234 Elm Street\"\n        end\n\n        field :city, stacked: true do\n          \"Los Angeles\"\n        end\n\n        field :zip_code, stacked: true do\n          \"15234\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Avo Resource for Active Storage Attachment (rails generate)\nDESCRIPTION: This command generates an Avo resource for Active Storage attachments.  It's important not to name it `AttachmentResource` to avoid conflicts with Avo's internal controller.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/use-active-storage-attachments-as-associations.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:resource active_record_attachment\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamic Filter Using filterable Option\nDESCRIPTION: This snippet shows how to define a custom dynamic filter by setting the `filterable` option to a hash.  It transitions the field from a simple boolean filter to a more customized one.  This allows for finer-grained control over the filter's behavior and appearance.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nfield :first_name,\n  as: :text,\n  filterable: true # [!code --]\n  filterable: { } # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to Edit View Content Placeholder - Ruby\nDESCRIPTION: Shows the basic structural placeholder for adding HTML attributes to the `content` element (if applicable in edit, usually wrapper/input are used) in the `edit` view using the object notation. This structure also applies to the New view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/html.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    content: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Fields with Optional Defaults in AvoHQ (Ruby)\nDESCRIPTION: This snippet demonstrates how to define hidden form fields in AvoHQ resources using Ruby. The first example creates a hidden group_id field, while the second assigns a default user_id based on the current user's ID via a lambda function. Dependencies include the AvoHQ gem, correct resource configuration, and the presence of current_user in context. The purpose is to ensure form submission includes necessary fields without user visibility or interaction. Inputs include the resource definition; outputs are automatically-rendered <input type=\"hidden\" /> tags in HTML forms.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/hidden.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Basic\nfield :group_id, as: :hidden\n\n# With default\nfield :user_id, as: :hidden, default: -> { current_user.id }\n```\n\n----------------------------------------\n\nTITLE: Setting Avo Field as Readonly (Static)\nDESCRIPTION: Uses the `readonly: true` option to render a field as disabled on the New and Edit views. Crucially, this option also prevents the field's value from being included in the form submission data, offering protection against malicious DOM manipulation to update the field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, readonly: true\n```\n\n----------------------------------------\n\nTITLE: Declaring a Radio Field in Ruby\nDESCRIPTION: This snippet demonstrates how to declare a radio button field named :role with options for user roles, using the `field` method. It specifies attributes like 'as', 'name', and 'options' to configure the field's behavior and presentation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/radio.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :role,\n  as: :radio,\n  name: \"User role\",\n  options: {\n    admin: \"Administrator\",\n    manager: \"Manager\",\n    writer: \"Writer\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using ExecutionContext in Avo (Ruby)\nDESCRIPTION: Shows how to instantiate `Avo::ExecutionContext` with a target lambda (`SOME_BLOCK`) and necessary context (a `User` record). The `handle` method is then called to execute the lambda within the provided context, demonstrating the basic usage pattern.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/execution-context.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Use it like so.\nSOME_BLOCK = -> {\n  \"#{record.first_name} #{record.last_name}\"\n}\n\nAvo::ExecutionContext.new(target: &SOME_BLOCK, record: User.first).handle\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Components in Avo using Ruby\nDESCRIPTION: This snippet demonstrates how to customize field components using the `components` option within a field definition. It shows how to specify different components for index, show, and edit views, either via a hash or a block. The block provides access to Avo execution context variables.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nfield :description,\n  as: :text,\n  components: {\n    index_component: Avo::Fields::Admin::TextField::IndexComponent,\n    show_component: Avo::Fields::Admin::TextField::ShowComponent,\n    edit_component: \"Avo::Fields::Admin::TextField::EditComponent\"\n  }\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfield :description,\n  as: :text,\n  components: -> do\n    {\n      show_component: Avo::Fields::Admin::TextField::ShowComponent,\n      edit_component: \"Avo::Fields::Admin::TextField::EditComponent\"\n    }\n  end\n```\n\n----------------------------------------\n\nTITLE: Fixing Route Conflicts (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates how to rename a route to avoid conflicts with Avo's internal routing helpers. By using the `as:` option, the route helpers are renamed to `articles`, preventing interference with Avo's `resources_path` helper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/internal-model-names.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nresources :resources, as: 'articles'\n```\n\n----------------------------------------\n\nTITLE: Removing block lambda arguments in Avo configuration for Ruby\nDESCRIPTION: This snippet shows the removal of block arguments from all lambda blocks used in Avo configurations to improve consistency and compatibility. All previously passed arguments such as resource or value should be removed with equivalent context now accessible within the block. Examples cover visibility lambdas, default value lambdas, option blocks, and format blocks before and after changes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-2-avo-3-upgrade.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nself.visible = ->(resource:) {}\n\n# After\nself.visible = -> {}\n\n# Before\nfield :name, as: :text, default: ->(resource:) {something}, format_using: ->(value:) {}, visible: ->(resource:) {}\n\n# After\nfield :name, as: :text, default: -> {something}, format_using: -> {}, visible: -> {}\n\n# Before\nfield :level, as: :select, options: ->(model:, resource:, field:, view:) do\n    {\n      Beginner: :beginner,\n      Intermediate: :intermediate,\n      Advanced: :advanced,\n    }\n  end\n\n# After\nfield :level, as: :select, options: -> do\n    {\n      Beginner: :beginner,\n      Intermediate: :intermediate,\n      Advanced: :advanced,\n    }\n  end\n```\n\n----------------------------------------\n\nTITLE: Overriding Inherited Policy Methods in Ruby\nDESCRIPTION: Shows how to override specific methods that were automatically generated by the PolicyHelpers concern.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ninherit_association_from_policy :comments, CommentPolicy\n\ndef destroy_comments?\n  false\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Breadcrumbs and Customizing Initial Breadcrumbs\nDESCRIPTION: Controls display of breadcrumbs via `display_breadcrumbs`. Also allows customization of the initial breadcrumb trail using `set_initial_breadcrumbs` with `add_breadcrumb` calls, facilitating navigation structure.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.display_breadcrumbs = false\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.set_initial_breadcrumbs do\n    add_breadcrumb \"Casa\", root_path\n    add_breadcrumb \"Something else\", something_other_path\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Suggestions with filterable Option (array)\nDESCRIPTION: Demonstrates setting static suggestions for a text input filter using the `suggestions` option within the `filterable` hash.  This provides predefined options to the user.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nfield :first_name,\n  as: :text,\n  filterable: {\n    # ...\n    suggestions: [\"Avo\", \"Cado\"]\n    # ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Assign Stimulus Controllers to Actions in Ruby\nDESCRIPTION: Configures Stimulus controllers for specific actions within Avo, similar to resource controllers, allowing dynamic behavior in action views. Multiple controllers can be assigned via space separation and will attach to associated fields and inputs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Actions::ShowCurrentTime < Avo::BaseAction\n  self.stimulus_controllers = \"city-in-country\"\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Actions::ShowCurrentTime < Avo::BaseAction\n  self.stimulus_controllers = \"course-resource select-field association-fields\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Kamal Deployment with Gem Server Token Secret in YAML\nDESCRIPTION: This yaml snippet shows how to configure the Kamal deployment builder to include the BUNDLE_PACKAGER__DEV secret. It specifies the architecture and references the secret that contains the Gem Server Token which will be used during the build and deployment phase to authenticate bundler.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/gem-server-authentication.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Configure builder setup.\n\nbuilder:\n  arch: amd64\n  secrets:\n    - BUNDLE_PACKAGER__DEV\n```\n\n----------------------------------------\n\nTITLE: Handling Arbitrary Array Fields with Avo Tags - Ruby\nDESCRIPTION: Gives an example of using the Avo tags field with a custom array attribute in a plain Rails model, overriding getter and setter for logging/debugging. Illustrates compatibility with non-standard array fields, demonstrating flexibility in integrating tags-style fields anywhere an array is present.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  field :items, as: :tags\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  def items=(items)\n    puts [\"items->\", items].inspect\n  end\n\n  def items\n    %w(1 2 3 4)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example ChatGPT Prompt for Avo Resource Generation\nDESCRIPTION: A complete example of how to structure a prompt for ChatGPT to generate Avo code, combining the context URL with a specific request to create an Avo resource for a product model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/chatgpt.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://avohq.io/llms.txt create an Avo resource for a product model\n```\n\n----------------------------------------\n\nTITLE: Multitenancy Concern - Ruby\nDESCRIPTION: This code defines a Ruby concern module named `Multitenancy`. It includes a `before_action` to call `multitenancy_detector` before each action. The `multitenancy_detector` method is where the custom business logic would reside to support multi-tenancy scenarios. The `extend ActiveSupport::Concern` line allows the inclusion of the methods and hooks into other classes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/avo-application-controller.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Multitenancy\n  extend ActiveSupport::Concern\n\n  included do\n    before_action :multitenancy_detector\n  end\n\n  def multitenancy_detector\n    # your logic here\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Bundler Authentication Using Bash\nDESCRIPTION: This snippet demonstrates how to export the Gem Server Token to the BUNDLE_PACKAGER__DEV environment variable in a Unix-like shell. It allows bundler to authenticate against the private gem server during gem installation. It is required to run this command before bundle install, especially in server and CI setups. The expected input is the actual gem token which should replace the placeholder 'xxx'. The output is an environment variable usable by bundler. This method is recommended for secure automated environments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/gem-server-authentication.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport BUNDLE_PACKAGER__DEV=xxx\n# or\nBUNDLE_PACKAGER__DEV=xxx bundle install\n```\n\n----------------------------------------\n\nTITLE: Generate and run FriendlyID migration\nDESCRIPTION: Generates a migration to add a slug column to your model using `rails generate friendly_id`.  Then it executes the migration using `rails db:migrate`.  This is necessary for storing the friendly IDs in the database.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/custom-ids.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrails generate friendly_id\n```\n\nLANGUAGE: bash\nCODE:\n```\nrails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom LogSubscriber for ViewComponent Performance Logging in Rails\nDESCRIPTION: This code defines a custom LogSubscriber class within the ViewComponent module to listen for rendering events. It adds a method to format and output the component's name, rendering duration, and memory allocations during the render process. The subscriber is attached to the `:view_component` event namespace, enabling detailed logs, though there's a warning about potential performance overhead. Dependencies include ActiveSupport::LogSubscriber and proper Rails setup.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/views-performance.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nmodule ViewComponent\n  class LogSubscriber < ActiveSupport::LogSubscriber\n    define_method :'!render' do |event|\n      info do\n        message = +\"  Rendered #{event.payload[:name]}\"\n        message << \" (Duration: #{event.duration.round(1)}ms\"\n        message << \" | Allocations: #{event.allocations})\"\n      end\n    end\n  end\nend\n\nViewComponent::LogSubscriber.attach_to :view_component\n```\n\n----------------------------------------\n\nTITLE: Configuring Alert Dismiss Time in Avo (Ruby)\nDESCRIPTION: This code snippet shows how to configure the alert dismiss time in Avo using the `Avo.configure` block within the `config/initializers/avo.rb` file. It sets the `config.alert_dismiss_time` to 8000 milliseconds, which means alerts will remain visible for 8 seconds before automatically dismissing.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.alert_dismiss_time = 8000\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Heroicons in ERB View\nDESCRIPTION: Examples of embedding Heroicons SVG icons (outline and mini variants) into an ERB template using the `svg` helper. Demonstrates the path convention `heroicons/VARIANT/ICON_NAME.svg`. The `.svg` extension is optional in some contexts but shown here for clarity.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/icons.md#_snippet_2\n\nLANGUAGE: ERB\nCODE:\n```\n<%= svg \"heroicons/outline/academic-cap.svg\" %>\n\n<%= svg \"heroicons/mini/arrow-path-rounded-square.svg\" %>\n```\n\n----------------------------------------\n\nTITLE: Generated Rails model command for Car without Avo resource\nDESCRIPTION: This command creates a Rails model named Car with certain attributes but skips the generation of the corresponding Avo resource file by using the --skip-avo-resource flag.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resources.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nbin/rails generate model car make:string kms:integer --skip-avo-resource\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Context in Avo\nDESCRIPTION: Adds custom data to the global context accessible in resource and action classes via `Avo::Current.context`. Use `set_context` with a block to assign arbitrary key-value pairs, often used for current user or request params.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.set_context do\n    {\n      foo: 'bar',\n      params: request.params,\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Number condition mappings for dynamic filters - Ruby\nDESCRIPTION: This Ruby hash defines operators and condition names for numeric filtering options in Avo's dynamic filters. Conditions include equals, greater than, less than, and range-based filters ('Is within'). The `.invert` method swaps keys and values for internal processing. Use requires Ruby version 3.10.11 or higher to support certain predicates.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  is: \"=\",\n  is_not: \"!=\",\n  gt: \">\",\n  gte: \">=\",\n  lt: \"<\",\n  lte: \"<=\",\n  is_within: \"Is within\",\n  is_null: \"Is null\",\n  is_not_null: \"Is not null\",\n}.invert\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Variables in Resource Tool Partial\nDESCRIPTION: This snippet emphasizes that within the partial, developers have access to variables such as 'tool', '@resource', 'params', 'Avo::App.context', and 'current_user', providing comprehensive data for customizing the partial content based on resource, user, or request context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/resource-tools.md#_snippet_2\n\nLANGUAGE: ERB\nCODE:\n```\n<%\n  # In this partial, you have access to the following variables:\n  # tool\n  # @resource\n  # @resource.model\n  # form (on create & edit pages. please check for presence first)\n  # params\n  # Avo::App.context\n  # current_user\n%>\n```\n\n----------------------------------------\n\nTITLE: Configuring author models for Audit Logging\nDESCRIPTION: Defines which models are considered authors for activity tracking by setting `author_model` or `author_models` in the Avo configuration. Defaults can be overridden by explicitly assigning models.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nAvo::AuditLogging.configure do |config|\n  config.enabled = true\n  # config.author_model = \"User\"\n  config.author_model = \"Account\"\n  # or for multiple models\n  config.author_models = [\"User\", \"Account\"]\nend\n```\n\n----------------------------------------\n\nTITLE: Running the Audit Logging Installer\nDESCRIPTION: Execute the Rails generator to install the Audit Logging feature in your Avo application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:audit_logging install\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Cache Store in Ruby\nDESCRIPTION: Provides Ruby code examples to explicitly set the cache store used by Avo in a Rails initializer file (`config/initializers/avo.rb`). It shows how to assign a cache store object directly or use a lambda function for environment-specific configuration. This requires ActiveSupport::Cache.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cache.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nconfig.cache_store = -> {\n  ActiveSupport::Cache.lookup_store(:solid_cache_store)\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# or\n\nconfig.cache_store = ActiveSupport::Cache.lookup_store(:solid_cache_store)\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Badge Field with Custom Options (Ruby)\nDESCRIPTION: Configures an Avo `Badge` field to display the status of a record based on custom values stored in the `:stage` attribute. The `options` parameter is used to map specific database values (e.g., `:discovery`, `:done`) to one of the five predefined badge types (info, success, warning, danger, neutral), which determine the badge's color.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/badge.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :stage,\n  as: :badge,\n  options: {\n    info: [:discovery, :idea],\n    success: :done,\n    warning: 'on hold',\n    danger: :cancelled,\n    neutral: :drafting\n  } # The mapping of custom values to badge values.\n```\n\n----------------------------------------\n\nTITLE: Multiple Feedback Notifications in Ruby Avo Actions\nDESCRIPTION: Example of showing multiple notification types (success, warning, info, error) in a single Avo action. Each notification will be displayed in sequence.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  def handle(**args)\n    succeed \"Success response ✌️\"\n    warn \"Warning response ✌️\"\n    inform \"Info response ✌️\"\n    error \"Error response ✌️\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Country Field in Avo Resource (Ruby)\nDESCRIPTION: Defines a field named `:country` in an Avo resource using the built-in `:country` component. The `as: :country` option specifies the component type. The `display_code: true` option configures the field to show the country code on Index and Show views instead of the full name. By default, `display_code` is `false`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/country.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :country, as: :country, display_code: true\n```\n\n----------------------------------------\n\nTITLE: Overriding Label in Field Wrapper for Show/Edit - Avo (ERB)\nDESCRIPTION: This ERB snippet sets a custom label for the wrapper's label area using the `label` parameter, overriding the default. Helpful for clarifying field meaning or for localization. The wrapper receives all arguments via `field_wrapper_args` and renders a Boolean check component. Dependencies are `field_wrapper_args` and the Boolean check component.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_12\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, label: \"Post is published\" do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Generate Standalone Avo Action (Bash)\nDESCRIPTION: Command-line instruction to create a new Avo action file configured as standalone. The `--standalone` flag is key, allowing the action to run independently of specific records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/customization.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nbin/rails generate avo:action global_action --standalone\n```\n\n----------------------------------------\n\nTITLE: Resource-Specific Row Controls Configuration in Avo (Ruby)\nDESCRIPTION: This snippet shows how to configure row controls for a specific resource in Avo, overriding the global configuration. It demonstrates setting the placement, float behavior, and hover visibility of the controls within the resource definition in the `app/avo/resources/user.rb` file. The `row_controls_config` option allows for individual customization of each resource's row controls.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/table-view.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  self.row_controls_config = {\n    placement: :right,\n    float: false,\n    show_on_hover: false,\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Files Field with Active Storage - Ruby\nDESCRIPTION: This Ruby code snippet defines a `files` field, allowing for multiple file uploads within an application. It utilizes the Active Storage library for managing file storage and retrieval. The `:as: :files` parameter specifies the field type.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/files.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :documents, as: :files\n```\n\n----------------------------------------\n\nTITLE: Profile Photo Source Configuration in Avo (Ruby)\nDESCRIPTION: This code snippet demonstrates how to configure the source of the profile photo in Avo. It uses a lambda to dynamically determine the image source based on whether the current view is the index page or a specific record's page. It checks if `view.index?` and uses `DEFAULT_IMAGE` if true, otherwise retrieves `record.profile_photo`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cover-and-profile-photos.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nself.profile_photo = {\n  source: -> {\n    if view.index?\n      # We're on the index page and don't have a record to reference\n      DEFAULT_IMAGE\n    else\n      # We have a record so we can reference it's profile_photo\n      record.profile_photo\n    end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to Action Dividers (Ruby)\nDESCRIPTION: This snippet demonstrates how to add a label to an action divider for better organization within the actions dropdown menu. Requires Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/registration.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def actions\n    action Avo::Actions::ActivateUser\n    divider label: \"Communication\"\n    action Avo::Actions::SendWelcomeEmail\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Action Fields\nDESCRIPTION: This code defines fields within an Avo action.  It includes a boolean field named `notify_user` and a text area field named `message` with a default value. These fields allow users to provide input when the action is triggered.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :notify_user, as: :boolean\nfield :message, as: :textarea, default: 'Your account has been marked as inactive.'\n```\n\n----------------------------------------\n\nTITLE: Basic textarea field definition\nDESCRIPTION: Defines a basic `textarea` field within an Avo resource. This is the simplest way to add a multi-line text input to your Avo admin panel.  By default, newlines may not be rendered correctly in the `Show` view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/faq.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentResource < Avo::BaseResource\n  field :body, as: :textarea\nend\n```\n\n----------------------------------------\n\nTITLE: Automating Removal of Params from Search Query Blocks - Ruby Script\nDESCRIPTION: This Ruby script batch-replaces the old search_query lambda signature with the new one (removing 'params:') across all files in the current directory. It's designed for use in the resources folder to simplify migrating many resources at once. It modifies files in-place and skips '.', '..', and itself. No external dependencies required.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nDONT_TOUCH = ['.', '..', $0]\nOLD_SEARCH_QUERY = \"self.search_query = ->(params:) do\"\nNEW_SEARCH_QUERY = \"self.search_query = -> do\"\n\ndef remove_params_keyword(file_name)\n  content = File.read file_name\n  content.gsub!(OLD_SEARCH_QUERY, NEW_SEARCH_QUERY)\n\n  File.open(file_name, \"w\") { |file| file << content }\nend\n\nDir.foreach(\".\") {|file_name| remove_params_keyword file_name unless DONT_TOUCH.include? file_name}\n```\n\n----------------------------------------\n\nTITLE: Update Behavior from Version 3.7.0 Onwards\nDESCRIPTION: Details how starting from version 3.7.0, Avo only updates the keys explicitly sent from the client, preserving other attribute data in the database, as illustrated with JSON examples showing no data loss during updates.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/boolean_group.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// Before update.\n{\n  \"feature_enabled\": true,\n  \"another_feature_enabled\": false,\n  \"something_else\": \"some_value\" // this will be kept\n}\n\n// After update.\n{\n  \"feature_enabled\": true,\n  \"another_feature_enabled\": false,\n  \"something_else\": \"some_value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Localizing Specific Resource Save Button in Avo YAML\nDESCRIPTION: Customizes the 'Save' button label specifically for a particular Avo resource (e.g., 'product'). This YAML snippet demonstrates how to define a translation for the 'save' key nested under the resource's translation key within the locale file, overriding the global save button translation for this resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/i18n.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n---\nen:\n  avo:\n    resource_translations:\n      product:\n        save: \"Save the product!\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Value Before Database Save - Ruby\nDESCRIPTION: This snippet shows how to modify the value before it's saved to the database using `update_using`. It casts the text version of the field to actual JSON to save it to the database using `ActiveSupport::JSON.decode(value)`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nfield :metadata, as: :code, update_using: -> {\n  ActiveSupport::JSON.decode(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting an External Image as Grid Cover with Dynamic URL in Avo (Ruby)\nDESCRIPTION: Defines a cover position in an Avo grid with an external image 'logo' that links to the resource. Uses a block to dynamically compute the image URL from the model's URL host, similar to the computed external image example. This snippet enables using the external image as a visually emphasized cover in the resource grid, enhancing visual listings with clickable logos.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/external_image.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ncover :logo, as: :external_image, link_to_resource: true do |model|\n  \"//logo.clearbit.com/#{URI.parse(model.url).host}?size=180\"\nrescue\n  nil\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Guide Links with Vue v-for\nDESCRIPTION: Iterates over the 'v2' property of the imported 'data' object using Vue's v-for directive. It generates a list of links, where each link's text and target URL are taken from the 'recipe' object properties.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h3 v-for=\"recipe in data.v2\"><a :href=\"recipe.link\">{{recipe.text}}</a></h3>\n```\n\n----------------------------------------\n\nTITLE: Enabling drag-and-drop reordering with custom position attribute\nDESCRIPTION: This code snippet enables drag-and-drop reordering in the resource by setting 'drag_and_drop: true' and configuring 'insert_at' actions. It also shows how to specify an alternative position attribute, 'record.position_in_list', for flexible order management beyond default 'record.position'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/records-reordering.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nself.ordering = {\n  display_inline: true,\n  visible_on: %i[index association],\n  # position: -> { record.position_in_list },\n  drag_and_drop: true,\n  actions: {\n    higher: -> { record.move_higher },\n    lower: -> { record.move_lower },\n    to_top: -> { record.move_to_top },\n    to_bottom: -> { record.move_to_bottom },\n    insert_at: -> { record.insert_at position }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Action Confirmation Message in Ruby\nDESCRIPTION: Demonstrates how to set a custom confirmation message for an action using either a static string or a dynamic block that adapts based on the resource record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/customization.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.message = \"Are you sure you want to release the fish?\"\n\n  # Or as a block\n  self.message = -> {\n    if resource.record.present?\n      \"Are you sure you want to release the #{resource.record.name}?\"\n    else\n      \"Are you sure you want to release the fish?\"\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the Current Attributes Model for Multitenancy\nDESCRIPTION: Defines a Current class inheriting from ActiveSupport::CurrentAttributes to hold the current account information globally across the application. This setup allows easy access to the current account throughout various parts of the Rails app.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/multitenancy.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/models/current.rb\nclass Current < ActiveSupport::CurrentAttributes\n  attribute :account\nend\n```\n\n----------------------------------------\n\nTITLE: Customize Avo sign-out path resource name (current\\_user)\nDESCRIPTION: Set `current_user_resource_name` to `<code>:current_user</code></code> to instruct Avo to look for a sign-out path helper following the pattern `destroy_current_user_session_path`. This is useful if your routing helpers use this convention.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authentication.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_resource_name = :current_user\nend\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Markdown Renderer Class (Ruby)\nDESCRIPTION: Provides the default implementation of the `Marksmith::Renderer` class, which is responsible for converting markdown text into HTML for preview and display. This class can be overridden in `app/models/marksmith/renderer.rb` to customize the rendering process, demonstrating how to handle different parsing engines like `commonmarker`, `kramdown`, and `redcarpet`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/markdown.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/models/marksmith/renderer.rb\n\nmodule Marksmith\n  class Renderer\n    def initialize(body:)\n      @body = body\n    end\n\n    def render\n      if Marksmith.configuration.parser == \"commonmarker\"\n        render_commonmarker\n      elsif Marksmith.configuration.parser == \"kramdown\"\n        render_kramdown\n      else\n        render_redcarpet\n      end\n    end\n\n    def render_commonmarker\n      # commonmarker expects an utf-8 encoded string\n      body = @body.to_s.dup.force_encoding(\"utf-8\")\n      Commonmarker.to_html(body)\n    end\n\n    def render_redcarpet\n      ::Redcarpet::Markdown.new(\n        ::Redcarpet::Render::HTML,\n        tables: true,\n        lax_spacing: true,\n        fenced_code_blocks: true,\n        space_after_headers: true,\n        hard_wrap: true,\n        autolink: true,\n        strikethrough: true,\n        underline: true,\n        highlight: true,\n        quote: true,\n        with_toc_data: true\n      ).render(@body)\n    end\n\n    def render_kramdown\n      body = @body.to_s.dup.force_encoding(\"utf-8\")\n      Kramdown::Document.new(body).to_html\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Boolean Filter for Grace Period in Avo\nDESCRIPTION: Creates a boolean filter class in Avo that filters orders by grace period status. The filter provides a single option and applies filtering criteria to the query.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/rest-api-integration.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass GracePeriod < Avo::Filters::BooleanFilter\n  self.name = 'Grace period'\n\n  def apply(_request, query, value)\n    query.where(value)\n  end\n\n  def options\n    {\n      grace_period: 'Within graceperiod'\n    }\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Resource for STI Model - Ruby\nDESCRIPTION: Configures an Avo resource (`SuperUserResource`) specifically for a model using Single Table Inheritance (`::SuperUser`). Explicitly sets `self.model_class` to inform Avo of the precise model the resource represents. This step is crucial for Avo to correctly handle records when dealing with STI, preventing confusion caused by Rails' default casting.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass SuperUserResource < Avo::BaseResource\n  self.title = :name\n  self.includes = []\n  self.model_class = ::SuperUser\n\n  field :id, as: :id\n  field :name, as: :text\nend\n```\n\n----------------------------------------\n\nTITLE: After Update Example for Boolean Group (JSON)\nDESCRIPTION: This JSON example describes the behavior of the `boolean_group` field after Avo version 3.7.0. This update ensures that only sent keys are updated, thus preserving data integrity. This means that only the values provided will be updated.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/boolean_group.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// Before update.\n{\n  \"feature_enabled\": true,\n  \"another_feature_enabled\": false,\n  \"something_else\": \"some_value\" // this will be kept\n}\n\n// After update.\n{\n  \"feature_enabled\": true,\n  \"another_feature_enabled\": false,\n  \"something_else\": \"some_value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Set Badge Color for Avo Grid Item Ruby\nDESCRIPTION: Customize the background color of the grid item badge. The `badge_color` key is added to the hash returned by the `card` lambda, specifying a Tailwind CSS color name (e.g., 'green', 'orange') for the badge.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/grid-view.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nself.grid_view = {\n  card: -> do\n    {\n      cover_url: record.image.attached? ? main_app.url_for(record.image.variant(resize: \"300x300\")) : nil,\n      title: record.title,\n      body: simple_format(record.description),\n      badge_label: (record.updated_at < 1.week.ago ? \"New\" : \"Updated\"),\n      badge_color: (record.updated_at < 1.week.ago ? \"green\" : \"orange\")\n    }\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: Creating clear body containers in Avo\nDESCRIPTION: Shows how to use the :clear type for body statements to avoid wrapping content in the default white container. Also demonstrates the clear_body alias for the same functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/release-notes.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nbody :clear\n# or\nclear_body\n```\n\n----------------------------------------\n\nTITLE: Customizing via Parameters on Record Link Field in Avo with Ruby\nDESCRIPTION: These examples illustrate enabling or disabling the automatic addition of 'via' parameters to resource links created by the record_link field using the 'add_via_params' option. Set to true to add context for back-button navigation or false for a cleaner URL. No extra dependencies are necessary; the feature is built into Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/record_link.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# This will generate a link similar to this\n# https://example.com/avo/resources/projects/40?via_record_id=40&via_resource_class=Avo%3A%3AResources%3A%3AProject\nfield :post, as: :record_link, add_via_params: true\n\n# This will generate a link similar to this\n# https://example.com/avo/resources/projects/40\nfield :post, as: :record_link, add_via_params: false\n```\n\n----------------------------------------\n\nTITLE: Generating Action Links Without a Resource Instance in Avo (Ruby)\nDESCRIPTION: This snippet addresses the scenario when no existing resource instance is available to generate an action link, such as from a custom dashboard partial. It shows how to create a new resource instance with or without a record and pass it to the action's `link_arguments` method to obtain the required link arguments. The result is a link that triggers the update action on a city resource without needing an instantiated resource beforehand. This enables triggers from contexts lacking full resource objects. The snippet depends on the Avo framework resource and action classes and Rails' link_to method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/guides-and-tutorials.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\npath, data = Avo::Actions::City::Update.link_arguments(\n  resource: Avo::Resources::City.new(record: city)\n)\n\nlink_to \"Update city\", path, data: data\n```\n\n----------------------------------------\n\nTITLE: Updating Search Query Block Syntax for Has Many Searches - Ruby\nDESCRIPTION: This example details the change needed when upgrading to Avo v2.13 to support flexible and future-proof search queries on has_many associations. It removes the 'params:' keyword argument from the lambda passed to 'self.search_query'. No dependencies required; update any resource definition using the old search_query block signature.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nself.search_query = ->(params:) do\n  scope.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\nend\n\n# After\nself.search_query = -> do\n  scope.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\nend\n```\n\n----------------------------------------\n\nTITLE: Avo Action Keep Modal Open\nDESCRIPTION: This code defines an Avo action named `KeepModalOpenAction`. It attempts to create a user. If an error occurs during user creation, it displays an error message, keeps the modal open using `keep_modal_open`, and returns. Otherwise, it displays a success message.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass KeepModalOpenAction < Avo::BaseAction\n  self.name = \"Keep Modal Open\"\n  self.standalone = true\n\n  field :name, as: :text\n  field :birthday, as: :date\n\n  def handle(**args)\n    begin\n    user = User.create args[:fields]\n    rescue => error\n      error \"Something happened: #{error.message}\"\n      keep_modal_open\n      return\n    end\n\n    succeed \"All good ✌️\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Assets to Avo\nDESCRIPTION: Shows how to add JavaScript files to be loaded by Avo. The asset manager adds the specified JavaScript file to the head section of Avo's layout file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/plugins.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.asset_manager.add_javascript \"/avo-kanban-assets/avo_kanban\"\n```\n\n----------------------------------------\n\nTITLE: Using Computed Values for External Images (Ruby)\nDESCRIPTION: This snippet shows how to use computed values with the `external_image` field to generate image URLs dynamically. It takes the `logo` field and computes an image URL using the value from the record's `url` attribute and constructs the URL using `//logo.clearbit.com/`. It uses `URI.parse(record.url).host` to extract the host from the URL, and includes a size parameter.  If there's a `rescue` block handling potential errors during URL parsing or retrieval, the output becomes `nil`. Requires the `uri` dependency.  This is used to customize the image URL.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/external_image.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :logo, as: :external_image do\n  \"//logo.clearbit.com/#{URI.parse(record.url).host}?size=180\"\nrescue\n  nil\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Money Field in Avo (Ruby)\nDESCRIPTION: This snippet defines a money field named `price` within an Avo resource.  It uses the `:money` type and specifies an array of currencies to be displayed in a dropdown.  The `currencies` parameter dictates which currencies are available for selection.  This declaration is necessary for displaying monetary values correctly using the money field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/money.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :price, as: :money, currencies: %w[EUR USD RON PEN]\n```\n\n----------------------------------------\n\nTITLE: Authorizing Item Visibility Avo Menu Ruby\nDESCRIPTION: Demonstrates how to use the Avo `authorize` method within the `visible` block to control menu item visibility based on Pundit or similar authorization rules. It shows checking a `current_user`'s permission for a specific action (`\"index?\"`) on a model (`Team`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    resource :team, visible: -> do\n      # authorize current_user, MODEL_THAT_NEEDS_TO_BE_AUTHORIZED, METHOD_THAT_NEEDS_TO_BE_AUTHORIZED\n      authorize current_user, Team, \"index?\", raise_exception: false\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Rolify Gem Dependency\nDESCRIPTION: This snippet adds the `rolify` gem to the `Gemfile` of the Ruby on Rails application. This dependency is necessary for implementing role-based access control using Rolify. The dependency must be manually added to the Gemfile. After adding the line, the user needs to run `bundle install`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rolify-integration.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"rolify\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo Context for Multitenancy in Rails\nDESCRIPTION: This Ruby code configures Avo to set a context object that includes the current account. This allows you to access the account information within Avo's interface. Dependencies: The Avo gem should be configured. It fetches data such as the current user, request parameters, and the current account.  The output is made available within Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/multitenancy.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.set_context do\n    {\n      foo: 'bar',\n      user: current_user,\n      params: request.params,\n      account: Current.account\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Map Cards with iframes in Ruby and HTML\nDESCRIPTION: Example of creating a map card by combining a PartialCard with an iframe to embed Google Maps content.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cards.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/cards/map_card.rb\nclass MapCard < Avo::Dashboards::PartialCard\n  self.id = \"map_card\"\n  self.label = \"Map card\"\n  self.partial = \"avo/cards/map_card\"\n  self.display_header = false\n  self.cols = 2\n  self.rows = 4\nend\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- app/views/avo/cards/_map_card.html.erb -->\n<iframe src=\"https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d17991.835132857846!2d-73.98926852562143!3d40.742050491245955!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sro!4v1647079626880!5m2!1sen!2sro\" width=\"100%\" height=\"100%\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Using the `view` Value in Stimulus Controllers\nDESCRIPTION: All stimulus controllers receive a `view` value via a data attribute in the DOM. The example shows how to define a `view` property in JS, which can be used to tailor behavior based on the current view (`index`, `show`, `edit`, or `new`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"space-y-12\" data-model-id=\"280\" data-controller=\"resource-edit course-resource\" data-resource-edit-view-value=\"edit\" data-course-resource-view-value=\"edit\">\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\n\nexport default class extends Controller {\n  static values = {\n    view: String,\n  }\n\n  async connect() {\n    console.log('view ->', this.viewValue)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing GitHub Actions Secret as Environment Variable\nDESCRIPTION: Illustrates how to expose a GitHub Actions repository secret named `BUNDLE_PACKAGER__DEV` as an environment variable within a workflow job using the `env` block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  BUNDLE_PACKAGER__DEV: ${{secrets.BUNDLE_PACKAGER__DEV}}\n```\n\n----------------------------------------\n\nTITLE: Sample Avo Resource Tool Partial ERB\nDESCRIPTION: Provides the standard structure of an Avo resource tool ERB partial. It demonstrates how panels and tools are typically rendered within this context and lists the key variables available for use, such as `@resource`, `@resource.model`, `form`, and `current_user`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-field-components.md#_snippet_0\n\nLANGUAGE: ERB\nCODE:\n```\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new title: \"Post info\" do |c| %>\n    <% c.with_tools do %>\n      <%= a_link('/avo', icon: 'heroicons/solid/academic-cap', style: :primary) do %>\n        Dummy link\n      <% end %>\n    <% end %>\n    <% c.with_body do %>\n      <div class=\"flex flex-col p-4 min-h-24\">\n        <div class=\"space-y-4\">\n          <h3>🪧 This partial is waiting to be updated</h3>\n          <p>\n            You can edit this file here <code class='p-1 rounded bg-gray-500 text-white text-sm'>app/views/avo/resource_tools/post_info.html.erb</code>.\n          </p>\n          <p>\n            The resource tool configuration file should be here <code class='p-1 rounded bg-gray-500 text-white text-sm'>app/avo/resource_tools/post_info.rb</code>.\n          </p>\n          <%\n            # In this partial, you have access to the following variables:\n            # tool\n            # @resource\n            # @resource.model\n            # form (on create & edit pages. please check for presence first)\n            # params\n            # Avo::App.context\n            # current_user\n          %>\n        </div>\n      </div>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Renaming link_to_resource to link_to_record in 3.0.1.beta9\nDESCRIPTION: Demonstrates how to update field configuration by changing the 'link_to_resource' option to 'link_to_record' in resource class definitions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id, link_to_resource: true\n    field :email, as: :gravatar, link_to_resource: true\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :email, as: :gravatar, link_to_record: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting DateTime Field Timezone Avo Ruby\nDESCRIPTION: Shows how to configure the `timezone` option for an Avo DateTime field. The timezone determines how the date-time value is cast and displayed. It can be set using a static TZInfo identifier string (e.g., \"EET\") or dynamically using a lambda that evaluates based on the current record context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/date_time.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :started_at, as: :date_time, timezone: \"EET\"\n# Or\nfield :started_at, as: :date_time, timezone: -> { record.timezone }\n```\n\n----------------------------------------\n\nTITLE: Using Helpers within ExecutionContext in Avo (Ruby)\nDESCRIPTION: Demonstrates accessing custom helper methods within an Avo block executed by `ExecutionContext`. The example shows a `ProductsHelper` with a `simple_name` method, which is then called within a field's `format_using` block via the `helpers` object provided by the context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/execution-context.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# products_helper.rb\nclass ProductsHelper\n  # Strips the \"CODE_\" prefix from the name\n  def simple_name(name)\n    name.gsub \"CODE_\", \"\"\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, format_using: -> { helpers.simple_name(value) }\n```\n\n----------------------------------------\n\nTITLE: Setting Heroku Environment Variable for Bundler Authentication Using Bash\nDESCRIPTION: This snippet provides the Heroku CLI command to set the BUNDLE_PACKAGER__DEV environment variable in the Heroku app's configuration. This setup allows bundler running on Heroku to authenticate with the private gem server during deployment or build processes. The token placeholder 'xxx' must be replaced with the actual Gem Server Token. The environment variable is stored securely in Heroku's config vars.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/gem-server-authentication.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nheroku config:set BUNDLE_PACKAGER__DEV=xxx\n```\n\n----------------------------------------\n\nTITLE: Ejecting Components into a Scoped Namespace with --scope Option - Ruby on Rails - Bash\nDESCRIPTION: This pair of snippets demonstrate ejecting a view or field component into a custom namespace (using --scope) with the Rails generator, providing greater modularity and control over UI customization. The first command ejects ResourceIndexComponent into an admins namespace under Avo::Views; the second command does the same for a field show component. Rails and Avo are required; input includes the component and desired scope; output is new Ruby and ERB files in a scoped directory.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/eject-views.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrails g avo:eject --component Avo::Views::ResourceIndexComponent --scope admins\n```\n\nLANGUAGE: bash\nCODE:\n```\n      create  app/components/avo/views/admins/resource_index_component.rb\n      create  app/components/avo/views/admins/resource_index_component.html.erb\n```\n\nLANGUAGE: bash\nCODE:\n```\nrails g avo:eject --field-components text --view show --scope admins\n```\n\nLANGUAGE: bash\nCODE:\n```\n      create  app/components/avo/fields/admins/text_field/show_component.rb\n      create  app/components/avo/fields/admins/text_field/show_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Defining a HasOne Association in Ruby using Avo\nDESCRIPTION: This Ruby code snippet demonstrates how to define a 'HasOne' association in your Avo resource. It uses the `field` method to declare a field named `:admin` and specifies its association type as `:has_one`. This allows you to display and interact with the associated record's details within the Avo interface. It requires the Avo framework to be set up and a model with a `has_one` association defined.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations/has_one.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :admin, as: :has_one\n```\n\n----------------------------------------\n\nTITLE: Adding Link with Data Attributes Avo Menu Ruby\nDESCRIPTION: Explains how to add arbitrary HTML `data` attributes to a menu link using the `data` option. It provides an example simulating a Turbo DELETE request for a sign-out link using `data: { turbo_method: :delete }`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.main_menu = -> {\n  link_to \"Sign out!\", main_app.destroy_user_session_path, data: { turbo_method: :delete }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating multiple sidebar panels in Avo\nDESCRIPTION: Demonstrates how to create multiple panels in the sidebar by declaring multiple sidebar statements. This enables more complex sidebar layouts with distinct panel groupings.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/release-notes.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nsidebar\nsidebar\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Fields with Additional Options in Avo\nDESCRIPTION: This code configures grid view fields with options such as linking to resource and sanitizing/truncating content. It demonstrates how to declare cover, title, and body fields in the grid block, applying various display and interaction options, including using external images and handling potential errors during sanitization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/grid-view.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  self.default_view_type = :grid\n\n  field :id, as: :id\n  field :name, as: :text, required: true\n  field :body, as: :textarea\n  field :cover_photo, as: :file, is_image: true\n\n  grid do\n    cover :cover_photo, as: :file, is_image: true\n    title :name, as: :text\n    body :body, as: :textarea\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing After Update Path in Avo Controller\nDESCRIPTION: Shows how to override the after_update_path method to customize where the user is redirected after successfully updating a record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef after_update_path\n  \"/avo/resources/users\"\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Prompt for Creating an Avo Resource via URL\nDESCRIPTION: This snippet shows how to structure a prompt for generating an Avo resource, specifically for a product model. Users need to prepend this URL to their prompt after enabling Deep Search, ensuring consistent and automated code generation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/grok.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://avohq.io/llms.txt create an Avo resource for a product model\n```\n\n----------------------------------------\n\nTITLE: Defining External Link for Avo Resource\nDESCRIPTION: This code demonstrates how to define an external link for an Avo resource using the `self.external_link` option. This allows users to navigate to the public path of a record outside the Avo interface. The lambda function receives the `record` and can utilize path helpers to generate the URL.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.external_link = -> { # [!code focus]\n    main_app.post_path(record) # [!code focus]\n  } # [!code focus]\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Arbitrary Data Attributes to menu links\nDESCRIPTION: This snippet illustrates how to include custom data attributes within a menu link by using the data option, enabling methods like `put`, `post`, and `delete` through `turbo_method` attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.main_menu = -> {\n  link_to \"Sign out!\", main_app.destroy_user_session_path, data: { turbo_method: :delete }\n}\n```\n\n----------------------------------------\n\nTITLE: Avo Action - PreUpdate\nDESCRIPTION: This code defines an Avo action named `PreUpdate`. This action's purpose is to prompt the user to select which fields they wish to update for a User record. It utilizes `Base64` encoding and `EncryptionService` to encrypt arguments and pass them to the subsequent `Update` action via a redirect.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass PreUpdate < Avo::BaseAction\n  self.name = \"Update\"\n  self.message = \"Set the fields you want to update.\"\n\n  with_options as: :boolean do\n    field :first_name\n    field :last_name\n    field :user_email\n    field :active\n    field :admin\n  end\n\n  def handle(**args)\n    arguments = Base64.encode64 Avo::Services::EncryptionService.encrypt(\n      message: {\n        render_first_name: args[:fields][:first_name],\n        render_last_name: args[:fields][:last_name],\n        render_user_email: args[:fields][:user_email],\n        render_active: args[:fields][:active],\n        render_admin: args[:fields][:admin]\n      },\n      purpose: :action_arguments\n    )\n\n    redirect_to \"/admin/resources/users/actions?action_id=Update&arguments=#{arguments}\", turbo_frame: \"actions_show\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Avo Resource with Reserved Model Name (sh)\nDESCRIPTION: This shell command generates a new Avo resource named 'UserResource' (creating `Avo::Resources::UserResource` and `Avo::UserResourcesController`) but instructs Avo to use an existing model named 'Resource' (`--model-class resource`). This method allows you to integrate an existing model with a reserved name into Avo without causing naming conflicts with Avo's internal 'resource' components.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/internal-model-names.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbin/rails generate avo:resource user_resource --model-class resource\n```\n\n----------------------------------------\n\nTITLE: Configuring Cover Photo with Size, Visibility, and Source in Avo Using Ruby\nDESCRIPTION: Sets up the cover photo options including its size (:sm, :md, :lg), visibility on specified views (e.g., :show, :forms), and the image source. The source can be defined as a block returning a default image on the index view or the cover_photo attribute of the record otherwise. This configuration allows flexible display and sizing of cover photos based on context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cover-and-profile-photos.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nself.cover_photo = {\n  size: :md, # :sm, :md, :lg\n  visible_on: [:show, :forms], # can be :show, :index, :edit, or a combination [:show, :index]\n  source: -> {\n    if view.index?\n      # We\\'re on the index page and don\\'t have a record to reference\n      DEFAULT_IMAGE\n    else\n      # We have a record so we can reference it\\'s cover_photo\n      record.cover_photo\n    end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Resources Per Page in Avo Resource Index View\nDESCRIPTION: This snippet sets the number of resources displayed per page in the index view via `config.per_page`. It requires editing the Avo config file and influences pagination UI and data loading behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.per_page = 24\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Audit Logging Globally\nDESCRIPTION: Configure the Avo initializer to enable the audit logging feature by setting config.enabled to true.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\n\nAvo.configure do |config|\n  # ...\nend\n\nAvo::AuditLogging.configure do |config|\n  # config.enabled = false\n  config.enabled = true\n  # config.author_model = \"User\"\nend\n```\n\n----------------------------------------\n\nTITLE: Invoking Gemini LLM Integration via Bash Command\nDESCRIPTION: This snippet shows how to use a Bash command to enable the Gemini LLM (Large Language Model) integration with Avo by pointing to a specific URL `https://avohq.io/llms.txt`. This URL triggers Gemini to generate Avo code based on the provided prompt. It is used as part of prompt preparation within the Chat window, specifically when the `🔍 Deep research` feature is enabled. The snippet requires a Unix-like shell environment to execute the curl or similar command, and it outputs the generated code or response from the Gemini service.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/gemini.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://avohq.io/llms.txt\n```\n\n----------------------------------------\n\nTITLE: Customizing Avo Search Query Based on Association Context (Ruby)\nDESCRIPTION: This Ruby code snippet shows how to configure the `search` block within an Avo resource to conditionally modify the search query. It checks if the search originates from a `has_many` association context using `params[:via_association] == 'has_many'`. If true, it applies a specific ordering (`order(name: :asc)`) to the Ransack query results; otherwise, it executes the default Ransack search. This feature requires Avo version 2.13 or later and the Ransack gem.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/search_query_scope_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nself.search = {\n  query: -> {\n    if params[:via_association] == 'has_many'\n      query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false).order(name: :asc)\n    else\n      query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n    end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Avo ReleaseFish Action with RSpec - Ruby\nDESCRIPTION: This code provides an RSpec test for the `Avo::Actions::ReleaseFish` action. It sets up a test environment, defines the action's inputs (fields, current_user, resource, query), and mocks the expected interactions. The test verifies that the action calls `succeed` with the correct message and that the `release` method is called on the fish object. Dependencies: Rails, RSpec, and the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/testing.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'rails_helper'\n\nRSpec.feature Avo::Actions::ReleaseFish, type: :feature do\n  let(:fish) { create :fish }\n  let(:current_user) { create :user }\n  let(:resource) { Avo::Resources::User.new.hydrate model: fish }\n\n  it \"tests the dummy action\" do\n    args = {\n      fields: {\n        message: \"Bye fishy!\"\n      },\n      current_user: current_user,\n      resource: resource,\n      query: [fish]\n    }\n\n    action = described_class.new(resource: resource, user: current_user, view: :edit)\n\n    expect(action).to receive(:succeed).with \"1 fish released with message 'Bye fishy!'.\"\n    expect(fish).to receive(:release)\n\n    action.handle **args\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Pundit Gem\nDESCRIPTION: This code snippet shows how to add the Pundit gem to your Gemfile. Pundit is used for authorization in Avo. It is required to manually require `pundit` in your Gemfile.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Minimal authorization through OO design and pure Ruby classes\ngem \"pundit\"\n```\n\n----------------------------------------\n\nTITLE: Displaying activities for a specific user in Avo resource\nDESCRIPTION: In the `Avo::Resources::User` resource, add a `has_many` field `avo_authored` to show all activities authored by that user, leveraging the configured author models.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :email, as: :text, link_to_record: true\n    field :products, as: :has_many\n    field :avo_authored, as: :has_many, name: \"Activity\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Add HTML Attributes to Show Label Target - Ruby\nDESCRIPTION: Allows assigning HTML attributes to the label element for a field in the show view by configuring the `label` property within the `show` block. Provides flexibility to add class, style, or data attributes affecting the label, useful for accessibility or UI enhancements.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  show: {\n    label: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Avo Field Input in Edit View (Object Notation) (Ruby)\nDESCRIPTION: This snippet illustrates the basic structure for using the `html` option in object notation to target the field's input element specifically for the 'edit' view (also applies to 'new').\n\nDependencies: Avo framework.\n\nParameters: `html` option with a nested hash structure `edit: { input: {} }`. Attributes (`style`, `classes`, `data`) would be added inside the inner `{}`.\n\nExpected Input: A hash structure specifying the 'edit' view and 'input' target.\n\nExpected Output: Configures the Avo field definition to allow adding HTML attributes to the edit/new view input.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/html.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    input: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gemfile Configuration for Optional Paid Gems\nDESCRIPTION: Provides the Ruby code snippet for modifying the `Gemfile` to place paid Avo gems in an `optional: true` group sourced from `packager.dev`, allowing for selective bundling.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\ngem 'avo',\n\ngroup :avo, optional: true do\n  source \"https://packager.dev/avo-hq/\" do\n    gem \"avo-advanced\", \"~> 3.17\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using avo_edit_field in Partial (ERB)\nDESCRIPTION: This snippet demonstrates how to use the `avo_edit_field` helper within a custom partial to render an editable field.  It requires a field to be defined in the Avo resource and displays a text input for editing the `name` field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-field-components.md#_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<!-- In your partial file -->\n<%= avo_edit_field :name, as: :text %>\n```\n\n----------------------------------------\n\nTITLE: Field Wrapper with full_width Option for Show/Edit - Avo (ERB)\nDESCRIPTION: This ERB code uses `field_wrapper` with `full_width: true` to expand the value area to the wrapper's full width, omitting the extra space. Intended for fields that need more horizontal room, like WYSIWYG editors or file uploads. Requires `field_wrapper_args` and a Boolean check component. The `full_width` parameter is crucial for this layout.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_8\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, full_width: true do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: URL Param Change for Basic Filters - Text\nDESCRIPTION: This shows the change in the URL query parameter used for Basic Filters from `filters` to `encoded_filters` to resolve a conflict when used alongside Dynamic Filters.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n# Before\nhttps://example.com/avo/resources/users?filters[first_name][contains][]=Jason&page=1&filters=eyJBdm86OkZpbHRlcnM6OklzQWRtaW4iOlsiYWRtaW5zIl19\n\n# After\nhttps://example.com/avo/resources/users?filters[first_name][contains][]=Jason&page=1&encoded_filters=eyJBdm86OkZpbHRlcnM6OklzQWRtaW4iOlsiYWRtaW5zIl19\n```\n\n----------------------------------------\n\nTITLE: Attaching Scope using attach_scope - Ruby\nDESCRIPTION: This code snippet demonstrates how to use the `attach_scope` option to filter records shown in the Attach modal.  It takes a block that allows scoping of the `query` object. The block has access to variables from the `AssociationScopeHost`. The example uses `query.non_admins` to scope the records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/associations_attach_scope_option_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :user,\n  as: :belongs_to,\n  attach_scope: -> { query.non_admins }\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Helper in an Avo Computed Field (Ruby)\nDESCRIPTION: Illustrates how to attempt using the custom `extract_excerpt` helper within an Avo Resource's computed field named `:excerpt`. This code will initially fail because the helper is not available in the field's execution context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/use-own-helpers-in-resource-files.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  def fields\n    field :excerpt, as: :text do |model|\n      extract_excerpt model.body\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing JavaScript Alert Messages for Trix Editor in YAML\nDESCRIPTION: Provides localization and customization of default JavaScript alert messages displayed by the Trix editor for attachment-related user interactions. Contains keys and default English string values for messages related to disabled attachments, upload restrictions before resource saving, and missing attachment key configuration. This snippet requires YAML configuration support in the application for internationalization or message overriding.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/trix.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\navo:\n  this_field_has_attachments_disabled: This field has attachments disabled.\n  you_cant_upload_new_resource: You can't upload files into the Trix editor until you save the resource.\n  you_havent_set_attachment_key: You haven't set an `attachment_key` to this Trix field.\n```\n\n----------------------------------------\n\nTITLE: Targeting Avo Field Content in Show View (Object Notation) (Ruby)\nDESCRIPTION: This snippet illustrates the basic structure for using the `html` option in object notation to target the field's content element specifically for the 'show' view.\n\nDependencies: Avo framework.\n\nParameters: `html` option with a nested hash structure `show: { content: {} }`. Attributes (`style`, `classes`, `data`) would be added inside the inner `{}`.\n\nExpected Input: A hash structure specifying the 'show' view and 'content' target.\n\nExpected Output: Configures the Avo field definition to allow adding HTML attributes to the show view content.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/html.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  show: {\n    content: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Colors\nDESCRIPTION: This code snippet customizes the colors of the charts within an Avo dashboard. It sets the chart colors using an array of hex color codes. The input is an array of color strings. The chart colors will be applied to charts in the Avo dashboard.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/branding.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.branding = {\n    chart_colors: ['#FFB435', \"#FFA102\", \"#CC8102\", '#FFB435', \"#FFA102\", \"#CC8102\"],\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Automating Removal of Args from Visibility Blocks in Avo Actions - Ruby Script\nDESCRIPTION: This Ruby script programmatically replaces any instance of 'self.visible = ->(resource:, view:) do' with 'self.visible = -> do' in all files of the current directory (excluding '.', '..', and the script itself). It reads, modifies, and writes each file in-place, easing migration of multiple actions to the updated Avo API. No external dependencies are required; key parameters are the constants specifying the search and replace expressions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nDONT_TOUCH = ['.', '..', $0]\nOLD_VISIBLE_BLOCK = \"self.visible = ->(resource:, view:) do\"\nNEW_VISIBLE_BLOCK = \"self.visible = -> do\"\n\ndef remove_args_from_visible_block(file_name)\n  content = File.read file_name\n  content.gsub!(OLD_VISIBLE_BLOCK, NEW_VISIBLE_BLOCK)\n\n  File.open(file_name, \"w\") { |file| file << content }\nend\n\nDir.foreach(\".\") {|file_name| remove_args_from_visible_block file_name unless DONT_TOUCH.include? file_name}\n```\n\n----------------------------------------\n\nTITLE: Setting the Locale for Avo Requests (Ruby)\nDESCRIPTION: This Ruby configuration block sets the locale used by Avo, overriding the default locale for admin panel requests. It belongs in your application’s config/initializers or in an Avo setup block. Key parameter is config.locale, accepting a symbol such as :en or :pt-BR. Outputs are changed UI language in Avo; other parts of the application remain unaffected unless specifically configured.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/i18n.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.locale = :en # default is nil\nend\n```\n\n----------------------------------------\n\nTITLE: Moving TailwindCSS application file\nDESCRIPTION: Command to relocate the application TailwindCSS file to the new location required by TailwindCSS 4.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tailwind-4-migration.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit mv app/assets/stylesheets/application.tailwind.css app/assets/tailwind/application.css\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Field Wrapper with flush Option - Avo (ERB)\nDESCRIPTION: This ERB code disables the default padding in the field wrapper by setting `flush: false` on the `index_field_wrapper`. This ensures the inner content can render edge-to-edge if desired. The snippet expects `field_wrapper_args` and renders the Boolean check component. The key parameter is `flush`, which controls padding removal.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= index_field_wrapper **field_wrapper_args, flush: false do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Avo Resource for Car Model - Ruby\nDESCRIPTION: Defines the Avo resource for the 'Car' model automatically generated by Avo after running the model generator. It inherits from Avo::BaseResource and declares no extra includes or search configuration by default. The 'fields' method specifies three fields: id (identifier), make (text), and mileage (numeric). This resource enables CRUD UI for the Car model records in the admin panel. Customizations can be applied to associations, search, or field types.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/car.rb\nclass Avo::Resources::Car < Avo::BaseResource\n  self.includes = []\n  # self.search = {\n  #   query: -> { query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false) }\n  # }\n\n  def fields\n    field :id, as: :id\n    field :make, as: :text\n    field :mileage, as: :number\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Move Resource Tool Declaration within fields Method in Avo (Ruby)\nDESCRIPTION: Illustrates the required change for declaring resource tools in Avo 3. Previously defined outside the `fields` method, tools like `Avo::ResourceTools::UserTool` must now be declared within the `fields` method of the resource class (`Avo::Resources::User`) to support future features allowing tools to be interspersed with fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-2-avo-3-upgrade.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id, link_to_record: true, sortable: false\n    field :email, as: :gravatar, link_to_record: true, as_avatar: :circle, only_on: :index\n  end\n\n  tool Avo::ResourceTools::UserTool\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# After\nclass Avo::Resources::User < Avo::BaseResource\n  def fields\n    field :id, as: :id, link_to_record: true, sortable: false\n    field :email, as: :gravatar, link_to_record: true, as_avatar: :circle, only_on: :index\n\n    tool Avo::ResourceTools::UserTool\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Boilerplate Avo DateTimeFilter (Ruby)\nDESCRIPTION: Presents the basic structure for a custom Avo `DateTimeFilter` class. It includes the class definition, name setting, and a placeholder `apply` method, along with commented-out examples for configuring filter behavior like type, mode, visibility, and format strings. The default `apply` method returns the query unmodified.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nclass Avo::Filters::CreatedAt < Avo::Filters::DateTimeFilter\n  self.name = \"Created at\"\n  # self.type = :date_time\n  # self.mode = :range\n  # self.visible = -> do\n  #   true\n  # end\n\n  def apply(request, query, value)\n    query\n  end\n\n  # def format\n  #   case type\n  #   when :date_time\n  #     'yyyy-LL-dd TT'\n  #   when :date\n  #     'yyyy-LL-dd'\n  #   end\n  # end\n\n  # def picker_format\n  #   case type\n  #   when :date_time\n  #     'Y-m-d H:i:S'\n  #   when :time\n  #     'Y-m-d'\n  #   end\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pundit Policy with Error Handling in Ruby\nDESCRIPTION: This method retrieves the Pundit policy for a given user and record, raising an error if no policy is found.  It uses `Pundit.policy!` which throws an error if no policy is found. It then rescues `Pundit::NotDefinedError` and re-raises it as a `NoPolicyError`. It takes the user and record as input and returns the policy object. Requires the `pundit` gem.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\ndef policy!(user, record)\n  Pundit.policy!(user, record)\nrescue Pundit::NotDefinedError => error\n  raise NoPolicyError.new error.message\nend\n```\n\n----------------------------------------\n\nTITLE: Enforcing Suggestions in Tags Field in Ruby\nDESCRIPTION: Demonstrates how to limit tag input to only accept values from the suggestions list.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  suggestions: %w(one two three),\n  enforce_suggestions: true\n```\n\n----------------------------------------\n\nTITLE: Hiding Field on Views in Avo Admin - Ruby\nDESCRIPTION: This snippet illustrates how to hide a field (`body`) on specific views (index and show) using the `hide_on` option. The options available for hide_on and show_on methods include: `:new`, `:edit`, `:index`, `:show`, `:forms` (both `:new` and `:edit`) and `:all` (only for `hide_on` and `show_on`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :text, hide_on: [:index, :show]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Link Field with format_using Option in Ruby\nDESCRIPTION: This snippet demonstrates creating a custom link field within an Avo resource. It utilizes the `format_using` option on the `text` field to generate an HTML link to a partner's home page. The `avo.resources_partner_url` helper dynamically generates the URL. It requires the Avo framework and a `partner` association on the record. The output is a formatted HTML link.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/custom-link-field.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# with the format_using option\nfield :partner_home, as: :text, format_using: -> { link_to(value, value, target: \"_blank\") } do\n  avo.resources_partner_url record.partner.id\nend\n```\n\n----------------------------------------\n\nTITLE: Bundling Without Paid Gems using Groups\nDESCRIPTION: Shows the bash command to perform a `bundle install` while specifically including or excluding gem groups, useful for bundling without the paid Avo gems by specifying groups to include.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nRAILS_GROUPS=avo BUNDLE_WITH=avo bundle install\n```\n\n----------------------------------------\n\nTITLE: Using `inherit_association_from_policy` Helper in Ruby\nDESCRIPTION: Shows how to employ the `inherit_association_from_policy` method (available from Avo v2.31 via `Avo::Pro::Concerns::PolicyHelpers`) within a policy class. This helper automatically generates standard association authorization methods by delegating to the specified associated policy (`CommentPolicy` in this case), significantly reducing boilerplate code for association permissions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\ninherit_association_from_policy :comments, CommentPolicy\n```\n\n----------------------------------------\n\nTITLE: Adding Language Switcher (Before v2.3.0)\nDESCRIPTION: This snippet demonstrates how to add a language switcher to the Avo profile dropdown using ERB templates. It compares the current locale to `:en` and renders links to switch between English and Portuguese. The switcher uses `set_locale` to update the locale. Prerequisites include an understanding of ERB templates and the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/multilingual-content.md#_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<!-- After -->\n<% destroy_user_session_path = \"destroy_#{Avo.configuration.current_user_resource_name}_session_path\".to_sym %>\n\n<div <% if main_app.respond_to?(destroy_user_session_path) %> data-controller=\"toggle-panel\" <% end %>>\n  <a href=\"javascript:void(0);\" class=\"flex items-center cursor-pointer font-semibold text-gray-700\" data-action=\"click->toggle-panel#togglePanel\">\n    <% if _current_user.respond_to?(:avatar) &&  _current_user.avatar.present? %>\n      <%= image_tag _current_user.avatar, class: \"h-12 rounded-full border-4 border-white mr-1\" %>\n    <% end %>\n    <% if _current_user.respond_to?(:name) && _current_user.name.present? %>\n      <%= _current_user.name %>\n    <% elsif _current_user.respond_to?(:email) && _current_user.email.present? %>\n      <%= _current_user.email %>\n    <% else %>\n      Avo user\n    <% end %>\n    <% if main_app.respond_to?(destroy_user_session_path) %>\n      <%= svg 'chevron-down', class: \"ml-1 h-4\" %>\n    <% end %>\n  </a>\n\n  <% if main_app.respond_to?(destroy_user_session_path) %>\n    <div class=\"hidden absolute inset-auto right-0 mr-6 mt-0 py-4 bg-white rounded-xl min-w-[200px] shadow-context\" data-toggle-panel-target=\"panel\">\n      <!-- Add this 👇 -->\n      <% classes = \"appearance-none bg-white text-left cursor-pointer text-green-600 font-semibold hover:text-white hover:bg-green-500 block px-4 py-1 w-full\" %>\n\n      <% if I18n.locale == :en %>\n        <%= link_to \"Switch to Portuguese\", { set_locale: 'pt-BR' }, class: classes %>\n      <% else %>\n        <%= link_to \"Switch to English\", { set_locale: 'en' }, class: classes %>\n      <% end %>\n      <!-- Add this 👆 -->\n\n      <%= button_to t('avo.sign_out'), main_app.send(:destroy_user_session_path), method: :delete, form: { \"data-turbo\" => \"false\" }, class: classes %>\n    </div>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Query with dynamic_filter Method\nDESCRIPTION: This snippet shows how to customize a filter's query using the `query` option with the `dynamic_filter` method.  Similar to the previous snippet, it defines a lambda function that provides case-sensitive and case-insensitive filtering. It provides an alternative way to implement query customization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :first_name,\n  query: -> {\n    case filter_param.condition.to_sym\n    when :case_sensitive\n      query.where(\"name = ?\", filter_param.value)\n    when :not_case_sensitive\n      query.where(\"LOWER(name) = ?\", filter_param.value.downcase)\n    end\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining a Status Field with Customizable Load and Fail States in Ruby\nDESCRIPTION: This Ruby code configures a field named `:progress`, which is represented as `:status`, to display the state of a record. It specifies which values should trigger `failed` or `loading` states, with default fallback to `success`. The configuration enables dynamic status display based on provided options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/status.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :progress,\n  as: :status,\n  failed_when: [:closed, :rejected, :failed],\n  loading_when: [:loading, :running, :waiting, \"in progress\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Controls Placement in Avo Resource (obsolete)\nDESCRIPTION: This snippet demonstrates the use of `self.controls_placement` in an Avo resource.  This option is used to control the placement of action controls.  Possible values are `:left`, `:right` or `:both`. This is obsolete, and users should now check \"row controls configuration on table view\" instead.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/task.rb\nclass Avo::Resources::Task < Avo::BaseResource\n  self.controls_placement = :both\nend\n```\n\n----------------------------------------\n\nTITLE: Silent Response in Ruby Avo Actions\nDESCRIPTION: Example of using the silent response type in an Avo action to redirect without showing any notification. Useful for scenarios where feedback is not needed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  def handle(**args)\n    redirect_to \"/admin/some-tool\"\n    silent\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Page Steps for Resource Index Pagination\nDESCRIPTION: This snippet defines the pagination step options in the resource index view using `config.per_page_steps`. It improves user control over number of resources shown per page and requires Avo configuration file modification.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.per_page_steps = [12, 24, 48, 72]\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring a Tags Field in Avo Resource - Ruby\nDESCRIPTION: Defines a simple tags field named 'skills' in an Avo resource to facilitate tag entry by users. No external dependencies are required. Accepts an array of tags as input and stores them as an array attribute on the resource's model; default behavior stores plain strings as tags.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills, as: :tags\n\n```\n\n----------------------------------------\n\nTITLE: Customizing sign_out_path_name - Ruby\nDESCRIPTION: This snippet provides the way to set a complete custom sign-out path using `sign_out_path_name`. If your app uses a different path, like `logout_path`, you'd configure Avo to use it. The `sign_out_path_name` setting overrides `current_user_resource_name` if both are set. It will redirect to the provided custom path name.  If `destroy_user_session_path` isn't available the link will be hidden by default unless the custom path is provided. The input is the path for sign out.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authentication.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.sign_out_path_name = :logout_path\nend\n```\n\n----------------------------------------\n\nTITLE: Positioning Resource Controls on Left or Both Sides\nDESCRIPTION: Moves resource action controls to the left side of rows or renders them on both sides via `config.resource_controls_placement`, accommodating wide or unreadable layouts. Obsolete in newer versions; check respective documentation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.resource_controls_placement = :left\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.resource_controls_placement = :both\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Menu Items in Avo\nDESCRIPTION: Example of adding icons to other menu items like link_to, resource, and dashboard. Since version 2.36, icons can be used on these menu item types.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nlink_to \"Avo\", \"https://avohq.io\", icon: \"globe\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Visibility with self.visible_on_sidebar in Avo Resource - Ruby\nDESCRIPTION: Controls whether the resource appears in the auto-generated sidebar menu by setting self.visible_on_sidebar to true or false. This only affects auto-generated menus, not custom menu editor logic. Applies to Avo resource classes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::TeamMembership < Avo::BaseResource\n  self.visible_on_sidebar = false\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding After Destroy Path in Avo Controller\nDESCRIPTION: Shows how to customize where the user is redirected after successfully destroying a record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ndef after_update_path\n  \"/avo/resources/users\"\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Cover Field from Related Assets in Ruby\nDESCRIPTION: This example demonstrates how to display an image from a related assets model using a computed field within the grid block. It retrieves the first associated asset's image attachment and displays it as a cover, facilitating dynamic display of related resources' images.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/grid-view.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  has_many :post_assets\nend\n\nclass PostAssets < ApplicationRecord\n  belongs_to :post\n\n  has_one_attached :image\nend\n\ngrid do\n  cover :image, as: :file, is_image: true, link_to_resource: true do |model|\n    # find the first asset association and use its image attachment\n    model.post_assets.first.image\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Avo's TailwindCSS stylesheet imports\nDESCRIPTION: Changes required to update the TailwindCSS stylesheet imports in the Avo application, reflecting TailwindCSS 4's different import structure.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tailwind-4-migration.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* app/assets/stylesheets/avo/avo.tailwind.css */\n@import 'tailwindcss/base'; /* [!code --] */\n@import 'tailwindcss'; /* [!code ++] */\n/* Have all of Avo's custom and plugins styles available. */\n@import '../../../../tmp/avo/avo.base.css';\n@import 'tailwindcss/components'; /* [!code --] */\n@import 'tailwindcss/utilities'; /* [!code --] */\n\n/*\n\n@layer components {\n  .btn-primary {\n    @apply py-2 px-4 bg-blue-200;\n  }\n}\n\n*/\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Field in a Resource - Ruby\nDESCRIPTION: Demonstrates adding the custom field to an Avo resource configuration. The ProjectResource registers a progress field as :progress_bar in its fields declaration. Prerequisites: ProgressBarField must be defined and registered.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/progress_bar_field.rb\nclass ProjectResource < Avo::BaseResource\n  self.title = :name\n\n  field :id, as: :id, link_to_resource: true\n  field :progress, as: :progress_bar\nend\n```\n\n----------------------------------------\n\nTITLE: Suggestions with filterable Option (Proc)\nDESCRIPTION: Shows how to use a Proc to dynamically generate suggestions for a text input filter. This enables fetching suggestions based on external data or user input (e.g., from params).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nfield :first_name,\n  as: :text,\n  filterable: {\n    # ...\n    suggestions: -> { [\"Avo\", \"Cado\", params[:extra_suggestion]] }\n    # ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Targeting Avo Field Content in Edit View (Object Notation) (Ruby)\nDESCRIPTION: This snippet illustrates the basic structure for using the `html` option in object notation to target the field's content element specifically for the 'edit' view (also applies to 'new').\n\nDependencies: Avo framework.\n\nParameters: `html` option with a nested hash structure `edit: { content: {} }`. Attributes (`style`, `classes`, `data`) would be added inside the inner `{}`.\n\nExpected Input: A hash structure specifying the 'edit' view and 'content' target.\n\nExpected Output: Configures the Avo field definition to allow adding HTML attributes to the edit/new view content.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/html.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    content: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Wrapper with Stacked Layout Option for Show/Edit - Avo (ERB)\nDESCRIPTION: This ERB snippet uses the `field_wrapper` with a custom `style` attribute (such as background color), but specifically illustrates the option for stacked layout (label on top of value) via the `stacked` option typically. It renders a Boolean check component for the field value. Required dependencies are `field_wrapper_args` and the Boolean check component.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_14\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, style: \"background: red\" do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Icons in Ruby Helpers/Components (Avo)\nDESCRIPTION: Demonstrates using the `svg` helper method within Ruby code, specifically in Avo View Components (`helpers.svg`) and standard Rails helpers (`svg`). It shows how to specify the icon path for both 'avo' and 'heroicons' sets and how to apply CSS classes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/icons.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# in a View Component\nhelpers.svg(\"avo/editor-strike\")\n\n# in a Rails helper\nsvg(\"heroicons/outline/magnifying-glass-circle\", class: \"block h-6 text-gray-600\")\n```\n\n----------------------------------------\n\nTITLE: Ejecting Field Component with Custom Scope in Avo\nDESCRIPTION: Command to eject just the show component for text fields with a custom 'admins' scope. Creates a namespaced version of the component for targeted customization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/eject-views.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrails g avo:eject --field-components text --view show --scope admins\n```\n\n----------------------------------------\n\nTITLE: Overriding Avo ApplicationController to Set Locale with I18n in Ruby\nDESCRIPTION: Implements a custom set_avo_locale method inside Avo::ApplicationController to apply user-requested locales. This approach calls I18n.with_locale with the locale extracted from params, ensuring all Avo requests use the correct language context. Place this code inside app/controllers/avo/application_controller.rb. Dependencies include Avo, Rails, and I18n. The action block receives the locale context, preserving localization consistency without affecting non-Avo parts of the app.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multi-language-urls.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/avo/application_controller.rb\nmodule Avo\n  class ApplicationController < BaseApplicationController\n    def set_avo_locale(&action)\n      I18n.with_locale(params[:locale], &action)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Ordering Buttons in Avo Resource Using Ruby\nDESCRIPTION: This snippet modifies the ordering configuration for a resource in Avo Admin by enabling the display_inline: true option, making ordering buttons always visible in the index view. It utilizes acts_as_list for the action implementations, providing direct access to record reordering methods. The snippet requires Avo and acts_as_list, and it is intended for frequent reordering scenarios where always-on controls are preferred for usability. Inputs are user-triggered actions; outputs are realigned record orders.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/records-reordering.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseLinkResource < Avo::BaseResource\n  self.ordering = {\n    display_inline: true,\n    visible_on: :index,\n    actions: {\n      higher: -> { record.move_higher },\n      lower: -> { record.move_lower },\n      to_top: -> { record.move_to_top },\n      to_bottom: -> { record.move_to_bottom },\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Course Model and Associated Data\nDESCRIPTION: This code defines the `Course` model, including methods `countries` and `cities`. The `countries` method returns an array of countries, and the `cities` method returns a hash mapping countries to their respective cities. The model serves as a data source for populating the country and city selection dropdowns.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Course < ApplicationRecord\n  def self.countries\n    [\"USA\", \"Japan\", \"Spain\", \"Thailand\"]\n  end\n\n  def self.cities\n    {\n      USA: [\"New York\", \"Los Angeles\", \"San Francisco\", \"Boston\", \"Philadelphia\"],\n      Japan: [\"Tokyo\", \"Osaka\", \"Kyoto\", \"Hiroshima\", \"Yokohama\", \"Nagoya\", \"Kobe\"],\n      Spain: [\"Madrid\", \"Valencia\", \"Barcelona\"],\n      Thailand: [\"Chiang Mai\", \"Bangkok\", \"Phuket\"]\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering an Avo Plugin in a Rails Engine (Ruby)\nDESCRIPTION: Demonstrates registering an Avo plugin (`:feed_view`) and mounting its engine within a Rails Engine's initializer using `ActiveSupport.on_load(:avo_boot)`. This ensures the plugin is recognized by Avo and its routes are available at the specified path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/plugins.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/avo/feed_view/engine.rb\nmodule Avo\n  module FeedView\n    class Engine < ::Rails::Engine\n      isolate_namespace Avo::FeedView\n\n      initializer \"avo-feed-view.init\" do\n        # Avo will run this hook on boot time\n        ActiveSupport.on_load(:avo_boot) do\n          # Register the plugin\n          Avo.plugin_manager.register :feed_view\n\n          # Register the mounting point\n          Avo.plugin_manager.mount_engine Avo::FeedView::Engine, at: \"/feed_view\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Heading field in Avo (Ruby)\nDESCRIPTION: Declares a basic Heading field in an Avo resource. The field name ':user_information' is used as the default content. This field acts as a visual separator and is not tied to a database column.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/heading.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :user_information, as: :heading\n```\n\n----------------------------------------\n\nTITLE: Date condition mappings for dynamic filters - Ruby\nDESCRIPTION: This Ruby hash maps date filter condition keys to their descriptive labels for use in Avo's dynamic filters. The `.invert` method swaps keys and values to facilitate lookup during query building. This allows filtering dates with conditions like 'Is on or before' or 'Is within'. It supports date comparisons in Ransack queries on date/time fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  is: \"Is\",\n  is_not: \"Is not\",\n  lte: \"Is on or before\",\n  gte: \"Is on or after\",\n  is_within: \"Is within\",\n  is_null: \"Is null\",\n  is_not_null: \"Is not null\",\n}.invert\n```\n\n----------------------------------------\n\nTITLE: Generating Avo Resource with Existing Model (Ruby)\nDESCRIPTION: This command generates an Avo resource with a different name while keeping the original model class, avoiding naming conflicts with Avo's reserved names. It takes the resource name (`user_resource`) and the model class (`resource`) as arguments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/internal-model-names.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbin/rails generate avo:resource user_resource --model-class resource\n```\n\n----------------------------------------\n\nTITLE: Enforcing Restrictions on KeyValue Editing in Ruby\nDESCRIPTION: Illustrates how to restrict user actions such as editing keys, adding new rows, or deleting existing rows by setting respective boolean flags. Setting these options to true disables the associated functionalities.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/key_value.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :meta, # The database field ID\n  as: :key_value, # The field type.\n  disable_editing_keys: false, # Option to disable the ability to edit keys. Implies disabling to add rows. Defaults to false.\n  disable_adding_rows: false, # Option to disable the ability to add rows. Defaults to false.\n  disable_deleting_rows: false # Option to disable the ability to delete rows. Defaults to false.\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Card Settings in Ruby\nDESCRIPTION: Example of configuring base settings for a metric card including ID, label, description, size, and header display options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cards.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.label = 'Users count'\n  self.description = 'Users description'\n  self.cols = 1\n  self.rows = 1\n  self.display_header = true\nend\n```\n\n----------------------------------------\n\nTITLE: Ejecting Logo Partial in Ruby on Rails with Avo\nDESCRIPTION: Command to eject the logo partial from Avo into the application for customization. The partial will be created at app/views/avo/logo/_logo.html.erb.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/eject-views.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:eject --partial :logo\n```\n\n----------------------------------------\n\nTITLE: Add Hashid Rails gem to Gemfile\nDESCRIPTION: Adds the `hashid-rails` gem to the application's Gemfile.  This is a prerequisite for using Hashids to generate short, unique, and cryptographically secure IDs. The gem version is specified as '~> 1.0'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/custom-ids.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"hashid-rails\", \"~> 1.0\"\n```\n\n----------------------------------------\n\nTITLE: Embedding a Google Map in HTML\nDESCRIPTION: This snippet shows how to embed a Google Map into an Avo card using an iframe.  The iframe's `src` attribute contains the URL for the embedded map. The `width`, `height`, `style`, `allowfullscreen`, and `loading` attributes control the map's appearance and behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- app/views/avo/cards/_map_card.html.erb -->\n<iframe src=\"https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d17991.835132857846!2d-73.98926852562143!3d40.742050491245955!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sro!4v1647079626880!5m2!1sen!2sro\" width=\"100%\" height=\"100%\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Generating Avo resource for Role model\nDESCRIPTION: Creates an Avo resource for the 'Role' model to manage roles via the admin panel. Utilizes the Avo generator to scaffold resource files, making roles accessible within the interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rolify-integration.md#_snippet_2\n\nLANGUAGE: Zsh\nCODE:\n```\nbin/rails generate avo:resource role\n```\n\n----------------------------------------\n\nTITLE: Enabling Static Map Rendering for Location Field with Mapkick-static in Avo (Ruby)\nDESCRIPTION: This code demonstrates how to enable static map rendering using the 'static' option along with 'mapkick-static' gem integration. Set static: true to use static image maps instead of interactive ones. Requires both 'mapkick-static' (and optionally 'mapkick-rb') gems and a valid MAPBOX_ACCESS_TOKEN environment variable. The snippet also applies custom map style via mapkick_options; works with coordinates stored in separate database columns.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/location.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :coordinates,\n  as: :location,\n  stored_as: [:latitude, :longitude],\n  static: true,\n  mapkick_options: {\n    style: 'mapbox://styles/mapbox/satellite-v9'\n  }\n```\n\n----------------------------------------\n\nTITLE: Converting heading declarations to field type in Avo for Ruby\nDESCRIPTION: This snippet explains the transition from using the 'heading' method with a string or HTML directly to using a field of type 'heading' with an ID. It details renaming the 'heading' call to 'field' and adding 'as: :heading', including support for HTML rendering through a block. This ensures consistency with the new API and allows customization via labels or HTML content.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-2-avo-3-upgrade.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nheading 'User Information'\n\n# After\nfield :user_information, as: :heading\n# or...\nfield :some_id, as: :heading, label: 'User Information'\n\n# Before\nheading '<div class=\"underline uppercase font-bold\">User Information</div>', as_html: true\n\n# After\nfield :some_id, as: :heading, as_html: true do\n  '<div class=\"underline uppercase font-bold\">User Information</div>'\nend\n```\n\n----------------------------------------\n\nTITLE: Importing Guide Data Vue/JavaScript\nDESCRIPTION: Imports guide data from a local JavaScript file using Vue's script setup syntax. This data is then made available to the component's template for dynamic rendering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import { data } from './../.vitepress/recipes.data.js'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using the body slot\nDESCRIPTION: This snippet demonstrates how to insert content in the `body` slot of the `Avo::PanelComponent`.  It is the primary area for content within the panel.  The example shows the basic usage of the slot where content is added within a block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-components/avo-panel-component.md#_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_body do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Example of Border Color Changes in TailwindCSS 4\nDESCRIPTION: An HTML snippet showing the need to specify explicit border color classes like 'border-gray-200' due to the default border color changing to 'currentColor' in TailwindCSS 4. It prompts verifying and updating implicit border colors across the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tailwind-4-migration.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"border border-gray-200 p-4\"> <!-- TailwindCSS 4 -->\n  Content with default gray border\n</div>\n```\n\n----------------------------------------\n\nTITLE: Suggestions with dynamic_filter (Proc)\nDESCRIPTION: Shows how to use a Proc to dynamically generate suggestions for a text input filter when using dynamic_filter.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :first_name,\n  suggestions: -> { [\"Avo\", \"Cado\", params[:extra_suggestion]] }\n```\n\n----------------------------------------\n\nTITLE: Using do_nothing in an Avo Action (Ruby)\nDESCRIPTION: Shows the use of `do_nothing`, which is an alias for `close_modal`. Like `close_modal`, calling `do_nothing` in an action's `handle` method will flash accumulated messages and close the action modal via Turbo Streams, preserving the current page or form state without a full redirect.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Actions::CloseModal < Avo::BaseAction\n  self.name = \"Close modal\"\n\n  def handle(**args)\n    # do_something_here\n    succeed \"Modal closed!!\"\n    do_nothing\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Metric Card in Ruby\nDESCRIPTION: Creates a basic metric card for displaying a large number, with the `query` method calculating the value based on user data within a date range. Utilizes `result` to store and display the aggregated count, with logic to determine the date range based on the selected range option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = 'users_metric'\n  self.label = 'Users count'\n  self.description = 'Some tiny description'\n  self.cols = 1\n  def query\n    from = Date.today.midnight - 1.week\n    to = DateTime.current\n    if range.present?\n      if range.to_s == range.to_i.to_s\n        from = DateTime.current - range.to_i.days\n      else\n        case range\n        when 'TODAY'\n          from = DateTime.current.beginning_of_day\n        when 'MTD'\n          from = DateTime.current.beginning_of_month\n        when 'QTD'\n          from = DateTime.current.beginning_of_quarter\n        when 'YTD'\n          from = DateTime.current.beginning_of_year\n        when 'ALL'\n          from = Time.at(0)\n        end\n      end\n    end\n    result User.where(created_at: from..to).count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Field Visibility Using Avo in Ruby\nDESCRIPTION: Demonstrates the recommended way to conditionally show or hide fields in Avo's resource definition by using the visibility option with lambda functions, rather than conditional logic inside the fields method. This approach ensures all fields are always defined, allowing Avo to manage UI presentation and parameter permissions correctly. It requires access to request parameters (params) and Avo's field DSL.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/best-practices.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Scenario 1\ndef fields\n  if params[:special_case].present?\n    field :special_field, as: :text\n  else\n    field :regular_field, as: :text\n  end\nend\n\n# Scenario 2\ndef fields\n  field :special_field, as: :text, visible: -> { params[:special_case].present? }\n  field :regular_field, as: :text, visible: -> { params[:special_case].present? }\nend\n```\n\n----------------------------------------\n\nTITLE: Adding ActsAsTaggableOn to Post Model Using Ruby\nDESCRIPTION: Adds tagging support to the Post ActiveRecord model by calling 'acts_as_taggable_on :tags', enabling it to manage tag attributes through the acts-as-taggable-on gem. This is required for the Avo resource tag field to function correctly with tagging features.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  acts_as_taggable_on :tags\nend\n```\n\n----------------------------------------\n\nTITLE: Example PostPolicy for authorization scenarios\nDESCRIPTION: Demonstrates a simple PostPolicy class that only defines the show? method, used to illustrate how explicit_authorization affects access control.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostPolicy < ApplicationPolicy\n  def show?\n    user.admin?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Passing the `form` Object to `avo_edit_field` (ERB)\nDESCRIPTION: Illustrates how to pass the `form` object, available in Avo resource tool partials during edit or new actions, to the `avo_edit_field` helper. This is necessary for proper form integration and data binding within the Rails form builder.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-field-components.md#_snippet_2\n\nLANGUAGE: ERB\nCODE:\n```\n<%= avo_edit_field :name, as: :text, form: form %>\n```\n\n----------------------------------------\n\nTITLE: Defining the KeyValue Field in Ruby\nDESCRIPTION: Shows how to declare the KeyValue field in Ruby, associating it with a database field called :meta, with the field type as :key_value. This setup enables editing key-value pairs stored in JSON format.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/key_value.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :meta, as: :key_value\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Result Description (Pro Feature)\nDESCRIPTION: Add a description below the title in search results using the `item -> description` option. Similar to the title, this lambda has access to the `record` and can display additional relevant information from the model. This feature requires an Avo Pro license.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(name_cont: params[:q], m: \"or\").result(distinct: false) },\n    item:  -> do\n      {\n        title: \"[#{record.id}]#{record.name}\",\n        description: record.truncated_body\n      }\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Arguments to Field Wrappers in Custom Fields - ERB\nDESCRIPTION: This ERB snippet demonstrates passing additional arguments (like 'compact: true') into the new 'field_wrapper' method recommended after Avo v2.17. The 'field_wrapper_args' method supplies standard arguments. Use this updated approach in custom field partials to support new options such as compact layout.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_11\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, compact: true do %>\n```\n\n----------------------------------------\n\nTITLE: Declaring an External Image Field in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to declare an `external_image` field in an Avo model.  It uses the `field` method and specifies `:external_image` as the `as` parameter. The field displays images from URLs stored in the database field `logo`.  It takes the URL from the database and renders an `image_tag` for display on `Index` and `Show` views. No specific dependencies are required beyond the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/external_image.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :logo, as: :external_image\n```\n\n----------------------------------------\n\nTITLE: Setting static `home_path` and initial breadcrumbs in Avo\nDESCRIPTION: Sets a static `home_path` and initializes breadcrumbs for navigation consistency, affecting the sidebar and header link behavior in development environment.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.home_path = \"/avo/dashboard\"\n  config.set_initial_breadcrumbs do\n    add_breadcrumb \"Dashboard\", \"/avo/dashboard\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying custom 'position' attribute for drag-and-drop\nDESCRIPTION: This snippet demonstrates how to specify a custom attribute 'record.position_in_list' as the position indicator used during drag-and-drop reordering, instead of the default 'record.position'. This provides flexibility for different order attribute naming conventions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/records-reordering.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nself.ordering = {\n  display_inline: true,\n  visible_on: %i[index association],\n  position: -> { record.position_in_list },\n  drag_and_drop: true,\n  actions: {\n    higher: -> { record.move_higher },\n    lower: -> { record.move_lower },\n    to_top: -> { record.move_to_top },\n    to_bottom: -> { record.move_to_bottom },\n    insert_at: -> { record.insert_at position }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration of 'Area' field with combined options in Ruby\nDESCRIPTION: This example illustrates setting multiple options for the 'area' field, including geometry type, map styling, controls, and datapoint labels, tooltips, and colors. It demonstrates how to customize map visualization in Ruby code.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/area.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :center_area,\n  as: :area,\n  geometry: :polygon,\n  mapkick_options: {\n    style: 'mapbox://styles/mapbox/satellite-v9',\n    controls: true\n  },\n  datapoint_options: {\n    label: 'Paris City Center',\n    tooltip: 'Bonjour mes amis!',\n    color: '#009099'\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Photo Source in Avo Using Ruby\nDESCRIPTION: Defines the profile photo configuration by specifying a source for the image. The source can be a Ruby block which returns a default image on the index page or the profile_photo attribute of the current record on other views. The configuration supports dynamic selection based on the current view context in Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cover-and-profile-photos.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nself.profile_photo = {\n  source: -> {\n    if view.index?\n      # We're on the index page and don't have a record to reference\n      DEFAULT_IMAGE\n    else\n      # We have a record so we can reference it\\'s profile_photo\n      record.profile_photo\n    end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Hash Method in Avo Resource\nDESCRIPTION: This code defines a custom `cache_hash` method within an Avo resource. The method computes a cache key based on the record, a file hash, and optionally the parent record if it exists. This ensures that the cache is busted when the resource or policy files change or when associated data changes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\ndef cache_hash(parent_record)\n  result = [record, file_hash]\n\n  if parent_record.present?\n    result << parent_record\n  end\n\n  result\nend\n\ndef file_hash\n  content_to_be_hashed = \"\"\n\n  file_name = self.class.underscore_name.tr(\" \", \"_\")\n  resource_path = Rails.root.join(\"app\", \"avo\", \"resources\", \"#{file_name}.rb\").to_s\n  if File.file? resource_path\n    content_to_be_hashed += File.read(resource_path)\n  end\n\n  # policy file hash\n  policy_path = Rails.root.join(\"app\", \"policies\", \"#{file_name.gsub(\"_resource\", \"\")}_policy.rb\").to_s\n  if File.file? policy_path\n    content_to_be_hashed += File.read(policy_path)\n  end\n\n  Digest::MD5.hexdigest(content_to_be_hashed)\nend\n```\n\n----------------------------------------\n\nTITLE: Enhancing Asset Precompilation for Avo from GitHub in Rakefile\nDESCRIPTION: Modifies the 'Rakefile' to include Avo's asset build step during the precompilation process. This ensures Avo's assets are compiled when deploying assets in production.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/installation.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nRake::Task[\"assets:precompile\"].enhance do\n  Rake::Task[\"avo:build-assets\"].execute\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Field in Ruby with Avo\nDESCRIPTION: Example of how to define a Date field in Avo with custom configuration options including first day of the week, picker format, display format, and placeholder text.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/date.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :birthday,\n  as: :date,\n  first_day_of_week: 1,\n  picker_format: \"F J Y\",\n  format: \"yyyy-LL-dd\",\n  placeholder: \"Feb 24th 1955\"\n```\n\n----------------------------------------\n\nTITLE: Using the 'footer' Slot in Avo::PanelComponent (ERB)\nDESCRIPTION: Illustrates adding supplementary information or custom content to the 'footer' slot, located at the very bottom of the Avo::PanelComponent, below any body or footer controls.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-components/avo-panel-component.md#_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_footer do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Rails App with Avo Advanced - Bash\nDESCRIPTION: This snippet details the initialization of a new Rails application with the Avo Advanced package using a template obtained from a remote source. It requires a standard Rails environment, internet access, and permissions to run shell commands. Replace APP_NAME with your intended application name. The result is a Rails project set up with the advanced features of Avo; specific setup steps or credentials may be required beyond this step depending on Avo Advanced licensing.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/common/technical-support.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrails new -m https://avo.cool/new-advanced.rb APP_NAME\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Input Controller in ERB Template\nDESCRIPTION: ERB template for ColorPickerField's show component that implements the hidden input Stimulus controller. The field can be toggled to show/hide content based on the always_show configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_13\n\nLANGUAGE: erb\nCODE:\n```\n# app/components/avo/fields/color_picker_field/show_component.html.erb\n\n<%= show_field_wrapper field: @field, index: @index do %>\n  <div data-controller=\"hidden-input\">\n    <% unless @field.always_show %>\n      <%= link_to t('avo.show_content'), 'javascript:void(0);', class: 'font-bold inline-block', data: { action: 'click->hidden-input#showContent' } %>\n    <% end %>\n    <div <% unless @field.always_show %> class=\"hidden\" <% end %> data-hidden-input-target=\"content\">\n      <div style=\"background-color: <%= @field.value %>\"\n        class=\"h-6 px-1 rounded-md text-white text-sm flex items-center justify-center leading-none\"\n      >\n        <%= @field.value %>\n      </div>\n    </div>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Hatchbox Environment Variable Configuration\nDESCRIPTION: Provides the YAML format for setting the `BUNDLE_PACKAGER__DEV` environment variable within the Hatchbox application environment configuration. This allows Bundler to access the token during deployments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nBUNDLE_PACKAGER__DEV: xxx\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Menu in Avo Initializer\nDESCRIPTION: Example of configuring the main_menu in the Avo initializer to create a customized sidebar with sections, groups, and resources. This replaces the auto-generated sidebar with a structured navigation hierarchy.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    section \"Resources\", icon: \"heroicons/outline/academic-cap\" do\n      group \"Academia\" do\n        resource :course\n        resource :course_link\n      end\n\n      group \"Blog\", collapsable: true, collapsed: true do\n        dashboard :dashy\n\n        resource :post\n        resource :comment\n      end\n    end\n\n    section I18n.t('avo.other'), icon: \"heroicons/outline/finger-print\", collapsable: true, collapsed: true do\n      link_to 'Avo HQ', path: 'https://avohq.io', target: :_blank\n      link_to 'Jumpstart Rails', path: 'https://jumpstartrails.com/', target: :_blank\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Suggestions with filterable Option (Array of Hashes)\nDESCRIPTION: Demonstrates using an array of hashes with `value`, `label`, and `avatar` keys to provide suggestions for a tags filter using filterable option.  Useful for displaying rich information in suggestions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nfield :tags,\n  as: :tags,\n  filterable: {\n    # ...\n    suggestions: [\n      {\n        value: 1,\n        label: 'one',\n        avatar: 'https://images.unsplash.com/photo-1560363199-a1264d4ea5fc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&w=256&h=256&fit=crop',\n      },\n      # ...\n    ]\n    # ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Using PolicyHelpers Concern in Ruby for Association Authorization\nDESCRIPTION: Demonstrates how to use the Avo::Concerns::PolicyHelpers concern to automatically generate association policy methods from a base policy.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ninherit_association_from_policy :comments, CommentPolicy\n```\n\n----------------------------------------\n\nTITLE: Defining Field Translations in Avo YAML\nDESCRIPTION: Provides translations for an Avo field label using a specific key in a YAML locale file (e.g., `avo.es.yml`). This example shows Spanish translations for the 'file' field, including standard pluralization keys (`zero`, `one`, `other`) used by Rails' I18n for count-sensitive scenarios like file counts.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/i18n.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n# avo.es.yml\nes:\n  avo:\n    dashboard: 'Dashboard'\n    # ... other translation keys\n    field_translations:\n      file:\n        zero: 'archivos'\n        one: 'archivo'\n        other: 'archivos'\n```\n\n----------------------------------------\n\nTITLE: Declaring a BooleanGroup Field in Ruby\nDESCRIPTION: Demonstrates how to declare a boolean_group field named :roles in an Avo resource, providing a name and options hash with keys matching database attributes and labels for display. Dependencies include Avo::BaseResource and standard Ruby hash syntax.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/boolean_group.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :roles,\n  as: :boolean_group,\n  name: \"User roles\",\n  options: {\n    admin: \"Administrator\",\n    manager: \"Manager\",\n    writer: \"Writer\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Authorizing Actions with Pundit in Ruby\nDESCRIPTION: This method authorizes a user to perform a specific action on a record using Pundit. It takes the user, record, and action as parameters, with an optional policy class.  It uses `Pundit.authorize` for authorization and handles `Pundit::NotDefinedError` and `Pundit::NotAuthorizedError` exceptions, re-raising them as custom exceptions (`NoPolicyError`, `NotAuthorizedError`).  The method returns nothing but raises an error if authorization fails. Requires the `pundit` gem.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\ndef authorize(user, record, action, policy_class: nil)\n  Pundit.authorize(user, record, action, policy_class: policy_class)\nrescue Pundit::NotDefinedError => error\n  raise NoPolicyError.new error.message\nrescue Pundit::NotAuthorizedError => error\n  raise NotAuthorizedError.new error.message\nend\n```\n\n----------------------------------------\n\nTITLE: Methods Generated by `inherit_association_from_policy` in Ruby\nDESCRIPTION: Lists the standard authorization methods automatically defined when using `inherit_association_from_policy`. These methods cover common CRUD actions, viewing, reordering, acting on, attaching (v3.10+), and detaching (v3.10+) associated records, delegating the authorization checks to the corresponding methods in the specified policy.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\ndef create_comments?\n  CommentPolicy.new(user, record).create?\nend\n\ndef edit_comments?\n  CommentPolicy.new(user, record).edit?\nend\n\ndef update_comments?\n  CommentPolicy.new(user, record).update?\nend\n\ndef destroy_comments?\n  CommentPolicy.new(user, record).destroy?\nend\n\ndef show_comments?\n  CommentPolicy.new(user, record).show?\nend\n\ndef reorder_comments?\n  CommentPolicy.new(user, record).reorder?\nend\n\ndef act_on_comments?\n  CommentPolicy.new(user, record).act_on?\nend\n\ndef view_comments?\n  CommentPolicy.new(user, record).index?\nend\n\n# Since Version 3.10.0\n\ndef attach_comments?\n  CommentPolicy.new(user, record).attach?\nend\n\ndef detach_comments?\n  CommentPolicy.new(user, record).detach?\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing authorize method with Pundit\nDESCRIPTION: Implements the authorize method that receives user, record, action, and optional policy_class parameters. It handles Pundit authorization and proper error handling.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# Pundit example\ndef authorize(user, record, action, policy_class: nil)\n  Pundit.authorize(user, record, action, policy_class: policy_class)\nrescue Pundit::NotDefinedError => error\n  raise NoPolicyError.new error.message\nrescue Pundit::NotAuthorizedError => error\n  raise NotAuthorizedError.new error.message\nend\n```\n\n----------------------------------------\n\nTITLE: Hiding a resource from global search\nDESCRIPTION: Demonstrates how to exclude a resource from global search results while keeping it searchable on its Index page.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/search.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass TeamMembershipResource < Avo::BaseResource\n  self.title = :id\n  self.includes = [:user, :team]\n  self.visible_on_sidebar = false\n  self.search_query = -> do\n    scope.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n  end\n  self.hide_from_global_search = true\n\n  field :id, as: :id\n  field :user, as: :belongs_to\n  field :team, as: :belongs_to\nend\n```\n\n----------------------------------------\n\nTITLE: Editor List and Navigation (Vue)\nDESCRIPTION: A Vue.js script that defines a list of supported code editors and generates links to editor-specific documentation pages. The script uses a `v-for` loop to iterate through the `editors` array and create a link with an image for each editor.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst editors = [\"vscode\", \"cursor\", \"zed\", \"windsurf\", \"claude\", \"chatgpt\", \"gemini\", \"grok\"]\n</script>\n\n<div class=\"flex flex-wrap gap-8\">\n  <a :href=\"`/4.0/editor/${editor}`\" v-for=\"editor in editors\">\n    <img :src=\"`/assets/img/editor/${editor}.webp`\" class=\"h-16\" :alt=\"editor\" />\n  </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsable Sections in Avo Menu\nDESCRIPTION: Example of creating collapsable sections in the Avo menu. This allows users to collapse and expand sections to save vertical space, with their choices remembered in Local Storage.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"Resources\", icon: \"resources\", collapsable: true do\n  resource :course\nend\n```\n\n----------------------------------------\n\nTITLE: Using meta block with badge field in Ruby\nDESCRIPTION: Demonstrates defining a badge field with a meta block that returns an array of status IDs from the record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nfield :status,\n  as: :badge,\n  meta: -> do\n    record.statuses.map(&:id)\n  end\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Heading field with as_html in Avo (Ruby)\nDESCRIPTION: Defines a Heading field that renders its content as HTML using the 'as_html: true' option and a computed block. The provided HTML string is displayed directly. Like other computed headings, this is not rendered on form views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/heading.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :dev_heading, as: :heading, as_html: true do\n  '<div class=\"underline uppercase font-bold\">DEV</div>'\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text to Avo Field\nDESCRIPTION: Illustrates how to use the `help` option to display explanatory text below a field. The value provided can be plain text or HTML, allowing for links or other formatting to provide additional guidance to the user.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\n# using the text value\nfield :custom_css, as: :code, theme: 'dracula', language: 'css', help: \"This enables you to edit the user's custom styles.\"\n\n# using HTML value\nfield :password, as: :password, help: 'You may verify the password strength <a href=\"http://www.passwordmeter.com/\">here</a>.'\n```\n\n----------------------------------------\n\nTITLE: Creating and configuring a new Avo project with root path using Bash\nDESCRIPTION: Bash commands to create a new Rails application, install Avo using the app template, and modify the initializer to change Avo's root path to '/'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/run-avo-on-the-root-path.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrails new avo-root-path\ncd avo-root-path\nbin/rails app:template LOCATION='https://avohq.io/app-template'\nsed -i '' \"s|config.root_path = '/avo'|config.root_path = '/'|\" config/initializers/avo.rb\n```\n\n----------------------------------------\n\nTITLE: Ejecting View Component in Avo with Class Name Format\nDESCRIPTION: Command to eject a view component from Avo using the Ruby class name format. This extracts the TableRowComponent files to the application for customization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/eject-views.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:eject --component Avo::Index::TableRowComponent\n```\n\n----------------------------------------\n\nTITLE: Rendering Compact Field Wrapper in Show/Edit Views - Avo (ERB)\nDESCRIPTION: This ERB code renders a Show/Edit field wrapper in a compact style by setting `compact: true` on the `field_wrapper`, minimizing widths and removing the extra area. Useful for actions or when space is limited. Requires `field_wrapper_args` and the Boolean check component. The main parameter, `compact`, activates compact layout.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, compact: true do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Controlling Divider Visibility in Ruby\nDESCRIPTION: This snippet demonstrates how to conditionally control the visibility of a divider in Avo dashboards. The `visible` option is used within the `divider` method, allowing the divider to be shown or hidden based on the result of a boolean value or a block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\ndivider label: \"Custom partials\", visible: -> {\n  # You have access to:\n  # context\n  # params\n  # parent (the current dashboard or resource)\n  # dashboard (will be nil when parent is resource)\n  # resource (will be nil when parent is dashboard)\n  true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rake Tasks for TailwindCSS Compilation (Ruby)\nDESCRIPTION: This Ruby code snippet, intended for your `Rakefile`, modifies the standard `assets:precompile` task to ensure that Avo's specific setup tasks (`avo:yarn_install`, `avo:sym_link`) and the TailwindCSS compilation command (`yarn avo:tailwindcss`) are executed in the correct order before asset compilation, which is crucial for production builds.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tailwindcss-integration.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# When running `rake assets:precompile` this is the order of events:\n# 1 - Task `avo:yarn_install`\n# 2 - Task `avo:sym_link`\n# 3 - Cmd  `yarn avo:tailwindcss`\n# 4 - Task `assets:precompile`\nRake::Task[\"assets:precompile\"].enhance([\"avo:sym_link\"])\nRake::Task[\"avo:sym_link\"].enhance([\"avo:yarn_install\"])\nRake::Task[\"avo:sym_link\"].enhance do\n  `yarn avo:tailwindcss`\nend\n```\n\n----------------------------------------\n\nTITLE: Allowing Detaching/Re-associating via Belongs To Fields in Avo (Ruby)\nDESCRIPTION: Configures a polymorphic `belongs_to` field (`:commentable`) using `allow_via_detaching: true`. This option ensures the association field remains enabled on the Edit screen, even when navigating to the current record (e.g., a Comment) directly from its associated parent (e.g., a Post or Project), permitting the user to change (detach and re-attach) the association.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/belongs_to.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.title = :id\n\n  def fields\n    field :id, as: :id\n    field :body, as: :textarea\n\n    field :commentable,\n      as: :belongs_to,\n      polymorphic_as: :commentable,\n      types: [::Post, ::Project],\n      allow_via_detaching: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Search for Polymorphic Belongs To Associations in Avo (Ruby)\nDESCRIPTION: Makes a polymorphic `belongs_to` association named `:commentable` searchable by adding the `searchable: true` option. This provides a search interface for selecting both the type and the specific record in polymorphic relationships. Requires search configuration on all target resources.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/associations/belongs_to.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.title = :id\n\n  def fields\n    field :id, as: :id\n    field :body, as: :textarea\n\n    field :commentable, as: :belongs_to, polymorphic_as: :commentable, types: [::Post, ::Project], searchable: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Missing Image Placeholder\nDESCRIPTION: This snippet configures a placeholder image to be displayed when a record is missing its image within an Avo application. It requires the path to a valid image file. The image is displayed in the Index view if the cover field does not have an image.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/branding.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.branding = {\n    placeholder: \"/YOUR_PLACEHOLDER_IMAGE.jpg\",\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Heroku Config Var for Authentication\nDESCRIPTION: Explains how to set the `BUNDLE_PACKAGER__DEV` environment variable on Heroku using the `heroku config:set` command. This allows Bundler to authenticate with the private gem server during deployment.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nheroku config:set BUNDLE_PACKAGER__DEV=xxx\n```\n\n----------------------------------------\n\nTITLE: Defining custom query scope for index page\nDESCRIPTION: Customizes the query used to fetch records for the `Index` view, for example sorting records by `last_name` ascending, useful for integrating order or filters.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserResource < Avo::BaseResource\n  self.resolve_query_scope = ->(model_class:) do\n    model_class.order(last_name: :asc)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Linking to a record from a field in Avo using Ruby\nDESCRIPTION: This code snippet demonstrates how to make a field on the Index view a link to the resource's Show page using the `link_to_record` option. This can be applied to `id`, `text`, and `gravatar` fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\n# for id field\nfield :id, as: :id, link_to_record: true\n\n# for text field\nfield :name, as: :text, link_to_record: true\n\n# for gravatar field\nfield :email, as: :gravatar, link_to_record: true\n```\n\n----------------------------------------\n\nTITLE: Ejecting a Specific View of Field Component with Rails Generator --view Option - Ruby on Rails - Bash\nDESCRIPTION: This snippet demonstrates selectively ejecting only the edit view of a TextField component using the --field-components flag in combination with --view. This granular approach generates only the specific Ruby and ERB files needed for customization, reducing maintenance overhead. Rails and Avo must be installed; inputs are the field and the view name, outputs are the corresponding files in the app/components/avo/fields directory.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/eject-views.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrails g avo:eject --field-components text --view edit\n```\n\nLANGUAGE: bash\nCODE:\n```\n      create  app/components/avo/fields/text_field/edit_component.rb\n      create  app/components/avo/fields/text_field/edit_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Using the TailwindCSS 4 version of Avo gem\nDESCRIPTION: Examples of how to specify the TailwindCSS 4 version of Avo in your Gemfile, showing both the patch version naming convention and different tier configurations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tailwind-4-migration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 3.18.0\n# TailwindCSS 3 version\ngem \"avo\", \"3.18.0\"\n# TailwindCSS 4 version\ngem \"avo\", \"3.18.0.tw4\"\n\n# 3.18.1\n# TailwindCSS 3 version\ngem \"avo\", \"3.18.1\"\n# TailwindCSS 4 version\ngem \"avo\", \"3.18.1.tw4\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngem \"avo\", \"3.18.x.tw4\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"avo-rhino_field\", \"0.0.12.tw4\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Avo Community\ngem \"avo\", \"3.18.x.tw4\"\n\n# Avo Pro\ngem \"avo\", \"3.18.x.tw4\"\ngem \"avo-pro\", \"3.18.x\", source: \"https://packager.dev/avo-hq/\"\n\n# Avo Advanced\ngem \"avo\", \"3.18.x.tw4\"\ngem \"avo-advanced\", \"3.18.x\", source: \"https://packager.dev/avo-hq/\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Configurable Name Filter with Arguments\nDESCRIPTION: A text filter that uses arguments to conditionally apply case-insensitive filtering. The visibility and filtering logic can be customized based on the arguments provided by the resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass NameFilter < Avo::Filters::TextFilter\n  self.name = \"Name filter\"\n  self.button_label = \"Filter by name\"\n  self.visible = -> do\n    arguments[:case_insensitive]\n  end\n\n  def apply(request, query, value)\n    if arguments[:case_insensitive]\n      query.where(\"LOWER(name) LIKE ?\", \"%#{value.downcase}%\")\n    else\n      query.where(\"name LIKE ?\", \"%#{value}%\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Actions Registration After 3.11 - Ruby\nDESCRIPTION: Starting with Avo 3.11, actions only need to be declared within the customizable blocks where they are used (e.g., `show_controls`) and do not need to be repeated in the main `actions` method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# After\n\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.title = :name\n\n  self.show_controls = -> do\n    # In order to use it here\n    action Avo::Actions::ReleaseFish, style: :primary, color: :fuchsia, arguments: {\n      action_on_show_controls: \"Will use this arguments\"\n    }\n  end\n\n  # ⮝ No need to declare it here ⮝\n  def actions\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Changing Default Resource Index View Type in Avo\nDESCRIPTION: This snippet sets the default display type for resource index pages to either table or grid using `config.default_view_type`. It depends on the `ResourceIndex` component and enhances UI customization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.default_view_type = :table\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Number Field in Ruby\nDESCRIPTION: This snippet demonstrates the basic declaration of a number field named `:age` using the `field` helper method, specifying `:number` as the field type. This renders a standard HTML `input[type=\"number\"]` element.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/number.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :age, as: :number\n```\n\n----------------------------------------\n\nTITLE: Enhancing Asset Precompilation with Avo Asset Build Task\nDESCRIPTION: Ruby code snippet showing how to hook into the Rails asset precompilation process to include Avo's asset build step during deployment, ensuring assets are compiled correctly when installing Avo from GitHub.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/installation.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nRake::Task[\"assets:precompile\"].enhance do\n  Rake::Task[\"avo:build-assets\"].execute\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Team Member Data in JavaScript (Vue/VitePress)\nDESCRIPTION: Imports the VPTeamMembers component from 'vitepress/theme' and defines a constant array 'members'. Each object within the array represents a team member, containing properties for avatar URL, name, title, and an array of social media links (icon and link URL). This data structure is intended to be consumed by the VPTeamMembers component.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/team.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { VPTeamMembers } from 'vitepress/theme'\n\nconst members = [\n  {\n    avatar: 'https://www.github.com/adrianthedev.png',\n    name: 'Adrian Marin',\n    title: 'Author',\n    links: [\n      { icon: 'github', link: 'https://github.com/adrianthedev' },\n      { icon: 'twitter', link: 'https://twitter.com/adrianthedev' },\n      { icon: 'linkedin', link: 'https://www.linkedin.com/in/adrianthedev/' }\n    ]\n  },\n  {\n    avatar: 'https://www.github.com/Paul-Bob.png',\n    name: 'Paul Bob',\n    title: 'CTO & CGO (Chief GIF Officer)',\n    links: [\n      { icon: 'github', link: 'https://github.com/Paul-Bob' },\n      { icon: 'twitter', link: 'https://twitter.com/paul_ionut_bob' },\n    ]\n  },\n  // {\n  //   avatar: 'https://www.github.com/gabrielgiroe1.png',\n  //   name: 'Gabriel Giroe',\n  //   title: 'Developer',\n  //   links: [\n  //     { icon: 'github', link: 'https://github.com/gabrielgiroe1' },\n  //     { icon: 'twitter', link: 'https://twitter.com/gabrielgiroe' },\n  //   ]\n  // },\n  // {\n  //   avatar: 'https://media-exp1.licdn.com/dms/image/C4D03AQG4SAPGQZIkHw/profile-displayphoto-shrink_200_200/0/1618998196775?e=1665014400&v=beta&t=vP9Rw73rqVmxDf-Bs0gZmgpV1KUclOgCr7XhMRyKarg',\n  //   name: 'Ștefan Stroie',\n  //   title: 'Design',\n  //   links: [\n  //     { icon: 'linkedin', link: 'https://www.linkedin.com/in/%C8%99tefan-stroie/' },\n  //   ]\n  // },\n]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setup Commands for Creating a New Avo Project with Root Path in Bash\nDESCRIPTION: This snippet provides a series of bash commands to create a new Rails application, install Avo using the app template, and modify the configuration to use the root path. The sed command automatically replaces the default path with the root path in the initializer.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/run-avo-on-the-root-path.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrails new avo-root-path\ncd avo-root-path\nbin/rails app:template LOCATION='https://avohq.io/app-template'\nsed -i '' \"s|config.root_path = '/avo'|config.root_path = '/'|\" config/initializers/avo.rb\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Tool Template with Nested Form in ERB\nDESCRIPTION: Creates the main view for the nested reviews resource tool, integrating the Stimulus controller for dynamic addition of new review forms and rendering the initial review fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/nested-records-when-creating.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<!-- app/views/avo/resource_tools/_nested_fish_reviews.html.erb -->\n<div class=\"flex flex-col\">\n  <%= content_tag :div,data: { controller: 'nested-form', nested_form_wrapper_selector_value: '.nested-form-wrapper' } do %>\n    <%= render Avo::PanelComponent.new(name: \"Reviews\", description: \"Create some reviews for this fish\") do |c| %>\n      <% c.with_bare_content do %>\n        <% if form.present? %>\n          <template data-nested-form-target=\"template\">\n            <%= form.fields_for :reviews, Review.new, multiple: true, child_index: 'NEW_RECORD' do |todo_fields| %>\n              <%= render \"avo/partials/fish_review\", f: todo_fields %>\n            <% end %>\n          </template>\n          <div class=\"space-y-4\">\n            <%= form.fields_for :reviews, Review.new, multiple: true do |todo_fields| %>\n              <%= render \"avo/partials/fish_review\", f: todo_fields %>\n            <% end %>\n            <div data-nested-form-target=\"target\"></div>\n          </div>\n        <% end %>\n      <% end %>\n      <% c.with_footer_tools do %>\n        <div class=\"mt-4\">\n          <%= a_link 'javascript:void(0);', icon: 'plus', color: :primary, style: :outline, data: {action: \"click->nested-form#add\"} do %>\n            Add another review\n          <% end %>\n        </div>\n      <% end %>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Filter Avo access with custom logic in Rails routes\nDESCRIPTION: Use an `authenticate` block with a lambda to add custom validation logic alongside authentication in your `routes.rb`. This example limits access to authenticated users who also respond true to the `user.admin?` method, providing a simple authorization layer at the routing level.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authentication.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nauthenticate :user, -> user { user.admin? } do\n  mount_avo at: '/avo'\nend\n\n```\n\n----------------------------------------\n\nTITLE: Ejecting Custom Partial by Path in Avo\nDESCRIPTION: Command to eject any specific partial from Avo by providing the full file path. This example extracts the application layout template.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/eject-views.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:eject --partial app/views/layouts/avo/application.html.erb\n```\n\n----------------------------------------\n\nTITLE: Customizing Destroy Failure Message in Avo Controller\nDESCRIPTION: Shows how to override the error message displayed to users when record deletion fails.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ndef destroy_fail_message\n  @errors.present? ? @errors.join(\". \") : t(\"avo.failed\")\nend\n```\n\n----------------------------------------\n\nTITLE: Using the 'tools' Slot in Avo::PanelComponent (ERB)\nDESCRIPTION: Illustrates adding content, such as buttons or links using the `a_link` helper, to the 'tools' slot of the Avo::PanelComponent. This slot is typically used for actions and controls, aligning them to the right by default.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-components/avo-panel-component.md#_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new(name: \"Dashboard\") do |c| %>\n  <% c.with_tools do %>\n    <%= a_link('/admin', icon: 'heroicons/solid/academic-cap', style: :primary) do %>\n      Admin\n    <% end %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Path in Avo\nDESCRIPTION: Change the default redirect path when users click the logo or visit the base Avo URL to a custom location.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.home_path = \"/avo/dashboard\"\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Null Model in Visibility Block - Ruby\nDESCRIPTION: Demonstrates how to handle cases where `resource.model` might be nil during form submissions (e.g., resource creation) in the `visible` block. Safely access the model's attributes using the safe navigation operator (`&.`) to prevent errors.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, visible -> (resource: ) { resource.model&.enabled? }\n```\n\n----------------------------------------\n\nTITLE: Enabling Searchable Functionality for has_many Field (Ruby)\nDESCRIPTION: This Ruby code snippet configures a `has_many` field within an Avo resource to be searchable. It uses the `searchable: true` option to enable the search feature. The field name is `:links`, and the implementation turns a select input into a searchable experience. This snippet requires the Avo framework and a model association named `links`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/associations_searchable_option_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  def fields\n    field :links,\n      as: :has_many,\n      searchable: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using the svg Helper in Ruby (View Components & Rails Helpers)\nDESCRIPTION: Demonstrates rendering Avo and Heroicons SVG icons using the `svg` helper method within Ruby code. It shows usage inside a View Component via `helpers.svg` and a standard Rails helper using `svg`. Includes examples of specifying icon paths (`avo/...`, `heroicons/...`) and adding HTML classes via the `class` option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/icons.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# in a View Component\nhelpers.svg(\"avo/editor-strike\")\n\n# in a Rails helper\nsvg(\"heroicons/outline/magnifying-glass-circle\", class: \"block h-6 text-gray-600\")\n```\n\n----------------------------------------\n\nTITLE: Text condition mappings for dynamic filters - Ruby\nDESCRIPTION: This Ruby hash details condition labels for text-based filters in Avo dynamic filters, such as 'Contains', 'Starts with', and 'Is blank'. The `.invert` method is used for efficient reverse lookup internally. It supports comprehensive matching queries allowing flexible filtering on textual fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  contains: \"Contains\",\n  does_not_contain: \"Does not contain\",\n  is: \"Is\",\n  is_not: \"Is not\",\n  starts_with: \"Starts with\",\n  ends_with: \"Ends with\",\n  is_null: \"Is null\",\n  is_not_null: \"Is not null\",\n  is_present: \"Is present\",\n  is_blank: \"Is blank\",\n}.invert\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Filters on Avo Resource (Ruby)\nDESCRIPTION: Illustrates how to register multiple filters on a single Avo resource. Each filter is added using the `filter` method within the resource class definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/course_resource.rb\nclass CourseResource < Avo::BaseResource\n  filter CourseCountryFilter\n  filter CourseCityFilter\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Solid Cache Migrations in Bash\nDESCRIPTION: This bash command generates the database migrations required by Solid Cache in a Ruby on Rails application. The command utilizes the Rails command-line interface.  It requires a Rails environment with a database connection configured. The output is generation of migration files in the database/migrate directory to enable Solid Cache functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cache.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails solid_cache:install:migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Result Image URL (Pro Feature)\nDESCRIPTION: Improve search result visuals by adding an image using the `item -> image_url` option. Provide a URL (e.g., using `main_app.url_for` for Active Storage attachments) within this lambda to display a small image next to the result. This feature requires an Avo Pro license.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(name_cont: params[:q], m: \"or\").result(distinct: false) },\n    item: -> do\n      {\n        title: \"[#{record.id}]#{record.name}\",\n        description: ActionView::Base.full_sanitizer.sanitize(record.body).truncate(130),\n        image_url: main_app.url_for(record.cover_photo),\n      }\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Conditions Hash for Number Dynamic Filters in Ruby\nDESCRIPTION: This Ruby snippet defines a hash for number filter conditions mapping keys to their symbolic operators or labels including equals '=', not equals '!=', greater than '>', greater than or equal '>=', lower than '<', lower than or equal '<=', 'Is within', as well as 'Is null' and 'Is not null'. The hash is inverted with `.invert` to integrate these conditions in Avo's dynamic filter system for numeric fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dynamic-filters.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  is: \"=\",\n  is_not: \"!=\",\n  gt: \">\",\n  gte: \">=\",\n  lt: \"<\",\n  lte: \"<=\",\n  is_within: \"Is within\",\n  is_null: \"Is null\",\n  is_not_null: \"Is not null\",\n}.invert\n```\n\n----------------------------------------\n\nTITLE: Configuring Gravatar Avatar Fields with Options in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to define an email field in a data model that renders as a Gravatar avatar. It configures the field with parameters for shape (rounded), size (60 pixels), and a default image URL to use when the email is not registered with Gravatar. Required dependencies include a model system that supports 'field' declarations with layout options. The key inputs are the field name (:email) and its options, producing the corresponding avatar image as output in the UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/gravatar.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :email,\n  as: :gravatar,\n  rounded: false,\n  size: 60,\n  default_url: 'some image url'\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Field with Protocol Prefix in Avo Using Ruby\nDESCRIPTION: This snippet configures a text field to be rendered as a hyperlink with the given protocol (e.g., mailto for email links) in Avo Index and Show views. The protocol option takes values like :mailto or :tel to auto-generate appropriate links. Requires Avo gem. This enables rapid creation of clickable fields for emails, phones, and other custom protocols. The input value should match the expected protocol type for correct linking.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/text.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :email,\n  as: :text,\n  protocol: :mailto\n```\n\n----------------------------------------\n\nTITLE: Loading Guide Data and Articles in Vue.js Script Setup JavaScript\nDESCRIPTION: This snippet uses Vue 3's script setup syntax to import guide data from an external JavaScript file and define an array of additional blog articles. The imported 'data' variable is expected to contain guide metadata, while 'articles' is a manually defined list of objects with titles and links. This setup allows dynamically rendering these guides in the Vue template for user navigation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { data } from './../.vitepress/recipes.data.js'\n\n// add guides written on the blog\nconst articles = [{\n  title: \"Override the field method to add default values to field options\",\n  link: \"https://avohq.io/blog/override-the-field-method-to-add-default-values-to-field-options\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Rendering Startup Sponsors with Vue.js Components\nDESCRIPTION: This snippet describes a SponsorGroup component titled \"Startup Sponsors\" containing Sponsor components similar to the business sponsors structure. It renders startup sponsors with links and images, alongside blank placeholders. The snippet assumes the presence of Vue.js components SponsorGroup and Sponsor. It handles props that define visual and navigational aspects of each sponsor item, producing a grouped sponsor section focused on startups.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/sponsors_common.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<SponsorGroup title=\"Startup Sponsors\">\n  <Sponsor :blank=\"true\" />\n  <Sponsor\n    href=\"https://www.wyndy.com/?ref=avo\"\n    title=\"Wyndy – Get a sitter in seconds. Post any job for free.\"\n    src=\"/img/sponsors/wyndy.png\"\n    alt=\"Wyndy\"\n  />\n  <Sponsor :blank=\"true\" />\n</SponsorGroup>\n```\n\n----------------------------------------\n\nTITLE: Testing Avo Custom Action with RSpec\nDESCRIPTION: This Ruby RSpec code provides a feature test for the `Avo::Actions::ReleaseFish` custom action. It sets up test data (fish, user, resource), defines the arguments expected by the action's `handle` method, instantiates the action, sets expectations using RSpec doubles (`expect(action).to receive(:succeed)`, `expect(fish).to receive(:release)`), and then calls the action's `handle` method to trigger the logic and verify the expectations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/testing.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'rails_helper'\n\nRSpec.feature Avo::Actions::ReleaseFish, type: :feature do\n  let(:fish) { create :fish }\n  let(:current_user) { create :user }\n  let(:resource) { Avo::Resources::User.new.hydrate model: fish }\n\n  it \"tests the dummy action\" do\n    args = {\n      fields: {\n        message: \"Bye fishy!\"\n      },\n      current_user: current_user,\n      resource: resource,\n      query: [fish]\n    }\n\n    action = described_class.new(resource: resource, user: current_user, view: :edit)\n\n    expect(action).to receive(:succeed).with \"1 fish released with message 'Bye fishy!'\"\n    expect(fish).to receive(:release)\n\n    action.handle **args\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Build Argument and Environment Variable\nDESCRIPTION: Shows a Dockerfile snippet that uses a build argument (`ARG`) to receive the Gem Server Token and sets it as an environment variable (`ENV`) within the image. This makes the token available for `bundle install` during the build process.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ruby:3.2.2\nRUN apt-get update -qq && apt-get install -y nodejs postgresql-client\nWORKDIR /app\nCOPY Gemfile /app/Gemfile\nCOPY Gemfile.lock /app/Gemfile.lock\n\n# get the build argument\nARG BUNDLE_PACKAGER__DEV\n# make it available in the docker image\nENV BUNDLE_PACKAGER__DEV=$BUNDLE_PACKAGER__DEV\n\nRUN bundle install\nCOPY . /app\n# do more stuff\n```\n\n----------------------------------------\n\nTITLE: Mounting Avo Engine to a Subdomain in Rails Routes\nDESCRIPTION: Configures your Rails application's routes to mount Avo's engine under a specific subdomain using host constraint, allowing access via a dedicated URL path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/installation.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nconstraint host: 'avo' do\n  mount Avo::Engine, at: '/'\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Avo Menu Sections in Ruby\nDESCRIPTION: This snippet shows how to add icons to `section` items in the Avo admin menu using heroicons, specifying either the 'solid' or 'outline' style icons. It enhances the visual appeal of menu sections. Dependencies include the heroicons set available in the app setup. The `icon` parameter accepts a string path referencing the desired icon. The code is placed within the Avo menu DSL context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"Resources\", icon: \"heroicons/outline/academic-cap\" do\n  resource :course\nend\n\nsection \"Resources\", icon: \"heroicons/solid/finger-print\" do\n  resource :course\nend\n\nsection \"Resources\", icon: \"heroicons/outline/adjustments\" do\n  resource :course\nend\n```\n\n----------------------------------------\n\nTITLE: Referencing Avo Context File in ChatGPT\nDESCRIPTION: The command to reference Avo's context file in ChatGPT by providing the URL to the LLMs text file. This enables ChatGPT to have the necessary context for generating accurate Avo code.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/chatgpt.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://avohq.io/llms.txt\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Helper and Dashboard in Avo Tool View in ERB\nDESCRIPTION: This ERB template renders a custom dashboard page using an Avo component, outputs a dashboard title with breadcrumbs, and utilizes the previously defined custom_helper method to display content from the helper. Dependencies include Avo component classes, Rails view context, and available helper modules. Inputs: None directly; Outputs: HTML rendered by invoking helper and template logic. Limitations: Requires Avo and referenced helpers to be defined and available.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-tools.md#_snippet_4\n\nLANGUAGE: ERB\nCODE:\n```\n<div class=\"flex flex-col\">\n  <%= render Avo::PanelComponent.new title: 'Dashboard', display_breadcrumbs: true do |c| %>\n    <% c.with_tools do %>\n      <div class=\"text-sm italic\">This is the panels tools section.</div>\n    <% end %>\n\n    <% c.with_body do %>\n      <div class=\"flex flex-col justify-between py-6 min-h-24\">\n        <div class=\"px-6 space-y-4\">\n          <h3>What a nice new tool 👋</h3>\n\n          <%= custom_helper %>\n        </div>\n      </div>\n    <% end %>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zeitwerk Autoloading for Rails 6 in Ruby\nDESCRIPTION: Ensures Rails 6 uses Zeitwerk for autoloading, which is required for Avo. This configuration must be added to 'config/application.rb' when upgrading from Rails 5.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/installation.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.autoloader = :zeitwerk\nconfig.load_defaults 6.0\n```\n\n----------------------------------------\n\nTITLE: Aliasing search authorization method\nDESCRIPTION: Demonstrates how to alias the search authorization method if you're already using search? in your policy files.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/search.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.authorization_methods = {\n    search: 'avo_search?',\n  }\n  end\n```\n\n----------------------------------------\n\nTITLE: Including Hashid Rails in Model (Ruby)\nDESCRIPTION: This snippet shows how to enable Hashid in an ActiveRecord model. It includes `Hashid::Rails` in the model.  This will allow the generation of unique, cryptographically secure IDs using hashids.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/custom-ids.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post.rb\nclass Post < ApplicationRecord\n  include Hashid::Rails\nend\n```\n\n----------------------------------------\n\nTITLE: Registering scopes with a resource\nDESCRIPTION: Shows how to add a scope to a resource by implementing the scopes method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/scopes.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def scopes\n    scope Avo::Scopes::Admins\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding tools to panels in Avo configuration\nDESCRIPTION: Demonstrates how to incorporate tools inside panel declarations. This new feature allows for enhanced functionality within panel components.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/release-notes.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\npanel do\n  tool\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an Avo Custom ToolsController in Ruby\nDESCRIPTION: This Ruby controller is auto-generated for handling dashboard actions in custom tools. It inherits from Avo::ApplicationController, providing the endpoint for rendering the custom dashboard view. Dependency: Avo gem, ApplicationController. There are no parameters here; the dashboard action is intended for GET requests and can be extended to set up view variables.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-tools.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::ToolsController < Avo::ApplicationController\n  def dashboard\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Action Confirm Button Label in Ruby\nDESCRIPTION: Shows how to customize the confirm button label on an action using either a static string or a dynamic block that changes based on the current record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/customization.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.confirm_button_label = \"Release fish\"\n\n  # Or as a block\n  self.confirm_button_label = -> {\n    if resource.record.present?\n      \"Release #{resource.record.name}\"\n    else\n      \"Release fish\"\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Select Field with Options - Ruby\nDESCRIPTION: This snippet demonstrates how to define a `select` field with static options in Avo using Ruby. The `field` method is used, specifying the field's type as `:select` and defining the available options using the `options` parameter, which is a hash.  The `display_with_value` option is set to `true` to display the option values instead of keys.  The `placeholder` parameter provides a default hint for the select field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/select.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :type, as: :select, options: { \\'Large container\\': :large, \\'Medium container\\': :medium, \\'Tiny container\\': :tiny }, display_with_value: true, placeholder: \\'Choose the type of the container.\\'\n```\n\n----------------------------------------\n\nTITLE: Customizing Displayed Labels for Tags Field Using fetch_labels - Ruby\nDESCRIPTION: This code snippet demonstrates using the fetch_labels option to customize how tag values are displayed, translating stored IDs into human-readable labels. It uses a lambda fetching names of Skill records matching the record's skills. Requires Avo, Skill model, and an array of skill IDs as input; outputs their names for UI display. Deprecated in favor of format_using.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  fetch_values_from: \"/avo/resources/skills/skills_for_user\",\n  fetch_labels: -> {\n    Skill.where(id: record.skills).pluck(:name)\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Badge Title/Tooltip in Avo (Ruby)\nDESCRIPTION: This snippet shows how to add a title (tooltip) to the badge on grid items.  It adds a `badge_title` to the `card` configuration.  The title's value is determined by a conditional statement, providing user a tooltip when hovering over the badge.  This builds upon the previous examples and requires the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/grid-view.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nself.grid_view = {\n  card: -> do\n    {\n      cover_url: record.image.attached? ? main_app.url_for(record.image.variant(resize: \"300x300\")) : nil,\n      title: record.title,\n      body: simple_format(record.description),\n      badge_label: (record.updated_at < 1.week.ago ? \"New\" : \"Updated\"),\n      badge_color: (record.updated_at < 1.week.ago ? \"green\" : \"orange\"),\n      badge_title: (record.updated_at < 1.week.ago ? \"New product here\" : \"Updated product here\")\n    }\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Rhino Editor Field in Avo (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates how to define a field named `:body` within an Avo resource using the `:rhino` type. This integrates the Rhino WYSIWYG editor, which is based on TipTap and supports features like ActiveStorage attachments, ActionText, and the Avo Media Library.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/rhino.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :rhino\n```\n\n----------------------------------------\n\nTITLE: Customizing Markdown Rendering for Avo Help (Ruby)\nDESCRIPTION: Defines a Ruby module using the Redcarpet gem to customize how Markdown is rendered into HTML. It includes a custom renderer class to apply specific CSS classes to elements like headers, paragraphs, code blocks, inline code, and lists, and a helper method to process and wrap the rendered HTML for use in Avo's help attributes. Requires the `redcarpet` gem.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/use-markdown-in-help-attributes.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MarkdownHelpText\n  class Renderer < Redcarpet::Render::HTML\n    def header(text, level)\n      case level\n      when 1 then %(<h1 class=\"mb-4\">#{text}</h1>)\n      when 2 then %(<h2 class=\"mb-4\">#{text}</h1>)\n      else\n        %(<h#{level} class=\"mb-2\">#{text}</h#{level}>)\n      end\n    end\n\n    def paragraph(text)\n      %(<p class=\"mb-2\">#{text}</p>)\n    end\n\n    def block_code(code, language)\n      <<~HTML\n        <pre class=\"mb-2 p-1 rounded bg-gray-500 text-white text-sm\">\n        <code class=\"#{language}\">#{code.chomp}</code>\n        </pre>\n      HTML\n    end\n\n    def codespan(code)\n      %(<code class=\"mb-2 p-1 rounded bg-gray-500 text-white text-sm\">#{code}</code>)\n    end\n\n    def list(contents, list_type)\n      list_style = case list_type\n             when \"ul\" then \"list-disc\"\n             when \"ol\" then \"list-decimal\"\n             else \"list-none\"\n             end\n      %(<#{list_type} class=\"ml-8 mb-2 #{list_style}\">#{contents}</#{list_type}>)\n    end\n  end\n\n  def markdown_help(content, renderer: Renderer)\n    markdown = Redcarpet::Markdown.new(\n      renderer.new,\n      filter_html: false,\n      escape_html: false,\n      autolink: true,\n      fenced_code_blocks: true\n    ).render(content)\n\n    %(<section>#{markdown}</section>)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring current_user Method (Custom) - Ruby\nDESCRIPTION: This snippet configures the `current_user_method` with a custom authenticator different from devise. It allows you to specify a custom method to retrieve the currently logged-in user. This is used if you are not using devise. The `config.current_user_method` option is set, and the method name is provided. The input is the method to retrieve the current admin.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authentication.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_method = :current_admin\nend\n```\n\n----------------------------------------\n\nTITLE: Using All Resources Helper in Avo Menu\nDESCRIPTION: Example of using the all_resources helper in an Avo menu, which automatically renders links to all available resources taking into account authorization rules.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"App\", icon: \"heroicons/outline/beaker\" do\n  group \"Resources\", icon: \"resources\" do\n    all_resources\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Extending Avo with Custom Functionality\nDESCRIPTION: Demonstrates various ways to extend Avo functionality including adding concerns, removing concerns, and registering assets. It shows both the avo_boot and avo_init hooks that can be used to modify Avo's behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/plugins.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Avo\n  module FeedView\n    class Engine < ::Rails::Engine\n      isolate_namespace Avo::FeedView\n\n      initializer \"avo-feed-view.init\" do\n        ActiveSupport.on_load(:avo_boot) do\n          Avo.plugin_manager.register :feed_view\n\n          # Add some concerns\n          Avo::Resources::Base.include Avo::FeedView::Concerns::FeedViewConcern\n\n          # Remove some concerns\n          Avo::Resources::Base.included_modules.delete(Avo::Concerns::SOME_CONCERN)\n\n          # Add asset files to be loaded by Avo\n          # These assets will be added to Avo's `application.html.erb` layout file\n          Avo.asset_manager.add_javascript \"/avo-advanced-assets/avo_advanced\"\n          Avo.asset_manager.add_stylesheet \"/avo-kanban-assets/avo_kanban\"\n        end\n\n        ActiveSupport.on_load(:avo_init) do\n          # Run some code on each request\n          Avo::FeedView::Current.something = VALUE\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring different search behavior for global and resource searches\nDESCRIPTION: Shows how to use the params[:global] flag to implement different search logic for global versus resource-specific searches.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/search.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass OrderResource < Avo::BaseResource\n  self.search_query = -> do\n    if params[:global]\n      # Perform global search\n      scope.ransack(id_eq: params[:q], m: \"or\").result(distinct: false)\n    else\n      # Perform resource search\n      scope.ransack(id_eq: params[:q], details_cont: params[:q], m: \"or\").result(distinct: false)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Section Groups in Avo Menu\nDESCRIPTION: Provides an example of creating sections and groups to organize menu items within the Avo menu, using the `section` and `group` helpers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"Resources\", icon: \"heroicons/outline/academic-cap\" do\n  resource :course\n  resource :course_link\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Chartkick Chart Card in Ruby\nDESCRIPTION: Defines a chart card leveraging the Chartkick gem for rich data visualizations. Configures chart properties like type, label, description, and size. The `query` method generates sample time series data with random values for multiple data series, returning it for rendering a chart.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Cards::UserSignups < Avo::Cards::ChartkickCard\n  self.id = 'user_signups'\n  self.label = 'User signups'\n  self.chart_type = :area_chart\n  self.description = 'Some tiny description'\n  self.cols = 2\n  def query\n    points = 16\n    i = Time.new.year.to_i - points\n    base_data =\n      Array\n        .new(points)\n        .map do\n          i += 1\n          [i.to_s, rand(0..20)]\n        end\n        .to_h\n    data = [\n      { name: 'batch 1', data: base_data.map { |k, v| [k, rand(0..20)] }.to_h },\n      { name: 'batch 2', data: base_data.map { |k, v| [k, rand(0..40)] }.to_h },\n      { name: 'batch 3', data: base_data.map { |k, v| [k, rand(0..10)] }.to_h }\n    ]\n    result data\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Disallowed Tags Configuration in Ruby\nDESCRIPTION: Shows how to prevent specific values from being added as tags using the disallowed option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  disallowed: [\"not\", \"that\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Fields in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates the use of helper methods to organize and reuse field definitions in Avo resources. It defines `display_fields`, `form_fields`, `tool_fields` and `base_fields` to modularize the configuration of fields, showing different views (`index`, `show`, `edit`, `new`) for an Avo resource. The `tool_fields` method includes fields to be used by a tool. The `base_fields` method include various field types.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\ndef display_fields\n  base_fields\n  tool_fields\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\ndef form_fields\n  base_fields\n  tool_fields\n  tool Avo::ResourceTools::CityEditor, only_on: :forms\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# Notice that even if those fields are hidden on the form, we still include them on `form_fields`.\n# This is because we want to be able to edit them using the tool.\n# When submitting the form, we need this fields declared on the resource in order to know how to process them and fill the record.\ndef tool_fields\n  with_options hide_on: :forms do\n    field :name, as: :text, help: \"The name of your city\", filterable: true\n    field :population, as: :number, filterable: true\n    field :is_capital, as: :boolean, filterable: true\n    field :features, as: :key_value\n    field :image_url, as: :external_image\n    field :tiny_description, as: :markdown\n    field :status, as: :badge, enum: ::City.statuses\n  end\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\ndef base_fields\n  field :id, as: :id\n  field :coordinates, as: :location, stored_as: [:latitude, :longitude]\n  field :city_center_area,\n    as: :area,\n    geometry: :polygon,\n    mapkick_options: {\n      style: \"mapbox://styles/mapbox/satellite-v9\",\n      controls: true\n    },\n    datapoint_options: {\n      label: \"Paris City Center\",\n      tooltip: \"Bonjour mes amis!\",\n      color: \"#009099\"\n    }\n  field :description,\n    as: :trix,\n    attachment_key: :description_file,\n    visible: -> { resource.params[:show_native_fields].blank? }\n  field :metadata,\n    as: :code,\n    format_using: -> {\n      if view.edit?\n        JSON.generate(value)\n      else\n        value\n      end\n    },\n    update_using: -> do\n      ActiveSupport::JSON.decode(value)\n    end\n\n  field :created_at, as: :date_time, filterable: true\nend\n```\n\n----------------------------------------\n\nTITLE: Modifying TailwindCSS configuration for migration\nDESCRIPTION: Changes required to update the TailwindCSS configuration file when migrating to TailwindCSS 4, including removing the content entry.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tailwind-4-migration.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n# config/avo/tailwind.config.js\nconst avoPreset = require('../../tmp/avo/tailwind.preset.js')\n\nmodule.exports = {\n  presets: [avoPreset],\n  content: [ # [!code --]\n    ...avoPreset.content, # [!code --]\n    './app/views/**/*.html.erb', # [!code --]\n    './app/helpers/**/*.rb', # [!code --]\n    './app/javascript/**/*.js', # [!code --]\n    './app/components/avo/**/*.html.erb', # [!code --]\n  ], # [!code --]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering NestedForm Controller in JavaScript\nDESCRIPTION: This code snippet imports and registers the `NestedForm` controller from the `stimulus-rails-nested-form` package within the Stimulus application. It sets up the `nested-form` controller, which is crucial for dynamically adding and managing nested forms on the page. This registration enables the functionality of the `stimulus-rails-nested-form` library within the Avo application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/nested-records-when-creating.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Probably app/javascript/avo.custom.js\nimport { Application } from '@hotwired/stimulus'\nimport NestedForm from 'stimulus-rails-nested-form'\n\nconst application = Application.start()\napplication.register('nested-form', NestedForm)\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility for Order Buttons on Index View\nDESCRIPTION: Configures ordering buttons to be visible only on the index view, which is the default setting for the visible_on option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/records-reordering.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  self.ordering = {\n    visible_on: :index,\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Minimal Avo::PanelComponent Rendering in ERB\nDESCRIPTION: Shows the simplest way to render an Avo::PanelComponent by omitting optional parameters like title and description. Content is provided only within the mandatory 'body' slot.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-components/avo-panel-component.md#_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_body do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Switching Between Array and Single-Select Tags Field - Ruby\nDESCRIPTION: This snippet demonstrates setting the mode to :select so the tags field returns a single selected value instead of an array. Useful for cases where only one selection is allowed. Only the mode parameter is required in addition to standard field setup. Outputs a single value rather than an array in the form data. Requires Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/tags.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  mode: :select\n\n```\n\n----------------------------------------\n\nTITLE: Declare Chart Options During Card Registration in Ruby\nDESCRIPTION: This snippet illustrates how to declare chart options when registering a card within an Avo dashboard. The `chart_options` can be passed directly as a hash or defined using a block for more dynamic configuration. This configuration affects chart display settings such as legend visibility.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::Dashy < Avo::Dashboards::BaseDashboard\n  def cards\n    card Avo::Cards::ExampleAreaChart,\n      chart_options: {\n        library: {\n          plugins: {\n            legend: {display: true}\n          }\n        }\n      }\n\n    # OR\n\n    card Avo::Cards::ExampleAreaChart,\n      chart_options: -> do\n        {\n          library: {\n            plugins: {\n              legend: {display: true}\n            }\n          }\n        }\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Single Value Selection Mode in Ruby\nDESCRIPTION: Demonstrates how to configure the tags field to select a single value instead of multiple values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  mode: :select\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource Save Button Text in Locale File (YML)\nDESCRIPTION: This snippet configures a custom save button label for the product resource in an English YAML locale file. It requires Avo and a YAML locale infrastructure in Rails. Specify the text for the save button within resource_translations, under the relevant resource by name. Inputs are translation keys; output is the customized button label in the Avo UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/i18n.md#_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\n---\nen:\n  avo:\n    resource_translations:\n      product:\n        save: \"Save the product!\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Card Settings and Visibility from Dashboard in Ruby\nDESCRIPTION: Showcases how to set label, description, size, visibility, and refresh interval for a card at the dashboard level. Allows fine-grained control of card attributes for each dashboard instance, overriding defaults in the card definition. Inputs are card configuration options; outputs are the rendered customized card. Requires Avo 2.x+.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dashboards.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::Dashy < Avo::Dashboards::BaseDashboard\n  self.id = \"dashy\"\n  self.name = \"Dashy\"\n\n  def cards\n    card Avo::Cards::UsersCount\n    card Avo::Cards::UsersCount,\n      label: \"Active users\",\n      description: \"Active users count\",\n      cols: 2,\n      rows: 2,\n      visible: -> { true }\n      refresh_every: 2.minutes,\n      arguments: {\n        active_users: true\n      }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing ActionView Helpers - Ruby\nDESCRIPTION: This snippet demonstrates how to use ActionView helper methods within an Avo resource.  The `view_context` is available within the Avo configuration and the example uses `content_tag` and `link_to`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/faq.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  def fields\n    field :id, as: :id\n    field :body,\n      as: :textarea,\n      format_using: -> do\n        view_context.content_tag(:div, style: 'white-space: pre-line') { value }\n      end\n    field :computed_field, as: :text do\n      view_context.link_to(\"Login\", main_app.new_user_session_path)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom Field Wrappers to Use New Arguments - Diff\nDESCRIPTION: This diff snippet shows how to update custom field partials after the unification of Avo's edit and show field wrappers in v2.17. It replaces the old usage of 'edit_field_wrapper' and the 'displayed_in_modal' argument with 'field_wrapper' using the splat operator for arguments. Update applies to partials in custom fields for both show and edit usage. Only needed if overriding field partials.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- <%= edit_field_wrapper field: @field, index: @index, form: @form, resource: @resource, displayed_in_modal: @displayed_in_modal do %>\n+ <%= field_wrapper **field_wrapper_args do %>\n```\n\n----------------------------------------\n\nTITLE: Integrating Media Library with Rich Text Editors in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to declare fields with :trix, :rhino, and :markdown as types in Avo, enabling Media Library integration for asset injection. Place these within a resource field definition block. Each field specified receives a button to access the Media Library modal, allowing selected assets to be inserted into editors. Avo supports seamless integration for these editor field types.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/media-library.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :trix\nfield :body, as: :rhino\nfield :body, as: :markdown\n```\n\n----------------------------------------\n\nTITLE: Define Comment Model with an 'approved' Scope - Ruby\nDESCRIPTION: This code defines the `Comment` model with a `belongs_to` association to the `User` model and an `approved` scope that filters comments where the `approved` attribute is true. This scope is later used to filter comments displayed in the Avo resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/scopes_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :user, optional: true\n\n  scope :approved, -> { where(approved: true) }\nend\n```\n\n----------------------------------------\n\nTITLE: Add Extra Static Markers to Map View (Ruby)\nDESCRIPTION: This Ruby snippet adds a block (`extra_markers`) to the `map_view` configuration. The block executes within the ExecutionContext and should return an array of hashes, each representing an extra marker with specified latitude, longitude, label, tooltip, and color. Useful for displaying fixed locations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/map-view.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nself.map_view = {\n  # ...\n  extra_markers: -> do\n    [\n      {\n        latitude: 37.780411,\n        longitude: -25.497047,\n        label: \"Açores\",\n        tooltip: \"São Miguel\",\n        color: \"#0F0\"\n      }\n    ]\n  end,\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Avo Field Label in Show View (Object Notation) (Ruby)\nDESCRIPTION: This snippet illustrates the basic structure for using the `html` option in object notation to target the field's label element specifically for the 'show' view.\n\nDependencies: Avo framework.\n\nParameters: `html` option with a nested hash structure `show: { label: {} }`. Attributes (`style`, `classes`, `data`) would be added inside the inner `{}`.\n\nExpected Input: A hash structure specifying the 'show' view and 'label' target.\n\nExpected Output: Configures the Avo field definition to allow adding HTML attributes to the show view label.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/html.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  show: {\n    label: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a JSON column for meta data in a Rails migration\nDESCRIPTION: Generates a migration to add a 'meta' JSON column to an existing model (e.g., User), enabling storage of flexible meta attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-meta.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails g migration AddMetaToUsers meta:json\n```\n\n----------------------------------------\n\nTITLE: Configuring panels with show_on option in Ruby\nDESCRIPTION: Demonstrates the new capability to display panel fields on index screens using the show_on option set to :index. This allows developers to control which fields from a panel appear on the index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/release-notes.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npanel show_on: :index\n```\n\n----------------------------------------\n\nTITLE: Updating Avo Mounting in Routes (Ruby)\nDESCRIPTION: Updating the way Avo is mounted in the Rails routes file for version 3.18.0, replacing the deprecated engine mounting approach with the new mount_avo helper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  mount Avo::Engine, at: Avo.configuration.root_path # [!code --]\n  mount_avo # [!code ++]\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Turbo for Actions in Ruby\nDESCRIPTION: Demonstrates how to disable Turbo for actions when needed, by setting the turbo attribute to false.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/customization.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  self.turbo = false\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing the Profile Menu with ERB Template\nDESCRIPTION: Example of the ejected profile menu partial with a commented example that demonstrates how to render a custom profile item component with label, path, and icon properties.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_22\n\nLANGUAGE: erb\nCODE:\n```\n<%# Example link below %>\n<%#= render Avo::ProfileItemComponent.new label: 'Profile', path: '/profile', icon: 'user-circle' %>\n```\n\n----------------------------------------\n\nTITLE: Installing Avo in Jumpstart Pro via Template (Shell/Ruby)\nDESCRIPTION: This shell command executes a Ruby script (`bin/rails app:template`) to apply a specific Avo template designed for Jumpstart Pro applications, fetched from `https://v3.avohq.io/templates/jumpstart-pro.template`. This streamlines adding Avo to an existing Jumpstart Pro project.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/installation.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nbin/rails app:template LOCATION=https://v3.avohq.io/templates/jumpstart-pro.template\n```\n\n----------------------------------------\n\nTITLE: Adding Media Library to the Menu Editor in Ruby\nDESCRIPTION: This Ruby snippet adds the Media Library as a custom menu item using the media_library helper within the Avo main menu configuration. Included in config/initializers/avo.rb, it uses the link_to helper and the avo.media_library_index_path route. This allows developers to customize the Avo admin menu to include a direct link to the Media Library.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/media-library.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = lambda {\n    link_to 'Media Library', avo.media_library_index_path\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Avo::PanelComponent\nDESCRIPTION: This snippet demonstrates the basic usage of the `Avo::PanelComponent` in Ruby on Rails. It renders a panel with a title, description, tools, and body content.  It requires the Avo gem and potentially the Heroicons gem for icons.  The component is initialized with title and description, and then the content is inserted via blocks.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-components/avo-panel-component.md#_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new(title: @product.name, description: @product.description) do |c| %>\n  <% c.with_tools do %>\n    <%= a_link(@product.link, icon: 'heroicons/solid/academic-cap', style: :primary, color: :primary) do %>\n      View product\n    <% end %>\n  <% end %>\n\n  <% c.with_body do %>\n    <div class=\"flex flex-col p-4 min-h-24\">\n      <div class=\"space-y-4\">\n        <h3>Product information</h3>\n\n        <p>Style: shiny</p>\n      </div>\n    </div>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Chartkick Cards in Ruby\nDESCRIPTION: Example implementation of a chart card using Chartkick, including chart type selection and data generation for visualization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cards.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserSignups < Avo::Dashboards::ChartkickCard\n  self.id = 'user_signups'\n  self.label = 'User signups'\n  self.chart_type = :area_chart\n  self.description = 'Some tiny description'\n  self.cols = 2\n  # self.rows = 1\n  # self.chart_options = { library: { plugins: { legend: { display: true } } } }\n  # self.flush = true\n  # self.legend = false\n  # self.scale = false\n  # self.legend_on_left = false\n  # self.legend_on_right = false\n\n  def query\n    points = 16\n    i = Time.new.year.to_i - points\n    base_data =\n      Array\n        .new(points)\n        .map do\n          i += 1\n          [i.to_s, rand(0..20)]\n        end\n        .to_h\n\n    data = [\n      { name: 'batch 1', data: base_data.map { |k, v| [k, rand(0..20)] }.to_h },\n      { name: 'batch 2', data: base_data.map { |k, v| [k, rand(0..40)] }.to_h },\n      { name: 'batch 3', data: base_data.map { |k, v| [k, rand(0..10)] }.to_h }\n    ]\n\n    result data\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Integrating acts-as-taggable-on with Avo Tags Field - Ruby\nDESCRIPTION: Illustrates how to link the acts-as-taggable-on gem with an Avo tags field. Shows the gem and model configuration (via acts_as_taggable_on :tags), and field options such as placeholder, suggestions from a lambda, and enforced suggestions. The field is specially linked to the 'tags' context provided by the gem, and is customizable through options such as close_on_select and help texts.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  field :tags,\n    as: :tags,\n    acts_as_taggable_on: :tags,\n    close_on_select: false,\n    placeholder: 'add some tags',\n    suggestions: -> { Post.tags_suggestions },\n    enforce_suggestions: true,\n    help: 'The only allowed values here are `one`, `two`, and `three`'\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  acts_as_taggable_on :tags\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Array Field with Block (Ruby)\nDESCRIPTION: This Ruby code snippet defines an array field within an Avo resource using a block. The block directly provides the array data. This method is useful for cases where the array data is static or pre-configured. The `field :attendees, as: :array` declaration creates the array field, and the block defines the array data in a structured format (hash array).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/array.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Course < Avo::BaseResource\n  def fields\n    field :attendees, as: :array do\n      [\n        { id: 1, name: \"John Doe\", role: \"Software Developer\", organization: \"TechCorp\" },\n        { id: 2, name: \"Jane Smith\", role: \"Data Scientist\", organization: \"DataPros\" }\n      ]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting URL Fields and Generating Links with format_using in Avo (Ruby)\nDESCRIPTION: Customizes a text field to display the value as a clickable link on display views but as plain text in form views. Utilizes a custom format_using block that makes use of view comparison and the Rails link_to helper for security and UX. The block can also build default values using a nested do block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :company_url,\n  as: :text,\n  format_using: -> {\n    if view == :new || view == :edit\n      value\n    else\n      link_to(value, value, target: \"_blank\")\n    end\n  } do\n  main_app.companies_url(record)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Logic to Avo Resource Tool Class - Ruby\nDESCRIPTION: Shows how to add custom logic, instance variables, and methods to an Avo resource tool class. It demonstrates using the `initialize` method (remembering to call `super`) to set instance variables (`@foo`) and defining custom methods (`custom_method_call`) that can be accessed later from the partial.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resource-tools.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::ResourceTools::PostInfo < Avo::BaseResourceTool\n  self.name = \"Post info\"\n  # self.partial = \"avo/resource_tools/post_info\"\n\n  attr_reader :foo\n\n  def initialize(**kwargs)\n    super **kwargs # It's important to call super with the same keyword arguments\n\n    # You'll have access to the following objects:\n    # resource - when attached to a resource\n    # parent - which is the object it's attached to (resource if attached to a resource)\n    # view\n\n    @foo = :bar # Add your variables\n  end\n\n  def custom_method_call\n    :called\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Boolean Filter Example Class\nDESCRIPTION: This code defines a custom boolean filter class, allowing users to filter records based on a true/false condition using checkboxes. It includes methods for setting the filter name, applying the filter to a query, defining options, and optionally setting a default state.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Filters::Featured < Avo::Filters::BooleanFilter\n  self.name = 'Featured filter'\n\n  # `values` as hash with stringified keys\n  def apply(request, query, values)\n    return query if values['is_featured'] && values['is_unfeatured']\n\n    if values['is_featured']\n      query = query.where(is_featured: true)\n    elsif values['is_unfeatured']\n      query = query.where(is_featured: false)\n    end\n\n    query\n  end\n\n  def options\n    {\n      is_featured: \"Featured\",\n      is_unfeatured: \"Unfeatured\"\n    }\n  end\n\n  # Optional default method\n  # def default\n  #   { is_featured: true }\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Referencing Avo and App Routes in Rails\nDESCRIPTION: This snippet demonstrates how to reference routes within the Avo engine and the main application using Rails path helpers. It highlights the need to prepend the engine name (e.g., `avo`, `main_app`) to the path helper to ensure correct routing.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/rails-and-hotwire.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# When referencing an Avo route, use avo\nlink_to 'Users', avo.resources_users_path\nlink_to user.name, avo.resources_user_path(user)\n\n# When referencing a path for your app, use main_app\nlink_to \"Contact\", main_app.contact_path\nlink_to post.name, main_app.posts_path(post)\n```\n\n----------------------------------------\n\nTITLE: Example Avo Locale File Structure (pt-BR) in YAML\nDESCRIPTION: Illustrates the expected YAML file structure for Avo localization in Brazilian Portuguese (`pt-BR`). It shows the required nesting under `avo`, `field_translations`, and `resource_translations`, including the standard pluralization keys (`zero`, `one`, `other`) for fields and resources, matching the keys used in Ruby resource/field definitions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/i18n.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n# config/locales/avo.pt-BR.yml\npt-BR:\n  avo:\n    field_translations:\n      file:\n        zero: 'arquivos'\n        one: 'arquivo'\n        other: 'arquivos'\n    resource_translations:\n      user:\n        zero: 'usuários'\n        one: 'usuário'\n        other: 'usuários'\n```\n\n----------------------------------------\n\nTITLE: Using Application Helpers Inside Avo Resources\nDESCRIPTION: This code snippet illustrates how to use application helpers within Avo resources. First, include the helper module in the Avo controller. Then, reference the helper methods from the `view_context.controller` object within your resource definitions. This allows you to leverage existing application helper logic within the Avo interface, promoting code reuse and consistency.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/rails-and-hotwire.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/helpers/application_helper.rb\nmodule ApplicationHelper\n  def render_copyright_info\n    \"Copyright #{Date.today.year}\"\n  end\nend\n\n# app/controller/avo/products_controller.rb\nclass Avo::ProductsController < Avo::ResourcesController\n  include ApplicationHelper\nend\n\n# app/avo/resources/products_resource.rb\nclass ProductsResource < Avo::BaseResource\n  field :copyright, as: :text do\n    view_context.controller.render_copyright_info\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant Context via Controller Concern for Session-Based Tenancy in Ruby\nDESCRIPTION: This Ruby snippet provides an alternative tenant context management strategy using session data rather than URL parameters. Within a controller concern, it sets `Avo::Current.tenant` by finding an `Account` based on the `tenant_id` stored in the user's session or defaults to the first account associated with the current user. The concern is included into the Avo application controller to apply session-based tenancy across requests.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/multitenancy.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  # configuration values\nend\n\nRails.configuration.to_prepare do\n  Avo::ApplicationController.include Multitenancy\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Multitenancy\n  extend ActiveSupport::Concern\n\n  included do\n    prepend_before_action :set_tenant\n  end\n\n  def set_tenant\n    Avo::Current.tenant = Account.find session[:tenant_id] || current_user.accounts.first\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing rolify gem in Gemfile\nDESCRIPTION: Add the rolify gem to your application's Gemfile to enable role-based permissions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/rolify-integration.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"rolify\"\n```\n\n----------------------------------------\n\nTITLE: Installing stimulus-rails-nested-form\nDESCRIPTION: This command installs the `stimulus-rails-nested-form` package via yarn. This package provides the javascript controller that will dynamically add review forms on the page. The command needs to be run in the project directory where package.json resides. It will download the package, and its dependencies, and include them in the `node_modules` folder. This sets up the necessary Javascript files for the nested form functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/nested-records-when-creating.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add stimulus-rails-nested-form\n```\n\n----------------------------------------\n\nTITLE: Configuring Polymorphic Belongs To Association in Ruby\nDESCRIPTION: Shows how to set up a polymorphic belongs_to relationship with the commentable association using polymorphic_as and types options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations/belongs_to.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentResource < Avo::BaseResource\n  self.title = :id\n\n  field :id, as: :id\n  field :body, as: :textarea\n  field :excerpt, as: :text, show_on: :index, as_description: true do |model|\n    ActionView::Base.full_sanitizer.sanitize(model.body).truncate 60\n  rescue\n    \"\"\n  end\n\n  field :commentable, as: :belongs_to, polymorphic_as: :commentable, types: [::Post, ::Project]\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Breadcrumbs to Custom Pages in Avo\nDESCRIPTION: Add breadcrumb items to custom tool pages by using the add_breadcrumb method in controller actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::ToolsController < Avo::ApplicationController\n  def custom_tool\n    add_breadcrumb \"Custom tool\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: ResourceExtensions Concern for View-Specific Field Management in Avo\nDESCRIPTION: This concern adds helper methods to Avo resources that make it easier to organize fields by view type. It defines class methods for index, show, create, and edit views that internally use Avo's with_options method with the appropriate only_on constraint.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/manage-information-heavy-resources.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"active_support/concern\"\n\nmodule ResourceExtensions\n  extend ActiveSupport::Concern\n\n  class_methods do\n    def index(&block)\n      with_options only_on: :index, &block\n    end\n\n    def show(&block)\n      with_options only_on: :show, &block\n    end\n\n    def create(&block)\n      with_options only_on: :new, &block\n    end\n\n    def edit(&block)\n      with_options only_on: :edit, &block\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Risky method of extending ApplicationController by copying and modifying in Ruby\nDESCRIPTION: This snippet demonstrates the unsafe approach of copying Avo's ApplicationController code to add custom functionality, which can break during Avo updates. The example shows adding a multitenancy_detector method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-application-controller.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Copied from Avo to `app/controllers/avo/application_controller.rb`\nmodule Avo\n  class ApplicationController < ::ActionController::Base\n    include Pagy::Backend\n    include Avo::ApplicationHelper\n    include Avo::UrlHelpers\n\n    protect_from_forgery with: :exception\n    around_action :set_avo_locale\n    before_action :multitenancy_detector\n\n    # ... more Avo::ApplicationController methods\n\n    def multitenancy_detector\n      # your logic here\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring `root_path` for nested engine\nDESCRIPTION: Ensures `root_path` is set to only the last URL segment for nested mounting, avoiding route conflicts and maintaining correct path resolution.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n# 🚫 Don't add the scope to the root_path\nAvo.configure do |config|\n  config.root_path = \"/uk/admin\"\nend\n\n# ✅ Do this instead\nAvo.configure do |config|\n  config.root_path = \"/admin\"\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs with Custom ID\nDESCRIPTION: Example of how to set a unique ID for a tab group to enable durable tab selection and bookmarking capabilities.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tabs.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ntabs id: :some_random_uniq_id do\n  field :posts, as: :has_many, show_on: :edit\nend\n```\n\n----------------------------------------\n\nTITLE: Actions Registration Before 3.11 - Ruby\nDESCRIPTION: Before Avo 3.11, actions used within customizable blocks (like `show_controls`) also needed to be explicitly declared in the `actions` method of the resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\n\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.title = :name\n\n  self.show_controls = -> do\n    # In order to use it here\n    action Avo::Actions::ReleaseFish, style: :primary, color: :fuchsia, arguments: {\n      action_on_show_controls: \"Will use this arguments\"\n    }\n  end\n\n  # ⮝ Also declare it here ⮝\n  def actions\n    action Avo::Actions::ReleaseFish, style: :primary, color: :fuchsia, arguments: {\n      action_on_show_controls: \"Will use this arguments\"\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing search result path\nDESCRIPTION: Shows how to customize the destination path when a user clicks on a search result using the search_result_path option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/search.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass CityResource < Avo::BaseResource\n  self.search_result_path = -> {\n    # Return any path here. You have access to the search `record` the user clicked on.\n    avo.resources_city_path record, custom: \"yup\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Switcher in ERB (Before v2.3.0)\nDESCRIPTION: ERB template showing how to modify the Avo profile dropdown to include language switching functionality. The code adds links to switch between English and Portuguese locales.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/multilingual-content.md#_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<% destroy_user_session_path = \"destroy_#{Avo.configuration.current_user_resource_name}_session_path\".to_sym %>\n\n<div <% if main_app.respond_to?(destroy_user_session_path) %> data-controller=\"toggle-panel\" <% end %>>\n  <a href=\"javascript:void(0);\" class=\"flex items-center cursor-pointer font-semibold text-gray-700\" data-action=\"click->toggle-panel#togglePanel\">\n    <% if _current_user.respond_to?(:avatar) &&  _current_user.avatar.present? %>\n      <%= image_tag _current_user.avatar, class: \"h-12 rounded-full border-4 border-white mr-1\" %>\n    <% end %>\n    <% if _current_user.respond_to?(:name) && _current_user.name.present? %>\n      <%= _current_user.name %>\n    <% elsif _current_user.respond_to?(:email) && _current_user.email.present? %>\n      <%= _current_user.email %>\n    <% else %>\n      Avo user\n    <% end %>\n    <% if main_app.respond_to?(destroy_user_session_path) %>\n      <%= svg 'chevron-down', class: \"ml-1 h-4\" %>\n    <% end %>\n  </a>\n\n  <% if main_app.respond_to?(destroy_user_session_path) %>\n    <div class=\"hidden absolute inset-auto right-0 mr-6 mt-0 py-4 bg-white rounded-xl min-w-[200px] shadow-context\" data-toggle-panel-target=\"panel\">\n      <!-- Add this 👇 -->\n      <% classes = \"appearance-none bg-white text-left cursor-pointer text-green-600 font-semibold hover:text-white hover:bg-green-500 block px-4 py-1 w-full\" %>\n\n      <% if I18n.locale == :en %>\n        <%= link_to \"Switch to Portuguese\", { set_locale: 'pt-BR' }, class: classes %>\n      <% else %>\n        <%= link_to \"Switch to English\", { set_locale: 'en' }, class: classes %>\n      <% end %>\n      <!-- Add this 👆 -->\n\n      <%= button_to t('avo.sign_out'), main_app.send(:destroy_user_session_path), method: :delete, form: { \"data-turbo\" => \"false\" }, class: classes %>\n    </div>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Guides and Articles as Dynamic Lists in Vue.js Template\nDESCRIPTION: This snippet demonstrates using Vue.js directives for rendering unordered lists dynamically from two data sources: 'data.v3' and 'articles'. It iterates over each collection with 'v-for' to create list items containing anchor tags linking to the respective guide URLs. The first list replaces specific text in each guide's title before display, while the second includes an SVG icon before each blog article title and opens links in a new browser tab using 'target=\"_blank\"'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ul>\n  <li v-for=\"recipe in data.v3\"><a :href=\"recipe.link\">{{recipe.text.replace('avo ', 'Avo ').replace('urls', 'URLs')}}</a></li>\n  <li v-for=\"guide in articles\">\n    <a :href=\"guide.link\" target=\"_blank\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-6 h-4 inline mr-1\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25\" /></svg>\n      {{guide.title}}\n    </a>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing Avo Courses Controller\nDESCRIPTION: This controller handles the `cities` action to retrieve city data based on a selected country. It takes the country parameter from the request, validates it against a list of available countries, and returns a JSON response with the cities of that country via the `get_cities` method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::CoursesController < Avo::ResourcesController\n  def cities\n    render json: get_cities(params[:country]) # return an array of cities based on the country we received\n  end\n\n  private\n\n  def get_cities(country)\n    return [] unless Course.countries.include?(country)\n\n    Course.cities[country.to_sym]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Disable Global Search Feature in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to disable the global search feature in Avo using the `disabled_features` configuration option. The initializer configures Avo to hide the global search feature from all users. The disabled feature can also be conditionally applied using a lambda.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.disabled_features = [:global_search]\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.disabled_features = -> { current_user.is_admin? ? [] : [:global_search] }\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering an Avo Icon in ERB View\nDESCRIPTION: Example of embedding an Avo SVG icon directly into an ERB template using the `svg` helper. Shows how to specify the icon path (`avo/ICON_NAME.svg`) and apply CSS classes using the `class` option. The `.svg` extension is optional in some contexts but shown here for clarity.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/icons.md#_snippet_1\n\nLANGUAGE: ERB\nCODE:\n```\n<%= svg 'avo/bell.svg', class: \"h-4\" %>\n```\n\n----------------------------------------\n\nTITLE: Configuring order button visibility on index view\nDESCRIPTION: This snippet sets the 'visible_on' parameter to ':index', ensuring that order control buttons are shown exclusively on the index view of the resource, allowing users to reorder records directly from the listing.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/records-reordering.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  self.ordering = {\n    visible_on: :index\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Controlling Container Width for Index and All Views\nDESCRIPTION: Enables full-width display of the index view or all views by setting `full_width_index_view` and `full_width_container`. Useful for content-heavy pages requiring more horizontal space.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.full_width_index_view = false\n  config.full_width_container = false\nend\n```\n\n----------------------------------------\n\nTITLE: Locating Record by Global ID (Ruby)\nDESCRIPTION: Shows how to use the `GlobalID::Locator.locate` method with a Global ID string (like those found in Avo's development logs) to retrieve the corresponding ActiveRecord object, useful for investigating unauthorized actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\ngid = \"gid://dummy/User/20\"\nuser = GlobalID::Locator.locate(gid)\n```\n\n----------------------------------------\n\nTITLE: Defining Attachment Permission Methods in Pundit Policy - Ruby\nDESCRIPTION: This snippet shows the straightforward but repetitive approach of defining individual permission methods for each attachment action (upload, delete, download) in a Pundit policy using Ruby. Each method simply delegates to another permission method (e.g., update?). It requires no external dependencies but results in boilerplate code when numerous attachments exist. It expects the `update?` method to be implemented and returns booleans indicating authorization for specific attachment actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/attachment-policy-extension-for-pundit.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef upload_logo?\n  update?\nend\n\ndef delete_logo?\n  update?\nend\n\ndef download_logo?\n  update?\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Media Library to the Menu Editor\nDESCRIPTION: Code to add Media Library to Avo's main menu using the link_to helper and the media_library_index_path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/media-library.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = lambda {\n    link_to 'Media Library', avo.media_library_index_path\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Concern Implementation Ruby\nDESCRIPTION: This code snippet demonstrates the implementation of a `BasicAuth` concern to add HTTP Basic Authentication to a Rails controller. It includes the `http_basic_authenticate_with` method within the `included` block, which automatically applies authentication when the concern is included in a controller. Requires `ActiveSupport::Concern`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/basic-authentication.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/concerns/basic_auth.rb\nmodule BasicAuth\n  extend ActiveSupport::Concern\n\n  # Authentication strategy came from this article:\n  # https://dev.to/kevinluo201/setup-a-basic-authentication-in-rails-with-http-authentication-388e\n  included do\n    http_basic_authenticate_with name: \"adrian\", password: \"password\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing the Preview Field in Ruby\nDESCRIPTION: Basic implementation of the Preview field that adds a preview icon to rows in the index view. When users hover over this icon, a popup with additional information appears.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/preview.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :preview, as: :preview\n```\n\n----------------------------------------\n\nTITLE: Defining Metric Ranges with Options for Select in Dashboards - Ruby\nDESCRIPTION: This Ruby code snippet illustrates defining metric card ranges in Avo dashboards using the 'ranges' property. From v2.8, values are passed unchanged to 'options_for_select', accepting a mix of integers and strings for time ranges and custom filters. Update existing dashboards to use the new style if relying on custom ranges in metrics.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.label = 'Users count'\n  self.initial_range = 30\n  self.ranges = [7, 30, 60, 365, 'TODAY', 'MTD', 'QTD', 'YTD', 'ALL']\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Map View in Avo Resource (Ruby)\nDESCRIPTION: This Ruby snippet within an Avo resource class enables and customizes the map view. It configures Mapkick options, defines a lambda for extracting marker data (latitude, longitude, tooltip) from each record, and sets the visibility and position of the adjacent table. Requires the `mapkick-rb` gem and a Mapbox access token.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/map-view.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  # ...\n  self.map_view = {\n    mapkick_options: {\n      controls: true\n    },\n    record_marker: -> {\n      {\n        latitude: record.coordinates.first,\n        longitude: record.coordinates.last,\n        tooltip: record.name\n      }\n    },\n    table: {\n      visible: true,\n      layout: :right\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom StimulusJS Controller in Avo Application - JavaScript\nDESCRIPTION: Demonstrates how to register a custom StimulusJS controller so that it's available in the global Avo application scope. Imports the controller, retrieves the Stimulus instance from the global window object, registers the controller under a specific name, and logs a confirmation message. Requires prior setup of a StimulusJS entry point and global Stimulus instance provided by Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// app/javascript/avo.custom.js\nimport SampleController from \"controllers/sample_controller\";\n\n// Hook into the stimulus instance provided by Avo\nconst application = window.Stimulus;\napplication.register(\"course-resource\", SampleController);\n\n// eslint-disable-next-line no-console\nconsole.log(\"Hi from Avo custom JS 👋\");\n```\n\n----------------------------------------\n\nTITLE: Defining an Avo Boolean Field (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates how to define a boolean field named `:is_published` within an Avo resource. It uses the `:boolean` field type, assigns a display name 'Published', and specifies custom string values 'yes' and 'no' to represent the true and false states, respectively. This overrides the default true values (`[true, \"true\", \"1\"]`) and false values (`[false, \"false\", \"0\"]`).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/boolean.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :is_published,\n  as: :boolean,\n  name: 'Published',\n  true_value: 'yes',\n  false_value: 'no'\n```\n\n----------------------------------------\n\nTITLE: Managing Dashboard Visibility Based on Custom Conditions in Avo Using Ruby\nDESCRIPTION: Controls dashboard visibility for users by setting self.visible to a lambda block as a class attribute. The block can use current_user, params, and context to tailor which users see the dashboard. Inputs are the runtime user context; outputs are a boolean determining dashboard access.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dashboards.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::ComplexDash < Avo::Dashboards::BaseDashboard\n  self.id = \"complex_dash\"\n  self.name = \"Complex dash\"\n  self.description = \"Complex dash description\"\n  self.visible = -> do\n    current_user.is_admin?\n    # or\n    params[:something] == 'something else'\n    # or\n    context[:your_param] == params[:something_else]\n  end\n\n  def cards\n    card Avo::Cards::UsersCount\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Fields in Avo Resources Using Ruby\nDESCRIPTION: Defines a simple field declaration within the fields method of an Avo resource. The snippet shows how to map a database column name to a field type (e.g., text), enabling display and editing of the corresponding data in the Avo interface. It requires the Avo gem and assumes the resource is connected to an ActiveRecord model. Input is a symbol for the database column, and output is a rendered input or display field in the app's views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef fields\n  field :name, as: :text\nend\n```\n\n----------------------------------------\n\nTITLE: Adding tools within body sections in panels\nDESCRIPTION: Shows how to place tools inside body statements that are nested within panel declarations. This provides more granular control over tool placement in the UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/release-notes.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\npanel do\n  body do\n    tool\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Audit Logging Actions in Avo Resource - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to override the default audit logging configuration for an Avo resource by specifying which actions should or should not be logged. In this example, the 'edit' and 'show' actions are explicitly disabled, meaning audit logs will not be recorded when these actions are performed on Product resources. The snippet also illustrates how to define resource fields, relationships, and custom actions as part of the resource configuration. Dependencies include the Avo gem and its resource DSL. Key parameters are the 'actions' hash children (e.g., 'edit', 'show'), which accept boolean values to enable or disable logging per action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Product < Avo::BaseResource\n  self.audit_logging = {\n    activity: true,\n    actions: {\n      edit: false,\n      show: false\n    }\n  }\n\n  def fields\n    main_menu do\n      field :id, as: :id, link_to_record: true\n      field :name, as: :text, link_to_record: true\n      field :price, as: :number, step: 1\n\n      sidebar do\n        tool Avo::ResourceTools::Timeline\n      end\n    end\n    # ...\n    field :avo_activities, as: :has_many\n  end\n\n  def actions\n    action Avo::Actions::ChangePrice\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Full Configuration Example for Multiple Discreet Items in Avo (Ruby)\nDESCRIPTION: Provides a comprehensive example of configuring `discreet_information` with multiple items using an array. It includes displaying default timestamps (`:timestamps`), a custom item with a sanitized HTML tooltip and dynamic icon based on `record.published_at`, and another custom item with a dynamic label and an external link opening in a new tab (`url_target: :_blank`). Requires the Avo resource class and access to the `record` object and `sanitize` helper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/discreet-information.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = [\n    :timestamps,\n    {\n      tooltip: -> { sanitize(\"Product is <strong>#{record.published_at ? \"published\" : \"draft\"}</strong>\", tags: %w[strong]) },\n      icon: -> { \"heroicons/outline/#{record.published_at ? \"eye\" : \"eye-slash\"}\" }\n    },\n    {\n      label: -> { record.published_at ? \"✅\" : \"🙄\" },\n      url: -> { \"https://avohq.io\" },\n      url_target: :_blank\n    }\n  ]\n\n  # fields and other resource configuration\nend\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Class (Object Notation) to Avo Field Wrapper in Edit View (Ruby)\nDESCRIPTION: This snippet shows a simpler use of the object notation to add a static CSS class to the field's wrapper element for the 'edit' (and 'new') view.\n\nDependencies: Avo framework.\n\nParameters: `html` option with a nested hash structure `edit: { wrapper: { classes: '...' } }`.\n\nExpected Input: A string containing one or more CSS class names.\n\nExpected Output: Configures the Avo field definition to render the specified CSS class on the wrapper in the edit/new view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/html.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :has_skills,\n  as: :boolean,\n  html: {\n    edit: {\n      wrapper: {\n        classes: \"hidden\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Countless Pagination in Avo\nDESCRIPTION: This code snippet demonstrates how to configure a resource in Avo to use a 'countless' pagination type. This approach is useful when the total number of records is not known or is not relevant. It sets the pagination type to `:countless` and the size to an empty array, effectively disabling traditional pagination.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nself.pagination = -> do\n  {\n    type: :countless,\n    size: []\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Label with name Property in Avo (Ruby)\nDESCRIPTION: Defines how to override a field's label as displayed in the Avo UI by setting the name: option. The field 'is_available' will be shown as 'Availability', but retains the underlying data attribute. Useful for more descriptive or user-friendly labels.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :is_available, as: :boolean, name: \"Availability\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Heading fields from 3.0.1.beta8 to 3.0.1.beta9\nDESCRIPTION: Demonstrates how to update the heading field declaration syntax. The new syntax uses the field method with the :heading option to generate proper data-field-id attributes in the DOM.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nheading \"personal information\"\nheading \"contact\"\nheading '<div class=\"underline uppercase font-bold\">DEV</div>', as_html: true\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# After\nfield :personal_information, as: :heading       # data-field-id == \"personal_information\"\nfield :heading, as: :heading, label: \"Contact\"  # data-field-id == \"heading\"\nfield :dev, as: :heading, as_html: true, label: '<div class=\"underline uppercase font-bold\">DEV</div>'\n```\n\n----------------------------------------\n\nTITLE: Setting Action Authorization in Ruby\nDESCRIPTION: Demonstrates how to restrict access to actions using the authorize attribute, which accepts a boolean or a block with custom authorization logic.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/customization.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::GlobalReport < Avo::BaseAction\n  self.authorize = false\n\n  # Or as a block\n  self.authorize = -> {\n    current_user.is_admin?\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Currency Options for Money Field (Ruby)\nDESCRIPTION: This snippet shows how to define the available currencies for the money field using the `currencies` option. The `%w[EUR USD RON PEN]` sets the available currencies to Euro, US Dollar, Romanian Leu, and Peruvian Sol.  When no currencies are set, the currencies defaults to an empty array.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/money.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :price, as: :money, currencies: %w[EUR USD RON PEN]\n```\n\n----------------------------------------\n\nTITLE: Implementing Avo BooleanFilter for Country (Ruby)\nDESCRIPTION: Defines an Avo `BooleanFilter` for filtering courses by `country`. The `apply` method filters the query to include records where the `country` is present in the keys of the selected boolean values (where value is true). The `options` method dynamically generates the filter options from the `Course.countries` method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/filters/course_country.rb\nclass Avo::Filters::CourseCountry < Avo::Filters::BooleanFilter\n  self.name = \"Course country filter\"\n\n  def apply(request, query, values)\n    query.where(country: values.select { |country, selected| selected }.keys)\n  end\n\n  def options\n    Course.countries.map { |country| [country, country] }.to_h\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Field with always_show\nDESCRIPTION: This Ruby code defines a custom field class (`ColorPickerField`) within the Avo framework.  It initializes the field, setting the `@always_show` instance variable based on the `always_show` argument passed during initialization.  It also includes options for allowing non-color values. The purpose is to customize the field's behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/fields/color_picker_field.rb\nclass Avo::Fields::ColorPickerField < Avo::Fields::BaseField\n  attr_reader :always_show\n\n  def initialize(id, **args, &block)\n    super(id, **args, &block)\n\n    @always_show = args[:always_show] || false\n    @allow_non_colors = args[:allow_non_colors]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Avo Menu Links in Ruby\nDESCRIPTION: This snippet illustrates adding icons to other menu items such as `link_to` in the Avo admin menu. It demonstrates usage by adding a 'globe' icon to a link item, improving UI consistency and visual identification of links. The `icon` option is a string specifying the icon name or path. This code snippet assumes the Avo DSL is configured to support icon rendering on links.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nlink_to \"Avo\", \"https://avohq.io\", icon: \"globe\"\n```\n\n----------------------------------------\n\nTITLE: Setting Avo Resource Title via Block | Ruby\nDESCRIPTION: This snippet demonstrates setting the `self.title` class attribute using a lambda (block) within the resource itself. The block has access to the `resource` and `record` objects, allowing you to compute the title dynamically without needing to add a method to the model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/comment.rb\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.title = -> {\n    ActionView::Base.full_sanitizer.sanitize(record.body).truncate 30\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Moving TailwindCSS Application CSS file\nDESCRIPTION: A command-line instruction to rename the TailwindCSS application stylesheet from 'application.tailwind.css' to 'application.css', aligning with the new configuration setup after migration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tailwind-4-migration.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit mv app/assets/stylesheets/application.tailwind.css app/assets/tailwind/application.css\n```\n\n----------------------------------------\n\nTITLE: Add Badge Label to Avo Grid Item Ruby\nDESCRIPTION: Display a text badge on top of grid items. The `badge_label` key is added to the hash returned by the `card` lambda, providing the text content for the badge based on the record's attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/grid-view.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nself.grid_view = {\n  card: -> do\n    {\n      cover_url: record.image.attached? ? main_app.url_for(record.image.variant(resize: \"300x300\")) : nil,\n      title: record.title,\n      body: simple_format(record.description),\n      badge_label: (record.updated_at < 1.week.ago ? \"New\" : \"Updated\"),\n    }\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying order buttons in association view only\nDESCRIPTION: This configuration restricts the display of order controls to association contexts by setting 'visible_on' to ':association'. This is useful for reordering related records within a parent resource without showing controls on the main index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/records-reordering.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  self.ordering = {\n    visible_on: :association\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale in Avo Configuration (v2.11+)\nDESCRIPTION: Ruby configuration for Avo v2.11+ that sets the default locale for Avo requests. This is a simple way to define the default language for the Avo admin interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/multilingual-content.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.locale = :en # default is nil\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Classes Attribute using Simple Object Notation - Ruby\nDESCRIPTION: Shows a basic example of adding a `classes` attribute (`hidden`) to the field's wrapper element in the `edit` view using the concise object notation. This class will be applied in both Edit and New views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/html.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_skills,\n  as: :boolean,\n  html: {\n    edit: {\n      wrapper: {\n        classes: \"hidden\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Attaching HTML Attributes to Field Wrapper Using Object Notation - Ruby\nDESCRIPTION: Configures a field with a custom HTML class (`hidden`) for its wrapper in the edit and new views using the hash/object notation. The `html` parameter allows adding static classes, styles, or data attributes for fine-tuned presentation and interactivity. This method is best for static or predetermined values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_skills,\n  as: :boolean,\n  html: {\n    edit: {\n      wrapper: {\n        classes: \"hidden\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Add HTML Attributes to Show Content Target - Ruby\nDESCRIPTION: Enables HTML attribute assignment to the content element of a field in the show view, using the `content` property in the `show` block. This approach allows injecting class, style, or data customization specifically for the content area of a field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  show: {\n    content: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Select field with display_value\nDESCRIPTION: This snippet demonstrates how to use the `display_value` option to display the values from the database instead of the labels. This is useful when the labels are different from the values stored in the database.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/select.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  field :type,\n    as: :select,\n    display_value: true\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Index to Column in ActiveRecord Migration (Ruby)\nDESCRIPTION: Defines an ActiveRecord migration for adding an index on the 'last_name' column of the users table. This indexes the new default sort column to improve query performance. The migration requires Rails 7.1 or later. No parameters; output is a database schema change.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddIndexOnUsersCreatedAt < ActiveRecord::Migration[7.1]\n  def change\n    add_index :users, :last_name\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Determining Avo View Context with String Comparison in Ruby\nDESCRIPTION: Employs direct string comparison (view == \"show\", etc.) to branch Ruby logic per Avo resource view. Suitable when view identifiers are received as strings. Requires the view object (Avo::ViewInquirer); no dependencies beyond that. Expected input is a string representation of the view, with outputs as different code blocks per view context. Relies on correct string values for view states.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/views.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nif view == \"show\"\n  # Code for the \"show\" view\nelsif view == \"index\"\n  # Code for the \"index\" view\nelsif view == \"edit\"\n  # Code for the \"edit\" view\nelsif view == \"new\"\n  # Code for the \"new\" view\nend\n\n```\n\n----------------------------------------\n\nTITLE: Rendering an Avo Icon in ERB View (Avo)\nDESCRIPTION: Illustrates how to embed an SVG icon from the 'avo' set directly into an ERB view template using the `svg` helper method. This example renders the 'bell.svg' icon and applies a CSS class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/icons.md#_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= svg 'avo/bell.svg', class: \"h-4\" %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Progress Bar Field in Avo\nDESCRIPTION: This code configures the `progress` field as a `progress_bar` with specific options. It sets the `max` value to 150, the `step` to 10, displays the value above the slider, and adds a percentage sign (%) as a suffix.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/progress_bar.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :progress,\n  as: :progress_bar,\n  max: 150,\n  step: 10,\n  display_value: true,\n  value_suffix: \"%\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Audit Logging for a Resource\nDESCRIPTION: Configure a specific Avo resource to track and log activities by setting the audit_logging class attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Product < Avo::BaseResource\n  self.audit_logging = {\n    activity: true\n  }\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :name, as: :text, link_to_record: true\n    field :price, as: :number, step: 1\n    # ...\n  end\n\n  def actions\n    action Avo::Actions::ChangePrice\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Breadcrumbs in Avo\nDESCRIPTION: Turn off the default breadcrumbs display in the Avo admin panel interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.display_breadcrumbs = false\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sidebar with the 'sidebar' Slot in Avo::PanelComponent (ERB)\nDESCRIPTION: Demonstrates how to add a sidebar to the right of the main content area within an Avo::PanelComponent using the `with_sidebar` slot helper. This is useful for displaying supplementary information or controls alongside the main panel content.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-components/avo-panel-component.md#_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_sidebar do %>\n    Something tiny here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Model Definition for Accepting Custom Attributes in Ruby on Rails\nDESCRIPTION: Defines a Fish ActiveRecord model with custom setter methods for fish_type, properties, and information attributes. Removes single table inheritance (STI) by setting inheritance_column to nil to allow use of the database column named 'type'. The setters for properties and information output the received value to the console, demonstrating how nested and array parameters flow from form inputs to model methods. This snippet ensures the model can handle the custom params permitted in the Avo resource for data assignment.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-tools.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Fish < ApplicationRecord\n  self.inheritance_column = nil # required in order to use the type DB attribute\n\n  def fish_type=(value)\n    self.type = value\n  end\n\n  def properties=(value)\n    # properties should be an array\n    puts [\"properties in the Fish model->\", value].inspect\n  end\n\n  def information=(value)\n    # properties should be a hash\n    puts [\"information in the Fish model->\", value].inspect\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Sanitized Discreet Information Tooltip with Icon in Avo (Ruby)\nDESCRIPTION: Shows how to set a custom tooltip with HTML content, ensuring it's sanitized using the `sanitize` helper, and specifies a static icon.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/discreet-information.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = {\n    tooltip: -> { sanitize(\"Product is <strong>#{record.published_at ? \"published\" : \"draft\"}</strong>\", tags: %w[strong]) },\n    icon: \"heroicons/outline/academic-cap\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Controls to Appear on Both Sides\nDESCRIPTION: Configure the table view to display resource controls on both the left and right sides, requiring Avo version 3.13.7 or higher.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.resource_controls_placement = :both\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Avo under a Nested Path in Routes\nDESCRIPTION: Shows how to mount Avo behind a nested route scope, such as `/uk/admin`, ensuring route and path configurations are correctly set without including the scope in `root_path`. Proper route ordering is emphasized.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nRails.application.routes.draw do\n  # other routes\n\n  authenticate :user, ->(user) { user.is_admin? } do\n    scope :uk do\n      scope :admin do\n        get \"dashboard\", to: \"avo/tools#dashboard\" # custom tool added before engine\n      end\n\n      mount_avo # engine mounted last\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing an Avo Select Filter in Ruby\nDESCRIPTION: Provides a complete example of an Avo Select filter (`Avo::Filters::Published`). It defines the filter's `name`, the `apply` method which modifies the query based on the single selected `value` (passed as a string), and the `options` method which defines the dropdown choices as a hash.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::Published < Avo::Filters::SelectFilter\n  self.name = 'Published status'\n\n  # `value` comes as a string\n  # Eg: 'published'\n  def apply(request, query, value)\n    case value\n    when 'published'\n      query.where.not(published_at: nil)\n    when 'unpublished'\n      query.where(published_at: nil)\n    else\n      query\n    end\n  end\n\n  def options\n    {\n      published: \"Published\",\n      unpublished: \"Unpublished\"\n    }\n  end\n\n  # Optional method to set the default state.\n  # def default\n  #   :published\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Field Display in Ruby\nDESCRIPTION: This Ruby code configures a date field named `birthday`. It defines the field type as `:date` and sets various formatting options. `first_day_of_week` specifies the starting day of the week, `picker_format` controls the date format in edit and new views, `format` defines the display format in index and show views, and `placeholder` provides an example date format for user guidance. Requires the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/date.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :birthday,\n  as: :date,\n  first_day_of_week: 1,\n  picker_format: \"F J Y\",\n  format: \"yyyy-LL-dd\",\n  placeholder: \"Feb 24th 1955\"\n```\n\n----------------------------------------\n\nTITLE: Using attach_fields to Display Extra Fields on HasMany Through Attachments in Ruby\nDESCRIPTION: Demonstrates the attach_fields option to show additional fields from the join table when attaching associations. The block passed to attach_fields defines extra fields like :review, which will appear when managing the many-to-many attachments. This requires Avo version 3.11 or higher. It facilitates capturing additional metadata related to the association.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/associations/has_many.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :patrons,\n  as: :has_many,\n  through: :patronships,\n  attach_fields: -> {\n    field :review, as: :text\n  }\n```\n\n----------------------------------------\n\nTITLE: Rendering a Full Avo::PanelComponent in ERB\nDESCRIPTION: Demonstrates rendering the Avo::PanelComponent with a dynamic title (@product.name), description (@product.description), a 'tools' slot containing a link helper (a_link), and a 'body' slot with custom HTML content. This example showcases utilizing multiple slots and instance variables.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-components/avo-panel-component.md#_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new(title: @product.name, description: @product.description) do |c| %>\n  <% c.with_tools do %>\n    <%= a_link(@product.link, icon: 'heroicons/solid/academic-cap', style: :primary, color: :primary) do %>\n      View product\n    <% end %>\n  <% end %>\n\n  <% c.with_body do %>\n    <div class=\"flex flex-col p-4 min-h-24\">\n      <div class=\"space-y-4\">\n        <h3>Product information</h3>\n\n        <p>Style: shiny</p>\n      </div>\n    </div>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Including the Concern in ApplicationRecord (Ruby)\nDESCRIPTION: This snippet shows how to include the `AvoJsonFields` concern into the `ApplicationRecord` class in a Rails application. By including the concern in `ApplicationRecord`, all models inheriting from it automatically gain the functionality provided by the concern, specifically, the dynamic getter and setter methods for handling JSON fields, as defined by the `avo_json_fields` method. This assumes an ActiveRecord-based setup.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/format-ruby-object-to-json.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationRecord < ActiveRecord::Base\n  primary_abstract_class\n\n  include AvoJsonFields\nend\n```\n\n----------------------------------------\n\nTITLE: Using Field Meta in ERB Template\nDESCRIPTION: This snippet demonstrates how to access and use the `meta` attribute set in a Ruby field definition within an ERB template. It checks for the presence of a specific key (`:foo`) within the `meta` hash and renders different content based on its existence.  The example shows how to conditionally display a value based on the field's meta data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_34\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args do %>\n  <% if @field.meta[:foo] %>\n    <%= @resource.record.foo_value %>\n  <% else %>\n    <%= @field.value %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Importing and Defining Guide Data in Vue Setup\nDESCRIPTION: This JavaScript snippet, within a Vue 3 `<script setup>` context, imports recipe data from a relative path (`./../.vitepress/recipes.data.js`). It also defines a constant array `articles` containing objects with `title` and `link` properties for manually adding blog post guides.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\n  import { data } from './../.vitepress/recipes.data.js'\n\n  // add guides written on the blog\n  const articles = [{\n    title: \"Override the field method to add default values to field options\",\n    link: \"https://avohq.io/blog/override-the-field-method-to-add-default-values-to-field-options\"\n  }]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using the tools slot\nDESCRIPTION: This snippet demonstrates how to utilize the `tools` slot of the `Avo::PanelComponent`. It places resource controls, such as links in this case, into the top right corner of the panel. This example uses `a_link` helper, presumably from the Avo framework. This controls will collapse when resolution falls below 1024px.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-components/avo-panel-component.md#_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new(name: \"Dashboard\") do |c| %>\n  <% c.with_tools do %>\n    <%= a_link('/admin', icon: 'heroicons/solid/academic-cap', style: :primary) do %>\n      Admin\n    <% end %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Applying Policy Scope - Ruby\nDESCRIPTION: The `apply_policy` method receives the user, model, and an optional policy_class. It tries to determine the scope from the provided or auto-detected policy class. If a scope is found, it's used; otherwise, it falls back to Pundit. It handles `Pundit::NotDefinedError` and raises `NoPolicyError`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\ndef apply_policy(user, model, policy_class: nil)\n  # Try and figure out the scope from a given policy or auto-detected one\n  scope_from_policy_class = scope_for_policy_class(policy_class)\n\n  # If we discover one use it.\n  # Else fallback to pundit.\n  if scope_from_policy_class.present?\n    scope_from_policy_class.new(user, model).resolve\n  else\n    Pundit.policy_scope!(user, model)\n  end\nrescue Pundit::NotDefinedError => error\n  raise NoPolicyError.new error.message\nend\n```\n\n----------------------------------------\n\nTITLE: Using ActionView helpers in Avo Resource\nDESCRIPTION: Demonstrates how to access and use `ActionView` helper methods within an Avo resource.  The `view_context` is automatically delegated, allowing the use of methods like `content_tag` and `link_to` within field configurations. This example shows how to format a textarea field and create a link in a computed field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/faq.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentResource < Avo::BaseResource\n  field :id, as: :id\n  field :body,\n    as: :textarea,\n    format_using: -> do\n      view_context.content_tag(:div, style: 'white-space: pre-line') { value }\n    end\n  field :computed_field, as: :text do |model|\n    view_context.link_to(\"Login\", main_app.new_user_session_path)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Breadcrumbs on Custom Controller Pages\nDESCRIPTION: This snippet demonstrates adding breadcrumbs within custom pages by calling `add_breadcrumb` in the controller action, integrating into Avo’s breadcrumb trail for context-aware navigation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::ToolsController < Avo::ApplicationController\n  def custom_tool\n    add_breadcrumb \"Custom tool\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using the sidebar slot\nDESCRIPTION: This snippet illustrates the usage of the `sidebar` slot, which places a sidebar on the right of the body content. It is used for displaying information or controls in a smaller area. Content is added within the provided block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-components/avo-panel-component.md#_snippet_7\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_Sidebar do %>\n    Something tiny here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Defining a DummyAction class for resource handling in Avo (Ruby)\nDESCRIPTION: Defines a custom action class inheriting from Avo::BaseAction, setting a name property, and implementing a handle method that performs a task and redirects to a resource path with specific filters applied. Dependencies include Avo gem and its base classes, with the method `do_something_important` as a placeholder for actual logic, and `redirect_to` for navigation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\nclass DummyAction < Avo::BaseAction\n  self.name = \"Dummy action\"\n\n  def handle(**args)\n    do_something_important\n\n    redirect_to avo.resources_users_path(filters: view_context.decode_filter_params({\"NameFilter\"=>\"Apple\"}))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Before Update Example for Boolean Group (JSON)\nDESCRIPTION: This JSON example illustrates the behavior of the `boolean_group` field before Avo version 3.7.0. Prior to the update, the entire attribute would be overridden, which could lead to data loss.  It shows a potential data loss case due to the full attribute replacement.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/boolean_group.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// Before update.\n{\n  \"feature_enabled\": true,\n  \"another_feature_enabled\": false,\n  \"something_else\": \"some_value\" // this will disappear\n}\n\n// After update.\n{\n  \"feature_enabled\": true,\n  \"another_feature_enabled\": false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gravatar Field with Options in Avo Ruby\nDESCRIPTION: This snippet shows how to configure the Avo `Gravatar` field using basic options. It associates the field type `:gravatar` with the `email` attribute and demonstrates setting options like `rounded` to false, specifying a `size` of 60 pixels, and providing a `default_url` to display if the email is not found on Gravatar. This is the standard way to declare and customize the appearance of the Gravatar field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/gravatar.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :email,\n  as: :gravatar,\n  rounded: false,\n  size: 60,\n  default_url: 'some image url'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating label option for Heading field in Avo (Ruby)\nDESCRIPTION: Another example specifically showcasing the 'label' option, which sets the content of the heading. Using 'label' ensures the heading is displayed consistently across Show, Edit, and Create views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/heading.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfield :some_id, as: :heading, label: \"user information\"\n```\n\n----------------------------------------\n\nTITLE: Using External Images in Grid View with Computed Fields\nDESCRIPTION: This snippet illustrates how to display external images in grid view by defining a cover field as an external_image type, using a block to dynamically generate the image URL based on the model's data. This enables flexible and dynamic asset display within the grid.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/grid-view.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ngrid do\n  cover :logo, as: :external_image, link_to_resource: true do |model|\n    if model.url.present?\n      \"//logo.clearbit.com/#{URI.parse(model.url).host}?size=180\"\n    end\n  end\n  title :name, as: :text, link_to_resource: true\n  body :excerpt, as: :text do |model|\n    begin\n      ActionView::Base.full_sanitizer.sanitize(model.body).truncate 130\n    rescue => exception\n      ''\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Fallback to Records Method (Ruby)\nDESCRIPTION: This Ruby code demonstrates the use of the `records` method in a custom `ArrayResource` as a fallback when neither a block nor a model method provides data. This provides default datasets to be rendered. This example defines the `records` method in the `Avo::Resources::Attendee` class, returning a predefined array of attendee data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/array.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Attendee < Avo::Resources::ArrayResource\n  def records\n    [\n      { id: 1, name: \"Default Attendee\", role: \"Guest\", organization: \"DefaultOrg\" }\n    ]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Heading as HTML in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to render the heading as HTML using the `as_html` option.  It sets the `as_html` parameter to `true`.  This allows you to use HTML formatting such as `<div>` and `class` to format the heading as needed. The input is an HTML string and the output is the HTML rendered in the view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/heading.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nheading '<div class=\"underline text-gray-800 uppercase\">Address fields</,div>', as_html: true\n```\n\n----------------------------------------\n\nTITLE: Adding Prefixed ID to Model (Ruby)\nDESCRIPTION: This code snippet adds a prefixed ID to the model using the `has_prefix_id` method.  The parameter `:post` is used to add the prefix to the id of the records.  This autogenerates prefixed IDs for the specified model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/custom-ids.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post.rb\nclass Post < ApplicationRecord\n  has_prefix_id :post\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo License Key in Ruby\nDESCRIPTION: This Ruby snippet shows how to set the Avo license key within an initializer file (config/initializers/avo.rb) by assigning the license key from an environment variable (AVO_LICENSE_KEY). It is required to properly authenticate the license on the server. The snippet assumes the environment variable is set on the production server, and the configuration block customizes Avo settings. The output is an appropriately configured Avo instance ready to validate the license key during runtime.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/license-troubleshooting.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.license_key = ENV[\"AVO_LICENSE_KEY\"]\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Panel in Avo Resource (Ruby)\nDESCRIPTION: This snippet demonstrates how to define a panel within an Avo resource to group related fields. It uses the `panel` block to define the panel's name and description, and includes fields specific to that panel. The panel helps organize fields on the resource page.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/tabs.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserResource < Avo::BaseResource\n  field :id, as: :id, link_to_resource: true\n  field :email, as: :text, name: \"User Email\", required: true\n\n  panel name: \"User information\", description: \"Some information about this user\" do\n    field :first_name, as: :text, required: true, placeholder: \"John\"\n    field :last_name, as: :text, required: true, placeholder: \"Doe\"\n    field :active, as: :boolean, name: \"Is active\", show_on: :show\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Permitting Nested Parameters | Avo Resource | Ruby\nDESCRIPTION: Adds `reviews_attributes` to the `self.extra_params` array in the Avo resource definition. This step is essential for allowing the nested attributes hash (containing `:body` and `:user_id` for each review) submitted by the form to be accepted and processed by the Rails controller and the `accepts_nested_attributes_for` method on the model.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/nested-records-when-creating.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.extra_params = [reviews_attributes: [:body, :user_id]]\n\n  # other fields actions, filters and more\n  def fields\n    field :reviews, as: :has_many\n\n    tool Avo::ResourceTools::NestedFishReviews, only_on: :new\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enforcing Restrictions on KeyValue Field in Avo (Ruby)\nDESCRIPTION: This code snippet demonstrates how to enforce restrictions on an Avo `KeyValue` field by disabling editing of keys or values, adding rows, or deleting rows.  It uses the `disable_editing_keys`, `disable_editing_values`, `disable_adding_rows`, and `disable_deleting_rows` options. The code relies on the Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/key_value.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, # The database field ID\n  as: :key_value, # The field type.\n  disable_editing_keys: false, # Option to disable the ability to edit keys. Implies disabling to add rows. Defaults to false.\n  disable_editing_values: false, # Option to disable the ability to edit values. Defaults to false.\n  disable_adding_rows: false, # Option to disable the ability to add rows. Defaults to false.\n  disable_deleting_rows: false # Option to disable the ability to delete rows. Defaults to false.\n```\n\n----------------------------------------\n\nTITLE: Global Row Controls Configuration in Avo (Ruby)\nDESCRIPTION: This snippet shows how to configure the default settings for row controls across all resources in Avo using `resource_row_controls_config` in the `config/initializers/avo.rb` file. It demonstrates setting the placement, float behavior, and hover visibility of the controls. These global configurations apply to each resource unless specifically overridden in the resource definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/table-view.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.resource_row_controls_config = {\n    placement: :right,\n    float: false,\n    show_on_hover: false\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Avo Resource Title from Model Method | Ruby\nDESCRIPTION: This example shows how to use a model method (`tiny_name` in this case) to compute the title for a resource record. You define the method in the model and then set `self.title` in the Avo resource to the symbol representing that method name.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/comment.rb\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.title = :tiny_name\nend\n\n# app/models/comment.rb\nclass Comment < ApplicationRecord\n  def tiny_name\n    ActionView::Base.full_sanitizer.sanitize(body).truncate 30\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Avo Path Helpers in Rails\nDESCRIPTION: This snippet demonstrates how to use Avo's path helpers within a Rails application. Because Avo is a Rails engine, paths need to be referenced using the engine name. This means that when generating paths, you must prepend the engine name (e.g., `avo`) for Avo routes, and use your app's engine name (e.g., `main_app`) for your app's routes. This ensures correct routing within the engine context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/rails-and-hotwire.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# When referencing an Avo route, use avo\nlink_to 'Users', avo.resources_users_path\nlink_to user.name, avo.resources_user_path(user)\n\n# When referencing a path for your app, use main_app\nlink_to \"Contact\", main_app.contact_path\nlink_to post.name, main_app.posts_path(post)\n```\n\n----------------------------------------\n\nTITLE: Generating a Standalone Avo Action using Rails Generator (Bash)\nDESCRIPTION: Demonstrates using the `--standalone` flag with the Avo action generator. This creates an action ('export_users') that can be triggered without requiring any records to be selected, suitable for global operations like reports or mass exports.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/generator.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:action export_users --standalone\n```\n\n----------------------------------------\n\nTITLE: Using for_attribute option to specify target attributes in Ruby\nDESCRIPTION: Allows specifying a different target attribute on the model than the field's ID, useful for creating multiple field representations of the same data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nfield :status, as: :select, options: [:one, :two, :three], only_on: :forms\n\nfield :secondary_field_for_status,\n  as: :badge,\n  for_attribute: :status,\n  options: {info: :one, :success: :two, warning: :three},\n  except_on: :forms,\n  help: \"Secondary field for status using the for_attribute option\"\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Variables to ExecutionContext in Avo (Ruby)\nDESCRIPTION: Illustrates how to pass arbitrary custom variables (like `view` and `resource`) during `Avo::ExecutionContext` initialization. These variables become accessible within the execution scope of the target block, alongside standard context objects like `record`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/execution-context.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAvo::ExecutionContext.new(target: &SOME_BLOCK, record: User.first, view: :index, resource: resource).handle\n```\n\n----------------------------------------\n\nTITLE: Locating ActiveRecord Records Using GlobalID in Ruby\nDESCRIPTION: Provides a Ruby snippet demonstrating how to retrieve an ActiveRecord object using its Global ID (GID) string, typically obtained from Avo logs. The `GlobalID::Locator.locate` method takes the GID string (e.g., \"gid://dummy/User/20\") and returns the corresponding database record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\ngid = \"gid://dummy/User/20\"\nuser = GlobalID::Locator.locate(gid)\n```\n\n----------------------------------------\n\nTITLE: Using a model method for resource title\nDESCRIPTION: This example illustrates specifying a model method `tiny_name` to generate the resource's title. The method sanitizes and truncates the body content to create a compact display name, providing flexibility when model attributes don't directly serve as titles.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/comment.rb\nclass Avo::Resources::Comment < Avo::BaseResource\n  self.title = :tiny_name\nend\n\n# app/models/comment.rb\nclass Comment < ApplicationRecord\n  def tiny_name\n    ActionView::Base.full_sanitizer.sanitize(body).truncate 30\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining True as Possible Value (Configuration)\nDESCRIPTION: Indicates that the boolean value `true` is an acceptable input or setting for this configuration option. Users are allowed to explicitly configure the option to this state. No specific dependencies are needed for this basic value definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/default_boolean_false.md#_snippet_1\n\nLANGUAGE: Configuration\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Menu for Language Switching in Ruby (v2.3.0+)\nDESCRIPTION: Ruby configuration for Avo v2.3.0+ that adds language switching links to the profile menu. This method replaces the need to eject and modify the profile dropdown partial.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/multilingual-content.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.profile_menu = -> {\n    link \"Switch to Portuguese\", path: \"?set_locale=pt-BR\"\n    link \"Switch to English\", path: \"?set_locale=en\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Add HTML Attributes to Edit Label Target - Ruby\nDESCRIPTION: Provides a structure to set custom HTML attributes on the label element for a field in the edit view, facilitating label-level customizations like CSS classes, inline styles, or data parameters for interactivity. Useful for improving form accessibility and guided interactions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    label: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Team Resource to Use TeamUser\nDESCRIPTION: This Ruby code modifies the `Team` resource definition to use the custom `TeamUser` resource for the `users` field. By setting the `use_resource` option, the display for the `users` association in the `Team` admin view is customized using the fields defined within `TeamUser`. This allows a tailored presentation of user information when viewing teams.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/team.rb\nclass Avo::Resources::Team < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id, link_to_record: true\n    field :name, as: :text\n    field :users, as: :has_many, use_resource: Avo::Resources::TeamUser\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Format in Search Results\nDESCRIPTION: Shows how to specify the format of images in search results using the image_format attribute (requires Avo Pro license).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(name_cont: params[:q], m: \"or\").result(distinct: false) },\n    item: -> do\n      {\n        title: \"[#{record.id}]#{record.name}\",\n        description: ActionView::Base.full_sanitizer.sanitize(record.body).truncate(130),\n        image_url: main_app.url_for(record.cover_photo),\n        image_format: :rounded\n      }\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Avo Association Scope Syntax (Ruby)\nDESCRIPTION: Details the modification required for applying ActiveRecord scopes to Avo association fields in versions 2.5 and later. The example shows prepending `query.` to the scope call within the `scope` block (`query.starts_with :a`), explaining that this change enhances flexibility and provides access to the parent record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_20\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :user, optional: true\n\n  scope :starts_with, -> (prefix) { where('LOWER(body) LIKE ?', \"#{prefix}%\") }\nend\n\n# app/models/user.rb\nclass User < ApplicationRecord\n  has_many :comments\nend\n\n# app/avo/resources/user_resource.rb\nclass UserResource < Avo::BaseResource\n  # Version before v2.5.0\n  field :comments, as: :has_many, scope: -> { starts_with :a }\nend\n\n# app/avo/resources/user_resource.rb\nclass UserResource < Avo::BaseResource\n  # Version after v2.5.0\n  field :comments, as: :has_many, scope: -> { query.starts_with :a }\nend\n```\n\n----------------------------------------\n\nTITLE: Integrating Rolify into Account Model\nDESCRIPTION: This snippet adds Rolify functionality to the `Account` model. It assumes that the model for managing users is named `Account`. The `rolify` macro adds the necessary associations and methods for managing roles. This declaration enables the account to have and belong to roles.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rolify-integration.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Account < ApplicationRecord\n  rolify\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Defining RoleResource for Role management in Avo\nDESCRIPTION: Sets up the 'RoleResource' to manage roles within Avo, displaying the role name and related accounts. The resource provides the interface for editing roles and their associations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rolify-integration.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nclass RoleResource < Avo::BaseResource\n  self.title = :name\n  self.includes = []\n\n  field :name, as: :text\n  field :accounts, as: :has_and_belongs_to_many\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an Avo Policy with Custom Scope in Ruby\nDESCRIPTION: Implements an `AgingOrderPolicy` using Pundit for authorization within Avo. It defines a custom nested `Scope` class whose `resolve` method returns an instance of `LazyLoader`, effectively applying scoping logic to the custom REST API data source. The policy grants index access only to admin users (`user.admin?`) and disables the `show?` action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rest-api-integration.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass AgingOrderPolicy < ApplicationPolicy\n  class Scope < Scope\n    def resolve\n      LazyLoader.new(scope)\n    end\n  end\n\n  def index?\n    user.admin?\n  end\n\n  def show?\n    false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Translation Key in Avo Resource (Ruby)\nDESCRIPTION: Sets a specific translation key for an Avo resource class. This key is used by Rails' I18n to look up the localized name of the resource in the locale files, affecting labels displayed throughout Avo. Requires the resource to be defined within Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/localization.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/user_resource.rb\nclass UserResource < Avo::BaseResource\n  self.title = :name\n  self.translation_key = 'avo.resource_translations.user'\nend\n```\n\n----------------------------------------\n\nTITLE: Generating an action in a namespace (Bash)\nDESCRIPTION: This command generates an Avo action within a specified namespace (admin). This keeps the actions organized by creating the appropriate directory structure.  Requires Rails with Avo installed and a valid directory structure.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/generate.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Generate an action in a namespace\nbin/rails generate avo:action admin/approve_user\n```\n\n----------------------------------------\n\nTITLE: Bypass Avo Action Confirmation Modal (Ruby)\nDESCRIPTION: Disables the standard confirmation modal, causing the action to execute immediately upon user interaction. This is suitable for low-impact actions or within workflows where confirmation is handled externally.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/customization.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.no_confirmation = true\nend\n```\n\n----------------------------------------\n\nTITLE: Location Field Using Separate Latitude and Longitude Columns in Ruby\nDESCRIPTION: Configures a location field to use separate database columns for latitude and longitude instead of a single combined column. This also renders separate input fields in the edit view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/location.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :coordinates, as: :location, stored_as: [:latitude, :longitude]\n```\n\n----------------------------------------\n\nTITLE: Adding Empty Message to Avo Filter\nDESCRIPTION: This code snippet shows how to customize the empty message displayed when a filter doesn't have any options. It sets a custom message prompting users to select a country first before city options will appear.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Filters::CourseCity < Avo::Filters::BooleanFilter\n  self.name = \"Course city filter\"\n  self.empty_message = \"Please select a country to view options.\"\n\n  def apply(request, query, values)\n    query.where(city: values.select { |city, selected| selected }.keys)\n  end\n\n  def options\n    if countries.present?\n      []\n    else\n      [\"Los Angeles\", \"New York\"]\n    end\n  end\n\n  private\n\n  def countries\n    # logic to fetch the countries\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Sanitized HTML in Discreet Information Tooltip in Avo (Ruby)\nDESCRIPTION: Illustrates how to include safe HTML (like `<strong>`) within a discreet information tooltip by using the `sanitize` helper. This example sets a dynamic tooltip based on `record.published_at` and specifies a static icon. Requires the Avo resource class, access to the `record` object, and the `sanitize` helper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/discreet-information.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = {\n    tooltip: -> { sanitize(\"Product is <strong>#{record.published_at ? \"published\" : \"draft\"}</strong>\", tags: %w[strong]) },\n    icon: \"heroicons/outline/academic-cap\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Heading Field with HTML Ruby\nDESCRIPTION: Defines a Heading field using the `as_html: true` option and a computed block. This allows the content returned by the block to be rendered directly as HTML, providing flexibility for custom styling or structure within the heading.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/heading.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :dev_heading, as: :heading, as_html: true do\n  '<div class=\"underline uppercase font-bold\">DEV</div>'\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Logger for Avo (Ruby)\nDESCRIPTION: Sets up a custom logger for Avo using `config.logger` in the initializer. This example creates a file logger (`avo.log`) with a specific datetime format and message format, prepending \"[Avo]\" to each log entry and outputting to both the file and standard output.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_24\n\nLANGUAGE: Ruby\nCODE:\n```\n## == Logger ==\nconfig.logger = -> {\n  file_logger = ActiveSupport::Logger.new(Rails.root.join(\"log\", \"avo.log\"))\n\n  file_logger.datetime_format = \"%Y-%m-%d %H:%M:%S\"\n  file_logger.formatter = proc do |severity, time, progname, msg|\n    \"[Avo] #{time}: #{msg}\\n\".tap do |i|\n      puts i\n    end\n  end\n\n  file_logger\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Grid View with Ruby in Avo Resource\nDESCRIPTION: This snippet demonstrates how to define a grid block within an Avo resource class to specify which fields are displayed in grid view, including cover, title, and body. It requires overriding the resource class, using methods such as cover, title, and body within the grid block to configure display attributes and linking options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/grid-view.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  # ...\n  grid do\n    cover :cover_photo, as: :file, link_to_resource: true\n    title :name, as: :text, required: true, link_to_resource: true\n    body :excerpt, as: :text\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo with Block-based current_user Method (Ruby)\nDESCRIPTION: This code configures Avo to fetch the current user with a custom block rather than a standard method symbol. Place this in config/initializers/avo.rb if your application stores users in a context like Current.user. The block should return the currently authenticated user object. No extra dependencies are needed beyond Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authentication.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_method do\n    Current.user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Result Image Format (Pro Feature)\nDESCRIPTION: Control the shape of the image displayed in search results using the `item -> image_format` option. Available formats are `:square`, `:rounded`, and `:circle`. This setting works in conjunction with `image_url` and requires an Avo Pro license.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(name_cont: params[:q], m: \"or\").result(distinct: false) },\n    item: -> do\n      {\n        title: \"[#{record.id}]#{record.name}\",\n        description: ActionView::Base.full_sanitizer.sanitize(record.body).truncate(130),\n        image_url: main_app.url_for(record.cover_photo),\n        image_format: :rounded\n      }\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Using Computed Values for Gravatar Fields in Ruby\nDESCRIPTION: This Ruby snippet configures a Gravatar avatar field where the avatar image is determined by a computed email address, derived at runtime from the record's 'google_username' attribute. This requires the ability to provide a block to the 'field' method, evaluating the email dynamically. The snippet assumes access to the 'record' object and its properties, outputting the generated Gravatar image using the computed email.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/gravatar.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :email, as: :gravatar do\n  \"#{record.google_username}@gmail.com\"\nend\n```\n\n----------------------------------------\n\nTITLE: Using Avo::Field Helper for Conditional Rendering ERB\nDESCRIPTION: Introduces the `avo_field` helper as a convenience method that abstracts the logic of switching between `avo_show_field` and `avo_edit_field`. It renders the appropriate field type based on the `view:` option provided, which can be a fixed value like `:show` or `:edit`, or a dynamic condition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-field-components.md#_snippet_6\n\nLANGUAGE: ERB\nCODE:\n```\n<%= avo_field :name, as: :text, view: :show %>\n<%= avo_field :name, as: :text, view: :edit %>\n<%= avo_field :name, as: :text, view: ExampleHelper.view_conditional %>\n```\n\n----------------------------------------\n\nTITLE: Generating Avo Resource Manually for Post Model - Bash\nDESCRIPTION: Generates an Avo resource file for an existing or new 'Post' model using Avo's CLI generator. This creates a resource Ruby file in the 'app/avo/resources/' directory configured to manage 'Post' records through the admin interface. The generated resource declares no includes or search blocks by default and includes a basic field definition for the 'id' attribute only, meaning further customization is expected by the developer.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:resource post\n```\n\n----------------------------------------\n\nTITLE: Generating Avo Application Controller with Rails CLI in Bash\nDESCRIPTION: This bash command uses the Rails generator to eject and create the `application_controller.rb` for Avo under the app controllers directory. It requires the Rails framework with the Avo gem installed. The command helps in scaffolding or regenerating the Avo base controller to customize Avo's behavior in the Rails app. It expects a Rails application environment and outputs the newly generated controller file in the specified path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/application_controller_eject_notice.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrails generate avo:eject --controller application_controller\n```\n\n----------------------------------------\n\nTITLE: Defining Field Translations in Avo I18n Locale File (YAML)\nDESCRIPTION: Shows the YAML structure for defining pluralized translations for an Avo field under the `field_translations` key within the Avo namespace in a locale file. These translations are used when the field's `translation_key` option is set. Requires a Rails I18n setup and a corresponding locale file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/localization.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# avo.es.yml\nes:\n  avo:\n    dashboard: 'Dashboard'\n    # ... other translation keys\n    field_translations:\n      file:\n        zero: 'archivos'\n        one: 'archivo'\n        other: 'archivos'\n```\n\n----------------------------------------\n\nTITLE: Generating ApplicationController with Rails for Avo Ejection\nDESCRIPTION: This bash command generates or replaces the app/controllers/avo/application_controller.rb file in the Rails application, specifically targeting integration with the Avo framework. It is useful when the file is missing and needs to be created or re-generated, ensuring the application is correctly configured for Avo. Dependencies include Rails and Avo setup; the command should be run in the terminal within the Rails project directory.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/application_controller_eject_notice.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrails generate avo:eject --controller application_controller\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Avo Fields with Rails Generator - Bash\nDESCRIPTION: This bash snippet demonstrates how to generate a new custom field in Avo using the Rails generator command 'bin/rails generate avo:field progress_bar'. It creates necessary Ruby, ERB, and component files under app/components and app/avo/fields for the 'progress_bar' field. Restarting the Rails server is recommended after adding a new custom field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-fields.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n▶ bin/rails generate avo:field progress_bar\n      create  app/components/avo/fields/progress_bar_field\n      create  app/components/avo/fields/progress_bar_field/edit_component.html.erb\n      create  app/components/avo/fields/progress_bar_field/edit_component.rb\n      create  app/components/avo/fields/progress_bar_field/index_component.html.erb\n      create  app/components/avo/fields/progress_bar_field/index_component.rb\n      create  app/components/avo/fields/progress_bar_field/show_component.html.erb\n      create  app/components/avo/fields/progress_bar_field/show_component.rb\n      create  app/avo/fields/progress_bar_field.rb\n```\n\n----------------------------------------\n\nTITLE: HQ Ping Payload Structure in Ruby\nDESCRIPTION: The payload structure sent to Avo HQ for license validation. Contains version information, environment details, and host information to validate the license against the current installation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/licensing.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# HQ ping payload\n{\n  license: Avo.configuration.license,\n  license_key: Avo.configuration.license_key,\n  avo_version: Avo::VERSION,\n  rails_version: Rails::VERSION::STRING,\n  ruby_version: RUBY_VERSION,\n  environment: Rails.env,\n  ip: current_request.ip,\n  host: current_request.host,\n  port: current_request.port,\n  app_name: Rails.application.class.to_s.split(\"::\")\n.first,\n  avo_metadata: avo_metadata\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Query for Resources in Ruby\nDESCRIPTION: Shows how to set up search_query option for resources to enable the searchable functionality in belongs_to associations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations/belongs_to.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post_resource.rb\nclass PostResource < Avo::BaseResource\n  self.search_query = -> do\n    scope.ransack(id_eq: params[:q], name_cont: params[:q], body_cont: params[:q], m: \"or\").result(distinct: false)\n  end\nend\n\n# app/avo/resources/project_resource.rb\nclass ProjectResource < Avo::BaseResource\n  self.search_query = -> do\n    scope.ransack(id_eq: params[:q], name_cont: params[:q], country_cont: params[:q], m: \"or\").result(distinct: false)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default View to Grid in Avo Resource\nDESCRIPTION: This snippet shows how to set the default view type to grid for the resource class by assigning “:grid” to the self.default_view_type attribute. It customizes the initial display mode when accessing the resource's index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/grid-view.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostResource < Avo::BaseResource\n  self.default_view_type = :grid\nend\n```\n\n----------------------------------------\n\nTITLE: Restricting KeyValue field Actions in Avo Resource (Ruby)\nDESCRIPTION: This snippet illustrates how to apply granular restrictions on user actions for the KeyValue field. Options like `disable_editing_keys`, `disable_editing_values`, `disable_adding_rows`, and `disable_deleting_rows` can be set to `true` to prevent specific interactions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/key_value.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, # The database field ID\n  as: :key_value, # The field type.\n  disable_editing_keys: false, # Option to disable the ability to edit keys. Implies disabling to add rows. Defaults to false.\n  disable_editing_values: false, # Option to disable the ability to edit values. Defaults to false.\n  disable_adding_rows: false, # Option to disable the ability to add rows. Defaults to false.\n  disable_deleting_rows: false # Option to disable the ability to delete rows. Defaults to false.\n```\n\n----------------------------------------\n\nTITLE: Add Badge Tooltip Title for Avo Grid Item Ruby\nDESCRIPTION: Provide a tooltip that appears when a user hovers over the badge on a grid item. The `badge_title` key is added to the hash returned by the `card` lambda, setting the text for the tooltip.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/grid-view.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nself.grid_view = {\n  card: -> do\n    {\n      cover_url: record.image.attached? ? main_app.url_for(record.image.variant(resize: \"300x300\")) : nil,\n      title: record.title,\n      body: simple_format(record.description),\n      badge_label: (record.updated_at < 1.week.ago ? \"New\" : \"Updated\"),\n      badge_color: (record.updated_at < 1.week.ago ? \"green\" : \"orange\"),\n      badge_title: (record.updated_at < 1.week.ago ? \"New product here\" : \"Updated product here\")\n    }\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: Gemfile Updates for 3.9.1 and Rails 7.2+ - Ruby\nDESCRIPTION: This snippet shows the recommended Gemfile configuration for upgrading Avo to 3.9.1, requiring Rails 7.2 or greater and specific versions of `ransack` and `acts-as-taggable-on`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\n\n# Use Rails 7.2 or greater\ngem \"rails\", \">= 7.2.0.beta2\"\n\n# or\n\n# You can also run off `main`\ngem \"rails\", github: \"rails/rails\", branch: \"main\"\n\n# Update Avo\ngem \"avo-advanced\", \">= 3.9.1\"\n\n# Use `ransack` version `4.2.0` for searching\ngem \"ransack\", \">= 4.2.0\"\n\n# This version of acts-as-taggable-on is compatible with\n# Follow this PR to get the fix in the library\n# https://github.com/mbleigh/acts-as-taggable-on/pull/1126\ngem \"acts-as-taggable-on\", github: \"avo-hq/acts-as-taggable-on\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Empty Message in Avo Filters in Ruby\nDESCRIPTION: Demonstrates how to set a custom message to display when a filter has no options available. The example shows setting an empty_message for a CourseCity filter that guides users to select a country first.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/filters/course_city.rb\nclass Avo::Filters::CourseCity < Avo::Filters::BooleanFilter\n  self.name = \"Course city filter\"\n  self.empty_message = \"Please select a country to view options.\"\n\n  def apply(request, query, values)\n    query.where(city: values.select { |city, selected| selected }.keys)\n  end\n\n  def options\n    if countries.present?\n      []\n    else\n      [\"Los Angeles\", \"New York\"]\n    end\n  end\n\n  private\n\n  def countries\n    # logic to fetch the countries\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Nil Resource Records Safely in Avo Visibility Lambdas (Ruby)\nDESCRIPTION: Highlights the need to safely handle nil resource records. Shows an incorrect example where resource.record may be nil, and the correct usage with safe navigation (&.) to avoid errors. This is critical during record creation, as no existing record is present.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\n# `resource.record` is nil when submitting the form on resource creation\nfield :name, as: :text, visible -> { resource.record.enabled? }\n\n# Do this instead\nfield :name, as: :text, visible -> { resource.record&.enabled? }\n```\n\n----------------------------------------\n\nTITLE: Handling Polymorphic Through Associations with attach_fields in Ruby\nDESCRIPTION: Shows how to correctly handle polymorphic has_many through associations by including the polymorphic type field as a hidden field in attach_fields. This is necessary to provide the type value for the join model, ensuring the association works correctly when multiple types are polymorphically related through the join table.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/associations/has_many.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :patrons,\n  as: :has_many,\n  through: :patronships,\n  attach_fields: -> {\n    field :review, as: :text\n    field :patronship_type, as: :hidden, default: \"TheType\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Hiding a Resource from Global Search\nDESCRIPTION: Demonstrates how to exclude a resource from global search results while still allowing search on its Index page.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::TeamMembership < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false) },\n    item: -> do\n      {\n        description: record.level,\n      }\n    end,\n    hide_on_global: true\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Fields in Avo Resource (Ruby)\nDESCRIPTION: Shows how to disable an Avo field using the disabled: true option. This prevents users from editing the field on the Edit and New views. Accepts other field parameters such as field type (as:) and field name. Disabled fields will not be submitted or persisted when updating or creating resources.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# disabled will disable the field on the `Edit` view\nfield :name, as: :text, disabled: true\nfield :status, as: :select, disabled: true\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting Basic Text using Avo Encryption Service (Ruby)\nDESCRIPTION: Demonstrates how to use the Avo::Services::EncryptionService to encrypt and then decrypt a simple string. It shows the basic usage of the `encrypt` and `decrypt` methods with a string message and a symbolic purpose.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/encryption-service.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsecret_encryption = Avo::Services::EncryptionService.encrypt(message: \"Secret string\", purpose: :demo)\n# \"x+rnETtClF2cb80PtYzlULnVB0vllf+FvwoqBpPbHWa8q6vlml5eRWrwFMcYrjI6--h2MiT1P5ctTUjwfQ--k2WsIRknFVE53QwXADDDJw==\"\n\nAvo::Services::EncryptionService.decrypt(message: secret_encryption, purpose: :demo)\n# \"Secret string\"\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic Trix Field in Avo (Ruby)\nDESCRIPTION: Defines a field named `:body` using the `Trix` field type within an Avo resource. This renders a Trix WYSIWYG editor in the Avo UI, storing the resulting HTML content in the associated database column (typically `string` or `text`). By default, this field is hidden on the Index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/trix.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :trix\n```\n\n----------------------------------------\n\nTITLE: Formatting Data Results in Metric Card with self.format in Ruby\nDESCRIPTION: Allows formatting of the metric result before display, such as applying number formats or social formatting. Demonstrates usage of the `self.format` attribute with a lambda that formats the `result` from a query. Shows two examples: without and with formatting applied.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Cards::AmountRaised < Avo::Cards::MetricCard\n  self.id = \"amount_raised\"\n  self.label = \"Amount raised\"\n  self.prefix = \"$\"\n  def query\n    result 9001\n  end\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Cards::AmountRaised < Avo::Cards::MetricCard\n  self.id = \"amount_raised\"\n  self.label = \"Amount raised\"\n  self.prefix = \"$\"\n  self.format = -> {\n    number_to_social value, start_at: 1_000\n  }\n  def query\n    result 9001\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Targeting Avo Field Wrapper in Edit View (Object Notation) (Ruby)\nDESCRIPTION: This snippet illustrates the basic structure for using the `html` option in object notation to target the field's wrapper element specifically for the 'edit' view (also applies to 'new').\n\nDependencies: Avo framework.\n\nParameters: `html` option with a nested hash structure `edit: { wrapper: {} }`. Attributes (`style`, `classes`, `data`) would be added inside the inner `{}`.\n\nExpected Input: A hash structure specifying the 'edit' view and 'wrapper' target.\n\nExpected Output: Configures the Avo field definition to allow adding HTML attributes to the edit/new view wrapper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/html.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    wrapper: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Acts-as-Taggable-on in Rails (Ruby)\nDESCRIPTION: Defines standard RESTful routes for the `tags` and `taggings` resources in a Rails application. This is necessary to allow browsing and managing tags and taggings as resources within the Avo admin panel when using the `acts-as-taggable-on` gem. These routes enable standard CRUD operations via the Avo interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/act-as-taggable-on-integration.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nresource :taggings\nresource :tags\n```\n\n----------------------------------------\n\nTITLE: Generating Avo Controller/Resource with Parent | Bash\nDESCRIPTION: These commands illustrate how to use the Rails generators provided by Avo (`avo:controller` and `avo:resource`) with the `--parent-controller` option. This allows you to specify the desired parent class for the newly generated controller or resource file, ensuring it inherits from your custom base controller or `Avo::BaseResourcesController`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_20\n\nLANGUAGE: Bash\nCODE:\n```\nrails g avo:controller city --parent-controller Avo::BaseResourcesController\n```\n\nLANGUAGE: Bash\nCODE:\n```\nrails g avo:resource city --parent-controller Avo::BaseResourcesController\n```\n\n----------------------------------------\n\nTITLE: Rendering Business Sponsors with Vue.js Components\nDESCRIPTION: This snippet defines a SponsorGroup component titled \"Business Sponsors\" which contains multiple Sponsor child components. Some Sponsor components render sponsors with associated links, images, alt text, and titles, while others are placeholders indicated by the blank prop. Dependencies include Vue.js environment where these components are registered. Inputs include sponsor attributes such as href, title, src, and alt to display sponsor information, and output is a rendered list of business sponsors visually structured as a group.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/sponsors_common.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<SponsorGroup title=\"Business Sponsors\">\n  <Sponsor :blank=\"true\" />\n  <Sponsor\n    href=\"https://www.equipetechnique.com?ref=avo\"\n    title=\"Equipe Technique – 10+ years seniority in software services ready to serve\"\n    src=\"/img/sponsors/ET-dark.jpeg\"\n    alt=\"Equipe Technique\"\n  />\n  <Sponsor :blank=\"true\" />\n</SponsorGroup>\n```\n\n----------------------------------------\n\nTITLE: Guidance for TailwindCSS 4 Breaking Changes\nDESCRIPTION: This section describes common breaking changes introduced in TailwindCSS 4, including renamed utilities like 'rounded-sm' to 'rounded-xs' and changes in default border color from 'gray-200' to 'currentColor'. It advises code updates and global search strategies to adapt utility classes accordingly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tailwind-4-migration.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Adding Edit View for Computed Field (Ruby)\nDESCRIPTION: This snippet addresses the absence of the `meta` field in the edit view by adding another field definition. The first line specifies that the field is only shown on edit. The second uses `JSON.pretty_generate` to format the field. Both fields use the `:code` field type, and specify `javascript` as the language. This resolves the display issue by making it editable, or otherwise, viewable on the edit view of the resource page.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/format-ruby-object-to-json.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, as: :code, language: 'javascript', only_on: :edit\nfield :meta, as: :code, language: 'javascript' do\n  if record.meta.present?\n    JSON.pretty_generate(record.meta.as_json)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Avo Actions (Ruby)\nDESCRIPTION: Demonstrates how to create a multi-step action process using `navigate_to_action`. The first action (`PreUpdate`) presents boolean fields allowing the user to select which fields they want to update. It then calls `navigate_to_action`, passing the selected field information as arguments to the second action (`Update`). The second action uses these arguments to dynamically display the relevant fields for updating the records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Actions::City::PreUpdate < Avo::BaseAction\n  self.name = \"Update\"\n\n  def fields\n    field :name, as: :boolean\n    field :population, as: :boolean\n  end\n\n  def handle(query:, fields:, **args)\n    navigate_to_action Avo::Actions::City::Update,\n      arguments: {\n        cities: query.map(&:id),\n        render_name: fields[:name],\n        render_population: fields[:population]\n      }\n  end\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Actions::City::Update < Avo::BaseAction\n  self.name = \"Update\"\n  self.visible = -> { false }\n\n  def fields\n    field :name, as: :text if arguments[:render_name]\n    field :population, as: :number if arguments[:render_population]\n  end\n\n  def handle(fields:, **args)\n    City.find(arguments[:cities]).each do |city|\n      city.update! fields\n    end\n\n    succeed \"City updated!\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Visibility Block Handling for Nil Model in Avo Ruby Resource Fields\nDESCRIPTION: Addresses a security update that changes how `visible` blocks are evaluated, now before model attributes are assigned. The snippet advises developers to safely handle cases where `resource.model` might be `nil` when submitting a creation form by using safe navigation (`&.`) to avoid errors.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# `resource.model` is nil when submitting the form on resource creation\nfield :name, as: :text, visible -> (resource: ) { resource.model.enabled? }\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Do this instead\nfield :name, as: :text, visible -> (resource: ) { resource.model&.enabled? }\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Avo Menu Sections in Ruby\nDESCRIPTION: Shows how to add icons to sidebar Sections in Avo menus using either local icons or Heroicons solid and outline versions. The icon option accepts a path string referencing the icon to display alongside the section title. This improves visual clarity and consistency throughout the app menus.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"Resources\", icon: \"heroicons/outline/academic-cap\" do\n  resource :course\nend\n\nsection \"Resources\", icon: \"heroicons/solid/finger-print\" do\n  resource :course\nend\n\nsection \"Resources\", icon: \"heroicons/outline/adjustments\" do\n  resource :course\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Password Input Field Using Ruby\nDESCRIPTION: This code snippet demonstrates how to use the `field` method to render an input element of type password in Ruby. The password field is shown by default only on the Edit and New views. The primary dependency is the Ruby environment with the context supporting the `field` method, commonly used in form rendering frameworks.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/password.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :password, as: :password\n```\n\n----------------------------------------\n\nTITLE: Disabling File Attachments in Avo Trix Field (Ruby)\nDESCRIPTION: Demonstrates how to disable the file attachment functionality for a Trix field in Avo. Setting the `attachments_disabled` option to `true` hides the attachment button (paperclip icon) from the Trix editor toolbar, preventing users from uploading files.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/trix.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :trix, attachments_disabled: true\n```\n\n----------------------------------------\n\nTITLE: Generating Action Link without a Resource Instance in Avo (Ruby)\nDESCRIPTION: This code snippet shows how to generate an action link in Avo without having access to an instantiated resource. It involves creating a new resource instance (with or without a record) and using it with the `link_arguments` method. This approach is useful when you want to trigger an action from a custom partial card on a dashboard without a resource instance available. The code assumes you have an Avo resource and action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/guides-and-tutorials.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\npath, data = Avo::Actions::City::Update.link_arguments(\n  resource: Avo::Resources::City.new(record: city)\n)\n\nlink_to \"Update city\", path, data: data\n```\n\n----------------------------------------\n\nTITLE: Adding Breadcrumbs to Custom Pages\nDESCRIPTION: Allows adding breadcrumbs within specific controller actions using `add_breadcrumb`, enhancing navigation for custom pages outside standard resource views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::ToolsController < Avo::ApplicationController\n  def custom_tool\n    add_breadcrumb \"Custom tool\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Avo at Custom Path (Ruby)\nDESCRIPTION: Example showing how to update a custom mounting path configuration in the Rails routes file for Avo 3.18.0 using the new mount_avo helper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  mount Avo::Engine, at: \"custom/path\" # [!code --]\n  mount_avo at: \"custom/path\" # [!code ++]\nend\n```\n\n----------------------------------------\n\nTITLE: Select condition mappings for dynamic filters - Ruby\nDESCRIPTION: This Ruby hash sets the available conditions for select-type filters in Avo's dynamic filtering feature. Conditions such as 'Is', 'Is not', 'Is null', and 'Is not null' are defined and inverted for internal use. This enables users to filter records with dropdown or badge fields effectively.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  is: \"Is\",\n  is_not: \"Is not\",\n  is_null: \"Is null\",\n  is_not_null: \"Is not null\",\n}.invert\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Field in Avo - Ruby\nDESCRIPTION: Defines the ProgressBarField Ruby class inheriting from Avo::Fields::BaseField. This snippet registers the new field type with Avo, enabling its use in admin resources. The constructor delegates arguments upstream; no additional options yet. Prerequisites: Avo gem, Rails.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProgressBarField < Avo::Fields::BaseField\n  def initialize(name, **args, &block)\n    super(name, **args, &block)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling ViewComponent Instrumentation in Rails Configuration - Ruby\nDESCRIPTION: This snippet demonstrates how to enable instrumentation for ViewComponent in a Rails application by setting the instrumentation_enabled flag to true in either the application.rb or development.rb configuration files. This enables Rails to collect performance data for ViewComponent renders. The configuration must be placed in one of the environment or main application configuration files. No external dependencies are required apart from ViewComponent itself.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/views-performance.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.view_component.instrumentation_enabled = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Switcher in Avo (After v2.3.0)\nDESCRIPTION: This Ruby code snippet shows how to configure the language switcher in the `avo.rb` initializer. The `profile_menu` configuration allows adding links to switch languages using the `set_locale` parameter.  The code is intended for Avo applications. The snippet adds links to switch between English and Portuguese.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/multilingual-content.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.profile_menu = -> {\n    link \"Switch to Portuguese\", path: \"?set_locale=pt-BR\"\n    link \"Switch to English\", path: \"?set_locale=en\"\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Translations in Avo YAML\nDESCRIPTION: Provides translations for an Avo resource label using a specific key in a YAML locale file (e.g., `avo.es.yml`). This example shows Spanish translations for the 'user' resource, including standard pluralization keys (`zero`, `one`, `other`) required by Rails' I18n for count-sensitive scenarios.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/i18n.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# avo.es.yml\nes:\n  avo:\n    dashboard: 'Dashboard'\n    # ... other translation keys\n    resource_translations:\n      user:\n        zero: 'usuarios'\n        one: 'usuario'\n        other: 'usuarios'\n```\n\n----------------------------------------\n\nTITLE: Implementing the Handle Method in Ruby Avo Actions\nDESCRIPTION: Example implementation of the handle method in an Avo action for toggling a record's inactive status. The method processes selected records and optionally sends notifications based on form field inputs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/actions/toggle_inactive.rb\nclass Avo::Actions::ToggleInactive < Avo::BaseAction\n  self.name = \"Toggle Inactive\"\n\n  def fields\n    field :notify_user, as: :boolean\n    field :message, as: :textarea\n  end\n\n  def handle(query:, fields:, current_user:, resource:, **args)\n    query.each do |record|\n      # Toggle the inactive status\n      record.update!(inactive: !record.inactive)\n\n      # Send notification if requested\n      if fields[:notify_user]\n        # Assuming there's a notify method\n        record.notify(fields[:message])\n      end\n    end\n\n    succeed \"Successfully toggled status for #{query.count}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Textarea Rows Option Using Ruby DSL\nDESCRIPTION: This snippet demonstrates how to set the number of visible rows for the textarea field in edit and new views, using the 'rows' option. The value must be an integer, with a default of 5 rows, controlling the height of the rendered textarea input box. Dependencies include the same Ruby DSL environment handling form field configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/textarea.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :textarea, rows: 5\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Avo link_to Menu Items in Ruby\nDESCRIPTION: Demonstrates adding icons to individual link_to menu items such as external links or connections. The icon parameter defines the icon name or path shown alongside the menu item text for enhanced UI experience.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nlink_to \"Avo\", \"https://avohq.io\", icon: \"globe\"\n```\n\n----------------------------------------\n\nTITLE: Using display_with_value for select - Ruby\nDESCRIPTION: This snippet shows how to set the `display_with_value` attribute on the `select` field in Avo using Ruby. It shows a sample resource setup that shows the stored value rather than labels.  This enables the user to easily see the selected value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/select.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project_resource.rb\nclass ProjectResource < Avo::BaseResource\n  field :type,\n    as: :select,\n    display_with_value: true\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Select field with multiple selection\nDESCRIPTION: This snippet showcases how to enable multiple selections in the `Select` field by setting the `multiple` option to `true`. This allows users to select more than one option from the list.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/select.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  field :categories,\n    as: :select,\n    multiple: true\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Example in Avo ApplicationController\nDESCRIPTION: Example of how the Avo ApplicationController should look after implementing HTTP Basic Authentication. Shows the controller class with the authentication method applied.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/basic-authentication.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::ApplicationController < ::ActionController::Base\n  http_basic_authenticate_with name: \"adrian\", password: \"password\"\n\n  # More methods here\nend\n```\n\n----------------------------------------\n\nTITLE: Method Notation for Setting HTML Attributes in Block - Ruby\nDESCRIPTION: Shows the method-based shorthand within the block notation for setting HTML attributes (`classes`, `data`) on a field wrapper. This approach is concise and enables hashing multiple attributes or values directly, maintaining clarity in complex field definitions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_skills,\n  as: :boolean,\n  html: -> do\n    edit do\n      wrapper do\n        classes(\"hidden\")\n        data({action: \"click->admin#do_something_admin\"})\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Field Wrapper with 'compact' and 'full_width' Options\nDESCRIPTION: Demonstrates usage of 'compact' to minimize space by removing the Extra area and 'full_width' to expand the Value area, suitable for fields like WYSIWYG editors or file uploads. Parameters are passed within helper calls to modify layout and sizing.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-wrappers.md#_snippet_3\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, compact: true do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, full_width: true do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Adding Style, Classes, and Data Attributes using Object Notation - Ruby\nDESCRIPTION: Demonstrates how to add `style`, `classes`, and `data` attributes to the field's wrapper element in the `edit` view using the object notation. `style` and `classes` accept strings, while `data` accepts a Hash.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/html.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    wrapper: {\n      style: \"background: red; text: white;\" # string\n      classes: \"absolute h-[41px] w-full\" # string\n      data: {\n        action: \"input->resource-edit#toggle\",\n        resource_edit_toggle_target_param: \"skills_tags_wrapper\",\n      } # Hash\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Map Card iFrame\nDESCRIPTION: HTML partial template that embeds a Google Maps iframe with responsive sizing within an Avo card, designed to fill the entire card space.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!-- app/views/avo/cards/_map_card.html.erb -->\n<iframe src=\"https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d17991.835132857846!2d-73.98926852562143!3d40.742050491245955!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sro!4v1647079626880!5m2!1sen!2sro\" width=\"100%\" height=\"100%\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Removing Value Argument from `format_using` Block in Avo Ruby Resource Fields\nDESCRIPTION: Shows the transition of `format_using` lambda blocks by dropping the explicit `value` argument in favor of an implicit one, aligning with updated Avo block conventions. The snippet illustrates the code before and after this API change, affecting text field formatting.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nfield :name, as: :text, format_using: ->(value) { value.upcase }\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# After\nfield :name, as: :text, format_using: -> { value.upcase }\n```\n\n----------------------------------------\n\nTITLE: Defining Badge Field with Options in Avo (Ruby)\nDESCRIPTION: This snippet demonstrates how to define a badge field in Avo using the `field` method. It maps custom values (e.g., `:discovery`, `:idea`) to badge types like `info`, `success`, `warning`, `danger`, and `neutral` using the `options` parameter. The options parameter is a Hash that has the state as the `key` and your configured values as `value`. The `value` param can be a symbol, string, or array of symbols or strings.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/badge.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :stage,\n  as: :badge,\n  options: {\n    info: [:discovery, :idea],\n    success: :done,\n    warning: 'on hold',\n    danger: :cancelled,\n    neutral: :drafting\n  } # The mapping of custom values to badge values.\n```\n\n----------------------------------------\n\nTITLE: Avo Action Silent Response\nDESCRIPTION: This code demonstrates the use of the `silent` response in an Avo action. It redirects the user to `/admin/some-tool` and prevents any notification from being displayed after the action is executed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(**args)\n  # Demo handle action\n\n  redirect_to \"/admin/some-tool\"\n  silent\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing KeyValue field Labels in Avo Resource (Ruby)\nDESCRIPTION: This snippet demonstrates how to customize the default labels displayed in the KeyValue field UI for the key header, value header, add row button tooltip, and delete row button tooltip using the `key_label`, `value_label`, `action_text`, and `delete_text` options respectively.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/key_value.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, # The database field ID\n  as: :key_value, # The field type.\n  key_label: \"Meta key\", # Custom value for key header. Defaults to 'Key'.\n  value_label: \"Meta value\", # Custom value for value header. Defaults to 'Value'.\n  action_text: \"New item\", # Custom value for button to add a row. Defaults to 'Add'.\n  delete_text: \"Remove item\" # Custom value for button to delete a row. Defaults to 'Delete'.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy and Raising Error - Ruby\nDESCRIPTION: The `policy!` method receives a user and a record and returns the policy to use. It raises a `NoPolicyError` if no policy is found. It depends on the Pundit gem and handles `Pundit::NotDefinedError`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\ndef policy!(user, record)\n  Pundit.policy!(user, record)\nrescue Pundit::NotDefinedError => error\n  raise NoPolicyError.new error.message\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Rails App with Avo Pro - Bash\nDESCRIPTION: This snippet shows how to create a new Rails application with Avo Pro installed via a Rails template. The command downloads the Avo Pro template and sets up the project (APP_NAME) accordingly. It depends on Ruby, Rails, an active internet connection, and access to the Avo Pro template. Replace APP_NAME with your project name. Expected output is a Rails app with Avo Pro included; further manual configuration may be necessary for advanced features.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/common/technical-support.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrails new -m https://avo.cool/new-pro.rb APP_NAME\n```\n\n----------------------------------------\n\nTITLE: Switching Tags Field to Select Mode - Ruby\nDESCRIPTION: Shows how to alter the tags field so it returns a single value instead of an array, using 'mode: :select'. Useful for scenarios where only one option should be chosen, such as selecting a unique entity instead of multiple tags.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  mode: :select\n```\n\n----------------------------------------\n\nTITLE: Ensure Authentication for Avo Users\nDESCRIPTION: Modifies Avo's `ApplicationController` to include the `Authentication` concern and prepend the `require_authentication` action, ensuring only authenticated users can access Avo. It also delegates `new_session_path` to `main_app` for proper routing within the Avo context.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rails-authentication-scaffold.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/avo/application_controller.rb\nmodule Avo\n  class ApplicationController < BaseApplicationController\n    include Authentication\n    delegate :new_session_path, to: :main_app\n\n    # we are prepending the action to ensure it will be fired very early on in the request lifecycle\n    prepend_before_action :require_authentication\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Search Results\nDESCRIPTION: Shows how to add descriptions to search results, providing more context about each result (requires Avo Pro license).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(name_cont: params[:q], m: \"or\").result(distinct: false) },\n    item:  -> do\n      {\n        title: \"[#{record.id}]#{record.name}\",\n        description: record.truncated_body\n      }\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Avo Action Cancel Button Label (Ruby)\nDESCRIPTION: Customizes the text on the negative action button within the confirmation modal. Can be a static string or a dynamic block using the execution context (`resource.record`) to provide context-aware labeling.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/customization.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.cancel_button_label = \"Cancel release\"\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.cancel_button_label = -> {\n    if resource.record.present?\n      \"Cancel release on #{resource.record.name}\"\n    else\n      \"Cancel release\"\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Default Actions Configuration for Audit Logging - Ruby\nDESCRIPTION: This Ruby hash illustrates the default configuration for the 'actions' key under Avo's audit logging functionality. Each action (such as 'index', 'create', 'edit', 'show', etc.) is set to true by default, indicating that audit logs will be recorded for all listed actions unless explicitly overridden. To selectively disable logging for certain actions, override this configuration in the corresponding resource class. No dependencies beyond Ruby syntax are required for understanding this structure.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  index: true,\n  new: true,\n  create: true,\n  edit: true,\n  update: true,\n  show: true,\n  destroy: true,\n  attach: true,\n  detach: true,\n  handle: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic App Name Using Ruby Block in Avo\nDESCRIPTION: This snippet demonstrates how to set the application name dynamically via a callable block, allowing integration with I18n translations or other runtime evaluations. It requires Avo configuration within a Rails initializer and depends on the `config.app_name` attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.app_name = -> { I18n.t \"app_name\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Dynamic Value Fetching in Ruby\nDESCRIPTION: Shows how to fetch tag suggestions dynamically from an API endpoint.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  fetch_values_from: \"/avo/resources/skills/skills_for_user\"\n```\n\n----------------------------------------\n\nTITLE: Using prefixed_ids Gem in Avo Model (Ruby)\nDESCRIPTION: This example shows how to use the `prefixed_ids` gem with Avo.  No custom Avo configuration is required, only the `has_prefix_id` declaration in the model is needed. Avo automatically uses the prefixed ID when fetching the record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Course < ApplicationRecord\n  has_prefix_id :course\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Media Library for Markdown Field (Ruby)\nDESCRIPTION: Shows how to configure the `markdown` field in an Avo resource to disable the \"Attach from gallery\" option. By setting the `media_library` option to `false`, users will not see the button to insert files from the Media Library into the markdown content.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/markdown.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :body, as: :markdown, media_library: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Discreet Information Hash in Avo (Ruby)\nDESCRIPTION: Shows how to configure a single custom discreet information item using a hash. This example sets a dynamic tooltip and icon, and attempts to set a dynamic URL.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/discreet-information.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = {\n    tooltip: -> { \"Product is #{record.published_at ? \"published\" : \"draft\"}\" },\n    icon: -> { \"heroicons/outline/#{record.published_at ? \"eye\" : \"eye-slash\"}\" }\n    url: -> { main_app.post_path record }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Field Wrapper with Custom Style Attribute for Show/Edit - Avo (ERB)\nDESCRIPTION: This snippet passes custom CSS styles through the `style` parameter to the `field_wrapper`, allowing direct visual tweaks such as background color. Includes all general arguments and renders the Boolean check component. Dependencies involve `field_wrapper_args` and the Boolean check component.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_15\n\nLANGUAGE: erb\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, style: \"background: red\" do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Avo Resource Class Mapping to Different Model Class - Ruby\nDESCRIPTION: Defines an Avo resource called 'MiniPost' that explicitly configures the model it represents as the existing 'Post' model by setting 'self.model_class = \"Post\"'. This supports scenarios where resource naming is independent from the underlying model and facilitates flexible resource structuring in the admin UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resources.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::MiniPost < Avo::BaseResource\n  self.model_class = \"Post\"\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Direct Upload for Files in AvoHQ (Ruby)\nDESCRIPTION: Enables direct uploading of files from the user's browser directly to a configured cloud storage provider (like S3, GCS, etc.), bypassing the AvoHQ server. This is useful for large files to reduce server load. Requires an Avo Pro license. Defaults to `false`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/file_options_common.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :cover_video, as: :file, direct_upload: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sorting Logic in Avo (Ruby)\nDESCRIPTION: Demonstrates defining custom sorting behavior for computed fields or associations using a block passed to the `sortable` option. The block receives the ActiveRecord `query` and sorting `direction` and must return the modified query.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  field :is_writer,\n    as: :text,\n    sortable: -> {\n      # Order by something else completely, just to make a test case that clearly and reliably does what we want.\n      query.order(id: direction)\n    },\n    hide_on: :edit do\n      record.posts.to_a.size > 0 ? \"yes\" : \"no\"\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Pre-made Stimulus Methods: `resource-edit#disable` in Ruby\nDESCRIPTION: Configures a stimulus action to disable specific fields or wrappers via the `disable` method, triggered through data attributes. Useful for enforcing form rules or dynamically adjusting available inputs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :has_skills, as: :boolean, html: {\n  edit: {\n    input: {\n      data: {\n        action: \"input->resource-edit#disable\",\n        resource_edit_disable_target_param: \"countrySelectInput\"\n      }\n    }\n  }\n}\nfield :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Using Docker Build Secrets with Kamal\nDESCRIPTION: Presents a Dockerfile snippet specifically for Kamal deployments that utilizes Docker build secrets (`--mount=type=secret`) to securely access the `BUNDLE_PACKAGER__DEV` value during `bundle install` without embedding it in the image.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Install application gems\nCOPY Gemfile Gemfile.lock ./\n\nRUN --mount=type=secret,id=BUNDLE_PACKAGER__DEV BUNDLE_PACKAGER__DEV=$(cat /run/secrets/BUNDLE_PACKAGER__DEV) bundle install  && \\\n    rm -rf ~/.bundle/ \"${BUNDLE_PATH}\"/ruby/*/cache \"${BUNDLE_PATH}\"/ruby/*/bundler/gems/*/.git && \\\n    bundle exec bootsnap precompile --gemfile\n```\n\n----------------------------------------\n\nTITLE: Controlling Card Visibility from an Avo Dashboard Definition in Ruby\nDESCRIPTION: Shows how to control a card's visibility directly from the dashboard class definition by passing the `visible` option when declaring the card. A lambda can be used here as well to implement conditional visibility logic based on context available at the dashboard level.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Dashy < Avo::Dashboards::BaseDashboard\n  self.name = \"Dashy\"\n\n  card UsersCount, visible: -> { true }\nend\n```\n\n----------------------------------------\n\nTITLE: Making Avo Field Link to Resource\nDESCRIPTION: Shows how to apply the `link_to_resource: true` option to specific field types (`Id`, `Text`, `Gravatar`) within an Avo resource definition. This transforms the field's cell in the Index view table into a direct link to the corresponding resource's Show page, improving navigation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_23\n\nLANGUAGE: Ruby\nCODE:\n```\n# for id field\nfield :id, as: :id, link_to_resource: true\n\n# for text field\nfield :name, as: :text, link_to_resource: true\n\n# for gravatar field\nfield :email, as: :gravatar, link_to_resource: true\n```\n\n----------------------------------------\n\nTITLE: Customizing Create Failure Handling in Avo Controller\nDESCRIPTION: Shows how to customize the controller response when record creation fails by overriding create_fail_action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_fail_action\n  respond_to do |format|\n    flash.now[:error] = create_fail_message\n    format.html { render :new, status: :unprocessable_entity }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Remove tabs_style Option from tabs Declaration in Avo (Ruby)\nDESCRIPTION: Shows the simplification of tab declarations in Avo. The `tabs_style: :pills` option is deprecated and should be removed as Avo now uses a single, default tab style. The example contrasts the old declaration with the new, cleaner syntax.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-2-avo-3-upgrade.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\ntabs tabs_style: :pills do\n  # tabs here\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# After\ntabs do\n  # tabs here\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Reloadable Feature with Boolean (Ruby)\nDESCRIPTION: Demonstrates how to enable the reloadable feature for an association field (like `:reviews`) by setting the `reloadable` option directly to `true`. This configuration adds a reload icon next to the association title in the UI, allowing users to refresh that specific Turbo Frame.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/reloadable.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :reviews, as: :{{ $frontmatter.field_type }}, reloadable: true\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Options in Discovery (Ruby)\nDESCRIPTION: This snippet demonstrates the application of custom options to discovered fields using `discover_columns` and `discover_associations`. The example provides options such as `help` and `searchable` which are applied to all discovered fields and associations.  This promotes consistency across the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-discovery.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  # ...\n\n  def fields\n    discover_columns help: \"Automatically discovered fields\"\n    discover_associations searchable: false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Context to Access Current Account\nDESCRIPTION: Sets up Avo's configuration to include the current account in its context hash, making it accessible throughout the frontend components. It combines current user, request parameters, and the globally available Current.account for comprehensive multitenancy support.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/multitenancy.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.set_context do\n    {\n      foo: 'bar',\n      user: current_user,\n      params: request.params,\n      account: Current.account\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Edit Input Target in Avo Field\nDESCRIPTION: This code snippet configures an Avo field to use a Stimulus.js target for the input element of the edit view. It sets up the `name` field as a text input and specifies that the edit view should utilize an input target for customization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    input: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Avo View Using Symbol Comparator\nDESCRIPTION: This code snippet shows how to check the current Avo view by comparing the `view` object directly with symbols such as `:show`, `:index`, `:edit`, and `:new`.  The `view` object is an instance of the `Avo::ViewInquirer` class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/views.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nif view == :show\n  # Code for the \"show\" view\nelsif view == :index\n  # Code for the \"index\" view\nelsif view == :edit\n  # Code for the \"edit\" view\nelsif view == :new\n  # Code for the \"new\" view\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Outline Depth in VitePress (Frontmatter/YAML)\nDESCRIPTION: Illustrates how to control the depth of headings displayed in the 'On this page' sidebar using the `outline` property in VitePress page frontmatter. Setting `[2,3]` includes H2 and H3 headings, while `deep` includes all heading levels from H2 to H6.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/readme.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\noutline: [2,3] # shows the h2's and h3's\noutline: deep # shows the h2's all the way to h6\n```\n\n----------------------------------------\n\nTITLE: Adding Static Classes and Data Attributes using Method-Style Block Notation - Ruby\nDESCRIPTION: Presents an alternative method-style syntax within the block notation for setting `classes` and `data` attributes when the values are static. This provides a slightly more concise way compared to nested blocks.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/html.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_skills,\n  as: :boolean,\n  html: -> do\n    edit do\n      wrapper do\n        classes(\"hidden\")\n        data({action: \"click->admin#do_something_admin\"})\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Setting Locale in Avo Initializer - Ruby\nDESCRIPTION: This Ruby initializer configures the default locale for Avo installations as of v2.11. You can set the 'config.locale' option to any valid locale (e.g., ':en') or leave it as nil to use the app's existing locale configuration. Place inside 'Avo.configure' block in 'config/initializers/avo.rb'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.locale = :en # default is nil\nend\n```\n\n----------------------------------------\n\nTITLE: Forced Disabling of Wrapper Element in Ruby\nDESCRIPTION: Targets the wrapper element of a field for disabling, especially useful when a field employs multiple inputs like searchable polymorphic associations. Disabling the wrapper ensures all contained inputs are disabled.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/stimulus-integration.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :has_skills, as: :boolean, html: {\n  edit: {\n    input: {\n      data: {\n        action: \"input->resource-edit#disable\",\n        resource_edit_disable_target_param: \"countrySelectWrapper\"\n      }\n    }\n  }\n}\nfield :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Host to Exclude Avo Paths from CDN in Ruby\nDESCRIPTION: This code configures Rails to selectively use CDN for assets, excluding files under the '/avo' path from being served through the CDN. It uses a Proc to check each asset source path.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-asset-pipeline.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_controller.asset_host = Proc.new do |source|\n  # Exclude assets under the \"/avo\" path from CDN\n  next nil if source.start_with?(\"/avo\")\n\n  # Set the general asset host (CDN) using an environment variable\n  ENV.fetch(\"ASSET_HOST\")\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Arguments in Avo Resources in Ruby\nDESCRIPTION: Shows how to pass arguments to filters from a resource configuration to customize filter behavior. The example passes a case_insensitive flag to a NameFilter to control how name matching is performed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Fish < Avo::BaseResource\n  self.title = :name\n\n  def fields\n    field :id, as: :id\n    field :name, as: :text\n    field :user, as: :belongs_to\n    field :type, as: :text, hide_on: :forms\n  end\n\n  def filters\n    filter Avo::Filters::NameFilter, arguments: {\n      case_insensitive: true\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Avo Advanced Gems in Ruby\nDESCRIPTION: Specifies the Avo Advanced tier dependencies in a Ruby Gemfile. It requires the basic `avo` gem (>= 3.2.1) and the `avo-advanced` gem (>= 3.2.0), which must be sourced from the private packager.dev repository. Requires access to the specified source for the highest tier.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/avo_in_gemfile.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\ngem \"avo\", \">= 3.2.1\"\ngem \"avo-advanced\", \">= 3.2.0\", source: \"https://packager.dev/avo-hq/\"\n```\n\n----------------------------------------\n\nTITLE: Declare Countries Gem Dependency in Gemfile (Ruby)\nDESCRIPTION: Requires the 'countries' gem, which provides country data needed by the Avo Country field. This gem must be added to your project's `Gemfile` and installed using Bundler. It is a mandatory dependency for using the Avo Country field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/country.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# All sorts of useful information about every country packaged as convenient little country objects.\ngem \"countries\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Empty Message for Course City Filter\nDESCRIPTION: Example of customizing the empty message displayed when no filter options are available. This helps guide users to first select a country to see city options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseCityFilter < Avo::Filters::BooleanFilter\n  self.name = \"Course city filter\"\n  self.empty_message = \"Please select a country to view options.\"\n\n  def apply(request, query, values)\n    query.where(city: values.select { |city, selected| selected }.keys)\n  end\n\n  def options\n    if countries.present?\n      []\n    else\n      [\"Los Angeles\", \"New York\"]\n    end\n  end\n\n  private\n\n  def countries\n    # logic to fetch the countries\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Breadcrumbs in Avo\nDESCRIPTION: This snippet disables breadcrumb navigation in the Avo interface using `config.display_breadcrumbs = false`. It’s useful when you want a cleaner UI for custom pages or simplified navigation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.display_breadcrumbs = false\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Location Field Implementation in Ruby\nDESCRIPTION: Defines a basic location field named 'coordinates' in an Avo resource. This setup expects coordinates to be stored in a single database column as 'latitude,longitude'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/location.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :coordinates, as: :location\n```\n\n----------------------------------------\n\nTITLE: Positioning Resource Controls on the Left Side\nDESCRIPTION: This snippet moves resource action buttons from the default right to the left side in the index view, using `config.resource_controls_placement`. It enables better UI layouts when many columns are present.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.resource_controls_placement = :left\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Photo Source via Symbol in Avo Using Ruby\nDESCRIPTION: Sets the profile photo source using a symbol that directly calls the profile_photo attribute on the record. This is a simpler alternative to using a block when the source should always correspond to a record field named profile_photo. It requires the record to respond to this attribute.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cover-and-profile-photos.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nself.profile_photo = {\n  source: :profile_photo # this will run `record.profile_photo`\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating has_one_attached with Avo Resource (Ruby)\nDESCRIPTION: This code demonstrates how to integrate a `has_one_attached` association in a Rails model with an Avo resource. It defines a `Post` model with a `has_one_attached :cover_photo` association, then configures the `PostResource` to include a `cover_photo_attachment` field as a `has_one` association. Make sure to use the `_attachment` suffix for the field name.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/use-active-storage-attachments-as-associations.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  has_one_attached :cover_photo\nend\n\nclass PostResource < Avo::BaseResource\n  # Please make sure you use the _attachment suffix.\n  # So the :cover_photo key from the model file becomes :cover_photo_attachment on the resource file.\n  field :cover_photo_attachment, as: :has_one\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Avo's llms.txt File via cURL\nDESCRIPTION: This bash command downloads the Avo llms.txt file from the specified URL and saves it to the local project directory, enabling Avo code generation capabilities within VSCode.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/vscode.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#fetch https://avohq.io/llms.txt\n```\n\n----------------------------------------\n\nTITLE: Updating status field behavior in Avo for Ruby\nDESCRIPTION: This snippet demonstrates the change in the status field API where previously only 'failed' and 'loading' states were defined and everything else was 'success'. Now the API requires explicit 'failed', 'loading', and 'success' states, with all other states defaulting to 'neutral'. The example shows before and after usage illustrating addition of 'success_when' option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-2-avo-3-upgrade.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nfield :status,\n  as: :status,\n  failed_when: :failed,\n  loading_when: :loading\n\n# After\nfield :status,\n  as: :status,\n  failed_when: :failed,\n  loading_when: :loading\n  success_when: :deployed # specify the success state\n```\n\n----------------------------------------\n\nTITLE: Displaying Record ID Discreetly in Avo (Ruby)\nDESCRIPTION: Configures the `discreet_information` option to simply display the resource's ID next to the title. Setting the value to `:id` adds the ID directly.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/discreet-information.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = :id\n\n  # fields and other resource configuration\nend\n```\n\n----------------------------------------\n\nTITLE: Generating migrations for avo_meta schemas\nDESCRIPTION: Creates the necessary database migrations to support storing meta schemas for each resource; should be followed by running database migrations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-meta.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails avo_meta:install:migrations\n```\n\n----------------------------------------\n\nTITLE: Extending Array Class for API Data Compatibility in Avo\nDESCRIPTION: Adds a limit method to the Array class to make it compatible with ActiveRecord-like query operations used by Avo, enhancing the compatibility of the REST API integration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/rest-api-integration.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Array\n  def limit(upto)\n    take(upto)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Update Failure Handling in Avo Controller\nDESCRIPTION: Shows how to customize the controller response when record update fails by overriding update_fail_action.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_fail_action\n  respond_to do |format|\n    flash.now[:error] = update_fail_message\n    format.html { render :edit, status: :unprocessable_entity }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Collapsed State for Sections in Avo Menu\nDESCRIPTION: Example of setting the default collapsed state for a section in the Avo menu. The collapsed option determines whether the section starts collapsed by default.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"Resources\", icon: \"resources\", collapsable: true, collapsed: true do\n  resource :course\nend\n```\n\n----------------------------------------\n\nTITLE: Placing tools before fields using main_panel\nDESCRIPTION: Demonstrates positioning tools before fields by using the main_panel component. This allows for custom ordering of UI elements.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/release-notes.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmain_panel do\n  tool\n  # fields follow\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Menu Group Avo Menu Ruby\nDESCRIPTION: Describes how to define a smaller subcategory or group within a section or another group in the Avo menu using the `group` helper. It shows setting the group's title and nesting other menu items like `resource` within its block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ngroup \"Blog\" do\n  resource :posts\n  resource :categories\n  resource :comments\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring full paths for nested routing setup\nDESCRIPTION: Sets `home_path` and breadcrumbs with full nested paths to ensure correct links when Avo is mounted under a nested route.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.home_path = \"/uk/admin/dashboard\"\n\n  config.set_initial_breadcrumbs do\n    add_breadcrumb \"Dashboard\", \"/uk/admin/dashboard\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Find Method with FriendlyId Gem (Ruby)\nDESCRIPTION: This code demonstrates how to integrate the `friendly_id` gem with Avo, customizing how Avo finds records. The `find_record_method` now uses `query.friendly.find id` to leverage FriendlyId's slug-based lookups.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.find_record_method = -> {\n    if id.is_a?(Array)\n      query.where(slug: id)\n    else\n      # We have to add .friendly to the query\n      query.friendly.find id\n    end\n  }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  extend FriendlyId\n\n  friendly_id :name, use: :slugged\nend\n```\n\n----------------------------------------\n\nTITLE: Controlling Card Visibility from Parent Class in Ruby\nDESCRIPTION: This snippet illustrates how to control card visibility directly from the parent class, such as a dashboard or resource, in Avo. The `visible` option is used within the `card` method to conditionally display the card based on a boolean value or a block.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/cards.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::Dashy < Avo::Dashboards::BaseDashboard\n  def cards\n    card Avo::Cards::UsersCount, visible: -> { true }\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def cards\n    card Avo::Cards::UsersCount, visible: -> { true }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Avo Array Resource (Bash)\nDESCRIPTION: This command generates an Avo resource specifically for an array field.  It is a prerequisite for utilizing the `array` field functionality in the Avo framework, setting up the necessary structure for proper display and management of array data.  The command takes the resource name and the `--array` flag to create the array resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/array.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrails generate avo:resource Attendee --array\n```\n\n----------------------------------------\n\nTITLE: Configuring File Accept Type in AvoHQ (Ruby)\nDESCRIPTION: Configures an AvoHQ file field to accept only specific file types. The `accept` option takes a string corresponding to a MIME type pattern or a file extension. It restricts which files the browser's file picker will allow the user to select. Defaults to `nil`, accepting all file types.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/file_options_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :cover_video, as: :file, accept: \"image/*\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Avo Gem Version for TailwindCSS 4 Migration in Gemfile\nDESCRIPTION: This snippet demonstrates how to lock the Avo gem to a specific patch version with TailwindCSS 4 support, such as '3.18.x.tw4', within your application's Gemfile for different tiers (Community, Pro, Advanced). It also mentions the lock for `avo-rhino_field` compatibility.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tailwind-4-migration.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ngem \"avo\", \"3.18.x.tw4\"  # For Community, Pro, or Advanced tiers\n```\n\nLANGUAGE: Ruby\nCODE:\n```\ngem \"avo-rhino_field\", \"0.0.12.tw4\"  # Locking for compatibility\n```\n\n----------------------------------------\n\nTITLE: Defining a Code Field with Theme, Language, and Styling in Ruby\nDESCRIPTION: This Ruby code snippet shows how to create a custom code editor field using the `field` method with specific options for theme and language, leveraging the CodeMirror package. It demonstrates the syntax for configuring the field with a Dracula theme and CSS language highlighting.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/code.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :custom_css, as: :code, theme: 'dracula', language: 'css'\n```\n\n----------------------------------------\n\nTITLE: Installing Avo Gems in Ruby Gemfile\nDESCRIPTION: This snippet shows how to add Avo gems to a Gemfile based on different subscription tiers. It includes options for Avo Community (free), Avo Pro, and Avo Advanced tiers, each requiring different gem configurations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/avo_in_gemfile.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Add one of the following in your Gemfile depending on the tier you are on.\n\n# Avo Community\ngem \"avo\", \">= 3.2.1\"\n\n# Avo Pro\ngem \"avo\", \">= 3.2.1\"\ngem \"avo-pro\", \">= 3.2.0\", source: \"https://packager.dev/avo-hq/\"\n\n# Avo Advanced\ngem \"avo\", \">= 3.2.1\"\ngem \"avo-advanced\", \">= 3.2.0\", source: \"https://packager.dev/avo-hq/\"\n```\n\n----------------------------------------\n\nTITLE: Toggle Fields Controller with Stimulus\nDESCRIPTION: This JavaScript code defines a Stimulus.js controller named `toggle-fields` that toggles the visibility of a target element. The `toggleSkills` method toggles the `hidden` class on the `skillsTagsWrapperTarget` element, allowing for dynamic showing and hiding of the skills field based on the `has_skills` boolean field in Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// toggle_fields_controller.js\nimport { Controller } from \"@hotwired/stimulus\";\n\nexport default class extends Controller {\n  static targets = [\"skillsTagsWrapper\"]; // use the target Avo prepared for you\n\n  toggleSkills() {\n    this.skillsTagsWrapperTarget.classList.toggle(\"hidden\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Associations Lookup List Limit in Avo (Ruby)\nDESCRIPTION: Configures the maximum number of records fetched for association dropdowns using `config.associations_lookup_list_limit` in the Avo initializer. This example sets the limit to 1000 records to prevent potential performance issues with large datasets.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_30\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.associations_lookup_list_limit = 1000\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Display Value - Ruby\nDESCRIPTION: This Ruby snippet shows how to configure the Avo `Select` field to display the actual database value (`display_value: true`) rather than the label defined in the options hash or enum. This setting is useful when the stored value is more meaningful in the UI.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/select.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  field :type,\n    as: :select,\n    display_value: true\nend\n```\n\n----------------------------------------\n\nTITLE: Registering an Avo Plugin in engine.rb\nDESCRIPTION: Shows how to register a plugin with Avo and mount its engine. The plugin registers itself with Avo's plugin manager and specifies a mounting point for the engine.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/plugins.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/avo/feed_view/engine.rb\nmodule Avo\n  module FeedView\n    class Engine < ::Rails::Engine\n      isolate_namespace Avo::FeedView\n\n      initializer \"avo-feed-view.init\" do\n        # Avo will run this hook on boot time\n        ActiveSupport.on_load(:avo_boot) do\n          # Register the plugin\n          Avo.plugin_manager.register :feed_view\n\n          # Register the mounting point\n          Avo.plugin_manager.mount_engine Avo::FeedView::Engine, at: \"/feed_view\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing DateTime Filter with Picker Options in Ruby\nDESCRIPTION: Shows how to customize a DateTime filter with flatpickr options to provide a specific configuration for time selection in increments of 3 minutes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nclass Avo::Filters::StartingAt < Avo::Filters::DateTimeFilter\n  self.name = \"The starting at filter\"\n  self.button_label = \"Filter by start time\"\n  self.empty_message = \"Search by start time\"\n  self.type = :time\n  self.mode = :single\n\n  def picker_options(value)\n    super.merge({\n      minuteIncrement: 3\n    })\n  end\n\n  def apply(request, query, value)\n    query.where(\"to_char(starting_at, 'HH24:MI:SS') = ?\", value)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Markdown Field in Avo Admin Framework - Ruby\nDESCRIPTION: Defines a Markdown field named `body` for a resource in the Avo admin interface, using the default markdown editor based on Marksmith. This snippet assumes the required gems `marksmith` and `commonmarker` are included in the Gemfile for proper functionality.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/markdown.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :body, as: :markdown\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Configuration with Ruby\nDESCRIPTION: Ruby methods for managing locale settings in an Avo application. The set_default_locale method changes the locale for the entire app, while set_force_locale temporarily sets the locale for a single request.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/multilingual-content.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef set_default_locale\n  I18n.locale = params[:set_locale] || I18n.default_locale\n\n  I18n.default_locale = I18n.locale\nend\n\n# Temporary set the locale\ndef set_force_locale\n  if params[:force_locale].present?\n    initial_locale = I18n.locale.to_s.dup\n    I18n.locale = params[:force_locale]\n    yield\n    I18n.locale = initial_locale\n  else\n    yield\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Tabs Style on Specific Tabs (Ruby)\nDESCRIPTION: This snippet demonstrates how to set the tabs style to pills only for specific tab groups. By using the `style: :pills` option in the `tabs` block, only those tabs will be displayed as pills, while others retain the default style.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/tabs.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ntabs style: :pills do\n  # tabs go here\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Model without Avo Resource\nDESCRIPTION: This command generates a Rails model named 'car' with attributes 'make' and 'kms' without creating a corresponding Avo resource. This is useful when you want to define the model but do not need an admin interface for it.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate model car make:string kms:integer --skip-avo-resource\n```\n\n----------------------------------------\n\nTITLE: Enabling Click Row to View Record in Avo (Ruby)\nDESCRIPTION: Enables the feature where clicking anywhere on a table row navigates to the record's Show view by setting `config.click_row_to_view_record = true` in the Avo initializer (`config/initializers/avo.rb`). Note potential side effects due to JavaScript enhancement.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_29\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.click_row_to_view_record = true\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Location Field with Default Coordinates in Ruby\nDESCRIPTION: This snippet demonstrates how to define a Location field in Avo that displays a map based on plain text coordinates stored in a single database column, formatted as 'latitude,longitude'. It requires the 'mapkick-rb' gem and environment variable 'MAPBOX_ACCESS_TOKEN'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/location.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :coordinates, as: :location\n```\n\n----------------------------------------\n\nTITLE: Avo Resource Auto-generated - Car.rb\nDESCRIPTION: This Ruby code defines an automatically generated Avo resource for the `car` model. It includes basic configuration with an `id`, `make`, and `mileage` fields. The `includes` array is used for eager loading of associated records or resources, and `self.search` can be used for customized search configurations. The `fields` method defines the UI elements available for this model within the Avo admin panel.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/car.rb\nclass Avo::Resources::Car < Avo::BaseResource\n  self.includes = []\n  # self.search = {\n  #   query: -> { query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false) }\n  # }\n\n  def fields\n    field :id, as: :id\n    field :make, as: :text\n    field :mileage, as: :number\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Eject and Customize Kanban Item Card Component\nDESCRIPTION: Use the `avo:eject --component` generator to copy the default Kanban item component template to your application, allowing for customization of how each item card is displayed on the board. The example shows how to display the record's name using ERB.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/kanban-boards.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nrails generate avo:eject --component Avo::Kanban::Items::ItemComponent\n```\n\nLANGUAGE: HTML (ERB)\nCODE:\n```\n<%= item.record.name %>\n```\n\n----------------------------------------\n\nTITLE: Override update_fail_action - Ruby\nDESCRIPTION: This snippet demonstrates overriding the `update_fail_action` method. It defines the behavior when a resource update fails. The user is redirected to the edit view with error messages.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_fail_action\n  respond_to do |format|\n    flash.now[:error] = update_fail_message\n    format.html { render :edit, status: :unprocessable_entity }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an Image File Field in Avo (Ruby)\nDESCRIPTION: Demonstrates how to define a field named `avatar` as a file input specifically for images within an Avo resource. It utilizes the application's configured Active Storage service for handling the upload and sets the `is_image` option to `true`, likely for preview or validation purposes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/file.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :avatar, as: :file, is_image: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Direct Upload to Cloud Providers in Ruby\nDESCRIPTION: Configures a file field to use direct upload functionality, which uploads files directly to your cloud provider instead of through the server. This is a pro license feature that helps prevent server overload when handling large files.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/file_options_common.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :cover_video, as: :file, direct_upload: true\n```\n\n----------------------------------------\n\nTITLE: Defining Attachment Action Shortcuts in Pundit Policies Using Ruby\nDESCRIPTION: This snippet shows repetitive Ruby methods that define permissions for attachment actions in Pundit policies by delegating each action to the update? check. It serves as an example of boilerplate code that the subsequent approach intends to eliminate.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/attachment-policy-extension-for-pundit.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ndef upload_logo?\n  update?\nend\n\ndef delete_logo?\n  update?\nend\n\ndef download_logo?\n  update?\nend\n```\n\n----------------------------------------\n\nTITLE: Adding labels to dividers for organization in Avo (Ruby)\nDESCRIPTION: Shows how to assign descriptive labels to dividers, further organizing actions into categorized sections for clarity in the dropdown menu.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/registration.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/user.rb\nclass Avo::Resources::User < Avo::BaseResource\n  def actions\n    action Avo::Actions::ActivateUser\n    divider label: \"Communication\"\n    action Avo::Actions::SendWelcomeEmail\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using All Helpers Together in Avo Menu\nDESCRIPTION: Example showing how to use all the helper methods (all_dashboards, all_resources, all_tools) together in an Avo menu to provide a comprehensive navigation structure.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"App\", icon: \"heroicons/outline/beaker\" do\n  group \"Dashboards\", icon: \"dashboards\" do\n    all_dashboards\n  end\n\n  group \"Resources\", icon: \"resources\" do\n    all_resources\n  end\n\n  group \"All tools\", icon: \"tools\" do\n    all_tools\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Map View as Default Index View in Avo Resource Using Ruby\nDESCRIPTION: This Ruby snippet sets the map view as the default method for displaying resource records on the index page by assigning `:map` to the `default_view_type` class attribute. It simplifies user interaction by automatically showing the map view without requiring manual toggling. Dependencies mirror those of enabling the map view, including mapkick gem and environment setup. Inputs are the resource's geographic data, and the output is a default map-based index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/map-view.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  self.default_view_type = :map\nend\n```\n\n----------------------------------------\n\nTITLE: Customize Avo sign-out path helper name\nDESCRIPTION: Set `sign_out_path_name` to the specific symbol of the sign-out path helper your application uses, such as `<code>:logout_path</code></code>. This setting takes precedence over `current_user_resource_name` and allows complete control over the sign-out link generation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authentication.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.sign_out_path_name = :logout_path\nend\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Solid Cache Store in Rails Environment in Ruby\nDESCRIPTION: Shows how to configure Solid Cache as the default cache store for a specific Rails environment, typically in a file like `config/environments/production.rb`. This is done by setting the `config.cache_store` option to `:solid_cache_store`. Requires the Solid Cache gem to be installed and its migrations run.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cache.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/production.rb\n\nconfig.cache_store = :solid_cache_store\n```\n\n----------------------------------------\n\nTITLE: Configuring Accepted File Types in Ruby Form Fields\nDESCRIPTION: Sets the accepted file types for a file input using the 'accept' option. Requires a Ruby on Rails environment with form field configuration capabilities. The 'accept' parameter restricts the input to specified file types (e.g., images), enhancing security and UX by preventing unsupported uploads.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/common/file_options_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :cover_video, as: :file, accept: \"image/*\"\n```\n\n----------------------------------------\n\nTITLE: Generating Avo Resource for Roles\nDESCRIPTION: This command generates an Avo resource for the `Role` model. This resource will allow management of roles via the Avo admin panel. This command creates the necessary files within the application for the roles to be accessible through Avo. The `bin/rails generate avo:resource role` command generates the resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rolify-integration.md#_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nbin/rails generate avo:resource role\n```\n\n----------------------------------------\n\nTITLE: Setting Dashboard Visibility Rules in Ruby\nDESCRIPTION: Configures dashboard visibility using a lambda function that can check user permissions, URL parameters, or context values to determine if the dashboard should be shown.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass ComplexDash < Avo::Dashboards::BaseDashboard\n  self.id = \"complex_dash\"\n  self.name = \"Complex dash\"\n  self.description = \"Complex dash description\"\n  self.visible = -> do\n    current_user.is_admin?\n    # or\n    params[:something] == 'something else'\n    # or\n    context[:your_param] == params[:something_else]\n  end\n\n  card UsersCount\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Renamed Utility in TailwindCSS 4\nDESCRIPTION: An HTML snippet demonstrating the change from use of 'rounded-sm' to 'rounded-xs' and 'rounded' to 'rounded-sm' to align with TailwindCSS 4's naming conventions. It advises a strategic search and replace approach for bulk updates.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tailwind-4-migration.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"rounded-xs\"> <!-- TailwindCSS 4 -->\n  Content\n</div>\n\n<div class=\"rounded-sm\"> <!-- TailwindCSS 4 -->\n  Content\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Select field with include_blank\nDESCRIPTION: This example demonstrates how to use the `include_blank` option to add a blank option to the select field.  The value can be `true` (use placeholder), `false` (no blank option), or a string for the label of the blank option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/select.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  field :type,\n    as: :select,\n    include_blank: 'No type'\nend\n```\n\n----------------------------------------\n\nTITLE: Explanation of Main Panel in Avo Resources\nDESCRIPTION: Describes the main panel as the primary container for resource fields, typically including the resource’s title, action buttons, and core data fields. It is automatically generated based on resource fields but can be manually customized. This aids in consistent resource organization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resource-panels.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Making Fields Sortable Using sortable Option in Avo (Ruby)\nDESCRIPTION: Shows the use of sortable: true to make a field sortable in the Index view. This enables users to sort resource lists by this field via the UI. Setting the sortable option is usually sufficient for basic fields backed by a database column.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, sortable: true\n```\n\n----------------------------------------\n\nTITLE: Upgrading Resource Interface from Row to Cluster (Ruby)\nDESCRIPTION: Example of upgrading from the deprecated 'row' DSL to the new 'cluster' DSL in Avo resource definitions as part of the 3.18.0 upgrade.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/person.rb\nclass Avo::Resources::Person < Avo::BaseResource\n  def fields\n    panel \"Address\" do\n      row do # [!code --]\n      cluster do # [!code ++]\n        field :street_address, stacked: true do\n          \"1234 Elm Street\"\n        end\n\n        field :city, stacked: true do\n          \"Los Angeles\"\n        end\n\n        field :zip_code, stacked: true do\n          \"15234\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing current_user Resource Name for Admin Sign-out (Ruby)\nDESCRIPTION: This configuration sets config.current_user_resource_name to :current_admin, enabling Avo to resolve destroy_current_admin_session_path for admin sign-out flows. Place this within config/initializers/avo.rb to align the resource name with your authentication resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authentication.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.current_user_resource_name = :current_admin\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Fields to Prevent Editing in Avo Resource (Ruby)\nDESCRIPTION: Reinforces how to use disabled: true to render form fields as disabled and exclude them from record updates. Provides additional protection by ensuring the value cannot be altered via the DOM and form submission.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, disabled: true\n```\n\n----------------------------------------\n\nTITLE: Scoping records to exclude existing associations\nDESCRIPTION: This snippet demonstrates using `attach_scope` in a Ruby-Vue context to prevent attaching members to a team if they are already members of that team. It filters the query to exclude members with the same `team_id` as the parent record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/associations_attach_scope_option_common.md#_snippet_1\n\nLANGUAGE: ruby-vue\nCODE:\n```\nfield :members,\n  as: :{{ $frontmatter.field_type }},\n  attach_scope: -> { query.where.not(team_id: parent.id) }\n```\n\n----------------------------------------\n\nTITLE: Defining an Avo Resource in Ruby\nDESCRIPTION: Shows the basic structure of an Avo resource class definition. It includes the definition of fields (commented out as a placeholder) and registers a specific action, `Avo::Actions::DownloadFile`, that can be performed on this resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Project < Avo::BaseResource\n  def fields\n    # fields here\n  end\n\n  def actions\n    action Avo::Actions::DownloadFile\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Stimulus View Value in JavaScript Controller - JavaScript\nDESCRIPTION: Provides a Stimulus JS controller class example that reads the `view` value from a data attribute (`this.viewValue`). When connected, the controller logs the current view context (e.g., 'edit', 'index') to the console. Requires @hotwired/stimulus and is expected to be used as part of an ES module or asset pipeline.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\n\nexport default class extends Controller {\n  static values = {\n    view: String,\n  }\n\n  async connect() {\n    console.log('view ->', this.viewValue)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Buttons on Form Footers with `config.buttons_on_form_footers` in Ruby\nDESCRIPTION: This configuration adds the `Back` and `Save` buttons to the footer of resource forms, improving user experience for lengthy forms. It is set in the initializer and applies to both new and edit screens.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_39\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.buttons_on_form_footers = true\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Collapsed State for Avo Sidebar Sections in Ruby\nDESCRIPTION: Shows how to predefine the default collapse state for a sidebar section by adding the collapsed: true option alongside collapsable: true. This causes the section to be initially rendered in collapsed state until the user expands it.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"Resources\", icon: \"resources\", collapsable: true, collapsed: true do\n  resource :course\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Avo TextFilter (Bash)\nDESCRIPTION: Provides the command-line instruction to generate a new Avo filter specifically of type `text`. This command creates the necessary Ruby file structure for a custom text filter named 'name' within the Avo application directory.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/basic-filters.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrails generate avo:filter name --type text\n```\n\n----------------------------------------\n\nTITLE: Example Avo Action Generator Commands (Bash)\nDESCRIPTION: Provides practical examples of using the `avo:action` generator command. It shows how to generate a regular action, a standalone action using the flag, and an action within a specific namespace (admin).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/generator.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Generate a regular action\nbin/rails generate avo:action mark_as_featured\n\n# Generate a standalone action\nbin/rails generate avo:action generate_monthly_report --standalone\n\n# Generate an action in a namespace\nbin/rails generate avo:action admin/approve_user\n```\n\n----------------------------------------\n\nTITLE: Registering a scope in a resource class in Ruby\nDESCRIPTION: This snippet shows how to register the 'Admins' scope within a resource class so that it appears as an option in the scopes bar of the Avo interface. It calls the 'scope' method and passes the scope class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/scopes.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def scopes\n    scope Avo::Scopes::Admins\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Status field behavior in 3.0.1.beta6\nDESCRIPTION: Shows the new configuration for status fields where you now need to explicitly specify the success state. The default state is now 'neutral' for values that don't match any specified state.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nfield :status,\n  as: :status,\n  failed_when: :failed,\n  loading_when: :loading\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# After\nfield :status,\n  as: :status,\n  failed_when: :failed,\n  loading_when: :loading,\n  success_when: :deployed # specify the success state\n```\n\n----------------------------------------\n\nTITLE: Specifying Required Gems for Markdown Field (Ruby)\nDESCRIPTION: Lists the necessary Ruby gem dependencies that must be included in your project's `Gemfile` for the custom markdown field to function correctly. The `marksmith` gem is the core editor component, and `commonmarker` is a recommended markdown parser for rendering.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/markdown.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\ngem \"marksmith\"\ngem \"commonmarker\"\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Avo Views Using Symbol Array Membership in Ruby\nDESCRIPTION: Checks if the current view matches any in a symbol array (view.in? [:new, :edit]) for efficient branching on multiple related resource views in Ruby. Useful for distinguishing between forms and displays using symbols. Requires the view object. Input is an array of symbols; output is grouped code branches; dependent on how the view object implements .in?.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/views.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nif view.in? [:new, :edit]\n  # Code for the \"new\" and \"edit\" views\nelsif view.in? [:show, :index]\n  # Code for the \"show\" and \"index\" views\nend\n\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Assets to Avo with Sprockets/Propshaft in ERB\nDESCRIPTION: This ERB template code demonstrates how to include custom JavaScript and CSS assets in Avo using Sprockets or Propshaft. It should be added to the _pre_head.html.erb partial.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-asset-pipeline.md#_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript_include_tag 'avo.custom', defer: true %>\n<%= stylesheet_link_tag 'avo.custom', media: 'all' %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs with Title and Description\nDESCRIPTION: Example showing how to add a title and description to a group of tabs to provide context about their purpose or content.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tabs.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ntabs title: \"Tabs group title\" do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Field Inputs as Stimulus Targets - Ruby\nDESCRIPTION: Illustrates how input elements for fields automatically receive Stimulus data target attributes (e.g., `data-[CONTROLLER]-target=\"nameTextInput\"`). By defining fields with relevant types, input elements are targeted for event handling or value reading by Stimulus controllers. No additional field parameters are needed beyond the type and name.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# Inputs get the `data-[CONTROLLER]-target=\"nameTextInput\"` attribute and can be targeted using nameTextInputTarget\nfield :name, as: :text\n\n# Inputs get the `data-[CONTROLLER]-target=\"createdAtDateTimeInput\"` attribute and can be targeted using createdAtDateTimeInputTarget\nfield :created_at, as: :date_time\n\n# Inputs get the `data-[CONTROLLER]-target=\"hasSkillsTagsInput\"` attribute and can be targeted using hasSkillsTagsInputTarget\nfield :has_skills, as: :tags\n```\n\n----------------------------------------\n\nTITLE: Using Action Dividers in Avo (Ruby)\nDESCRIPTION: This snippet shows how to use action dividers to logically group and separate actions within the actions dropdown menu, improving the layout and usability. Requires Avo framework.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/registration.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def actions\n    # User status actions\n    action Avo::Actions::ActivateUser\n    action Avo::Actions::DeactivateUser\n\n    divider\n\n    # Communication actions\n    action Avo::Actions::SendWelcomeEmail\n    action Avo::Actions::SendPasswordReset\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Resources to Avo Menu\nDESCRIPTION: Examples of using the resource menu item type to reference resources in Avo. Resources can be referenced by symbol or full name, with optional custom labels and query parameters.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nresource :posts\nresource \"CommentsResource\"\nresource :posts, label: \"News posts\"\nresource :posts, params: { status: \"published\" }\nresource :users, params: -> do\n  decoded_filter = {\"IsAdmin\"=>[\"non_admins\"]}\n\n  { filters: Avo::Filters::BaseFilter.encode_filters(decoded_filter)}\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Avo Action Confirm Button Label (Ruby)\nDESCRIPTION: Customizes the text on the positive action button within the confirmation modal. Allows a static string or a dynamic block accessing the execution context (`resource.record`) for personalized labeling.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/customization.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.confirm_button_label = \"Release fish\"\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/release_fish.rb\nclass Avo::Actions::ReleaseFish < Avo::BaseAction\n  self.confirm_button_label = -> {\n    if resource.record.present?\n      \"Release #{resource.record.name}\"\n    else\n      \"Release fish\"\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Target Option for Record Link\nDESCRIPTION: This snippet demonstrates setting the `target` option to `_blank` for the `record_link` field, causing the linked record to open in a new tab. This option allows for control over how linked records are displayed in the browser.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/record_link.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :post, as: :record_link, target: :blank\n```\n\n----------------------------------------\n\nTITLE: Linking to Child Resource via STI in Avo (Ruby)\nDESCRIPTION: Enables automatic redirection to the appropriate Single Table Inheritance (STI) child resource when navigating from the Person parent resource. Setting self.link_to_child_resource = true makes record links go to child or spouse details in the index view. The resource must be set up for STI with Person as a parent class.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Person < Avo::BaseResource\n  self.link_to_child_resource = true\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Controls Placement in Avo Resource (Ruby)\nDESCRIPTION: Modifies controls placement (action buttons) for the Task resource by setting self.controls_placement to :both. Options include :left, :right, or :both. Note that this option is obsolete as of Avo v3.16.3.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/task.rb\nclass Avo::Resources::Task < Avo::BaseResource\n  self.controls_placement = :both\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Links with target and path options in Ruby\nDESCRIPTION: This snippet shows how to create a link in the menu using `link_to`, specifying the link's text, target, and path. The `target: :_blank` option opens the link in a new tab.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlink_to \"Google\", path: \"https://google.com\", target: :_blank\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Visibility Control\nDESCRIPTION: Shows how to use the `visible` option to control the visibility of menu items based on a boolean value or a block that evaluates conditions based on `current_user`, `context`, `params`, and `view_context`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    resource :user, visible: -> do\n      context[:something] == :something_else\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling a Field Wrapper with Multiple Inputs\nDESCRIPTION: Shows how to disable a field wrapper that contains multiple inputs using the resource-edit#disable method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/stimulus-integration.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nfield :has_skills, as: :boolean, html: {\n  edit: {\n    input: {\n      data: {\n        action: \"input->resource-edit#disable\", # use the pre-made stimulus method on input\n        resource_edit_disable_target_param: \"countrySelectWrapper\", # target the wrapper so all inputs are disabled\n        # resource_edit_disable_targets_param: [\"countrySelectWrapper\"] # add more than one target to disable\n      }\n    }\n  }\n}\nfield :country, as: :select, options: Course.countries.map { |country| [country, country] }.to_h\n```\n\n----------------------------------------\n\nTITLE: Setting a Single Static View Type in Avo Resource (Ruby)\nDESCRIPTION: Configures an Avo resource (e.g., `Avo::Resources::City`) to only display the `:table` view type. Setting `self.view_types` to a single symbol restricts the view switcher to only that option. If only one type is available, the switcher is hidden.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-view-types.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::City < Avo::BaseResource\n  # ...\n  self.view_types = :table\n  #...\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Standalone Avo Action\nDESCRIPTION: This command generates a standalone Avo action, meaning it doesn't require record selection. The `--standalone` option is used to achieve this.  Standalone actions are useful for tasks like generating reports or exporting all records.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/generate.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:action export_users --standalone\n```\n\n----------------------------------------\n\nTITLE: Avo Action Redirect Response\nDESCRIPTION: This code demonstrates the use of the `redirect_to` response in an Avo action. It updates the active status of each project and then redirects the user to the `avo.resources_users_path` after displaying a success message.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/actions.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(**args)\n  models = args[:models]\n\n  models.each do |project|\n    project.update active: false\n  end\n\n  succeed 'Done!'\n  redirect_to avo.resources_users_path\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a standalone action (Bash)\nDESCRIPTION: This bash command generates a standalone action, which doesn't require selecting records, similar to the previous standalone example. It demonstrates another way to use the standalone generator option. It requires a Rails application with Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/generate.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Generate a standalone action\nbin/rails generate avo:action generate_monthly_report --standalone\n```\n\n----------------------------------------\n\nTITLE: Rendering a Progress Bar in Show and Index Views - ERB\nDESCRIPTION: Customizes show and index ERB view components to render a visual progress bar, displaying the progress value and a value suffix when specified. Renders an HTML <progress> element using field-specific configuration. Depends on field options and instance variables; customization is possible via ERB.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_7\n\nLANGUAGE: erb\nCODE:\n```\n# app/components/avo/fields/progress_bar_field/show_component.html.erb\n<%= show_field_wrapper field: @field, index: @index do %>\n  <!-- If display_value is set to true, show the value above the progress bar -->\n  <% if @field.display_value %>\n    <div class=\"text-center text-sm font-semibold w-full leading-none mb-1\">\n      <!-- Add the suffix if value_suffix is set -->\n      <%= @field.value %><%= @field.value_suffix if @field.value_suffix.present? %>\n    </div>\n  <% end %>\n\n  <!-- Show the progress input with the settings we passed to the field. -->\n  <progress max=\"<%= @field.max %>\" value=\"<%= @field.value %>\" class=\"block w-full\"></progress>\n<% end %>\n\n# app/components/avo/fields/progress_bar_field/index_component.html.erb\n<%= index_field_wrapper field: @field do %>\n  <!-- If display_value is set to true, show the value above the progress bar -->\n  <% if @field.display_value %>\n    <div class=\"text-center text-sm font-semibold w-full leading-none mb-1\">\n      <!-- Add the suffix if value_suffix is set -->\n      <%= @field.value %><%= @field.value_suffix if @field.value_suffix.present? %>\n    </div>\n  <% end %>\n\n  <!-- Show the progress input with the settings we passed to the field. -->\n  <progress max=\"<%= @field.max %>\" value=\"<%= @field.value %>\" class=\"block w-24\"></progress>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Generating Avo Array Resource - Rails CLI - Bash\nDESCRIPTION: This Bash command is used to generate a new Avo resource specifically configured for use with the `Array` field. It creates the necessary file and basic structure for the resource that will handle the array data.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/array.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrails generate avo:resource Attendee --array\n```\n\n----------------------------------------\n\nTITLE: Using the 'footer_controls' Slot in Avo::PanelComponent (ERB)\nDESCRIPTION: Shows how to add controls or actions to the 'footer_controls' slot (referred to as `footer_tools` in surrounding text but `footer_controls` in code). This slot is positioned below the main 'body' or 'bare_content' area.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-components/avo-panel-component.md#_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_footer_controls do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Using the Demo Component (HTML)\nDESCRIPTION: Demonstrates how to embed the custom `Demo` component within the documentation. This component requires a `link` attribute specifying the URL for the demo and accepts an optional `label` attribute for the display text of the link.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/readme.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Demo link=\"https://avodemo.com\" label=\"See the demo\" />\n```\n\n----------------------------------------\n\nTITLE: Set Avo Action as Standalone (Ruby)\nDESCRIPTION: Marks an existing Avo Action class as standalone. This enables the action to appear and be executable even when no records are selected, ideal for global or administrative tasks.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/customization.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/actions/global_report.rb\nclass Avo::Actions::GlobalReport < Avo::BaseAction\n  self.name = \"Generate Global Report\"\n  self.standalone = true\nend\n```\n\n----------------------------------------\n\nTITLE: Profile Photo Source with Symbol (Ruby)\nDESCRIPTION: This configures the profile photo source using a symbol. It sets the `source` to `:profile_photo`, which means Avo will call `record.profile_photo` to retrieve the image source. The code is concise and directly references the attribute on the record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cover-and-profile-photos.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nself.profile_photo = {\n  source: :profile_photo # this will run `record.profile_photo`\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Hash in Avo Resource with Constant\nDESCRIPTION: This example shows how to customize the `cache_hash` method in an Avo resource to include a constant string. This allows for manual cache busting when needed. The method combines the record, file hash, the constant string, and optionally the parent record to generate the cache key.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  def cache_hash(parent_record)\n    result = [record, file_hash, \"SOMETHING_NEW\"]\n\n    if parent_record.present?\n      result << parent_record\n    end\n\n    result\n  end\n\n  # fields, cards and more\nend\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to Edit View Wrapper Placeholder - Ruby\nDESCRIPTION: Shows the basic structural placeholder for adding HTML attributes to the `wrapper` element of a field in the `edit` view using the object notation. This structure also applies to the New view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/html.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    wrapper: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Override destroy_fail_message - Ruby\nDESCRIPTION: This snippet demonstrates overriding the `destroy_fail_message` method. This sets the error message displayed when a resource fails to be destroyed. If errors exist, it joins them; otherwise, it uses a general error message.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ndef destroy_fail_message\n  @errors.present? ? @errors.join(\". \") : t(\"avo.failed\")\nend\n```\n\n----------------------------------------\n\nTITLE: Utilizing the 'footer_tools' Slot in Avo::PanelComponent (ERB)\nDESCRIPTION: Shows how to add content to the 'footer_tools' slot using `with_footer_controls`. This slot behaves similarly to the 'tools' slot but is positioned below the main body or bare content area, providing another location for controls or actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-components/avo-panel-component.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_footer_controls do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Attach Scope for Belongs To Fields in Ruby\nDESCRIPTION: Shows how to filter the available options in a belongs_to dropdown using the attach_scope option with a model scope.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/associations/belongs_to.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\n  scope :non_admins, -> { where \"(roles->>'admin')::boolean != true\" }\nend\n\n# app/avo/resources/post_resource.rb\nclass PostResource < Avo::BaseResource\n  field :user, as: :belongs_to, attach_scope: -> { query.non_admins }\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling features in Avo configuration\nDESCRIPTION: Disables specific features such as global search in Avo's UI, allowing customization of available functionalities per project requirements.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.disabled_features = [:global_search]\nend\n```\n\n----------------------------------------\n\nTITLE: Enforcing Tag Suggestions in Tags Field - Ruby\nDESCRIPTION: Shows configuration of the tags field to accept only predefined suggestions, enforcing selection exclusively from a provided list. Uses 'enforce_suggestions: true' and an array of permitted values, preventing the addition of custom tags. Suitable for strict taxonomies or controlled vocabularies.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  suggestions: %w(one two three),\n  enforce_suggestions: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Label with Count - Ruby\nDESCRIPTION: This Ruby module, `NavigationLabelWithCount`, provides a `navigation_label` method that overrides the default navigation label in Avo to include a count of the resources. It relies on the `resource_count` method to fetch the count and uses Tailwind CSS classes for styling.  It defines helper methods to generate the count HTML and apply appropriate Tailwind classes based on whether the count is zero.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/add-count-to-menu-items.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule NavigationLabelWithCount\n  def navigation_label\n    <<-HTML\n    <div class=\"w-full flex justify-between pr-3\">\n      <div>#{plural_name}</div>\n      <div>#{resource_count_html}</div>\n    </div>\n    HTML\n    .html_safe\n  end\n\n  private\n\n  def resource_count_html\n    c = resource_count\n    return if c == 0\n    <<-HTML\n    <span class=\"#{resource_count_tailwind_classes(c)}\">\n      #{resource_count}\n    </span>\n    HTML\n  end\n\n  def resource_count\n    resolve_query_scope.call(model_class: model_class).count\n  end\n\n  def resource_count_tailwind_classes(c)\n    classes = %w(\n      text-white\n      px-2\n      py-0.5\n      text-xs\n      rounded-full\n    )\n    if c == 0\n      classes << \"bg-gray-300\"\n    else\n      classes << \"bg-blue-500\"\n    end\n    classes.join(\" \")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Ensuring Host Resource Action Declaration with New Arguments API in Avo Ruby\nDESCRIPTION: Explains that actions declared inside `self.show_controls = -> do` blocks need to be also declared on the host resource class with the new arguments API. This is necessary because action argument introspection now relies on actions declared outside that block. The snippet shows a resource declaring an action inside `show_controls` and separately declaring it on the resource class with arguments.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass FishResource < Avo::BaseResource\n  self.title = :name\n\n  self.show_controls = -> do\n    # In order to be used here\n    action ReleaseFish, style: :primary, color: :fuchsia\n  end\n\n  # Should be declared here\n  action ReleaseFish, arguments: { both_actions: \"Will use them\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Hiding Card Header in Ruby\nDESCRIPTION: Provides an option to hide the header (label and range dropdown) of a card, useful for full-coverage embedded content like maps or custom visualizations. Sets `display_header` to false.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Cards::UsersMetric < Avo::Cards::MetricCard\n  self.id = 'users_metric'\n  self.display_header = false\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Settings for Avo Code Generation\nDESCRIPTION: This JSON snippet updates VSCode's settings to include instructions for GitHub Copilot's chat code generation, referencing the locally saved avo.md file. It requires adding the specified object into the settings.json file to enable seamless Avo code suggestions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/vscode.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"github.copilot.chat.codeGeneration.instructions\": [\n    {\n      \"file\": \"./.vscode/avo.md\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Pagination Settings in Avo (Ruby)\nDESCRIPTION: This snippet shows how to configure default pagination settings within Avo. It demonstrates setting the pagination type to `:countless` using a lambda. This will make all tables countless.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/customization.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.pagination = {\n  type: :countless\n}\n\n# Or\n\nconfig.pagination = -> do\n  {\n    type: :countless,\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Database Payload Example for BooleanGroup\nDESCRIPTION: Shows an example of how a BooleanGroup object is stored in the database as a hash with string keys and boolean values. Serves as the data structure for boolean roles or similar attribute sets.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/boolean_group.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"admin\": true,\n  \"manager\": true,\n  \"writer\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding help text to fields in Ruby\nDESCRIPTION: Shows how to add explanatory help text to fields using either plain text or HTML. This text appears below the field to guide users.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n# using the text value\nfield :custom_css, as: :code, theme: 'dracula', language: 'css', help: \"This enables you to edit the user's custom styles.\"\n\n# using HTML value\nfield :password, as: :password, help: 'You may verify the password strength <a href=\"http://www.passwordmeter.com/\">here</a>.'\n```\n\n----------------------------------------\n\nTITLE: Creating Heading field with label in Avo (Ruby)\nDESCRIPTION: Defines a Heading field using the 'label' option to explicitly set the displayed text to \"user information\". Using 'label' is the recommended way to ensure the heading renders on all views (Show, Edit, Create).\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/heading.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :some_id, as: :heading, label: \"user information\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Home Path URL\nDESCRIPTION: Defines the URL where users are redirected when clicking the logo or visiting `/avo`, through `config.home_path`. Can be a static string or a lambda for dynamic paths.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.home_path = \"/avo/dashboard\"\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.home_path = -> { avo_dashboards.dashboard_path(:dashy) }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Field in Avo\nDESCRIPTION: Example of configuring a DateTime field in Avo with custom formatting, 24-hour time display, and timezone specification. This shows how to define a field named 'joined_at' with various display options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/date_time.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :joined_at,\n  as: :date_time,\n  name: \"Joined at\",\n  picker_format: \"Y-m-d H:i:S\",\n  format: \"yyyy-LL-dd TT\",\n  time_24hr: true,\n  timezone: \"PST\"\n```\n\n----------------------------------------\n\nTITLE: Adding Avo Resource Tool to Forms - Ruby\nDESCRIPTION: Demonstrates adding a resource tool to an Avo resource specifically for display on 'forms' views (create/edit). This is achieved by using the `show_on: :forms` option when adding the tool in the `fields` method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/resource-tools.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::ResourcesFish < Avo::BaseResource\n  def fields\n    tool Avo::ResourceTools::FishInformation, show_on: :forms\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Dashboard Cards in Ruby\nDESCRIPTION: Shows how to override card parameters by passing arguments from the dashboard to cards. This allows reusing the same card with different configurations.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dashboards.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::Dashy < Avo::Dashboards::BaseDashboard\n  self.id = \"dashy\"\n  self.name = \"Dashy\"\n\n  def cards\n    card Avo::Cards::UsersCount\n    card Avo::Cards::UsersCount, arguments: {\n      active_users: true\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Override update_fail_message - Ruby\nDESCRIPTION: This snippet shows how to override the `update_fail_message` method.  This sets the error message displayed to the user when a resource update fails. The example utilizes the `t` helper for internationalization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_fail_message\n  t \"avo.you_missed_something_check_form\"\nend\n```\n\n----------------------------------------\n\nTITLE: Providing Default Array Field Data - Avo ArrayResource - Ruby\nDESCRIPTION: As a final fallback for data fetching, Avo will call the `records` method on the resource used to render the `Array` field if neither a block nor a model method is defined. This Ruby snippet illustrates how to implement the `records` method within a resource that inherits from `Avo::Resources::ArrayResource` to supply a default dataset.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/array.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Attendee < Avo::Resources::ArrayResource\n  def records\n    [\n      { id: 1, name: \"Default Attendee\", role: \"Guest\", organization: \"DefaultOrg\" }\n    ]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Assets to Avo with Webpacker in ERB\nDESCRIPTION: This ERB template code demonstrates how to include custom JavaScript and CSS assets in Avo using Webpacker. It should be added to the _pre_head.html.erb partial.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/custom-asset-pipeline.md#_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript_pack_tag 'avo.custom', defer: true %>\n<%= stylesheet_pack_tag 'avo.custom', media: 'all' %>\n```\n\n----------------------------------------\n\nTITLE: Customizing user profile display (name, photo, title)\nDESCRIPTION: Configures how user information such as name, avatar, and title are displayed in the sidebar profile widget, based on the current user's methods.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Using close_modal and do_nothing in Action Response\nDESCRIPTION: Demonstrates how to close a modal without redirecting after action execution, with do_nothing being an alias for close_modal.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/actions/execution.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Actions::CloseModal < Avo::BaseAction\n  self.name = \"Close modal\"\n\n  def handle(**args)\n    # do_something_here\n    succeed \"Modal closed!!\"\n    close_modal\n    # or\n    do_nothing\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Scoped Component Class Definition in Ruby\nDESCRIPTION: Example of how ejected components with scopes are structured. Shows the class definitions for both view components and field components with custom namespaces.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/eject-views.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Views::Admins::ResourceIndexComponent < Avo::ResourceComponent\n\nclass Avo::Fields::Admins::TextField::ShowComponent < Avo::Fields::ShowComponent\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Tabs Style in Avo Initializer (Ruby)\nDESCRIPTION: This snippet shows how to configure the global tabs style in the Avo initializer.  By setting `config.tabs_style = :pills`, all tabs throughout the application will be displayed as pills.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/tabs.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.tabs_style = :pills\nend\n```\n\n----------------------------------------\n\nTITLE: Defining False as Possible Value (Configuration)\nDESCRIPTION: Indicates that the boolean value `false` is an acceptable input or setting for this configuration option. Users are allowed to explicitly configure the option to this state. This value is also specified as the default for the option.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/default_boolean_false.md#_snippet_2\n\nLANGUAGE: Configuration\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Field in Avo - Ruby\nDESCRIPTION: This Ruby code snippet shows how to define a `Boolean` field within an Avo resource. It maps to an attribute named `is_published` and is given a display name 'Published'. The `true_value` and `false_value` options are used to customize the string representation displayed in views when the boolean value is true or false, overriding the defaults.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/boolean.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :is_published,\n  as: :boolean,\n  name: 'Published',\n  true_value: 'yes',\n  false_value: 'no'\n```\n\n----------------------------------------\n\nTITLE: Registering Stimulus Nested Form Controller in JavaScript\nDESCRIPTION: Adds and registers the stimulus-rails-nested-form package to enable dynamic addition of nested form elements in the Avo interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/nested-records-when-creating.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Probably app/javascript/avo.custom.js\nimport { Application } from '@hotwired/stimulus'\nimport NestedForm from 'stimulus-rails-nested-form'\n\nconst application = Application.start()\napplication.register('nested-form', NestedForm)\n```\n\n----------------------------------------\n\nTITLE: Integrating Rails Helpers in Avo\nDESCRIPTION: This code shows how to use application helpers inside Avo resources. To use application helpers, include the helper module within the relevant controller and reference the methods from the `view_context.controller` object.  This example demonstrates how to create a copyright info helper and use it within an Avo resource.  It involves defining a helper method, including that helper in the controller, and calling the helper method via `view_context.controller` in a resource field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/rails-and-hotwire.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/helpers/application_helper.rb\nmodule ApplicationHelper\n  def render_copyright_info\n    \"Copyright #{Date.today.year}\"\n  end\nend\n\n# app/controller/avo/products_controller.rb\nclass Avo::ProductsController < Avo::ResourcesController\n  include ApplicationHelper\nend\n\n# app/avo/resources/products_resource.rb\nclass ProductsResource < Avo::BaseResource\n  field :copyright, as: :text do\n    view_context.controller.render_copyright_info\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Example Avo::ApplicationController Ruby\nDESCRIPTION: This code shows how the Avo::ApplicationController will behave with basic authentication enabled. It uses `http_basic_authenticate_with` to require authentication with a specified username and password.  This is a conceptual example.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/basic-authentication.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::ApplicationController < ::ActionController::Base\n  http_basic_authenticate_with name: \"adrian\", password: \"password\"\n\n  # More methods here\nend\n```\n\n----------------------------------------\n\nTITLE: Aligning text on index view in Ruby\nDESCRIPTION: Shows how to customize text alignment in table cells using HTML options. This example aligns numbers to the right in the table.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Project < Avo::BaseResource\n  field :users_required, as: :number, html: {index: {wrapper: {classes: \"text-right\"}}}\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Author Models for Audit Logging\nDESCRIPTION: Specify which models can be authors of audit activities, either as a single model or multiple models.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\n\nAvo.configure do |config|\n  # ...\nend\n\nAvo::AuditLogging.configure do |config|\n  config.enabled = true\n\n  # config.author_model = \"User\"\n  config.author_model = \"Account\"\n\n  # Or for multiples models\n  config.author_models = [\"User\", \"Account\"]\nend\n```\n\n----------------------------------------\n\nTITLE: Using Dividers to Organize Dashboard Cards\nDESCRIPTION: Implementation of card organization using dividers with labels to visually separate different categories of cards in a dashboard layout.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cards.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Dashboards::Dashy < Avo::Dashboards::BaseDashboard\n  def cards\n    card Avo::Cards::ExampleColumnChart\n    card Avo::Cards::ExamplePieChart\n    card Avo::Cards::ExampleBarChart\n    divider label: \"Custom partials\"\n    card Avo::Cards::ExampleCustomPartial\n    card Avo::Cards::MapCard\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Suggestions to Tags Field in Ruby\nDESCRIPTION: Shows how to provide suggestions for a tags field using a method from the record that returns possible values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/tags.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/avo/resources/course.rb\nclass Avo::Resources::Course < Avo::BaseResource\n  def fields\n    field :skills, as: :tags, suggestions: -> { record.skill_suggestions }\n  end\nend\n\n# app/models/course.rb\nclass Course < ApplicationRecord\n  def skill_suggestions\n    ['example suggestion', 'example tag', self.name]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using the `meta` option to send arbitrary information to a field in Avo using Ruby\nDESCRIPTION: This code snippet shows how to use the `meta` option to pass arbitrary information to a field. This is useful when building custom fields or using custom components.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\n# meta as a hash\nfield :status,\n  as: :custom_status,\n  meta: {foo: :bar}\n```\n\n----------------------------------------\n\nTITLE: Formatting Textarea using Simple Format - Ruby\nDESCRIPTION: This snippet demonstrates formatting the content of a textarea field in Avo using the `simple_format` helper.  This is used to render new lines.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/faq.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  def fields\n    field :body,\n      as: :textarea,\n      format_using: -> do\n        simple_format value\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Placeholder Image in Avo (Ruby)\nDESCRIPTION: Shows how to set a custom placeholder image that appears in grid views when an image field is empty. This is done by setting the `placeholder` key within the `config.branding` hash to the path of the desired image file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/branding.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.branding = {\n    placeholder: \"/YOUR_PLACEHOLDER_IMAGE.jpg\",\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Installing the avo-audit_logging gem in Ruby on Rails\nDESCRIPTION: Adds the 'avo-audit_logging' gem to the Gemfile and executes bundle install to include audit logging capabilities into the Rails application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem \"avo-audit_logging\", source: \"https://packager.dev/avo-hq/\"\n\nthen\n\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Controlling Filename Display in File Fields in Ruby\nDESCRIPTION: Configures whether to display the filename caption for a file field. Setting 'display_filename' to false hides the filename that would normally appear with the file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/file_options_common.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfield :cover_video, as: :file, display_filename: false\n```\n\n----------------------------------------\n\nTITLE: Override after_destroy_path - Ruby\nDESCRIPTION: This snippet demonstrates overriding the `after_destroy_path` method.  It defines the path to redirect to after a resource is successfully destroyed. In this example, the user is redirected to the users resource index.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/controllers.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ndef after_update_path\n  \"/avo/resources/users\"\nend\n```\n\n----------------------------------------\n\nTITLE: Avo Configuration Initializer Ruby\nDESCRIPTION: This snippet shows a basic Avo configuration initializer. This file is typically used to configure Avo settings but is empty in this example, as the main focus is authentication.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/basic-authentication.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  # Avo configuration\nend\n```\n\n----------------------------------------\n\nTITLE: Generating an Avo Select Filter using Rails CLI\nDESCRIPTION: Shows the Rails generator command to create a new Avo Select filter file. This command scaffolds a filter class inheriting from `Avo::Filters::SelectFilter`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/basic-filters.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrails generate avo:filter published --type select\n```\n\n----------------------------------------\n\nTITLE: Configuring Avo to use root path in Ruby\nDESCRIPTION: Ruby configuration code that sets Avo to run on the root path ('/') instead of the default path. This change is made in the avo.rb initializer file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/run-avo-on-the-root-path.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  # other pieces of configuration\n\n  # Change the path to `/` to make it the root path\n  config.root_path = '/'\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Cursor with Avo's llms.txt (Quick Use)\nDESCRIPTION: This snippet shows how to instruct Cursor to use Avo's llms.txt file for code generation in a chat window. This is a temporary, one-time configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/cursor.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@web https://avohq.io/llms.txt\n```\n\n----------------------------------------\n\nTITLE: Using label option with dashboard links\nDESCRIPTION: Shows how to customize a dashboard link's label within the Avo menu editor.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndashboard :dashy, label: \"Dashy Dashboard\"\n```\n\n----------------------------------------\n\nTITLE: Generating an Avo Array Resource using Rails Generator\nDESCRIPTION: Uses the `rails generate` command with the `avo:resource` generator and the `--array` flag to create a new Avo resource specifically designed to work with array-based data, rather than a standard Active Record model. Requires a Ruby on Rails project with the Avo gem installed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/array-resources.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:resource Movie --array\n```\n\n----------------------------------------\n\nTITLE: Generating a new action in Rails with Avo (Bash)\nDESCRIPTION: This snippet demonstrates how to generate a new action file using the `avo:action` generator within a Rails application. The command creates a new action file at the specified path. Dependencies include a Rails application with the Avo gem installed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/generate.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:action toggle_inactive\n```\n\n----------------------------------------\n\nTITLE: Serving Rails Engine Assets via Middleware (Ruby)\nDESCRIPTION: Configures `Rack::Static` middleware within a Rails Engine's `engine.rb` to serve static assets (like compiled JS/CSS) from the engine's `app/assets/builds` directory to the parent application under a specified URL path (`/feed-view-assets`). This allows assets managed within the plugin engine to be accessible by the main Rails application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/plugins.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Avo\n  module FeedView\n    class Engine < ::Rails::Engine\n      isolate_namespace Avo::FeedView\n\n      initializer \"avo-feed-view.init\" do\n        ActiveSupport.on_load(:avo_boot) do\n          Avo.plugin_manager.register :feed_view\n        end\n      end\n\n      config.app_middleware.use(\n        Rack::Static,\n        urls: [\"/feed-view-assets\"], # 👈 This is the path where the files will be served\n        root: root.join(\"app\", \"assets\", \"builds\") # 👈 This is the path where the files are located\n      )\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Toggle-Fields Stimulus Controller Implementation\nDESCRIPTION: Shows the implementation of a Stimulus controller that toggles the visibility of fields in response to user input.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/stimulus-integration.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// toggle_fields_controller.js\nimport { Controller } from \"@hotwired/stimulus\";\n\nexport default class extends Controller {\n  static targets = [\"skillsTagsWrapper\"]; // use the target Avo prepared for you\n\n  toggleSkills() {\n    this.skillsTagsWrapperTarget.classList.toggle(\"hidden\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding External Image Field Label in Avo with CSS\nDESCRIPTION: This CSS snippet targets the label of an `external_image` field with the ID \"logo\" within the `Team` resource in Avo and sets its `display` property to `none`, effectively hiding the label.  It utilizes data attributes to select the specific element and targets the `[data-slot=\"label\"]` element.  This code snippet requires the Avo admin panel and a custom asset pipeline or a `_footer` partial for implementation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/hide-field-labels.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n[data-resource-name=\"TeamResource\"] [data-field-type=\"external_image\"][data-field-id=\"logo\"] [data-slot=\"label\"]{\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Disallowed Values to Tags Field - Ruby\nDESCRIPTION: Demonstrates specifying disallowed tag values for a tags field in an Avo resource. The field is prevented from accepting listed values, blocking them at the interface level. Pass an array of strings via the 'disallowed' option to restrict user input; no dependencies required.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfield :skills,\n  as: :tags,\n  disallowed: [\"not\", \"that\"]\n```\n\n----------------------------------------\n\nTITLE: Styling Table Rows with CSS :has Selector Condition - CSS\nDESCRIPTION: Targets table row elements in the Avo admin UI that contain a child with the 'soft-deleted' class using the modern :has CSS selector. Applies a background color to any row with such a child, including the ability to further limit by resource name. This requires a browser that supports :has, and HTML with appropriate data-component-name and data-resource-name attributes as output by Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/conditionally-render-styled-rows.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntr[data-component-name=\"avo/index/table_row_component\"]:has(.soft-deleted){\n  background: #fef2f2;\n}\n\n/* you may even target a specific resource by it\\'s name */\ntr[data-component-name=\"avo/index/table_row_component\"][data-resource-name=\"course_links\"]:has(.soft-deleted){\n  background: #fef2f2;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Avo Helper Inclusion Template (Shell)\nDESCRIPTION: A shell command using `rails app:template` to automatically apply the necessary configuration for including Rails helpers in Avo Resource files. This script likely implements one of the Ruby-based solutions described in the document.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/use-own-helpers-in-resource-files.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrails app:template LOCATION='https://railsbytes.com/script/V2Gsb9'\n```\n\n----------------------------------------\n\nTITLE: ApplicationController Copy - Ruby\nDESCRIPTION: This snippet shows a copied version of the Avo::ApplicationController. It includes necessary modules and sets up actions to protect against forgery. This code is a reference to the initial structure of the `ApplicationController` and is shown to highlight why directly modifying it is problematic.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/avo-application-controller.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Avo\n  class ApplicationController < ::ActionController::Base\n    include Pagy::Backend\n    include Avo::ApplicationHelper\n    include Avo::UrlHelpers\n\n    protect_from_forgery with: :exception\n    around_action :set_avo_locale\n    before_action :multitenancy_detector\n\n    # ... more Avo::ApplicationController methods\n\n    def multitenancy_detector\n      # your logic here\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Applying migration to add meta column\nDESCRIPTION: Runs database migrations to add the 'meta' JSON column to the specified model's table, essential for storing selected meta attributes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/avo-meta.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Formatting Textarea with white-space style - Ruby\nDESCRIPTION: This snippet demonstrates formatting the content of a textarea field in Avo using the `white-space: pre-line` style. This is used to render new lines.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/faq.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  def fields\n    field :body,\n      as: :textarea,\n      format_using: -> do\n        content_tag(:div, style: 'white-space: pre-line') { value }\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix to Metric Cards in Ruby\nDESCRIPTION: Example of adding prefix and suffix decorators to metric card values for better data presentation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cards.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.prefix = '$'\n  self.suffix = '%'\nend\n```\n\n----------------------------------------\n\nTITLE: Generate Avo Kanban Resources and Run Migrations\nDESCRIPTION: Run the `avo:kanban install` generator to create necessary Avo resources and controllers for managing boards, columns, and items. Then, execute `rails db:migrate` to apply the database schema changes required by the feature.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/kanban-boards.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nrails generate avo:kanban install\n```\n\nLANGUAGE: Bash\nCODE:\n```\nrails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource Link Label Avo Menu Ruby\nDESCRIPTION: Explains how to change the default label displayed for a resource link in the Avo menu. It shows using the `label` option to provide a custom string, such as changing the label for `:posts` to \"News posts\".\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/menu-editor.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nresource :posts, label: \"News posts\"\n```\n\n----------------------------------------\n\nTITLE: Accessing View Value in Stimulus Controller\nDESCRIPTION: Shows how to access the view value (index, show, edit, or new) in a Stimulus controller.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/stimulus-integration.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\n\nexport default class extends Controller {\n  static values = {\n    view: String,\n  }\n\n  async connect() {\n    console.log('view ->', this.viewValue)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization for Record Reordering\nDESCRIPTION: Sets up authorization policies for the reorder functionality, either by linking it to the edit permission or creating a custom permission check.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/records-reordering.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseLinkPolicy < ApplicationPolicy\n  def reorder? = edit?\n\n  # or a custom permission\n\n  def reorder?\n    user.can_reorder_items?\n  end\n\n  # other policy methods\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Groups in Avo Menu\nDESCRIPTION: Example of creating a group in the Avo menu. Groups are smaller categories within sections that can contain related resources and menu items.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ngroup \"Blog\" do\n  resource :posts\n  resource :categories\n  resource :comments\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Discreet Information Tooltip in Avo (Ruby)\nDESCRIPTION: Demonstrates configuring a custom discreet information item by only specifying the `tooltip` option using a dynamic lambda.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/discreet-information.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/post.rb\nclass Avo::Resources::Post < Avo::BaseResource\n  self.discreet_information = {\n    tooltip: -> { \"Product is #{record.published_at ? \"published\" : \"draft\"}\" },\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding AgingOrdersController for Custom Pagination in Avo using Ruby\nDESCRIPTION: Defines a custom controller class within the Avo namespace inheriting from Avo::ResourcesController to override pagination behavior for AgingOrders. Methods pagy_get_items and pagy_get_vars are customized to fetch all collection items and set pagination variables such as count and current page, using request parameters or Avo configuration. This supports pagination with external API data sources.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/rest-api-integration.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Avo\n  class AgingOrdersController < Avo::ResourcesController\n    def pagy_get_items(collection, _pagy)\n      collection.all.items\n    end\n\n    def pagy_get_vars(collection, vars)\n      collection.where(page: page, size: per_page)\n\n      vars[:count] = collection.all.count\n      vars[:page] = params[:page]\n      vars\n    end\n\n    private\n\n    def per_page\n      params[:per_page] || Avo.configuration.per_page\n    end\n\n    def page\n      params[:page]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding activity timeline to resource sidebar in Avo\nDESCRIPTION: Includes `Avo::ResourceTools::Timeline` in the resource's sidebar to display activity logs related to the resource in a compact view within the admin panel's interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/audit-logging/overview.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Product < Avo::BaseResource\n  self.audit_logging = {\n    activity: true\n  }\n\n  def fields\n    main_panel do\n      field :id, as: :id, link_to_record: true\n      field :name, as: :text, link_to_record: true\n      field :price, as: :number, step: 1\n\n      sidebar do\n        tool Avo::ResourceTools::Timeline\n      end\n    end\n\n    field :avo_activities, as: :has_many\n  end\n\n  def actions\n    action Avo::Actions::ChangePrice\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Placeholder in Text Field - Ruby\nDESCRIPTION: This snippet shows how to add a placeholder to a text field using the `placeholder` option. This will display the placeholder text in the input field on the <Edit /> and <New /> views when the field is empty.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-options.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, placeholder: 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Styles for Progress Bar - CSS\nDESCRIPTION: Defines Tailwind-inspired styles for the progress bar, including cross-browser support for progress element subcomponents. Styling uses @apply for utility classes and targets webkit and Mozilla browsers. These styles should be included in the Rails asset pipeline.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-fields.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nprogress {\n  @apply h-2 bg-white border border-gray-400 rounded shadow-inner;\n}\nprogress[value]::-webkit-progress-bar {\n  @apply bg-white border border-gray-500 rounded shadow-inner;\n}\nprogress[value]::-webkit-progress-value{\n  @apply bg-green-600 rounded;\n}\nprogress[value]::-moz-progress-bar {\n  @apply bg-green-600 rounded appearance-none;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Cards in Ruby\nDESCRIPTION: Example of setting up a partial card that renders custom content from a Rails partial template.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cards.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass ExampleCustomPartial < Avo::Dashboards::PartialCard\n  self.id = \"users_custom_card\"\n  self.cols = 1\n  self.rows = 4\n  self.partial = \"avo/cards/custom_card\"\n  # self.display_header = true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Countless Pagination in Avo Resource (Ruby)\nDESCRIPTION: Enables 'countless' pagination (no count of total pages or items) for large datasets by setting pagination type to :countless. Reduces DB load for index pages with high row counts. Use as lambda returning a hash; 'size' is not needed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nself.pagination = -> do\n  {\n    type: :countless\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Aliasing Authorization Methods in Configuration\nDESCRIPTION: Shows how to alias the search authorization method if you're already using search? in your policy files.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nAvo.configure do |config|\n  config.authorization_methods = {\n    search: 'avo_search?',\n  }\n  end\n```\n\n----------------------------------------\n\nTITLE: Implementing policy method with Pundit\nDESCRIPTION: Implements the policy method that receives user and record parameters and returns the appropriate policy.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\ndef policy(user, record)\n  Pundit.policy(user, record)\nend\n```\n\n----------------------------------------\n\nTITLE: Using All Dashboards Helper in Avo Menu\nDESCRIPTION: Example of using the all_dashboards helper in an Avo menu, which automatically renders links to all available dashboards.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nsection \"App\", icon: \"heroicons/outline/beaker\" do\n  group \"Dashboards\", icon: \"dashboards\" do\n    all_dashboards\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing changeset Field in PaperTrail\nDESCRIPTION: Configure Rails to properly serialize and deserialize YAML columns to ensure the changeset is correctly stored.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.yaml_column_permitted_classes = [Symbol, Date, Time, ActiveSupport::TimeWithZone, ActiveSupport::TimeZone]\n```\n\n----------------------------------------\n\nTITLE: Update Gems Command - Bash\nDESCRIPTION: This shell command updates the specified gems (`rails` and `avo-advanced`) to their latest compatible versions based on the `Gemfile`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbundle update rails avo-advanced\n```\n\n----------------------------------------\n\nTITLE: Adding Avo Community Gem in Ruby\nDESCRIPTION: Specifies the Avo Community gem dependency in a Ruby Gemfile, requiring version 3.2.1 or higher. This is the standard installation for the free tier.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/avo_in_gemfile.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ngem \"avo\", \">= 3.2.1\"\n```\n\n----------------------------------------\n\nTITLE: Monetizing the Attribute with Money-rails (Ruby)\nDESCRIPTION: This snippet demonstrates the monetization of a model attribute using the `monetize` method from the `money-rails` gem. The `monetize :price_cents` line ensures that the `price_cents` attribute is properly formatted and handled as a monetary value within the application. This step is essential for the money field to function as expected.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/money.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmonetize :price_cents\n```\n\n----------------------------------------\n\nTITLE: Customized Component Class Declaration with Scoped Namespace - Ruby - Ruby\nDESCRIPTION: These Ruby class declaration snippets show the result of ejecting a component with a --scope namespace. The first class extends from Avo::ResourceComponent under the admins namespace, while the second is for a field component under a similar pattern. They provide the starting point for custom logic and UI. Dependencies are determined by the Avo gem and Rails; the output is used for further customization within your app.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/eject-views.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Views::Admins::ResourceIndexComponent < Avo::ResourceComponent\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Fields::Admins::TextField::ShowComponent < Avo::Fields::ShowComponent\n```\n\n----------------------------------------\n\nTITLE: Defining Bulk Attachment Policies Using Metaprogramming in Ruby\nDESCRIPTION: Provides a Ruby metaprogramming example to dynamically define multiple attachment policy methods (`upload_FIELD_ID?`, `download_FIELD_ID?`, `delete_FIELD_ID?`) for various fields (e.g., `:cover_photo`, `:audio`) at once. This technique efficiently sets the same authorization rule (e.g., `true`) for multiple actions across different file fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n[:cover_photo, :audio].each do |file|\n  [:upload, :download, :delete].each do |action|\n    define_method \"#{action}_#{file}?\" do\n      true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example DB Payload for Boolean Group in Ruby\nDESCRIPTION: This snippet illustrates an example of how the data might be structured and stored in a database when using a `BooleanGroup`.  The keys (e.g., \"admin\", \"manager\", \"creator\") correspond to the keys defined in the field options, while the values represent the boolean state (true/false) of each option. The data structure stored is a ruby hash.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/boolean_group.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  \"admin\": true,\n  \"manager\": true,\n  \"creator\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Duplication with Policy Inheritance in Ruby\nDESCRIPTION: Example of reusing policies by applying the same policy rule from the original policy, showing how to link PostPolicy to CommentPolicy to avoid duplication.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/authorization.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentPolicy\n  # ... more policy methods\n  def edit\n    record.user_id == current_user.id\n  end\nend\n\nclass PostPolicy\n  # ... more policy methods\n  def edit_comments?\n    Pundit.policy!(user, record).edit?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Skipping Avo Show View via Configuration (Ruby)\nDESCRIPTION: Configures Avo to skip the default Show view and use the Edit view instead by setting `config.skip_show_view = true` in the Avo initializer (`config/initializers/avo.rb`). This redirects users to the Edit page after actions like updating a record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_23\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.skip_show_view = true\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Token as Docker Build Argument\nDESCRIPTION: Provides bash commands to pass the `BUNDLE_PACKAGER__DEV` value as a build argument to the `docker build` command, either directly or by reading from a shell environment variable.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Pass the key to the build argument\ndocker build --build-arg BUNDLE_PACKAGER__DEV=xxx\n\n# OR\n\n# Set the key as an environment variable on your machine\n# Somewhere in your `.bashrc` or `.bash_profile` file\nexport BUNDLE_PACKAGER__DEV=xxx\n# Then pass it to the build argument from there\ndocker build --build-arg BUNDLE_PACKAGER__DEV=$BUNDLE_PACKAGER__DEV\n```\n\n----------------------------------------\n\nTITLE: Encoding filters with Avo::Filters::BaseFilter.encode_filters in Ruby\nDESCRIPTION: Demonstrates encoding a filters hash into a serialized string format compatible with Avo's filtering system using the `encode_filters` method. This encoded string can be sent as a parameter in URLs or API calls to preserve filter state. The method is a general utility and is used within an action's handle method, requiring the filters data as input.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nclass DummyAction < Avo::BaseAction\n  self.name = \"Dummy action\"\n\n  def handle(**args)\n    do_something_important\n\n    redirect_to avo.resources_users_path(filters: Avo::Filters::BaseFilter.encode_filters({\"NameFilter\"=>\"Apple\"}))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting add_via_params Option\nDESCRIPTION: This example sets the `add_via_params` option to `true` and `false`.  The option controls whether to add `via` parameters to the URL. Setting it to `false` removes these parameters. `via` params helps to generate the back button link.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/record_link.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# This will generate a link similar to this\n# https://example.com/avo/resources/projects/40?via_record_id=40&via_resource_class=Avo%3A%3AResources%3A%3AProject\nfield :post, as: :record_link, add_via_params: true\n\n# This will generate a link similar to this\n# https://example.com/avo/resources/projects/40\nfield :post, as: :record_link, add_via_params: false\n```\n\n----------------------------------------\n\nTITLE: Customizing Create Success Message in Avo Controller\nDESCRIPTION: Shows how to override the message displayed to users after successfully creating a record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_success_message\n  \"#{@resource.name} #{t(\"avo.was_successfully_created\")}.\"\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Destroy Success Message in Avo Controller\nDESCRIPTION: Shows how to override the message displayed to users after successfully destroying a record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\ndef destroy_success_message\n  t(\"avo.resource_destroyed\", attachment_class: @attachment_class)\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Update Failure Message in Avo Controller\nDESCRIPTION: Shows how to override the error message displayed to users when record update fails.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/controllers.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_fail_message\n  t \"avo.you_missed_something_check_form\"\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Chartkick dependency for Avo Dashboards\nDESCRIPTION: Required gem dependency for creating charts in Avo dashboards. The chartkick gem must be manually added to your Gemfile.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dashboards.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Create beautiful JavaScript charts with one line of Ruby\ngem \"chartkick\"\n```\n\n----------------------------------------\n\nTITLE: Adding custom JavaScript and CSS assets with Sprockets or Propshaft\nDESCRIPTION: This snippet demonstrates how to include custom JavaScript and CSS assets into Avo's interface by adding `avo.custom.js` and `avo.custom.css` files in the appropriate directories, then referencing them in the `_pre_head.html.erb` partial with `javascript_include_tag` and `stylesheet_link_tag`, ensuring `defer: true` for JavaScript.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-asset-pipeline.md#_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript_include_tag 'avo.custom', defer: true %>\n<%= stylesheet_link_tag 'avo.custom', media: 'all' %>\n```\n\n----------------------------------------\n\nTITLE: Adding Content to the 'footer' Slot of Avo::PanelComponent (ERB)\nDESCRIPTION: Illustrates placing content in the bottom-most 'footer' area of the Avo::PanelComponent using the `with_footer` slot helper. This area is distinct from 'footer_tools' and typically used for general footer information.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-components/avo-panel-component.md#_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_footer do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring the mobility Gem for Translatable Models\nDESCRIPTION: Provides steps to add the mobility gem to your Rails project, including adding to Gemfile, bundling, generating installation files, and configuring backend storage. Necessary dependencies include the mobility gem itself; key actions include extending models with 'extend Mobility' and declaring translatable fields like 'translates :name'.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multilingual-content.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# Add to Gemfile\n gem 'mobility', '~> 1.2.5'\n\n# Install gem\nbundle install\n\n# Generate installation files\nrails generate mobility:install\n\n# Configure backend in an initializer or model\nbackend :key_value, type: :string\n\n# In your model\nextend Mobility\ntranslates :name\n```\n\n----------------------------------------\n\nTITLE: Targeting Avo Field Wrapper in Show View (Object Notation) (Ruby)\nDESCRIPTION: This snippet illustrates the basic structure for using the `html` option in object notation to target the field's wrapper element specifically for the 'show' view.\n\nDependencies: Avo framework.\n\nParameters: `html` option with a nested hash structure `show: { wrapper: {} }`. Attributes (`style`, `classes`, `data`) would be added inside the inner `{}`.\n\nExpected Input: A hash structure specifying the 'show' view and 'wrapper' target.\n\nExpected Output: Configures the Avo field definition to allow adding HTML attributes to the show view wrapper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/html.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  show: {\n    wrapper: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Search Feature\nDESCRIPTION: Shows how to completely disable the global search feature in Avo configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/search.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.disabled_features = [:global_search]\nend\n```\n\n----------------------------------------\n\nTITLE: Centering Content in Index Field Wrapper - Avo (ERB)\nDESCRIPTION: This example shows how to center content both vertically and horizontally within an Index field by passing `center_content: true` to the `index_field_wrapper` helper. The snippet uses a Boolean check component and requires both `field_wrapper_args` and `Avo::Fields::Common::BooleanCheckComponent`. The `center_content` option applies flexbox alignment classes to the wrapper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-wrappers.md#_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= index_field_wrapper **field_wrapper_args, center_content: true do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Default Boolean Value in AVO HQ Configuration\nDESCRIPTION: Shows the default value for a boolean configuration setting in AVO HQ, which is set to false.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/default_boolean_false.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Adding Data Attributes to Menu Items\nDESCRIPTION: Demonstrates how to add custom data attributes to menu items using the `data` option, such as `turbo: false`, to control their behavior.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/menu-editor.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.main_menu = -> {\n    resource :user, data: {turbo: false}\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting textarea with `whitespace-pre-line` class\nDESCRIPTION: Illustrates how to use the `format_using` option with the `content_tag` helper and the `whitespace-pre-line` CSS class to render newlines in a `textarea` field. This achieves the same result as the inline style, but utilizes a CSS class instead.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/faq.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentResource < Avo::BaseResource\n  field :body,\n    as: :textarea,\n    format_using: -> do\n      content_tag(:div, class: 'whitespace-pre-line') { value }\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Field in Avo Resource Ruby\nDESCRIPTION: Shows how a standard field, in this case `:name` of type `:text`, is declared within an Avo resource configuration file. This declaration implicitly makes the field definition available for use by the `avo_show_field`, `avo_edit_field`, and `avo_field` helpers in associated Rails partials.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-field-components.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# In your resource file\nfield :name, as: :text\n```\n\n----------------------------------------\n\nTITLE: Using Kamal Secret Mount to Run Bundle Install with Gem Server Token in Dockerfile\nDESCRIPTION: This Dockerfile snippet integrates Kamal's secret mount feature to securely expose the BUNDLE_PACKAGER__DEV token at build time. It reads the token from a secret path and uses it as an environment variable to run bundle install. After installation, it removes cached files to optimize the image. This approach avoids embedding secrets in image layers and keeps authentication tokens safe during build.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/gem-server-authentication.md#_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Install application gems\nCOPY Gemfile Gemfile.lock ./\n\nRUN --mount=type=secret,id=BUNDLE_PACKAGER__DEV BUNDLE_PACKAGER__DEV=$(cat /run/secrets/BUNDLE_PACKAGER__DEV) bundle install  && \\\n    rm -rf ~/.bundle/ \"${BUNDLE_PATH}\"/ruby/*/cache \"${BUNDLE_PATH}\"/ruby/*/bundler/gems/*/.git && \\\n    bundle exec bootsnap precompile --gemfile\n```\n\n----------------------------------------\n\nTITLE: Overriding Methods Inherited via `inherit_association_from_policy` in Ruby\nDESCRIPTION: Illustrates how to override a specific authorization method (e.g., `destroy_comments?`) defined by the `inherit_association_from_policy` helper. By explicitly defining the method within the policy class after calling the helper, the custom implementation takes precedence, allowing fine-grained control over specific association actions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\ninherit_association_from_policy :comments, CommentPolicy\n\ndef destroy_comments?\n  false\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Hashid Rails Gem (Ruby)\nDESCRIPTION: This snippet installs the hashid-rails gem which allows generating short, unique, cryptographically secure IDs.  The user needs to add the gem to the Gemfile and execute `bundle install`.  The version specified is ~> 1.0.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/custom-ids.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"hashid-rails\", \"~> 1.0\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Stimulus Controllers to Avo Action - Ruby\nDESCRIPTION: Demonstrates assignment of one or multiple Stimulus JS controllers to a custom action (`ShowCurrentTime`) using Avo's DSL. Setting the `stimulus_controllers` property allows the action's fields and elements to be targeted by the listed controllers. Useful for dynamic behaviors or side effects when executing actions within the Avo admin interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass ShowCurrentTime < Avo::BaseAction\n  self.stimulus_controllers = \"city-in-country\"\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Conditions with dynamic_filter Method\nDESCRIPTION: This snippet demonstrates customizing filter conditions using the `conditions` option within the `dynamic_filter` method.  It mirrors the previous example, offering a parallel approach to achieve the same customization using the `dynamic_filter` method.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ndynamic_filter :first_name,\n  conditions: {\n    case_sensitive: \"Case sensitive\",\n    not_case_sensitive: \"Not case sensitive\"\n  }.invert\n```\n\n----------------------------------------\n\nTITLE: Configuring custom assets with Webpacker (Rails 6)\nDESCRIPTION: This code shows how to include custom assets when using Webpacker version 6 by adding `avo.custom.js` and `avo.custom.css` in the `app/packs/entrypoints` directory, then referencing them in the `_pre_head.html.erb` partial with `javascript_pack_tag` and `stylesheet_pack_tag`. Note that support for Webpacker has been deprecated in favor of Sprockets or Propshaft.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-asset-pipeline.md#_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript_pack_tag 'avo.custom', defer: true %>\n<%= stylesheet_pack_tag 'avo.custom', media: 'all' %>\n```\n\n----------------------------------------\n\nTITLE: Passing Gem Server Token as Build Argument in Dockerfile for Bundler Authentication\nDESCRIPTION: This Dockerfile snippet shows how to accept the BUNDLE_PACKAGER__DEV token as a build argument and inject it as an environment variable inside the container. This ensures bundler inside the Docker image uses the token during bundle install to authenticate to the private gem server. The ARG instruction receives the token from the build command, and ENV exposes it in the container environment. It expects the token to be passed explicitly at build time or sourced from the host environment.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/gem-server-authentication.md#_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ruby:3.2.2\nRUN apt-get update -qq && apt-get install -y nodejs postgresql-client\nWORKDIR /app\nCOPY Gemfile /app/Gemfile\nCOPY Gemfile.lock /app/Gemfile.lock\n\n# get the build argument\nARG BUNDLE_PACKAGER__DEV\n# make it available in the docker image\nENV BUNDLE_PACKAGER__DEV=$BUNDLE_PACKAGER__DEV\n\nRUN bundle install\nCOPY . /app\n# do more stuff\n```\n\n----------------------------------------\n\nTITLE: Index Component for Custom Field (ERB)\nDESCRIPTION: This ERB code defines the index view component for the `progress_bar` custom field. It displays the field's value within an Avo index field wrapper. It's a very basic implementation, showing the current value of the field in the index view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_4\n\nLANGUAGE: ERB\nCODE:\n```\n# app/components/avo/fields/progress_bar_field/index_component.html.erb\n<%= index_field_wrapper field: @field do %>\n  <%= @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Home Path in Avo\nDESCRIPTION: This snippet changes the default home path that the logo links to or that users visit at `/avo`, redirecting to a custom route such as `/avo/dashboard`. It is set via `config.home_path`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.home_path = \"/avo/dashboard\"\nend\n```\n\n----------------------------------------\n\nTITLE: Requiring chartkick Gem in Ruby Application\nDESCRIPTION: Ensures that the chartkick gem is included in your Gemfile to enable chart rendering on dashboards. Add the line below to your Gemfile; you must run `bundle install` afterward to install the dependency. This is mandatory for Avo dashboard chart features.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dashboards.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"chartkick\"\n```\n\n----------------------------------------\n\nTITLE: Install bundle\nDESCRIPTION: Executes the `bundle install` command to install the gems specified in the Gemfile.  This ensures that all required dependencies, including the `friendly_id` gem, are installed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/custom-ids.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Using `action` Helper Syntax in Ruby for Avo\nDESCRIPTION: Shows multiple usage patterns of the `action` helper to define actions with optional arguments, styles, colors, and icons in Ruby within Avo DSL. This snippet serves as a simple reference for different ways to invoke the `action` helper, illustrating argument passing and UI customization for action buttons. Does not directly register actions in resource, only used for display.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customizable-controls.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\naction Avo::Actions::DisableAccount\naction Avo::Actions::DisableAccount, arguments: { hide_some_fields: true }\naction Avo::Actions::ExportSelection, style: :text\naction Avo::Actions::PublishPost, color: :fuchsia, icon: \"heroicons/outline/eye\"\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Tabs Group - Ruby\nDESCRIPTION: Shows how to set a description on a tabs group using the 'description' option, providing additional context or instructions to users. The option is passed as an argument to the tabs block. Appears as a textual note or tooltip in the UI for the tab group. Requires Avo v3.15.0 or newer; only the string value for description is needed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/tabs.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ntabs description: \"Tabs group description\" do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Avo Resource Title from Attribute | Ruby\nDESCRIPTION: This snippet demonstrates setting the `self.title` class attribute in an Avo resource to a symbol corresponding to a model attribute (e.g., `:slug`). Avo will then use the value of this attribute on the record (`@post.slug`) as the title displayed in the UI for records of this resource type.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_25\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.title = :slug # it will now reference @post.slug to show the title\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Markers to Map View in Avo Resource Using Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to extend the map view by adding extra static markers on the map, independent from the resource records. The `extra_markers` lambda returns an array of hashes, each specifying latitude, longitude, label, tooltip, and color for markers. This feature requires Avo version 3.10.3 or higher and executes within the ExecutionContext, allowing for flexible marker additions such as highlighting geographic points of interest. Dependents include the same mapkick setup and environment prerequisites. The output enriches the map with additional user-defined markers.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/map-view.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nself.map_view = {\n  # ...\n  extra_markers: -> do\n    [\n      {\n        latitude: 37.780411,\n        longitude: -25.497047,\n        label: \"Açores\",\n        tooltip: \"São Miguel\",\n        color: \"#0F0\"\n      }\n    ]\n  end,\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Custom Profile Menu Partial in Avo\nDESCRIPTION: Shows the Rails command to eject the profile menu extra partial, which allows for fully customized content in the profile menu beyond the standard configuration options.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/menu-editor.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate avo:eject :profile_menu_extra\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Page Title with Instance Variable\nDESCRIPTION: Overrides the page title for custom tools or pages by assigning to `@page_title` in the controller. Utilizes meta-tags gem to set the browser tab title.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/customization.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::ToolsController < Avo::ApplicationController\n  def custom_tool\n    @page_title = \"Custom tool page title\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including Application Helper in Avo Tool Controller in Ruby\nDESCRIPTION: This Ruby snippet shows how to define a custom helper in app/helpers and include it in the Avo tools controller to make the helper available in tool views. The helper method returns a string and can be used in ERB templates. Prerequisites: Helper module defined in the correct path, Rails application with Avo. Inputs: None; Outputs: Helper method becomes accessible in dashboard view. No notable constraints.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/custom-tools.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/helpers/home_helper.rb\nmodule HomeHelper\n  def custom_helper\n    'hey from custom helper'\n  end\nend\n\n# app/controllers/avo/tools_controller.rb\nclass Avo::ToolsController < Avo::ApplicationController\n  helper HomeHelper\n\n  def dashboard\n    @page_title = \"Dashboard\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using avo_field Helper (ERB)\nDESCRIPTION: This snippet demonstrates the use of the `avo_field` helper to dynamically switch between `avo_show_field` and `avo_edit_field` based on the `view` option. The view option can be a symbol or a helper method return value.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/native-field-components.md#_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<%= avo_field :name, as: :text, view: :show %>\n<%= avo_field :name, as: :text, view: :edit %>\n<%= avo_field :name, as: :text, view: ExampleHelper.view_conditional %>\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Field Show Wrapper to Include Resource - ERB\nDESCRIPTION: This ERB code demonstrates how to update custom show field wrappers in Avo v2.8 and above to pass the 'resource: @resource' argument. This addresses changes made during Stimulus JS integration to ensure all necessary field context is available in the wrapper. Place inside custom field show partials; the change is required only for older custom fields lacking this parameter.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_15\n\nLANGUAGE: erb\nCODE:\n```\n<!-- Before -->\n<%= show_field_wrapper field: @field, index: @index do %>\n  <%= @field.value %>\n<% end %>\n\n<!-- After -->\n<%= show_field_wrapper field: @field, resource: @resource, index: @index do %>\n  <%= @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Adding Search Help Text to Resource Index\nDESCRIPTION: Provide helpful instructions to the user on the resource index page search bar using the `help` option within the `self.search` configuration. This lambda should return a string that will be displayed alongside the search input.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Post < Avo::BaseResource\n  self.search = {\n    query: -> { query.ransack(id_eq: params[:q], m: \"or\").result(distinct: false) },\n    help: -> { \"- search by id\" }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Boolean Filter for Avo in Ruby\nDESCRIPTION: Creates a custom boolean filter named 'Grace period' for Avo resources. It inherits from `Avo::Filters::BooleanFilter` and implements the `apply` method to modify the query based on the filter's boolean value (presumably adding a `where` clause). The `options` method defines the label displayed in the Avo UI for the filter.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/rest-api-integration.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass GracePeriod < Avo::Filters::BooleanFilter\n  self.name = 'Grace period'\n\n  def apply(_request, query, value)\n    query.where(value)\n  end\n\n  def options\n    {\n      grace_period: 'Within graceperiod'\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility for Order Buttons on Association View\nDESCRIPTION: Configures ordering buttons to appear only in association views, useful for ordering child records within the context of a parent record.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/records-reordering.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::CourseLink < Avo::BaseResource\n  self.ordering = {\n    visible_on: :association,\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Width for Index and All Views in Avo\nDESCRIPTION: These snippets control whether the main content and index view are full-width or constrained, via `full_width_index_view` and `full_width_container`. They require toggling boolean options to adapt the layout to content needs.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.full_width_index_view = false\n  config.full_width_container = false\nend\n```\n\n----------------------------------------\n\nTITLE: Renaming Turbo Instant Click Option - Ruby\nDESCRIPTION: This snippet shows the change in the `turbo` configuration option name from `instantclick` to `instant_click` for better naming consistency.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/upgrade.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.turbo = {\n  instantclick: true  # [!code --]\n  instant_click: true # [!code ++]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Select for Multiple Selections - Ruby\nDESCRIPTION: This Ruby snippet configures an Avo `Select` field (`:categories`) to allow users to select multiple options from the list. Setting `multiple: true` enables this functionality, typically used for fields that store an array or collection of values.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/select.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/avo/resources/project.rb\nclass Avo::Resources::Project < Avo::BaseResource\n  field :categories,\n    as: :select,\n    multiple: true\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Avo::PanelComponent without Options\nDESCRIPTION: This snippet shows a minimal example of rendering the `Avo::PanelComponent` without specifying any options. The panel is rendered, and content is added within the `with_body` block. This is a simplified example showing the use of slots.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/native-components/avo-panel-component.md#_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_body do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Using the Default `reload` Response in Avo Actions (Ruby)\nDESCRIPTION: Illustrates the `reload` response type in Avo actions, which triggers a full-page refresh after the action completes. Since `reload` is the default behavior, calling it explicitly is optional unless needed to override another specified response.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/actions/execution.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndef handle(query:, **args)\n  query.each do |project|\n    project.update active: false\n  end\n\n  succeed 'Done!'\n  reload # This is optional since reload is the default behavior\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Chartkick Gem to Gemfile in Ruby\nDESCRIPTION: Adds the 'chartkick' gem dependency to the project's Gemfile. This gem is required for creating JavaScript charts within Avo dashboards and must be manually added.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Create beautiful JavaScript charts with one line of Ruby\ngem \"chartkick\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Branding Colors (Alternative)\nDESCRIPTION: This code snippet shows an alternative way to configure the branding colors. It showcases several color palettes for different branding needs. It requires the Avo gem. The colors here follow a similar structure to the previous snippet but uses hex codes.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/branding.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.branding = {\n  colors: {\n    # BLUE\n    100 => \"#CEE7F8\",\n    400 => \"#399EE5\",\n    500 => \"#0886DE\",\n    600 => \"#066BB2\",\n    # RED\n    100 => \"#FACDD4\",\n    400 => \"#F06A7D\",\n    500 => \"#EB3851\",\n    600 => \"#E60626\",\n    # GREEN\n    100 => \"#C5F1D4\",\n    400 => \"#3CD070\",\n    500 => \"#30A65A\",\n    600 => \"#247D43\",\n    # ORANGE\n    100 => \"#FFECCC\",\n    400 => \"#FFB435\",\n    500 => \"#FFA102\",\n    600 => \"#CC8102\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using External Images in Grid Cover Position (Ruby)\nDESCRIPTION: This code snippet shows how to display an external image in the grid's `:cover` position, using the `cover` method and specifying the `:external_image` field. Similar to the previous example, it calculates the image URL using a computed value. The `link_to_record: true` option adds a link to the record. If there's an error during URL parsing or retrieval, the output becomes `nil`. Requires the `uri` dependency and integration with an Avo Grid view.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/external_image.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ncover :logo, as: :external_image, link_to_record: true do\n  \"//logo.clearbit.com/#{URI.parse(record.url).host}?size=180\"\nrescue\n  nil\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Avo Custom Field (Bash)\nDESCRIPTION: This bash command generates the necessary files for a new custom field named `progress_bar` within an Avo application. It creates component files for edit, index, and show views, and a field configuration file, all crucial for defining the behavior and presentation of the custom field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/custom-fields.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n▶ bin/rails generate avo:field progress_bar\n      create  app/components/avo/fields/progress_bar_field\n      create  app/components/avo/fields/progress_bar_field/edit_component.html.erb\n      create  app/components/avo/fields/progress_bar_field/edit_component.rb\n      create  app/components/avo/fields/progress_bar_field/index_component.html.erb\n      create  app/components/avo/fields/progress_bar_field/index_component.rb\n      create  app/components/avo/fields/progress_bar_field/show_component.html.erb\n      create  app/components/avo/fields/progress_bar_field/show_component.rb\n      create  app/avo/fields/progress_bar_field.rb\n```\n\n----------------------------------------\n\nTITLE: Setting BUNDLE_PACKAGER__DEV for Servers/CI\nDESCRIPTION: Demonstrates how to set the `BUNDLE_PACKAGER__DEV` environment variable using `export` or directly before the `bundle install` command. This method is recommended for servers and CI systems to provide the Gem Server Token to Bundler.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport BUNDLE_PACKAGER__DEV=xxx\n# or\nBUNDLE_PACKAGER__DEV=xxx bundle install\n```\n\n----------------------------------------\n\nTITLE: Implementing React Method in Course City Filter\nDESCRIPTION: Enhanced version of CourseCityFilter that reacts to other filters. When a country is selected, it automatically selects the first city from that country if the user hasn't made a selection.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/filters.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass CourseCityFilter < Avo::Filters::BooleanFilter\n  self.name = \"Course city filter\"\n\n  def apply(request, query, values)\n    query.where(city: values.select { |city, selected| selected }.keys)\n  end\n\n  def options\n    cities_for_countries countries\n  end\n\n  # applied_filters = {\n  #   \"CourseCountryFilter\" => {\n  #     \"USA\" => true,\n  #     \"Japan\" => true,\n  #     \"Spain\" => false,\n  #     \"Thailand\" => false,\n  #   }\n  # }\n  def react\n    # Check if the user selected a country\n    if applied_filters[\"CourseCountryFilter\"].present? && applied_filters[\"CourseCityFilter\"].blank?\n      # Get the selected countries, get their cities, and select the first one.\n      selected_countries = applied_filters[\"CourseCountryFilter\"].select do |name, selected|\n        selected\n      end\n\n      # Get the first city\n      cities = cities_for_countries(selected_countries.keys)\n      first_city = cities.first.first\n\n      # Return the first city as selected\n      [[first_city, true]].to_h\n    end\n  end\n\n  private\n\n  # Get a hash of cities for certain countries\n  # Example payload:\n  # countries = [\"USA\", \"Japan\"]\n  def cities_for_countries(countries_array = [])\n    countries_array\n      .map do |country|\n        # Get the cities for this country\n        Course.cities.stringify_keys[country]\n      end\n      .flatten\n      # Prepare to transform to a Hash\n      .map { |city| [city, city] }\n      # Turn to a Hash\n      .to_h\n  end\n\n  # Get the value of the selected countries\n  # Example `applied_filters` payload:\n  # applied_filters = {\n  #   \"CourseCountryFilter\" => {\n  #     \"USA\" => true,\n  #     \"Japan\" => true,\n  #     \"Spain\" => false,\n  #     \"Thailand\" => false,\n  #   }\n  # }\n  def countries\n    if applied_filters[\"CourseCountryFilter\"].present?\n      # Fetch the value of the countries filter\n      applied_filters[\"CourseCountryFilter\"]\n        # Keep only the ones selected\n        .select { |country, selected| selected }\n        # Pluck the name of the coutnry\n        .keys\n    else\n      # Return empty array\n      []\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Computed External Image URLs in Avo with Ruby\nDESCRIPTION: Defines an 'external_image' field 'logo' with a block to compute the image URL dynamically by extracting the host from a model URL and generating a Clearbit logo URL. Includes error handling to return nil if URL parsing fails. This requires Ruby's URI library and ensures image URLs are constructed based on model data on the fly, enabling more flexible and robust image sourcing.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/external_image.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :logo, as: :external_image do |model|\n  \"//logo.clearbit.com/#{URI.parse(model.url).host}?size=180\"\nrescue\n  nil\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing the main_panel in Avo configuration\nDESCRIPTION: Shows how to access the main_panel component which contains the resource name, description, buttons and other primary interface elements. This provides developers with control over the main panel's content and appearance.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/release-notes.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmain_panel\n```\n\n----------------------------------------\n\nTITLE: Enabling Spell Checker for EasyMDE Field in Ruby\nDESCRIPTION: Shows how to enable the spell checker option for an EasyMDE field. By default, spell checking is disabled, but it can be enabled by setting the spell_checker option to true.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/easy_mde.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :description, as: :easy_mde, spell_checker: true\n```\n\n----------------------------------------\n\nTITLE: Customizing Language Switcher Dropdown After Version 2.3.0\nDESCRIPTION: Provides ERB code modifications to add language-switching links within the profile dropdown, allowing users to toggle between English and Portuguese. Uses conditional logic based on the current locale to generate appropriate links and enhance user interface for multilingual support.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/multilingual-content.md#_snippet_3\n\nLANGUAGE: ERB\nCODE:\n```\n<% destroy_user_session_path = \"destroy_#{Avo.configuration.current_user_resource_name}_session_path\".to_sym %>\n\n<div <% if main_app.respond_to?(destroy_user_session_path) %> data-controller=\"toggle-panel\" <% end %>>\n  <a href=\"javascript:void(0);\" class=\"flex items-center cursor-pointer font-semibold text-gray-700\" data-action=\"click->toggle-panel#togglePanel\">\n    <% if _current_user.respond_to?(:avatar) &&  _current_user.avatar.present? %>\n      <%= image_tag _current_user.avatar, class: \"h-12 rounded-full border-4 border-white mr-1\" %>\n    <% end %>\n    <% if _current_user.respond_to?(:name) && _current_user.name.present? %>\n      <%= _current_user.name %>\n    <% elsif _current_user.respond_to?(:email) && _current_user.email.present? %>\n      <%= _current_user.email %>\n    <% else %>\n      Avo user\n    <% end %>\n    <% if main_app.respond_to?(destroy_user_session_path) %>\n      <%= svg 'chevron-down', class: \"ml-1 h-4\" %>\n    <% end %>\n  </a>\n\n  <% if main_app.respond_to?(destroy_user_session_path) %>\n    <div class=\"hidden absolute inset-auto right-0 mr-6 mt-0 py-4 bg-white rounded-xl min-w-[200px] shadow-context\" data-toggle-panel-target=\"panel\">\n      <!-- Language switch links based on current locale -->\n      <% classes = \"appearance-none bg-white text-left cursor-pointer text-green-600 font-semibold hover:text-white hover:bg-green-500 block px-4 py-1 w-full\" %>\n\n      <% if I18n.locale == :en %>\n        <%= link_to \"Switch to Portuguese\", { set_locale: 'pt-BR' }, class: classes %>\n      <% else %>\n        <%= link_to \"Switch to English\", { set_locale: 'en' }, class: classes %>\n      <% end %>\n\n      <%= button_to t('avo.sign_out'), main_app.send(:destroy_user_session_path), method: :delete, form: { \"data-turbo\" => \"false\" }, class: classes %>\n    </div>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Minimal Avo::PanelComponent with Only a Body (ERB)\nDESCRIPTION: Shows the minimal usage of Avo::PanelComponent, rendering it without any options (like title or description) and providing content only within the 'body' slot using the `with_body` helper.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-components/avo-panel-component.md#_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= render Avo::PanelComponent.new do |c| %>\n  <% c.with_body do %>\n    Something here.\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Renaming Badge Field Option in Avo Ruby DSL\nDESCRIPTION: Demonstrates how to rename the badge field option from `secondary` to `neutral` within Avo resource definitions. The snippet shows before and after configurations for `field :stage` using badges with status categories to reflect the new naming convention for color classifications.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/upgrade.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfield :stage,\n  as: :badge,\n  options: {\n    info: [:discovery, :idea],\n    success: :done,\n    warning: \"on hold\",\n    danger: :cancelled,\n    secondary: :drafting\n  }\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfield :stage,\n  as: :badge,\n  options: {\n    info: [:discovery, :idea],\n    success: :done,\n    warning: \"on hold\",\n    danger: :cancelled,\n    neutral: :drafting\n  }\n```\n\n----------------------------------------\n\nTITLE: Mapping resource field types to filter types - Ruby\nDESCRIPTION: This Ruby method maps different Avo field types to standardized dynamic filter types when using Avo versions below 3.10.0, where filters are not configurable per field. It uses a case statement to return the appropriate filter type symbol that corresponds to the field type, ensuring that the filter UI matches the data type. This is a core part of filter rendering logic for legacy versions.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/dynamic-filters.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ndef field_to_filter(type)\n  case type.to_sym\n  when :boolean\n    :boolean\n  when :date, :date_time, :time\n    :date\n  when :id, :number, :progress_bar\n    :number\n  when :select, :badge, :country, :status\n    :select\n  when :text, :textarea, :code, :markdown, :password, :trix\n    :text\n  else\n    :text\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Static Dashboard Name in Avo\nDESCRIPTION: Shows how to set a static name for an Avo dashboard using the self.name property.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/dashboards.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nself.name = \"Dashy\"\n```\n\n----------------------------------------\n\nTITLE: Using stacked layout for fields in Avo using Ruby\nDESCRIPTION: This code snippet demonstrates how to change the layout of a field wrapper to `stacked` using the `stacked` option. This uses the whole horizontal space available to display the field.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/field-options.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, as: :key_value, stacked: true\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Guide Lists with Vue\nDESCRIPTION: This HTML snippet uses Vue.js directives (`v-for`, `:href`) to render two lists of guides. The first list iterates over `data.v3` (imported recipes), applying text formatting. The second list iterates over the `articles` array, creating links that open in a new tab (`target=\"_blank\"`) and include an external link SVG icon.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ul>\n  <li v-for=\"recipe in data.v3\"><a :href=\"recipe.link\">{{recipe.text.replace('avo ', 'Avo ').replace('urls', 'URLs')}}</a></li>\n  <li v-for=\"guide in articles\">\n    <a :href=\"guide.link\" target=\"_blank\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-6 h-4 inline mr-1\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25\" /></svg>\n      {{guide.title}}\n    </a>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing RoleResource for role management\nDESCRIPTION: Define the RoleResource class to manage Role records through Avo, specifying the title attribute and relationship with accounts.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/recipes/rolify-integration.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass RoleResource < Avo::BaseResource\n  self.title = :name\n  self.includes = []\n\n  field :name, as: :text\n  field :accounts, as: :has_and_belongs_to_many\nend\n```\n\n----------------------------------------\n\nTITLE: Using stacked layout for fields in Ruby\nDESCRIPTION: Changes the field wrapper layout to stacked instead of inline, allowing a field to use the full horizontal width of the container.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-options.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nfield :meta, as: :key_value, stacked: true\n```\n\n----------------------------------------\n\nTITLE: Providing Context File URL for Claude Bash\nDESCRIPTION: This snippet provides a URL pointing to a file (`llms.txt`) that contains context and instructions for the Claude AI model. The content of this file is intended to be copied and pasted into an AI prompt to help Claude generate accurate Avo code based on user requirements.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/claude.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://avohq.io/llms.txt\n```\n\n----------------------------------------\n\nTITLE: Enabling ViewComponent Instrumentation in Rails\nDESCRIPTION: This snippet shows how to activate ViewComponent instrumentation by setting a configuration flag in Rails environment files. It requires adding `config.view_component.instrumentation_enabled = true` to either `application.rb` or `development.rb`. This step enables the collection of performance data for ViewComponent rendering, necessary for subsequent logging.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/views-performance.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# application.rb or development.rb\nconfig.view_component.instrumentation_enabled = true\n```\n\n----------------------------------------\n\nTITLE: Additional Layout and Styling Options in Field Wrapper\nDESCRIPTION: Illustrates how to use 'style' to apply custom CSS, 'view' to specify display context, and 'stacked' to arrange label and value vertically. These options facilitate tailored visual presentation for specific fields.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/field-wrappers.md#_snippet_5\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, style: \"background: red\" do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, view: \"show\" do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= field_wrapper **field_wrapper_args, stacked: true do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Fetching Avo LLM Context in Zed Text Chat (Bash)\nDESCRIPTION: Command to fetch the Avo LLM context file (`llms.txt`) within Zed's Text thread chat interface using the `/fetch` command. This equips Zed with the context needed for generating Avo code from prompts in the text chat.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/zed.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/fetch https://avohq.io/llms.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Search Results Count Per Resource in Avo with Static Value - Ruby\nDESCRIPTION: Configures the number of search results displayed for the User resource by statically assigning results_count within the search hash. This number overrides the global configuration for this specific resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::User < Avo::BaseResource\n  self.search = {\n    results_count: 5\n    query: -> {},\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Trix Editor JavaScript Alert Messages in YAML\nDESCRIPTION: This YAML snippet shows how to override or translate JavaScript alert messages related to file attachments behavior in the Trix editor. It provides predefined keys for disabling attachments, preventing uploads on unsaved records, and warning about missing attachment keys in the Trix field configuration. This customization allows better localization and user feedback control in the editor interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/trix.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\navo:\n  this_field_has_attachments_disabled: This field has attachments disabled.\n  you_cant_upload_new_resource: You can't upload files into the Trix editor until you save the resource.\n  you_havent_set_attachment_key: You haven't set an `attachment_key` to this Trix field.\n```\n\n----------------------------------------\n\nTITLE: Formatting Textarea with white-space class - Ruby\nDESCRIPTION: This snippet demonstrates formatting the content of a textarea field in Avo using the `whitespace-pre-line` class. This is used to render new lines.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/faq.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Avo::Resources::Comment < Avo::BaseResource\n  def fields\n    field :body,\n      as: :textarea,\n      format_using: -> do\n        content_tag(:div, class: 'whitespace-pre-line') { value }\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Edit Field in Partial using Avo::EditField ERB\nDESCRIPTION: Demonstrates the basic usage of the `avo_edit_field` helper within a custom Rails partial (like a resource tool partial). It renders an editable Avo field by specifying its name (`:name`) and type (`as: :text`), assuming the field is defined in the associated Avo resource.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/native-field-components.md#_snippet_2\n\nLANGUAGE: ERB\nCODE:\n```\n<!-- In your partial file -->\n<%= avo_edit_field :name, as: :text %>\n```\n\n----------------------------------------\n\nTITLE: Using a Proc with explicit_authorization\nDESCRIPTION: Shows how to use a Proc with explicit_authorization to apply custom logic for handling missing policies.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.explicit_authorization = -> {\n  current_user.access_to_admin_panel? && !current_user.admin?\n}\n```\n\n----------------------------------------\n\nTITLE: Running Avo Docs Locally using Yarn (Bash)\nDESCRIPTION: Installs project dependencies using Yarn and starts the VitePress development server. This command makes the documentation site accessible locally, typically at http://localhost:3011/.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install && yarn dev\n```\n\n----------------------------------------\n\nTITLE: Using URL Helpers - Ruby\nDESCRIPTION: This snippet shows how to use Rails URL helpers within an Avo field definition. Since Avo runs as a Rails engine, the `main_app` prefix is needed to correctly resolve the route.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/faq.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :partner_home, as: :text, as_html: true do\n  link_to 'Partner', main_app.partner_home_url(record)\nend\n```\n\n----------------------------------------\n\nTITLE: Renaming resolve_query_scope to index_query in Avo resource config for Ruby\nDESCRIPTION: This snippet instructs renaming the resource scope resolution method from 'resolve_query_scope' with block argument 'model_class' to 'index_query' with no block arguments. The block's internal variable name changes from 'model_class' to 'query'. This change standardizes the query customization method and simplifies the block signature for better integration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/avo-2-avo-3-upgrade.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nself.resolve_query_scope = ->(model_class:) do\n  model_class.order(last_name: :asc)\nend\n\n# After\nself.index_query = -> do\n  query.order(last_name: :asc)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix to an Avo Metric Card Value in Ruby\nDESCRIPTION: Demonstrates adding a `prefix` (e.g., '$') and a `suffix` (e.g., '%') to the displayed numerical value of a `UsersMetric` card for enhanced formatting and context. These are set as class attributes on the card definition.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/dashboards.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.prefix = '$'\n  self.suffix = '%'\nend\n```\n\n----------------------------------------\n\nTITLE: Add Pundit gem to Gemfile\nDESCRIPTION: This snippet adds the Pundit gem to the Gemfile, enabling minimal authorization through object-oriented design and pure Ruby classes. You must manually require `pundit` or your authorization library in your `Gemfile`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/authorization.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Minimal authorization through OO design and pure Ruby classes\ngem \"pundit\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Model\nDESCRIPTION: This Ruby code defines a basic User model. It will be used as a base model to create a user resource on Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/resources.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Defining BaseHost in Ruby\nDESCRIPTION: This Ruby code defines the `BaseHost` class, a fundamental component of Avo's meta-programming framework. It inherits from `Dry::Initializer`, providing a structured way to define and manage dependencies. The `BaseHost` holds state, including context, parameters, view context, and the current user, enabling dynamic execution of blocks with relevant contextual information. It uses `instance_exec` to execute the passed block within the context of the host object.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/evaluation-hosts.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"dry-initializer\"\n\n# This object holds some data that is usually needed to compute blocks around the app.\nmodule Avo\n  module Hosts\n    class BaseHost\n      extend Dry::Initializer\n\n      option :context, default: proc { Avo::App.context }\n      option :params, default: proc { Avo::App.params }\n      option :view_context, default: proc { Avo::App.view_context }\n      option :current_user, default: proc { Avo::App.current_user }\n      # This is optional because we might instantiate the `Host` first and later hydrate it with a block.\n      option :block, optional: true\n      delegate :authorize, to: Avo::Services::AuthorizationService\n\n      def handle\n        instance_exec(&block)\n      end\n    end\n  end\nend\n\n# Use it like so.\nAvo::Hosts::BaseHost.new(block: &some_block).handle\n```\n\n----------------------------------------\n\nTITLE: Generate Avo resource tool\nDESCRIPTION: This command utilizes the Rails generator to create a new Avo resource tool named `nested_fish_reviews`. This tool will be used for managing the nested reviews within the `Fish` resource.  The command will generate the necessary files for the resource tool, including the ruby file and the template partial.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/nested-records-when-creating.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbin/rails generate avo:resource_tool nested_fish_reviews\n```\n\n----------------------------------------\n\nTITLE: Adding Tags and Taggings Resources in Rails\nDESCRIPTION: This Ruby code snippet defines the necessary resources for tags and taggings within a Rails application. It uses the `resource` keyword to declare routes for these resources, enabling browsing and management of tags and their associations.  This snippet is essential for making tags accessible as resources within the application's routing system.  It assumes the `acts-as-taggable-on` gem is already installed and configured.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/act-as-taggable-on-integration.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nresource :taggings\nresource :tags\n```\n\n----------------------------------------\n\nTITLE: Specifying pre-release Avo gem version\nDESCRIPTION: Illustrates how to specify a pre-release version of the Avo gem in the Gemfile. This allows developers to test pre-release versions before they are pushed to the main branch. Ensure you specify the version exactly as shown.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/faq.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\n\n# ... other gems\n\ngem 'avo', '1.19.1.pre.1'\n```\n\n----------------------------------------\n\nTITLE: Defining User model with has_many comments association (Ruby)\nDESCRIPTION: This snippet declares a 'has_many' association from User to Comment. It establishes the relationship but does not include any default scoping, allowing further filtering via query modifications or resource configuration.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/common/scopes_common.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\n  has_many :comments\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Prefixed IDs Gem (Ruby)\nDESCRIPTION: This snippet shows how to install the prefixed_ids gem.  The gem adds a custom prefix to your model IDs.  The code involves adding the gem to the Gemfile and running `bundle install`.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/guides/custom-ids.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"prefixed_ids\"\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Bash\nDESCRIPTION: This bash command runs the database migrations for a Ruby on Rails application. It uses the Rails command-line interface to apply pending migrations to the database. It requires a configured Rails environment with a database connection. The output is the execution of the migrations, updating the database schema and preparing the database for Solid Cache.  The specific migrations run depend on what migrations are pending.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cache.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Index Field Wrapper Component Usage in ERB\nDESCRIPTION: Shows how to render the index view field wrapper using the helper or component, with options for blank content display, centering, and padding control. It provides example code snippets demonstrating option configuration and usage for controlling display behavior in index views.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/field-wrappers.md#_snippet_0\n\nLANGUAGE: ERB\nCODE:\n```\n<%= index_field_wrapper **field_wrapper_args, dash_if_blank: false do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= index_field_wrapper **field_wrapper_args, center_content: true do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<%= index_field_wrapper **field_wrapper_args, flush: false do %>\n  <%= render Avo::Fields::Common::BooleanCheckComponent.new checked: @field.value %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Adding ActiveStorage and Image Processing Gems to Gemfile in Ruby\nDESCRIPTION: This snippet shows how to add ActiveStorage and Image Processing gems to your Gemfile. ActiveStorage enables file uploads and referencing, while Image Processing provides image manipulation capabilities for various image processors.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/files_gem_common.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Active Storage makes it simple to upload and reference files\ngem \"activestorage\"\n\n# High-level image processing wrapper for libvips and ImageMagick/GraphicsMagick\ngem \"image_processing\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Search Provider for a Resource\nDESCRIPTION: For custom search providers like Elasticsearch, or when full control is needed, the `query` block should return an array of hashes. Each hash represents a search result and must include `_id`, `_label`, and `_url`. Optional keys like `_description`, `_avatar`, and `_avatar_type` are available in Avo Pro.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/search.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Avo::Resources::Project < Avo::BaseResource\n  self.search = {\n    query: -> do\n      [\n        { _id: 1, _label: \"Record One\", _url: \"https://example.com/1\" },\n        { _id: 2, _label: \"Record Two\", _url: \"https://example.com/2\" },\n        { _id: 3, _label: \"Record Three\", _url: \"https://example.com/3\" }\n      ]\n    end\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Structuring Field Option Documentation (Markdown)\nDESCRIPTION: Defines the standard Markdown structure for documenting options within a field's documentation page. It utilizes a custom `<Option>` tag, requiring sections for a description, code samples, images, default value, and possible values for clarity and consistency.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/readme.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Option name=\"`OPTION_NAME_IN_CODE_BLOCK`\">\n\nShort description of the feature.\n\nCode samples here.\n\nImages here.\n\n##### Default value\n\n`THE_VALUE_IN_CODE_BLOCKS`\n\n#### Possible values\n\nSome possible values if they are known (`true`, `false`, `\" \"` `\"on\"`, `\"off\"`, etc.) or a text description about them.\n\n</Option>\n```\n\n----------------------------------------\n\nTITLE: Kamal Secrets File Configuration\nDESCRIPTION: Provides an example of how to define the `BUNDLE_PACKAGER__DEV` secret within Kamal's `.kamal/secrets` file.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/gem-server-authentication.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# However you set your secrets in Kamal\nBUNDLE_PACKAGER__DEV=xxx\n```\n\n----------------------------------------\n\nTITLE: Installing and Migrating Solid Cache with Bash\nDESCRIPTION: Provides Bash commands to install the `solid_cache` gem using Bundler or RubyGems and then run the necessary Rails database migrations. These steps set up the database tables required for Solid Cache persistence. Requires Bundler and a configured Rails database.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/cache.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gem install solid_cache\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails solid_cache:install:migrations\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Describing `format` Option for Date Fields\nDESCRIPTION: This section explains the purpose of the `format` option, which determines how date values are displayed on the index and show pages. It defaults to `yyyy-LL-dd` and accepts formatting tokens from the `luxon` library, enabling customizable date formats based on international standards.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/fields/date.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configuring Rails Routes for Custom Tag Suggestion Endpoint - Ruby\nDESCRIPTION: Shows how to add a custom route to the Rails and Avo routing configurations to enable the tags suggestion API endpoint. Must be placed in the 'routes.rb' file, nested under the Avo engine and optionally restricted to authenticated admin users. This setup exposes '/avo/resources/skills/skills_for_user' as a GET endpoint.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/fields/tags.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # your routes\n\n  authenticate :user, ->(user) { user.is_admin? } do\n    mount Avo::Engine, at: Avo.configuration.root_path\n  end\nend\n\nif defined? ::Avo\n  Avo::Engine.routes.draw do\n    scope :resources do\n      # Add route for the skills_for_user action\n      get \"skills/skills_for_user\", to: \"skills#skills_for_user\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Description\nDESCRIPTION: Example of adding a description to a tabs group to provide additional information about the content.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/tabs.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ntabs description: \"Tabs group description\" do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Hiding External Image Field Label for Team Resource CSS\nDESCRIPTION: This CSS snippet hides the label of an `external_image` field with the ID \"logo\" on the `Team` resource in Avo. It targets the element containing the label using data attributes and sets its display property to `none`. This is useful for displaying images like logos without the associated field label.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/hide-field-labels.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n[data-resource-name=\"TeamResource\"] [data-field-type=\"external_image\"][data-field-id=\"logo\"] [data-slot=\"label\"]{\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Avo Heading Field with Label Ruby\nDESCRIPTION: Defines a Heading field using the `label` option. This explicitly sets the text content displayed for the heading, overriding the default behavior of using the field name.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/fields/heading.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfield :some_id, as: :heading, label: \"user information\"\n```\n\n----------------------------------------\n\nTITLE: Hiding Card Headers in Ruby\nDESCRIPTION: Example of hiding the header section of a card to allow content to fill the entire card area.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cards.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersMetric < Avo::Dashboards::MetricCard\n  self.id = 'users_metric'\n  self.display_header = false\nend\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to Show View Label Placeholder - Ruby\nDESCRIPTION: Shows the basic structural placeholder for adding HTML attributes to the `label` element of a field in the `show` view using the object notation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/html.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  show: {\n    label: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pundit Gem for Authorization in Ruby\nDESCRIPTION: This snippet shows how to include the Pundit gem in the Gemfile to enable minimal authorization capability using object-oriented design and pure Ruby classes. Adding this gem is a prerequisite for using Pundit-based authorization within Avo.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/authorization.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"pundit\"\n```\n\n----------------------------------------\n\nTITLE: Edit Content Target in Avo Field\nDESCRIPTION: This code snippet configures an Avo field to use a Stimulus.js target for the content area of the edit view. It sets up the `name` field as a text input and specifies that the edit view should utilize a content target for customization.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/stimulus-integration.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  edit: {\n    content: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Audit Logging Gem\nDESCRIPTION: Add the audit logging gem to your Gemfile and install it via bundle command.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/audit-logging/overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem \"avo-audit_logging\", source: \"https://packager.dev/avo-hq/\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Fetching Avo LLM Context in Zed Thread Chat (Bash)\nDESCRIPTION: Command to fetch the Avo LLM context file (`llms.txt`) within Zed's Thread chat interface using the `@fetch` command. This provides Zed with the necessary information to generate Avo code based on subsequent prompts in the chat.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/4.0/editor/zed.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@fetch https://avohq.io/llms.txt\n```\n\n----------------------------------------\n\nTITLE: Adding Solid Cache Gem in Ruby\nDESCRIPTION: This snippet provides instructions on how to add the Solid Cache gem to your Rails application using Bundler. It requires the user to add the gem to the Gemfile and then execute `bundle` to install it and its dependencies. It assumes Ruby and Rails environment.  The expected output is the successful installation of the 'solid_cache' gem, making it available to the application.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/cache.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"solid_cache\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache for Resources on Index View in Avo\nDESCRIPTION: This snippet disables caching of resource rows or grid items for performance testing or dynamic content reasons using `config.cache_resources_on_index_view`. It’s recommended to disable only when fields visibility depends on user roles.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/customization.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nAvo.configure do |config|\n  config.cache_resources_on_index_view = false\nend\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to Index View Wrapper Placeholder - Ruby\nDESCRIPTION: Shows the basic structural placeholder for adding HTML attributes to the `wrapper` element of a field in the `index` view using the object notation.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/html.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfield :name, as: :text, html: {\n  index: {\n    wrapper: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring License Request Timeout Error Display in Ruby\nDESCRIPTION: Configure whether to show or hide the badge displaying license request timeout errors. This setting defaults to true but can be disabled for a cleaner interface.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/licensing.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/avo.rb\nAvo.configure do |config|\n  config.display_license_request_timeout_error = false\nend\n```\n\n----------------------------------------\n\nTITLE: Install bundle - Prefixed IDs\nDESCRIPTION: Executes the `bundle install` command to install the gems specified in the Gemfile.  This ensures that all required dependencies, including the `prefixed_ids` gem, are installed.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/3.0/guides/custom-ids.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Possible Boolean Values in AVO HQ Configuration\nDESCRIPTION: Lists the possible values for a boolean configuration option in AVO HQ, which are true and false.\nSOURCE: https://github.com/avo-hq/docs.avohq.io/blob/main/docs/2.0/common/default_boolean_false.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ntrue, false\n```"
  }
]