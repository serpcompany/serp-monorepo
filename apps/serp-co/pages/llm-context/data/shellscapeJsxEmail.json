[
  {
    "owner": "shellscape",
    "repo": "jsx-email",
    "content": "TITLE: Installing JSX Email CLI using NPM\nDESCRIPTION: Command to install and execute create-jsx-email, which scaffolds a new project for developing email templates.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/quick-start.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npm create jsx-email\n```\n\n----------------------------------------\n\nTITLE: Creating Email Template Directory and File\nDESCRIPTION: Shell commands to create a directory for email templates and generate a new template file using the JSX Email CLI.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/quick-start.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir ./emails\n$ email create BatmanEmail --out=./emails\n```\n\n----------------------------------------\n\nTITLE: Integrating JSX Email with Resend\nDESCRIPTION: This code shows how to render a JSX email template and send it using Resend. It emphasizes using JSX Email's render method instead of Resend's built-in react support to take advantage of JSX Email's advanced features.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/email-providers.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from 'jsx-email';\nimport { Resend } from 'resend';\n\nimport { Template } from './emails/Batman.tsx';\n\nconst resend = new Resend('re_123456789');\nconst template = <Template firstName=\"Bruce\" lastName=\"Wayne\" />;\nconst html = await render(template);\n\nresend.sendEmail({\n  from: 'penguin@joker.us',\n  html,\n  to: 'bruce@wayneinc.com',\n  subject: 'Did you get that thing I sent you?'\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering JSX Email Template to HTML using jsx-email\nDESCRIPTION: This snippet demonstrates how to use the render function from jsx-email to convert a JSX email template to HTML. It imports the render function and a Template component, then renders the template with props.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/render.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'jsx-email';\n\nimport { Template } from './emails/Batman';\n\nconst html = await render(<Template firstName=\"Bruce\" lastName=\"Wayne\" />);\n```\n\n----------------------------------------\n\nTITLE: Building Email Template\nDESCRIPTION: Command to build an email template into an HTML document using the JSX Email CLI.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/quick-start.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ email build ./emails/BatmanEmail.tsx\n```\n\n----------------------------------------\n\nTITLE: Building Deployable Preview Apps with JSX Email CLI\nDESCRIPTION: Shows how to build templates into a deployable preview app that can be hosted anywhere, specifying the templates path and the desired build output location.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/cli.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ email preview <templates-path> --build-path <build-path>\n```\n\n----------------------------------------\n\nTITLE: Compiling JSX Email Templates with jsx-email in Node.js\nDESCRIPTION: This snippet demonstrates how to use the 'compile' function from jsx-email to compile email templates. It reads a template file, specifies an output directory, and compiles the templates into a bundle.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/compile.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { readFile } from 'node:fs/promises;';\nimport { resolve } from 'node:path';\n\nimport { compile } from 'jsx-email/compile';\n\nconst templatePath = resolve(__dirname, './emails/Batman');\nconst outDir = resolve(__dirname, '.compiled');\n\nconst compiledFiles = await compile({ files: [templatePath], hashFiles: false, outDir });\n```\n\n----------------------------------------\n\nTITLE: Integrating JSX Email with Nodemailer\nDESCRIPTION: This code demonstrates how to render a JSX email template and send it using Nodemailer. It shows the setup of an SMTP transport and sending an email with the rendered HTML content.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/email-providers.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from 'jsx-email';\nimport nodemailer from 'nodemailer';\n\nimport { Template } from './emails/Batman.tsx';\n\nconst html = render(<Template firstName=\"Bruce\" lastName=\"Wayne\" />);\nconst transport = nodemailer.createTransport({\n  host: 'smtp.forwardemail.net',\n  port: 465,\n  secure: true,\n  auth: {\n    user: 'batman',\n    pass: 'j0ker$mells!1'\n  }\n});\n\nawait transport.sendMail({\n  from: 'penguin@joker.us',\n  to: 'bruce@wayneinc.com',\n  subject: 'Did you get that thing I sent you?',\n  html: html\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Email Component Template in JSX\nDESCRIPTION: This code defines a reusable email component template that accepts props and can be customized. It demonstrates the basic structure for creating components in the jsx-email framework, including proper typing with TypeScript and default export setup.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/packages/create-jsx-email/generators/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\n\nexport type ComponentProps = {\n  children: React.ReactNode;\n};\n\nexport const Component = ({ children }: ComponentProps) => {\n  return <div>{children}</div>;\n};\n\nexport default Component;\n```\n\n----------------------------------------\n\nTITLE: Checking Email Client Compatibility with JSX Email CLI\nDESCRIPTION: Shows how to use the check command to run compatibility checks on email templates, comparing them to compatibility tables from caniuse.com to identify client compatibility issues.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/cli.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ email check ./emails/Batman.tsx\n```\n\nLANGUAGE: console\nCODE:\n```\nChecking email template for Client Compatibility...\n\nFound 1 files:\n   ./emails/Batman.tsx\n\nStarting build...\n\nBuild complete\n\n./emails/Batman.tsx\n\n  error  Class selector is not supported by:\n           gmail.mobile-webmail\n           protonmail.desktop-webmail\n           protonmail.ios\n\n  error  border-radius is not supported by:\n           outlook.windows\n           outlook.windows-mail\n\n  ...\n\n  warn  target attribute is only partially supported by:\n          apple-mail.macos\n          apple-mail.ios\n          outlook.windows\n          outlook.windows-mail\n          outlook.ios\n          outlook.android\n\nCheck Complete: 14 error(s), 20 warning(s)\n```\n\n----------------------------------------\n\nTITLE: Using HTML Component in JSX Email Templates\nDESCRIPTION: Example showing how to use the HTML component as a root element in an email template with styling. It demonstrates importing both HTML and Button components and applying custom styling.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/html.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Html } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\" dir=\"ltr\">\n      <Button href=\"https://example.com\" style={{ color: '#61dafb' }}>\n        Click me\n      </Button>\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information with JSX Email CLI\nDESCRIPTION: Shows the output of the JSX Email CLI when invoked without parameters, displaying available commands, options and usage examples.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/cli.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nâ†’ pnpm exec email\n\njsx-email v0.0.0\n\nA CLI for working with Email Templates made with jsx-email\n\nUsage\n  $ email [...options]\n\nCommands\n  build       <template file or dir path>\n  check       <template file path>\n  create      <template name>\n  help        [<command>]\n  preview     <template dir path>\n\nOptions\n  --help      Displays this message\n  --version   Displays the current jsx-email version\n\nExamples\n  $ email\n  $ email --help\n  $ email build ./src/templates/Invite.tsx\n  $ email create invite\n  $ email preview ./src/templates\n```\n\n----------------------------------------\n\nTITLE: Explaining Render Method Options in TypeScript\nDESCRIPTION: These TypeScript snippets provide detailed explanations for each option in the render method. They cover disabling default styles, inlining CSS, minifying output, generating plain text, and prettifying the HTML.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/render.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ndisableDefaultStyle?: boolean;\n```\n\nLANGUAGE: ts\nCODE:\n```\ninlineCss?: boolean;\n```\n\nLANGUAGE: ts\nCODE:\n```\nminify?: boolean;\n```\n\nLANGUAGE: ts\nCODE:\n```\nplainText?: boolean  | PlainTextOptions;\n```\n\nLANGUAGE: ts\nCODE:\n```\npretty?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Integrating JSX Email with AWS SES\nDESCRIPTION: This code demonstrates how to render a JSX email template and send it using AWS SES (Simple Email Service). It shows the process of converting a React component to HTML and structuring it for AWS SES's SendEmailCommand.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/email-providers.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from 'jsx-email';\nimport { SESv2Client, SendEmailCommand } from '@aws-sdk/client-sesv2';\n\nimport { Template } from './emails/Batman.tsx';\n\nconst ses = new SESv2Client({ region: process.env.AWS_SES_REGION });\nconst html = await render(<Template firstName=\"Bruce\" lastName=\"Wayne\" />);\n\nawait ses.send(\n  new SendEmailCommand({\n    FromEmailAddress: 'penguin@joker.us',\n    Destination: {\n      ToAddresses: ['bruce@wayneinc.com']\n    },\n    Content: {\n      Simple: {\n        Body: {\n          Html: {\n            Charset: 'UTF-8',\n            Data: html\n          }\n        },\n        Subject: {\n          Charset: 'UTF-8',\n          Data: 'Did you get that thing I sent you?'\n        }\n      }\n    }\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Render Method Options Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the options that can be passed to the render method. It includes options for disabling default styles, inlining CSS, minifying output, generating plain text, and prettifying the HTML.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/render.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport interface Options {\n  disableDefaultStyle?: boolean;\n  inlineCss?: boolean;\n  minify?: boolean;\n  plainText?: boolean | PlainTextOptions;\n  pretty?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Email Configuration Properties Interface\nDESCRIPTION: TypeScript interface showing available configuration properties including esbuild plugins, log levels, and render options.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/config.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nesbuild?: {\n  plugins?: Plugin[]\n}\n\nlogLevel?: 'debug' | 'info' | 'warn' | 'error';\n\nplugins?: JsxEmailPlugin[];\n\nrender?: RenderOptions;\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Component in JSX Email Templates\nDESCRIPTION: Example showing how to use the Conditional component within a JSX Email template to conditionally render content specifically for Microsoft Outlook (MSO).\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/conditional.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Conditional, Head } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Head>\n      <Conditional mso={true}>\n        <meta content=\"batman\" />\n      </Conditional>\n    </Head>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Compiled JSX Email Templates with jsx-email\nDESCRIPTION: This example shows how to import a compiled template and render it using the 'render' function from jsx-email. It highlights the usage of compiled templates and mentions potential adjustments needed for TypeScript projects.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/compile.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Template } from './.compiled/batman.js';\n\nimport { render } from 'jsx-email';\n\nconst html = render(<Template />);\n```\n\n----------------------------------------\n\nTITLE: JSX Email TypeScript Intellisense Configuration\nDESCRIPTION: Example showing how to leverage TypeScript intellisense using JSDoc type hints.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/config.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/** @type {import('jsx-email/config').JsxEmailConfig} */\nexport const config = { ... };\n```\n\n----------------------------------------\n\nTITLE: Using Section Component with JSX Email\nDESCRIPTION: Demonstrates how to use the Section component in two ways: a simple section with text and a formatted section with rows and columns. Shows integration with other components like Column, Row, and Text.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/section.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Column, Row, Section, Text } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <>\n      {/* A simple `section` */}\n      <Section>\n        <Text>Hello World</Text>\n      </Section>\n\n      {/* Formatted with `rows` and `columns` */}\n      <Section>\n        <Row>\n          <Column>Column 1, Row 1</Column>\n          <Column>Column 2, Row 1</Column>\n        </Row>\n        <Row>\n          <Column>Column 1, Row 2</Column>\n          <Column>Column 2, Row 2</Column>\n        </Row>\n      </Section>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins with defineConfig\nDESCRIPTION: Example of how to use the defineConfig function to specify plugins in a configuration file for jsx-email.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'jsx-email/config';\nimport { somePlugin } from './plugins/some-plugin';\n\nexport const config = defineConfig({\n  plugins: [somePlugin]\n});\n```\n\n----------------------------------------\n\nTITLE: New Button Component Implementation Example\nDESCRIPTION: Example of the new Button component that uses props instead of inline styles. This approach ensures better compatibility across email clients and creates more maintainable code with the same visual result.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/v2/button.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  width={300}\n  height={64}\n  backgroundColor={'#ff5a5f'}\n  borderRadius={3}\n  textColor={'#fff'}\n  fontSize={18}\n  href=\"#\"\n>\n  Click Me!\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Converting Default Exports to Named Exports in jsx-email Templates\nDESCRIPTION: Example showing how to migrate from default exports to named exports in jsx-email v2. This change affects the template component, template name, and default props for preview.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/v2/migration.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MyTemplate({ ... }) {\n  ...\n};\n\nMyTemplate.Name = 'MyTemplate';\n\nMyTemplate.PreviewProps = { ... };\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const previewProps = { ... };\n\n// Displayed in the navigation of the Preview app\nexport const templateName = 'MyTemplate';\n\nexport const Template = ({ ... }) => {\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Render Hook Function Type Definition\nDESCRIPTION: TypeScript type definition for the render hook functions (afterRender and beforeRender) used in jsx-email plugins.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(params: RenderHookParams) => string | Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Using Font Component in JSX Email Templates\nDESCRIPTION: An example of how to implement the Font component in a JSX email template. The component is placed inside the Head tag to apply the specified font to all elements in the email, with configuration for a web font and fallback options.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/font.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Font, Head, Html } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\">\n      <Head>\n        <Font\n          fontFamily=\"Roboto\"\n          fallbackFontFamily=\"Verdana\"\n          webFont={{\n            url: 'https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2',\n            format: 'woff2'\n          }}\n          fontWeight={400}\n          fontStyle=\"normal\"\n        />\n      </Head>\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Container Component in JSX Email\nDESCRIPTION: Example showing how to use the Container component to wrap and center a Button component in an email template. The example demonstrates basic usage with custom styling.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/container.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Container } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Container>\n      <Button href=\"https://example.com\" style={{ color: '#61dafb' }}>\n        Click me\n      </Button>\n    </Container>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Text Component in JSX Email\nDESCRIPTION: This example demonstrates how to import and use the Text component from jsx-email in an email template to render a paragraph of text.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/text.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from 'jsx-email';\n\nconst Email = () => {\n  return <Text>Lorem ipsum</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Compile Function Options in jsx-email\nDESCRIPTION: This snippet outlines the additional options available for the compile function in jsx-email. It includes options for specifying input files, controlling file hashing, setting the output directory, and writing metadata.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/compile.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nfiles: string[];\n\nhashFiles?: boolean;\n\noutDir: string;\n\nwriteMeta?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Container Component Props Type Definition\nDESCRIPTION: TypeScript definition for the Container component props, showing the disableDefaultStyle optional boolean property that controls whether default styles are applied.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/container.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndisableDefaultStyle?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Using Column Component with Row in JSX Email\nDESCRIPTION: Basic example showing how to implement a three-column layout using the Column and Row components from jsx-email library. This creates a horizontal arrangement of content sections labeled A, B, and C.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/column.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Column, Row } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Row>\n      <Column>A</Column>\n      <Column>B</Column>\n      <Column>C</Column>\n    </Row>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Button Component in JSX Email Templates\nDESCRIPTION: A basic example of how to import and use the Button component in an email template, creating a styled button with specified width, height, and link.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/button.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Button width={160} height={60} href=\"https://jsx.email\" target=\"_blank\">\n      JOIN US\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Previewing Email Templates with JSX Email CLI\nDESCRIPTION: Demonstrates how to use the preview command to start a preview tool for viewing email templates in a browser, which supports static local assets and works with monorepos out of the box.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/cli.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/email-app\n$ email preview ./emails\n```\n\n----------------------------------------\n\nTITLE: Using the Head Component in JSX Email Templates\nDESCRIPTION: Example of how to import and use the Head component in an email template. This demonstrates adding a title element as a child of the Head component.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/head.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Head } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Head>\n      <title>My email title</title>\n    </Head>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Building Email Templates with JSX Email CLI\nDESCRIPTION: Demonstrates how to use the build command to compile and render email templates to HTML for use with email providers, showing examples for both directory and single file input.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/cli.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/email-app\n$ email build ./emails\n```\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/email-app\n$ email build ./emails/Batman.tsx\n```\n\n----------------------------------------\n\nTITLE: Button Component TypeScript Interface Definition\nDESCRIPTION: TypeScript interface for the Button component props, extending the base anchor element props with custom styling options specific for email rendering.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/button.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ButtonProps extends BaseProps<'a'> {\n  width: number;\n  height: number;\n  href?: string;\n  align?: 'left' | 'center' | 'right';\n  backgroundColor?: string;\n  borderColor?: string;\n  borderRadius?: number;\n  borderSize?: number;\n  fontSize?: number;\n  textColor?: string;\n  withBackground?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Heading Component in JSX Email Template\nDESCRIPTION: Demonstrates how to import and use the Heading component in a JSX email template. The example shows rendering a level 2 heading.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/heading.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Heading } from 'jsx-email';\n\nconst Email = () => {\n  return <Heading as=\"h2\">Lorem ipsum</Heading>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Row Component with Columns and Section in JSX Email\nDESCRIPTION: This example demonstrates how to use the Row component in a jsx-email template. The code shows how to structure content using Section, Row, and Column components to create horizontal content boundaries.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/row.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Column, Row, Section } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Section>\n      <Row>\n        <Column>A</Column>\n      </Row>\n      <Row>\n        <Column>B</Column>\n      </Row>\n      <Row>\n        <Column>C</Column>\n      </Row>\n    </Section>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Hr Component in JSX Email Template\nDESCRIPTION: Example showing how to import and use the Hr component in a JSX email template to create a horizontal divider.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/hr.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Hr } from 'jsx-email';\n\nconst Email = () => {\n  return <Hr />;\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating JSX Email with Postmark\nDESCRIPTION: This snippet demonstrates rendering a JSX email template and sending it through the Postmark API. It initializes a Postmark ServerClient with an API key and sends an email with the rendered HTML content.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/email-providers.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from 'jsx-email';\nimport { ServerClient } from 'postmark';\n\nimport { Template } from './emails/Batman.tsx';\n\nconst client = new ServerClient(process.env.POSTMARK_API_KEY);\nconst html = render(<Template firstName=\"Bruce\" lastName=\"Wayne\" />);\n\nclient.sendEmail({\n  From: 'penguin@joker.us',\n  To: 'bruce@wayneinc.com',\n  Subject: 'Did you get that thing I sent you?',\n  HtmlBody: html\n});\n```\n\n----------------------------------------\n\nTITLE: Row Component Props TypeScript Definition\nDESCRIPTION: TypeScript definition for the Row component props. It shows the disableDefaultStyle property which allows disabling default styles, useful when using custom styling solutions like Tailwind.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/row.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ndisableDefaultStyle?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output from ColorScheme Component\nDESCRIPTION: The HTML output generated when using the ColorScheme component with 'light only' mode. It includes meta tags and CSS styles that define the color scheme for email clients.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/color-scheme.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <meta name=\"color-scheme\" content=\"light only\" />\n    <meta name=\"supported-color-schemes\" content=\"light only\" />\n    <style>\n      :root {\n        color-scheme: light only;\n        supported-color-schemes: light only;\n      }\n    </style>\n  </head>\n  <body></body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Component with JSX Email\nDESCRIPTION: Example showing how to use the Tailwind component to wrap email content and apply custom theme configuration with brand colors.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/tailwind.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Tailwind } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Tailwind\n      config={{\n        theme: {\n          extend: {\n            colors: {\n              brand: '#007291'\n            }\n          }\n        }\n      }}\n    >\n      <Button\n        href=\"https://example.com\"\n        className=\"bg-brand px-3 py-2 font-medium leading-4 text-white\"\n      >\n        Click me\n      </Button>\n    </Tailwind>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: HTML with Class-based CSS Before Inlining\nDESCRIPTION: Example HTML showing CSS defined in a style tag with class selector before transformation.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/plugins/inline.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .batman {\n    border: 1px solid black;\n  }\n</style>\n<div class=\"batman\">batcave</div>\n```\n\n----------------------------------------\n\nTITLE: Basic JSX Email Configuration\nDESCRIPTION: Basic configuration example showing how to use defineConfig to set rendering options.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/config.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'jsx-email/config';\n\nexport const config = defineConfig({\n  render: { minify: true }\n});\n```\n\n----------------------------------------\n\nTITLE: Tailwind Component Props Interface\nDESCRIPTION: TypeScript interface definition for the Tailwind component props, including config and production options.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/tailwind.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TailwindProps {\n  config?: UnoCssConfig;\n  production?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Images with Dynamic Base URL in JSX Email\nDESCRIPTION: Shows how to use local images during development and switch to production URLs, using a dynamic base URL approach.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/image.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Img } from 'jsx-email';\n\nconst baseUrl = import.meta.isJsxEmailPreview ?\n  ? '/assets/'\n  : 'https://assets.example.com/';\n\nconst Email = () => {\n  return <Img src={`${baseUrl}cat.jpg`} alt=\"Cat\" width=\"300\" height=\"300\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Tailwind Production Prop Type\nDESCRIPTION: Type definition for the production prop which enables class name hashing for better email client compatibility.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/tailwind.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nproduction?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Conditional Component Props Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the available props for the Conditional component, including children, expression, and mso options.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/conditional.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConditionalProps {\n  children?: React.ReactNode;\n  expression?: string;\n  mso?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using React context with JSX Email\nDESCRIPTION: How to use React context functionality with JSX Email by importing context helpers from jsx-email instead of from React.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createContext, useContext } from 'jsx-email';\n```\n\n----------------------------------------\n\nTITLE: Using Link Component in JSX Email Templates\nDESCRIPTION: Example of importing and using the Link component from jsx-email to create a hyperlink to an external resource in an email template.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/link.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'jsx-email';\n\nconst Email = () => {\n  return <Link href=\"https://example.com\">Example</Link>;\n};\n```\n\n----------------------------------------\n\nTITLE: Text Component Props Definition in TypeScript\nDESCRIPTION: This TypeScript definition shows the available props for the Text component. It includes the disableDefaultStyle prop which can be used to avoid default styles when using Tailwind or custom class names.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/text.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndisableDefaultStyle?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Link Component disableDefaultStyle Prop Definition\nDESCRIPTION: TypeScript definition for the disableDefaultStyle prop which allows disabling default styles when using with Tailwind or class names.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/link.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndisableDefaultStyle?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Image Component Props in JSX Email\nDESCRIPTION: Defines the TypeScript types for the props of the Img component, including alt text, disable default style option, height, src, and width.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/image.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nalt?: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndisableDefaultStyle?: boolean;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nheight?: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsrc?: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nwidth?: string;\n```\n\n----------------------------------------\n\nTITLE: Implementing Graph Component in JSX Email Template\nDESCRIPTION: Example showing how to implement a bar graph in an email template using the Graph component. Demonstrates basic setup with chart configuration including labels and dataset values.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/graph.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html, Body, Section, Graph } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\">\n      <Body>\n        <Section>\n          <Graph\n            width={100}\n            height={100}\n            title=\"Graph with jsx-email\"\n            config={{\n              type: 'bar',\n              data: {\n                labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n                datasets: [\n                  {\n                    data: [10, 6.5, 3, 6, 4, 0.1, 0.5]\n                  }\n                ]\n              }\n            }}\n          />\n        </Section>\n      </Body>\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Link Component target Prop Definition\nDESCRIPTION: TypeScript definition for the optional target prop which specifies the target attribute for the link.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/link.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntarget?: string;\n```\n\n----------------------------------------\n\nTITLE: Button Component Props Definition in TypeScript\nDESCRIPTION: TypeScript interface defining all available props for the new Button component. The width and height props are required, while others like alignment, colors, and styling are optional but recommended for better email client compatibility.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/v2/button.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nwidth: number;\nheight: number;\nhref?: string;\nalign?: 'left' | 'center' | 'right';\nbackgroundColor?: string;\nborderColor?: string;\nborderRadius?: number;\nborderSize?: number;\nfontSize?: number;\ntextColor?: string;\nwithBackground?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Using Body Component in JSX Email Templates\nDESCRIPTION: Example of using the Body component to structure email content with styling and nested components. The Body component wraps email content and allows applying styles like background color, with Section and Column components to create layout structure.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/body.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Body, Column, Html, Section } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\">\n      <Body style={{ backgroundColor: '#61dafb' }}>\n        <Section>\n          <Column style={{ width: '50%' }}>{/* First column */}</Column>\n          <Column style={{ width: '50%' }}>{/* Second column */}</Column>\n        </Section>\n      </Body>\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Styles Prop Type Definition for Markdown Component\nDESCRIPTION: Type definition for the markdownCustomStyles prop. Enables custom styling for individual markdown elements like headings and code blocks when rendered as HTML.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/markdown.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nmarkdownCustomStyles?: StylesType;\n```\n\n----------------------------------------\n\nTITLE: Font Component Props Interface Definition\nDESCRIPTION: TypeScript interface defining the props available for the Font component. Includes required properties like fontFamily and fallbackFontFamily, as well as optional properties for font styling and web font configuration.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/font.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FontProps {\n  fallbackFontFamily: FallbackFont | FallbackFont[];\n  fontFamily: string;\n  fontStyle?: FontStyle;\n  fontWeight?: FontWeight;\n  webFont?: {\n    format: FontFormat;\n    url: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using ColorScheme Component in JSX Email\nDESCRIPTION: Example showing how to implement the ColorScheme component within a jsx-email template. The component is placed in the Head section with a 'light only' mode setting.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/color-scheme.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Body, ColorScheme, Head, Html } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Html>\n      <Head>\n        <ColorScheme mode=\"light only\" />\n      </Head>\n      <Body></Body>\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Graph Component Config Type Definition\nDESCRIPTION: TypeScript type definition for the config prop of the Graph component, which extends ChartConfiguration with additional properties.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/graph.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconfig: ChartConfiguration & Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: ColorScheme Mode Prop Definition\nDESCRIPTION: TypeScript definition for the mode prop of the ColorScheme component, which accepts various color scheme settings. The default value is 'normal'.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/color-scheme.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmode?: ColorSchemeMode;\n```\n\n----------------------------------------\n\nTITLE: ColorScheme Component Props Interface\nDESCRIPTION: TypeScript interface defining the props accepted by the ColorScheme component. It contains an optional mode property for specifying the color scheme.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/color-scheme.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ColorSchemeProps {\n  mode?: Mode;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Background Component in JSX Email Template\nDESCRIPTION: Example showing how to implement a Background component in an email template with jsx-email. The component allows adding a background image with fallback color and custom dimensions.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/background.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Body, Column, Html, Section } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\">\n      <Body>\n        <Background src=\"link-to-image\" bgColor=\"#FFFFFF\" width={600}>\n          <Row>\n            <Column>Content goes here</Column>\n          </Row>\n        </Background>\n      </Body>\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Code Component in JSX Email Template\nDESCRIPTION: Example showing how to implement the Code component in an email template to display syntax-highlighted code. The example demonstrates importing and using the component with a JavaScript code block.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/code.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Code>\n      {`\n      import { batman } from 'superheros';\n      import { joker } from 'villains';\n\n      const henchmen = joker.help();\n\n      batman.fight(henchmen);\n      batman.arrest(joker);\n    `}\n    </Code>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Head Component Props Interface Definition\nDESCRIPTION: TypeScript interface that defines the props for the Head component. It extends the BaseProps for the HTML head element and adds an optional enableFormatDetection property.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/head.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface HeadProps extends BaseProps<'head'> {\n  enableFormatDetection?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Code Component Theme Prop Type Definition\nDESCRIPTION: TypeScript type definition for the optional theme prop, which defaults to 'nord'. Used to specify the color theme for syntax highlighting.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/code.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntheme?: string;\n```\n\n----------------------------------------\n\nTITLE: HTML Component Language Prop Definition\nDESCRIPTION: TypeScript definition for the lang prop of the HTML component, which identifies the language of text content in the email.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/html.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nlang?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Interface in TypeScript\nDESCRIPTION: The TypeScript interface that defines the structure of a jsx-email plugin, specifying the required properties and optional hook functions.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface JsxEmailPlugin {\n  afterRender?: RenderHookFn;\n  beforeRender?: RenderHookFn;\n  name: string;\n  process?: ProcessHookFn;\n  symbol: typeof pluginSymbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Preview Component in JSX Email\nDESCRIPTION: Example of how to import and use the Preview component from jsx-email in an email template. The Preview component allows you to set the email preview text that appears in email clients before the email is opened.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/preview.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Preview } from 'jsx-email';\n\nconst Email = () => {\n  return <Preview>Email preview text</Preview>;\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Preview Server\nDESCRIPTION: Command to start the development preview server for the JSX email project.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/packages/create-jsx-email/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Container Component in JSX-Email\nDESCRIPTION: This example demonstrates how to import and use the Container component with default styling in a JSX-Email template.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/include/header.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Container } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Container>\n      <p>Email content goes here</p>\n    </Container>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Component in JSX Email\nDESCRIPTION: Example of how to use the Markdown component in jsx-email to render markdown content in an email template. Shows two ways to provide markdown content and how to apply custom styles to different markdown elements.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/markdown.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html, Markdown } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\" dir=\"ltr\">\n      <Markdown\n        markdownCustomStyles={{\n          h1: { color: 'red' },\n          h2: { color: 'blue' },\n          codeInline: { background: 'grey' }\n        }}\n        markdownContainerStyles={{\n          padding: '12px',\n          border: 'solid 1px black'\n        }}\n      >{`# Hello, World!`}</Markdown>\n\n      {/* OR */}\n\n      <Markdown children={`# This is a ~~strikethrough~~`} />\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Butan Component in JSX Email\nDESCRIPTION: Example of how to import and use the deprecated Butan component in a JSX Email template. This example shows how to create a button with custom styles and a link to a URL.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/butan.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Butan } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Butan href=\"https://example.com\" style={{ color: '#61dafb', padding: '10px 20px' }}>\n      Click me\n    </Butan>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Image Component in JSX Email\nDESCRIPTION: Demonstrates how to import and use the Img component from jsx-email to display an image in an email template.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/image.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Img } from 'jsx-email';\n\nconst Email = () => {\n  return <Img src=\"cat.jpg\" alt=\"Cat\" width=\"300\" height=\"300\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Source Property Definition\nDESCRIPTION: Definition of the required src property for the Background component which specifies the image path.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/background.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nsrc: string;\n```\n\n----------------------------------------\n\nTITLE: Expression Prop for Conditional Component\nDESCRIPTION: Description of the expression prop which allows specifying custom conditional expressions for HTML comments in email templates.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/conditional.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexpression?: string;\n```\n\n----------------------------------------\n\nTITLE: Background Repeat Property Definition\nDESCRIPTION: Definition of the optional bgRepeat property for controlling image repetition behavior.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/background.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nbgRepeat?: 'repeat' | 'no-repeat';\n```\n\n----------------------------------------\n\nTITLE: MSO Prop for Conditional Component\nDESCRIPTION: Description of the mso prop which allows targeting Microsoft Outlook specifically through conditional comments, with options for positive or negative targeting.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/conditional.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmso?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Column Component Props Interface Definition\nDESCRIPTION: TypeScript interface definition for the Column component props, extending the base props for HTML td elements. It adds specific properties for email-specific styling like bgColor and bgImage.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/column.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface ColumnProps extends BaseProps<'td'> {\n  bgColor?: string;\n  bgImage?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Describing the fallbackFontFamily prop\nDESCRIPTION: Explanation of the fallbackFontFamily prop which specifies alternative fonts to use when the web font is not supported or available in the email client.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/font.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfallbackFontFamily: FallbackFont | FallbackFont[];\n```\n\n----------------------------------------\n\nTITLE: Old Butan Component Implementation Example\nDESCRIPTION: Example of the deprecated Butan component that uses inline styles via the style prop. This approach is less compatible with email clients like Outlook and results in less maintainable code.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/v2/button.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Butan\n  style={{\n    backgroundColor: '#ff5a5f',\n    borderRadius: '3px',\n    color: '#fff',\n    fontSize: '18px',\n    textDecoration: 'none',\n    textAlign: 'center' as const,\n    display: 'block',\n    width: '300px',\n    padding: '19px 0px'\n  }}\n  href=\"#\"\n>\n  Click Me!\n</Butan>\n```\n\n----------------------------------------\n\nTITLE: Graph Component Background Prop Definition\nDESCRIPTION: TypeScript type definition for the optional background prop of the Graph component.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/graph.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nbackground?: string;\n```\n\n----------------------------------------\n\nTITLE: Head Prop for Conditional Component\nDESCRIPTION: Description of the head prop that determines if the conditional expression should be placed in the head section of the email template.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/conditional.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nhead?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Background Component TypeScript Interface Definition\nDESCRIPTION: TypeScript interface definition for the Background component props, extending React td element props with custom properties for background image configuration.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/background.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface BackgroundProps\n  extends Omit<React.ComponentPropsWithoutRef<'td'>, 'height' | 'width' | 'bgcolor'> {\n  src: string;\n  bgColor?: string;\n  bgRepeat?: 'repeat' | 'no-repeat';\n  height?: number;\n  width?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Heading Component Props in TypeScript\nDESCRIPTION: Defines the TypeScript interfaces and types for the Heading component props. Includes Margin interface for various margin properties and PresentAs type for heading levels.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/heading.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Margin {\n  m?: number | string;\n  mb?: number | string;\n  ml?: number | string;\n  mr?: number | string;\n  mt?: number | string;\n  mx?: number | string;\n  my?: number | string;\n}\n\nexport type PresentAs = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n\nexport type HeadingProps = Margin & { as?: PresentAs };\n```\n\n----------------------------------------\n\nTITLE: Head Component enableFormatDetection Prop Definition\nDESCRIPTION: Detailed explanation of the enableFormatDetection optional boolean prop for the Head component. This prop controls whether the format-detection meta tag is disabled.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/head.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nenableFormatDetection?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Margin Shorthand in TypeScript\nDESCRIPTION: Defines TypeScript types for margin shorthand properties used in the Heading component.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/heading.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nm?: number | string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmx?: number | string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmy?: number | string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmt?: number | string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmr?: number | string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmb?: number | string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nml?: number | string;\n```\n\n----------------------------------------\n\nTITLE: Column bgImage Prop Definition\nDESCRIPTION: TypeScript definition for the bgImage prop of the Column component. This property sets background images by wrapping the background property of HTML td elements in email templates.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/column.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nbgImage: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Options Interface for jsx-email Compile Function\nDESCRIPTION: This TypeScript interface defines the available options for the compile function in jsx-email. It includes options for disabling default styles, inlining CSS, minification, plain text conversion, and pretty printing.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/compile.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport interface Options {\n  disableDefaultStyle?: boolean;\n  inlineCss?: boolean;\n  minify?: boolean;\n  plainText?: boolean | PlainTextOptions;\n  pretty?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Butan target Prop Type Definition\nDESCRIPTION: Type definition for the optional target prop of the Butan component. This prop specifies the value of the target attribute for the underlying anchor element.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/butan.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntarget?: string;\n```\n\n----------------------------------------\n\nTITLE: Describing the fontFamily prop\nDESCRIPTION: Explanation of the fontFamily prop which defines the primary font to use in the email. When using a web font, this should match the name of that font.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/font.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfontFamily: string;\n```\n\n----------------------------------------\n\nTITLE: Integrating JSX Email with Mailersend\nDESCRIPTION: This snippet shows how to render a JSX email template and send it through the Mailersend API. It demonstrates creating sender and recipient objects, and configuring email parameters with the rendered HTML content.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/email-providers.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from 'jsx-email';\nimport { MailerSend, EmailParams, Sender, Recipient } from 'mailersend';\n\nimport { Template } from './emails/Batman.tsx';\n\nconst mailerSend = new MailerSend({\n  apiKey: process.env.MAILERSEND_API_KEY || ''\n});\n\nconst html = render(<Template firstName=\"Bruce\" lastName=\"Wayne\" />);\nconst sentFrom = new Sender('penguin@joker.us', 'Copperpot');\nconst recipients = [new Recipient('bruce@wayneinc.com', 'Bruce Wayne')];\n\nconst params = new EmailParams()\n  .setFrom(sentFrom)\n  .setTo(recipients)\n  .setSubject('This is a Subject')\n  .setHtml(html);\n\nmailerSend.email.send(params);\n```\n\n----------------------------------------\n\nTITLE: Describing the fontStyle prop\nDESCRIPTION: Explanation of the optional fontStyle prop with a default value of 'normal'. This prop sets the style of the font used in the email.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/font.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfontStyle?: FontStyle;`\n```\n\n----------------------------------------\n\nTITLE: Markdown Component Props Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the props for the Markdown component. Includes the required children prop for markdown content and optional styling props for customization.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/markdown.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport interface MarkdownProps {\n  children: string;\n  markdownContainerStyles?: React.CSSProperties;\n  markdownCustomStyles?: StylesType;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating JSX Email with Sendgrid\nDESCRIPTION: This snippet demonstrates how to render a JSX email template and send it via Sendgrid. It shows setting up the Sendgrid API key and sending an email with the rendered HTML content.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/email-providers.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from 'jsx-email';\nimport sendgrid from '@sendgrid/mail';\n\nimport { Template } from './emails/Batman.tsx';\n\nsendgrid.setApiKey(process.env.SENDGRID_API_KEY);\n\nconst html = render(<Template firstName=\"Bruce\" lastName=\"Wayne\" />);\n\nsendgrid.send({\n  from: 'penguin@joker.us',\n  to: 'bruce@wayneinc.com',\n  subject: 'Did you get that thing I sent you?',\n  html: html\n});\n```\n\n----------------------------------------\n\nTITLE: Hr Component Props TypeScript Definition\nDESCRIPTION: TypeScript definition of the Hr component props, showing the disableDefaultStyle boolean option that can be used to remove default styling.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/hr.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndisableDefaultStyle?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Integrating JSX Email with Plunk\nDESCRIPTION: This code shows how to render a JSX email template and send it through the Plunk API. It initializes a Plunk client with an API key and sends an email with the rendered HTML in the body field.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/email-providers.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from 'jsx-email';\nimport Plunk from '@plunk/node';\n\nimport { Template } from './emails/Batman.tsx';\n\nconst plunk = new Plunk(process.env.PLUNK_API_KEY);\n\nconst html = render(<Template firstName=\"Bruce\" lastName=\"Wayne\" />);\n\nplunk.emails.send({\n  from: 'penguin@joker.us',\n  to: 'bruce@wayneinc.com',\n  subject: 'Did you get that thing I sent you?',\n  body: html\n});\n```\n\n----------------------------------------\n\nTITLE: Background Color Property Definition\nDESCRIPTION: Definition of the optional bgColor property for specifying a fallback background color.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/background.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nbgColor?: string;\n```\n\n----------------------------------------\n\nTITLE: Using JSX Email CLI with Package Managers\nDESCRIPTION: Commands to use JSX Email CLI with different package managers without global installation.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/quick-start.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm dlx email <command>\n```\n\n----------------------------------------\n\nTITLE: Importing Templates with Named Exports in jsx-email\nDESCRIPTION: Examples demonstrating how to import templates using the new named exports pattern in jsx-email v2, including single template import and handling multiple templates with import aliases.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/v2/migration.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Template } from './template';\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Template as BatmanTemplate } from './batman';\nimport { Template as JokerTemplate } from './joker';\n```\n\n----------------------------------------\n\nTITLE: Graph Component ClassName Prop Definition\nDESCRIPTION: TypeScript type definition for the optional className prop used for custom styling.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/graph.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nclassName?: string;\n```\n\n----------------------------------------\n\nTITLE: Resolving Next.js build errors with server components and props\nDESCRIPTION: A solution to work around Next.js build errors when using JSX Email. This approach imports server actions into server components first and passes them as props to client components to avoid the 'await isn't allowed in non-async function' error.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// page.jsx\nimport { MyForm } from './MyForm';\nimport { myEmailAction } from './myEmailAction';\n\nexport async function Page() {\n  return <MyForm action={myEmailAction} />;\n}\n\n// MyForm.jsx\n'use client';\nexport function MyForm({ action }) {\n  // Note the passing of `action` as a prop\n  return <form action={action}>...</form>;\n}\n\n// myEmailAction.js\n'use server';\nimport { render } from 'jsx-email';\nimport { MyEmail } from '@/emails/MyEmail';\n\nexport async function myEmailAction() {\n  const body = await render(<MyEmail />);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Component Width Prop Definition\nDESCRIPTION: TypeScript type definition for the optional width prop that sets graph width in pixels.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/graph.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nwidth?: number;\n```\n\n----------------------------------------\n\nTITLE: JSX Email Configuration File Locations\nDESCRIPTION: List of supported configuration file paths and extensions that jsx-email will look for when initializing.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/config.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.config/jsx-emailrc.js\n.config/jsx-emailrc.cjs\n.config/jsx-emailrc.mjs\n.config/jsx-email.config.js\n.config/jsx-email.config.cjs\n.config/jsx-email.config.mjs\n.jsx-emailrc.js\n.jsx-emailrc.cjs\n.jsx-emailrc.mjs\njsx-email.config.js\njsx-email.config.cjs\njsx-email.config.mjs\n```\n\n----------------------------------------\n\nTITLE: Disabling ESM Externals in Next.js config\nDESCRIPTION: Configuration to turn off esmExternals in Next.js to allow direct import of server actions that use jsx-email into client components, avoiding build errors.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    esmExternals: false\n  }\n};\n\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: JSX Email Async Configuration Examples\nDESCRIPTION: Multiple examples of implementing async configuration using Promises and async functions.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/config.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = (async () => { ... })();\n\n// Or\n\nexport const config = new Promise((resolve, reject) => { ... })\n\n// Or\n\nexport const config = defineConfig(async () => {\n  const data = await asyncFunction()\n  return {\n    ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Inline Package Reference\nDESCRIPTION: Reference to the @jsx-email/plugin-minify package name which is used to minify HTML email output. The plugin is automatically loaded when the minify render option is enabled.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/plugins/minify.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n@jsx-email/plugin-minify\n```\n\n----------------------------------------\n\nTITLE: Running Email Preview Server\nDESCRIPTION: Command to start the JSX Email preview server for MacOS and Linux, which allows viewing email templates in a browser.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/quick-start.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ email preview ./emails\n```\n\n----------------------------------------\n\nTITLE: Container Component with Custom Styling and Alignment\nDESCRIPTION: This example shows how to customize the Container component with specific styling and alignment properties.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/include/header.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Container } from 'jsx-email';\n\nconst Email = () => {\n  return (\n    <Container style={{ background: '#f5f5f5' }} align=\"right\">\n      <p>Right-aligned email content with custom background</p>\n    </Container>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing New JSX Email Project\nDESCRIPTION: Command to create a new JSX email project using npm. Creates a new folder called email-project with the necessary project setup.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/packages/create-jsx-email/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create jsx-email\n```\n\n----------------------------------------\n\nTITLE: Installing jsx-email with npm\nDESCRIPTION: Command to install the jsx-email package using npm package manager.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/include/install.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm add jsx-email\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Container Component Props\nDESCRIPTION: The TypeScript interface definition for the Container component's props, showing the available customization options including style and alignment.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/include/header.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ContainerProps extends React.ComponentPropsWithoutRef<'div'> {\n  align?: 'left' | 'center' | 'right';\n  style?: React.CSSProperties;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing jsx-email with yarn\nDESCRIPTION: Command to install the jsx-email package using yarn package manager.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/include/install.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nyarn add jsx-email\n```\n\n----------------------------------------\n\nTITLE: Children Prop Type Definition for Markdown Component\nDESCRIPTION: Type definition for the children prop of the Markdown component. Accepts either a single string or an array of strings containing markdown content.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/markdown.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nchildren: string | string[];\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: This command installs all package dependencies in the monorepo using pnpm workspace management.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/include/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing jsx-email with bun\nDESCRIPTION: Command to install the jsx-email package using the bun package manager.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/include/install.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nbun add jsx-email\n```\n\n----------------------------------------\n\nTITLE: Rendering Timeline Component in Vue.js\nDESCRIPTION: This snippet renders the timeline component, including the title block and individual timeline events. It uses v-for to iterate over the processed data and dynamically styles elements based on their position in the timeline.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/changelog.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<div :class=\"$style.timeline\">\n    <div :class=\"$style.container\">\n        <div :class=\"$style.timeline__wrapper\">\n            <div :class=\"$style.timeline__titleblock\">\n                <h2 :class=\"$style.timeline__titleblock_title\">Changelog</h2>\n                <p :class=\"$style.timeline__titleblock_desc\">Explore the latest contributions to jsx-email </p>\n                <a href=\"https://github.com/shellscape/jsx-email/pulls?q=is%3Apr+is%3Aclosed+is%3Amerged\" target=\"_blank\" :class=\"$style.button\">View on Github</a>\n            </div>\n            <div :class=\"$style.timeline__bar\" />\n            <template v-for=\"([day, event], index) in data\">\n                <div :class=\"$style.timeline__event\" :style=\"{\n                    marginLeft: index % 2 === 0 ? '-8px': '8px',\n                    transform: `translateX(${ index % 2 === 0 ? 50: -50}%)`,\n                    flexDirection:  index % 2 === 0 ? 'row': 'row-reverse',\n                    textAlign: index % 2 === 0 ? 'left': 'right'\n                    }\">\n                    <div :class=\"$style.timeline__point\" />\n                    <div :class=\"$style.timeline__content_wrapper\">\n                        <p :class=\"$style.timeline__date\">{{ new Date(day).toLocaleString('en-us', { year: 'numeric', month: 'short', day: 'numeric' })}}</p>\n                        <div v-for=\"entry in event\" :class=\"$style.timeline__content\">\n                            <a :href=\"entry.author.url\" target=\"_blank\" :class=\"$style.timeline__pr_author\" :style=\"{\n                                alignSelf: index % 2 === 0 ? 'flex-start': 'flex-end',\n                            }\">\n                            <img :class=\"$style.timeline__pr_authorimg\" :src=\"entry.author.img\"/>\n                            {{entry.author.name}}</a>\n                            <div :class=\"$style.timeline__pr\">\n                            #{{entry.pr.number}}: <a :href=\"entry.pr.url\" target=\"_blank\" :class=\"$style.timeline__pr_title\">{{entry.pr.title}}</a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </template>\n            <a href=\"https://github.com/shellscape/jsx-email/pulls?q=is%3Apr+is%3Aclosed+is%3Amerged\" target=\"_blank\" :class=\"$style.button\" :style=\"{marginBottom: '1em'}\" >View all on Github</a>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands to navigate to the project directory and install required dependencies using pnpm package manager.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/packages/create-jsx-email/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd email-project\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Container Styles Prop Type Definition for Markdown Component\nDESCRIPTION: Type definition for the markdownContainerStyles prop. Allows applying custom CSS styles to the div container that wraps the markdown content.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/markdown.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nmarkdownContainerStyles?: React.CSSProperties;\n```\n\n----------------------------------------\n\nTITLE: Styling Timeline Component with CSS Modules in Vue.js\nDESCRIPTION: This snippet defines the styles for the timeline component using CSS modules. It includes responsive design, animations, and custom styling for various elements of the timeline.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/changelog.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style module>\n.button{\n    border-radius: 5px !important;\n    font-size: inherit;\n    font-weight: 500;\n    padding: 0.1em 2em;\n    border-color: var(--vp-button-brand-border);\n    color: var(--vp-button-brand-text);\n    background-color: var(--vp-button-brand-bg);\n    line-height: 38px;\n    z-index: 1;\n}\n\n.timeline {\n    width: 100vw;\n    height: calc(100vh - 80px);\n    overflow: hidden;\n}\n\n.container {\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n}\n\n.timeline__wrapper{\n    width: 100%;\n    position: relative;\n    display: flex;\n    gap: 32px;\n    flex-direction: column;\n    padding: 12px 0;\n    align-items: center;\n    justify-content: center;\n}\n\n@media (max-width: 640px){\n    .timeline__wrapper{\n        align-items: flex-start;\n        padding: 16px;\n    }\n}\n\n.timeline__bar {\n    height: 100%;\n    width: 0.125rem;\n    background: #565656;\n    position: absolute;\n    top: 0;\n    left: 50%;\n    right: 50%;\n    margin-left: -1px;\n    flex-shrink: 0;\n}\n\n@media (max-width: 640px){\n    .timeline__bar{\n        left: 16px;\n    }\n}\n\n.timeline__titleblock {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: .5rem;\n    background: rgba(44,42,43, 1);\n    z-index: 1;\n    padding: 24px 16px;\n    border-radius: 12px;\n    margin: 0 auto;\n    margin-bottom: 2rem;\n}\n\n.timeline__titleblock_title{\n    font-size: 1.875rem !important;\n    line-height: 2.25rem;\n    font-weight: 700 !important;\n}\n\n@media (min-width: 1024px){\n    .timeline__titleblock_title {\n        font-size: 3rem !important;\n        line-height: 1;\n    }\n}\n\n@media (min-width: 640px) {\n    .timeline__titleblock_title {\n        font-size: 2.25rem !important;\n    line-height: 2.5rem;\n    }\n}\n\n\n.timeline__titleblock_desc {\n    margin-bottom: 1rem;\n}\n\n.timeline__event{\n    display: flex;\n    align-items: flex-start;\n    gap: 32px;\n    position: relative;\n    width: 50%;\n}\n\n@media (max-width: 640px){\n    .timeline__event{\n        width: 100%;\n        gap: 16px;\n        margin-left: -4px !important;\n        transform: translateX(0%) !important;\n        flex-direction: row !important;\n        text-align: left !important;\n    }\n}\n\n.timeline__point {\n    height: 8px;\n    width: 8px;\n    background: #565656;\n    border-radius: 1000px;\n    z-index: 1;\n    margin-top: 8px;\n    box-shadow: 0px 0px 2px 2px #565656;\n}\n\n.timeline__content_wrapper{\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.timeline__content {\n    display: flex;\n    flex-direction: column;\n    transition-property: opacity;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 500ms;\n    opacity: 1;\n    margin-bottom: 20px;\n}\n\n.timeline__date{\n    flex-shrink: 0;\n    font-size: 0.875rem;\n    line-height: 1.5rem;\n    font-weight: 600;\n    color: #8E8373;\n}\n\n.timeline__version{\n    font-size: 1.875rem;\n    line-height: 2.25rem;\n    margin-top: 0.5rem;\n    font-weight: 700;\n    transition-property: color;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 150ms;\n}\n\n.timeline__pr {\n    font-size: 0.875rem;\n    line-height: 1.5rem;\n    word-break: break-all;\n    color: #8E8373;\n    margin-top: 10px;\n}\n\n.timeline__pr_authorimg{\n    width: 20px;\n    height: 20px;\n    border-radius: 1000px;\n    background: #8E8373;\n    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) 10;\n}\n\n@keyframes pulse {\n    0%, 100% {\n    opacity: 1;\n    }\n    50% {\n    opacity: .5;\n    }\n}\n\n.timeline__pr_author{\n    width: max-content;\n    color: #EFDAB9;\n    font-size: 0.75rem;\n    line-height: 1rem;\n    display: inline-flex;\n    gap: 10px;\n    align-items: center;\n    border-radius: 1000px;\n    padding: 0.5rem 0.5rem;\n    vertical-align: middle;\n    box-shadow: 0px 0px 1px 1px #8E8373;\n    background: rgb(142 131 115 / 20%);\n    font-weight: 500;\n}\n\n@media (max-width: 640px){\n    .timeline__pr_author{\n      align-self: flex-start !important;\n    }\n}\n\n.timeline__pr_title{\n    color: #EFDAB9;\n    transition-property: color;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 150ms;\n}\n\n.timeline__pr_author:hover{\n    background: rgb(142 131 115 / 50%);\n}\n\n.timeline__version:hover, .timeline__pr_title:hover{\n    color: #FFC152;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Running Bootstrap Script for jsx-email Development Environment\nDESCRIPTION: This command runs the bootstrap script that installs pnpm, Moon, and sets up the development environment for the jsx-email repository.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/include/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ./shared/bootstrap.sh\n```\n\n----------------------------------------\n\nTITLE: Building All Packages with Moon\nDESCRIPTION: This command builds all packages in the monorepo using Moon as the task runner, leveraging its intelligent caching for dependencies.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/include/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ moon repo:build.all\n```\n\n----------------------------------------\n\nTITLE: Describing the webFont prop\nDESCRIPTION: Explanation of the optional webFont prop which configures a web font for supported email clients. It includes the URL to the font file and its format specification.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/font.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nwebFont?: {\n  format: FontFormat;\n  url: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running the JSX-Email CSS Import Recipe Demo\nDESCRIPTION: Command to install dependencies and start the development server for the CSS import recipe demonstration. This will open a preview app where users can examine the 'Import CSS' template example.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/recipes/import-css/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i && npm run dev\n```\n\n----------------------------------------\n\nTITLE: Butan href Prop Type Definition\nDESCRIPTION: Type definition for the required href prop of the Butan component. This prop specifies the URL that the button will navigate to when clicked.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/butan.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nhref: string;\n```\n\n----------------------------------------\n\nTITLE: Link Component href Prop Definition\nDESCRIPTION: TypeScript definition for the required href prop which specifies the URL to be triggered when the link is clicked.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/link.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nhref: string;\n```\n\n----------------------------------------\n\nTITLE: Graph Component Title Prop Definition\nDESCRIPTION: TypeScript type definition for the required title prop of the Graph component.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/graph.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntitle: string;\n```\n\n----------------------------------------\n\nTITLE: Code Component Language Prop Type Definition\nDESCRIPTION: TypeScript type definition for the language prop, which specifies the programming language for syntax highlighting. The language must be supported by Shiki.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/code.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlanguage: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Home Page Layout for JSX Email Project\nDESCRIPTION: YAML frontmatter configuration for a VitePress homepage that defines the layout, page title, hero text with HTML formatting, tagline, and action buttons linking to documentation and GitHub repository.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\ntitle: Build Emails with a Delightful DX\n\nhero:\n  text: |\n    Build <span class=\"hl\">emails</span> with a delightful <span class=\"hl\">Developer</span> Experience\n    <img src=\"/home-hero.png\" class=\"home-hero\" width=\"800\" />\n  tagline: Develop standards compliant emails with JSX or TSX &#8212; compatible with the most popular email clients\n  actions:\n    - theme: brand\n      text: Quick Start\n      link: /docs/quick-start\n    - theme: alt\n      text: View on Github\n      link: https://github.com/shellscape/jsx-email\n```\n\n----------------------------------------\n\nTITLE: Tailwind Config Prop Type\nDESCRIPTION: Type definition for the config prop which allows customization of the Tailwind theme using UnoCSS configuration.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/tailwind.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconfig?: UnoCssConfig;\n```\n\n----------------------------------------\n\nTITLE: HTML Component Direction Prop Definition\nDESCRIPTION: TypeScript definition for the dir prop of the HTML component, which identifies the direction of text content in the email (e.g., ltr for left-to-right, rtl for right-to-left).\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/html.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ndir?: string;\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry v1.0.1\nDESCRIPTION: Changelog entry documenting bugfix for peer dependency resolution by temporarily setting jsx-email version to 2.0.0\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/packages/plugin-inline/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.0.1\n\n_2024-10-04_\n\n### Bugfixes\n\n- plugin-inline: temporarily set jsx-email version to 2.0.0 for peerDep resolution (cc4701f)\n```\n\n----------------------------------------\n\nTITLE: Column bgColor Prop Definition\nDESCRIPTION: TypeScript definition for the bgColor prop of the Column component. This property sets the background color by wrapping the bgcolor property of HTML td elements in email templates.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/column.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nbgColor: string;\n```\n\n----------------------------------------\n\nTITLE: Specifying Heading Level in TypeScript\nDESCRIPTION: Defines the 'as' prop type for specifying the heading level (h1-h6) in TypeScript.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/heading.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas?: string;\n```\n\n----------------------------------------\n\nTITLE: RenderHookParams Interface Definition\nDESCRIPTION: TypeScript interface defining the parameters passed to render hook functions in jsx-email plugins, providing access to the HTML content and utility functions.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RenderHookParams {\n  chalk: typeof chalk;\n  html: string;\n  log: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Process Hook Function Type Definition\nDESCRIPTION: TypeScript type definition for the process hook function used in jsx-email plugins, which should return a rehype plugin or preset.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/core/plugins.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProcessHookParams {\n  chalk: typeof chalk;\n  log: any;\n}\n\n(params: ProcessHookParams) =>\n  RehypePlugin | RehypePreset | Promise<RehypePlugin> | Promise<RehypePreset>;\n```\n\n----------------------------------------\n\nTITLE: HTML Component VML Compatibility Prop Definition\nDESCRIPTION: TypeScript definition for the enableVML prop which adds xmlns:o and xmlns:v attributes to the html element for VML compatibility. Default value is true.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/html.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nenableVML?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Processing Contribution Data in Vue.js\nDESCRIPTION: This snippet computes and processes contribution data from raw pull request information. It groups pull requests by date, sorts them in descending order, and prepares the data for display in the timeline.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/changelog.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataObject = computed(() => {\n  const first = rawData[rawData.length - 1]\n  const last = rawData[0]\n\n  const processedData = {}\n\n  rawData.map((pr) => {\n    if (!pr.merged_at) return;\n\n    const day = new Date(pr.merged_at).toISOString().split('T')[0]\n\n    processedData[day] = [...processedData[day] ?? [], {\n        author:\n        {\n            img: pr.user.avatar_url,\n            name: pr.user.login,\n            url: pr.user.html_url,\n        },\n        pr:\n        {\n            number: pr.number,\n            title: pr.title,\n            url: pr.html_url,\n        },\n\n    }]\n  })\n\n  const keysArray = Object.keys(processedData);\n\n    keysArray.sort((a, b) => new Date(b) - new Date(a));\n\n    const sortedData = {};\n    keysArray.forEach(key => {\n    sortedData[key] = processedData[key];\n    });\n\n  return sortedData\n})\n```\n\n----------------------------------------\n\nTITLE: Graph Component Height Prop Definition\nDESCRIPTION: TypeScript type definition for the optional height prop that sets graph height in pixels.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/graph.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nheight?: number;\n```\n\n----------------------------------------\n\nTITLE: Including External Contribution Guidelines with Vue-style Include Directive\nDESCRIPTION: A directive that includes the content of CONTRIBUTING.md file into the current document. Uses a Vue-style include syntax to reference an external markdown file.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--@include: @/include/CONTRIBUTING.md-->\n```\n\n----------------------------------------\n\nTITLE: Describing the fontWeight prop\nDESCRIPTION: Explanation of the optional fontWeight prop with a default value of 400. This prop defines the weight (boldness) of the font used in the email.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/font.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfontWeight?: FontWeight;`\n```\n\n----------------------------------------\n\nTITLE: Height Property Definition\nDESCRIPTION: Definition of the optional height property for specifying container height in pixels.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/background.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nheight?: number;\n```\n\n----------------------------------------\n\nTITLE: Width Property Definition\nDESCRIPTION: Definition of the optional width property for specifying container width in pixels.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/components/background.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nwidth?: number;\n```\n\n----------------------------------------\n\nTITLE: Running the JSX Email Demo Preview Server with Moon\nDESCRIPTION: Command to start the JSX-email preview server locally using the Moon build system. This command initiates the development environment for testing the preview functionality.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/demo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ moon run demo:dev\n```\n\n----------------------------------------\n\nTITLE: Creating Named Project Directory\nDESCRIPTION: Alternative command to create a JSX email project with a custom project name instead of the default 'email-project'.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/packages/create-jsx-email/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm create jsx-email <project-name>\n```\n\n----------------------------------------\n\nTITLE: HTML with Inlined CSS After Transformation\nDESCRIPTION: Example HTML showing the result after the plugin converts class-based CSS to inline styles.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/docs/plugins/inline.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"border: 1px solid black\">batcave</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry v1.0.0\nDESCRIPTION: Changelog entry documenting major version release with feature updates and build system changes\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/packages/plugin-inline/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.0.0\n\n_2024-10-04_\n\n### Features\n\n- jsx-email,app-preview,create-jsx-email,plugin-inline,plugin-minify,plugin-pretty: version 2.0.0 (#206)\n\n### Updates\n\n- \\*: use tsup (again) to produce compatible esm and cjs builds (#42)\n```\n\n----------------------------------------\n\nTITLE: Changelog Markdown Entry for JSX Email Pretty Plugin v1.0.0\nDESCRIPTION: Markdown documentation detailing version 1.0.0 release of @jsx-email/plugin-pretty, including features and updates. The release includes version 2.0.0 updates across multiple jsx-email packages and build system changes for ESM/CJS compatibility.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/packages/plugin-pretty/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @jsx-email/plugin-pretty ChangeLog\n\n## v1.0.0\n\n_2024-10-04_\n\n### Features\n\n- jsx-email,app-preview,create-jsx-email,plugin-inline,plugin-minify,plugin-pretty: version 2.0.0 (#206)\n\n### Updates\n\n- \\*: use tsup (again) to produce compatible esm and cjs builds (#42)\n```\n\n----------------------------------------\n\nTITLE: Initializing Development Environment for JSX-Email\nDESCRIPTION: Command to bootstrap the development environment by installing required tools and dependencies using the bootstrap script.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ./shared/bootstrap.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pnpm install\n```\n\n----------------------------------------\n\nTITLE: Building Project Components with Moon\nDESCRIPTION: Command to build all project components using the Moon task runner.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ moon repo:build.all\n```\n\n----------------------------------------\n\nTITLE: Installing jsx-email with pnpm\nDESCRIPTION: Command to install the jsx-email package using pnpm package manager.\nSOURCE: https://github.com/shellscape/jsx-email/blob/main/apps/web/src/include/install.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npnpm add jsx-email\n```"
  }
]