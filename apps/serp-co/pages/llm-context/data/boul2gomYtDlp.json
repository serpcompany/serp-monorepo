[
  {
    "owner": "boul2gom",
    "repo": "yt-dlp",
    "content": "TITLE: Basic Download Control Example in Rust\nDESCRIPTION: Demonstrates basic video download operations including initialization, starting a download, checking status, and canceling downloads. Uses PathBuf for directory management and provides error handling.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nlet output_dir = PathBuf::from(\"output\");\n\nlet youtube = libraries_dir.join(\"yt-dlp\");\nlet ffmpeg = libraries_dir.join(\"ffmpeg\");\n\nlet libraries = Libraries::new(youtube, ffmpeg);\nlet fetcher = Youtube::new(libraries, output_dir)?;\n\nlet url = String::from(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\nlet video = fetcher.fetch_video_infos(url).await?;\n\n// Start a download\nlet download_id = fetcher.download_video_with_priority(\n    &video, \n    \"video-to-cancel.mp4\", \n    None\n).await?;\n\n// Check status\nlet status = fetcher.get_download_status(download_id).await;\nprintln!(\"Download status: {:?}\", status);\n\n// Cancel the download\nlet canceled = fetcher.cancel_download(download_id).await;\nprintln!(\"Download canceled: {}\", canceled);\n\nOk(())\n```\n\n----------------------------------------\n\nTITLE: Quality and Codec Selection Example in Rust\nDESCRIPTION: Shows how to download videos and audio streams with specific quality settings and codec preferences. Demonstrates downloading complete videos as well as separate audio and video streams.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::Youtube;\nuse yt_dlp::model::{VideoQuality, VideoCodecPreference, AudioQuality, AudioCodecPreference};\nuse std::path::PathBuf;\nuse yt_dlp::fetcher::deps::Libraries;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let libraries_dir = PathBuf::from(\"libs\");\n    let output_dir = PathBuf::from(\"output\");\n    \n    let youtube = libraries_dir.join(\"yt-dlp\");\n    let ffmpeg = libraries_dir.join(\"ffmpeg\");\n    \n    let libraries = Libraries::new(youtube, ffmpeg);\n    let fetcher = Youtube::new(libraries, output_dir)?;\n\n    let url = String::from(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n    \n    // Download a high quality video with VP9 codec and high quality audio with Opus codec\n    let video_path = fetcher.download_video_with_quality(\n        url.clone(),\n        \"complete-video.mp4\",\n        VideoQuality::High,\n        VideoCodecPreference::VP9,\n        AudioQuality::High,\n        AudioCodecPreference::Opus\n    ).await?;\n    \n    // Download just the video stream with medium quality and AVC1 codec\n    let video_stream_path = fetcher.download_video_stream_with_quality(\n        url.clone(),\n        \"video-only.mp4\",\n        VideoQuality::Medium,\n        VideoCodecPreference::AVC1\n    ).await?;\n    \n    // Download just the audio stream with high quality and AAC codec\n    let audio_stream_path = fetcher.download_audio_stream_with_quality(\n        url,\n        \"audio-only.m4a\",\n        AudioQuality::High,\n        AudioCodecPreference::AAC\n    ).await?;\n    \n    println!(\"Downloaded files:\");\n    println!(\"Complete video: {}\", video_path.display());\n    println!(\"Video stream: {}\", video_stream_path.display());\n    println!(\"Audio stream: {}\", audio_stream_path.display());\n    \n    Ok(())\n```\n\n----------------------------------------\n\nTITLE: Downloading Complete Video with Audio in Rust\nDESCRIPTION: Example of downloading a complete video with audio from YouTube using a specified URL.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::Youtube;\nuse std::path::PathBuf;\nuse yt_dlp::fetcher::deps::Libraries;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let libraries_dir = PathBuf::from(\"libs\");\n    let output_dir = PathBuf::from(\"output\");\n    \n    let youtube = libraries_dir.join(\"yt-dlp\");\n    let ffmpeg = libraries_dir.join(\"ffmpeg\");\n    \n    let libraries = Libraries::new(youtube, ffmpeg);\n    let fetcher = Youtube::new(libraries, output_dir)?;\n\n    let url = String::from(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n    let video_path = fetcher.download_video_from_url(url, \"my-video.mp4\").await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Specific Video and Audio Formats in Rust\nDESCRIPTION: Shows how to fetch video information and download specific video and audio formats separately.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::Youtube;\nuse std::path::PathBuf;\nuse yt_dlp::fetcher::deps::Libraries;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let libraries_dir = PathBuf::from(\"libs\");\n    let output_dir = PathBuf::from(\"output\");\n    \n    let youtube = libraries_dir.join(\"yt-dlp\");\n    let ffmpeg = libraries_dir.join(\"ffmpeg\");\n    \n    let libraries = Libraries::new(youtube, ffmpeg);\n    let fetcher = Youtube::new(libraries, output_dir)?;\n    \n    let url = String::from(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n    let video = fetcher.fetch_video_infos(url).await?;\n    println!(\"Video title: {}\", video.title);\n\n    let video_format = video.best_video_format().unwrap();\n    let format_path = fetcher.download_format(&video_format, \"my-video-stream.mp4\").await?;\n    \n    let audio_format = video.worst_audio_format().unwrap();\n    let audio_path = fetcher.download_format(&audio_format, \"my-audio-stream.mp3\").await?;\n    \n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Download with Progress Tracking in Rust\nDESCRIPTION: Demonstrates how to track download progress using a callback function.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::Youtube;\nuse std::path::PathBuf;\nuse yt_dlp::fetcher::deps::Libraries;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let libraries_dir = PathBuf::from(\"libs\");\n    let output_dir = PathBuf::from(\"output\");\n    \n    let youtube = libraries_dir.join(\"yt-dlp\");\n    let ffmpeg = libraries_dir.join(\"ffmpeg\");\n    \n    let libraries = Libraries::new(youtube, ffmpeg);\n    let fetcher = Youtube::new(libraries, output_dir)?;\n\n    let url = String::from(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n    let video = fetcher.fetch_video_infos(url).await?;\n    \n    // Download with progress callback\n    let download_id = fetcher.download_video_with_progress(\n        &video, \n        \"video-with-progress.mp4\", \n        |downloaded, total| {\n            let percentage = if total > 0 {\n                (downloaded as f64 / total as f64 * 100.0) as u64\n            } else {\n                0\n            };\n            println!(\"Progress: {}/{} bytes ({}%)\", downloaded, total, percentage);\n        }\n    ).await?;\n\n    // Wait for download completion\n    fetcher.wait_for_download(download_id).await;\n    \n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Download with Manager and Priority Settings in Rust\nDESCRIPTION: Example of using the download manager with custom configuration and priority settings for downloads.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::Youtube;\nuse yt_dlp::fetcher::download_manager::{ManagerConfig, DownloadPriority};\nuse std::path::PathBuf;\nuse yt_dlp::fetcher::deps::Libraries;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Custom download manager configuration\n    let config = ManagerConfig {\n        max_concurrent_downloads: 5,        // Maximum 5 concurrent downloads\n        segment_size: 1024 * 1024 * 10,    // 10 MB per segment\n        parallel_segments: 8,               // 8 parallel segments per download\n        retry_attempts: 5,                  // 5 retry attempts on failure\n        max_buffer_size: 1024 * 1024 * 20, // 20 MB maximum buffer\n    };\n\n    let libraries_dir = PathBuf::from(\"libs\");\n    let output_dir = PathBuf::from(\"output\");\n    \n    let youtube = libraries_dir.join(\"yt-dlp\");\n    let ffmpeg = libraries_dir.join(\"ffmpeg\");\n    \n    let libraries = Libraries::new(youtube, ffmpeg);\n    \n    // Create a fetcher with custom configuration\n    let fetcher = Youtube::with_download_manager_config(libraries, output_dir, config)?;\n\n    // Download a video with high priority\n    let url = String::from(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n    let video = fetcher.fetch_video_infos(url).await?;\n    \n    let download_id = fetcher.download_video_with_priority(\n        &video, \n        \"video-high-priority.mp4\", \n        Some(DownloadPriority::High)\n    ).await?;\n\n    // Wait for download completion\n    let status = fetcher.wait_for_download(download_id).await;\n    println!(\"Final download status: {:?}\", status);\n    \n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Audio and Video Files in Rust\nDESCRIPTION: Demonstrates how to download separate audio and video streams and combine them into a single file using ffmpeg.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::Youtube;\nuse std::path::PathBuf;\nuse yt_dlp::fetcher::deps::Libraries;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let libraries_dir = PathBuf::from(\"libs\");\n    let output_dir = PathBuf::from(\"output\");\n    \n    let youtube = libraries_dir.join(\"yt-dlp\");\n    let ffmpeg = libraries_dir.join(\"ffmpeg\");\n    \n    let libraries = Libraries::new(youtube, ffmpeg);\n    let fetcher = Youtube::new(libraries, output_dir)?;\n\n    let url = String::from(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n    let video = fetcher.fetch_video_infos(url).await?;\n\n    let audio_format = video.best_audio_format().unwrap();\n    let audio_path = fetcher.download_format(&audio_format, \"audio-stream.mp3\").await?;\n\n    let video_format = video.worst_video_format().unwrap();\n    let video_path = fetcher.download_format(&video_format, \"video-stream.mp4\").await?;\n\n    let output_path = fetcher.combine_audio_and_video(\"audio-stream.mp3\", \"video-stream.mp4\", \"my-output.mp4\").await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Video Stream Without Audio in Rust\nDESCRIPTION: Shows how to download only the video stream without audio from a YouTube video.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::Youtube;\nuse std::path::PathBuf;\nuse yt_dlp::fetcher::deps::Libraries;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let libraries_dir = PathBuf::from(\"libs\");\n    let output_dir = PathBuf::from(\"output\");\n\n    let youtube = libraries_dir.join(\"yt-dlp\");\n    let ffmpeg = libraries_dir.join(\"ffmpeg\");\n\n    let libraries = Libraries::new(youtube, ffmpeg);\n    let fetcher = Youtube::new(libraries, output_dir)?;\n    \n    let url = String::from(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n    fetcher.download_video_stream_from_url(url, \"video.mp4\").await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Audio Stream in Rust\nDESCRIPTION: Demonstrates how to extract and download only the audio stream from a YouTube video.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::Youtube;\nuse std::path::PathBuf;\nuse yt_dlp::fetcher::deps::Libraries;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let libraries_dir = PathBuf::from(\"libs\");\n    let output_dir = PathBuf::from(\"output\");\n\n    let youtube = libraries_dir.join(\"yt-dlp\");\n    let ffmpeg = libraries_dir.join(\"ffmpeg\");\n\n    let libraries = Libraries::new(youtube, ffmpeg);\n    let fetcher = Youtube::new(libraries, output_dir)?;\n\n    let url = String::from(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n    fetcher.download_audio_stream_from_url(url, \"audio.mp3\").await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling a Download in Rust\nDESCRIPTION: Shows how to cancel an ongoing download operation.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::Youtube;\nuse std::path::PathBuf;\nuse yt_dlp::fetcher::deps::Libraries;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let libraries_dir = PathBuf::from(\"libs\");\n\n```\n\n----------------------------------------\n\nTITLE: Downloading Video Thumbnail in Rust\nDESCRIPTION: Shows how to download a video's thumbnail image.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::Youtube;\nuse std::path::PathBuf;\nuse yt_dlp::fetcher::deps::Libraries;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let libraries_dir = PathBuf::from(\"libs\");\n    let output_dir = PathBuf::from(\"output\");\n    \n    let youtube = libraries_dir.join(\"yt-dlp\");\n    let ffmpeg = libraries_dir.join(\"ffmpeg\");\n    \n    let libraries = Libraries::new(youtube, ffmpeg);\n    let fetcher = Youtube::new(libraries, output_dir)?;\n\n    let url = String::from(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n    let thumbnail_path = fetcher.download_thumbnail_from_url(url, \"thumbnail.jpg\").await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing YT-DLP and FFMPEG Binaries in Rust\nDESCRIPTION: Demonstrates how to install both yt-dlp and ffmpeg binaries to a specified directory. Creates a Youtube instance with newly installed binaries.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::Youtube;\nuse std::path::PathBuf;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let executables_dir = PathBuf::from(\"libs\");\n    let output_dir = PathBuf::from(\"output\");\n\n    let fetcher = Youtube::with_new_binaries(executables_dir, output_dir).await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing YT-DLP Binary Only in Rust\nDESCRIPTION: Shows how to install only the yt-dlp binary using LibraryInstaller. Useful when ffmpeg is not needed or already installed.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::fetcher::deps::LibraryInstaller;\nuse std::path::PathBuf;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let destination = PathBuf::from(\"libs\");\n    let installer = LibraryInstaller::new(destination);\n\n    let youtube = installer.install_youtube(None).await.unwrap();\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FFMPEG Binary Only in Rust\nDESCRIPTION: Demonstrates installation of only the ffmpeg binary. Useful when yt-dlp is not needed or already installed.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::fetcher::deps::LibraryInstaller;\nuse std::path::PathBuf;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let destination = PathBuf::from(\"libs\");\n    let installer = LibraryInstaller::new(destination);\n    \n    let ffmpeg = installer.install_ffmpeg(None).await.unwrap();\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Updating YT-DLP Binary in Rust\nDESCRIPTION: Shows how to update an existing yt-dlp binary to the latest version.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse yt_dlp::Youtube;\nuse std::path::PathBuf;\nuse yt_dlp::fetcher::deps::Libraries;\n\n#[tokio::main]\npub async fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let libraries_dir = PathBuf::from(\"libs\");\n    let output_dir = PathBuf::from(\"output\");\n    \n    let youtube = libraries_dir.join(\"yt-dlp\");\n    let ffmpeg = libraries_dir.join(\"ffmpeg\");\n    \n    let libraries = Libraries::new(youtube, ffmpeg);\n    let fetcher = Youtube::new(libraries, output_dir)?;\n\n    fetcher.update_downloader().await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding yt-dlp Dependency to Cargo.toml\nDESCRIPTION: Shows how to add the yt-dlp crate as a dependency in a Rust project's Cargo.toml file. This is the basic setup required to use the library.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nyt-dlp = \"1.3.3\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing Feature in Cargo.toml\nDESCRIPTION: Demonstrates how to enable the optional tracing feature when adding the yt-dlp dependency to Cargo.toml. This enables profiling functionality for debugging purposes.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/README.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nyt-dlp = { version = \"latest version of the crate\", features = [\"tracing\"] }\n```\n\n----------------------------------------\n\nTITLE: Applying GPL License Notice to Source Files\nDESCRIPTION: This snippet demonstrates how to add a GPL license notice to the start of each source file in a program. It includes placeholders for the program name, copyright year, and author name.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/LICENSE.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Terminal Interaction Notice for GPL-Licensed Programs\nDESCRIPTION: This snippet shows a short notice to be displayed when a GPL-licensed program starts in an interactive mode. It informs users about the program's copyright, warranty disclaimer, and redistribution terms.\nSOURCE: https://github.com/boul2gom/yt-dlp/blob/develop/LICENSE.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```"
  }
]