[
  {
    "owner": "missionpinball",
    "repo": "mpf-docs",
    "content": "TITLE: Configuring Lights with Start Channel and Type\nDESCRIPTION: This snippet illustrates how to configure lights using a starting channel and a type (color order). This approach is beneficial for serial LEDs. The 'type' parameter defines the color order (e.g., rgb, grb). 'start_channel' defines the initial channel and the following channels are automatically mapped based on the defined color order. The 'previous' parameter simplifies configuring chained lights.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/lights.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  rainbow_star:    # this will use red: 9-29, green: 9-30 and blue: 9-31\n    type: rgb\n    start_channel: 9-29\n\n  rainbow_star2:   # this will use red: 9-33, green: 9-32 and blue: 9-34\n    type: grb      # notice the changed order here\n    previous: rainbow_star\n```\n\n----------------------------------------\n\nTITLE: Complete Plunger Configuration Example - YAML\nDESCRIPTION: This is a complete example configuration, showcasing the configuration of switches, coils, ball devices, and playfields required to configure a coil-fired plunger lane. It includes the definitions for a plunger lane switch, trough switches, trough eject coil, trough ball device, plunger ball device (configured for mechanical eject), and playfield, including setting the default source device.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/mechanical_with_switch.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_plunger_lane:\n    number: 2-6\n  s_launch_button:\n    number: 1-5\n  s_trough1:\n    number: 3-1\n  s_trough2:\n    number: 3-2\n  s_trough3:\n    number: 3-3\n  s_trough4:\n    number: 3-4\n  s_trough_jam:\n    number: 3-5\ncoils:\n  c_trough_eject:\n    number: 3-1\n    default_pulse_ms: 20\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    mechanical_eject: true\n    eject_timeouts: 3s\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Player in Config File YAML\nDESCRIPTION: This snippet shows how to use the `light_player:` section in the config file to control the color and fade of lights based on an event. It defines two lights, `led1` and `led2`, and sets their color and fade time when the `some_event` is triggered.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/light_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight_player:\n  some_event:\n    led1:\n      color: red\n      fade: 200ms\n    led2:\n      color: ff0000\n      fade: 2000ms\n```\n\n----------------------------------------\n\nTITLE: Complete Plunger Configuration Example in MPF (YAML)\nDESCRIPTION: This snippet provides a complete example of a machine configuration with a standard coil-fired plunger that ejects the ball directly to the playfield. It includes configurations for switches, coils, ball devices (trough and plunger), and the playfield, demonstrating the integration of these components.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/coil_fired.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_plunger_lane:\n    number: 2-6\n  s_launch_button:\n    number: 1-5\n  s_trough1:\n    number: 3-1\n  s_trough2:\n    number: 3-2\n  s_trough3:\n    number: 3-3\n  s_trough4:\n    number: 3-4\n  s_trough_jam:\n    number: 3-5\ncoils:\n  c_plunger:\n    number: 2-1\n    default_pulse_ms: 20\n  c_trough_eject:\n    number: 3-1\n    default_pulse_ms: 20\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    eject_coil: c_plunger\n    player_controlled_eject_event: s_launch_button_active\n    eject_timeouts: 3s\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Flipper Configuration Example - YAML\nDESCRIPTION: This YAML snippet provides an example configuration for flippers, including the definition of main and hold coils, activation switches, and the `enable_events` setting for immediate activation. This config assumes dual-wound coils and defines both left and right flippers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nflippers:\n  left_flipper:\n    main_coil: c_flipper_left_main\n    hold_coil: c_flipper_left_hold\n    activation_switch: s_left_flipper\n    enable_events: machine_reset_phase_3\n  right_flipper:\n    main_coil: c_flipper_right_main\n    hold_coil: c_flipper_right_hold\n    activation_switch: s_right_flipper\n    enable_events: machine_reset_phase_3\n```\n\n----------------------------------------\n\nTITLE: Diverter Configuration Example in YAML\nDESCRIPTION: This snippet showcases a comprehensive example of diverter configurations within the `diverters:` section of an MPF machine configuration file. It demonstrates various diverter types (hold and pulse) and their associated settings, including coil activation, activation times, switches, events, and target devices. This example provides a solid foundation for understanding how to define and control diverters for different game scenarios.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/diverters.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndiverters:\n  top_diverter:\n    activation_coil: c_top_divertor      # WMS uses the -tor spelling\n    type: hold\n    activation_time: 3s\n    activation_switches: s_enter_left_ramp\n    enable_events: ball_started\n    disable_events: ball_ended, borg_lock_Lit\n    targets_when_active: playfield\n    targets_when_inactive: bd_borg_ship\n  subway_top_diverter:\n    activation_coil: c_under_divertor_top\n    type: hold\n    activation_time: 3s\n    activation_switches: s_under_top_hole, s_under_left_hole, s_under_borg_hole\n    targets_when_active: bd_left_cannon_vuk\n    targets_when_inactive: bd_left_vuk\n    feeder_devices: bd_catapult\n  subway_bottom_diverter:\n    activation_coil: c_under_divertor_bottom\n    type: hold\n    activation_time: 3s\n    activation_switches: s_under_top_hole, s_under_ueft_hole, s_under_borg_hole\n    targets_when_active: bd_left_cannon_vuk\n    targets_when_inactive: bd_left_vuk\n    feeder_devices: bd_catapult\n  drop_target:\n    activation_coil: c_top_drop_down\n    deactivation_coil: c_top_drop_up\n    type: pulse\n    targets_when_active: bd_left_cannon_vuk, bd_right_cannon_vuk, bd_left_vuk\n    targets_when_inactive: playfield\n    feeder_devices: bd_catapult\n```\n\n----------------------------------------\n\nTITLE: Servo Configuration Example YAML\nDESCRIPTION: This example shows a basic `servos:` section with two servos defined, `servo1` and `servo2`. It configures their minimum and maximum range of motion, maps events to specific positions, sets reset positions, and associates reset events. It also specifies the hardware number for each servo.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/servos.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservos:\n  servo1:\n    servo_min: 0.1\n    servo_max: 0.9\n    positions:\n      0.0: servo1_down\n      0.8: servo1_up\n    reset_position: 0.5\n    reset_events: reset_servo1\n    number: 1\n  servo2:\n    positions:\n      0.2: servo2_left\n      1.0: servo2_home\n    reset_position: 1.0\n    reset_events: reset_servo2\n    number: 2\n```\n\n----------------------------------------\n\nTITLE: Config Section Example in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the `config:` section to specify additional configuration files.  It loads `machine.yaml`, `devices.yaml`, `game.yaml`, `textstrings.yaml`, and `keymap.yaml` in that order. These files will be merged into the main configuration, with later files overriding earlier ones if there are conflicts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/config.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n    - machine.yaml\n    - devices.yaml\n    - game.yaml\n    - textstrings.yaml\n    - keymap.yaml\n```\n\n----------------------------------------\n\nTITLE: Credits Configuration Example YAML\nDESCRIPTION: This YAML snippet demonstrates a complete `credits:` configuration section, including settings for maximum credits, free play, pricing tiers, service credits switch, coin switches, event-based credits, and credit expiration times. It showcases the available options for configuring the credits mode in MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/credits.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncredits:\n  max_credits: 12\n  free_play: false\n  price_tier_template: \"{{credits}} CREDITS ${{price}}\"\n  service_credits_switch: s_esc\n  switches:\n    - switch: s_left_coin\n      type: dollars\n      value: .25\n    - switch: s_right_coin\n      type: dollars\n      value: 1\n  pricing_tiers:\n    - price: .50\n      credits: 1\n    - price: 2\n      credits: 5\n  events:\n    - event: special\n      type: special\n      credits: 1\n    - event: replay\n      type: replay\n      credits: 1\n    - event: high_score_credit\n      type: high_score\n      credits: 1\n    - event: match\n      type: match\n      credits: 1\n  fractional_credit_expiration_time: 15m\n  credit_expiration_time: 2h\n  persist_credits_while_off_time: 1h\n  free_play_string: FREE PLAY\n  credits_string: CREDITS\n```\n\n----------------------------------------\n\nTITLE: Configuring Coils in YAML\nDESCRIPTION: This YAML snippet shows a comprehensive example of how to configure multiple coils in an MPF machine configuration file. It demonstrates the use of settings such as `number`, `default_pulse_ms`, `max_pulse_ms`, `default_pulse_power`, `max_pulse_power`, `default_hold_power`, and `max_hold_power` to define the behavior of different coils, including flippers, a knocker, pop bumpers, and a ball gate.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/coils.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  flipper_right_main:\n    number: A0-B0-0\n    default_pulse_ms: 30\n    max_pulse_ms: 100\n    default_pulse_power: 0.7\n    max_pulse_power: 1.0\n  flipper_right_hold:\n    number: A0-B0-1\n    default_hold_power: 0.25\n    max_hold_power: 0.5\n  knocker:\n    number: A0-B1-0\n    default_pulse_ms: 20\n    max_pulse_ms: 100\n  pop_bumper_left:\n    number: A0-B1-1\n    default_pulse_ms: 18\n    max_pulse_ms: 100\n  ball_gate:\n    number: A0-B1-2\n    default_hold_power: 0.375\n    max_hold_power: 0.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Coils in MPF for OPP EM Combo Board (YAML)\nDESCRIPTION: This snippet shows how to configure coils in the MPF configuration file to control solenoids connected to the OPP EM Combo board. It defines the hardware platform as OPP and specifies the board's serial number to map the coil to a specific output on the board. The `number` field uses the format `card_id-usb_port-output`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/oppcombo/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=6\n\nhardware:\n  platform: opp\n  driverboards: gen2\n\nopp:\n    ports: /dev/ttyACM0, /dev/ttyACM1,/dev/ttyACM2, /dev/ttyACM3, /dev/ttyACM4, /dev/ttyACM5, /dev/ttyACM6\n\ncoils:\n  # Board LB_1_16O16, id #0\n  c_player1_reel10:\n    number: 0-0-0\n    default_pulse_ms: 7\n  c_player1_reel100:\n    number: 0-0-1\n    default_pulse_ms: 7\n\n```\n\n----------------------------------------\n\nTITLE: Config Player: Normal Syntax (Standalone)\nDESCRIPTION: This snippet demonstrates the normal syntax for defining a config player in a standalone configuration.  The event `event_which_is_posted_elsewhere` triggers the specified action defined by `<depends on the player>`. The exact configuration depends on the config player being used (e.g., sound_player, show_player).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexample_player:\n  event_which_is_posted_elsewhere:\n    <depends on the player>\n```\n\n----------------------------------------\n\nTITLE: Virtual Pinball (VPX) Hardware Config - YAML\nDESCRIPTION: This YAML snippet configures MPF to use the virtual pinball platform (VPX). It sets the platform to `virtual_pinball`. It includes example switch and coil configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: virtual_pinball\n\nswitches:\n  s_sling:\n    number: 0\n  s_flipper:\n    number: 3\n\ncoils:\n  c_sling:\n    number: 0\n  c_flipper:\n    number: 1\n    allow_enable: true\n```\n\n----------------------------------------\n\nTITLE: Defining Shots with Switches and Show Tokens in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define shots, each associated with a specific switch and show tokens. The `switch` parameter links the shot to a physical switch, while `show_tokens` maps the shot's state to visual elements like lights or LEDs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/shots.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  lane_l:\n    switch: lane_l\n    show_tokens:\n      light: lane_l\n  lane_a:\n    switch: lane_a\n    show_tokens:\n      light: lane_a\n  lane_n:\n    switch: lane_n\n    show_tokens:\n      light: lane_n\n  lane_e:\n    switch: lane_e\n    show_tokens:\n      light: lane_e\n  upper_standup:\n    switch: upper_standup\n    show_tokens:\n      leds: led_17, led_19\n```\n\n----------------------------------------\n\nTITLE: Configure Switches in MPF with YAML\nDESCRIPTION: This snippet shows how to configure switches in the `switches:` section of an MPF config file using YAML. It includes examples of different switch configurations with settings like number, tags, debounce, and events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/switches.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  flipper_lwr_eos:\n    number: SF1\n  flipper_lwr:\n    number: SF6\n  fire_r:\n    number: S12\n    tags: plunger\n  start:\n    number: S13\n    tags: start\n  plumbbob:\n    number: S14\n    tags: tilt\n  outlane_l:\n    number: S16\n    tags: playfield_active\n    debounce: normal\n  inlane_l:\n    number: S17\n    tags: playfield_active\n    debounce: quick\n  trough1:\n    number: S81\n    type: 'NC'\n  shooter_lane:\n    number: S82\n    events_when_activated: ball_in\n    events_when_deactivated: ball_out\n```\n\n----------------------------------------\n\nTITLE: Scanning hardware details\nDESCRIPTION: This command scans and displays details about the hardware connected to your system. It should be run when the MPF game engine is NOT running.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/index.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ mpf hardware scan\n```\n\n----------------------------------------\n\nTITLE: Adding Flipper Button Switches YAML\nDESCRIPTION: This snippet shows how to configure the flipper buttons as switches in the `config.yaml` file. It defines the switch numbers and assigns tags for left and right flippers. The `number` field needs to be adjusted according to the actual hardware setup.  The tags `left_flipper` and `right_flipper` are used for combo switch event posting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/single_wound.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_left_flipper:\n    number: 1\n    tags: left_flipper\n  s_right_flipper:\n    number: 2\n    tags: right_flipper\n```\n\n----------------------------------------\n\nTITLE: Enabling Flippers on Machine Reset - YAML\nDESCRIPTION: This YAML snippet shows how to enable flippers immediately upon MPF startup by adding the `enable_events: machine_reset_phase_3` to the flipper configuration. This overrides the default behavior of enabling flippers only during a game. This configuration should be added under each flipper in the `flippers:` section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nenable_events: machine_reset_phase_3\n```\n\n----------------------------------------\n\nTITLE: Setting Machine-Wide Default Platform in MPF\nDESCRIPTION: This snippet shows how to set the default hardware platform for all devices in the machine using the `hardware: platform:` setting in the machine-wide configuration file. All switches, coils, lights, LEDs, DMDs, servos, etc. will default to the specified platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/platform.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: p_roc\n  driverboards: pdb\n```\n\n----------------------------------------\n\nTITLE: Mapping Keyboard Keys to Switches in MPF (YAML)\nDESCRIPTION: This code snippet shows how to map keyboard keys to switches in an MPF configuration file. It defines a `keyboard:` section and then maps the `z` key to the `s_left_flipper` switch and the `?` key to the `s_right_flipper` switch.  The question mark is enclosed in quotes to avoid YAML parsing errors.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/6_keyboard.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkeyboard:\n  z:\n    switch: s_left_flipper\n  '?':\n    switch: s_right_flipper\n```\n\n----------------------------------------\n\nTITLE: Multiball Configuration with Virtual Ball Lock (YAML)\nDESCRIPTION: This YAML configuration defines a multiball feature that uses a virtual ball lock.  It configures switches, coils, a ball device to simulate locking a ball, a multiball definition with ball count and start events, and a counter to track the number of 'locked' balls. The multiball starts when the `mb_counter` reaches a count_complete_value of 3.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/multiballs/multiball_with_virtual_ball_lock.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_middle_ramp:\n    number:\ncoils:\n  c_plunger:\n    number:\nball_devices:\n  bd_middle_ramp_ball_lock:\n    eject_coil: c_plunger\n    ball_switches: s_middle_ramp\n##! mode: mb_mode\nmultiballs:\n  3balls_multiball:\n    ball_count: 3\n    ball_count_type: total\n    shoot_again: 30s\n    start_events: logicblock_mb_counter_complete\ncounters:\n  mb_counter:\n    count_events: balldevice_bd_middle_ramp_ball_lock_ball_entered\n    count_complete_value: 3\n##! test\n#! start_game\n#! start_mode mb_mode\n#! hit_switch s_middle_ramp\n#! advance_time_and_run 15\n#! hit_switch s_middle_ramp\n#! advance_time_and_run 15\n#! hit_switch s_middle_ramp\n#! advance_time_and_run 15\n#! assert_balls_in_play 3\n```\n\n----------------------------------------\n\nTITLE: FAST Switch Configuration Example YAML\nDESCRIPTION: This YAML snippet shows an example of how to configure a switch using the `fast_switches:` section in your MPF config. It demonstrates how to set the switch number and platform-specific settings, specifically the debounce times for both closing and opening the switch. This example assumes you have a switch named `some_switch` configured.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/fast_switches.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  some_switch:\n    number:\n    platform_settings:\n      debounce_close: 2ms\n      debounce_open: 4ms\n```\n\n----------------------------------------\n\nTITLE: Configuring High Score Categories, Defaults, and Variables in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the high_score section in MPF, including defining categories such as 'score', 'loops', and 'hits'. It also sets default high score values and defines variables to be stored for later use in slides. The `_overwrite: True` setting allows for overwriting existing high score configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/high_score.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nhigh_score:\n  _overwrite: True\n  categories: !!omap\n  - score:\n      - GRAND CHAMPION\n      - HIGH SCORE 1\n      - HIGH SCORE 2\n      - HIGH SCORE 3\n      - HIGH SCORE 4\n  - loops:\n      - LOOP CHAMP\n  - hits:\n      - MOST HITS\n  defaults:\n    score:\n      - BRI: 4242\n      - GHK: 2323\n      - JK: 1337\n      - QC: 42\n      - MPF: 23\n    loops:\n      - JK: 42\n    hits:\n      - A: 1\n  vars:\n    loops:\n      - player: number\n    hits:\n      - player: number\n      - machine: credits_string\n```\n\n----------------------------------------\n\nTITLE: Using Control Events to Set Shot States in YAML\nDESCRIPTION: This YAML snippet shows how to configure control events to change the state of a shot. The `control_events` section allows you to define events that, when posted, will set the shot to a specific state, using a zero-based index.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/shots.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  shot_with_control_events:\n    control_events:\n      - events: set_state_one\n        state: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Sound Player for Credit Events (YAML)\nDESCRIPTION: This configuration defines sounds to be played when credit-related events occur, such as adding credits, not having enough credits, or adding a player. It specifies the sound to play and how many times it should loop.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsound_player:\n  credits_added:\n    credit_added_sound:\n      action: play\n      loops: 0\n  not_enough_credits:\n    need_more_money:\n      action: play\n      loops: 0\n  player_added:\n    player_added_sound:\n      action: play\n      loops: 0\n```\n\n----------------------------------------\n\nTITLE: Configure Flipper Buttons in MPF (YAML)\nDESCRIPTION: This snippet configures the flipper buttons as switches in the machine configuration. It defines the switch numbers and assigns tags for left and right flippers, which can be used for combo switch event posting. The actual switch numbers should correspond to the control system's configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/dual_wound.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_left_flipper:\n    number: 1\n    tags: left_flipper\n  s_right_flipper:\n    number: 2\n    tags: right_flipper\n```\n\n----------------------------------------\n\nTITLE: Credit Slides Configuration (YAML)\nDESCRIPTION: This snippet configures slides that are displayed during credit-related events. It defines slides for adding credits, not enough credits, enabling free play, enabling credit play, max credits reached, and player added. The `expire` property specifies how long each slide is displayed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nslide_player:\n  credits_added:\n    credit_added_slide:\n      expire: 2s\n  not_enough_credits:\n    not_enough_credits_slide:\n      expire: 2s\n  enabling_free_play:\n    enabling_free_play_slide:\n      expire: 2s\n  enabling_credit_play:\n    enabling_credit_play_slide:\n      expire: 2s\n  max_credits_reached:\n    max_credits_reached_slide:\n      expire: 2s\n  player_added:\n    player_added_slide:\n      expire: 1s\nslides:\n  credit_added_slide:\n    - type: text\n      text: (machine|credits_string)\n  not_enough_credits_slide:\n    - type: text\n      text: (machine|credits_string)\n    - type: text\n      text: INSERT COINS\n  enabling_free_play_slide:\n    - type: text\n      text: ENABLING FREE PLAY\n  enabling_credit_play_slide:\n    - type: text\n      text: ENABLING CREDIT PLAY\n    - type: text\n      text: (machine|credits_string)\n  max_credits_reached_slide:\n    - type: text\n      text: MAX CREDITS REACHED\n  player_added_slide:\n    - type: text\n      text: PLAYER ADDED\n      font_size: 12\n      color: white\n```\n\n----------------------------------------\n\nTITLE: Configuring FAST Ports in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure the COM ports for the FAST Pinball controller in the MPF machine configuration file. It specifies the COM ports to be used for communication with the NET processor, RGB LED processor, and any other custom use ports on FAST Core or WPC controllers. For FAST Nano, it uses the middle two ports.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/config.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfast:\n    ports: com3, com4, com5\n```\n\n----------------------------------------\n\nTITLE: Setting Default Fade Time for Lights in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to set the `default_fade_ms` in the `light_settings` section of an MPF configuration file. This setting controls the fade time (in milliseconds) for lights when they turn on or off. A value of 40ms is suggested for LEDs to reduce flickering.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/light_settings.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight_settings:\n  default_fade_ms: 40\n```\n\n----------------------------------------\n\nTITLE: Sequence Logic Block Structure YAML\nDESCRIPTION: This snippet illustrates the general structure of sequence logic blocks within a YAML configuration file for MPF.  It shows how to define multiple sequence blocks with names and settings. The actual names of the logic blocks are not critical but are useful for logging and debugging.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sequences.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nsequences:\n   the_name_of_this_logic_block:\n      <settings>\n   some_other_logic_block:\n      <settings>\n   a_third_logic_block:\n      <settings>\n```\n\n----------------------------------------\n\nTITLE: Defining Shots with Profiles in YAML\nDESCRIPTION: This snippet defines a shot named `my_first_shot_mode2` and associates it with a switch `s_right_inlane` and a shot profile named `mode2`. When the switch is activated, the shot will use the settings specified in the `mode2` shot profile. This enables dynamic shot behavior based on the active mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  my_first_shot_mode2:\n    switch: s_right_inlane\n    profile: mode2\n```\n\n----------------------------------------\n\nTITLE: Configuring Coil Actions using coil_player in YAML\nDESCRIPTION: This example demonstrates how to configure coil actions using the `coil_player` section in a machine configuration file. It shows how to pulse a coil based on an event and how to enable a coil with a specific hold power level. This configuration allows linking game events to physical coil activations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/coil_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoil_player:\n  some_event: coil_1\n  some_other_event:\n    coil_2:\n      action: enable\n      hold_power: .5\n```\n\n----------------------------------------\n\nTITLE: Configuring the MPF-MC Window in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the main window in MPF-MC. It sets the width, height, title, and various boolean flags to control the window's appearance and behavior, such as whether it's resizable, borderless, or fullscreen. It also includes an example of applying a 'dmd' effect to the window's contents.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/window.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwindow:\n  width: 800\n  height: 600\n  title: Mission Pinball Framework\n  resizable: true\n  borderless: true\n  fullscreen: false\n  exit_on_escape: true\n  source_display: window\n  effects:\n    - type: dmd\n```\n\n----------------------------------------\n\nTITLE: Configuring Drop Targets in YAML\nDESCRIPTION: This YAML snippet demonstrates configuring individual drop targets within the `drop_targets:` section of the machine configuration file.  It defines properties such as the switch associated with each drop target, the reset coil used to raise the target, and optionally a knockdown coil to lower the target. This snippet is used in the *Judge Dredd* example.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/drop_targets.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ndrop_targets:\n  j:\n    switch: drop_target_j\n    reset_coil: reset_drop_targets\n  u:\n    switch: drop_target_u\n    reset_coil: reset_drop_targets\n  d:\n    switch: drop_target_d\n    reset_coil: reset_drop_targets\n    knockdown_coil: trip_drop_target_d\n  g:\n    switch: drop_target_g\n    reset_coil: reset_drop_targets\n  e:\n    switch: drop_target_e\n    reset_coil: reset_drop_targets\n```\n\n----------------------------------------\n\nTITLE: Configuring Event-Based Sequence Shots in MPF\nDESCRIPTION: This snippet illustrates how to configure sequence shots based on a sequence of events in MPF. It defines a sequence shot named `my_event_based_sequence_shot` that is triggered when `event1`, `event2`, and `event3` are posted in that order. It also demonstrates the use of `cancel_events` to cancel the sequence and `delay_event_list` to temporarily prevent new sequences from starting. The `sequence_timeout` specifies the maximum time allowed for sequence completion.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sequence_shots.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nsequence_shots:\n  my_event_based_sequence_shot:\n    event_sequence:\n      - event1\n      - event2\n      - event3\n    cancel_events: cancel\n    delay_event_list:\n      delay1: 1s\n    sequence_timeout: 3s\n```\n\n----------------------------------------\n\nTITLE: Specifying a Reusable Widget Style in MPF\nDESCRIPTION: This snippet shows how to create a reusable widget style named `big_style` and apply it to a text widget on a slide. The `big_style` defines a font size of 100. The text \"HELLO\" on slide1 will be rendered with this style.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/widget_styles.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nwidget_styles:\n  big_style:\n    font_size: 100\nslides:\n  slide1:\n    - type: text\n      text: HELLO\n      style: big_style\n```\n\n----------------------------------------\n\nTITLE: Video Widget Control Events (YAML)\nDESCRIPTION: Demonstrates how to control the playback of a video widget using MPF events. This configuration shows how to define events that trigger actions such as play, pause, stop, seek, position, and volume adjustment. It allows for dynamic control of the video based on game events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/video.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  my_slide:\n    - type: video\n      video: my_video\n      control_events:\n        - event: play_my_vid\n          action: play\n        - event: wizard_caught\n          action: stop\n        - event: some_event\n          action: pause\n        - event: what_event\n          action: seek\n          value: .5\n        - event: move_it\n          action: position\n          value: 4.2\n        - event: mute_me\n          action: volume\n          value: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Switches in MPF\nDESCRIPTION: This YAML snippet demonstrates how to define switches in an MPF configuration file. It includes examples for both a direct input switch and a switch matrix, specifying the number that corresponds to the platform's switch numbering scheme.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/switches/mechanical_switches.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_direct_switch:\n    number: 23        # number depends on your platform\n  my_matrix_switch_row_1_column_3:\n    number: 1/3       # number depends on your platform\n```\n\n----------------------------------------\n\nTITLE: Configure Hardware Platform for SPIKE\nDESCRIPTION: This snippet configures the hardware platform to `spike` and sets up the `spike` section with essential settings like the serial port, baud rate, flow control, debug mode, and node board addresses.  The `baud` setting is used to initialize the connection, after which the bridge switches to `runtime_baud`.  It includes settings for nodes, port, baud and runtime_baud rate.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/config.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: spike\nspike:\n  port: /dev/ttyUSB0\n  baud: 115200\n  flow_control: false\n  debug: false\n  nodes: 0, 1, 8, 9, 10, 11\n  runtime_baud: 115200\n```\n\n----------------------------------------\n\nTITLE: Configure Eject with Switch Confirmation - YAML\nDESCRIPTION: Configures the `eject_timeouts:`, `confirm_eject_type:`, and `confirm_eject_switch:` settings for a plunger lane that has an exit switch. This configuration is used when there's a physical switch at the exit of the plunger lane to confirm that the ball has successfully been launched. The `confirm_eject_type` is set to `switch` and the `confirm_eject_switch` is specified.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/mechanical_with_switch.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    # ...\n    confirm_eject_type: switch\n    confirm_eject_switch: s_plunger_lane_exit\n    eject_timeouts: 3s\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel LEDs with Channel Assignments\nDESCRIPTION: This code snippet shows how to configure parallel LEDs in MPF, explicitly mapping each color channel (red, green, blue, white) to its corresponding hardware number.  This configuration provides flexibility in defining custom LED layouts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/leds.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  my_red_only_insert:\n    channels:\n      red:\n        - number: 0\n  my_rgb_insert:\n    channels:\n      red:\n        - number: 1\n      green:\n        - number: 3\n      blue:\n        - number: 2\n  my_white_light:\n    channels:\n      white:\n        - number: 4\n```\n\n----------------------------------------\n\nTITLE: Fading Lights with Short Syntax in YAML\nDESCRIPTION: This example demonstrates fading lights between steps using the short syntax: `(color)-f(time)(unit)`. The `rainbow_with_fade_f_syntax` show applies a 1-second fade to each color change of the `l_rgb` light.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/light_player.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nshows:\n  rainbow_with_fade_f_syntax:\n    - lights:\n        l_rgb: red-f1s\n      duration: 1s\n    - lights:\n        l_rgb: orange-f1s\n      duration: 1s\n    - lights:\n        l_rgb: yellow-f1s\n      duration: 1s\n    - lights:\n        l_rgb: green-f1s\n      duration: 1s\n    - lights:\n        l_rgb: blue-f1s\n      duration: 1s\n    - lights:\n        l_rgb: purple-f1s\n      duration: 1s\n\nshow_player:\n  play_rainbow_show: rainbow_with_fade_f_syntax\n```\n\n----------------------------------------\n\nTITLE: Basic Event Playing Configuration (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the event player to post events when specific events occur, such as ball starting, ball ending, tilt, and slam tilt. It defines a list of events to be posted for each triggering event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/event_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nevent_player:\n  ball_starting:\n    - cmd_flippers_enable\n    - cmd_autofire_coils_enable\n    - cmd_drop_targets_reset\n  ball_ending:\n    - cmd_flippers_disable\n    - cmd_autofire_coils_disable\n  tilt:\n    - cmd_flippers_disable\n    - cmd_autofire_coils_disable\n  slam_tilt:\n    - cmd_flippers_disable\n    - cmd_autofire_coils_disable\n```\n\n----------------------------------------\n\nTITLE: Defining Shows for Shot States and Success in YAML\nDESCRIPTION: This YAML configuration defines shows for different states of a shot (lit, hit, group completion). The `shot_lit` show indicates the lit state of a shot by displaying a corresponding widget and turning the light purple. The `shot_hit` show communicates success when a shot is hit by flashing the light. The `group_complete` show communicates success on completing all shots.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/shots/integrate_shots_with_shows_lights_sounds_widgets_or_slides.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshows:\n  shot_lit:    # define our show to indicate the state\n    - duration: -1      # this show step will run permanently\n      widgets:    # show the corresponding widget\n        (widget):\n          action: add\n      lights:     # turn the light purple\n        (leds): purple\n  shot_hit:    # define our show to communicate success to the player\n    - duration: 1s      # this show step lasts 1s\n        # add sounds here or videos\n        # add scoring here\n      shows:      # run another (built-in) show to flash the light\n        flash_color:\n          show_tokens:\n            color: red\n            leds: (leds)\n          speed: 4\n  group_complete:    # define our show to communicate success on completing all shots\n    - duration: 1s\n        # add scoring, sounds and video\n      shows:\n        flash_color:\n          priority: 10     # higher priority as the shots\n          show_tokens:\n            color: green\n            leds: l_outlane_left, l_inlane_left, l_inlane_right, l_outlane_right, gi_left_sling, gi_right_sling\n          speed: 4\n```\n\n----------------------------------------\n\nTITLE: Super Jets Mode Configuration (MPF, YAML)\nDESCRIPTION: This YAML code configures the `super_jets` mode in MPF. It defines the events that trigger the mode to start (`Super_Jets_Go`, `Super_Jets_Resume_Go`), sets the mode priority, and configures the score awarded for hitting the jet bumpers when the mode is active using `variable_player`. It also uses `show_player` to play a show named `super_jets_startup` at the start of the mode, and lights up the Super Jets light.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/AFM_super_jets.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: super_jets\nmode:\n  start_events: Super_Jets_Go, Super_Jets_Resume_Go\n  priority: 300\nvariable_player:\n  s_left_bumper_active:\n    score: 3000000|block\n  s_middle_bumper_active:\n    score: 3000000|block\n  s_right_bumper_active:\n    score: 3000000|block\n\n\nshow_player:\n  mode_super_jets_started:\n    super_jets_startup:\n      loops: 0\n    Super_Jets_on:\n      show_tokens:\n        lights: l_super_jets\n```\n\n----------------------------------------\n\nTITLE: Create a Shot Group for the Lanes in MPF\nDESCRIPTION: This snippet creates a shot group for the lanes, enabling rotation of lit and hit shots, triggering an event when all shots are hit, and resetting all shots to be lit.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/rollover_lanes_with_lane_change.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nshot_groups:\n  top_lane_group:\n    shots: top_lane_i, top_lane_n, top_lane_d, top_lane_y\n    reset_events: top_lane_group_hit_complete\n    rotate_left_events: s_flipper_left_active\n    rotate_right_events: s_flipper_right_active\n```\n\n----------------------------------------\n\nTITLE: Configuring Raspberry Pi connection\nDESCRIPTION: This YAML snippet configures the connection to a Raspberry Pi by specifying the IP address and port for the pigpio daemon. The IP address is set to 'localhost' and the port is set to '8888'. This configuration enables MPF to communicate with the Raspberry Pi for hardware control.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/raspberry_pi.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nraspberry_pi:\n  ip: localhost\n  port: 8888\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration with Token Replacement (YAML)\nDESCRIPTION: This snippet shows how to use the 'show_player:' section in your MPF configuration to play a show with token replacement. It configures the 'flash_red' show to loop indefinitely and replaces the 'led' token with the value 'led_02' when the 'some_event' event occurs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  some_event:\n    flash_red:\n      loops: -1\n      show_tokens:\n        led: led_02\n```\n\n----------------------------------------\n\nTITLE: Triggering Shows/Lights on Ball Start - YAML\nDESCRIPTION: This snippet configures a mode to start a show when the `ball_started` event is triggered. It demonstrates how to play music, flash lights, or start background shows at the beginning of a ball without delaying the ball launch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/ball_start_end.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\n# in your mode\nmode:\n  start_events: ball_started\nshow_player:\n  mode_my_mode_started:\n    short_start_show:\n      loops: 0\nshows:\n  short_start_show:\n    - duration: .5s\n#!       events: test_start\n      # add your show here\n##! test\n#! mock_event test_start\n#! start_game\n#! advance_time_and_run 1\n#! assert_event_called test_start\n```\n\n----------------------------------------\n\nTITLE: Configuring Matrix Light in YAML\nDESCRIPTION: This YAML snippet shows how to configure a matrix light in MPF. The `number` field specifies the column and row of the light in the matrix. This example uses `2:10` as the number which means that the light is located in column 2 and row 10 of the matrix.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/matrix_lights.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  my_matrix_light:\n    number: 2:10      # or 2/10\n```\n\n----------------------------------------\n\nTITLE: Define Flipper Entries in MPF (YAML)\nDESCRIPTION: This snippet defines the flipper mechanisms by linking the configured switches and coils. It creates a `flippers` section in the machine configuration, specifying the `main_coil`, `hold_coil`, and `activation_switch` for each flipper (left and right). This configuration connects the physical buttons to the respective coils to enable flipper control.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/dual_wound.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nflippers:\n  left_flipper:\n    main_coil: c_flipper_left_main\n    hold_coil: c_flipper_left_hold\n    activation_switch: s_left_flipper\n  right_flipper:\n    main_coil: c_flipper_right_main\n    hold_coil: c_flipper_right_hold\n    activation_switch: s_right_flipper\n```\n\n----------------------------------------\n\nTITLE: State Machine Configuration with Transitions (YAML)\nDESCRIPTION: This snippet expands on the previous example by adding `transitions:` to the state machine configuration. Transitions define how the state machine moves between different states based on specific events. Each transition specifies a `source` state, a `target` state, and the `events` that trigger the transition. Additionally, `events_when_transitioning` allows triggering events during the transition itself.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/state_machines.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: my_mode\nstate_machines:\n  my_state:\n    states:\n      start:\n        label: Start state\n      step1:\n        label:\n        show_when_active:\n          show: on\n          show_tokens: None\n        events_when_started: step1_start\n        events_when_stopped: step1_stop\n      step2:\n        label: Step2\n    transitions:\n      - source: start\n        target: step1\n        events: state_machine_proceed\n      - source: step1\n        target: step2\n        events: state_machine_proceed2\n        events_when_transitioning: going_to_step2\n      - source: step2\n        target: start\n        events: state_machine_proceed3\n      - source: step1, step2\n        target: start\n        events: state_machine_reset\n```\n\n----------------------------------------\n\nTITLE: Configuring a Ball Save Device in MPF\nDESCRIPTION: This code snippet demonstrates the basic configuration of a ball save device in an MPF configuration file. It sets the active time, hurry-up time, grace period, enable events, timer start events, auto-launch behavior, and the number of balls to save.  The debug option is also enabled for troubleshooting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/ball_saves.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nball_saves:\n  default:\n    active_time: 10s\n    hurry_up_time: 2s\n    grace_period: 2s\n    enable_events: mode_base_started\n    timer_start_events: balldevice_plunger_lane_ball_eject_success\n    auto_launch: true\n    balls_to_save: 1\n    debug: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Channels with YAML\nDESCRIPTION: This YAML configures lights with specific channels, defining their start channel and type. It demonstrates how to chain lights, especially for RGBW configurations. The 'previous' parameter links lights, allowing MPF to automatically calculate the internal channels for RGBW LEDs based on their position in the chain.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fadecandy/index.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  led_0:\n    start_channel: 0-0\n    subtype: led\n    type: rgb    # will use red: 0-0, green: 0-1, blue: 0-2\n  led_1:\n    previous: led_0\n    subtype: led\n    type: rgbw   # will use red: 0-3, green: 0-4, blue: 0-5, white: 0-6\n  led_2:\n    previous: led_1\n    subtype: led\n    type: rgbw   # will use red: 0-7, green: 0-8, blue: 0-9, white: 0-10\n```\n\n----------------------------------------\n\nTITLE: Chaining Lights Configuration (MPF 0.54+)\nDESCRIPTION: Demonstrates the new syntax introduced in MPF 0.54 for chaining lights. This approach uses `start_channel` to define the starting channel and `previous` to link lights together, simplifying configuration. The `type` parameter specifies the color order (rgb, rgbw).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/leds.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  led_0:\n    start_channel: 0-0    # the exact number format depends on your platform\n    subtype: led\n    type: rgb    # will use red: 0-0, green: 0-1, blue: 0-2\n  led_1:\n    previous: led_0\n    subtype: led\n    type: rgbw   # will use red: 0-3, green: 0-4, blue: 0-5, white: 0-6\n  led_2:\n    previous: led_1\n    subtype: led\n    type: rgbw   # will use red: 0-7, green: 0-8, blue: 0-9, white: 0-10\n```\n\n----------------------------------------\n\nTITLE: Configuring JAM Rollover Mode in YAML\nDESCRIPTION: This YAML configuration defines a mode called `JAM_rollover` that implements a top lanes feature. It includes settings for mode start, priority, counters for tracking completion, shots associated with top lane switches, shot groups to manage lane rotation, variable player settings for adjusting the playfield multiplier, and show player settings for visual feedback.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/top_lanes_with_multiplier.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# in your machine config\n#! switches:\n#!   s_top_lane_J:\n#!     number:\n#!   s_top_lane_A:\n#!     number:\n#!   s_top_lane_M:\n#!     number:\n#! lights:\n#!   l_jam_J:\n#!     number:\n#!   l_jam_A:\n#!     number:\n#!   l_jam_M:\n#!     number:\n#!   JAM_lanes:\n#!     number:\n#!   Playfield_2X:\n#!     number:\n#!   Playfield_3X:\n#!     number:\n#!   Playfield_4X:\n#!     number:\n#!   Playfield_5X:\n#!     number:\n#!   Playfield_10X:\n#!     number:\n#! shows:\n#!   Playfield_2x_on:\n#!     - duration: 1\n#!   Playfield_3x_on:\n#!     - duration: 1\n#!   Playfield_4x_on:\n#!     - duration: 1\n#!   Playfield_5x_on:\n#!     - duration: 1\n#!   Playfield_10x_on:\n#!     - duration: 1\n##! mode: JAM_rollover\n# in modes/JAM_rollover\nmode:\n  start_events: ball_started\n  priority: 110\ncounters:\n  lb_JAM_complete_count:\n    count_events: JAM_lanes_lit_complete\n    events_when_hit: JAM_lanes_done\n    starting_count: 1\n    direction: up\n    persist_state: false\nshots:\n  top_lane_J:\n    switch: s_top_lane_J\n    show_tokens:\n      light: l_jam_J\n  top_lane_A:\n    switch: s_top_lane_A\n    show_tokens:\n      light: l_jam_A\n  top_lane_M:\n    switch: s_top_lane_M\n    show_tokens:\n      light: l_jam_M\nshot_groups:\n  JAM_lanes:\n    shots: top_lane_J, top_lane_A, top_lane_M\n    rotate_left_events: s_left_flipper_active\n    rotate_right_events: s_right_flipper_active\n    reset_events:\n      JAM_lanes_lit_complete: 1s\nvariable_player:\n  mode_JAM_rollover_started:\n    pf_multiplier:\n      int: 1\n      action: set\n  JAM_lanes_done{count==2}:\n    pf_multiplier:\n      int: 2\n      action: set\n  JAM_lanes_done{count==3}:\n    pf_multiplier:\n      int: 3\n      action: set\n  JAM_lanes_done{count==4}:\n    pf_multiplier:\n      int: 4\n      action: set\n  JAM_lanes_done{count==5}:\n    pf_multiplier:\n      int: 5\n      action: set\n  JAM_lanes_done{count==6}:\n    pf_multiplier:\n      int: 10\n      action: set\n  JAM_lanes_complete:\n    score: 1000 * current_player.pf_multiplier\nshow_player:\n  JAM_lanes_lit_complete:\n    flash:\n      loops: 4\n      speed: 4\n      show_tokens:\n        lights: JAM_lanes\n  JAM_lanes_done{count==2}:\n    Playfield_2x_on:\n      show_tokens:\n        lights: Playfield_2X\n  JAM_lanes_done{count==3}:\n    Playfield_3x_on:\n      show_tokens:\n        lights: Playfield_2X, Playfield_3X\n  JAM_lanes_done{count==4}:\n    Playfield_4x_on:\n      show_tokens:\n        lights: Playfield_2X, Playfield_3X, Playfield_4X\n  JAM_lanes_done{count==5}:\n    Playfield_5x_on:\n      show_tokens:\n        lights: Playfield_2X, Playfield_3X, Playfield_4X, Playfield_5X\n  JAM_lanes_done{count>=6}:\n    Playfield_10x_on:\n      show_tokens:\n        lights: Playfield_2X, Playfield_3X, Playfield_4X, Playfield_5X, Playfield_10X\n```\n\n----------------------------------------\n\nTITLE: Defining a Show Pool in YAML\nDESCRIPTION: This snippet demonstrates the structure for defining a show pool named `group1` in a YAML configuration file.  It specifies a list of shows (`show1`, `show2`, `show3`) which constitute the pool and sets the selection `type` to `random`, indicating that shows should be selected randomly from the pool. The shows must be defined elsewhere in the configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/show_pools.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshow_pools:\n  group1:\n    shows:\n      - show1\n      - show2\n      - show3\n    type: random\n```\n\n----------------------------------------\n\nTITLE: Basic autofire_coils Configuration YAML\nDESCRIPTION: This example demonstrates a basic configuration for autofire coils in a pinball machine. It defines switches for left and right slingshots, coils for each slingshot with default pulse times, and then configures the 'autofire_coils' section to link each switch to its corresponding coil, enabling automatic firing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/autofire_coils.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_left_sling:\n    number: 1\n  s_right_sling:\n    number: 2\ncoils:\n  c_left_sling:\n    number: 1\n    default_pulse_ms: 10ms\n  c_right_sling:\n    number: 2\n    default_pulse_ms: 10ms\nautofire_coils:\n  left_sling:\n    coil: c_left_sling\n    switch: s_left_sling\n  right_sling:\n    coil: c_right_sling\n    switch: s_right_sling\n```\n\n----------------------------------------\n\nTITLE: Associating a Shot with an LED in YAML\nDESCRIPTION: This snippet demonstrates how to associate a shot with an LED using `show_tokens`. It assumes that an LED named `led_1` is configured in the machine.  When the shot is hit, the configured LED will be activated according to the current shot profile.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  my_first_shot:\n    switch: s_right_inlane\n    show_tokens:\n      led: led_1 # pick an LED that's valid in your machine\n```\n\n----------------------------------------\n\nTITLE: Configuring Stern Spike Trough with SPI Bit Bang in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to interface with a Stern Spike trough using the SPI Bit Bang platform in MPF. It defines the hardware platform, SPI pins, digital outputs, switches, coils, ball devices, and playfields necessary to control the trough. Adjust pin numbers according to your hardware setup.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/spike_trough.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  platform: your_platform, spi_bit_bang      # add your platform first here\nspi_bit_bang:\n  miso_pin: s_miso\n  cs_pin: o_cs\n  clock_pin: o_clock\ndigital_outputs:\n  o_cs:\n    number: 1        # adjust this for your platform\n    type: driver\n  o_clock:\n    number: 2        # adjust this for your platform\n    type: driver\nswitches:\n  s_trough0:\n    number: 0\n    platform: spi_bit_bang\n  s_trough1:\n    number: 1\n    platform: spi_bit_bang\n  s_trough2:\n    number: 2\n    platform: spi_bit_bang\n  s_trough3:\n    number: 3\n    platform: spi_bit_bang\n  s_trough4:\n    number: 4\n    platform: spi_bit_bang\n  s_trough5:\n    number: 5\n    platform: spi_bit_bang\n  s_trough6:\n    number: 6\n    platform: spi_bit_bang\n  s_trough_jam:      # this might be also number 0\n    number: 7\n    platform: spi_bit_bang\n  s_miso:\n    number: 10       # adjust this for your platform\n  s_plunger:\n    number: 11       # adjust this for your platform\n# the following is the same as in the \"modern trough with opto switches\" tutorial\ncoils:\n  c_trough_eject:\n    number: 4\n    default_pulse_ms: 20\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n    eject_timeouts: 3s\n  bd_plunger:\n    ball_switches: s_plunger\n    mechanical_eject: true\n    eject_timeouts: 5s\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Configuring Credit Pricing Tiers (YAML)\nDESCRIPTION: This snippet defines the settings for credit pricing, including price per credit and the number of credits awarded at different pricing tiers. The `key_type` is set to `float` for prices and `int` for the number of credits. `sort` specifies the ordering of options in the settings menu.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nsettings:\n  credits_price_one_credit:\n    label: Price for one credit\n    values:\n      .25: \"25ct\"\n      .5: \"50ct\"\n      .75: \"75ct\"\n      1: \"1 dollar\"\n      2: \"2 dollar\"\n      3: \"3 dollar\"\n      4: \"4 dollar\"\n      5: \"5 dollar\"\n    default: .5\n    key_type: float\n    sort: 500\n  credits_price_tier2:\n    label: Price for price tier 2\n    values:\n      .25: \"25ct\"\n      .5: \"50ct\"\n      .75: \"75ct\"\n      1: \"1 dollar\"\n      2: \"2 dollar\"\n      3: \"3 dollar\"\n      4: \"4 dollar\"\n      5: \"5 dollar\"\n    default: 2\n    key_type: float\n    sort: 510\n  credits_credits_tier2:\n    label: Number of credits for tier 2\n    values:\n      2: \"2\"\n      3: \"3\"\n      4: \"4\"\n      5: \"5\"\n      6: \"6\"\n      7: \"7\"\n      8: \"8\"\n      9: \"9\"\n      10: \"10\"\n    default: 5\n    key_type: int\n    sort: 520\n```\n\n----------------------------------------\n\nTITLE: Enable Steppers on PD-LED via P-ROC Config (YAML)\nDESCRIPTION: This snippet shows how to enable and configure two steppers connected to a PD-LED board within the `p_roc` configuration section. It defines the board ID, enables stepper outputs, and optionally allows tuning the stepper speed. It also shows example switch and stepper definitions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/steppers.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\np_roc:\n  pd_led_boards:\n    4:\n      use_stepper_0: true\n      use_stepper_1: true\n      # stepper_speed: 13524    # uncomment to tune the speed\nswitches:\n  s_stepper_4_0_home:\n    number: A4-B0-0\n  s_stepper_4_1_home:\n    number: A4-B0-1\nsteppers:\n  stepper_4_0:\n    number: 4-0\n    homing_mode: switch\n    homing_switch: s_stepper_4_0_home\n  stepper_4_1:\n    number: 4-1\n    homing_mode: switch\n    homing_switch: s_stepper_4_1_home\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Shot in YAML\nDESCRIPTION: This snippet shows how to define a basic shot in an MPF mode config file (base.yaml). It includes the shot name, the switch that triggers it, and comments to explain the purpose of the configuration. It assumes the existence of a 's_right_inlane' switch, but instructs the user to replace it with a valid switch in their machine.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  my_first_shot:\n    switch: s_right_inlane  # pick a switch that's valid in your machine\n```\n\n----------------------------------------\n\nTITLE: Eject Timeouts Configuration YAML\nDESCRIPTION: Sets the eject timeouts for different eject targets. The order of timeouts corresponds to the order of eject targets. If a ball is not confirmed within the timeout, the eject is considered failed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/ball_devices.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\neject_targets: playfield, bd_leftVUK, bd_leftCannonVUK, bd_rightCannonVUK\neject_timeouts: 500ms, 2s, 4s, 4s\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Mode Switches and Settings in MPF (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to integrate service mode into the modes list, define service switches with specific tags, add a setting, map keyboard keys to service functions, define a sound track for service mode sounds, and configure widget styles for the service mode interface within MPF. It defines switches for door open, service enter, escape, up, and down actions. It also includes an example setting for the replay score, keyboard mappings for navigation, and sound system and widget style configurations for the service mode interface.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/service_mode.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# include service mode in your modes list\nmodes:\n  - service\n# add tags to your switches\nswitches:\n  s_door_open:\n    number: 1\n    tags: service_door_open, power_off\n  s_service_enter:\n    number: 17\n    tags: service_enter\n  s_service_esc:\n    number: 18\n    tags: service_esc\n  s_service_up:\n    number: 19\n    tags: service_up\n  s_service_down:\n    number: 20\n    tags: service_down\n# add a setting (not used here)\nsettings:\n  replay_score:\n    label: Replay Score\n    values:\n      500000: \"500000 (default)\"\n      1000000: \"1000000\"\n      1500000: \"1500000\"\n    default: 500000\n    key_type: int\n    sort: 100\n# add keyboard switches\nkeyboard:\n  right:\n    switch: s_service_enter\n  left:\n    switch: s_service_esc\n  up:\n    switch: s_service_up\n  down:\n    switch: s_service_down\n# you need to define a \"sfx\" sound track because the service mode brings some sounds (see the sound documentation for details)\nsound_system:\n  tracks:\n    music:\n      type: standard\n      simultaneous_sounds: 1\n      volume: 0.5\n    voice:\n      type: standard\n      simultaneous_sounds: 1\n      volume: 0.7\n    sfx:\n      type: standard\n      simultaneous_sounds: 8\n      volume: 0.4\n# additionally you need to define some slide styles which are used in the mode\nwidget_styles:\n  medium:\n    font_name: pixelmix\n    font_size: 8           # for LCDs you need to increase this to 30-40. also change the font above\n    adjust_top: 1\n    adjust_bottom: 1\n  small:\n    font_name: smallest_pixel-7\n    font_size: 9           # for LCDs you need to increase this to 30-40. also change the font above\n    adjust_top: 2\n    adjust_bottom: 3\n```\n\n----------------------------------------\n\nTITLE: Flipper Configuration Example (Judge Dredd)\nDESCRIPTION: This example shows a complete flipper configuration for a machine with four flippers, like Judge Dredd. It defines the main and hold coils, activation switches, and EOS switches for each flipper. It relies on pre-defined `switches:` and `coils:` configurations in the machine's YAML file, which are commented out in this example for brevity.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/flippers.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nflippers:\n  lower_left:\n    main_coil: c_flipper_lower_left_main\n    hold_coil: c_flipper_lower_left_hold\n    activation_switch: s_flipper_left\n    eos_switch: flipperLwL_EOS\n    label: Left Main Flipper\n  lower_right:\n    main_coil: c_flipper_lower_right_main\n    hold_coil: c_flipper_lower_right_hold\n    activation_switch: s_flipper_right\n    eos_switch: flipperLwR_EOS\n    label: Right Main Flipper\n  upper_left:\n    main_coil: flipperUpLMain\n    hold_coil: flipperUpLHold\n    activation_switch: flipperUpL\n    eos_switch: flipperUpL_EOS\n    label: Upper Left Flipper\n  upper_right:\n    main_coil: flipperUpRMain\n    hold_coil: flipperUpRHold\n    activation_switch: flipperUpR\n    eos_switch: flipperUpR_EOS\n    label: Upper Right Flipper\n```\n\n----------------------------------------\n\nTITLE: Configure Plunger with Exit Switch\nDESCRIPTION: This configuration demonstrates setting up a plunger lane with a switch at the exit.  `confirm_eject_type` is set to `switch`, and `confirm_eject_switch` specifies the switch that confirms the ball has left the plunger lane. The `eject_timeouts` setting is also included.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/auto_manual.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    # ...\n    confirm_eject_type: switch\n    confirm_eject_switch: s_plunger_lane_exit\n    eject_timeouts: 3s\n```\n\n----------------------------------------\n\nTITLE: Configuring a Multiball Lock in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a multiball lock named 'bunker' with a specified number of balls to lock (3) and a ball device ('bd_bunker') to use as the lock. It defines the ball device with an eject coil ('c_eject') and a ball switch ('s_ball1').  The code also specifies the mode in which the config is valid.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/multiball_locks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_bunker:\n    eject_coil: c_eject\n    ball_switches: s_ball1\n##! mode: mode1\nmultiball_locks:\n  bunker:\n    balls_to_lock: 3\n    lock_devices: bd_bunker\n```\n\n----------------------------------------\n\nTITLE: Complete Configuration Example - YAML\nDESCRIPTION: This YAML snippet showcases a full configuration file, including hardware, switches, coils, playfields, and flippers sections. It uses FAST hardware with WPC driverboards and includes the `enable_events` setting for immediate flipper activation. The `#config_version=6` indicates the configuration version.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=6\n\nhardware:\n  platform: fast\n  driverboards: wpc\n\nswitches:\n  s_left_flipper:\n    number: SF4\n  s_right_flipper:\n    number: SF6\n\ncoils:\n  c_flipper_left_main:\n    number: FLLM\n  c_flipper_left_hold:\n    number: FLLH\n    allow_enable: true\n  c_flipper_right_main:\n    number: FLRM\n  c_flipper_right_hold:\n    number: FLRH\n    allow_enable: true\n\nplayfields:\n  playfield:\n    tags: default\n    default_source_device: None  # use None in steps before 8\n\nflippers:\n  left_flipper:\n    main_coil: c_flipper_left_main\n    hold_coil: c_flipper_left_hold\n    activation_switch: s_left_flipper\n    enable_events: machine_reset_phase_3\n  right_flipper:\n    main_coil: c_flipper_right_main\n    hold_coil: c_flipper_right_hold\n    activation_switch: s_right_flipper\n    enable_events: machine_reset_phase_3\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Shot Profile in YAML\nDESCRIPTION: This snippet shows how to define a custom shot profile with multiple states ('unlit', 'flashing', 'lit') and associate each state with a built-in MPF show ('off', 'flash', 'on'). The profile also includes the `loop: true` setting, which makes the profile cycle back to the first state after reaching the last state. This requires the 'shows' to be valid and exist in the MPF configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nshot_profiles:\n  my_first_profile:\n    states:\n      - name: unlit  # step 1\n        show: off\n      - name: flashing  # step 2\n        show: flash\n      - name: lit  # step 3\n        show: on\n    loop: true\n```\n\n----------------------------------------\n\nTITLE: Basic Timer Configuration in MPF (YAML)\nDESCRIPTION: This example demonstrates the basic structure for defining timers within the `timers:` section of a YAML configuration file in MPF.  It shows how to name timers and define settings for each timer.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/timers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntimers:\n   timer_name:\n      <settings>\n   some_other_timer_with_a_different_name:\n      <settings>\n   a_third_timer:\n      <settings>\n```\n\n----------------------------------------\n\nTITLE: Enable Debug Mode for P-Roc in MPF config.yaml\nDESCRIPTION: Enable debug mode in the `p_roc` section of your MPF `config.yaml` file to increase logging and aid in troubleshooting. This will provide more detailed information about the hardware platform's operation, but may slow down MPF. It is recommended to remove debug mode after debugging.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/troubleshooting.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\np_roc:\n  debug: true\n```\n\n----------------------------------------\n\nTITLE: Autofire Coil Configuration Example YAML\nDESCRIPTION: This YAML configuration demonstrates a basic setup for autofire coils using the OPP platform.  It includes hardware settings, coil and switch definitions, and autofire coil configuration.  The example shows how to link a coil to a switch and enable/disable the autofire based on custom events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/autofire_coils.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n\nhardware:\n   platform: opp\n   driverboards: gen2\n\nopp:\n   ports: /dev/ttyACM0, /dev/ttyACM1\n\nplayfields:\nplayfield:    #playfield must exist for autofire coils\n   tags: default\n   default_source_device: bd_plunger   #value must be set, default \"none\" not allowed when having autofire coils\n\nball_devices:\nbd_plunger:\n   ball_capacity: 1\n   mechanical_eject: true\n\ncoils:\nc_my_coil:\n   number: 0-0-11\n\nswitches:\ns_my_switch:\n   number: 0-0-16\n\nautofire_coils:\nmy_autofire_1:\n   coil: c_my_coil\n   switch: s_my_switch\n   enable_events: simulate_start\n   disable_events: simulate_stop\n\nkeyboard:\n1:\n   event: simulate_start\n2:\n   event: simulate_stop\n```\n\n----------------------------------------\n\nTITLE: Delaying Shot Hits Based on Another Switch Activation in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use `delay_switch` to prevent a shot from being hit for a specified duration after another switch is activated. This is useful for preventing accidental hits from adjacent lanes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/shots.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  my_shot:\n    switch: s_my_shot\n    delay_switch:\n      s_other_lane: 2s\n```\n\n----------------------------------------\n\nTITLE: Configuring High Score Mode\nDESCRIPTION: This YAML configuration defines the high score mode with settings for timeout, award display time, high score categories (score and loops), default high score values, and variable tracking (loops and character).  It also configures slide player events to trigger the initials entry and award displays. The configuration is intended for machines with displays to enter initials.  The file name is \"modes/high_score/config/high_score.yaml\".\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/high_scores/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\n#! variable_player:\n#!   score_100:\n#!     score: 2000000\n##! mode: high_score\n# modes/high_score/config/high_score.yaml\nmode:\n  priority: 500\n  start_events: game_ending, start_high_score\n  use_wait_queue: true\nhigh_score:\n  _overwrite: true\n  enter_initials_timeout: 60\n  award_slide_display_time: 4s\n  # define your high score categories and the awards\n  categories: !!omap\n    - score:\n        - GRAND CHAMPION\n        - HIGH SCORE 1\n        - HIGH SCORE 2\n        - HIGH SCORE 3\n        - HIGH SCORE 4\n        - HIGH SCORE 5\n        - HIGH SCORE 6\n        - HIGH SCORE 7\n        - HIGH SCORE 8\n    - loops:\n        - LOOP CHAMP\n  # set the defaults\n  defaults:\n    score:\n      - MPF: 1000000\n      - BRI: 900000\n      - JAN: 800000\n      - QUI: 700000\n      - MAR: 600000\n      - JOH: 500000\n      - ELI: 400000\n      - MIK: 300000\n      - ANT: 200000\n    loops:\n      - JAN: 42\n  vars:\n    loops:\n      - player: character\n# optional: change the slides (you can omit all the following)\nslide_player:\n  _overwrite: true\n  high_score_enter_initials: high_score_enter_initials\n  high_score_award_display: high_score_award_display\nslides:\n  _overwrite: true\n  high_score_enter_initials:\n    - type: text\n      style: big\n      font_size: 18\n      text: PLAYER (player_num)\n      color: ffff00\n      x: 105\n      y: 90\n    - type: text\n      style: big\n      font_size: 18\n      text: (award)\n      color: f0f0f0\n      x: 105\n      y: 70\n    - type: text_input\n      initial_char: A\n      dynamic_x: false\n      key: high_score\n      style: big\n      font_size: 18\n      max_chars: 3\n      x: 105\n      y: 20\n      shift_left_event: sw_lower_left_flipper\n      shift_right_event: sw_lower_right_flipper\n      select_event: sw_start\n      color: ff0000\n    - type: text\n      style: big\n      text: '<       >'\n      font_size: 18\n      x: 105\n      y: 20\n      color: ff0000\n    - type: text\n      text: ''\n      key: high_score\n      font_size: 18\n      style: big\n      x: 105\n      y: 50\n      color: ff00ff\n      animations:\n        show_slide:\n          - property: opacity\n            value: 1\n            duration: 0.3s\n            easing: in_out_quint\n          - property: opacity\n            value: 0\n            duration: 0.3s\n            repeat: true\n            easing: in_out_quint\n  high_score_award_display:\n    - type: text\n      text: (player_name)\n      font_size: 18\n      style: big\n      anchor_y: middle\n      anchor_x: middle\n      x: middle\n      y: middle\n      color: 00ff00\n      animations:\n        show_slide:\n          - property: opacity\n            value: 1\n            duration: 0.05s\n          - property: opacity\n            value: 0\n            duration: 0.05s\n            repeat: true\n    - type: text\n      text: (award)\n      font_size: 18\n      style: big\n      x: 105\n      y: 110\n      color: 0000ff\n    - type: text\n      text: (value)\n      style: big\n      x: 105\n      y: 30\n      color: 4040FF\n      font_size: 20\n      number_grouping: true\n      min_digits: 2\nloops_award_display:\n    - type: text\n      text: (player_name)\n      font_size: 18\n      style: big\n      anchor_y: middle\n      anchor_x: middle\n      x: middle\n      y: middle\n      color: 00ff00\n      animations:\n        show_slide:\n          - property: opacity\n            value: 1\n            duration: 0.05s\n          - property: opacity\n            value: 0\n            duration: 0.05s\n            repeat: true\n    - type: text\n      text: (award)\n      font_size: 18\n      style: big\n      x: 105\n      y: 110\n      color: 0000ff\n    - type: text\n      text: (value)\n      style: big\n      x: 105\n      y: 30\n      color: 4040FF\n      font_size: 20\n      number_grouping: true\n      min_digits: 2\n    - type: text\n      text: (player(player_num)|character)\n      style: big\n      x: 105\n      y: 10\n      color: 4040FF\n      font_size: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiballs in YAML\nDESCRIPTION: This YAML configuration example showcases different multiball setups, including adding balls, releasing locked balls, and setting shoot-again timers. It demonstrates how to configure various aspects of multiball behavior in MPF, such as ball counts, ball count types, and event triggers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/multiballs.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nmultiballs:\n  add_a_ball:\n    ball_count: 1\n    ball_count_type: add\n    shoot_again: 30s\n    enable_events: mb4_enable\n    disable_events: mb4_disable\n    start_events: mb4_start\n    stop_events: mb4_stop\n  quick_2_ball:\n    ball_count: 2\n    ball_count_type: total\n    shoot_again: 20s\n    start_events: mb11_start\n    ball_locks: bd_lock\n  release_all_locked_balls:\n    ball_count: current_player.lock_mb6_locked_balls\n    ball_count_type: add\n    shoot_again: 20s\n    start_events: mb12_start\n    ball_locks: bd_lock\n  quick_add_2_ball:\n    ball_count: 2\n    ball_count_type: add\n    shoot_again: 0\n    start_events: mb6_start\n    ball_locks: bd_lock\n  full_ball_save:\n    ball_count: 2\n    shoot_again: 30s\n    hurry_up_time: 10s\n    grace_period: 5s\n    add_a_ball_events: add_ball\n    add_a_ball_shoot_again: 20s\n    add_a_ball_hurry_up_time: 5s\n    add_a_ball_grace_period: 10s\n    start_events: mb20_start\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Shot Profile in YAML\nDESCRIPTION: This snippet demonstrates a basic shot profile configuration with two states: `unlit` and `lit`. It shows how to define the show to be played for each state. This is a fundamental example showcasing the structure of a shot profile.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/shot_profiles.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nshot_profiles:\n  my_default_profile:\n    states:\n      - name: unlit\n        show: \"off\"\n      - name: lit\n        show: \"on\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Lights in MPF (YAML)\nDESCRIPTION: This snippet demonstrates configuring lights in MPF for a WPC machine.  The `number` field corresponds to the lamp number in the operator's manual, prefixed with `l`. The `subtype` is set to `matrix` for matrix-controlled lamps.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machines/wpc.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_ball_save:\n    number: l11\n    subtype: matrix\n  l_fortress_multiball:\n    number: L12\n    subtype: matrix\n  l_museum_multiball:\n    number: L13\n    subtype: matrix\n  l_cryoprison_multiball:\n    number: l14\n    subtype: matrix\n  l_wasteland_multiball:\n    number: L15\n    subtype: matrix\n  l_shoot_again:\n    number: l16\n    subtype: matrix\n```\n\n----------------------------------------\n\nTITLE: Chaining Lights Using 'previous'\nDESCRIPTION: This snippet demonstrates how to chain lights using the 'previous' setting, simplifying the configuration of sequential lights. Only the number of the first light in the chain needs to be specified; subsequent lights reference the previous light, and MPF calculates the number. Ensure to specify the `type` parameter so MPF understands the channel count.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/lights.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  led_0:\n    number: 0\n    subtype: led\n    type: rgb\n  led_1:\n    previous: led_0\n    subtype: led\n    type: rgbw\n  led_2:\n    previous: led_1\n    subtype: led\n    type: rgbw\n```\n\n----------------------------------------\n\nTITLE: Configuring Plunger Ball Device in YAML\nDESCRIPTION: This snippet defines the plunger as a ball device, linking the ball switch and eject coil.  The `ball_switches` attribute specifies the switch that is active when a ball is in the plunger lane. The `eject_coil` attribute links to the configured coil.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/auto_manual.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    eject_coil: c_plunger\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Wizard Modes with Achievements (YAML)\nDESCRIPTION: These examples show how to use achievements to start and stop wizard modes in MPF.  The snippets demonstrate various approaches, including using counters to enable achievements, enabling achievements to start modes (both directly and indirectly via event players), and using events triggered by mode starts/stops to update achievement states.  `captainschair` is used as an example achievement name.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/wizard_modes.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n    # Use a counter to enable an achievement\n    achievements:\n      captainschair:\n        enable_events: completed_missions_count_hit{value==6}\n\n    # Enable an achievement to start a mode [direct event]\n    mode:\n      start_events: achievement_captainschair_state_enabled\n\n    # Enable an achievement to start a mode [indirect event]\n    event_player:\n      achievement_captainschair_state_enabled: start_mode_captainschair\n\n    # Start an achievement when its wizard mode starts\n    achievements:\n      captainschair:\n        start_events: mode_captainschair_started\n\n    # Complete an objective to complete an achievement [direct event]\n    achievements:\n      captainschair:\n        complete_events: logicblock_captainshots_counter_complete\n\n    # Complete an objective to complete an achievement [indirect event]\n    achievements:\n      captainschair:\n        complete_events: captainschair_complete\n    event_player:\n      logicblock_captainshots_counter_complete: captainschair_complete\n\n    # Stop an achievement when a mode stops\n    achievements:\n      captainschair:\n        stop_events: mode_captainschair_will_stop\n```\n\n----------------------------------------\n\nTITLE: Configuring Player Controlled Eject Event (Inactive) in YAML\nDESCRIPTION: This snippet configures the plunger to eject the ball when the launch button is released (switch becomes inactive). The `player_controlled_eject_event` is set to the inactive event of the launch button switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/auto_manual.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    eject_coil: c_plunger\n    mechanical_eject: true\n    player_controlled_eject_event: s_launch_button_inactive\n```\n\n----------------------------------------\n\nTITLE: Configuring Achievements in YAML\nDESCRIPTION: This code snippet demonstrates the configuration of multiple achievements within a mode's configuration file using YAML. Each achievement defines its behavior based on events, show configurations, and state transitions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/achievements.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: mode1\nachievements:\n  world_tour:\n    show_tokens:\n      leds: l_world_tour\n    show_when_selected: flash\n    show_when_started: flash\n    show_when_completed: on\n    events_when_started: start_world_tour_mode\n    restart_after_stop_possible: true\n    events_when_completed: rotate_mission_rotator, light_mission_select\n    complete_events: world_tour_success\n    enable_events: world_tour_fail, ball_will_end\n  money_bags:\n    show_tokens:\n      leds: l_money_bags\n    show_when_selected: flash\n    show_when_started: flash\n    show_when_completed: on\n    events_when_started: start_money_bags_mode\n    restart_after_stop_possible: true\n    events_when_completed: rotate_mission_rotator, light_mission_select\n    complete_events: money_bags_success\n    enable_events: money_bags_fail, ball_will_end\n  music_awards:\n    show_tokens:\n      leds: l_music_awards\n    show_when_selected: flash\n    show_when_started: flash\n    show_when_completed: on\n    events_when_started: start_music_awards_mode\n    restart_after_stop_possible: true\n    complete_events: music_awards_success\n    events_when_completed: rotate_mission_rotator, light_mission_select\n    enable_events: music_awards_fail, ball_will_end\n  jukebox:\n    show_tokens:\n      leds: l_jukebox_insert\n    show_when_selected: flash\n    show_when_started: flash\n    show_when_completed: on\n    events_when_started: start_jukebox_mode\n    restart_after_stop_possible: true\n    events_when_completed: rotate_mission_rotator, light_mission_select\n    complete_events: jukebox_success\n    enable_events: jukebox_fail, ball_will_end\n  play_poker:\n    show_tokens:\n      leds: l_play_poker\n    show_when_selected: flash\n    show_when_started: flash\n    show_when_completed: on\n    events_when_started: start_play_poker_mode\n    restart_after_stop_possible: true\n    events_when_completed: rotate_mission_rotator, light_mission_select\n    complete_events: play_poker_success\n    enable_events: play_poker_fail, ball_will_end\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Player in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the `event_player` configuration to trigger events upon the occurrence of `ball_starting` and `ball_ending` events. It shows that the `ball_starting` event will trigger `show_ball_start_animation`, `play_start_sound`, and `start_first_mode` events. Similarly, the `ball_ending` event will trigger `show_ball_ending_animation` and `play_drain_sound` events. This section can be added to machine-wide config file or a mode-specific config file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/event_player.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nevent_player:\n  ball_starting:\n    - show_ball_start_animation\n    - play_start_sound\n    - start_first_mode\n  ball_ending:\n    - show_ball_ending_animation\n    - play_drain_sound\n```\n\n----------------------------------------\n\nTITLE: Starting MPF Engine and MC\nDESCRIPTION: This snippet shows how to start both the MPF game engine and the media controller simultaneously using the `mpf both` command. It requires the user to open a command prompt, navigate to the machine folder, and execute the command. This is the most common method to start MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmpf both <enter>\n```\n\n----------------------------------------\n\nTITLE: Sound Player Block Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the `sound_player` section to block events from being passed to lower-priority modes. This ensures that only one sound is played for a specific event, such as a jet bumper hit, even if multiple modes have configurations for the same event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sound_player.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: mode1\nsound_player:\n  sw_jet_bumper_active:\n    super_jet_bumper_sound:\n      block: true\n```\n\n----------------------------------------\n\nTITLE: Show Configuration with LED Token (YAML)\nDESCRIPTION: This show demonstrates how to use a token '(led)' in an MPF show configuration. The token allows replacing the LED name dynamically when the show is played. This makes the show reusable for different LEDs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: 0\n  lights:\n    (led): red\n- time: 1\n  lights:\n    (led): off\n```\n\n----------------------------------------\n\nTITLE: Awarding Points for Sequence Progression and Completion in MPF\nDESCRIPTION: Uses `variable_player` to award points for hitting a drop target that is part of the sequence (`logicblock_(name)_hit`) and for completing the entire sequence (`logicblock_(name)_complete`). This provides a reward system for the player's progress.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/sequential_drop_banks.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvariable_player:\n  logicblock_drop_sequence_hit:\n    score: 1000\n  logicblock_drop_sequence_complete:\n    score: 50_000\n```\n\n----------------------------------------\n\nTITLE: Eject Targets Configuration YAML\nDESCRIPTION: Configures the eject targets for a ball device, specifying where the device can eject a ball. This example shows multiple targets, including the playfield and several ball devices. It's crucial for ball routing by MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/ball_devices.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\neject_targets: playfield, bd_leftVUK, bd_leftCannonVUK, bd_rightCannonVUK\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Wound Flipper Coils in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure `default_pulse_ms` and `default_hold_power` for single-wound flipper coils within the `coils:` section of the MPF machine configuration file. It illustrates how to set the initial pulse time and hold power for flippers that maintain their position using a continuous current. `allow_enable` allows the coil to be enabled.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/coils/pulse_power.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  c_flipper_left:\n    number: 0\n    allow_enable: true\n    default_hold_power: 0.125\n    default_pulse_ms: 20\n  c_flipper_right:\n    number: 1\n    allow_enable: true\n    default_hold_power: 0.125\n    default_pulse_ms: 20\n```\n\n----------------------------------------\n\nTITLE: Example Achievement Group Configuration in YAML\nDESCRIPTION: This example demonstrates how to configure an achievement group called `my_group` in a mode configuration file. It defines the achievements included in the group, the events that enable it, events to trigger achievement selection and show control tokens.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/achievement_groups.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\n#! # create some empty achievements for the group\n#! achievements:\n#!   world_tour:\n#!     enable_events: world_tour_fail, ball_will_end\n#!   money_bags:\n#!     enable_events: money_bags_fail, ball_will_end\n#!   music_awards:\n#!     enable_events: music_awards_fail, ball_will_end\n#!   jukebox:\n#!     enable_events: jukebox_fail, ball_will_end\n#!   play_poker:\n#!     enable_events: play_poker_fail, ball_will_end\nachievement_groups:\n  my_group:\n    achievements: world_tour, money_bags, music_awards, jukebox, play_poker\n    enable_events: enable_mission_selection\n    start_selected_events: shot_lower_vuk_from_playfield_hit\n    select_random_achievement_events: rotate_mission_rotator\n    events_when_enabled: mission_rotator_ready\n    rotate_right_events: sw_toggle\n    show_tokens:\n      leds: l_begin_round\n    show_when_enabled: flash\n```\n\n----------------------------------------\n\nTITLE: Qualifying Wizard Mode with Counters and Achievements in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to use counters and achievements in MPF to qualify and start a wizard mode. It defines a mode called `wizard_qualify` that uses a counter to track shots and an achievement to trigger the wizard mode when the counter reaches a certain value. The `winterhascome` achievement is enabled when the `winteriscoming_count` counter completes, and the mode `winterhascome` is started when the achievement is enabled.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/wizard_modes.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: wizard_qualify\n# mode: wizard_qualify\nmode:\n  start_events: mode_base_started\nachievements:\n  winterhascome:\n    enable_events: logicblock_winteriscoming_count_complete\n    start_events: achievement_winterhascome_state_enabled\ncounters:\n  winteriscoming_count:\n    starting_count: 0\n    count_complete_value: 3\n    count_events: winteriscoming_shot_hit\n##! mode: winterhascome\n# mode: winterhascome\nmode:\n  start_events: achievement_winterhascome_state_started\n##! test\n#! start_game\n#! post mode_base_started\n#! post winteriscoming_shot_hit\n#! post winteriscoming_shot_hit\n#! assert_mode_not_running winterhascome\n#! post winteriscoming_shot_hit\n#! assert_mode_running winterhascome\n```\n\n----------------------------------------\n\nTITLE: Complete Trough Configuration in YAML\nDESCRIPTION: This is a complete example configuration showing the switches, coils, ball devices, and playfield configurations for a trough setup. It includes definitions for the trough switches, eject coil, trough and plunger ball devices, and a default playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_mechanical.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_trough1:\n    number: 2\n  s_trough2:\n    number: 3\n  s_trough3:\n    number: 4\n  s_trough4:\n    number: 5\n  s_trough5:\n    number: 6\n  s_trough6:\n    number: 7\n  s_trough_jam:\n    number: 8\n  s_plunger:\n    number: 10\n\nvirtual_platform_start_active_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6\n\ncoils:\n  c_trough_eject:\n    number: 4\n    default_pulse_ms: 20\n\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n    eject_timeouts: 3s\n  bd_plunger:\n    ball_switches: s_plunger\n    mechanical_eject: true\n    eject_timeouts: 5s\n\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Configuring Show Player for Shot Events in YAML\nDESCRIPTION: This YAML configuration uses a show player to trigger different shows based on shot events. When a shot is hit (e.g., `shot_outlane_left_hit`), a `shot_hit` show is played, which flashes a specific light (e.g., `gi_left_sling`). Similarly, when the shot group is complete, the `group_complete` show is played. Conditional events are used to ensure the shows only play if the shot state is \"unlit\" before the hit.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/shots/integrate_shots_with_shows_lights_sounds_widgets_or_slides.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# on success flash the sling shot gi on the side of the lane hit and play a sound/video\nshow_player:\n   # play a show once a each shot is lit\n  shot_outlane_left_hit{state==\"unlit\"}:\n    shot_hit:\n      key: left\n      show_tokens:\n        leds: gi_left_sling\n      loops: 0\n  shot_inlane_left_hit{state==\"unlit\"}:\n    shot_hit:\n      key: left\n      show_tokens:\n        leds: gi_left_sling\n      loops: 0\n  shot_outlane_right_hit{state==\"unlit\"}:\n    shot_hit:\n      key: right\n      show_tokens:\n        leds: gi_right_sling\n      loops: 0\n  shot_inlane_right_hit{state==\"unlit\"}:\n    shot_hit:\n      key: right\n      show_tokens:\n        leds: gi_right_sling\n      loops: 0\n   # play a show when the group completes\n  sg_lanes_complete{state==\"lit\"}:\n    group_complete:\n      loops: 0\n```\n\n----------------------------------------\n\nTITLE: Credits Settings in MPF Mode Config (YAML)\nDESCRIPTION: Example configuration to place in the credits mode configuration file which sets up the switches, credits, pricing tiers, and strings. This is intended for the /modes/credits/config/credits.yaml file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_coin_left:\n    number:\n  s_service_coin:\n    number:\ncredits:\n  max_credits: 12\n  free_play: false\n  service_credits_switch: s_service_coin\n  switches:\n    - switch: s_coin_left\n      type: money\n      value: .25\n  pricing_tiers:\n    - price: .50\n      credits: 1\n    - price: 2\n      credits: 5\n  fractional_credit_expiration_time: 15m\n  credit_expiration_time: 2h\n  persist_credits_while_off_time: 1h\n  free_play_string: FREE PLAY\n  credits_string: CREDITS\n\n##! mode: credits\n# in modes/credits/config/credits.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring P-ROC driverboards for WPC in MPF (YAML)\nDESCRIPTION: This snippet demonstrates the configuration for the `driverboards` section in MPF when using a P-ROC controller with a WPC machine.  Specifying `driverboards: wpc` is crucial to ensure correct polarity and prevent damage to the hardware, as the P-ROC can control different types of driver boards with reversed polarities.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machines/wpc.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: p_roc\np_roc:\n  driverboards: wpc\n```\n\n----------------------------------------\n\nTITLE: Complete Configuration - YAML\nDESCRIPTION: This snippet provides the complete configuration file for a single-ball trough setup without a shooter lane. It includes the switches, coils, ball devices, playfields, and virtual platform settings to ensure correct ball handling and game operation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball_no_shooter_lane.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nswitches:\n  s_drain:\n    number: 01\n\ncoils:\n  c_drain_eject:\n    number: 03\n    default_pulse_ms: 20\n\nball_devices:\n  bd_drain:\n    ball_switches: s_drain\n    eject_coil: c_drain_eject\n    tags: drain, home, trough\n    eject_timeouts: 3s\n\nplayfields:\n  playfield:\n    default_source_device: bd_drain\n    tags: default\n\nvirtual_platform_start_active_switches: s_drain\n```\n\n----------------------------------------\n\nTITLE: Configure Flipper Coils in MPF (YAML)\nDESCRIPTION: This snippet adds entries for the flipper coils, including both the main (power) and hold windings, to the machine-wide configuration file. The `number` entries need to be adjusted to match the actual hardware. The `allow_enable: true` setting is crucial for the hold coils as it permits them to be enabled (held on), which is essential for flipper functionality.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/dual_wound.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_flipper_left_main:\n    number: 0\n  c_flipper_left_hold:\n    number: 1\n    allow_enable: true\n  c_flipper_right_main:\n    number: 2\n  c_flipper_right_hold:\n    number: 3\n    allow_enable: true\n```\n\n----------------------------------------\n\nTITLE: Configuring track_player in MPF with YAML\nDESCRIPTION: This example shows how to configure the `track_player` in MPF to pause, play and stop all sounds on audio tracks based on events. It demonstrates the usage of `action` and `fade` settings for various track operations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/track_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntrack_player:\n  pause_music_track:\n    music:\n      action: pause\n      fade: 1 sec\n  resume_music_track:\n    music:\n      action: play\n  stop_sounds_on_all_tracks:\n    __all__:\n      action: stop_all_sounds\n      fade: 0.5 sec\n```\n\n----------------------------------------\n\nTITLE: Enable OPP Debugging in MPF Config\nDESCRIPTION: This configuration snippet enables debugging mode for the OPP platform, providing more detailed logging information.  Adding `debug: true` to the `opp` section of the MPF configuration file increases verbosity to aid in identifying and resolving issues. It may slow down MPF and should be disabled after debugging.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/troubleshooting.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nopp:\n  debug: true\n```\n\n----------------------------------------\n\nTITLE: Configuring a Drop Target Bank\nDESCRIPTION: This YAML snippet configures a drop target bank named \"judge\" with a list of individual drop targets (j, u, d, g, e), reset coils (reset_drop_targets), and a reset delay after completion (1 second).  It demonstrates the basic structure for defining a drop target bank within the MPF configuration file. The configuration relies on pre-existing definitions for switches, coils, and individual drop targets.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/drop_target_banks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndrop_target_banks:\n  judge:\n    drop_targets: j, u, d, g, e\n    reset_coils: reset_drop_targets\n    reset_on_complete: 1s\n```\n\n----------------------------------------\n\nTITLE: Configuring Stepper with Pololu Tic in MPF (YAML)\nDESCRIPTION: This configuration snippet demonstrates how to configure a stepper motor connected to a Pololu Tic stepper controller within the MPF configuration file. It defines the hardware settings to use the `pololu_tic` controller, a switch for homing, and the stepper configuration including homing settings, named positions, and platform specific settings like `max_acceleration`. It requires the `pololu_tic` controller to be connected and configured.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pololu_tic.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nhardware:\n  stepper_controllers: pololu_tic\n\nswitches:\n  s_home:\n    number: 1\n\nsteppers:\n  stepper1:\n    number: 1\n    homing_mode: switch\n    homing_switch: s_home\n    named_positions:\n      10: test_00\n      20: test_01\n      50: test_10\n    platform_settings:\n      max_acceleration: 20000\n```\n\n----------------------------------------\n\nTITLE: Custom Rotation Pattern Configuration in YAML\nDESCRIPTION: This snippet illustrates how to configure a custom rotation pattern for a shot profile using the `rotation_pattern` setting. The pattern is defined as a list of `L` and `R` values, specifying the rotation direction for each event post. This affects the rotation of shots within a shot group when rotation events are triggered.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/shot_profiles.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nshot_profiles:\n  my_default_profile:\n    states:\n      - name: unlit\n        show: \"off\"\n      - name: red\n        show: led_color\n        show_tokens:\n          color: red\n      - name: blue\n        show: \"flash\"\n        show_tokens:\n          color: blue\n    rotation_pattern: L, L, L, L, R, R, R, R\n```\n\n----------------------------------------\n\nTITLE: Storing State Machine State in Player Variable (YAML)\nDESCRIPTION: This example shows how to store the current state of a state machine in a player variable using the `variable_player` configuration. The state is accessed via `device.state_machines.my_state.state` and stored in the `my_player_var` player variable. The test section verifies state transitions and updates to the player variable.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/state_machines.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\nstate_machines:\n  my_state:\n    states:\n      start:\n        label: Start state\n      step1:\n        label:\n        show_when_active:\n          show: on\n          show_tokens: None\n        events_when_started: step1_start\n        events_when_stopped: step1_stop\n      step2:\n        label:\n    transitions:\n      - source: start\n        target: step1\n        events: state_machine_proceed\n      - source: step1\n        target: step2\n        events: state_machine_proceed2\n        events_when_transitioning: going_to_step2\n      - source: step2\n        target: start\n        events: state_machine_proceed3\n      - source: step1, step2\n        target: start\n        events: state_machine_reset\n\nvariable_player:\n  \"{device.state_machines.my_state.state}\":\n    my_player_var:\n      action: set\n      string: \"{value}\"\n\n##! test\n#! start_game\n#! start_mode my_mode\n#! advance_time_and_run .1\n#! mock_event going_to_step2\n#! assert_str_condition start device.state_machines.my_state.state\n#! assert_player_variable start my_player_var\n#! post state_machine_proceed\n#! advance_time_and_run .1\n#! assert_str_condition step1 device.state_machines.my_state.state\n#! assert_player_variable step1 my_player_var\n#! assert_event_not_called going_to_step2\n#! post state_machine_proceed2\n#! advance_time_and_run .1\n#! assert_str_condition step2 device.state_machines.my_state.state\n#! assert_event_called going_to_step2\n#! assert_player_variable step2 my_player_var\n```\n\n----------------------------------------\n\nTITLE: Configuring Slingshots with Autofire Coils in MPF\nDESCRIPTION: This code snippet demonstrates how to configure a slingshot in MPF using `switches`, `coils`, and `autofire_coils`. The `s_sling_left` switch triggers the `c_sling_left` coil via the `ac_slingshot_left` autofire coil. Adjust `default_pulse_ms` and `default_pulse_power` in your coil to control the strength and sound of your slingshots.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/slingshots.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_sling_left:\n    number: 5\ncoils:\n  c_sling_left:\n    number: 7\n    default_pulse_ms: 15\nautofire_coils:\n  ac_slingshot_left:\n    coil: c_sling_left\n    switch: s_sling_left\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Slides with Events in MPF\nDESCRIPTION: This YAML configuration shows how to use the `slide_player` to display different slides based on different events. The `left_lane_hit` and `right_lane_hit` events trigger the `good_job` slide, while the `left_ramp_hit` event triggers the `ramp_champ` slide. Slide definitions are commented out for brevity. The test section posts the left_lane_hit event and asserts the correct text.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/showing_slides.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  left_lane_hit: good_job\n  right_lane_hit: good_job\n  left_ramp_hit: ramp_champ\n##! test\n#! post left_lane_hit\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"GOOD JOB\"\n```\n\n----------------------------------------\n\nTITLE: Launching on Launch Button Press (YAML)\nDESCRIPTION: This snippet configures the plunger to launch the ball when the launch button is pressed. It uses the `s_launch_button_active` event, which is automatically posted when the launch button switch becomes active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/coil_fired.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    eject_coil: c_plunger\n    player_controlled_eject_event: s_launch_button_active\n```\n\n----------------------------------------\n\nTITLE: Configuring a Kickback with Ball Save in MPF\nDESCRIPTION: This YAML configuration demonstrates how to set up a kickback mechanism using switches and coils, and integrate it with a ball save feature. The kickback uses a switch to detect the ball and a coil to kick it back into play. The ball save is enabled when the kickback fires and saves one ball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/kickbacks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_kickback:\n    number: 5\ncoils:\n  c_kickback:\n    number: 7\n    default_pulse_ms: 15\nkickbacks:\n  ac_kickback:\n    coil: c_kickback\n    switch: s_kickback\nball_saves:\n  kickback_ball_save:\n    active_time: 5s\n    enable_events: kickback_ac_kickback_fired\n    auto_launch: true\n    balls_to_save: 1\n```\n\n----------------------------------------\n\nTITLE: Delaying Ball Start and End - YAML\nDESCRIPTION: This snippet demonstrates how to delay the start and end of a ball using a `queue_relay_player`.  It triggers shows during the `ball_starting` and `ball_ending` events and waits for the shows to complete before continuing the game flow. Both shows can be canceled using both flippers. Also demonstrates how to only delay the first ball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/ball_start_end.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\n# in your mode\nmode:\n  start_events: ball_will_start     # in normal mode use ball_started instead\n  priority: 200\nqueue_relay_player:\n  ball_starting:\n    post: start_ball_starting_show\n    wait_for: mode_ball_starting_show_ended\n  ball_ending:\n    post: start_ball_ending_show\n    wait_for: mode_ball_ending_show_ended\nshow_player:\n  flipper_cancel:\n    ball_starting_show: stop\n    ball_ending_show: stop\n  start_ball_starting_show:\n    ball_starting_show:\n      loops: 0\n      events_when_stopped: mode_ball_starting_show_ended\n  start_ball_ending_show:\n    ball_ending_show:\n      loops: 0\n      events_when_stopped: mode_ball_ending_show_ended\nshows:\n  ball_starting_show:\n    - duration: 5s\n#!       events: test_start\n  ball_ending_show:\n    - duration: 5s\n#!       events: test_stop\n##! test\n#! mock_event test_start\n#! mock_event mode_ball_starting_show_ended\n#! mock_event test_stop\n#! mock_event mode_ball_ending_show_ended\n#! start_game\n#! advance_time_and_run 1\n#! assert_event_called test_start\n#! assert_event_not_called mode_ball_starting_show_ended\n#! advance_time_and_run 5\n#! assert_event_called mode_ball_starting_show_ended\n#! drain_all_balls\n#! # still on ball 1\n#! mock_event test_start\n#! mock_event mode_ball_starting_show_ended\n#! advance_time_and_run 1\n#! assert_player_variable 1 ball\n#! assert_event_called test_stop\n#! assert_event_not_called mode_ball_ending_show_ended\n#! advance_time_and_run 5\n#! assert_event_called mode_ball_ending_show_ended\n#! # on ball 2\n#! mock_event test_stop\n#! mock_event mode_ball_ending_show_ended\n#! assert_player_variable 2 ball\n#! assert_event_called test_start\n#! assert_event_not_called mode_ball_starting_show_ended\n#! post flipper_cancel\n#! advance_time_and_run 1\n#! assert_event_called mode_ball_starting_show_ended\n```\n\n----------------------------------------\n\nTITLE: Configure Stepper as Diverter in MPF\nDESCRIPTION: This snippet demonstrates how to configure a stepper motor to function as a diverter in MPF. It defines a diverter and links its activation and deactivation events to specific positions of the stepper motor. When the diverter activates, the stepper moves to position 20, triggering the 'diverter_d_diverter_activating' event. When it deactivates, the stepper moves to position 400, triggering 'diverter_d_diverter_deactivating'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/diverters/stepper_as_diverter.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndiverters:\n  d_diverter:\n    debug: true\n    feeder_devices: bd_trough\n    targets_when_active: playfield\n    targets_when_inactive: bd_target\nsteppers:\n  s_diverter:\n    number:\n    named_positions:\n      20: diverter_d_diverter_activating\n      400: diverter_d_diverter_deactivating\n```\n\n----------------------------------------\n\nTITLE: Map Playfield Switch to Keyboard Key in MPF (YAML)\nDESCRIPTION: This snippet maps the 'q' key on the keyboard to the `s_right_inlane` switch. This enables testing of the playfield switch functionality using the keyboard during development.  The `switch` parameter specifies the switch that is triggered when the key is pressed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/9_start_button.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkeyboard:\n  q:\n    switch: s_right_inlane\n```\n\n----------------------------------------\n\nTITLE: Configure a modern trough with jam switch in MPF (YAML)\nDESCRIPTION: This snippet provides an example configuration for a modern-style trough with a jam switch in MPF. It defines the switches, coils, and the ball device itself, including the `debug: true` setting to enable verbose logging for troubleshooting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/7_trough.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#! switches:\n#!   s_trough1:\n#!     number: 1\n#!   s_trough2:\n#!     number: 2\n#!   s_trough3:\n#!     number: 3\n#!   s_trough4:\n#!     number: 4\n#!   s_trough5:\n#!     number: 5\n#!   s_trough6:\n#!     number: 6\n#!   s_trough_jam:\n#!     number: 7\n#! coils:\n#!   c_trough_eject:\n#!     number: 3\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    debug: true\n```\n\n----------------------------------------\n\nTITLE: Configure Trough Switches in YAML\nDESCRIPTION: This snippet defines the switches used to detect ball presence in the trough. Each switch entry includes a number representing its hardware connection and a type, in this case 'NC' (Normally Closed), suitable for opto sensors. The switch numbers should correspond to the actual physical connections.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_opto.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_trough1:\n    number: 2\n    type: NC\n  s_trough2:\n    number: 3\n    type: NC\n  s_trough3:\n    number: 4\n    type: NC\n  s_trough4:\n    number: 5\n    type: NC\n  s_trough5:\n    number: 6\n    type: NC\n  s_trough6:\n    number: 7\n    type: NC\n  s_trough_jam:\n    number: 8\n    type: NC\n```\n\n----------------------------------------\n\nTITLE: Conditional Event Triggering Based on Shot State in YAML\nDESCRIPTION: This YAML snippet shows how to use a shot's state to conditionally trigger an event.  It defines a shot called `my_shot` linked to the `lane_l` switch.  It also includes an event player configuration that triggers the `start_multiball` event only when the `s_target` switch is active and the `my_shot` shot is in the `lit` state.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/shots/index.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nshots:\n  my_shot:\n    switch: lane_l\n    show_tokens:\n      light: lane_l\nevent_player:\n  s_target_active{device.shots.my_shot.state_name=='lit'}: start_multiball\n```\n\n----------------------------------------\n\nTITLE: Configuring Ball Devices in MPF (YAML)\nDESCRIPTION: This YAML configuration defines ball devices for a pinball machine, including the trough, plunger, retina hole, lower VUK, upper VUK, and elevator. It specifies the associated switches, eject coils, and timeout values for each device to ensure proper ball management.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/12_add_ball_devices.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    tags: trough, home, drain\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough_jam\n    eject_coil: c_trough_eject\n    entrance_count_delay: 300ms\n    jam_switch: s_trough_jam\n    eject_targets: bd_plunger\n    debug: true\n\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    entrance_count_delay: 300ms\n    eject_timeouts: 3s\n    eject_coil: c_plunger_eject\n    player_controlled_eject_event: sw_launch\n\n  bd_retina_hole:\n    ball_switches: s_eject\n    eject_coil: c_retina_eject\n    eject_timeouts: 1s\n\n  bd_lower_vuk:\n    ball_switches: s_bottom_popper\n    eject_coil: c_bottom_popper\n    eject_timeouts: 2s\n\n  bd_upper_vuk:\n    ball_switches: s_top_popper\n    eject_coil: c_top_popper\n    eject_timeouts: 2s\n\n  bd_elevator:\n    ball_switches: s_elevator_hold\n    mechanical_eject: true\n    eject_timeouts: 500ms\n\nplayfields:\n  playfield:\n    tags: default\n    default_source_device: bd_plunger\n```\n\n----------------------------------------\n\nTITLE: Configuring Playfield Active Switches in MPF\nDESCRIPTION: This code snippet demonstrates how to configure switches in the `switches:` section of the MPF machine configuration file using YAML. Specifically, it shows how to add the `playfield_active` tag to switches that are hit by a ball when it is on the playfield. This tag is crucial for MPF to track the number of balls on the playfield, confirm ball ejections, and enable ball search functionality.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/playfields/ball_tracking.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_trough1:\n    number:\n  s_trough2:\n    number:\n  s_plunger_lane:\n    number:\n  s_standup_1:\n    number:\n    tags: playfield_active\n  s_upper_right_rollover:\n    number:\n    tags: playfield_active\n  s_ramp_enter:\n    number:\n    tags: playfield_active\n  s_ramp_made:\n    number:\n    tags: playfield_active\n```\n\n----------------------------------------\n\nTITLE: Enabling EOS Switches for Flipper Control in MPF (YAML)\nDESCRIPTION: This YAML configuration enables EOS switch monitoring for flippers within MPF. It configures switches, coils, and flippers, specifying the main coil, activation switch, EOS switch, and settings for EOS-based repulsing. The `repulse_on_eos_open` option enables repulsing, and `eos_active_ms_before_repulse` sets the delay before a repulse occurs, mitigating rapid or accidental activations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/eos_switches.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nflippers:\n  single_wound_flipper:\n    main_coil: c_flipper_single_main\n    activation_switch: s_flipper_single\n    eos_switch: s_flipper_single_eos\n    use_eos: true\n    repulse_on_eos_open: true\n    eos_active_ms_before_repulse: 500\n  dual_wound_flipper:\n    main_coil: c_flipper_dual_wound_main\n    hold_coil: c_flipper_dual_wound_hold\n    activation_switch: s_flipper_dual_wound\n    eos_switch: s_flipper_dual_wound_eos\n    use_eos: true\n    repulse_on_eos_open: true\n    eos_active_ms_before_repulse: 500\n```\n\n----------------------------------------\n\nTITLE: Scoring points using tags in variable_player - YAML\nDESCRIPTION: This code shows how to use tags to simplify scoring points for pop bumper hits. By tagging all pop bumpers with \"mygame_popbumper\", a single event handler in the `variable_player` section can be used to award points when any tagged pop bumper is hit. This requires the `sw_` prefix to match the event fired when switches with the specified tag are activated.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/tags.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\nvariable_player:\n  sw_mygame_popbumper:\n    score: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Balls Based on Score in MPF (YAML)\nDESCRIPTION: This code snippet demonstrates how to configure extra balls in MPF to be awarded based on the player's score. It defines three extra balls, each awarded when the player's score reaches a specific threshold. The `award_events` property triggers when the specified score condition is met.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/extra_balls.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: base\n# in your base mode\nextra_balls:\n  score_one:\n    enabled: true\n    award_events: player_score{value>=140000}\n  score_two:\n    enabled: true\n    award_events: player_score{value>=210000}\n  score_three:\n    enabled: true\n    award_events: player_score{value>=300000}\n#! variable_player:\n#!   score_100000:\n#!     score: 100000\n##! test\n#! # start game and score\n#! start_game\n#! start_mode base\n#! post score_100000\n#! assert_player_variable 100000 score\n#! assert_player_variable 0 extra_balls\n#! post score_100000\n#! assert_player_variable 200000 score\n#! assert_player_variable 1 extra_balls\n#! post score_100000\n#! assert_player_variable 300000 score\n#! assert_player_variable 3 extra_balls\n#! post score_100000\n#! assert_player_variable 400000 score\n#! assert_player_variable 3 extra_balls\n```\n\n----------------------------------------\n\nTITLE: Defining a Shot Profile in YAML\nDESCRIPTION: This snippet demonstrates how to define a shot profile in a YAML configuration file for the Mission Pinball Framework (MPF). It defines a profile named 'my_default_profile' with two states: 'unlit' and 'lit'. Each state is associated with a show name, 'off' and 'on' respectively. The `mode` tag indicates this config belongs to a mode called `mode1`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/shots/shot_profiles.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: mode1\nshot_profiles:\n  my_default_profile:\n    states:\n      - name: unlit\n        show: \"off\"\n      - name: lit\n        show: \"on\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Flippers on Machine Reset YAML\nDESCRIPTION: This snippet configures the flippers to enable automatically when MPF starts by adding the `enable_events: machine_reset_phase_3` entry to each flipper definition.  This is useful for testing purposes during the initial configuration process and allows for flipper testing without an active game.  This will cause the flippers to be enabled during machine initialization.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/single_wound.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nflippers:\n  left_flipper:\n    main_coil: c_flipper_left\n    activation_switch: s_left_flipper\n    enable_events: machine_reset_phase_3\n  right_flipper:\n    main_coil: c_flipper_right\n    activation_switch: s_right_flipper\n    enable_events: machine_reset_phase_3\n```\n\n----------------------------------------\n\nTITLE: Custom Game Mode Class in Python\nDESCRIPTION: This Python code defines a custom game mode class `MyGameName` that inherits from the base `Game` class provided by MPF. It overrides the `_start_ball()` method to detect which launch button (left or right) was pressed first and then eject a ball from the corresponding plunger. It utilizes `Util.race` to wait for either the left or right switch to be pressed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/dual_launch.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom mpf.modes.game.code.game import Game\n\nclass MyGameName(Game):\n  def __init__(self, *arg, **kwargs):\n     super().__init__(*arg, **kwargs)\n     self.log.debug(\"MyGameName init\")\n\n  async def _start_ball(self, is_extra_ball=False):\n     \"\"\"Perform ball start procedure.\n\n     Note this method is called for each ball that starts, even if it's\n     after a Shoot Again scenario for the same player.\n\n     Posts a queue event called *ball_starting*, giving other modules the\n     opportunity to do things before the ball actually starts. Once that\n     event is clear, this method calls :meth:`ball_started`.\n     \"\"\"\n     :\n     # Cut and paste original game.py code for _start_ball() here.\n     :\n     # Replace self.machine.playfield.add_ball(player_controlled=True) with:\n     left_switch_pressed_future = self.machine.switch_controller.wait_for_switch(self.machine.switches[\"s_left_launch_button\"])\n     right_switch_pressed_future = self.machine.switch_controller.wait_for_switch(self.machine.switches[\"s_right_launch_button\"])\n     first_switch = await Util.race({left_switch_pressed_future: \"left\", right_switch_pressed_future: \"right\"})\n     if first_switch == \"left\":\n         self.machine.playfield.add_ball(source_device=self.machine.ball_devices['bd_left_plunger'], player_controlled=True)\n     else:\n         self.machine.playfield.add_ball(source_device=self.machine.ball_devices['bd_right_plunger'], player_controlled=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Show File in YAML\nDESCRIPTION: This code snippet demonstrates the structure of a standalone show file for MPF, including the required `show_version` tag, and basic light control steps. The file should be named with a `.yaml` extension and placed in the `shows` folder.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/file_shows.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n#show_version=5\n- time: 0\n  lights:\n    led1: red\n- time: +1\n  lights:\n    led1: off\n- time: +1\n```\n\n----------------------------------------\n\nTITLE: Sound Player Configuration (sound_player:)\nDESCRIPTION: This example shows how to configure the sound player to play and stop sounds based on MPF events. Specifically, it configures the `song_01` sound to play when the *attract* mode starts and stop when the *attract* mode stops.  The loops parameter is set to -1 to play the sound indefinitely.  This snippet must be placed inside the machine configuration file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/basic_setup.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsound_player:\n  mode_attract_started:\n    song_01:\n      action: play\n      loops: -1\n  mode_attract_stopped:\n    song_01:\n      action: stop\n```\n\n----------------------------------------\n\nTITLE: Defining Named Colors in MPF Config (YAML)\nDESCRIPTION: This snippet demonstrates how to define custom colors in the `named_colors:` section of an MPF configuration file. It shows examples of defining colors using both RGB arrays and hex strings, including a hex string with a brightness percentage.  These named colors are then applied to lights and light players.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/named_colors.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnamed_colors:\n  custom_blue: [24, 65, 226]\n  troll_green: 4a9b22\n  troll_green_dark: 4a9b22%50\nlights:\n  troll_target:\n    number: 10\n    default_on_color: troll_green\n  l_jackpot:\n    number: 20\nlight_player:\n  trolls_disabled:\n    troll_target: troll_green_dark\n  jackpot_lit:\n    l_jackpot:\n      color: custom_blue\n      fade: 10\n```\n\n----------------------------------------\n\nTITLE: Complete Rollover Lanes Mode Configuration in MPF\nDESCRIPTION: This is the full configuration for the rollover lanes mode. It includes the mode definition, shots, shot groups, shot profiles, and variable player configurations for rewards.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/rollover_lanes_with_lane_change.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmode:\n  start_events: start_mode_top_lanes\n  stop_events: stop_mode_top_lanes, ball_will_end\n\nshots:\n  top_lane_i:\n    switch: s_top_lane_1\n    profile: top_lane_profile\n    show_tokens:\n      led: l_top_lane_1\n  top_lane_n:\n    switch: s_top_lane_2\n    profile: top_lane_profile\n    show_tokens:\n      led: l_top_lane_2\n  top_lane_d:\n    switch: s_top_lane_3\n    profile: top_lane_profile\n    show_tokens:\n      led: l_top_lane_3\n  top_lane_y:\n    switch: s_top_lane_4\n    profile: top_lane_profile\n    show_tokens:\n      led: l_top_lane_4\n\nshot_groups:\n  top_lane_group:\n    shots: top_lane_i, top_lane_n, top_lane_d, top_lane_y\n    reset_events: top_lane_group_hit_complete\n    rotate_left_events: s_flipper_left_active\n    rotate_right_events: s_flipper_right_active\n\nshot_profiles:\n  top_lane_profile:\n    states:\n      - name:\n        show: off\n      - name: hit\n        show: on\n\nvariable_player:\n  top_lane_group_hit_complete:\n    score: 10000\n    bonus_multiplier: 1\n```\n\n----------------------------------------\n\nTITLE: Variable Player Configuration Example\nDESCRIPTION: This example shows how to use the `variable_player` to add to the player's score and ramps variables, as well as how to set the ramps variable to 0 on a timeout event.  It also illustrates how to multiply score based on the number of ramps and how to set a string variable.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/variable_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  target_1_hit:\n    score: 1000     # adds 1000 to the player's \"score\" variable\n  ramp_1_hit:\n    score: 10000    # adds 10,000 to the player's \"score\" variable\n    ramps: 1        # adds 1 to the player's \"ramps\" variable\n  ramp_1_timeout:\n    ramps:\n      int: 0          # sets the player's \"ramps\" variable to 0.\n      action: set     # means that this event will \"set\" (or reset) the variable to the value, rather than add to it\n  ramp_2_hit:\n    score:\n      int: 25000 * current_player.ramps     # multiplies the value of the current player's \"ramps\" variable by 25,000 and adds the result to the player's \"score\" variable\n      block: true      # \"blocks\" this event from being passed to variable player sections from lower-priority modes\n  counter_treasure_value_complete:\n    treasure_name:\n      string: RUBY     # Sets the player's \"treasure_name\" variable to a string called \"RUBY\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting Coil Pulse Times for Flippers in YAML\nDESCRIPTION: This snippet demonstrates how to adjust the pulse time of flipper coils in the `coils:` section of the MPF configuration file. The `default_pulse_ms:` setting controls the duration of the initial pulse, affecting flipper strength. It only applies to the main coils, not the hold coils.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/4_adjust_flipper_power.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_flipper_left_main:\n    number: 00\n    default_pulse_ms: 20\n  c_flipper_left_hold:\n    number: 01\n    allow_enable: true\n  c_flipper_right_main:\n    number: 02\n    default_pulse_ms: 20\n  c_flipper_right_hold:\n    number: 03\n    allow_enable: true\n```\n\n----------------------------------------\n\nTITLE: Updating variable_player for Shot Hits in YAML\nDESCRIPTION: This snippet modifies the `variable_player` section in the base mode config file to associate the `my_first_shot_hit` event with a score increase.  It shows how to change the event that triggers the score increase from a switch activation to a shot being hit. This requires the variable_player section to already be defined.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvariable_player:\n  my_first_shot_hit:  # this was s_right_inlane_active\n    score: 100\n  s_flipper_lower_left_active:\n    score: 1000\n    potato: 1\n  s_flipper_lower_right_active:\n    potato: -2\n```\n\n----------------------------------------\n\nTITLE: Enable debug logging for a ball device in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to enable debug logging for a specific ball device in your MPF configuration file. This causes MPF to write detailed debugging information about this ball device to the log file when MPF is run with the `-v` option. This is useful for troubleshooting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/7_trough.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndebug: true\n```\n\n----------------------------------------\n\nTITLE: Single-Wound Coil Configuration in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to define a single-wound coil in the `coils:` section of an MPF configuration file. It includes the coil's hardware number and a default pulse time in milliseconds. The `number` depends on the specific hardware platform being used.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/coils/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_your_coil:\n    number: 00   # depends on your platform and hardware\n    default_pulse_ms: 20\n```\n\n----------------------------------------\n\nTITLE: Random Event Player Global Configuration YAML\nDESCRIPTION: This configuration demonstrates how to define a random event player in the global configuration scope. It sets up a player that posts a random event from the list event1, event2, and event3 when the event `play_random_event_global` is triggered. The `scope` is set to `machine`, which means event will be machine wide.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/random_event_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# in your global config:\nrandom_event_player:\n  play_random_event_global:\n    scope: machine\n    events:\n      - event1\n      - event2\n      - event3\n```\n\n----------------------------------------\n\nTITLE: Accessing Player Variables in Event Condition (YAML)\nDESCRIPTION: Shows how to access player variables using 'current_player.' in an event condition. The example shows different slides based on the player's score and the current ball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/conditional.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n#! slides:\n#!   you_rule: []\n#!   you_stink: []\nslide_player:\n  ball_started{current_player.score > 1000000}: you_rule\n  ball_started{current_player.score < 10000 and ball == 3}: you_stink\n```\n\n----------------------------------------\n\nTITLE: Defining Flipper Mechanisms YAML\nDESCRIPTION: This snippet creates the flipper mechanisms by linking the configured switches and coils. It specifies the `main_coil` and `activation_switch` for each flipper. It shows how to create a `flippers:` section in your machine config and maps the switch and coil definitions to create a functional flipper mechanism.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/single_wound.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nflippers:\n  left_flipper:\n    main_coil: c_flipper_left\n    activation_switch: s_left_flipper\n  right_flipper:\n    main_coil: c_flipper_right\n    activation_switch: s_right_flipper\n```\n\n----------------------------------------\n\nTITLE: Configuring Switches, Lights, Shots, and Shot Profiles in YAML\nDESCRIPTION: This YAML configuration defines switches and lights for inlanes and outlanes. It then configures shots, linking them to lights, widgets, and a shot profile to manage their state. The lane_profile defines shows for the 'unlit' and 'lit' states, enabling visual feedback for the player. Tokens are used to pass led and widget names to the show.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/shots/integrate_shots_with_shows_lights_sounds_widgets_or_slides.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# this is in your machine-wide config\n# first we define some switches + lights\nswitches:\n  s_outlane_left:\n    number: 0\n  s_inlane_left:\n    number: 1\n  s_inlane_right:\n    number: 6\n  s_outlane_right:\n    number: 7\nlights:\n  l_outlane_left:\n    number: 0\n  l_inlane_left:\n    number: 1\n  l_inlane_right:\n    number: 6\n  l_outlane_right:\n    number: 7\n  gi_left_sling:\n    number: 8\n  gi_right_sling:\n    number: 9\n##! mode: my_mode\n# put this into a mode\n# shots each pass their led and widget to the show define in their shot_profile\nshots:\n  shot_outlane_left:\n    switches: s_outlane_left\n    profile: lane_profile\n    show_tokens:\n      leds: l_outlane_left\n      widget: outlane_left\n  shot_inlane_left:\n    switches: s_inlane_left\n    profile: lane_profile\n    show_tokens:\n      leds: l_inlane_left\n      widget: inlane_left\n  shot_inlane_right:\n    switches: s_inlane_right\n    profile: lane_profile\n    show_tokens:\n      leds: l_inlane_right\n      widget: inlane_right\n  shot_outlane_right:\n    switches: s_outlane_right\n    profile: lane_profile\n    show_tokens:\n      leds: l_outlane_right\n      widget: outlane_right\n# integrate shots with their show\nshot_profiles:\n  lane_profile:\n    states:\n      - name: unlit\n        show: \"off\"           # a default show to turn of the led. change if you want to do something on unlit shots\n      - name: lit\n        show: \"shot_lit\"      # our show to indicate an lit shot\n          # you can add more states here\n# to rotate shots and reset them when they are all lit\nshot_groups:\n  sg_lanes:\n    shots: shot_outlane_left, shot_inlane_left, shot_inlane_right, shot_outlane_right\n    rotate_left_events: s_flipper_left_active\n    rotate_right_events: s_flipper_right_active\n    reset_events:\n      sg_lanes_lit_complete: 1s\n# define a few widgets which show on screen. you can also use images or videos here\nwidgets:\n  outlane_right:\n    - type: text\n      text: Outlane right lit\n  outlane_left:\n    - type: text\n      text: Outlane left lit\n  inlane_right:\n    - type: text\n      text: Inlane right lit\n  inlane_left:\n    - type: text\n      text: Inlane left lit\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Color Correction Profiles in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to define multiple color correction profiles and apply them to different lights. It defines two profiles (`correction_profile_less_red` and `correction_profile_less_blue`) and applies `correction_profile_less_blue` to a specific light named `special_led`. This is useful for different types of lights in the machine.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/light_settings.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlight_settings:\n  default_color_correction_profile: correction_profile_less_red\n  color_correction_profiles:\n    correction_profile_less_red:\n      whitepoint: [0.9, 1.0, 1.0]\n      gamma: 2.5\n      linear_slope: 1.0\n      linear_cutoff: 0.0\n    correction_profile_less_blue:\n      whitepoint: [1.0, 1.0, 0.9]\n      gamma: 2.5\n      linear_slope: 0.8\n      linear_cutoff: 0.1\nlights:\n  special_led:\n    number: 42\n    color_correction_profile: correction_profile_less_blue\n```\n\n----------------------------------------\n\nTITLE: Configuring Plunger Eject to Another Ball Device in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to configure a plunger lane that ejects the ball into another ball device (in this case, a cannon). It sets the `eject_targets` to the name of the target ball device. The `eject_timeouts` setting is also included.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/coil_fired.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n#!   bd_cannon:\n#!     ball_switches: s_canon\n#!     eject_coil: c_canon\n  bd_plunger:\n#!     ball_switches: s_plunger_lane\n#!     eject_coil: c_plunger\n    # ...\n    eject_targets: bd_cannon\n    eject_timeouts: 2s\n```\n\n----------------------------------------\n\nTITLE: Configure Ball Trough Tags YAML\nDESCRIPTION: This code snippet shows how to configure the required tags for a ball trough in MPF, including 'trough', 'home', and 'drain'. These tags tell MPF how to manage balls within the trough, handle ball draining, and manage game start/end ball positions. The `tags` setting is a comma-separated list of tag names.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_opto.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n```\n\n----------------------------------------\n\nTITLE: Flasher Configuration as Coil, Coil Player, and Light in MPF (YAML)\nDESCRIPTION: This configuration demonstrates how to define a flasher as a coil with specific pulse duration and hold power. It then shows how to use coil_player to pulse the flasher and optionally create a light linked to the coil for control with light_player or flasher_player. Requires specifying the flasher's hardware number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/flashers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# configure the flasher as coil\ncoils:\n  flasher_01:\n    number: 4                    # this number depends on your hardware\n    default_pulse_ms: 40         # pulse duration to use if no specified elsewhere\n    max_hold_power: 1.0          # needed if you want to use flasher and light_player\n# you can flash the flasher using flasher player\ncoil_player:\n  flash_coil:\n    flasher_01:\n      action: pulse              # will use the default 40ms pulse\n# create a light which is backed by a coil (optional if you want to use light_player and flasher_player)\nlights:\n  flasher_01:\n    number: flasher_01           # name of your coil\n    platform: drivers            # use a coil\n# use the light to flash the flasher\nflasher_player:\n  flash_flasher_01:\n    flasher_01: 100ms\n```\n\n----------------------------------------\n\nTITLE: Event Ejector Configuration YAML\nDESCRIPTION: Configures a ball device to use the `EventEjector` to eject balls. The `events_when_eject_try` setting specifies the event that is posted when an eject is attempted. This example also shows the use of `ball_switches` to track ball count.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/ball_devices.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  device_with_eject_event:\n    ejector:\n      class: mpf.devices.ball_device.event_ejector.EventEjector\n      events_when_eject_try: my_ball_device_eject\n    ball_switches: s_ball_switch1, s_ball_switch2\n```\n\n----------------------------------------\n\nTITLE: Defining Shot Profiles with States and Shows in YAML\nDESCRIPTION: This snippet defines a shot profile called `mode2` with two states: `flashing` and `lit`. Each state has a corresponding `show` associated with it, which will be played when the shot enters that state.  The `loop` property is set to `false`, meaning the states won't loop. `block: true` prevents profiles from lower priority modes from being active at the same time.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nshot_profiles:\n  mode2:\n    states:\n      - name: flashing\n        show: flash\n        speed: 5\n      - name: lit\n        show: on\n    loop: false\n    block: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Sound System Tracks in MPF-MC\nDESCRIPTION: This code snippet demonstrates how to configure sound system tracks (music, voice, sfx) in the machine configuration file. It sets the `type` to `standard`, the number of `simultaneous_sounds`, and the `volume` for each track.  This determines how sounds are played and mixed within the game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/basic_setup.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsound_system:\n  tracks:\n    music:\n      type: standard\n      simultaneous_sounds: 1\n      volume: 0.5\n    voice:\n      type: standard\n      simultaneous_sounds: 1\n      volume: 0.7\n    sfx:\n      type: standard\n      simultaneous_sounds: 8\n      volume: 0.4\n```\n\n----------------------------------------\n\nTITLE: Blocking Variable Player Entries\nDESCRIPTION: This example shows how to block variable player entries from lower-priority modes. It sets the score to 5000 when `ramp_1_hit` is posted and blocks the event from being processed by lower-priority modes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/variable_player.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  ramp_1_hit:\n    score:\n      int: 5000\n      block: true\n```\n\n----------------------------------------\n\nTITLE: Simplified Player Variable Configuration\nDESCRIPTION: This example shows a simplified syntax for adding values to player variables when an event is posted. It adds to the `score`, `aliens`, and `bonus` player variables.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/variable_player.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  some_event:\n    score: 1000\n    aliens: 1\n    bonus: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring single-wound coil hold power in MPF (YAML)\nDESCRIPTION: This code snippet demonstrates how to configure the `default_hold_power` setting for a single-wound coil in a machine configuration file. The `default_hold_power` setting controls the amount of power applied to the coil after the initial pulse time. This example sets the hold power to 25% after an initial pulse of 30ms.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/coils/hold_power.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil:\n    number:\n    default_pulse_ms: 30\n    default_hold_power: 0.250\n```\n\n----------------------------------------\n\nTITLE: Servo Positions Mapping YAML\nDESCRIPTION: This example demonstrates how to map servo positions to MPF event names within the `positions:` sub-section. When the specified event is posted, the servo will move to the corresponding position between 0.0 and 1.0.  The example maps servo1_down to 0.1, servo1_up to 0.9 and servo1_mid to 0.45.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/servos.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npositions:\n  0.1: servo1_down\n  0.9: servo1_up\n  0.45: servo1_mid\n```\n\n----------------------------------------\n\nTITLE: Adding an Eject Target (Plunger Lane) in YAML\nDESCRIPTION: This snippet demonstrates how to add an eject target to the trough configuration, specifying the device the trough ejects balls to (in this case, a placeholder plunger lane). The `eject_targets` setting is added under the `bd_trough` ball device to define the target device.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_mechanical.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n\n  # bd_plunger is a placeholder just so the trough's eject_targets are valid\n  bd_plunger:\n    ball_switches: s_plunger\n    mechanical_eject: true\n```\n\n----------------------------------------\n\nTITLE: Defining Overall Credit Settings (YAML)\nDESCRIPTION: This snippet configures the overall credit settings, including maximum credits, free play status, and switch assignments. It also defines the pricing tiers and expiration times for credits. The `settings` references dynamically pull from the previously defined `settings` section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\ncredits:\n  max_credits: 12\n  free_play: false\n  service_credits_switch: s_service_coin\n  switches:\n    - switch: s_coin_left\n      type: money\n      value: .25\n  pricing_tiers:\n    - price: settings.credits_price_one_credit\n      credits: 1\n    - price: settings.credits_price_tier2\n      credits: settings.credits_credits_tier2\n  fractional_credit_expiration_time: 15m\n  credit_expiration_time: 2h\n  persist_credits_while_off_time: 1h\n  free_play_string: FREE PLAY\n  credits_string: CREDITS\n```\n\n----------------------------------------\n\nTITLE: Configuring Pop Bumpers with YAML in MPF\nDESCRIPTION: This YAML snippet demonstrates how to configure a pop bumper within MPF. It defines the switch, coil, and light associated with the pop bumper and sets up an autofire coil for automatic triggering.  The switch `s_popbumper_left` triggers the coil `c_popbumper_left`, which is also associated with a light `l_popbumper_left`. The numbers for each depend on the specific platform being used.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/pop_bumpers/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_popbumper_left:\n    number: 7                 # depends on your platform\ncoils:\n  c_popbumper_left:\n    number: 4                 # depends on your platform\n    default_pulse_ms: 23      # tune this for your machine\nlights:\n  l_popbumper_left:\n    number: 13                # depends on your platform\n    subtype: matrix           # might be differnt\nautofire_coils:\n  ac_popbumper_left:\n    coil: c_popbumper_left\n    switch: s_popbumper_left\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Animations to Widgets in YAML\nDESCRIPTION: This YAML snippet illustrates chaining multiple named animations (`fade_in`, `fade_out`, and `pulse`) together for a single event (`some_event`). When `some_event` is triggered, the animations will play in sequence. The order matters; `fade_in` will execute first, followed by `fade_out` and then `pulse`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nwidgets:\n  hello_widget:\n    - type: text\n      text: HELLO\n      animations:\n        some_event: fade_in, fade_out, pulse\n```\n\n----------------------------------------\n\nTITLE: Configuring RGB LED Buffering in FAST Pinball\nDESCRIPTION: This configuration shows how to adjust the `default_light_hw_update_hz` and `rgb_buffer` settings to prevent LED command backlogs and color corruption when using FAST Pinball controllers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/leds.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmpf:\n  default_light_hw_update_hz: 50\nfast:\n  rgb_buffer: 3\n```\n\n----------------------------------------\n\nTITLE: Display Current Player Score - MPF\nDESCRIPTION: This snippet shows how to display the current player's score during a game using a text template in MPF. It uses the `current_player.score` variable and the `:d` format string to display the score as an integer.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/text_templates.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nScore {current_player.score:d}\n```\n\n----------------------------------------\n\nTITLE: Configuring FAST Platform in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the hardware platform for FAST Pinball in the MPF machine-wide configuration file.  It sets the platform to 'fast' and specifies the type of driver boards being used (either FAST I/O boards or existing WPC/Snux System 11 driver boards).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/config.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: fast\n\nfast:\n  driverboards: fast\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollover Switches, Lights, Shots, and Shot Groups in YAML\nDESCRIPTION: This YAML configuration defines rollover switches, their corresponding lights, and integrates them into shots and a shot group. It demonstrates how to configure lane rotation using flipper buttons in a MPF mode. The configuration sets up switches for outlanes and inlanes, lights corresponding to those switches, and then defines shots and a shot group to manage the lane rotation with flipper button events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/switches/rollover_switches.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# this is in your machine-wide config\nswitches:\n  s_outlane_left:\n    number: 0\n  s_inlane_left:\n    number: 1\n  s_inlane_right:\n    number: 6\n  s_outlane_right:\n    number: 7\nlights:\n  l_outlane_left:\n    number: 0\n  l_inlane_left:\n    number: 1\n  l_inlane_right:\n    number: 6\n  l_outlane_right:\n    number: 7\n##! mode: my_mode\n# put this into a mode\nshots:\n  shot_outlane_left:\n    switches: s_outlane_left\n    show_tokens:\n      leds: l_outlane_left\n  shot_inlane_left:\n    switches: s_inlane_left\n    show_tokens:\n      leds: l_inlane_left\n  shot_inlane_right:\n    switches: s_inlane_right\n    show_tokens:\n      leds: l_inlane_right\n  shot_outlane_right:\n    switches: s_outlane_right\n    show_tokens:\n      leds: l_outlane_right\nshot_groups:\n  sg_lanes:\n    shots: shot_outlane_left, shot_inlane_left, shot_inlane_right, shot_outlane_right\n    rotate_left_events: s_flipper_left_active\n    rotate_right_events: s_flipper_right_active\n    reset_events:\n      sg_lanes_lit_complete: 1s\n```\n\n----------------------------------------\n\nTITLE: Configure Hardware Interface for Snux Board in MPF (YAML)\nDESCRIPTION: This snippet configures the hardware interface in MPF to use the P-ROC platform with the Snux driverboard. It sets the platform to 'virtual', the driverboards, coils, and switches to 'snux'. Note that the platform is virtual and driverboards, coils, and switches are snux. P-ROC is implicit. This configuration is essential for MPF to communicate with the Snux board.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/snux.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  platform: virtual\n  driverboards: wpc\n  coils: snux\n  switches: snux\n```\n\n----------------------------------------\n\nTITLE: FAST Configuration Example in YAML\nDESCRIPTION: This YAML snippet shows a basic configuration for the `fast:` section of the MPF config. It configures the serial ports used by the FAST controller.  It is necessary for MPF to communicate with the hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/fast.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nfast:\n  ports: com3, com4, com5\n```\n\n----------------------------------------\n\nTITLE: Add Dual-Wound Flipper Coils\nDESCRIPTION: This snippet shows how to add coil entries for a dual-wound flipper setup to the `config.yaml` file. It includes definitions for both the main and hold coils for each flipper (`c_flipper_left_main`, `c_flipper_left_hold`, `c_flipper_right_main`, `c_flipper_right_hold`).  The `number` setting is a placeholder, and `allow_enable: true` is required for the hold coils.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_flipper_left_main:\n    number: 0  # again, these numbers will probably be different for you\n  c_flipper_left_hold:\n    number: 1  # check your platform-specific documentation for the actual numbers\n    allow_enable: true\n  c_flipper_right_main:\n    number: 2\n  c_flipper_right_hold:\n    number: 3\n    allow_enable: true\n```\n\n----------------------------------------\n\nTITLE: Create Segment Display from Light Groups\nDESCRIPTION: Creates a segment display by combining one or more light groups.  This example shows how to combine two 8-digit NeoSeg displays into a single 16-digit display.  It configures dot integration and comma usage and sets the segment type.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/cobrapin/cobrapin_serial_segment_displays.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsegment_displays:\n  neoSegTop:\n    number: 1\n    size: 16\n    integrated_dots: true\n    use_dots_for_commas: true\n    default_transition_update_hz: 30\n    platform_settings:\n      light_groups:\n        - neoSeg_0\n        - neoSeg_1\n      type: 14segment\n```\n\n----------------------------------------\n\nTITLE: Adding Widget to Slide with Event - YAML\nDESCRIPTION: This example demonstrates how to configure the `widget_player` to add a widget named `widget_1` to a slide named `slide_2` when the event `some_event` is posted. It requires that the widget `widget_1` is defined in the `widgets:` section. The slide `slide_2` must also exist.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/widget_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_player:\n  some_event:\n    widget_1:\n      slide: slide_2\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform and Driverboards in MPF\nDESCRIPTION: This code snippet demonstrates the basic configuration of the `hardware:` section in the MPF machine config file. It sets the `platform` to `fast` and the `driverboards` to `fast`, indicating the use of FAST hardware for controlling the machine's devices. This is a minimal configuration required when using physical hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/hardware.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: fast\n  driverboards: fast\n```\n\n----------------------------------------\n\nTITLE: Configure Drain Eject Coil in MPF (YAML)\nDESCRIPTION: This snippet configures the drain eject coil in the `coils:` section. The `number` corresponds to the coil number in your control system. `default_pulse_ms` sets the default pulse time in milliseconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_drain_eject:\n    number: 03\n    default_pulse_ms: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Variable Player for Event Handling (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the `variable_player` in MPF to listen for a specific event (`target1_hit`). When the event occurs, the player's score is incremented by 1000 points. This showcases how to register a handler for an event and define the corresponding action.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: base\nvariable_player:\n  target1_hit:\n    score: 1000\n```\n\n----------------------------------------\n\nTITLE: Defining a Kickback Mechanism in YAML\nDESCRIPTION: This snippet demonstrates the basic configuration of a kickback mechanism in a machine configuration file. It defines a switch and a coil, then links them together in the `kickbacks` section. This configuration creates a kickback device named `left_kickback` that fires coil `c_kickback` when switch `s_kickback` is activated.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/kickbacks.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_kickback:\n    number: 1\ncoils:\n  c_kickback:\n    number: 1\n    default_pulse_ms: 20ms\nkickbacks:\n  left_kickback:\n    coil: c_kickback\n    switch: s_kickback\n```\n\n----------------------------------------\n\nTITLE: Setting Player Variable with Action\nDESCRIPTION: This example demonstrates how to reset a player variable using the `action: set` option. It resets the `aliens` player variable to 1 when `some_event` is posted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/variable_player.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  some_event:\n    score: 1000\n    aliens:           # the player var you want to reset\n      int: 1          # the integer value you're resetting this player var to\n      action: set     # means you're resetting it, rather than adding to it\n    bonus: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Trinamic StepRocker in MPF\nDESCRIPTION: This code snippet demonstrates how to configure the Trinamic StepRocker stepper controller within an MPF configuration file.  It sets up the virtual platform, specifies the stepper controller, defines the serial port for communication, and configures a stepper motor with various parameters like homing direction, speed, current, microstepping, and velocity/acceleration limits. The `fullstep_per_userunit` parameter is crucial for mapping stepper steps to user-defined units.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/trinamics.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: virtual\n  stepper_controllers: trinamics_steprocker\n\ntrinamics_steprocker:\n  port: /dev/ttyACM0\n\nsteppers:\n    # Scenario: 1.8 degree stepper attached to a 7:1 gear ratio with homing flag that you want to control in units of revolutions\n  positionStepper:\n    number: 0\n    homing_direction: clockwise        # when facing the shaft\n    homing_mode: hardware\n    reset_position: 0\n    reset_events: test_reset\n    named_positions:\n      0.0: test_00\n      0.6: test_01\n      1.0: test_10\n    platform_settings:\n      move_current: 25                      # percent\n      hold_current: 5                       # percent\n      homing_speed: 0.1                     # user units/sec\n      microstep_per_fullstep: 16            # 1/16 mode (1 step = 1/16 of a full step)\n      fullstep_per_userunit: 1400           # UU=1 Revolution = 200 full steps per rev (1.8 deg stepper) * 7 gear ratio\n      velocity_limit: 0.5                   # user units/sec   (so, 0.8 RPS of output gear )\n      acceleration_limit: 2.0               # user units/sec^2  (so, 2 RPS^S of output gear)\n```\n\n----------------------------------------\n\nTITLE: Machine-Wide Configuration for Super Jets Feature (MPF, YAML)\nDESCRIPTION: This YAML code defines the machine-wide configuration for the Attack From Mars Super Jets feature. It includes settings for player variables, modes, switches (flippers, credit, outhole, jet bumpers, rollovers, and trough), coils (flippers, trough eject, jet bumpers, ball eject, and outhole), lights (rollovers and Super Jets), ball devices (drain, trough, and autofire coils for jet bumpers), and the playfield. It initializes a player variable \"sj_active\" which stores the current state of super jets.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/AFM_super_jets.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n\nplayer_vars:\n  sj_active:\n    value_type: int\n    initial_value: 0\n\nmodes:\n  - super_jets_setup\n  - super_jets\n\nswitches:\n  s_left_flipper:\n    number: 0\n    tags: left_flipper\n  s_right_flipper:\n    number: 71\n    tags: right_flipper\n  s_credit:\n    number: 6\n    tags: start\n  s_outhole:\n    number: 8\n    tags:\n  s_left_bumper:\n    number: 17\n    tags:  jets\n  s_middle_bumper:\n    number: 18\n    tags: jets\n  s_right_bumper:\n    number: 19\n    tags: jets\n  s_right_rollover:\n    number: 22\n    tags: playfield_active, right_rollover\n  s_left_rollover:\n    number: 23\n    tags: playfield_active, left_rollover\n  s_trough_5:\n    number: 36\n    tags:\n  s_trough_4:\n    number: 37\n    tags:\n  s_trough_3:\n    number: 38\n    tags:\n  s_trough_2:\n    number: 39\n    tags:\n  s_trough_1:\n    number: 40\n    tags:\n\nvirtual_platform_start_active_switches: s_trough_1 s_trough_2 s_trough_3 s_trough_4 s_trough_5\n\ncoils:\n c_flipper_left_main:\n   number: 0\n   default_pulse_ms: 20\n c_flipper_left_hold:\n   number: 1\n   allow_enable: true\n c_flipper_right_main:\n   number: 2\n   default_pulse_ms: 20\n c_flipper_right_hold:\n   number: 3\n   allow_enable: true\n c_trough_eject:\n   number: 4\n   allow_enable: true\n c_left_bumper:\n   number: c01\n   label:\n   tags:\n   default_pulse_ms: 25\n c_middle_bumper:\n   number: c02\n   label:\n   tags:\n   default_pulse_ms: 25\n c_right_bumper:\n   number: c03\n   label:\n   tags:\n   default_pulse_ms: 25\n c_ball_eject:\n   number: c12\n   label:\n   tags:\n   default_pulse_ms: 20\n c_outhole:\n   number: c14\n   label:\n   tags:\n   default_pulse_ms: 20\n\nlights:\n  l_right_rollover:\n    number: 5\n  l_left_rollover:\n    number: 7\n  l_super_jets:\n    number: 9\n\nball_devices:\n  bd_drain:\n    ball_switches: s_outhole\n    eject_coil: c_outhole\n    eject_targets: bd_trough\n    tags: drain, outhole\n  bd_trough:\n    ball_switches: s_trough_1, s_trough_2, s_trough_3, s_trough_4, s_trough_5\n    eject_coil: c_ball_eject\n    tags: trough, home\n\n  autofire_coils:\n    left_jet:\n     coil: c_left_bumper\n     switch: s_left_bumper\n   mid_jet:\n     coil: c_middle_bumper\n     switch: s_middle_bumper\n   right_jet:\n     coil: c_right_bumper\n     switch: s_right_bumper\n\nplayfields:\n    playfield:\n        default_source_device: bd_trough\n        tags: default\n\n##! mode: super_jets_setup\n# mode will be defined below\n##! mode: super_jets\n# mode will be defined below\n```\n\n----------------------------------------\n\nTITLE: Timer Configuration with Ball Enter Event (YAML)\nDESCRIPTION: This example demonstrates how to configure timers that are triggered by a ball entering the playfield. The `mode_timer` starts when the `balldevice_playfield_ball_enter` event is triggered, and the `target_rotator` timer ticks every second, independent of other events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/timers.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\ntimers:\n  mode_timer:\n    start_value: 3\n    end_value: 0\n    direction: down\n    tick_interval: 1s\n    control_events:\n      - event: balldevice_playfield_ball_enter\n        action: start\n    start_running: false\n  target_rotator:\n    start_running: true\n    tick_interval: 1s\n```\n\n----------------------------------------\n\nTITLE: Generic Variable Player Config Format\nDESCRIPTION: This snippet shows the generic format of the `variable_player` section, where different events trigger different settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/variable_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvariable_player:\n   some_event:\n      <settings>\n   some_other_event:\n      <settings>\n   another_event:\n      <settings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Switches in MPF (YAML)\nDESCRIPTION: This snippet illustrates how to configure direct switches in MPF for a WPC machine, typically used for coin and front door switches. The `number` field should match the switch number from the operator's manual, prefixed with `sd`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machines/wpc.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_left_coin:\n    number: sd1\n  s_enter:\n    number: SD8\n```\n\n----------------------------------------\n\nTITLE: Basic OPP Configuration YAML\nDESCRIPTION: A basic example demonstrating the minimum required configuration for the `opp:` section in an MPF config file.  It sets the platform to 'opp', specifies the driverboards, and configures the serial port. This configuration allows MPF to communicate with the OPP hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/opp.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  platform: opp\n  driverboards: gen2\nopp:\n  ports: COM7\n```\n\n----------------------------------------\n\nTITLE: Displaying Player Variables in a Slide - YAML\nDESCRIPTION: This snippet demonstrates how to display custom player variables (strings and integers) on a slide using a text widget.  It defines `current_ladder`, `current_mode`, and `ladder_scene_1`, then shows how they can be referenced in a text widget to display their values in the format `(current_ladder) > (current_mode) > (ladder_scene_1)`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/players.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nplayer_vars:\n  current_ladder:\n    initial_value: \"Initial Ladder\"\n    value_type: str\n  current_mode:\n    initial_value: \"No Mode\"\n    value_type: str\n  ladder_scene_1:\n    initial_value: 1\n    value_type: int\n\n##! mode: base\nslide_player:\n  mode_base_started:\n    widgets:\n      - type: text\n        text: (current_ladder) > (current_mode) > (ladder_scene_1)\n##! test\n#! start_game\n#! start_mode base\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Initial Ladder > No Mode > 1\"\n```\n\n----------------------------------------\n\nTITLE: Shot Group Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a shot group called 'upper_lanes'. It defines the shots that belong to the group, rotation events, reset events, and enable/disable events. The shots are rotated left on 'sw_left_flipper' event and right on 'sw_right_flipper'. The group is enabled on 'ball_started' and disabled on 'ball_ending'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/shot_groups.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nshot_groups:\n  upper_lanes:\n    shots: lane_l, lane_a, lane_n, lane_e\n    rotate_left_events: sw_left_flipper\n    rotate_right_events: sw_right_flipper\n    reset_events: upper_lanes_default_lit_complete\n    enable_events: ball_started\n    disable_events: ball_ending\n```\n\n----------------------------------------\n\nTITLE: Configuring Plunger Eject with Switch Confirmation in MPF (YAML)\nDESCRIPTION: This snippet configures a plunger lane with a switch at the exit to confirm successful ball ejection. It sets `confirm_eject_type` to `switch` and specifies the `confirm_eject_switch`.  The `eject_timeouts` setting is also included.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/coil_fired.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n#!     ball_switches: s_plunger_lane\n#!     eject_coil: c_plunger\n    # ...\n    confirm_eject_type: switch\n    confirm_eject_switch: s_plunger_lane_exit\n    eject_timeouts: 3s\n```\n\n----------------------------------------\n\nTITLE: Enabling Ball Search for a Playfield in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to enable ball search for a playfield by setting the `enable_ball_search` property to `true` in the playfield configuration. This is the simplest way to activate the ball search feature, which automatically attempts to recover stuck balls during gameplay. It depends on the playfield device being properly defined in the MPF configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/ball_search/configuring_ball_search.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplayfields:\n  playfield:\n    enable_ball_search: true\n```\n\n----------------------------------------\n\nTITLE: Flipper Configuration with Power Setting\nDESCRIPTION: This example demonstrates how to configure a flipper with a `power_setting_name`. This allows the operator to adjust the flipper power in service mode using a machine setting. It requires pre-configured `coils` and `switches`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/flippers.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  c_flipper_main:\n    number:\nswitches:\n  s_flipper:\n    number: 1\n    tags: left_flipper\nflippers:\n  f_test_flippers_with_settings:\n    main_coil: c_flipper_main\n    power_setting_name: flipper_power\n    activation_switch: s_flipper\n```\n\n----------------------------------------\n\nTITLE: Fully Working Example - Basics YAML\nDESCRIPTION: This complete YAML configuration showcases a basic setup for controlling LEDs using the OPP platform. It defines hardware settings, light definitions, light player events, and keyboard mappings to trigger those events. The number format depends on the platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/index.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n#config_version=5\n\nhardware:               # change in case you don't use OPP\n   platform: opp\n   driverboards: gen2\n\nopp:\n   ports: /dev/ttyACM0, /dev/ttyACM1 # change if your Cobra board uses different ports\n\nlights:\n   led_strip_0_led_1:\n      number: 0-0-1 # the exact number format depends on your platform\n      subtype: led\n      type: rgb\n      tags: group1\n   led_strip_0_led_2:\n      number: 0-0-2 # the exact number format depends on your platform\n      subtype: led\n      type: rgb\n      tags: group1\n   led_strip_0_led_3:\n      previous: led_strip_0_led_2\n      subtype: led\n      type: rgb\n      tags: group1\n\nlight_player:\n   led_code:\n      led_strip_0_led_1: DFFF00\n   led_off:\n      led_strip_0_led_1: off\n      led_strip_0_led_2: off\n      led_strip_0_led_3: off\n   led_name:\n      led_strip_0_led_1: LightSalmon\n   group_light:\n      group1: green\n   led_fade:\n      led_strip_0_led_1:\n        color: slateblue\n        fade: 2000ms\n\nkeyboard:\n   1:\n     event: led_off\n   2:\n     event: led_code\n   3:\n     event: led_name\n   4:\n     event: group_light\n   5:\n     event: led_fade\n```\n\n----------------------------------------\n\nTITLE: Basic Scoop Configuration in YAML\nDESCRIPTION: This snippet demonstrates the basic configuration for a scoop device in MPF. It defines the switch that detects the ball, the coil that ejects the ball, and the ball device configuration that ties them together. It includes settings for eject timeouts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/scoops.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_scoop:\n    number: 2\ncoils:\n  c_scoop_eject:\n    number: 4\n    default_pulse_ms: 20\nball_devices:\n  bd_scoop:\n    ball_switches: s_scoop\n    eject_coil: c_scoop_eject\n    eject_timeouts: 1s\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration: Eject Target for Plunger Device\nDESCRIPTION: This YAML snippet configures the trough or drain ball device to eject balls to the plunger lane.  The `eject_targets` property specifies the name of the ball device that represents the plunger lane (e.g., `bd_plunger`, `bd_catapult`). This ensures that when the trough ejects a ball, it is directed to the configured plunger lane for player action.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/8_plunger.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\neject_targets: bd_plunger\n```\n\n----------------------------------------\n\nTITLE: Create a Slide with a Color DMD Effect Widget (YAML)\nDESCRIPTION: This snippet defines a slide for the on-screen window that includes a display widget with the color_dmd effect. This widget renders a logical display onto the slide, simulating the appearance of a DMD.  It also includes a text widget and a rectangle for a border.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/rgb_dmd.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  window_slide_1:\n    - type: display\n      effects:\n        - type: color_dmd\n      width: 512\n      height: 128\n```\n\n----------------------------------------\n\nTITLE: Configuring an RGB LED with Channel Syntax in lights section YAML\nDESCRIPTION: This snippet configures an RGB LED named \"l_led0\" using channel syntax, specifying the board number and LED index for each color channel (red, green, blue).  Each color is assigned to a separate output on the PD-LED board at address 8.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/leds.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_led0:\n    channels:\n      red:\n        - number: 8-0\n      green:\n        - number: 8-1\n      blue:\n        - number: 8-2\n```\n\n----------------------------------------\n\nTITLE: Conditional Event Playing (YAML)\nDESCRIPTION: This snippet demonstrates how to use conditional statements to control when events are posted. It shows examples using player scores and achievement states to determine which events are triggered.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/event_player.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: base\nevent_player:\n  mode_base_started{current_player.score>10000}:\n    - start_mode_superbonusround\n    - play_show_richy_rich\n  start_mode_battle{device.achievements.ironthrone.state!=\"completed\"}: start_mode_choose_battle\n  start_mode_battle{device.achievements.ironthrone.state==\"completed\"}: start_mode_victory_lap\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiball with Multiple Locks in MPF (YAML)\nDESCRIPTION: This YAML configuration sets up a multiball feature that utilizes three separate ball lock devices (`bd_lock1`, `bd_lock2`, `bd_lock3`). Each lock device holds one ball, and locking all three balls triggers the multiball. The example includes configuration for coils, switches, ball devices, multiball locks, the multiball itself, and mode settings to manage the locking process. The `start_events` and `stop_events` are used to enable and disable the different locks and the multiball. The test section validates the implemented logic.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/multiballs/multiball_with_multiple_lock_devices.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  eject_coil1:\n    number:\n  eject_coil2:\n    number:\n  eject_coil3:\n    number:\nswitches:\n  s_lock1:\n    number:\n  s_lock2:\n    number:\n  s_lock3:\n    number:\n  s_target1:\n    number:\nball_devices:\n  bd_lock1:\n    eject_coil: eject_coil1\n    ball_switches: s_lock1\n    eject_timeouts: 2s\n  bd_lock2:\n    eject_coil: eject_coil2\n    ball_switches: s_lock2\n    eject_timeouts: 2s\n  bd_lock3:\n    eject_coil: eject_coil3\n    ball_switches: s_lock3\n    eject_timeouts: 2s\n# mode lock1\n##! mode: lock1\nmode:\n  restart_on_next_ball: true\n  stop_events: multiball_my_multiball_started\nmultiball_locks:\n  lock1:\n    lock_devices: bd_lock1\n    balls_to_lock: 1\n    disable_events: mode_multiball_started\n    reset_count_for_current_player_events: multiball_my_multiball_started\n# mode lock2\n##! mode: lock2\nmode:\n  restart_on_next_ball: true\n  start_events: multiball_lock_lock1_full\n  stop_events: multiball_my_multiball_started\nmultiball_locks:\n  lock2:\n    lock_devices: bd_lock2\n    balls_to_lock: 1\n    disable_events: mode_multiball_started\n    reset_count_for_current_player_events: multiball_my_multiball_started\n# mode lock3\n##! mode: lock3\nmode:\n  restart_on_next_ball: true\n  start_events: multiball_lock_lock2_full\n  stop_events: multiball_my_multiball_started\nmultiball_locks:\n  lock3:\n    lock_devices: bd_lock3\n    balls_to_lock: 1\n    disable_events: mode_multiball_started\n    reset_count_for_current_player_events: multiball_my_multiball_started\n# mode multiball\n##! mode: multiball\nmode:\n  start_events: multiball_lock_lock3_full\n  stop_events: multiball_my_multiball_ended\nmultiballs:\n  my_multiball:\n    ball_count: 4\n    ball_count_type: total\n    shoot_again: 2s\n    start_events: s_target1_active\n    ball_locks: bd_lock1, bd_lock2, bd_lock3\n##! test\n#! start_game 5\n#! # there is one ball on playfield by default\n#! assert_balls_on_playfield 1\n#! assert_balls_in_play 1\n#! assert_int_condition 0 device.multiball_locks.lock1.locked_balls\n#! hit_switch s_lock1\n#! advance_time_and_run 3\n#! # it should not be locked\n#! assert_balls_on_playfield 1\n#! assert_balls_in_play 1\n#! assert_int_condition 0 device.multiball_locks.lock1.locked_balls\n#! start_mode lock1\n#! hit_switch s_lock1\n#! advance_time_and_run 3\n#! # it should not be locked\n#! assert_balls_on_playfield 1\n#! assert_balls_in_play 1\n#! assert_int_condition 1 device.multiball_locks.lock1.locked_balls\n#! hit_switch s_lock2\n#! advance_time_and_run 2\n#! hit_switch s_lock3\n#! advance_time_and_run 3\n#! assert_balls_on_playfield 1\n#! assert_balls_in_play 1\n#! assert_int_condition 1 device.multiball_locks.lock1.locked_balls\n#! assert_int_condition 1 device.multiball_locks.lock2.locked_balls\n#! assert_int_condition 1 device.multiball_locks.lock3.locked_balls\n#! hit_switch s_target1\n#! advance_time_and_run 3\n#! assert_balls_on_playfield 4\n#! assert_balls_in_play 4\n#! assert_int_condition 0 device.multiball_locks.lock1.locked_balls\n#! assert_int_condition 0 device.multiball_locks.lock2.locked_balls\n#! assert_int_condition 0 device.multiball_locks.lock3.locked_balls\n#! advance_time_and_run 3\n#! drain_one_ball\n#! drain_one_ball\n#! drain_one_ball\n#! assert_balls_on_playfield 1\n#! assert_balls_in_play 1\n#! assert_mode_not_running lock1\n#! assert_mode_not_running lock2\n#! assert_mode_not_running lock3\n#! assert_mode_not_running multiball\n```\n\n----------------------------------------\n\nTITLE: Configuring a Drop Target Bank in YAML\nDESCRIPTION: This snippet demonstrates how to configure a drop target bank in MPF using YAML. It defines individual drop targets, links them to switches, then combines them into a drop target bank. A reset coil and reset delay are also configured.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/targets/drop_targets/drop_target_bank.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndrop_targets:\n  front:\n    switch: s_drop_front\n  middle:\n    switch: s_drop_middle\n  back:\n    switch: s_drop_back\ndrop_target_banks:\n  vuk_bank:\n    drop_targets: front, middle, back\n    reset_coils: c_drop_reset\n    reset_on_complete: 1s\n```\n\n----------------------------------------\n\nTITLE: Servo Configuration in YAML\nDESCRIPTION: This YAML code configures two servos, `servo1` and `servo2`.  `servo1` defines servo min/max positions, named positions, a reset position, and a reset event.  `servo2` defines named positions, a reset position, and a reset event. The `number` specifies the hardware port for each servo.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/servos/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nservos:\n  servo1:\n    servo_min: 0.1\n    servo_max: 0.9\n    positions:\n      0.0: servo1_down\n      0.8: servo1_up\n    reset_position: 0.5\n    reset_events: reset_servo1\n    number: 1\n  servo2:\n    positions:\n      0.2: servo2_left\n      1.0: servo2_home\n    reset_position: 1.0\n    reset_events: reset_servo2\n    number: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch-Based Sequence Shots in MPF\nDESCRIPTION: This snippet demonstrates how to configure sequence shots based on a sequence of switch activations in MPF. It defines two sequence shots, `left_orbit` and `weak_right_orbit`, each with a `switch_sequence` specifying the order in which switches must be activated and a `sequence_timeout` indicating the maximum time allowed to complete the sequence. The `switch_sequence` property defines the switches that need to be hit in a specific order and the `sequence_timeout` defines how long the player has to hit them.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sequence_shots.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nsequence_shots:\n  left_orbit:\n    switch_sequence: left_rollover, top_right_opto\n    sequence_timeout: 3s\n  weak_right_orbit:\n    switch_sequence: top_right_opto, top_center_rollover\n    sequence_timeout: 3s\n```\n\n----------------------------------------\n\nTITLE: Coil Configuration with Hold Power\nDESCRIPTION: This snippet demonstrates how to configure a coil to hold at a reduced power level using the `default_hold_power` parameter. The hold power is a value between 0.0 and 1.0, representing a percentage of the full power. In this example the coil is configured to pulse for 32ms and hold at 50% power.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/drivers.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil:\n    number:\n    default_pulse_ms: 32\n    default_hold_power: 0.5\n```\n\n----------------------------------------\n\nTITLE: Setting Player Variable for Specific Player\nDESCRIPTION: This example shows how to set a variable for a specific player other than the current player. It adds 1000 to the score of player 2.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/variable_player.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  add_score_to_player_2:\n    score:\n      int: 1000\n      player: 2\n```\n\n----------------------------------------\n\nTITLE: Add Eject Target to Ball Trough YAML\nDESCRIPTION: This code snippet shows how to add an eject target to a ball trough in MPF using the `eject_targets` setting. The eject target specifies the device that the trough ejects balls to (typically the plunger lane). This allows MPF to track the flow of balls through the machine. A placeholder plunger lane is added.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_opto.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n\n  # bd_plunger is a placeholder just so the trough's eject_targets are valid\n  bd_plunger:\n    ball_switches: s_plunger\n    mechanical_eject: true\n```\n\n----------------------------------------\n\nTITLE: Defining Drain and Trough Coils in MPF\nDESCRIPTION: This snippet defines the coils used for the drain eject and trough release.  The `number` field corresponds to the physical coil connection. The `default_pulse_ms` sets the default pulse time for the coil in milliseconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_multiple_switches.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_drain_eject:\n    number: 3\n    default_pulse_ms: 20\n  c_trough_release:\n    number: 4\n    default_pulse_ms: 20\n```\n\n----------------------------------------\n\nTITLE: Defining Slides for Credit Display (YAML)\nDESCRIPTION: This configuration defines the content of various slides, using text elements to display information related to credits, such as the number of credits available or messages like \"INSERT COINS\", \"ENABLING FREE PLAY\", etc. It uses machine variables to dynamically update the credit information.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  credit_added_slide:\n    - type: text\n      text: \"(machine|credits_string)\"\n  not_enough_credits_slide:\n    - type: text\n      text: \"(machine|credits_string)\"\n    - type: text\n      text: INSERT COINS\n  enabling_free_play_slide:\n    - type: text\n      text: ENABLING FREE PLAY\n  enabling_credit_play_slide:\n    - type: text\n      text: ENABLING CREDIT PLAY\n    - type: text\n      text: \"(machine|credits_string)\"\n  max_credits_reached_slide:\n    - type: text\n      text: MAX CREDITS REACHED\n  player_added_slide:\n    - type: text\n      text: PLAYER ADDED\n      font_size: 12\n      color: white\n```\n\n----------------------------------------\n\nTITLE: Configuring Channels for a Light\nDESCRIPTION: This snippet demonstrates how to configure the channels for an RGB LED using the 'channels' section. This allows you to specify the number for each color channel individually. The 'type' parameter indicates the color space of the LED.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/lights.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  rainbow_star:\n    type: rgb\n    channels:\n      red:\n        number: 9-29\n      green:\n        number: 9-30\n      blue:\n        number: 9-31\n```\n\n----------------------------------------\n\nTITLE: Dynamic Event Arguments (YAML)\nDESCRIPTION: This snippet demonstrates how to include dynamic values as arguments to events. It uses the `value:` property to indicate that an argument's value should be dynamically calculated.  Also includes type specification for the dynamic value.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/event_player.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nevent_player:\n  mode_carchase_started:\n    # Objects can be expanded for a key/value pair per line\n    set_environment_sounds:\n      env_name: driving\n    # Objects can be inline for brevity\n    set_initial_laps_count: {count: 10}\nevent_player:\n  mode_dynamo_started:\n    set_dynamo_phase:\n      phase_name: {value: current_player.dynamo_phase}\nevent_player:\n  mode_dynamo_started:\n    # This event arg will be correctly typed\n    set_dynamo_round_with_type:\n      round_number:\n        value: device.counters.dynamo_rounds.value\n        type: int\n    # This event arg will be converted to a string\n    set_dynamo_round_without_type:\n      round_number:\n        value: device.counters.dynamo_rounds.value\n```\n\n----------------------------------------\n\nTITLE: Integrating Sequence Shots with Shot Groups in YAML\nDESCRIPTION: This YAML configuration shows how to use a sequence shot within a shot group.  It defines a sequence shot named \"ramp\", and a shot named \"shot_ramp\" is configured to trigger on the `ramp_hit` event from the sequence shot. This \"shot_ramp\" can then be added to the `your_group` shot group. The switches `s_ramp_entry` and `s_ramp_success` are defined with their respective hardware numbers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/shots/sequence_shots.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_ramp_entry:\n    number: 1\n  s_ramp_success:\n    number: 2\nsequence_shots:\n  ramp:\n    switch_sequence: s_ramp_entry, s_ramp_success\n    sequence_timeout: 3s\n##! mode: test_mode\n# In your mode\nshots:\n  shot_ramp:\n    hit_events: ramp_hit\nshot_groups:\n  your_group:\n    shots: shot_ramp\n```\n\n----------------------------------------\n\nTITLE: Variable Player Configuration in Mode\nDESCRIPTION: This YAML snippet demonstrates how to configure a `variable_player` entry within a mode's configuration file. Specifically, it shows how to award points when the `right_ramp_hit` event is triggered.  The `right_ramp_hit` shot event will only award the points when the multiball mode is running.  When it stops, that variable_player/scoring configuration is removed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/modes/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\nvariable_player:\n  right_ramp_hit:\n    score: 50000\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Player Variables in YAML\nDESCRIPTION: This snippet demonstrates how to define custom player variables with initial values and data types (string, integer, float) in the `player_vars` section of an MPF configuration file. It includes examples for `current_mode` (string), `bumper_hits` (integer), and `super_bonus_multipler` (float).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/players.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplayer_vars:\n  current_mode:\n    initial_value: Trees Attack\n    value_type: str\n  bumper_hits:\n    initial_value: 0\n    value_type: int\n  super_bonus_multipler:\n    initial_value: 1.25\n    value_type: float\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Tracks in MPF with YAML\nDESCRIPTION: This YAML configuration shows how to define various audio tracks within the `sound_system` section of an MPF configuration file. It includes settings for buffer size, frequency, channels, and individual track configurations such as volume, simultaneous sounds, event triggers, and track types (standard, sound_loop, playlist). The `crossfade_time` is specified for the `playlist` track. Dependencies: Requires the `sound_system` to be properly configured.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/tracks.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nsound_system:\n  buffer: 2048\n  frequency: 44100\n  channels: 2\n  tracks:\n    music:\n      volume: 0.5\n      simultaneous_sounds: 1\n      events_when_stopped: music_track_stopped\n      events_when_played: music_track_played\n      events_when_paused: music_track_paused\n    sfx:\n      volume: 0.4\n      simultaneous_sounds: 8\n      preload: true\n    voice:\n      volume: 0.6\n      simultaneous_sounds: 1\n      preload: true\n    loops:\n      type: sound_loop\n      volume: 0.6\n    playlist:\n      type: playlist\n      volume: 0.6\n      crossfade_time: 2s\n```\n\n----------------------------------------\n\nTITLE: Configure Trough as Default Source Device in MPF\nDESCRIPTION: This configuration snippet shows how to configure the trough ball device as the `default_source_device` for the playfield in MPF. This is necessary when the plunger lane does not have a ball switch to indicate the presence of a ball. When MPF needs to add a live ball into play, it will eject a ball from the trough using this configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/mechanical_no_switch.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplayfields:\n  playfield:\n    default_source_device: bd_trough\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Full Slide Player Configuration in YAML\nDESCRIPTION: Illustrates the 'full' configuration style for the slide player. This format allows for specifying settings for each slide when it's displayed in response to an event.  Slides are assumed to be pre-defined in the `slides:` section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/slide_player.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nslide_player:\n   event1:\n      slide1:\n         <settings>\n   event2:\n      slide2:\n         <settings>\n   event3:\n      slide3:\n         <settings>\n```\n\n----------------------------------------\n\nTITLE: Awarding Points for Skillshot Hit\nDESCRIPTION: This snippet uses the `variable_player` to award points when the lit skillshot lane is hit. It defines the `skillshot_lit_hit` event and assigns a score value to it.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_lane_change.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvariable_player:\n  skillshot_lit_hit:\n    score: 20_000\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Display Options in MPF\nDESCRIPTION: This YAML configuration demonstrates how to use sub-entries within the `slide_player` to specify additional options for displaying a slide. When the `right_ramp_hit` event is triggered, the `ramp_hit_slide` is displayed with an `expire` time of 2 seconds and a `target` display of `dmd`. The slide and display definitions are commented out for brevity. The test section posts the event, advances time, and verifies the text on the specified display.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/showing_slides.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  right_ramp_hit:\n    ramp_hit_slide:\n      expire: 2s\n      target: dmd\n##! test\n#! post right_ramp_hit\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Ramp has been hit\" dmd\n```\n\n----------------------------------------\n\nTITLE: Configuring Counter Control Events in YAML\nDESCRIPTION: This snippet demonstrates how to configure control events for a counter logic block. It defines a `control_events` section that allows adding or subtracting a specific value from the counter when a particular event is posted.  In this example, `add_five_event` will add `5` to the counter.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/counters.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncounters:\n  counter_with_control_events:\n    count_events: count_up\n    control_events:\n      - event: add_five_event\n        action: add\n        value: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring a Light with Channel Numbers\nDESCRIPTION: This snippet shows how to configure a light using channel numbers, providing more granular control over individual color channels (e.g., red, green, blue).  The 'channels' section maps each color to a specific channel number, allowing for non-sequential channel assignments. 'type' specifies that this is an rgb light.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/lights.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  rainbow_star:\n    type: rgb\n    channels:\n      red:\n        number: 9-29\n      green:\n        number: 9-30\n      blue:\n        number: 9-40     # this light is not sequential to the previous\n```\n\n----------------------------------------\n\nTITLE: Multiple Sequence Logic Blocks YAML\nDESCRIPTION: This snippet demonstrates how to configure multiple sequence logic blocks with different event sequences and completion events in MPF.  It shows how to define steps that must be completed in order, and define `events_when_complete` to trigger events when a sequence is finished. Requires MPF to be running in mode mode1.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sequences.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: mode1\nsequences:\n  logic_block_1:\n    events:\n      - event1\n      - event2\n      - event3\n      - event4\n      - event5\n    events_when_complete: logic_block_1_done\n  logic_block_2:\n    events:\n      - event1, event2, event3\n      - event4\n      - event5\n    events_when_complete: logic_block_2_done\n```\n\n----------------------------------------\n\nTITLE: Adding Flipper Coils YAML\nDESCRIPTION: This snippet shows how to add entries for flipper coils in the machine-wide config under the `coils:` section. It configures the coil numbers, enables coil enabling via `allow_enable: true`, and sets a default hold power. The `number` field must match the actual hardware, and the `default_hold_power` setting can be adjusted to control flipper hold strength.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/single_wound.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_flipper_left:\n    number: 0\n    allow_enable: true\n    default_hold_power: 0.125\n  c_flipper_right:\n    number: 1\n    allow_enable: true\n    default_hold_power: 0.125\n```\n\n----------------------------------------\n\nTITLE: Setting Default Source Device for Playfield in MPF (YAML)\nDESCRIPTION: This snippet configures the playfield to use the plunger lane as the default source device. This tells MPF that the plunger is the source when a new ball is added to the playfield. This is configured using the `default_source_device` setting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/coil_fired.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Configuring a Stepper Motor in MPF for Stern SPIKE\nDESCRIPTION: This code snippet demonstrates how to configure a stepper motor within the MPF configuration file for use with the Stern SPIKE platform. It defines a homing switch and a stepper, specifying the number, homing mode, homing switch, platform settings (speed and light number), and named positions. This configuration enables MPF to control the stepper motor on the SPIKE platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/steppers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_stepper_home:\n    number: 11-4\nsteppers:\n  stepper0:\n    number: 10-0\n    homing_mode: switch\n    homing_switch: s_stepper_home\n    platform_settings:\n      speed: 20\n      light_number: 10-10\n    named_positions:\n      100: test_1\n      200: test_2\n      500: test_3\n```\n\n----------------------------------------\n\nTITLE: Launching on Launch Button Release (YAML)\nDESCRIPTION: This snippet configures the plunger to launch the ball when the launch button is released. It uses the `s_launch_button_inactive` event, which is automatically posted when the launch button switch becomes inactive.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/coil_fired.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    eject_coil: c_plunger\n    player_controlled_eject_event: s_launch_button_inactive\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Shot in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a basic shot in a mode. It defines a shot named `my_shot` that is triggered by the `lane_l` switch. When the shot is hit, it will use the default shot profile and transition from the `unlit` state to the `lit` state, posting events to the event bus. The associated light `lane_l` will be controlled by the shot profile.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/shots/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nshots:\n  my_shot:\n    switch: lane_l\n    show_tokens:\n      light: lane_l\n```\n\n----------------------------------------\n\nTITLE: Configuring a Dual-Wound Coil\nDESCRIPTION: This snippet demonstrates how to configure a dual-wound coil named `c_dual_wound` in the `dual_wound_coils:` section of the MPF configuration. It defines the `hold_coil`, `main_coil`, and `eos_switch` properties, linking the dual-wound coil to existing coil and switch devices. When enabled, the `c_dual_wound` coil energizes both `c_hold` and `c_power`. Activation of `s_eos` de-energizes `c_power`, leaving only `c_hold` active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/dual_wound_coils.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_hold:\n    number:\n    allow_enable: true\n  c_power:\n    number:\n    default_pulse_ms: 20\nswitches:\n  s_eos:\n    number:\ndual_wound_coils:\n  c_dual_wound:\n    hold_coil: c_hold\n    main_coil: c_power\n    eos_switch: s_eos\n```\n\n----------------------------------------\n\nTITLE: Defining Eject Coil for Trough Ball Device (YAML)\nDESCRIPTION: This snippet shows how to connect the trough's eject coil to the ball device. The `eject_coil` parameter points to the coil defined in the coils section. This allows MPF to trigger the coil to eject balls from the trough. The coil name should match exactly the name defined in the `coils:` section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_mechanical.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n```\n\n----------------------------------------\n\nTITLE: Configure Trough Ball Device in YAML\nDESCRIPTION: This code snippet shows how to configure the trough ball device (`bd_trough`) in the `ball_devices:` section. It defines the entrance switch, a timeout for detecting when the trough is full, the ball capacity, the eject coil, the target ball device (the plunger lane), and tags indicating the trough as a home location for balls.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_one_switch.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nball_devices:\n  bd_trough:\n    entrance_switch: s_trough_enter\n    entrance_switch_full_timeout: 500ms\n    ball_capacity: 3\n    eject_coil: c_trough_release\n    eject_targets: bd_plunger_lane\n    tags: trough, home\n    eject_timeouts: 3s\n```\n\n----------------------------------------\n\nTITLE: Trough and Plunger Configuration YAML\nDESCRIPTION: This YAML snippet configures switches, coils, and ball devices for a pinball trough and plunger. It defines switch numbers and types, coil parameters, and ball device behaviors like ejection targets and timeouts. It requires the Mission Pinball Framework (MPF).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_opto.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_trough1:\n    number: 2\n    type: NC\n  s_trough2:\n    number: 3\n    type: NC\n  s_trough3:\n    number: 4\n    type: NC\n  s_trough4:\n    number: 5\n    type: NC\n  s_trough5:\n    number: 6\n    type: NC\n  s_trough6:\n    number: 7\n    type: NC\n  s_trough_jam:\n    number: 8\n    type: NC\n  s_plunger:\n    number: 10\n\nvirtual_platform_start_active_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6\n\ncoils:\n  c_trough_eject:\n    number: 4\n    default_pulse_ms: 20\n\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n    eject_timeouts: 3s\n  bd_plunger:\n    ball_switches: s_plunger\n    mechanical_eject: true\n    eject_timeouts: 5s\n\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Applying a Shot Profile to a Shot in MPF (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to apply a shot profile to a shot in MPF. It defines a shot named `my_first_shot`, assigns a switch to it, specifies a show token, and links it to a shot profile named `my_first_profile`. This allows the shot to use the behaviors defined in the specified profile.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  my_first_shot:\n    switch: s_right_inlane\n    show_tokens:\n      led: l_led1 # or use light: here, depending on your machine\n    profile: my_first_profile\n```\n\n----------------------------------------\n\nTITLE: Configuring a Display in config.yaml using YAML\nDESCRIPTION: This snippet configures a basic display called \"window\" in the `config.yaml` file with a specified width and height.  This creates an internal representation of a blank canvas that holds graphical content. This setup is required for the MPF media controller to display content on the screen.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  window:\n    width: 800\n    height: 600\n##! test\n#! advance_time_and_run .1\n```\n\n----------------------------------------\n\nTITLE: Logic Blocks Configuration (New)\nDESCRIPTION: This YAML snippet demonstrates the new configuration style for logic blocks in MPF version 0.50 and later. Counters are now defined directly, without the 'logic_blocks' key.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/logic_blocks.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncounters:\n  your_counter:\n    count_events: count_it_up\n```\n\n----------------------------------------\n\nTITLE: Install MPF Packages - doscon\nDESCRIPTION: These commands install MPF, MPF-MC, and MPF-Monitor using pip. MPF is the core framework, MPF-MC is the media controller, and MPF-Monitor provides a debugging interface. This step installs the core components required to run MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_6\n\nLANGUAGE: doscon\nCODE:\n```\npip3.9 install mpf[all]\n```\n\nLANGUAGE: doscon\nCODE:\n```\npip3.9 install mpf-mc\n```\n\nLANGUAGE: doscon\nCODE:\n```\npip3.9 install mpf-monitor\n```\n\n----------------------------------------\n\nTITLE: Configure a Multi-Position Motor in MPF\nDESCRIPTION: This snippet configures a motor with multiple positions, using switches to detect each position.  It defines digital outputs for forward and backward movement, mapping them to a motor device. It showcases how to create multiple `go_to_position` mappings, allowing control of the motor to each defined switch position.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/motors.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_claw_home:\n    number:\n  s_claw_position1:\n    number:\n  s_claw_position2:\n    number:\n  s_claw_position3:\n    number:\n  s_claw_position4:\n    number:\n  s_claw_position5:\n    number:\ndigital_outputs:\n  c_claw_forward:\n    number:\n    type: driver\n  c_claw_backward:\n    number:\n    type: driver\nmotors:\n  batman_claw:\n    motor_left_output: c_claw_forward\n    motor_right_output: c_claw_backward\n    position_switches: !!omap\n      - home: s_claw_home\n      - pos1: s_claw_position1\n      - pos2: s_claw_position2\n      - pos3: s_claw_position3\n      - pos4: s_claw_position4\n      - pos5: s_claw_position5\n    reset_position: home\n    go_to_position:\n      stop_claw: home\n      go_pos1: pos1\n      go_pos2: pos2\n      go_pos3: pos3\n      go_pos4: pos4\n      go_pos5: pos5\n```\n\n----------------------------------------\n\nTITLE: Defining Shots\nDESCRIPTION: This YAML configuration defines the shots for the 'super_jets_setup' mode, including the jet bumpers and rollover lanes. It specifies which switches trigger each shot and associates lights with the rollover lanes. When activated, these lights signal to the player which lanes are active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/AFM_super_jets.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  jets:\n    switch: s_right_bumper, s_left_bumper, s_middle_bumper\n  right_rollover:\n    switch: s_right_rollover\n    show_tokens:\n      light: l_right_rollover\n  left_rollover:\n    switch: s_left_rollover\n    show_tokens:\n      light: l_left_rollover\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Multipliers in YAML\nDESCRIPTION: This snippet demonstrates how to combine two multipliers (`multiplier` and `mode_multiplier`) for scoring. The `increment_multiplier` and `increment_mode_multiplier` events increase the respective multipliers, and the `score_something` event uses both multipliers in its scoring formula.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/scoring/index.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# set initial value for your multiplier player variables (to have it start\n# at 1 instead of 0)\nplayer_vars:\n  multiplier:\n    value_type: int\n    initial_value: 1\n  mode_multiplier:\n    value_type: int\n    initial_value: 1\n##! mode: my_mode\n# in your mode:\nvariable_player:\n  increment_multiplier:\n    multiplier: 1\n  increment_mode_multiplier:\n    mode_multiplier: 1\n  score_something:\n    score: 100 * current_player.multiplier * current_player.mode_multiplier\n##! test\n#! start_game\n#! assert_player_variable 1 multiplier\n#! start_mode my_mode\n#! post score_something\n#! assert_player_variable 100 score\n#! post increment_multiplier\n#! assert_player_variable 2 multiplier\n#! assert_player_variable 1 mode_multiplier\n#! post score_something\n#! assert_player_variable 300 score\n#! post increment_mode_multiplier\n#! assert_player_variable 2 multiplier\n#! assert_player_variable 2 mode_multiplier\n#! post score_something\n#! assert_player_variable 700 score\n```\n\n----------------------------------------\n\nTITLE: Defining Trough Ball Device in MPF Configuration (YAML)\nDESCRIPTION: This snippet defines the trough as a ball device within MPF. It includes configuration for the ball switches, eject coil, and tags that define the trough's role in the game. The `ball_switches` lists all switches used to detect balls in the trough. The `tags` define MPF's treatment for the trough as a home, drain, and ball storage device.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_mechanical.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n```\n\n----------------------------------------\n\nTITLE: Widget Player Settings in Show File - YAML\nDESCRIPTION: This example illustrates how to configure widget settings within a show file using the `widgets` section. Widget settings are defined per step, allowing for dynamic widget configuration in show sequences.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/widget_player.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#show_version=5\n\n- duration: 1s\n  widgets:\n      name_of_your_widget:\n         <list of settings below go here>\n      name_of_a_different_widget:\n         <list of settings below go here>\n```\n\n----------------------------------------\n\nTITLE: Use Flasher in flasher_player in MPF\nDESCRIPTION: This snippet shows how to trigger a flasher using the flasher_player in MPF.  It defines a flash event that triggers the flasher 'flasher_01' for 100 milliseconds. You can also enable the flasher permanently using light_player.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/flashers.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nflasher_player:\n  flash:\n    flasher_01: 100ms\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic and Dual Spinner in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to configure two spinner devices: a basic spinner with a single switch and a dual spinner with two switches and labels. It shows the basic structure and configuration options, including the switch assignments, active and idle times. The switches must be pre-defined in the switches section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/spinners.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nspinners:\n  basic_spinner:\n    switch: s_orbit_spinner\n    active_ms: 500\n  dual_spinner:\n    switches: s_top_loop_left, s_top_loop_right\n    labels: left, right\n    active_ms: 1200\n    idle_ms: 2400\n```\n\n----------------------------------------\n\nTITLE: Scoring with Multiplier Player Variable in YAML\nDESCRIPTION: This snippet shows how to use a player variable as a multiplier to increase scoring. It includes setting an initial value for the multiplier, incrementing the multiplier on a specific event, and using the multiplier in scoring entries within the `variable_player`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/scoring/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# set initial value for your multiplier player variable (to have it start\n# at 1 instead of 0)\nplayer_vars:\n  multiplier:\n    value_type: int\n    initial_value: 1\n##! mode: my_mode\n# in your mode:\nvariable_player:\n  increment_multiplier:\n    multiplier: 1\n  score_something:\n    score: 100 * current_player.multiplier\n##! test\n#! start_game\n#! assert_player_variable 1 multiplier\n#! start_mode my_mode\n#! post score_something\n#! assert_player_variable 100 score\n#! post increment_multiplier\n#! assert_player_variable 2 multiplier\n#! post score_something\n#! assert_player_variable 300 score\n```\n\n----------------------------------------\n\nTITLE: Configure Extra Ball Award Event (YAML)\nDESCRIPTION: This snippet configures an extra ball named `my_mode_eb` to be awarded when the `alien_smashed` event is posted. After the extra ball is awarded, future `alien_smashed` events will not award additional extra balls. This configuration is placed inside a mode configuration file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/extra_balls.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nextra_balls:\n  my_mode_eb:\n    award_events: alien_smashed\n```\n\n----------------------------------------\n\nTITLE: Credits Configuration with Service Mode Settings (YAML)\nDESCRIPTION: This configuration demonstrates how to integrate service mode settings for pricing tiers into the credits configuration.  It defines two settings, `credits_price_one_credit` and `credits_price_tier2`, along with `credits_credits_tier2` that allows the operator to configure the price and number of credits for different tiers in the service mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# in your machine wide config\nswitches:\n  s_coin_left:\n    number:\n  s_service_coin:\n    number:\nsettings:\n  credits_price_one_credit:\n    label: Price for one credit\n    values:\n      .25: \"25ct\"\n      .5: \"50ct\"\n      .75: \"75ct\"\n      1: \"1 dollar\"\n      2: \"2 dollar\"\n      3: \"3 dollar\"\n      4: \"4 dollar\"\n      5: \"5 dollar\"\n    default: .5\n    key_type: float\n    sort: 500\n  credits_price_tier2:\n    label: Price for price tier 2\n    values:\n      .25: \"25ct\"\n      .5: \"50ct\"\n      .75: \"75ct\"\n      1: \"1 dollar\"\n      2: \"2 dollar\"\n      3: \"3 dollar\"\n      4: \"4 dollar\"\n      5: \"5 dollar\"\n    default: 2\n    key_type: float\n    sort: 510\n  credits_credits_tier2:\n    label: Number of credits for tier 2\n    values:\n      2: \"2\"\n      3: \"3\"\n      4: \"4\"\n      5: \"5\"\n      6: \"6\"\n      7: \"7\"\n      8: \"8\"\n      9: \"9\"\n      10: \"10\"\n    default: 5\n    key_type: int\n    sort: 520\ncredits:\n  max_credits: 12\n  free_play: false\n  service_credits_switch: s_service_coin\n  switches:\n    - switch: s_coin_left\n      type: money\n      value: .25\n  pricing_tiers:\n    - price: settings.credits_price_one_credit\n      credits: 1\n    - price: settings.credits_price_tier2\n      credits: settings.credits_credits_tier2\n  fractional_credit_expiration_time: 15m\n  credit_expiration_time: 2h\n  persist_credits_while_off_time: 1h\n  free_play_string: FREE PLAY\n  credits_string: CREDITS\n```\n\n----------------------------------------\n\nTITLE: Add Scoring to Shots in MPF\nDESCRIPTION: This snippet shows how to add scoring to shots in MPF using the `variable_player` section. It configures scoring for hitting unlit shots (`indy_lanes_unlit_hit`), hitting lit shots (`indy_lanes_lit_hit`), and completing the shot group (`indy_lanes_lit_complete`).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/lanes_mode.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvariable_player:\n  indy_lanes_unlit_hit:\n    score: 5000\n  indy_lanes_lit_hit:\n    score: 100\n  indy_lanes_lit_complete:\n    score: 10000\n```\n\n----------------------------------------\n\nTITLE: Defining the Trough Ball Device in MPF\nDESCRIPTION: This snippet configures the trough ball device.  It defines the switches that detect balls in the trough, the coil that releases balls, and the target device for released balls (`bd_plunger_lane`). The `tags: home, trough` settings indicate that the trough is a valid location for starting and storing balls. `eject_timeouts` sets the maximum time for an eject attempt.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_multiple_switches.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3\n    eject_coil: c_trough_release\n    eject_targets: bd_plunger_lane\n    tags: home, trough\n    eject_timeouts: 3s\n```\n\n----------------------------------------\n\nTITLE: Define Plunger Lane Ball Device in MPF (YAML)\nDESCRIPTION: This snippet defines the plunger lane ball device, specifying the switch that detects a ball in the plunger lane, that it uses a mechanical eject, and the eject timeout duration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger_lane:\n    ball_switches: s_plunger\n    mechanical_eject: true\n    eject_timeouts: 5s\n```\n\n----------------------------------------\n\nTITLE: Configure Eject Timeouts YAML\nDESCRIPTION: This code snippet shows how to configure eject timeouts for the trough and plunger lane. `eject_timeouts` setting specifies the maximum time a ball should take to reach the target device. If the ball does not reach the target within this time, MPF will retry the eject. Setting a sensible eject timeout prevents balls from stacking up in the ball trough during multiball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_opto.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n    eject_timeouts: 3s\n  bd_plunger:\n    ball_switches: s_plunger\n    mechanical_eject: true\n    eject_timeouts: 5s\n```\n\n----------------------------------------\n\nTITLE: Dynamic Counter Complete Value with If/Else YAML\nDESCRIPTION: This snippet shows how to use an if/else condition to dynamically set the `count_complete_value` of a counter based on whether the `player.wizard_complete` player variable is true or false.  If `player.wizard_complete` is true, `count_complete_value` is set to 5; otherwise, it's set to 3.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/dynamic_values.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\ncounters:\n  my_counter:\n    count_events: count_up\n    count_complete_value: 5 if player.wizard_complete else 3\n```\n\n----------------------------------------\n\nTITLE: Disable Flipper on Multiple Events (YAML)\nDESCRIPTION: This snippet demonstrates how to disable a flipper when any of the `ball_ending`, `tilt`, or `slam_tilt` events are posted. It shows how to specify multiple events using a comma-separated list.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/device_control_events.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisable_events: ball_ending, tilt, slam_tilt\n```\n\n----------------------------------------\n\nTITLE: Configuring Playfield Transfers in YAML\nDESCRIPTION: This example shows a basic configuration for playfield transfers, defining switches and associating them with transfers between playfields.  It includes setting the source and target playfields using `captures_from` and `eject_target`.  It also defines playfields for use in the transfers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/playfield_transfers.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_transfer:\n    number:\nplayfield_transfers:\n  transfer1:\n    ball_switch: s_transfer\n    captures_from: playfield1\n    eject_target: playfield2\n  transfer2:\n    transfer_events: transfer_ball\n    captures_from: playfield1\n    eject_target: playfield2\nplayfields:\n  playfield1:\n    label: Playfield 1\n    default_source_device: None\n  playfield2:\n    label: Playfield 2\n    default_source_device: None\n```\n\n----------------------------------------\n\nTITLE: Configuring Shots in MPF with YAML\nDESCRIPTION: This snippet configures individual shots, associating each switch with a corresponding light. It's used to track when a shot is hit and visually indicate its state. This configuration must be put in the base mode configuration in `/modes/base/config/base.yaml`\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/lanes_mode.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  indy_i:\n    switch: indy_i\n    show_tokens:\n      light: indy_i\n  indy_n:\n    switch: indy_n\n    show_tokens:\n      light: indy_n\n  indy_d:\n    switch: indy_d\n    show_tokens:\n      light: indy_d\n  indy_y:\n    switch: indy_y\n    show_tokens:\n      light: indy_y\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardware Sound Player in YAML\nDESCRIPTION: This snippet demonstrates how to configure the hardware_sound_player section in a YAML file. It shows how to map different events (event_posted_elsewhere1, ball_started, test_stop) to specific sound actions (play, stop) on certain tracks. The sound system used is assumed to be defined elsewhere using `hardware_sound_systems`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/hardware_sound_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware_sound_systems:\n  default:\n    label: Default external sound system\nhardware_sound_player:\n  event_posted_elsewhere1:\n    2:\n      action: play\n  ball_started:\n    3: play\n  test_stop: stop\n```\n\n----------------------------------------\n\nTITLE: Configure base mode YAML file\nDESCRIPTION: This snippet configures the base mode with a start event and priority. The `start_events` specifies the event that triggers the mode to start, and the `priority` determines the mode's precedence relative to other modes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/14_add_a_mode.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\n#config_version=5\nmode:\n  start_events: ball_started\n  priority: 100\n```\n\n----------------------------------------\n\nTITLE: Timer Configuration with Dynamic Tick Interval (YAML)\nDESCRIPTION: This example showcases how to configure a timer with a dynamic tick interval using settings. The `my_timer_speed` setting allows the user to configure the timer's tick interval, which affects how frequently the timer updates.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/timers.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n#! settings.yaml\nsettings:\n  my_timer_speed:\n    label: \"My timer's speed\"\n    values:\n      0.5: \"Half a second\"\n      1.0: \"1 second (default)\"\n      2.5: \"2.5 seconds\"\n    default: 1.0\n    key_type: float\n    sort: 123\n\n#! a timer definition in some mode .yaml\ntimers:\n  my_timer:\n    end_value: 1\n    tick_interval: settings.my_timer_speed\n    start_running: true\n```\n\n----------------------------------------\n\nTITLE: Complete Base Mode Configuration YAML for MPF\nDESCRIPTION: This complete YAML snippet provides a full configuration example including switches, lights, shots, shot groups, variable player and show player.  It defines the switches and lights associated with each lane, configures the shot group for the lanes, defines variable player entries for scoring events and finally adds the show player entry to trigger the light show when the lanes are completed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/lanes_mode.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# switches and lights in your machine config\nswitches:\n  indy_i:\n    number: 1\n  indy_n:\n    number: 2\n  indy_d:\n    number: 3\n  indy_y:\n    number: 4\nlights:\n  indy_i:\n    number: 1\n  indy_n:\n    number: 2\n  indy_d:\n    number: 3\n  indy_y:\n    number: 4\n##! show: indy_lanes_complete\n# the show on complete\n- duration: 1\n  lights:\n    indy_i: ff\n    indy_n: 00\n    indy_d: ff\n    indy_y: 00\n- duration: 1\n  lights:\n    indy_i: 00\n    indy_n: ff\n    indy_d: 00\n    indy_y: ff\n##! mode: base\n# your base mode\nmode:\n  start_events: ball_started\nshots:\n  indy_i:\n    switch: indy_i\n    show_tokens:\n      light: indy_i\n  indy_n:\n    switch: indy_n\n    show_tokens:\n      light: indy_n\n  indy_d:\n    switch: indy_d\n    show_tokens:\n      light: indy_d\n  indy_y:\n    switch: indy_y\n    show_tokens:\n      light: indy_y\nshot_groups:\n  indy_lanes:\n    shots: indy_i, indy_n, indy_d, indy_y\n    rotate_left_events: left_flipper_active\n    rotate_right_events: right_flipper_active\n    reset_events: indy_lanes_lit_complete\nvariable_player:\n  indy_lanes_unlit_hit:\n    score: 5000\n  indy_lanes_lit_hit:\n    score: 100\n  indy_lanes_lit_complete:\n    score: 10000\nshow_player:\n  indy_lanes_default_lit_complete:\n    indy_lanes_complete:\n      speed: 20\n      loops: 10\n      priority: 1\n##! test\n#! start_game\n#! assert_str_condition unlit device.shot_groups.indy_lanes.common_state\n#! hit_and_release_switch indy_i\n#! hit_and_release_switch indy_n\n#! hit_and_release_switch indy_d\n#! hit_and_release_switch indy_y\n#! advance_time_and_run .1\n#! assert_str_condition lit device.shot_groups.indy_lanes.common_state\n#! assert_player_variable 30000 score\n```\n\n----------------------------------------\n\nTITLE: Mixing Absolute and Relative Times in a Show in YAML\nDESCRIPTION: Shows how to combine absolute and relative time values within a single show configuration. This example mixes 'time: 0' with '+1' and '4' values.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/format.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: 0   # plays right away, at 0 seconds\n  # ...\n- time: +1  # plays 1 sec after the previous, 1 sec after show start\n  # ...\n- time: +1  # plays 1 sec after the previous, 2 secs after show start\n  # ...\n- time: 4   # plays 4 secs after show start, 2 secs after the previous\n  # ...\n- time: +1  # plays 1 sec after the previous, 5 secs after show start\n  #...\n```\n\n----------------------------------------\n\nTITLE: Configuring Counter Logic Blocks in YAML\nDESCRIPTION: This code snippet demonstrates how to configure counter logic blocks in a YAML configuration file for Mission Pinball Framework (MPF). It shows examples of defining `count_events`, `count_complete_value`, `starting_count`, and `count_interval` for different counters.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/counters.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\ncounters:\n  the_name_of_this_counter:\n    count_events: my_count_event\n    count_complete_value: 10\n  some_other_counter:\n    count_events: s_my_switch_active\n    starting_count: 50\n    count_interval: 10\n    count_complete_value: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring FAST Watchdog Timeout (YAML)\nDESCRIPTION: This snippet shows how to configure the watchdog timeout for the FAST Pinball controller in the MPF machine configuration file. The `watchdog` setting is in milliseconds.  A value of 0 disables the watchdog timer.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/config.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfast:\n   ports: com3, com4, com5  # or whatever your ports are\n   watchdog: 1000\n```\n\n----------------------------------------\n\nTITLE: Configuring Light with Start Channel and Type\nDESCRIPTION: This snippet illustrates how to configure a light using a start channel and specifying the type of light.  It's used if you have unusual types of lights, such as RGBW LEDs, and you want to define the internal address and number of channels. You need to consult the manual of your platform for details.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/lights.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  led_0:\n    start_channel: 0-0\n    subtype: led\n    type: rgbw\n```\n\n----------------------------------------\n\nTITLE: Conditional Events within a List (YAML)\nDESCRIPTION: This snippet shows how to apply conditions to individual events within a list of events. This allows for more granular control over which events are posted based on various conditions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/event_player.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: base\nevent_player:\n  reenable_nonrecruit_modes:\n    - start_mode_shadowbroker_base\n    - start_mode_n7_assignments\n    - start_mode_overlordlight{device.achievements.collectorship.state!=\"complete\"}\n    - start_mode_arrival{device.achievements.collectorship.state==\"complete\"}\n    - start_mode_shopping{current_player.cash>=1000}\n```\n\n----------------------------------------\n\nTITLE: Slide with Widgets Under \"widgets:\" Section (YAML)\nDESCRIPTION: This snippet shows how to define a slide with widgets nested under a `widgets:` section, allowing for additional slide settings to be defined alongside the widgets.  It defines two slides, *my_slide_1* and *my_slide_2*, with widgets and additional settings like `background_color`, `expire`, and `transition`.  The first slide uses a single widget, while the second uses multiple widgets defined with the dash notation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/slides.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  my_slide_1:\n    background_color: red\n    widgets:\n      type: text\n      text: THIS IS MY SLIDE\n  my_slide_2:\n    widgets:\n      - type: text\n        text: THIS IS ANOTHER SLIDE\n      - type: text\n        y: 20%\n        text: IT HAS MORE THAN 1 WIDGET\n      - type: ellipse\n        color: red\n        width: 200\n        height: 100\n    expire: 2s\n    transition:\n      type: move_in\n      direction: right\n```\n\n----------------------------------------\n\nTITLE: Configuring Sounds with YAML in MPF\nDESCRIPTION: This YAML snippet demonstrates how to configure sound assets in MPF using the `sounds:` section. It includes settings for file name, events triggered when stopped, streaming, bus, volume, priority, max queue time, and ducking.  It shows how to define custom settings for individual sound assets.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sounds.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsounds:\n  extra_ball:\n    file: extra_ball_12753.wav\n    events_when_stopped: extra_ball_callout_finished\n    streaming: false\n    bus: voice\n    volume: 0.5\n    priority: 50\n    max_queue_time: None\n    ducking:\n      target: music\n      delay: 0\n      attack: 0.3 sec\n      attenuation: -18db\n      release_point: 2.0 sec\n      release: 1.0 sec\n  slingshot_01:\n    volume: 0.5\n    max_queue_time: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Blinkenlights in MPF with YAML\nDESCRIPTION: This configuration demonstrates how to define two blinkenlights (`blinkenlight_1` and `blinkenlight_2`) using the `blinkenlights:` section in the machine configuration file. It showcases the usage of `color_duration`, `cycle_duration`, `off_when_multiple`, `light`, and `priority` parameters to control the behavior of the blinkenlights.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/blinkenlights.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblinkenlights:\n  blinkenlight_1:\n    color_duration: 1s\n    off_when_multiple: false\n    light: l_left_ramp_arrow\n    priority: 1000\n  blinkenlight_2:\n    cycle_duration: 1s\n    off_when_multiple: false\n    light: l_right_ramp_arrow\n    priority: 1000\n```\n\n----------------------------------------\n\nTITLE: Providing Random Awards using Random Event Player in MPF\nDESCRIPTION: This snippet configures a random event player to select awards when a ball is held in the scoop. It defines multiple events representing different awards, assigns probabilities to each, and ensures each award is provided before repeating. It requires the ball to be held in the configured scoop.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/mystery_award.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nrandom_event_player:\n  ball_hold_mystery_scoop_held_ball:\n    events:\n      mystery_award_1_event: 30 #numbers show probability of event\n      mystery_award_2_event: 20\n      mystery_award_3_event: 20\n      mystery_award_4_event: 30\n    force_all: true\n```\n\n----------------------------------------\n\nTITLE: Pausing Music Track via track_player in MPF\nDESCRIPTION: This snippet demonstrates how to use the `track_player` config to pause and resume a music track based on MPF events triggered by video playback. The example shows how to configure events to pause the \"music\" track when a video starts and resume it when the video stops. It includes fade-in/fade-out effects for smoother transitions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/tips_tricks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntrack_player:\n  my_video_is_playing:\n    music:\n      action: pause\n      fade: 1 sec\n  my_video_has_stopped:\n    music:\n      action: play\n      fade: 1 sec\n##! test\n#! advance_time_and_run .1\n```\n\n----------------------------------------\n\nTITLE: Event with Parameters Example (YAML)\nDESCRIPTION: This code snippet shows how to configure a keyboard key to trigger an event with associated parameters. When the '4' key is pressed, the 'advance_reel_test' event is posted with the 'reel_name' and 'direction' parameters.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/keyboard.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkeyboard:\n  4:\n    event: advance_reel_test\n    params:\n      reel_name: score_1p_10\n      direction: 1\n```\n\n----------------------------------------\n\nTITLE: Basic Scoring with variable_player in YAML\nDESCRIPTION: This snippet demonstrates how to score points for the current player when a switch is activated using the `variable_player` config section. The `s_your_switch_active` event triggers the addition of 100 points to the player's score.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/scoring/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  s_your_switch_active:\n    score: 100\n```\n\n----------------------------------------\n\nTITLE: Define Widget Styles for Fonts in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define widget styles to manage font sizes and colors globally within an MPF project.  It defines two styles, `text_small` and `text_default`, with different font sizes and colors. This allows for easy modification of font properties across the entire project.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/fonts.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_styles:\n  text_small:\n    font_size: 15\n    color: red\n  text_default:\n    font_size: 21\n    color: blue\n```\n\n----------------------------------------\n\nTITLE: Configuring Switches Using Direct Numbering (P3-ROC)\nDESCRIPTION: This snippet shows how to configure switches connected to SW-16 boards using the calculated internal switch number. The formula for calculation is provided in the documentation. The `number` property in the `switches` section specifies the physical connection to the P3-ROC via an SW-16 board.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/switches_p3_roc.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_switch:\n    number: 0     # SW-16 board at address 0, Bank A, Switch 0\n  my_other_switch:\n    number: 45    # SW-16 board at address 2, Bank B, Switch 5\n```\n\n----------------------------------------\n\nTITLE: Defining a reusable widget in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to define a reusable widget in the `widgets:` section of an MPF config file. It defines a named widget called *laughing_jackal* which is of type *image* using the image *jackal*. This widget can then be added to any slide.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwidgets:\n  laughing_jackal:\n    - type: image\n      image: jackal\n```\n\n----------------------------------------\n\nTITLE: Applying Shot Profiles to Shots in YAML\nDESCRIPTION: This snippet demonstrates how to apply a shot profile to an existing shot within a specific mode. The `my_first_shot` is assigned the `mode2` profile. Unlike the base mode configuration, this mode configuration only specifies the `profile`, inheriting other settings like the `switch` and `show_tokens` from the base configuration. This ensures that when mode2 is active, the `mode2` shot profile is applied to the `my_first_shot`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  my_first_shot:\n    profile: mode2\n```\n\n----------------------------------------\n\nTITLE: Defining the Drain Ball Device in MPF\nDESCRIPTION: This snippet configures the drain ball device. It defines the switch that detects balls in the drain, the coil that ejects balls, and the target device where ejected balls go (`bd_trough`).  The `tags: drain` setting indicates that balls entering this device are considered drained.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_multiple_switches.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_drain:\n    ball_switches: s_drain\n    eject_coil: c_drain_eject\n    eject_targets: bd_trough\n    tags: drain\n```\n\n----------------------------------------\n\nTITLE: Easing Configuration for X Position Animation\nDESCRIPTION: This configuration file defines a display, a slide with five text widgets, and animations that control the horizontal position (x) of the widgets using various easing functions. It uses 'slide_player' to show the slide when the media controller is ready. The easing functions demonstrated include linear, in_out_quad, in_out_elastic, out_bounce, and in_quint.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/easing_config.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config_version=5\ndisplays:\n  default:\n    width: 400\n    height: 300\nslides:\n  slide1:\n    - type: text\n      text: linear (none)\n      y: 90%\n      font_size: 35\n      animations:\n        show_slide:\n          - property: x\n            value: 205\n            duration: 1s\n            easing: linear\n          - property: x\n            value: 0\n            duration: 1s\n            easing: linear\n            repeat: true\n    - type: text\n      text: in_out_quad\n      y: 70%\n      font_size: 35\n      animations:\n        show_slide:\n          - property: x\n            value: 215\n            duration: 1s\n            easing: in_out_quad\n          - property: x\n            value: 0\n            duration: 1s\n            easing: in_out_quad\n            repeat: true\n    - type: text\n      text: in_out_elastic\n      y: 50%\n      font_size: 35\n      animations:\n        show_slide:\n          - property: x\n            value: 185\n            duration: 1s\n            easing: in_out_elastic\n          - property: x\n            value: 0\n            duration: 1s\n            easing: in_out_elastic\n            repeat: true\n    - type: text\n      text: out_bounce\n      y: 30%\n      font_size: 35\n      animations:\n        show_slide:\n          - property: x\n            value: 220\n            duration: 1s\n            easing: out_bounce\n          - property: x\n            value: 0\n            duration: 1s\n            easing: out_bounce\n            repeat: true\n    - type: text\n      text: in_quint\n      y: 10%\n      font_size: 35\n      animations:\n        show_slide:\n          - property: x\n            value: 275\n            duration: 1s\n            easing: in_quint\n          - property: x\n            value: 0\n            duration: 1s\n            easing: in_quint\n            repeat: true\nslide_player:\n  init_done: slide1\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Transition in slide_player YAML\nDESCRIPTION: This example shows how to configure a slide transition using the `slide_player` in a YAML configuration file. When the `left_ramp_hit` event occurs, the `slide1` slide will be displayed with a 'push' transition from the right, lasting 2 seconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/transitions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  left_ramp_hit:\n    slide1:\n      transition:\n        type: push\n        duration: 2s\n        direction: right\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulse and Hold Power for Coils (FAST)\nDESCRIPTION: This snippet demonstrates configuring both `default_pulse_power` and `default_hold_power` for a coil. The coil will fire at the pulse power for the pulse duration, then drop to the hold power.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/drivers.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  some_coil:\n    number: 1-3\n    default_pulse_ms: 30\n    default_pulse_power: 0.5\n    default_hold_power: 0.25\n```\n\n----------------------------------------\n\nTITLE: Defining Trough Eject Coil in MPF Configuration (YAML)\nDESCRIPTION: This snippet defines the coil used to eject balls from the trough.  The 'number' value corresponds to the coil's connection to the control system. The 'default_pulse_ms' sets the initial pulse time for the coil, which may need adjustment based on hardware and machine behavior. Adjusting this value may be needed to ensure proper ejection of balls.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_mechanical.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_trough_eject:\n    number: 4\n    default_pulse_ms: 20\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration to Set Show Speed\nDESCRIPTION: This YAML snippet demonstrates how to set the playback speed of a show in the `show_player` section. It modifies the previous configuration to include a `speed` setting under the `attract_light_show` entry. This plays the light show at 4x the speed.\nRequirements: A show player configuration section needs to already exist.\nExpected outcome: The light show plays four times faster than the show's defined durations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/17_add_lights_leds.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: test_mode\n#config_version=5\nshow_player:\n  mode_attract_started:\n    attract_display_loop:\n      speed: 1\n    attract_light_show:\n      speed: 4\n```\n\n----------------------------------------\n\nTITLE: Set Default Source Device - YAML\nDESCRIPTION: Sets the `default_source_device` in the `playfields:` section to the plunger device. This tells MPF that the plunger lane is the default device for introducing new balls into play. The value is set to the name of the plunger device, such as `bd_plunger`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/mechanical_with_switch.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Add Plunger Ball Device - YAML\nDESCRIPTION: Adds a plunger as a ball device to the `ball_devices:` section of the machine config. It specifies the ball switch associated with the plunger lane and sets `mechanical_eject` to `true` since it's a spring-powered plunger.  The device is named `bd_plunger` and the `ball_switches` entry will be a single switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/mechanical_with_switch.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    mechanical_eject: true\n```\n\n----------------------------------------\n\nTITLE: Sound Player Configuration Example in YAML\nDESCRIPTION: This YAML snippet shows an example of how to configure the `sound_player` section to play and stop sounds based on game events. It demonstrates how to play a song when the attract mode starts and stop it when it ends, as well as how to play a 'zap' sound when a slingshot is hit, while blocking the event from lower-priority modes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sound_player.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nsound_player:\n  mode_attract_started:\n    song_01:\n      action: play\n      loops: -1\n  mode_attract_stopped:\n    song_01:\n      action: stop\n  slingshot_hit:\n    zap:\n      block: true  # \"blocks\" this event from being passed to sound player sections in lower-priority modes\n```\n\n----------------------------------------\n\nTITLE: Configuring Machine-Wide Keyboard Events (YAML)\nDESCRIPTION: This YAML snippet shows how to configure keyboard events in the machine-wide config file to start and stop `mode2`. The keys `n` and `m` are configured to trigger the `mode2_start` and `mode2_stop` events respectively.  It also includes the `modes` section, showing how `mode2` is added.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmodes:\n  - base\n  - mode2\n\n...\n\nkeyboard:  # existing keyboard entries not shown.\n  n:\n    event: mode2_start\n  m:\n    event: mode2_stop\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Timers with Control Events (YAML)\nDESCRIPTION: This example showcases the configuration of two timers, `mb_intro_timer` and `money_bags_timer`, with different settings and control events. The `mb_intro_timer` starts when the `mode_money_bags_started` event is posted, while the `money_bags_timer` starts when the intro timer completes and can be modified by other events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/timers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\ntimers:\n  mb_intro_timer:\n    start_value: 3\n    end_value: 0\n    direction: down\n    control_events:\n      - action: start\n        event: mode_money_bags_started\n  money_bags_timer:\n    start_value: 15\n    end_value: 0\n    direction: down\n    tick_interval: 1.25s\n    control_events:\n      - action: start\n        event: timer_mb_intro_timer_complete\n      - action: add\n        event: money_bags_advertise_flashing_hit\n        value: 5\n      - action: stop\n        event: logicblock_money_bags_counter_complete\n```\n\n----------------------------------------\n\nTITLE: Configuring a Drop Target in MPF with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a single drop target within the Mission Pinball Framework (MPF). It defines the necessary switches and coils, and then links them to the drop target device using the `switch` and `reset_coil` parameters. A knockdown coil is also defined.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/targets/drop_targets/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_drop_target:\n    number:\ncoils:\n  c_reset_drop_target:\n    number:\n  c_knock_down_coil:\n    number:\ndrop_targets:\n  d_drop_target:\n    switch: s_drop_target\n    reset_coil: c_reset_drop_target\n```\n\n----------------------------------------\n\nTITLE: Complete Plunger Configuration\nDESCRIPTION: This is a complete machine configuration example that includes switches, coils, ball devices (trough and plunger), and playfield configuration for a standard coil-fired plunger setup ejecting directly to the playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/auto_manual.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_plunger_lane:\n    number: 2-6\n  s_launch_button:\n    number: 1-5\n  s_trough1:\n    number: 3-1\n  s_trough2:\n    number: 3-2\n  s_trough3:\n    number: 3-3\n  s_trough4:\n    number: 3-4\n  s_trough_jam:\n    number: 3-5\ncoils:\n  c_plunger:\n    number: 2-1\n    default_pulse_ms: 20\n  c_trough_eject:\n    number: 3-1\n    default_pulse_ms: 20\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    eject_coil: c_plunger\n    mechanical_eject: true\n    player_controlled_eject_event: s_launch_button_active\n    eject_timeouts: 3s\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: MPF Configuration Test Sequence in YAML\nDESCRIPTION: This YAML code defines a test sequence for validating the lane shot configuration in MPF.  The sequence starts the game and the mode, then simulates hitting various lane switches, asserting that the correct lights flash and change color, and that the correct text is displayed on the top slide.  The sequence also tests rotating the lanes using the flipper buttons, and verifies that the lanes reset correctly when all lanes are lit.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/shots/integrate_shots_with_shows_lights_sounds_widgets_or_slides.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! test\n#! start_game\n#! start_mode my_mode\n#! assert_light_color l_outlane_left off\n#! assert_light_color l_inlane_left off\n#! assert_light_color l_inlane_right off\n#! assert_light_color l_outlane_right off\n#! hit_and_release_switch s_outlane_left\n#! advance_time_and_run .1\n#! assert_light_flashing gi_left_sling red\n#! assert_light_color gi_right_sling off\n#! assert_light_color l_outlane_left purple\n#! assert_light_color l_inlane_left off\n#! assert_light_color l_inlane_right off\n#! assert_light_color l_outlane_right off\n#! assert_text_on_top_slide \"Outlane left lit\"\n#! advance_time_and_run 2\n#! assert_light_color gi_left_sling off\n#! hit_and_release_switch s_outlane_right\n#! hit_and_release_switch s_inlane_left\n#! advance_time_and_run .1\n#! assert_light_flashing gi_left_sling red .4\n#! assert_light_flashing gi_right_sling red .4\n#! assert_light_color l_outlane_left purple\n#! assert_light_color l_inlane_left purple\n#! assert_light_color l_inlane_right off\n#! assert_light_color l_outlane_right purple\n#! assert_text_on_top_slide \"Outlane left lit\"\n#! assert_text_on_top_slide \"Inlane left lit\"\n#! assert_text_on_top_slide \"Outlane right lit\"\n#! post s_flipper_left_active\n#! advance_time_and_run .1\n#! assert_light_color l_outlane_left purple\n#! assert_light_color l_inlane_left off\n#! assert_light_color l_inlane_right purple\n#! assert_light_color l_outlane_right purple\n#! assert_text_on_top_slide \"Outlane left lit\"\n#! assert_text_on_top_slide \"Inlane right lit\"\n#! assert_text_on_top_slide \"Outlane right lit\"\n#! hit_and_release_switch s_inlane_left\n#! advance_time_and_run .1\n#! assert_light_flashing l_outlane_left green .4\n#! assert_light_flashing l_inlane_left green .4\n#! advance_time_and_run 1\n#! assert_light_color l_outlane_left off\n#! assert_light_color l_inlane_left off\n#! assert_light_color l_inlane_right off\n#! assert_light_color l_outlane_right off\n#! assert_text_not_on_top_slide \"Outlane left lit\"\n#! assert_text_not_on_top_slide \"Inlane right lit\"\n#! assert_text_not_on_top_slide \"Inlane left lit\"\n#! assert_text_not_on_top_slide \"Outlane right lit\"\n```\n\n----------------------------------------\n\nTITLE: Coil Player Configuration Example YAML\nDESCRIPTION: This example demonstrates how to configure the coil player to pulse coil_1 when the `some_event` is posted and enable coil_2 at 50% power when the `some_other_event` is posted. It showcases both the express and full configuration options.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/coil_player.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncoil_player:\n  some_event: coil_1\n  some_other_event:\n    coil_2:\n      action: enable\n      hold_power: .5\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Show with Two Steps in YAML\nDESCRIPTION: This example show demonstrates a basic show configuration with two steps. The first step sets the color of 'led1' to 'red' at time 0. The second step turns 'led1' off one second later. The show configuration uses YAML format.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/format.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: 0\n  lights:\n    led1: red\n- time: +1\n  lights:\n    led1: off\n- time: +1\n```\n\n----------------------------------------\n\nTITLE: autofire_coils Configuration with coil_overwrite YAML\nDESCRIPTION: This example demonstrates how to use the `coil_overwrite` setting to modify the pulse time of an autofire coil. It defines a switch and coil for a left slingshot and then creates an autofire coil configuration named `stronger_left_sling` that increases the `pulse_ms` of the coil from its default value.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/autofire_coils.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_left_sling:\n    number: 1\ncoils:\n  c_left_sling:\n    number: 1\n    default_pulse_ms: 10ms\nautofire_coils:\n  stronger_left_sling:\n    coil: c_left_sling\n    switch: s_left_sling\n    coil_overwrite:\n      pulse_ms: 20ms\n```\n\n----------------------------------------\n\nTITLE: Configure Lane Change Mode with Shots in MPF\nDESCRIPTION: This code snippet configures a mode for lane changes, defining shots for each lane. It assumes the existence of switches defined as `s_top_lane_1` through `s_top_lane_4`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/rollover_lanes_with_lane_change.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmode:\n  start_events: start_mode_top_lanes\n  stop_events: stop_mode_top_lanes, ball_will_end\n\nshots:\n  top_lane_i:\n    switch: s_top_lane_1\n  top_lane_n:\n    switch: s_top_lane_2\n  top_lane_d:\n    switch: s_top_lane_3\n  top_lane_y:\n    switch: s_top_lane_4\n```\n\n----------------------------------------\n\nTITLE: Configuring a Simple Skill Shot Mode in YAML\nDESCRIPTION: This YAML configuration defines a simple skill shot mode with three lanes (`skill_l`, `skill_m`, `skill_r`).  The mode starts when a ball is started and stops upon success or failure of the skill shot. It includes shot configurations, shot groups, profiles, variable player settings, timers, and a state machine to manage the skill shot's success or failure based on which shot is hit and when. The skill_shot_timeout timer provides a 5-second window after the plunger eject for a successful shot.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/skill_shot.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmode:\n  start_events: ball_started\n  stop_events:\n    - skill_success\n    - skill_failed\n  priority: 500\nshots:\n  skill_l:\n    switch: s_lane_l\n    profile: skill_shot_profile\n    advance_events: mode_skill_shot_started        # replace \"skill_shot\" with your mode name\n    show_tokens:\n      light: l_lane_l\n  skill_m:\n    switch: s_lane_m\n    profile: skill_shot_profile\n    show_tokens:\n      light: l_lane_m\n  skill_r:\n    switch: s_lane_r\n    profile: skill_shot_profile\n    show_tokens:\n      light: l_lane_r\nshot_groups:\n  skill_shot:\n    shots: skill_l, skill_m, skill_r\n    rotate_left_events: s_left_flipper_active\n    rotate_right_events: s_right_flipper_active\nshot_profiles:\n  skill_shot_profile:\n    states:\n      - name: unlit\n        show: off\n      - name: flashing\n        show: flash_color\n        show_tokens:\n          color: red\n        speed: 4\n      - name: lit\n        show: on\n    loop: true\nvariable_player:\n  skill_success:\n    score: 42\ntimers:\n  skill_shot_timeout:\n    start_value: 0\n    end_value: 5     # set the timeout of your skill shot here\n    direction: up\n    tick_interval: 1s\n    start_running: false\n    control_events:\n      - action: start\n        event: balldevice_plunger_lane_ball_eject_success  # replace \"plunger_lane\" with the name of your plunger device\nstate_machines:\n  skill_shot_success:\n    debug: true\n    states:\n      start:\n        label: Skill shot ready\n      success:\n        label: Skill successful\n        events_when_started: skill_success\n      failed:\n        label: Skill failed\n        events_when_started: skill_failed\n    transitions:\n      - source: start\n        target: success\n        events: skill_shot_flashing_hit\n      - source: start\n        target: failed\n        events: skill_shot_unlit_hit, timer_skill_shot_timeout_complete\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Sound\nDESCRIPTION: This snippet shows how to define a basic sound in the machine configuration file, including specifying the sound file and volume.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/variations.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsounds:\n  triangle_01:\n    file: 13147__looppool__triangle1.wav\n    volume: 0.7\n```\n\n----------------------------------------\n\nTITLE: Configuring a Ball Save in YAML\nDESCRIPTION: This YAML configuration demonstrates how to define a ball save in MPF. It includes settings for active time, hurry-up time, and enabling the center post during the ball save.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/ball_saves/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nball_saves:\n  random_ball_save:\n    active_time](5s\n    hurry_up_time)\ncenter_post\n```\n\n----------------------------------------\n\nTITLE: Configuring Ramp Switches and Sequence Shots in YAML\nDESCRIPTION: This snippet configures two switches for a ramp: an entry switch and a success switch. It then uses sequence_shots to detect when both switches are hit in the correct order, indicating a successful ramp shot. The sequence_timeout sets the maximum time allowed between hitting the entry and success switches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/loops.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_ramp_entry:\n    number: 1\n  s_ramp_success:\n    number: 2\nsequence_shots:\n  ramp:\n    switch_sequence: s_ramp_entry, s_ramp_success\n    sequence_timeout: 3s\n```\n\n----------------------------------------\n\nTITLE: Base Mode Class Definition in Python\nDESCRIPTION: This code snippet demonstrates the minimal code required in a Python file to define a base mode class for use in MPF. It imports the Mode class from mpf.core.mode and creates a subclass named Base, inheriting from the Mode class.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/mode_code.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom mpf.core.mode import Mode\n\nclass Base(Mode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Ending the Skillshot Mode\nDESCRIPTION: This snippet uses the `event_player` to end the skillshot mode when a skillshot lane is hit or any other switch on the playfield is activated. A short delay is added to the playfield activation event to ensure the score is awarded before the mode ends.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_lane_change.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nevent_player:\n  skillshot_hit: stop_mode_skillshot\n  playfield_active: stop_mode_skillshot|1s\n```\n\n----------------------------------------\n\nTITLE: Specifying Duration for the Final Show Step in YAML\nDESCRIPTION: Shows how to define the duration for the final step in a show when using time-based steps.  This ensures the final state of the show is held for the specified duration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/format.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: 0\n  lights:\n    led1: red\n- time: +1\n  lights:\n    led1: green\n- time: +1\n  duration: 1\n  lights:\n    led1: blue\n```\n\n----------------------------------------\n\nTITLE: Disable Start Button for Adding Players\nDESCRIPTION: These YAML snippets disable the start button for adding players during mode selection. It modifies the game configuration to prevent adding players via the start button and uses event players in the attract and game_running modes to control the start button's behavior.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/mode_selection.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Add the following to the game section of your machine's config.yaml\n# This will disable the start button for adding players\ngame:\n  add_player_switch_tag: add_player\n```\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: attract\n# Add this to your attract.yaml\nevent_player:\n  s_start_active: sw_add_player\n```\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: game_running\n# Have something in your base mode to trigger another mode (e.g. the carousel above)\n# and in that mode have the following (to reenable the start button):\nevent_player:\n  s_start_active: sw_add_player\n```\n\n----------------------------------------\n\nTITLE: Configuring the Plunger Eject Coil (YAML)\nDESCRIPTION: This snippet configures the coil responsible for ejecting the ball from the plunger lane. It includes the coil number and a default pulse time (in milliseconds). The `default_pulse_ms` value can be adjusted to optimize ball launch force.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/coil_fired.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_plunger:\n    number: 2-1\n    default_pulse_ms: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Ball Save Mode (YAML)\nDESCRIPTION: This snippet configures a ball save mode that starts when the main mode ends and may include a show player that flashes the shoot again light. It sets up a ball save to prevent the ball from ending and provides visual feedback to the player.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/fake_ball_save.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmode:\n  start_events:\n    - mode_end_MODE_NAME_started\n  stop_events:\n    - mode_end_MODE_NAME_stopped\n  priority: 9100\n\nball_saves:\n  end_mode_ball_save:\n    enable_events: mode_ball_save_end_mode_started\n    auto_launch: false\n    balls_to_save: 1\n    debug: true\n\nshow_player:\n  ball_save_end_mode_ball_save_enabled:\n    fast_flash_show:\n      key: end_modes_ball_save_flash\n      speed: 3\n      show_tokens:\n        leds: l_shoot_again\n        color: red\n      action: play\n      priority: 9999\n  mode_ball_save_end_mode_stopping:\n    end_modes_ball_save_flash:\n      action: stop\n```\n\n----------------------------------------\n\nTITLE: Animating Widget Based on Player Variable (YAML)\nDESCRIPTION: This YAML snippet demonstrates animating a widget based on a player variable. The `player_loops` animation is triggered when the player variable \"loops\" changes.  The widget's `y` position is set to the new value of the `loops` variable.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  slide1:\n    widgets:\n      - type: text\n        text: I'M GOING TO MOVE\n        x: 50\n        y: 50\n    animations:\n      player_loops:           # this is posted when the player variable \"loops\" changes\n        property: y\n        value: (value)        # this is the value of loops\n```\n\n----------------------------------------\n\nTITLE: Configure Flipper Devices with YAML in MPF\nDESCRIPTION: This YAML configuration defines flipper devices in MPF, linking them to specific coils and switches. The `flippers` section specifies the `main_coil`, `hold_coil`, and `activation_switch` for each flipper. The example also includes a playfield configuration for completeness and pre-existing switch and coil configurations using commented-out YAML.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n#! switches:\n#!   s_left_flipper:\n#!     number: 0\n#!   s_right_flipper:\n#!     number: 1\n#! coils:\n#!   c_flipper_left_main:\n#!     number: 0\n#!   c_flipper_left_hold:\n#!     number: 1\n#!     allow_enable: true\n#!   c_flipper_right_main:\n#!     number: 2\n#!   c_flipper_right_hold:\n#!     number: 3\n#!     allow_enable: true\nplayfields:\n  playfield:\n    tags: default\n    default_source_device: None  # use None in steps before 8\n\nflippers:\n  left_flipper:\n    main_coil: c_flipper_left_main\n    hold_coil: c_flipper_left_hold\n    activation_switch: s_left_flipper\n  right_flipper:\n    main_coil: c_flipper_right_main\n    hold_coil: c_flipper_right_hold\n    activation_switch: s_right_flipper\n```\n\n----------------------------------------\n\nTITLE: Enabling Serial LEDs on PD-LED Board in p_roc section YAML\nDESCRIPTION: This snippet enables serial LEDs on a PD-LED board with address 4 in the `p_roc` section of the config. It enables all LPD880x and WS281x chains.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/leds.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\np_roc:\n  pd_led_boards:\n    4:\n      use_lpd880x_0: true\n      use_lpd880x_1: true\n      use_lpd880x_2: true\n      use_ws281x_0: true\n      use_ws281x_1: true\n      use_ws281x_2: true\n```\n\n----------------------------------------\n\nTITLE: SmartMatrix RGB DMD Configuration Example (YAML)\nDESCRIPTION: This configuration snippet demonstrates how to configure a SmartMatrix RGB DMD device in an MPF machine configuration file. It defines the hardware as `smartmatrix`, specifies the serial port and baud rate for the SmartMatrix device, configures a display with a specific width and height, and sets the hardware brightness for the RGB DMD.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/smartmatrix.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#config_version=5\nhardware:\n  rgb_dmd: smartmatrix\nsmartmatrix:\n  my_smartmatrix:\n    port: com4\n    baud: 4000000\ndisplays:\n  dmd:\n    width: 128\n    height: 32\nrgb_dmds:\n  my_smartmatrix:\n    hardware_brightness: .5\n```\n\n----------------------------------------\n\nTITLE: Define Rewards for Completing Rollover Lanes in MPF\nDESCRIPTION: This code defines rewards for completing the rollover lanes, awarding the player 10,000 points and increasing the bonus multiplier.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/rollover_lanes_with_lane_change.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvariable_player:\n  top_lane_group_hit_complete:\n    score: 10000\n    bonus_multiplier: 1\n```\n\n----------------------------------------\n\nTITLE: Configure Drain Ball Device in YAML\nDESCRIPTION: This code snippet shows how to configure the drain ball device (`bd_drain`) in the `ball_devices:` section. It defines the switch that detects balls in the drain, the coil that ejects balls, the target ball device (the trough), a tag indicating a drain event, and an eject timeout.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_one_switch.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nball_devices:\n  bd_drain:\n    ball_switches: s_drain\n    eject_coil: c_drain_eject\n    eject_targets: bd_trough\n    tags: drain\n    eject_timeouts: 4s\n```\n\n----------------------------------------\n\nTITLE: Configuring OPP Coil Hold Power\nDESCRIPTION: This snippet shows how to configure the hold power for an OPP coil. The `default_hold_power` parameter is used to specify the percentage of power to use when holding the coil. The value ranges from 0.0 to 1.0, where 0.0 is 0% and 1.0 is 100%. The period for OPP is fixed at 16ms.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/drivers.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil:\n    number: 0-3\n    default_pulse_ms: 32\n    default_hold_power: 0.5\n```\n\n----------------------------------------\n\nTITLE: Define Start Button Switch in MPF (YAML)\nDESCRIPTION: This snippet defines a switch named `s_start` for the start button, assigning it to hardware number 11. This is the initial step in configuring the start button for your pinball machine.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/9_start_button.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_start:\n    number: 11\n```\n\n----------------------------------------\n\nTITLE: Define Drain and Plunger Switches in MPF (YAML)\nDESCRIPTION: This snippet configures the drain and plunger switches in the `switches:` section of the MPF machine configuration file. The `number` attribute corresponds to the actual switch number connected to the control system.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_drain:\n    number: 01\n  s_plunger:\n    number: 02\n```\n\n----------------------------------------\n\nTITLE: Running MPF with a config file from a specific path\nDESCRIPTION: This command starts the MPF game engine and loads the configuration file from the specified absolute path. It is useful when the config file is not located in the default location relative to the machine folder.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/game.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ mpf game -c /home/brian/pinball/demo_man/config/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Text Strings in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a text string named `greeting` within the `text_strings:` section. It then shows how to use this text string in a slide of type `text`. The `(ball)` part suggests the `ball` variable will be dynamically replaced at runtime.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/text_strings.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntext_strings:\n  greeting: HELLO PLAYER. THIS IS YOUR BALL (ball)\nslides:\n  slides_with_text:\n    - type: text\n      text: $greeting\n```\n\n----------------------------------------\n\nTITLE: Example of Serial Port Permission Error Message\nDESCRIPTION: This snippet shows an example of the error message that occurs when a user does not have permissions to access a serial port on Linux. This typically occurs when connecting to FAST hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/troubleshooting.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nserial.serialutil.SerialException: [Errno 13] could not open port /dev/ttyUSB1: [Errno 13] Permission denied: '/dev/ttyUSB1'\n```\n\n----------------------------------------\n\nTITLE: Configuring Shots for Sequential Drop Targets in MPF\nDESCRIPTION: Defines shots for each drop target, including the switches, lights, and shot profiles.  It uses `advance_events` to advance the shots when the correct target is hit, and `reset_events` to reset the entire sequence. The configuration also includes `show_tokens` to map LED lights to the shots.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/sequential_drop_banks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmode:\n  start_events: start_mode_sequential_drops\n  stop_events: stop_mode_sequential_drops\n  priority: 200\n\nshots:\n  drop_1:\n    advance_events: advance_drop_1, drop_1_lit_hit\n    reset_events: reset_drop_sequence\n    switch: s_drop_1\n    profile: drop_sequence\n    show_tokens:\n      led: l_drop_1\n  drop_2:\n    advance_events: drop_1_lit_hit, drop_2_lit_hit\n    reset_events: reset_drop_sequence\n    switch: s_drop_2\n    profile: drop_sequence\n    show_tokens:\n      led: l_drop_2\n  drop_3:\n    advance_events: drop_2_lit_hit, drop_3_lit_hit\n    reset_events: reset_drop_sequence\n    switch: s_drop_3\n    profile: drop_sequence\n    show_tokens:\n      led: l_drop_3\n  drop_4:\n    advance_events: drop_3_lit_hit\n    reset_events: reset_drop_sequence\n    switch: s_drop_4\n    profile: drop_sequence\n    show_tokens:\n      led: l_drop_4\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Settings in YAML\nDESCRIPTION: This YAML snippet shows how to configure basic game settings such as the number of balls per game and the maximum number of players. These parameters control the overall game experience.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/game.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngame:\n  balls_per_game: 3\n  max_players: 4\n```\n\n----------------------------------------\n\nTITLE: Configure Info Lights in MPF YAML\nDESCRIPTION: This code snippet demonstrates how to configure the `info_lights` section in a machine configuration file. It maps various game states such as match numbers, ball numbers, player numbers, tilt, and game over to specific lights defined in the `lights:` section. This allows the machine to automatically display game status information using physical lights.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/info_lights.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninfo_lights:\n  match_00:\n    light: match00\n  match_10:\n    light: match10\n  match_20:\n    light: match20\n  match_30:\n    light: match30\n  match_40:\n    light: match40\n  match_50:\n    light: match50\n  match_60:\n    light: match60\n  match_70:\n    light: match70\n  match_80:\n    light: match80\n  match_90:\n    light: match90\n  ball_1:\n    light: bip1\n  ball_2:\n    light: bip2\n  ball_3:\n    light: bip3\n  ball_4:\n    light: bip4\n  ball_5:\n    light: bip5\n  player_1:\n    light: player1\n  player_2:\n    light: player2\n  tilt:\n    light: tilt\n  game_over:\n    light: gameOver\n```\n\n----------------------------------------\n\nTITLE: Mounting SD card Linux partition with FUSE-ext2 on MacOS\nDESCRIPTION: This command mounts the Linux root partition of the SD card (partition 3 in this example) on MacOS using FUSE-ext2.  It requires sudo privileges and may need adjustments to the disk device depending on your system configuration.  The root partition is mounted at /Volumes/SD.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/mpf-spike-bridge.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo fuse-ext2 /dev/disk2s3 /Volumes/SD -o force\n```\n\n----------------------------------------\n\nTITLE: Setting Device-Specific Default Platform in MPF\nDESCRIPTION: This snippet demonstrates how to set a default platform for a specific type of device, overriding the machine-wide default. In this example, the default platform is P-ROC, but LEDs are configured to use FadeCandy.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/platform.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: p_roc\n  driverboards: pdb\n  lights: fadecandy\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Spinner\nDESCRIPTION: This snippet demonstrates the basic configuration of a spinner in MPF. It defines a switch associated with the spinner and the spinner itself, specifying the switch and the active time in milliseconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/spinners.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_my_spinner:\n    number: 42    # number depends on your platform\n\nspinners:\n  basic_spinner:\n    switch: s_my_spinner\n    active_ms: 500\n```\n\n----------------------------------------\n\nTITLE: Configuring Lights with YAML\nDESCRIPTION: This YAML snippet configures individual lights by specifying their number in the format 'osc_channel-number', which corresponds to the LED index connected to the given FadeCandy board. Each light's 'number' defines its position in the chain for control. This configuration is used by MPF to control the lights connected to the FadeCandy boards.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fadecandy/index.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_led0_0:\n    number: 0-0    # first LED on connector 0 on board 0\n  l_led1_0:\n    number: 1-0    # first LED on connector 1 on board 0\n  l_led1_1:\n    number: 1-1    # second LED on connector 1 on board 0\n  l_led7_20:\n    number: 7-20    # twentyth LED on connector 7 on board 0\n  l_led8_0:\n    number: 8-0    # first LED on connector 0 on board 1\n  l_led8_1:\n    number: 8-63    # last LED on connector 1 on board 1\n  l_led17_1:\n    number: 17-1    # second LED on connector 1 on board 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Matrix Switches in MPF (YAML)\nDESCRIPTION: This example shows how to configure matrix switches in MPF for a WPC machine. The `number` field corresponds to the switch number from the machine's operator's manual, prefixed with 's'.  The switch number is the column and row number. Example: 's41' represents column 4, row 1.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machines/wpc.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_left_slingshot:\n    number: s41\n  s_right_jet:\n    number: S45\n```\n\n----------------------------------------\n\nTITLE: Install pyusb for PIN2DMD\nDESCRIPTION: This command installs the pyusb library, which is required for MPF to communicate with the PIN2DMD. This uses pip, the Python package installer, to install the pyusb package from the Python Package Index (PyPI).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pin2dmd/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip3 install pyusb\n```\n\n----------------------------------------\n\nTITLE: Advance Lit Shot on Timer Stop\nDESCRIPTION: This code uses the event player to advance the profile of the lit shot when the rotation timer stops. Conditional events are used to selectively post advance events only to the shot that's currently in the 'on' state (state number 1). This ensures only the currently lit target starts flashing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_auto_rotate.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: skillshot_with_auto_rotate\nevent_player:\n  timer_skillshot_rotate_stopped:\n    - advance_skillshot_1{device.shots.skillshot_drop_1.state==1}\n    - advance_skillshot_2{device.shots.skillshot_drop_2.state==1}\n    - advance_skillshot_3{device.shots.skillshot_drop_3.state==1}\n    - advance_skillshot_4{device.shots.skillshot_drop_4.state==1}\n    - advance_skillshot_5{device.shots.skillshot_drop_5.state==1}\n```\n\n----------------------------------------\n\nTITLE: Basic Show Configuration without Tokens (YAML)\nDESCRIPTION: This show demonstrates a basic MPF show configuration without using tokens. It sets the color of 'led_01' to red at time 0 and turns it off at time 1. This configuration is hard-coded and only works for 'led_01' cycling between red and off.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: 0\n  lights:\n    led_01: red\n- time: 1\n  lights:\n    led_01: off\n```\n\n----------------------------------------\n\nTITLE: Counter Scoring Configuration in MPF (YAML)\nDESCRIPTION: This configuration uses a counter to manage the score multiplier. The `my_counter` increments on `event1_to_increase_multiplier`, `event2_to_increase_multiplier`, and `event3_to_increase_multiplier`. The `variable_player` section updates the player's score based on the counter's current value. Unlike accruals, counters can be incremented multiple times by the same event. The mode requires the `ball_started` event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/scoring_based_on_logic_blocks.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: test\nmode:\n  start_events: ball_started\ncounters:\n  my_counter:\n    count_events:\n      - event1_to_increase_multiplier\n      - event2_to_increase_multiplier\n      - event3_to_increase_multiplier\n    events_when_complete: go_bumper\n    reset_on_complete: false\nvariable_player:\n  some_score_event:\n    score: 10000 * (device.counters.my_counter.value + 1)\n##! test\n#! # no progress\n#! start_game\n#! assert_mode_running test\n#! post some_score_event\n#! assert_player_variable 10000 score\n#! stop_game\n#! # some progress\n#! start_game\n#! assert_mode_running test\n#! post event1_to_increase_multiplier\n#! post some_score_event\n#! assert_player_variable 20000 score\n#! stop_game\n#! # some progress\n#! start_game\n#! assert_mode_running test\n#! post event3_to_increase_multiplier\n#! post event3_to_increase_multiplier\n#! post some_score_event\n#! assert_player_variable 30000 score\n#! stop_game\n#! # more progress\n#! start_game\n#! assert_mode_running test\n#! post event3_to_increase_multiplier\n#! post event2_to_increase_multiplier\n#! post some_score_event\n#! assert_player_variable 30000 score\n#! stop_game\n#! # full progress\n#! start_game\n#! assert_mode_running test\n#! post event3_to_increase_multiplier\n#! post event2_to_increase_multiplier\n#! post event1_to_increase_multiplier\n#! post some_score_event\n#! assert_player_variable 40000 score\n#! stop_game\n```\n\n----------------------------------------\n\nTITLE: Configuring Plunger Coil in YAML\nDESCRIPTION: This snippet defines the coil for the plunger lane eject. The `number` needs to be set according to the control system connected to the coil. The `default_pulse_ms` attribute specifies the default pulse time for the coil, which can be adjusted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/auto_manual.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_plunger:\n    number: 2-1\n    default_pulse_ms: 20\n```\n\n----------------------------------------\n\nTITLE: Bash Script for Power Button Event Handling (Linux)\nDESCRIPTION: This script configures the acpid daemon to handle power button events on Linux systems.  It defines an action to execute the `poweroff` command when a power button event is detected.  The script requires the `acpid` package to be installed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/finalization/power.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nevent=button[ /]power\naction=/sbin/poweroff\n```\n\n----------------------------------------\n\nTITLE: Example MPF Show in YAML\nDESCRIPTION: This YAML code provides an example of a show that can be used with the above snippets. The show contains multiple steps that turn on and off lights. Show tokens allow for the parameterized control of lights.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/integrating_logic_blocks_and_shows.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n#show_version=5\n- duration: -1\n  lights:\n    (led1): off\n    (led2): off\n    (led3): off\n- duration: -1\n  lights:\n    (led1): (color)\n    (led2): off\n    (led3): off\n- duration: -1\n  lights:\n    (led1): (color)\n    (led2): (color)\n    (led3): off\n- duration: -1\n  lights:\n    (led1): (color)\n    (led2): (color)\n    (led3): (color)\n```\n\n----------------------------------------\n\nTITLE: Setting Card Serial Number and Configuration (Console)\nDESCRIPTION: These commands use the `gen2test.py` utility to set the serial number and configure the wings of the OPP EM Combo board. The first command sets the serial number to 0. The second command applies the configuration from the `opp16o16icfg.py` file. The third command saves the configuration to the board.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/oppcombo/index.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n./gen2test.py --serial 0\n./gen2test.py --config opp16o16icfg.py\n./gen2test.py --save\n```\n\n----------------------------------------\n\nTITLE: Conditional Player Variable Update in YAML\nDESCRIPTION: This snippet demonstrates how to conditionally update a player variable (`ladder_scene_1`) based on the value of another player variable (`current_ladder`). It increments `ladder_scene_1` by 1 only if `current_player.current_ladder` is equal to \"Scene 1\".\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/players.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\nvariable_player:\n  mode_is_complete{current_player.current_ladder==\"Scene 1\"}:\n    ladder_scene_1: 1\n```\n\n----------------------------------------\n\nTITLE: Run MPF with Text UI Disabled in DOS Command Line\nDESCRIPTION: This command runs the Mission Pinball Framework (MPF) with the text user interface (UI) disabled and enables verbose logging. The `-t` option disables the text UI, and the `-b` option enables verbose logging to the console, aiding in debugging configuration files. This assumes that the command is executed from the root directory of the pinball machine project.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_4\n\nLANGUAGE: doscon\nCODE:\n```\n$ mpf -t -b\n```\n\n----------------------------------------\n\nTITLE: Dynamically Create Slides with Slide Player in YAML\nDESCRIPTION: Demonstrates how to create slides dynamically within the slide player configuration. This example shows how *slide_1* is created and populated with a text and rectangle widget when *some_event* is posted. Note that this will override any existing slide named *slide_1*.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/slide_player.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nslide_player:\n  some_event:\n    slide_1:\n      widgets:\n        - type: text\n          text: I AM A TEXT WIDGET\n        - type: rectangle\n          width: 200\n          height: 100\n          color: red\n```\n\n----------------------------------------\n\nTITLE: Right Aligned and Zero-Padded String - Python\nDESCRIPTION: Demonstrates right alignment and padding a string to a length of 10 characters with leading zeros using Python's format string syntax. Assumes a variable named `variable` initialized to 1337.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/text_templates.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n{variable:0>10}\n```\n\nLANGUAGE: text\nCODE:\n```\n\"0000001337\"\n```\n\n----------------------------------------\n\nTITLE: Ball device configuration with reserved tags (trough, home) - YAML\nDESCRIPTION: This snippet shows a ball device configuration with the `trough` and `home` tags. The `trough` tag indicates this is a ball trough, and the `home` tag signifies it's a device where balls rest when the game is not in play. It also defines ball switches, an eject coil, and an eject target for proper ball handling.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/tags.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  mygame_balldevice_trough:\n    ball_switches: mygame_switch_trough_1, mygame_switch_trough_2, mygame_switch_trough_3\n    eject_coil: mygame_coil_trough_eject\n    eject_targets: mygame_balldevice_shooter_lane\n    tags: trough, home\n```\n\n----------------------------------------\n\nTITLE: Config Section with Paths in YAML\nDESCRIPTION: This YAML snippet shows how to specify paths to configuration files within the `config:` section. It loads `machine.yaml` from the `config` directory and `machine.yaml` from the `config/my_game` directory. MPF will attempt to convert relative and absolute paths based on the OS and can handle slashes in either direction.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/config.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- config\\machine.yaml\n- config/my_game/machine.yaml\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration with Variable Value Formatting (YAML)\nDESCRIPTION: This snippet demonstrates how to format a variable value using Python's string formatting mini-language. The ':d' format specifier is used to format the 'current_player.ball' value as a decimal integer.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  player_turn_started:\n    ball_num: #The name of the show to be started upon this event\n      show_tokens:\n        txt: \"{(current_player.ball):d}\"\n```\n\n----------------------------------------\n\nTITLE: Configure Trough Eject Coil in YAML\nDESCRIPTION: This snippet defines the eject coil for the trough.  It specifies the coil's number based on the control system, and sets a default pulse time (default_pulse_ms) in milliseconds which determines how long the coil will be energized to eject a ball. Adjusting this value may be needed for reliable ejection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_opto.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_trough_eject:\n    number: 04\n    default_pulse_ms: 20\n```\n\n----------------------------------------\n\nTITLE: Fully Expanded Player Variable Configuration\nDESCRIPTION: This snippet shows the fully expanded configuration for setting player variables. The `action: add` parameter explicitly specifies that values should be added to existing player variables. This config is only for player variables.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/variable_player.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  some_event:\n    score:\n      int: 1000\n      action: add\n    aliens:\n      int: 1\n      action: add\n    aliens:\n      int: 1\n      action: add\n    bonus:\n      int: 10\n      action: add\n```\n\n----------------------------------------\n\nTITLE: Configuring BCP Connections and Servers in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure BCP connections and servers in the MPF config file. It defines a local display connection and a URL-style server, specifying the host/IP, port, and the BCP client socket type. This setup enables communication between the MPF core and media controllers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/bcp.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbcp:\n  connections:\n    local_display:\n      host: localhost\n      port: 5050\n      type: mpf.core.bcp.bcp_socket_client.BCPClientSocket\n      required: true\n      exit_on_close: true\n  servers:\n    url_style:\n      ip: 127.0.0.1\n      port: 5051\n      type: mpf.core.bcp.bcp_socket_client.BCPClientSocket\n  debug: false\n```\n\n----------------------------------------\n\nTITLE: Using Show Tokens with show_player (YAML)\nDESCRIPTION: This example shows how to use `show_tokens` in the `show_player:` section to dynamically replace token values within a show at runtime. Here, the \"led\" token in the show \"show1\" will be replaced with \"right_inlane\".\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/show_player.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  some_event:\n    show1:\n      show_tokens:\n        led: right_inlane\n```\n\n----------------------------------------\n\nTITLE: Overwriting Coil Settings for a Kickback\nDESCRIPTION: This snippet shows how to overwrite coil settings, specifically `pulse_ms`, for a kickback. The `coil_overwrite` setting allows modifying the default coil behavior only for this specific kickback instance. In this case, the `pulse_ms` is increased to 20ms for the `left_kickback` coil.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/kickbacks.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_kickback:\n    number: 1\ncoils:\n  c_kickback:\n    number: 1\n    default_pulse_ms: 10ms\nkickbacks:\n  left_kickback:\n    coil: c_kickback\n    switch: s_kickback\n    coil_overwrite:\n      pulse_ms: 20ms\n```\n\n----------------------------------------\n\nTITLE: Kivy and Display Configuration for Multiple Screens (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to set up MPF-MC to use multiple screens by extending the Kivy window to span across them. It defines Kivy settings, display configurations, slides, and a slide player to manage the display of content across multiple screens.  The configuration includes settings for window size, positioning, display definitions, and a slide that combines the outputs of multiple displays into a single combined display.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/multiple_screens.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkivy_config:\n  kivy:\n    desktop: 1\n    exit_on_escape: true\n    pause_on_minimize: 0\n    log_dir:\n    window_icon:\n  graphics:\n    borderless: true\n    window_state: visible # visible, hidden, maximized, minimized\n    fbo: hardware # hardware, software, force-hardware\n    fullscreen: false\n    left: 0\n    top: 0\n    width: 3840   # width of display1 + display2\n    height: 1080  # common height (or the maximum of both)\n    maxfps: 30\n    multisamples: 2\n    position: custom # auto, custom\n    show_cursor: true\n    resizable: false\n    rotation: 0\ndisplays:\n  display1:\n    width: 1920\n    height: 1080\n  display2:\n    width: 1920\n    height: 1080\n  combined_display:\n    width: 3840\n    height: 1080\nslides:\n  base_slide:\n    - type: display\n      source_display: display1\n      width: 1920\n      height: 1080\n      x: left\n      anchor_x: left\n    - type: display\n      source_display: display2\n      width: 1920\n      height: 1080\n      x: right\n      anchor_x: right\nslide_player:\n  mc_ready:\n    base_slide:\n      target: combined_display\n##! test\n#! advance_time_and_run .1\n#! assert_slide_on_top base_slide combined_display\n```\n\n----------------------------------------\n\nTITLE: Configuring Shot Groups for Lane Changing in MPF (YAML)\nDESCRIPTION: This example configuration demonstrates how to define shots and group them together in a shot group for lane changing functionality.  It includes switch assignments for each lane, shot definitions that link switches to shots and shows, and a shot group configuration that defines the shots within the group, as well as events for rotating the lanes, resetting the group, and enabling/disabling the group. Required dependencies are defined `shots`, `shot_profiles`, and `shot_groups` config sections. The input is flipper button presses, and the output is the rotation of lit shots.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/shots/shot_group.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nshots:\n  shot_l_outlane:\n    switch: lane_l\n    show_tokens:\n      light: lane_l\n  shot_l_inlane:\n    switch: lane_a\n    show_tokens:\n      light: lane_a\n  shot_r_inlane:\n    switch: lane_n\n    show_tokens:\n      light: lane_n\n  shot_r_outlane:\n    switch: lane_e\n    show_tokens:\n      light: lane_e\nshot_groups:\n  outlanes:\n    shots: shot_l_outlane, shot_l_inlane, shot_r_inlane, shot_r_outlane\n    rotate_left_events: s_flipper_left_active\n    rotate_right_events: s_flipper_right_active\n    reset_events: outlanes_profile_hit_lit_complete\n    enable_events: ball_started\n    disable_events: ball_ending\n```\n\n----------------------------------------\n\nTITLE: Configuring Matrix Switches with P-ROC in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure matrix switches in the machine configuration file. Matrix switches are identified by their column and row numbers, separated by a forward slash. The `number` setting specifies the column and row.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/switches_p_roc.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_switch:\n    number: 0/0    # column 0, row 0\n  my_other_switch:\n    number: 0/1    # column 0, row 1\n  another_switch:\n    number: 3/4    # column 3, row 4\n```\n\n----------------------------------------\n\nTITLE: Configure Drain Ball Device - YAML\nDESCRIPTION: This snippet configures the `bd_drain` ball device in the `ball_devices:` section. It defines the switch used to detect a ball, the coil to eject the ball, and tags to indicate its role as a drain, home, and trough. `eject_timeouts` specifies the maximum time allowed for the ball to eject.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball_no_shooter_lane.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_drain:\n    ball_switches: s_drain\n    eject_coil: c_drain_eject\n    tags: drain, home, trough\n    eject_timeouts: 3s\n```\n\n----------------------------------------\n\nTITLE: Defining Shows in Config File - YAML\nDESCRIPTION: Defines two shows, `flash_red` and `blue_green_cycle`, directly within a config file using the `shows:` section. Each show consists of a sequence of steps that control the color of LEDs at specific times. The example shows how to define show steps with time offsets and light commands.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/config_shows.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshows:\n  flash_red:\n    - time: 0\n      lights:\n        led1: red\n    - time: +1\n      lights:\n        led1: off\n    - time: +1\n  blue_green_cycle:\n    - time: 0\n      lights:\n        led2: blue\n    - time: +1\n      lights:\n        led2: green\n    - time: +1\n```\n\n----------------------------------------\n\nTITLE: Mixed Show Player Configuration YAML\nDESCRIPTION: This snippet demonstrates a combination of basic and advanced show player configurations. 'some_event' triggers 'your_show_name' with default settings, while 'some_other_event' triggers 'another_show' with specific 'speed' and 'sync_ms' settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/show_player.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nshow_player:\n  some_event: your_show_name\n  some_other_event:\n    another_show:\n      speed: 2\n      sync_ms: 500\n```\n\n----------------------------------------\n\nTITLE: Animating Multiple Properties Simultaneously in YAML\nDESCRIPTION: This YAML snippet demonstrates how to animate multiple properties of a text widget simultaneously using the `timing: with_previous` setting. It makes the text grow and shrink while also fading on and off. Duration is specified for each step. The animation is triggered by the `show_slide` event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  slide_1:\n    widgets:\n      - type: text\n        text: MY TEXT\n        color: red\n        font_size: 50\n        animations:\n          show_slide:\n            - property: opacity\n              value: 1\n              duration: .5s\n            - property: font_size\n              value: 100\n              timing: with_previous         # makes this step run at the same time as the previous one\n              duration: .5s                 # specify a duration for each step, even when with_previous\n            - property: opacity\n              value: 0\n              duration: .5s\n              repeat: true\n            - property: font_size\n              value: 50\n              duration: .5s\n```\n\n----------------------------------------\n\nTITLE: Configuring a Servo as a Diverter in MPF\nDESCRIPTION: This code snippet demonstrates how to configure a servo to act as a diverter in MPF. It defines a diverter (d_diverter) and a servo (s_diverter), linking their actions via events.  The servo positions are mapped to diverter activation and deactivation events. The diverter configuration specifies feeder devices and target devices based on the diverter's state.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/diverters/servo_as_diverter.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndiverters:\n  d_diverter:\n    debug: true\n    feeder_devices: bd_trough\n    targets_when_active: playfield\n    targets_when_inactive: bd_target\nservos:\n  s_diverter:\n    number:\n    positions:\n      0.7: diverter_d_diverter_activating\n      0.2: diverter_d_diverter_deactivating\n```\n\n----------------------------------------\n\nTITLE: Configuring FAST Ports on Mac/Linux in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure the COM ports for the FAST Pinball controller in the MPF machine configuration file on Mac or Linux. It specifies the device paths corresponding to the FAST COM ports.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/config.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfast:\n   ports: /dev/tty.usbserial-141B, /dev/tty.usbserial-141C\n```\n\n----------------------------------------\n\nTITLE: Configuring Sound Asset Folders in MPF-MC\nDESCRIPTION: This code snippet shows how to configure the `assets:` section to specify the location of sound files and apply default settings. It defines the `load` behavior as `on_demand` for all sound assets and assigns tracks to sound files based on their folder location. This allows MPF to find and manage sound files correctly.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/basic_setup.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nassets:\n  sounds:\n    default:\n      load: on_demand\n    music:\n      track: music\n    sfx:\n      track: sfx\n    voice:\n      track: voice\n```\n\n----------------------------------------\n\nTITLE: PD-16 Numbering Format\nDESCRIPTION: This snippet illustrates the required format for specifying the coil number when using a PD-16 driver board with P-ROC/P3-ROC. The format consists of an address (A), bank (B) and output number. 'x' represents the board address, 'y' the bank address and 'z' the output number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/drivers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnumber: Ax-By-z\n```\n\n----------------------------------------\n\nTITLE: Configuring GI Lights in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure GI lights in the 'lights' section of an MPF configuration file. Each GI light is defined with a unique name, a number corresponding to its physical connection, and the subtype set to 'gi'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/gis.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  gi01:    # lower backglass\n    number: G01\n    subtype: gi\n  gi02:    # mid backglass and rear playfield\n    number: G02\n    subtype: gi\n  gi03:    # upper left backglass and slings, variable\n    number: G03\n    subtype: gi\n  gi04:    # upper right backglass and Deadworld globe, variable\n    number: G04\n    subtype: gi\n  gi05:    # coin slot lights & side cabinet fire buttons\n    number: G05\n    subtype: gi\n```\n\n----------------------------------------\n\nTITLE: Field Mode Configuration\nDESCRIPTION: This YAML configuration defines the field mode, which is used to consolidate individual field mode behaviors. It specifies start and stop events and suggests including other field mode config files.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/mode_layering.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: field\n# modes/field/config/field.yaml\n\nmode:\n  start_events: start_mode_field\n  stop_events: stop_mode_field\n\nconfig:\n  # add your mode parts here. For instance:\n  # - field_mission_qualifier_shots.yaml\n  # - field_miniwizard_qualifier_shots.yaml\n  # - field_chase_advancement.yaml\n  # - field_dropbank_special.yaml\n```\n\n----------------------------------------\n\nTITLE: Define Coils for Diverter - MPF (YAML)\nDESCRIPTION: This snippet defines the main and hold coils for the diverter mechanism. The `number` specifies the hardware coil number, `default_pulse_ms` sets the initial pulse duration, and `default_hold_power` defines the power to hold the coil active. `allow_enable` permits the hold coil to be enabled.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/diverters/dual_coil_diverter.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_diverter_upper_right_main:\n    number: 25\n    default_pulse_ms: 4\n    default_hold_power: 0.2\n  c_diverter_upper_right_hold:\n    number: 26\n    allow_enable: true\n```\n\n----------------------------------------\n\nTITLE: Show Slide on On-Screen Window on Init in YAML\nDESCRIPTION: This YAML snippet configures the slide player to show the 'window_slide_1' slide on the 'window' target when the 'init_done' event is posted. The 'init_done' event indicates that the media controller is ready for use.  The `target: window` setting ensures the slide is displayed on the on-screen window, not the physical DMD.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/dmd.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n#! displays:\n#!   window:\n#!     width: 600\n#!     height: 200\n#!   dmd:\n#!     width: 128\n#!     height: 32\n#!     default: true\n#! slides:\n#!   window_slide_1:\n#!     - type: display\n#!       effects:\n#!         - type: dmd\n#!           dot_color: ff5500\n#!       width: 512\n#!       height: 128\n#!     - type: text\n#!       text: MISSION PINBALL FRAMEWORK\n#!       anchor_y: top\n#!       y: top-3\n#!       font_size: 30\n#!     - type: rectangle\n#!       width: 514\n#!       height: 130\nslide_player:\n  init_done:\n    window_slide_1:\n      target: window\n##! test\n#! advance_time_and_run .1\n#! assert_slide_on_top window_slide_1 window\n```\n\n----------------------------------------\n\nTITLE: Configuring chained RGB and RGBW LEDs\nDESCRIPTION: This snippet demonstrates configuring a chain of RGB and RGBW LEDs, defining their start channels and types, and linking them using the `previous:` keyword. This allows MPF to automatically calculate the internal channels for each LED, accommodating different LED configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/leds.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  led_0:\n    start_channel: 0-0-0\n    subtype: led\n    type: rgb    # will use red: 0-0-0, green: 0-0-1, blue: 0-0-2\n  led_1:\n    previous: led_0\n    subtype: led\n    type: rgbw   # will use red: 0-0-3, green: 0-0-4, blue: 0-0-5, white: 0-0-6\n  led_2:\n    previous: led_1\n    subtype: led\n    type: rgbw   # will use red: 0-0-7, green: 0-0-8, blue: 0-0-9, white: 0-0-10\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Transition and Transition Out YAML\nDESCRIPTION: This example demonstrates how to configure both an incoming transition (`transition`) and an outgoing transition (`transition_out`) for a slide using the `slide_player` in a YAML configuration file. When the `left_ramp_hit` event occurs, `slide1` is shown with a 'push' transition, and when `slide1` is removed, it uses a 'fade_back' transition.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/transitions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  left_ramp_hit:\n    slide1:\n      transition:\n        type: push\n        duration: 2s\n        direction: right\n      transition_out:\n        type: fade_back\n```\n\n----------------------------------------\n\nTITLE: Alternative Configuration for Serial LEDs with Channels\nDESCRIPTION: This snippet shows an alternative configuration for serial LEDs, explicitly defining the channels (red, green, blue) and their corresponding numbers.  This allows precise control over each color channel.  The numbers represent the channel positions within the LED chain.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/leds.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  my_ws2811:\n    channels:\n      red:\n        - number: 0-0\n      green:\n        - number: 0-1\n      blue:\n        - number: 0-2\n  my_ws2812:\n    channels:\n      red:\n        - number: 1-1\n      green:\n        - number: 1-0\n      blue:\n        - number: 1-2\n```\n\n----------------------------------------\n\nTITLE: Configure SmartMatrix Hardware Port in YAML\nDESCRIPTION: This snippet configures the SmartMatrix hardware settings, specifying the communication port, baud rate, and old_cookie setting for a Windows system.  The `port` setting needs to be adjusted to match the actual port your Teensy is connected to.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/smartmatrix.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  rgb_dmd: smartmatrix\nsmartmatrix:\n  smartmatrix_1:\n    port: com12\n    baud: 2500000\n    old_cookie: false\n```\n\n----------------------------------------\n\nTITLE: Blinkenlight Player Stop Color\nDESCRIPTION: This example shows how to use the `stop` or `remove` color in the express config of the blinkenlight_player to remove a keyless color. This is an alternative way to achieve the same result as specifying `action: remove`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/blinkenlight_player.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nblinkenlight_player:\n  some_event:\n    my_blinkenlight: red\n  some_other_event:\n    my_blinkenlight: remove\n```\n\n----------------------------------------\n\nTITLE: Example YAML Parse Error in Python\nDESCRIPTION: This Python error message represents a `ValueError` resulting from a YAML syntax error in the config file. The error message specifies the file name and line number where the error was detected, directing the user to the specific location in the YAML file for troubleshooting and correction.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nValueError: YAML error found in file /Users/brian/git/mpf-examples/tutorial/config/config.yaml. Line 16, Position 24\n```\n\n----------------------------------------\n\nTITLE: Configuring Coils and Switches for OPP Platform in MPF\nDESCRIPTION: This YAML configuration snippet demonstrates how to configure a coil and a switch within the Mission Pinball Framework (MPF) when using the OPP (Open Pinball Project) hardware platform. It defines a coil named `c_my_coil` and a switch named `s_my_switch`, specifying their corresponding numbers on the OPP board. The coil is pulsed when the switch is activated. This configuration assumes the use of gen2 driverboards. Ensure the correct serial ports for the Cobra board are specified under the `opp` section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/cobrapin/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n\nhardware:\n   platform: opp\n   driverboards: gen2\n\nopp:\n   ports: /dev/ttyACM0, /dev/ttyACM1 # change if your Cobra board uses different ports\n\ncoils:\n    c_my_coil:\n       number: 1-0-1\n       pulse_events: s_my_switch_active\n\nswitches:\n   s_my_switch:\n      number: 0-0-16\n```\n\n----------------------------------------\n\nTITLE: Create Window Slide with Color DMD Widget (YAML)\nDESCRIPTION: Creates a slide for the on-screen window containing a single 'display' widget with a 'color_dmd' effect. The 'dot_size' parameter controls the size of the dots. The width and height of the color_dmd widget are set to match the window size, scaling the DMD to fill the window.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/adding_dot_look_to_lcd.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  window_slide:\n    - type: display\n      effects:\n        - type: color_dmd\n          dot_size: .5\n      width: 800\n      height: 600\n```\n\n----------------------------------------\n\nTITLE: Using Modifier Keys (YAML)\nDESCRIPTION: This configuration snippet illustrates how to use modifier keys (SHIFT, CTRL) in combination with regular keys to map multiple switch actions to a single key.  It shows how to use shift-key and ctrl-key combinations with the `t` key. It assumes that the mpf version is before 0.33.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/virtual/keyboard.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#! keyboard:\n  t:\n    switch: foo\n  shift-t:\n    switch: tilt\n  shift+ctrl+t:\n    switch: slam_tilt\n```\n\n----------------------------------------\n\nTITLE: Toggle Switch Example (YAML)\nDESCRIPTION: This example demonstrates how to configure a keyboard key to momentarily activate a switch, and a key combination to toggle the switch on and off. Pressing '1' momentarily activates 'trough1', while pressing 'Shift+1' toggles 'trough1'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/keyboard.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#! keyboard:\n  1:\n    switch: trough1\n  shift+1:\n    switch: trough1\n    toggle: true\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on Windows (PowerShell)\nDESCRIPTION: Activates the virtual environment on Windows using PowerShell. This script sets environment variables to use the Python interpreter and packages within the virtual environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-environments.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS > mpfenv/Scripts/Activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Setting the hardware platform to OPP in MPF\nDESCRIPTION: This code snippet shows how to configure the MPF `hardware` platform to use OPP (Open Pinball Project) hardware. This is a required step to enable communication between MPF and the OPP controllers.  You will need to include this in your machine-wide config.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/config.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: opp\n```\n\n----------------------------------------\n\nTITLE: Config Player: Light Player Subscription Syntax (Standalone)\nDESCRIPTION: This snippet demonstrates the subscription syntax for the `light_player` config player in a standalone configuration. The light named `score_1M` turns white when the current player's score exceeds 1,000,000 and returns to its previous state when the score falls below this value.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/index.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlight_player:\n  \"{current_player.score > 1000000}\":\n    score_1M: white\n```\n\n----------------------------------------\n\nTITLE: Configure Drain and Trough Coils in YAML\nDESCRIPTION: This code snippet shows how to define coils for the drain eject and trough release mechanisms in the `coils:` section of the MPF configuration file. Each coil is assigned a unique number that corresponds to its connection to the control system, and a default pulse time is set.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_one_switch.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  c_drain_eject:\n    number: 3\n    default_pulse_ms: 20\n  c_trough_release:\n    number: 4\n    default_pulse_ms: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel LEDs with start_channel and type\nDESCRIPTION: This code snippet demonstrates configuring parallel LEDs using the `start_channel` and `type` parameters, available from MPF 0.54 onwards. This simplifies the configuration by specifying the starting channel and the color type (r, rbg, w), allowing MPF to automatically assign the subsequent channels.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/leds.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  my_red_only_insert:\n    start_channel: 0    # the exact number format depends on your platform\n    type: r    # will use red: 0\n  my_rgb_insert:\n    start_channel: 1    # the exact number format depends on your platform\n    type: rbg   # will use red: 1, green: 3, blue: 2\n  my_white_light:\n    previous: my_rgb_insert     # you can also chain those if you want\n    type: w   # will use white: 4\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Lights Using Show Tokens in YAML\nDESCRIPTION: This snippet shows how to set multiple lights using show tokens. The `rainbow` show uses the `(leds)` token, which is replaced with a comma-separated list of light names in the `show_player` configuration. This allows the same show to control different lights based on the `show_tokens` parameter.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/light_player.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_target1:\n    number:\n  l_target2:\n    number:\nshows:\n  rainbow:\n    - lights:\n        (leds): red\n    - lights:\n        (leds): orange\n    - lights:\n        (leds): yellow\n    - lights:\n        (leds): green\n    - lights:\n        (leds): blue\n    - lights:\n        (leds): purple\n      duration: 3s\nshow_player:\n  play_rainbow_show_on_targets:\n    rainbow:\n      show_tokens:\n        leds: l_target1, l_target2\n```\n\n----------------------------------------\n\nTITLE: Configure a Two-Direction Motor in MPF\nDESCRIPTION: This snippet shows how to configure a motor that can move in two directions. It sets up switches for 'home' and 'away' positions, digital outputs for both forward and backward movements, and maps these to a motor device. The digital outputs are configured as lights.  It also highlights the use of position switches as limit switches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/motors.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_slimer_home:\n    number: 8-1\n  s_slimer_away:\n    number: 8-2\ndigital_outputs:\n  c_slimer_motor_forward:\n    number: 8-3\n    type: light\n  c_slimer_motor_backward:\n    number: 8-4\n    type: light\nmotors:\n  ghostbusters_slimer:\n    motor_left_output: c_slimer_motor_forward\n    motor_right_output: c_slimer_motor_backward\n    position_switches: !!omap\n      - home: s_slimer_home\n      - away: s_slimer_away\n    reset_position: home\n    go_to_position:\n      slimer_home: home\n      slimer_away: away\n```\n\n----------------------------------------\n\nTITLE: Mode Configuration in YAML\nDESCRIPTION: This code snippet shows the YAML configuration required to tell MPF to use the custom code for the base mode. The `code` entry specifies the Python module and class name to load.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/mode_code.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmode:\n  start_events: ball_starting\n  priority: 100\n  code: base.Base\n```\n\n----------------------------------------\n\nTITLE: Using Quoted Sound Names with Spaces (YAML)\nDESCRIPTION: This snippet illustrates how to include sound files with spaces in their names within a playlist configuration. It demonstrates the necessity of enclosing such sound names within quotes to ensure they are correctly parsed by MPF.  This example shows a playlist called `mode_music` with a `sounds` list containing a sound named \"song 03\" which requires quotes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/playlists.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplaylists:\n    mode_music:\n        sounds:\n            * song_01\n            * song_02\n            * \"song 03\" # example of a sound with a space in its name using quotes\n            * song_04\n```\n\n----------------------------------------\n\nTITLE: Coil Recycle Configuration in MPF (YAML)\nDESCRIPTION: This code snippet shows how to configure the `default_recycle` setting for coils in the MPF configuration file. Setting `default_recycle` to `true` enables recycle for the coil, while `false` disables it.  This basic configuration helps prevent coil overheating.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/coils/recycle.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_coil_with_recycle:\n    number:\n    default_recycle: true\n  c_coil_without_recycle:\n    number:\n    default_recycle: false\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring a Jam Switch in YAML\nDESCRIPTION: This snippet demonstrates how to add a jam switch to the `ball_devices` configuration in MPF. The `jam_switch` setting is added under the `bd_trough` ball device to specify the switch that detects a ball jam.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_mechanical.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n```\n\n----------------------------------------\n\nTITLE: Tag Start Button with \"start\" in MPF (YAML)\nDESCRIPTION: This snippet adds the `start` tag to the `s_start` switch definition.  MPF uses this tag to identify the switch that should trigger the start game and add player functionality. This configuration enables the start button to initiate game play.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/9_start_button.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_start:\n    number: 11\n    tags: start\n```\n\n----------------------------------------\n\nTITLE: Slide with Single Widget (YAML)\nDESCRIPTION: This snippet demonstrates how to define a slide with a single text widget. It defines two slides, *my_slide_1* and *my_slide_2*, each containing a single text widget with different text and styling properties. This is the simplest way to create slides when you need only one widget per slide.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/slides.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  my_slide_1:\n    type: text\n    text: THIS IS MY SLIDE\n  my_slide_2:\n    type: text\n    text: THIS IS ANOTHER SLIDE\n    color: lime\n    font_size: 25\n```\n\n----------------------------------------\n\nTITLE: Switch Configuration Example in YAML\nDESCRIPTION: This snippet shows how to configure a switch in the `switches:` section of the machine configuration file. It includes the switch's number and indicates its purpose. Note that 'number)' should be replaced with a valid switch number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/switches/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_switch:\n    number)\n```\n\n----------------------------------------\n\nTITLE: Playing Built-in Sounds on LISY via MPF\nDESCRIPTION: This snippet shows how to play built-in sounds on the LISY system using their original game number. The `hardware_sound_player` section maps an event to a specific sound number and action (play). Depends on LISY hardware and sound ROM.  The sound's behavior (looping, etc.) is determined by the game's original programming.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/sound.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhardware_sound_player:\n  some_event_to_play_sound2:\n    2:\n      action: play\n  some_event_to_stop_any_playing_sound: stop\n```\n\n----------------------------------------\n\nTITLE: Counting Spinner Rotations with a Player Variable and Counter\nDESCRIPTION: This snippet shows how to count spinner rotations per player using a player variable and a counter. The player variable increments with each rotation, while the counter tracks the total rotations in a game mode, triggering an event when a target is reached.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/spinners.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_my_spinner:\n    number: 42    # number depends on your platform\n\nspinners:\n  basic_spinner:\n    switch: s_my_spinner\n    active_ms: 500\n##! mode: my_mode\n# in your base mode add 1 for every rotation to a player variable which you can use in slides\nvariable_player:\n  s_my_spinner_active:\n    spinner_rotations: 1\n# in a game mode the player needs to spin the spinner 10 times\ncounters:\n  spinner_rotations:\n    count_events: spinner_basic_spinner_hit\n    count_complete_value: 10\n    events_when_complete: mode_finished\n##! test\n#! start_game\n#! start_mode my_mode\n#! hit_and_release_switch s_my_spinner\n#! mock_event mode_finished\n#! assert_player_variable 1 spinner_rotations\n#! hit_and_release_switch s_my_spinner\n#! hit_and_release_switch s_my_spinner\n#! hit_and_release_switch s_my_spinner\n#! hit_and_release_switch s_my_spinner\n#! hit_and_release_switch s_my_spinner\n#! hit_and_release_switch s_my_spinner\n#! hit_and_release_switch s_my_spinner\n#! hit_and_release_switch s_my_spinner\n#! assert_event_not_called mode_finished\n#! hit_and_release_switch s_my_spinner\n#! assert_event_called mode_finished\n#! assert_player_variable 10 spinner_rotations\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Platform in Machine Config (YAML)\nDESCRIPTION: This snippet demonstrates how to specify the 'virtual' platform within the MPF machine configuration file.  Setting the platform to 'virtual' tells MPF to use the software-only virtual platform for testing and development.  This configuration goes within the `hardware:` section of your `config.yaml`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/virtual/virtual.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: virtual\n```\n\n----------------------------------------\n\nTITLE: Accessing Drop Targets in Code - MPF\nDESCRIPTION: This code snippet illustrates how to access drop target devices within the MPF environment using the `self.machine.drop_targets` collection. It demonstrates accessing drop targets by name as attributes or dictionary keys.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/drop_targets.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.drop_targets.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.drop_targets['foo']\n```\n\n----------------------------------------\n\nTITLE: Flipper Disabling Configuration YAML\nDESCRIPTION: This YAML configuration disables flippers temporarily. It defines switches for flipper buttons, coils for flipper actuation, and flipper definitions linking them. A 'flipper_mode' is defined to control flipper behavior based on events and timers, allowing temporary disabling of flippers. The timers track button activity and a disable timer to control the flipper disabling duration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/disabled_flippers.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_left_flipper:\n    number: 1\n    tags: left_flipper\n  s_right_flipper:\n    number: 2\n    tags: right_flipper\ncoils:\n  c_flipper_left:\n    number: 0\n    allow_enable: true\n    default_hold_power: 0.125\n  c_flipper_right:\n    number: 1\n    allow_enable: true\n    default_hold_power: 0.125\nflippers:\n  flipper_left:\n    main_coil: c_flipper_left\n    activation_switch: s_left_flipper\n    hold_coil:\n    enable_events: ball_started, flipper_on\n    disable_events: ball_will_end, flipper_off\n  flipper_right:\n    main_coil: c_flipper_right\n    activation_switch: s_right_flipper\n    hold_coil:\n    enable_events: ball_started, flipper_on\n    disable_events: ball_will_end, flipper_off\n##! mode: flipper_mode\nmode:\n  priority: 1000\nevent_player:\n  mode_flipper_mode_started: flippers_on\n  timer_flippers_disabled_started: flippers_off\n  timer_flippers_disabled_complete: flippers_on\ntimers:\n  flippers_button_active_left:\n    control_events:\n      - event: s_flipper_left_active\n        action: restart\n      - event: s_flipper_left_inactive\n        action: stop\n    start_value: 0\n    end_value: 10\n    direction: up\n    tick_interval: 1s\n  flippers_button_active_right:\n    control_events:\n      - event: s_flipper_right_active\n        action: restart\n      - event: s_flipper_right_inactive\n        action: stop\n    start_value: 0\n    end_value: 10\n    direction: up\n    tick_interval: 1s\n  flippers_disabled:\n    control_events:\n      - event: timer_flippers_button_active_left_complete\n        action: start\n      - event: timer_flippers_button_active_right_complete\n        action: start\n      - event: timer_flippers_disabled_complete\n        action: reset\n    start_value: 0\n    end_value: 3\n    direction: up\n    tick_interval: 1s\n```\n\n----------------------------------------\n\nTITLE: Machine-Wide Configuration (YAML)\nDESCRIPTION: This YAML snippet defines the machine-wide configuration for the Addams Family pinball machine. It includes the definition of modes, switches, coils, lights, and ball devices necessary for implementing the Mansion Awards feature. The modes defined are mansion_awards, chair_lit and chair_lit_3s. The switches define the various triggers on the playfield. Coils are configured for the drain, trough, swamp kickout and electric chair. Lights are defined for the mansion awards and electric chair. Ball devices are configured for the drain, trough, plunger lane, electric chair and swamp kickout. Playfield default source is set to the plunger lane. It also includes mode configurations that are defined later.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/TAF_mansion_awards.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#config_version=5\nmodes:\n  - mansion_awards\n  - chair_lit\n  - chair_lit_3s\nswitches:\n  start:\n    number: S13\n    tags: start\n  drain:\n    number:\n  trough1:\n    number: S15\n  trough2:\n    number: S16\n  trough3:\n    number: S17\n  plunger_lane:\n    number: S27\n  swamp_kickout:\n    number: S74\n  electric_chair:\n    number: S43\n  left_ramp:\n    number: S66\n  center_ramp:\n    number: S65\n  right_inlane:\n    number: S25\n  upper_left_jet:\n    number: S31\n    tags: jet\n  upper_right_jet:\n    number: S32\n    tags: jet\n  center_left_jet:\n    number: S33\n    tags: jet\n  center_right_jet:\n    number: S34\n    tags: jet\n  lower_jet:\n    number: S35\n    tags: jet\nvirtual_platform_start_active_switches: trough1, trough2, trough3\ncoils:\n  drain:\n    number: \"05\"\n  trough:\n    number: \"04\"\n  swamp_kickout:\n    number: \"08\"\n  electric_chair:\n    number: \"01\"\nlights:\n  9_mil:\n    number: L66\n    subtype: matrix\n  6_mil:\n    number: L54\n    subtype: matrix\n  3_mil:\n    number: L68\n    subtype: matrix\n  thing:\n    number: L51\n    subtype: matrix\n  quick_multiball:\n    number: L55\n    subtype: matrix\n  graveyard_at_max:\n    number: L67\n    subtype: matrix\n  raise_the_dead:\n    number: L52\n    subtype: matrix\n  festers_tunnel_hunt:\n    number: L56\n    subtype: matrix\n  lite_extra_ball:\n    number: L53\n    subtype: matrix\n  seance:\n    number: L57\n    subtype: matrix\n  hit_cousin_it:\n    number: L58\n    subtype: matrix\n  mamushka:\n    number: L45\n    subtype: matrix\n  mansion_question:\n    number: L65\n    subtype: matrix\n  electric_chair_yellow:\n    number: L64\n    subtype: matrix\nball_devices:\n  drain:\n    ball_switches: drain\n    eject_coil: drain\n    eject_targets: trough\n    tags: drain\n  trough:\n    ball_switches: trough1, trough2, trough3\n    eject_coil: trough\n    eject_targets: plunger_lane\n    tags: trough, home\n  plunger_lane:\n    ball_switches: plunger_lane\n    mechanical_eject: true\n    eject_timeouts: 3s\n    tags: home\n  electric_chair:\n    ball_switches: electric_chair\n    eject_coil: electric_chair\n  swamp_kickout:\n    ball_switches: swamp_kickout\n    eject_coil: swamp_kickout\nplayfields:\n  playfield:\n    default_source_device: plunger_lane\n    tags: default\n##! mode: mansion_awards\n# mode will be defined below\n##! mode: chair_lit\n# mode will be defined below\n##! mode: chair_lit_3s\n# mode will be defined below\n```\n\n----------------------------------------\n\nTITLE: Define Playfield Switch in MPF (YAML)\nDESCRIPTION: This snippet defines a switch named `s_right_inlane` and tags it with `playfield_active`. MPF uses this tag to confirm that a ball has entered the playfield after being launched. The `number` parameter specifies the hardware number associated with the switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/9_start_button.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_right_inlane:\n    number: 12\n    tags: playfield_active\n```\n\n----------------------------------------\n\nTITLE: Adding Widgets with Different Event Priorities in MPF (YAML)\nDESCRIPTION: This snippet demonstrates adding the same widget multiple times to a slide by using different priorities for the events that trigger the widget. Each event is associated with a unique key and potentially different widget settings to avoid overlapping widgets. This configuration is part of the `widget_player` section in the MPF configuration file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/keys.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget_player:\n  some_event.1:\n    widget_1:\n      key: widget_1_1\n      slide: slide_2\n      widget_settings:\n         # <list of settings below go here>\n  some_event.2:\n    widget_1:\n      key: widget_1_2\n      slide: slide_2\n      widget_settings:\n         # <list of settings below go here>\n```\n\n----------------------------------------\n\nTITLE: Initializing Display: Simple Window Configuration (YAML)\nDESCRIPTION: This code snippet shows how to define a simple display called \"window\" with a width of 800 and a height of 600 in the `displays:` section of the MPF configuration file.  It demonstrates the basic structure for declaring a display.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  window:\n    width: 800\n    height: 600\n```\n\n----------------------------------------\n\nTITLE: Configuring Serial LEDs (WS2811, WS2812) in MPF\nDESCRIPTION: This code snippet demonstrates how to configure serial LEDs (WS2811 and WS2812) in MPF using the `lights:` section of the configuration file.  It defines the `number` which specifies the LED's position in the chain (starting from 0), and the `type` (rgb, grb, www) to match the channel order of the LED.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/leds.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  my_ws2811:\n    number: 0         # first LED in chain (with three channels)\n    type: rgb\n  my_ws2812:\n    number: 1         # second LED in chain (with three channels)\n    type: grb\n  my_serial_white_leds:\n    number: 2         # third LED in chain (with three channels)\n    type: www\n```\n\n----------------------------------------\n\nTITLE: Video Widget Settings (YAML)\nDESCRIPTION: Defines the basic settings for a video widget in MPF. It includes options for specifying the video asset, height, width, volume, autoplay, end behavior, and control events. These settings control the video's appearance and playback behavior.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/video.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: video\nvideo:\nheight:\nwidth:\nvolume:\nauto_play:\nend_behavior:\ncontrol_events:\n```\n\n----------------------------------------\n\nTITLE: Simplified Show Control with Logic_Block _updated Event\nDESCRIPTION: This YAML snippet demonstrates a simpler method to control shows using the `logicblock_(name)_updated` event. It starts a show at a specific step determined by the counter's value and stops it when the counter is disabled. It utilizes `show_tokens` to parameterize the show.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/integrating_logic_blocks_and_shows.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\ncounters:\n  my_counter:\n    count_events: my_count_event\n    starting_count: 0\n    count_complete_value: 3\nshow_player:\n  logicblock_my_counter_updated{enabled}:\n    my_show:\n      key: my_counter_show\n      start_step: value + 1\n      show_tokens:\n        led1: l_led1\n        led2: l_led2\n        led3: l_led3\n        color: magenta\n  logicblock_my_counter_updated{not enabled}:\n    my_counter_show: stop\n```\n\n----------------------------------------\n\nTITLE: Add RGB DMD Device Entry in YAML\nDESCRIPTION: This snippet demonstrates how to define an RGB DMD device entry in the `rgb_dmds:` section of the machine configuration file.  It sets the `hardware_brightness` and `source_display` properties, mapping the physical DMD to a logical display named 'dmd'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/smartmatrix.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrgb_dmds:\n  smartmatrix_1:\n    hardware_brightness: .17\n    source_display: dmd\n```\n\n----------------------------------------\n\nTITLE: Configuring Autofire Coils for Slingshot (YAML)\nDESCRIPTION: This snippet configures an autofire coil for a left slingshot, including settings for the switch, coil, and events to enable and disable the coil. It ensures the slingshot is disabled during ball ending and service mode, and re-enabled when a new ball starts or via a specific enable event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/fake_ball_save.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nautofire_coils:\n  left_slingshot:\n    switch: s_left_slingshot\n    coil: c_left_slingshot\n    disable_events: ball_ending, service_mode_entered, disable_sling\n    enable_events: ball_started, enable_sling\n```\n\n----------------------------------------\n\nTITLE: Configure Trough Coil with Longer Pulse and Hold Power in YAML\nDESCRIPTION: This code snippet demonstrates how to configure a trough release coil with a longer pulse time that requires enabling PWM. `default_hold_power` is used in addition to `default_pulse_ms` to prevent the coil from overheating when enabled for longer periods.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_one_switch.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  c_trough_release:\n    number: 4\n    default_pulse_ms: 20ms\n    default_hold_power: 0.25\n```\n\n----------------------------------------\n\nTITLE: Auditor Configuration Example YAML\nDESCRIPTION: This example shows the default settings for the MPF auditor, including which events to save, what to audit (shots, switches, events, and player variables), which events to track, and which player variables to track.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/auditor.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauditor:\n  save_events: ball_ended game_ended\n  audit: shots switches events player\n  events: ball_search_begin machine_init_phase_1 game_started game_ended machine_reset\n  player: score\n  num_player_top_records: 10\n```\n\n----------------------------------------\n\nTITLE: Set Trough Eject Targets - YAML\nDESCRIPTION: Configures the `eject_targets:` setting in the trough or drain ball device to include the plunger device. This ensures that when the trough ejects a ball, it knows the plunger lane is a possible destination.  This involves adding `bd_plunger` to the `eject_targets` list in the `bd_trough` definition.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/mechanical_with_switch.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n```\n\n----------------------------------------\n\nTITLE: Configuring Variable Player for Scoring in YAML\nDESCRIPTION: This snippet shows how to configure `variable_player` to assign scores based on specific shot events within a mode. The `my_first_shot_mode2_flashing_hit` and `my_first_shot_mode2_lit_hit` events are linked to score increases of 10000 and 100 respectively when triggered. These events are generally fired as a result of a shot changing state in the `shot_profile`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nvariable_player:\n  my_first_shot_mode2_flashing_hit:\n    score: 10000\n  my_first_shot_mode2_lit_hit:\n    score: 100\n```\n\n----------------------------------------\n\nTITLE: Configure Plunger Eject Timeouts\nDESCRIPTION: This snippet configures the eject timeout for a standard coil-fired plunger lane that ejects directly to the playfield. The `eject_timeouts` setting specifies the time MPF waits to confirm the ball eject.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/auto_manual.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    # ...\n    eject_timeouts: 3s\n```\n\n----------------------------------------\n\nTITLE: Configuring 7-Segment Display as Lights in MPF\nDESCRIPTION: This YAML snippet demonstrates how to configure a 7-segment display as lights in MPF. It defines the hardware settings, light mappings for each segment (a to g), and the segment display configuration. This enables control of the display using MPF's light control features.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/light_segment_displays.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  segment_displays: light_segment_displays\n\nlights:\n  segment1_a:\n    number: 1\n  segment1_b:\n    number: 2\n  segment1_c:\n    number: 3\n  segment1_d:\n    number: 4\n  segment1_e:\n    number: 5\n  segment1_f:\n    number: 6\n  segment1_g:\n    number: 7\n  segment2_a:\n    number: 8\n  segment2_b:\n    number: 9\n  segment2_c:\n    number: 10\n  segment2_d:\n    number: 11\n  segment2_e:\n    number: 12\n  segment2_f:\n    number: 13\n  segment2_g:\n    number: 14\n\nsegment_displays:\n  display1:\n    number: 1\n    platform_settings:\n      lights:\n        - a: segment1_a\n          b: segment1_b\n          c: segment1_c\n          d: segment1_d\n          e: segment1_e\n          f: segment1_f\n          g: segment1_g\n        - a: segment2_a\n          b: segment2_b\n          c: segment2_c\n          d: segment2_d\n          e: segment2_e\n          f: segment2_f\n          g: segment2_g\n      type: 7segment\n```\n\n----------------------------------------\n\nTITLE: Configuring a Light with a Number\nDESCRIPTION: This snippet demonstrates the simplest way to configure a light by specifying its number. The hardware platform will internally translate this number into one or multiple channels based on the configured subtype. The 'number' parameter defines the physical output to which the light is connected.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/lights.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  my_led:\n    number: 7   # might also be 8-7 or 8-1-0 depending on your platform\n```\n\n----------------------------------------\n\nTITLE: Configure Secondary Flippers in MPF with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure both lower and upper flippers in MPF. It defines the main coils, activation switches, labels, and enable/disable events for each flipper. The `enable_events` and `disable_events` parameters control when the upper flippers are active, allowing for dynamic control during gameplay. Requires `switches` and `coils` definitions as shown in the commented section above the flippers configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/enabling_secondary_flippers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflippers:\n  lower_left:\n    main_coil: c_flipper_lower_left_main\n    activation_switch: s_flipper_left\n    label: Left Main Flipper\n  lower_right:\n    main_coil: c_flipper_lower_right_main\n    activation_switch: s_flipper_right\n    label: Right Main Flipper\n  upper_left:\n    main_coil: flipperUpLMain\n    activation_switch: flipperUpL\n    enable_events: ball_started, enable_upper_flippers\n    disable_events: ball_will_end, service_mode_entered, disable_upper_flippers\n    label: Upper Left Flipper\n  upper_right:\n    main_coil: flipperUpRMain\n    activation_switch: flipperUpR\n    enable_events: ball_started, enable_upper_flippers\n    disable_events: ball_will_end, service_mode_entered, disable_upper_flippers\n    label: Upper Right Flipper\n```\n\n----------------------------------------\n\nTITLE: Configure P3-ROC Driver Boards in MPF\nDESCRIPTION: This configures the driver boards for P3-ROC in MPF. It specifies that the connected driver boards are PDB (P-ROC Driver Board) type.  This setting is necessary for MPF to correctly interface with the driver boards.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/platform.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: p3_roc\n\np_roc:\n  driverboards: pdb\n```\n\n----------------------------------------\n\nTITLE: Mapping a Coil to a Light using YAML\nDESCRIPTION: This configuration snippet demonstrates how to map a coil to a light in MPF using YAML. It defines a coil with `allow_enable: true` and then maps a light to that coil using `platform: drivers`. This allows you to control the light via the light system.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/coils_as_lights.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  your_light_coil:\n    number: 42                 # number depends on your platform\n    allow_enable: true        # this will allow 100% enable without pwm\nlights:\n  your_light_on_a_coil:\n    number: your_light_coil     # map this light to a driver\n    platform: drivers\n```\n\n----------------------------------------\n\nTITLE: Applying Easing to Animations/Transitions\nDESCRIPTION: This snippet shows how to apply an easing function to an animation or transition property in MPF.  The easing function is specified using the `easing` keyword, followed by the name of the desired easing function. This modifies the rate of change of the animated property over time.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/easing.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\neasing: in_out_circ\n```\n\n----------------------------------------\n\nTITLE: Configure Switches on Stern SPIKE in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure switches on a Stern SPIKE pinball machine in MPF. It maps switch names to their corresponding node and ID numbers, as found in the machine's manual. The 'type' attribute is set to 'false' for certain switches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/switches.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_left_inlane:\n    number: 11-0\n  s_right_inlane:\n    number: 11-8\n  s_left_outlane:\n    number: 11-1\n  s_right_outlane:\n    number: 11-9\n  s_left_sling:\n    number: 8-7\n  s_right_sling:\n    number: 8-6\n  s_center_drops_right:\n    number: 9-6\n    type: false\n  s_center_drops_middle:\n    number: 9-5\n    type: false\n  s_center_drops_left:\n    number: 9-4\n    type: false\n  s_left_flipper:\n    number: 8-2\n  s_right_flipper:\n    number: 8-3\n  s_left_lane:\n    number: 11-3\n  s_left_orbit:\n    number: 9-11\n  s_tourney_start:\n    number: 1-12\n  s_trough_6:\n    number: 9-17\n    type: false\n  s_trough_5:\n    number: 9-18\n    type: false\n```\n\n----------------------------------------\n\nTITLE: Shaker Motor Configuration with Coil Player YAML\nDESCRIPTION: Configures a shaker motor using `coil_player` to enable and disable the motor based on events. It defines the coil and sets default pulse and hold power. The `coil_player` section maps events to coil actions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/shaker.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  c_shaker:\n    number:\n    default_pulse_ms: 1\n    default_hold_power: 0.125    # keep this low\n\n##! mode: your_mode\ncoil_player:\n  enable_shaker_event:\n    c_shaker: enable\n  disable_shaker_event:\n    c_shaker: disable\n##! test\n#! start_game\n#! mock_event test_event\n#! start_mode your_mode\n#! post enable_shaker_event\n#! advance_time_and_run .5\n#! post disable_shaker_event\n```\n\n----------------------------------------\n\nTITLE: CobraPin Example Config\nDESCRIPTION: This YAML configuration file demonstrates how to configure the CobraPin platform within MPF. It includes sections for hardware definition (specifying the platform, driverboards, and serial ports for the STM32 microcontrollers), switch definitions (both direct and matrix switches), light configurations (including serial LEDs), coil settings, flipper configurations, and game settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/cobrapin/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n\n#CobraPin Example Config\n\nhardware:\n  platform: opp\n  driverboards: gen2\n\n\nopp:\n  #Use the USB ports defined by your OS for the two STM32 boards\n  ports: /dev/ttyACM0, /dev/ttyACM1\n  #USING SERIAL NUMBERS INSTEAD OF CHAINS\n  #  Board 0 has serial number 0, Board 1 has serial number 1.\n  #  This is convenient if your OS tends to reassign the serial port.\n  #  MPF will automatically address the correct board even if the ports\n  #     are swapped.\n\n  #For multiple CobraPin boards in a game, you will either have to give\n  #  the STM32 boards on the second CobraPin board new serial numbers\n  #  (10 and 11 are suggested for the 2nd board since 2 is used by the\n  #  CobraPin Xpansion Board)\n  #  <OR> Use the chains section to assign a port to a board number.\n  #  Mixing these up could cause blown FETs, coils, and fuses. Proceed\n  #  with caution. Test without coil power and use the yellow coil LEDs\n  #  for feedback.\n  #chains:\n     #0: /dev/ttyACM0\n     #1: /dev/ttyACM1\n\n\npsus:\n  default:\n    #Gives the capacitors extra time to recharge after firing a coil\n    #  and eases the load on the power supply. Doesn't affect autofire\n    #  devices like flippers, pops, slings.\n    release_wait_ms: 50\n\n\n#One giant config file can get difficult to manage. You can put any of\n#  these config sections in its own yaml file and link to it with the\n#  config section here\nconfig:\n  #- switches_config.yaml\n  #- lights_config.yaml\n  #- coils_config.yaml\n  # ...\n\n\nswitches:\n\n  #DIRECT SWITCHES\n  #switch numbers are labelled in silkscreen on the board\n  s_left_flipper:\n    number: 0-0-27\n    tags: left_flipper\n  s_right_flipper:\n    number: 0-0-26\n    tags: right_flipper\n  s_startButton:\n    number: 0-0-25\n    tags: start\n\n\n  #MATRIX SWITCHES\n  #valid numbers are 1-0-32 through 1-0-95\n  s_lowerDrop1:\n    number: 1-0-32\n\n  # ...\n\n  s_topRollunder:\n    number: 1-0-95\n    ignore_window_ms: 250ms    #tune to assist in debouncing\n\n\nlights:\n\n  #SERIAL LEDS (neopixels)\n  #NEO0 output supports 256 LEDs numbered 0-0-0 to 0-0-255\n  l_shootAgain:\n    number: 0-0-0\n    subtype: led\n    type: grb   #Most WS2812-based LEDs are grb color order.\n                #This line not required for rgb ordered LEDs like the\n                #  WS2811 LEDs shown below\n\n  # ...\n\n  #NEO1 output supports 256 LEDs numbered 1-0-0 to 1-0-255\n  l_gi_1:\n    number: 1-0-0\n    subtype: led\n    tags: gi    #you can group similar LEDs with user defined tags\n  l_gi_2:\n    number: 1-0-255\n    subtype: led\n    tags: gi\n\n\ncoils:\n  #coil numbers are labelled in silkscreen on the board\n\n  #There are multiple ways to configure flippers, use the one that\n  #  matches your hardware\n  c_flipper_left:\n    number: 0-0-8\n    allow_enable: true\n    default_hold_power: 1.0\n    default_pulse_ms: 50\n  c_flipper_right:\n    number: 0-0-4\n    allow_enable: true\n    default_hold_power: 1.0\n    default_pulse_ms: 50\n  c_ballRelease:\n    number: 1-0-1\n    default_hold_power: 0.15\n    default_pulse_ms: 30\n\n\nflippers:\n  #Add your flipper config\n\n\nautofire_coils:\n  #Add your autofire cofigs for pops, slings, etc.\n\n\nball_devices:\n  #Add your ball devices\n\n\nplayfields:\n  #Define your playfields\n\n\nmachine:\n  balls_installed: 3 #How many balls are physically in your game\n  min_balls: 3 #How few balls can be accounted for before you can start a game\n\n\ngame:\n  balls_per_game: 3\n  max_players: 4\n\n\nmodes:\n  #Add all your mode names here\n  #- attract\n  #- base\n  #- etc\n\n\nkeyboard:   #use to drive your game from the computer for testing\n  z:\n    switch: s_left_flipper\n  \"/\":\n    switch: s_right_flipper\n```\n\n----------------------------------------\n\nTITLE: Adding opacity animations to a text widget\nDESCRIPTION: This snippet demonstrates how to add an animation to a text widget, specifically animating the opacity property. It shows how to define an animation trigger event (show_slide), and multiple steps with different property values and durations.  The animation loops indefinitely.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  slide_1:\n    widgets:\n      - type: text\n        text: MY TEXT\n        color: red\n        animations:\n          show_slide:                   # animation trigger event\n            - property: opacity         # name of the widget property we're animating\n              value: 1                  # target value of that property for this step\n              duration: .5s             # duration for this step (how long it takes to get there)\n            - property: opacity         # second step in the animation (starts with a hyphen)\n              value: 0\n              duration: .5s\n              repeat: true              # added to the final step, tells this animation to repeat (loop)\n```\n\n----------------------------------------\n\nTITLE: Configure Trough Ball Device in YAML\nDESCRIPTION: This snippet configures the trough as a ball device in MPF. It links the defined switches and eject coil to the trough, enabling MPF to manage ball count and ejection. The `ball_switches` parameter lists the switches that detect ball presence. The `eject_coil` parameter specifies which coil to activate when a ball needs to be ejected.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_opto.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n```\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n```\n\n----------------------------------------\n\nTITLE: Accessing Machine Variables in MPF Python\nDESCRIPTION: This snippet shows how to access and manipulate machine variables within the MPF environment. It demonstrates reading a variable, configuring it for persistence and expiration, and setting its value.  The code shows how to use MPF's built-in variable handling mechanisms to store and retrieve machine-wide settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/variables_in_code.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# read machine variable\nself.machine.log.info(self.machine.variables.get_machine_var(\"my_variable\"))\n\n# configure variable to persist to disk and expire after 1 day (optional)\n# alternatively you can also use \"machine_vars\" in config to achieve the same\nself.machine.variables.configure_machine_var(\"my_variable\", persist=True, expire_secs=86400)\n\n# set a variable\nself.machine.variables.set_machine_var(\"my_variable\", 17)\n```\n\n----------------------------------------\n\nTITLE: Triggering Sounds with Logic_Block _hit Event\nDESCRIPTION: This YAML snippet configures a counter and uses the `logicblock_(name)_hit` event to trigger sound events based on the counter's remaining value. It demonstrates how to play different sounds when the counter reaches specific values.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/integrating_logic_blocks_and_shows.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\ncounters:\n  my_counter:\n    count_events: my_count_event\n    starting_count: 0\n    count_complete_value: 10\nsound_player:\n  logicblock_my_counter_hit{remaining == 5}:\n    sound_just_5_remaining:\n      action: play\n  logicblock_my_counter_hit{remaining == 2}:\n    sound_just_2_remaining:\n      action: play\n  logicblock_my_counter_hit{remaining == 1}:\n    sound_just_1_remaining:\n      action: play\n```\n\n----------------------------------------\n\nTITLE: Line Widget Settings Configuration YAML\nDESCRIPTION: This snippet shows a basic structure of the line widget settings in a YAML format. It lists available properties like `type`, `points`, `thickness`, `cap`, `joint`, `cap_precision`, `joint_precision` and `close` that can be configured for the line widget in MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/line.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: line\npoints:\nthickness:\ncap:\njoint:\ncap_precision:\njoint_precision:\nclose:\n```\n\n----------------------------------------\n\nTITLE: Lighting a Random Shot on Mode Start\nDESCRIPTION: This snippet uses the `random_event_player` to randomly light one of the lanes when the skillshot mode starts.  It defines the events to advance each lane's shot profile to the 'lit' state.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_lane_change.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrandom_event_player:\n  mode_skillshot_started:\n    events:\n      - advance_skillshot_left\n      - advance_skillshot_middle\n      - advance_skillshot_right\n```\n\n----------------------------------------\n\nTITLE: String Variable Configuration with Conditionals\nDESCRIPTION: This example demonstrates how to use conditional events to set string player variables based on the value of another player variable. It sets the `album_name` player variable based on the `player_album_value`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/variable_player.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  player_album_value{value==1}:\n    album_name:\n      string: SILVER\n  player_album_value{value==2}:\n    album_name:\n      string: GOLD\n  player_album_value{value==3}:\n    album_name:\n      string: PLATINUM\n  player_album_value{value==4}:\n    album_name:\n      string: DOUBLE PLATINUM\n  player_album_value{value==5}:\n    album_name:\n      string: QUINTUPLE PLATINUM\n  player_album_value{value>5}:\n    album_name:\n      string: OFF THE CHARTS!\n```\n\n----------------------------------------\n\nTITLE: Sound Configuration Example (sounds:)\nDESCRIPTION: This example demonstrates the configuration of various sounds with settings such as file paths, volume, looping, priority, and ducking. The `max_queue_time` setting is used to control how long a sound will wait to be played before being discarded. It demonstrates the use of `events_when_started` and `events_when_stopped` to trigger events when the sound starts and stops.  The `ducking` section defines how the sound affects other sound tracks.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/basic_setup.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsounds:\n  triangle:\n    file: 22783__franciscopadilla__80-mute-triangle.wav\n    volume: 0.85\n    max_queue_time: 0\n  laser:\n    volume: 0.5\n    loops: 3\n    max_queue_time: 0\n  extra_ball:\n    file: extra_ball_12753.wav\n    events_when_started: extra_ball_callout_started\n    events_when_stopped: extra_ball_callout_finished\n    volume: 0.8\n    priority: 50\n    max_queue_time: None\n    ducking:\n      target: music\n      delay: 0\n      attack: 0.3 sec\n      attenuation: 0.45\n      release_point: 2.0 sec\n      release: 1.0 sec\n  slingshot_01:\n    volume: 0.5\n    max_queue_time: 0\n  song_01:\n    volume: 1.0\n    priority: 100\n    about_to_finish_time: 2s\n    events_when_about_to_finish: song_01_about_to_finish\n```\n\n----------------------------------------\n\nTITLE: Configure SmartMatrix Hardware Port in YAML (Mac/Linux)\nDESCRIPTION: This snippet configures the SmartMatrix hardware settings for Mac or Linux, specifying the communication port (typically a /dev/tty.usbmodem or /dev/ttyUSB/ACM device), baud rate, and old_cookie setting. The `port` setting needs to be adjusted to match the actual port your Teensy is connected to.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/smartmatrix.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  rgb_dmd: smartmatrix\nsmartmatrix:\n  smartmatrix_1:\n    port: \"/dev/tty.usbmodem1448891\"\n    baud: 2500000\n    old_cookie: false\n```\n\n----------------------------------------\n\nTITLE: Accessing Coils in MPF (Python)\nDESCRIPTION: This snippet demonstrates how to access coils within the Mission Pinball Framework (MPF). Coils are accessed through the `self.machine.coils` device collection, using either attribute access (`self.machine.coils.foo`) or dictionary-style access (`self.machine.coils['foo']`). This assumes that a coil named 'foo' has been configured in the machine configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/coils.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.coils.*\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.coils.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.coils['foo']\n```\n\n----------------------------------------\n\nTITLE: Stepper Configuration Example in YAML\nDESCRIPTION: This YAML snippet demonstrates a complete stepper motor configuration within MPF. It includes settings for the physical connection (`number`), homing procedure (`homing_mode`, `homing_switch`, `homing_direction`), position limits (`pos_min`, `pos_max`), reset behavior (`reset_events`, `reset_position`), debug settings, and named positions. The snippet also showcases how to integrate the stepper with other MPF components like timers and event players.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/steppers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# main config\np_roc:\n  use_separate_thread: true\n  pd_led_boards:\n    6:\n      use_stepper_0: true\n      stepper_speed: 1352400000  # Determine empiricall. Increasing slows pulsesrate\nswitches:\n  s_stepper_home:\n    number: 4/0/5\nsteppers:\n  ramp_diverter:\n    number: 6-0\n    homing_mode: switch\n    homing_switch: s_stepper_home\n    homing_direction: clockwise\n    pos_min: 0 # Default. (Neg values are behind home)\n    pos_max: 100 # Default\n    reset_events: machine_reset_phase_3, ball_starting, ball_will_end\n    reset_position: 0 # Default\n    debug: true\n    named_positions:\n      2: move_to_2\n      25: move_to_25\n      45: move_to_45\n##! mode: base\n# base mode\ntimers:\n  test_diverter:\n    start_value: 0\n    end_value: 6\n    start_running: true\n    restart_on_complete: true\nevent_player:\n  timer_test_diverter_tick{device.timers.test_diverter.ticks==1}: move_to_2\n  timer_test_diverter_tick{device.timers.test_diverter.ticks==3}: move_to_25\n  timer_test_diverter_tick{device.timers.test_diverter.ticks==5}: move_to_45\n```\n\n----------------------------------------\n\nTITLE: Configuring Bonus Scoring with Variable Player (YAML)\nDESCRIPTION: This snippet shows how to use the `variable_player` to track bonus-related events (e.g., ramp shots, target hits) and increment player variables that can be used in bonus calculations. The mode1 needs to be loaded and running for this variable_player to be available.\n\nRequires: The 'mode1' mode must be active to apply the variable_player changes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/bonus/configuring_bonus.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  ramp_shot_hit:\n    bonus_ramps: 1\n  s_target1_active:\n    some_variable: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch Numbers with FAST Hardware in YAML\nDESCRIPTION: This snippet shows how to configure switch numbers when using FAST IO boards. The `number` parameter uses the format `board_position-switch_input`. The board position starts at 0 for the first board in the chain.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/switches.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_switch:\n    number: 0-0    # first board, switch 0\n  some_other_switch:\n    number: 2-24    # third board, switch 24\n```\n\n----------------------------------------\n\nTITLE: Installing python-osc via pip\nDESCRIPTION: This command demonstrates how to install the python-osc library, which is required for using the OSC platform in MPF. It uses pip, the Python package installer.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/osc.md#_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\npip3 install python-osc\n```\n\n----------------------------------------\n\nTITLE: Custom Code Class Template in Python\nDESCRIPTION: This snippet shows the basic structure of a custom code class in MPF.  It imports the `CustomCode` base class from `mpf.core.custom_code` and defines a new class that inherits from it. The class provides access to the main MPF machine controller at `self.machine` and sets up a delay manager. The `on_load()` method can be overridden for custom initialization logic.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/machine_code.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom mpf.core.custom_code import CustomCode\n\nclass Claw(CustomCode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Timer Configuration and Displaying Timer Value on a Slide (Ticks)\nDESCRIPTION: This code snippet demonstrates how to configure a timer in MPF and display its tick value on a slide. It includes setting the start and end values, controlling the timer with events, and using the `variable_player` to update a player variable with the timer's tick value. This value is then displayed in a slide using a text widget.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/timers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: your_mode\n# in your mode\ntimers:\n  your_timer:\n    start_value: 0\n    end_value: 20\n    control_events:\n      - action: start\n        event: mode_your_mode_started\nvariable_player:\n  timer_your_timer_tick:\n    your_timer_variable_times_100:\n      int: device.timers.your_timer.ticks * 100\n      action: set\nslides:\n  show_timer:\n    widgets:\n      - type: Text\n        text: (player|your_timer_variable_times_100)\nslide_player:\n  mode_your_mode_started: show_timer\n##! test\n#! start_game\n#! start_mode your_mode\n#! advance_time_and_run .1\n#! assert_text_on_top_slide 0\n#! advance_time_and_run 1\n#! assert_text_on_top_slide 100\n```\n\n----------------------------------------\n\nTITLE: Defining Plunger Lane and Launch Button Switches (YAML)\nDESCRIPTION: This snippet defines the switches for the plunger lane (ball present) and the launch button. It's crucial to use the correct switch numbers from your control system and set the `type` to `NC` for opto switches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/coil_fired.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_plunger_lane:\n    number: 2-6\n  s_launch_button:\n    number: 1-5\n```\n\n----------------------------------------\n\nTITLE: Defining Animations in YAML\nDESCRIPTION: This code snippet shows how to define reusable animations named `fade_in` and `fade_out` in the `animations:` section of a YAML configuration file. These animations modify the `opacity` property of a widget over a duration of 1 second. They can be referenced by name in widget or widget_player configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/animations.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nanimations:\n  fade_in:\n    property: opacity\n    value: 1\n    duration: 1s\n  fade_out:\n    property: opacity\n    value: 0\n    duration: 1s\n```\n\n----------------------------------------\n\nTITLE: Creating a Blank Slide with Options (YAML)\nDESCRIPTION: This snippet demonstrates how to create a blank slide, either with no additional options or with options but no widgets. This is useful when you want to populate the slide content dynamically using the widget player. Two methods are shown: one with only `[]` and another with `widgets: []`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/slides.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  my_blank_slide:\n    background_color: red\n    widgets: []\n```\n\n----------------------------------------\n\nTITLE: Twitch Client Configuration with Machine Variables\nDESCRIPTION: This snippet demonstrates configuring the Twitch client using machine variables. This approach allows for dynamic updates and better security practices by avoiding hardcoding sensitive information directly in the configuration file.  The machine variables are defined and then referenced in the `twitch_client` section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/twitch_client.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmachine_vars:\n  twitch_user:\n    initial_value: 'TwitchBotAccount'\n    value_type: str\n  twitch_password:\n    initial_value: 'oauth:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n    value_type: str\n  twitch_channel:\n    initial_value: 'ChatChannel'\n    value_type: str\n\ntwitch_client:\n  user_var: twitch_user\n  password_var: twitch_password\n  channel_var: twitch_channel\n```\n\n----------------------------------------\n\nTITLE: Advanced Score Calculation with Dynamic Values in YAML\nDESCRIPTION: This snippet demonstrates advanced score calculation using dynamic and placeholder variables in the MPF bonus mode. It calculates the bonus score based on player variables and device counter values.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/bonus/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: bonus\n#config_version=5\nmode_settings:\n  bonus_entries:\n    - event: bonus_minerals\n      score: (current_player.platinum + current_player.iridium) / 100\n    - event: bonus_dropbanks\n      score: device.counters.dropbank_completions.value * 20\n```\n\n----------------------------------------\n\nTITLE: Accelerometer Configuration Example (YAML)\nDESCRIPTION: This example demonstrates a basic accelerometer configuration in MPF's YAML format. It defines the accelerometer's number, level offsets for each axis (x, y, z), and event triggers based on both G-force ('hit_limits') and degree of level ('level_limits') thresholds.  The configuration shows how to associate specific G-force and level deviations with custom events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/accelerometers.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\naccelerometers:\n  test_accelerometer:\n    number: 1\n    level_x: 0\n    level_y: 0\n    level_z: 1\n    hit_limits:\n      0.5: event_hit1\n      1.5: event_hit2\n    level_limits:\n      2: event_level1\n      5: event_level2\n```\n\n----------------------------------------\n\nTITLE: Setting Default Debounce Settings for FAST Switches in YAML\nDESCRIPTION: This snippet demonstrates how to configure default debounce settings (open and close) for switches when using FAST Pinball controllers. These settings are applied to all switches unless overridden on a per-switch basis.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/switches.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfast:\n  default_quick_debounce_open: 2ms\n  default_quick_debounce_close: 2ms\n  default_normal_debounce_open: 4ms\n  default_normal_debounce_close: 4ms\n```\n\n----------------------------------------\n\nTITLE: Light Configuration with Tags (YAML)\nDESCRIPTION: This snippet shows how to configure lights with tags in your MPF machine configuration. Both 'led_01' and 'led_02' have the tag 'tag1' applied, which can be used for token replacement in shows.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  led_01:\n    number: 00\n    tags: tag1\n  led_02:\n    number: 01\n    tags: tag1\n```\n\n----------------------------------------\n\nTITLE: Creating a Shot Group for Lane Rotation\nDESCRIPTION: This snippet creates a shot group to manage the lanes together and enable lane rotation. It defines the `shot_groups` section, specifying the shots within the group and the events that trigger rotation to the left and right, as well as events to prevent rotation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_lane_change.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nshot_groups:\n  skillshot:\n    shots: skillshot_left, skillshot_middle, skillshot_right\n    disable_rotation_events: s_plunger_lane_inactive\n    rotate_left_events: s_flipper_left_active\n    rotate_right_events: s_flipper_right_active\n```\n\n----------------------------------------\n\nTITLE: Configure and use custom player variables\nDESCRIPTION: Configures variable_player to modify both the 'score' and a custom 'potato' player variable based on switch events. This demonstrates how to track arbitrary game state using the variable_player component and how to initialize player variables.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/15_scoring.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# we will initially set the value to 0 when the machine starts up\nplayer_vars:\n  potato:\n    initial_value: 0\n\n##! mode: base\n# in your base mode (modes/base/config/base.yaml)\nvariable_player:\n  s_right_inlane_active:\n    score: 100\n  s_left_flipper_active:\n    score: 1000\n    potato: 1\n  s_right_flipper_active:\n    potato: -2\n```\n\n----------------------------------------\n\nTITLE: Adding a Switch Handler (Python)\nDESCRIPTION: Registers a handler to take action on a switch event. This allows the execution of a callback function when a switch transitions to a specific state. Key parameters include the `switch_name`, `callback` function, target `state`, `ms` delay, `return_info` flag, and optional `callback_kwargs`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadd_switch_handler(switch_name, callback, state=1, ms=0, return_info=False, callback_kwargs=None) → mpf.core.switch_controller.SwitchHandler\n```\n\n----------------------------------------\n\nTITLE: Applying Named Animations to Widgets in YAML\nDESCRIPTION: This YAML snippet shows how to apply a named animation (`fade_in`) to a widget. When the `show_slide` event occurs, the `fade_in` animation will be triggered, causing the widget's opacity to increase to 1.  It assumes the widget was initialized with opacity: 0. It also demonstrates how to trigger `fade_out` upon the `timer_hurry_up_complete` event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nwidgets:\n  hello_widget:\n    - type: text\n      text: HELLO\n      animations:\n        show_slide: fade_in\n```\n\n----------------------------------------\n\nTITLE: Thing Multiball Achievement Configuration (YAML)\nDESCRIPTION: This YAML snippet defines the configuration for the \"Thing Multiball\" achievement within the `mansion_awards` mode. It specifies the lights associated with the achievement, the shows to play when the achievement is selected and completed, and the events that trigger the achievement to start, be enabled, completed, and reset. The achievement is configured to be complete as soon as it starts by posting and watching for the same event, which is needed for the rules of the game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/TAF_mansion_awards.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: mansion_awards\nachievements:\n  thing_multiball:\n    show_tokens:\n      lights: thing\n    show_when_selected: flash\n    show_when_completed: on\n    events_when_started: award_thing_multiball    # starts thing_multiball mode\n    enable_events: initialize_mansion, reset_mansion\n    complete_events: award_thing_multiball\n    reset_events: reset_mansion\n```\n\n----------------------------------------\n\nTITLE: PKONE Configuration Example (YAML)\nDESCRIPTION: This YAML snippet shows a basic example of how to configure the `pkone:` section in your MPF machine configuration file. It specifies the serial port for communication with the PKONE controller. The `port` setting is required for MPF to communicate with the PKONE controller.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/pkone.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npkone:\n  port: com3\n```\n\n----------------------------------------\n\nTITLE: Timer Control Events Configuration Example (YAML)\nDESCRIPTION: This YAML snippet demonstrates a configuration for timer control events. It showcases how to start, reset, and add time to a timer based on specific events. The example includes the use of 'start', 'reset', and 'add' actions, with the 'add' action requiring a 'value' setting to specify the amount of time to add.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/timer_control_events.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\ntimers:\n  my_timer:\n    direction: down\n    start_value: 10\n    tick_interval: 125s\n    control_events:\n      - event: start_my_timer\n        action: start\n      - event: reset_my_timer\n        action: reset\n      - event: add_5_secs\n        action: add\n        value: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring RGB LED with Channels in MPF\nDESCRIPTION: This configuration shows how to define an RGB LED by grouping its red, green, and blue channels into a single RGB object. This allows MPF to control the LED as a single unit with a combined color, simplifying light shows and improving MPF monitor integration. The `channels` section maps color components to their specific hardware addresses.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/leds.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  left_lane_arrow_rgb:\n    channels:\n      red:\n        number: 1-10\n      green:\n        number: 1-11\n      blue:\n        number: 1-12\n```\n\n----------------------------------------\n\nTITLE: Stopping the Mode in Python\nDESCRIPTION: Shows how to stop the mode. The `stop` method takes a callback function and optional keyword arguments. It returns True if the mode is running, otherwise false. It's recommended to override `mode_stop` instead of the `stop` method itself.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/game.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstop(callback: Any = None, **kwargs) -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit and Release and Disable Rule\nDESCRIPTION: Sets a hardware rule to pulse a coil when a switch is hit, release the coil, and then disable the coil based on other conditions. Used for high-power coils on dual-wound flippers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_release_and_disable_rule(enable_switch: mpf.core.platform.SwitchSettings, eos_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings, repulse_settings: Optional[mpf.core.platform.RepulseSettings])\n```\n\n----------------------------------------\n\nTITLE: Complete Configuration for DMD Dot Look (YAML)\nDESCRIPTION: This combines all the individual snippets into a complete configuration file.  It shows the 'displays', 'slides', and 'slide_player' sections all together to create a functional DMD dot look.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/adding_dot_look_to_lcd.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  window:\n    width: 800\n    height: 600\n  dmd:\n    width: 120\n    height: 90\n    default: true\nslides:\n  window_slide:\n    - type: display\n      effects:\n        - type: color_dmd\n          dot_size: .5\n      width: 800\n      height: 600\n  dmd_slide:\n    - type: text\n      text: DOTS!\n    - type: rectangle\n      width: 120\n      height: 30\n      color: orange\n      y: 0\n      anchor_y: bottom\n    - type: rectangle\n      width: 120\n      height: 30\n      color: red\n      y: top\n      anchor_y: top\nslide_player:\n  init_done:\n    window_slide:\n      target: window\n    dmd_slide:\n      target: dmd\n```\n\n----------------------------------------\n\nTITLE: Configure Slide to Show on MPF Start (YAML)\nDESCRIPTION: This snippet configures MPF to show the created slide in the on-screen window when MPF starts, using the init_done event. The 'target: window' setting ensures that the slide is displayed on the window instead of the default DMD.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/rgb_dmd.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  init_done:\n    window_slide_1:\n      target: window\n```\n\n----------------------------------------\n\nTITLE: Setting Recycle Time for Coils (FAST)\nDESCRIPTION: This snippet shows how to manually set a coil's recycle time using the `recycle_ms` setting with FAST Pinball hardware.  Specifying `recycle_ms` overrides the default recycle behavior based on `default_pulse_ms` and the `recycle` setting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/drivers.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  slingshot_r:\n    number: 1-4\n    default_pulse_ms: 30\n    platform_settings:\n      recycle_ms: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring LED Numbers with Multiple Channels in MPF\nDESCRIPTION: This example shows how to configure LED numbers in MPF when using multiple channels configured on the FadeCandy server. The numbering scheme includes both the channel and the LED number on that channel (channel-led_number).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fadecandy/index.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_led0_0:\n    number: 0-0    # first LED on connector 0\n  l_led1_0:\n    number: 1-0    # first LED on connector 1\n  l_led1_1:\n    number: 1-1    # second LED on connector 1\n  l_led7_20:\n    number: 7-20    # twentyth LED on connector 7\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch-Based Sequence Shots with Cancel and Delay in MPF\nDESCRIPTION: This snippet shows how to configure a switch-based sequence shot in MPF with options to cancel the sequence using `cancel_switches` and delay new sequences from starting using `delay_switch_list`.  The `my_switch_based_sequence_shot` requires switches `seq2_1`, `seq2_2`, and `seq2_3` to be activated in order to be considered hit.  Hitting `seq2_cancel` will cancel the sequence, and hitting `seq2_delay` will prevent new sequences from starting for 1 second.  A `sequence_timeout` is also defined.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sequence_shots.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nsequence_shots:\n  my_switch_based_sequence_shot:\n    switch_sequence:\n      - seq2_1\n      - seq2_2\n      - seq2_3\n    cancel_switches: seq2_cancel\n    delay_switch_list:\n      seq2_delay: 1s\n    sequence_timeout: 3s\n```\n\n----------------------------------------\n\nTITLE: Light Show Definition for Gadget Letters (YAML)\nDESCRIPTION: This snippet shows the YAML configuration for a light show named 'light_gadget_letter'. This show is designed to flash a specific light (LED) in a specified color and then hold a final color, using tokens to dynamically specify the light and colors. Tokens allow for the reuse of this show for each letter in the 'GADGET' word.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: light_gadget_letter\n- time: 0\n  lights:\n    (gadget_letter_made_led): (gadget_letter_made_color)\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): off\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): (gadget_letter_made_color)\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): off\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): (gadget_letter_made_color)\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): off\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): (gadget_letter_made_color)\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): off\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): (gadget_letter_made_color)\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): off\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): (gadget_letter_made_color)\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): off\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): (gadget_letter_made_color)\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): off\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): (gadget_letter_made_color)\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): off\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): (gadget_letter_final_color)\n\n  duration: -1\n```\n\n----------------------------------------\n\nTITLE: Setting Volume with Numeric Gain in YAML\nDESCRIPTION: This snippet demonstrates how to set the volume using a simple numeric gain value between 0.0 and 1.0 in a YAML configuration file. The volume is specified as a floating-point number without any suffix. This method is straightforward for those familiar with a 0-1 volume scale.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/gain_values.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvolume: 0.1334\n\nvolume: 1.0\n\nvolume: 0.0\n```\n\n----------------------------------------\n\nTITLE: Starting Shows with Events in show_player (YAML)\nDESCRIPTION: This example demonstrates how to configure the `show_player:` section to start shows based on specific events. When `some_event` is posted, `your_show_name` will play, and when `some_other_event` is posted, `another_show` will play.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/show_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  some_event: your_show_name\n  some_other_event: another_show\n```\n\n----------------------------------------\n\nTITLE: Configuring an MPF Carousel Mode in YAML\nDESCRIPTION: This YAML code configures an MPF carousel mode with selectable items, and events to switch between them. The selectable_items define the available options, and the next_item_events and previous_item_events trigger the carousel's rotation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/mpf-carousel.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# attract_mode.yaml\n\nmode:\n  start_events: mode_attract_started\n  stop_events: mode_attract_will_stop\n  game_mode: false\n  code: mpf.modes.carousel.code.carousel.Carousel\n\nmode_settings:\n  selectable_items:\n    - gameover\n    - title\n    - last_game_scores\n  next_item_events: s_flipper_right_active\n  previous_item_events: s_flipper_left_active\n```\n\n----------------------------------------\n\nTITLE: Coil Configuration with Recycle\nDESCRIPTION: This snippet shows how to enable or disable coil recycle time using the `default_recycle` parameter to prevent overheating.  The example shows two coils, one with recycle enabled (`some_coil_with_recycle`) and one with recycle disabled (`some_coil_without_recycle`).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/drivers.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil_with_recycle:\n    number:\n    default_pulse_ms: 32\n    default_recycle: true\n  some_coil_without_recycle:\n    number:\n    default_pulse_ms: 32\n    default_recycle: false\n```\n\n----------------------------------------\n\nTITLE: Configure Logging Verbosity YAML\nDESCRIPTION: This YAML configuration shows how to control the verbosity of different parts of MPF logging, specifying the level of detail to be logged to the console and to a file. Each MPF component, such as 'asset_manager', 'ball_controller', etc., can be configured with a specific verbosity level, such as 'none', 'basic', or 'full'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/logging.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  console:\n    asset_manager: none\n    ball_controller: none\n    ball_search: basic\n    bcp: basic\n    bcp_client: basic\n    bcp_interface: basic\n    bcp_server: basic\n    clock: none\n    config_players: none       # todo\n    data_manager: none       # todo subclasses\n    delay_manager: none\n    device_manager: none\n    event_manager: none\n    file_manager: none       # todo\n    logic_blocks: none\n    machine_controller: basic\n    mode_controller: basic\n    placeholder_manager: none\n    platforms: none       # todo\n    players: basic       # todo\n    plugins: none       # todo\n    score_reel_controller: none\n    scriptlets: none       # todo\n    service_controller: basic\n    settings_controller: none\n    show_controller: none\n    switch_controller: basic\n    timers: none\n  file:\n    asset_manager: basic\n    ball_controller: basic\n    ball_search: basic\n    bcp: basic\n    bcp_client: basic\n    bcp_interface: basic\n    bcp_server: basic\n    clock: none\n    config_players: basic\n    data_manager: basic\n    delay_manager: none\n    device_manager: basic\n    event_manager: basic\n    file_manager: basic\n    logic_blocks: basic\n    machine_controller: basic\n    mode_controller: basic\n    placeholder_manager: basic\n    platforms: basic\n    players: full\n    plugins: basic\n    score_reel_controller: basic\n    scriptlets: basic\n    service_controller: basic\n    settings_controller: basic\n    show_controller: basic\n    switch_controller: full\n    timers: none\n```\n\n----------------------------------------\n\nTITLE: Define a Slide with DMD, Text, and Rectangle Widgets in YAML\nDESCRIPTION: This YAML snippet defines a slide named 'window_slide_1' that includes a display widget with a DMD effect, a text widget for the machine title, and a rectangle widget for a border.  The text widget's 'anchor_y' and 'y' settings position it at the top of the slide. The DMD widget displays the contents of the physical DMD.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/dmd.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n#! displays:\n#!   window:\n#!     width: 600\n#!     height: 200\n#!   dmd:\n#!     width: 128\n#!     height: 32\n#!     default: true\nslides:\n  window_slide_1:\n    - type: display\n      effects:\n        - type: dmd\n          dot_color: ff5500\n      width: 512\n      height: 128\n    - type: text\n      text: MISSION PINBALL FRAMEWORK\n      anchor_y: top\n      y: top-3\n      font_size: 30\n    - type: rectangle\n      width: 514\n      height: 130\n#! slide_player:\n#!   show_slide_event:\n#!     window_slide_1:\n#!       target: window\n##! test\n#! post show_slide_event\n#! advance_time_and_run .1\n#! assert_slide_on_top window_slide_1 window\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration\nDESCRIPTION: This YAML configuration defines the show player, which triggers the 'Super_Jets_on' show when the 'mode_super_jets_setup_started' event occurs and the 'sj_active' player variable is greater than 0. This ensures that the 'l_super_jets' light is active when the Super Jets mode is active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/AFM_super_jets.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  mode_super_jets_setup_started{current_player.sj_active>0}:\n    Super_Jets_on:\n      show_tokens:\n        lights: l_super_jets\n```\n\n----------------------------------------\n\nTITLE: Configuring GI (General Illumination) in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to configure general illumination (GI) strings in MPF. The `number` field corresponds to the GI string number, prefixed with `g`.  The `subtype` is set to `gi`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machines/wpc.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  gi_back_panel:\n    number: g01\n    subtype: gi\n  gi_upper_right:\n    number: g02\n    subtype: gi\n  gi_upper_left:\n    number: g03\n    subtype: gi\n  gi_lower_right:\n    number: g04\n    subtype: gi\n  gi_lower_left:\n    number: g05\n    subtype: gi\n```\n\n----------------------------------------\n\nTITLE: Set source display for PIN2DMD\nDESCRIPTION: This YAML config sets up the source display for the PIN2DMD, defining the width and height of the display. It includes a 'window' display for on-screen debugging and a 'dmd' display which serves as the source for the physical DMD. `round_anchor_x` and `default` are configured.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pin2dmd/index.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  window:  # on screen window - useful for debugging without real hardware\n    width: 600\n    height: 200\n  dmd:  # source display for the DMD\n    width: 128      # 192 if you got a 192x64 pin2dmd panel\n    height: 32      # 64 if you got a 192x64 pin2dmd panel\n    round_anchor_x: left\n    default: true\n```\n\n----------------------------------------\n\nTITLE: Configuring segment_display_player with transitions in YAML\nDESCRIPTION: This example demonstrates how to configure the `segment_display_player` with text, priority, expire time, transition, and transition_out. It shows a JACKPOT message with a push transition effect. The transition includes parameters like type, direction, and text.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/segment_display_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsegment_display_player:\n  jackpot_completed:\n    display1:\n      text: JACKPOT\n      priority: 1000\n      expire: 2s\n      transition:\n        type: push\n        direction: right\n        text: \" *** \"\n      transition_out:\n        type: push\n        direction: right\n        text: \" *** \"\n```\n\n----------------------------------------\n\nTITLE: Defining a Config List with Dashes and Indentation (YAML)\nDESCRIPTION: This snippet shows another way to define a list of configuration items, with each item on its own line, indented, and preceded by a dash. The list contains the items `item1`, `item2`, and `item3`. This approach can improve readability for longer lists.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/lists.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n    - item1\n    - item2\n    - item3\n```\n\n----------------------------------------\n\nTITLE: Adding Tilt Settings to Service Mode in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to add operator-adjustable settings for the `tilt` mode to the service mode. It configures settings for `warnings_to_tilt`, `settle_time`, and `multiple_hit_window`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/tilt/index.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# in your machine config\nmodes:\n  - tilt\nsettings:\n  warnings_to_tilt:\n    label: Number of tilt warnings\n    values:\n      0: \"no warnings\"\n      1: \"1\"\n      2: \"2\"\n      3: \"3\"\n      5: \"5\"\n      10: \"10\"\n    default: 3\n    key_type: int\n    sort: 600\n  settle_time:\n    label: Time to wait on tilt to settle bob\n    values:\n      3000: \"3s\"\n      5000: \"5s\"\n      10000: \"10s\"\n    default: 5000\n    key_type: int\n    sort: 610\n  multiple_hit_window:\n    label: Tilt sensitivity\n    values:\n      150: \"sensitive\"\n      300: \"normal\"\n      500: \"insensitive\"\n      1000: \"very insensitive\"\n    default: 300\n    key_type: int\n    sort: 620\n##! mode: tilt\n# in your tilt mode\ntilt:\n  multiple_hit_window: settings.multiple_hit_window\n  settle_time: settings.settle_time\n  warnings_to_tilt: settings.warnings_to_tilt\n```\n\n----------------------------------------\n\nTITLE: P-ROC Lamp Matrix Strobe Time Configuration\nDESCRIPTION: This code snippet shows how to configure the lamp matrix strobe time in the `p_roc:` section of the machine-wide config for P-ROC. This setting adjusts the timing of how the columns are activated and can be fine-tuned when using LEDs. The value is in milliseconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/lights.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\np_roc:\n  lamp_matrix_strobe_time: 100ms\n```\n\n----------------------------------------\n\nTITLE: Configuring Lights, Counter and Light Player in MPF\nDESCRIPTION: This snippet configures lights, a counter, and a light_player in MPF. The lights section defines the lights to be controlled. The counter section defines a counter named `my_counter` that starts at 0, completes at 5, and increments on the `count_up` event. The light_player section uses subscriptions on the counter's value to control the lights, turning them on green based on the counter's value.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/integrating_logic_blocks_and_lights.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_chest_matrix_green_2:\n    number:\n  l_chest_matrix_green_3:\n    number:\n  l_chest_matrix_green_4:\n    number:\n  l_chest_matrix_green_5:\n    number:\n\ncounters:\n  my_counter:\n    starting_count: 0\n    count_complete_value: 5\n    count_events: count_up\n\nlight_player:\n  \"{device.counters.my_counter.value > 0}\":\n    l_chest_matrix_green_5: green\n  \"{device.counters.my_counter.value > 1}\":\n    l_chest_matrix_green_4: green\n  \"{device.counters.my_counter.value > 2}\":\n    l_chest_matrix_green_3: green\n  \"{device.counters.my_counter.value > 3}\":\n    l_chest_matrix_green_2: green\n```\n\n----------------------------------------\n\nTITLE: Enabling Smart Virtual Platform via Config (YAML)\nDESCRIPTION: YAML configuration snippet to manually enable the smart virtual platform in the MPF machine configuration file. This setting overrides the default virtual platform and ensures that the smart virtual platform's features are active, allowing for automated switch state changes based on coil pulses. This is one way to explicitly specify the use of the smart virtual platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/virtual/smart_virtual.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: smart_virtual\n```\n\n----------------------------------------\n\nTITLE: Holding the Final Step with Infinite Duration in YAML\nDESCRIPTION: Demonstrates how to hold the final step of a show indefinitely using 'duration: -1'. This is useful for shows that should leave a final state active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/format.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: 0\n  lights:\n    led1: red\n- time: +250ms\n  lights:\n    led1: off\n- time: +250ms\n  lights:\n    led1: red\n- time: +250ms\n  lights:\n    led1: off\n- time: +250ms\n  lights:\n    led1: red\n  duration: -1\n```\n\n----------------------------------------\n\nTITLE: Switch Keymap with Explicit Actions\nDESCRIPTION: This snippet shows how to use explicit actions (`active`, `inactive`, `toggle`) for switch keymaps. When an action is specified, the key press triggers the action, and releasing the key has no effect. '6' activates 's_drop_1', 'shift+6' deactivates 's_drop_1', and 'x' toggles 's_trough_6'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/keyboard.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[keyboard]\n6=[\"switch\", \"s_drop_1\", \"active\"]\nshift+6=[\"switch\", \"s_drop_1\", \"inactive\"]\nx=[\"switch\", \"s_trough_6\", \"toggle\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple PSUs and Assigning Them to Coils in MPF\nDESCRIPTION: This code snippet demonstrates how to configure multiple power supply units (PSUs) and assign specific coils to them. This configuration allows MPF to sequentialize the pulses of coils independently based on their assigned PSU, thus managing power draw. It requires the `psus` and `coils` sections in the machine configuration file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/voltages_and_power/power_management.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npsus:\n  default:  # this is configured by default\n    voltage: 48\n  psu_12v:\n    voltage: 12\n\ncoils:\n  c_score_reel_1k_p1:\n    psu: psu_12v\n    number:\n  c_score_reel_100_p1:\n    psu: psu_12v\n    number:\n  c_score_reel_10_p1:\n    psu: psu_12v\n    number:\n  c_score_reel_1_p1:\n    psu: psu_12v\n    number:\n```\n\n----------------------------------------\n\nTITLE: Configuring a Switch\nDESCRIPTION: Configures a switch on the Stern Spike platform. Takes the switch number as a string, a SwitchConfig object, and platform-specific settings as input. Sets up the switch for input detection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_switch(number: str, config: mpf.core.platform.SwitchConfig, platform_config: dict)\n```\n\n----------------------------------------\n\nTITLE: Track Player Configuration Example (Config Files)\nDESCRIPTION: This YAML snippet demonstrates how to use the track player in a config file. It defines events that trigger actions on the 'music' track, such as pausing with a fade, resuming, and stopping all sounds on all tracks using the '__all__' keyword. The actions are triggered by the 'pause_music_track', 'resume_music_track', and 'stop_sounds_on_all_tracks' events respectively.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/track_player.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntrack_player:\n  pause_music_track:\n    music:\n      action: pause\n      fade: 1 sec\n  resume_music_track:\n    music:\n      action: play\n  stop_sounds_on_all_tracks:\n    __all__:\n      action: stop_all_sounds\n      fade: 0.5 sec\n```\n\n----------------------------------------\n\nTITLE: Configure Timers and Event Player for Multiple Timed Shots in YAML\nDESCRIPTION: This YAML configuration sets up a mode with three timers, `t1`, `t2`, and `t3`, each initialized to 3 seconds and counting down. Hitting a target triggers a `timerx_start` event, which restarts the corresponding timer. The mode succeeds (`my_mode_succeeded`) when all three timers are running simultaneously. The `event_player` is used to detect when each timer starts and checks if the other two timers are also active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/multiple_timed_shots.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: my_mode\nmode:\n  start_events: start_my_mode\n  stop_events: my_mode_succeeded\ntimers:\n  t1:\n    start_value: 3\n    end_value: 0\n    direction: down\n    control_events:\n      - action: restart\n        event: timer1_start\n  t2:\n    start_value: 3\n    end_value: 0\n    direction: down\n    control_events:\n      - action: restart\n        event: timer2_start\n  t3:\n    start_value: 3\n    end_value: 0\n    direction: down\n    control_events:\n      - action: restart\n        event: timer3_start\nevent_player:\n  timer_t1_started{device.timers.t2.running and device.timers.t3.running}: my_mode_succeeded\n  timer_t2_started{device.timers.t1.running and device.timers.t3.running}: my_mode_succeeded\n  timer_t3_started{device.timers.t1.running and device.timers.t2.running}: my_mode_succeeded\n##! test\n#! start_game\n#! mock_event my_mode_succeeded\n#! post start_my_mode\n#! post timer1_start\n#! assert_mode_running my_mode\n#! assert_bool_condition True device.timers.t1.running\n#! advance_time_and_run 4\n#! assert_bool_condition False device.timers.t1.running\n#! post timer2_start\n#! post timer3_start\n#! advance_time_and_run 1\n#! assert_mode_running my_mode\n#! assert_bool_condition False device.timers.t1.running\n#! assert_bool_condition True device.timers.t2.running\n#! assert_bool_condition True device.timers.t3.running\n#! post timer1_start\n#! assert_mode_not_running my_mode\n#! assert_event_called my_mode_succeeded\n```\n\n----------------------------------------\n\nTITLE: Defining Ball Save Behavior in Base Mode (YAML)\nDESCRIPTION: This snippet configures the event player in the base mode to trigger the center post up and down events for ball save. It defines ball save parameters like active time, grace period, hurry-up time, enable/disable events, auto-launch settings, and balls to save. It also includes events for early ball save activation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/ball_saves/center_post.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: base\n# in base mode\nevent_player:\n  ball_save_default_timer_start:\n    - ball_save_post_up\n  ball_save_default_disabled:\n    - ball_save_post_down\nball_saves:\n  default:\n    active_time: 10s\n    grace_period: 2s\n    hurry_up_time: 5s\n    enable_events: mode_base_started\n    timer_start_events: balldevice_bd_plunger_ball_eject_success\n    disable_events: ball_will_end\n    auto_launch: true\n    balls_to_save: 1\n    early_ball_save_events: s_right_outlane_active, s_left_outlane_active\n```\n\n----------------------------------------\n\nTITLE: Configuring Coils and Diverter for Center Post Ball Save (YAML)\nDESCRIPTION: This snippet defines the coils for raising and lowering the center post, a diverter to control them, and events to trigger the activation and deactivation of the ball save mechanism. It also includes events to enable the diverter when a ball starts. The diverter type is set to 'pulse'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/ball_saves/center_post.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_ball_save_post_up:\n    number: 1-10  # yours might be different\n    default_pulse_ms: 15\n  c_ball_save_post_down:\n    number: 1-15  # yours might be different\n    default_pulse_ms: 15\nlights:\n  ball_saver:\n    number:\ndiverters:\n  ball_save_post:\n    activation_coil: c_ball_save_post_up\n    deactivation_coil: c_ball_save_post_down\n    activate_events: ball_save_post_up\n    deactivate_events: ball_save_post_down\n    enable_events: ball_started\n    type: pulse\n```\n\n----------------------------------------\n\nTITLE: Triggering Actions on Ball End - YAML\nDESCRIPTION: This snippet demonstrates how to trigger simple actions, such as short sounds or light flashes, when a ball ends using the `ball_ended` event. Because normal game modes will stop on ball end the mode has to be a `game_mode: false`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/ball_start_end.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\n# in your mode\nmode:\n  start_events: ball_ending\n  stop_events: end_show_done\n  game_mode: false\nshow_player:\n  mode_my_mode_started:\n    short_stop_show:\n      loops: 0\n      events_when_completed: end_show_done\nshows:\n  short_stop_show:\n    - duration: 2s\n#!       events: test_stop\n      # add your show here\n##! test\n#! mock_event test_stop\n#! start_game\n#! advance_time_and_run 1\n#! drain_all_balls\n#! advance_time_and_run .1\n#! assert_event_called test_stop\n#! assert_mode_running my_mode\n#! advance_time_and_run 1\n#! assert_mode_not_running my_mode\n```\n\n----------------------------------------\n\nTITLE: Displaying Text with 'small' Font and Color in MPF-MC (YAML)\nDESCRIPTION: This snippet demonstrates how to display text on a slide using the pre-configured 'small' font style and a custom color in MPF-MC. It creates a slide with a text widget, sets the style to 'small', the text to \"MISSION\", and the color to \"00ffcc\". The 'small' font is 5 pixels tall and can be used on both mono and color DMDs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/dmd_fonts.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  my_slide:\n    - type: text\n      style: small\n      text: MISSION\n      color: 00ffcc\n#! slide_player:\n#!   show_slide_event: my_slide\n##! test\n#! post show_slide_event\n#! advance_time_and_run .1\n#! assert_slide_on_top my_slide\n#! assert_text_on_top_slide MISSION\n```\n\n----------------------------------------\n\nTITLE: Light Connected to Driver Configuration YAML\nDESCRIPTION: This YAML example demonstrates how to connect a light to a driver (coil). First, a coil is configured with allow_enable: true to allow 100% enable without PWM. Then, the light is mapped to that driver using the platform: drivers setting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/index.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  light_connected_to_a_driver:\n    number: 42          # number depends on your platform\n    allow_enable: true  # this will allow 100% enable without pwm\nlights:\n  light_on_a_driver:\n    number: light_connected_to_a_driver  # map this light to a driver\n    platform: drivers\n```\n\n----------------------------------------\n\nTITLE: Device Control with Priorities (YAML)\nDESCRIPTION: This snippet demonstrates how to set priorities for device control events to ensure a specific order of execution. The `enable_events` has the highest priority (3), followed by `score_events` (2), and then `disable_events` (1).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/device_control_events.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenable_events: ball_started.3\nscore_events: ball_started.2\ndisable_events: ball_started.1\n```\n\n----------------------------------------\n\nTITLE: Specify Triangle Points in MPF with YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify the points/vertices of a triangle. The `points` setting takes a comma-separated list of six numbers representing the x,y coordinates for each of the three corners of the triangle.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/triangle.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\npoints:\n```\n\n----------------------------------------\n\nTITLE: Configuring Show Tokens for Shots in MPF (YAML)\nDESCRIPTION: This code snippet demonstrates how to configure show tokens for a shot in MPF. Show tokens allow you to dynamically replace parts of a show with values specific to the shot that is playing it, enabling the reuse of shows across multiple shots.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/shots.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nshot_profiles:\n  flash:\n    states:\n      - name: unlit\n        show: \"off\"\n      - name: lit\n        show: \"flash\"\nshots:\n  shot1:\n    switch: switch1\n    profile: flash\n    show_tokens:\n      leds: led1\n```\n\n----------------------------------------\n\nTITLE: Widget Player Express Config YAML\nDESCRIPTION: This snippet demonstrates the 'express' configuration for the widget player, associating events with widgets for addition to the default display's current slide. It's a simplified way to add widgets without specifying additional options. The initial comment lines specify widget definitions which would normally be present elsewhere in the config.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/widget_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#! widgets:\n#!   widget1: []\n#!   widget2: []\n#!   widget3: []\nwidget_player:\n  event1: widget1\n  event2: widget2\n  event3: widget3\n```\n\n----------------------------------------\n\nTITLE: Text Widget Settings YAML Configuration\nDESCRIPTION: This code snippet shows the YAML configuration settings available for the text widget in MPF-MC. It lists configurable options such as `type`, `text`, `font_size`, `font_name`, `bold`, `italic`, `casing`, `number_grouping`, `min_digits`, `halign`, `valign`, `outline_color`, and `outline_width` which control the appearance and behavior of the text widget.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/text/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: text\ntext:\nfont_size:\nfont_name:\nbold:\nitalic:\ncasing:\nnumber_grouping:\nmin_digits:\nhalign:\nvalign:\noutline_color:  # added in MPF 0.56.1\noutline_width:  # added in MPF 0.56.1\n```\n\n----------------------------------------\n\nTITLE: Configuring System 11 Trough in YAML\nDESCRIPTION: This snippet configures a System 11-style trough using ball devices in MPF. It defines the outhole, trough, and plunger lane as separate ball devices, specifying their ball switches, eject coils, and target destinations. The outhole ejects to the trough, and the trough ejects to the plunger lane, creating a chain of ball movement.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/snux.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  outhole:\n    ball_switches: outhole\n    eject_coil: outhole\n    confirm_eject_type: target\n    eject_targets: trough\n    tags: drain\n  trough:\n    ball_switches: trough1, trough2\n    eject_coil: trough\n    eject_targets: plunger_lane\n    tags: home, trough\n  plunger_lane:\n    ball_switches: plunger_lane\n    mechanical_eject: true\n    eject_timeouts: 3s\n```\n\n----------------------------------------\n\nTITLE: Configure Eject Coil Jam Pulse YAML\nDESCRIPTION: This code snippet shows how to configure the eject coil jam pulse time for a ball trough in MPF. The `eject_coil_jam_pulse` setting specifies the pulse time (in milliseconds) to use when ejecting a ball while the jam switch is active. This value often needs to be calibrated to prevent double ejections or other issues when a ball is jammed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_opto.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n```\n\n----------------------------------------\n\nTITLE: Event Player Configuration\nDESCRIPTION: This YAML configuration defines the event player, which triggers the `start_mode_super_jets` action based on the `Super_Jets_Go` and `Super_Jets_Go_Again` events. This allows the mode to start under different circumstances.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/AFM_super_jets.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nevent_player:\n  Super_Jets_Go:\n    start_mode_super_jets\n  Super_Jets_Go_Again:\n    start_mode_super_jets\n```\n\n----------------------------------------\n\nTITLE: Bezier Points Configuration Example\nDESCRIPTION: This example shows how to define the `points` setting for a bezier curve. The `points` setting specifies a list of x/y coordinates that define the shape of the curve. The first pair is the starting point, the last pair is the ending point, and the pairs in between are the control points that influence the curve's shape.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/bezier.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npoints: 10, 10, 200, 50, 300, 200\n```\n\n----------------------------------------\n\nTITLE: Coil Configuration with Pulse Time\nDESCRIPTION: This snippet demonstrates how to configure a coil with a specific pulse time using the `default_pulse_ms` parameter. When the coil is pulsed, it will fire for the specified duration. The coil is named `some_coil` and will pulse for 30 milliseconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/drivers.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil:\n    number:\n    default_pulse_ms: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring coil pulse power for PKONE\nDESCRIPTION: This snippet demonstrates how to configure the `default_pulse_power` setting for a coil connected to a PKONE Extension board. This allows specifying the power applied to the coil during the initial pulse time, from 0-1 (0% to 100%). It requires the `number` and `default_pulse_ms` settings to also be defined.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/drivers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil:\n    number: 1-3\n    default_pulse_ms: 30\n    default_pulse_power: 0.5\n```\n\n----------------------------------------\n\nTITLE: Setting a slide to expire after a certain time\nDESCRIPTION: This snippet demonstrates how to configure a slide to automatically expire after a set time using the `expire` setting. It also shows how to apply a `transition_out` effect when the slide expires. Defines slides and transitions inline.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/slide_player.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  base:\n    widgets:\n      - type: text\n        text: BASE SLIDE\n        color: ff0000\n        font_size: 100\n  expire_slide:\n    widgets:\n      - type: text\n        text: EXPIRE 5s\n        color: purple\n        y: 66%\n    expire: 5s\n    transition_out:\n      type: wipe\n      duration: 5s\nslide_player:\n  mc_reset_complete.1: expire_slide\n  mc_reset_complete.2: base\n```\n\n----------------------------------------\n\nTITLE: Configuring Fliptronics Switches in MPF (YAML)\nDESCRIPTION: This example demonstrates configuring Fliptronics switches in MPF. Use the `sf` prefix followed by the switch number. Tags such as `player` and `left_flipper` are used for associating switches with game elements.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machines/wpc.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_flipper_lower_right_eos:\n    number: sf1\n  s_flipper_lower_right:\n    number: sf2\n    tags: player, right_flipper\n  s_flipper_lower_left_eos:\n    number: sf3\n  s_flipper_lower_left:\n    number: sf4\n    tags: player, left_flipper\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Playlists in MPF (YAML)\nDESCRIPTION: This snippet demonstrates configuring two playlists, `playlistIntro` and `playlistHighScore`, with various settings such as shuffle, repeat, crossfade mode, crossfade time, and the sounds they contain. It showcases how to define playlists and their properties within the `playlists:` section of an MPF configuration file. The `playlist_player` section shows examples of using these playlists.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/playlists.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# ---------------------\n# SOUNDS::PLAYLIST\n# ---------------------\nplaylists:\n  playlistIntro:\n    shuffle: false\n    repeat: false\n    sounds:\n      - voiceAnnouncerNewsFlash1\n      - voiceAnnouncerMessage1\n      - voiceAnnouncerAliensAttack1\n  playlistHighScore:\n    shuffle: true\n    repeat: true\n    crossfade_mode: override\n    crossfade_time: 5s\n    sounds:\n      - soundHighScore001\n      - soundHighScore002\n      - soundHighScore003\n      - soundHighScore004\n# ---------------------\n# PLAYLIST::PLAYER\n# ---------------------\nplaylist_player:\n  # -------------------\n  # ADDED SURPRISE VOICE DURING ATTRACT MODE\n  playlistAttention:\n    trackplaylist:\n      playlist: playlistIntro\n      action: play\n  # -------------------\n  # MUSIC DURING HIGH SCORE ENTRY\n  high_score_enter_initials:\n    trackplaylist:\n      playlist: playlistHighScore\n      shuffle: true\n      repeat: true\n      action: play\n  mode_attract_started:\n    trackplaylist:\n      action: stop\n```\n\n----------------------------------------\n\nTITLE: YAML Show Configuration for RGB LEDs\nDESCRIPTION: This YAML snippet defines a show called `attract_light_show` that cycles three RGB LEDs (`l_led1`, `l_led2`, `l_led3`) through the colors of the rainbow. The `duration` specifies how long each step lasts, and the `lights` section defines the color of each LED using either color names (e.g., `red`, `blue`) or hex color codes (e.g., `ff0000`).\nRequires: That `l_led1`, `l_led2`, and `l_led3` are defined as RGB LEDs in the machine config.\nOutput: The LEDs will cycle through red, orange, yellow, green, blue, and magenta.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/17_add_lights_leds.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: attract_light_show\n#show_version=5\n- duration: 1\n  lights:\n    l_led1: red\n    l_led2: red\n    l_led3: ff0000\n- duration: 1\n  lights:\n    l_led1: ff6600\n    l_led2: ff6600\n    l_led3: ff6600\n- duration: 1\n  lights:\n    l_led1: ffcc00\n    l_led2: ffcc00\n    l_led3: ffcc00\n- duration: 1\n  lights:\n    l_led1: lime\n    l_led2: 00ff00\n    l_led3: 00ff00\n- duration: 1\n  lights:\n    l_led1: blue\n    l_led2: 0000ff\n    l_led3: 0000ff\n- duration: 1\n  lights:\n    l_led1: ff00aa\n    l_led2: ff00aa\n    l_led3: ff00aa\n```\n\n----------------------------------------\n\nTITLE: Configuring LEDs with start_channel in lights section YAML\nDESCRIPTION: This snippet demonstrates how to configure multiple LEDs by specifying a `start_channel` and using the `previous` setting to automatically increment channels.  It configures an RGB LED, then an RGBW LED.  `subtype` is also set to led to prevent `matrix` lights on P-Roc.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/leds.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  led_0:\n    start_channel: 8-0\n    subtype: led\n    type: rgb    # will use red: 8-0, green: 8-1, blue: 8-2\n  led_1:\n    previous: led_0\n    subtype: led\n    type: rgbw   # will use red: 8-3, green: 8-4, blue: 8-5, white: 8-6\n  led_2:\n    previous: led_1\n    subtype: led\n    type: rgbw   # will use red: 8-7, green: 8-8, blue: 8-9, white: 8-10\n```\n\n----------------------------------------\n\nTITLE: Config Player: Show Player Short Syntax (Show)\nDESCRIPTION: This snippet demonstrates the short syntax for the `show_player` config player within a show step. When the show step is active, the `your_show` show is triggered to play.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/index.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: test\n- duration: 2s\n  shows:\n    your_show: play\n```\n\n----------------------------------------\n\nTITLE: Configure Slide Player in MPF\nDESCRIPTION: This snippet configures the slide player in MPF to trigger a slide named 'base.tscn' when the base mode starts.  It is added to the mpf config file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/base-slide-with-score.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    slide_player:\n        mode_base_started: base\n```\n\n----------------------------------------\n\nTITLE: Conditional Event for Gadget 'G1' Completion (YAML)\nDESCRIPTION: This snippet triggers 'gadget_g1_complete' only if 'g1' hasn't been seen by the accrual AND 'a' is already complete. This helps implement the friendly neighbor behaviour, rewarding 'g1' when 'a' is already complete and a subsequent shot hits 'a'. It uses the 'gadget_accrual' device to track which gadgets have been hit.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: gadget\n#! event_player:\n#!   s_gadget_a_active:\n    - gadget_g1_complete{device.accruals.gadget_accrual.value[0]==False and device.accruals.gadget_accrual.value[1]==True}\n```\n\n----------------------------------------\n\nTITLE: Random Event Player Configuration Example (Mode)\nDESCRIPTION: This example demonstrates configuring the random_event_player within a mode. It showcases different configurations: one with equiprobable events (`play_random_event`), another with weighted events (`play_random_event_with_weight`), and a third with conditional events (`play_random_event_with_weight_and_conditional`) including a `fallback_event`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/random_event_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrandom_event_player:\n  play_random_event:\n    events:\n      - event1\n      - event2\n      - event3\n  play_random_event_with_weight:\n    events:\n      unlikely_event1: 2\n      unlikely_event2: 3\n      likely_event1: 45\n      likely_event2: 50\n  play_random_event_with_weight_and_conditional:\n    events:\n      event1{mode.field.active}: 25\n      event2{device.ball_devices.bd_ramp_lock.balls==2}: 25\n      event3{device.accruals.base_locking_engaged.completed}: 10\n      event4{device.counters.health.value>9}: 30\n      event5{current_player.hearts < current_player.hearts_max}: 10\n    fallback_event: event_posts_if_everything_above_false\n```\n\n----------------------------------------\n\nTITLE: Configuring Matrix Lamps in YAML\nDESCRIPTION: This snippet shows how to configure matrix lamps in MPF using YAML, where each lamp's number is determined by its column and row position in the matrix, prefixed with 'L'. The number parameter follows the format L<column><row>, and each entry maps a descriptive name to its hardware location.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/snux.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  game_over_backbox:\n    number: L11\n  match_backbox:\n    number: L12\n  bip_backbox:\n    number: L13\n  mouth1_backbox:\n    number: L14\n  mouth2_backbox:\n    number: L15\n  mouth3_backbox:\n    number: L16\n  mouth4_backbox:\n    number: L17\n  mouth5_backbox:\n    number: L18\n  bonus_2x:\n    number: L21\n  bonus_3x:\n    number: L22\n```\n\n----------------------------------------\n\nTITLE: WS2812 LED Configuration YAML\nDESCRIPTION: This example configures a WS2812 LED, specifying its number and type as grb. The number represents the hardware address specific to the platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/index.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  my_ws2812_led:\n    number: 23  # the exact number format depends on your platform\n    type: grb\n```\n\n----------------------------------------\n\nTITLE: List Coils MPF\nDESCRIPTION: Lists all coils configured in the machine. This command provides a quick overview of the available coils.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/service_cli.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlist_coils\n```\n\n----------------------------------------\n\nTITLE: Configuring a Driver on Stern Spike (Python)\nDESCRIPTION: Illustrates how to configure a driver (coil) on the Stern Spike platform using the `configure_driver` method.  It takes a `DriverConfig` object, a number representing the driver, and platform-specific settings.  The `DriverConfig` contains information about the pulse and hold times and power settings for the coil. The number refers to the unique identifier for this driver on the Spike system. platform_settings may contain various Spike specific configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/spike.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_driver(config: mpf.core.platform.DriverConfig, number: str, platform_settings: dict)\n```\n\n----------------------------------------\n\nTITLE: Configuring Step Stick Stepper in MPF (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to define a Step Stick stepper in MPF, including setting up digital outputs for direction, step, and enable signals. It also shows how to configure a homing switch and define named positions for the stepper. Platform settings for adjusting stepper speed (low_time and high_time) are also included.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/stepstick.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#config_version=5\nhardware:\n  stepper_controllers: step_stick\ndigital_outputs:\n  c_direction:\n    number: 1\n    type: driver\n  c_step:\n    number: 2\n    type: driver\n  c_enable:\n    number: 3\n    type: driver\nswitches:\n  s_home:\n    number: 1\nsteppers:\n  stepper1:\n    number: c_direction:c_step:c_enable   # enable is optional\n    homing_mode: switch\n    homing_switch: s_home\n    named_positions:\n      10: test_00\n      20: test_01\n      50: test_10\n    platform_settings:  # optional speed settings\n      low_time: 20ms\n      high_time: 20ms\n```\n\n----------------------------------------\n\nTITLE: Set Trough Eject Target to Plunger\nDESCRIPTION: This configures the trough to eject balls to the plunger lane. The `eject_targets` setting of the `bd_trough` ball device is set to the name of the plunger lane ball device (in this case, `bd_plunger`).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/auto_manual.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n```\n\n----------------------------------------\n\nTITLE: Configuring MMA8451 Accelerometer with YAML in MPF\nDESCRIPTION: This snippet demonstrates the YAML configuration for an MMA8451 accelerometer within the MPF hardware and accelerometer sections. It configures the accelerometer on I2C bus 1 with address 0x1D (29 decimal), sets the leveling parameters, and specifies the hardware platform for the accelerometer.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/mma8451.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  accelerometers: mma8451\naccelerometers:\n  my_accelerometer:\n    level_x: 0\n    level_y: 0\n    level_z: 1\n    number: 1-29\n```\n\n----------------------------------------\n\nTITLE: Adding a widget to a specific display target (YAML)\nDESCRIPTION: This snippet shows how to add a reusable widget to a specific display target using the `widget_player:` section of an MPF config file. When the event *some_event* is posted, the widget *laughing_jackal* is added on top of whatever slide is currently being shown on the display called *display1*.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_player:\n  some_event:\n    laughing_jackal:\n      target: display1\n```\n\n----------------------------------------\n\nTITLE: End Mode on Skillshot Hit or Playfield Activation\nDESCRIPTION: This configuration stops the skillshot mode when the player hits any skillshot target or when the playfield becomes active after the ball is launched. A delay is added to the playfield active event to ensure that the `skillshot_lit_hit` event is processed before the mode ends, preventing the score from not being awarded.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_auto_rotate.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: skillshot_with_auto_rotate\nevent_player:\n  # Add these lines after timer_skillshot_rotate_stopped (defined above)\n  skillshot_hit: stop_mode_skillshot\n  playfield_active: stop_mode_skillshot|1s\n```\n\n----------------------------------------\n\nTITLE: Configure Flasher Light in MPF\nDESCRIPTION: This snippet shows how to configure a flasher as a light in MPF, linking it to a previously defined coil.  It uses the 'drivers' platform, indicating that the flasher is controlled via a driver board. This assumes the coil is configured as flasher_coil_4.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/flashers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  flasher_4:\n    number: flasher_coil_4\n    platform: drivers\n```\n\n----------------------------------------\n\nTITLE: Configure RGB DMD with SmartMatrix (FAST Pinball)\nDESCRIPTION: This YAML snippet configures an RGB DMD using the SmartMatrix interface in MPF. It sets the hardware type to 'smartmatrix' and configures a SmartMatrix instance with the specified COM port, baud rate, and cookie settings.\nDependencies: MPF, FAST Pinball hardware\nExpected input: Valid COM port (e.g., com12)\nOutput: Configures the RGB DMD for use with MPF\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/rgb_dmd.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  rgb_dmd: smartmatrix\nsmartmatrix:\n  smartmatrix_1:\n    port: com12\n    baud: 4000000\n    old_cookie: false\n```\n\n----------------------------------------\n\nTITLE: Configure Coin Switches and Pricing Tiers in MPF (YAML)\nDESCRIPTION: Configures coin switches to map physical coin inputs to monetary values, defines pricing tiers that specify the number of credits awarded per amount of currency inserted, sets credit limits and expiration, and configures text strings for free play and credit display. The 'switches' section maps monetary values to the credit switches in your machine.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# in your machine wide config\nswitches:\n  s_coin_left:\n    number:\n  s_service_coin:\n    number:\ncredits:\n  max_credits: 12\n  free_play: false\n  service_credits_switch: s_service_coin\n  switches:\n    - switch: s_coin_left\n      type: money\n      value: .25\n  pricing_tiers:\n    - price: .50\n      credits: 1\n    - price: 2\n      credits: 5\n  fractional_credit_expiration_time: 15m\n  credit_expiration_time: 2h\n  persist_credits_while_off_time: 1h\n  free_play_string: FREE PLAY\n  credits_string: CREDITS\n```\n\n----------------------------------------\n\nTITLE: Installing MPF using Pip\nDESCRIPTION: This snippet demonstrates how to install the latest pre-release version of MPF (0.80) using pip within a Python virtual environment. It installs the 'mpf' package with the '--pre' flag to include pre-release versions. Requires an active Python 3.8-3.12 virtual environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install mpf --pre\n```\n\n----------------------------------------\n\nTITLE: Updating position_switches Configuration (New way)\nDESCRIPTION: This snippet shows the new way of defining `position_switches` in MPF config version 6. The `!!omap` tag is removed, and the dashes in front of the keys are also removed. The keys now directly define the switch names. This new version requires no special tags to preserve the order.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/config_v6.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nposition_switches:\n  up: s_position_up\n  down: s_position_down\n```\n\n----------------------------------------\n\nTITLE: Manually Advancing Shows with show_player (YAML)\nDESCRIPTION: This example demonstrates how to use `manual_advance: true` in the `show_player:` section to control show progression manually. The show will only advance to the next step when the `some_advance_event` is posted, providing step-by-step control.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/show_player.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  some_event:\n    show_1:\n      manual_advance: true\n  some_advance_event:\n    show_1:\n      action: advance\n```\n\n----------------------------------------\n\nTITLE: Configure Machine-Wide Prerequisites for GADGET Targets in MPF\nDESCRIPTION: This YAML configuration sets up the machine-wide prerequisites for the GADGET targets feature, including defining switches for the targets, flippers, and trough, as well as coils for flippers and ball ejection.  It also configures lights for the GADGET letters and the lockdown bar, and defines player variables for tracking available and earned gadgets. The configuration sets up the base hardware and player state necessary for the GADGET mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n\nmodes:\n  - gadget\n\nplayer_vars:\n  gadgets_available:\n    initial_value: 0\n  gadgets_earned:\n    initial_value: 0\n\nswitches:\n  s_left_flipper:\n    number: 0\n    tags: left_flipper, playfield_active\n  s_right_flipper:\n    number: 71\n    tags: right_flipper\n  s_credit:\n    number: 6\n    tags: start\n  s_outhole:\n    number: 8\n    tags:\n  s_gadget_g1:\n    number: 17\n    tags: gadget_targets\n  s_gadget_a:\n    number: 18\n    tags: gadget_targets\n  s_gadget_d:\n    number: 19\n    tags: gadget_targets\n  s_gadget_g2:\n    number: 22\n    tags: gadget_targets\n  s_gadget_e:\n    number: 23\n    tags: gadget_targets\n  s_gadget_t:\n    number: 24\n    tags: gadget_targets\n  s_trough_6:\n    number: 33\n    tags:\n  s_trough_5:\n    number: 36\n    tags:\n  s_trough_4:\n    number: 37\n    tags:\n  s_trough_3:\n    number: 38\n    tags:\n  s_trough_2:\n    number: 39\n    tags:\n  s_trough_1:\n    number: 40\n    tags:\n  s_start_button:\n    number: 99\n    tags: start, playfield_active\n\nkeyboard:\n  s:\n    switch: s_start_button\n\nvirtual_platform_start_active_switches: s_trough_1, s_trough_2, s_trough_3, s_trough_4, s_trough_5, s_trough_6\n\ncoils:\n  c_flipper_left_main:\n    number: 0\n    default_pulse_ms: 20\n  c_flipper_left_hold:\n    number: 1\n    allow_enable: true\n  c_flipper_right_main:\n    number: 2\n    default_pulse_ms: 20\n  c_flipper_right_hold:\n    number: 3\n    allow_enable: true\n  c_trough_eject:\n    number: 4\n    allow_enable: true\n  c_ball_eject:\n    number: c12\n    label:\n    tags:\n    default_pulse_ms: 20\n  c_outhole:\n    number: c14\n    label:\n    tags:\n    default_pulse_ms: 20\n\nlights:\n  l_gadget_g1:\n    number: 5\n    tags: gadget_letter\n  l_gadget_a:\n    number: 6\n    tags: gadget_letter\n  l_gadget_d:\n    number: 7\n    tags: gadget_letter\n  l_gadget_g2:\n    number: 8\n    tags: gadget_letter\n  l_gadget_e:\n    number: 9\n    tags: gadget_letter\n  l_gadget_t:\n    number: 10\n    tags: gadget_letter\n  l_lockdown_bar:\n    number: 11\n\nball_devices:\n  bd_drain:\n    ball_switches: s_outhole\n    eject_coil: c_outhole\n    eject_targets: bd_trough\n    tags: drain, outhole\n  bd_trough:\n    ball_switches: s_trough_1, s_trough_2, s_trough_3, s_trough_4, s_trough_5\n    eject_coil: c_ball_eject\n    tags: trough, home\n\nplayfields:\n  playfield:\n    default_source_device: bd_trough\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Configuring LEDs in MPF for Stern SPIKE\nDESCRIPTION: This configuration defines several LEDs in the `lights:` section of the machine configuration for a Stern SPIKE system. It demonstrates how to map physical LED addresses to logical light names, including the backbox backlight which has a special address.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/leds.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  backlight:\n    number: 0-0    # 0-0 is the special address for the backlight\n  start_button:\n    number: 1-2\n  tourney_start_button:\n    number: 1-3\n  shoot_again:\n    number: 8-47\n```\n\n----------------------------------------\n\nTITLE: Assert Event Called With Kwargs Python\nDESCRIPTION: This code shows how to mock an event and assert that it has been called with specific keyword arguments (kwargs). This is useful for verifying that events are being triggered with the correct data.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.mock_event('jackpot')\n\nself.post_event('jackpot', count=1, first_time=True)\nself.assertEventCalled('jackpot')  # This will pass\nself.assertEventCalledWith('jackpot', count=1, first_time=True)  # This will also pass\nself.assertEventCalledWith('jackpot', count=1, first_time=False)  # This will fail\n```\n\n----------------------------------------\n\nTITLE: Sound Pool Configuration Example\nDESCRIPTION: This YAML configuration demonstrates how to define sound pools with different types (random_force_all, random, sequence), tracks (voice, sfx), and sounds. It also shows how to assign weights to sounds within a pool and how to use preload/on_demand loading. This config shows example usages of sound pools for drain callouts, slingshot sounds and target completion sounds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sound_pools.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsound_pools:\n  drain_callout:\n    type: random_force_all\n    track: voice\n    sounds:\n      - drain_01\n      - drain_02\n      - drain_03\n      - drain_04\n  slingshot:\n    load: preload\n    type: random\n    track: sfx\n    sounds:\n      - slingshot_01|5\n      - slingshot_02|3\n      - slingshot_03|2\n  target_completion:\n    load: on_demand\n    type: sequence\n    track: sfx\n    sounds:\n      - target_completion_01\n      - target_completion_02\n      - target_completion_03\n```\n\n----------------------------------------\n\nTITLE: Adding Display Configuration - YAML\nDESCRIPTION: This snippet demonstrates how to configure a display named \"window\" and set its dimensions (width and height) within the `displays` section of the machine configuration file. This is a fundamental step in setting up a display for MPF-MC.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/lcd.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  window:\n    width: 800\n    height: 600\n```\n\n----------------------------------------\n\nTITLE: Overwriting Default Tilt Slide Player\nDESCRIPTION: This example demonstrates how to overwrite the default slide_player in a custom tilt mode config file to use custom slides for tilt warnings and the final tilt event.  It defines slide_player hooks for 'tilt_warning_1', 'tilt_warning_2', 'tilt', and 'tilt_clear' events, using custom slides named 'tilt_warning' and 'tilt_splash'. The slide player is overwritten using the `_overwrite: True` setting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/tilt_mode.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: modes/tilt/config/tilt.yaml\nslide_player:\n  _overwrite: True # overwrite the default slide_player from tilt mode\n\n  tilt_warning_1: # event name\n    tilt_warning: # slide name\n      expire: 1s\n      tokens:\n        warning_number: 1\n\n  tilt_warning_2:\n    tilt_warning:\n      expire: 1s\n      tokens:\n        warning_number: 2\n\n  tilt:\n    tilt_splash:\n      action: play\n\n  tilt_clear:\n    tilt_splash:\n      action: remove\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Show Triggering Based on Logic Block State\nDESCRIPTION: This YAML snippet demonstrates how to trigger shows based on the state of a logic block using conditional events. It uses `devices.counters.my_counter.value` to check the counter's value and trigger different shows based on the result.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/integrating_logic_blocks_and_shows.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\nshow_player:\n  some_other_event{devices.counters.my_counter.value==0}: my_show_initial\n  some_other_event{devices.counters.my_counter.value==1}: my_show_once_hit\n  some_other_event{devices.counters.my_counter.value==2}: my_show_twice_hit\n```\n\n----------------------------------------\n\nTITLE: Servo Reset Events Configuration YAML\nDESCRIPTION: This example shows how to configure the `reset_events:` setting to specify which events will cause the servo to move to its reset position.  In this configuration, the `ball_starting` event is removed from the default list of reset events, so the servo will not reset on ball start.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/servos.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreset_events: machine_reset_phase_3, ball_will_end, service_mode_entered\n```\n\n----------------------------------------\n\nTITLE: Accessing Shots in MPF using self.machine.shots\nDESCRIPTION: This snippet shows how to access shot devices within the Mission Pinball Framework (MPF).  Shots are stored in the `self.machine.shots` device collection. Accessing a shot by name, like 'foo', can be done either via attribute access (`self.machine.shots.foo`) or dictionary access (`self.machine.shots['foo']`).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/shots.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Pricing Tiers Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates a `pricing_tiers:` configuration, mapping currency amounts to credit values. It defines two pricing tiers: one for a standard credit price and another for a discounted bulk purchase, enabling flexible credit pricing in MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/credits.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncredits:\n   # ...\n  pricing_tiers:\n    - price: .50\n      credits: 1\n    - price: 2\n      credits: 5\n```\n\n----------------------------------------\n\nTITLE: Random Event Player Configuration Example (Global)\nDESCRIPTION: This example shows how to configure a random_event_player in the global machine configuration. It defines an event `play_random_event_global` that randomly triggers one of the `event1`, `event2`, or `event3` events. The `scope` is set to `machine`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/random_event_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrandom_event_player:\n  play_random_event_global:\n    scope: machine\n    events:\n      - event1\n      - event2\n      - event3\n```\n\n----------------------------------------\n\nTITLE: Installing uvloop with pip\nDESCRIPTION: This snippet shows how to install `uvloop` using `pip3`. Uvloop enhances I/O operation performance, which reduces latency and increases throughput. This keeps the game responsive, especially on Linux systems.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/finalization/software.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip3 install uvloop\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulse Spacing for PSUs in MPF\nDESCRIPTION: This code snippet shows how to configure the `release_wait_ms` setting for a power supply unit (PSU) in MPF. This setting introduces a delay between coil pulses on the same PSU, providing it with 'breathing room' and preventing potential issues caused by rapid consecutive pulses. The default value is 10ms.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/voltages_and_power/power_management.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npsus:\n  default:\n    voltage: 48\n    release_wait_ms: 50    # defaults to 10ms\n```\n\n----------------------------------------\n\nTITLE: Defining Servo Devices in MPF (YAML)\nDESCRIPTION: This snippet shows how to define servo devices in the `servos:` section of your MPF machine config. It includes configuration options like `servo_min`, `servo_max`, `positions` (mapping servo values to events), `reset_position`, `reset_events`, `speed_limit`, `acceleration_limit`, and `number` (the channel on the Maestro).  Servo positions are controlled via floating point values between 0.0 and 1.0.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pololu_maestro.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nservos:\n  servo1:\n    servo_min: 0.2\n    servo_max: 0.8\n    positions:\n      0.1: servo1_down\n      0.9: servo1_up\n    reset_position: 0.5\n    reset_events: reset_servo1\n    speed_limit: 0.5\n    acceleration_limit: 0.5\n    number: 1\n  servo2:\n    positions:\n      0.2: servo2_left\n      1.0: servo2_home\n    reset_position: 1.0\n    reset_events: reset_servo2\n    number: 2\n```\n\n----------------------------------------\n\nTITLE: Create a Shot Profile for Top Lanes in MPF\nDESCRIPTION: This snippet creates a shot profile for the top lanes. The profile starts with the light off and turns it on when the shot is hit, which is the opposite of typical pinball parlance.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/rollover_lanes_with_lane_change.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshot_profiles:\n  top_lane_profile:\n    states:\n      - name:\n        show: off\n      - name: hit\n        show: on\n```\n\n----------------------------------------\n\nTITLE: Enabling Flippers via Driver Configuration in YAML\nDESCRIPTION: This snippet configures a digital output to enable flippers using a driver. It specifies the driver number, type, and the events that trigger the flippers to enable and disable. The enable_events and disable_events parameters control when the flippers are active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/snux.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndigital_outputs:\n  flipper_enable_relay:\n    number: c23\n    type: driver\n    enable_events: ball_started\n    disable_events: ball_will_end\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Widget Styles in MPF\nDESCRIPTION: This snippet demonstrates how to apply multiple styles to a single widget. The styles `warning_text`, `bottom_left`, and `hurryup` are defined and then applied to a text widget. The order of the styles matters, as later styles can overwrite properties defined in earlier styles. In this example, the \"Hurry!\" text will be anchored at the bottom left, size 12 and red.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/widget_styles.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nwidget_styles:\n  warning_text:\n    font_size: 12\n    color: yellow\n  bottom_left:\n    anchor_x: left\n    anchor_y: bottom\n    x: 5\n    y: 5\n  hurryup:\n    color: red\nwidgets:\n  timer_runout:\n    - type: text\n      text: Hurry!\n      style: warning_text, bottom_left, hurryup\n```\n\n----------------------------------------\n\nTITLE: BCP Class Definition (Python)\nDESCRIPTION: Defines the `Bcp` class within the `mpf.core.bcp.bcp` module.  This class inherits from `MpfController` and represents the core BCP module in MPF. It facilitates communication between MPF and other systems via the BCP protocol.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/bcp.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass mpf.core.bcp.bcp.Bcp(machine: MachineController)\n\nBases: `mpf.core.mpf_controller.MpfController`\n```\n\n----------------------------------------\n\nTITLE: Configuring Settings for Service Mode in YAML\nDESCRIPTION: This YAML snippet shows how to configure a setting called `replay_score` for use in service mode. It defines the label displayed in service mode, possible values with their labels, the default value, the data type of the value (`int`), and the sorting order in service mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/settings.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  replay_score:\n    label: Replay Score\n    values:\n      500000: \"500000 (default)\"\n      1000000: \"1000000\"\n      1500000: \"1500000\"\n    default: 500000\n    key_type: int\n    sort: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Fliptronics Coils in MPF (YAML)\nDESCRIPTION: This example demonstrates how to configure Fliptronics coils in MPF. You can use either `C` followed by the number or the four-letter code (e.g., `FLRM`, `FLLH`) indicating the output connection from the operator's manual.  `allow_enable: true` indicates that the coil can be enabled.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machines/wpc.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_flipper_left_main:\n    number: fllm\n    default_pulse_ms: 30\n  c_flipper_left_hold:\n    number: fllh\n    allow_enable: true\n  c_flipper_right_main:\n    number: flrm\n    default_pulse_ms: 30\n  c_flipper_right_hold:\n    number: flrh\n    allow_enable: true\n  c_vanish_magnet:\n    number: c35\n    allow_enable: true\n  c_loop_post_diverter:\n    number: c36\n    allow_enable: true\n```\n\n----------------------------------------\n\nTITLE: Configure RPi Platform in MPF\nDESCRIPTION: This YAML configuration example shows how to configure the `rpi` platform in MPF, along with sample configurations for switches, coils, and servos connected to the Raspberry Pi. It defines the IP address, port, and GPIO numbers for various components.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/rpi.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: rpi\nraspberry_pi:\n  ip: localhost\n  port: 8888\nswitches:\n  s_switch_8:\n    number: 8\n  s_switch_7:\n    number: 7\ncoils:\n  output_2:\n    number: 2\n    default_pulse_ms: 1000\nservos:\n  servo_26:\n    number: 26\n```\n\n----------------------------------------\n\nTITLE: Displaying Awards using Slides and Event Player in MPF\nDESCRIPTION: This snippet configures event and slide players to display awards using slides or videos. It defines events triggered when each slide is removed, triggering the end of the mystery award and configures slides with a video to show when each random award is granted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/mystery_award.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nevent_player:\n  slide_award_1_slide_removed: end_mystery\n  slide_award_2_slide_removed: end_mystery\n  slide_award_3_slide_removed: end_mystery\n  slide_award_4_slide_removed: end_mystery\n\nslide_player:\n  mystery_award_1_event:\n    award_1_slide:\n      expire: 5s\n  mystery_award_2_event:\n    award_2_slide:\n      expire: 5s\n  mystery_award_3_event:\n    award_3_slide:\n      expire: 5s\n  mystery_award_4_event:\n    award_4_slide:\n      expire: 5s\n\nslides:\n  award_1_slide:\n    - type: video\n      video: award_1\n  award_2_slide:\n    - type: video\n      video: award_2\n  award_3_slide:\n    - type: video\n      video: award_3\n  award_4_slide:\n    - type: video\n      video: award_4\n```\n\n----------------------------------------\n\nTITLE: Add Text and Rectangle Widgets to Slide (YAML)\nDESCRIPTION: This snippet adds a text widget and a rectangle widget to the existing slide configuration. The text widget displays the machine's title, and the rectangle widget creates a border around the DMD.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/rgb_dmd.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  window_slide_1:\n    - type: display\n      effects:\n        - type: color_dmd\n      width: 512\n      height: 128\n    - type: text\n      text: MISSION PINBALL FRAMEWORK\n      anchor_y: top\n      y: top-3\n      font_size: 30\n      color: white\n    - type: rectangle\n      width: 514\n      height: 130\n      color: 444444\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Correction Profile in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure a color correction profile in MPF to compensate for color imbalances in lights. It includes settings for `whitepoint`, `gamma`, `linear_slope`, and `linear_cutoff`. This profile can be applied to all lights or to specific lights.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/light_settings.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlight_settings:\n  default_color_correction_profile: correction_profile_less_red\n  color_correction_profiles:\n    correction_profile_less_red:\n      whitepoint: [0.9, 1.0, 1.0]\n      gamma: 2.5\n      linear_slope: 1.0\n      linear_cutoff: 0.0\n```\n\n----------------------------------------\n\nTITLE: Sound Pool with Spaces in Sound Names\nDESCRIPTION: This example demonstrates how to include sounds with spaces in their names within a sound pool. The sound name must be enclosed in quotes to be properly parsed by the MPF configuration. This ensures that sounds with spaces are correctly recognized and played.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sound_pools.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsound_pools: drain_callout: type: random_force_all track: voice\n    sounds: - drain_01 - drain_02 - \"drain 03\" # example of a sound with\n    a space in its name using quotes - drain_04\n```\n\n----------------------------------------\n\nTITLE: Sound Player Configuration in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to use the `sound_player` to trigger sound playback based on game events. It shows how to play sound files directly by referencing their file names (without extension) and how to configure properties like `bus`, `fade_in`, and `fade_out` for more control over the playback.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/sound.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nsound_player:\n    mode_frenzy_started:\n        frenzy_background_music:\n            bus: music\n            fade_in: 500ms\n            fade_out: 1s\n    drop_targets_complete: small_explosion_one\n```\n\n----------------------------------------\n\nTITLE: Configure Virtual Platform Start Active Switches in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to define switches and configure which switches should start as active when using the virtual platform. It includes switch definitions and the `virtual_platform_start_active_switches` section to specify the initially active switches. This is used to simulate balls present at startup for testing purposes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/virtual_platform_start_active_switches.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_ball_switch1:\n    number:\n  s_ball_switch2:\n    number:\n  s_ball_switch3:\n    number:\n# Start with two (virtual) balls\nvirtual_platform_start_active_switches:\n  - s_ball_switch1\n  - s_ball_switch2\n```\n\n----------------------------------------\n\nTITLE: Scanning FAST Hardware using mpf hardware scan\nDESCRIPTION: This snippet demonstrates how to use the `mpf hardware scan` command to identify connected FAST Pinball boards and their firmware versions. It helps diagnose wiring issues and firmware mismatches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/troubleshooting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mpf hardware scan\n\nNET CPU: NET FP-CPU-002-1 01.03\nRGB CPU: RGB FP-CPU-002-1 00.89\nDMD CPU: DMD FP-CPU-002-1 00.88\n\nBoards:\nBoard 0 - Model: FP-I/O-3208-2    Firmware: 01.00 Switches: 32 Drivers: 8\nBoard 1 - Model: FP-I/O-0804-1    Firmware: 01.00 Switches: 8 Drivers: 4\nBoard 2 - Model: FP-I/O-1616-2    Firmware: 01.00 Switches: 16 Drivers: 16\nBoard 3 - Model: FP-I/O-1616-2    Firmware: 01.00 Switches: 16 Drivers: 16\n```\n\n----------------------------------------\n\nTITLE: Override Slide Settings with Slide Player in YAML\nDESCRIPTION: Shows how to override default slide settings using the slide player. In this example, the `target` and `priority` of *slide_1* are adjusted when triggered by *some_event*. The slide itself should be defined elsewhere.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/slide_player.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n#! slides:\n#!   slide_1: []\n#! displays:\n#!   display1:\n#!     width: 1366\n#!     height: 768\n#!     default: true\nslide_player:\n  some_event:\n    slide_1:\n      target: display1\n      priority: 200\n```\n\n----------------------------------------\n\nTITLE: Reward Player for Skillshot Hit\nDESCRIPTION: This snippet uses the variable player to award points when the player hits the lit skillshot target.  The `skillshot_lit_hit` event is triggered by the shot group when any shot is hit and in the 'lit' state, adding to the player's score.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_auto_rotate.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: skillshot_with_auto_rotate\nvariable_player:\n  skillshot_lit_hit:\n    score: 20_000\n```\n\n----------------------------------------\n\nTITLE: Running MPF Command - DOS\nDESCRIPTION: This DOS command shows how to run MPF with the `-t` and `-b` options. The `-t` option enables text-based UI and `-b` automatically boots the machine.  Replace `C:\\your_machine\\mpf` with the correct path to your `mpf.exe` executable.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_17\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\\\your_machine\\\\mpf -t -b\n```\n\n----------------------------------------\n\nTITLE: Configure Event Player for 'Friendly Neighbor' Behavior (YAML)\nDESCRIPTION: This snippet configures the event player to implement the 'friendly neighbor' behavior. It defines conditional events that trigger based on the state of the 'gadget_accrual' accrual device. When a player hits a target that is already complete, the code checks if neighboring targets are incomplete and triggers events to complete them.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: gadget\nevent_player:\n  #plus one gadget when accrual is complete\n  award_gadget:\n    - gadgets_earned\n    - gadgets_available\n\n  s_gadget_g1_active:\n    #if the g is hit, and unlit\n    - gadget_g1_complete{device.accruals.gadget_accrual.value[0]==False}\n    #award a if we already have g1\n    - gadget_a_complete{device.accruals.gadget_accrual.value[0]==True}\n  s_gadget_a_active:\n    #if a is hit and unlit\n    - gadget_a_complete{device.accruals.gadget_accrual.value[1]==False}\n    #award g1 if we already have a\n    - gadget_g1_complete{device.accruals.gadget_accrual.value[0]==False and device.accruals.gadget_accrual.value[1]==True}\n    #award d if we already have a and g1\n    - gadget_d_complete{device.accruals.gadget_accrual.value[0]==True and device.accruals.gadget_accrual.value[1]==True and device.accruals.gadget_accrual.value[2]==False}\n  s_gadget_d_active:\n    - gadget_d_complete{device.accruals.gadget_accrual.value[2]==False}\n    - gadget_a_complete{device.accruals.gadget_accrual.value[1]==False and device.accruals.gadget_accrual.value[2]==True}\n    - gadget_g2_complete{device.accruals.gadget_accrual.value[1]==True and device.accruals.gadget_accrual.value[2] and device.accruals.gadget_accrual.value[3]==False}\n  s_gadget_g2_active:\n    - gadget_g2_complete{device.accruals.gadget_accrual.value[3]==False}\n    - gadget_d_complete{device.accruals.gadget_accrual.value[2]==False and device.accruals.gadget_accrual.value[3]==True}\n    - gadget_e_complete{device.accruals.gadget_accrual.value[2]==True and device.accruals.gadget_accrual.value[3]==True and device.accruals.gadget_accrual.value[4]==False}\n  s_gadget_e_active:\n    - gadget_e_complete{device.accruals.gadget_accrual.value[4]==False}\n    - gadget_g2_complete{device.accruals.gadget_accrual.value[3]==False and device.accruals.gadget_accrual.value[4]==True}\n    - gadget_t_complete{device.accruals.gadget_accrual.value[3]==True and device.accruals.gadget_accrual.value[4]==True and device.accruals.gadget_accrual.value[5]==False}\n  s_gadget_t_active:\n    - gadget_t_complete{device.accruals.gadget_accrual.value[5]==False}\n    - gadget_e_complete{device.accruals.gadget_accrual.value[4]==False and device.accruals.gadget_accrual.value[5]==True}\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Slides in a show config YAML\nDESCRIPTION: This snippet illustrates how to dynamically define slides within a show configuration. The slide is created and displayed as part of a specific step within the show.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/creating_slides.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n#! show_player:\n#!   start_show: my_show\n##! show: my_show\n# show_version=5\n- time: 0\n  slides:\n    my_show_slide_1:\n    - type: text\n      text: MISSION PINBALL\n      color: red\n    - type: rectangle\n      width: 128\n      height: 32\n##! test\n#! post start_show\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"MISSION PINBALL\"\n```\n\n----------------------------------------\n\nTITLE: Configure base.yaml to display player score\nDESCRIPTION: This YAML configuration defines a base mode that displays player score, current player, and ball number on a slide. It uses text widgets with dynamic variables (score, number, ball) and specific positioning using x, y, anchor_x, and anchor_y properties.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/14_add_a_mode.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: base\n#config_version=5\nmode:\n  start_events: ball_starting\n  priority: 100\n\nslide_player:\n  mode_base_started:\n    widgets:\n      - type: text\n        text: (score)\n        number_grouping: true\n        min_digits: 2\n        font_size: 100\n      - type: text\n        text: PLAYER (number)\n        y: 10\n        x: 10\n        font_size: 50\n        anchor_x: left\n        anchor_y: bottom\n      - type: text\n        text: BALL (ball)\n        y: 10\n        x: right-10\n        anchor_x: right\n        anchor_y: bottom\n        font_size: 50\n##! test\n#! start_game\n#! assert_mode_running base\n#! assert_text_on_top_slide \"00\"\n#! assert_text_on_top_slide \"PLAYER 1\"\n#! assert_text_on_top_slide \"BALL 1\"\n```\n\n----------------------------------------\n\nTITLE: Timer Configuration and Displaying Timer Value on a Slide (Minutes and Seconds)\nDESCRIPTION: This code snippet showcases how to configure a countdown timer and display its remaining time in minutes and seconds on a slide. It demonstrates calculating the minutes and seconds from the timer's tick value using the `variable_player` and displaying them using text widgets in a slide. This involves dividing the timer ticks by 60 to determine the remaining minutes and using the modulus operator (%) to get the remaining seconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/timers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: your_mode\n# in your mode\ntimers:\n  your_timer:\n    start_value: 180\n    end_value: 0\n    control_events:\n      - action: start\n        event: mode_your_mode_started\n\nvariable_player:\n  timer_your_timer_tick:\n    your_timer_minutes:\n      int: device.timers.your_timer.ticks / 60\n      action: set\n    your_timer_seconds:\n      int: device.timers.your_timer.ticks % 60\n      action: set\n\nslides:\n  show_timer:\n    widgets:\n    - type: text\n      text: 'Time Left: (player|your_timer_minutes)'\n      font_size: 72\n      anchor_x: left\n      anchor_y: bottom\n      x: 100\n      y: 906\n      z: 2\n    - type: text\n      text: ':'\n      font_size: 72\n      anchor_x: left\n      anchor_y: bottom\n      x: 350\n      y: 906\n      z: 2\n    - type: text\n      text: '(player|your_timer_seconds)'\n      min_digits: 2\n      font_size: 72\n      anchor_x: left\n      anchor_y: bottom\n      x: 365\n      y: 906\n      z: 2\n\nslide_player:\n  mode_your_mode_started: show_timer\n##! test\n#! start_game\n#! start_mode your_mode\n#! advance_time_and_run .1\n#! assert_text_on_top_slide 0\n#! advance_time_and_run 1\n#! assert_text_on_top_slide 100\n```\n\n----------------------------------------\n\nTITLE: Restore Serial Port on Spike 2\nDESCRIPTION: This command restores the original serial port on a Spike 2 system after capturing netbus traffic. It moves the previously renamed serial port back to its original location.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/troubleshooting.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nmv /dev/ttymxc1_real /dev/ttymxc1\n```\n\n----------------------------------------\n\nTITLE: Defining multiple pop bumper switches with a common tag - YAML\nDESCRIPTION: This snippet demonstrates how to define three pop bumper switches and assign them the same tag, \"mygame_popbumper\".  This allows for collective control and event handling for all pop bumpers using the tag. The `number` field specifies the physical switch number connected to the pinball machine's hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/tags.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  mygame_popbumper_left:\n    number: 55\n    tags: mygame_popbumper\n  mygame_popbumper_top:\n    number: 56\n    tags: mygame_popbumper\n  mygame_popbumper_right:\n    number: 57\n    tags: mygame_popbumper\n```\n\n----------------------------------------\n\nTITLE: Configuring 6_mil and 3_mil achievements\nDESCRIPTION: This snippet shows the configuration for the '6_mil' and '3_mil' achievements. It demonstrates how to link these achievements so that when one is awarded, the other is also spotted (set to complete). This is achieved by adding the events posted when one achievement is started to the complete events for the other.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/TAF_mansion_awards.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mansion_awards\nachievements:\n  6_mil:\n    show_tokens:\n      lights: 6_mil\n    show_when_selected: flash\n    show_when_completed: on\n    events_when_started: award_6_mil    # instant points award & plays shows, also spots 3 mil\n    enable_events: initialize_mansion, reset_mansion\n    complete_events: award_6_mil, award_3_mil\n    reset_events: reset_mansion\n  3_mil:\n    show_tokens:\n      lights: 3_mil\n    show_when_selected: flash\n    show_when_completed: on\n    events_when_started: award_3_mil    # instant points award & plays shows, also spots 6 mil\n    enable_events: initialize_mansion, reset_mansion\n    complete_events: award_3_mil, award_6_mil\n    reset_events: reset_mansion\n```\n\n----------------------------------------\n\nTITLE: Enabling Mechanical Eject in YAML\nDESCRIPTION: This snippet adds the `mechanical_eject: true` setting to the plunger ball device. This tells MPF that a ball might disappear from the plunger lane due to manual spring ejection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/auto_manual.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    eject_coil: c_plunger\n    mechanical_eject: true\n```\n\n----------------------------------------\n\nTITLE: Defining the Claw Custom Code Class in MPF\nDESCRIPTION: This code snippet defines a custom code class called `Claw` in the Mission Pinball Framework (MPF). It inherits from `mpf.core.custom_code.CustomCode` and provides functionality for controlling a claw mechanism in a pinball machine. The class utilizes MPF's switch controller, coil controller, and event system to manage claw movement, ball pickup, and ball release.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/machine_code.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom mpf.core.custom_code import CustomCode\n\n\nclass Claw(CustomCode):\n\n    def on_load(self):\n\n        self.auto_release_in_progress = False\n\n        # if the elevator switch is active for more than 100ms, that means\n        # a ball is there, so we want to get it and deliver it to the claw\n        self.machine.switch_controller.add_switch_handler(\n            's_elevator_hold', self.get_ball, ms=100)\n\n        # This is a one-time thing to check to see if there's a ball in\n        # the elevator when MPF starts, and if so, we want to get it.\n        if self.machine.switch_controller.is_active('s_elevator_hold'):\n            self.auto_release_in_progress = True\n            self.get_ball()\n\n        # We'll use the event 'light_claw' to light the claw, so in the\n        # future all we have to do is post this event and everything else\n        # will be automatic.\n        self.machine.events.add_handler('light_claw', self.light_claw)\n\n    def enable(self):\n        \"\"\"Enable the claw.\"\"\"\n\n        # move left & right with the flipper switches, and stop moving when\n        # they're released\n\n        self.machine.switch_controller.add_switch_handler(\n            's_flipper_lower_left', self.move_left)\n        self.machine.switch_controller.add_switch_handler(\n            's_flipper_lower_left', self.stop_moving, state=0)\n        self.machine.switch_controller.add_switch_handler(\n            's_flipper_lower_right', self.move_right)\n        self.machine.switch_controller.add_switch_handler(\n            's_flipper_lower_right', self.stop_moving, state=0)\n\n        # release the ball when the launch button is hit\n        self.machine.switch_controller.add_switch_handler(\n            's_ball_launch', self.release)\n\n        # stop moving if the claw hits a limit switch\n        self.machine.switch_controller.add_switch_handler(\n            's_claw_position_1', self.stop_moving)\n\n        # We can use this event for slides to explain what's going on for\n        # the player.\n        self.machine.events.post('claw_enabled')\n\n    def disable(self):\n        \"\"\"Disable the claw.\"\"\"\n\n        self.stop_moving()\n\n        # remove all the switch handlers\n        self.machine.switch_controller.remove_switch_handler(\n            's_flipper_lower_left', self.move_left)\n        self.machine.switch_controller.remove_switch_handler(\n            's_flipper_lower_left', self.stop_moving, state=0)\n        self.machine.switch_controller.remove_switch_handler(\n            's_flipper_lower_right', self.move_right)\n        self.machine.switch_controller.remove_switch_handler(\n            's_flipper_lower_right', self.stop_moving, state=0)\n        self.machine.switch_controller.remove_switch_handler(\n            's_ball_launch', self.release)\n        self.machine.switch_controller.remove_switch_handler(\n            's_claw_position_1', self.stop_moving)\n        self.machine.switch_controller.remove_switch_handler(\n            's_claw_position_1', self.release, state=0)\n        self.machine.switch_controller.remove_switch_handler(\n            's_claw_position_2', self.release)\n\n        self.machine.events.post('claw_disabled')\n\n    def move_left(self):\n        \"\"\"Start the claw moving to the left.\"\"\"\n        # before we turn on the driver to move the claw, make sure we're not\n        # at the left limit\n        if (self.machine.switch_controller.is_active('s_claw_position_2') and\n                self.machine.switch_controller.is_active('s_claw_position_1')):\n            return\n        self.machine.coils['c_claw_motor_left'].enable()\n\n    def move_right(self):\n        \"\"\"Start the claw moving to the right.\"\"\"\n        # before we turn on the driver to move the claw, make sure we're not\n        # at the right limit\n        if (self.machine.switch_controller.is_active('s_claw_position_1') and\n                self.machine.switch_controller.is_inactive('s_claw_position_2')):\n            return\n        self.machine.coils['c_claw_motor_right'].enable()\n\n    def stop_moving(self):\n        \"\"\"Stop the claw moving.\"\"\"\n        self.machine.coils['c_claw_motor_left'].disable()\n        self.machine.coils['c_claw_motor_right'].disable()\n\n    def release(self):\n        \"\"\"Release the ball by disabling the claw magnet.\"\"\"\n        self.disable_claw_magnet()\n        self.auto_release_in_progress = False\n\n        # Disable the claw since it doesn't have a ball anymore\n        self.disable()\n\n    def auto_release(self):\n        \"\"\"Aumatically move and release the ball.\"\"\"\n        # disable the switches since the machine is in control now\n        self.disable()\n\n        # If we're at the left limit, we need to move right before we can\n        # release the ball.\n        if (self.machine.switch_controller.is_active('s_claw_position_2') and\n                self.machine.switch_controller.is_active('s_claw_position_1')):\n            self.machine.switch_controller.add_switch_handler(\n                's_claw_position_1', self.release, state=0)\n            # move right, drop when switch 1 opens\n            self.move_right()\n\n        # If we're at the right limit, we need to move left before we can\n        # release the ball\n        elif (self.machine.switch_controller.is_active('s_claw_position_1') and\n                self.machine.switch_controller.is_inactive('s_claw_position_2')):\n            self.machine.switch_controller.add_switch_handler(\n                's_claw_position_2', self.release)\n            # move left, drop when switch 2 closes\n            self.move_left()\n\n        # If we're not at any limit, we can release the ball now.\n        else:\n            self.release()\n\n    def get_ball(self):\n        \"\"\"Get a ball from the elevator.\"\"\"\n\n        # If there's no game in progress, we're going to auto pickup and\n        # drop the ball with no player input\n\n        if not self.machine.game:\n            self.auto_release_in_progress = True\n\n        # If the claw is not already in the ball pickup position, then move it\n        # to the right.\n        if not (self.machine.switch_controller.is_active('s_claw_position_1') and\n                self.machine.switch_controller.is_inactive('s_claw_position_2')):\n            self.move_right()\n\n            self.machine.switch_controller.add_switch_handler(\n                's_claw_position_1', self.do_pickup)\n\n        # If the claw is in position for a pickup, we can do that pickup now\n        else:\n            self.do_pickup()\n\n    def do_pickup(self):\n        \"\"\"Pickup a ball from the elevator\"\"\"\n        self.stop_moving()\n        self.machine.switch_controller.remove_switch_handler(\n            's_claw_position_1', self.do_pickup)\n        self.enable_claw_magnet()\n        self.machine.coils['c_elevator_motor'].enable()\n        self.machine.switch_controller.add_switch_handler('s_elevator_index',\n                                                          self.stop_elevator)\n\n        # If this is not an auto release, enable control of the claw for the\n        # player\n        if not self.auto_release_in_progress:\n            self.enable()\n\n    def stop_elevator(self):\n        \"\"\"Stop the elevator.\"\"\"\n        self.machine.coils['c_elevator_motor'].disable()\n\n        if self.auto_release_in_progress:\n            self.auto_release()\n\n    def light_claw(self, **kwargs):\n        \"\"\"Lights the claw.\"\"\"\n\n        # Lighting the claw just enables the diverter so that the ball shot\n        # that way will go to the elevator. Once the ball hits the elevator,\n        # the other methods kick in to deliver it to the claw, and then once\n        # the claw has it, the player can move and release it on their own.\n        self.machine.diverters['diverter'].enable()\n\n    def disable_claw_magnet(self):\n        \"\"\"Disable the claw magnet.\"\"\"\n        self.machine.coils['c_claw_magnet'].disable()\n\n    def enable_claw_magnet(self):\n        \"\"\"Enable the claw magnet.\"\"\"\n        self.machine.coils['c_claw_magnet'].enable()\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Player in Base Mode YAML for MPF\nDESCRIPTION: This YAML snippet configures the `light_player` section in the base mode to play the `indy_lanes_complete` light show when the lanes are completed. It sets the speed, loop count, and priority of the light show. The `speed` parameter controls how fast the show runs, `loops` determines how many times it repeats, and `priority` ensures it shows on top of other lighting effects.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/lanes_mode.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  indy_lanes_default_lit_complete:\n    indy_lanes_complete:\n      speed: 20\n      loops: 10\n      priority: 1\n```\n\n----------------------------------------\n\nTITLE: Setting Coil Number with FAST Pinball\nDESCRIPTION: This snippet shows how to configure the `number` parameter for a coil when using FAST Pinball IO boards. The number consists of the board's position in the chain (starting from 0) and the driver output number on that board.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/drivers.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  my_coil:\n    number: 0-0    # first board, driver 0\n  some_other_coil:\n    number: 2-14    # third board, driver 14\n```\n\n----------------------------------------\n\nTITLE: Configuring coil recycle time for PKONE\nDESCRIPTION: This snippet demonstrates how to manually set a coil's recycle time using the `recycle_ms` setting for a coil connected to a PKONE Extension board. If `recycle_ms` is specified, the coil's `recycle:` (true/false) setting is ignored. Requires the `number` and `default_pulse_ms` settings to also be defined.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/drivers.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  slingshot_r:\n    number: 1-4\n    default_pulse_ms: 30\n    platform_settings:\n      recycle_ms: 100\n```\n\n----------------------------------------\n\nTITLE: Setting String Player Variable in YAML\nDESCRIPTION: This snippet shows how to set a string player variable (`current_ladder`) when the `carousel_left_scoop_scene_selected` event occurs. The `action: set` and `string` attributes are used to update the `current_ladder` variable with the value 'Scene 1'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/players.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\nvariable_player:\n  carousel_left_scoop_scene_selected:\n    current_ladder:\n      action: set\n      string: 'Scene 1'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kicking Targets in MPF with YAML\nDESCRIPTION: This snippet demonstrates the YAML configuration for a kicking target in MPF. It defines a switch (s_kicking_target), a coil (c_kicking_target), and a kickback (kicking_target). The switch detects when the target is hit, the coil provides the force to kick it back, and the kickback ties these together to create the kicking target behavior.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/targets/kicking_targets.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_kicking_target:\n    number: 1\ncoils:\n  c_kicking_target:\n    number: 1\n    default_pulse_ms: 10ms\nkickbacks:\n  kicking_target:\n    coil: c_kicking_target\n    switch: s_kicking_target\n```\n\n----------------------------------------\n\nTITLE: Bitmap Font Descriptor List Example (YAML)\nDESCRIPTION: This example demonstrates how to specify a font descriptor using a list in the YAML configuration. It defines the mapping of characters to their positions within the bitmap font image. This method is suitable for monospaced fonts where each character has the same width and height.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/bitmap_fonts.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndescriptor: [ 'abcdefghijklmno', 'pqrstuvwxyz 012', '3456789,.:=<>-+' ]\n```\n\n----------------------------------------\n\nTITLE: Scanning for Connected Boards using mpf hardware scan\nDESCRIPTION: This command scans and lists connected node boards, providing information about the port, board ID, and firmware version.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/connecting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mpf hardware scan\n\nConnected CPUs:\n - Port: com1 at 115200 baud\n -> Board: 0x20 Firmware: 0x10100\n -> Board: 0x21 Firmware: 0x10100\n\nIncand cards:\n - CPU: com1 Board: 0x20 Card: 0 Numbers: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n\nInput cards:\n - CPU: com1 Board: 0x20 Card: 0 Numbers: [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15]\n - CPU: com1 Board: 0x21 Card: 1 Numbers: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]\n\nSolenoid cards:\n - CPU: com1 Board: 0x20 Card: 0 Numbers: [0, 1, 2, 3]\n - CPU: com1 Board: 0x21 Card: 1 Numbers: [12, 13, 14, 15]\n\nLEDs:\n - CPU: com1 Board: 0x21 Card: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Player for Attract Mode\nDESCRIPTION: This snippet configures the slide_player to display the `attract_started` slide when the `mode_attract_started` event is triggered. This event occurs when the attract mode starts in the MPF game engine.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  init_done: welcome_slide\n  mode_attract_started: attract_started\n```\n\n----------------------------------------\n\nTITLE: Configure 'chair_lit_3s' Mode in YAML\nDESCRIPTION: This YAML code configures the 'chair_lit_3s' mode, which is activated when the right inlane is hit, lighting the electric chair for 3 seconds. The mode defines events to start and stop, including a timer that unlights the chair after 3 seconds, and events triggered when either the electric chair or swamp shots are hit. It includes an event player to trigger lighting and unlighting the chair based on mode start and timer completion, managing the temporary electric chair lighting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/TAF_mansion_awards.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: chair_lit_3s\n#config_version=5\nmode:\n  priority: 101\n  start_events: right_inlane_active\n  stop_events: unlight_chair balldevice_electric_chair_ball_enter, balldevice_swamp_kickout_ball_enter, cancel_chair_timer\nevent_player:\n  mode_chair_lit_3s_stopping: unlight_chair\n  mode_chair_lit_3s_started: light_chair\n  timer_unlight_chair_complete: unlight_chair\ntimers:\n  unlight_chair:\n    end_value: 3\n    start_running: true\n```\n\n----------------------------------------\n\nTITLE: Mixing Slide Display Configurations in MPF\nDESCRIPTION: This YAML configuration demonstrates how to mix different configuration styles within the `slide_player`. It shows direct event-to-slide mappings along with event-to-slide mappings with additional options. The `left_lane_hit`, `right_lane_hit`, and `left_ramp_hit` events trigger slides directly, while `right_ramp_hit` triggers a slide with an expire time and target display. Slide and display definitions are commented out. The test section shows how to verify the configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/showing_slides.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  left_lane_hit: good_job\n  right_lane_hit: good_job\n  left_ramp_hit: ramp_champ\n  right_ramp_hit:\n    ramp_hit_slide:\n      expire: 2s\n      target: dmd\n##! test\n#! post right_ramp_hit\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Ramp has been hit\" dmd\n#! advance_time_and_run 3\n#! assert_text_not_on_top_slide \"Ramp has been hit\" dmd\n```\n\n----------------------------------------\n\nTITLE: Displaying Text with 'big' Font in MPF-MC (YAML)\nDESCRIPTION: This snippet demonstrates how to display text on a slide using the pre-configured 'big' font style in MPF-MC. It creates a slide with a text widget, sets the style to 'big', and the text to \"MISSION\". The 'big' font is 10 pixels tall and optimized for DMD displays.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/dmd_fonts.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  my_slide:\n    - type: text\n      style: big\n      text: MISSION\n#! slide_player:\n#!   show_slide_event: my_slide\n##! test\n#! post show_slide_event\n#! advance_time_and_run .1\n#! assert_slide_on_top my_slide\n#! assert_text_on_top_slide MISSION\n```\n\n----------------------------------------\n\nTITLE: Configuring Digital Outputs (P3-ROC)\nDESCRIPTION: This snippet shows how to configure digital outputs for controlling external circuits, such as a motor driver, using the P3-ROC's direct outputs. It configures `motor_left` and `motor_rigth` to use `direct-5` and `direct-6`, setting the `type` to `driver`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/drivers.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndigital_outputs:\n  motor_left:\n    number: direct-5\n    type: driver\n  motor_rigth:\n    number: direct-6\n    type: driver\n```\n\n----------------------------------------\n\nTITLE: Defining a List of Tags for a Coil in MPF (YAML)\nDESCRIPTION: This snippet shows how to define a list of tags for a coil device in an MPF YAML config file. The `tags` setting is configured with a comma-separated list of strings. This example defines a coil named `flipperLeft` with the tags `flipper` and `player`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/lists.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  flipperLeft:\n    number: SD18\n    tags: flipper, player   # this is a list\n```\n\n----------------------------------------\n\nTITLE: Configuring LISY Hardware Sound System in MPF\nDESCRIPTION: This snippet demonstrates how to configure the external LISY hardware sound interface within the `hardware_sound_systems` section of your MPF configuration file.  This configures MPF to use LISY for sound output. Requires the `hardware_sound_systems` section in the config file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/sound.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware_sound_systems:\n  default:\n    label: LISY\n```\n\n----------------------------------------\n\nTITLE: Define Dual Wound Coil - MPF (YAML)\nDESCRIPTION: This snippet defines a dual wound coil, linking the previously defined main and hold coils. The `hold_coil` and `main_coil` parameters reference the names of the coils defined in the `coils` section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/diverters/dual_coil_diverter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndual_wound_coils:\n  c_diverter_dualcoil:\n    hold_coil: c_diverter_upper_right_hold\n    main_coil: c_diverter_upper_right_main\n```\n\n----------------------------------------\n\nTITLE: Defining Tags for Trough Ball Device (YAML)\nDESCRIPTION: This snippet shows how to add tags to the trough ball device to define its function within MPF. The `tags` parameter takes a comma-separated list of tags. The `trough` tag identifies the device as a ball storage. The `home` tag specifies that balls in the trough are in their home position. The `drain` tag indicates that a ball entering the trough is a drain.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_mechanical.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n```\n\n----------------------------------------\n\nTITLE: Configure a Servo in MPF (YAML)\nDESCRIPTION: This snippet configures a servo named `servo1` within the MPF `servos` section. It sets the `number` to 0, indicating that this servo is connected to the first channel on the controller. It requires the `servos:` section to be present in the MPF configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/i2c_servo.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nservos:\n  servo1:\n    number: 0  # first servo on controller\n```\n\n----------------------------------------\n\nTITLE: Configure Flipper Enabling Relay for LISY35 in YAML\nDESCRIPTION: This snippet configures the `flipper_enabling_relay` for LISY35 systems.  It defines a digital output with `number: 16` and `type: driver`. The relay is enabled when the `ball_started` event occurs and disabled when the `ball_will_end` event occurs. This configuration enables the flippers at the start of the ball and disables them at the end.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/flippers_slings_popbumpers.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ndigital_outputs:\n  flipper_enabling_relay:\n    type: driver\n    number: 16\n    enable_events: ball_started\n    disable_events: ball_will_end\n```\n\n----------------------------------------\n\nTITLE: Enable Flipper on Ball Start (YAML)\nDESCRIPTION: This snippet shows how to enable a flipper when the `ball_started` event is posted. It demonstrates the basic syntax for associating an event with a device's enable function in the machine configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/device_control_events.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenable_events: ball_started\n```\n\n----------------------------------------\n\nTITLE: Defining Shot Profile for Lane Lighting\nDESCRIPTION: This snippet defines a shot profile for the lanes that controls their lighting state.  It specifies that the shot does not advance on hit. It defines `off` and `lit` states, where `off` turns the light off, and `lit` makes it flash.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_lane_change.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshot_profiles:\n  skillshot_profile:\n    advance_on_hit: false\n    states:\n      - name: off\n        show: off\n      - name: lit\n        show: flash\n```\n\n----------------------------------------\n\nTITLE: Text Input Widget YAML Configuration\nDESCRIPTION: Example YAML configuration settings for a text_input widget in MPF. This includes settings for defining the character list, maximum characters, initial character, input events, font styles, and alignment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/text_input.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntype: text_input\nkey:\nchar_list:\nmax_chars:\ninitial_char:\nkeep_selected_char:\ndynamic_x:\ndynamic_x_pad:\nshift_left_event:\nshift_right_event:\nselect_event:\nabort_event:\nforce_complete_event:\nfont_size:\nfont_name:\nbold:\nitalic:\nhalign:\nvalign:\n```\n\n----------------------------------------\n\nTITLE: Configuring the Slimer Motor in Ghostbusters (YAML)\nDESCRIPTION: This snippet configures the Slimer motor in the Stern Ghostbusters pinball machine. It defines switches for the home and away positions, digital outputs for forward and backward motor control (using lights in Spike), and the motor itself with position switches and movement commands. The `reset_position` sets the initial Slimer position to 'home'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/motors.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_slimer_home:\n    number: 8-1\n  s_slimer_away:\n    number: 8-2\n\ndigital_outputs:\n  c_slimer_motor_forward:\n    number: 8-3\n    type: light\n  c_slimer_motor_backward:\n    number: 8-4\n    type: light\n\nmotors:\n  ghostbusters_slimer:\n    motor_left_output: c_slimer_motor_forward\n    motor_right_output: c_slimer_motor_backward\n    position_switches: !!omap\n      - home: s_slimer_home\n      - away: s_slimer_away\n    reset_position: home\n    go_to_position:\n      slimer_home: home\n      slimer_away: away\n```\n\n----------------------------------------\n\nTITLE: Defining Trough and Drain Switches in MPF\nDESCRIPTION: This snippet defines the switches used for the drain and trough.  Each switch corresponds to a physical switch in the trough or the drain. The `number` field should match the actual hardware connection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_multiple_switches.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_drain:\n    number: 1\n  s_trough1:\n    number: 2\n  s_trough2:\n    number: 3\n  s_trough3:\n    number: 4\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Bonus Mode (YAML)\nDESCRIPTION: This snippet provides a basic configuration for the bonus mode in MPF, defining display delays, bonus entries with scores, and slide player configurations for displaying bonus information.  It defines bonus entries for `bonus_ramps` and `bonus_math` and their corresponding scores, including calculations that use player variables.\n\nRequires: The 'bonus' mode must be active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/bonus/configuring_bonus.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: bonus\n#config_version=5\nmode_settings:\n  display_delay_ms: 1s\n  hurry_up_delay_ms: 0\n  bonus_entries:\n    - event: bonus_ramps\n      score: 400\n    - event: bonus_math\n      score: 1200 * (current_player.some_variable + 2)\nslide_player:\n  mode_bonus_started: bonus_start_slide\n  bonus_ramps: bonus_ramp_slide\n  bonus_math: bonus_math_slide\n  bonus_total: bonus_total_slide\nslides:\n  bonus_start_slide:\n    widgets:\n      - type: text\n        text: Bonus\n  bonus_ramp_slide:\n    - type: text\n      text: \"Ramps (player|level)\"\n    - type: text\n      text: (score)\n  bonus_math_slide:\n    - type: text\n      text: \"Some variable (player|some_variable)\"\n    - type: text\n      text: (score)\n  bonus_multiplier_slide:\n    - type: text\n      text: \"Multiplier\"\n    - type: text\n      text: \"(multiplier)X\"\n  bonus_total_slide:\n    - type: text\n      text: \"Total Bonus\"\n    - type: text\n      text: (score)\n##! test\n#! start_game\n#! advance_time_and_run 1\n#! drain_all_balls\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Ramps 0\"\n#! assert_text_on_top_slide \"400\"\n#! advance_time_and_run 1\n#! assert_text_on_top_slide \"Some variable 0\"\n#! assert_text_on_top_slide \"2400\"\n#! advance_time_and_run 1\n#! assert_text_on_top_slide \"Total Bonus\"\n#! assert_text_on_top_slide \"2800\"\n#! stop_game 10\n#! advance_time_and_run 1\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tilt Warnings Configuration YAML\nDESCRIPTION: This snippet demonstrates how to use the `settings` dynamic value to configure `warnings_to_tilt` based on operator settings.  `warnings_to_tilt` is set to the value selected by the operator in the `settings` section of the machine configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/dynamic_values.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: tilt\n# in your tilt mode\ntilt:\n  warnings_to_tilt: settings.warnings_to_tilt\n```\n\n----------------------------------------\n\nTITLE: Full Mystery Award Configuration Example in MPF\nDESCRIPTION: This snippet provides a complete example of a mystery award configuration, including ball hold, random award selection, and award display. It includes event player, ball holds, random event player, slide player, and slide configurations to showcase a full working mystery award implementation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/mystery_award.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nevent_player:\n  upper_lanes_complete: enable_mystery\n  slide_award_1_slide_removed: end_mystery\n  slide_award_2_slide_removed: end_mystery\n  slide_award_3_slide_removed: end_mystery\n  slide_award_4_slide_removed: end_mystery\n\nball_holds:\n  mystery_scoop:\n    balls_to_hold: 1\n    hold_devices: bd_low_scoop\n    enable_events: enable_mystery\n    disable_events: end_mystery, multiball_active\n    release_one_events: end_mystery\n\nrandom_event_player:\n  ball_hold_mystery_scoop_held_ball:\n    events:\n      mystery_award_1_event: 30 #numbers show probability of event\n      mystery_award_2_event: 20\n      mystery_award_3_event: 20\n      mystery_award_4_event: 30\n    force_all: true\n\nslide_player:\n  mystery_award_1_event:\n    award_1_slide:\n      expire: 5s\n  mystery_award_2_event:\n    award_2_slide:\n      expire: 5s\n  mystery_award_3_event:\n    award_3_slide:\n      expire: 5s\n  mystery_award_4_event:\n    award_4_slide:\n      expire: 5s\n\nslides:\n  award_1_slide:\n    - type: video\n      video: award_1\n  award_2_slide:\n    - type: video\n      video: award_2\n  award_3_slide:\n    - type: video\n      video: award_3\n  award_4_slide:\n    - type: video\n      video: award_4\n```\n\n----------------------------------------\n\nTITLE: Camera Widget Settings in YAML\nDESCRIPTION: This snippet shows the basic settings for configuring a camera widget. It defines the type as \"camera\" and shows the available settings like width, height and camera_index.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/camera.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: camera\nwidth:\nheight:\ncamera_index:\n```\n\n----------------------------------------\n\nTITLE: Configuring OPP Coil Recycle Factor\nDESCRIPTION: This snippet configures the recycle factor for an OPP coil. The `default_recycle: true` activates the recycle feature, and `recycle_factor` sets the cooldown time as a multiple of the pulse time. This allows fine-tuning of the coil's cooling-down period.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/drivers.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil:\n    number: 0-3\n    default_pulse_ms: 10\n    default_recycle: true\n    platform_settings:\n      recycle_factor: 2\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration Using Player Variable as Token (YAML)\nDESCRIPTION: This snippet shows how to access a player variable ('current_player.ball') and use it as a token value. The 'txt' token in the 'ball_num' show will be replaced with the ball number of the current player.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  player_turn_started:\n    ball_num: #The name of the show to be started upon this event\n      show_tokens:\n        txt: (current_player.ball)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shot Rotation with Single Direction in MPF with YAML\nDESCRIPTION: This snippet configures shot rotation to only rotate to the right, regardless of which flipper is pressed.  This is achieved by adding both the left and right flipper events to the `rotate_right_events` configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/lanes_mode.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nshot_groups:\n  indy_lanes:\n    shots: indy_i, indy_n, indy_d, indy_y\n    rotate_right_events: left_flipper_active, right_flipper_active\n```\n\n----------------------------------------\n\nTITLE: Configuring Counter and Variable Player for Slides in YAML\nDESCRIPTION: This YAML snippet configures a counter, a variable_player, and a slide_player to display the counter value on a slide. The counter `my_counter` starts at 0 and counts up to 5. The `variable_player` updates a player variable `my_counter` with the current counter value on the `counter_my_counter_hit` event. The `slide_player` displays a slide with a text widget that shows the value of the player variable `my_counter`. Requires MPF and MPF-MC to be installed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/integrating_logic_block_and_slides.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n\n##! mode: my_mode\ncounters:\n  my_counter:\n    starting_count: 0\n    count_complete_value: 5\n    count_events: count_up\n\nvariable_player:\n  counter_my_counter_hit:\n    my_counter:\n      action: set\n      int: (count)\n\nslide_player:\n  show_slide:\n    widgets:\n      - type: text\n        text: \"Count (player|my_counter)\"\n\n##! test\n#! start_game\n#! start_mode my_mode\n#! post show_slide\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Count 0\"\n#! post count_up\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Count 1\"\n#! post count_up\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Count 2\"\n#! post count_up\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Count 3\"\n#! post count_up\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Count 4\"\n```\n\n----------------------------------------\n\nTITLE: Credit Sounds Configuration (YAML)\nDESCRIPTION: This snippet configures sounds that are played during credit-related events. It defines sounds for adding credits, not enough credits, and player added. The `action: play` specifies that the sound should be played, and `loops: 0` indicates that the sound should only be played once.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nsound_player:\n  credits_added:\n    credit_added_sound:\n      action: play\n      loops: 0\n  not_enough_credits:\n    need_more_money:\n      action: play\n      loops: 0\n  player_added:\n    player_added_sound:\n      action: play\n      loops: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring light_template for NeoSeg Displays in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure the `light_template` setting for NeoSeg displays in the `neoseg_displays:` section of the MPF configuration. The `light_template` is used to specify the light used for the segment display. Even though NeoSeg displays come in different colors, each segment is treated as a single color segment, so color white is recommended.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/neoseg_displays.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlight_template:\n      type: w\n      subtype: led\n      color_correction_profile: NeoSeg_orange\n```\n\n----------------------------------------\n\nTITLE: Configuring a Motorized Drop Target Bank in YAML\nDESCRIPTION: This snippet configures a motorized drop target bank that moves up and down using two position switches. It defines the switches for the up and down positions, a digital output to control the motor, and the motor itself with its position switches and movement commands. The `reset_position` sets the initial position upon reset.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/motors.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_position_up:\n    number:\n  s_position_down:\n    number:\n\ndigital_outputs:\n  c_motor_run:\n    number:\n    type: driver\n\nmotors:\n  motorized_drop_target_bank:\n    motor_left_output: c_motor_run\n    position_switches: !!omap\n      - up: s_position_up\n      - down: s_position_down\n    reset_position: down\n    go_to_position:\n      go_up: up\n      go_down: down\n```\n\n----------------------------------------\n\nTITLE: Configuring Displays in Machine-Wide Settings (YAML)\nDESCRIPTION: This snippet defines the display settings within the machine-wide configuration. It specifies the width and height for the window and the DMD (Dot Matrix Display). Setting `default: true` for the DMD ensures that it is the primary display target.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\ndisplays:\n  window:\n    width: 600\n    height: 200\n  dmd:\n    width: 128\n    height: 32\n    default: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Switch Debounce Settings in YAML\nDESCRIPTION: This snippet illustrates how to configure debounce open and close times on a per-switch basis when using FAST Pinball controllers. These settings override the default debounce settings defined in the `fast:` section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/switches.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_switch:\n    number: 1-0\n    platform_settings:\n      debounce_open: 5ms\n      debounce_close: 20ms\n  some_other_switch:\n    number: 3-24\n```\n\n----------------------------------------\n\nTITLE: Configuring logging for the mode\nDESCRIPTION: This method configures the logging settings for the mode. Parameters include the logger name, console logging level, file logging level, and a base URL for documentation links.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/high_score.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_logging(logger: str, console_level: str = 'basic', file_level: str = 'basic', url_base=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring OPP Light with YAML\nDESCRIPTION: This example configures a light connected to an OPP card using a YAML configuration. The `number` field specifies the OPP card and bulb number. `subtype` defines the light type as matrix.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/lights.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  some_light:\n    number: 1-16\n    subtype: matrix\n```\n\n----------------------------------------\n\nTITLE: Advancing Test Clock in MpfTestCase\nDESCRIPTION: This method advances the test clock by a specified duration and executes any scheduled events or tasks during that time. It allows for simulating the passage of time within a test environment, triggering delays, timers, and other time-dependent functions. The delta parameter defines the amount of time to advance the clock in seconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.advance_time_and_run(10)\n```\n\n----------------------------------------\n\nTITLE: Super Jets Startup Slide\nDESCRIPTION: This YAML configuration sets up a slide that displays \"SUPER JETS\" on the DMD for 2 seconds when the Super Jets mode starts. The slide is displayed at y=60% position with a font size of 20.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/AFM_super_jets.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: super_jets_startup\n    - duration: 2s\n    slides:\n      super_jets_startup:\n        widgets:\n        - type: text\n          text: SUPER JETS\n          font_size: 20\n          y: 60%\n          priority: 200\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Drop Target Resets on Ball Start in MPF\nDESCRIPTION: This configuration snippet showcases how to trigger multiple drop target resets on ball start. It defines drop targets, a drop target bank, and configures the `reset_events` to trigger the reset coil multiple times at specified intervals (0s, 1s, and 2s) after the `ball_started` event.  This is useful for older mechanisms that may not reliably reset on the first attempt.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/targets/drop_targets/fixing_drop_target_reset_issues.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndrop_targets:\n  front:\n    switch: s_drop_front\n  middle:\n    switch: s_drop_middle\n  back:\n    switch: s_drop_back\ndrop_target_banks:\n  vuk_bank:\n    drop_targets: front, middle, back\n    reset_coils: c_drop_reset\n    reset_on_complete: 1s\n    reset_events:\n      ball_started.1: 0\n      ball_started.2: 1s\n      ball_started.3: 2s\n      machine_reset_phase_3: 0\n```\n\n----------------------------------------\n\nTITLE: Starting the MPF monitor tool\nDESCRIPTION: This command starts the interactive monitor tool, which provides a graphical interface for monitoring and debugging the MPF game engine. It requires the game engine to be started separately and the monitor tool to be installed separately.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ mpf monitor\n```\n\n----------------------------------------\n\nTITLE: Map Start Button to Keyboard Key in MPF (YAML)\nDESCRIPTION: This snippet maps the 'S' key on the keyboard to the `s_start` switch. This allows testing and development without a physical start button. The `switch` parameter specifies the name of the switch to activate when the key is pressed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/9_start_button.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkeyboard:\n  s:\n    switch: s_start\n```\n\n----------------------------------------\n\nTITLE: Configure Hardware Rule for Solenoid (0x3C) Example Command\nDESCRIPTION: This example illustrates the 'Configure Hardware Rule for Solenoid' command (0x3C). It shows how to configure a hardware rule for solenoid 25 using switches 5 and inverted switch 6. Switch 5 enables and disables the rule, while the inverted switch 6 disables the rule when it closes. Solenoid 25 will pulse for 30ms at 75% power and hold at 25% power.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_36\n\nLANGUAGE: None\nCODE:\n```\nByte        Length      Example     Comment\n----------- ----------- ----------- -----------------------------------\n0           1           60          Command 60 - Configure Hardware\n                                     Rule for Solenoid\n\n1           1           25          Configure rule for solenoid 25\n\n2           1           5           Use Switch 5 as `sw1`\n\n3           1           134         Use inverted Switch 6 as `sw2`\n\n4           1           127         No switch as `sw3`\n\n5           1           30          30ms initial pulse\n\n6           1           191         191/255 = 75% pulse power\n\n7           1           64          25% hold power\n\n8           1           3           `sw1` will enable the rule and\n                                     disable it when released.\n\n9           1           2           `sw2` will disable the rule if it\n                                     closes (because it is inverted).\n\n10          1           0           Do not use `sw3`\n```\n\n----------------------------------------\n\nTITLE: Configuring displays and DMDs for Stern SPIKE in MPF\nDESCRIPTION: This snippet configures both an on-screen window and a physical DMD. It defines display settings, including width and height, and configures the DMD platform, frames per second (fps), and default slides. Slides define the content shown on the displays.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/dmds.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  window:  # on screen window\n    width: 600\n    height: 200\n  dmd:  # source display for the DMD\n    width: 128\n    height: 32\n    default: true\ndmds:\n  my_dmd:\n    platform: spike\n    fps: 30\n# some default slides (you don't need those but they are a nice start)\nslides:\n  window_slide_1:  # slide we'll show in the on-screen window\n    - type: display\n      width: 512\n      height: 128\n      effects:\n        - type: dmd\n  dmd_slide_1:  # slide we'll show on the physical DMD\n    - type: text\n      text: MPF\n      font_size: 30\n      color: red\n      x: 0\n      animations:\n        add_to_slide:\n          - property: x\n            value: 250\n            duration: 30\n            relative: true\nslide_player:\n  init_done:\n    window_slide_1:\n      target: window\n    dmd_slide_1:\n      target: dmd\n```\n\n----------------------------------------\n\nTITLE: Basic slide_player Configuration in YAML\nDESCRIPTION: This snippet shows a basic configuration for the `slide_player` section, mapping events to specific slides. When an event is posted, the corresponding slide will be displayed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/slide_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  event1: slide1\n  event2: slide2\n  event3: slide3\n```\n\n----------------------------------------\n\nTITLE: Installing MPF with pip in DOS\nDESCRIPTION: This command installs the Mission Pinball Framework (MPF) using the pip package manager. It installs MPF core which is the foundation for building pinball game logic.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/windows.md#_snippet_3\n\nLANGUAGE: doscon\nCODE:\n```\npip install \"mpf\"\n```\n\n----------------------------------------\n\nTITLE: Resolving ruamel.yaml Version Conflict (doscon)\nDESCRIPTION: This code snippet demonstrates how to uninstall conflicting versions of MPF, MPF-MC, and MPF-Monitor, and then reinstall the latest release to resolve ruamel.yaml version conflicts. It ensures all components are compatible and avoids issues caused by multiple YAML libraries.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/common_problems_and_solutions.md#_snippet_0\n\nLANGUAGE: doscon\nCODE:\n```\npkg_resources.VersionConflict: (ruamel.yaml 0.15.37 (c:\\users\\robert\\appdata\\local\\programs\\python\\python36\\lib\\site-packages), Requirement.parse('ruamel.yaml<0.11,>=0.10')\n```\n\n----------------------------------------\n\nTITLE: Complete Configuration for Classic Single-Ball Trough in MPF (YAML)\nDESCRIPTION: This snippet shows the complete configuration for a classic single-ball trough, combining the switches, coils, ball devices, virtual platform settings, and playfield configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nswitches:\n  s_drain:\n    number: 01\n  s_plunger:\n    number: 02\n\nvirtual_platform_start_active_switches: s_drain\n\ncoils:\n  c_drain_eject:\n    number: 03\n    default_pulse_ms: 20\n\nball_devices:\n  bd_drain:\n    ball_switches: s_drain\n    eject_coil: c_drain_eject\n    eject_targets: bd_plunger_lane\n    tags: drain, home, trough\n    eject_timeouts: 3s\n  bd_plunger_lane:\n    ball_switches: s_plunger\n    mechanical_eject: true\n    eject_timeouts: 5s\n\nplayfields:\n  playfield:\n    default_source_device: bd_plunger_lane\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Player to Display a Welcome Slide on Init\nDESCRIPTION: This snippet configures the slide_player to display a slide named `welcome_slide` when the `init_done` event is triggered. This event occurs when the MPF media controller is ready after starting up.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  init_done: welcome_slide\n```\n\n----------------------------------------\n\nTITLE: Shot Group Behavior\nDESCRIPTION: This YAML configuration defines the behavior of the rollover lanes shot group. It associates the left and right flipper buttons with rotating the shot group's active shot and resets the shot group when a `rollover_lanes_lit_complete` event occurs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/AFM_super_jets.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nshot_groups:\n  rollover_lanes:\n    shots: right_rollover, left_rollover\n    rotate_left_events: s_left_flipper_active\n    rotate_right_events: s_right_flipper_active\n    reset_events:\n      rollover_lanes_lit_complete: 1s\n```\n\n----------------------------------------\n\nTITLE: Enable Spike Debug Mode in MPF\nDESCRIPTION: This snippet enables debug mode for the Spike platform within the MPF configuration file. This adds more detailed logging which can help with debugging issues, but may slow down MPF. The `debug: true` setting must be added to the `spike` section of your machine configuration file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/troubleshooting.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspike:\n  debug: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Spike Port in MPF\nDESCRIPTION: This YAML configuration snippet specifies the COM port used to connect to the SPIKE CPU in your MPF machine configuration. Update `port` with the correct COM port assigned by your operating system. This setting is crucial for MPF to communicate with the SPIKE node.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/connection.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspike:\n  port: COM5\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI Bit Bang for Switch Input\nDESCRIPTION: This example shows how to configure the `spi_bit_bang` platform in MPF to read switch states from a device using SPI communication. It defines the MISO pin, CS pin, clock pin, bit time, and number of inputs, as well as the digital outputs for the CS and clock signals and the switches connected to the SPI device. The `hardware` section is configured to use your existing platform in combination with `spi_bit_bang`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spi_bit_bang.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: your_platform, spi_bit_bang      # add your platform first here\nspi_bit_bang:\n  miso_pin: s_miso\n  cs_pin: o_cs\n  clock_pin: o_clock\n  bit_time: 50ms\n  inputs: 8\ndigital_outputs:\n  o_cs:\n    number: 1\n    type: driver\n  o_clock:\n    number: 2\n    type: driver\nswitches:\n  s_trough_0:\n    number: 0\n    platform: spi_bit_bang\n  s_trough_1:\n    number: 1\n    platform: spi_bit_bang\n  s_trough_2:\n    number: 2\n    platform: spi_bit_bang\n  s_trough_3:\n    number: 3\n    platform: spi_bit_bang\n  s_trough_4:\n    number: 4\n    platform: spi_bit_bang\n  s_trough_5:\n    number: 5\n    platform: spi_bit_bang\n  s_trough_6:\n    number: 6\n    platform: spi_bit_bang\n  s_trough_7:\n    number: 7\n    platform: spi_bit_bang\n  s_miso:\n    number: 10\n```\n\n----------------------------------------\n\nTITLE: Speedometers Configuration (YAML)\nDESCRIPTION: Configures a speedometer device within MPF. It specifies the valid contexts (machine, mode), the device type, and the start/stop switches associated with the speedometer.  The `start_switch` and `stop_switch` parameters determine when the speedometer starts and stops measuring speed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/speedometers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspeedometers:\n    __valid_in__: machine, mode\n    __type__: device\n    start_switch: single|machine(switches)|None\n    stop_switch: single|machine(switches)|None\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Player for In-Game Display (YAML)\nDESCRIPTION: This snippet configures the `slide_player` section in the MPF configuration file to display player and ball information during a game.  It adds a `ball_started` entry to show the current player and ball number. This requires the `init_done` and `mode_attract_started` entries for proper display functioning.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/10_run_a_game.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  init_done: welcome_slide\n  mode_attract_started: attract_started\n  ball_started:\n    widgets:\n      type: text\n      text: PLAYER (number) BALL (ball)\n```\n\n----------------------------------------\n\nTITLE: Setting Platform to P-ROC in MPF\nDESCRIPTION: This snippet sets the platform in the MPF configuration to `p_roc`, indicating that the machine uses a P-ROC controller. It must be placed in the machine-wide configuration file under the `hardware` section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/platform.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: p_roc\n```\n\n----------------------------------------\n\nTITLE: Sequence Events Configuration YAML\nDESCRIPTION: This snippet demonstrates how to configure the `events` section within a sequence logic block in MPF.  It shows how to specify a sequence of events that must occur in order for the logic block to complete. It uses comma separated lists for events that act as OR conditions for each step. Requires MPF to be running in mode mode1.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sequences.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: mode1\nsequences:\n  my_sequence:\n    events:\n      - event1, event2\n      - event3\n      - event4, event5\n```\n\n----------------------------------------\n\nTITLE: Configuring Coil Actions in a Show using coil_player in YAML\nDESCRIPTION: This example demonstrates how to use `coil_player` within a show file to pulse a coil at a specific time.  This snippet shows how to trigger a coil pulse as part of a timed sequence.  The show is named 'test'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/coil_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: test\n- time: 0\n  coils:\n    coil1: pulse\n```\n\n----------------------------------------\n\nTITLE: Configuring Shots for Each Lane\nDESCRIPTION: This snippet configures the shots for each lane (left, middle, and right) within the skillshot mode. It defines the `shots` section, including `advance_events`, `profile`, `switch`, and `show_tokens` for each lane. Each shot is associated with a specific switch and LED to track and display its state.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_lane_change.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmode:\n  start_events: start_mode_skillshot_with_lane_change\n  stop_events: stop_mode_skillshot_with_lane_change\n  priority: 1000\n\nshots:\n  skillshot_left:\n    advance_events: advance_skillshot_left\n    profile: skillshot_profile\n    switch: s_lane_left\n    show_tokens:\n      led: l_lane_left\n  skillshot_middle:\n    advance_events: advance_skillshot_middle\n    profile: skillshot_profile\n    switch: s_lane_middle\n    show_tokens:\n      led: l_lane_middle\n  skillshot_right:\n    advance_events: advance_skillshot_right\n    profile: skillshot_profile\n    switch: s_lane_right\n    show_tokens:\n      led: l_lane_right\n```\n\n----------------------------------------\n\nTITLE: Basic Show Player Configuration YAML\nDESCRIPTION: This snippet demonstrates a basic show player configuration where events trigger shows. When 'some_event' is posted, 'your_show_name' is played. Similarly, 'some_other_event' triggers 'another_show'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/show_player.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nshow_player:\n  some_event: your_show_name\n  some_other_event: another_show\n```\n\n----------------------------------------\n\nTITLE: Define Drain Ball Device in MPF (YAML)\nDESCRIPTION: This snippet configures the drain ball device in the `ball_devices:` section. It defines the switch that detects a ball, the coil that ejects the ball, the target ball device for ejection, and tags to indicate its function. `eject_timeouts` specifies the maximum time the eject operation can take.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_drain:\n    ball_switches: s_drain\n    eject_coil: c_drain_eject\n    eject_targets: bd_plunger_lane\n    tags: drain, home, trough\n    eject_timeouts: 3s\n```\n\n----------------------------------------\n\nTITLE: Run the tutorial config\nDESCRIPTION: This command is used to run the example configuration file found in the mpf-examples/tutorial/step_14 directory using the mpf both command.  It runs both the media controller (mc) and the machine controller (mpf)\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/14_add_a_mode.md#_snippet_4\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial_step_14>mpf both\n```\n\n----------------------------------------\n\nTITLE: Configuring the P3-ROC Accelerometer in MPF\nDESCRIPTION: This snippet demonstrates how to configure the accelerometer on the P3-ROC board within the MPF machine-wide configuration file.  The accelerometer is identified by a name and a number, which corresponds to the physical accelerometer. This setup enables the use of the accelerometer for g-force detection and leveling.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/accelerometer.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naccelerometers:\n  p3_roc_accelerometer:\n    number: 1\n```\n\n----------------------------------------\n\nTITLE: Trough, Plunger, and Keyboard Config in YAML\nDESCRIPTION: Configuration for a basic trough, plunger lane, and keyboard mappings using YAML in MPF. Includes switches for the trough and plunger, coils for ejecting balls, ball devices for managing ball flow, and keyboard mappings for manual switch control. This setup demonstrates the configuration needed for the smart virtual platform to function correctly.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/virtual/smart_virtual.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_trough1:\n    number: s31\n  s_trough2:\n    number: s32\n  s_trough3:\n    number: s33\n  s_trough4:\n    number: s34\n  s_plunger_lane:\n    number: s27\ncoils:\n  c_trough_eject:\n    number: c01\n    default_pulse_ms: 25\n  c_plunger_eject:\n    number: c03\n    default_pulse_ms: 25\nball_devices:\n  bd_trough:\n    tags: trough, home, drain\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4\n    eject_coil: c_trough_eject\n    eject_targets: bd_plunger\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    eject_coil: c_plunger_eject\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\nkeyboard:\n  1:\n    switch: s_trough1\n    toggle: true\n  2:\n    switch: s_trough2\n    toggle: true\n  3:\n    switch: s_trough3\n    toggle: true\n  4:\n    switch: s_trough4\n    toggle: true\n  p:\n    switch: s_plunger_lane\n    toggle: true\n```\n\n----------------------------------------\n\nTITLE: Mission Mode Configuration\nDESCRIPTION: This YAML configuration defines a mission mode (example: trolls).  It specifies start and stop events, as well as events that are triggered when the mode starts and stops, enabling the global mode to manage the transitions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/mode_layering.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: trolls\n# modes/trolls/config/trolls.yaml\n\nmode:\n  start_events: start_mode_trolls\n  stop_events: stop_mode_trolls, stop_missions\n  events_when_started: mode_type_mission_started\n  events_when_stopped: mode_type_mission_stopped\n```\n\n----------------------------------------\n\nTITLE: Setting Player Variable\nDESCRIPTION: This code snippet demonstrates how to set a player variable named 'foo' for the current player using the `self.machine.player` object. If the variable doesn't exist, it will be automatically created.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/Players.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.player.foo = 0\n```\n\n----------------------------------------\n\nTITLE: Accessing Achievements via Device Collection - Python\nDESCRIPTION: Explains how to access an achievement using the device collection `self.machine.achievements`. Shows accessing it by name as an attribute, and by name as a key in a dictionary.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/achievements.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.achievements.foo\nself.machine.achievements['foo']\n```\n\n----------------------------------------\n\nTITLE: Configuring LED Platform to FadeCandy in MPF\nDESCRIPTION: This code snippet shows how to configure MPF to use the `fadecandy` platform for LEDs. It overrides the default platform specified in the `hardware:` section of the machine configuration file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fadecandy/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: p_roc\n  driverboards: pdb\n  lights: fadecandy\n```\n\n----------------------------------------\n\nTITLE: Configuring a Sequence Logic Block in MPF\nDESCRIPTION: Configures a sequence logic block to track the progression of hitting the drop target shots in the correct order.  It requires all four drop target shots to be hit in the lit state. Includes `restart_events` to reset the sequence and leverages the default `logicblock_(name)_complete` event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/sequential_drop_banks.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsequences:\n  drop_sequence:\n    restart_events: reset_drop_sequence\n    events:\n      - drop_1_lit_hit\n      - drop_2_lit_hit\n      - drop_3_lit_hit\n      - drop_4_lit_hit\n```\n\n----------------------------------------\n\nTITLE: Accessing Flippers in Code - Python\nDESCRIPTION: This snippet demonstrates how to access flipper instances within the MPF framework using the `self.machine.flippers` device collection. It shows access by name and dictionary-style access.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/flippers.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.flippers.foo\nself.machine.flippers['foo']\n```\n\n----------------------------------------\n\nTITLE: Configure Servos with Specific I2C Addresses in MPF (YAML)\nDESCRIPTION: This snippet configures two servos, `servo_on_controller_63_0` and `servo_on_controller_63_1`, each connected to a specific I2C address.  The `number` is formatted as `63-0` and `63-1`, where `63` (0x3F) represents the I2C address and `0` and `1` represent the servo number on that specific I2C board. This requires the `servos:` section in the MPF configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/i2c_servo.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nservos:\n  servo_on_controller_63_0:\n    number: 63-0  # first servo on board with ID 0x3F / 63\n  servo_on_controller_63_1:\n    number: 63-1  # second servo on board with ID 0x3F / 63\n```\n\n----------------------------------------\n\nTITLE: Configuring Balls Per Game in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure the number of balls per game in MPF using a YAML configuration file. The `balls_per_game` setting under the `game` section controls the number of balls a player gets per game. Changing the value modifies the game behavior accordingly.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/start/config_files.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ngame:\n  balls_per_game: 3\n```\n\n----------------------------------------\n\nTITLE: Widget Configuration Settings (YAML)\nDESCRIPTION: This code snippet shows a list of common settings that apply to all widget types in MPF. It demonstrates the basic structure for configuring widgets and customizing their properties.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/common_settings.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype:\nx:\ny:\nanchor_x:\nanchor_y:\nopacity:\nz:\nrotation:\nanimations:\nreset_animations_events:\ncolor:\nstyle:\nadjust_top:\nadjust_bottom:\nadjust_left:\nadjust_right:\nexpire:\nkey:\nevents_when_added:\nevents_when_removed:\n```\n\n----------------------------------------\n\nTITLE: Configuring an RGB LED with Number Syntax in lights section YAML\nDESCRIPTION: This snippet configures an RGB LED named \"l_led0\" connected to a PD-LED board at address 8, using outputs 0, 1, and 2 for its red, green, and blue connections respectively.  It also shows how to set the subtype to `led` which is only needed on the P-Roc.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/leds.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_led0:\n    number: 8-0-1-2\n    subtype: led\n```\n\n----------------------------------------\n\nTITLE: Configure On-Screen Window Properties in YAML\nDESCRIPTION: This YAML snippet configures the properties of the on-screen window, including its width, height, and title. The 'source_display' setting is not required here because a logical display named 'window' is already defined, which MPF automatically uses as the source for the on-screen window.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/dmd.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwindow:\n  width: 600\n  height: 200\n  title: Mission Pinball Framework\n##! test\n#! post show_slide_event\n#! advance_time_and_run .1\n```\n\n----------------------------------------\n\nTITLE: Slide Player Configuration in YAML\nDESCRIPTION: This snippet configures the slide player to display different slides for various bonus events.  It maps mode events to specific slides for bonus presentation during the end-of-ball sequence.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/bonus/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n#! slides:\n#!   bonus_start_slide: []\n#!   bonus_minerals_slide: []\n#!   bonus_dropbanks_slide: []\n#!   bonus_total_slide: []\nslide_player:\n  mode_bonus_started: bonus_start_slide\n  bonus_minerals: bonus_minerals_slide\n  bonus_dropbanks: bonus_dropbanks_slide\n  bonus_total: bonus_total_slide\n```\n\n----------------------------------------\n\nTITLE: Starting MPF with both game and media controller\nDESCRIPTION: This command starts both the MPF game engine and the media controller simultaneously. It is a convenient way to launch both components with a single command.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mpf both\n```\n\n----------------------------------------\n\nTITLE: Configure Game Over Relay for LISY1/LISY80 in YAML\nDESCRIPTION: This snippet configures the `game_over_relay` for LISY1 and LISY80 systems.  It defines a digital output with `number: 1` and `type: light`.  The relay is enabled when the `ball_started` event occurs and disabled when the `ball_will_end` event occurs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/flippers_slings_popbumpers.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ndigital_outputs:\n  game_over_relay:\n    number: 1\n    type: light\n    enable_events: ball_started\n    disable_events: ball_will_end\n```\n\n----------------------------------------\n\nTITLE: Adding Active Switches and Keyboard Bindings (YAML)\nDESCRIPTION: This snippet configures active switches for the trough and binds keyboard keys to control ball switches and the plunger for virtual gameplay. It sets the initial state of the trough switches as active and maps numbers 1-5 to trough switches and 'p' to the plunger switch. Requires a defined `switches:` section for proper function.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/10_run_a_game.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvirtual_platform_start_active_switches:\n  - s_trough1\n  - s_trough2\n  - s_trough3\n\nkeyboard:\n  1:\n    switch: s_trough1\n    toggle: true\n  2:\n    switch: s_trough2\n    toggle: true\n  3:\n    switch: s_trough3\n    toggle: true\n  4:\n    switch: s_trough4\n    toggle: true\n  5:\n    switch: s_trough5\n    toggle: true\n  p:\n    switch: s_plunger\n    toggle: true\n```\n\n----------------------------------------\n\nTITLE: Defining Switches for Credit Input (YAML)\nDESCRIPTION: This snippet configures the switches used for credit input. `s_coin_left` is designated for accepting money, and `s_service_coin` is used for service credits.  The `number` property should contain the physical number of each switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_coin_left:\n    number:\n  s_service_coin:\n    number:\n```\n\n----------------------------------------\n\nTITLE: Shorthand for Blocking Variable Player Entries\nDESCRIPTION: This shows the shorthand version to block events from being passed to variable player sections from lower-priority modes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/variable_player.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  ramp_1_hit:\n    score: 5000|block\n```\n\n----------------------------------------\n\nTITLE: Complete OPP Switch Configuration with Events\nDESCRIPTION: This complete example configures a switch with debugging enabled and defines associated events that are triggered when the switch is activated or deactivated. It also sets up the hardware platform to be OPP and configures serial ports. Events can be monitored using `mpf monitor` to verify switch behavior.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/switches.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n\n   hardware:\n      platform: opp\n      driverboards: gen2\n\n   opp:\n      ports: /dev/ttyACM0, /dev/ttyACM1 # change this if you are not using Linux\n\n   switches:\n      my_test_switch:\n         debug: true\n         number: 0-0-16 # change this if you have connected the switch to a different input\n         tags: switch_tag1, switch_tag2\n         events_when_activated: active_event1, active_event2\n         events_when_deactivated: inactive_event1\n```\n\n----------------------------------------\n\nTITLE: Adding a Default Playfield in YAML\nDESCRIPTION: This snippet adds a default playfield configuration. The `default_source_device` and `tags` settings define the default source device for the playfield and assign the 'default' tag.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_mechanical.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Machine Variable for Master Volume (YAML)\nDESCRIPTION: This YAML snippet shows how to set the master volume using a machine variable. This replaces the deprecated master_volume setting in the sound_system configuration. The `initial_value` specifies the initial volume level (between 0.0 and 1.0).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sound_system.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmachine_vars:\n  master_volume:\n    initial_value: 0.8\n```\n\n----------------------------------------\n\nTITLE: Install Pinproc with User Flag - console\nDESCRIPTION: This command installs the `pinproc` Python module for P-ROC/P3-ROC boards. Adding the `--user` flag installs the package in the user's home directory, avoiding permission issues. This modification is crucial for systems where global installation fails.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\ncd pypinproc\npython3 setup.py install --user\n```\n\n----------------------------------------\n\nTITLE: Define Displays for Physical DMD and On-Screen Window in YAML\nDESCRIPTION: This YAML snippet defines two displays: one for the on-screen window and another for the physical DMD. The 'dmd' display is set as the default, ensuring that game content primarily appears on the physical DMD. The width and height of the 'dmd' should match the physical DMD dimensions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/dmd.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  window:\n    width: 600\n    height: 200\n  dmd:\n    width: 128\n    height: 32\n    default: true\n##! test\n#! post show_slide_event\n#! advance_time_and_run .1\n```\n\n----------------------------------------\n\nTITLE: Configuring a Counter and Variable Player for Logic Block Value\nDESCRIPTION: This example configures a counter named 'logic_block_1' that increments on the 'count_up_event'.  The `variable_player` section then triggers when the counter changes, updating a widget placeholder with the counter's value multiplied by 100. This value is then displayed in a text widget. Requires the 'my_widget_placeholder' to be defined in a text widget and the 'counter_widget' to be shown via the 'show_widget_event'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/persisting_state_in_a_player_variable.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\ncounters:\n  logic_block_1:\n    count_events: count_up_event\n\nvariable_player:\n  counter_logic_block_1_hit:  # this is triggered when the counter changes\n    my_widget_placeholder: 100 * device.counters.logic_block_1.value\n   # The logic block stores the count as the 'value' attribute\nwidgets:\n  counter_widget:\n    - type: text\n      text: (my_widget_placeholder) Hits!\n  # This placeholder is set by variable_player when the counter changes\n#! widget_player:\n#!   show_widget_event: counter_widget\n##! test\n#! start_game\n#! start_mode my_mode\n#! post show_widget_event\n#! post count_up_event\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"100 Hits!\"\n```\n\n----------------------------------------\n\nTITLE: Installing pyenv (Shell)\nDESCRIPTION: Downloads and executes the pyenv installer script. Configures the .bashrc file to set up the pyenv environment, including setting the PYENV_ROOT environment variable, updating the PATH, and initializing pyenv. Finally verifies pyenv installation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/raspberry.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# download the pyenv installer\nwget https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer\n\n# execute the installer\nbash pyenv-installer\n\n# clean up\nrm pyenv-installer\n\n# Update your bash profile to customise the shell at login\ncat <<'EOF'>>.bashrc\nexport PYENV_ROOT=\"$HOME/.pyenv\"\ncommand -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\nEOF\nexec $SHELL\n\n# Check to ensure pyenv is available (A list of pyenv commands\n# is the expected output)\npyenv\n```\n\n----------------------------------------\n\nTITLE: MPF Match Mode Test Configuration\nDESCRIPTION: This configuration defines a test sequence for the MPF match mode. It starts a game, drains all balls multiple times, and asserts the mode's running state before and after a specified time, validating that the match mode is correctly activated and deactivated.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/match_mode.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! test\n#! start_game\n#! advance_time_and_run 5\n#! assert_mode_not_running match\n#! drain_all_balls\n#! advance_time_and_run 5\n#! drain_all_balls\n#! advance_time_and_run 5\n#! drain_all_balls\n#! advance_time_and_run .1\n#! assert_mode_running match\n#! advance_time_and_run 5\n#! assert_mode_not_running match\n```\n\n----------------------------------------\n\nTITLE: Sending Command and Waiting\nDESCRIPTION: Sends a command to a specific node on the Spike platform and waits for a response. This allows for synchronous communication with the hardware. Returns the response as a bytearray or None if no response is received.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nsend_cmd_and_wait_for_response(node, cmd, data, response_len) → Optional[bytearray]\n```\n\n----------------------------------------\n\nTITLE: Setting Lights Via Tags in YAML\nDESCRIPTION: This snippet shows how to control lights via tags. The `rainbow` show uses the `(tag)` token. In `play_rainbow_show_via_tag` configuration, the token is set to `drops`. The lights with the tag `drops` will be set to different colors defined in the show.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/light_player.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nshows:\n  rainbow:\n    - lights:\n        (tag): red\n      duration: 1s\n    - lights:\n        (tag): orange\n      duration: 1s\n    - lights:\n        (tag): yellow\n      duration: 1s\n    - lights:\n        (tag): green\n      duration: 1s\n    - lights:\n        (tag): blue\n      duration: 1s\n    - lights:\n        (tag): purple\n      duration: 1s\nshow_player:\n  play_rainbow_show_via_tag:\n    rainbow:\n      show_tokens:\n        tag: drops\n```\n\n----------------------------------------\n\nTITLE: Configure GMC Window Filter with INI\nDESCRIPTION: This code snippet demonstrates how to configure a filter for the GMC window using the `[filter]` section in the `gmc.cfg` file. The filter applies visual effects to all displays, such as simulating a virtual DMD.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/gmc-cfg.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[filter]\nfilter=\"virtual_dmd\"\ncolumns=120\nrows=45\nhardness=5\nspacing=2\n```\n\n----------------------------------------\n\nTITLE: Configure Light Show for Super Jets in MPF (YAML)\nDESCRIPTION: This snippet configures a light show named 'Super_Jets_on' that turns on the 'l_super_jets' light to full brightness (ff). This light show is designed to be used within the Super Jets mode of a pinball machine using the Mission Pinball Framework (MPF).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/AFM_super_jets.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: Super_Jets_on\n    - time: 0\n    lights:\n      l_super_jets: ff\n```\n\n----------------------------------------\n\nTITLE: Configure I2C platform to smbus2\nDESCRIPTION: Configures MPF to use the `smbus2` platform for I2C devices. This overrides the default platform set in the `hardware:` section of the machine config file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/smbus.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  i2c: smbus2\n```\n\n----------------------------------------\n\nTITLE: Config Player: Show Player Short Syntax (Standalone)\nDESCRIPTION: This snippet demonstrates the short syntax for the `show_player` config player in a standalone configuration. The event `event_which_is_posted_elsewhere` triggers the `your_show` show to play.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  event_which_is_posted_elsewhere:\n    your_show: play\n```\n\n----------------------------------------\n\nTITLE: Configure a One-Direction Motor in MPF\nDESCRIPTION: This snippet demonstrates how to configure a motor that moves in only one direction, such as a motorized drop target bank. It defines switches for 'up' and 'down' positions, a digital output to run the motor, and maps these to a motor device. It uses `motor_left_output` since it only moves in one direction.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/motors.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_motorized_drop_target_bank_position_up:\n    number:\n  s_motorized_drop_target_bank_position_down:\n    number:\ndigital_outputs:\n  c_motorized_drop_target_bank_run:\n    number:\n    type: driver\nmotors:\n  motorized_drop_target_bank:\n    motor_left_output: c_motorized_drop_target_bank_run\n    position_switches: !!omap\n      - up: s_motorized_drop_target_bank_position_up\n      - down: s_motorized_drop_target_bank_position_down\n    reset_position: down\n    go_to_position:\n      move_bank_up: up\n      move_bank_down: down\n```\n\n----------------------------------------\n\nTITLE: Configuring OPP Coil Pulse Power and Hold Power\nDESCRIPTION: This snippet configures both the pulse power and hold power for an OPP coil. `default_pulse_power` specifies the power percentage during the initial pulse, while `default_hold_power` sets the sustained power level after the pulse.  This requires OPP firmware version 2.3.0.5 or above.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/drivers.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil:\n    number: 0-3\n    default_pulse_ms: 32\n    default_pulse_power: 0.8125\n    default_hold_power: 0.125\n```\n\n----------------------------------------\n\nTITLE: FAST Pinball Hardware Config - YAML\nDESCRIPTION: This YAML snippet configures MPF to use FAST Pinball hardware with FAST IO driver boards.  It defines the platform as `fast` and the driverboards also as `fast`. The `fast:` section configures the serial ports to use.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: fast\n  driverboards: fast\n\nfast:\n  ports: com4, com5\n\nswitches:\n  s_left_flipper:\n    number: 00\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Manager in MPF (Python)\nDESCRIPTION: This code creates a DataManager object for a specific configuration. The `create_data_manager` method takes the configuration name as a string. The DataManager handles loading, saving, and managing data for a specific part of the system. It returns a new DataManager instance.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/machine.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n`create_data_manager(config_name: str) → mpf.core.data_manager.DataManager`\n\nReturn a new DataManager for a certain config.\n\nParameters:\n\n* **config_name** – Name of the config\n```\n\n----------------------------------------\n\nTITLE: Configuring DMD settings in MPF (YAML)\nDESCRIPTION: This code snippet demonstrates how to configure a DMD in the `dmds:` section of an MPF machine configuration file. It defines a DMD named 'my_dmd' and sets its brightness, frames per second (fps), and gamma. It also requires defining a display `dmd` as a source for the DMD with specific width and height.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/dmds.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  dmd:\n    width: 128\n    height: 32\ndmds:\n  my_dmd:  # name of this DMD which can be whatever you want\n    brightness: .5\n    fps: 25\n    gamma: 2.5\n```\n\n----------------------------------------\n\nTITLE: Configure Plunger Lane Switch - YAML\nDESCRIPTION: Configures a plunger lane switch in the `switches:` section of the machine config file.  The `number` corresponds to the actual switch number connected to the control system. The example uses `2-6` as the switch number, but this should be updated to reflect the actual hardware configuration.  The `type: NC` setting is important when the switch used is an opto.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/mechanical_with_switch.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_plunger_lane:\n    number: 2-6\n```\n\n----------------------------------------\n\nTITLE: Display Player 1 Score (Previous Game) - MPF\nDESCRIPTION: This snippet shows how to display Player 1's score from the previous game using a text template in MPF. It utilizes a Python format string `:d` to render the score as an integer.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/text_templates.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPlayer 1 score: {machine.player1_score:d}\n```\n\n----------------------------------------\n\nTITLE: Configuring TNA Segment Displays\nDESCRIPTION: This YAML configuration shows how to connect and configure TNA segment displays (PBL-600-0473-00) with MPF. These displays use the same serial protocol as MyPinballs controllers and include four segments. The `port` parameter specifies the serial port to which the controller is connected. The segment displays are numbered from 1 to 4.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/mypinballs/index.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  segment_displays: mypinballs\nmypinballs:\n  port: /dev/ttyUSB0\nsegment_displays:\n  display1:\n    number: 1\n  display2:\n    number: 2\n  display3:\n    number: 3\n  display4:\n    number: 4\n```\n\n----------------------------------------\n\nTITLE: Defining Named Animations in YAML\nDESCRIPTION: This YAML snippet defines two named animations, `fade_in` and `fade_out`, which can be reused throughout the MPF configuration. The `fade_in` animation sets the `opacity` property to `1` over a duration of 1 second, while `fade_out` sets it to `0` over the same duration. These animations can then be referenced by name in widget configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nanimations:\n  fade_in:\n    property: opacity\n    value: 1\n    duration: 1s\n  fade_out:\n    property: opacity\n    value: 0\n    duration: 1s\n```\n\n----------------------------------------\n\nTITLE: Display Widget Configuration Example YAML\nDESCRIPTION: This YAML configuration demonstrates how to use the `display` widget to display the content of a display named `my_frame` within a slide named `base_slide`. It defines the displays `window` and `my_frame`, the slides `base_slide` and `frame_slide`, and a slide player that shows the slides on the displays. The display widget specifies `source_display`, `width`, `height`, `x`, and `y` properties. Requires: MPF installation with a configured machine.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/display/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\ndisplays:\n  window:\n    height: 600\n    width: 800\n  my_frame:\n    width: 400\n    height: 300\n    default: true\n\nslides:\n  base_slide:\n    widgets:\n      - type: display\n        source_display: my_frame\n        width: 400\n        height: 300\n        x: 300\n        y: 200\n      - type: text\n        text: this is the base slide\n        x: 600\n        y: 400\n  frame_slide:\n    widgets:\n      - type: text\n        text: this is a slide in the frame\n    background_color: red\nslide_player:\n  mc_ready.1:\n    base_slide:\n      target: window\n  mc_ready.2: frame_slide\n```\n\n----------------------------------------\n\nTITLE: Add RGB DMD device entry\nDESCRIPTION: This YAML code adds an RGB DMD device entry to the MPF configuration, allowing MPF to recognize and use the PIN2DMD. It sets the `hardware_brightness` to adjust the display's brightness and configures the frames per second (`fps`). The DMD must be named `default`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pin2dmd/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrgb_dmds:\n  default:  # your DMD\n    hardware_brightness: .5      # adjust the brightness of your display if it is too bright\n    fps: 30\n```\n\n----------------------------------------\n\nTITLE: Configure Skillshot Shots with Profiles\nDESCRIPTION: This snippet configures individual shots for each target, associating them with a switch, light, and a shot profile. It also defines `advance_events` to control shot profile advancement, which is crucial for the rotating target effect. The `mode` section defines start and stop events for the skillshot mode and sets its priority.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_auto_rotate.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#! switches:\n#!   s_dropbank_1:\n#!     number: 1\n#!   s_dropbank_2:\n#!     number: 2\n#!   s_dropbank_3:\n#!     number: 3\n#!   s_dropbank_4:\n#!     number: 4\n#!   s_dropbank_5:\n#!     number: 5\n##! mode: skillshot_with_auto_rotate\n#! shot_profiles:\n#!   skillshot_profile:\n#!     states:\n#!       - name: off\nmode:\n  start_events: start_mode_skillshot_with_auto_rotate\n  stop_events: stop_mode_skillshot_with_auto_rotate\n  priority: 1000\n\nshots:\n  skillshot_drop_1:\n    switch: s_dropbank_1\n    advance_events: mode_skillshot_with_auto_rotate_started, advance_skillshot_1\n    profile: skillshot_profile\n    show_tokens:\n      leds: l_dropbank_1\n  skillshot_drop_2:\n    switch: s_dropbank_2\n    advance_events: advance_skillshot_2\n    profile: skillshot_profile\n    show_tokens:\n      leds: l_dropbank_2\n  skillshot_drop_3:\n    switch: s_dropbank_3\n    advance_events: advance_skillshot_3\n    profile: skillshot_profile\n    show_tokens:\n      leds: l_dropbank_3\n  skillshot_drop_4:\n    switch: s_dropbank_4\n    advance_events: advance_skillshot_4\n    profile: skillshot_profile\n    show_tokens:\n      leds: l_dropbank_4\n  skillshot_drop_5:\n    switch: s_dropbank_5\n    advance_events: advance_skillshot_5\n    profile: skillshot_profile\n    show_tokens:\n      leds: l_dropbank_5\n```\n\n----------------------------------------\n\nTITLE: Configuring Shot Rotation Events in MPF with YAML\nDESCRIPTION: This snippet configures the shot group to respond to rotation events, which are triggered by flipper button presses. This enables the lit/unlit states of the shots to rotate left or right. It can be configured in either machine-wide or mode-specific config.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/lanes_mode.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshot_groups:\n  indy_lanes:\n    shots: indy_i, indy_n, indy_d, indy_y\n    rotate_left_events: left_flipper_active\n    rotate_right_events: right_flipper_active\n```\n\n----------------------------------------\n\nTITLE: Accrual Events Configuration YAML\nDESCRIPTION: This snippet demonstrates how to configure the `events` section of an accrual logic block. Each item in the list represents a step, and the events within each step are OR'ed together (only one needs to occur). Steps are AND'ed, meaning all steps must be completed for the accrual to complete.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/accruals.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naccruals:\n  my_accrual:\n    events:\n      - event1, event2\n      - event3\n      - event4, event5\n```\n\n----------------------------------------\n\nTITLE: Mode Configuration Example YAML\nDESCRIPTION: An example configuration for the `mode:` section of a mode config file. It demonstrates how to define start and stop events, as well as the priority of the mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/mode.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nmode:\n  start_events: ball_starting\n  stop_events: timer_mode_timer_complete, shot_right_ramp\n  priority: 300\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Assets in MPF (YAML)\nDESCRIPTION: This YAML snippet shows how to configure image assets in MPF, setting the load type and renaming a file.  It defines settings for `insert_coin.jpg` to be preloaded and `hello_face_300.jpg` to be referred to as `hello_face` and not to be automatically loaded.  This is part of MPF-MC and requires MPF to be installed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/images.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimages:\n  insert_coin:\n    load: preload\n  hello_face:\n    file: hello_face_300.jpg\n    load: None\n```\n\n----------------------------------------\n\nTITLE: Configure Switches with PKONE Hardware (YAML)\nDESCRIPTION: This code snippet demonstrates how to configure switches connected to Penny K Pinball PKONE extension boards in a YAML configuration file. The `number` parameter specifies the address ID of the extension board and the switch input number. Switches 31-35 are configured in hardware to support optos and normally closed switches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/switches.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  my_switch:\n    number: 0-0    # Extension board at address 0, switch 0\n  some_other_switch:\n    number: 2-24    # Extension board at address 2, switch 24\n```\n\n----------------------------------------\n\nTITLE: Initializing Skillshot Mode and Switches/Lights\nDESCRIPTION: This snippet initializes the skillshot mode and defines the switches and lights for the rollover lanes. It configures the `modes`, `switches`, and `lights` sections, setting up the basic components required for the skillshot feature.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_lane_change.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nmodes:\n  - skillshot_with_lane_change\nswitches:\n  s_lane_left:\n    number: 1\n  s_lane_middle:\n    number: 2\n  s_lane_right:\n    number: 3\nlights:\n  l_lane_left:\n    number: 1\n  l_lane_middle:\n    number: 2\n  l_lane_right:\n    number: 3\nshot_profiles:\n  skillshot_profile:\n    states:\n      - name: off\n      - name: on\n\n##! mode: skillshot_with_lane_change\n#! mode:\n#!   start_events: start_mode_skillshot_with_lane_change\n#!   stop_events: stop_mode_skillshot_with_lane_change\n#!   priority: 1000\n```\n\n----------------------------------------\n\nTITLE: Looping and Repeating Animations (YAML)\nDESCRIPTION: This YAML snippet shows how to create looping and repeating animations. The `pulse_boo` animation repeats indefinitely because the `repeat: true` setting is added to the last step.  Also includes a `show_slide` one-time animation and a `bye_boo` animation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  slide1:\n    widgets:\n      - type: text\n        text: BOO!\n        y: -50\n        font_size: 90\n        animations:\n          show_slide:\n            property: y\n            value: 50\n            duration: 500ms\n          pulse_boo:\n            - property: font_size\n              value: 100\n              duration: 250ms\n            - property: font_size\n              value: 90\n              duration: 250ms\n              repeat: true\n          bye_boo:\n            - property: y\n              value: 100\n            - property: x\n              value: 150\n              timing: with_previous\n```\n\n----------------------------------------\n\nTITLE: Coil Configuration with Pulse Power\nDESCRIPTION: This example demonstrates configuring a coil's pulse power using the `default_pulse_power` parameter. The power can be set from 0.0 to 1.0. This snippet defines the `some_coil` with a 30ms pulse and a pulse power of 0.5 (50%).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/drivers.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil:\n    number:\n    default_pulse_ms: 30\n    default_pulse_power: 0.5\n```\n\n----------------------------------------\n\nTITLE: Score Queue Configuration Example (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure a score queue with chimes and associate it with player variables for scoring. It includes coil definitions for the chimes and score queue configurations. The `score_queue_player` section defines how player variables map to scores in the queue.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/score_queues.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_chime_1000:\n    number:\n  c_chime_100:\n    number:\n  c_chime_10:\n    number:\nscore_queues:\n  score:\n    chimes: c_chime_1000, c_chime_100, c_chime_10,  None\n##! mode: my_mode\n# in your mode\nscore_queue_player:\n  score_2k:\n    score: 2000\n  score_200:\n    score: 200\n```\n\n----------------------------------------\n\nTITLE: Displaying a Slide on an Event in MPF (YAML)\nDESCRIPTION: Demonstrates how to configure a slide player in MPF to display a slide when a specific event ('ball_started') is posted. It shows the basic syntax for triggering actions based on events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/conditional.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#! slides:\n#!   lets_go:\n#!     - type: text\n#!       text: \"MPF IS AWESOME\"\nslide_player:\n  ball_started: lets_go\n  ball_ended:\n    lets_go:\n      action: remove\n##! test\n#! start_game\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"MPF IS AWESOME\"\n#! drain_all_balls\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"MPF IS AWESOME\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Delay if it Doesn't Exist (Python)\nDESCRIPTION: Adds a delay only if a delay with the specified name doesn't already exist.  Uses the `add_if_doesnt_exist` method of the DelayManager, preventing duplicate delays with the same name.  Accepts the delay time, callback function, delay name, and keyword arguments for the callback.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nadd_if_doesnt_exist(ms: int, callback: Callable[[...], None], name: str, **kwargs) -> str\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scoring Based on Shot State (YAML)\nDESCRIPTION: This YAML snippet configures custom scoring in MPF based on the state of a shot profile. It modifies the `variable_player` section to award different scores depending on which state the `my_first_shot_my_first_profile` shot is in (`unlit` or `flashing`).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nvariable_player:\n  my_first_shot_my_first_profile_unlit_hit:\n    score: 100\n  my_first_shot_my_first_profile_flashing_hit:\n    score: 1000\n  s_flipper_lower_left_active:\n    score: 1000\n    potato: 1\n  s_flipper_lower_right_active:\n    potato: -2\n```\n\n----------------------------------------\n\nTITLE: Event Posting for Ball Start in MPF (Python)\nDESCRIPTION: This snippet demonstrates the event posting sequence when a new ball is starting in MPF. It posts asynchronous and queued events related to ball starting (ball_will_start, ball_starting, ball_started) and also handles events specific to single-player and multi-player games.  Event arguments include the ball number, remaining balls, whether it's an extra ball, and the player number. It depends on the `self.machine.events` object.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/dual_launch.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n     await self.machine.events.post_async('ball_will_start', **event_args)\n     '''event: ball_will_start\n     desc: The ball is about to start. This event is posted just before\n     :doc:`ball_starting`.\n     args:\n     ball: The ball number\n     balls_remaining: The number of balls left in the game (not including this one)\n     is_extra_ball: True if this ball is an extra ball (default False)\n     player: The player number'''\n\n     await self.machine.events.post_queue_async('ball_starting', **event_args)\n     '''event: ball_starting\n     desc: A ball is starting. This is a queue event, so the ball won't\n     actually start until the queue is cleared.\n     args:\n     ball: The ball number\n     balls_remaining: The number of balls left in the game (not including this one)\n     is_extra_ball: True if this ball is an extra ball (default False)\n     player: The player number'''\n\n     await self.machine.events.post_async('ball_started', **event_args)\n     '''event: ball_started\n     desc: A new ball has started.\n     args:\n     ball: The ball number\n     balls_remaining: The number of balls left in the game (not including this one)\n     is_extra_ball: True if this ball is an extra ball (default False)\n     player: The player number'''\n\n     if self.num_players == 1:\n         await self.machine.events.post_async('single_player_ball_started')\n         '''event: single_player_ball_started\n         desc: A new ball has started, and this is a single player game.'''\n     else:\n         await self.machine.events.post_async('multi_player_ball_started')\n         '''event: multi_player_ball_started\n         desc: A new ball has started, and this is a multiplayer game.'''\n         await self.machine.events.post_async(\n             'player_{}_ball_started'.format(self.player.number))\n         '''event player_(number)_ball_started\n         desc: A new ball has started, and this is a multiplayer game.\n         The player number is the (number) in the event that's posted.'''\n```\n\n----------------------------------------\n\nTITLE: Delay Game Ending with a Custom Mode (YAML)\nDESCRIPTION: This YAML configuration defines a custom mode that delays the game ending process. It starts when the `game_ending` event is posted, uses a wait queue to block the game ending, and stops when the `stop_my_mode` event is posted. The mode is not a game mode and has a priority of 500. This mode will block the game ending process until `stop_my_mode` is posted or the mode is stopped from code.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/game_end_modes.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: custom_high_score\n#config_version=5\nmode:\n  start_events: game_ending     # start on game ending process\n  use_wait_queue: true          # delay ball ending\n  game_mode: false              # the game is no longer running at this point\n  priority: 500                 # determines the order of game end modes\n  stop_events: stop_my_mode     # post this event to stop the mode and continue the game ending process\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulse Power for Coils (FAST)\nDESCRIPTION: This snippet shows how to configure the `default_pulse_power` setting for a coil connected to a FAST Pinball controller.  This allows setting the power level (0-1) during the initial pulse of the coil.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/drivers.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  some_coil:\n    number: 1-3\n    default_pulse_ms: 30\n    default_pulse_power: 0.5\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse and Release Rule (Python)\nDESCRIPTION: Adds a rule to pulse a driver when a switch is hit, and then cancels the pulse when the switch is released. This implements a short pulse that is cut off when the switch is no longer active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/platform_controller.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_release_rule(enable_switch: mpf.core.platform_controller.SwitchRuleSettings, driver: mpf.core.platform_controller.DriverRuleSettings, pulse_setting: mpf.core.platform_controller.PulseRuleSettings = None) -> mpf.core.platform_controller.HardwareRule\n```\n\n----------------------------------------\n\nTITLE: Checking Mode Activation Status (Python)\nDESCRIPTION: This method checks if a given mode is currently active. It takes the mode name as a string and returns a boolean value indicating whether the mode is active (True) or not (False).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/mode_controller.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.machine.mode_controller.is_active(mode_name)\n```\n\n----------------------------------------\n\nTITLE: Configuring MyPinballs Segment Displays\nDESCRIPTION: This YAML configuration shows how to connect and configure MyPinballs segment display controllers with MPF to control up to six segment displays. The `port` parameter specifies the serial port to which the controller is connected. The segment displays are numbered from 1 to 6.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/mypinballs/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  segment_displays: mypinballs\nmypinballs:\n  port: /dev/ttyUSB0\nsegment_displays:\n  display1:\n    number: 1\n  display2:\n    number: 2\n  display3:\n    number: 3\n  display4:\n    number: 4\n  display5:\n    number: 5\n  display6:\n    number: 6\n```\n\n----------------------------------------\n\nTITLE: Add Credits Mode to MPF Configuration (YAML)\nDESCRIPTION: Adds the 'credits' mode to the machine's configuration, enabling it to handle coin input, manage credits, and interact with the display system. This enables the credit mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodes:\n  - base\n  - bonus\n  - credits\n##! mode: base\n##! mode: bonus\n#! mode_settings:\n#!   bonus_entries:\n```\n\n----------------------------------------\n\nTITLE: Custom Code Configuration in YAML\nDESCRIPTION: This snippet demonstrates how to configure a custom code class in the machine configuration file (YAML).  It adds a `custom_code:` section and specifies the package, module (file name), and class name of the custom code class. MPF uses this configuration to load and instantiate the custom code class at runtime. The format is `package.module.ClassName`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/machine_code.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncustom_code:\n  - custom_code.claw.Claw\n```\n\n----------------------------------------\n\nTITLE: Configuring a GI light in MPF\nDESCRIPTION: This code snippet shows how to configure a GI light string in the `lights` section of the MPF configuration file.  The `number` parameter specifies the hardware address of the light, and the `subtype` is set to `gi` to indicate that it is a general illumination light.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/gis.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  gi_string_left:\n    number: 3    # number depends on your platform\n    subtype: gi\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.light() - Python\nDESCRIPTION: Light the extra ball for possible collection by the player. This method checks that the group is enabled and that the max lit value has not been exceeded. If so, this method will post the extra ball disabled events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlight()\n```\n\n----------------------------------------\n\nTITLE: Accessing Kickbacks\nDESCRIPTION: Demonstrates how to access kickback devices within the MPF framework using `self.machine.kickbacks`. Provides examples of accessing kickbacks by name and as a dictionary.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/kickbacks.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.kickbacks.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.kickbacks['foo']\n```\n\n----------------------------------------\n\nTITLE: Stepper Motor Configuration Example\nDESCRIPTION: This YAML configuration defines a stepper motor named `stepper1`, configures its homing switch, and sets up named positions for the stepper to move to based on posted events. It requires a switch `s_home` to be defined.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/steppers.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#config_version=5\nswitches:\n  s_home:\n    number:\nsteppers:\n  stepper1:\n    number: 1              # depends on your hardware\n    homing_mode: switch\n    homing_switch: s_home\n    named_positions:\n      10: move_to_position_1\n      20: move_to_position_2\n      50: move_to_position_3\n```\n\n----------------------------------------\n\nTITLE: Configuring Up-Down Ramps as Diverters in MPF YAML\nDESCRIPTION: This configuration shows how to configure up-down ramps as diverters in MPF. It covers both single-coil ramps, which use a 'hold' type diverter and two-coil ramps which use a 'pulse' type diverter, with separate activation and deactivation coils. It assumes that the coils `c_ramp1_up`, `c_ramp2_up`, and `c_ramp2_down` are defined in the coils section of the config.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/diverters/up_down_ramps.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndiverters:\n  up_down_one_coil:\n    activation_coil: c_ramp1_up\n    type: hold\n  up_down_two_coils:\n    activation_coil: c_ramp2_up\n    deactivation_coil: c_ramp2_down\n    type: pulse\n```\n\n----------------------------------------\n\nTITLE: Fetching and Pulling GMC Updates\nDESCRIPTION: These commands fetch the latest changes from the remote MPF-GMC repository and merge them into the local repository. This ensures the local copy of GMC is up-to-date with the latest features and bug fixes.  The user first navigates to the mpf-gmc directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/installation.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n(mpf080) ~/git $> cd mpf-gmc\n(mpf080) ~/git/mpf-gmc $> git fetch\n(mpf080) ~/git/mpf-gmc $> git pull\n```\n\n----------------------------------------\n\nTITLE: Enabling Tilt Mode with Minimal Configuration in MPF (YAML)\nDESCRIPTION: This snippet demonstrates the minimal configuration required to enable the default `tilt` mode in your MPF machine. It simply adds `tilt` to the list of modes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/tilt/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nmodes:\n  - tilt\n```\n\n----------------------------------------\n\nTITLE: Blocking Queue Events with show_player (YAML)\nDESCRIPTION: This example shows how to use `block_queue: true` in the `show_player:` section to block a queue event (like mode stopping) until the show completes. This ensures the mode doesn't fully stop until the show finishes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/show_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  mode_my_mode_stopping:\n    show_1:\n      block_queue: true\n```\n\n----------------------------------------\n\nTITLE: Configure virtual switches to start active in MPF\nDESCRIPTION: This configuration sets the virtual platform to start with a switch active, simulating balls in the trough when running MPF in virtual mode. The `virtual_platform_start_active_switches` setting allows specifying switches that should be in the active state when MPF starts without physical hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_one_switch.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nvirtual_platform_start_active_switches: s_trough_enter\n```\n\n----------------------------------------\n\nTITLE: Configure sound_loop_player in YAML\nDESCRIPTION: This snippet demonstrates how to configure the `sound_loop_player` section in a YAML file to control sound loops in MPF. It shows examples of playing and manipulating sound loop layers based on events. The `sound_loop_set`, `action`, `layer`, `timing`, and `fade_in` settings are used to define the behavior.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sound_loop_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsound_loop_player:\n  play_basic_beat:\n    loops:\n      action: play\n      sound_loop_set: basic_beat\n      timing: loop_end\n  add_hi_hats:\n    loops:\n      action: play_layer\n      layer: 1\n      timing: loop_end\n  stop_hi_hats:\n    loops:\n      action: stop_looping_layer\n      layer: 1\n  add_snare:\n    loops:\n      action: play_layer\n      fade_in: 2s\n      layer: 2\n      timing: now\n  add_claps:\n    loops:\n      action: play_layer\n      layer: 3\n      timing: loop_end\n```\n\n----------------------------------------\n\nTITLE: Configuring Drop Targets with Reset Coils in MPF\nDESCRIPTION: Configures the drop targets, associating each with a switch, a reset coil, and reset events. The reset events ensure that the drop targets are reset at the start of a ball, during machine reset, and when specifically triggered by a reset event.  This maintains the correct state of the drop targets.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/sequential_drop_banks.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndrop_targets:\n  drop_1:\n    switch: s_drop_1\n    reset_coil: c_drop_1\n    reset_events: ball_starting, machine_reset_phase_3, reset_drop_1\n  drop_2:\n    switch: s_drop_2\n    reset_coil: c_drop_2\n    reset_events: ball_starting, machine_reset_phase_3, reset_drop_2\n  drop_3:\n    switch: s_drop_3\n    reset_coil: c_drop_3\n    reset_events: ball_starting, machine_reset_phase_3, reset_drop_3\n  drop_4:\n    switch: s_drop_4\n    reset_coil: c_drop_4\n    reset_events: ball_starting, machine_reset_phase_3, reset_drop_4\n```\n\n----------------------------------------\n\nTITLE: Configure Weak Flippers with YAML\nDESCRIPTION: This YAML configuration defines normal and weak flipper settings. It demonstrates how to adjust `pulse_power` to reduce flipper strength, and how to enable/disable each flipper set by posting the `weak_flipper_enable` and `normal_flippers_enable` events. The configuration includes switches, coils, and flipper definitions for both left and right flippers, along with their weak variants.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/weak_flippers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_left_flipper:\n    number: 1\n  s_right_flipper:\n    number: 2\ncoils:\n  c_flipper_left:\n    number: 0\n    default_pulse_ms: 30\n    default_pulse_power: 0.5\n    default_hold_power: 0.125\n  c_flipper_right:\n    number: 1\n    default_pulse_ms: 30\n    default_pulse_power: 0.5\n    default_hold_power: 0.125\nflippers:\n  left:\n    main_coil: c_flipper_left\n    activation_switch: s_left_flipper\n    enable_events: normal_flippers_enable, ball_started\n    disable_events: weak_flipper_enable, ball_will_end, service_mode_entered\n  right:\n    main_coil: c_flipper_right\n    activation_switch: s_right_flipper\n    enable_events: normal_flippers_enable, ball_started\n    disable_events: weak_flipper_enable, ball_will_end, service_mode_entered\n  left_weak:\n    main_coil: c_flipper_left\n    main_coil_overwrite:\n      pulse_power: 0.3     # alternatively you can use pulse_ms: 20 here\n    activation_switch: s_left_flipper\n    enable_events: weak_flipper_enable\n    disable_events: normal_flippers_enable\n  right_weak:\n    main_coil: c_flipper_right\n    main_coil_overwrite:\n      pulse_power: 0.3     # alternatively you can use pulse_ms: 20 here\n    activation_switch: s_right_flipper\n    enable_events: weak_flipper_enable\n    disable_events: normal_flippers_enable\n```\n\n----------------------------------------\n\nTITLE: Defining a Show Step in YAML\nDESCRIPTION: Illustrates defining a single step in a show using YAML. This step sets the color of 'led1' to 'red' at a specific time.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/format.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: 0\n  lights:\n    led1: red\n```\n\n----------------------------------------\n\nTITLE: Define Displays for Window and DMD in MPF (YAML)\nDESCRIPTION: Configures two displays in MPF: one for the on-screen window and another for the virtual DMD. The 'window' display is set to the native resolution of the monitor, while the 'dmd' display is set to the desired resolution of the virtual DMD. Setting `default: true` on the dmd display ensures that content defaults to the DMD.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/adding_dot_look_to_lcd.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  window:\n    width: 800\n    height: 600\n  dmd:\n    width: 120\n    height: 90\n    default: true\n```\n\n----------------------------------------\n\nTITLE: Built-in Credits Mode Configuration in MPF (YAML)\nDESCRIPTION: Defines the configuration for the built-in credits mode, including its code location, priority, start event, and behavior regarding game mode and ball end. Configures the credits mode to be a top-level mode with high priority that runs constantly.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: credits\nmode:\n  code: mpf.modes.credits.code.credits.Credits\n  priority: 1000010\n  start_events: reset_complete\n  game_mode: false\n  stop_on_ball_end: false\n```\n\n----------------------------------------\n\nTITLE: Hardware Configuration for Dual Plungers in YAML\nDESCRIPTION: This YAML configuration defines the hardware setup for a pinball machine with dual plungers. It includes definitions for switches (cabinet buttons, plunger lanes, and trough switches), coils (for plunger and trough ejection), and ball devices (left and right troughs and plungers). The `playfields` section sets the `default_source_device` to the left plunger.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/dual_launch.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! no_fake_game\n#config_version=5\nswitches:\n  # Cabinet Buttons\n  s_start_button:\n    number:\n    tags: start\n  s_left_launch_button:\n    number:\n  s_right_launch_button:\n    number:\n  # Plunger Trough\n  s_left_plunger_lane:\n    number:\n  s_right_plunger_lane:\n    number:\n  s_left_trough1:\n    number:\n  s_left_trough2:\n    number:\n  s_right_trough1:\n    number:\n  s_right_trough2:\n    number:\n\ncoils:\n  c_left_plunger:\n    number:\n    default_pulse_ms: 20\n  c_left_trough_eject:\n    number:\n    default_pulse_ms: 20\n  c_right_plunger:\n    number:\n    default_pulse_ms: 20\n  c_right_trough_eject:\n    number:\n    default_pulse_ms: 20\n\nball_devices:\n  bd_left_trough:\n    ball_switches: s_left_trough1, s_left_trough2\n    eject_coil: c_left_trough_eject\n    tags: trough, home, drain\n    eject_targets: bd_left_plunger\n  bd_left_plunger:\n    ball_switches: s_left_plunger_lane\n    eject_coil: c_left_plunger\n    player_controlled_eject_event: s_left_launch_button_active\n    eject_timeouts: 1s\n  bd_right_trough:\n    ball_switches: s_right_trough1, s_right_trough2\n    eject_coil: c_right_trough_eject\n    tags: trough, home, drain\n    eject_targets: bd_right_plunger\n  bd_right_plunger:\n    ball_switches: s_right_plunger_lane\n    eject_coil: c_right_plunger\n    player_controlled_eject_event: s_right_launch_button_active\n    eject_timeouts: 1s\n\nplayfields:\n  playfield:\n    default_source_device: bd_left_plunger\n    tags: default\n\nvirtual_platform_start_active_switches: s_left_trough1, s_left_trough2, s_right_trough1, s_right_trough2\n##! test\n#! start_game\n```\n\n----------------------------------------\n\nTITLE: Configuring FAST driverboards for WPC in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure the `driverboards` section of your MPF hardware platform configuration file when using a FAST WPC controller.  It specifies that the platform is FAST and that the driverboards are WPC type. This ensures MPF correctly interfaces with the WPC hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machines/wpc.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: fast\nfast:\n  driverboards: wpc\n```\n\n----------------------------------------\n\nTITLE: Creating a Fake Ball Save (YAML)\nDESCRIPTION: This snippet defines a fake ball save in a mode to prevent the ball from ending when a specific event occurs, such as the end of a multiball. The ball save is configured to auto-launch set to false, save one ball, and has debug mode enabled.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/fake_ball_save.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nball_saves:\n  fake_MODE_NAME_ball_save:\n    enable_events:\n      - multiball_(multiball_name)_ended\n    auto_launch: false\n    balls_to_save: 1\n    debug: true\n```\n\n----------------------------------------\n\nTITLE: Set Trough as Default Source Device - YAML\nDESCRIPTION: This snippet configures the default playfield to use the trough as the `default_source_device`.  This directs MPF to eject balls from the trough into play, especially crucial for machines without a traditional shooter lane. The playfield is tagged as `default`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball_no_shooter_lane.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nplayfields:\n  playfield:\n    default_source_device: bd_drain\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Accessing the Pin2DMD Platform via Code\nDESCRIPTION: This snippet demonstrates how to access the Pin2DmdHardwarePlatform instance within the MPF's `self.machine.hardware_platforms` dictionary. This allows for direct interaction with the PIN2DMD hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/pin2dmd.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit and Release Rule (Python)\nDESCRIPTION: Shows how to set a pulse-on-hit-and-release rule for a driver (coil) connected to a switch using `set_pulse_on_hit_and_release_rule`. This is often employed for high-power coils on dual-wound flippers, where releasing the switch cancels the pulse. Requires an enable switch and the coil to be controlled.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/spike.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_release_rule(enable_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings)\n```\n\n----------------------------------------\n\nTITLE: Increasing Multipliers After Multiple Events with Accruals in YAML\nDESCRIPTION: This example shows how to increase multipliers after a combination of events occur using the `accruals` feature.  The `bonus_multiplier` accrual will trigger the `increment_multiplier` event, increasing the multiplier after both `robo_lanes_shots_lit_complete` and `tech_lanes_shots_lit_complete` events are posted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/scoring/index.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# set initial value for your multiplier player variable (to have it start\n# at 1 instead of 0)\nplayer_vars:\n  multiplier:\n    value_type: int\n    initial_value: 1\n##! mode: my_mode\n# in your mode:\naccruals:\n  bonus_multiplier:\n    events:\n      - robo_lanes_shots_lit_complete\n      - tech_lanes_shots_lit_complete\n    events_when_complete: increment_multiplier, light_bonus_2x_led\n    start_enabled: true\nvariable_player:\n  increment_multiplier:\n    multiplier: 1\n  score_something:\n    score: 100 * current_player.multiplier\n##! test\n#! start_game\n#! assert_player_variable 1 multiplier\n#! start_mode my_mode\n#! post score_something\n#! assert_player_variable 100 score\n#! post robo_lanes_shots_lit_complete\n#! assert_player_variable 1 multiplier\n#! post tech_lanes_shots_lit_complete\n#! assert_player_variable 2 multiplier\n#! post score_something\n#! assert_player_variable 300 score\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Player for Credit Events (YAML)\nDESCRIPTION: This configuration defines slides that are triggered by credit-related events such as adding credits, not having enough credits, enabling free play, etc. It specifies which slide to show and how long to display it for each event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  credits_added:\n    credit_added_slide:\n      expire: 2s\n  not_enough_credits:\n    not_enough_credits_slide:\n      expire: 2s\n  enabling_free_play:\n    enabling_free_play_slide:\n      expire: 2s\n  enabling_credit_play:\n    enabling_credit_play_slide:\n      expire: 2s\n  max_credits_reached:\n    max_credits_reached_slide:\n      expire: 2s\n  player_added:\n    player_added_slide:\n      expire: 1s\n```\n\n----------------------------------------\n\nTITLE: Configuring a Sequence Logic Block in MPF (YAML)\nDESCRIPTION: This example configures a sequence logic block called 'finish_world_tour' that requires four specific events to be posted in order: 'shot_north_america_hit', 'shot_south_america_hit', 'shot_europe_hit', and 'shot_australia_hit'. Once all four events are posted in the correct order, the event 'wt_done' is triggered. This logic block is part of a mode called 'my_mode'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/sequences.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\nsequences:\n  finish_world_tour:\n    events:\n      - shot_north_america_hit\n      - shot_south_america_hit\n      - shot_europe_hit\n      - shot_australia_hit\n    events_when_complete: wt_done\n```\n\n----------------------------------------\n\nTITLE: Configuring Sound Weights in a Sound Pool\nDESCRIPTION: This snippet demonstrates how to assign weights to each sound in the pool to control the probability of each sound being selected. Weights are appended to sound names using the pipe character `|`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/variations.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsound_pools:\n  triangle:\n    type: random\n    track: sfx\n    sounds:\n      - triangle_01|5\n      - triangle_02|2\n      - triangle_03|2\n      - triangle_04|1\n```\n\n----------------------------------------\n\nTITLE: Configuring a Sound Pool with Random Selection\nDESCRIPTION: This snippet shows how to configure a sound pool that randomly selects one of the defined sound variations when played. The `type` is set to `random` and the `sounds` list contains the sound names.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/variations.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsound_pools:\n  triangle:\n    type: random\n    sounds:\n      - triangle_01\n      - triangle_02\n      - triangle_03\n      - triangle_04\n```\n\n----------------------------------------\n\nTITLE: MPF Game Command Invocation (Custom Config)\nDESCRIPTION: Demonstrates running MPF with a custom configuration file. Equivalent invocations using `mpf game` and `mpf` are shown. The `-c` parameter specifies the configuration file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/mpf.md#_snippet_2\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ mpf game -c my_config\n$ mpf -c my_config\n```\n\n----------------------------------------\n\nTITLE: Configuring a Switch for Ball Detection in MPF (YAML)\nDESCRIPTION: This snippet configures a switch in MPF to detect the presence of a ball near the magnet. The switch is connected to the \"Sw Drive\" output (J1-4) of the Magnet Processor Board. The `number` property must be configured based on your platform's switch numbering scheme.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/magnets/stern_magnet_pcb.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_detect:\n    number: 1     # number depends on your platform\n```\n\n----------------------------------------\n\nTITLE: State Machine Configuration with States (YAML)\nDESCRIPTION: This snippet demonstrates the basic configuration of a state machine using the `states:` setting in YAML. It defines a state machine named `my_state` with three states: `start`, `step1`, and `step2`, each with associated configurations like `label`, `show_when_active`, and event triggers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/state_machines.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: my_mode\nstate_machines:\n  my_state:\n    states:\n      start:\n        label: Start state\n      step1:\n        label:\n        show_when_active:\n          show: on\n          show_tokens: None\n        events_when_started: step1_start\n        events_when_stopped: step1_stop\n      step2:\n        label: Step 2\n    transitions:\n```\n\n----------------------------------------\n\nTITLE: Running MPF with a specific config\nDESCRIPTION: This command runs the MPF game engine and loads the specified configuration file, `config/nodisplay.yaml`. The `-c` option specifies the path to the configuration file to be used.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/game.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mpf game -c nodisplay\n```\n\n----------------------------------------\n\nTITLE: Bitmap Font Configuration Example (YAML)\nDESCRIPTION: This example shows how to configure bitmap fonts, including specifying the file and descriptor. The `F1fuv` font uses a descriptor list directly in the config, while `example_font` uses an XML descriptor file. It highlights how to define the location of the font image and its associated descriptor.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/bitmap_fonts.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbitmap_fonts:\n  F1fuv:\n    file: F1fuv.png\n    descriptor: [' !\"#$%&,()*+`-./', '0123456789:;<=>?', '@ABCDEFGHIJKLMNO', 'PQRSTUVWXYZ[\\]^_', \"'''abcdefghijklmno\", 'pqrstuvwxyz{|}~ ']\n  example_font:\n    file: example_font.png\n    descriptor: example_font_descriptor.xml\n```\n\n----------------------------------------\n\nTITLE: Example Coil Configuration with PD-16 Number\nDESCRIPTION: This configuration sets up a coil named `some_coil` using the PD-16 numbering scheme. It defines the coil number as A0-B1-6 (board address 0, bank 1, output 6) and sets the default pulse time to 30ms. This enables the coil to be controlled via the P-ROC/P3-ROC system.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/drivers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil:\n    number: A0-B1-6\n    default_pulse_ms: 30\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiball Locks in MPF (Python)\nDESCRIPTION: Shows how to access multiball_lock devices in MPF using the device collection. Explains accessing by name and dictionary form. Requires `self.machine` to be a valid reference to the MPF machine object.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/multiball_locks.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.multiball_locks.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.multiball_locks['foo']\n```\n\n----------------------------------------\n\nTITLE: Assert Mode Running in MPF (Python)\nDESCRIPTION: This code snippet tests if a mode called \"attract\" is running in the MPF machine. It uses the `assertModeRunning` method provided by the MPF test framework to check the status of the mode. It is a basic test to verify initial MPF startup.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/Writing_Tests/WritingCustomTestsForYourMachine.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.assertModeRunning('attract')\n```\n\n----------------------------------------\n\nTITLE: Event Keymap Configuration\nDESCRIPTION: This snippet illustrates how to map keyboard keys to trigger MPF events. The first keymap binds the 'm' key to the 'start_mode_multiball' event, and the second binds the 'd' key to the 'drop_bank_left_complete' event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/keyboard.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[keyboard]\nm=[\"event\", \"start_mode_multiball\"]\nd=[\"event\", \"drop_bank_left_complete\"]\n```\n\n----------------------------------------\n\nTITLE: Doctor Mode Configuration (YAML)\nDESCRIPTION: This snippet configures a mode to be started by the carousel, specifically the Doctor 1 mode. It defines the `start_events`, `stop_events`, and `priority` for the mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/carousel.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n##! mode: Doctor_1\n##Example:  Doctor_1.yaml\nmode:\n  start_events: carousel_Doctor1_selected\n  stop_events: ball_ended\n  priority: 130\n##Then the rest of the mode's code.\n```\n\n----------------------------------------\n\nTITLE: Creating a Light Show in YAML for MPF\nDESCRIPTION: This YAML snippet defines a light show called `indy_lanes_complete` that alternates the lights of the lanes. The show's duration and light states are configured to create a flashing effect. The `duration` specifies how long each step lasts, and the `lights` section defines the brightness (00-ff) for each light.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/lanes_mode.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: indy_lanes_complete\n- duration: 1\n  lights:\n    indy_i: ff\n    indy_n: 00\n    indy_d: ff\n    indy_y: 00\n- duration: 1\n  lights:\n    indy_i: 00\n    indy_n: ff\n    indy_d: 00\n    indy_y: ff\n```\n\n----------------------------------------\n\nTITLE: Configuring Score Reels with YAML\nDESCRIPTION: This YAML configuration example demonstrates how to define lights, switches, coils, individual score reels, and score reel groups in MPF for controlling physical score reels. The configuration maps switches to reel positions and coils to advancement, allowing MPF to control and display player scores.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/score_reels.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  light_p1:\n    number:\n    tags: player1\n  light_p2:\n    number:\n    tags: player2\nswitches:\n  score_1p_10k_0:\n    number:\n  score_1p_1k_0:\n    number:\n  score_1p_100_0:\n    number:\n  score_1p_10_0:\n    number:\n  score_2p_10k_0:\n    number:\n  score_2p_1k_0:\n    number:\n  score_2p_100_0:\n    number:\n  score_2p_10_0:\n    number:\ncoils:\n  player1_10k:\n    number:\n  player1_1k:\n    number:\n  player1_100:\n    number:\n  player1_10:\n    number:\n  player2_10k:\n    number:\n  player2_1k:\n    number:\n  player2_100:\n    number:\n  player2_10:\n    number:\n  chime1:\n    number:\n  chime2:\n    number:\n  chime3:\n    number:\nscore_reels:\n  score_1p_10k:\n    coil_inc: player1_10k\n    switch_0: score_1p_10k_0\n    limit_hi: 9\n    limit_lo: 0\n  score_1p_1k:\n    coil_inc: player1_1k\n    switch_0: score_1p_1k_0\n    limit_hi: 9\n    limit_lo: 0\n  score_1p_100:\n    coil_inc: player1_100\n    switch_0: score_1p_100_0\n    limit_hi: 9\n    limit_lo: 0\n  score_1p_10:\n    coil_inc: player1_10\n    switch_0: score_1p_10_0\n    limit_hi: 9\n    limit_lo: 0\n  score_2p_10k:\n    coil_inc: player2_10k\n    switch_0: score_2p_10k_0\n    limit_hi: 9\n    limit_lo: 0\n  score_2p_1k:\n    coil_inc: player2_1k\n    switch_0: score_2p_1k_0\n    limit_hi: 9\n    limit_lo: 0\n  score_2p_100:\n    coil_inc: player2_100\n    switch_0: score_2p_100_0\n    limit_hi: 9\n    limit_lo: 0\n  score_2p_10:\n    coil_inc: player2_10\n    switch_0: score_2p_10_0\n    limit_hi: 9\n    limit_lo: 0\nscore_reel_groups:\n  player1:\n    reels: score_1p_10k, score_1p_1k, score_1p_100, score_1p_10, None\n    tags: player1\n    chimes: None, chime1, chime2, chime3, None\n    lights_tag: player1\n  player2:\n    reels: score_2p_10k, score_2p_1k, score_2p_100, score_2p_10, None\n    tags: player2\n    chimes: None, chime1, chime2, chime3, None\n    lights_tag: player2\n```\n\n----------------------------------------\n\nTITLE: Example MPF Command: Running MPF\nDESCRIPTION: This DOS command is used to run both the MPF game engine and the media controller. It assumes you are in the correct directory (e.g., `C:\\mpf-examples\\tutorial`) and have a valid MPF configuration file (`config.yaml`). This command starts the full MPF system.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/8_plunger.md#_snippet_2\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial>mpf both\n```\n\n----------------------------------------\n\nTITLE: Credit Mode Test Scenario (YAML)\nDESCRIPTION: This snippet defines a test scenario for the credit mode. It simulates adding credits by hitting the coin switch, checks the credit count using `assert_machine_variable`, and starts a game. This verifies that credits are added correctly and deducted when a game is started.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\nassert_machine_variable 0 credit_units\nhit_and_release_switch s_coin_left\nhit_and_release_switch s_coin_left\nassert_machine_variable 2 credit_units\nstart_game\nassert_machine_variable 0 credit_units\n```\n\n----------------------------------------\n\nTITLE: Editing /etc/inittab to enable login without password\nDESCRIPTION: This snippet shows the modified line in /etc/inittab to enable login without a password on the serial console. This is necessary for accessing the SPIKE system's Linux OS via serial connection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/mpf-spike-bridge.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nS0:2345:respawn:/sbin/getty 115200 ttyS0 -n -l /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Show Player for Ball Save Events (YAML)\nDESCRIPTION: This snippet configures show player entries for ball save timer start, hurry up, and disabled events. It defines the 'ball_save_show' to be played with different speeds based on the event. The 'action' key controls whether the show is played or stopped.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/ball_saves/center_post.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  ball_save_default_timer_start:\n    ball_save_show:\n      action: play\n      speed: 5\n  ball_save_default_hurry_up:\n    ball_save_show:\n      action: play\n      speed: 10\n  ball_save_default_disabled:\n    ball_save_show:\n      action: stop\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit Rule (Python)\nDESCRIPTION: Demonstrates how to set a simple pulse-on-hit rule for a driver (coil) using the `set_pulse_on_hit_rule` method. This configuration is primarily used for pop bumpers. The rule activates the coil when the specified switch is hit.  Requires an enable switch and the coil to be controlled.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/spike.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_rule(enable_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings)\n```\n\n----------------------------------------\n\nTITLE: Removing slide with a custom transition\nDESCRIPTION: This snippet shows how to remove `top_slide` upon event `mc_reset_complete.3` with a fade transition lasting 3 seconds. It also shows how to display `top_slide` and `base` slides upon other events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/slide_player.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  base:\n    widgets:\n      - type: text\n        text: BASE SLIDE\n        color: ff0000\n        font_size: 100\n  top_slide:\n    widgets:\n      - type: text\n        text: TOP SLIDE\n        color: purple\n        y: 66%\n\nslide_player:\n  mc_reset_complete.1: top_slide\n  mc_reset_complete.2: base\n  mc_reset_complete.3:\n    top_slide:\n      action: remove\n      transition:\n        type: fade\n        duration: 3s\n```\n\n----------------------------------------\n\nTITLE: Accessing Player Variables in MPF Python\nDESCRIPTION: This snippet demonstrates how to access and manipulate player variables within an MPF game mode. It includes checks for a valid player instance and shows how to read and set player variables. The example explicitly advises against persisting the player object as it might change, particularly in multiplayer games.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/variables_in_code.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nplayer = self.machine.game.player    # do not persist the player because it may change\n                                     # alternatively use self.player in modes\n\nif not player:\n   return    # do something reasonable here but do not crash in the next line\n\n# read player variable\nself.machine.log.info(player[\"my_variable\"])\n\n# set a variable\nplayer[\"my_variable\"] = 17\n```\n\n----------------------------------------\n\nTITLE: Run MPF MC with a specific config file\nDESCRIPTION: This command runs the MPF Media Controller (MPF MC) and loads the specified configuration file `config/nodisplay.yaml`. The `-c` option is used to specify the configuration file to load.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/mc.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mpf mc -c nodisplay\n```\n\n----------------------------------------\n\nTITLE: Configure Go-To-Position Event Mapping in MPF\nDESCRIPTION: This snippet illustrates the `go_to_position` setting within the motor configuration. It maps events to specific motor positions defined in `position_switches`. When an event is posted, the motor moves to the corresponding position.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/motors.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngo_to_position:\n    stop_claw: home\n    go_pos1: pos1\n    go_pos2: pos2\n```\n\n----------------------------------------\n\nTITLE: Configure Drain Eject Coil - YAML\nDESCRIPTION: This snippet configures the drain eject coil in the `coils:` section. The `number` parameter specifies the hardware number of the coil. The `default_pulse_ms` parameter sets the default pulse time for the coil, which can be adjusted to ensure reliable ball ejection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball_no_shooter_lane.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_drain_eject:\n    number: 03\n    default_pulse_ms: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring a State Machine in YAML\nDESCRIPTION: This example configures a state machine named `my_state` with three states: `start`, `step1`, and `step2`. It defines transitions between these states triggered by events such as `state_machine_proceed`. `step1` uses show when active and emits events when started and stopped. The test section verifies the state transitions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/state_machines.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\nstate_machines:\n  my_state:\n    states:\n      start:\n        label: Start state\n      step1:\n        label:\n        show_when_active:\n          show: on\n          show_tokens: None\n        events_when_started: step1_start\n        events_when_stopped: step1_stop\n      step2:\n        label:\n    transitions:\n      - source: start\n        target: step1\n        events: state_machine_proceed\n      - source: step1\n        target: step2\n        events: state_machine_proceed2\n        events_when_transitioning: going_to_step2\n      - source: step2\n        target: start\n        events: state_machine_proceed3\n      - source: step1, step2\n        target: start\n        events: state_machine_reset\n##! test\n#! start_game\n#! start_mode my_mode\n#! mock_event going_to_step2\n#! assert_str_condition start device.state_machines.my_state.state\n#! post state_machine_proceed\n#! assert_str_condition step1 device.state_machines.my_state.state\n#! assert_event_not_called going_to_step2\n#! post state_machine_proceed2\n#! assert_str_condition step2 device.state_machines.my_state.state\n#! assert_event_called going_to_step2\n```\n\n----------------------------------------\n\nTITLE: Mode Selection on Ball One\nDESCRIPTION: This YAML snippet configures a mode that starts when the game starts and stops when a ball starts. It uses the queue_relay_player to post an event to enable mode selection and waits for another event to indicate that a selection has been made. The selection happens only on ball 1.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/mode_selection.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: start_selector_on_ball_one\n#config_version=5\nmode:\n  start_events: game_started\n  stop_events: ball_started\n  priority: 100\n  game_mode: false   # this is needed to interfere with game start\nqueue_relay_player:\n  player_turn_starting{player.ball==0}:\n    post: show_mode_selection       # use this event to enable selection\n    wait_for: selection_mode_ended  # make sure you post this event is posted when a selection was made\n```\n\n----------------------------------------\n\nTITLE: Configure Network Connection to LISY - YAML\nDESCRIPTION: This snippet shows the YAML configuration required in the MPF machine config file to connect to the LISY board via a network connection (Ethernet or WiFi). It specifies the platform as 'lisy', the connection type as 'network', the network port, and the IP address of the LISY board. Replace `a.b.c.d` with the actual IP address of your LISY board.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/connection.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  platform: lisy\nlisy:\n  connection: network\n  network_port: 5963\n  network_host: a.b.c.d    # replace this with the IP of LISY\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Player for Event Handling (YAML)\nDESCRIPTION: This snippet shows how to configure the `slide_player` in MPF to display a specific slide (`my_slide`) when a custom event (`mpf_is_awesome`) is posted.  This demonstrates how events can trigger visual changes on the display. The test block verifies this behavior.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#! slides:\n#!   my_slide:\n#!     - type: text\n#!       text: \"MPF IS AWESOME\"\nslide_player:\n  mpf_is_awesome: my_slide\n##! test\n#! post mpf_is_awesome\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"MPF IS AWESOME\"\n```\n\n----------------------------------------\n\nTITLE: Running PKONE Hardware Scan with MPF\nDESCRIPTION: This command-line utility is used to detect and report connected PKONE hardware components, verifying USB connectivity and firmware versions. It helps identify if the PKONE boards are properly communicating with MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/troubleshooting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mpf hardware scan\n\n## Penny K Pinball Hardware\n\n- Connected Controllers:\n  -> PKONE Nano - Port: com3 at 115200 baud (firmware v1.1, hardware rev 2)\n\n- Extension boards:\n  -> Address ID: 0 (firmware v1.1, hardware rev 2)\n  -> Address ID: 1 (firmware v1.1, hardware rev 2)\n\n- Lightshow boards:\n  -> Address ID: 2 (RGB firmware v1.0, hardware rev 1)\n  -> Address ID: 3 (RGBW firmware v1.0, hardware rev 1)\n```\n\n----------------------------------------\n\nTITLE: Processing Switch State Change by Object (Python)\nDESCRIPTION: Processes a new switch state change for a switch using the switch object.  Parameters include the `obj` (switch object), the new `state`, a `logical` flag, and an optional `timestamp`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nprocess_switch_obj(obj: mpf.devices.switch.Switch, state, logical, timestamp=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Defaults in YAML\nDESCRIPTION: This code snippet demonstrates how to configure default asset settings for images in the `assets:` section of an MPF config file. It defines different settings for assets located in sub-folders named `default`, `preload`, `on_demand`, and `potato`. The `default` entry applies to the root folder and unspecified sub-folders. The settings define asset loading behavior based on folder location.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/assets.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nassets:\n  images:\n    default:\n      load: preload\n    preload:\n      load: preload\n    on_demand:\n      load: on_demand\n    potato:\n      some_key: some_value\n      something_else: whatever\n```\n\n----------------------------------------\n\nTITLE: Check P-Roc/P3-Roc Device Connection on Linux/Mac\nDESCRIPTION: Use the `dmesg` or `lsusb` commands to check if the P/P3-Roc device is recognized by the operating system. This helps diagnose basic connectivity issues.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/troubleshooting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndmesg\nlsusb\n```\n\n----------------------------------------\n\nTITLE: Create NeoSeg Light Group\nDESCRIPTION: Creates a light group for a NeoSeg display using `neoseg_displays`. Each light group maps to a physical NeoSeg display, simplifying the configuration of individual segments.  The configuration specifies the starting light channel, display size, and a light template.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/cobrapin/cobrapin_serial_segment_displays.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nneoseg_displays:\n  neoSeg_0:\n    start_channel: 0-0-0\n    size: 8digit\n    light_template:\n      type: w\n      subtype: led\n      color_correction_profile: NeoSeg_orange\n```\n\n----------------------------------------\n\nTITLE: Setting a Setting Value (Python)\nDESCRIPTION: Explains how to set the value of a specific setting. Requires the setting name and the new value as inputs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/settings.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nset_setting_value(setting_name, value)\n```\n\n----------------------------------------\n\nTITLE: MPF Skill Shot Test Configuration\nDESCRIPTION: This YAML snippet contains test configurations for verifying the skill shot mode's functionality. It includes tests for success, failure, lane changes, race conditions between success and failure events, and timeout scenarios. These tests utilize MPF's testing framework to simulate game events and assert the expected behavior of the skill shot mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/skill_shot.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#! test\n#! # failure\n#! start_game\n#! assert_mode_running skill_shot\n#! hit_and_release_switch s_lane_l\n#! assert_mode_not_running skill_shot\n#! assert_player_variable 42 score\n#! stop_game\n#! # success\n#! start_game\n#! assert_mode_running skill_shot\n#! hit_and_release_switch s_lane_m\n#! assert_mode_not_running skill_shot\n#! assert_player_variable 0 score\n#! stop_game\n#! # move + success\n#! start_game\n#! assert_mode_running skill_shot\n#! post s_right_flipper_active\n#! hit_and_release_switch s_lane_m\n#! assert_mode_not_running skill_shot\n#! assert_player_variable 42 score\n#! stop_game\n#! # test race between success and failed -> success first\n#! start_game\n#! mock_event skill_success\n#! mock_event skill_failed\n#! assert_mode_running skill_shot\n#! hit_and_release_switches_simultaneously s_lane_l s_lane_m\n#! assert_mode_not_running skill_shot\n#! assert_event_called skill_success\n#! assert_event_not_called skill_failed\n#! stop_game\n#! # test race between success and failed -> failed first\n#! start_game\n#! mock_event skill_success\n#! mock_event skill_failed\n#! assert_mode_running skill_shot\n#! hit_and_release_switches_simultaneously s_lane_m s_lane_l\n#! assert_mode_not_running skill_shot\n#! assert_event_called skill_failed\n#! assert_event_not_called skill_success\n#! stop_game\n#! # test timeout\n#! start_game\n#! mock_event skill_success\n#! mock_event skill_failed\n#! assert_mode_running skill_shot\n#! advance_time_and_run 10\n#! assert_mode_running skill_shot\n#! post balldevice_plunger_lane_ball_eject_success\n#! advance_time_and_run 10\n#! assert_mode_not_running skill_shot\n#! assert_event_called skill_failed\n#! assert_event_not_called skill_success\n#! stop_game\n```\n\n----------------------------------------\n\nTITLE: Easing Configuration for Opacity Animation\nDESCRIPTION: This YAML configuration demonstrates the animation of the opacity property of text widgets using different easing functions within the MPF media controller. The slide contains five text widgets with animations applied to their opacity, showcasing linear, in_out_quad, in_out_elastic, out_bounce, and in_quint easing effects. The slide is triggered by the 'init_done' event from the media controller.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/easing_config.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config_version=5\ndisplays:\n  default:\n    width: 400\n    height: 300\nslides:\n  slide1:\n    - type: text\n      text: linear (none)\n      y: 90%\n      font_size: 35\n      animations:\n        show_slide:\n          - property: opacity\n            value: 1\n            duration: 1s\n            easing: linear\n          - property: opacity\n            value: 0\n            duration: 1s\n            easing: linear\n            repeat: true\n    - type: text\n      text: in_out_quad\n      y: 70%\n      font_size: 35\n      animations:\n        show_slide:\n          - property: opacity\n            value: 1\n            duration: 1s\n            easing: in_out_quad\n          - property: opacity\n            value: 0\n            duration: 1s\n            easing: in_out_quad\n            repeat: true\n    - type: text\n      text: in_out_elastic\n      y: 50%\n      font_size: 35\n      animations:\n        show_slide:\n          - property: opacity\n            value: 1\n            duration: 1s\n            easing: in_out_elastic\n          - property: opacity\n            value: 0\n            duration: 1s\n            easing: in_out_elastic\n            repeat: true\n    - type: text\n      text: out_bounce\n      y: 30%\n      font_size: 35\n      animations:\n        show_slide:\n          - property: opacity\n            value: 1\n            duration: 1s\n            easing: out_bounce\n          - property: opacity\n            value: 0\n            duration: 1s\n            easing: out_bounce\n            repeat: true\n    - type: text\n      text: in_quint\n      y: 10%\n      font_size: 35\n      animations:\n        show_slide:\n          - property: opacity\n            value: 1\n            duration: 1s\n            easing: in_quint\n          - property: opacity\n            value: 0\n            duration: 1s\n            easing: in_quint\n            repeat: true\nslide_player:\n  init_done: slide1\n```\n\n----------------------------------------\n\nTITLE: Triggering Shows with Logic_Block _updated Event in YAML\nDESCRIPTION: This YAML snippet configures a counter and uses the `logicblock_(name)_updated` event to trigger different shows based on the counter's value. It demonstrates how to start and stop shows based on the logic block's state using the `show_player`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/integrating_logic_blocks_and_shows.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\ncounters:\n  my_counter:\n    count_events: my_count_event\n    starting_count: 0\n    count_complete_value: 3\nshow_player:\n  logicblock_my_counter_updated{value == 0}:\n    my_show_initial:\n      key: my_counter_show # this is to remove the previous show from the same player\n  logicblock_my_counter_updated{value == 1}:\n    my_show_first_hit:\n      key: my_counter_show # this is to remove the previous show from the same player\n  logicblock_my_counter_updated{value >= 2}:\n    my_show_final:\n      key: my_counter_show # this is to remove the previous show from the same player\n```\n\n----------------------------------------\n\nTITLE: Complete Configuration Example (YAML)\nDESCRIPTION: A comprehensive example configuration that includes settings for hardware, P-ROC, displays, window, DMDs, slides, and slide player. This config demonstrates how to connect a physical DMD and display content from MPF-MC. It defines slides for both the on-screen window and the physical DMD, mapping them through the slide player.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/dmd.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: p_roc\np_roc:\n  driverboards: pdb\ndisplays:\n  window:  # on screen window\n    width: 600\n    height: 200\n  dmd:  # source display for the DMD\n    width: 128\n    height: 32\n    default: true\nwindow:\n  width: 600\n  height: 200\n  title: Mission Pinball Framework\n  source_display: window\ndmds:\n  my_dmd:\n    brightness: 1.0\nslides:\n  window_slide_1:  # slide we'll show in the on-screen window\n    - type: display\n      effects:\n        - type: dmd\n          dot_color: ff5500\n      width: 512\n      height: 128\n    - type: text\n      text: MISSION PINBALL FRAMEWORK\n      anchor_y: top\n      y: top-3\n      font_size: 30\n    - type: rectangle\n      width: 514\n      height: 130\n      color: 444444\n  dmd_slide_1:  # slide we'll show on the physical DMD\n    - type: text\n      text: IT WORKS!\n      font_size: 25\nslide_player:\n  init_done:\n    window_slide_1:\n      target: window\n    dmd_slide_1:\n      target: dmd\n##! test\n#! assert_text_on_top_slide \"MISSION PINBALL FRAMEWORK\" window\n#! assert_text_on_top_slide \"IT WORKS!\" dmd\n```\n\n----------------------------------------\n\nTITLE: Mocking Events in Python\nDESCRIPTION: This snippet demonstrates how to mock an MPF event using `self.mock_event()`. Mocking events allows you to verify that specific events are posted during your tests without having to create actual event handlers.  The event must be mocked before it is posted for `assertEventNotCalled()` and `assertEventCalled()` to work.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nself.mock_event('my_event')\nself.assertEventNotCalled('my_event')  # This will be True\nself.post_event('my_event')\nself.assertEventCalled('my_event')  # This will also be True\n```\n\n----------------------------------------\n\nTITLE: Blocking Events in Carousel Mode (YAML)\nDESCRIPTION: This snippet demonstrates how to block and release events within a carousel mode configuration.  `block_events` prevents carousel event handling until one of the `release_events` is posted. This is useful to avoid unwanted actions after selection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/carousel.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblock_events: flipper_cancel\nrelease_events: both_flippers_inactive\n```\n\n----------------------------------------\n\nTITLE: Delaying Eject using Queue Relay Player in YAML\nDESCRIPTION: This snippet shows how to delay the ball ejection from a scoop using a queue relay player. This allows for animations and sounds to play while the ball is held. It uses a show to create the delay and conditional events to trigger the show.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/scoops.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_scoop:\n    number: 2\ncoils:\n  c_scoop_eject:\n    number: 4\n    default_pulse_ms: 20\nball_devices:\n  bd_scoop:\n    ball_switches: s_scoop\n    eject_coil: c_scoop_eject\n    eject_timeouts: 1s\n##! mode: my_mode\n# in your mode\nqueue_relay_player:\n  balldevice_bd_scoop_ball_eject_attempt:\n    post: start_mode_success_show\n    wait_for: mode_success_show_ended\nshow_player:\n  start_mode_success_show:\n    success_show:\n      loops: 0\n      events_when_completed: mode_success_show_ended\nshows:\n  success_show:\n    - duration: 10\n#!       events: test_event\n      # add lights/sounds/slides here\n##! test\n#! start_game\n#! mock_event test_event\n#! assert_balls_on_playfield 1\n#! hit_switch s_scoop\n#! advance_time_and_run .9\n#! assert_balls_on_playfield 0\n#! advance_time_and_run 2\n#! assert_balls_on_playfield 1\n#! assert_event_not_called test_event\n#! start_mode my_mode\n#! hit_switch s_scoop\n#! advance_time_and_run 2\n#! assert_event_called test_event\n#! assert_balls_on_playfield 0\n#! advance_time_and_run 10\n#! assert_balls_on_playfield 1\n```\n\n----------------------------------------\n\nTITLE: Monitoring Counter Properties with Events in MPF (YAML)\nDESCRIPTION: This configuration demonstrates how to monitor counter properties (value and completion status) using event players in MPF.  The 'test_counter' increments with each 'count_up' event, and events 'count_above_one' and 'count_completed' are conditionally triggered based on the counter's value and completed status, respectively. This showcases dynamic value usage in conditional events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/counters.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\ncounters:\n  test_counter:\n    count_events: count_up\n    reset_on_complete: false\n    count_complete_value: 3\nevent_player:\n  test_event{device.counters.test_counter.value > 1}: count_above_one\n  test_event{device.counters.test_counter.completed}: count_completed\n```\n\n----------------------------------------\n\nTITLE: Sound Loop Set with Multiple Layers in YAML\nDESCRIPTION: Demonstrates a more complex sound loop set named `basic_beat` that includes multiple layers of sound assets. Each layer can have its own volume and initial state. Events can be triggered when the loop is played, stopped, or looping, and fade-out times can be set.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sound_loop_sets.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsound_loop_sets:\n  basic_beat:\n    sound: kick\n    volume: 0.5\n    tempo: 130.0\n    layers:\n      - sound: hihat\n        volume: 0.7\n        initial_state: stop\n      - sound: snare\n        volume: 0.6\n        initial_state: stop\n      - sound: clap\n        volume: 0.45\n        initial_state: stop\n    events_when_played: basic_beat_played\n    events_when_stopped: basic_beat_stopped\n    events_when_looping: basic_beat_looped\n    fade_out: 1s\n  basic_beat2:\n    sound: kick2\n    volume: 0.5\n    tempo: 130.0\n    layers:\n      - sound: hihat\n        volume: 0.7\n      - sound: snare\n        volume: 0.6\n      - sound: clap\n        volume: 0.4\n        initial_state: stop\n      - sound: bass_synth\n        volume: 0.5\n        initial_state: play\n    fade_out: 1s\n```\n\n----------------------------------------\n\nTITLE: Using variable_player to Restore Counter State\nDESCRIPTION: This snippet shows how to use `variable_player` to restore the old behavior of saving counter state in player variables. It defines a `variable_player` configuration that updates a player variable with the current counter value when the counter is updated. This is necessary because counters no longer save their state in player variables directly.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/counters.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\nvariable_player:\n  logicblock_YOUR_COUNTER_updated:\n    YOUR_COUNTER_count:\n      int: value\n      action: set\n```\n\n----------------------------------------\n\nTITLE: Fully Working Example - Light Stripes YAML\nDESCRIPTION: This YAML configuration utilizes the light_stripes feature to define a serial LED light strip. It specifies the starting number, count, and a template for light numbers. Additionally, it sets up light player events and keyboard mappings. This example demonstrates defining a LED strip using `light_stripes:` which has a spelling mistake.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/index.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n#config_version=5\n\nhardware:\n platform: opp\n driverboards: gen2\n\nopp:\n ports: /dev/ttyACM0, /dev/ttyACM1\n\nlight_stripes: #yes there is a spelling mistake, make the same mistake\n led_strip_0:\n    number_start: 0\n    count: 50\n    number_template: 0-0-{}\n    light_template:\n       type: rgb\n       tags: strip0\n\nlight_player:\n full_strip_on:\n    strip0: DFFF00\n led_off:\n    led_strip_0: off\n single_led_green:\n    led_strip_0_light_5: green #led_strip_0 is the name of the strip\n\nkeyboard:\n 1:\n    event: led_off\n 2:\n    event: full_strip_on\n 3:\n    event: single_led_green\n```\n\n----------------------------------------\n\nTITLE: Configure Virtual Platform Active Switches YAML\nDESCRIPTION: This code snippet shows how to configure the `virtual_platform_start_active_switches` setting in MPF. This setting is used when running MPF with a virtual platform (i.e., without physical hardware) to specify which switches should start in the active state. This is useful for simulating a game starting with balls already in the trough.  Each switch name is listed under the `virtual_platform_start_active_switches` setting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_opto.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nvirtual_platform_start_active_switches:\n  - s_trough1\n  - s_trough2\n  - s_trough3\n  - s_trough4\n  - s_trough5\n  - s_trough6\n```\n\n----------------------------------------\n\nTITLE: Timed Switch Configuration Example (Flipper Cradle)\nDESCRIPTION: This example demonstrates a timed switch configuration for a flipper cradle. It defines the switches associated with the left and right flippers, the time duration for activation (3 seconds), and the events to post when the switches are active or released.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/timed_switches.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntimed_switches:\n  flipper_cradle:\n    switch_tags: left_flipper, right_flipper\n    time: 3s\n    events_when_active: flipper_cradle\n    events_when_released: flipper_cradle_release\n```\n\n----------------------------------------\n\nTITLE: Configure Alpha-Numeric Displays in YAML for P-ROC\nDESCRIPTION: This configuration snippet shows how to define four alpha-numeric displays connected to the P-ROC controller within the `segment_displays` section of an MPF configuration file. Each display is assigned a unique `number` corresponding to its physical connection on the P-ROC board (0-3).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/alpha_numeric.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nsegment_displays:\n  display1:\n    number: 0\n  display2:\n    number: 1\n  display3:\n    number: 2\n  display4:\n    number: 3\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration for the Basic Show (YAML)\nDESCRIPTION: This snippet shows how to play the 'flash_red' show via the 'show_player:' section in your MPF configuration.  The 'some_event' triggers the execution of the show when the 'some_event' event is posted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  some_event: flash_red\n```\n\n----------------------------------------\n\nTITLE: Resolve YAML Version Conflict\nDESCRIPTION: Commands to uninstall potentially conflicting versions of MPF, MPF-MC, and MPF-Monitor and then reinstall the latest release versions of each.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/xubuntu.md#_snippet_8\n\nLANGUAGE: doscon\nCODE:\n```\npip3 uninstall mpf mpf-mc mpf-monitor\npip3 install mpf mpf-mc mpf-monitor\n```\n\n----------------------------------------\n\nTITLE: Using the 'flash_color' show in MPF\nDESCRIPTION: Example configuration showing how to use the 'flash_color' show in a MPF show_player to create a flashing effect with a specific color. The 'flash_color' show combines the flashing behavior with custom color setting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/default_shows.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  my_triggering_event:\n    flash_color:\n      speed: 0.5 # so flash for 2 seconds, off for 2 seconds, etc\n      show_tokens:\n        led: my_flashing_light\n        color: 00FF00-f1s #green with a 1s fade\n```\n\n----------------------------------------\n\nTITLE: Resetting Ball Search Timer\nDESCRIPTION: This code defines the `reset_timer` method, which resets the timeout timer that starts ball search. This method also cancels an actively running ball search. It's called by the playfield anytime a playfield switch is hit.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef reset_timer():\n    \"\"\"Reset the timeout timer which starts ball search.\n\n    This method will also cancel an actively running (started) ball search.\n\n    This is called by the playfield anytime a playfield switch is hit.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration: Plunger Device Definition\nDESCRIPTION: This YAML snippet configures a plunger lane as a ball device in MPF. It defines the switch (`s_plunger`) associated with the plunger, and specifies that it's a mechanically ejected device.  The `ball_switches` property links the switch to the ball device, and `mechanical_eject` indicates that a coil is not used to eject the ball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/8_plunger.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n#! switches:\n#!   s_plunger:\n#!     number: 10\n#! ball_devices:\n#!   bd_plunger:\n#!     ball_switches: s_plunger\n#!     mechanical_eject: true\n```\n\n----------------------------------------\n\nTITLE: Registering the VPX Bridge with Python\nDESCRIPTION: This snippet shows how to register the MPF-VPX bridge using the `register_vpcom.py` script. It requires running the command prompt as an administrator.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/virtual/virtual_pinball_vpx.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npython register_vpcom.py --register\n```\n\n----------------------------------------\n\nTITLE: Configuring FadeCandy Server with Multiple Channels\nDESCRIPTION: This JSON configuration example demonstrates how to configure the FadeCandy server (`fcserver`) to use multiple channels for connecting LEDs. It maps each connector to a specific OSC channel, improving performance and enabling more intuitive numbering.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fadecandy/index.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"listen\": [\"127.0.0.1\", 7890],\n    \"verbose\": true,\n    \"color\": {\n        \"gamma\": 2.5,\n        \"whitepoint\": [1.0, 1.0, 1.0]\n    },\n    \"devices\": [\n        {\n            \"type\": \"fadecandy\",\n            \"serial\": \"YOUR_FADECANDY_SERIAL\",\n            \"map\": [\n                [ 0, 0, 0, 64 ],\n                [ 1, 0, 64, 64 ],\n                [ 2, 0, 128, 64 ],\n                [ 3, 0, 192, 64 ],\n                [ 4, 0, 256, 64 ],\n                [ 5, 0, 320, 64 ],\n                [ 6, 0, 384, 64 ],\n                [ 7, 0, 448, 64 ]\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Assert Switch State - Python\nDESCRIPTION: Asserts that a switch with the specified name exists and is in the given state (e.g., active or inactive).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n`assertSwitchState(name, state)`\n```\n\n----------------------------------------\n\nTITLE: Getting Setting Value (Python)\nDESCRIPTION: Explains how to retrieve the current value of a setting. Requires the setting name as input and returns the current value.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/settings.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nget_setting_value(setting_name)\n```\n\n----------------------------------------\n\nTITLE: Add Flipper Switches to config.yaml\nDESCRIPTION: This snippet demonstrates how to define flipper switches in the `config.yaml` file. It includes the switch names (`s_left_flipper`, `s_right_flipper`), the `number` setting (which is left blank initially but must be populated with hardware-specific switch numbers later), and tags (`left_flipper`, `right_flipper`) which are useful for combo switch features.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=6\n\nswitches:\n  s_left_flipper:\n    number:\n    tags: left_flipper\n  s_right_flipper:\n    number:\n    tags: right_flipper\n```\n\n----------------------------------------\n\nTITLE: Conditional Counter Start Count YAML\nDESCRIPTION: This snippet demonstrates how to conditionally set the starting count of a counter based on a player variable. It uses conditional events to adjust the counter's `starting_count` based on the value of `current_player.selected_character`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/mode_selection.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: qualify\ncounters:\n  left_ramp_qualify_counter:\n    starting_count: 2 if current_player.selected_character == \"character1\" else 0\n    count_complete_value: 3\n    count_events: left_ramp_hit\n```\n\n----------------------------------------\n\nTITLE: OPP Chains Configuration YAML\nDESCRIPTION: Example showing how to configure OPP chains. It configures multiple serial ports and associates them with specific chain IDs. This configuration is needed when using multiple OPP boards connected in a chain.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/opp.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nopp:\n  ports: /dev/ttyOPP0, /dev/ttyOPP1\n  chains:\n    0: /dev/ttyOPP0\n    1: /dev/ttyOPP1\n```\n\n----------------------------------------\n\nTITLE: Running MPF in Example Tutorial (DOS)\nDESCRIPTION: This command is used to run the MPF example tutorial and is intended to let you execute the game with a virtual platform for testing purposes.  The `-X` flag typically indicates a virtual platform is being used.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/10_run_a_game.md#_snippet_5\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial>mpf both -X\n```\n\n----------------------------------------\n\nTITLE: Forcing Debouncing for a Switch (P3-ROC)\nDESCRIPTION: This snippet demonstrates how to force debouncing to always be used for a specific switch. While debouncing is the default, this shows how to explicitly configure it using `debounce: normal`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/switches_p3_roc.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_switch:\n    number: A0-B0-0\n    debounce: normal\n```\n\n----------------------------------------\n\nTITLE: Coil Player Show Example YAML\nDESCRIPTION: This example demonstrates how to use the coil player within a show to pulse coil1 at time 0. The coils section in a show step is used to define coil player actions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/coil_player.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n##! show: test\n- time: 0\n  coils:\n    coil1: pulse\n```\n\n----------------------------------------\n\nTITLE: Associating a Shot with a Light in YAML\nDESCRIPTION: This snippet demonstrates how to associate a shot with a lamp matrix light using `show_tokens`.  It assumes a light named `l_light_quick_freeze` is configured in the machine.  The configured light will be controlled by the current shot profile when the shot is hit.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  my_first_shot:\n    switch: s_right_inlane\n    show_tokens:\n      light: l_light_quick_freeze # pick a light that's valid in your machine\n```\n\n----------------------------------------\n\nTITLE: Running MPF with Smart Virtual Platform\nDESCRIPTION: This command launches both the MPF game engine and media controller, using the Smart Virtual platform. The `-X` option is crucial for running the example without physical P-ROC hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/examples/demo_man.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmpf both -X\n```\n\n----------------------------------------\n\nTITLE: Configure MPF for LISY over Serial\nDESCRIPTION: This YAML configuration snippet configures Mission Pinball Framework (MPF) to communicate with the LISY platform (in this case, APC) via a serial connection.  It specifies the serial port and baud rate to use for communication. The `port` value needs to be adjusted based on the serial port assigned by the operating system.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/apc/connection.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: lisy\nlisy:\n  connection: serial\n  port: com1               # replace this with your com port\n  baud: 115200\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration with Multiple Tokens (YAML)\nDESCRIPTION: This snippet shows how to play a show with multiple tokens, assigning values to 'led', 'color1', and 'color2' in the 'show_player:' section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  some_event:\n    color_cycle:\n      loops: -1\n      show_tokens:\n        led: led_02\n        color1: green\n        color2: blue\n```\n\n----------------------------------------\n\nTITLE: Widget Player Config with Slide Override YAML\nDESCRIPTION: This YAML snippet demonstrates how to add a widget to a specific slide, overriding the default behavior. It associates the *some_event* event with the *widget_1* widget and sets the target slide to *slide_2*. The initial comment line specifies the widget definition which would normally be present elsewhere in the config.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/widget_player.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#! widgets:\n#!   widget_1: []\nwidget_player:\n  some_event:\n    widget_1:\n      slide: slide_2\n```\n\n----------------------------------------\n\nTITLE: Configuring WS2811 and WS2812 LEDs in MPF\nDESCRIPTION: This snippet shows how to configure WS2811 and WS2812 LEDs in MPF using the `lights` section of the configuration file.  It defines the `number` which specifies the first LED in the chain, and the `type` which specifies the color order (RGB for WS2811, GRB for WS2812). The exact number format will depend on your platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/ws2812.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  my_ws2811:\n    number: 0         # first LED in chain (with three channels) - exact number format depends on your platform\n    type: rgb\n  my_ws2812:\n    number: 1         # second LED in chain (with three channels)\n    type: grb\n```\n\n----------------------------------------\n\nTITLE: YAML Show Configuration for Matrix Lights\nDESCRIPTION: This YAML snippet defines a show called `attract_light_show` that cycles through matrix lights `l_light1`, `l_light2`, and `l_light3`. The `duration` specifies how long each step lasts, and the `lights` section defines which lights are on (`ff`) or off (`0`) during that step.\nAssumes lights are already defined in machine configuration.\nOutput: The lights will cycle in a 1-2-3-2 pattern.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/17_add_lights_leds.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: attract_light_show\n#show_version=5\n- duration: 1\n  lights:\n    l_light2: 0\n    l_light1: ff\n- duration: 1\n  lights:\n    l_light1: 0\n    l_light2: ff\n- duration: 1\n  lights:\n    l_light2: 0\n    l_light3: ff\n- duration: 1\n  lights:\n    l_light3: 0\n    l_light2: ff\n```\n\n----------------------------------------\n\nTITLE: Virtual DMD Color Configuration\nDESCRIPTION: This code snippet shows how to configure the color of the dot overlay for the `virtual_dmd` filter. It requires four RGBA float values between 0.0 and 1.0.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/window-filters.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n    color=Color(1.0, 0.5, 0.2, 1.0)\n```\n\n----------------------------------------\n\nTITLE: Creating a Shot Profile for Drop Targets in MPF\nDESCRIPTION: Defines a shot profile for the drop targets with three states: off, lit, and down. The profile uses built-in shows (`off`, `flash`, and `on`) to control the LED lights associated with each shot, based on the shot's state.  `advance_on_hit` is set to `false` to prevent advancing the profile when the shot is hit directly.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/sequential_drop_banks.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshot_profiles:\n  drop_sequence:\n    advance_on_hit: false\n    states:\n      - name: off\n        show: off\n      - name: lit\n        show: flash\n      - name: down\n        show: on\n```\n\n----------------------------------------\n\nTITLE: BallDevice.eject_all() Python\nDESCRIPTION: Ejects all balls from this device to a specified target. The target can be a string or BallDevice and defaults to the playfield if None.  Returns True if there are balls to eject; False if the device is empty.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/ball_devices.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\neject_all(target=None) → bool\n```\n\n----------------------------------------\n\nTITLE: Adding a Hardware Platform Interface in MPF (Python)\nDESCRIPTION: This code snippet describes how to add an additional hardware platform interface to MPF.  The `add_platform` method allows MPF to interact with different hardware by specifying the platform's name, which corresponds to a Python file in the mpf/platforms folder. It requires the platform name as input and does not return any value. The platform file must exist in the specified folder for the platform to be added successfully.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/machine.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n`add_platform(name: str) → None`\nMake an additional hardware platform interface available to MPF.\n\nParameters:\n\n* **name** – String name of the platform to add. Must match the name of a platform file in the mpf/platforms folder (without the .py extension).\n```\n\n----------------------------------------\n\nTITLE: Configuring a Mode with a Shot Scoring Rule (YAML)\nDESCRIPTION: This YAML snippet shows the configuration for a mode (`mode2`) in MPF which starts a banner on mode start and adds 1 point to the player's score every time the shot `my_first_shot` is hit. It defines start and stop events, a priority for the mode, a text widget displayed on mode start, and a variable player entry.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmode:\n  start_events: mode2_start\n  stop_events: mode2_stop\n  priority: 200\n\nwidgets:\n  mode2_start_banner:\n    type: text\n    text: MODE 2 STARTED\n    font_size: 50\n    color: lime\n    y: 80%\n    expire: 1s\n\nwidget_player:\n  mode_mode2_started: mode2_start_banner\n\nvariable_player:\n  my_first_shot_hit:\n    score: 1\n```\n\n----------------------------------------\n\nTITLE: Running MPF-MC Unit Tests (Python)\nDESCRIPTION: This snippet demonstrates how to run the MPF-MC unit tests using the `unittest` module in Python. It discovers and executes all tests located in the `mpfmc.tests` directory. The output shows the number of tests run and the overall result (OK).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/debugging_mpf_install.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python3 -m unittest discover -s mpfmc.tests\n[...]\nRan 182 tests in 193.610s\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Tilt Bob Switch Configuration in MPF (YAML)\nDESCRIPTION: This code snippet demonstrates how to configure a tilt bob switch in the Mission Pinball Framework (MPF) using YAML. It includes defining the switch number and adding the `tilt_warning` tag, which is essential for proper tilt functionality.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/tilt_bob.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodes:\n  - tilt\nswitches:\n  s_tilt:\n    number: 23    # number depends on your platform\n    tags: tilt_warning\n```\n\n----------------------------------------\n\nTITLE: Complete Example Configuration in YAML\nDESCRIPTION: This YAML configuration presents a complete example, combining the hardware configurations for dual plungers with the custom game mode configuration.  It includes the switch, coil, ball device, playfield and mode configurations needed for MPF to use the custom game mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/dual_launch.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n##! no_fake_game\n#config_version=5\nswitches:\n  # Cabinet Buttons\n  s_start_button:\n    number:\n    tags: start\n  s_left_launch_button:\n    number:\n  s_right_launch_button:\n    number:\n  # Plunger Trough\n  s_left_plunger_lane:\n    number:\n  s_right_plunger_lane:\n    number:\n  s_left_trough1:\n    number:\n  s_left_trough2:\n    number:\n  s_right_trough1:\n    number:\n  s_right_trough2:\n    number:\n\ncoils:\n  c_left_plunger:\n    number:\n    default_pulse_ms: 20\n  c_left_trough_eject:\n    number:\n    default_pulse_ms: 20\n  c_right_plunger:\n    number:\n    default_pulse_ms: 20\n  c_right_trough_eject:\n    number:\n    default_pulse_ms: 20\n\nball_devices:\n  bd_left_trough:\n    ball_switches: s_left_trough1, s_left_trough2\n    eject_coil: c_left_trough_eject\n    tags: trough, home, drain\n    eject_targets: bd_left_plunger\n  bd_left_plunger:\n    ball_switches: s_left_plunger_lane\n    eject_coil: c_left_plunger\n    eject_timeouts: 1s\n  bd_right_trough:\n    ball_switches: s_right_trough1, s_right_trough2\n    eject_coil: c_right_trough_eject\n    tags: trough, home, drain\n    eject_targets: bd_right_plunger\n  bd_right_plunger:\n    ball_switches: s_right_plunger_lane\n    eject_coil: c_right_plunger\n    eject_timeouts: 1s\n\nplayfields:\n  playfield:\n    default_source_device: bd_left_plunger\n    tags: default\n\nvirtual_platform_start_active_switches: s_left_trough1, s_left_trough2, s_right_trough1, s_right_trough2\n\n##! mode: game\n#config_version=5\nmode:\n  start_events: game_start\n  stop_events: game_ended, service_mode_entered\n  priority: 20\n  code: modes.game.code.game.MyGameName\n  game_mode: false  # this is the game so it is started outside of a game\n  stop_on_ball_end: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Coils with Driver Numbers in YAML\nDESCRIPTION: This snippet demonstrates how to configure coils in MPF using YAML, including assigning driver numbers and specifying enable behavior. The number parameter corresponds to the driver number on the hardware, and 'a' or 'c' is appended to the driver number for switched solenoids which use the A/C relay.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/snux.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  outhole:\n    number: c01a\n  knocker:\n    number: c01c\n  trough:\n    number: c02a\n  visor_motor:\n    number: c13\n    allow_enable: true\n  upper_pf_and_topper_1:\n    number: c02c\n  left_insert_bottom:\n    number: c03c\n  right_insert_bottom:\n    number: c04c\n  lower_pf_and_topper_2:\n    number: c05c\n  energy:\n    number: c06c\n  left_playfield:\n    number: c07c\n  sun:\n    number: c08c\n  robot_face_insert_bottom:\n    number: c09\n  topper_3:\n    number: c15\n  topper_4:\n    number: c16\n```\n\n----------------------------------------\n\nTITLE: Mount USB Drive on Spike\nDESCRIPTION: These commands mount a USB drive on the Spike system at `/mnt`. The correct device name (/dev/sda1 or /dev/sda) needs to be identified first. This allows logging to the USB drive for debugging purposes. An `ls /mnt` command can verify that the mounting was successful.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/troubleshooting.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmount /dev/sda1 /mnt\n```\n\nLANGUAGE: console\nCODE:\n```\nmount /dev/sda /mnt\n```\n\nLANGUAGE: console\nCODE:\n```\nls /mnt\n```\n\n----------------------------------------\n\nTITLE: Random Event Player Mode Configuration YAML\nDESCRIPTION: This configuration illustrates the usage of the random event player in a mode-specific configuration. It sets up the player to post a random event from the list event1, event2, and event3 when the event `play_random_event` is posted. Additionally, it shows how to configure events with weights influencing the probability of event being posted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/random_event_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: base\n# in your mode:\nrandom_event_player:\n  play_random_event:\n    events:\n      - event1\n      - event2\n      - event3\n  play_random_event_with_weight:\n    events:\n      unlikely_event1: 2\n      unlikely_event2: 3\n      likely_event1: 45\n      likely_event2: 50\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient Color Stops Example\nDESCRIPTION: Demonstrates the syntax for defining color stops in the `color_stops` dictionary for the `linear_gradient` effect. Keys are floating point numbers between 0.0 and 1.0 indicating the position along the gradient, and values are RGBA colors.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/display/effects.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`\"0.1\": ff00ff00`\n```\n\n----------------------------------------\n\nTITLE: Start MPF-MC separately (console)\nDESCRIPTION: This command starts the MPF media controller separately, allowing for focused debugging of media-related issues. Running it in a separate terminal from the MPF game engine makes it easier to identify the source of problems.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/general_debugging.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ mpf mc\n```\n\n----------------------------------------\n\nTITLE: Configuring Segment Display Transition\nDESCRIPTION: This code snippet demonstrates how to configure a segment display transition in MPF using the `segment_display_player` and `segment_displays` sections in a YAML configuration file. It sets the text, priority, expiration, incoming transition, and outgoing transition for a segment display. The example sets up a 'push' transition with a specific direction and transition text.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/segment_display_transitions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#! segment_displays:\n#!   display1:\n#!     number: 1\nsegment_display_player:\n  jackpot_completed:\n    display1:\n      text: JACKPOT\n      priority: 1000\n      expire: 2s\n      transition:\n        type: push\n        direction: right\n        text: \" *** \"\n      transition_out:\n        type: push\n        direction: right\n        text: \" *** \"\n```\n\n----------------------------------------\n\nTITLE: Switch Keymap Configuration\nDESCRIPTION: This snippet demonstrates how to map keyboard keys to activate and deactivate switches in MPF. The default behavior activates the switch on key press and deactivates it on key release.  The first keymap binds the '1' key to switch 's_switch_1' and the second binds the 'Enter' key to switch 's_start_button'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/keyboard.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[keyboard]\n1=[\"switch\", \"s_switch_1\"]\nenter=[\"switch\", \"s_start_button\"]\n```\n\n----------------------------------------\n\nTITLE: Handling Ball Drain Event in Python\nDESCRIPTION: Shows how to handle the event when one or more balls are drained. The `ball_drained` method subtracts the number of drained balls from the balls in play and returns a dictionary with the count of drained balls.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/game.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nball_drained(balls=0, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Configure Eject Timeouts (Playfield Target) - YAML\nDESCRIPTION: Configures the `eject_timeouts:` setting for a plunger lane that ejects directly to the playfield. The `eject_timeouts:` parameter defines how long MPF waits for confirmation that the ball has left the plunger before retrying the eject. A typical value is 3 seconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/mechanical_with_switch.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    # ...\n    eject_timeouts: 3s\n```\n\n----------------------------------------\n\nTITLE: Accessing Snux Hardware Platform in MPF (Python)\nDESCRIPTION: This code snippet shows how to access the Snux hardware platform instance from within the MPF machine controller. It utilizes the `self.machine.hardware_platforms` dictionary with the key 'snux'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/snux.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['snux']\n```\n\n----------------------------------------\n\nTITLE: Enabling Debugging for PKONE in MPF Configuration\nDESCRIPTION: This YAML configuration snippet enables debug logging for the PKONE platform within MPF. By setting `debug: true`, more detailed logging is activated, which can help in identifying hardware-related issues. Remember to remove or disable the debug setting after troubleshooting is complete.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/troubleshooting.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npkone:\n  debug: true\n```\n\n----------------------------------------\n\nTITLE: BCP Switch Command Example\nDESCRIPTION: Illustrates the BCP `switch` command used to indicate a switch state change. The `name` parameter specifies the switch, and the `state` parameter indicates whether the switch is active (1) or inactive (0). This example shows the \"start\" switch being activated and then deactivated.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/BCP_Protocol/switch.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nswitch?name=start&state=1\n```\n\nLANGUAGE: console\nCODE:\n```\nswitch?name=start&state=0\n```\n\n----------------------------------------\n\nTITLE: Accessing System11 Platform via Code in MPF\nDESCRIPTION: This snippet demonstrates how to access the System11 hardware platform within the Mission Pinball Framework (MPF). The hardware platforms are stored in the `self.machine.hardware_platforms` dictionary. This example shows how to retrieve the 'system11' platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/system11.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['system11']\n```\n\n----------------------------------------\n\nTITLE: Settings Configuration YAML\nDESCRIPTION: This snippet defines operator settings for `warnings_to_tilt`. It allows the operator to choose the number of tilt warnings via a menu. The setting is defined within the `settings:` section of the machine configuration. Requires a `settings:` section in the machine config.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/dynamic_values.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# in your machine config\nsettings:\n  warnings_to_tilt:\n    label: Number of tilt warnings\n    values:\n      0: \"no warnings\"\n      1: \"1\"\n      2: \"2\"\n      3: \"3\"\n      5: \"5\"\n      10: \"10\"\n    default: 3\n    key_type: int\n    sort: 600\n```\n\n----------------------------------------\n\nTITLE: Adding a Rectangle Widget Behind the Text\nDESCRIPTION: This snippet adds a rectangle widget behind the text in the `welcome_slide`. The rectangle has a width of 240 and a height of 60. Since no color is specified, the rectangle will be white.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  welcome_slide:\n    widgets:\n      - type: text\n        text: PINBALL!\n        font_size: 50\n        color: red\n      - type: rectangle\n        width: 240\n        height: 60\n```\n\n----------------------------------------\n\nTITLE: Dynamic Slides in slide_player: section YAML\nDESCRIPTION: This snippet shows how to dynamically define slides in the `slide_player:` section of a config file. When the specified event occurs, the slide player will show the defined slide with its widgets.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/creating_slides.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nslide_player:\n  some_event:\n    my_slide_1:\n      - type: text\n        text: THIS IS MY SLIDE\n##! test\n#! post some_event\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"THIS IS MY SLIDE\"\n```\n\n----------------------------------------\n\nTITLE: Running MPF with example config\nDESCRIPTION: This code snippet shows how to execute the MPF (Mission Pinball Framework) with both the media controller and the hardware controller, along with the `-X` flag to enable verbose logging which is useful for debugging. The command needs to be executed from the specified directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/11_add_coils_switches.md#_snippet_0\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial>mpf both -X\n```\n\n----------------------------------------\n\nTITLE: Complete Hardware Configuration Example\nDESCRIPTION: A complete example configuration file demonstrating the definition of hardware, NeoSeg light groups, segment displays, and color correction profiles. This configuration provides a full setup for using NeoSeg displays within an MPF project.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/cobrapin/cobrapin_serial_segment_displays.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n\nhardware:\n  platform: opp\n  driverboards: gen2\n  segment_displays: light_segment_displays\n\n#create light group for each NeoSeg display\nneoseg_displays:\n  neoSeg_0:\n    start_channel: 0-0-0\n    size: 8digit\n    light_template:\n      type: w\n      subtype: led\n      color_correction_profile: NeoSeg_orange\n  neoSeg_1:\n    start_channel: 0-0-120\n    size: 8digit\n    light_template:\n      type: w\n      subtype: led\n      color_correction_profile: NeoSeg_white\n\n  neoSeg_7:\n    start_channel: 0-0-660\n    size: 2digit\n    light_template:\n      type: w\n      subtype: led\n      color_correction_profile: NeoSeg_blue\n  neoSeg_8:\n    start_channel: 0-0-690\n    size: 2digit\n    light_template:\n      type: w\n      subtype: led\n      color_correction_profile: NeoSeg_red\n\n#use light groups to arrange into a segment display\nsegment_displays:\n  neoSegTop:\n    number: 1\n    size: 16\n    integrated_dots: true\n    use_dots_for_commas: true\n    default_transition_update_hz: 30\n    platform_settings:\n      light_groups:\n        - neoSeg_0\n        - neoSeg_1\n      type: 14segment\n\n  neoSegBot:\n    number: 1\n    size: 4\n    integrated_dots: true\n    use_dots_for_commas: true\n    default_transition_update_hz: 30\n    platform_settings:\n      light_groups:\n        - neoSeg_8\n        - neoSeg_7\n      type: 14segment\n\n#use color_correction_profile whitepoint to adjust the brightness of each\n#NeoSeg display\nlight_settings:\n  color_correction_profiles:\n    NeoSeg_red:\n      whitepoint: [.8, .8, .8]\n    NeoSeg_white:\n      whitepoint: [.55, .55, .55]\n    NeoSeg_blue:\n      whitepoint: [.5, .5, .5]\n    NeoSeg_orange:\n      whitepoint: [.9, .9, .9]\n    NeoSeg_yellow:\n      whitepoint: [1, 1, 1]\n    NeoSeg_green:\n      whitepoint: [.5, .5, .5]\n```\n\n----------------------------------------\n\nTITLE: Starting a Ball Save on Ball Start - YAML\nDESCRIPTION: This snippet shows how to configure a ball save to start when a ball is ejected from the plunger lane.  It sets up the necessary devices (playfield, lights, switches, coils, ball_devices) and then configure the ball save to start when the ball is ejected from the plunger.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/ball_start_end.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\nlights:\n  l_ball_save:\n    number:\nswitches:\n  s_plunger:\n    number:\ncoils:\n  c_eject:\n    number:\nball_devices:\n  bd_plunger:\n    eject_coil: c_eject\n    ball_switches: s_plunger\n    tags: home, trough, drain\n    eject_timeouts: 1s\n##! mode: my_mode\n# in your mode\nmode:\n  start_events: ball_started\nball_saves:\n  ball_save_ball_save:\n    active_time: 10s\n    hurry_up_time: 3s\n    timer_start_events: balldevice_bd_plunger_ejecting_ball\n    auto_launch: true\n    balls_to_save: 1\nshow_player:\n  ball_save_ball_save_ball_save_timer_start:\n    flash_color:\n      key: ball_save\n      speed: 2\n      show_tokens:\n        lights: l_ball_save\n        color: orange\n  ball_save_ball_save_ball_save_hurry_up:\n    flash_color:\n      key: ball_save\n      speed: 4\n      show_tokens:\n        lights: l_ball_save\n        color: orange\n  ball_save_ball_save_ball_save_disabled:\n    ball_save: stop\n##! test\n#! hit_switch s_plunger\n#! advance_time_and_run 1\n#! mock_event ball_save_ball_save_ball_save_saving_ball\n#! hit_and_release_switch s_start\n#! advance_time_and_run 2\n#! assert_event_not_called ball_save_ball_save_ball_save_saving_ball\n#! hit_switch s_plunger\n#! advance_time_and_run 1\n#! assert_player_variable 1 ball\n#! assert_event_called ball_save_ball_save_ball_save_saving_ball\n#! advance_time_and_run 5\n#! hit_switch s_plunger\n#! advance_time_and_run 1\n#! assert_player_variable 2 ball\n#! assert_light_flashing l_ball_save orange\n#! advance_time_and_run 7\n#! assert_light_flashing l_ball_save orange .5\n#! advance_time_and_run 5\n#! assert_light_color l_ball_save off\n#! hit_switch s_plunger\n#! advance_time_and_run 1\n#! assert_player_variable 3 ball\n```\n\n----------------------------------------\n\nTITLE: Registering a Monitor in MPF (Python)\nDESCRIPTION: This code snippet demonstrates how to register a monitor within MPF. Monitors allow components to observe internal events and states within MPF, such as changes to player variables or switch states. The `register_monitor` method requires a monitor class name (string) and a callback function.  The callback will be executed when the monitored event occurs. The registered monitors are stored centrally but are referenced by the monitors themselves.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/machine.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n`register_monitor(monitor_class: str, monitor: Callable[[...], Any]) → None`\n\nRegister a monitor.\n\nParameters:\n\n* **monitor_class** – String name of the monitor class for this monitor that’s being registered.\n* **monitor** – Callback to notify\n\nMPF uses monitors to allow components to monitor certain internal elements of MPF. For example, a player variable monitor could be setup to be notified of any changes to a player variable, or a switch monitor could be used to allow a plugin to be notified of any changes to any switches. The MachineController’s list of registered monitors doesn’t actually do anything. Rather it’s a dictionary of sets which the monitors themselves can reference when they need to do something. We just needed a central registry of monitors.\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Named Widgets in One Event (YAML)\nDESCRIPTION: This snippet shows how to add multiple named widgets from a single event using the `widget_player:` section. Each widget can be targeted to a specific display (e.g., `dmd` or `lcd`). The `target:` setting is used to specify the display for each widget.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_player:\n  some_event:\n    widget1:\n      target: dmd\n    widget2:\n      target: lcd\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Plunger Eject Timeouts in MPF (YAML)\nDESCRIPTION: This snippet demonstrates the basic configuration for a coil-fired plunger lane that ejects the ball directly to the playfield. It sets the `eject_timeouts` value, which determines how long MPF waits for confirmation of a successful eject before retrying.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/coil_fired.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n#!     ball_switches: s_plunger_lane\n#!     eject_coil: c_plunger\n    # ...\n    eject_timeouts: 3s\n```\n\n----------------------------------------\n\nTITLE: Accrual Logic Block Structure YAML\nDESCRIPTION: This snippet shows the basic YAML structure for defining accrual logic blocks within the `accruals:` section of a machine or mode configuration file. The name of each block is arbitrary and primarily used for logging.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/accruals.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naccruals:\n   the_name_of_this_logic_block:\n      <settings>\n   some_other_logic_block:\n      <settings>\n   a_third_logic_block:\n      <settings>\n```\n\n----------------------------------------\n\nTITLE: Removing a slide with slide_player using action\nDESCRIPTION: This snippet demonstrates how to remove a slide using the `action: remove` setting within the `slide_player` configuration. When the `remove_slide_1` event is posted, `slide1` will be removed from the display.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/slide_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  remove_slide_1:           # event name\n    slide1:                 # slide name\n      action: remove\n```\n\n----------------------------------------\n\nTITLE: Run MPF MC with a config file from a custom location\nDESCRIPTION: This command runs the MPF Media Controller (MPF MC) and loads the configuration file from a specific location `/home/brian/pinball/demo_man/config/config.yaml`. The `-c` option is used to specify the full path to the config file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/mc.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ mpf mc -c /home/brian/pinball/demo_man/config/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring a Target Switch in MPF with YAML\nDESCRIPTION: This snippet demonstrates how to configure a target switch in the MPF configuration file using YAML. It defines the switch number, debounce settings, and an ignore window to prevent multiple hits from a single target hit.  The switch is named 's_target', is connected to switch number 5, uses quick debouncing, and ignores hits within a 1000ms window after the initial hit.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/targets/stationary_targets.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_target:\n    number: 5\n    debounce: quick\n    ignore_window_ms: 1000ms\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration Using Event Argument as Token (YAML)\nDESCRIPTION: This snippet shows how to use an event argument ('number' from the 'player_turn_started' event) as a token value. The 'txt' token in the show will be replaced with the value of the 'number' argument when the event is triggered.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  player_turn_started:\n    player_num: #The name of the show to be started upon this event\n      show_tokens:\n        txt: (number)\n```\n\n----------------------------------------\n\nTITLE: Adding Ball to Playfield after Launch Button Press in MPF (Python)\nDESCRIPTION: This snippet waits for either the left or right launch button to be pressed and then adds a ball to the playfield from the corresponding ball device. It uses `Util.race` to handle asynchronous waiting for switch activation. It depends on the `self.machine.switch_controller`, `self.machine.switches`, `self.machine.playfield` and `self.machine.ball_devices` objects.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/dual_launch.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n     left_switch_pressed_future = self.machine.switch_controller.wait_for_switch(self.machine.switches[\"s_left_launch_button\"])\n     right_switch_pressed_future = self.machine.switch_controller.wait_for_switch(self.machine.switches[\"s_right_launch_button\"])\n     first_switch = await Util.race({left_switch_pressed_future: \"left\", right_switch_pressed_future: \"right\"})\n     if first_switch == \"left\":\n         self.machine.playfield.add_ball(source_device=self.machine.ball_devices['bd_left_plunger'], player_controlled=True)\n     else:\n         self.machine.playfield.add_ball(source_device=self.machine.ball_devices['bd_right_plunger'], player_controlled=True)\n```\n\n----------------------------------------\n\nTITLE: Counter Configuration\nDESCRIPTION: This YAML configuration defines three counters: `lb_jets_count`, `lb_jets_resume`, and `lb_rollover_complete_count`. These counters track the number of hits on the jet bumpers and rollover lanes, triggering events when certain thresholds are reached. The counters manage persistence, enable/disable based on game state, and define when the mode `super_jets` starts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/AFM_super_jets.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncounters:\n  lb_jets_count:\n    count_events: jets_hit\n    starting_count: 0\n    count_complete_value: 100\n    count_interval: 1\n    direction: up\n    persist_state: true\n    events_when_complete: Super_Jets_Go\n    debug: true\n  lb_jets_resume:\n    enable_events: mode_base_started{current_player.sj_active>0}\n    count_events: jets_hit\n    starting_count: 0\n    count_complete_value: 25\n    count_interval: 1\n    direction: up\n    persist_state: false\n    events_when_complete: Super_Jets_Resume_Go\n    debug: true\n    reset_on_complete: true\n  lb_rollover_complete_count:\n    count_events: rollover_lanes_complete\n    events_when_hit: rollover_lanes_done\n    starting_count: 0\n    count_complete_value: 40\n    reset_on_complete: false\n    direction: up\n    persist_state: false\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit Rule\nDESCRIPTION: Sets a hardware rule to pulse a coil when a switch is hit. Mostly used for popbumpers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_rule(enable_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings)\n```\n\n----------------------------------------\n\nTITLE: Configure Shot Group and Rotation Timer\nDESCRIPTION: This snippet defines a shot group containing all the skillshot targets and a timer to control the rotation. The `rotate_events` property in the shot group specifies which event triggers the rotation. The timer is set to tick every 500ms and automatically stops when the ball leaves the plunger lane, effectively halting the target rotation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_auto_rotate.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n#! switches:\n#!   s_dropbank_1:\n#!     number: 1\n#!   s_dropbank_2:\n#!     number: 2\n#!   s_dropbank_3:\n#!     number: 3\n#!   s_dropbank_4:\n#!     number: 4\n#!   s_dropbank_5:\n#!     number: 5\n##! mode: skillshot_with_auto_rotate\n#! shots:\n#!   skillshot_drop_1:\n#!     switch: s_dropbank_1\n#!   skillshot_drop_2:\n#!     switch: s_dropbank_2\n#!   skillshot_drop_3:\n#!     switch: s_dropbank_3\n#!   skillshot_drop_4:\n#!     switch: s_dropbank_4\n#!   skillshot_drop_5:\n#!     switch: s_dropbank_5\n\nshot_groups:\n  skillshot:\n    shots:\n      - skillshot_drop_1\n      - skillshot_drop_2\n      - skillshot_drop_3\n      - skillshot_drop_4\n      - skillshot_drop_5\n    rotate_events: timer_skillshot_rotate_tick\n\ntimers:\n  skillshot_rotate:\n    tick_interval: 500ms\n    start_running: true\n    control_events:\n      - event: s_plunger_lane_inactive\n        action: stop\n```\n\n----------------------------------------\n\nTITLE: Accessing Switches in Code - MPF\nDESCRIPTION: This snippet demonstrates how to access a switch named \"foo\" within the MPF framework, using both attribute-style and dictionary-style access. The device collection containing the switches is accessed via `self.machine.switches`. This allows for easy interaction with and manipulation of switch states within the pinball machine logic. No specific dependencies are required beyond the MPF core.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/switches.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.switches.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.switches['foo']\n```\n\n----------------------------------------\n\nTITLE: BallDevice.request_ball() Python\nDESCRIPTION: Requests that one or more balls are added to this device.  A value of -1 will cause this device to try to fill itself. This function takes an integer indicating the number of balls to add and unused keyword arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/ball_devices.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nrequest_ball(balls=1)\n```\n\n----------------------------------------\n\nTITLE: Simple Sound Loop Set Definition in YAML\nDESCRIPTION: Defines a basic sound loop set named `basic_beat` using a single sound asset named `kick`. This example demonstrates the simplest configuration with only the sound asset specified. The volume defaults to the sound asset's setting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sound_loop_sets.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsound_loop_sets:\n  basic_beat:\n    sound: kick\n```\n\n----------------------------------------\n\nTITLE: Hit Switch and Run - Python\nDESCRIPTION: This function activates a switch and advances the time by a specified amount. The 'name' parameter specifies the switch to activate, and 'delta' is the time in seconds to advance the clock. Note that the switch remains active after the time has been advanced.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nhit_switch_and_run(name, delta)\n```\n\n----------------------------------------\n\nTITLE: Run MPF without text UI (console)\nDESCRIPTION: This command disables the text UI to prevent hiding errors, showing only the console log output for better troubleshooting. This is achieved by using the `-t` flag. Errors are more likely to be revealed since they are not suppressed by the UI.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/general_debugging.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mpf both -t\n```\n\n----------------------------------------\n\nTITLE: Disabling Ball Search\nDESCRIPTION: This code defines the `disable` method, which disables ball search for the playfield. It also stops the ball search if it's currently running. It takes optional keyword arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef disable(**kwargs):\n    \"\"\"Disable ball search.\n\n    This method will also stop the ball search if it is running.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Enable debug for a switch (YAML)\nDESCRIPTION: This configuration snippet enables debugging for a specific switch, generating more detailed log lines related to its activity.  Adding `debug: true` to the switch configuration allows you to track its behavior and identify any issues. It uses the YAML format for configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/general_debugging.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_switch:\n    number: 42\n    debug: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Counters to Prevent Double Hits in MPF (YAML)\nDESCRIPTION: This configuration snippet demonstrates how to use a counter with a `multiple_hit_window` to prevent multiple sounds from playing when drop targets are hit simultaneously. It defines coils, switches, drop targets, a counter, sounds, and a sound player to achieve this functionality. The counter aggregates hits within the specified window and triggers a single sound event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/tips_tricks.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  reset_drop_targets:\n    number: 1\n\nswitches:\n  sw_drop_target_1:\n    number: 1\n  sw_drop_target_2:\n    number: 2\n  sw_drop_target_3:\n    number: 3\n\ndrop_targets:\n  target_1:\n    switch: sw_drop_target_1\n    reset_coil: reset_drop_targets\n  target_2:\n    switch: sw_drop_target_2\n    reset_coil: reset_drop_targets\n  target_3:\n    switch: sw_drop_target_3\n    reset_coil: reset_drop_targets\n\ncounters:\n  drop_target_counter:\n    count_events: drop_target_target_1_hit, drop_target_target_2_hit, drop_target_target_2_hit\n    multiple_hit_window: 500ms\n    events_when_hit: drop_target_counter_hit\n\nsounds:\n  drop_target_sound:\n    file: blip1.ogg\n    volume: 0.75\n\nsound_player:\n  drop_target_counter_hit:\n    drop_target_sound:\n      action: play\n##! asset: sounds/blip1.ogg=sounds/sound.ogg\n##! test\n#! advance_time_and_run .1\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link (Windows)\nDESCRIPTION: This command creates a directory symbolic link on Windows.  It links the GMC repository's addons folder to the project's addons folder, ensuring the project always uses the latest changes from the GMC repository. Requires administrator privileges.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/installation.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n(mpf080) $> mklink /d \"C:\\repos\\pinballgame\\addons\\mpf-gmc\" \"C:\\repos\\mpf-gmc\\addons\\mpf-gmc\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Outputs (P3-ROC)\nDESCRIPTION: This snippet demonstrates how to configure burst switches as local outputs on the P3-ROC when DIP switch 1 is set to `on`. It shows two coils, `local_output0` and `local_output20`, which are mapped to direct drivers 0 and 20 respectively, and can be controlled via hardware rules, pulse, hold, and PWM.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/drivers.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  local_output0:\n    number: direct-0    # direct driver 0\n  local_output20:\n    number: direct-20   # direct driver 20\n```\n\n----------------------------------------\n\nTITLE: Playfield add_incoming_ball() Method\nDESCRIPTION: Describes the `add_incoming_ball()` method, which is used to track an incoming ball as it enters the playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadd_incoming_ball(incoming_ball: mpf.devices.ball_device.incoming_balls_handler.IncomingBall)\n```\n\n----------------------------------------\n\nTITLE: Add PKONE port to config file (Mac/Linux)\nDESCRIPTION: Add the PKONE COM port to the machine config file within the `pkone:` section. This example is for Mac or Linux. The `port:` setting specifies the COM port name that MPF will use to communicate with the PKONE controller. Replace `/dev/cu.usbmodem` with the actual port identified via the command line.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/config.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npkone:\n  port: /dev/cu.usbmodem\n```\n\n----------------------------------------\n\nTITLE: Managing Shot Behavior with Events in MPF\nDESCRIPTION: Uses `event_player` to manage the behavior of the shots and drop targets based on various events. It defines rules for resetting the sequence, advancing to the next target, and resetting the coils of targets that are hit in the off state.  This ensures the correct progression of the sequence.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/sequential_drop_banks.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nevent_player:\n  # When the mode starts, reset the drop sequence\n  mode_sequential_drops_started: reset_drop_sequence\n\n  # When the sequence is completed, reset the drop sequence\n  logicblock_drop_sequence_complete: reset_drop_sequence\n\n  # When the sequence resets, advance the first target\n  reset_drop_sequence: advance_drop_1\n\n  # When an \"off\" shot is hit, reset its coil\n  drop_1_off_hit: reset_drop_1\n  drop_2_off_hit: reset_drop_2\n  drop_3_off_hit: reset_drop_3\n  drop_4_off_hit: reset_drop_4\n```\n\n----------------------------------------\n\nTITLE: Configuring Switches Using Board Bank Switch Syntax (P3-ROC)\nDESCRIPTION: This snippet shows how to configure switches connected to SW-16 boards using the board address, bank number, and switch input number.  The board address is configured via DIP switches. Bank A is 0, Bank B is 1. The switch input number ranges from 0-7. The `number` property in the `switches` section specifies the physical connection to the P3-ROC via an SW-16 board.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/switches_p3_roc.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_switch:\n    number: A0-B0-0    # SW-16 board at address 0, Bank A, Switch 0\n  my_other_switch:\n    number: A2-B1-5    # SW-16 board at address 2, Bank B, Switch 5\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit and Release and Disable Rule (Python)\nDESCRIPTION: Illustrates how to set a pulse-on-hit-and-release-and-disable rule for a driver (coil) using the `set_pulse_on_hit_and_release_and_disable_rule` method. This is typically used for high-power coils on dual-wound flippers. It utilizes an enable switch, an EOS switch, coil settings and repulse settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/spike.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_enable_and_release_and_disable_rule(enable_switch: mpf.core.platform.SwitchSettings, eos_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings, repulse_settings: Optional[mpf.core.platform.RepulseSettings])\n```\n\n----------------------------------------\n\nTITLE: Starting the Match Mode\nDESCRIPTION: Explains how to start the `match` mode using the `start()` method. It details the parameters `mode_priority` and `callback` and cautions against overriding the method in mode code.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/match.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nstart(mode_priority=None, callback=None, **kwargs) → None\n```\n\n----------------------------------------\n\nTITLE: Stepper Named Positions Configuration in YAML\nDESCRIPTION: This YAML snippet illustrates how to configure named positions for a stepper motor within MPF. Named positions allow you to associate specific positions with MPF events, enabling easy control of the stepper via event posting. The example shows how to define mappings between positions and events, including negative positions (behind home).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/steppers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#! steppers:\n#!   my_stepper:\n#!     number: 1\n    named_positions:\n      0: move_home\n      999: move_to_999\n      -500: move_to_-500 # Negative positions are behind home\n```\n\n----------------------------------------\n\nTITLE: Configuring Sound Player for Ramp Events in YAML\nDESCRIPTION: This snippet configures the sound_player to play different sounds when the ramp entry switch is activated (s_ramp_entry_active) and when the ramp sequence shot is successfully completed (s_ramp_success). This provides audio feedback to the player for hitting the ramp and successfully completing the shot.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/loops.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsound_player:\n  s_ramp_entry_active: indicate_ramp\n  s_ramp_success: indicate_ramp_success\n```\n\n----------------------------------------\n\nTITLE: Configuring Coil Connected to Light Bank in LISY (YAML)\nDESCRIPTION: This snippet shows how to configure a coil that is connected to a light bank in some Gottlieb machines. To address the coil, 100 must be added to the coil number from the manual. The example configures coil 107, assuming it corresponds to light output 07.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/drivers.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  c_coil_on_light_bank:\n    number: 107\n    default_pulse_ms: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring P-ROC Driver\nDESCRIPTION: Configures a driver (coil or flasher) using the P-ROC platform. This method takes a driver configuration, number, and platform-specific settings to create a PROCDriver object that can be used to control the driver.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/p_roc.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef configure_driver(config: mpf.core.platform.DriverConfig, number: str, platform_settings: dict):\n    # Create a P-ROC driver.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Posting an Event with Parameters in MPF (Python)\nDESCRIPTION: This snippet illustrates how to post an MPF event with keyword argument parameters using the `post_event_with_params` method. It demonstrates posting an event with multiple parameters, including different data types. This is useful for testing scenarios that require specific event data.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nself.post_event('jackpot', count=1, first_time=True)\n```\n\n----------------------------------------\n\nTITLE: Customizing Tilt Mode Defaults in MPF (YAML)\nDESCRIPTION: This snippet shows how to customize the `tilt` mode by creating a tilt mode configuration file in your mode folder. You can override default settings like `multiple_hit_window`, `settle_time`, and `warnings_to_tilt`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/tilt/index.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# in your machine config\nmodes:\n  - tilt\n##! mode: tilt\n# in your tilt mode\ntilt:    # the following are the defaults only copy those if you want to change them\n  multiple_hit_window: 300ms\n  settle_time: 5s\n  warnings_to_tilt: 3\n```\n\n----------------------------------------\n\nTITLE: Blinkenlight Player Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the blinkenlight player to add colors to a blinkenlight based on events. It shows both the explicit and express configuration styles for adding colors.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/blinkenlight_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblinkenlight_player:\n  some_event:\n    my_blinkenlight: red\n  some_other_event:\n    my_blinkenlight:\n      action: add\n      key: blue_color\n      color: blue\n```\n\n----------------------------------------\n\nTITLE: Stepper Relative Positions Configuration in YAML\nDESCRIPTION: This YAML snippet shows how to define relative positions for a stepper in MPF. Instead of moving to an absolute position, the stepper will increment or decrement its current position by a certain number of steps based on the event posted. The `homing_direction` dictates which way the motor will turn when a positive event is fired. The opposite direction occurs for negative events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/steppers.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#! steppers:\n#!   my_stepper:\n#!     number: 1\n    relative_positions:\n      50: advance_50 # positive values move the stepper in the direction of the `homing_direction`\n      -50: move_back_50 # Negative positions move the stepper opposite of the `homing_direction`\n```\n\n----------------------------------------\n\nTITLE: Dynamic Variable Player Configuration with Devices YAML\nDESCRIPTION: This snippet shows how to access properties of timers and counters using dynamic values. It multiplies a base score (1000) by the remaining ticks of the \"hurryup_clock\" timer and the current value of the \"hurryup_multiplier\" counter. Requires `device.timers.hurryup_clock` and `device.counters.hurryup_multiplier` to be configured.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/dynamic_values.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  collect_hurryup:\n    score: 1000 * device.timers.hurryup_clock.ticks_remaining * device.counters.hurryup_multiplier.value\n```\n\n----------------------------------------\n\nTITLE: Using the 'flash' show in MPF\nDESCRIPTION: Example showing how to use the 'flash' show in a MPF show_player to create a flashing effect on lights. The 'flash' show turns lights on and off with equal durations, configured via the speed parameter.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/default_shows.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  my_triggering_event:\n    flash:\n      speed: 10 # this means it will play 10x faster, so 100ms on, 100ms off\n      show_tokens:\n        lights: my_flashing_light, my_other_flashing_light\n```\n\n----------------------------------------\n\nTITLE: Testing High Score Functionality\nDESCRIPTION: This snippet contains test directives and assertions to verify the correct behavior of the high score system. It includes setting up player variables, starting a game and mode, posting events to simulate scoring, draining balls, and then asserting the correct machine and player variables, as well as checking if events are called.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/high_scores/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! test\n#! assert_machine_variable 1000000 score1_value\n#! assert_machine_variable MPF score1_name\n#! assert_machine_variable \"GRAND CHAMPION\" score1_label\n#! assert_machine_variable 200000 score9_value\n#! assert_machine_variable ANT score9_name\n#! assert_machine_variable \"HIGH SCORE 8\" score9_label\n#! start_game\n#! start_mode my_mode\n#! post score_100\n#! assert_player_variable 2000000 score\n#! drain_all_balls\n#! advance_time_and_run 1\n#! assert_player_variable 2 ball\n#! drain_all_balls\n#! advance_time_and_run 1\n#! assert_player_variable 3 ball\n#! mock_event high_score_enter_initials\n#! drain_all_balls\n#! advance_time_and_run 1\n#! assert_player_variable 3 ball\n#! assert_event_called high_score_enter_initials\n#! post text_input_high_score_complete text=JAB\n#! advance_time_and_run 10\n#! assert_mode_not_running game\n#! assert_machine_variable 2000000 score1_value\n#! assert_machine_variable JAB score1_name\n#! assert_machine_variable \"GRAND CHAMPION\" score1_label\n#! assert_machine_variable 1000000 score2_value\n#! assert_machine_variable MPF score2_name\n#! assert_machine_variable \"HIGH SCORE 1\" score2_label\n#! assert_machine_variable 300000 score9_value\n#! assert_machine_variable MIK score9_name\n#! assert_machine_variable \"HIGH SCORE 8\" score9_label\n```\n\n----------------------------------------\n\nTITLE: Simplified Sound Player Configuration with MPFSoundAsset (YAML)\nDESCRIPTION: This snippet demonstrates how to simplify the sound player configuration by wrapping the AudioStreamRandomizer within an MPFSoundAsset resource.  This allows triggering the sound with a single line and leveraging properties like fade times and target bus directly within the `MPFSoundAsset`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/random-sound-pools.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsound_player:\n    villain_advance: villain_advance_callouts\n```\n\n----------------------------------------\n\nTITLE: Adding Slides to a Show Step in MPF\nDESCRIPTION: This YAML configuration snippet shows how to add a slide to a step in a show using the `slides` section.  The show step is configured with a `duration` of 3 seconds and displays the `happy_face` slide. Show and slide definitions are commented out for brevity. The test posts the play_show event, advances time, and verifies the expected text.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/showing_slides.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- duration: 3s\n  slides: happy_face\n##! test\n#! post play_show\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Happy Face\"\n```\n\n----------------------------------------\n\nTITLE: Assert Switch State - Python\nDESCRIPTION: This assertion checks whether a switch exists and has the specified state (active or inactive). The 'name' parameter identifies the switch, and 'state' indicates the expected state.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nassertSwitchState(name, state)\n```\n\n----------------------------------------\n\nTITLE: Changing Volume on LISY via MPF\nDESCRIPTION: This snippet shows how to control the volume of LISY sounds using the `set_volume`, `increase_volume`, and `decrease_volume` actions. It maps events to set absolute volume levels or adjust the volume incrementally. Requires LISY hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/sound.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhardware_sound_player:\n  event_to_set_volume_to_05:\n    set_volume:\n      action: set_volume\n      value: 0.5\n  increase_volume:\n    increase_volume:\n      action: increase_volume\n      value: 0.1\n  decrease_volume:\n    decrease_volume:\n      action: decrease_volume\n      value: 0.1\n```\n\n----------------------------------------\n\nTITLE: Defining a slide with widgets in MPF (YAML)\nDESCRIPTION: This snippet shows how to define a slide in the `slides:` section of an MPF config file, including specifying the widgets to be displayed on that slide. It includes text and image widgets with basic properties like text content, position, font size, and image source. These widgets are permanently attached to this slide.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  my_slide:\n    widgets:\n      - type: text\n        text: HELLO!\n      - type: text\n        x: 0\n        font_size: 5\n        text: YAY PINBALL\n      - type: image\n        image: background1\n```\n\n----------------------------------------\n\nTITLE: Widget Positioning in Slides YAML\nDESCRIPTION: This snippet demonstrates how to position a text widget within a slide using `x`, `y`, and `adjust_bottom` settings. It positions the widget 10% from the left and 10% from the top, and adjusts the bottom anchor by 2 pixels.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/positioning.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  slide1:\n    widgets:\n      - type: text\n        text: MY WIDGET\n        x: left+10%\n        y: top-10%\n        adjust_bottom: 2\n#! slide_player:\n#!   show_slide: slide1\n##! test\n#! post show_slide\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"MY WIDGET\"\n```\n\n----------------------------------------\n\nTITLE: Processing a Slam Tilt\nDESCRIPTION: Processes a slam tilt event. This method posts the slam_tilt event and, if a game is active, sets the game mode’s slam_tilted attribute to True. This handles the immediate consequences of a slam tilt, like ending the current game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/tilt.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nslam_tilt(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Initialize Skillshot Mode, Switches and Lights\nDESCRIPTION: This code defines the `skillshot_with_auto_rotate` mode, switches corresponding to the drop targets, and lights associated with each switch. These are fundamental components required to configure the skillshot functionality within MPF. Switches detect hits, and lights provide visual feedback.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_auto_rotate.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nmodes:\n  - skillshot_with_auto_rotate\nswitches:\n  s_dropbank_1:\n    number: 1\n  s_dropbank_2:\n    number: 2\n  s_dropbank_3:\n    number: 3\n  s_dropbank_4:\n    number: 4\n  s_dropbank_5:\n    number: 5\nlights:\n  l_dropbank_1:\n    number: 1\n  l_dropbank_2:\n    number: 2\n  l_dropbank_3:\n    number: 3\n  l_dropbank_4:\n    number: 4\n  l_dropbank_5:\n    number: 5\n\n##! mode: skillshot_with_auto_rotate\n# mode will be defined below\n```\n\n----------------------------------------\n\nTITLE: Configure Slide Player to Show Slides (YAML)\nDESCRIPTION: Configures the slide player to display the 'window_slide' on the 'window' display and the 'dmd_slide' on the 'dmd' display when the 'init_done' event is triggered. This ensures both slides are shown when the media controller is initialized.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/adding_dot_look_to_lcd.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  init_done:\n    window_slide:\n      target: window\n    dmd_slide:\n      target: dmd\n```\n\n----------------------------------------\n\nTITLE: Widget Player Settings Configuration - YAML\nDESCRIPTION: This example shows how to define settings for widgets within the `widget_player` configuration section for machine or mode configuration files. The widget settings are nested under the event and widget name.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/widget_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n\nwidget_player:\n   some_event:\n      name_of_your_widget:\n         <list of settings below go here>\n   some_other_event:\n      name_of_a_different_widget:\n         <list of settings below go here>\n```\n\n----------------------------------------\n\nTITLE: Querying Switch Activity (Python)\nDESCRIPTION: Queries whether a switch is currently active. The function takes the `switch` object to check, and an optional `ms` parameter specifying the minimum duration the switch has been active. Returns `True` if the switch is active, `False` otherwise.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nis_active(switch, ms=None)\n```\n\n----------------------------------------\n\nTITLE: Sequence Scoring Configuration in MPF (YAML)\nDESCRIPTION: This configuration utilizes a sequence to control the score multiplier. The `my_sequence` requires specific events in order: `event1_to_increase_multiplier`, `event2_to_increase_multiplier`, and `event3_to_increase_multiplier`.  The `variable_player` section defines how the player's score is updated based on the sequence's progress. The mode is started by the `ball_started` event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/scoring_based_on_logic_blocks.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: test\nmode:\n  start_events: ball_started\nsequences:\n  my_sequence:\n    events:\n      - event1_to_increase_multiplier\n      - event2_to_increase_multiplier\n      - event3_to_increase_multiplier\n    events_when_complete: go_bumper\n    reset_on_complete: false\nvariable_player:\n  some_score_event:\n    score: 10000 * (device.sequences.my_sequence.value + 1)\n##! test\n#! # no progress\n#! start_game\n#! assert_mode_running test\n#! post some_score_event\n#! assert_player_variable 10000 score\n#! stop_game\n#! # some progress\n#! start_game\n#! assert_mode_running test\n#! post event1_to_increase_multiplier\n#! post some_score_event\n#! assert_player_variable 20000 score\n#! stop_game\n#! # wrong shot\n#! start_game\n#! assert_mode_running test\n#! post event3_to_increase_multiplier\n#! post some_score_event\n#! assert_player_variable 10000 score\n#! stop_game\n#! # more progress\n#! start_game\n#! assert_mode_running test\n#! post event1_to_increase_multiplier\n#! post event2_to_increase_multiplier\n#! post some_score_event\n#! assert_player_variable 30000 score\n#! stop_game\n#! # full progress\n#! start_game\n#! assert_mode_running test\n#! post event1_to_increase_multiplier\n#! post event2_to_increase_multiplier\n#! post event3_to_increase_multiplier\n#! post some_score_event\n#! assert_player_variable 40000 score\n#! stop_game\n```\n\n----------------------------------------\n\nTITLE: Remove Widget on Event YAML\nDESCRIPTION: This snippet illustrates how to remove a widget using a specific event.  The widget is shown in response to one event (show_widget_event) and removed in response to another (remove_widget_event). This allows for precise control over when the widget is displayed and hidden.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/expire.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nwidgets:\n  my_widget:\n    type: text\n    text: HELLO    # no expiration here\nwidget_player:\n  show_widget_event: my_widget\n  remove_widget_event:\n    my_widget:\n      action: remove\n##! test\n#! post show_widget_event\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"HELLO\"\n#! post remove_widget_event\n#! advance_time_and_run .1\n#! assert_text_not_on_top_slide \"HELLO\"\n```\n\n----------------------------------------\n\nTITLE: FlasherPlayer play method\nDESCRIPTION: The `play` method triggers the flashers.  It takes settings, context, calling context, priority and keyword arguments as input to configure the flash sequence.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/flasher_player.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef play(settings, context, calling_context, priority=0, **kwargs):\n    Flash flashers.\n```\n\n----------------------------------------\n\nTITLE: Running a Delay Now (Python)\nDESCRIPTION: Executes a delay's callback function immediately instead of waiting for the scheduled time. This cancels the future execution of the delay.  The `run_now` method takes the delay name as a parameter.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nrun_now(name: str)\n```\n\n----------------------------------------\n\nTITLE: Starting MPF Game Engine\nDESCRIPTION: This snippet shows how to start the MPF game engine without the media controller using the `mpf` command. It requires the user to open a command prompt and navigate to the machine folder before running the command. It is important to note that the `-b` command line option should be added to avoid the engine getting stuck trying to connect to the media controller.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/index.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmpf <enter>\n```\n\n----------------------------------------\n\nTITLE: Set Pulse On Hit and Release and Disable Rule\nDESCRIPTION: Configures a rule for a driver on the system11 overlay. If the driver is not on the A/C relay, it passes the call onto the parent platform. Uses settings like `enable_switch`, `eos_switch`, `coil` and `repulse_settings`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/system11.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef set_pulse_on_hit_and_release_and_disable_rule(enable_switch: mpf.core.platform.SwitchSettings, eos_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings, repulse_settings: Optional[mpf.core.platform.RepulseSettings]):\n    Configure a rule for a driver on the system11 overlay.\n\n    Will pass the call onto the parent platform if the driver is not on A/C relay.\n```\n\n----------------------------------------\n\nTITLE: Running MPF Unit Tests (Python)\nDESCRIPTION: This snippet demonstrates how to run the MPF unit tests using the `unittest` module in Python.  It discovers and executes all tests located in the `mpf.tests` directory. The output shows the number of tests run and the overall result (OK).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/debugging_mpf_install.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python3 -m unittest discover -s mpf.tests\n[...]\n----------------------------------------------------------------------\nRan 622 tests in 20.818s\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Configure hardware platform for PKONE in MPF\nDESCRIPTION: To use MPF with a PKONE controller, configure the platform as `pkone` in the machine-wide config file. This is essential for MPF to recognize and communicate with the PKONE hardware. This snippet assumes you are familiar with YAML syntax and MPF configuration files.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/config.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: pkone\n```\n\n----------------------------------------\n\nTITLE: Enable LISY Debugging in MPF Configuration\nDESCRIPTION: This configuration snippet enables debugging for the LISY platform within MPF. By setting `debug: true` in the `lisy` section of your MPF configuration file, you can enable more verbose logging and debugging information. It is recommended to disable debugging after troubleshooting to avoid performance impacts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/troubleshooting.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlisy:\n  debug: true\n```\n\n----------------------------------------\n\nTITLE: Bitmap Font Descriptor File Example\nDESCRIPTION: This is an example of a bitmap font descriptor file (.FNT). It defines the metadata for a bitmap font, including character mappings (id, x, y, width, height, etc.), spacing, and image file reference.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/bitmap_fonts.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ninfo face=font size= bold= italic= charset= unicode= stretchH= smooth= aa= padding=0,0,0,0 spacing=0,0 outline=0\ncommon lineHeight=55 base=55 scaleW=40 scaleH=55 pages=1 packed=0\npage id=0 file=\"bitmapFontBallySevenSegment4.png\"\nchars count=11\nchar id=48 x=0 y=0 width=40 height=55 xoffset=0 yoffset=0 xadvance=40 page=0 chnl=15\nchar id=49 x=0 y=55 width=40 height=55 xoffset=0 yoffset=0 xadvance=40 page=0 chnl=15\nchar id=50 x=0 y=110 width=40 height=55 xoffset=0 yoffset=0 xadvance=40 page=0 chnl=15\nchar id=51 x=0 y=165 width=40 height=55 xoffset=0 yoffset=0 xadvance=40 page=0 chnl=15\nchar id=52 x=0 y=220 width=40 height=55 xoffset=0 yoffset=0 xadvance=40 page=0 chnl=15\nchar id=53 x=0 y=275 width=40 height=55 xoffset=0 yoffset=0 xadvance=40 page=0 chnl=15\nchar id=54 x=0 y=330 width=40 height=55 xoffset=0 yoffset=0 xadvance=40 page=0 chnl=15\nchar id=55 x=0 y=385 width=40 height=55 xoffset=0 yoffset=0 xadvance=40 page=0 chnl=15\nchar id=56 x=0 y=440 width=40 height=55 xoffset=0 yoffset=0 xadvance=40 page=0 chnl=15\nchar id=57 x=0 y=495 width=40 height=55 xoffset=0 yoffset=0 xadvance=40 page=0 chnl=15\nchar id=32 x=0 y=550 width=40 height=55 xoffset=0 yoffset=0 xadvance=40 page=0 chnl=15\n```\n\n----------------------------------------\n\nTITLE: Mode Configuration Stop on Ball End Example YAML\nDESCRIPTION: An example demonstrating the use of `stop_on_ball_end: false` along with `game_ending` to prevent crashes when a mode is left unfinished after the final ball. `game_mode: false` is also set to allow mode to run outside of game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/mode.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nmode:\n  start_events: mode_terra_2_start\n  stop_events: mode_complete, game_ending\n  stop_on_ball_end: false\n  game_mode: false\n```\n\n----------------------------------------\n\nTITLE: Example config for physical DMD setup\nDESCRIPTION: This is a complete example configuration for setting up a physical DMD with a FAST Pinball controller. It includes hardware platform settings, port definitions, display configurations, DMD settings, slide definitions, and a slide player configuration to show content on both the on-screen window and the physical DMD.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/dmd.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  platform: fast\nfast:\n  ports: com3, com4, com5  # be sure to change this to your actual ports\n  driverboards: fast\ndisplays:\n  window:  # on screen window\n    width: 600\n    height: 200\n  dmd:  # source display for the DMD\n    width: 128\n    height: 32\n    default: true\nwindow:\n  width: 600\n  height: 200\n  title: Mission Pinball Framework\n  source_display: window\ndmds:\n  my_dmd:\n    brightness: 1.0\nslides:\n  window_slide_1:  # slide we'll show in the on-screen window\n    - type: display\n      effects:\n        - type: dmd\n          dot_color: ff5500\n      width: 512\n      height: 128\n    - type: text\n      text: MISSION PINBALL FRAMEWORK\n      anchor_y: top\n      y: top-3\n      font_size: 30\n    - type: rectangle\n      width: 514\n      height: 130\n      color: 444444\n  dmd_slide_1:  # slide we'll show on the physical DMD\n    - type: text\n      text: IT WORKS!\n      font_size: 25\nslide_player:\n  init_done:\n    window_slide_1:\n      target: window\n    dmd_slide_1:\n      target: dmd\n##! test\n#! assert_text_on_top_slide \"MISSION PINBALL FRAMEWORK\" window\n#! assert_text_on_top_slide \"IT WORKS!\" dmd\n```\n\n----------------------------------------\n\nTITLE: Fade Modern Light (0x0d) Example Command\nDESCRIPTION: This example demonstrates the usage of the 'Fade Modern Light' command (0x0d). It shows how to construct the command payload to fade three lights (42, 43, and 44) to specific brightness levels (127, 0, and 255) over a 50ms fade time. The first light to fade is light 42.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_29\n\nLANGUAGE: None\nCODE:\n```\nByte        Length      Example     Comment\n----------- ----------- ----------- -----------------------------------\n0           1           19          Command 13 - Fade Modern Light\n\n1           1           42          First light is 42\n\n2           2           50          Fade to color in 50ms.\n\n4           1           3           Fade three lights (i.e. RGB in\n                                     sync)\n\n5           1           127         Fade light 42 to 50% brightness\n\n6           1           0           Fade light 43 to 0% brightness\n\n7           1           255         Fade light 44 to 100% brightness\n```\n\n----------------------------------------\n\nTITLE: Configuring Pololu Maestro Serial Port with YAML\nDESCRIPTION: This snippet shows the minimum configuration required to set up the serial port for a Pololu Maestro servo controller.  It specifies the `port` to which the device is connected.  Make sure to replace `COM5` with the actual serial port of your device. You must configure other settings in other areas of MPF to fully control the Pololu Maestro.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/pololu_maestro.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npololu_maestro:\n  port: COM5\n```\n\n----------------------------------------\n\nTITLE: Bonus Entries Configuration YAML\nDESCRIPTION: This YAML snippet illustrates the configuration of `bonus_entries` within the `mode_settings:` section. It demonstrates defining multiple bonus entries, each with an associated event, score, and player score entry. The events will trigger slides in the slide player. This example includes bonus entries for aliens, modes, and combos, each with a different score and player variable.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/bonus.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbonus_entries:\n  - event: alien_bonus\n    score: 25000\n    player_score_entry: aliens\n  - event: mode_bonus\n    score: 1000000\n    player_score_entry: num_modes\n  - event: combo_bonus\n    score: 100000\n    player_score_entry: combos\n```\n\n----------------------------------------\n\nTITLE: Enabling Free Play - Python\nDESCRIPTION: Shows how to enable free play using `enable_free_play(post_event=True, **kwargs)`. The `post_event` parameter determines whether an event is posted when free play is enabled. The `**kwargs` are catch-all keyword arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/credits.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.modes.credits.enable_free_play(post_event=True, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining a Show Step with Relative Time in YAML\nDESCRIPTION: Demonstrates specifying the timing of a step relative to the previous step using a '+' sign. This example increments the time by one second.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/format.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: +1\n```\n\n----------------------------------------\n\nTITLE: Running MPF Normally\nDESCRIPTION: This snippet shows the command to run MPF, including the `-t` and `-b` flags. It highlights the prerequisite of activating the Python virtual environment before execution.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/debug.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmpf -t -b\n```\n\n----------------------------------------\n\nTITLE: Configuring MPF to use the Virtual Pinball platform\nDESCRIPTION: This code configures the MPF `hardware` section in `config.yaml` to specify that `virtual_pinball` should be used as the platform. This allows MPF to communicate with the VPX emulator.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/virtual/virtual_pinball_vpx.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: virtual_pinball\n```\n\n----------------------------------------\n\nTITLE: Animating a property: opacity\nDESCRIPTION: A snippet showing the configuration for animating the opacity property of a widget. It sets the target value of the opacity to 1 and the duration of the animation to 0.5 seconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    - property: opacity\n      value: 1\n      duration: .5s\n```\n\n----------------------------------------\n\nTITLE: Displaying a Slide Conditionally Based on Event Parameter (YAML)\nDESCRIPTION: Shows how to display a slide only when a specific event ('ball_started') is posted and a parameter ('ball') has a certain value (ball==1). This example uses the `{event_name{condition}}` syntax.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/conditional.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#! slides:\n#!   first_ball_intro:\n#!     - type: text\n#!       text: \"FIRST BALL\"\nslide_player:\n  ball_started{ball==1}: first_ball_intro\n  ball_ended:\n    first_ball_intro:\n      action: remove\n##! test\n#! start_game\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"FIRST BALL\"\n#! drain_all_balls\n#! advance_time_and_run .1\n#! assert_text_not_on_top_slide \"FIRST BALL\"\n```\n\n----------------------------------------\n\nTITLE: Defining Shot Profiles with States, Shows, and Speed in YAML\nDESCRIPTION: This snippet defines a shot profile named `mode2` with two states: `flashing` and `lit`. Each state is associated with a specific show (`flash` and `on` respectively). The `flashing` state also includes a `speed` setting, which controls the playback speed of the associated show. The `loop` and `block` settings control the profile's looping behavior and its interaction with profiles from lower priority modes, respectively. `block: true` means that profiles from lower priority modes (like the base mode) will be disabled when this profile is active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nshot_profiles:\n  mode2:\n    states:\n      - name: flashing\n        show: flash\n        speed: 5\n      - name: lit\n        show: on\n    loop: false\n    block: true\n```\n\n----------------------------------------\n\nTITLE: Original Game Mode Configuration in YAML\nDESCRIPTION: This YAML configuration represents the default game mode settings. It defines the start and stop events, priority, the Python module that defines the game logic, and other settings like `game_mode` and `stop_on_ball_end`. It's used to show the original configuration file of the game mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/dual_launch.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: game\n#config_version=5\nmode:\n  start_events: game_start\n  stop_events: game_ended, service_mode_entered\n  priority: 20\n  code: mpf.modes.game.code.game.Game\n  game_mode: false  # this is the game so it is started outside of a game\n  stop_on_ball_end: false\n##! test\n#! start_game\n```\n\n----------------------------------------\n\nTITLE: Display Widget with DMD Effect YAML\nDESCRIPTION: This YAML configuration showcases the use of the `dmd` effect on a `display` widget. It defines a `base_slide` with a display widget that uses a display named `dmd` as its source and applies a dmd effect with a specified dot color. Requires: MPF installation with a configured machine and the `dmd` effect configured.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/display/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n#! displays:\n#!   window:\n#!     height: 200\n#!     width: 600\n#!   dmd:\n#!     width: 400\n#!     height: 300\n#!     default: true\nslides:\n  base_slide:\n    - type: display\n      source_display: dmd\n      width: 640\n      height: 160\n      effects:\n        - type: dmd\n          dot_color: ff5500\n#! slide_player:\n#!   mc_ready:\n#!     base_slide:\n#!       target: window\n```\n\n----------------------------------------\n\nTITLE: Start a Game - Python\nDESCRIPTION: Starts a game within the test environment. This involves checking for an existing game, triggering the start switch, and verifying that the game has initiated successfully. It does not take any arguments, but assumes the presence of `s_start` switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nself.start_game()\n```\n\n----------------------------------------\n\nTITLE: Getting Stepper Config Section - Python\nDESCRIPTION: This snippet presents the `get_stepper_config_section` method, which returns the config validator name for stepper configuration. This name is used to identify the appropriate section in the MPF configuration file for defining stepper motor parameters.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/trinamics_steprocker.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclassmethod get_stepper_config_section()\n```\n\n----------------------------------------\n\nTITLE: Configuring a GI LED light in Spike\nDESCRIPTION: This code shows how to configure a GI string when it is handled as a regular light in modern platforms like Spike.  The `subtype` is set to `led` (or potentially `matrix` depending on the specific platform).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/gis.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  gi_string_left:\n    number: 3    # number depends on your platform\n    subtype: led  # might be matrix in some platforms\n```\n\n----------------------------------------\n\nTITLE: BallDevice.eject() Python\nDESCRIPTION: Ejects balls from the device to a specified target. It returns the number of balls found for eject. The remaining balls are queued for eject when available.  The target can be a string or BallDevice and defaults to the playfield if None.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/ball_devices.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\neject(balls=1, target=None) → int\n```\n\n----------------------------------------\n\nTITLE: Configuring Ball Count Delay in Seconds (YAML)\nDESCRIPTION: These snippets demonstrate how to configure the `ball_count_delay` setting in a ball device using seconds. This setting specifies a delay in seconds. Variations in spacing and capitalization of the 's' or 'sec' unit are shown.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/time_strings.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nball_count_delay: 0.5s\n```\n\nLANGUAGE: YAML\nCODE:\n```\nball_count_delay: 0.5 S\n```\n\nLANGUAGE: YAML\nCODE:\n```\nball_count_delay: 0.5sec\n```\n\n----------------------------------------\n\nTITLE: Advancing Time in MPF Test\nDESCRIPTION: This method advances the test clock by a specified delta (in seconds) and triggers any events or callbacks scheduled during that time. It processes scheduled events in small steps, allowing for accurate simulation of time-based behaviors within the pinball machine. The parameter 'delta' specifies the amount of time to advance the clock.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadvance_time_and_run(delta=1.0)\n```\n\n----------------------------------------\n\nTITLE: Overriding named widget settings (YAML)\nDESCRIPTION: This snippet shows how to override or add additional settings to a named widget at play time using the `widget_settings:` section of the `widget_player:` in an MPF config file.  Here, the `expire` setting is added to the *tilt_warning* widget to remove it after 2 seconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_player:\n  tilt_warning:              # event\n    tilt_warning:            # widget name\n      widget_settings:       # additional settings to be added / updated\n        expire: 2s\n```\n\n----------------------------------------\n\nTITLE: Registering a Mode Start Method (Python)\nDESCRIPTION: Registers a method to be called when a mode is started. This is used by plugins and core components to register actions that should occur each time a mode is started. The `config_section_name` allows the method to receive a specific configuration section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/mode_controller.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nself.machine.mode_controller.register_start_method(start_method, config_section_name=None, priority=0, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Running MPF with a config file (DOSCON)\nDESCRIPTION: This command demonstrates how to run MPF using a configuration file.  The `mpf both` command launches both the media controller and the machine engine, allowing the game logic and visual elements to run together. This is typically used during development and testing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/12_add_ball_devices.md#_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial>mpf both\n```\n\n----------------------------------------\n\nTITLE: Configure Bonus Slide Updates in slide_player YAML\nDESCRIPTION: This YAML snippet configures the `slide_player` in MPF to play the bonus slide when the bonus mode starts, display initial text before calculations, and update the text with each bonus entry.  It uses the `bonus_start` and `bonus_entry` events to trigger slide updates, defining actions to modify the 'bonus' slide's tokens.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/bonus_mode.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# bonus.yaml\n\nslide_player:\n  mode_bonus_started: bonus\n  bonus_start:\n      bonus:\n        action: update\n        tokens:\n          entry: initial\n  bonus_entry:\n    bonus:\n      action: update\n```\n\n----------------------------------------\n\nTITLE: List Switches MPF\nDESCRIPTION: Lists all switches configured in the machine. Provides a summary of the available switches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/service_cli.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nlist_switches\n```\n\n----------------------------------------\n\nTITLE: Complete Show Definition Configuration\nDESCRIPTION: A complete configuration file that shows how to display a score on the LED segments, using a show. Includes hardware definitions, segment display settings and a show_player configuration to display the score.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/cobrapin/cobrapin_serial_segment_displays.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n\nhardware:\n  platform: opp\n  driverboards: gen2\n  segment_displays: light_segment_displays\n\n#create light group for each NeoSeg display\nneoseg_displays:\n  neoSeg_0:\n    start_channel: 0-0-0\n    size: 8digit\n    light_template:\n      type: w\n      subtype: led\n      \nsegment_displays:\n  neoSegTop:\n    number: 1\n    size: 16\n    integrated_dots: true\n    use_dots_for_commas: true\n    default_transition_update_hz: 30\n    platform_settings:\n      light_groups:\n        - neoSeg_0\n      type: 14segment\n      \nshow_player:\n  player_score{player_num==1}: #of course for more than 1 player you need to have multiple entries\n    p1_score:\n      show_tokens:\n        txt: \"{(players[0].score):d}\"\n        \nshows:\n  p1_score:\n  - duration: -1\n    segment_displays:\n      neoSegTop:\n        text: (txt)\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit and Enable and Release Rule (Python)\nDESCRIPTION: Demonstrates how to configure a rule where a coil is pulsed when a switch is hit, then enabled and subsequently released using the `set_pulse_on_hit_and_enable_and_release_rule` method. This is commonly used for single-coil flippers. Requires an enable switch and the coil to be controlled.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/spike.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_enable_and_release_rule(enable_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings)\n```\n\n----------------------------------------\n\nTITLE: Assert Event Called Python\nDESCRIPTION: This code demonstrates how to mock an event, verify that it hasn't been called, post the event, and then assert that it has been called, optionally verifying the number of times it has been called. The event must be mocked before it can be asserted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nself.mock_event('my_event')\nself.assertEventNotCalled('my_event')  # This will pass\n\nself.post_event('my_event')\nself.assertEventCalled('my_event') # This will pass\nself.assertEventCalled('my_event', 1)  # This will pass\n\nself.post_event('my_event')\nself.assertEventCalled('my_event') # This will pass\nself.assertEventCalled('my_event', 2)  # This will pass\n```\n\n----------------------------------------\n\nTITLE: Configure Autofire Coils in YAML\nDESCRIPTION: This YAML snippet configures autofire coils for slingshots and pop bumpers. It maps switches to corresponding coils, enabling automatic firing of the coil when the switch is activated during a game. The coils and switches need to be defined earlier in the configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/13_add_autofires.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nautofire_coils:\n  left_slingshot:\n    coil: c_left_slingshot\n    switch: s_left_slingshot\n  right_slingshot:\n    coil: c_right_slingshot\n    switch: s_right_slingshot\n  upper_slingshot:\n    coil: c_top_slingshot\n    switch: s_top_slingshot\n  left_jet:\n    coil: c_left_jet_bumper\n    switch: s_left_jet\n  right_jet:\n    coil: c_right_jet_bumper\n    switch: s_right_jet\n```\n\n----------------------------------------\n\nTITLE: Configuring Flashers in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to configure flashers in MPF for WPC machines. Since flashers are technically drivers, they're configured with the `c` prefix followed by the number from the operator's manual. These are configured in the coils section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machines/wpc.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  f_claw:\n    number: c17\n  f_jets:\n    number: c21\n  f_side_ramp:\n    number: c22\n  f_left_ramp_upper:\n    number: c23\n  f_left_ramp_lower:\n    number: c24\n```\n\n----------------------------------------\n\nTITLE: Kivy Configuration in YAML\nDESCRIPTION: This snippet shows how to configure various Kivy settings within the `kivy_config:` section of a YAML configuration file. It allows for tweaking Kivy parameters such as desktop mode, exit-on-escape behavior, graphics settings, and window properties. This section is valid in machine config files but not in mode config files.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/kivy_config.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkivy_config:\n  kivy:\n    desktop: 1\n    exit_on_escape: true\n  graphics:\n    borderless: false\n    fbo: hardware  # hardware, software, force-hardware\n    fullscreen: false\n    multisamples: 2\n    position: auto  # auto, custom\n    show_cursor: true\n    resizable: true\n```\n\n----------------------------------------\n\nTITLE: Example Usage of get_use_bcp() in Python\nDESCRIPTION: This snippet shows how to override the `get_use_bcp()` method in a test class to enable the use of the BCP (Bridge Control Protocol) during testing. Enabling BCP allows testing components that communicate via BCP. The method should return a boolean value: `True` to enable BCP, `False` otherwise.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndef get_use_bcp(self):\n  return True\n```\n\n----------------------------------------\n\nTITLE: Define Position Switches for MPF Motor Configuration\nDESCRIPTION: This snippet demonstrates the configuration of `position_switches` within the motors section in MPF. It shows how to map position names (e.g., `home`, `pos1`, `pos2`) to corresponding switch names. The order of position switches is crucial for motors that can move in two directions, defining the direction of movement between positions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/motors.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nposition_switches:  !!omap\n    - home: s_claw_home\n    - pos1: s_claw_position1\n    - pos2: s_claw_position2\n```\n\nLANGUAGE: yaml\nCODE:\n```\nposition_switches:  !!omap\n    - pos2: s_claw_position2\n    - pos1: s_claw_position1\n    - home: s_claw_home\n```\n\n----------------------------------------\n\nTITLE: Rectangle Widget Settings YAML\nDESCRIPTION: This YAML snippet outlines the basic settings available for the rectangle widget in MPF. It includes type, width, height, corner_radius, and corner_segments. These settings are used to customize the appearance of the rectangle.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/rectangle.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ntype: rectangle\nwidth:\nheight:\ncorner_radius:\ncorner_segments:\n```\n\n----------------------------------------\n\nTITLE: Attach gdb to Python process\nDESCRIPTION: This command attaches the gdb debugger to a running Python process. It requires the PID of the Python process you want to debug. You may need sudo privileges. After attaching, you can use gdb commands to inspect the process's state and identify the cause of crashes or hangs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/debugging_segfaults.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo gdb python3 9678\n[...]\n(gdb) thread apply all bt\n[...]\n(gdb) thread apply all py-bt\n[...]\n```\n\n----------------------------------------\n\nTITLE: Monitoring USB Device Properties (Bash)\nDESCRIPTION: This snippet shows how to use `udevadm monitor` to display the properties of a USB device when it's plugged in, which can be used to get the ID_PATH_TAG, idVendor, and idProduct for creating UDEV rules to persistently identify the device.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/config.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nudevadm monitor --property\n```\n\n----------------------------------------\n\nTITLE: Example Mode Code in Python\nDESCRIPTION: This code snippet provides an example of how to implement custom mode code in MPF. It demonstrates how to use the `mode_init`, `mode_start`, and `mode_stop` methods, as well as how to interact with MPF components such as the logger, delay manager, player variables, and LEDs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/mode_code.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom mpf.core.mode import Mode\n\n\nclass Base(Mode):\n\n    def mode_init(self):\n        self.machine.log.info(\"My custom mode code is being initialized\")\n        #Technically the Python print command works as well, but make it a habit to log properly\n\n    def mode_start(self, **kwargs):\n        # The mode_start method needs **kwargs because some events that\n        # start modes pass additional parameters\n\n        self.machine.log.info(\"My custom mode code is starting\")\n\n        # Set a delay to call self.my_callback() in 5 seconds\n        self.delay.add(5000, self.my_callback)\n\n        # what player are we?\n        self.machine.log.info(self.player.number)\n\n        # what's the player's score?\n        self.machine.log.info('Score: {}'.format(self.player.score))\n\n        self.add_mode_event_handler('player_score', self.player_score_change)\n\n        # turn LED \"led01\" red\n        self.machine.leds.led01.color('red')\n\n    def my_callback(self):\n        self.machine.log.info(\"My delayed call was just called!\")\n\n    def player_score_change(self, **kwargs):\n        #Option 1 to log the score using kwargs\n        self.machine.log.info(\"Player score went up by %s, was %s and is now %s\", kwargs['change'], kwargs['prev_value'], kwargs['value'])\n        #Option 2 to log the score using the player variable\n        self.machine.log.info(\"The new player's score is {}\".format(self.player.score))\n\n    def mode_stop(self, **kwargs):\n        # The mode_stop method needs **kwargs because some events that\n        # stop modes pass additional parameters\n\n        self.machine.log.info(\"My custom mode code is stopping\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Text with Default Font in MPF-MC (YAML)\nDESCRIPTION: This snippet demonstrates how to display text on a slide using the default font in MPF-MC. It creates a slide with a text widget and sets the text to \"MISSION\". This example highlights the unsuitability of the default font for DMD displays.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/dmd_fonts.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  my_slide:\n    - type: text\n      text: MISSION\n#! slide_player:\n#!   show_slide_event: my_slide\n##! test\n#! post show_slide_event\n#! advance_time_and_run .1\n#! assert_slide_on_top my_slide\n#! assert_text_on_top_slide MISSION\n```\n\n----------------------------------------\n\nTITLE: Configuring a Driver (OPP)\nDESCRIPTION: Configures a driver (coil) connected to the OPP hardware. The configuration includes the driver's number and any platform-specific settings. This method is used to set up the hardware to control a specific coil.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_driver(config: mpf.core.platform.DriverConfig, number: str, platform_settings: dict)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Fadecandy Boards with JSON\nDESCRIPTION: This JSON snippet configures multiple FadeCandy boards, specifying their serial numbers and mapping LED strips connected to each board.  It sets parameters such as the listening address, verbosity, gamma, and whitepoint for each board.  The 'map' array defines the mapping between OSC channels and LED indices on each FadeCandy board.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fadecandy/index.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"listen\": [\"127.0.0.1\", 7890],\n    \"verbose\": true,\n    \"color\": {\n        \"gamma\": 2.5,\n        \"whitepoint\": [1.0, 1.0, 1.0]\n    },\n    \"devices\": [\n        {\n            \"type\": \"fadecandy\",\n            \"serial\": \"YOUR_FADECANDY_SERIAL1\",\n            \"map\": [\n                [ 0, 0, 0, 64 ],\n                [ 1, 0, 64, 64 ],\n                [ 2, 0, 128, 64 ],\n                [ 3, 0, 192, 64 ],\n                [ 4, 0, 256, 64 ],\n                [ 5, 0, 320, 64 ],\n                [ 6, 0, 384, 64 ],\n                [ 7, 0, 448, 64 ]\n            ]\n        },\n        {\n            \"type\": \"fadecandy\",\n            \"serial\": \"YOUR_FADECANDY_SERIAL2\",\n            \"map\": [\n                [ 8, 0, 0, 64 ],\n                [ 9, 0, 64, 64 ],\n                [ 10, 0, 128, 64 ],\n                [ 11, 0, 192, 64 ],\n                [ 12, 0, 256, 64 ],\n                [ 13, 0, 320, 64 ],\n                [ 14, 0, 384, 64 ],\n                [ 15, 0, 448, 64 ]\n            ]\n        },\n        {\n            \"type\": \"fadecandy\",\n            \"serial\": \"YOUR_FADECANDY_SERIAL3\",\n            \"map\": [\n                [ 16, 0, 0, 64 ],\n                [ 17, 0, 64, 64 ],\n                [ 18, 0, 128, 64 ],\n                [ 19, 0, 192, 64 ],\n                [ 20, 0, 256, 64 ],\n                [ 21, 0, 320, 64 ],\n                [ 22, 0, 384, 64 ],\n                [ 23, 0, 448, 64 ]\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Check Locale Configuration\nDESCRIPTION: Displays the current locale settings. This is used to verify that the locale has been correctly configured after running `locale-gen` and `dpkg-reconfigure`. The expected output shows the `LANG`, `LANGUAGE`, and `LC_*` variables set to the desired locale.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/pine64.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ locale\n```\n\nLANGUAGE: console\nCODE:\n```\nLANG=en_US.UTF-8\nLANGUAGE=en\nLC_CTYPE=\"en_US.UTF-8\"\nLC_NUMERIC=en_US.UTF-8\nLC_TIME=en_US.UTF-8\nLC_COLLATE=\"en_US.UTF-8\"\nLC_MONETARY=en_US.UTF-8\nLC_MESSAGES=\"en_US.UTF-8\"\nLC_PAPER=en_US.UTF-8\nLC_NAME=en_US.UTF-8\nLC_ADDRESS=en_US.UTF-8\nLC_TELEPHONE=en_US.UTF-8\nLC_MEASUREMENT=en_US.UTF-8\nLC_IDENTIFICATION=en_US.UTF-8\nLC_ALL=\n```\n\n----------------------------------------\n\nTITLE: Configuring LED Numbers for FadeCandy\nDESCRIPTION: This example shows how to define LED numbers in the MPF configuration file for use with the FadeCandy. The numbering corresponds to the physical LEDs connected to the FadeCandy controller, considering sequential numbering across connectors.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fadecandy/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_led0:\n    number: 0    # first LED on connector 0\n  l_led1:\n    number: 1    # second LED on connector 0\n  l_led2:\n    number: 128    # first LED on connector 2\n```\n\n----------------------------------------\n\nTITLE: Check Python Version - doscon\nDESCRIPTION: This command checks the installed Python version on your Linux system. It is important to ensure you have a supported version of Python (3.8, 3.9, 3.10 or 3.11) for MPF 0.57. It outputs the current Python version installed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_0\n\nLANGUAGE: doscon\nCODE:\n```\npython3 --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Button Light and Switch in YAML\nDESCRIPTION: This YAML configuration defines a light and a switch for the start button. The light `l_start_button` is configured with a specific `number` depending on the hardware platform and a `subtype` (e.g., `matrix`). The switch `s_start` is also configured with a `number` and tagged with `start`, which MPF uses to trigger the game start logic.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/switches/start_tournament_and_launcher_buttons.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_start_button:\n    number: 3           # number depends on your platform\n    subtype: matrix     # depends on your platform\nswitches:\n  s_start:\n    number: 23          # number depends on your platform\n    tags: start\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Python\nDESCRIPTION: Shows how to configure logging for the game mode. The `configure_logging` method configures the logging level for the console and file. Parameters include logger name, console level, file level, and base URL for documentation links.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/game.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconfigure_logging(logger: str, console_level: str = 'basic', file_level: str = 'basic', url_base=None)\n```\n\n----------------------------------------\n\nTITLE: Initializing MPF config file in console\nDESCRIPTION: Creates a config directory and a basic config.yaml file. This initializes the MPF configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/start/quickstart.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n    (mpf) my_project_folder $> mkdir config\n    (mpf) my_project_folder $> echo \"#config_version=6\" > config/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Left Aligned and Padded String - Python\nDESCRIPTION: Demonstrates left alignment and padding a string to a length of 10 characters using Python's format string syntax. The example assumes a variable named `variable` with a value of 1337.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/text_templates.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{variable:10}\n```\n\nLANGUAGE: text\nCODE:\n```\n\"1337      \"\n```\n\n----------------------------------------\n\nTITLE: Raise Config Error (Python)\nDESCRIPTION: Raises a ConfigFileError exception with a specified message, error number, and context.  The method is used for signaling configuration errors within the application.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MockBcpClient.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nraise_config_error(msg, error_no, *, context=None) → NoReturn\n\nRaise a ConfigFileError exception.\n```\n\n----------------------------------------\n\nTITLE: Run Hardware Scan via Command Line\nDESCRIPTION: This command initiates a hardware scan to identify connected OPP boards and their firmware versions. It also lists the cards connected to each board, including incand, input, solenoid, and LED cards, along with their respective numbers. This helps verify the connection and identify connected hardware components.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/troubleshooting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mpf hardware scan\n```\n\n----------------------------------------\n\nTITLE: Accessing ball_devices in code Python\nDESCRIPTION: Shows how to access a ball_device object from the machine object. This involves accessing it as a property via `self.machine.ball_devices.foo` or using a dictionary-style lookup with `self.machine.ball_devices['foo']`.  It also mentions accessing devices by tag or hardware number and refers the DeviceCollection documentation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/ball_devices.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.ball_devices.foo\n```\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.ball_devices['foo']\n```\n\n----------------------------------------\n\nTITLE: Running MPF Media Controller (mpf mc) in Command Line\nDESCRIPTION: This snippet shows how to launch the MPF media controller (MPF-MC) from the command line. This command opens a window, allowing you to visualize game elements when the display is configured.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_0\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\pinball\\your_machine>mpf mc\n```\n\n----------------------------------------\n\nTITLE: Accessing Random Event Player in MPF (Python)\nDESCRIPTION: This snippet shows how to access the `random_event_player` instance within the Mission Pinball Framework (MPF).  It is accessed through the `self.machine` object which provides access to all machine-wide components.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/random_event_player.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.random_event_player\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Handler in MPF (Python)\nDESCRIPTION: Registers a callable method (handler) to respond to a specific event. The handler method must include `**kwargs` in its signature to accommodate potential event-level keyword arguments. A priority can be assigned to define the order in which handlers are called. Returns an EventHandlerKey for later removal of the handler.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/events.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmy_handler = self.machine.events.add_handler('ev', self.test)\n```\n\n----------------------------------------\n\nTITLE: Checking MPF Version in DOS\nDESCRIPTION: This command checks the installed version of the Mission Pinball Framework (MPF). It helps verify if MPF is installed and which version is currently in use.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/windows.md#_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\nmpf --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual-Wound Flipper Coils in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to configure `default_pulse_ms` for dual-wound flipper coils in the `coils:` section of the MPF machine configuration file.  It shows how to set the initial pulse time for both main and hold coils. The `number` setting corresponds to the physical coil number in your control system.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/coils/pulse_power.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  c_flipper_left_main:\n    number: 00\n    default_pulse_ms: 20\n  c_flipper_left_hold:\n    number: 01\n    allow_enable: true\n  c_flipper_right_main:\n    number: 02\n    default_pulse_ms: 20\n  c_flipper_right_hold:\n    number: 03\n    allow_enable: true\n```\n\n----------------------------------------\n\nTITLE: OPP Switch Configuration Example\nDESCRIPTION: This example shows how to configure a basic switch connected to an OPP board. The `number` defines the specific switch on the OPP board using the board-switch notation. `0-15` refers to the first OPP card and the 16th switch input on that card.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/switches.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  some_switch:\n    number: 0-15\n```\n\n----------------------------------------\n\nTITLE: Triggering Sound Pool Playback with Sound Player (YAML)\nDESCRIPTION: This snippet shows how to trigger playback of a sound pool created using AudioStreamRandomizer in Godot from MPF using the `sound_player` and referencing the filename of the saved resource.  The resource must be placed in the /sounds or /modes/(mode_name)/sounds folder.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/random-sound-pools.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsound_player:\n    villain_advance:\n        villain_advance_callouts:\n            bus: voice\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple LED Chains on FAST Nano Controller\nDESCRIPTION: This configuration shows how to set `start_channel` for multiple LED chains connected to a FAST Nano Controller, ensuring correct LED numbering across chains. It demonstrates configuring LEDs starting from LED_0, and then the next chain starting at LED_64.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/leds.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  led_0:\n    start_channel: 0      # you could also use number: 0\n    subtype: led\n    type: rgb    # will use red: 0-0, green: 0-1, blue: 0-2\n  led_1:\n    previous: led_0\n    subtype: led\n    type: rgb   # will use red: 1-0, green: 1-2, blue: 1-3\n  led_2:\n    previous: led_1\n    subtype: led\n    type: rgb   # will use red: 2-0, green: 2-1, blue: 2-2\n\n## beginning of second chain\n  led_50:\n    start_channel: 64      # even though you only used 3 LEDs on the first chain, this chain needs to start with '64' to signify this is the beginning of a new chain from the Nano board\n    subtype: led\n    type: rgb    # will use red: 64-0, green: 64-1, blue: 64-2\n  led_51:\n    previous: led_50\n    subtype: led\n    type: rgb   # will use red: 65-0, green: 65-1, blue: 65-2\n  led_52:\n    previous: led_51\n    subtype: led\n    type: rgb   # will use red: 66-0, green: 66-1, blue: 66-2\n```\n\n----------------------------------------\n\nTITLE: Run mpf both command\nDESCRIPTION: This is a DOS command line snippet that runs the Mission Pinball Framework (MPF) in both the media controller and game engine modes using the 'mpf both' command.  It assumes the command is executed from the tutorial_step_15 folder.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/15_scoring.md#_snippet_4\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial_step_15>mpf both\n```\n\n----------------------------------------\n\nTITLE: Create MPF Run Script\nDESCRIPTION: Creates a bash script to launch MPF with a specific machine configuration. Requires the user's username, machine folder name, and top-level configuration file name.  The script uses `xterm` to run MPF in a terminal window.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/xubuntu.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n#!/bin/bash\nxterm -e \"cd /home/your_username/your_machine_folder && mpf both -c config\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Credits String in a Slide (YAML)\nDESCRIPTION: This code snippet demonstrates how to include the `credits_string` machine variable in a text display element within a slide, allowing dynamic updates of the credit information on the screen. The text will show either \"FREE PLAY\" or \"CREDITS X\", where X is the number of credits.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- type: text\n  text: \"(machine|credits_string)\"\n```\n\n----------------------------------------\n\nTITLE: Running MPF with PyPy\nDESCRIPTION: This snippet shows how to start MPF using PyPy. Because PyPy is a separate Python environment, the `pypy -m` command is used to execute MPF. PyPy's just-in-time compiler improves performance, particularly on low-end hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/finalization/software.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npypy -m mpf game\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Segment Displays in YAML\nDESCRIPTION: This YAML configuration defines a light segment display named 'display1' with two 7-segment displays. It maps each segment (a-g) of the two displays to specific lights (segment1_a, segment1_b, etc. and segment2_a, segment2_b, etc.) defined in the 'lights' section. The `type` is set to `7segment`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/light_segment_displays_device.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nsegment_displays:\n  display1:\n    number: 1\n    platform_settings:\n      lights:\n        - a: segment1_a\n          b: segment1_b\n          c: segment1_c\n          d: segment1_d\n          e: segment1_e\n          f: segment1_f\n          g: segment1_g\n        - a: segment2_a\n          b: segment2_b\n          c: segment2_c\n          d: segment2_d\n          e: segment2_e\n          f: segment2_f\n          g: segment2_g\n      type: 7segment\n```\n\n----------------------------------------\n\nTITLE: Uninstall MPF - doscon\nDESCRIPTION: This command uninstalls MPF and MPF-MC using pip. It is important to uninstall previous versions of MPF before installing a new version to avoid conflicts. It requires sudo privileges.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_3\n\nLANGUAGE: doscon\nCODE:\n```\nsudo pip3.9 uninstall mpf-mc mpf\n```\n\n----------------------------------------\n\nTITLE: Playing Additional Sounds (MP3 Files) on LISY via MPF\nDESCRIPTION: This snippet demonstrates playing additional sounds from MP3 files located on the LISY SD card.  It maps events to play specific files.  Sound files must be placed in the `hardwaresounds` subdirectory within the appropriate LISY game config directory on the SD card (e.g., `/boot/mpfcfg/LISY1/xxx` or `/boot/mpfcfg/LISY80/xxx`).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/sound.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhardware_sound_player:\n  play_file:\n    \"some_file\": play_file\n  play_file_loop:\n    \"some_file\":\n      action: play_file\n      platform_options:\n        loop: true\n        no_cache: false\n```\n\n----------------------------------------\n\nTITLE: Configure Watchdog Timer for P-ROC/P3-ROC in MPF\nDESCRIPTION: This snippet configures the watchdog timer for the P-ROC or P3-ROC in MPF. It enables the watchdog with a timeout of 1 second.  The `use_watchdog` parameter enables or disables it, and `watchdog_time` sets the timeout duration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/platform.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\np_roc:\n  use_watchdog: true\n  watchdog_time: 1s\n```\n\n----------------------------------------\n\nTITLE: Configuring Servos with PKONE in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure servos when connected to PKONE Extension boards. The `number` setting specifies the Extension board's Address ID and the servo output number. The Address ID can be set from 0 to 7, and servo output numbers range from 11 to 14.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/servos.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nservos:\n  servo_1:\n    number: 0-11    # Extension board with Address ID 0, servo 11 (the first one)\n  some_other_servo:\n    number: 2-14    # Extension board with Address ID 2, servo 14\n```\n\n----------------------------------------\n\nTITLE: Ellipse Widget Configuration Example (YAML)\nDESCRIPTION: This YAML configuration demonstrates the usage of the ellipse widget in MPF's slide player. It creates four different ellipses with varying properties like position, size, color, and angles. This snippet requires the `slide_player` section to be properly configured in the MPF configuration file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/ellipse.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nslide_player:\n  mc_ready:\n    ellipse_example:\n      - type: ellipse\n        x: 200\n        y: 200\n        width: 200\n        height: 200\n        color: blue\n        angle_start: 0\n        angle_end: 90\n      - type: ellipse\n        x: 400\n        y: 300\n        width: 400\n        height: 200\n        color: yellow\n        segments: 8\n      - type: ellipse\n        x: 600\n        y: 500\n        width: 400\n        height: 300\n        color: red\n        angle_start: 200\n        angle_end: 300\n      - type: ellipse\n        x: 700\n        y: 200\n        width: 90\n        height: 300\n        color: lime\n```\n\n----------------------------------------\n\nTITLE: Updating hardware firmware\nDESCRIPTION: This command updates the firmware of your hardware controllers, if supported by your platform. This command should be run when the MPF game engine is NOT running.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/index.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ mpf hardware firmware_update\n```\n\n----------------------------------------\n\nTITLE: Enabling BCP for Tests in Python\nDESCRIPTION: This code snippet shows how to override the `get_use_bcp` method to enable BCP (Bridge Control Protocol) for tests.  This allows tests to verify BCP functionality.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef get_use_bcp(self):\n  return True\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration to Play Show\nDESCRIPTION: This YAML snippet adds `attract_light_show` to the `show_player` section of the attract mode configuration file, which is triggered by the `mode_attract_started` event. The `.1` suffix is used to avoid YAML conflicts when multiple shows are triggered by the same event. This will play the light show when the attract mode starts.\nDependencies: `attract_display_loop` show should already be defined.\nExpected Outcome: Both display loop and light show will start when attract mode initiates.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/17_add_lights_leds.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: test_mode\n#config_version=5\nshow_player:\n  mode_attract_started: attract_display_loop\n  mode_attract_started.1: attract_light_show\n```\n\n----------------------------------------\n\nTITLE: Setting Platform to P3-ROC in MPF\nDESCRIPTION: This snippet sets the platform in the MPF configuration to `p3_roc`, indicating that the machine uses a P3-ROC controller. It must be placed in the machine-wide configuration file under the `hardware` section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/platform.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: p3_roc\n```\n\n----------------------------------------\n\nTITLE: Reading Initial Matrix Input States (OPP)\nDESCRIPTION: Reads the initial matrix switch states from the OPP hardware. This method processes the received message and sets the initial state of all matrix switches. The message relates to a specific chain, identified by its serial number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nread_matrix_inp_resp_initial(chain_serial, msg)\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on macOS\nDESCRIPTION: Activates the virtual environment on macOS using the `source` command.  This script sets environment variables to use the Python interpreter and packages within the virtual environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-environments.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nsource ~/mpfenv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Machine Run - Python\nDESCRIPTION: Processes any delays, timers, or other scheduled events. This is equivalent to calling self.advance_time_and_run(0).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n`machine_run()`\n```\n\n----------------------------------------\n\nTITLE: Slide Player Usage in Show Files (YAML)\nDESCRIPTION: Demonstrates how to use the slide player within a show file. The examples show displaying pre-defined slides and defining slides dynamically with widgets and transitions directly within the show steps.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/slide_player.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n##! show: show1\n#show_version=5\n- time: 0\n  slides: slide1\n- time: +3\n  slides: slide2\n- time: +3\n  slides:\n    slide3:          # newly-defined slide here\n      widgets:\n      - type: text\n        text: I AM SLIDE 3 IN THIS SHOW\n        color: lime\n- time: +3\n  slides:\n    slide4:\n      transition:\n        type: move_out\n        duration: 1s\n        direction: up\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Configuration YAML\nDESCRIPTION: This YAML configuration defines switches, coils, flippers, and a hardware benchmark section to test latency and jitter. It maps specific switches and coils to the benchmark process and requires physical connections between components for testing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/hardware.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_test1:\n    number:\n  s_test2:\n    number:\n\ncoils:\n  c_coil1:\n    number:\n  c_coil2:\n    number:\n    allow_enable: true\n\nflippers:\n  f_flipper:\n    activation_switch: s_test1\n    main_coil: c_coil2\n\nhardware_benchmark:\n  coil1: c_coil1\n  coil2: c_coil2\n  switch1: s_test1\n  switch2: s_test2\n  flipper: f_flipper\n```\n\n----------------------------------------\n\nTITLE: Add DMD and Window Displays to MPF Config (YAML)\nDESCRIPTION: This snippet demonstrates how to configure two displays in the MPF config: one for the on-screen window and another for the physical DMD.  The 'dmd' display is set as the default.  Width and height settings are critical for proper display rendering.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/rgb_dmd.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  window:\n    width: 600\n    height: 200\n  dmd:\n    width: 128\n    height: 32\n    default: true\n##! test\n#! post show_slide_event\n#! advance_time_and_run .1\n```\n\n----------------------------------------\n\nTITLE: Removing a Switch Change Monitor (Python)\nDESCRIPTION: Removes a previously added monitor callback. The `monitor` callable is the callback to remove.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nremove_monitor(monitor: Callable[[mpf.core.switch_controller.MonitoredSwitchChange], None])\n```\n\n----------------------------------------\n\nTITLE: Accessing P3-ROC Platform in MPF\nDESCRIPTION: This snippet illustrates how to access the P3-ROC hardware platform within an MPF project.  The platform is stored in the `self.machine.hardware_platforms` dictionary using the key `'p3_roc'`. This allows you to interact with the P3-ROC's functionalities and configurations through this object.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/p3_roc.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['p3_roc']\n```\n\n----------------------------------------\n\nTITLE: Accessing Magnets in Code - Python\nDESCRIPTION: Demonstrates how to access magnet devices within your MPF machine's code. The magnet device collection is accessed via `self.machine.magnets`, and individual magnets can be accessed by name using dot notation or dictionary-style indexing. Also mentions the ability to access devices by tag or hardware number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/magnets.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.magnets.foo\nself.machine.magnets['foo']\n```\n\n----------------------------------------\n\nTITLE: MPF Game Command Invocation (Path to Game Folder)\nDESCRIPTION: Shows how to run MPF with a specified game folder path using both the explicit `game` command and the default behavior. The `-P` parameter is passed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/mpf.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ mpf game path/to/game_folder -P\n$ mpf path/to/game_folder -P\n```\n\n----------------------------------------\n\nTITLE: Accessing Counters in Code - Python\nDESCRIPTION: Illustrates how to access a Counter device within the Mission Pinball Framework (MPF) using `self.machine.counters`. This provides access to the counter device collection, allowing you to interact with specific counters by name.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/counters.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.counters.foo\n```\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.counters['foo']\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Platform Start Switches in MPF\nDESCRIPTION: This snippet configures which switches are active when MPF starts in virtual mode. It allows you to simulate balls present in the trough for testing without physical hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_multiple_switches.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvirtual_platform_start_active_switches: s_trough1, s_trough2, s_trough3\n```\n\n----------------------------------------\n\nTITLE: System 11 Hardware Config in YAML\nDESCRIPTION: This snippet configures the hardware settings for a System 11 machine using MPF, including platform, driverboards, coils, and switches. The 'system11' section sets AC relay delays and drivers, while the 'snux' section defines the diagnostic LED driver. Digital outputs and coils are defined with their respective numbers and properties.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/snux.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: virtual\n  driverboards: wpc\n  coils: snux\n  switches: snux\n\nsystem11:\n  ac_relay_delay_ms: 75\n  ac_relay_driver: c_ac_relay\n\nsnux:\n  diag_led_driver: c_diag_led_driver\n\ndigital_outputs:\n  flipper_enable_relay:\n    number: c23\n    type: driver\n    enable_events: ball_started\n    disable_events: ball_will_end\n\ncoils:\n  c_diag_led_driver:\n    number: c24\n    default_hold_power: 1.0\n  c_ac_relay:\n    number: c25\n    default_hold_power: 1.0\n  c_side_a1:\n    number: c11a\n  c_side_a2:\n    number: c12a\n    default_hold_power: 0.5\n  c_side_c1:\n    number: c11c\n  c_side_c2:\n    number: c12c\n    default_hold_power: 0.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Burst Optos (P3-ROC)\nDESCRIPTION: This snippet demonstrates how to configure burst optos in MPF when using a P3-ROC. Burst optos use burst switch inputs in combination with a burst switcher driver to drive long-beam optos. Disable DIP switches 1 and 2 on the P3-Roc to use burst optos.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/switches_p3_roc.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  burst_opto_1_20:\n    number: burst-1-20     # burst input with switch 1 and driver 20\n  burst_opto_2_20:\n    number: burst-2-20     # burst input with switch 2 and driver 20\n  burst_opto_10_5:\n    number: burst-10-5     # burst input with switch 10 and driver 5\n```\n\n----------------------------------------\n\nTITLE: Pulse Coil MPF\nDESCRIPTION: Pulses the specified coil. Useful for testing coil functionality.\n<name> is the name of the coil to pulse.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/service_cli.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncoil_pulse <name>\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.get_placeholder_value() - Python\nDESCRIPTION: Get the value of a placeholder.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nget_placeholder_value(item)\n```\n\n----------------------------------------\n\nTITLE: Update Virtual Segment Display (YAML)\nDESCRIPTION: This snippet shows how to use the `segment_display_player` to update the text and color of the virtual segment display. It defines events that can be triggered to set the text to \"HELLO\", set the color to red, or display the current player's score using text templates.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/segment_display_emulator/how_to.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsegment_display_player:\n  update_segment_display_hello:\n    display1:\n      text: \"HELLO\"\n  update_segment_display_red:\n    display1:\n      action: set_color\n      color: \"FF0000\"\n  update_segment_display_score:\n    display1:\n      text: \"{players[0].score:d}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Sound Variations\nDESCRIPTION: This snippet demonstrates how to define multiple sound variations in the machine configuration file, adjusting the volume for each variation. Variations can be pitch or frequency adjustments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/variations.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsounds:\n  triangle_01:\n    file: 13147__looppool__triangle1.wav\n    volume: 0.7\n  triangle_02:\n    volume: 0.7\n  triangle_03:\n    volume: 0.7\n  triangle_04:\n    volume: 0.7\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment\nDESCRIPTION: Creates a Python virtual environment using the venv module. The environment is placed in the specified directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-environments.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npython3 -m venv ~/mpfenv\n```\n\n----------------------------------------\n\nTITLE: Add Mode Event Handler\nDESCRIPTION: This snippet showcases the `add_mode_event_handler` method, which registers an event handler that is automatically removed when the mode stops. It's similar to the Event Manager's add_handler() method, but it automatically unregisters the handlers when the mode ends. The method takes event name, handler function, priority and optional keyword arguments as parameters.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/carousel.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadd_mode_event_handler(event: str, handler: Callable, priority: int = 0, **kwargs) → mpf.core.events.EventHandlerKey\n```\n\n----------------------------------------\n\nTITLE: Accessing score_reel_groups in code - Python\nDESCRIPTION: Demonstrates how to access a ScoreReelGroup object within the MPF framework using the `self.machine.score_reel_groups` collection. It illustrates accessing by name using both dot notation and dictionary notation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/score_reel_groups.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.score_reel_groups.foo\nself.machine.score_reel_groups['foo']\n```\n\n----------------------------------------\n\nTITLE: Starting Super Jets Setup Mode\nDESCRIPTION: This YAML snippet configures the `start_events` parameter within the mode configuration. It specifies that the `super_jets_setup` mode should start as soon as a new ball is launched, including extra balls. This ensures that the mode is active and ready to manage game logic from the beginning of each ball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/AFM_super_jets.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstart_events: ball_starting\n```\n\n----------------------------------------\n\nTITLE: Removing a Slide with a Transition in YAML\nDESCRIPTION: This snippet shows how to remove a slide with a transition effect. The `transition` setting specifies the transition to use when the slide is removed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/slide_player.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  remove_slide_1:           # event name\n    slide1:                 # slide name\n      action: remove\n      transition: fade\n```\n\n----------------------------------------\n\nTITLE: Creating a Slide in YAML\nDESCRIPTION: This snippet demonstrates how to define a slide named \"welcome_slide\" within the `slides:` section of the `config.yaml` file. Slides act as canvases for displaying widgets in the MPF media controller.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  welcome_slide:\n##! test\n#! advance_time_and_run .1\n```\n\n----------------------------------------\n\nTITLE: Initialise smart_virtual Platform (Python)\nDESCRIPTION: Initialises the smart_virtual platform once all devices are ready. This method is crucial for setting up the simulated hardware environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/smart_virtual.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstart()\n```\n\n----------------------------------------\n\nTITLE: Fail Test - Python\nDESCRIPTION: Immediately fails the test with an optional message. Useful for halting execution when a critical condition is not met.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n`fail(msg=None)`\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Group of Widgets in YAML\nDESCRIPTION: This example demonstrates how to define a named group of widgets using the `widgets:` section in a YAML configuration file. The group, named `widget3`, consists of three text widgets with different text, colors, and font sizes. When `widget3` is played, all three widgets are added to the slide.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nwidgets:\n  widget3:\n    - type: text\n      text: HI\n      color: ff0000\n      font_size: 100\n    - type: text\n      text: THERE\n      color: 00ff66\n      font_size: 100\n    - type: text\n      text: EVERYONE!\n      color: ff00ff\n      font_size: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Switches with P-ROC in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to configure direct switches connected to the P-ROC board in the machine configuration file. Direct switches are numbered from 0-31 and are identified by the 'SD' prefix. The `number` setting specifies the direct switch number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/switches_p_roc.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_switch:\n    number: SD0\n  my_other_switch:\n    number: SD1\n  another_switch:\n    number: SD12\n```\n\n----------------------------------------\n\nTITLE: Increase Baud Rate After Startup\nDESCRIPTION: This snippet increases the baud rate after the mpf-spike-bridge starts. It updates the `runtime_baud` setting to a higher value, enabling faster communication, especially when using a DMD. Flow control is essential at higher baud rates to ensure a stable connection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/config.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: spike\nspike:\n  port: /dev/ttyUSB0\n  baud: 115200\n  runtime_baud: 2000000\n  flow_control: true\n  debug: false\n  nodes: 0, 1, 8, 9, 10, 11\n```\n\n----------------------------------------\n\nTITLE: Configuring a Stepper\nDESCRIPTION: Configures a stepper motor on the Spike platform. Takes the stepper number as a string and a configuration dictionary as input. Returns a StepperPlatformInterface object.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_stepper(number: str, config: dict) → mpf.platforms.interfaces.stepper_platform_interface.StepperPlatformInterface\n```\n\n----------------------------------------\n\nTITLE: Enable Debugging in Fadecandy Configuration (YAML)\nDESCRIPTION: This snippet shows how to enable debug mode for Fadecandy within the MPF configuration. Adding `debug: true` to the `fadecandy` section will increase the amount of debug information outputted, which is helpful for identifying issues. Remember to disable debug mode after troubleshooting to avoid performance impacts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fadecandy/troubleshooting.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfadecandy:\n  debug: true\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditional Slides Based on Event Parameter Value (YAML)\nDESCRIPTION: Demonstrates how to configure multiple slides to be displayed based on different values of the same event parameter ('ball' in 'ball_started').  It shows how different conditions trigger different actions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/conditional.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n#! slides:\n#!   first_ball_intro:\n#!     - type: text\n#!       text: \"FIRST BALL\"\n#!   lets_go:\n#!     - type: text\n#!       text: \"MPF IS AWESOME\"\nslide_player:\n  ball_started{ball==1}: first_ball_intro\n  ball_started{ball>1}: lets_go\n  ball_ended:\n    first_ball_intro:\n      action: remove\n    lets_go:\n      action: remove\n##! test\n#! start_game\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"FIRST BALL\"\n#! drain_all_balls\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"MPF IS AWESOME\"\n```\n\n----------------------------------------\n\nTITLE: Rectangle Widget Example Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure rectangle widgets within the slide_player in MPF. It showcases different settings like x, y, width, height, color, corner_radius, and corner_segments to create various rectangle shapes and styles. The config_version specifies the MPF configuration version.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/rectangle.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#config_version=5\nslide_player:\n  mc_ready:\n    rectangle_example:\n      - type: rectangle\n        x: 200\n        y: 200\n        width: 200\n        height: 200\n        color: pink\n      - type: rectangle\n        x: 400\n        y: 300\n        width: 400\n        height: 200\n        corner_radius: 50\n        corner_segments: 3\n        color: yellow\n      - type: rectangle\n        x: 600\n        y: 500\n        width: 400\n        height: 300\n        corner_radius: 75\n        color: red\n```\n\n----------------------------------------\n\nTITLE: Install MPF Monitor with pip (macOS)\nDESCRIPTION: This command installs the MPF Monitor using pip. The MPF Monitor is a tool for debugging and monitoring MPF events and states.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/mac.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install mpf-monitor\n```\n\n----------------------------------------\n\nTITLE: Installing MPF-MC in Editable Mode\nDESCRIPTION: This command installs the MPF-MC package in “editable” mode. The `-e` option creates links to the source code in the `mpf-mc` directory, enabling developers to modify the source code directly. Changes are immediately reflected without requiring a reinstall.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/setup.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\npip install -e mpf-mc\n```\n\n----------------------------------------\n\nTITLE: Getting Setting Machine Variable Name (Python)\nDESCRIPTION: Describes how to retrieve the machine variable name associated with a specific setting. Takes the setting name as input.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/settings.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nget_setting_machine_var(setting_name)\n```\n\n----------------------------------------\n\nTITLE: RGB LED with Channel Mapping Configuration YAML\nDESCRIPTION: This YAML configuration demonstrates how to map individual color channels (red, green, blue, white) to specific numbers for an RGB LED. The numbers define the hardware addresses for each color channel.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/index.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  rgb_led:\n    type: rgb\n    channels:\n      red:\n        number: 9-29     # the exact number format depends on your platform\n      green:\n        number: 9-30\n      blue:\n        number: 9-31\n      white:\n        number: 9-32\n```\n\n----------------------------------------\n\nTITLE: Activating the Python Virtual Environment\nDESCRIPTION: This command activates the `mpf-venv` virtual environment. Activating the virtual environment modifies the shell's PATH so that the virtual environment's Python interpreter and scripts are used. Any packages installed using pip will be installed into this isolated environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/setup.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nsource mpf-venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Accessing SmartVirtual Platform in MPF (Python)\nDESCRIPTION: This snippet shows how to access the smart_virtual hardware platform within the MPF machine object. It demonstrates that hardware platforms are stored as a dictionary under `self.machine.hardware_platforms`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/smart_virtual.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['smart_virtual']\n```\n\n----------------------------------------\n\nTITLE: Base Single Player Slide Configuration in MPF (YAML)\nDESCRIPTION: This snippet configures the base slide for a single-player game. It defines slides, widgets for score, level, and ball number, and the widget player to display them when the game starts. It also includes test assertions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/multiplayer_display.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  base_slide: []\nslide_player:\n  single_player_ball_started: base_slide\nwidgets:\n  base_score_widget:\n    - type: text\n      text: (score)\n  base_level_widget:\n    - type: text\n      text: LVL (player|level)\n  base_ball_widget:\n    - type: text\n      text: BALL (ball)\nwidget_player:\n  # First event, before additional players have a chance to enter\n  game_started:\n    base_score_widget:\n      slide: base_slide\n    base_level_widget:\n      slide: base_slide\n    base_ball_widget:\n      slide: base_slide\n##! test\n#! start_game\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"0\"\n#! assert_text_on_top_slide \"LVL 0\"\n#! assert_text_on_top_slide \"BALL 1\"\n```\n\n----------------------------------------\n\nTITLE: Create DMD Slide with Text and Rectangles (YAML)\nDESCRIPTION: Defines a slide to be displayed on the DMD itself, containing a text widget and two colored rectangles. This example demonstrates a simple DMD slide.  In a real game, the content of the DMD slide would change dynamically based on game events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/adding_dot_look_to_lcd.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  dmd_slide:\n    - type: text\n      text: DOTS!\n    - type: rectangle\n      width: 120\n      height: 30\n      color: orange\n      y: 0\n      anchor_y: bottom\n    - type: rectangle\n      width: 120\n      height: 30\n      color: red\n      y: top\n      anchor_y: top\n```\n\n----------------------------------------\n\nTITLE: Mock Event - Python\nDESCRIPTION: Configures an event to be mocked. Mocking an event allows checking if the event was called without configuring a callback. Events must be mocked before they are posted for assertEventNotCalled() and assertEventCalled() to work. Mocking does not break the event; other handlers will still be called.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n`mock_event(event_name)`\n```\n\nLANGUAGE: python\nCODE:\n```\nself.mock_event('my_event')\nself.assertEventNotCalled('my_event')  # This will be True\nself.post_event('my_event')\nself.assertEventCalled('my_event')  # This will also be True\n```\n\n----------------------------------------\n\nTITLE: Enabling Credit Play - Python\nDESCRIPTION: Shows how to enable credits play using `enable_credit_play(post_event=True, **kwargs)`. The `post_event` parameter determines whether an event is posted when credit play is enabled. The `**kwargs` are catch-all keyword arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/credits.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.modes.credits.enable_credit_play(post_event=True, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Running MPF with Physical Hardware (DOSCON)\nDESCRIPTION: This snippet demonstrates how to run the MPF game engine with physical hardware. It shows the command to start the MPF core and media controller (MC) without the `-x` or `-X` command-line options, which are used for virtual platforms. It assumes MPF is installed in the specified directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/10_run_a_game.md#_snippet_3\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\pinball\\your_machine>mpf both -X\n```\n\n----------------------------------------\n\nTITLE: Accessing SmartMatrix Platform in MPF via Code\nDESCRIPTION: Shows how to access the SmartMatrix hardware platform instance in MPF using the `self.machine.hardware_platforms` dictionary.  This is the standard way to interact with hardware platforms within the MPF environment. The platform is accessed using the key 'smartmatrix'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/smartmatrix.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['smartmatrix']\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Accrual Logic Block in MPF\nDESCRIPTION: This snippet configures a basic accrual logic block named 'name_of_my_logic_block'. It listens for the events 'shot1_hit', 'shot2_hit', and 'shot3_hit'. Once all three events have been posted, it will post an event called 'enable_winning_shot'. This allows you to trigger actions like playing a show or awarding points when all required shots are hit in any order.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/accruals.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\naccruals:\n  name_of_my_logic_block:\n    events:\n      - shot1_hit\n      - shot2_hit\n      - shot3_hit\n    events_when_complete: enable_winning_shot\n```\n\n----------------------------------------\n\nTITLE: Configure MPF with Arduino Pinball Controller\nDESCRIPTION: This configuration example demonstrates how to configure MPF to use the Arduino Pinball Controller (APC) via the LISY platform. It specifies the serial connection details, digital outputs, segment displays, and hardware sound system. Adjust the port to match your system.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/apc/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nhardware:\n  platform: lisy\nlisy:\n  connection: serial\n  port: com1      # change this for your setup\n  baud: 115200\ndigital_outputs:\n  game_over_relay:\n    number: 1\n    type: light\n    enable_events: ball_started\n    disable_events: ball_will_end\nsegment_displays:\n  info_display:\n    number: 0\n  player1_display:\n    number: 1\n  player2_display:\n    number: 2\n  player3_display:\n    number: 3\n  player4_display:\n    number: 4\nhardware_sound_systems:\n  default:\n    label: APC\n```\n\n----------------------------------------\n\nTITLE: Activate Drain Switch in Virtual Platform - YAML\nDESCRIPTION: This snippet configures MPF to start with the drain switch in the active state when running in virtual mode. This simulates a ball present in the trough upon startup, which is useful for testing and development without physical hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball_no_shooter_lane.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvirtual_platform_start_active_switches: s_drain\n```\n\n----------------------------------------\n\nTITLE: Update Flipper Switch Numbers\nDESCRIPTION: This snippet illustrates how to add the hardware numbers to the flipper switches in the `config.yaml` file.  It is important to set correct hardware numbers to work with a physical pinball machine. If working without physical hardware, these can be left blank.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_left_flipper:\n    number: 0  # this can be blank if you don't have physical hw yet\n  s_right_flipper:\n    number: 1  # if you do have physical hw, most likely your number will be different\n```\n\n----------------------------------------\n\nTITLE: Playfield add_ball() Method\nDESCRIPTION: Describes the `add_ball()` method, which adds live balls to the playfield. It outlines the purpose of the `balls`, `source_device`, and `player_controlled` parameters and clarifies how it interacts with the game controller's ball count. Explains the usage of the `player_controlled` parameter and how MPF handles different types of ball eject mechanisms.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadd_ball(balls=1, source_device=None, player_controlled=False) → bool\n```\n\n----------------------------------------\n\nTITLE: Configuring a Light (OPP)\nDESCRIPTION: Configures a light (LED or matrix light) connected to the OPP hardware. The configuration includes the light's number, subtype (LED or matrix), and any platform-specific settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_light(number, subtype, platform_settings)\n```\n\n----------------------------------------\n\nTITLE: Defining Show with Duration Instead of Time in YAML\nDESCRIPTION: Demonstrates configuring a show using 'duration' instead of 'time' to specify how long each step lasts. This example is functionally equivalent to the first example, but uses duration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/format.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- duration: 1\n  lights:\n    led1: red\n- duration: 1\n  lights:\n    led1: off\n```\n\n----------------------------------------\n\nTITLE: Accessing RgbDmd Devices in Code (Python)\nDESCRIPTION: Demonstrates how to access an RgbDmd device in the MPF using the device collection.  The rgb_dmds collection is accessed via `self.machine.rgb_dmds`. Specific devices can be accessed by name as an attribute or using dictionary-style access.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/rgb_dmds.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.rgb_dmds.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.rgb_dmds['foo']\n```\n\n----------------------------------------\n\nTITLE: Adding Widgets with Conditional Logic in MPF (YAML)\nDESCRIPTION: This example shows how to add the same widget to a slide multiple times using conditional logic within the event names. Each conditional event is tied to a unique widget key and different widget settings. This allows for displaying multiple instances of a widget based on different game states or conditions, specified within the `widget_player` section of an MPF configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/keys.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nwidget_player:\n  some_event{parameter_1 <10}:\n    widget_1:\n      key: widget_1_1\n      slide: slide_2\n      widget_settings:\n         # <list of settings below go here>\n  some_event{parameter_1 < 50}:\n    widget_1:\n      key: widget_1_2\n      slide: slide_2\n      widget_settings:\n         # <list of settings below go here>\n```\n\n----------------------------------------\n\nTITLE: Hit Switch and Run - Python\nDESCRIPTION: Activates a switch and advances the time by a specified delta. The switch remains active after the time has advanced. Use release_switch_and_run() to deactivate the switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n`hit_switch_and_run(name, delta)`\n```\n\n----------------------------------------\n\nTITLE: Running MPF and MPF Monitor\nDESCRIPTION: These commands run MPF in one terminal and the MPF Monitor in a separate terminal, allowing for real-time diagnostics while the MPF config is running.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nmpf both -X\n```\n\nLANGUAGE: console\nCODE:\n```\nmpf monitor\n```\n\n----------------------------------------\n\nTITLE: Configure Auto-Login Xubuntu/Lubuntu\nDESCRIPTION: Creates and configures the lightdm configuration file to enable automatic login to the XFCE desktop.  Requires the user's username created during installation. The `autologin-user-timeout` parameter is set to 0 to disable the timeout.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/xubuntu.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n[Seat:*]\nautologin-user=your_username\nautologin-user-timeout=0\n```\n\n----------------------------------------\n\nTITLE: Accessing Extra Balls in MPF (Python)\nDESCRIPTION: This code snippet demonstrates how to access extra balls in your machine via `self.machine.extra_balls`. You can access them by name as an attribute or dictionary key. The device collection documentation provides further details.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_balls.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.extra_balls.foo\nself.machine.extra_balls['foo']\n```\n\n----------------------------------------\n\nTITLE: Parse Express Config in HardwareSoundPlayer\nDESCRIPTION: The `get_express_config(value)` method parses the express config for the sound player. It takes a value as input and processes it to configure the sound.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/hardware_sound_player.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nget_express_config(value)\n```\n\n----------------------------------------\n\nTITLE: Posting a Queue Event in MPF (Python)\nDESCRIPTION: Posts a queue event, triggering registered handlers. The specified callback function is executed only after all handlers have completed their processing and any registered waits have been released. This facilitates coordinated execution of event-driven actions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/events.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.machine.events.post_queue('pizza_time', self.pizza_done)\n```\n\n----------------------------------------\n\nTITLE: Configure MPF Match Mode\nDESCRIPTION: This YAML configuration defines the match mode settings, including queue relays for handling match and no-match scenarios, slide player configurations for displaying match results, and sound player configurations for audio feedback. It specifies how to display match and no-match slides, play associated sounds, and defines steps to take based on match results.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/match_mode.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: match\n# in modes/match/config/match.yaml\nqueue_relay_player:\n  match_no_match:\n    post: no_match\n    wait_for: slide_no_match_slide_removed\n    pass_args: true\n  match_has_match:\n    post: has_match\n    wait_for: slide_match_slide_removed\n    pass_args: true\nmode_settings:\n  non_match_number_step: 10\nslide_player:\n  no_match:\n    no_match_slide:\n      expire: 3s\n  has_match:\n    match_slide:\n      expire: 3s\nsound_player:\n  match_no_match:\n    no_match_sound:\n      action: play\n  match_has_match:\n    match_sound:\n      action: play\nslides:\n  match_slide:\n    - type: text\n      text: MATCH\n    - type: text\n      text: \"Player 1: (match_number0)\"\n    - type: text\n      text: \"Player 2: (match_number1)\"\n    - type: text\n      text: \"Player 3: (match_number2)\"\n    - type: text\n      text: \"Player 4: (match_number3)\"\n    - type: text\n      text: \"Match number: (winner_number)\"\n  no_match_slide:\n    - type: text\n      text: NO MATCH\n      font_size: 12\n      anchor_y: bottom\n    - type: text\n      text: \"Player 1: (match_number0)\"\n    - type: text\n      text: \"Player 2: (match_number1)\"\n    - type: text\n      text: \"Player 3: (match_number2)\"\n    - type: text\n      text: \"Player 4: (match_number3)\"\n    - type: text\n      text: \"Match number: (winner_number)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Serial Port for Pololu Maestro (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the serial port for the Pololu Maestro servo controller in your MPF config. You need to specify the correct serial port to which the Maestro is connected.  The example shows configurations for both Windows (COM5) and Linux/Mac (/dev/ttyACM0).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pololu_maestro.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\npololu_maestro:\n  port: /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: Scoring points using switch events in variable_player - YAML\nDESCRIPTION: This snippet demonstrates scoring points for individual pop bumper hits using event handlers in the `variable_player` section of an MPF mode configuration. It listens for the active event of each pop bumper switch and awards 100 points.  This approach requires defining a separate entry for each pop bumper switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/tags.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\nvariable_player:\n  mygame_popbumper_left_active:\n    score: 100\n  mygame_popbumper_top_active:\n    score: 100\n  mygame_popbumper_right_active:\n    score: 100\n```\n\n----------------------------------------\n\nTITLE: Playfield remove_incoming_ball() Method\nDESCRIPTION: Describes the `remove_incoming_ball()` method, which stops tracking an incoming ball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nremove_incoming_ball(incoming_ball: mpf.devices.ball_device.incoming_balls_handler.IncomingBall)\n```\n\n----------------------------------------\n\nTITLE: Scanning Hardware with MPF\nDESCRIPTION: This command uses the MPF hardware scan tool to detect and list connected SW-16 boards, displaying their firmware version, revision, and other details. The scan provides information about the connected hardware and their addresses.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/connecting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mpf hardware scan\n\nFirmware Version: 2 Firmware Revision: 6 Hardware Board ID: 1\nSW-16 boards found:\n - Board: 0 Switches: 16 Device Type: A3 Board ID: 0\n - Board: 1 Switches: 16 Device Type: A3 Board ID: 1\n - Board: 2 Switches: 16 Device Type: A4 Board ID: 2\n```\n\n----------------------------------------\n\nTITLE: Using Light Player in Shows YAML\nDESCRIPTION: This snippet demonstrates how to use the light player within a show to set the color of a light. It defines a show called `red_color` that sets the `l_light` to red.  The `show_player` is then used to trigger the show when the `turn_light_red_event` event is posted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/light_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshows:\n  red_color:\n    - lights:\n        l_light: red\nshow_player:\n  turn_light_red_event: red_color\n```\n\n----------------------------------------\n\nTITLE: Configuring Normally Closed Opto Switches in YAML\nDESCRIPTION: This code snippet demonstrates how to configure normally closed (NC) opto switches in a YAML configuration file. The `number` corresponds to the switch input on your hardware platform, and `type: 'NC'` specifies that the switch is normally closed, which is typical for optos.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/switches/optos.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  trough1:\n    number: 81    # number depends on your platform\n    type: 'NC'    # normally closed\n  orbit_opto:\n    number: 23    # number depends on your platform\n    type: 'NC'    # normally closed\n```\n\n----------------------------------------\n\nTITLE: Hit and Release Switch - Python\nDESCRIPTION: This function simulates a momentary activation and deactivation of a switch. The 'name' parameter specifies the switch to hit.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nhit_and_release_switch(name)\n```\n\n----------------------------------------\n\nTITLE: Install Latest Dev Release - console\nDESCRIPTION: This command installs the latest development release of MPF and MPF-MC. It includes pre-release features and requires the `--pre` flag. This command will upgrade any existing installations. It uses pip3 for package management.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\npip3 install mpf[all] mpf-mc --pre --upgrade\n```\n\n----------------------------------------\n\nTITLE: Show Configuration with Multiple Tokens (YAML)\nDESCRIPTION: This show demonstrates the use of multiple tokens in a single show ('led', 'color1', and 'color2'). This allows for dynamic control over both the LED and its colors.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: 0\n  lights:\n    (led): (color1)\n- time: 1\n  lights:\n    (led): (color2)\n```\n\n----------------------------------------\n\nTITLE: Mapping lights to display positions (YAML)\nDESCRIPTION: This YAML configuration defines how individual lights are mapped to positions on the display. Each light (e.g., `l_light1`, `l_light2`) is assigned a number and x/y coordinates that correspond to its position within the display. These coordinates determine where content from the display will be shown on the corresponding lights.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/display_light_player.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_light1:\n    number: 1\n    x: 0.3595817467355206\n    y: 0.026751757949132805\n  l_light2:\n    number: 2\n    x: 0.34303657433971446\n    y: 0.02873336964906857\n```\n\n----------------------------------------\n\nTITLE: Disabling Debouncing for a Switch (P3-ROC)\nDESCRIPTION: This snippet shows how to disable debouncing for a specific switch in the MPF configuration. By default, MPF enables debouncing. Setting `debounce: quick` disables debouncing, causing the switch to report state changes immediately.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/switches_p3_roc.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_switch:\n    number: A0-B0-0\n    debounce: quick\n```\n\n----------------------------------------\n\nTITLE: Triggering Debug Dump via Keyboard Input - YAML\nDESCRIPTION: This snippet demonstrates how to configure a keyboard key to trigger the `debug_dump_stats` event in MPF. This event will then dump information about registered event handlers, active slides, and other relevant objects, aiding in the identification of memory leaks. The configuration defines the key `d` to trigger the event when pressed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/debugging_memory_leaks.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nkeyboard:\n  d:\n    event: debug_dump_stats\n```\n\n----------------------------------------\n\nTITLE: Bezier Widget Configuration Example\nDESCRIPTION: This example demonstrates how to configure a bezier widget in an MPF slide. It defines two bezier curves with different properties, including points, color, thickness, cap, joint, and the close option. This snippet shows how to create curved lines and customize their appearance within MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/bezier.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nslide_player:\n  mc_ready:\n    bezier_example:\n      - type: bezier\n        points: 10, 10, 150, 450, 300, 100, 790, 590\n        color: lime\n        thickness: 5\n        cap: square\n      - type: bezier\n        points: 0, 600, 400, 400, 400, 0\n        color: pink\n        close: true\n        joint: miter\n        thickness: 10\n```\n\n----------------------------------------\n\nTITLE: Enabling Debugging for FAST in MPF Configuration\nDESCRIPTION: This snippet demonstrates how to enable debugging for the FAST platform by adding `debug: true` to the `fast` section of the MPF configuration file. This increases logging and may slow down MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/troubleshooting.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfast:\n  debug: true\n```\n\n----------------------------------------\n\nTITLE: Processing Switch State Change by Number (Python)\nDESCRIPTION: Processes a switch state change based on the switch's platform number.  Parameters include the `num` (switch number), the new `state`, the `platform` the switch is on, a `logical` flag indicating whether the state is logical or physical, and an optional `timestamp`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nprocess_switch_by_num(num, state, platform, logical=False, timestamp=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bonus Entries in YAML\nDESCRIPTION: This snippet shows how to configure bonus entries in the MPF bonus mode. It defines an event, score, and a player score entry to calculate the bonus based on a player variable.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/bonus/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: bonus\n#config_version=5\nmode_settings:\n  bonus_entries:\n    - event: bonus_castles\n      score: 200\n      player_score_entry: castles_captured\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration with Tag as Token Value (YAML)\nDESCRIPTION: This snippet demonstrates how to use a tag as the value for a token in the 'show_player:' section. When the 'some_event' event occurs, the 'flash_red' show is played, and the 'led' token is replaced with all lights that have the 'tag1' tag.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  some_event:\n    flash_red:\n      loops: -1\n      show_tokens:\n        led: tag1\n```\n\n----------------------------------------\n\nTITLE: Score Queue Player Configuration Example (YAML)\nDESCRIPTION: This configuration shows an example of how to set up `score_queue_player` to trigger specific scores. It requires `coils` and `score_queues` configurations defined elsewhere. It uses the `score` key to specify the amount of points to be added to the queue.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/score_queue_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_chime_1000:\n    number:\n  c_chime_100:\n    number:\n  c_chime_10:\n    number:\nscore_queues:\n  score:\n    chimes: c_chime_1000, c_chime_100, c_chime_10,  None\n    debug: true\n##! mode: my_mode\n# in your mode\nscore_queue_player:\n  score_2k:\n    score: 2000\n  score_200:\n    score: 200\n```\n\n----------------------------------------\n\nTITLE: Hit and Release Switch - Python\nDESCRIPTION: Momentarily activates and then immediately deactivates a switch. The `name` parameter specifies the switch to hit.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n`hit_and_release_switch(name)`\n```\n\n----------------------------------------\n\nTITLE: blinkenlight_player: Example Configuration\nDESCRIPTION: Demonstrates how to add and remove colors from a blinkenlight based on game events using the `blinkenlight_player` in a config file. The first event adds a red color with a specific key, and the second event removes it using that key.  Dependencies: None. Expected Input: Events `some_event` and `some_other_event`. Expected Output: Changes to the blinkenlight's color list.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/blinkenlight_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblinkenlight_player:\n  some_event:\n    my_blinkenlight1:\n      action: add\n      color: red\n      key: mykey1\n  some_other_event:\n    my_blinkenlight1:\n      action: remove\n      key: mykey1\n```\n\n----------------------------------------\n\nTITLE: Send Data (Python)\nDESCRIPTION: Sends data to the client. This method simulates sending data using the specified BCP command and arguments.  `bcp_command` and `bcp_command_args` specify the BCP command and associated arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MockBcpClient.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nsend(bcp_command, bcp_command_args)\n\nSend data to client.\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration - Triggering Light Show (YAML)\nDESCRIPTION: This snippet shows the basic configuration for the show player to trigger the 'light_gadget_letter' show when the 'gadget_g1_complete' event occurs. It sets the priority of the show but doesn't include specific show tokens.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n#! show_player:\n  gadget_g1_complete:\n    light_gadget_letter:\n#!       priority: 10\n```\n\n----------------------------------------\n\nTITLE: Adding a Second Player Slide Configuration (YAML)\nDESCRIPTION: This snippet configures the addition of a second player. It defines slides for single and multiplayer games, and a slide player to manage the display based on game events, including removing the base slide and playing the multiplayer slide when a second player joins.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/multiplayer_display.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  base_slide:\n    - type: text\n      text: \"Single Player Game\"\n  multiplayer_slide:\n    - type: text\n      text: \"Multiplayer Player Game\"\nslide_player:\n  single_player_ball_started: base_slide\n  multi_player_ball_started: multiplayer_slide\n  # If a second player joins during player1's turn, swap base_slide for multiplayer_slide\n  multiplayer_game:\n    base_slide:\n      action: remove\n    multiplayer_slide:\n      action: play\n  ball_will_end:\n    base_slide:\n      action: remove\n    multiplayer_slide:\n      action: remove\n##! test\n#! start_game\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Single Player Game\"\n#! add_player\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Multiplayer Player Game\"\n```\n\n----------------------------------------\n\nTITLE: Getting P-ROC Hardware Switch States\nDESCRIPTION: Retrieves the initial switch states from the P-ROC hardware. The P-ROC uses different values (1-4) to represent the switch states (closed/open, debounced/not debounced). The method returns a dictionary with the switch states.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/p_roc.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_hw_switch_states() -> Dict[str, bool]:\n    # Read in and set the initial switch state.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Disable Coil MPF\nDESCRIPTION: Disables the specified coil.\n<name> is the name of the coil to disable.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/service_cli.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncoil_disable <name>\n```\n\n----------------------------------------\n\nTITLE: Configuring RGB and RGBW LEDs with Start Channel and Type in FAST\nDESCRIPTION: This configuration shows how to define RGB and RGBW LEDs by chaining them using `start_channel` and `previous` settings. The `type` defines the color channels used.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/leds.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  led_0:\n    start_channel: 0      # you could also use number: 0\n    subtype: led\n    type: rgb    # will use red: 0-0, green: 0-1, blue: 0-2\n  led_1:\n    previous: led_0\n    subtype: led\n    type: rgbw   # will use red: 1-0, green: 1-2, blue: 1-3, white: 2-0\n  led_2:\n    previous: led_1\n    subtype: led\n    type: rgbw   # will use red: 2-1, green: 2-2, blue: 3-0, white: 3-1\n```\n\n----------------------------------------\n\nTITLE: Starting the Service Mode\nDESCRIPTION: Starts the service mode. The `mode_priority` parameter defines the mode's priority, and the `callback` parameter is a function that is called when the mode has been started. Do not override this method; instead use `mode_start`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/service.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nstart(mode_priority=None, callback=None, **kwargs) → None\n```\n\n----------------------------------------\n\nTITLE: Accessing PSUs via self.machine.psus in MPF\nDESCRIPTION: Explains how to access Power Supply Unit (PSU) devices within the MPF framework using the `self.machine.psus` device collection. It provides examples of accessing PSUs by name (e.g., `self.machine.psus.foo` or `self.machine.psus['foo']`) and references the DeviceCollection documentation for accessing devices by tag or hardware number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/psus.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Configuring Segment Displays with LISY in MPF (YAML)\nDESCRIPTION: This code snippet demonstrates how to configure segment displays in MPF when using the LISY platform. It defines multiple segment displays (info_display, player1_display, etc.) and assigns a unique number to each display. The `segment_displays` section within the MPF configuration file allows for the management and control of segment displays connected to the LISY hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/segment_displays.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nsegment_displays:\n  info_display:\n    number: 0\n  player1_display:\n    number: 1\n  player2_display:\n    number: 2\n  player3_display:\n    number: 3\n  player4_display:\n    number: 4\n```\n\n----------------------------------------\n\nTITLE: Enable debug for P-Roc platform (YAML)\nDESCRIPTION: This configuration enables debugging for the P-Roc platform, generating extensive log information.  Setting `debug: true` in the `p_roc` section will log detailed platform events and states, aiding in hardware troubleshooting. Performance might be affected.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/general_debugging.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\np_roc:\n  debug: true\n```\n\n----------------------------------------\n\nTITLE: Adding Mode Event Handler\nDESCRIPTION: Registers an event handler that is automatically removed when the mode stops. This simplifies event management by tying the handler's lifecycle to the mode's active state. The method is similar to the Event Manager's add_handler() method, except it automatically unregisters the handlers when the mode ends.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/tilt.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nadd_mode_event_handler(event: str, handler: Callable, priority: int = 0, **kwargs) → mpf.core.events.EventHandlerKey\n```\n\n----------------------------------------\n\nTITLE: Assert Count Equal Python\nDESCRIPTION: This code snippet provides examples on using assertCountEqual for unordered sequence comparison, focusing on elements, regardless of the order. It also includes test cases where the first and second lists are unequal.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n[0, 1, 1] and [1, 0, 1] compare equal.\n[0, 0, 1] and [0, 1] compare unequal.\n```\n\n----------------------------------------\n\nTITLE: Track Player Configuration Example (Shows)\nDESCRIPTION: This YAML snippet shows how to use the track player within an MPF show. It demonstrates setting the volume of the 'music' track at different times in the show, with a fade effect. The first step sets the volume to 0.3 with a 0.25-second fade, and the second step sets the volume to 0.5, also with a 0.25-second fade.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/track_player.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nshows:\n  my_show_with_sound:\n    - time: 0\n      tracks:\n        music:\n          action: set_volume\n          volume: 0.3\n          fade: 0.25 sec\n    - time: 3.5\n      tracks:\n        music:\n          action: set_volume\n          volume: 0.5\n          fade: 0.25 sec\n```\n\n----------------------------------------\n\nTITLE: Accessing Combo Switches in MPF\nDESCRIPTION: This snippet demonstrates how to access combo_switches within the Mission Pinball Framework (MPF) environment. You can access them via `self.machine.combo_switches` followed by the name or dictionary key.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/combo_switches.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.combo_switches.foo\nself.machine.combo_switches['foo']\n```\n\n----------------------------------------\n\nTITLE: Subscribed Config Players (YAML)\nDESCRIPTION: Demonstrates how to subscribe config players to machine or player variables. The effect is enabled when the condition holds and automatically disabled when the condition is no longer true.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/conditional.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n#! lights:\n#!   led4:\n#!     number:\n#!   led5:\n#!     number:\nlight_player:\n  \"{machine.test_machine_var == 23}\":\n    led4: red\n  \"{current_player.test_player_var == 42}\":\n    led5: red\n```\n\n----------------------------------------\n\nTITLE: Configuring 16-Segment Serial Display with WS2811 on OPP\nDESCRIPTION: This YAML configuration showcases how to setup a 16-segment serial display controlled by a WS2811 chip connected to an OPP (Open Pinball Project) controller. It defines each segment of the display as a light, specifying the `start_channel` based on its position in the WS2811 LED chain.  The segments are defined sequentially using the `previous` setting, linking them together. This is then used in the `segment_displays` config.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/light_segment_displays.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  segment_displays: light_segment_displays\n\nlights:\n  l_neoseg_0_0_a:\n    start_channel: 0-0-60  #When using other RGB pixels in the chain before the display,\n                           #             start_channel = 3 x start_pixel\n                           #Using RGBW,  start_channel = 4 x start pixel\n                           #Here, there are 20 RGB neopixels before the display\n    type: w\n    subtype: led\n  l_neoseg_0_0_m:\n    previous: l_neoseg_0_0_a\n    type: w\n    subtype: led\n  l_neoseg_0_0_k:\n    previous: l_neoseg_0_0_m\n    type: w\n    subtype: led\n  l_neoseg_0_0_h:\n    previous: l_neoseg_0_0_k\n    type: w\n    subtype: led\n  l_neoseg_0_0_u:\n    previous: l_neoseg_0_0_h\n    type: w\n    subtype: led\n  l_neoseg_0_0_s:\n    previous: l_neoseg_0_0_u\n    type: w\n    subtype: led\n  l_neoseg_0_0_t:\n    previous: l_neoseg_0_0_s\n    type: w\n    subtype: led\n  l_neoseg_0_0_g:\n    previous: l_neoseg_0_0_t\n    type: w\n    subtype: led\n  l_neoseg_0_0_f:\n    previous: l_neoseg_0_0_g\n    type: w\n    subtype: led\n\n  l_neoseg_0_0_e:\n    previous: l_neoseg_0_0_f\n    type: w\n    subtype: led\n  l_neoseg_0_0_dp:\n    previous: l_neoseg_0_0_e\n    type: w\n    subtype: led\n  l_neoseg_0_0_d:\n    previous: l_neoseg_0_0_dp\n    type: w\n    subtype: led\n  l_neoseg_0_0_r:\n    previous: l_neoseg_0_0_d\n    type: w\n    subtype: led\n  l_neoseg_0_0_p:\n    previous: l_neoseg_0_0_r\n    type: w\n    subtype: led\n  l_neoseg_0_0_c:\n    previous: l_neoseg_0_0_p\n    type: w\n    subtype: led\n  l_neoseg_0_0_n:\n    previous: l_neoseg_0_0_c\n    type: w\n    subtype: led\n  l_neoseg_0_0_b:\n    previous: l_neoseg_0_0_n\n    type: w\n    subtype: led\n  l_neoseg_0_0_na:\n    previous: l_neoseg_0_0_b\n    type: w\n    subtype: led\n\nsegment_displays:\n  display1:\n    number: 1\n    platform_settings:\n      lights:\n        - a: l_neoseg_0_0_a\n          b: l_neoseg_0_0_b\n          c: l_neoseg_0_0_c\n          d: l_neoseg_0_0_d\n          e: l_neoseg_0_0_e\n          f: l_neoseg_0_0_f\n          g: l_neoseg_0_0_g\n          h: l_neoseg_0_0_h\n          k: l_neoseg_0_0_k\n          m: l_neoseg_0_0_m\n          n: l_neoseg_0_0_n\n          p: l_neoseg_0_0_p\n          r: l_neoseg_0_0_r\n          s: l_neoseg_0_0_s\n          t: l_neoseg_0_0_t\n          u: l_neoseg_0_0_u\n      type: 16segment\n```\n\n----------------------------------------\n\nTITLE: Accessing the StepStick Platform in MPF\nDESCRIPTION: Demonstrates how to access the StepStick hardware platform instance within the MPF environment. The platform instance is stored in the `self.machine.hardware_platforms` dictionary using the key `'step_stick'`. This allows developers to interact with the StepStick platform and control connected stepper motors.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/step_stick.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['step_stick']\n```\n\n----------------------------------------\n\nTITLE: Configuring Machine Settings YAML\nDESCRIPTION: This snippet shows the basic configuration for the `machine:` section in a YAML file. It defines the `balls_installed` and `min_balls` settings, which specify the maximum number of balls in the machine and the minimum number of balls required to start a game, respectively.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/machine.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmachine:\n  balls_installed: 6\n  min_balls: 3\n```\n\n----------------------------------------\n\nTITLE: Git Clone Command\nDESCRIPTION: This command clones the showcreator repository from GitHub. This is a necessary step to get the source code to build the executable, and to get the required dependencies.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/showcreator.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/missionpinball/showcreator.git\n```\n\n----------------------------------------\n\nTITLE: Response to Get Sound Count (0x05)\nDESCRIPTION: This is the response format to the 'Get Sound Count' command (0x05). It contains a single byte representing the number of sounds available on the hardware platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\nByte           Length         Description\n-------------- -------------- ------------------------------------------\n0              1              Sound count `o` (0 to 255). 0 if no sounds\n                               exist.\n```\n\n----------------------------------------\n\nTITLE: Assert Player Count - Python\nDESCRIPTION: This assertion checks if the number of players in the game matches the expected count. The parameter 'count' specifies the anticipated player number. For example, assertPlayerCount(2) asserts that two players are in the game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nassertPlayerCount(count)\n```\n\nLANGUAGE: python\nCODE:\n```\nself.assertPlayerCount(2)\n```\n\n----------------------------------------\n\nTITLE: Scanning Hardware for Firmware Version\nDESCRIPTION: This snippet shows how to use the `mpf hardware scan` command to determine the current firmware version of the P-Roc or P3-Roc board. This command is part of the Mission Pinball Framework (MPF) and interfaces with the connected hardware to retrieve version information.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/firmware_upgrade.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mpf hardware scan\n\nFirmware Version: 2 Firmware Revision: 6 Hardware Board ID: 1\nSW-16 boards found:\n - Board: 0 Switches: 16 Device Type: A3 Board ID: 0\n - Board: 1 Switches: 16 Device Type: A3 Board ID: 1\n - Board: 2 Switches: 16 Device Type: A4 Board ID: 2\n```\n\n----------------------------------------\n\nTITLE: Chaining LEDs in MPF (MPF 0.54+)\nDESCRIPTION: This snippet shows the new syntax introduced in MPF 0.54 for chaining LEDs. It utilizes the `previous` setting to link LEDs together. Each LED has a `start_channel`, a `subtype` of `led`, and a `type` to define the color order. The numbers used in `start_channel` will be platform specific.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/ws2812.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  led_0:\n    start_channel: 0-0    # the exact number format depends on your platform\n    subtype: led\n    type: rgb    # will use red: 0-0, green: 0-1, blue: 0-2\n  led_1:\n    previous: led_0\n    subtype: led\n    type: rgbw   # will use red: 0-3, green: 0-4, blue: 0-5, white: 0-6\n  led_2:\n    previous: led_1\n    subtype: led\n    type: rgbw   # will use red: 0-7, green: 0-8, blue: 0-9, white: 0-10\n```\n\n----------------------------------------\n\nTITLE: Install and Enable pigpiod Service\nDESCRIPTION: These commands install, enable, and start the `pigpiod` service on a Debian-based system. The service is required to remotely control GPIO pins on the Raspberry Pi.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/rpi.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\napt install pigpiod\nsystemctl enable pigpiod.service\nsystemctl start pigpiod.service\n```\n\n----------------------------------------\n\nTITLE: Mode Selection Using Carousel YAML\nDESCRIPTION: This code defines a mode selection carousel using MPF's carousel mode. It specifies the selectable items, events for selecting items, and events for navigating through the carousel. The configuration sets up events to assign the selected character to the player variable. The modes start and stop based on configurable events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/mode_selection.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: carousel\n#config_version=5\nmode:\n  start_events: start_selection_mode\n  stop_events: carousel_item_selected\n  code: mpf.modes.carousel.code.carousel.Carousel\nmode_settings:\n  selectable_items: character1, character2, character3\n  select_item_events: s_start_active\n  next_item_events: s_left_flipper_active\n  previous_item_events: s_right_flipper_active\n# TODO: add some slides. If you have a nice example please send it to us (or create a PR).\nvariable_player:\n  carousel_character1_selected:\n    selected_character:\n      string: \"character1\"\n  carousel_character2_selected:\n    selected_character:\n      string: \"character2\"\n  carousel_character3_selected:\n    selected_character:\n      string: \"character3\"\n```\n\n----------------------------------------\n\nTITLE: Updating Switches from Hardware (Python)\nDESCRIPTION: Updates the states of all switches by re-reading the states from the hardware platform. This is a silent operation; it doesn't post any events even if switch states have changed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nupdate_switches_from_hw()\n```\n\n----------------------------------------\n\nTITLE: Sound Player Block Configuration Shorthand in YAML\nDESCRIPTION: This YAML snippet demonstrates the shorthand way of configuring the `sound_player` section to block events from being passed to lower-priority modes. This uses the express config format, which combines the sound name and the `block` setting into a single line.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sound_player.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: mode1\nsound_player:\n  sw_jet_bumper_active: super_jet_bumper_sound|block\n```\n\n----------------------------------------\n\nTITLE: Configure Shot Group Reset Events in MPF\nDESCRIPTION: This snippet demonstrates how to configure shot group reset events in MPF. It adds a `reset_events` entry to the `indy_lanes` shot group, specifying that the group should reset 1 second after the `indy_lanes_lit_complete` event is posted. This event is triggered when all shots in the group are in the 'lit' state.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/lanes_mode.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nshot_groups:\n  indy_lanes:\n    shots: indy_i, indy_n, indy_d, indy_y\n    rotate_left_events: left_flipper_active\n    rotate_right_events: right_flipper_active\n    reset_events:\n      indy_lanes_lit_complete: 1s\n```\n\n----------------------------------------\n\nTITLE: Setting Delayed Pulse on Hit Rule (Python)\nDESCRIPTION: Adds a rule to pulse a driver after a specified delay when a switch is hit. This rule ensures a full pulse, regardless of the switch's release state. Uses hardware timing for accurate delays.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/platform_controller.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nset_delayed_pulse_on_hit_rule(enable_switch: mpf.core.platform_controller.SwitchRuleSettings, driver: mpf.core.platform_controller.DriverRuleSettings, delay_ms, pulse_setting: mpf.core.platform_controller.PulseRuleSettings = None) -> mpf.core.platform_controller.HardwareRule\n```\n\n----------------------------------------\n\nTITLE: Stop All Light Fades (Python)\nDESCRIPTION: Stops all active fades on the driver lights. This method ensures that all fading effects are immediately terminated.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/drivers.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstop()\n```\n\n----------------------------------------\n\nTITLE: Configuring Super Jets Setup Mode\nDESCRIPTION: This YAML configuration defines the 'super_jets_setup' mode for a pinball game, handling game logic, scoring, and mode activation. It includes settings for shots, shot groups, counters, event players, variable players, and show players. It utilizes counters to track when Super Jets has started and if it should re-enable on ball start.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/AFM_super_jets.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: super_jets_startup\n#config_version=5\n\n    mode:\n      start_events: ball_starting\n      priority: 200\n\n    shots:\n      jets:\n        switch: s_right_bumper, s_left_bumper, s_middle_bumper\n      right_rollover:\n        switch: s_right_rollover\n        show_tokens:\n          light: l_right_rollover\n      left_rollover:\n        switch: s_left_rollover\n        show_tokens:\n          light: l_left_rollover\n\n    shot_groups:\n      rollover_lanes:\n        shots: right_rollover, left_rollover\n        rotate_left_events: s_left_flipper_active\n        rotate_right_events: s_right_flipper_active\n        reset_events:\n          rollover_lanes_lit_complete: 1s\n\n    counters:\n      lb_jets_count:\n        count_events: jets_hit\n        starting_count: 0\n        count_complete_value: 100\n        count_interval: 1\n        direction: up\n        persist_state: true\n        events_when_complete: Super_Jets_Go\n        debug: true\n      lb_jets_resume:\n        enable_events: mode_base_started{current_player.sj_active>0}\n        count_events: jets_hit\n        starting_count: 0\n        count_complete_value: 25\n        count_interval: 1\n        direction: up\n        persist_state: false\n        events_when_complete: Super_Jets_Resume_Go\n        debug: true\n        reset_on_complete: true\n      lb_rollover_complete_count:\n        count_events: rollover_lanes_complete\n        events_when_hit: rollover_lanes_done\n        starting_count: 0\n        count_complete_value: 40\n        reset_on_complete: false\n        direction: up\n        persist_state: false\n\n    event_player:\n      Super_Jets_Go:\n        start_mode_super_jets\n      Super_Jets_Go_Again:\n       start_mode_super_jets\n\n    variable_player:\n      s_left_bumper_active:\n        score: 1000000 + (device.counters.lb_rollover_complete_count.value * 50000)\n      s_middle_bumper_active:\n        score: 1000000 + (device.counters.lb_rollover_complete_count.value * 50000)\n      s_right_bumper_active:\n        score: 1000000 + (device.counters.lb_rollover_complete_count.value * 50000)\n      rollover_lanes_complete:\n        score: 1000\n      mode_super_jets_started:\n        sj_active:\n          int: 1\n          action: set\n\n   show_player:\n     mode_super_jets_setup_started{current_player.sj_active>0}:\n       Super_Jets_on:\n         show_tokens:\n           lights: l_super_jets\n```\n\n----------------------------------------\n\nTITLE: Layout Slide Configuration in YAML for Picture-in-Picture\nDESCRIPTION: This snippet configures a layout slide with a blue background and specifies the placement of four displays (insert, upper, middle, and lower) within the slide. The \"insert\" display is defined first, ensuring it's drawn on top of the \"lower\" display, creating a picture-in-picture effect. The x and y coordinates position each display relative to the lower-left corner of the window.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/picture_in_picture.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  layout:\n    background_color: blue\n    widgets:\n      - type: display\n        width: 69\n        height: 65\n        x: 60\n        y: 200\n        anchor_x: left\n        anchor_y: top\n        source_display: insert\n      - type: display\n        width: 1040\n        height: 280\n        x: 20\n        y: 1270\n        anchor_x: left\n        anchor_y: top\n        source_display: upper\n      - type: display\n        width: 1040\n        height: 580\n        x: 20\n        y: 940\n        anchor_x: left\n        anchor_y: top\n        source_display: middle\n      - type: display\n        width: 1040\n        height: 320\n        x: 20\n        y: 340\n        anchor_x: left\n        anchor_y: top\n        source_display: lower\n```\n\n----------------------------------------\n\nTITLE: Event Priority Configuration (YAML)\nDESCRIPTION: This snippet illustrates how to set the priority of events within the event player. This is useful for ensuring events are processed in a specific order, especially when dealing with conditional checks based on player variables that need to be updated first.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/event_player.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nevent_player:\n  mode_dynamo_started:\n    reset_pv_tokens_collected_to_0\n      priority: 50\n    play_slide{current_player.pv_tokens_collected <= 5}:\n      priority: 5\n      slide: dynamo_collect_more_tokens_slide\n```\n\n----------------------------------------\n\nTITLE: Getting Switch States\nDESCRIPTION: Retrieves the current states of all switches on the Spike platform. This is useful for determining the active/inactive status of switches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nget_hw_switch_states()\n```\n\n----------------------------------------\n\nTITLE: Check MPF Version - doscon\nDESCRIPTION: This command checks the currently installed version of MPF. It helps verify whether MPF is installed correctly and which version is being used. It outputs the MPF version number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_4\n\nLANGUAGE: doscon\nCODE:\n```\nmpf --version\n```\n\n----------------------------------------\n\nTITLE: Uninstall MPF via Pip - console\nDESCRIPTION: This command uninstalls MPF and MPF-MC using pip. It's used to remove MPF from the system, either because it's no longer needed or to perform a clean install. This requires `sudo` privileges.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nsudo pip3 uninstall mpf-mc mpf\n```\n\n----------------------------------------\n\nTITLE: Configure Virtual Platform Start Active Switches in MPF (YAML)\nDESCRIPTION: This snippet configures the `virtual_platform_start_active_switches:` section to set switches to the active state when MPF is run in virtual mode.  This is useful for simulating a full trough of balls during development.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvirtual_platform_start_active_switches: s_drain\n```\n\n----------------------------------------\n\nTITLE: Bonus Mode Settings Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates the configuration of the `mode_settings:` section for a bonus mode. It showcases how to define display delays, hurry-up events, and individual bonus entries with their corresponding scores and player score entries. The example includes configuration for `display_delay_ms`, `hurry_up_delay_ms`, `hurry_up_event`, and two bonus entries, `quarter_bonus` and `wizard_bonus`, with different score calculations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/bonus.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nmode_settings:\n  display_delay_ms: 4000\n  hurry_up_delay_ms: 500\n  hurry_up_event: flipper_cancel\n  bonus_entries:\n    - event: quarter_bonus\n      score: current_player.quarters * current_player.album_value\n    - event: wizard_bonus\n      score: 25000\n      player_score_entry: num_albums\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Ball End Mode in YAML\nDESCRIPTION: This YAML configuration demonstrates how to create a custom mode that starts when the ball ending process begins. It uses `use_wait_queue` to delay the ball ending and sets a priority to determine the order of execution. The mode can be stopped by posting the `stop_my_mode` event, allowing the ball ending process to continue.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/ball_end_modes.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: custom_bonus\n#config_version=5\nmode:\n  start_events: ball_ending     # start on ball ending process\n  use_wait_queue: true          # delay ball ending\n  priority: 500                 # determines the order of ball end modes\n  stop_events: stop_my_mode     # post this event to stop the mode and continue the ball ending process\n```\n\n----------------------------------------\n\nTITLE: MPF Command-Line Options\nDESCRIPTION: This snippet illustrates how to use command-line options with MPF commands. These options are added after the main command (mpf, mpf mc, mpf both) to modify the behavior of the engine or media controller. Options include things like verbose mode, background mode etc.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/index.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nmpf -x -v\nmpf mc -xvV\nmpf both -v -b\n```\n\n----------------------------------------\n\nTITLE: Create a 'proc' directory in the user's home folder\nDESCRIPTION: This command creates a directory named 'proc' in the user's home folder. This directory will be used to store the downloaded source code and build files for the P-ROC/P3-ROC drivers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/mac.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/proc\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Slide with Display Widgets in MPF (YAML)\nDESCRIPTION: This YAML configuration defines a slide named `layout_4_mini` with a red background, containing four display widgets.  Each display widget is positioned and sized to cover a quadrant of the main window, and its `source_display` attribute is set to one of the four smaller displays defined earlier (upper_left, upper_right, lower_left, lower_right).  A text widget is also added to the slide. A slide_player entry is used to display this layout slide on the main \"window\" display when the media controller is ready (mc_ready).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/split_screen.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  layout_4_mini:\n    background_color: red\n    widgets:\n      - type: display\n        width: 580\n        height: 260\n        x: 40\n        y: 420\n        anchor_x: left\n        anchor_y: bottom\n        source_display: upper_left\n      - type: display\n        width: 580\n        height: 260\n        x: 660\n        y: 420\n        anchor_x: left\n        anchor_y: bottom\n        source_display: upper_right\n      - type: display\n        width: 580\n        height: 260\n        x: 40\n        y: 120\n        anchor_x: left\n        anchor_y: bottom\n        source_display: lower_left\n      - type: display\n        width: 580\n        height: 260\n        x: 660\n        y: 120\n        anchor_x: left\n        anchor_y: bottom\n        source_display: lower_right\n      - type: text\n        text: Split Screen Layout Example\n        y: 60\nslide_player:\n  mc_ready:\n    layout_4_mini:\n      target: window\n```\n\n----------------------------------------\n\nTITLE: MPF Diagnosis Command\nDESCRIPTION: This command is used to verify the MPF installation and retrieve version information for MPF and MPF-MC. It also detects connected serial ports. Run this command from within your machine folder to check if the installation is fine and to gather essential details for reporting issues.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mpf diagnosis\n\n\nMPF version: MPF v0.50.0-dev.11\nMPF install location: /data/home/jan/cloud/flipper/src/mpf/mpf\nMachine folder detected: /data/home/jan/cloud/flipper/src/good_vs_evil\nMPF-MC version: MPF-MC v0.50.0-dev.5 (config_version=5, BCP v1.1, Requires MPF v0.50.0-dev.10)\n\nSerial ports found:\n/dev/ttyUSB3\n    desc: Quad RS232-HS\n    hwid: USB VID:PID=0403:6011 LOCATION=1-12\n/dev/ttyUSB2\n    desc: Quad RS232-HS\n    hwid: USB VID:PID=0403:6011 LOCATION=1-12\n/dev/ttyUSB1\n    desc: Quad RS232-HS\n    hwid: USB VID:PID=0403:6011 LOCATION=1-12\n/dev/ttyUSB0\n    desc: Quad RS232-HS\n    hwid: USB VID:PID=0403:6011 LOCATION=1-12\n```\n\n----------------------------------------\n\nTITLE: Getting Balls in Play Property in Python\nDESCRIPTION: Demonstrates how to get the current number of balls in play. The `balls_in_play` property can be accessed to both get and set the number of balls in play. Setting it to 0 will initiate the ball ending process.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/game.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nballs_in_play\n```\n\n----------------------------------------\n\nTITLE: Uninstall and Reinstall MPF - doscon\nDESCRIPTION: This command uninstalls MPF, MPF-MC, and MPF-Monitor, then reinstalls the latest releases. It resolves version conflicts or corrupted installations by ensuring a clean slate. It uses `pip3` for package management.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_13\n\nLANGUAGE: doscon\nCODE:\n```\npip3 uninstall mpf mpf-mc mpf-monitor\n```\n\nLANGUAGE: doscon\nCODE:\n```\npip3 install mpf mpf-mc mpf-monitor\n```\n\n----------------------------------------\n\nTITLE: Compile and install libpinproc\nDESCRIPTION: These commands compile and install the libpinproc library. A build directory is created, and CMake is used to configure the build with shared libraries enabled. The library is then compiled with 'make', and installed system-wide with 'sudo make install'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/mac.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd libpinproc\nmkdir bin\ncd bin\ncmake -DBUILD_SHARED_LIBS=ON ..\nmake\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Initializing Display: Multiple Displays with Default (YAML)\nDESCRIPTION: This code snippet demonstrates how to define multiple displays in the `displays:` section of the MPF configuration file, including setting one as the default display using `default: true`. This is useful when your machine has more than one screen.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  lcd:\n    width: 1366\n    height: 768\n    default: true\n  playfield:\n    width: 640\n    height: 480\n```\n\n----------------------------------------\n\nTITLE: Adding a Text Widget to a Slide in YAML\nDESCRIPTION: This snippet adds a text widget displaying the text \"PINBALL!\" to the \"welcome_slide\". The `type: text` specifies the widget type, and the `text:` property sets the content. The dash (-) indicates this is a list item under the widgets section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  welcome_slide:\n    widgets:\n      - type: text\n        text: PINBALL!\n#! slide_player:\n#!   show_slide_event: welcome_slide\n##! test\n#! post show_slide_event\n#! advance_time_and_run .1\n#! assert_slide_on_top welcome_slide\n#! assert_text_on_top_slide PINBALL!\n```\n\n----------------------------------------\n\nTITLE: Shutdown Computer Mode Class (MPF, Python)\nDESCRIPTION: This Python code defines a mode for MPF that allows the pinball machine to trigger a computer shutdown. It determines the operating system (Linux or Windows) and executes the appropriate shutdown command. The `os` and `platform` modules are required.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/finalization/power.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom mpf.core.mode import Mode\nimport os\nimport platform\nclass shutdown_computer(Mode):\n    def mode_init(self):\n        self.log.info('shutdown_computer mode_init')\n        self.OS_type = platform.system().lower()\n    def mode_start(self, **kwargs):\n        self.log.info('shutdown_computer mode_start')\n        self.add_mode_event_handler('shutdown_host_computer', self.shutdown_host)\n    def shutdown_host(self, **kwargs):\n        #shutdown the mpf game if it's running\n        #shutdown the computer\n        if self.OS_type == 'linux':\n            shutdown_str = 'shutdown -t 0'\n        elif self.OS_type == 'windows':\n            shutdown_str == 'shutdown -s -t 0'\n        else:\n            self.log.warning(f'Sorry this feature is not available in {self.os_type}')\n            return\n        os.system(shutdown_str)\n    def mode_stop(self, **kwargs):\n        self.machine.events.post('shutdown_computer mode_ended')\n        self.log.info('shutdown_computer mode_stop')\n```\n\n----------------------------------------\n\nTITLE: SSH into the Debian VM\nDESCRIPTION: This snippet shows how to establish an SSH connection to the Debian virtual machine from the host OS. Replace `[your-user]` with the username created during Debian installation and `192.168.56.101` with the VM's IP address. This enables remote access to the VM's terminal.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nssh [your-user]@192.168.56.101\n```\n\n----------------------------------------\n\nTITLE: Add Default Playfield in MPF (YAML)\nDESCRIPTION: This snippet adds a default playfield configuration, specifying the default source device as the plunger lane and tagging the playfield as 'default'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nplayfields:\n  playfield:\n    default_source_device: bd_plunger_lane\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Run MPF Media Controller Unit Tests\nDESCRIPTION: This command executes the unit tests for the MPF Media Controller (MPF-MC). It uses the unittest module to discover and run tests in the `mpfmc/tests` directory. Running these tests will open a graphical window, and some tests will include audio.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/Writing_Tests/RunUnitTests.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npython3 -m unittest discover mpfmc/tests\n```\n\n----------------------------------------\n\nTITLE: Using the 'on' show in MPF\nDESCRIPTION: Example configuration showing how to use the 'on' show in a MPF show_player to turn on a specific light. The 'on' show turns a light on to its default color indefinitely, using the light token to specify the target light.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/default_shows.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  my_triggering_event:\n    on:\n      show_tokens:\n        light: my_light\n```\n\n----------------------------------------\n\nTITLE: Enqueue Show - MPF\nDESCRIPTION: This snippet explains how to add a show to the end of a show queue in MPF. It utilizes the `enqueue_show` method of the ShowQueue class, which requires a show configuration and a starting step. The show configuration should be an instance of `mpf.assets.show.ShowConfig` and the `start_step` is an integer indicating the step at which the show will begin.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/show_queues.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nenqueue_show(show_config: mpf.assets.show.ShowConfig, start_step: int)\n```\n\n----------------------------------------\n\nTITLE: Configuring switch_player in MPF (YAML)\nDESCRIPTION: This YAML configuration shows how to define a series of switch events and their associated timings and actions within the `switch_player` section. The `start_event` specifies which event will trigger the switch sequence. Each step defines a time, switch, and action (activate, hit, or deactivate).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/switch_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nswitches:\n  s_test1:\n    number:\n    x: 0.4\n    y: 0.5\n    z: 0\n  s_test2:\n    number:\n    x: 0.6\n    y: 0.7\n  s_test3:\n    number:\nplugins: switch_player\nswitch_player:\n  start_event: test_start\n  steps:\n    - time: 100ms\n      switch: s_test1\n      action: activate\n    - time: 600ms\n      switch: s_test3\n      action: hit\n    - time: 100ms\n      switch: s_test1\n      action: deactivate\n    - time: 1s\n      switch: s_test2\n      action: activate\n    - time: 1s\n      switch: s_test3\n      action: hit\n    - time: 100ms\n      switch: s_test2\n      action: deactivate\n    - time: 1s\n      switch: s_test3\n      action: hit\n```\n\n----------------------------------------\n\nTITLE: Conditional Scoring with Events in YAML\nDESCRIPTION: This example uses conditional events to implement special scoring based on specific conditions. It checks if the `super_extraball` mode is active and if the player has made more than two loops.  If both conditions are true, a high score is awarded.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/scoring/index.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# set initial value for your multiplier player variables (to have it start\n# at 1 instead of 0)\nplayer_vars:\n  multiplier:\n    value_type: int\n    initial_value: 1\n  loops_made:\n    value_type: int\n    initial_value: 0\n##! mode: super_extraball\n##! mode: my_mode\n# in your mode:\nvariable_player:\n  made_loop:\n    loops_made: 1\n  score_something:\n    score: 100 * current_player.multiplier\n  score_something{mode.super_extraball.active and current_player.loops_made > 2}:\n    score: 1000000\n##! test\n#! start_game\n#! assert_player_variable 1 multiplier\n#! start_mode my_mode\n#! post score_something\n#! assert_player_variable 100 score\n#! post made_loop\n#! post made_loop\n#! assert_player_variable 2 loops_made\n#! post score_something\n#! assert_player_variable 200 score\n#! post made_loop\n#! assert_player_variable 3 loops_made\n#! post score_something\n#! assert_player_variable 300 score\n#! start_mode super_extraball\n#! post score_something\n#! assert_player_variable 1000400 score\n```\n\n----------------------------------------\n\nTITLE: Start MPF as root\nDESCRIPTION: This command starts Mission Pinball Framework (MPF) as root using `sudo`. This is required for the matrix to access the hardware, but MPF will drop these privileges after it starts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/rpi_dmd.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsudo mpf game\n```\n\n----------------------------------------\n\nTITLE: Configuring Eject Timeouts in YAML\nDESCRIPTION: This snippet configures eject timeouts for both the trough and the plunger lane. The `eject_timeouts` setting, measured in seconds, is added to both `bd_trough` and `bd_plunger` to prevent balls from stacking up after an eject.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_mechanical.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n    eject_timeouts: 3s\n  bd_plunger:\n    ball_switches: s_plunger\n    mechanical_eject: true\n    eject_timeouts: 5s\n```\n\n----------------------------------------\n\nTITLE: Example Event Information (Console)\nDESCRIPTION: This console output provides an example of an event being posted with arguments, specifically 'player_turn_started' with 'player' and 'number' arguments.  This demonstrates the data available from posted events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nINFO : EventManager : Event: ======'player_turn_started'====== Args={'player': <Player 1>, 'number': 1}\n```\n\n----------------------------------------\n\nTITLE: Assert Placeholder Evaluation - Python\nDESCRIPTION: This assertion evaluates a placeholder expression and verifies that it resolves to a specific expected value. It's useful for testing dynamic values derived from machine state or configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nassertPlaceholderEvaluates(expected, condition)\n```\n\n----------------------------------------\n\nTITLE: Configuring Magnets in MPF YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to define a magnet in MPF, linking it to a coil and a switch. It also specifies events for releasing and flinging the ball, enabling control over magnet behavior during gameplay. The coil settings define the magnet's strength and duration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/magnets/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  magnet_coil:\n    number:\n    default_pulse_ms: 100\n    default_hold_power: 0.375\n\nswitches:\n  grab_switch:\n    number:\n\nmagnets:\n  magnet:\n    magnet_coil: magnet_coil\n    grab_switch: grab_switch\n    release_ball_events: magnet_release\n    fling_ball_events: magnet_fling\n```\n\n----------------------------------------\n\nTITLE: Example Invalid Setting Name Error in Python\nDESCRIPTION: This Python error message demonstrates an `AssertionError` that occurs when the configuration contains an invalid setting name within the MPF setup. The error specifies the incorrect setting (e.g., `flippers:left_flipper:holdcoil`) and alerts the user that it's not a valid setting name, guiding them to revise the configuration file by using a valid setting name.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nAssertionError: Your config contains a value for the setting \"flippers:left_flipper:holdcoil\", but this is not a valid setting name.\n```\n\n----------------------------------------\n\nTITLE: Attract Show Configuration (YAML)\nDESCRIPTION: This snippet configures the attract show, which is played when the machine is idle. It defines a show called `attract_display_loop` that displays a sequence of slides, including a \"PRESS START\" message and the current credit count. Transitions are used to animate the slides.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nshow_player:\n  mode_attract_started: attract_display_loop\nshows:\n  attract_display_loop:\n    - duration: 2s\n      slides:\n        press_start:\n          target: dmd\n          widgets:\n            - type: Text\n              text: PRESS START\n          transition:\n            type: move_in\n            duration: 1s\n            direction: top\n    - duration: 2s\n      slides:\n        credits_slide:\n          target: dmd\n          widgets:\n            - type: text\n              text: (machine|credits_string)\n          transition:\n            type: move_in\n            duration: 1s\n            direction: bottom\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit and Release Rule\nDESCRIPTION: Sets a hardware rule to pulse a coil when a switch is hit and release it when another condition is met. I believe that param2 == 1 means that it will cancel the pulse when the switch is released. Used for high-power coils on dual-wound flippers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_release_rule(enable_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings)\n```\n\n----------------------------------------\n\nTITLE: Setting color opacity to 50% with hex code in MPF\nDESCRIPTION: This snippet shows how to set the opacity of a color to 50% in MPF using a hexadecimal color code. The `80` at the end of the color code `ff000080` represents 50% opacity.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/opacity.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncolor: ff000080\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version in DOS\nDESCRIPTION: This command checks the installed version of Python. It's important to verify that the correct Python version (3.9.x) is installed, as MPF 0.57 requires Python 3.9, 3.10, or 3.11.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/windows.md#_snippet_2\n\nLANGUAGE: doscon\nCODE:\n```\npython --version\n```\n\n----------------------------------------\n\nTITLE: Complete SmartMatrix Configuration Example in YAML\nDESCRIPTION: This complete configuration example showcases the entire SmartMatrix setup, including hardware, displays, DMD settings, slides, and slide player configurations. The `smartmatrix:port` setting requires modification to match your Teensy's connection port.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/smartmatrix.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  rgb_dmd: smartmatrix\ndisplays:\n  window:  # on screen window\n    width: 600\n    height: 200\n  dmd:  # source display for the DMD\n    width: 128\n    height: 32\n    default: true\n    round_anchor_x: left\nwindow:\n  width: 600\n  height: 200\n  title: Mission Pinball Framework\nsmartmatrix:\n  smartmatrix_1:\n    port: com5  # this will most likely be a different port for you\n    baud: 2500000\n    old_cookie: false\nrgb_dmds:\n  smartmatrix_1:\n    brightness: .2\nslides:\n  window_slide_1:  # slide we'll show in the on-screen window\n    - type: display  # this widget shows the DMD content in this slide too\n      effects:\n        - type: color_dmd\n      width: 512\n      height: 128\n    - type: text\n      text: MISSION PINBALL FRAMEWORK\n      anchor_y: top\n      y: top-3\n      font_size: 30\n      color: white\n    - type: rectangle\n      width: 514\n      height: 130\n      color: 444444\n  dmd_slide_1:  # slide we'll show on the physical DMD\n    - type: text\n      text: IT WORKS!\n      font_size: 30\n      color: red\nslide_player:\n  init_done:\n    window_slide_1:\n      target: window\n    dmd_slide_1:\n      target: dmd\n```\n\n----------------------------------------\n\nTITLE: Configuring coil number for PKONE Extension Board\nDESCRIPTION: This snippet shows how to configure the `number` setting for a coil connected to a PKONE Extension board. The `number` specifies the board's Address ID in the PKONE chain and the coil/driver output number (1-10). The Extension board Address ID switches can be set from 0 to 7.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/drivers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  my_coil:\n    number: 0-1    # Extension board with Address ID 0, coil/driver 1\n  some_other_coil:\n    number: 2-10    # Extension board with Address ID 2, coil/driver 10\n```\n\n----------------------------------------\n\nTITLE: Getting Hardware Switch States (OPP)\nDESCRIPTION: Retrieves the initial hardware switch states from the OPP hardware. This method is responsible for reading the current state of all switches and converting them from active low to active high logic.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nget_hw_switch_states()\n```\n\n----------------------------------------\n\nTITLE: Static Variable Player Configuration YAML\nDESCRIPTION: This snippet shows an example of a static `variable_player` section where the score is hardcoded to a fixed value (100000). This approach lacks dynamic adjustment during runtime.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/dynamic_values.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  shot_jackpot_hit:\n    score: 100000\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.award() - Python\nDESCRIPTION: Immediately awards an extra ball, first checking that the limits of the max extra balls have not been exceeded and that this group is enabled. `posted_unlit_events` dictates whether unlit extra ball events are posted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\naward(posted_unlit_events=False)\n```\n\n----------------------------------------\n\nTITLE: Enabling Plugins for Testing in Python\nDESCRIPTION: This code snippet shows how to override the `get_enable_plugins` method to enable MPF plugins for a test class. This allows tests to verify the behavior of the system with plugins enabled.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef get_enable_plugins(self):\n  return True\n```\n\n----------------------------------------\n\nTITLE: Monitor Switches MPF\nDESCRIPTION: Monitors switch changes and prints them to the console until Ctrl+c is pressed. Useful for debugging switch behavior.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/service_cli.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nmonitor_switches\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.raise_config_error() - Python\nDESCRIPTION: Raise a ConfigFileError exception.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nraise_config_error(msg, error_no, *, context=None) → NoReturn\n```\n\n----------------------------------------\n\nTITLE: Running MPF with the VPX command-line option\nDESCRIPTION: This command-line option starts MPF with the `--vpx` flag, which tells MPF to use the virtual pinball platform for hardware emulation, even if physical hardware is also configured. It's similar to the `-X` option.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/virtual/virtual_pinball_vpx.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmpf both --vpx\n```\n\n----------------------------------------\n\nTITLE: Initializing Trinamics Platform - Python\nDESCRIPTION: This snippet illustrates the `initialize` method, responsible for initializing the Trinamics Step Rocker platform. This involves setting up the necessary resources and establishing communication with the hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/trinamics_steprocker.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ninitialize()\n```\n\n----------------------------------------\n\nTITLE: Assert Warns with Regex - Python\nDESCRIPTION: Asserts that a warning of the expected type is triggered and its message matches the given regular expression. Basic functionality is similar to assertWarns() with the addition that only warnings whose messages also match the regular expression are considered successful matches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n`assertWarnsRegex(expected_warning, expected_regex, *args, **kwargs)`\n```\n\n----------------------------------------\n\nTITLE: Configure Servo (FAST)\nDESCRIPTION: This method configures a servo connected to the FAST controller.  It takes the servo number as input and returns a `FastServo` object.\n\nParameters:\n* number: Number of servo\n\nReturns: Servo object.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/fast.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_servo(number: str) -> mpf.platforms.fast.fast_servo.FastServo\n```\n\n----------------------------------------\n\nTITLE: Format Log Line - Python\nDESCRIPTION: Formats a log line with a log link and context information for debugging and error tracking.  It takes the message, context, and error number as input and returns a formatted string.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestDataManager.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef format_log_line(msg, context, error_no) -> str:\n    Return a formatted log line with log link and context.\n```\n\n----------------------------------------\n\nTITLE: Get Status of Solenoid Command (0x14)\nDESCRIPTION: This command retrieves the status of a solenoid. The payload is the solenoid index. The response indicates whether the solenoid is off, on, or non-existent.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_21\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tDescription\n1\t1\tIndex `c` of the solenoid to query\n```\n\n----------------------------------------\n\nTITLE: Segment Display Emulator Widget Example Configuration (YAML)\nDESCRIPTION: This YAML snippet configures a segment display emulator widget named 'display1'. It sets various properties, including the character count, spacing, slant angle, segment dimensions, colors, beveling, and the initial text to 'HELLO'. It also specifies the width, height, and vertical position (y) of the widget.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/segment_display_emulator/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nslide_player:\n  mc_ready:\n    display_slide:\n      - type: segment_display_emulator\n        name: display1\n        character_count: 7\n        character_slant_angle: 0\n        character_spacing: 20\n        segment_width: 0.11\n        segment_interval: 0.04\n        segment_off_color: 4b4c4a30\n        segment_on_color: fe961bff\n        side_bevel_enabled: true\n        dot_enabled: true\n        comma_enabled: true\n        text: \"HELLO\"\n        width: 600\n        height: 150\n        y: 100\n```\n\n----------------------------------------\n\nTITLE: Drain One Ball - Python\nDESCRIPTION: Drains a single ball from play. This function may need to be called multiple times if multiple balls are in play.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n`drain_one_ball()`\n```\n\n----------------------------------------\n\nTITLE: Advancing Time and Running Simulation in Python\nDESCRIPTION: The `advance_time_and_run()` method advances the test clock by a specified delta (in seconds), executing any scheduled events or callbacks. This allows for simulating the passage of time and testing time-dependent game logic, such as delays and timers. The clock advances in small steps to accommodate scheduled events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nself.advance_time_and_run(10)\n```\n\n----------------------------------------\n\nTITLE: Install apigpio Extension\nDESCRIPTION: This command installs the `apigpio_mpf` extension using pip, which is required to use the RPi platform with MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/rpi.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip3 install apigpio_mpf\n```\n\n----------------------------------------\n\nTITLE: Accessing Diverters\nDESCRIPTION: This snippet shows how to access diverters in MPF using the `self.machine.diverters` collection. You can access them by name as attributes or dictionary keys.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/diverters.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.diverters.foo\nself.machine.diverters['foo']\n```\n\n----------------------------------------\n\nTITLE: Configure Gadget Mode with Imported Config Files\nDESCRIPTION: This YAML configuration defines the `gadget` mode in MPF, including specifying imported config files for logic blocks, event player, show player, and variable player functionalities. It sets the mode to start when the ball starts (`ball_started`) and assigns it a priority of 500, ensuring it runs with a high priority that can be superseded by other modes if necessary.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: gadget\nconfig:\n  - logic_blocks.yaml\n  - event_player.yaml\n  - show_player.yaml\n  - variable_player.yaml\n\nmode:\n  #this mode starts when the ball starts\n  start_events: ball_started\n\n  priority: 500\n```\n\n----------------------------------------\n\nTITLE: Defining the Default Playfield in MPF\nDESCRIPTION: This snippet defines the default playfield. It configures the `default_source_device` to be `bd_plunger_lane` which is required for the playfield to function. The `tags: default` setting ensures that this playfield is used as the primary playfield in the game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_multiple_switches.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nplayfields:\n  playfield:\n    default_source_device: bd_plunger_lane\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Complete Example Code in Python\nDESCRIPTION: This Python code represents the complete example of the custom game mode class `MyGameName` with the overriden `_start_ball()` function. It utilizes the race condition and selects the ball_device based on whichever button was pressed first.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/dual_launch.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n##! code: modes/game/code/game.py\nfrom mpf.modes.game.code.game import Game\nfrom mpf.core.utility_functions import Util\n\nclass MyGameName(Game):\n  def __init__(self, *arg, **kwargs):\n     super().__init__(*arg, **kwargs)\n     self.log.debug(\"MyGameName init\")\n\n  async def _start_ball(self, is_extra_ball=False):\n     \"\"\"Perform ball start procedure.\n\n     Note this method is called for each ball that starts, even if it's\n     after a Shoot Again scenario for the same player.\n\n     Posts a queue event called *ball_starting*, giving other modules the\n     opportunity to do things before the ball actually starts. Once that\n     event is clear, this method calls :meth:`ball_started`.\n     \"\"\"\n     event_args = {\n         \"player\": self.player.number,\n         \"ball\": self.player.ball,\n```\n\n----------------------------------------\n\nTITLE: Accessing Timers in MPF (Python)\nDESCRIPTION: Demonstrates how to access a timer device within the Mission Pinball Framework (MPF) using the `self.machine.timers` collection.  The timer can be accessed either as an attribute or as a dictionary key. Assumes that the timer 'foo' has been configured in the machine configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/timers.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.timers.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.timers['foo']\n```\n\n----------------------------------------\n\nTITLE: Accessing DMDs in Code (MPF)\nDESCRIPTION: Explains how to access DMD devices within the Mission Pinball Framework (MPF) using the `self.machine.dmds` collection. Demonstrates accessing a DMD named \"foo\" using both attribute and dictionary access.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/dmds.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.dmds.foo\nself.machine.dmds['foo']\n```\n\n----------------------------------------\n\nTITLE: blinkenlight_player: Example Show Configuration\nDESCRIPTION: Illustrates how to add colors to blinkenlights within a show file using the `blinkenlights` section. Includes an example of both the full and express configurations.  Dependencies: None. Expected Input: Execution of the show file. Expected Output: Changes to the blinkenlight's color during the specified time.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/blinkenlight_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: test\n- time: 0\n  blinkenlights:\n    my_blinkenlight1:\n      action: add\n      color: blue\n      key: blue_color\n    my_blinkenlight2: purple\n```\n\n----------------------------------------\n\nTITLE: Clearing a Boot Hold in MPF (Python)\nDESCRIPTION: This snippet shows how to clear a boot hold that was previously registered. The `clear_boot_hold` method takes the name of the hold as input and releases the system, allowing the boot process to continue.  This is crucial for managing the initialization sequence and ensuring dependencies are met before the system starts operating.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/machine.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n`clear_boot_hold(hold: str) → None`\n\nClear a boot hold.\n```\n\n----------------------------------------\n\nTITLE: Clearing All Delays (Python)\nDESCRIPTION: Removes all delays associated with the DelayManager. This can be useful when cleaning up resources or resetting the state of a module. The `clear` method removes all scheduled callbacks and prevents them from being executed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclear() -> None\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging\nDESCRIPTION: This code defines the `configure_logging` method, which configures the logging level for the console and file. It takes parameters for the logger name, console level, file level, and base URL for docs links in exceptions. Valid options for console_level and file_level are \"none\", \"basic\", or \"full\".\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef configure_logging(logger: str, console_level: str = 'basic', file_level: str = 'basic', url_base=None):\n    \"\"\"Configure logging.\n\n    Parameters:\n\n    * **logger** – The string name of the logger to use.\n    * **console_level** – The level of logging for the console. Valid options are “none”, “basic”, or “full”.\n    * **file_level** – The level of logging for the console. Valid options are “none”, “basic”, or “full”.\n    * **url_base** – Base URL for docs links in exceptions.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Slide Configuration with Overlapping Widgets\nDESCRIPTION: This YAML snippet configures a slide named `3_widgets` containing three text widgets. The widgets overlap due to their y positions, and their order in the configuration determines their z-order (widget3.1 on top, then widget3.2, then widget3.3).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/layers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  3_widgets:\n    - type: text\n      text: widget3.1\n      color: red\n      font_size: 80\n      y: 40%\n    - type: text\n      text: widget3.2\n      color: orange\n      font_size: 80\n      y: 50%\n    - type: text\n      text: widget3.3\n      color: violet\n      font_size: 80\n      y: 60%\n```\n\n----------------------------------------\n\nTITLE: Run Machine Loop (Python)\nDESCRIPTION: Starts the main machine run loop, which handles event processing, hardware interactions, and game logic execution.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nrun() → None\n\nStart the main machine run loop.\n```\n\n----------------------------------------\n\nTITLE: Testing Slide Visibility with Assertions\nDESCRIPTION: This snippet shows how to write a test assertion in the MPF test environment to verify that the `attract_started` slide is displayed on top. This assertion is designed to confirm that a certain slide is active and visible during the game's execution as part of the overall automated test suite.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/16_attract_mode_show.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! test\n#! assert_slide_on_top attract_started\n```\n\n----------------------------------------\n\nTITLE: Finding COM Ports on Mac/Linux (Bash)\nDESCRIPTION: This snippet shows the command to list all tty devices, which is helpful for identifying the COM ports assigned to the FAST Pinball controller on Mac or Linux systems. It filters the devices by name starting with \"tty\".\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/config.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nls /dev/tty*\n```\n\n----------------------------------------\n\nTITLE: Starting the MPF service CLI\nDESCRIPTION: This command starts the interactive service CLI, which allows you to interact with the MPF game engine while it is running. It requires the game engine to be started separately.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ mpf service\n```\n\n----------------------------------------\n\nTITLE: Show Player with Custom Keys and Tokens YAML\nDESCRIPTION: This snippet shows how to play multiple instances of the same show with distinct keys.  It uses 'show_tokens' to dynamically update the show with different LED settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/show_player.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nshow_player:\n  start_my_show1:\n    your_show_name:\n      action: play\n      key: show1\n      show_tokens:\n        leds: my_led1\n  start_my_show2:\n    your_show_name:\n      action: play\n      key: show2\n      show_tokens:\n        leds: my_led2\n  stop_my_show1:\n    show1: stop\n  stop_my_show2:\n    show2: stop\n```\n\n----------------------------------------\n\nTITLE: Flipper Device Configuration Example (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how a flipper device references a switch and a coil. It showcases the basic structure for defining switches, coils, and a flipper with their respective properties. This example highlights the context where the CFE-ConfigValidator-6 error might occur if any of the referenced devices (s_flipper_left, c_flipper_left) are missing or misspelled.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-ConfigValidator-6.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_flipper_left:\n    number:\ncoils:\n  c_flipper_left:\n    number:\nflippers:\n  left_flipper:\n    main_coil: c_flipper_left\n    activation_switch: s_flipper_left\n```\n\n----------------------------------------\n\nTITLE: Using Text-to-Speech on LISY via MPF\nDESCRIPTION: This snippet demonstrates using LISY's text-to-speech functionality.  It maps an event to trigger the `text_to_speech` action with a specified text value. Requires LISY hardware with text-to-speech capabilities.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/sound.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhardware_sound_player:\n  event_to_play_text:\n    text:\n      action: text_to_speech\n      value: \"Hello MPF\"\n      platform_options:\n        loop: false\n        no_cache: true\n```\n\n----------------------------------------\n\nTITLE: Registering a Boot Hold in MPF (Python)\nDESCRIPTION: This code snippet shows how to register a boot hold in MPF. Boot holds are used to prevent MPF from starting until certain initialization steps are complete. The `register_boot_hold` method takes a string representing the hold as input and prevents the system from fully booting until the hold is cleared using `clear_boot_hold`. This ensures that critical initialization tasks are finished before the machine starts operating.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/machine.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n`register_boot_hold(hold: str) → None`\n\nRegister a boot hold.\n```\n\n----------------------------------------\n\nTITLE: Cloning MPF Examples\nDESCRIPTION: This snippet creates a directory called `mpf` in the home directory, navigates into it, and clones the `mpf-examples` repository from GitHub.  These are sample MPF configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\ncd ~\nmkdir mpf\ncd mpf\ngit clone https://github.com/missionpinball/mpf-examples\n```\n\n----------------------------------------\n\nTITLE: Installing MPF-Monitor\nDESCRIPTION: This snippet installs the `mpf-monitor` package using pip.  This is the diagnostic tool for MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\npip install mpf-monitor\n```\n\n----------------------------------------\n\nTITLE: Displaying Slides on Smaller Displays in MPF (YAML)\nDESCRIPTION: This YAML configuration extends the previous example by adding four new slides (slide_1, slide_2, slide_3, and slide_4), each with different content.  The `slide_player` section is modified to show each of these slides on one of the four smaller displays when the media controller is ready. Specifically, slide_1 is shown on `upper_left`, slide_2 on `upper_right`, slide_3 on `lower_left`, and slide_4 on `lower_right`.  This demonstrates how to independently control the content of each quadrant in the split-screen layout.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/split_screen.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nwindow:\n  width: 1280\n  height: 720\n  resizable: false\n  fullscreen: false\n  borderless: true\n  exit_on_escape: true\ndisplays:\n  window:\n    width: 1280\n    height: 720\n  upper_left:\n    width: 580\n    height: 260\n  upper_right:\n    width: 580\n    height: 260\n  lower_left:\n    width: 580\n    height: 260\n  lower_right:\n    width: 580\n    height: 260\nslides:\n  layout_4_mini:\n    background_color: red\n    widgets:\n      - type: display\n        width: 580\n        height: 260\n        x: 40\n        y: 420\n        anchor_x: left\n        anchor_y: bottom\n        source_display: upper_left\n      - type: display\n        width: 580\n        height: 260\n        x: 660\n        y: 420\n        anchor_x: left\n        anchor_y: bottom\n        source_display: upper_right\n      - type: display\n        width: 580\n        height: 260\n        x: 40\n        y: 120\n        anchor_x: left\n        anchor_y: bottom\n        source_display: lower_left\n      - type: display\n        width: 580\n        height: 260\n        x: 660\n        y: 120\n        anchor_x: left\n        anchor_y: bottom\n        source_display: lower_right\n      - type: text\n        text: Split Screen Layout Example\n        y: 60\n  slide_1:\n    background_color: green\n    widgets:\n      - type: text\n        text: upper left\n  slide_2:\n    background_color: yellow\n    widgets:\n      - type: text\n        text: upper right\n      - type: ellipse\n        color: navy\n        height: 150\n        width: 350\n  slide_3:\n    widgets:\n      - type: text\n        text: lower left\n      - type: bezier\n        points: 0, 0, 100, 250, 250, 50, 400, 250\n        color: lime\n        thickness: 5\n  slide_4:\n    background_color: magenta\n    widgets:\n      - type: text\n        text: lower right\n        font_size: 40\nslide_player:\n  mc_ready:\n    layout_4_mini:\n      target: window\n    slide_1:\n      target: upper_left\n    slide_2:\n      target: upper_right\n    slide_3:\n      target: lower_left\n    slide_4:\n      target: lower_right\n```\n\n----------------------------------------\n\nTITLE: Define Diverter - MPF (YAML)\nDESCRIPTION: This snippet defines the diverter itself. The `activation_coil` specifies the dual wound coil to use. `type: hold` configures a hold type diverter. `activation_time` sets the hold duration. `activation_switches` define the switches that trigger the diverter. `enable_events` and `disable_events` set events to enable and disable the diverter respectively.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/diverters/dual_coil_diverter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndiverters:\n  ramp_diverter:\n    activation_coil: c_diverter_dualcoil\n    type: hold\n    activation_time: .5s\n    activation_switches: s_r_rampexit, s_l_rampexit\n    enable_events: ball_started\n    disable_events: ball_ended\n```\n\n----------------------------------------\n\nTITLE: Playing Shows in a Show with YAML\nDESCRIPTION: This example demonstrates how to play a show named `attract_show_collectlights` twice, each time with a different color token (blue and red). It configures the duration, loops, and speed for each show instance, using the `show_tokens` parameter to change the color.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/shows_in_shows.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n##! show: my_show\n- duration: 3s\n  shows:\n    attract_show_collectlights:\n      loops: 1\n      speed: 10\n      show_tokens:\n        color: blue\n- duration: 3s\n  shows:\n    attract_show_collectlights:\n      loops: 1\n      speed: 10\n      show_tokens:\n        color: red\n```\n\n----------------------------------------\n\nTITLE: Reset Another Drop Target Bank with Delays (YAML)\nDESCRIPTION: This snippet shows the reset events with delay for another drop target bank. It complements the previous snippet and together, they demonstrate how different delays on different devices can create a specific sequence of actions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/device_control_events.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreset_events:\n    ball_starting: 0.25s\n    collect_special: 1s\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pip and Setuptools\nDESCRIPTION: This snippet upgrades pip and setuptools to the latest versions using pip3. This ensures that you have the latest features and bug fixes for package installation and management.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\npip3 install pip setuptools --upgrade\n```\n\n----------------------------------------\n\nTITLE: Enabling Debounce for a Switch with P-ROC in MPF (YAML)\nDESCRIPTION: This snippet shows how to explicitly enable debouncing for a specific switch using the `debounce: normal` setting in the machine configuration file.  This is also the default behavior of the P-ROC so it's usually not needed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/switches_p_roc.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_switch:\n    number: 0/0\n    debounce: normal\n```\n\n----------------------------------------\n\nTITLE: Stop Machine (Python)\nDESCRIPTION: Performs a graceful exit of MPF, stopping the main loop and releasing resources.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nstop(reason=None, **kwargs) → None\n\nPerform a graceful exit of MPF.\n```\n\n----------------------------------------\n\nTITLE: Configuring a Stepper (MPF, Trinamics)\nDESCRIPTION: This method configures a smart stepper device within the Trinamics Step Rocker platform. It takes the stepper's number as a string and a configuration dictionary as input, and returns a `TrinamicsTMCLStepper` object. The configuration dictionary dictates the behavior of the stepper.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/trinamics_steprocker.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure_stepper(number: str, config: dict) → mpf.platforms.trinamics_steprocker.TrinamicsTMCLStepper\n```\n\n----------------------------------------\n\nTITLE: Testing Counter Logic and Events in MPF (Text)\nDESCRIPTION: This test snippet verifies the behavior of the 'test_counter' defined in the previous YAML snippet. It simulates a sequence of events ('test_event', 'count_up') and asserts that the conditional events ('count_above_one', 'count_completed') are triggered correctly based on the counter's state. The tests check the counter's value and completion status at various stages.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/counters.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n##! test\n#! start_game\n#! start_mode my_mode\n#! mock_event count_above_one\n#! mock_event count_completed\n#! post test_event\n#! assert_event_not_called count_above_one\n#! post count_up\n#! assert_int_condition 1 device.counters.test_counter.value\n#! post test_event\n#! assert_event_not_called count_above_one\n#! post count_up\n#! assert_int_condition 2 device.counters.test_counter.value\n#! assert_bool_condition False device.counters.test_counter.completed\n#! post test_event\n#! assert_event_called count_above_one\n#! assert_event_not_called count_completed\n#! post count_up\n#! assert_int_condition 3 device.counters.test_counter.value\n#! assert_bool_condition True device.counters.test_counter.completed\n#! post test_event\n#! assert_event_called count_completed\n```\n\n----------------------------------------\n\nTITLE: Complete Flipper Configuration YAML\nDESCRIPTION: This complete example shows the combined configuration for single-wound flippers, including switch definitions, coil definitions, and flipper mechanism definitions with auto-enable. This demonstrates the final state of the configuration file after following all the steps in the guide. It includes switch definitions, coil definitions with `allow_enable` and `default_hold_power`, and flipper definitions linking coils and switches with the `enable_events` setting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/single_wound.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nswitches:\n  s_left_flipper:\n    number: 1\n    tags: left_flipper\n  s_right_flipper:\n    number: 2\n    tags: right_flipper\ncoils:\n  c_flipper_left:\n    number: 0\n    allow_enable: true\n    default_hold_power: 0.125\n  c_flipper_right:\n    number: 1\n    allow_enable: true\n    default_hold_power: 0.125\nflippers:\n  left_flipper:\n    main_coil: c_flipper_left\n    activation_switch: s_left_flipper\n    enable_events: machine_reset_phase_3\n  right_flipper:\n    main_coil: c_flipper_right\n    activation_switch: s_right_flipper\n    enable_events: machine_reset_phase_3\n```\n\n----------------------------------------\n\nTITLE: Accessing show_queues in code - MPF\nDESCRIPTION: This snippet describes how to access show queues within the Mission Pinball Framework (MPF) code.  It shows how to retrieve a show queue by its name using `self.machine.show_queues.foo` or `self.machine.show_queues['foo']`. The collection of show queues is available at `self.machine.show_queues`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/show_queues.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.show_queues.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.show_queues['foo']\n```\n\n----------------------------------------\n\nTITLE: Text Widget Font Name YAML Configuration\nDESCRIPTION: This code snippet demonstrates how to specify the font name for a text widget in MPF-MC.  The font name should be the name of the font without the file extension.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/text/index.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfont_name: arial\n```\n\n----------------------------------------\n\nTITLE: Accessing Servos in MPF (Python)\nDESCRIPTION: This code snippet illustrates how to access a servo device named 'foo' within the MPF environment using the `self.machine.servos` collection. It shows both attribute-style and dictionary-style access methods. This assumes that a servo named 'foo' has been configured in the machine's configuration files.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/servos.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.servos.foo\nself.machine.servos['foo']\n```\n\n----------------------------------------\n\nTITLE: Configure RGB DMD in MPF\nDESCRIPTION: This YAML configuration sets up the rpi_dmd platform, configures the DMD parameters (cols, rows, gpio_slowdown, pwm_lsb_nanoseconds), defines window and dmd displays, configures rgb_dmds with a source display, defines slides to display content, and creates a slide_player for initializing the slides on the window and dmd targets.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/rpi_dmd.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: rpi_dmd\nrpi_dmd:\n  cols: 32\n  rows: 32\n  gpio_slowdown: 2\n  pwm_lsb_nanoseconds: 300\nwindow:\n  width: 600\n  height: 200\n  title: Mission Pinball Framework\ndisplays:\n  window:   # on screen window\n    width: 600\n    height: 200\n  dmd:   # source display for the DMD\n    width: 32\n    height: 32\n    default: true\n    round_anchor_x: left\nrgb_dmds:\n  rpi_dmd:\n    source_display: dmd\nslides:\n  window_slide_1:   # slide we'll show in the on-screen window\n    - type: display   # this widget shows the DMD content in this slide too\n      effects:\n        - type: color_dmd\n      width: 512\n      height: 128\n    - type: text\n      text: MISSION PINBALL FRAMEWORK\n      anchor_y: top\n      y: top-3\n      font_size: 30\n      color: white\n    - type: rectangle\n      width: 514\n      height: 130\n      color: 444444\n  dmd_slide_1:   # slide we'll show on the physical DMD\n    - type: text\n      text: IT WORKS!\n      font_size: 30\n      color: red\nslide_player:\n  init_done:\n    window_slide_1:\n      target: window\n    dmd_slide_1:\n      target: dmd\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on Windows (Command Prompt)\nDESCRIPTION: Activates the virtual environment on Windows using the Command Prompt.  This script sets environment variables to use the Python interpreter and packages within the virtual environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-environments.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n> mpfenv/Scripts/activate.bat\n```\n\n----------------------------------------\n\nTITLE: Configuring Ball Count Delay in Milliseconds (YAML)\nDESCRIPTION: These snippets demonstrate how to configure the `ball_count_delay` setting in a ball device using milliseconds. This setting specifies a delay in milliseconds. Variations in spacing and capitalization of the 'ms' or 'msec' unit are shown. Also shown is the case where no unit is specified, in which case MPF defaults to ms for ball_count_delay.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/time_strings.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nball_count_delay: 500ms\n```\n\nLANGUAGE: YAML\nCODE:\n```\nball_count_delay: 500 MS\n```\n\nLANGUAGE: YAML\nCODE:\n```\nball_count_delay: 500msec\n```\n\nLANGUAGE: YAML\nCODE:\n```\nball_count_delay: 500\n```\n\n----------------------------------------\n\nTITLE: Posting Events with Parameters in Python\nDESCRIPTION: This snippet demonstrates how to post an MPF event with keyword arguments (parameters) using `self.post_event_with_params()`. This allows you to simulate events with data associated with them, which is important for testing logic that depends on event parameters.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nself.post_event('jackpot', count=1, first_time=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ball Hold for Mystery Award in MPF\nDESCRIPTION: This snippet configures a ball hold using a scoop to hold a ball during a mystery award animation. It defines when the ball hold is enabled and disabled, and specifies events to release the ball at the end of the award. It relies on ball_devices and event_player configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/mystery_award.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nevent_player:\n  upper_lanes_complete: enable_mystery\n\nball_holds:\n  mystery_scoop:\n    balls_to_hold: 1\n    hold_devices: bd_low_scoop\n    enable_events: enable_mystery\n    disable_events: end_mystery, multiball_active\n    release_one_events: end_mystery\n```\n\n----------------------------------------\n\nTITLE: Add Default Playfield YAML\nDESCRIPTION: This code snippet shows how to add a default playfield to the MPF configuration. The `default_source_device` setting specifies the device that feeds balls to the playfield, which is set to `bd_plunger` (the plunger lane). The `tags: default` setting specifies that this is the default playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_opto.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Starting the MPF media controller\nDESCRIPTION: This command starts only the MPF media controller. It requires the MPF game engine to be running separately.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ mpf mc\n```\n\n----------------------------------------\n\nTITLE: Configuring Serial LEDs in lights section YAML\nDESCRIPTION: This snippet configures serial LEDs in the `lights` section. It defines the `start_channel`, `type` and `subtype` of several LEDs. The `previous` setting links the LEDs together.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/leds.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_serial_chain_0_first:\n    start_channel: 0-100\n    type: rgb\n    subtype: led\n  l_serial_chain_0_second:\n    previous: l_serial_chain_0_first\n    type: rgb\n    subtype: led\n  l_serial_chain_1_first:\n    start_channel: 4-250\n    type: rgb\n    subtype: led\n  l_serial_chain_2_first:\n    start_channel: 4-400\n    type: rgb\n    subtype: led\n```\n\n----------------------------------------\n\nTITLE: Configuring Switches in YAML\nDESCRIPTION: This snippet demonstrates how to configure switches in MPF using YAML, where each switch's number is determined by its column and row position, prefixed with 'S'. The number parameter follows the format S<column><row>, and each entry includes a descriptive label and relevant tags. Tags such as \"playfield_active\" are assigned to categorize the switches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/snux.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  left_outlane:\n    number: S24\n    label: Left Outlane\n    tags: playfield_active\n  left_inlane:\n    number: S25\n    label: Left Inlane\n    tags: playfield_active\n  right_inlane:\n    number: S26\n    label: Right Inlane\n    tags: playfield_active\n  right_outlane:\n    number: S27\n    label: Right Outlane\n    tags: playfield_active\n```\n\n----------------------------------------\n\nTITLE: Getting Config File Path in Python\nDESCRIPTION: This code snippet illustrates how to override the `get_config_file` method in a test class to specify the machine configuration file to be used for the tests.  This ensures the test uses the correct configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef get_config_file(self):\n  return 'my_config.yaml'\n```\n\n----------------------------------------\n\nTITLE: Sending BCP Commands (Python)\nDESCRIPTION: Explains how to send commands using the BCP module's `send` method. It emulates legacy send functionality. The method accepts a BCP command string and keyword arguments as data to be sent.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/bcp.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsend(bcp_command, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Configure Driver on System11\nDESCRIPTION: Configures a driver on the System11 overlay platform. This method takes a driver configuration, number, and platform-specific settings to properly set up the driver within the MPF environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/system11.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef configure_driver(config: mpf.core.platform.DriverConfig, number: str, platform_settings: dict):\n    Configure a driver on the system11 overlay.\n\n    Parameters:\n\n    * **config** – Driver config dict\n    * **number** – Number of the driver.\n    * **platform_settings** – Platform specific config.\n```\n\n----------------------------------------\n\nTITLE: Adding Bonus Mode to Machine-Wide Config (YAML)\nDESCRIPTION: This snippet demonstrates how to add the 'bonus' mode to the list of active modes in the machine-wide configuration file (config.yaml). This ensures that the bonus mode is loaded and active during gameplay.\n\nRequires: The main machine-wide configuration file (config.yaml) must exist.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/bonus/configuring_bonus.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# this is your machine-wide config.yaml\n\nmodes:\n  - base\n  - jukebox_mode\n  - skill_shot\n  - jukebox_hurryup\n  - managers_choice_base\n  - managers_choice_multiball\n  - managers_choice_timed_mode\n  - managers_choice_lit\n  - mystery_lit\n  - wizard_advance_lit\n  - mission_rotator\n  - light_mission_select\n  - play_poker\n  - money_bags\n  - world_tour\n  - music_awards\n  - jukebox_two_ball\n  - bonus                  # just add bonus to the list of existing modes\n```\n\n----------------------------------------\n\nTITLE: Running MPF-MC Unit Tests (Python 3)\nDESCRIPTION: This command runs the MPF-MC unit tests (using Python 3) to ensure that changes have not introduced any regressions. It utilizes the unittest module to discover and execute all tests within the specified directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/about/contributing_to_mpf.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m unittest discover -s mpfmc.tests\n```\n\n----------------------------------------\n\nTITLE: Clearing a Hardware Rule (FAST)\nDESCRIPTION: This method removes the linkage between a switch and a coil, effectively disabling any hardware rule that connects them. It's useful for scenarios like disabling flippers during specific game states.\n\nParameters:\n* switch: The switch whose rule you want to clear.\n* coil: The coil whose rule you want to clear.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/fast.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclear_hw_rule(switch, coil)\n```\n\n----------------------------------------\n\nTITLE: MPF Single File Test Structure in YAML\nDESCRIPTION: This YAML snippet outlines the structure of a single file test for MPF. It includes machine-wide configuration, mode configurations, shows, and test assertions at the end. The test assertions use commands defined in `MpfDocTestCase`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/test.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# your machine-wide config here. That is what is normally in config/config.yaml.\n\n# you can have a few modes\n##! mode: some_mode\n# mode config here\n\n# you can have a few modes\n##! mode: another_mode\n# mode config here\n\n# additionally you can have separate shows\n##! show: some_show\n# show here\n\n# now you can add a test\n##! test\n#! start_game\n# run the machine for 1 virtual second\n#! advance_time_and_run 1\n# post an event\n#! post some_event\n```\n\n----------------------------------------\n\nTITLE: Run MPF with both UI and hardware interfaces (doscon)\nDESCRIPTION: This command demonstrates how to run MPF with both the user interface (UI) and the hardware interface. This allows you to visualize the game state and interact with the hardware simultaneously, which is useful for testing and debugging. It assumes you are in the `mpf-examples/tutorial` directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/7_trough.md#_snippet_2\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial>mpf both\n```\n\n----------------------------------------\n\nTITLE: Slide Player Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the slide player in MPF to display different slides based on game events. It shows how to define slides for `mode_base_started` and `skillshot_hit` events, referencing scene files by their filenames and removing slides.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/slides.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    slide_player:\n        mode_base_started: base\n        skillshot_hit:\n            skillshot_overlay:\n                action: remove\n```\n\n----------------------------------------\n\nTITLE: Set Default Platform (Python)\nDESCRIPTION: Sets the default hardware platform to be used if a device doesn't have a specific platform assigned.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nset_default_platform(name: str) → None\n\nSet the default platform.\n\nIt is used if a device class-specific or device-specific platform is not specified.\n\nParameters:\n\n* **name** – String name of the platform to set to default.\n```\n\n----------------------------------------\n\nTITLE: Initializing Displays and Window Configuration in MPF (YAML)\nDESCRIPTION: This YAML configuration defines the window and display settings for an MPF project, creating a main window and four smaller displays to be used as quadrants in a split-screen layout. It sets the window dimensions, resizability, fullscreen mode, and exit behavior, along with the dimensions for each of the five displays: the main window, and the four quadrants: upper_left, upper_right, lower_left, and lower_right.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/split_screen.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nwindow:\n  width: 1280\n  height: 720\n  resizable: false\n  fullscreen: false\n  borderless: true\n  exit_on_escape: true\ndisplays:\n  window:\n    width: 1280\n    height: 720\n  upper_left:\n    width: 580\n    height: 260\n  upper_right:\n    width: 580\n    height: 260\n  lower_left:\n    width: 580\n    height: 260\n  lower_right:\n    width: 580\n    height: 260\n```\n\n----------------------------------------\n\nTITLE: Accessing Hardware Sound Player in MPF\nDESCRIPTION: The `hardware_sound_player` is available via `self.machine.hardware_sound_player`. This allows you to interact with the sound system and play sounds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/hardware_sound_player.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Accessing StepStick Platform in MPF (Python)\nDESCRIPTION: Shows how to access the StepStick platform within the MPF environment using the `self.machine.hardware_platforms` dictionary. This allows interacting with and configuring the StepStick hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/step_stick.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['step_stick']\n```\n\n----------------------------------------\n\nTITLE: Drain All Balls - Python\nDESCRIPTION: Drains all balls currently in play. This function is typically used at the end of a test to ensure the machine returns to a known state.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n`drain_all_balls()`\n```\n\n----------------------------------------\n\nTITLE: Adding Players to Game with add_player() in Python\nDESCRIPTION: The `add_player()` method adds a player to the current game by simulating a start switch activation. It verifies that the player count increments by one, allowing for testing multi-player game scenarios. This method simulates a `s_start` switch hit and release event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nself.start_game()\nself.add_player()\nself.add_player()\n```\n\n----------------------------------------\n\nTITLE: SpiBitBangPlatform Class Definition\nDESCRIPTION: This snippet defines the `SpiBitBangPlatform` class, which inherits from `mpf.core.platform.SwitchPlatform`. It utilizes SPI bit banging to read switch states. The class contains methods for configuring switches, retrieving switch states, initializing and reading from SPI.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spi_bit_bang.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass mpf.platforms.spi_bit_bang.SpiBitBangPlatform(machine):\n    \"\"\"Bases: mpf.core.platform.SwitchPlatform\n\n    Platform which reads switch via SPI using bit banging.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Inverting Default Platform Specification for MPF Devices\nDESCRIPTION: This snippet shows how to invert the default platform specification. The default platform is FAST, the default for lights is FadeCandy, and then it shows how to override a single device to use the FAST platform. This shows how you only have to specify a non-default platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/platform.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: fast\n  lights: fadecandy\nlights:\n  led00:\n    number: 0-0\n    platform: fast\n  led01:\n    number: 0\n```\n\n----------------------------------------\n\nTITLE: Update Python Environment - doscon\nDESCRIPTION: These commands update the Python environment by upgrading pip, setuptools, and pillow using pip. It is crucial to update these packages to ensure compatibility and avoid potential issues during MPF installation. It uses the specified python version (e.g. python3.9) for the updates.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_5\n\nLANGUAGE: doscon\nCODE:\n```\npython3.9 -m pip install --upgrade pip\n```\n\nLANGUAGE: doscon\nCODE:\n```\npython3.9 -m pip install --upgrade setuptools\n```\n\nLANGUAGE: doscon\nCODE:\n```\npython3.9 -m pip install --upgrade pillow\n```\n\n----------------------------------------\n\nTITLE: Testing Sequence Logic with Mock Events and Assertions (YAML)\nDESCRIPTION: This example demonstrates how to test a sequence logic block using mock events and assertions. It starts the game and mode, posts the required events ('shot1_hit', 'shot2_hit', 'shot3_hit') and verifies the 'value' and 'completed' properties of the sequence logic block, as well as the posting of expected events. The sequence logic block named 'test_sequence' from the previous example is being tested.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/sequences.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! test\n#! start_game\n#! start_mode my_mode\n#! mock_event shot1_was_hit\n#! mock_event shot2_was_hit\n#! mock_event shot3_was_hit\n#! mock_event sequence_completed\n#! assert_int_condition 0 device.sequences.test_sequence.value\n#! post test_event\n#! assert_event_not_called shot1_was_hit\n#! assert_event_not_called shot2_was_hit\n#! assert_event_not_called shot3_was_hit\n#! post shot1_hit\n#! assert_int_condition 1 device.sequences.test_sequence.value\n#! assert_bool_condition False device.sequences.test_sequence.completed\n#! post test_event\n#! assert_event_called shot1_was_hit\n#! assert_event_not_called shot2_was_hit\n#! assert_event_not_called shot3_was_hit\n#! assert_event_not_called sequence_completed\n#! post shot3_hit\n#! post shot2_hit\n#! post test_event\n#! assert_event_called shot1_was_hit\n#! assert_event_called shot2_was_hit\n#! assert_event_not_called shot3_was_hit\n#! assert_event_not_called sequence_completed\n#! assert_int_condition 2 device.sequences.test_sequence.value\n#! assert_bool_condition False device.sequences.test_sequence.completed\n#! post shot3_hit\n#! post test_event\n#! assert_event_called shot1_was_hit\n#! assert_event_called shot2_was_hit\n#! assert_event_called shot3_was_hit\n#! assert_event_called sequence_completed\n#! assert_int_condition 3 device.sequences.test_sequence.value\n#! assert_bool_condition True device.sequences.test_sequence.completed\n```\n\n----------------------------------------\n\nTITLE: Adding Text Widget to a Slide\nDESCRIPTION: This snippet defines a slide called `welcome_slide` with a single text widget. The widget displays the text \"PINBALL!\" with default font settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  welcome_slide:\n    widgets:\n      - type: text\n        text: PINBALL!\n```\n\n----------------------------------------\n\nTITLE: Chaining WS281X LEDs Configuration Example (YAML)\nDESCRIPTION: Demonstrates how to chain WS281X LEDs in the MPF configuration file using the `start_channel` and `previous` settings. This method allows MPF to automatically calculate the internal channel numbers, simplifying the configuration process. The `type` setting is required and specifies whether the LED is `rgb` or `rgbw`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/leds.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  led_0:\n    start_channel: 0-1-0\n    subtype: led\n    type: rgb    # will use red: 0-1-0, green: 0-1-1, blue: 0-1-2\n  led_1:\n    previous: led_0\n    subtype: led\n    type: rgbw   # will use red: 0-1-3, green: 0-1-4, blue: 0-1-5, white: 0-1-6\n  led_2:\n    previous: led_1\n    subtype: led\n    type: rgbw   # will use red: 0-1-7, green: 0-1-8, blue: 0-1-9, white: 0-1-10\n```\n\n----------------------------------------\n\nTITLE: Accessing the Match Mode\nDESCRIPTION: Shows how to access the `match` mode from within your code using `self.machine.modes.match`. This allows you to interact with the Match mode's functionality.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/match.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.modes.match\n```\n\n----------------------------------------\n\nTITLE: Run Python Unit Tests (Console)\nDESCRIPTION: This command executes the unit tests in the current directory using the Python unittest module. It will discover and run all test files starting with 'test'. It requires Python to be installed and configured in the system's PATH.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/Writing_Tests/WritingCustomTestsForYourMachine.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npython -m unittest\n```\n\n----------------------------------------\n\nTITLE: Assert Exception Regex - Python\nDESCRIPTION: This assertion verifies that a specified exception is raised, and its message matches a given regular expression.  The parameters include the expected exception class ('expected_exception') and the regular expression ('expected_regex').\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nassertRaisesRegex(expected_exception, expected_regex, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Disabling and stopping ModemManager on Ubuntu\nDESCRIPTION: These commands disable and stop the ModemManager service on Ubuntu to prevent it from interfering with OPP hardware. This is necessary if ModemManager attempts to initialize the OPP device as a modem.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/connecting.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl disable ModemManager\nsudo systemctl stop ModemManager\n```\n\n----------------------------------------\n\nTITLE: Configuring a Virtual Coil in MPF (YAML)\nDESCRIPTION: This snippet demonstrates the configuration of a virtual coil within MPF.  When using the `virtual` platform, the `number` setting can be left empty. This is useful for coils that are not physically wired but are needed for future implementation or logical purposes within the game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-coils-1.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  your_virtual_coil:\n    number:\n    platform: virtual\n```\n\n----------------------------------------\n\nTITLE: Centered and Space-Padded String - Python\nDESCRIPTION: Demonstrates centering and padding a string to a length of 10 characters with spaces using Python's format string syntax. Assumes a variable named `variable` with the value 1337.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/text_templates.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{variable:^10}\n```\n\nLANGUAGE: text\nCODE:\n```\n\"   1337   \"\n```\n\n----------------------------------------\n\nTITLE: Defining Slides and Slide Player Configuration in YAML\nDESCRIPTION: This YAML snippet configures two slides, `welcome_slide` and `attract_started`, with specific widgets like text and rectangle elements. It also defines a `slide_player` configuration, mapping game events like `init_done` and `mode_attract_started` to the corresponding slides. The slides will display \"PINBALL!\" and \"ATTRACT MODE\" respectively. The configuration is set at the machine-wide level, which means it has lower priority and can be overridden.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/16_attract_mode_show.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  welcome_slide:\n    widgets:\n      - type: text\n        text: PINBALL!\n        font_size: 50\n        color: red\n      - type: rectangle\n        width: 240\n        height: 60\n  attract_started:\n    widgets:\n      - text: ATTRACT MODE\n        type: text\n\nslide_player:\n  init_done: welcome_slide\n  mode_attract_started: attract_started\n```\n\n----------------------------------------\n\nTITLE: Using display_light_player standalone (YAML)\nDESCRIPTION: This code snippet shows how to use the `display_light_player` in a standalone configuration. It maps the `your_source_display` to all lights when the `your_event` event is triggered. The display named `your_source_display` must be defined elsewhere.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/display_light_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay_light_player:\n  your_event:\n    your_source_display:\n      lights: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Switch with Settings in MPF YAML\nDESCRIPTION: This snippet demonstrates how to define a switch in MPF's YAML configuration file, including its 'number', 'label', and 'tags' settings.  This example shows valid settings for a switch device. The snippet is written in YAML and is intended for use within an MPF configuration file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-ConfigValidator-2.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_flipper_left:\n    number: 1\n    label: My Left Flipper Switch Example\n    tags: some_custom_tag\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration - Adding a Key (YAML)\nDESCRIPTION: This snippet adds a key to the show configuration, which enables re-using the same show for multiple letters. The key is set to 'gadget_g1_hit_show', allowing the same light show to be used for different events and letters within the Gadget mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n#! show_player:\n#!   gadget_g1_complete:\n#!     light_gadget_letter:\n#!       priority: 10\n      key: gadget_g1_hit_show\n```\n\n----------------------------------------\n\nTITLE: Get Next Item\nDESCRIPTION: This method returns the next item in the randomized list.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/Randomizer.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n`get_next()`\n\nReturn next item.\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Sound Volume in MPF-MC\nDESCRIPTION: This code snippet shows how to set the volume for a specific sound file in the MPF configuration. It sets the `volume` property for the `triangle` sound to 0.85. This allows fine-tuning the volume of individual sounds for a balanced audio experience.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/basic_setup.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsounds:\n  triangle:\n    file: 22783__franciscopadilla__80-mute-triangle.wav\n    volume: 0.85\n```\n\n----------------------------------------\n\nTITLE: Running MPF with Example Configuration\nDESCRIPTION: This command line snippet shows how to run Mission Pinball Framework (MPF) with a specific example configuration located in the `mpf-examples/tutorial/step_18` folder. The `mpf both` command starts both the core MPF engine and the media controller. This allows users to test and interact with the pinball machine configuration defined in the example.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/18_shots.md#_snippet_14\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial_step_18>mpf both\n```\n\n----------------------------------------\n\nTITLE: Blacklisting cytherm module on Linux\nDESCRIPTION: This configuration snippet blacklists the `cytherm` module on Linux to prevent conflicts with OPP hardware. The snippet needs to be added to `/etc/modprobe.d/blacklist.conf` file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/connecting.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nblacklist cytherm\n```\n\n----------------------------------------\n\nTITLE: FlasherPlayer get_express_config method\nDESCRIPTION: This method parses the express configuration for the flasher player.  It takes a single `value` parameter and returns the parsed configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/flasher_player.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_express_config(value):\n    Parse express config.\n```\n\n----------------------------------------\n\nTITLE: Specifying the machine folder\nDESCRIPTION: This command shows how to specify the machine folder using an optional argument. If you do not specify the machine folder, the current folder will be assumed to be the machine folder.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/index.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ mpf game ./path/to/machine_folder -P\n```\n\n----------------------------------------\n\nTITLE: Add Jam Switch to Ball Trough YAML\nDESCRIPTION: This code snippet demonstrates how to add and configure a jam switch for a ball trough in MPF. The `jam_switch` setting specifies the switch that detects a ball jam. This allows MPF to handle situations where balls are stuck in the trough and prevent damage to the eject mechanism.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_opto.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n```\n\n----------------------------------------\n\nTITLE: Adding Credits to the Machine - Python\nDESCRIPTION: Shows how to add a single credit to the machine using the `add_credit()` method. The `price_tiering` parameter controls whether the credit is eligible for pricing tier bonuses. Default is True.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/credits.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.modes.credits.add_credit(price_tiering=True)\n```\n\n----------------------------------------\n\nTITLE: Uninstall and Reinstall MPF Packages\nDESCRIPTION: This command uninstalls MPF, MPF-MC, and MPF-Monitor using pip3, and then reinstalls the latest release versions of each. This is a troubleshooting step to resolve YAML version conflicts.  It ensures that all components are compatible versions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/pine64.md#_snippet_8\n\nLANGUAGE: doscon\nCODE:\n```\npip3 uninstall mpf mpf-mc mpf-monitor\npip3 install mpf mpf-mc mpf-monitor\n```\n\n----------------------------------------\n\nTITLE: Reset Machine (Python)\nDESCRIPTION: Resets the machine to its initial state without reloading configuration files.  This is typically called after a game ends and before attract mode begins.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nreset() → None\n\nReset the machine.\n\nThis method is safe to call. It essentially sets up everything from scratch without reloading the config files and assets from disk. This method is called after a game ends and before attract mode begins.\n```\n\n----------------------------------------\n\nTITLE: Disabling Debounce for a Switch with P-ROC in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to disable debouncing for a specific switch using the `debounce: quick` setting in the machine configuration file. This setting overrides the default debouncing behavior for the P-ROC.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/switches_p_roc.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  my_switch:\n    number: 0/0\n    debounce: quick\n```\n\n----------------------------------------\n\nTITLE: Accessing the flasher_player in MPF\nDESCRIPTION: This snippet demonstrates how to access the `flasher_player` instance within MPF code. The flasher_player is a member of the machine object and can be accessed using `self.machine.flasher_player`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/flasher_player.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.flasher_player\n```\n\n----------------------------------------\n\nTITLE: Validate Config Entry (Python)\nDESCRIPTION: This method validates a single entry within the random event player's configuration.  It checks the validity of the configuration settings for a specific event. The `settings` parameter contains the configuration settings to validate, and the `name` parameter is the name of the entry being validated.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/random_event_player.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nvalidate_config_entry(settings, name)\n```\n\n----------------------------------------\n\nTITLE: Configuring coil pulse and hold power for PKONE\nDESCRIPTION: This snippet shows how to combine `default_pulse_power` and `default_hold_power` for a coil connected to a PKONE Extension board. The coil will be fired at `default_pulse_power` for `default_pulse_ms`, then drop down to `default_hold_power` for the remainder of the time that it's on.  It requires the `number` and `default_pulse_ms` settings to also be defined.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/drivers.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil:\n    number: 1-3\n    default_pulse_ms: 30\n    default_pulse_power: 0.5\n    default_hold_power: 0.25\n```\n\n----------------------------------------\n\nTITLE: Configuring Digital Outputs for Magnet Control in MPF (YAML)\nDESCRIPTION: This configuration defines the digital outputs in MPF that control the Stern Magnet Processor Board (MPB).  Each output corresponds to a control pin (Strobe, D6, D7) on the MPB. The `enable_events` and `disable_events` define which MPF events will turn the digital output on and off, respectively.  The `number` property must be adapted to your specific platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/magnets/stern_magnet_pcb.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ndigital_outputs:\n  magnet_strobe:\n    number: 1    # number depends on your platform\n    type: driver\n    enable_events: magnet_strobe_on\n    disable_events: shutdown, magnet_strobe_off\n  magnet_d6:\n    number: 2    # number depends on your platform\n    type: driver\n    enable_events: magnet_d6_on\n    disable_events: shutdown, magnet_d6_off\n  magnet_d7:\n    number: 3    # number depends on your platform\n    type: driver\n    enable_events: magnet_d7_on\n    disable_events: shutdown, magnet_d7_off\n```\n\n----------------------------------------\n\nTITLE: Read SPI on SpiBitBangPlatform\nDESCRIPTION: This snippet shows the `read_spi` method of the `SpiBitBangPlatform` class. This method reads a specified number of bits from the SPI interface.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spi_bit_bang.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nread_spi(bits)\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration with Arbitrary Token (YAML)\nDESCRIPTION: This snippet shows how to play a show with an arbitrary token name ('corndog'). The 'show_tokens:' section maps the 'corndog' token to the value 'led_02'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  some_event:\n    flash_red:\n      loops: -1\n      show_tokens:\n        corndog: led_02\n```\n\n----------------------------------------\n\nTITLE: Accessing the Virtual Platform in MPF\nDESCRIPTION: Shows how to access the virtual hardware platform instance from within the MPF machine object.  This platform instance provides methods for interacting with simulated hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/virtual.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['virtual']\n```\n\n----------------------------------------\n\nTITLE: Assert Text Does Not Match Regex - Python\nDESCRIPTION: Fails the test if the given text matches the provided regular expression. This is useful for verifying that certain unwanted patterns are not present in the text.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n`assertNotRegex(text, unexpected_regex, msg=None)`\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Input Events in MPF\nDESCRIPTION: This YAML snippet configures an `event_player` in MPF to send the `text_input` event with different actions (`left`, `right`, `select`) based on the activation of various switches (left flipper, right flipper, start button). This allows players to navigate and select characters on the on-screen keyboard.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/mpf-text-input.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nevent_player:\n  s_flipper_left_active:\n    text_input:\n      action: left\n  s_flipper_right_active:\n    text_input:\n      action: right\n  s_start_button_active:\n    text_input:\n      action: select\n```\n\n----------------------------------------\n\nTITLE: Defining a List of Lists of Events for an Accrual in MPF (YAML)\nDESCRIPTION: This snippet shows how to define a list of lists of events for an accrual in an MPF YAML config file. The `events` setting is configured as a list where some items are single events and others are lists of events separated by commas. This configures the `my_accrual` accrual with `sw_eightball` as the first event and `drop_targets_Solids_lit_complete, drop_targets_Stripes_lit_complete` as the second, which is a list of two events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/lists.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\naccruals:\n  my_accrual:\n    events:\n      - sw_eightball     # this is the first list item\n      - drop_targets_Solids_lit_complete, drop_targets_Stripes_lit_complete     # 2nd list item, which itself has two items\n```\n\n----------------------------------------\n\nTITLE: Accessing MyPinballs Hardware Platform in MPF (Python)\nDESCRIPTION: This snippet demonstrates how to access the MyPinballs hardware platform within the MPF environment. Hardware platforms are stored in the `self.machine.hardware_platforms` dictionary. This assumes the MPF machine object is available as `self.machine`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/mypinballs.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['mypinballs']\n```\n\n----------------------------------------\n\nTITLE: Mode Selection Using Achievement Groups YAML\nDESCRIPTION: This configuration demonstrates using achievement groups to implement mode selection.  It defines achievements for left and right ramps, assigns shows to them, and sets up an achievement group that automatically selects and rotates the achievements. The start_selected_events triggers the mode starts when a scoop is hit after the achievement is selected.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/mode_selection.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n#! lights:\n#!   l_left_ramp:\n#!     number:\n#!   l_right_ramp:\n#!     number:\n##! mode: left_ramp\n# mode: left_ramp\nmode:\n  start_events: start_mode_left_ramp\n  stop_events: stop_mode_left_ramp\nevent_player:\n  left_ramp_complete: stop_mode_left_ramp, enable_qualify\n##! mode: right_ramp\n# mode: right_ramp\nmode:\n  start_events: start_mode_right_ramp\n  stop_events: stop_mode_right_ramp\nevent_player:\n  right_ramp_complete: stop_mode_right_ramp, enable_qualify\n##! mode: qualify\n# mode: qualify\nmode:\n  start_events: ball_started\nachievements:\n  left_ramp:\n#!     select_events: select_first\n    show_tokens:\n      leds: l_left_ramp\n    show_when_enabled: off\n    show_when_selected: flash\n    show_when_completed: on\n    complete_events: stop_mode_left_ramp\n    events_when_started: start_mode_left_ramp\n  right_ramp:\n    show_tokens:\n      leds: l_right_ramp\n    show_when_enabled: off\n    show_when_selected: flash\n    show_when_completed: off\n    complete_events: stop_mode_right_ramp\n    events_when_started: start_mode_right_ramp\nachievement_groups:\n  all_achievements:\n    achievements: left_ramp, right_ramp\n    auto_select: true\n    start_selected_events: hit_scoop\n    rotate_right_events: s_action_button_active\n    enable_events: enable_qualify, ball_started\n    debug: true\n#! ##! test\n#! start_game\n#! post select_first\n#! assert_mode_running qualify\n#! assert_mode_not_running left_ramp\n#! assert_mode_not_running right_ramp\n#! # select first mode\n#! post hit_scoop\n#! assert_mode_running qualify\n#! assert_mode_running left_ramp\n#! assert_mode_not_running right_ramp\n#! # end mode\n#! post left_ramp_complete\n#! assert_mode_running qualify\n#! assert_mode_not_running left_ramp\n#! assert_mode_not_running right_ramp\n#! # start the remaining one\n#! post hit_scoop\n#! assert_mode_running qualify\n#! assert_mode_running right_ramp\n#! assert_mode_not_running left_ramp\n#! stop_game\n#! # another try\n#! start_game\n#! post select_first\n#! assert_mode_running qualify\n#! assert_mode_not_running left_ramp\n#! assert_mode_not_running right_ramp\n#! # rotate\n#! post s_action_button_active\n#! advance_time_and_run 1\n#! # and start\n#! post hit_scoop\n#! assert_mode_running qualify\n#! assert_mode_not_running left_ramp\n#! assert_mode_running right_ramp\n```\n\n----------------------------------------\n\nTITLE: Snux Configuration Example (YAML)\nDESCRIPTION: This example shows how to configure the snux platform, including hardware settings, coils, and switches.  It also defines a flipper with main and hold coils linked to a switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/snux.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: virtual    # use your platform here\n  driverboards: wpc\n  coils: snux\n  switches: snux\nsystem11:\n  ac_relay_delay_ms: 75\n  ac_relay_driver: c_ac_relay\nsnux:\n  diag_led_driver: c_diag_led_driver\ncoils:\n  c_diag_led_driver:\n    number: c24\n    default_hold_power: 1.0\n  c_flipper_enable_driver:\n    number: c23\n    default_hold_power: 1.0\n  c_ac_relay:\n    number: c25\n    default_hold_power: 1.0\n  c_side_a1:\n    number: c11a\n  c_side_a2:\n    number: c12a\n    default_hold_power: 0.5\n  c_side_c1:\n    number: c11c\n  c_side_c2:\n    number: c12c\n    default_hold_power: 0.5\n  c_flipper_left_main:\n    number: FLLM\n  c_flipper_left_hold:\n    number: FLLH\n    allow_enable: true\n\nswitches:\n  s_flipper_left:\n    number: sf01\n  s_test:\n    number: s77\n\nflippers:\n  f_test_single:\n    main_coil: c_flipper_left_main\n    hold_coil: c_flipper_left_hold\n    activation_switch: s_flipper_left\n```\n\n----------------------------------------\n\nTITLE: Configuring PSU Release Wait Time in MPF\nDESCRIPTION: This configuration snippet demonstrates how to adjust the `release_wait_ms` setting within the `psus` section of the MPF configuration file.  It sets a delay of 50 milliseconds before releasing the power, potentially easing stress on a weak power supply unit. This setting defaults to 10ms and can be adjusted based on the specific PSU's requirements.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/targets/drop_targets/fixing_drop_target_reset_issues.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npsus:\n  default:\n    release_wait_ms: 50    # defaults to 10ms\n```\n\n----------------------------------------\n\nTITLE: Mounting, making executable, and unmounting the bridge (PuTTY)\nDESCRIPTION: This series of commands is used in a PuTTY session connected to the SPIKE system. It remounts the root filesystem as read-write, makes the /bin/bridge file executable, and then remounts the root filesystem as read-only for security.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/mpf-spike-bridge.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmount -o remount,rw /\nchmod +x /bin/bridge\nmount -o remount,ro /\n```\n\n----------------------------------------\n\nTITLE: Initializing Display: Custom Named Display (YAML)\nDESCRIPTION: This code snippet shows how to define a display with a custom name (e.g., \"potato\") and a specific size (100x100) in the `displays:` section of the MPF configuration file. This shows the flexibility in naming and sizing displays.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  potato:\n    width: 100\n    height: 100\n```\n\n----------------------------------------\n\nTITLE: Verifying Sudo Access in Debian\nDESCRIPTION: This snippet is used to verify that a user has been successfully granted sudo access. It attempts to execute a simple command (`echo`) with sudo privileges. A successful execution confirms the sudo configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nsudo echo\n```\n\n----------------------------------------\n\nTITLE: Defining Slides in slides: section YAML\nDESCRIPTION: This snippet demonstrates how to define slides in the `slides:` section of a config file. Each slide definition includes the slide name and a list of widgets, each with specific properties like type, text, and position.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/creating_slides.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nslides:\n  some_slide:\n    - type: text\n      text: THIS IS MY SLIDE\n  some_other_slide:\n    - type: text\n      text: THIS IS ANOTHER SLIDE\n    - type: text\n      text: WITH MORE WORDS\n      y: bottom\n      anchor_y: bottom\n  tilt_warning_1:\n    - type: text\n      text: WARNING\n  tilt_warning_2:\n    - type: text\n      text: WARNING WARNING\n```\n\n----------------------------------------\n\nTITLE: Switch Configuration Example YAML\nDESCRIPTION: This code snippet demonstrates a correct switch configuration in MPF's YAML format. The `number` setting is mandatory for switch definitions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-ConfigValidator-9.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_ball_switch1:\n    number: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring End Mode (YAML)\nDESCRIPTION: This snippet configures the end mode, which disables the flippers and other coils, displays a message, and then enables them again after a show. It uses event players to disable and enable the coils, queue event players to manage the show sequence, and queue relay players to hold the ball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/fake_ball_save.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmode:\n  start_events:\n    - start_end_MODE_NAME_mode\n  stop_events:\n    - player_continue_show_ended\n  priority: 8150\n\nevent_player:\n  mode_end_MODE_NAME_started:\n    - flipper_off\n    - disable_Upper_Left_pop_bumper\n    - disable_Upper_Right_pop_bumper\n    - disable_Lower_Left_pop_bumper\n    - disable_Lower_Right_pop_bumper\n    - disable_sling\n  player_continue_show_ended:\n    - flipper_on\n    - enable_Upper_Left_pop_bumper\n    - enable_Upper_Right_pop_bumper\n    - enable_Lower_Left_pop_bumper\n    - enable_Lower_Right_pop_bumper\n    - enable_sling\n    - start_ANOTHER_MODE\n\nqueue_event_player:\n  mode_end_MODE_NAME_started:\n    queue_event: my_queue_end_MODE_NAME\n    events_when_finished: end_end_MODE_NAME\n\nqueue_relay_player:\n  my_queue_end_MODE_NAME:\n    post: start_end_MODE_NAME_intro\n    wait_for: end_show_ended\n  balldevice_bd_trough_ball_eject_attempt:\n    post: wait_for_instruction\n    wait_for: player_continue_show_ended\n\nshows:\n  end_MODE_NAME_ball_over:\n    - duration: 11\n      slides:\n        end_MODE_NAME_ball_over_slide:\n          widgets:\n            - type: text\n              text: \"BALL LOST\"\n              color: white\n              font_size: 80\n              y: center + 300\n            - type: video\n              video: end_mode_video\n            - type: text\n              text: \"DON'T MOVE\"\n              font_size: 80\n              color: red\n              x: center\n              y: center - 300\n              animations:\n                show_slide:\n                  - property: opacity\n                    value: 1\n                    duration: .5s\n                  - property: opacity\n                    value: 0\n                    duration: .5s\n                    repeat: true\n  player_continue_show:\n    - duration: 3\n      slides:\n        end_mode_player_continue_slide:\n          widgets:\n            - type: text\n              text: PLAYER (number)\n              color: blue\n              font_size: 120\n              y: center + 90\n            - type: text\n              text: Keep Shooting\n              color: red\n              y: center - 10\n              font_size: 90\n\n\nshow_player:\n  start_end_MODE_NAME_intro:\n    end_MODE_NAME_ball_over:\n      loops: 0\n      events_when_stopped: end_show_ended\n  end_show_ended:\n    player_continue_show:\n      loops: 0\n      events_when_stopped: player_continue_show_ended\n```\n\n----------------------------------------\n\nTITLE: Configuring RGB.DMD with SmartMatrix in MPF (YAML)\nDESCRIPTION: This code snippet shows how to configure the RGB.DMD controller using the SmartMatrix platform within the MPF configuration file. It defines the hardware, SmartMatrix settings (port, baud rate, old_cookie), and RGB.DMD settings (platform, source display). Replace 'com12' with your actual COM port.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/eli_dmd.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  rgb_dmd: smartmatrix\nsmartmatrix:\n  smartmatrix_1:\n    port: com12\n    baud: 3000000\n    old_cookie: false\nrgb_dmds:\n  smartmatrix_1:\n    platform: smartmatrix\n    source_display: dmd\n```\n\n----------------------------------------\n\nTITLE: Setting Default Master Volume in MPF-MC\nDESCRIPTION: This snippet demonstrates how to set the default master volume level for the sound system using machine variables. It sets the `initial_value`, `value_type`, and `persist` properties for the `master_volume` variable. This ensures the volume level is consistent across game sessions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/basic_setup.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmachine_vars:\n  master_volume:\n    initial_value: 0.25   # Set this to any value you want\n    value_type: float\n    persist: true         # If false, the volume will reset to default\n                          # each time the machine boots up\n```\n\n----------------------------------------\n\nTITLE: Assert Ball Number Python\nDESCRIPTION: This method asserts that the current ball number in the game matches the provided number. It raises an assertion error if there is no game in progress or if the current ball number does not match the expected ball number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.assertBallNumber(1)\n```\n\n----------------------------------------\n\nTITLE: Using assertLogs as Context Manager in MpfTestCase\nDESCRIPTION: This code demonstrates how to use `assertLogs` as a context manager to assert that log messages of a certain level or higher are emitted on a specified logger. It captures the output and records of the log messages within the context, allowing for verification of log message content and metadata.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertLogs('foo', level='INFO') as cm:\n  logging.getLogger('foo').info('first message')\n  logging.getLogger('foo.bar').error('second message')\nself.assertEqual(cm.output, ['INFO:foo:first message',\n  'ERROR:foo.bar:second message'])\n```\n\n----------------------------------------\n\nTITLE: Accessing Pololu TIC Platform - Python\nDESCRIPTION: Shows how to access the Pololu TIC hardware platform instance from within an MPF machine object. This provides access to the methods for configuring and controlling the stepper drivers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/pololu_tic.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['pololu_tic']\n```\n\n----------------------------------------\n\nTITLE: Config Version Declaration YAML\nDESCRIPTION: This YAML snippet shows the line that must be added to the top of every MPF config file to specify the config version.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/2_creating_a_new_machine.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=6\n```\n\n----------------------------------------\n\nTITLE: Sequence Logic Block with Event Player in MPF (YAML)\nDESCRIPTION: This example configures a sequence logic block called 'test_sequence' and uses the event player to post events based on the sequence's progress. The sequence requires 'shot1_hit', 'shot2_hit', and 'shot3_hit' to be posted in order. The 'reset_on_complete' option is set to 'false'.  The event player is used to post events 'shot1_was_hit', 'shot2_was_hit', 'shot3_was_hit' and 'sequence_completed' based on the sequence's 'value' and 'completed' properties.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/sequences.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\nsequences:\n  test_sequence:\n    events:\n      - shot1_hit\n      - shot2_hit\n      - shot3_hit\n    reset_on_complete: false\nevent_player:\n  test_event{device.sequences.test_sequence.value == 1}: shot1_was_hit\n  test_event{device.sequences.test_sequence.value == 2}: shot2_was_hit\n  test_event{device.sequences.test_sequence.value == 3}: shot3_was_hit\n  test_event{device.sequences.test_sequence.completed}: sequence_completed\n```\n\n----------------------------------------\n\nTITLE: Listing Modes in Machine Configuration\nDESCRIPTION: This YAML snippet demonstrates how to add modes to the machine configuration file. Each mode is listed under the `modes` section, which tells MPF to read in those modes. It shows that you might have some modes in your *modes* folder that you're working on that aren't complete yet, or you might want to build different sets of configuration files that use different modes. So you have to list all the modes that you want to use in your machine config file for MPF to read in those modes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/modes/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodes:\n  - skillshot\n  - base\n  - both_ramps_made\n  - gun_fight\n  - multiball\n  - skillshot\n  - watch_tower\n```\n\n----------------------------------------\n\nTITLE: Stop Pololu Maestro Platform and Close Serial\nDESCRIPTION: This method stops the Pololu Maestro platform and closes the serial communication. It is called to properly shut down the platform and release resources, ensuring a clean exit.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/pololu_maestro.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstop()\n```\n\n----------------------------------------\n\nTITLE: Accessing Sequences in MPF with Python\nDESCRIPTION: Shows how to access a sequence device named 'foo' from within an MPF machine's Python code.  It demonstrates accessing the device both as an attribute and as a dictionary key within the `self.machine.sequences` collection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/sequences.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.sequences.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.sequences['foo']\n```\n\n----------------------------------------\n\nTITLE: Run Showcreator Command (Linux)\nDESCRIPTION: This command is used to execute the compiled showcreator application on a Linux system after cloning the git repository. It is executed from the install directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/showcreator.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n./led\n```\n\n----------------------------------------\n\nTITLE: Assert Number of Balls Known - Python\nDESCRIPTION: This assertion checks whether the machine knows about a specific number of balls. It is used to verify ball tracking mechanisms within the MPF environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nassertNumBallsKnown(balls)\n```\n\n----------------------------------------\n\nTITLE: Example Response to Get Solenoid Count (0x04)\nDESCRIPTION: Example of the response to the 'Get Solenoid Count' command (0x04). In this example, the platform supports 64 solenoids with numbers 0 to 63.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nByte        Length      Example     Comment\n---------- ----------- ----------- -----------------------------------\n0           1           64          Platform supports 64 solenoids with\n                                     numbers 0 to 63.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of get_config_file() in Python\nDESCRIPTION: This snippet demonstrates how to override the `get_config_file()` method in a test class to specify a custom machine configuration file.  This is essential for directing the test to use a specific configuration relevant to the test scenario. The method should return the filename (including the `.yaml` extension).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef get_config_file(self):\n  return 'my_config.yaml'\n```\n\n----------------------------------------\n\nTITLE: Resulting Show Configuration with Tag Expansion (YAML)\nDESCRIPTION: This snippet shows the resulting show configuration after the 'led' token has been replaced with all lights that have the 'tag1' tag. Both 'led_01' and 'led_02' are included in the show.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: 0\n  lights:\n    led_01: red\n    led_02: red\n- time: 1\n  lights:\n    led_01: off\n    led_02: off\n```\n\n----------------------------------------\n\nTITLE: P3-ROC Lamp Matrix Strobe Time Configuration\nDESCRIPTION: This code snippet shows how to configure the lamp matrix strobe time in the `p_roc:` section of the machine-wide config for P3-ROC. This setting adjusts the timing of how the columns are activated and can be fine-tuned when using LEDs. The value is in milliseconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/lights.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\np_roc:\n  lamp_matrix_strobe_time: 100ms\n```\n\n----------------------------------------\n\nTITLE: Setting Delayed Pulse on Hit Rule (OPP)\nDESCRIPTION: Sets a rule to pulse a driver (coil) after a switch is hit and a specified delay has passed. The pulse continues even after the switch is released. This is commonly used for kickbacks.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nset_delayed_pulse_on_hit_rule(enable_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings, delay_ms: int)\n```\n\n----------------------------------------\n\nTITLE: Reset Drop Target Bank with Delays (YAML)\nDESCRIPTION: This snippet shows how to configure delays for reset events. The `ball_starting` event resets the drop target immediately (0 delay), while the `collect_special` event resets it after 0.75 seconds. Different events can have different delays.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/device_control_events.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nreset_events:\n    ball_starting: 0\n    collect_special: .75s\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Switch to Change State (Python)\nDESCRIPTION: Waits for a specific switch to change into a given state. Parameters include the `switch` object to monitor, the desired `state`, a boolean `only_on_change` to specify whether to trigger immediately if already in the state, and an optional `ms` parameter indicating how long the switch must remain in the new state to trigger the wait.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nwait_for_switch(switch: mpf.devices.switch.Switch, state: int = 1, only_on_change=True, ms=0)\n```\n\n----------------------------------------\n\nTITLE: Assert Player Number - Python\nDESCRIPTION: Asserts that the current player is a specific player number. The `number` parameter indicates the expected player number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n`assertPlayerNumber(number)`\n```\n\nLANGUAGE: python\nCODE:\n```\nself.assertPlayerNumber(2)\n```\n\n----------------------------------------\n\nTITLE: Basic Sound Loop Player Configuration\nDESCRIPTION: This example shows the basic structure of the `sound_loop_player` configuration.  It demonstrates how to map triggering events to sound loop tracks and define actions with optional settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/sound_loop_player.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nsound_loop_player:\n  <triggering_event_name>:\n    <sound_loop track name>:\n      action: <action name>\n      <optional settings>\n  <triggering_event_name>:\n    <sound_loop track name>:\n      action: <action name>\n      <optional settings>\n```\n\n----------------------------------------\n\nTITLE: Get Absolute Path - Python\nDESCRIPTION: Returns the absolute path relative to the current directory. This is a utility function for handling file paths within the testing environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n`static get_abs_path(path)`\n```\n\n----------------------------------------\n\nTITLE: List Lights MPF\nDESCRIPTION: Lists all lights configured in the machine.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/service_cli.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nlist_lights\n```\n\n----------------------------------------\n\nTITLE: Bonus Event Configuration in MPF 0.80\nDESCRIPTION: This snippet shows the updated bonus event configuration in MPF 0.80. Instead of unique events for each item, a consolidated *bonus_entry* event is used.  The entry attribute specifies the bonus item name, along with hits and score.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/0.80.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nbonus_entry{entry=\"completed_ramps\", hits=3, score=3000}\n```\n\n----------------------------------------\n\nTITLE: Assert Game Is Not Running Python\nDESCRIPTION: This method asserts that a game is not currently running.  It's typically used to confirm that a game has ended or hasn't started yet.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nself.assertGameIsNotRunning()\n```\n\n----------------------------------------\n\nTITLE: Running MPF-MC Unit Tests (Python)\nDESCRIPTION: This command runs the MPF-MC unit tests (using Python, assuming it's Python 2) to ensure that changes have not introduced any regressions. It utilizes the unittest module to discover and execute all tests within the specified directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/about/contributing_to_mpf.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython -m unittest discover -s mpfmc.tests\n```\n\n----------------------------------------\n\nTITLE: Adding Widgets Section to a Slide in YAML\nDESCRIPTION: This snippet shows how to add a `widgets:` section to the \"welcome_slide\" within the `config.yaml` file. This is a prerequisite for adding any widgets to the slide.  This example assumes the 'slides' section has already been defined.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  welcome_slide:\n    widgets:\n##! test\n#! advance_time_and_run .1\n```\n\n----------------------------------------\n\nTITLE: Removing a widget (YAML)\nDESCRIPTION: This snippet demonstrates how to remove a named widget from a slide using the `widget_player:` section of an MPF config file. When the event *hide_jackal* is posted, the widget *laughing_jackal* is removed from the current slide on the default display.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_player:\n  show_jackal: laughing_jackal\n  hide_jackal:\n    laughing_jackal:\n      action: remove\n```\n\n----------------------------------------\n\nTITLE: Defining a Ball Save Show (YAML)\nDESCRIPTION: This snippet defines a show called 'ball_save_show' that controls the color of the 'ball_saver' light.  It sets the light to black initially, then changes it to red after 1 time unit. This show is used to indicate when the ball save is active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/ball_saves/center_post.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nshows:\n  ball_save_show:\n    - time: 0\n      lights:\n        ball_saver:\n          color: black\n    - time: '+1'\n      lights:\n        ball_saver:\n          color: red\n```\n\n----------------------------------------\n\nTITLE: Custom Game Mode Configuration in YAML\nDESCRIPTION: This YAML configuration defines the custom game mode. It inherits all parameters from the default game mode, but specifies a different `code` attribute, pointing to a custom Python class named `MyGameName`. This allows overriding the default behavior of the game mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/dual_launch.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nmode:\n  start_events: game_start\n  stop_events: game_ended, service_mode_entered\n  priority: 20\n  code: game.MyGameName\n  game_mode: False  # this is the game so it is started outside of a game\n  stop_on_ball_end: False\n```\n\n----------------------------------------\n\nTITLE: Example MPF Launch Command\nDESCRIPTION: This code snippet demonstrates the shell command that is constructed from the `[mpf]` section of the `gmc.cfg` file to launch MPF from within Godot. The elements from the configuration are combined to execute the MPF process.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/gmc-cfg.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n<executable_path> <executable_args> <machine_path> <mpf_args>\n```\n\n----------------------------------------\n\nTITLE: Using Sounds in a Show with LISY and MPF\nDESCRIPTION: This snippet shows how to use sound actions within an MPF show.  In this example, text-to-speech is used within a show. Requires LISY hardware and a defined MPF show.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/sound.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- hardware_sounds:\n    text:\n      action: text_to_speech\n      value: \"Hello MPF\"\n      platform_options:\n        loop: false\n        no_cache: true\n  duration: 2s\n```\n\n----------------------------------------\n\nTITLE: Installing MPF Monitor via pip\nDESCRIPTION: This snippet shows the command to install the latest stable version of MPF Monitor using pip. This assumes pip is already installed and configured correctly for Python. MPF needs to be installed before installing MPF Monitor.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/monitor/installation.md#_snippet_0\n\nLANGUAGE: doscon\nCODE:\n```\n$ pip install mpf-monitor\n```\n\n----------------------------------------\n\nTITLE: Getting Hardware Switch States (Python)\nDESCRIPTION: Shows the method for retrieving the current states of all hardware switches connected to the OSC platform. Returns a dictionary with switch numbers as keys and boolean states as values.  All switches are reported as false.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/osc.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nget_hw_switch_states() → Dict[str, bool]\n```\n\n----------------------------------------\n\nTITLE: Accessing P-ROC Hardware Platform in MPF (Python)\nDESCRIPTION: Shows how to access the P-ROC hardware platform instance via the `self.machine.hardware_platforms` dictionary in MPF. This allows interaction with P-ROC specific functionalities.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/p_roc.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['p_roc']\n```\n\n----------------------------------------\n\nTITLE: Blinkenlight Configuration YAML\nDESCRIPTION: This YAML snippet shows how to configure a blinkenlight in your machine configuration. It sets the cycle duration, off_when_multiple behavior, and the light that the blinkenlight controls.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/blinkenlight_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_left_ramp_arrow:\n    channels:\n      red:\n        number: 1\n      green:\n        number: 2\n      blue:\n        number: 3\n  l_right_ramp_arrow:\n    channels:\n      red:\n        number: 4\n      green:\n        number: 5\n      blue:\n        number: 6\nblinkenlights:\n  blinkenlight_1:\n    cycle_duration: 1s\n    off_when_multiple: false\n    light: l_left_ramp_arrow\n```\n\n----------------------------------------\n\nTITLE: Configure Eject to Another Ball Device - YAML\nDESCRIPTION: Configures the `eject_targets:` and `eject_timeouts:` settings for a plunger lane that ejects into another ball device, such as a cannon.  `eject_targets` is set to the name of the target ball device (`bd_cannon`), and `eject_timeouts` is set to a value appropriate for the transfer time (e.g., 2 seconds).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/mechanical_with_switch.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    # ...\n    eject_targets: bd_cannon\n    eject_timeouts: 2s\n```\n\n----------------------------------------\n\nTITLE: Static Tilt Warnings Configuration YAML\nDESCRIPTION: This snippet showcases a hardcoded configuration for tilt warnings, setting the `warnings_to_tilt` to a fixed value of 3. This is less flexible than using operator settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/dynamic_values.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: tilt\n# in your tilt mode\ntilt:\n  warnings_to_tilt: 3\n```\n\n----------------------------------------\n\nTITLE: Installing pip with curl\nDESCRIPTION: This snippet demonstrates how to install pip using curl, followed by installing MPF using pypy's pip. This is required when using PyPy as it has its own separate environment, needing independent pip and package installations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/finalization/software.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npypy get-pip.py\npypy -m pip install mpf\n```\n\n----------------------------------------\n\nTITLE: Stopping the OSC Server (Python)\nDESCRIPTION: Represents the method to stop the OSC server. This method should release all resources and terminate connections. This method is part of the platform shutdown procedure.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/osc.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstop()\n```\n\n----------------------------------------\n\nTITLE: Assert Exception Raised - Python\nDESCRIPTION: This assertion checks if a specific exception is raised when executing a callable with given arguments. It can be used directly or as a context manager to inspect the raised exception's attributes. Requires specifying the 'expected_exception' class.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nassertRaises(expected_exception, *args, **kwargs)\n```\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertRaises(SomeException):\n    do_something()\n```\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertRaises(SomeException) as cm:\n    do_something()\n    the_exception = cm.exception\n    self.assertEqual(the_exception.error_code, 3)\n```\n\n----------------------------------------\n\nTITLE: Widget Player Configuration for Parent Frame\nDESCRIPTION: This YAML snippet configures a widget player to add a widget to the parent frame (instead of a specific slide) when the `trigger_event` is triggered. Setting `z: -1` within `widget_settings:` causes the widget to persist across slide changes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/layers.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_player:\n    trigger_event:\n        my_widget:\n            widget_settings:\n               z: -1\n```\n\n----------------------------------------\n\nTITLE: Capture Netbus Traffic on Spike 2\nDESCRIPTION: This command sequence redirects serial communication to capture netbus traffic on a Spike 2 system. It moves the original serial port, uses interceptty to log traffic, and then runs the game binary. Requires interceptty on a mounted USB drive. Timing issues might be observed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/troubleshooting.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncd /mnt && chmod +x interceptty-arm\nmv /dev/ttymxc1 /dev/ttymxc1_real; interceptty-arm -s 'ispeed 460800 ospeed 460800' -l /dev/ttymxc1_real /dev/ttymxc1 > /mnt/serial_dump &\n```\n\nLANGUAGE: console\nCODE:\n```\n/games/game\n```\n\n----------------------------------------\n\nTITLE: Configuring virtual_segment_display_connector YAML\nDESCRIPTION: This snippet shows how to configure the `virtual_segment_display_connector` section in the machine configuration file. It specifies which segment displays should be activated for the virtual segment display emulator. The `segment_displays` setting lists the names of the segment display devices.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/virtual_segment_display_connector.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvirtual_segment_display_connector:\n  segment_displays: display1\n```\n\n----------------------------------------\n\nTITLE: Configuring an OSC Light (Python)\nDESCRIPTION: Demonstrates the method for configuring an OSC light within the MPF environment. It takes the light number, subtype, and platform settings as parameters to create a LightPlatformInterface.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/osc.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure_light(number: str, subtype: str, platform_settings: dict) → mpf.platforms.interfaces.light_platform_interface.LightPlatformInterface\n```\n\n----------------------------------------\n\nTITLE: Assert Light Color Absence - Python\nDESCRIPTION: This assertion verifies that a specified light does not display a given color. It's used to confirm the absence of a particular color on a light in the machine's configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nassertNotLightColor(light_name, color)\n```\n\n----------------------------------------\n\nTITLE: Fine-Tune DMD Timing Cycles in P-ROC Config (YAML)\nDESCRIPTION: Allows fine-tuning the timings of individual bit planes that make up the image on the DMD. These settings can be adjusted in the `p_roc: dmd_timing_cycles:` section of the machine-wide config. Modifying these values without proper understanding can potentially damage the DMD hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/dmd.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\np_roc:\n  dmd_timing_cycles: 90, 190, 50, 377\n```\n\n----------------------------------------\n\nTITLE: Enable Flippers on Machine Reset in MPF (YAML)\nDESCRIPTION: This snippet configures the flippers to automatically enable when MPF starts by adding the `enable_events: machine_reset_phase_3` entry to each flipper definition. This allows testing the flippers even before a full game configuration is complete, as MPF typically only enables flippers during a game. This override triggers flipper activation during the machine reset phase.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/dual_wound.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nflippers:\n  left_flipper:\n    main_coil: c_flipper_left_main\n    hold_coil: c_flipper_left_hold\n    activation_switch: s_left_flipper\n    enable_events: machine_reset_phase_3\n  right_flipper:\n    main_coil: c_flipper_right_main\n    hold_coil: c_flipper_right_hold\n    activation_switch: s_right_flipper\n    enable_events: machine_reset_phase_3\n```\n\n----------------------------------------\n\nTITLE: Failing MPF Test (Python)\nDESCRIPTION: This code snippet is an intentionally failing test.  It uses the `assertModeRunning` method to check for a mode called 'foo'. The purpose is to demonstrate how a test failure is reported in the test runner output, and to illustrate debugging failing tests.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/Writing_Tests/WritingCustomTestsForYourMachine.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.assertModeRunning('foo')\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit and Enable and Release and Disable Rule\nDESCRIPTION: Sets a hardware rule to pulse a coil when a switch is hit, enable the coil, release it, and then disable the coil based on other conditions. Used for high-power coils on single-wound flippers and enables repulse functionality.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_enable_and_release_and_disable_rule(enable_switch: mpf.core.platform.SwitchSettings, eos_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings, repulse_settings: Optional[mpf.core.platform.RepulseSettings])\n```\n\n----------------------------------------\n\nTITLE: Checking Host Network Configuration (macOS)\nDESCRIPTION: This snippet shows how to check the configuration of the VirtualBox virtual network adapter on a macOS host. The `ifconfig` command is used to display the network interface configuration. The output includes the IP address and netmask of the virtual network adapter.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nifconfig vboxnet0\n```\n\n----------------------------------------\n\nTITLE: Enable Coil MPF\nDESCRIPTION: Enables the specified coil. Only works if the coil is configured to allow enabling.\n<name> is the name of the coil to enable.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/service_cli.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncoil_enable <name>\n```\n\n----------------------------------------\n\nTITLE: Configure System 11 Options for A/C Relay (YAML)\nDESCRIPTION: This snippet configures System 11-specific options, including the A/C relay delay and driver number. The `ac_relay_delay_ms` setting defines the delay before and after flipping the A/C relay to prevent power leakage. The `ac_relay_driver_number` specifies the driver associated with the A/C select relay, which varies between System 11 machines.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/snux.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nsystem11:\n  ac_relay_delay_ms: 75\n  ac_relay_driver_number: c14\n```\n\n----------------------------------------\n\nTITLE: Accessing Accelerometers\nDESCRIPTION: This code snippet demonstrates how to access an accelerometer device named 'foo' from the `self.machine.accelerometers` collection, using both dot notation and dictionary-style access.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/accelerometers.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.accelerometers.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.accelerometers['foo']\n```\n\n----------------------------------------\n\nTITLE: Randomizer Class Definition\nDESCRIPTION: Defines the Randomizer class, which inherits from object and provides functionality for randomizing items from a list. It includes methods for getting the current and next items, as well as a static method for picking a weighted random item.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/Randomizer.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass mpf.core.randomizer.Randomizer(items):\n\nBases: `object`\n\nGeneric list randomizer.\n```\n\n----------------------------------------\n\nTITLE: Edit .bashrc to Add Pip Path\nDESCRIPTION: Opens the `~/.bashrc` file in the nano text editor with root privileges. The purpose is to add the pip executables path to the system's PATH environment variable. This ensures that executables installed via pip are accessible from the command line.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/pine64.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo nano ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Add Driver Action to Queue\nDESCRIPTION: Adds a driver action for a switched driver to the queue.  The action is serviced immediately, if possible, or as soon as possible otherwise, ensuring drivers are acted upon with minimal delay.  Driver action is different based on if it is located on the A or C side.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/system11.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef driver_action(driver, pulse_settings: Optional[mpf.platforms.interfaces.driver_platform_interface.PulseSettings], hold_settings: Optional[mpf.platforms.interfaces.driver_platform_interface.HoldSettings], side: str):\n    Add a driver action for a switched driver to the queue (for either the A-side or C-side queue).\n\n    Parameters:\n\n    * **driver** – A reference to the original platform class Driver instance.\n    * **pulse_settings** – Settings for the pulse or None\n    * **hold_settings** – Settings for hold or None\n    * **side** – Whatever the driver is on A or C side.\n\n    This action will be serviced immediately if it can, or ASAP otherwise.\n```\n\n----------------------------------------\n\nTITLE: Fill Troughs with Balls - Python\nDESCRIPTION: This function simulates filling all ball devices tagged as 'trough' with balls. It is used to initialize the machine state for testing ball management logic.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfill_troughs()\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit and Release Rule (OPP)\nDESCRIPTION: Sets a rule to pulse a driver when a switch is hit, and cancel the pulse when the switch is released. Typically used on the main coil for dual coil flippers without an EOS switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_release_rule(enable_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings)\n```\n\n----------------------------------------\n\nTITLE: Basic Playlist Player Usage\nDESCRIPTION: This snippet illustrates the basic syntax for using the playlist_player to trigger actions on playlists. It shows how to associate events with playlist track names and specify actions to be performed, along with optional settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/playlist_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplaylist_player:\n  <triggering_event_name>:\n    <playlist track name>:\n      action: <action name>\n      <optional settings>\n  <triggering_event_name>:\n    <playlist track name>:\n      action: <action name>\n      <optional settings>\n```\n\n----------------------------------------\n\nTITLE: Stopping the High Score Mode\nDESCRIPTION: This snippet shows the method to stop the High Score mode. It takes an optional callback function to be executed after the mode stops and returns a boolean indicating if the mode was running.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/high_score.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nstop(callback: Any = None, **kwargs) → bool\n```\n\n----------------------------------------\n\nTITLE: Assert Number of Balls Known - Python\nDESCRIPTION: Asserts that the machine knows about a specific number of balls in play.  This is useful for testing ball tracking and ball count mechanisms within the pinball system.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n`assertNumBallsKnown(balls)`\n```\n\n----------------------------------------\n\nTITLE: Sending Asynchronous Raw Command\nDESCRIPTION: Sends a raw command to the Spike platform without waiting for a response. This allows for asynchronous direct hardware communication at a low level. `wait_ms` specifies the milliseconds to wait for a response.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nsend_cmd_raw_async(data, wait_ms=0)\n```\n\n----------------------------------------\n\nTITLE: Console Output of Keyboard Events\nDESCRIPTION: This console snippet shows the type of output that `debug: yes` in the `keyboard` section will generate when keys are pressed.  It shows the keys and modifier combinations recognized by MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/virtual/keyboard.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nKEYS: d\nKEYS: s\nKEYS: shift\nKEYS: shift+s\nKEYS: f\nKEYS: super\nKEYS: meta+c\nKEYS: shift\nKEYS: shift+d\nKEYS: lctrl\nKEYS: ctrl+f\nKEYS: escape\n```\n\n----------------------------------------\n\nTITLE: Initializing SMBus2 Platform - Python\nDESCRIPTION: Initializes the SMBus2 platform by checking if the `smbus2` Python extension has been imported. This is a necessary step to ensure that the SMBus2 functionality is available.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/smbus2.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ninitialize()\n```\n\n----------------------------------------\n\nTITLE: Initialize the Platform\nDESCRIPTION: Registers a handler for late initialization of the platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/spi_bit_bang.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ninitialize()\n```\n\n----------------------------------------\n\nTITLE: Accessing spi_bit_bang platform\nDESCRIPTION: Shows how to access the spi_bit_bang platform via the machine's hardware_platforms dictionary. The platform is stored under the key 'spi_bit_bang'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/spi_bit_bang.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['spi_bit_bang']\n```\n\n----------------------------------------\n\nTITLE: Example Show Configuration with LED Token (YAML)\nDESCRIPTION: This example shows how to define a show that uses show tokens. The `(leds)` placeholder will be replaced with the actual LED name when the show is played by a shot that has the `leds` token defined in its `show_tokens` configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/shots.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nshows:\n  flash_light:\n    - time: 0\n      lights:\n        (leds): red\n    - time: 1\n      lights:\n        (leds): off\n```\n\n----------------------------------------\n\nTITLE: Get Stepper Config Section - Python\nDESCRIPTION: Returns the configuration validator name for the stepper device, allowing the framework to validate the configuration data for the device.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/pololu_tic.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclassmethod get_stepper_config_section()\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrent Light Shows with show_player in YAML\nDESCRIPTION: This snippet demonstrates how to configure multiple light shows to run concurrently when the attract mode starts, using the `show_player` configuration in a YAML file. Each show is assigned a speed, allowing for variations in their playback rate.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/17_add_lights_leds.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n    mode_attract_started:\n      attract_display_loop:\n        speed: 1\n      flipper_red_flashing:\n        speed: 2\n      purple_mode_sweep:\n        speed: 4\n      inlane_alternating:\n        speed: 3\n      random_flashing:\n        speed: 2\n      car_chase_sweep:\n        speed: 3\n      ramp_orbit_sweep:\n        speed: 5\n...(truncated. you get the idea)\n```\n\n----------------------------------------\n\nTITLE: HardwareSoundPlayer Class Definition\nDESCRIPTION: The `HardwareSoundPlayer` class inherits from `DeviceConfigPlayer`. It is used to manage playing sounds on an external sound card. It includes methods for parsing configurations and playing sounds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/hardware_sound_player.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass mpf.config_players.hardware_sound_player.HardwareSoundPlayer(machine):\n    Bases: `mpf.config_players.device_config_player.DeviceConfigPlayer`\n```\n\n----------------------------------------\n\nTITLE: MPF Upgrade via Installer - console\nDESCRIPTION: This command upgrades MPF by re-running the installer script.  This ensures that all dependencies are updated as well.  It requires sudo privileges.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nsudo ./install\n```\n\n----------------------------------------\n\nTITLE: Accessing Digital Outputs in MPF (Python)\nDESCRIPTION: This code demonstrates how to access digital outputs in the Mission Pinball Framework (MPF). The `self.machine.digital_outputs` collection is used to retrieve digital output devices by name (e.g., 'foo') or through dictionary-style access. This allows for programmatic control of digital outputs within the MPF environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/digital_outputs.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.digital_outputs.foo\n```\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.digital_outputs['foo']\n```\n\n----------------------------------------\n\nTITLE: P3-ROC Hardware Config - YAML\nDESCRIPTION: This YAML snippet configures MPF to use a P3-ROC controller with P-ROC driver and switch boards. It specifies the platform as `p3_roc` and the driverboards as `pdb`. The switch configuration uses a `0-0` number example.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: p3_roc\n  driverboards: pdb\n\nswitches:\n  s_left_flipper:\n    number: 0-0\n```\n\n----------------------------------------\n\nTITLE: Define Shot Profile States\nDESCRIPTION: This code defines the shot profile used for the skillshot targets. It sets `advance_on_hit` to false, meaning the profile won't advance automatically when the shot is hit. The states include 'off', 'on', and 'lit', which control the light behavior of each target during the skillshot sequence.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/skillshot_with_auto_rotate.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: skillshot_with_auto_rotate\nshot_profiles:\n  skillshot_profile:\n    advance_on_hit: false\n    states:\n      - name: off\n        show: off\n      - name: on\n        show: on\n      - name: lit\n        show: flash\n```\n\n----------------------------------------\n\nTITLE: Setting color opacity with hex code in MPF\nDESCRIPTION: This snippet demonstrates how to define a color with 100% opacity using a hexadecimal color code in MPF. The `ff` at the end of the color code `ff0000ff` specifies full opacity.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/opacity.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncolor: ff0000\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncolor: ff0000ff\n```\n\n----------------------------------------\n\nTITLE: Debug Logging for Ball Starting in MPF (Python)\nDESCRIPTION: This snippet shows debug logging messages used to track the ball starting sequence in MPF. It logs messages indicating the start of the ball, the player number, ball number, score, and when the ball is started. The snippet uses `self.debug_log` which is assumed to be a logging function available in the MPF context. The messages are formatted for readability and contain information about the current game state.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/dual_launch.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n     self.debug_log(\"***************************************************\")\n     self.debug_log(\"****************** BALL STARTING ******************\")\n     self.debug_log(\"**                                               **\")\n     self.debug_log(\"**    Player: {}    Ball: {}   Score: {}\".format(self.player.number,\n                                                                      self.player.ball,\n                                                                      self.player.score\n                                                                      ).ljust(49) + '**')\n     self.debug_log(\"**                                               **\")\n     self.debug_log(\"***************************************************\")\n     self.debug_log(\"***************************************************\")\n\n     self.debug_log(\"ball_started for Ball %s\", self.player.ball)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bonus Entries in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define bonus entries within the `bonus.yaml` configuration file. It showcases the usage of `entry`, `text`, `player_score_entry`, and `score` to create bonus entries based on game events and player scores. This example defines two bonus entries: one for loops completed and another for songs completed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/bonus.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nmode_settings:\n  bonus_entries:\n    - entry: loops_completed\n      text: \"Ranger Loops\"\n      player_score_entry: ranger_loops_count\n      score: 10_000\n    - entry: songs_completed\n      text: \"Songs Sung\"\n      player_score_entry: total_songs\n      score: 5_000\n```\n\n----------------------------------------\n\nTITLE: FlasherPlayer class definition\nDESCRIPTION: The `FlasherPlayer` class inherits from `DeviceConfigPlayer` and is responsible for triggering flashers based on configuration settings defined in MPF config files.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/flasher_player.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass mpf.config_players.flasher_player.FlasherPlayer(machine):\n    Bases: mpf.config_players.device_config_player.DeviceConfigPlayer\n\n    Triggers flashers based on config.\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in MPF Test\nDESCRIPTION: This method asserts that a specific exception is raised by a callable when invoked with given arguments. It can be used as a context manager, keeping a reference to the exception in the 'exception' attribute for further inspection. `expected_exception` is the class of the expected exception.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertRaises(SomeException):\n  do_something()\n```\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertRaises(SomeException) as cm:\n  do_something()\nthe_exception = cm.exception\nself.assertEqual(the_exception.error_code, 3)\n```\n\n----------------------------------------\n\nTITLE: Assert Warning Regex - Python\nDESCRIPTION: This assertion verifies that a specific warning is triggered and its message matches a given regular expression.  'expected_warning' specifies the warning class, and 'expected_regex' provides the regular expression to match against the warning message.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nassertWarnsRegex(expected_warning, expected_regex, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: OSC Configuration Example YAML\nDESCRIPTION: This YAML configuration demonstrates how to configure MPF to use the OSC platform. It includes settings for the remote IP, remote port, events to send, light configurations with OSC channels, and switch configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/osc.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: osc\n\nosc:\n  remote_ip: 127.0.0.1\n  remote_port: 8000\n\n  events_to_send:\n    - player_score\n    - some_non_osc_switch_active\n    - some_non_osc_switch_inactive\n\nlights:\n  test_light1:\n    channels:\n      red:\n        - number: light1/red\n      blue:\n        - number: light1/blue\n      green:\n        - number: light1/green\n  test_light2:\n    number: light2\n\nswitches:\n  switch_1:\n    number: 1\n  switch_2:\n    number: 2\n  some_non_osc_switch:  # not an OSC switch but used for the events above\n    number: 23\n    platform: virtual\n```\n\n----------------------------------------\n\nTITLE: Removing a Slide with the remove Action in YAML\nDESCRIPTION: This snippet demonstrates how to remove a slide when a specific event is triggered. The `action: remove` configuration removes the specified slide from the active slides.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/slide_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  remove_slide_1:           # event name\n    slide1:                 # slide name\n      action: remove\n```\n\n----------------------------------------\n\nTITLE: Edit pigpiod Service Configuration\nDESCRIPTION: This configuration change is required to allow remote connections to the `pigpiod` service over the network. It involves modifying the `ExecStart` line in the service file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/rpi.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nExecStart=/usr/bin/pigpiod\n```\n\n----------------------------------------\n\nTITLE: Successful Handshake Response\nDESCRIPTION: The media controller sends this `hello` command as a response to the pinball controller's initial handshake command. It confirms that the media controller supports the requested protocol version, specifying the version it speaks.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/BCP_Protocol/index.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhello?version=1.0\n```\n\n----------------------------------------\n\nTITLE: Initialize the platform\nDESCRIPTION: Initializes the Pololu Maestro hardware platform. This method performs the necessary setup and configuration to enable communication and control of the servo controllers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/pololu_maestro.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninitialize()\n```\n\n----------------------------------------\n\nTITLE: Installing MPF Monitor with pip in DOS\nDESCRIPTION: This command installs MPF Monitor, a tool that provides a real-time view into the running MPF code, displaying device states, events, variables, and modes.  It requires an active internet connection and pip package manager.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/windows.md#_snippet_4\n\nLANGUAGE: doscon\nCODE:\n```\npip install mpf-monitor\n```\n\n----------------------------------------\n\nTITLE: BallSearch Class Definition\nDESCRIPTION: This code defines the BallSearch class, which inherits from MpfController. It's responsible for implementing ball search functionality for a specific playfield in MPF. The class provides methods to enable, disable, start, stop, and block ball search.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass mpf.core.ball_search.BallSearch(machine: mpf.core.machine.MachineController, playfield: Playfield):\n    \"\"\"Implements Ball search for a playfield device.\n\n    In MPF, the ball search functionality is attached to each playfield device, rather than being done at the global level. (In other words, each playfield is responsible for making sure no balls get stuck on it, and it leverages an instance of this BallSearch class to handle it.)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Switch Handler by Object (Python)\nDESCRIPTION: Removes a registered switch handler, using the `switch` object instead of the switch name.  Parameters include the `switch` object, `callback`, `state`, and `ms`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nremove_switch_handler_obj(switch, callback, state=1, ms=0)\n```\n\n----------------------------------------\n\nTITLE: Configuring LED Polarity in lights section YAML\nDESCRIPTION: This snippet configures the polarity of an LED named \"l_shoot_again\" connected to board 8, channels 60, 61, and 62. `polarity: true` indicates a common cathode (or common ground) LED is used.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/leds.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_shoot_again:\n    number: 8-60-61-62\n    platform_settings:\n      polarity: true\n```\n\n----------------------------------------\n\nTITLE: Analyzing MPF Configuration Error in Console\nDESCRIPTION: This console output shows an example of a chained MPF error. The root cause is an inability to find a board for a switch. The more general error is a failure to configure the switch due to the platform error. Reading from the bottom of the traceback upwards helps identify the root cause.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/reading_errors.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nINFO : EventManager : Event: ======'shutdown'====== Args={}\nShutdown because of an exception:\nERROR : Machine : Runtime Exception\nTraceback (most recent call last):\n  File \"/mpf/mpf/devices/switch.py\", line 135, in _initialize\n    self.config['number'], config, self.config['platform_settings'])\n  File \"/mpf/mpf/platforms/virtual.py\", line 94, in configure_switch\n    raise AssertionError(\"Cannot find board for switch {}\".format(number))\nAssertionError: Cannot find board for switch 0-7\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/mpf/mpf/core/machine.py\", line 741, in _run_loop\n    raise self._exception['exception']\n  File \"uvloop/cbhandles.pyx\", line 70, in uvloop.loop.Handle._run\n  File \"/mpf/mpf/core/events.py\", line 114, in _async_handler_done\n    future.result()\n  File \"/mpf/mpf/core/device_manager.py\", line 103, in _load_device_modules\n    await self.initialize_devices()\n  File \"/mpf/mpf/core/device_manager.py\", line 199, in initialize_devices\n    await collection[device_name].device_added_system_wide()\n  File \"/mpf/mpf/core/system_wide_device.py\", line 15, in device_added_system_wide\n    await self._initialize()\n  File \"/mpf/mpf/devices/switch.py\", line 137, in _initialize\n    raise AssertionError(\"Failed to configure switch {} in platform. See error above\".format(self.name)) from e\nAssertionError: Failed to configure switch s_door_back in platform. See error above\n```\n\n----------------------------------------\n\nTITLE: Check MPF Version using Command Line\nDESCRIPTION: This command allows users to verify the installed version of MPF via the command line. It is essential for ensuring compatibility with the tutorial and documentation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/1_install_mpf.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmpf --version\n```\n\n----------------------------------------\n\nTITLE: Configure Audio Buses in GMC\nDESCRIPTION: This snippet shows the configuration for audio buses in the `gmc.cfg` file. It defines the type for the music, effects, and voice buses. It configures music to be solo, effects to play simultaneously with a limit of 3 sounds, and voice to play sequentially. The effects bus is set as the default.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/setup.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n\n    [sound_system]\n    music={\"type\": \"solo\"}\n    effects={\"type\": \"simultaneous\", \"simultaneous_sounds\": 3, \"default\": true}\n    voice={\"type\": \"sequential\"}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring an OSC Switch (Python)\nDESCRIPTION: Demonstrates the method for configuring an OSC switch within the MPF environment. It takes the switch number, configuration, and platform configuration as parameters to create a SwitchPlatformInterface.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/osc.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconfigure_switch(number: str, config: mpf.core.platform.SwitchConfig, platform_config: dict) → mpf.platforms.interfaces.switch_platform_interface.SwitchPlatformInterface\n```\n\n----------------------------------------\n\nTITLE: Accessing the Raspberry Pi Platform\nDESCRIPTION: This snippet shows how to access the Raspberry Pi hardware platform instance within the MPF environment. The hardware platforms are stored in the `self.machine.hardware_platforms` dictionary, and 'rpi' is the key to access the Raspberry Pi platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/rpi.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['rpi']\n```\n\n----------------------------------------\n\nTITLE: Assert Placeholder Evaluates - Python\nDESCRIPTION: Asserts that a placeholder evaluates to a specified value. This is important for testing the correct evaluation of dynamic values in the pinball system.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n`assertPlaceholderEvaluates(expected, condition)`\n```\n\n----------------------------------------\n\nTITLE: Defining Trough Switches in MPF Configuration (YAML)\nDESCRIPTION: This snippet defines the switches used in the trough to detect the presence of balls. Each switch is associated with a unique number representing its physical connection to the control system. The 'number' value should match the actual switch number in your pinball machine's control system. A jam switch is optionally included to detect balls stacked on top of each other.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_mechanical.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_trough1:\n    number: 2\n  s_trough2:\n    number: 3\n  s_trough3:\n    number: 4\n  s_trough4:\n    number: 5\n  s_trough5:\n    number: 6\n  s_trough6:\n    number: 7\n  s_trough_jam:\n    number: 8\n```\n\n----------------------------------------\n\nTITLE: Configuring the chair_lit mode\nDESCRIPTION: This snippet configures the 'chair_lit' mode. It sets the mode's priority, start and stop events, and defines event player configurations. It includes configurations to start the mode when the center ramp is hit or at the start of the ball, and to stop it when the ball enters the electric chair or swamp.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/TAF_mansion_awards.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: chair_lit\n#config_version=5\nmode:\n  priority: 102\n  start_events: center_ramp_active, mode_mansion_awards_started\n  stop_events: balldevice_electric_chair_ball_enter, balldevice_swamp_kickout_ball_enter\nevent_player:\n  mode_chair_lit_stopping: unlight_chair\n  mode_chair_lit_started: light_chair, cancel_chair_timer\n  mode_chair_lit_3s_started: cancel_chair_timer\ncounters:\n  initialize_mansion:\n    count_events: mode_chair_lit_started\n    events_when_complete: initialize_mansion\n    count_complete_value: 1\n    persist_state: true\n```\n\n----------------------------------------\n\nTITLE: Mock BCP Client Class Definition (Python)\nDESCRIPTION: Defines the `MockBcpClient` class, inheriting from `BaseBcpClient`. This class is designed for use in tests requiring BCP, but without creating a real BCP connection. It inherits attributes and methods from `BaseBcpClient`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MockBcpClient.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass MpfBcpTestCase.MockBcpClient(machine, name, bcp):\n    Bases: `mpf.core.bcp.bcp_client.BaseBcpClient`\n\n    A Mock BCP Client.\n\n    This is used in tests require BCP for testing but where you don’t actually create a real BCP connection.\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Widget Appearance\nDESCRIPTION: This snippet customizes the appearance of the text widget in the `welcome_slide` by setting the font size to 50 and the color to red.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  welcome_slide:\n    widgets:\n      - type: text\n        text: PINBALL!\n        font_size: 50\n        color: red\n```\n\n----------------------------------------\n\nTITLE: Fail Test - Python\nDESCRIPTION: This function forces the current test to fail immediately, optionally with a given message. It is used to halt test execution when a critical condition is not met.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfail(msg=None)\n```\n\n----------------------------------------\n\nTITLE: Read Initial Hardware State\nDESCRIPTION: Reads the initial hardware state of the switches.  This method always returns false for all inputs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/spi_bit_bang.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nget_hw_switch_states()\n```\n\n----------------------------------------\n\nTITLE: Configure Servo on Pololu Maestro\nDESCRIPTION: This method configures a specific servo device connected to the Pololu Maestro platform. It takes the servo number as a string parameter. The servo number is used to identify the servo to configure on the platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/pololu_maestro.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure_servo(number: str)\n```\n\n----------------------------------------\n\nTITLE: Configure driver (Python)\nDESCRIPTION: Configures a driver on the smart virtual platform. It takes a `config` object (`mpf.core.platform.DriverConfig`), a `number` string representing the driver's identifier, and a `platform_settings` dictionary containing platform-specific settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/smart_virtual.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconfigure_driver(config: mpf.core.platform.DriverConfig, number: str, platform_settings: dict)\n```\n\n----------------------------------------\n\nTITLE: Valid Config Show Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a show within the main MPF config file.  Shows are nested under the `shows:` key. Each show consists of a list of steps, each defining actions like setting lights for a specific duration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-show-1.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nshows:\n  flash_red:\n    - duration: 1\n      lights:\n        led1: red\n    - duration: 1\n      lights:\n        led1: off\n```\n\n----------------------------------------\n\nTITLE: Configure a servo device\nDESCRIPTION: Configures a servo device in the platform. The `number` parameter specifies the servo number as a string. This method prepares the servo for operation with the Pololu Maestro controller.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/pololu_maestro.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure_servo(number: str)\n```\n\n----------------------------------------\n\nTITLE: Playfield expected_ball_received() Method\nDESCRIPTION: Describes the `expected_ball_received()` method, which handles the event when an expected ball is received by the playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nexpected_ball_received()\n```\n\n----------------------------------------\n\nTITLE: Config File Location doscon\nDESCRIPTION: Illustrates the specific path where the `config.yaml` file should reside within the machine folder structure.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/2_creating_a_new_machine.md#_snippet_2\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\pinball\\your_machine\\config\\config.yaml\n```\n\n----------------------------------------\n\nTITLE: Parsing Light Number to Channels (Python)\nDESCRIPTION: Demonstrates the method for parsing a light number into its corresponding RGB channels. This is useful for mapping a single light number to multiple OSC channels representing color components.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/osc.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nparse_light_number_to_channels(number: str, subtype: str)\n```\n\n----------------------------------------\n\nTITLE: Install D2xxHelper package\nDESCRIPTION: This command installs the D2xxHelper package, provided by FTDI Chips, which adjusts the priorities of FTDI driver loading to prevent conflicts with the default macOS FTDI driver. The `sudo installer` command requires administrator privileges and installs the package to the root directory ('/').\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/mac.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/proc/osx-proc-support\nsudo installer -pkg D2xxHelper_v2.0.0.pkg -target /\n```\n\n----------------------------------------\n\nTITLE: Creating udev rule for persistent device naming\nDESCRIPTION: This udev rule creates a symbolic link for a specific USB port, ensuring a persistent device name for the OPP hardware. It requires modification of the `DEVPATH` to match the correct USB port.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/connecting.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nSUBSYSTEM==\"tty\", ACTION==\"add\", DEVPATH==\"/devices/pci0000:00/0000:00:14.0/usb1/1-4/1-4:1.1/*\", SYMLINK+=\"ttyOPP1\", GROUP=\"adm\", MODE=\"0660\"\n```\n\n----------------------------------------\n\nTITLE: Exception handling using assertRaises\nDESCRIPTION: This snippet demonstrates how to use `assertRaises` to assert that a specific exception is raised when a callable is invoked. It illustrates both the context manager usage and how to access the exception object for further inspection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfBcpTestCase.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertRaises(SomeException):\n  do_something()\n```\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertRaises(SomeException) as cm:\n  do_something()\nthe_exception = cm.exception\nself.assertEqual(the_exception.error_code, 3)\n```\n\n----------------------------------------\n\nTITLE: Configure a Stepper Motor\nDESCRIPTION: Configures a Pololu TIC smart stepper device within the MPF platform. Takes the stepper number and configuration dictionary as input, returning a `PololuTICStepper` object.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/pololu_tic.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure_stepper(number: str, config: dict) → mpf.platforms.pololu.pololu_tic.PololuTICStepper\n```\n\n----------------------------------------\n\nTITLE: Editing /etc/rc2.d/S95game to run the spike bridge\nDESCRIPTION: This snippet adds two lines to `/etc/rc2.d/S95game`. The first line runs the `avrisp` command with the `netbridge.hex` and `netbridge.fuses` files to initialize the bridge. The second line ensures that the original Stern game code does not execute, by exiting the script.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/mpf-spike-bridge.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/avrisp /usr/local/spike/netbridge.hex /usr/local/spike/netbridge.fuses\nexit 1\n```\n\n----------------------------------------\n\nTITLE: System11OverlayPlatform Class Definition\nDESCRIPTION: Defines the `System11OverlayPlatform` class, inheriting from `DriverPlatform` and `SwitchPlatform`. This class provides an overlay platform to drive System 11 machines using a WPC controller within the MPF framework.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/system11.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass mpf.platforms.system11.System11OverlayPlatform(machine: mpf.core.machine.MachineController):\n    Bases: mpf.core.platform.DriverPlatform, mpf.core.platform.SwitchPlatform\n\n    Overlay platform to drive system11 machines using a WPC controller.\n```\n\n----------------------------------------\n\nTITLE: Basic Event Parameter Logging in MPF\nDESCRIPTION: Illustrates how MPF logs events and their associated parameters. This log shows the 'ball_started' event with 'player' and 'ball' parameters and their respective values.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/conditional.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nINFO : EventManager : Event: ======'ball_started'====== Args={'player': 2, 'ball': 3}\n```\n\n----------------------------------------\n\nTITLE: Quad Widget Type Setting in MPF\nDESCRIPTION: Specifies that a widget is a quad widget. This is a required setting for quad widgets in MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/quad.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ntype: quad\n```\n\n----------------------------------------\n\nTITLE: Example Disable Solenoid Command (0x16)\nDESCRIPTION: Example of disabling solenoid 25.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_27\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tExample\tComment\n0\t1\t22\tCommand 22 - Disable Solenoid\n1\t1\t25\tDisable solenoid 25\n```\n\n----------------------------------------\n\nTITLE: Canceling a Show with Flipper Cancel Combo Switch\nDESCRIPTION: This example demonstrates how to configure flipper switches and use the flipper_cancel event to stop a show in MPF. It includes definitions for the left and right flipper switches, a sample show, and configuration within show_player to trigger the show and cancel it when both flipper buttons are pressed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/combo_switches.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_flipper_left:\n    tags: left_flipper\n    number:\n  s_flipper_right:\n    tags: right_flipper\n    number:\n\nshows:\n  mode_intro:\n    - duration: 5\n      slides:\n        mode_intro_slide:\n          widgets:\n            - type: text\n              text: Hit 50 switches to light jackpot\n              color: white\n              font_size: 100\nshow_player:\n  start_mode_intro_show:\n    mode_intro:\n      loops: 0\n      events_when_stopped: mode_intro_show_ended\n  flipper_cancel:\n    mode_intro:\n      action: stop\n```\n\n----------------------------------------\n\nTITLE: Configuring a Counter for Super Jets Mode in MPF (YAML)\nDESCRIPTION: This configuration defines a counter named 'super_jets' that tracks the number of times the 'sw_pop' switch is hit. When the counter reaches 0 (starting from 75), the 'super_jets_start' event is posted. This example showcases counting down and triggering an event upon completion, suitable for features like starting game modes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/counters.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\ncounters:\n  super_jets:\n    count_events: sw_pop\n    events_when_hit: pop_hit\n    starting_count: 75\n    count_complete_value: 0\n    direction: down\n    events_when_complete: super_jets_start\n```\n\n----------------------------------------\n\nTITLE: Number as Integer - Python\nDESCRIPTION: Demonstrates formatting a number as an integer with a minimum width of 5 characters using Python's format string syntax. It assumes the variable `variable` has a value of 1337.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/text_templates.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n{variable:5d}\n```\n\nLANGUAGE: text\nCODE:\n```\n\" 1337\"\n```\n\n----------------------------------------\n\nTITLE: Fading Lights with Extended Syntax in YAML\nDESCRIPTION: This example demonstrates fading lights between steps using the extended syntax. The `rainbow_with_fade_extended_syntax` show applies a 1-second fade to each color change of the `l_rgb` light, using a dictionary with `color` and `fade` keys.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/light_player.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nshows:\n  rainbow_with_fade_extended_syntax:\n    - lights:\n        l_rgb:\n          color: red\n          fade: 1s\n      duration: 1s\n    - lights:\n        l_rgb:\n          color: orange\n          fade: 1s\n      duration: 1s\n    - lights:\n        l_rgb:\n          color: yellow\n          fade: 1s\n      duration: 1s\n    - lights:\n        l_rgb:\n          color: green\n          fade: 1s\n      duration: 1s\n    - lights:\n        l_rgb:\n          color: blue\n          fade: 1s\n      duration: 1s\n    - lights:\n        l_rgb:\n          color: purple\n          fade: 1s\n      duration: 1s\n\nshow_player:\n  play_rainbow_show: rainbow_with_fade_extended_syntax\n```\n\n----------------------------------------\n\nTITLE: Machine Run - Python\nDESCRIPTION: This function processes any delays, timers, or other scheduled events within the machine.  It is equivalent to calling self.advance_time_and_run(0).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nmachine_run()\n```\n\nLANGUAGE: python\nCODE:\n```\nself.advance_time_and_run(0)\n```\n\n----------------------------------------\n\nTITLE: Get Platform - Python\nDESCRIPTION: Forces the test class to use a specific platform. If not defined, the default is the 'virtual' platform. Override this method to use a different platform, such as 'smart_virtual'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n`get_platform()`\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_platform(self):\n    return 'smart_virtual'\n```\n\n----------------------------------------\n\nTITLE: Get device path using udevadm\nDESCRIPTION: This command retrieves device information from udev, including the DEVPATH which is used to create a udev rule.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/smbus.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nudevadm info /dev/i2c0\n```\n\n----------------------------------------\n\nTITLE: Setting the Number of Balls Installed in MPF\nDESCRIPTION: This configuration sets the number of balls installed in the machine. It informs MPF how many balls to expect when the machine starts up, especially when the trough entrance switch is not active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_one_switch.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmachine:\n  balls_installed: 4\n```\n\n----------------------------------------\n\nTITLE: Initializing OPP Hardware\nDESCRIPTION: Initializes the connections to the OPP hardware. This method is responsible for establishing communication with the OPP boards and performing any necessary setup tasks.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ninitialize()\n```\n\n----------------------------------------\n\nTITLE: Global Mode Configuration\nDESCRIPTION: This YAML configuration defines the global mode, responsible for transitioning between field and mission modes. It specifies start and stop events, and uses event_player to handle the start/stop of field and mission modes, and restart field when a mission stops (unless global is stopping).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/mode_layering.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: global\n# modes/global/config/global.yaml\n\nmode:\n  start_events: start_mode_global\n  stop_events: stop_mode_global, ball_will_end\n\nconfig:\n  # add your configs here. For instance:\n  # - global_multiball_madness_light_and_lock.yaml\n  # - global_pop_bumpers.yaml\n  # - global_wizard_qualifier.yaml\n\nevent_player:\n  mode_global_started:\n    - start_mode_field\n  mode_global_will_stop:\n    - stop_mode_field\n    - stop_missions\n  mode_type_mission_started:\n    - stop_mode_field\n  mode_type_mission_stopped{not mode[\"global\"].stopping}:\n    - start_mode_field\n```\n\n----------------------------------------\n\nTITLE: Reduce Network Timeout Xubuntu/Lubuntu\nDESCRIPTION: Modifies the network service configuration to reduce the timeout for network connectivity. This is useful for systems that may not always have an internet connection.  The `TimeoutStartSec` is reduced from 5 minutes to 10 seconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/xubuntu.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nTimeoutStartSec=10sec\n```\n\n----------------------------------------\n\nTITLE: Clearing All Credits - Python\nDESCRIPTION: Shows how to clear all credits using `clear_all_credits(**kwargs)`. The `**kwargs` are catch-all keyword arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/credits.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.modes.credits.clear_all_credits(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Coil in LISY (YAML)\nDESCRIPTION: This snippet demonstrates the basic configuration of a coil in LISY using YAML. It sets the coil number, default pulse length, and allows the coil to be enabled. LISY only supports full power, so `pulse_ms` is the only adjustable parameter.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/drivers.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  c_some_coil:\n    number: 04\n    default_pulse_ms: 10\n    allow_enable: true\n```\n\n----------------------------------------\n\nTITLE: Add a ball to a device (Python)\nDESCRIPTION: Adds a ball to a specific ball device. The `device` parameter is an instance of the BallDevice class, enabling the smart_virtual platform to simulate ball management.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/smart_virtual.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadd_ball_to_device(device: mpf.devices.ball_device.ball_device.BallDevice)\n```\n\n----------------------------------------\n\nTITLE: Processing EOM Response (OPP)\nDESCRIPTION: Processes an End of Message (EOM) response received from the OPP hardware. This method parses the received message and performs any necessary actions based on its content. The message relates to a specific chain, identified by its serial number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nstatic eom_resp(chain_serial, msg)\n```\n\n----------------------------------------\n\nTITLE: Configuring RGBW LEDs in MPF\nDESCRIPTION: This snippet demonstrates how to configure RGBW LEDs in MPF by defining the channels individually. It defines the channels (red, green, blue, white) and specifies the `number` for each channel. The exact number format will depend on your platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/ws2812.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  my_rgbw_serial_led:\n    channels:\n      red:\n        - number: 3-0\n      green:\n        - number: 3-1\n      blue:\n        - number: 3-2\n      white:\n        - number: 4-0\n```\n\n----------------------------------------\n\nTITLE: Unmount USB Drive Safely\nDESCRIPTION: These commands unmount the USB drive from `/mnt` safely after the logging is complete. First `umount /mnt` to unmount the drive, then `sync` to flush any pending writes. After this the drive can be safely removed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/troubleshooting.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\numount /mnt\nsync\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running the MPF Debian Installer\nDESCRIPTION: This snippet clones the `mpf-debian-installer` repository from GitHub, navigates into the directory, makes the `install` script executable, and executes it with sudo privileges.  This installer is supposed to set up MPF and all needed dependencies.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\ncd ~\ngit clone https://github.com/missionpinball/mpf-debian-installer/\ncd mpf-debian-installer/\nchmod +x install && sudo ./install\n```\n\n----------------------------------------\n\nTITLE: Parsing Light Numbers\nDESCRIPTION: Parses a light number string into its corresponding channels on the Spike platform. This is used to determine the specific hardware channels associated with a given light.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nparse_light_number_to_channels(number: str, subtype: str)\n```\n\n----------------------------------------\n\nTITLE: Get Current Item\nDESCRIPTION: This method returns the currently selected item from the randomizer.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/Randomizer.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n`get_current()`\n\nReturn current item.\n```\n\n----------------------------------------\n\nTITLE: Context Manager Logging Assertion in Python\nDESCRIPTION: This method asserts that a log message of a certain level or higher is emitted on a specified logger or its children. It is used as a context manager and yields a recording object with `output` (list of formatted log messages) and `records` (list of LogRecord objects) attributes. The `logger` parameter is the name of the logger, and `level` is the minimum log level to check for.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertLogs('foo', level='INFO') as cm:\nlogging.getLogger('foo').info('first message')\nlogging.getLogger('foo.bar').error('second message')\nself.assertEqual(cm.output, ['INFO:foo:first message',\n'ERROR:foo.bar:second message'])\n```\n\n----------------------------------------\n\nTITLE: Blocking Ball Search\nDESCRIPTION: This code defines the `block` method, which disables ball search if it's enabled or running and prevents it from enabling until `ball_search_unblock()` is called. It takes optional keyword arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef block(**kwargs):\n    \"\"\"Block ball search for this playfield.\n\n    Blocking will disable ball search if it’s enabled or running, and will prevent ball search from enabling if it’s disabled until ball_search_unblock() is called.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Accessing SMBus2 Platform via Code - Python\nDESCRIPTION: Shows how to access the SMBus2 platform instance within the Mission Pinball Framework (MPF) using the `self.machine.hardware_platforms` dictionary. This allows interaction with I2C devices connected via SMBus2.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/smbus2.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['smbus2']\n```\n\n----------------------------------------\n\nTITLE: Assert Game Is Running Python\nDESCRIPTION: This method asserts that a game is currently running.  It's used to confirm that a game has successfully started.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nself.assertGameIsRunning()\n```\n\n----------------------------------------\n\nTITLE: Checking Switch State (Python)\nDESCRIPTION: Checks if a switch is in a specific state (active or inactive) and, optionally, if it has been in that state for a certain duration. It takes a `switch` object, the target `state` (True for active, False for inactive), and an optional `ms` parameter. Returns True if the switch is in the specified state for the given duration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nis_state(switch: mpf.devices.switch.Switch, state, ms=0.0)\n```\n\n----------------------------------------\n\nTITLE: Configure Light on Driver (Python)\nDESCRIPTION: Configures a light on a driver using the provided number, subtype, and platform settings.  This method returns a LightPlatformInterface for controlling the light.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/drivers.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure_light(number: str, subtype: str, platform_settings: dict) -> mpf.platforms.interfaces.light_platform_interface.LightPlatformInterface\n```\n\n----------------------------------------\n\nTITLE: Play Sound on External Card using HardwareSoundPlayer\nDESCRIPTION: The `play(settings, context, calling_context, priority=0, **kwargs)` method is used to play a sound on an external sound card. It takes settings, context, calling context, priority, and keyword arguments to configure the sound playback.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/hardware_sound_player.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nplay(settings, context, calling_context, priority=0, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Add Player to Game Python\nDESCRIPTION: This method adds a player to the current game by simulating a start switch hit and release. It then verifies that the player count has increased by one. This can be called multiple times to add multiple players to the game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.start_game()\nself.add_player()\nself.add_player()\n```\n\n----------------------------------------\n\nTITLE: Error Logging (Python)\nDESCRIPTION: Logs a message at the error level. These messages are always shown in the console and log file. The `error_log` method indicates a critical problem that needs attention.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nerror_log(msg: str, *args, context=None, error_no=None, **kwargs) -> None\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Channels per Color in Parallel LEDs\nDESCRIPTION: Demonstrates how to assign multiple hardware channels to a single color in a parallel LED configuration. This can be useful for increasing brightness or creating special lighting effects.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/leds.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  multi_white_channels:\n    channels:\n      white:\n        - number: 5\n        - number: 6\n        - number: 7\n```\n\n----------------------------------------\n\nTITLE: Accessing Playfields\nDESCRIPTION: Explains how to access playfield instances within the MPF framework using the `self.machine.playfields` collection. It provides examples of accessing playfields by name using both attribute and dictionary notation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nself.machine.playfields.*\n```\n\n----------------------------------------\n\nTITLE: Setting Number of Balls Known in Python\nDESCRIPTION: This code snippet demonstrates how to set the number of balls known by the ball controller. This is useful in tests without ball devices where you need to control the perceived ball count.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nself.set_num_balls_known(3)\n```\n\n----------------------------------------\n\nTITLE: Basic Carousel Mode Configuration (YAML)\nDESCRIPTION: This snippet shows a basic carousel mode configuration, including `start_events`, `stop_events`, `code`, `use_wait_queue`, and `mode_settings`. It defines selectable items, events for selecting items, and events for navigating between items.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/carousel.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_carousel\n# in mode my_carousel\n#config_version=5\nmode:\n  start_events: ball_starting\n  stop_events: my_carousel_item_selected\n  code: mpf.modes.carousel.code.carousel.Carousel\n  use_wait_queue: true\nmode_settings:\n  selectable_items: terra, pyro, space, liquid\n  select_item_events: s_start_inactive\n  next_item_events: s_right_flipper_inactive\n  previous_item_events: s_left_flipper_inactive\nslide_player:\n  my_carousel_terra_highlighted: select_terra\n  my_carousel_liquid_highlighted: select_liquid\n  my_carousel_space_highlighted: select_space\n  my_carousel_pyro_highlighted: select_pyro\nslides:\n  select_liquid:\n    widgets:\n      - type: text\n        text: LIQUID METAL\n        font_size: 100\n        color: yellow\n    transition:\n      type: move_in\n      direction: right\n  select_terra:\n    widgets:\n      - type: text\n        text: TERAFORM\n        font_size: 100\n        color: yellow\n    transition:\n      type: move_in\n      direction: right\n  select_space:\n    widgets:\n      - type: text\n        text: SPACE OUT\n        font_size: 100\n        color: yellow\n    transition:\n      type: move_in\n      direction: right\n  select_pyro:\n    widgets:\n      - type: text\n        text: PYRO\n        font_size: 100\n        color: yellow\n    transition:\n      type: move_in\n      direction: right\n##! test\n#! start_game\n#! advance_time_and_run .1\n#! assert_available_balls_on_playfield 0\n#! assert_text_on_top_slide TERAFORM\n#! post s_right_flipper_inactive\n#! advance_time_and_run .1\n#! assert_text_on_top_slide PYRO\n#! post s_start_inactive\n#! advance_time_and_run .1\n#! assert_available_balls_on_playfield 1\n```\n\n----------------------------------------\n\nTITLE: Testing JAM Rollover Mode in YAML\nDESCRIPTION: This YAML configuration outlines the test cases for the `JAM_rollover` mode. It starts a game, asserts the initial playfield multiplier value, simulates hitting and releasing top lane switches, asserts the updated multiplier values, advances time, drains all balls, and then tests the mode resets after ball drain.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/top_lanes_with_multiplier.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! test\n#! start_game\n#! assert_player_variable 1 pf_multiplier\n#! hit_and_release_switch s_top_lane_J\n#! hit_and_release_switch s_top_lane_A\n#! hit_and_release_switch s_top_lane_M\n#! assert_player_variable 2 pf_multiplier\n#! advance_time_and_run 2\n#! hit_and_release_switch s_top_lane_J\n#! hit_and_release_switch s_top_lane_A\n#! hit_and_release_switch s_top_lane_M\n#! assert_player_variable 3 pf_multiplier\n#! advance_time_and_run 2\n#! drain_all_balls\n#! advance_time_and_run 2\n#! assert_player_variable 1 pf_multiplier\n#! hit_and_release_switch s_top_lane_J\n#! hit_and_release_switch s_top_lane_A\n#! hit_and_release_switch s_top_lane_M\n#! assert_player_variable 2 pf_multiplier\n```\n\n----------------------------------------\n\nTITLE: Parse Express Config (Python)\nDESCRIPTION: This method parses the express configuration for the random event player. It's used to interpret simplified configuration entries. No specific dependencies are listed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/random_event_player.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nget_express_config(value)\n```\n\n----------------------------------------\n\nTITLE: Get Solenoid Count Command (0x04)\nDESCRIPTION: This command (0x04) requests the number of solenoids connected to the hardware platform. It does not require any payload. The response is a single byte representing the number of solenoids (0-127).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nByte        Length      Example     Comment\n---------- ----------- ----------- -----------------------------------\n0           1           4           Command 4 - Get Solenoid Count\n```\n\n----------------------------------------\n\nTITLE: Setting OPP Coil Pulse Time\nDESCRIPTION: This snippet configures the pulse time for an OPP coil. The `default_pulse_ms` parameter specifies the duration (in milliseconds) for which the coil will be initially activated when pulsed. In this example, the coil `some_coil` will be pulsed for 30ms.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/drivers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil:\n    number: 0-12\n    default_pulse_ms: 30\n```\n\n----------------------------------------\n\nTITLE: Multi-Step Animations with Event Triggers (YAML)\nDESCRIPTION: This YAML snippet defines multiple animation events triggered by different events. When an event like `move_up` is posted, the widget will move to the corresponding position.  The `move_home` event demonstrates animating x and y properties simultaneously using `with_previous`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  slide1:\n    widgets:\n      - type: text\n        text: I'M GOING TO MOVE\n        x: 50\n        y: 50\n    animations:\n      move_up:\n        property: y          # if there's just one animation step, we don't need the hyphen\n        value: 100\n      move_down:\n        property: y\n        value: 0\n      move_right:\n        property: x\n        value: 100\n      move_left:\n        property: x\n        value: 0\n      move_home:\n        - property: x\n          value: 50\n        - property: y\n          value: 50\n          timing: with_previous\n```\n\n----------------------------------------\n\nTITLE: Configuring RGBW Serial LEDs with Explicit Channel Assignments\nDESCRIPTION: This configuration snippet details how to configure RGBW serial LEDs, which require explicit channel assignments because they have four channels instead of the standard three. It shows how to map the red, green, blue, and white channels to their respective numbers in the LED chain.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/leds.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  my_rgbw_serial_led:\n    channels:\n      red:\n        - number: 3-0\n      green:\n        - number: 3-1\n      blue:\n        - number: 3-2\n      white:\n        - number: 4-0\n  my_ws2812_after_rgbw:\n    channels:\n      red:\n        - number: 4-1\n      green:\n        - number: 4-2\n      blue:\n        - number: 5-0\n```\n\n----------------------------------------\n\nTITLE: Expire Widget in Widget Player YAML\nDESCRIPTION: This snippet demonstrates how to dynamically set the expiration time for a widget when it is shown via the widget player. The expiration time is not part of the widget's definition, but is applied when a specific event (show_widget_event) is posted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/expire.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nwidgets:\n  my_widget:\n    type: text\n    text: HELLO    # no expiration here\nwidget_player:\n  show_widget_event:\n    my_widget:\n      widget_settings:\n        expire: 2s\n##! test\n#! post show_widget_event\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"HELLO\"\n#! advance_time_and_run 2\n#! assert_text_not_on_top_slide \"HELLO\"\n```\n\n----------------------------------------\n\nTITLE: DataManager Initialization - Python\nDESCRIPTION: Initialization of the TestDataManager class which inherits from the mpf.core.data_manager.DataManager class. This patched version of the DataManager is used in unit tests.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestDataManager.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass mpf.tests.TestDataManager.TestDataManager(data):\n    Bases: mpf.core.data_manager.DataManager\n\n    A patched version of the DataManager which is used in unit tests.\n\n    The main change is that the `save_all()` method doesn’t actually write anything to disk so the tests don’t fill up the disk with unneeded data.\n```\n\n----------------------------------------\n\nTITLE: Raise Config Error Method (Python)\nDESCRIPTION: This method raises a ConfigFileError exception. It is used to signal configuration errors during the setup or operation of the DMD.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/rgb_dmds.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef raise_config_error(msg, error_no, *, context=None) -> NoReturn:\n    # Raise a ConfigFileError exception.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Config Validator Addition in MPF\nDESCRIPTION: This static method adds a configuration dictionary to the MPF's config validator. It takes the machine instance, a key, and a new dictionary to be added to the configuration schema. This is used to extend the configuration options available to MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstatic add_to_config_validator(machine, key, new_dict)\n```\n\n----------------------------------------\n\nTITLE: Set Solenoid Recycle Time (0x19) Example Command\nDESCRIPTION: This example demonstrates the 'Set Solenoid Recycle Time' command (0x19). It shows how to configure solenoid 25 to have a recycle time of 50ms. This configuration prevents rapid pulsing of the solenoid, mitigating overheating risks.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_31\n\nLANGUAGE: None\nCODE:\n```\nByte        Length      Example     Comment\n----------- ----------- ----------- -----------------------------------\n0           1           25          Command 25 - Set Solenoid Recycle\n                                     Time\n\n1           1           25          Configure solenoid 25\n\n2           1           50          Set recycle time to 100ms\n```\n\n----------------------------------------\n\nTITLE: Sound Loop Player Configuration Example\nDESCRIPTION: This example demonstrates how to configure the `sound_loop_player` to trigger various sound loop actions based on events. It shows how to play a sound loop set, play layers, and stop looping layers with options for timing and fade-in effects.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/sound_loop_player.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nsound_loop_player:\n  play_basic_beat:\n    loops:\n      action: play\n      sound_loop_set: basic_beat\n      timing: loop_end\n  add_hi_hats:\n    loops:\n      action: play_layer\n      layer: 1\n      timing: loop_end\n  stop_hi_hats:\n    loops:\n      action: stop_looping_layer\n      layer: 1\n  add_snare:\n    loops:\n      action: play_layer\n      fade_in: 2s\n      layer: 2\n      timing: now\n  add_claps:\n    loops:\n      action: play_layer\n      layer: 3\n      timing: loop_end\n```\n\n----------------------------------------\n\nTITLE: System11OverlayPlatform Class Definition\nDESCRIPTION: Definition of the System11OverlayPlatform class which inherits from DriverPlatform and SwitchPlatform. The class is designed to drive system11 machines using a WPC controller. The constructor takes a machine controller instance as input.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/system11.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass mpf.platforms.system11.System11OverlayPlatform(machine: mpf.core.machine.MachineController):\n    Bases: mpf.core.platform.DriverPlatform, mpf.core.platform.SwitchPlatform\n\n    Overlay platform to drive system11 machines using a WPC controller.\n```\n\n----------------------------------------\n\nTITLE: Getting Stepper Config Section (MPF, Trinamics)\nDESCRIPTION: This class method returns the name of the configuration validator for steppers within the Trinamics Step Rocker platform. This validator is used to ensure that the stepper configuration is valid and conforms to the expected structure.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/trinamics_steprocker.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclassmethod get_stepper_config_section()\n```\n\n----------------------------------------\n\nTITLE: Convert integer to reel list - Python\nDESCRIPTION: Explains how the `int_to_reel_list` method converts an integer value into a list representing each digit's position in the ScoreReelGroup. This list accounts for the physical presence of reels and the existence of fake plastic zero inserts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/score_reel_groups.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef int_to_reel_list(value):\n    \"\"\"Convert an integer to a list of integers that represent each positional digit in this ScoreReelGroup.\n\n    The list returned is in reverse order. (See the example below.)\n\n    The list returned is customized for this ScoreReelGroup both in terms of number of elements and values of None\n    used to represent blank plastic zero inserts that are not controlled by a score reel unit.\n\n    For example, if you have a 5-digit score reel group that has 4 phyiscial reels in the tens through ten-thousands\n    position and a fake plastic “0” insert for the ones position, if you pass this method a value of 12300, it\n    will return [None, 0, 3, 2, 1]\n\n    This method will pad shorter ints with zeros, and it will chop off leading digits for ints that are too long.\n    (For example, if you pass a value of 10000 to a ScoreReelGroup which only has 4 digits, the returns list would\n    correspond to 0000, since your score reel unit has rolled over.)\n\n    Args:\n        value: The interger value you’d like to convert.\n\n    Returns:\n        a list containing the values for each corresponding score reel, with the lowest reel digit position in\n        list position 0.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Eject Coil Jam Pulse in YAML\nDESCRIPTION: This snippet shows how to configure an eject pulse time for when the jam switch is active.  The `eject_coil_jam_pulse` setting, measured in milliseconds, is added to the `bd_trough` ball device to define a specific pulse time when the jam switch is active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_mechanical.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough5, s_trough6, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n```\n\n----------------------------------------\n\nTITLE: Enable Solenoid at Full Power Command (0x15)\nDESCRIPTION: This command enables a solenoid at full power. The payload is the solenoid index. No response is expected.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_24\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tDescription\n1\t1\tIndex `c` of the solenoid to enable\n```\n\n----------------------------------------\n\nTITLE: Warning Log (Python)\nDESCRIPTION: Logs a message at the warning level. Warning messages are always displayed in the console and written to the log file, indicating potential issues.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nwarning_log(msg: str, *args, context=None, error_no=None, **kwargs) → None\n\nLog a message at the warning level.\n\nThese messages will always be shown in the console and the log file.\n```\n\n----------------------------------------\n\nTITLE: Pulse and Enable Solenoid with PWM (0x1A) Example Command\nDESCRIPTION: This example illustrates the 'Pulse and Enable Solenoid with PWM' command (0x1A). It demonstrates how to pulse solenoid 25 for 30ms at 75% power and then hold it at 25% power using PWM. Setting the hold power to 0 allows to only pulse the coil.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_33\n\nLANGUAGE: None\nCODE:\n```\nByte        Length      Example     Comment\n----------- ----------- ----------- -----------------------------------\n0           1           26          Command 26 - Enable Solenoid with\n                                     PWM and Pulse\n\n1           1           25          Enable solenoid 25\n\n2           1           30          30ms initial pulse\n\n3           1           191         191/255 = 75% pulse power\n\n4           1           64          25% hold power\n```\n\n----------------------------------------\n\nTITLE: Assert Tuple Equality - Python\nDESCRIPTION: This assertion verifies if two tuples are equal. The parameters 'tuple1' and 'tuple2' represent the tuples to compare.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nassertTupleEqual(tuple1, tuple2, msg=None)\n```\n\n----------------------------------------\n\nTITLE: Example Log Output: Ball Device Switch States\nDESCRIPTION: This console output shows debug information from the MPF log file regarding the ball trough device (`bd_trough`).  It displays the active and inactive states of the trough switches (`s_trough1`, `s_trough2`, etc.) as the ball count is determined. This output is useful for verifying that the switches are correctly detecting the presence of balls in the trough.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/8_plunger.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n2016-11-18 03:54:06,103 : DEBUG : ball_device.bd_trough : Counting balls by checking switches\n2016-11-18 03:54:06,103 : DEBUG : ball_device.bd_trough : Confirmed active switch: s_trough1\n2016-11-18 03:54:06,103 : DEBUG : ball_device.bd_trough : Confirmed active switch: s_trough2\n2016-11-18 03:54:06,103 : DEBUG : ball_device.bd_trough : Confirmed active switch: s_trough3\n2016-11-18 03:54:06,103 : DEBUG : ball_device.bd_trough : Confirmed active switch: s_trough4\n2016-11-18 03:54:06,103 : DEBUG : ball_device.bd_trough : Confirmed active switch: s_trough5\n2016-11-18 03:54:06,103 : DEBUG : ball_device.bd_trough : Confirmed inactive switch: s_trough_jam\n2016-11-18 03:54:06,103 : DEBUG : ball_device.bd_trough : Counted 5 balls\n2016-11-18 03:54:06,103 : DEBUG : ball_device.bd_trough : Switching to state idle\n```\n\n----------------------------------------\n\nTITLE: Playfield event_ball_search_block() Method\nDESCRIPTION: Describes the `event_ball_search_block()` method which blocks ball search on this playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nevent_ball_search_block(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Get Options - Python\nDESCRIPTION: Returns the options for the machine controller. This allows for configuring the machine behavior during tests.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n`get_options()`\n```\n\n----------------------------------------\n\nTITLE: Configure PIN2DMD hardware settings\nDESCRIPTION: This YAML snippet configures the PIN2DMD hardware settings within the MPF configuration file. It specifies the hardware platform as `pin2dmd`, sets the resolution of the panel, and defines the color panel type. The `debug` option can be uncommented for troubleshooting purposes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pin2dmd/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  rgb_dmd: pin2dmd\npin2dmd:\n   # debug: True           # uncomment this if you experience any issues and need debug output\n  resolution: 128x32       # or 192x64 depending on your panel\n  panel: rgb               # or rbg if colors are swapped\n```\n\n----------------------------------------\n\nTITLE: Custom Method with Unused Parameters (Godot)\nDESCRIPTION: This example illustrates a custom method in Godot that includes the required `settings` and `kwargs` parameters, even if they are not used within the method's implementation. Prefixing unused parameters with an underscore avoids warnings from Godot. The `settings` parameter contains the widget player configuration, while `kwargs` holds the event arguments from the triggering event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/mpf-widget.md#_snippet_1\n\nLANGUAGE: gdscript\nCODE:\n```\nfunc my_custom_method(_settings, _kwargs):\n```\n\n----------------------------------------\n\nTITLE: Configuring Servo and Show for Animation (YAML)\nDESCRIPTION: This example configures a servo named 'my_toy' with two named positions (open_mouth and close_mouth). It defines a show named 'toy_hit' which alternates between these positions with specified durations. The show_player section links the 'my_toy_hit' event to the 'toy_hit' show, looping it twice.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/servos/servo_sequence.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nservos:\n  my_toy:\n    positions:\n      0.0: open_mouth\n      1.0: close_mouth\n    reset_position: 1.0\n    number: 1\nshows:\n  toy_hit:\n    - duration: 1s\n      events: open_mouth\n    - duration: 2s\n      events: close_mouth\nshow_player:\n  my_toy_hit:\n    toy_hit:\n      loops: 2\n```\n\n----------------------------------------\n\nTITLE: Installing an older version of MPF with pip\nDESCRIPTION: This command shows how to install a specific older version of the Mission Pinball Framework Media Controller (mpf-mc) using pip, the Python package installer. This can be useful for working with older projects that require specific versions of MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/faq/installation.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install mpf-mc==0.31\n```\n\n----------------------------------------\n\nTITLE: Test Procedure\nDESCRIPTION: This snippet shows the steps required to test the start button configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/mode_selection.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n#! ##! test\n#! start_game\n#! assert_player_count 1\n#! hit_and_release_switch s_start\n#! assert_player_count 1\n#! start_mode game_running\n#! hit_and_release_switch s_start\n#! assert_player_count 2\n```\n\n----------------------------------------\n\nTITLE: Assert Tuple Equal - Python\nDESCRIPTION: Asserts the equality of two tuples. Raises an error if the tuples are not equal.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n`assertTupleEqual(tuple1, tuple2, msg=None)`\n```\n\n----------------------------------------\n\nTITLE: SmartVirtualHardwarePlatform class definition (Python)\nDESCRIPTION: Defines the base class for the smart_virtual hardware platform, inheriting from VirtualHardwarePlatform.  This allows MPF to simulate hardware interactions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/smart_virtual.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass mpf.platforms.smart_virtual.SmartVirtualHardwarePlatform(machine):\n    Bases: mpf.platforms.virtual.VirtualHardwarePlatform\n```\n\n----------------------------------------\n\nTITLE: Show Player with Start/Stop Actions YAML\nDESCRIPTION: This snippet configures the show player to start and stop shows based on events. The 'start_my_show' event starts 'your_show_name', and the 'stop_my_show' event stops it.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/show_player.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nshow_player:\n  start_my_show:\n    your_show_name: play\n  stop_my_show:\n    your_show_name: stop\n```\n\n----------------------------------------\n\nTITLE: Assert Raises Exception - Python\nDESCRIPTION: Fails the test unless an exception of the specified class is raised by the callable when invoked with the provided arguments. It also supports using a context manager to inspect the exception after the assertion.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n`assertRaises(expected_exception, *args, **kwargs)`\n```\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertRaises(SomeException):\ndo_something()\n```\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertRaises(SomeException) as cm:\ndo_something()\nthe_exception = cm.exception\nself.assertEqual(the_exception.error_code, 3)\n```\n\n----------------------------------------\n\nTITLE: Increase log verbosity for MPF (console)\nDESCRIPTION: This command increases the verbosity of the MPF logs, providing more detailed information for debugging. The `-v` and `-V` flags are used to enable higher levels of logging. This provides more detailed logs about program execution for troubleshooting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/general_debugging.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ mpf game -t -v -V\n```\n\n----------------------------------------\n\nTITLE: Reformatting YAML File with ruamel.yaml (Console)\nDESCRIPTION: This command uses the `yaml round-trip` command with the `--save` flag to reformat a YAML file (`your_file.yaml`) and save the changes. This helps to standardize the indentation and formatting, making it easier to identify parsing errors. The comments are preserved during the reformatting process.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/debugging_yaml_parse_errors.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nyaml round-trip --save your_file.yaml\n```\n\n----------------------------------------\n\nTITLE: Running MPF with default config\nDESCRIPTION: This command starts the MPF game engine using the default configuration file, `config/config.yaml`. It assumes the config file is in the default location relative to the execution directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/game.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mpf game\n```\n\n----------------------------------------\n\nTITLE: Set Pulse On Hit and Release Rule\nDESCRIPTION: Configures a rule for a driver on the system11 overlay. If the driver is not on the A/C relay, it passes the call onto the parent platform. Uses settings like `enable_switch` and `coil`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/system11.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef set_pulse_on_hit_and_release_rule(enable_switch, coil):\n    Configure a rule for a driver on the system11 overlay.\n\n    Will pass the call onto the parent platform if the driver is not on A/C relay.\n```\n\n----------------------------------------\n\nTITLE: Configuring a Counter for Initializing Mansion in MPF (YAML)\nDESCRIPTION: This configuration shows how to use a counter to ensure the Addams Family mansion is initialized only once per game. The counter, named 'initialize_mansion', increments when the 'mode_chair_lit_started' event occurs. It completes when the count reaches 1, triggering the 'initialize_mansion' event. The `persist_state: true` setting is crucial for maintaining the counter's state across game events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/counters.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\ncounters:\n  initialize_mansion:\n    count_events: mode_chair_lit_started\n    events_when_complete: initialize_mansion\n    count_complete_value: 1\n    persist_state: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging (Python)\nDESCRIPTION: Configures the logging level for the DelayManager. This method allows setting the level of detail for log messages written to the console and log file. The `configure_logging` method takes the logger name, console level, file level, and URL base for documentation links as parameters.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_logging(logger: str, console_level: str = 'basic', file_level: str = 'basic', url_base=None)\n```\n\n----------------------------------------\n\nTITLE: Assert Regex Match Absence - Python\nDESCRIPTION: This assertion confirms that a given text does not match the provided regular expression pattern. It is useful for verifying that certain patterns are not present in strings, for example, error messages or log outputs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nassertNotRegex(text, unexpected_regex, msg=None)\n```\n\n----------------------------------------\n\nTITLE: Get Switch Count Response (0x09)\nDESCRIPTION: This is the response to the Get Switch Count command (0x09). It returns a single byte indicating the number of switches supported by the platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_13\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tDescription\n0\t1\tSwitch count `s` (0 to 127)\n```\n\n----------------------------------------\n\nTITLE: Handle Ignorable Runtime Exception - Python\nDESCRIPTION: Handles ignorable runtime exceptions by raising an exception during development/testing for easier debugging or logging an error during production. Takes the exception message as input.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestDataManager.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef ignorable_runtime_exception(msg: str) -> None:\n    Handle ignorable runtime exception.\n\n    During development or tests raise an exception for easier debugging. Log an error during production.\n```\n\n----------------------------------------\n\nTITLE: Events Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates an `events:` configuration, linking game events to credit awards. It defines how specific events, such as specials, replays, high scores, and matches, award credits to the player, providing a mechanism for event-driven credit allocation in MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/credits.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncredits:\n   # ...\n  events:\n    - event: special\n      type: special\n      credits: 1\n    - event: replay\n      type: replay\n      credits: 1\n    - event: high_score_credit\n      type: high_score\n      credits: 1\n    - event: match\n      type: match\n      credits: 1\n```\n\n----------------------------------------\n\nTITLE: Shaker Motor Configuration with Shows YAML\nDESCRIPTION: Configures a shaker motor within a show for timed activation. It defines the coil, the show with enable and disable steps, and uses `show_player` to play the show. The configuration includes durations and coil actions within the show steps.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/shaker.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  c_shaker:\n    number:\n    default_pulse_ms: 1\n    default_hold_power: 0.125    # keep this low\n\n##! mode: your_mode\nshows:\n  my_show_with_shaker:\n    - duration: 1s\n      coils:\n        c_shaker: enable\n#!       events: test_event\n      # add some slides, lights or sounds here\n    - duration: 1s\n      coils:\n        c_shaker: disable\n      # add some more slides, lights or sounds here\n\nshow_player:\n  play_show_with_shaker:\n    my_show_with_shaker:\n      loops: -1\n##! test\n#! start_game\n#! mock_event test_event\n#! start_mode your_mode\n#! post play_show_with_shaker\n#! advance_time_and_run .5\n#! assert_event_called test_event\n```\n\n----------------------------------------\n\nTITLE: Removing a Mode Start Method (Python)\nDESCRIPTION: Removes a previously registered start method. This is useful for undoing registrations or cleaning up resources. The parameters should match those used when the method was originally registered.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/mode_controller.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.machine.mode_controller.remove_start_method(start_method, config_section_name=None, priority=0, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Reformatting MPF Config Files with mpf format\nDESCRIPTION: This snippet shows how to use the `mpf format` command-line tool to reformat an MPF YAML configuration file.  The command parses the config file, displays a preview of the proposed changes (diff), and does not write changes unless the `--yes` option is included. This tool helps to lint and format MPF config files. The tool can be run from the command line.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/format.md#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\n$ mpf format config/config.yaml\nParsing single test config/config.yaml.\nConfig is not linted.\n---\n+++\n@@ -1,13 +1,13 @@\n #config_version=5\n\n config:\n-- shots.yaml\n-- switches.yaml\n-- coils.yaml\n-- devices.yaml\n-- leds.yaml\n-- slides.yaml\n-- sound.yaml\n+  - shots.yaml\n+  - switches.yaml\n+  - coils.yaml\n+  - devices.yaml\n+  - leds.yaml\n+  - slides.yaml\n+  - sound.yaml\n\n mpf:\n   device_modules:\n@@ -203,7 +203,7 @@\n       0.54: servo_pos2\n     ball_search_min: 0.35\n     ball_search_max: 0.55\n*  debug: True\n+    debug: true\n   servo_figure_back:\n     number: servo_back-64-0\n     reset_events: machine_reset_phase_3\n@@ -217,8 +217,7 @@\n       0.31: servo_pos2\n     ball_search_min: 0.1\n     ball_search_max: 0.3\n*  debug: True\n+    debug: true\n\nNot writing back changes. Use --yes to do this.\n```\n\n----------------------------------------\n\nTITLE: Install Homebrew (macOS)\nDESCRIPTION: This command installs Homebrew, a package manager for macOS. Homebrew is used to install libraries and support files required by MPF, such as SDL2, SDL2_mixer, SDL2_image, and gstreamer. The command downloads and executes an installation script from GitHub.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/mac.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Downgrade/Install Specific Release - console\nDESCRIPTION: This command installs a specific version of MPF and MPF-MC using pip3. Replace `x.yy.z` with the desired version number. This is useful for downgrading to a stable release or installing a particular version for compatibility. This command ensures the specified version is installed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\npip3 install mpf[all]==x.yy.z\n```\n\nLANGUAGE: console\nCODE:\n```\npip3 install mpf-mc==x.yy.z\n```\n\n----------------------------------------\n\nTITLE: Check Python Version in Terminal (macOS)\nDESCRIPTION: This command checks the installed Python version in the terminal.  It is used to ensure that a supported version of Python is installed before proceeding with the MPF installation. The expected output is a string like \"Python 3.9.13\".\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/mac.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 --version\n```\n\n----------------------------------------\n\nTITLE: Adding a Setting (Python)\nDESCRIPTION: Demonstrates the method to add a new setting to the settings controller.  Requires an instance of `SettingEntry` to be passed as the `setting` parameter.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/settings.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nadd_setting(setting: mpf.core.settings_controller.SettingEntry)\n```\n\n----------------------------------------\n\nTITLE: Add Platform (Python)\nDESCRIPTION: Makes an additional hardware platform interface available to MPF during tests.  The name must match a platform file in the mpf/platforms folder.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nadd_platform(name: str) → None\n\nMake an additional hardware platform interface available to MPF.\n\nParameters:\n\n* **name** – String name of the platform to add. Must match the name of a platform file in the mpf/platforms folder (without the .py extension).\n```\n\n----------------------------------------\n\nTITLE: Overriding Platform for Individual MPF Device\nDESCRIPTION: This snippet demonstrates how to override the platform for a specific device by adding the `platform:` setting to the device's configuration. In this example, most lights use the FAST platform, but one specific LED uses FadeCandy.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/platform.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: fast\nlights:\n  led00:\n    number: 0-0\n  led01:\n    number: 0\n    platform: fadecandy\n```\n\n----------------------------------------\n\nTITLE: Verifying Event Calls with assertEventCalled() in Python\nDESCRIPTION: The `assertEventCalled()` method asserts that a specific event has been called during the test. It requires the event to be mocked beforehand using `self.mock_event()`. The method can optionally verify the number of times the event was called, allowing for detailed testing of event handling logic.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nself.mock_event('my_event')\nself.assertEventNotCalled('my_event')  # This will pass\n\nself.post_event('my_event')\nself.assertEventCalled('my_event') # This will pass\nself.assertEventCalled('my_event', 1)  # This will pass\n\nself.post_event('my_event')\nself.assertEventCalled('my_event') # This will pass\nself.assertEventCalled('my_event', 2)  # This will pass\n```\n\n----------------------------------------\n\nTITLE: Run Hardware Scan using mpf hardware scan\nDESCRIPTION: This command allows you to determine if the LISY platform is communicating correctly with MPF. It displays detailed information about the hardware including LISY version, API version, and counts for inputs, coils, lights and displays. Ensure MPF is installed and configured to use the LISY platform before running.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/troubleshooting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mpf hardware scan\n\nLISY connected via network at localhost:1234\nHardware: LISY1 Lisy Version: 4.01 API Version: 0.8\nInput count: 88 Input map: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87']\nCoil count: 9\nModern lights count: 0\nTraditional lights count: 40\nDisplay count: 5\n```\n\n----------------------------------------\n\nTITLE: Map Keyboard Inputs to Switches and Events with INI\nDESCRIPTION: This code snippet shows how to map keyboard inputs to switches and events for simulating MPF behavior during development using the `[keyboard]` section in the `gmc.cfg` file. This allows for testing and debugging without physical hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/gmc-cfg.md#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[keyboard]\n1=[\"switch\", \"s_switch_1\"]\nenter=[\"switch\", \"s_start_button\"]\n6=[\"switch\", \"s_drop_1\", \"active\"]\nshift+6=[\"switch\", \"s_drop_1\", \"inactive\"]\nx=[\"switch\", \"s_trough_6\", \"toggle\"]\nm=[\"event\", \"start_mode_multiball\"]\n```\n\n----------------------------------------\n\nTITLE: Renaming Sound Files in MPF-MC Configuration\nDESCRIPTION: This code snippet demonstrates how to rename a sound file within the MPF configuration.  It defines the new name `triangle` and maps it to the original filename `22783__franciscopadilla__80-mute-triangle.wav` using the `file` property. This simplifies referencing the sound in other configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/basic_setup.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsounds:\n  triangle:\n    file: 22783__franciscopadilla__80-mute-triangle.wav\n```\n\n----------------------------------------\n\nTITLE: Playfield event_ball_search_enable() Method\nDESCRIPTION: Describes the `event_ball_search_enable()` method, which enables ball search for the playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nevent_ball_search_enable(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Get Hardware Switch States on SpiBitBangPlatform\nDESCRIPTION: This snippet shows the `get_hw_switch_states` method of the `SpiBitBangPlatform` class. This method reads the initial hardware state of the switches. It always returns false for all inputs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spi_bit_bang.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nget_hw_switch_states()\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit and Enable and Release Rule\nDESCRIPTION: Sets a hardware rule to pulse a coil when a switch is hit, enable the coil, and then release the coil. Used for single coil flippers and dual-wound flipper hold coils.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_enable_and_release_rule(enable_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings)\n```\n\n----------------------------------------\n\nTITLE: Defining and Chaining Animation for Repeating Effect\nDESCRIPTION: This YAML snippet defines a `pulse` animation which fades opacity between 0 and 1, and then chains it together three times using the `flash_3x` animation. This is applied to `widget1`. The animation chain pulse, pulse, pulse will cause the widget to pulse three times when the `flash_3x` event is posted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nanimations:\n  pulse:\n    - property: opacity\n      value: 0\n      duration: 100ms\n    - property: opacity\n      value: 1\n      duration: 100ms\n      timing: after_previous\nwidgets:\n  widget1:\n    - type: text\n      text: HELLO\n      animations:\n        flash_3x: pulse, pulse, pulse\n```\n\n----------------------------------------\n\nTITLE: Line Widget Example Configuration YAML\nDESCRIPTION: This configuration demonstrates various uses of the `line` widget in MPF to draw lines with different properties on a slide. It includes settings for `points`, `color`, `thickness`, `cap`, and `close` to customize the appearance of the lines.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/line.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nslide_player:\n  mc_ready:\n    line_example:\n      - type: line\n        points: 0, 300, 800, 300\n      - type: line\n        points: 0, 100, 800, 100\n      - type: line\n        points: 400, 95, 400, 0\n        color: red\n        thickness: 5\n        cap: square\n      - type: line\n        points: 100, 500, 150, 550, 200, 450\n        color: lime\n        thickness: 2\n      - type: line\n        points: 500, 150, 600, 350, 650, 200\n        color: blue\n        close: true\n        thickness: 3\n```\n\n----------------------------------------\n\nTITLE: Defining a Sequence Shot in YAML\nDESCRIPTION: This YAML configuration defines a sequence shot named \"ramp\" that requires hitting the \"s_ramp_entry\" switch followed by the \"s_ramp_success\" switch within a 3-second timeout.  When both switches are hit in sequence, the `ramp_hit` event is triggered. The switches `s_ramp_entry` and `s_ramp_success` are defined with their respective hardware numbers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/shots/sequence_shots.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_ramp_entry:\n    number: 1\n  s_ramp_success:\n    number: 2\nsequence_shots:\n  ramp:\n    switch_sequence: s_ramp_entry, s_ramp_success\n    sequence_timeout: 3s\n```\n\n----------------------------------------\n\nTITLE: Handle Ignorable Runtime Exception (Python)\nDESCRIPTION: Handles runtime exceptions that can be ignored. During development or tests, it raises an exception for easier debugging. During production it logs an error.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MockBcpClient.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nignorable_runtime_exception(msg: str) → None\n\nHandle ignorable runtime exception.\n\nDuring development or tests raise an exception for easier debugging. Log an error during production.\n```\n\n----------------------------------------\n\nTITLE: Adding a reusable widget to the current slide (YAML)\nDESCRIPTION: This snippet shows how to add a reusable widget to the current slide on the default display using the `widget_player:` section of an MPF config file. When the event *some_event* is posted, the widget called *laughing_jackal* is added to the current slide. This is the \"express\" config method.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_player:\n  some_event: laughing_jackal\n  some_other_event: another_widget\n```\n\n----------------------------------------\n\nTITLE: Running MPF with the Config File using doscon\nDESCRIPTION: This snippet demonstrates how to run the Mission Pinball Framework (MPF) with a specific configuration file using the `mpf both` command in the command line. It shows the command to execute from within the directory containing the `config.yaml` file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/17_add_lights_leds.md#_snippet_5\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial_step_17>mpf both\n```\n\n----------------------------------------\n\nTITLE: Assert Sequence Equal - Python\nDESCRIPTION: Asserts the equality of two ordered sequences (lists, tuples, etc.). The function verifies that the sequences are of the same type and contain the same elements in the same order.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n`assertSequenceEqual(seq1, seq2, msg=None, seq_type=None)`\n```\n\n----------------------------------------\n\nTITLE: Accept Connection (Python)\nDESCRIPTION: Handles an incoming connection from a remote client within the mock BCP environment. The `accept_connection` method simulates the acceptance of a connection request.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MockBcpClient.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\naccept_connection(receiver, sender)\n\nHandle incoming connection from remote client.\n```\n\n----------------------------------------\n\nTITLE: Configure Chimes and Score Queues in MPF (YAML)\nDESCRIPTION: This YAML configuration defines coils for chimes and a score queue named 'score'. The 'chimes' setting maps which chime to play for each digit as the score is added, from thousands to single digits, with 'None' to not play a chime for that digit. Score is added using score_queue_player events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/scoring/ss_style_score_queues.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_chime_1000:\n    number:\n  c_chime_100:\n    number:\n  c_chime_10:\n    number:\nscore_queues:\n  score:\n    chimes: c_chime_1000, c_chime_100, c_chime_10,  None\n##! mode: my_mode\n# in your mode\nscore_queue_player:\n  score_2k:\n    score: 2000\n  score_200:\n    score: 200\n##! test\n#! start_game\n#! assert_player_variable 0 score\n#! start_mode my_mode\n#! post score_2k\n#! post score_200\n#! advance_time_and_run .1\n#! assert_player_variable 1000 score\n#! advance_time_and_run .2\n#! assert_player_variable 2000 score\n#! advance_time_and_run .2\n#! assert_player_variable 2100 score\n#! advance_time_and_run .2\n#! assert_player_variable 2200 score\n```\n\n----------------------------------------\n\nTITLE: Adding Mode Event Handler\nDESCRIPTION: Registers an event handler that is automatically removed when the mode stops. It's similar to the Event Manager's add_handler() method, but automatically unregisters handlers when the mode ends. Returns an EventHandlerKey.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/attract.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadd_mode_event_handler(event: str, handler: Callable, priority: int = 0, **kwargs) → mpf.core.events.EventHandlerKey\n```\n\n----------------------------------------\n\nTITLE: Stopping OPP Hardware\nDESCRIPTION: Stops the OPP hardware and closes all connections. This method is called when the machine is shutting down to ensure a clean exit and prevent resource leaks.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nstop()\n```\n\n----------------------------------------\n\nTITLE: Testing Slide Visibility with Assertions (Updated)\nDESCRIPTION: This snippet contains a test assertion for verifying that the `welcome_slide` is on top. It is designed to confirm the slide's visibility during the game's execution, as part of an automated test suite after initial configuration or changes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/16_attract_mode_show.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! test\n#! assert_slide_on_top welcome_slide\n```\n\n----------------------------------------\n\nTITLE: Specifying config_version in MPF YAML\nDESCRIPTION: This snippet shows how to specify the config_version in an MPF YAML configuration file. This ensures that MPF can load the config file and that it is compatible with the version of MPF that is running. The line starts with a hash (#) so it's ignored by the YAML processor but read by MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/config_version.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#config_version=5\n```\n\n----------------------------------------\n\nTITLE: Shutdown Machine (Python)\nDESCRIPTION: Shuts down the machine, releasing resources and preparing for termination.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nshutdown() → None\n\nShutdown the machine.\n```\n\n----------------------------------------\n\nTITLE: Getting Machine Path in Python\nDESCRIPTION: This code snippet demonstrates how to override the `get_machine_path` method to specify the path to the machine folder to be used for the tests. The path is relative to the MPF package root.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef get_machine_path(self):\n  return 'tests/machine_files/my_test/'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Switch Configuration Example YAML (Missing Device Name)\nDESCRIPTION: This YAML snippet illustrates a common mistake that leads to the 'CFE-DeviceManager-3' error.  The device name (`s_flipper_left`) is omitted, causing MPF to interpret `number` and `label` as device names with invalid configurations. This results in MPF expecting a dictionary but instead finding single values.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-DeviceManager-3.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# BROKEN CONFIG\nswitches:\n  number: 1\n  label: My Left Flipper\n```\n\n----------------------------------------\n\nTITLE: Removing and replacing the bridge file\nDESCRIPTION: These commands remove the old bridge file, copies the new bridge file from the location to the SD card and sets it to be executable.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/mpf-spike-bridge.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrm <sd_mount>/bin/bridge cp <your_path>/mpf-spike-bridge/bridge <sd_mount>/bin/bridge chmod 755 <sd_mount>/bin/bridge\n```\n\n----------------------------------------\n\nTITLE: Clearing Hardware Rule (Python)\nDESCRIPTION: Clears all hardware rules associated with a specific switch and driver combination. This method takes a HardwareRule object as input and removes the corresponding rule from the platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/platform_controller.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclear_hw_rule(rule: mpf.core.platform_controller.HardwareRule)\n```\n\n----------------------------------------\n\nTITLE: Get Config File - Python\nDESCRIPTION: This method returns the string name of the machine configuration file used for the tests. Override this method in test classes to specify the config file needed for specific tests. The return value includes the '.yaml' file extension.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nget_config_file()\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_config_file(self):\n    return 'my_config.yaml'\n```\n\n----------------------------------------\n\nTITLE: Playfield get_additional_ball_capacity() Method\nDESCRIPTION: Describes the `get_additional_ball_capacity()` method, which returns the number of additional balls the playfield can hold.  It always returns 999.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclassmethod get_additional_ball_capacity()\n```\n\n----------------------------------------\n\nTITLE: Widget Positioning in Widget Player YAML\nDESCRIPTION: This snippet demonstrates how to position a widget via the widget player, triggered by an event. It positions a text widget with an offset from the left and top, and adjusts the bottom anchor when the `some_event` event is posted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/positioning.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nwidgets:\n  my_widget:\n    - type: text\n      text: \"MY WIDGET\"\nwidget_player:\n  some_event:\n    my_widget:\n      widget_settings:\n        x: left+10%\n        y: top-10%\n        adjust_bottom: 2\n##! test\n#! post some_event\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"MY WIDGET\"\n```\n\n----------------------------------------\n\nTITLE: Displaying a Slide with the slide_player in MPF\nDESCRIPTION: This YAML configuration snippet demonstrates how to use the `slide_player` to display a slide named `good_job` when the event `left_lane_hit` is triggered. The slide is defined (though commented out) with a text element displaying \"GOOD JOB\". The `slide_player` maps the event to the slide. The test section posts the event, advances time, and verifies the text on the top slide.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/showing_slides.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  left_lane_hit: good_job\n##! test\n#! post left_lane_hit\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"GOOD JOB\"\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration - Passing Show Tokens (YAML)\nDESCRIPTION: This snippet illustrates passing show tokens to the 'light_gadget_letter' show. These tokens dynamically control what light flashes and what color it flashes in, by specifying values for `gadget_letter_made_led`, `gadget_letter_made_color`, and `gadget_letter_final_color`. This configuration allows the show to be customized for each letter in the GADGET word.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n#! show_player:\n#!   gadget_g1_complete:\n#!     light_gadget_letter:\n#!       priority: 10\n#!       key: gadget_g1_hit_show\n#!       show_tokens:\n        gadget_letter_made_led: l_gadget_g1\n        gadget_letter_made_color: yellow\n        gadget_letter_final_color: yellow\n```\n\n----------------------------------------\n\nTITLE: Compile and install yaml-cpp from source\nDESCRIPTION: These commands compile and install the yaml-cpp library from source.  A specific version (0.2.5) included in the osx-proc-support package is required because newer versions are incompatible. The commands extract the source code, create a build directory, configure the build with CMake, compile the library with 'make', and install it system-wide with 'sudo make install'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/mac.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/proc/osx-proc-support\ntar -xzf yaml-cpp-0.2.5.tar.gz\ncd yaml-cpp-0.2.5\nmkdir bin\ncd bin\ncmake ..\nmake\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Configuring SPIKE Hardware Options in MPF (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the `spike:` section of your MPF machine-wide config file for a Stern SPIKE machine. It sets the serial port, baud rates, flow control, debug mode, and the list of nodes to use. It also includes the hardware platform definition.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/spike.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: spike\nspike:\n  port: /dev/ttyUSB0\n  baud: 115200\n  runtime_baud: 3000000\n  flow_control: true\n  debug: false\n  nodes: 0, 1, 8, 9, 10, 11\n```\n\n----------------------------------------\n\nTITLE: Conditional Event for Gadget 'A' Completion (YAML)\nDESCRIPTION: This snippet demonstrates a conditional event for completing the gadget 'A'. When the 'a' switch is active, the event 'gadget_a_complete' is triggered only if 'a' hasn't already been hit (i.e., its value in the accrual is False). It checks the second index (`value[1]`) of the 'gadget_accrual' device.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: gadget\n#! event_player:\n  s_gadget_a_active:\n    #if a is hit and unlit\n    - gadget_a_complete{device.accruals.gadget_accrual.value[1]==False}\n```\n\n----------------------------------------\n\nTITLE: Dual-Wound Coil Configuration in MPF (YAML)\nDESCRIPTION: This snippet illustrates the configuration of dual-wound coils in MPF, where the main and hold windings are defined separately.  It includes the hardware number for each winding, a default pulse time for the main winding, and a default hold power value for the hold winding. The `number` depends on the specific hardware platform being used.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/coils/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_your_coil_main:\n    number: 00   # depends on your platform and hardware\n    default_pulse_ms: 20\n  c_your_coil_hold:\n    number: 01   # depends on your platform and hardware\n    default_pulse_ms: 10\n    default_hold_power: .2\n```\n\n----------------------------------------\n\nTITLE: Fixing Serial Port Permission Denied Error on Linux\nDESCRIPTION: This snippet shows how to resolve a \"Permission denied\" error when accessing serial ports on Linux. It involves adding the user to the `dialout` group, which requires a PC restart.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/troubleshooting.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsudo usermod -a -G dialout $USER\n```\n\n----------------------------------------\n\nTITLE: Checking if an Event was Called With Kwargs in MpfTestCase\nDESCRIPTION: This assertion method verifies if a specific event has been called with certain keyword arguments during the test. This allows for detailed verification of event calls, ensuring that the correct parameters were passed. The event must be mocked using `self.mock_event()` before using this method.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.mock_event('jackpot')\n\nself.post_event('jackpot', count=1, first_time=True)\nself.assertEventCalled('jackpot')  # This will pass\nself.assertEventCalledWith('jackpot', count=1, first_time=True)  # This will also pass\nself.assertEventCalledWith('jackpot', count=1, first_time=False)  # This will fail\n```\n\n----------------------------------------\n\nTITLE: Running MPF Unit Tests\nDESCRIPTION: This command runs the MPF unit tests to ensure that changes have not introduced any regressions. It uses the unittest module to discover and execute all tests within the specified directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/about/contributing_to_mpf.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m unittest discover -s mpf.tests\n```\n\n----------------------------------------\n\nTITLE: List Coils with MPF Service CLI\nDESCRIPTION: This command lists all configured coils in the MPF configuration using the MPF Service CLI.  It's used to verify that MPF recognizes the coils and their configured names.  It requires the MPF game to be running in another console.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/includes/troubleshooting_coils.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlist_coils\n```\n\n----------------------------------------\n\nTITLE: Get Data - Python\nDESCRIPTION: Retrieves data from the DataManager. Optionally, a section (dictionary key) can be specified to retrieve data from a particular section, otherwise returns the entire data dictionary.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestDataManager.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef get_data(section=None):\n    Return the value of this DataManager’s data.\n\n    Parameters:\n\n    * **section** – Optional string name of a section (dictionary key) for the data you want returned. Default is None which returns the entire dictionary.\n```\n\n----------------------------------------\n\nTITLE: Register Monitor (Python)\nDESCRIPTION: Registers a monitor callback function for a specific monitor class.  Monitors allow components to observe internal MPF events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nregister_monitor(monitor_class: str, monitor: Callable[[...], Any]) → None\n\nRegister a monitor.\n\nParameters:\n\n* **monitor_class** – String name of the monitor class for this monitor that’s being registered.\n* **monitor** – Callback to notify\n\nMPF uses monitors to allow components to monitor certain internal elements of MPF.\n\nFor example, a player variable monitor could be setup to be notified of any changes to a player variable, or a switch monitor could be used to allow a plugin to be notified of any changes to any switches.\n\nThe MachineController’s list of registered monitors doesn’t actually do anything. Rather it’s a dictionary of sets which the monitors themselves can reference when they need to do something. We just needed a central registry of monitors.\n```\n\n----------------------------------------\n\nTITLE: Shutdown Computer Mode Configuration (MPF, YAML)\nDESCRIPTION: This YAML code configures the `shutdown_computer` mode in MPF. It sets the mode's start and stop events, priority, and the Python code to be executed. It defines a combo switch that triggers the `shutdown_host_computer` event when the left flipper and start button are held down for 5 seconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/finalization/power.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nmode:\n  start_events: mode_base_started\n  stop_events: shutdown_mode_cancel\n  priority: 400\n  code: shutdown_computer.shutdown_computer\n\ncombo_switches:\n  shutdown_hold:\n    switches_1: s_left_flipper\n    switches_2: s_start\n    hold_time: 5s\n    events_when_both: shutdown_host_computer\n```\n\n----------------------------------------\n\nTITLE: Configuring RGB DMD using Pin2DmdHardwarePlatform\nDESCRIPTION: This method configures the RGB DMD using the PIN2DMD platform. It takes the name of the DMD as input and sets up the necessary hardware resources.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/pin2dmd.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Create Autostart Desktop Entry\nDESCRIPTION: Creates a desktop entry file to automatically launch the MPF run script when XFCE starts.  Requires the user's username, machine folder name, and the path to the run script. The `Exec` parameter specifies the command to execute.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/xubuntu.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n[Desktop Entry]\nVersion=1.0\nName=MPF\nComment=Mission Pinball\nExec=/home/your_username/your_machine_folder/run.sh\nPath=/home/your_username/your_machine_folder/\nTerminal=false\nType=Application\n```\n\n----------------------------------------\n\nTITLE: Posting an Event in MPF (Python)\nDESCRIPTION: This snippet demonstrates how to post an event in the MPF environment using the `post_event` method. The first example posts a simple event, while the second posts an event and advances the simulation time. This is useful for triggering game logic during testing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nself.post_event('shot1_hit')\n```\n\nLANGUAGE: python\nCODE:\n```\nself.post_event('tilt', 1.5)\n```\n\n----------------------------------------\n\nTITLE: MPF Game Launch Command\nDESCRIPTION: Shows the general pattern for launching an MPF game from the command line, combining the executable path, executable arguments, machine path, and MPF arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/launching-the-mpf-game-with-godot.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n<executable_path> <executable_args> <machine_path> <mpf_args>\n```\n\n----------------------------------------\n\nTITLE: Including SmartLEDShieldV4 library\nDESCRIPTION: This code snippet shows the line needed to include the SmartLEDShieldV4 library when using V4 of the shield. This line must be included as the very first line of code in your sketch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/smartmatrix.md#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <SmartLEDShieldV4.h> // this line must be first\n```\n\n----------------------------------------\n\nTITLE: Installing ruamel.yaml.cmd (Console)\nDESCRIPTION: This command installs the `ruamel.yaml.cmd` extension, a tool used for reformatting YAML files to help identify and fix parsing errors. The specific version 0.2 is installed. This tool helps to normalize the YAML file, making it easier to spot formatting issues.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/debugging_yaml_parse_errors.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npip3 install ruamel.yaml.cmd==0.2\n```\n\n----------------------------------------\n\nTITLE: Raise Config Error - Python\nDESCRIPTION: Raises a ConfigFileError exception, indicating a configuration problem. Takes the error message and error number as input, with an optional context.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestDataManager.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef raise_config_error(msg, error_no, *, context=None) -> NoReturn:\n    Raise a ConfigFileError exception.\n```\n\n----------------------------------------\n\nTITLE: Adding Another Slide for Attract Mode\nDESCRIPTION: This snippet adds a second slide called `attract_started` with a text widget that displays the text \"ATTRACT MODE\". This slide is intended to be shown during attract mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  welcome_slide:\n    widgets:\n      - type: text\n        text: PINBALL!\n        font_size: 50\n        color: red\n      - type: rectangle\n        width: 240\n        height: 60\n  attract_started:\n    widgets:\n      - text: ATTRACT MODE\n        type: text\n```\n\n----------------------------------------\n\nTITLE: TestMachineController Class Definition (Python)\nDESCRIPTION: Defines the TestMachineController class, inheriting from MachineController.  This class overrides certain aspects of the MachineController to facilitate testing, such as using a TestDataManager, a test clock, and merging test configuration patches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass mpf.tests.MpfTestCase.TestMachineController(options, config, config_patches, config_defaults, clock, mock_data, enable_plugins=False):\n    Bases: `mpf.core.machine.MachineController`\n\n    A patched version of the MachineController used in tests.\n\n    The TestMachineController has a few changes from the regular machine controller to facilitate running unit tests, including:\n\n    * Use the TestDataManager instead of the real one.\n    * Use a test clock which we can manually advance instead of the regular clock tied to real-world time.\n    * Only load plugins if self._enable_plugins is True.\n    * Merge any test_config_patches into the machine config.\n    * Disabled the config file caching to always load the config from disk.\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch\nDESCRIPTION: This command creates a new local Git branch from the current branch. It is generally used to isolate development work on a specific feature or bug fix.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/about/contributing_to_mpf.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b your_feature_name\n```\n\n----------------------------------------\n\nTITLE: Example Response to Get Sound Count (0x05)\nDESCRIPTION: Example of the response to the 'Get Sound Count' command (0x05). In this example, the platform supports 128 sounds with numbers 0 to 127.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_11\n\nLANGUAGE: none\nCODE:\n```\nByte        Length      Example     Comment\n---------- ----------- ----------- -----------------------------------\n0           1           128         Platform supports 128 sounds with\n                                     numbers 0 to 127.\n```\n\n----------------------------------------\n\nTITLE: Text Widget Incorrect Multiline Text YAML Configuration\nDESCRIPTION: This code snippet shows the incorrect way to configure multiline text in a text widget.  The backslash character will be treated as a literal character in this case.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/text/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntext: Multiple\\nlines\n```\n\n----------------------------------------\n\nTITLE: Add Segment Display Platform in MPF\nDESCRIPTION: Configures MPF to use light_segment_displays as the platform for segment displays, enabling MPF to send commands to the light controller. This is a necessary step for using NeoSeg displays.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/cobrapin/cobrapin_serial_segment_displays.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  segment_displays: light_segment_displays\n```\n\n----------------------------------------\n\nTITLE: Set Score Reel Group Value - Python\nDESCRIPTION: Describes how to set the value displayed on the ScoreReelGroup using the `set_value` method. This method instantly updates the reel values to match the provided integer, potentially causing temporary display of nonsensical values during the transition.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/score_reel_groups.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef set_value(value):\n    \"\"\"Reset the score reel group to display the value passed.\n\n    This method will “jump” the score reel group to display the value that’s passed as an it.\n    (Note this “jump” technique means it will just move the reels as fast as it can, and nonsensical values\n    might show up on the reel while the movement is in progress.)\n\n    This method is used to “reset” a reel group to all zeros at the beginning of a game, and can also be used to\n    reset a reel group that is confused or to switch a reel to the new player’s score if multiple players a\n    sharing the same reel group.\n\n    Note you can choose to pass either an integer representation of the value, or a value list.\n\n    Args:\n        value: An integer value of what the new displayed value (i.e. score) should be. This is the default\n            option if you only pass a single positional argument, e.g. set_value(2100).\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Camera Widget Configuration Example in YAML\nDESCRIPTION: This example demonstrates how to configure the camera widget within the MPF Media Controller (mpf-mc) and how to use it in a slide using the slide_player. It sets the widget type to \"camera\" and defines the width and height of the video feed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/camera.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nmpf-mc:\n  widgets:\n    camera: mpfmc.widgets.camera\nslide_player:\n  mc_ready:\n    camera_example:\n      - type: camera\n        width: 800\n        height: 600\n```\n\n----------------------------------------\n\nTITLE: Configure Slide to Show on MPF Start (YAML)\nDESCRIPTION: This snippet configures the `slide_player` to show the \"window_slide_1\" slide on the \"init_done\" event. This ensures that the segment display emulator widget is displayed when MPF starts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/segment_display_emulator/how_to.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  init_done:\n    window_slide_1:\n      target: window\n```\n\n----------------------------------------\n\nTITLE: Example Usage of get_machine_path() in Python\nDESCRIPTION: This snippet shows how to override the `get_machine_path()` method in a test class to define a custom machine folder path.  This is needed for tests that rely on specific machine configuration files or assets located within a custom directory structure. The path is relative to the MPF package root.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef get_machine_path(self):\n  return 'tests/machine_files/my_test/'\n```\n\n----------------------------------------\n\nTITLE: Show Configuration with Arbitrary Token Name (YAML)\nDESCRIPTION: This show demonstrates that the token name is arbitrary and can be anything (in this case, 'corndog').  The token still functions as a find-and-replace when the show starts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: 0\n  lights:\n    (corndog): red\n- time: 1\n  lights:\n    (corndog): off\n```\n\n----------------------------------------\n\nTITLE: Comparing unordered sequences using assertCountEqual\nDESCRIPTION: This example shows how to use `assertCountEqual` to compare two unordered sequences, ensuring that they contain the same elements with the same frequency, regardless of their order. This is useful for testing collections where order is not important.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfBcpTestCase.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.assertEqual(Counter(list(first)),\n  Counter(list(second)))\n```\n\n----------------------------------------\n\nTITLE: Counter Configuration in Game Mode (YAML)\nDESCRIPTION: This snippet demonstrates a counter configuration within a game mode where the counter's state is persisted to a player variable. This configuration is valid within a game mode because player variables are available during gameplay.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-ConfigValidator-1.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_game_mode\nmode:\n  start_events: ball_started\n  stop_events: ball_stopped\n  game_mode: true    # this is the default\n\ncounters:\n  counter_per_player:\n    count_events: count_up\n    persist_state: true\n```\n\n----------------------------------------\n\nTITLE: Install MPF with pip (macOS)\nDESCRIPTION: This command installs the Mission Pinball Framework (MPF) using pip, the Python package installer. This is the main step to get MPF installed into the python virtual environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/mac.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install \"mpf\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Credits Mode via Code - Python\nDESCRIPTION: Demonstrates how to access the credits mode instance from within MPF code using `self.machine.modes.credits`. This allows interaction with the credits system from other modes or components.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/credits.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.modes.credits\n```\n\n----------------------------------------\n\nTITLE: Sending Raw Command\nDESCRIPTION: Sends a raw command to the Spike platform. This allows for direct communication with the hardware at a low level.  `wait_ms` specifies the milliseconds to wait for a response.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nsend_cmd_raw(data, wait_ms=0)\n```\n\n----------------------------------------\n\nTITLE: Handling Ignorable Runtime Exceptions (Python)\nDESCRIPTION: Handles ignorable runtime exceptions.  During development or tests, this raises an exception for easier debugging. In production, it logs an error.  The `ignorable_runtime_exception` method allows for different behavior based on the environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nignorable_runtime_exception(msg: str) -> None\n```\n\n----------------------------------------\n\nTITLE: Mounting VirtualBox Guest Additions CD\nDESCRIPTION: This snippet mounts the VirtualBox Guest Additions CD image on Debian. It first creates a mount point at `/mnt/cdrom` and then mounts the CD-ROM device to that location. This makes the Guest Additions installation files accessible from within the virtual machine.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nsudo mkdir -p /mnt/cdrom\nsudo mount /dev/cdrom /mnt/cdrom\n```\n\n----------------------------------------\n\nTITLE: Initialise MPF (Python)\nDESCRIPTION: Initializes the core MPF framework, setting up the event loop and other critical components.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ninitialise_mpf()\n\nInitialise MPF.\n```\n\n----------------------------------------\n\nTITLE: Configure Project Details in YAML\nDESCRIPTION: This YAML snippet shows the structure for describing an MPF project including name, acronym, team, location, dates, images, video IDs, links, controller type, and a longer description. The file is placed in the `showcase` folder of the `mpf-docs` repository.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/showcase/_add_yours.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Brooks and Dunn\nacronym: BnD\nteam: Gabe Knuth and Brian Madden\nlocation: Chicago, IL, USA\nstarted: 2016-09-07\nfinished: 2017-04-02\nimages:\nproject_type:\nyoutube_video_ids: uRJKHMzU5vM\ndocumentation_link: https://pinside.com/pinball/forum/topic/brooks-dunn\ncode_link: https://github.com/GabeKnuth/BnD\ngameplay_link:\ncontroller: FAST\ndescription: >\n\n  This game was entering production just as Gottlieb shut down and ceased operations\n  (see [IPDB](https://www.ipdb.org/machine.cgi?id=4008) for more history).\n  Gabe got it from Mike and finished it with some input from the original designers.\n\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit Rule (Python)\nDESCRIPTION: Adds a rule to pulse a driver when a switch is hit. The pulse is always a full pulse, even if the switch is released before the pulse completes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/platform_controller.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_rule(enable_switch: mpf.core.platform_controller.SwitchRuleSettings, driver: mpf.core.platform_controller.DriverRuleSettings, pulse_setting: mpf.core.platform_controller.PulseRuleSettings = None) -> mpf.core.platform_controller.HardwareRule\n```\n\n----------------------------------------\n\nTITLE: Configure machine-wide config.yaml to remove the old slide_player entry\nDESCRIPTION: This YAML configuration snippet shows the updated `slide_player` section in the machine-wide `config.yaml` file.  The `ball_started` slide is removed and `init_done` and `mode_attract_started` slides are now configured.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/14_add_a_mode.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n#! slides:\n#!   welcome_slide:\n#!     widgets:\n#!       - type: text\n#!         text: PINBALL!\n#!         font_size: 50\n#!         color: red\n#!       - type: rectangle\n#!         width: 240\n#!         height: 60\n#!   attract_started:\n#!     widgets:\n#!       - text: ATTRACT MODE\n#!         type: text\nslide_player:\n  init_done: welcome_slide\n  mode_attract_started: attract_started\n##! test\n#! advance_time_and_run .1\n```\n\n----------------------------------------\n\nTITLE: Attract Mode High Score Display Configuration\nDESCRIPTION: This YAML code snippet defines the widget styles for displaying high scores in attract mode. It configures font sizes, anchors, and positions for the label, name, and score widgets. This is intended to be added to the machine-wide configuration file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/high_scores/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# in your machine wide config file\nwidget_styles:\n  attract_mode_high_score_display_label:\n    font_size: 30\n    anchor_x: right\n    anchor_y: top\n    x: center-10\n    bold: true\n  attract_mode_high_score_display_name:\n    font_size: 30\n    anchor_x: right\n    anchor_y: top\n    x: center+70\n  attract_mode_high_score_display_score:\n    font_size: 30\n    anchor_x: left\n    anchor_y: top\n    x: center+90\n    number_grouping: true\n    min_digits: 1\n##! show: attract\n```\n\n----------------------------------------\n\nTITLE: Configure Show Player for Gadget Completion (YAML)\nDESCRIPTION: This snippet configures the show player to trigger the 'light_gadget_letter' show when the 'gadget_g1_complete' event is triggered. It also passes show tokens to the show, specifying which light and color to use for the on and final steps. This is repeated for each individual letter.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  gadget_g1_complete:\n    light_gadget_letter:\n      priority: 10\n      key: gadget_g1_hit_show\n      show_tokens:\n        gadget_letter_made_led: l_gadget_g1\n        gadget_letter_made_color: yellow\n        gadget_letter_final_color: yellow\n```\n\n----------------------------------------\n\nTITLE: Resetting Multiplier on Mode Start in YAML\nDESCRIPTION: This snippet demonstrates resetting the multiplier to a default value at the start of a mode.  It shows how to use `mode_[mode_name]_started` to set an initial multiplier value when the mode starts and then use it for scoring.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/scoring/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\n# in your mode:\nvariable_player:\n  # set initial state on mode start of mode \"my_mode\"\n  mode_my_mode_started:\n    multiplier:\n      int: 1\n      action: set\n  increment_multiplier:\n    multiplier: 1\n  score_something:\n    score: 100 * current_player.multiplier\n##! test\n#! start_game\n#! assert_player_variable 0 multiplier\n#! start_mode my_mode\n#! assert_player_variable 1 multiplier\n#! post score_something\n#! assert_player_variable 100 score\n#! post increment_multiplier\n#! assert_player_variable 2 multiplier\n#! post score_something\n#! assert_player_variable 300 score\n```\n\n----------------------------------------\n\nTITLE: Configuring a Light\nDESCRIPTION: Configures a light on the Stern Spike platform. Takes the light number, subtype, and platform-specific settings as input. Returns a SpikeLight or SpikeBacklight object representing the configured light.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_light(number, subtype, platform_settings) → Union[mpf.platforms.spike.spike.SpikeLight, mpf.platforms.spike.spike.SpikeBacklight]\n```\n\n----------------------------------------\n\nTITLE: Removing Switch Handlers by Keys (Python)\nDESCRIPTION: Removes multiple switch handlers by providing a list of keys returned from `add_switch_handler`. The `switch_handlers` parameter is a list of keys.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nremove_switch_handler_by_keys(switch_handlers: List[mpf.core.switch_controller.SwitchHandler])\n```\n\n----------------------------------------\n\nTITLE: Check Validity Outside Mode (Python)\nDESCRIPTION: This static method checks if a configuration entry is valid for use outside of a mode. It returns `True` if the scope of the entry is not limited to a player. The `settings` parameter contains the configuration settings to check.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/random_event_player.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nstatic is_entry_valid_outside_mode(settings) → bool\n```\n\n----------------------------------------\n\nTITLE: Defining a Second Show Step in YAML\nDESCRIPTION: Illustrates defining a second step in a show using YAML. This step turns the light 'led1' off, one second after the previous step.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/format.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: +1\n  lights:\n    led1: off\n```\n\n----------------------------------------\n\nTITLE: Assert Set Equality - Python\nDESCRIPTION: This assertion verifies if two sets are equal, using duck typing to support various set types. The parameters 'set1' and 'set2' represent the sets to compare.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nassertSetEqual(set1, set2, msg=None)\n```\n\n----------------------------------------\n\nTITLE: Loop Property\nDESCRIPTION: This method returns the loop property, likely indicating whether the randomizer loops back to the beginning after reaching the end.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/Randomizer.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n`loop`\n\nReturn loop property.\n```\n\n----------------------------------------\n\nTITLE: Accessing Machine Variables in Players/Segment Players (MPF)\nDESCRIPTION: Explains how to access machine variables within players, specifically segment players, in MPF. The syntax `{machine.my_var_name}` is used to retrieve the variable's actual value. `my_var_name` needs to be replaced with the actual name of the variable.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machine_vars/index.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{machine.my_var_name}\n```\n\n----------------------------------------\n\nTITLE: Accessing the OPP Platform\nDESCRIPTION: Shows how to access the OPP hardware platform instance within the MPF machine object. The OPP platform instance is stored in the machine's hardware_platforms dictionary under the key 'opp'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['opp']\n```\n\n----------------------------------------\n\nTITLE: Configuring Attract Mode Show YAML in MPF\nDESCRIPTION: This YAML snippet configures a slide within an attract mode show to display high scores. It defines text widgets to show the 'HIGH SCORES' title, followed by the top scores with labels, names, and values. The data is dynamically populated from machine variables, and styles are applied for consistent presentation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/high_scores/index.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n- duration: 20s\n  slides:\n    show_high_scores:\n      widgets:\n      - type: Text\n        text: HIGH SCORES\n        font_size: 60\n        bold: true\n        anchor_x: center\n        anchor_y: center\n        x: center\n        y: top-100\n      - type: Text\n        text: (machine|score1_label)\n        style: attract_mode_high_score_display_label\n        y: top-200\n      - type: Text\n        text: (machine|score1_name)\n        style: attract_mode_high_score_display_name\n        y: top-200\n      - type: Text\n        text: (machine|score1_value)\n        style: attract_mode_high_score_display_score\n        y: top-200\n      - type: Text\n        text: (machine|score2_label)\n        style: attract_mode_high_score_display_label\n        y: top-240\n      - type: Text\n        text: (machine|score2_name)\n        style: attract_mode_high_score_display_name\n        y: top-240\n      - type: Text\n        text: (machine|score2_value)\n        style: attract_mode_high_score_display_score\n        y: top-240\n      - type: Text\n        text: (machine|score3_label)\n        style: attract_mode_high_score_display_label\n        y: top-280\n      - type: Text\n        text: (machine|score3_name)\n        style: attract_mode_high_score_display_name\n        y: top-280\n      - type: Text\n        text: (machine|score3_value)\n        style: attract_mode_high_score_display_score\n        y: top-280\n      - type: Text\n        text: LOOP CHAMPION\n        font_size: 60\n        bold: true\n        anchor_x: center\n        anchor_y: center\n        x: center\n        y: top-500\n      - type: Text\n        text: (machine|loops1_label)\n        style: attract_mode_high_score_display_label\n        y: top-600\n      - type: Text\n        text: (machine|loops1_name)\n        style: attract_mode_high_score_display_name\n        y: top-600\n      - type: Text\n        text: (machine|loops1_value)\n        style: attract_mode_high_score_display_score\n        y: top-600\n      - type: Text\n        text: (machine|loops1_player_character)\n        style: attract_mode_high_score_display_score\n        y: top-600\n```\n\n----------------------------------------\n\nTITLE: Overwriting Tilt Slides with YAML in MPF\nDESCRIPTION: This YAML configuration overwrites the default tilt slides in MPF. The `_overwrite: true` setting ensures the built-in slides are replaced with the custom definitions. It defines slides for tilt warnings and the final tilt state, specifying their content, display duration, and positioning.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/tilt/overwrite_tilt_slides.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#! switches:\n#!   s_tilt:\n#!     number:\n#!     tags: tilt_warning\n##! mode: tilt\n# in your modes/config/tilt.yaml\nslides:\n  _overwrite: true   # this is important to overwrite the existing slides\n  tilt_warning_1:\n    widgets:\n      - type: text\n        text: \"STOP IT\"\n    expire: 1s\n  tilt_warning_2:\n    widgets:\n      - type: text\n        text: WARNING\n        y: top-2\n        anchor_y: top\n      - type: text\n        text: \"SERIOUSLY STOP IT\"\n        y: top-18\n        anchor_y: top\n        expire: 1s\n    expire: 2s\n  tilt:\n    - type: text\n      text: TILT\n##! test\n#! start_game\n#! post slam_tilt\n#! advance_time_and_run .1\n#! assert_mode_running tilt\n#! hit_and_release_switch s_tilt\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"STOP IT\"\n#! advance_time_and_run 2\n#! assert_text_not_on_top_slide \"STOP IT\"\n#! hit_and_release_switch s_tilt\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"SERIOUSLY STOP IT\"\n```\n\n----------------------------------------\n\nTITLE: Read Message (Python)\nDESCRIPTION: Reads one message from the client. This method is used to simulate the reception of data from the BCP client.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MockBcpClient.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nread_message()\n\nRead one message from client.\n```\n\n----------------------------------------\n\nTITLE: Post Event - Python\nDESCRIPTION: Posts an MPF event and optionally advances the time. The `event_name` parameter specifies the name of the event to post.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n`post_event(event_name, run_time=0)`\n```\n\n----------------------------------------\n\nTITLE: Configure Hardware Rule for Solenoid (0x3C) Flags\nDESCRIPTION: This code describes the flags used in the 'Configure Hardware Rule for Solenoid' command (0x3C). These flags determine the behavior of up to three switches used to control the solenoid. Bit 0 triggers the rule upon switch activation, while bit 1 disables the rule when the switch becomes inactive.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_34\n\nLANGUAGE: None\nCODE:\n```\nBit               Description\n----------------- -----------------------------------------------------\n0                 When switch becomes active trigger the rule. Usually\n                  set on the first switch to trigger the rule.\n                  Sometimes a second switch is used just to disable a\n                  rule (such as on EOS of a flipper).\n\n1                 When switch becomes inactive disable the rule. This\n                  is what you want on flipper fingers but not on\n                  slings/pops.\n\n2                 reserved\n\n3                 reserved\n\n4                 reserved\n\n5                 reserved\n\n6                 reserved\n\n7                 reserved\n```\n\n----------------------------------------\n\nTITLE: Clear Boot Hold (Python)\nDESCRIPTION: Clears a boot hold, allowing the machine boot process to continue. 'boot holds' are used to pause the boot process until certain conditions are met.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclear_boot_hold(hold: str) → None\n\nClear a boot hold.\n```\n\n----------------------------------------\n\nTITLE: Adding a Delay in MPF (Python)\nDESCRIPTION: Adds a delay using the `add` method of the DelayManager. This method takes the delay time in milliseconds, a callback function to be executed after the delay, an optional name for the delay, and any keyword arguments to be passed to the callback function.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nadd(ms: int, callback: Callable[[...], None], name: str = None, **kwargs) -> str\n```\n\n----------------------------------------\n\nTITLE: Configure Switch on SpiBitBangPlatform\nDESCRIPTION: This snippet shows the `configure_switch` method of the `SpiBitBangPlatform` class. It configures a switch based on the provided number, configuration, and platform-specific configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spi_bit_bang.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconfigure_switch(number: str, config: mpf.core.platform.SwitchConfig, platform_config: dict) → mpf.platforms.interfaces.switch_platform_interface.SwitchPlatformInterface\n```\n\n----------------------------------------\n\nTITLE: Testing Conditional Shot Event Triggering\nDESCRIPTION: This snippet demonstrates a test scenario for the conditional event triggering. It simulates hitting the `s_target` switch, then `lane_l`, then `s_target` again. The `start_multiball` event should only be called when `s_target` is hit while the `my_shot` is in the 'lit' state, demonstrating conditional event firing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/shots/index.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n##! test\n#! start_game\n#! start_mode inlanes\n#! mock_event start_multiball\n#! hit_and_release_switch s_target\n#! assert_event_not_called start_multiball\n#! hit_and_release_switch lane_l\n#! assert_event_not_called start_multiball\n#! hit_and_release_switch s_target\n#! assert_event_called start_multiball\n```\n\n----------------------------------------\n\nTITLE: Tagging a switch in MPF with multiple tags - YAML\nDESCRIPTION: This example shows how to tag a switch with two tags, \"start\" and \"skyfall\".  When the switch is activated, events with the switch's name and the tag's name will be fired, allowing for event-based logic triggered by any device with the specified tag. This configuration requires a switch definition in the `switches` section of an MPF configuration file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/tags.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  mygame_switch_button_start:\n    number: 1\n    tags: start, skyfall\n```\n\n----------------------------------------\n\nTITLE: Including Flipper in Ball Search in MPF (YAML)\nDESCRIPTION: This snippet shows how to include an upper playfield flipper in the ball search sequence.  It sets the `ball_search_order` to determine the order in which the flipper coil is pulsed, and `include_in_ball_search` to `true` to enable its inclusion.  It assumes that the flipper, coil, and switch are already defined in the MPF configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/ball_search/configuring_ball_search.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nflippers:\n  f_upper_flipper_left:\n    ball_search_order: 15\n    include_in_ball_search: true\n    main_coil: c_flipper_left\n    activation_switch: s_flipper_left\n```\n\n----------------------------------------\n\nTITLE: Start Mode After Last Ball of Every Player (YAML)\nDESCRIPTION: This YAML configuration uses the `queue_relay_player` to start a custom mode after the last ball of every player. It posts the `start_your_mode` event when the current player's ball is 3 and waits for the `mode_your_mode_stopped` event. To start the mode after every ball remove the condition `current_player.ball==3`. Place this snippet in your base mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/game_end_modes.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: base\nqueue_relay_player:\n  ball_ending{current_player.ball==3}:\n    post: start_your_mode\n    wait_for: mode_your_mode_stopped\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit and Enable/Release/Disable Rule (OPP)\nDESCRIPTION: Sets a rule to pulse a driver when a switch is hit, then enable it (possibly with PWM). When the switch is released, the pulse is canceled, and the driver is disabled. If an EOS switch is hit, the pulse is canceled, and the driver remains enabled (likely with PWM). Typically used for single-wound coil flippers with an EOS switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_enable_and_release_and_disable_rule(enable_switch: mpf.core.platform.SwitchSettings, eos_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings, repulse_settings: Optional[mpf.core.platform.RepulseSettings])\n```\n\n----------------------------------------\n\nTITLE: Segment Display Emulator Widget Settings (YAML)\nDESCRIPTION: This YAML snippet outlines the available settings for the segment display emulator widget. It lists various configurable options, including 'type', 'name', 'text', 'flash_mode', 'character_count', 'segment_colors', and dimensions ('width', 'height'). These settings allow customization of the widget's appearance and behavior.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/segment_display_emulator/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: segment_display_emulator\nname:\ntext:\nflash_mode:\nflash_frequency:\nflash_mask:\ndisplay_type:\ncharacter_count:\ncharacter_spacing:\ncharacter_slant_angle:\npadding:\nbackground_color:\nsegment_off_color:\nsegment_on_color:\nsegment_width:\nsegment_interval:\nbevel_width:\nside_bevel_enabled:\ndot_enabled:\ncomma_enabled:\ncharacter_map:\nwidth:\nheight:\nrotation:\nscale:\n```\n\n----------------------------------------\n\nTITLE: Installing Python and Creating Virtual Environment (Shell)\nDESCRIPTION: Installs Python 3.9.18 using pyenv, creates a virtual environment named 'mpf' based on that Python version, and activates the virtual environment. Adds the activation command to the .bashrc file for automatic activation on login.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/raspberry.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# python3.9 compilation. Note this can take a while since Python is\n# being downloaded and compiled from source\npyenv install 3.9.18\n\n# Create virtual environment\npyenv virtualenv 3.9.18 mpf\n\n# Activate virtual environment\npyenv activate 3.9.18/envs/mpf\n\n# Assuming that works, let's add that command to .bashrc so that the\n# virtual environment activates at each login\ncat <<'EOF'>>.bashrc\npyenv activate 3.9.18/envs/mpf\nEOF\nexec $SHELL\n```\n\n----------------------------------------\n\nTITLE: Adding a reusable widget to a slide (YAML)\nDESCRIPTION: This snippet showcases how to add a defined, reusable widget to a particular slide by directly referencing its name within the slide configuration. Instead of specifying `type:`, you use `widget:` followed by the name of the pre-defined widget. This integrates the widget into the structure of the slide.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nwidgets:\n  jackpot_value_widget:\n    - type: text\n      text: (jackpot_total)\n      style: medium\nslides:\n  hero_hurryup:\n    - type: text\n      text: \"Hurry Up!\"\n    - type: text\n      text: \"Jackpot:\"\n    - widget: jackpot_value_widget\n\nslide_player:\n  show_hero_slide: hero_hurryup\n```\n\n----------------------------------------\n\nTITLE: Controlling Lights in Shows using light_player (YAML)\nDESCRIPTION: This example demonstrates how to control lights within a show file using the `lights` section.  The show defines a rainbow sequence where each step sets all LEDs to a different color. The `(leds)` syntax seems to be a placeholder for all LEDs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/light_player.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nshows:\n  rainbow:\n    - lights:\n        (leds): red\n    - lights:\n        (leds): orange\n    - lights:\n        (leds): yellow\n    - lights:\n        (leds): green\n    - lights:\n        (leds): blue\n    - lights:\n        (leds): purple\n```\n\n----------------------------------------\n\nTITLE: Configuring Flippers Without Automatic Enabling (YAML)\nDESCRIPTION: This snippet configures the flippers without automatically enabling them on machine boot. It removes the `enable_events: machine_reset_phase_3` line from the flipper configuration. This ensures that MPF's default behavior of enabling flippers at ball start is not overwritten.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/10_run_a_game.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nflippers:\n  left_flipper:\n    main_coil: c_flipper_left_main\n    hold_coil: c_flipper_left_hold\n    activation_switch: s_left_flipper\n  right_flipper:\n    main_coil: c_flipper_right_main\n    hold_coil: c_flipper_right_hold\n    activation_switch: s_right_flipper\n```\n\n----------------------------------------\n\nTITLE: Response to Get Solenoid Count (0x04)\nDESCRIPTION: This is the response format to the 'Get Solenoid Count' command (0x04). It contains a single byte representing the number of solenoids connected to the hardware platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nByte           Length         Description\n-------------- -------------- ------------------------------------------\n0              1              Solenoid count `c` (0 to 127). 0 if no\n                               solenoids exist.\n```\n\n----------------------------------------\n\nTITLE: Accessing ScoreReels in MPF (Python)\nDESCRIPTION: This snippet demonstrates how to access ScoreReel devices within the MPF framework. It shows how to access a specific ScoreReel by name using both dot notation and dictionary notation via `self.machine.score_reels`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/score_reels.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.score_reels.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.score_reels['foo']\n```\n\n----------------------------------------\n\nTITLE: Configure Plunger Ejecting to Another Device\nDESCRIPTION: This snippet configures a plunger lane that ejects into another ball device (a cannon). The `eject_targets` setting specifies the target ball device. `eject_timeouts` is set to 2 seconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/auto_manual.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    # ...\n    eject_targets: bd_cannon\n    eject_timeouts: 2s\n```\n\n----------------------------------------\n\nTITLE: Starting the High Score Mode\nDESCRIPTION: This snippet shows the method to start the High Score mode. It takes optional parameters for mode priority and a callback function to be executed after the mode starts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/high_score.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nstart(mode_priority=None, callback=None, **kwargs) → None\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitmap Font in MPF Slide\nDESCRIPTION: This YAML configuration demonstrates how to use a bitmap font in an MPF slide. It specifies the `font_name` and sets `bitmap_font` to `true` to indicate that the font is a bitmap font.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/bitmap_fonts.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  slideBaseBackglass:\n    widgets:\n      - type: text\n        text: (player1|score)\n        font_name: bitmapFontBallySevenSegment4\n        bitmap_font: true\n```\n\n----------------------------------------\n\nTITLE: Updating Categories Configuration (New way)\nDESCRIPTION: This snippet shows the new way of defining `categories` in MPF config version 6. The `!!omap` tag is removed, but the dashes in front of the high score entries are kept. This configuration uses the YAML list format for high score entries under the `score` category.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/config_v6.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n score:\n  - GRAND CHAMPION\n  - HIGH SCORE 1\n  - HIGH SCORE 2\n```\n\n----------------------------------------\n\nTITLE: Reading Initial Gen2 Input States (OPP)\nDESCRIPTION: Reads the initial switch states from the Gen2 OPP hardware. This method processes the received message and sets the initial state of all switches. The message relates to a specific chain, identified by its serial number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nread_gen2_inp_resp_initial(chain_serial, msg)\n```\n\n----------------------------------------\n\nTITLE: Numlock Issue Log Example\nDESCRIPTION: This console snippet shows an example log output when a Numlock key is active. This log shows the key stroke is being interpreted with a numlock modifier.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/virtual/keyboard.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nKeyboard : Processing key stroke for key s-numlock\nKeyboard : Processing key stroke for key s-numlock\n```\n\n----------------------------------------\n\nTITLE: Advanced Show Player Configuration YAML\nDESCRIPTION: This snippet shows how to configure additional options for shows triggered by events. It allows setting parameters like 'loops' for 'your_show_name' and 'speed' and 'sync_ms' for 'another_show'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/show_player.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nshow_player:\n  some_event:\n    your_show_name:\n      loops: 0\n  some_other_event:\n    another_show:\n      speed: 2\n      sync_ms: 500\n```\n\n----------------------------------------\n\nTITLE: Initialize Pololu Maestro Platform\nDESCRIPTION: This method initializes the Pololu Maestro platform, setting up the necessary resources and connections. It prepares the platform for subsequent servo control operations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/pololu_maestro.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninitialize()\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Options in Show Step in MPF\nDESCRIPTION: This YAML configuration demonstrates how to specify additional options for slides within a show step using sub-entries. The `happy_face` slide is displayed on the `playfield_screen` target. Display and slide definitions, as well as show player configuration are commented out. The test posts the event, advances time, and verifies the text is present.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/showing_slides.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- duration: 3s\n  slides:\n    happy_face:\n      target: playfield_screen\n##! test\n#! post play_show\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Happy Face\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a White LED Channel in lights section YAML\nDESCRIPTION: This snippet configures a light named \"my_white_light\" with a white channel connected to board 8, channel 4 on the PD-LED board.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/leds.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  my_white_light:\n    channels:\n      white:\n        - number: 8-4\n```\n\n----------------------------------------\n\nTITLE: Accessing rpi platform in MPF via code (Python)\nDESCRIPTION: This code snippet shows how to access the Raspberry Pi hardware platform within an MPF project.  The hardware platforms are stored in the `self.machine.hardware_platforms` dictionary. This allows access to the Raspberry Pi platform through its key 'rpi'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/rpi.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['rpi']\n```\n\n----------------------------------------\n\nTITLE: Configuring a Driver\nDESCRIPTION: Configures a driver (coil) on the Stern Spike platform. Takes a DriverConfig object, the driver number as a string, and platform-specific settings as input.  Used to setup the parameters for controlling coils.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_driver(config: mpf.core.platform.DriverConfig, number: str, platform_settings: dict)\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit and Release/Disable Rule (OPP)\nDESCRIPTION: Sets a rule to pulse a driver when a switch is hit, then enable it (possibly with PWM). When the switch is released, the pulse is canceled, and the driver is disabled. If a second disable switch (typically EOS) is hit, the pulse is canceled, and the driver is disabled. Typically used for dual-coil flippers with an EOS switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_release_and_disable_rule(enable_switch: mpf.core.platform.SwitchSettings, eos_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings, repulse_settings: Optional[mpf.core.platform.RepulseSettings])\n```\n\n----------------------------------------\n\nTITLE: Example of Text Input Complete Event\nDESCRIPTION: This console output shows the event that GMC posts when the END key is selected. It shows an example of the `text_input_<input_name>_complete` event and its arguments, including the `text` which contains the entered user input. This example shows the event with input_name \"high_score\" and the resulting text \"MY NAME\".\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/mpf-text-input.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n==='text_input_high_score_complete'=== Args={'text': 'MY NAME'}\n```\n\n----------------------------------------\n\nTITLE: Running MPF with demo-man and mc_demo (Shell)\nDESCRIPTION: Changes the directory to the demo_man folder within mpf-examples, and then starts MPF in both mode with the -X flag (for windowed mode).  Then it changes to the mc_demo folder and starts MPF in both mode with the -X flag.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/raspberry.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Switch to demo-man directory\ncd ~/mpf-git/mpf-examples/demo_man\n\n# start MPF\nmpf both -X\n```\n\nLANGUAGE: shell\nCODE:\n```\n# switch to mc_demo directory\ncd ../mc_demo\n\n# start MPF\nmpf both -X\n```\n\n----------------------------------------\n\nTITLE: Set Plunger as Default Source Device\nDESCRIPTION: This snippet sets the plunger lane as the default source device for the playfield. The `default_source_device` setting within the `playfield` configuration specifies the ball device from which new balls enter the playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/auto_manual.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Apply Shot Profile and Show Tokens to Shots in MPF\nDESCRIPTION: This code applies the defined shot profile to each of the lane shots, specifying a light for each lane using `show_tokens`. It assumes the lights are defined as `l_top_lane_1` through `l_top_lane_4`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/rollover_lanes_with_lane_change.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  top_lane_i:\n    switch: s_top_lane_1\n    profile: top_lane_profile\n    show_tokens:\n      led: l_top_lane_1\n  top_lane_n:\n    switch: s_top_lane_2\n    profile: top_lane_profile\n    show_tokens:\n      led: l_top_lane_2\n  top_lane_d:\n    switch: s_top_lane_3\n    profile: top_lane_profile\n    show_tokens:\n      led: l_top_lane_3\n  top_lane_y:\n    switch: s_top_lane_4\n    profile: top_lane_profile\n    show_tokens:\n      led: l_top_lane_4\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual-Wound Coils in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure separate coils for the main pulse and hold functions of a dual-wound coil. It defines the coil numbers, pulse duration, and hold power. Requires understanding of MPF's coil configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/coils/dual_wound_coils.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_your_coil_main:\n    number: 00   # depends on your platform and hardware\n    default_pulse_ms: 20\n  c_your_coil_hold:\n    number: 01   # depends on your platform and hardware\n    default_pulse_ms: 10\n    default_hold_power: .2\n```\n\n----------------------------------------\n\nTITLE: Get Use BCP - Python\nDESCRIPTION: Controls whether tests in this class should use BCP (the Ball Controller Protocol). By default, BCP is disabled. Override this method to return True to enable BCP for tests.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n`get_use_bcp()`\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_use_bcp(self):\n    return True\n```\n\n----------------------------------------\n\nTITLE: Override GMC Scripts with INI\nDESCRIPTION: This code snippet demonstrates how to override core GMC scripts for advanced customization using the `[gmc]` section in the `gmc.cfg` file. This is intended for advanced users who need to modify the GMC's core behavior.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/gmc-cfg.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[gmc]\nGMCServer=\"custom_code/my_custom_bcp.gd\"\n```\n\n----------------------------------------\n\nTITLE: Installing VirtualBox Guest Additions Dependencies\nDESCRIPTION: This snippet installs the necessary dependencies for VirtualBox Guest Additions on Debian. It includes `build-essential` for compiling kernel modules, `dkms` for dynamic kernel module support, and `linux-headers` matching the running kernel version. The command ensures proper installation and functionality of guest additions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nsudo apt update\nsudo apt install build-essential dkms linux-headers-$(uname -r)\n```\n\n----------------------------------------\n\nTITLE: Example MPF Console Output\nDESCRIPTION: This console output provides a snippet of the information that MPF displays when it starts up, loads configurations, and initializes components. It showcases the loading of config files, versions of MPF and Python, and initialization events. The output allows developers to verify that the config files are being read successfully and to inspect initialization steps.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_5\n\nLANGUAGE: doscon\nCODE:\n```\n$ mpf -t -b\nINFO : root : Loading config.\nINFO : YamlMultifileConfigLoader : Machine config file #1: config.yaml\nINFO : ConfigProcessor : Loading config from cache: /tmp/7146c817793475fbeb8d22f907d7bbbc.mpf_cache\nINFO : ConfigProcessor : Loading config from cache: /tmp/49091ea856e626b51c4160f53a2ef744.mpf_cache\nINFO : ConfigProcessor : Loading config from cache: /tmp/4cc7d3d11df84bb81fda7943558aba56.mpf_cache\nINFO : Machine : Mission Pinball Framework Core Engine v0.54.0-dev.18\nINFO : Machine : Command line arguments: {'no_load_cache': False, 'create_config_cache': True, 'bcp': False, 'configfile': ['config.yaml'], 'force_assets_load': False, 'jsonlogging': False, 'logfile': 'logs/2020-04-01-21-45-55-mpf.log', 'pause': False, 'production': False, 'text_ui': False, 'loglevel': 15, 'consoleloglevel': 20, 'force_platform': None, 'syslog_address': None, 'mc_file_name': None, 'no_sound': False}\nINFO : Machine : MPF path: /pinball/src/mpf/mpf\nINFO : Machine : Machine path: /mpf-examples/tutorial/step_3\nINFO : Machine : Platform: linux\nINFO : Machine : Python executable location: /usr/bin/python3\nINFO : Machine : Python version: 3.6.9 (64-bit)\nINFO : Machine : Initialize MPF.\nINFO : EventManager : Event: ======'machine_var_credits_string'====== Args={'value': 'FREE PLAY', 'prev_value': None, 'change': True}\nINFO : EventManager : Event: ======'machine_var_mpf_version'====== Args={'value': 'MPF v0.54.0-dev.18', 'prev_value': None, 'change': True}\nINFO : EventManager : Event: ======'machine_var_mpf_extended_version'====== Args={'value': 'MPF v0.54.0-dev.18, Config version:5, Show version: 5, BCP version:1.1', 'prev_value': None, 'change': True}\nINFO : EventManager : Event: ======'machine_var_python_version'====== Args={'value': '3.6.9', 'prev_value': None, 'change': True}\nINFO : EventManager : Event: ======'machine_var_platform'====== Args={'value': 'Linux-4.15.0-72-generic-x86_64-with-Ubuntu-18.04-bionic', 'prev_value': None, 'change': True}\nINFO : EventManager : Event: ======'machine_var_platform_system'====== Args={'value': 'Linux', 'prev_value': None, 'change': True}\nINFO : EventManager : Event: ======'machine_var_platform_release'====== Args={'value': '4.15.0-72-generic', 'prev_value': None, 'change': True}\nINFO : EventManager : Event: ======'machine_var_platform_version'====== Args={'value': '#81-Ubuntu SMP Tue Nov 26 12:20:02 UTC 2019', 'prev_value': None, 'change': True}\nINFO : EventManager : Event: ======'machine_var_platform_machine'====== Args={'value': 'x86_64', 'prev_value': None, 'change': True}\nINFO : EventManager : Event: ======'init_phase_1'====== Args={}\nINFO : EventManager : Event: ======'init_phase_2'====== Args={}\nINFO : EventManager : Event: ======'init_phase_3'====== Args={}\nINFO : EventManager : Event: ======'init_phase_4'====== Args={}\nINFO : EventManager : Event: ======'machine_var_audits_switches_s_left_flipper'====== Args={'value': 0, 'prev_value': None, 'change': True}\nINFO : EventManager : Event: ======'machine_var_audits_switches_s_right_flipper'====== Args={'value': 0, 'prev_value': None, 'change': True}\nINFO : EventManager : Event: ======'init_phase_5'====== Args={}\nINFO : EventManager : Event: ======'init_done'====== Args={}\nINFO : EventManager : Event: ======'machine_reset_phase_1'====== Args={}\nINFO : EventManager : Event: ======'machine_reset_phase_2'====== Args={}\nINFO : EventManager : Event: ======'machine_reset_phase_3'====== Args={}\nINFO : EventManager : Event: ======'reset_complete'====== Args={}\nINFO : EventManager : Event: ======'mode_attract_will_start'====== Args={}\nINFO : EventManager : Event: ======'mode_attract_starting'====== Args={}\nINFO : Mode.attract : Started. Priority: 10\nINFO : EventManager : Event: ======'mode_attract_started'====== Args={}\nINFO : EventManager : Event: ======'collecting_balls_complete'====== Args={}\nINFO : Machine : Starting the main run loop.\n```\n\n----------------------------------------\n\nTITLE: P/P3-Roc Communication Error Log Example\nDESCRIPTION: This code snippet shows an example of the error message that appears in the log when communication between MPF and the P/P3-Roc breaks down. This error indicates a problem with the USB connection or power supply to the P/P3-Roc.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/RE-P-Roc-2.md#_snippet_0\n\nLANGUAGE: doscon\nCODE:\n```\nOSError: Error in WriteData: wrote 0 of 8 bytes\n```\n\n----------------------------------------\n\nTITLE: Accessing P-ROC Hardware Platform via Code\nDESCRIPTION: Shows how to access the P-ROC hardware platform in MPF using the `self.machine.hardware_platforms` dictionary. This provides access to the P-ROC's methods and attributes for controlling pinball machine hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/p_roc.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['p_roc']\n```\n\n----------------------------------------\n\nTITLE: Chained Lights Configuration YAML\nDESCRIPTION: This example showcases how to chain lights together. Each light references the previous light using the previous key, automatically incrementing the channel numbers. The start_channel specifies the initial hardware address.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/index.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  led_0:\n    start_channel: 0-0    # the exact number format depends on your platform\n    subtype: led\n    type: rgb    # will use red: 0-0, green: 0-1, blue: 0-2\n  led_1:\n    previous: led_0\n    subtype: led\n    type: rgbw   # will use red: 0-3, green: 0-4, blue: 0-5, white: 0-6\n  led_2:\n    previous: led_1\n    subtype: led\n    type: rgbw   # will use red: 0-7, green: 0-8, blue: 0-9, white: 0-10\n```\n\n----------------------------------------\n\nTITLE: Configuring GI string connected to a driver (P3-Roc)\nDESCRIPTION: This example illustrates how to configure GI strings connected to a driver, such as a PD-16 on a P3-Roc. First, the coil is defined, enabling it for full power without PWM. Then, a light is configured, mapping it to the previously defined driver.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/gis.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  gi_string_left:\n    number: A1-B1-3    # number depends on your platform\n    allow_enable: true  # this will allow 100% enable without pwm\nlights:\n  gi_string_left:\n    number: gi_string_left  # map this light to a driver\n    platform: drivers\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration: Playfield Default Source Device\nDESCRIPTION: This YAML snippet configures the playfield to use the plunger lane as the default source device for new balls. The `default_source_device` property specifies which ball device (e.g., `bd_plunger`) is used when a new ball is added to the playfield, typically at the start of a game. This configuration ensures the game knows the initial location of the ball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/8_plunger.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplayfields:\n  playfield:\n    tags: default\n    default_source_device: bd_plunger\n```\n\n----------------------------------------\n\nTITLE: Custom Godot Method in MPFSlide\nDESCRIPTION: This code snippet shows how to define a custom method within a Godot script that extends the MPFSlide class. This method can then be called from the MPF slide_player using the 'action: method' option. The method receives two parameters: settings (the slide_player configuration) and kwargs (the event arguments from the event that triggered the slide).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/mpf-slide.md#_snippet_0\n\nLANGUAGE: gdscript\nCODE:\n```\nfunc my_custom_method(settings, kwargs):\n    # Function does stuff here\n```\n\n----------------------------------------\n\nTITLE: Continuous Rotation Animation (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to create a continuously rotating widget using a two-step process. The first step resets the rotation to 0 degrees, and the second step rotates the widget to 360 degrees with the `repeat: true` setting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  slide1:\n    widgets:\n      - type: text\n        text: I'M GOING TO ROTATE\n        x: 50\n        y: 50\n        animations:\n          show_slide:\n            - property: rotation\n              value: 0\n              relative: false\n              duration: 0\n            - property: rotation\n              value: 360\n              relative: false\n              duration: 2s\n              repeat: true\n```\n\n----------------------------------------\n\nTITLE: Example Invalid Config Entry Error in Python\nDESCRIPTION: This Python error message showcases an `AssertionError` that arises when an invalid entry exists within the MPF configuration. The message pinpoints the exact entry (e.g., `flippers:left_flipper:main_coil:c_fliper_left_main`) and indicates that the provided value is not valid. It is crucial for correcting typos or invalid settings in the YAML configuration files.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nAssertionError: Config validation error: Entry flippers:left_flipper:main_coil:c_fliper_left_main is not valid.\n```\n\n----------------------------------------\n\nTITLE: Changing BCP Ports in MPF and MPF-MC (YAML)\nDESCRIPTION: This configuration snippet demonstrates how to change the default BCP ports used by the MPF game engine and MPF-MC. It modifies the 'bcp' section for MPF and the 'mpf-mc' section for MPF-MC, setting both to use port 1234. This requires editing the machine-wide config file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/ports.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# config_version=5\n\nbcp:\n  connections:\n    local_display:\n      port: 1234\n\nmpf-mc:\n  bcp_port: 1234\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Asset Parameters in YAML\nDESCRIPTION: This snippet demonstrates how to configure a video asset named `intro_video` in the `videos:` section of an MPF configuration file.  It sets the width to 100 pixels, the height to 70 pixels, and specifies the actual file name as `mpf_video_small.mpg`. The asset manager uses the filename (without extension) to match the asset in the config to a file on disk.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/videos.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nvideos:\n  intro_video:\n    width: 100\n    height: 70\n    file: mpf_video_small.mpg\n```\n\n----------------------------------------\n\nTITLE: Add base mode to machine-wide config\nDESCRIPTION: This snippet demonstrates how to add the newly created `base` mode to the machine-wide `config.yaml` file.  This step ensures MPF recognizes and loads the mode during game initialization.  The dash indicates a list, which is important for MPF to combine settings from different config files including built-in modes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/14_add_a_mode.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodes:\n  - base\n```\n\n----------------------------------------\n\nTITLE: Running MPF Game Engine\nDESCRIPTION: This snippet shows the command to run the MPF game engine. The `-t` option disables the text-based user interface.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_11\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\pinball\\your_machine>mpf -t\n```\n\n----------------------------------------\n\nTITLE: Verifying MPF Installation\nDESCRIPTION: This command checks the installed version of MPF to verify that the installation was successful. It outputs the version number of the MPF framework, confirming that MPF is correctly installed and accessible in the current environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/setup.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nmpf --version\n```\n\n----------------------------------------\n\nTITLE: Configure Logging\nDESCRIPTION: This snippet demonstrates the `configure_logging` method which configures the logging level for the mode. The method takes the logger name, console level, file level, and URL base as parameters. Valid options for console and file level are \"none\", \"basic\", or \"full\".\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/carousel.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconfigure_logging(logger: str, console_level: str = 'basic', file_level: str = 'basic', url_base=None)\n```\n\n----------------------------------------\n\nTITLE: Example Set Status of Simple Lamp to Off Command (0x0C)\nDESCRIPTION: Example of sending the command to turn off lamp 25.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_20\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tExample\tComment\n0\t1\t12\tCommand 12 - Set Status of Simple Lamp to Off\n1\t1\t25\tSet lamp 25 to off\n```\n\n----------------------------------------\n\nTITLE: Download osx-proc-support from GitHub\nDESCRIPTION: This command clones the osx-proc-support repository from GitHub into the 'proc' directory. This repository contains files needed to make the P-ROC run on macOS, including a compatible version of yaml-cpp.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/mac.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/proc\ngit clone https://github.com/missionpinball/osx-proc-support\n```\n\n----------------------------------------\n\nTITLE: Install required prerequisites via Homebrew\nDESCRIPTION: This command uses Homebrew to install the libftdi, libusb-compat, and cmake libraries, which are prerequisites for building the P-ROC/P3-ROC drivers. These libraries provide functionality for USB communication and building software.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/mac.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install libftdi libusb-compat cmake\n```\n\n----------------------------------------\n\nTITLE: Accessing Trinamics Step Rocker Platform via Code (MPF)\nDESCRIPTION: Explains how to access the Trinamics Step Rocker platform instance within the Mission Pinball Framework (MPF). The platform is stored in the `self.machine.hardware_platforms` dictionary, accessible by its key 'trinamics_steprocker'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/trinamics_steprocker.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Mock Event - Python\nDESCRIPTION: This function configures an event to be mocked. The 'event_name' parameter is a string representing the name of the event to mock. Mocking allows checking if an event was called without configuring callback actions. Events must be mocked before being posted for assertEventNotCalled() and assertEventCalled() to function properly. Mocking does not break existing event handlers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nmock_event(event_name)\n```\n\nLANGUAGE: python\nCODE:\n```\nself.mock_event('my_event')\nself.assertEventNotCalled('my_event')  # This will be True\nself.post_event('my_event')\nself.assertEventCalled('my_event')  # This will also be True\n```\n\n----------------------------------------\n\nTITLE: Configuring Coils with Node and Coil Numbers in YAML\nDESCRIPTION: This example demonstrates how to define coils in a YAML configuration file for a Stern SPIKE system. The `number` setting specifies the node and coil number, with the format 'node-coil'. Other settings like `default_pulse_ms` and `allow_enable` configure the coil's behavior.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/drivers.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  c_shaker:\n    number: 1-10    # Node 1, coil 10\n    default_pulse_ms: 100\n    allow_enable: true\n  c_flipper:\n    number: 8-1    # Node 8, coil 1\n```\n\n----------------------------------------\n\nTITLE: Configuring a Switch on Stern Spike (Python)\nDESCRIPTION: Shows how to configure a switch on the Stern Spike platform using the `configure_switch` method. It requires a switch number (string), a `SwitchConfig` object containing the switch's configuration, and a dictionary of platform-specific settings. The number represents the unique identifier for this switch in the Spike system.  platform_config may contain various Spike specific configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/spike.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_switch(number: str, config: mpf.core.platform.SwitchConfig, platform_config: dict)\n```\n\n----------------------------------------\n\nTITLE: Accessing Openpixel Platform in MPF (Python)\nDESCRIPTION: This snippet demonstrates how to access the Openpixel hardware platform instance in the MPF framework using the `self.machine.hardware_platforms` dictionary. The platform can be accessed using the key 'openpixel'. This is typically done within a machine controller or a related object that has access to the `self.machine` instance. No dependencies are required other than the MPF framework being initialized.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/openpixel.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['openpixel']\n```\n\n----------------------------------------\n\nTITLE: Custom Method Example in MPFWidget (Godot)\nDESCRIPTION: This code snippet shows an example of a custom method within an MPFWidget scene script. This method can be triggered from the MPF `widget_player` using the `action: method` option. It accepts two parameters: settings (widget player configuration) and kwargs (arguments from the event that triggered the widget player).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/mpf-widget.md#_snippet_0\n\nLANGUAGE: gdscript\nCODE:\n```\nfunc my_custom_method(settings, kwargs):\n    # Function does stuff here\n```\n\n----------------------------------------\n\nTITLE: Configure Switch (FAST)\nDESCRIPTION: This method configures a switch connected to the FAST controller. It distinguishes between local and network switches and configures them accordingly based on the connection type specified in the configuration.\n\nParameters:\n* number: Number of this switch.\n* config: Switch config.\n* platform_config: Platform specific settings.\n\nReturns: Switch object.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/fast.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_switch(number: str, config: mpf.core.platform.SwitchConfig, platform_config: dict) -> mpf.platforms.fast.fast_switch.FASTSwitch\n```\n\n----------------------------------------\n\nTITLE: Animating widget properties with relative values\nDESCRIPTION: This snippet shows how to animate widget properties using relative values.  The 'relative: True' setting allows you to adjust the property by the specified value relative to its current value.  In this example, the x, y, and rotation properties are animated.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    - property: x\n      value: 50\n      relative: True\n      duration: 1s\n    - property: y\n      value: -50\n      relative: True\n      duration: 1s\n    - property: rotation\n      value: 45\n      relative: True\n      duration: 500ms\n```\n\n----------------------------------------\n\nTITLE: Configuring SPIKE platform and baud rate in MPF\nDESCRIPTION: This code snippet configures the SPIKE platform, serial port, baud rate, and runtime baud rate. The `runtime_baud` parameter is critical for ensuring sufficient throughput to the DMD. Nodes specify connected node board IDs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/dmds.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: spike\nspike:\n  port: /dev/ttyUSB0\n  baud: 115200\n  runtime_baud: 2000000       # play with this setting\n  nodes: 0, 1, 8, 9, 10, 11\n```\n\n----------------------------------------\n\nTITLE: Running the Demo Man Example\nDESCRIPTION: This snippet navigates to the `demo_man` example directory within the cloned `mpf-examples` repository and runs MPF in both machine controller (mc) and backbox mode with the `-X` flag (to use OpenGL).  This will start the Demo Man example with a graphical interface.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\ncd ~/mpf/mpf-examples/demo_man\nmpf both -X\n```\n\n----------------------------------------\n\nTITLE: Set Pulse On Hit and Enable and Release and Disable Rule\nDESCRIPTION: Configures a rule for a driver on the system11 overlay. If the driver is not on the A/C relay, it passes the call onto the parent platform.  Uses settings like `enable_switch`, `eos_switch`, `coil` and `repulse_settings`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/system11.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef set_pulse_on_hit_and_enable_and_release_and_disable_rule(enable_switch: mpf.core.platform.SwitchSettings, eos_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings, repulse_settings: Optional[mpf.core.platform.RepulseSettings]):\n    Configure a rule for a driver on the system11 overlay.\n\n    Will pass the call onto the parent platform if the driver is not on A/C relay.\n```\n\n----------------------------------------\n\nTITLE: Set Light Color MPF\nDESCRIPTION: Sets the color of the specified light.\n<name> is the name of the light.\n<color> is the color to set the light to.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/service_cli.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nlight_color <name> <color>\n```\n\n----------------------------------------\n\nTITLE: Playfield ball_arrived() Method\nDESCRIPTION: Describes the `ball_arrived()` method, which confirms the arrival of the first ball in the queue.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nball_arrived()\n```\n\n----------------------------------------\n\nTITLE: Mapping Keyboard Keys to Switches/Events (YAML)\nDESCRIPTION: This configuration snippet demonstrates how to map keyboard keys or key combinations to pinball machine switches or MPF events using the `keyboard:` section in the machine configuration file. It shows how to define simple key mappings, toggle switches, invert switch behavior, and trigger events with parameters.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/virtual/keyboard.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkeyboard:\n  z:\n    switch: left_flipper\n  slash:\n    switch: right_flipper\n  s:\n    switch: start\n  1:\n    switch: trough1\n    toggle: true\n  2:\n    switch: trough2\n    toggle: true\n  shift+p:\n    switch: lock_post\n    invert: true\n  q:\n    event: machine_reset\n  ctrl+shift+4:\n    event: advance_reel_test\n    params:\n      reel_name: score_1p_10\n      direction: 1\n```\n\n----------------------------------------\n\nTITLE: Accessing Machine Variables in Slide Players (MPF)\nDESCRIPTION: Explains how to access machine variables within slide players in MPF. The syntax `(machine|my_var_name)` is used to retrieve the variable's value as a string, allowing it to be displayed in text display widgets. `my_var_name` needs to be replaced with the actual name of the variable.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machine_vars/index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n(machine|my_var_name)\n```\n\n----------------------------------------\n\nTITLE: Get Absolute Machine Path - Python\nDESCRIPTION: Returns the absolute path to the machine folder.  This path is used to locate configuration files and other machine-specific resources.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n`get_absolute_machine_path()`\n```\n\n----------------------------------------\n\nTITLE: Check Specific Python Version - doscon\nDESCRIPTION: This command checks the version of a specific Python installation, such as Python 3.9. It's used to verify that the specific Python version you intend to use with MPF is correctly installed. The expected output is the version number of Python 3.9.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\npython3.9 --version\n```\n\n----------------------------------------\n\nTITLE: Referencing Device Placeholders in Event Conditions (YAML)\nDESCRIPTION: Shows how to reference a device's placeholder variable within an event condition. In this case, the value of a counter is checked against a specific value on ball 3.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/conditional.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n#! slides:\n#!   nearly_did_all_modes: []\nslide_player:\n  ball_started{ball == 3 and device.counters.your_mode_counter.value > 5}: nearly_did_all_modes\n```\n\n----------------------------------------\n\nTITLE: Accessing Attract Mode\nDESCRIPTION: Shows how to access the attract mode object from within your MPF code. The attract mode is accessible through the machine.modes object.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/attract.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.modes.attract\n```\n\n----------------------------------------\n\nTITLE: Pulse and Enable Solenoid with PWM (0x1A) Command Structure\nDESCRIPTION: This snippet details the structure of the 'Pulse and Enable Solenoid with PWM' command (0x1A). It defines the byte-level layout of the payload, which consists of the solenoid index, pulse time, pulse PWM power, and hold PWM power. This command allows for precise control over solenoid activation using pulse-width modulation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_32\n\nLANGUAGE: None\nCODE:\n```\nByte           Length         Description\n-------------- -------------- ------------------------------------------\n1              1              Index `c` of the solenoid to enable\n\n2              1              Pulse time in ms (0-255)\n\n3              1              Pulse PWM power (0-255). 0=0% power.\n                               255=100% power\n\n4              1              Hold PWM power (0-255). 0=0% power.\n                               255=100% power\n```\n\n----------------------------------------\n\nTITLE: Clearing a Hardware Rule (OPP)\nDESCRIPTION: Removes the linkage between a switch and a driver, effectively disabling any hardware-level association between them. This is useful for temporarily disabling features like flippers without modifying the game configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclear_hw_rule(switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings)\n```\n\n----------------------------------------\n\nTITLE: Define a Slide with a DMD Widget in YAML\nDESCRIPTION: This YAML snippet defines a slide named 'window_slide_1' that includes a display widget with a DMD effect. The DMD effect renders the content of the 'dmd' display onto the slide, simulating the appearance of a physical DMD.  The 'dot_color' specifies the color of the DMD dots.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/dmd.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#! displays:\n#!   window:\n#!     width: 600\n#!     height: 200\n#!   dmd:\n#!     width: 128\n#!     height: 32\n#!     default: true\nslides:\n  window_slide_1:\n    - type: display\n      effects:\n        - type: dmd\n          dot_color: ff5500\n      width: 512\n      height: 128\n#! slide_player:\n#!   show_slide_event:\n#!     window_slide_1:\n#!       target: window\n##! test\n#! post show_slide_event\n#! advance_time_and_run .1\n#! assert_slide_on_top window_slide_1 window\n```\n\n----------------------------------------\n\nTITLE: Logging Active Switches (Python)\nDESCRIPTION: Writes entries to the INFO log file for all switches that are currently active. This method takes optional keyword arguments (`kwargs`) that can be used to customize the logging output.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlog_active_switches(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Drain All Balls - Python\nDESCRIPTION: This function simulates the draining of all balls currently in play within the machine.  It does not require specific ball devices to be configured.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndrain_all_balls()\n```\n\n----------------------------------------\n\nTITLE: Run MPF Engine doscon\nDESCRIPTION: This snippet shows how to run the MPF engine from the command line, including the `-b` option to bypass media controller setup.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/2_creating_a_new_machine.md#_snippet_4\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\pinball\\your_machine>mpf -b\n```\n\n----------------------------------------\n\nTITLE: Expire Widget in Definition YAML\nDESCRIPTION: This snippet shows how to set an expiration time for a widget directly within its YAML definition. When the widget is added to a slide, it will automatically be removed after the specified duration (2 seconds in this example).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/expire.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidgets:\n  my_widget:\n    type: text\n    text: HELLO\n    expire: 2s\n#! widget_player:\n#!   show_widget: my_widget\n##! test\n#! post show_widget\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"HELLO\"\n#! advance_time_and_run 2\n#! assert_text_not_on_top_slide \"HELLO\"\n```\n\n----------------------------------------\n\nTITLE: Pluralization Example in MPF Util\nDESCRIPTION: This code snippet demonstrates how to use the `pluralize` method in the `MPF.util` submodule to conditionally pluralize a string based on a given value. It showcases the method's ability to add a suffix to a template string when the value is not equal to one.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/mpf-gmc.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npluralize(\"Shot%s Remaining\", 1)\n# > \"Shot Remaining\"\n\npluralize(\"Shot%s Remaining\", 3)\n# > \"Shots Remaining\"\n```\n\n----------------------------------------\n\nTITLE: Assert Balls In Play Python\nDESCRIPTION: This method asserts that the number of balls currently in play matches the specified number. It is important to note that the number of balls in play may differ from the number of balls on the playfield, for instance, when a ball is held in a ball device.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.assertBallsInPlay(3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Player Controlled Eject Event (Active) in YAML\nDESCRIPTION: This snippet configures the plunger to eject the ball when the launch button is pressed (switch becomes active).  The `player_controlled_eject_event` is set to the active event of the launch button switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/auto_manual.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    eject_coil: c_plunger\n    mechanical_eject: true\n    player_controlled_eject_event: s_launch_button_active\n```\n\n----------------------------------------\n\nTITLE: Logging Assertions with assertLogs() in Python\nDESCRIPTION: The `assertLogs()` method asserts that a log message of a certain level or higher is emitted on a specified logger or its children. It is used as a context manager, capturing log messages during the execution of the code within the `with` statement. Useful for verifying that logging statements are triggered as expected.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nwith self.assertLogs('foo', level='INFO') as cm:\n    logging.getLogger('foo').info('first message')\n    logging.getLogger('foo.bar').error('second message')\n    self.assertEqual(cm.output, ['INFO:foo:first message', 'ERROR:foo.bar:second message'])\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment\nDESCRIPTION: This command creates a new virtual environment named `mpf-venv` using Python 3. The `-p python3` option specifies that Python 3 should be used for the virtual environment. This isolates the dependencies for MPF development from the system-wide Python installation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/setup.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nvirtualenv -p python3 mpf-venv\n```\n\n----------------------------------------\n\nTITLE: Asserting event calls with assertEventCalled\nDESCRIPTION: This example demonstrates how to use `assertEventCalled` to verify that a specific event has been called a certain number of times during a test. It requires the event to be mocked using `self.mock_event()` beforehand and provides a way to check if an event was called at least once or a specific number of times.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfBcpTestCase.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nself.mock_event('my_event')\nself.assertEventNotCalled('my_event')  # This will pass\n\nself.post_event('my_event')\nself.assertEventCalled('my_event') # This will pass\nself.assertEventCalled('my_event', 1)  # This will pass\n\nself.post_event('my_event')\nself.assertEventCalled('my_event') # This will pass\nself.assertEventCalled('my_event', 2)  # This will pass\n```\n\n----------------------------------------\n\nTITLE: Pulse a Coil with MPF Service CLI\nDESCRIPTION: This command pulses a specific coil using the MPF Service CLI.  Replace `your_coil` with the actual name of the coil as defined in your MPF configuration.  This tests if the coil can be activated through software. Default pulse time is 10ms, which may need to be increased for some mechs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/includes/troubleshooting_coils.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncoil_pulse your_coil\n```\n\n----------------------------------------\n\nTITLE: Adding a Switch Handler with Switch Object (Python)\nDESCRIPTION: Registers a handler to take action on a switch event. This is the same as `add_switch_handler` but instead of using the switch name, it takes a `switch` object. Parameters include the `switch` object, `callback` function, target `state`, `ms` delay, `return_info` flag, and optional `callback_kwargs`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadd_switch_handler_obj(switch, callback, state=1, ms=0, return_info=False, callback_kwargs=None)\n```\n\n----------------------------------------\n\nTITLE: Verifying Event Arguments with assertEventCalledWith() in Python\nDESCRIPTION: The `assertEventCalledWith()` method asserts that an event was called with specific keyword arguments. This allows testing the data passed with events, ensuring correct event parameterization. Requires mocking the event with `self.mock_event()` before assertion.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nself.mock_event('jackpot')\n\nself.post_event('jackpot', count=1, first_time=True)\nself.assertEventCalled('jackpot')  # This will pass\nself.assertEventCalledWith('jackpot', count=1, first_time=True)  # This will also pass\nself.assertEventCalledWith('jackpot', count=1, first_time=False)  # This will fail\n```\n\n----------------------------------------\n\nTITLE: Configuring a Ball Hold in MPF\nDESCRIPTION: This code snippet demonstrates how to configure a ball hold named 'bunker' in MPF. It specifies the ball device to hold balls (`bd_bunker`) and the number of balls to hold (`balls_to_hold`). This configuration allows the machine to temporarily hold a ball for game logic purposes, such as starting a video mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/ball_holds.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nball_devices:\n  bd_bunker:\n    eject_coil: c_eject\n    ball_switches: s_ball1\nball_holds:\n  bunker:\n    balls_to_hold: 1\n    hold_devices: bd_bunker\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Player Variables in MPF YAML\nDESCRIPTION: This snippet demonstrates how to set the `initials` player variable in the MPF configuration. This is used to automatically enter initials in high score mode for EM machines which do not have a display to enter initials. This bypasses the need for player input. The `value_type` is set to `str` and the `initial_value` is set to `AAA`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/high_scores/high_scores_in_ems.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplayer_vars:\n  initials:\n    value_type: str\n    initial_value: AAA\n```\n\n----------------------------------------\n\nTITLE: Configuring Pololu Maestro as Servo Controller Platform in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure the `pololu_maestro` platform as the default servo controller in the `hardware:` section of your MPF machine-wide config file. This tells MPF to use the Pololu Maestro for controlling servos. If you are using multiple types of servo controllers, you can override this default in individual servo device configs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pololu_maestro.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  servo_controllers: pololu_maestro\n```\n\n----------------------------------------\n\nTITLE: Matrix Light Configuration Example (P-ROC/P3-ROC)\nDESCRIPTION: This code snippet shows how to configure a matrix light in the `lights:` section of the MPF configuration file. The `number` setting specifies the column and row outputs that make up each lamp. It's applicable for both P-ROC and P3-ROC.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/lights.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  some_light:\n    subtype: matrix\n    number: C-A2-B0-0:R-A2-B1-0\n```\n\n----------------------------------------\n\nTITLE: Setting Default Light Hardware Update Rate in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure the default light hardware update frequency (in Hz) in the MPF configuration file. Reducing the update rate can help avoid bus contention issues when a large number of lights are used.  A lower value might result in less smooth light fades.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/includes/troubleshooting_lights.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmpf:\n  default_light_hw_update_hz: 30   # defaults to 50\n```\n\n----------------------------------------\n\nTITLE: Enabling Keyboard Debugging (YAML)\nDESCRIPTION: This snippet shows how to enable keyboard debugging in the `keyboard:` section to print out the current key and modifiers to the console. This helps determine the exact names of modifier keys on your system. The `debug: yes` entry activates the printout functionality, showing live keyboard events in the console.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/virtual/keyboard.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkeyboard:\n   debug: yes\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting MPF Hanging on BCP Connection\nDESCRIPTION: This issue arises when MPF is started without the -b option, causing it to hang while trying to connect to the media controller, which may not be running yet. The solution is to run MPF with the -b option (mpf -b) or ensure the media controller is running.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/2_creating_a_new_machine.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nBCPClientSocket.local_display : Connecting BCP to 'local_display' at localhost:5050...\n```\n\n----------------------------------------\n\nTITLE: Config Player: Subscription Syntax (Standalone)\nDESCRIPTION: This snippet demonstrates the subscription syntax for defining a config player in a standalone configuration. This syntax is not supported by all config players and variables. The action defined by `<depends on the player>` is performed when the conditional statement `machine.test_machine_var == 23` becomes true and is removed/stopped when it becomes false.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/index.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nexample_player:\n  \"{machine.test_machine_var == 23}\":\n      <depends on the player>\n```\n\n----------------------------------------\n\nTITLE: Configuring Drop Target Reset on Event (YAML)\nDESCRIPTION: This snippet illustrates how to configure a drop target to reset when a specific event (`mpf_is_awesome`) is posted.  It demonstrates using the `reset_events` setting within the `drop_targets` configuration.  It defines the switch, reset coil, and the event to trigger the reset action.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#! switches:\n#!   s_drop_target_1:\n#!     number: 1\n#! coils:\n#!   c_drop_target_reset:\n#!     number: 1\ndrop_targets:\n  my_drop_target:\n    switch: s_drop_target_1\n    reset_coil: c_drop_target_reset\n    reset_events: mpf_is_awesome\n```\n\n----------------------------------------\n\nTITLE: DMD Dots Filter Configuration\nDESCRIPTION: This code snippet shows an example of how to configure the 'dmd_dots' filter in GMC.  It sets the filter to dmd_dots. Configuration options are the same as for virtual_dmd.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/window-filters.md#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n    [filter]\n    filter=\"dmd_dots\"\n```\n\n----------------------------------------\n\nTITLE: Add PKONE port to config file (Windows)\nDESCRIPTION: Add the PKONE COM port to the machine config file within the `pkone:` section.  This example is for Windows. The `port:` setting specifies the COM port number that MPF will use to communicate with the PKONE Nano controller. Replace `com3` with the actual COM port number identified in Device Manager.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/config.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npkone:\n  port: com3\n```\n\n----------------------------------------\n\nTITLE: Registering Processor Connection (OPP)\nDESCRIPTION: Registers a processor connection with the platform. This method associates a serial number with a communicator instance, allowing the platform to send and receive messages to a specific processor chain.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nregister_processor_connection(serial_number, communicator)\n```\n\n----------------------------------------\n\nTITLE: Response to Get Simple Lamp Count (0x03)\nDESCRIPTION: This is the response format to the 'Get Simple Lamp Count' command (0x03). It contains a single byte representing the number of simple lamps connected to the hardware platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nByte           Length         Description\n-------------- -------------- ------------------------------------------\n0              1              Simple Lamp count `l` (0 to 255). 0 if no\n                               simple lamps exist.\n```\n\n----------------------------------------\n\nTITLE: Accessing FadeCandy Platform via Code\nDESCRIPTION: This snippet demonstrates how to access the Fadecandy hardware platform within the Mission Pinball Framework using the `self.machine.hardware_platforms` dictionary.  The key 'fadecandy' is used to retrieve the platform object.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/fadecandy.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['fadecandy']\n```\n\n----------------------------------------\n\nTITLE: Valid File Show Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates the correct structure for a show defined in a standalone file. The file starts with a comment indicating the show version and contains a list of steps, each with a duration and a set of light commands.  The filename is used as the show name.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-show-1.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n##! show: flash_red\n#show_version=5\n- duration: 1\n  lights:\n    led1: red\n- duration: 1\n  lights:\n    led1: off\n```\n\n----------------------------------------\n\nTITLE: Configuring GMC Filter\nDESCRIPTION: This code snippet shows an example of how to configure a filter in the *gmc.cfg* file.  It defines the filter to use (virtual_dmd) and sets parameters such as columns, rows, hardness, and spacing.  It requires the GMC module to be installed and configured.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/window-filters.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    [filter]\n    filter=\"virtual_dmd\"\n    columns=120\n    rows=45\n    hardness=5\n    spacing=2\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Combo Switch in YAML\nDESCRIPTION: This code snippet shows how to configure a basic combo switch in MPF using YAML. It defines a combo switch named 'both_flippers' that triggers the 'flipper_cancel' event when both the left and right flipper switches are activated. This setup leverages the built-in flipper cancel functionality.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/combo_switches.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncombo_switches:\n  both_flippers:\n    tag_1: left_flipper\n    tag_2: right_flipper\n    events_when_both: flipper_cancel\n```\n\n----------------------------------------\n\nTITLE: Configuring events_to_send in osc\nDESCRIPTION: This YAML snippet configures the OSC platform to send specific MPF events to a remote OSC server.  It defines the `hardware` platform as `osc`, specifies the remote IP and port, and lists the events to forward. The remote OSC server will receive messages when these events are triggered within MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/osc.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: osc\n\nosc:\n  remote_ip: 127.0.0.1\n  remote_port: 8000\n\n  events_to_send:\n    - player_score\n    - some_non_osc_switch_active\n    - some_non_osc_switch_inactive\n```\n\n----------------------------------------\n\nTITLE: Build and install pypinproc\nDESCRIPTION: These commands build and install the pypinproc library using Python's setup.py script. `python3 setup.py build` compiles the library, and `sudo python3 setup.py install` installs it system-wide.  The installation can also be performed in a virtual environment by omitting `sudo` from the last command.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/mac.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd pypinproc\npython3 setup.py build\nsudo python3 setup.py install\n```\n\n----------------------------------------\n\nTITLE: Generate Locale on Ubuntu (Pine64)\nDESCRIPTION: Generates the specified locale (e.g., en_US.UTF-8) and reconfigures the system locales. This is a crucial step as the default locale is often broken in the Ubuntu installer for Pine64. The command generates the locale and then uses `dpkg-reconfigure` to set it as the system default.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/pine64.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo locale-gen \"en_US.UTF-8\"\nGenerating locales...\n  en_US.UTF-8... done\nGeneration complete.\n\n$ sudo dpkg-reconfigure locales\nGenerating locales...\n  en_US.UTF-8... up-to-date\nGeneration complete.\n```\n\n----------------------------------------\n\nTITLE: Configuring a Shot Group in MPF with YAML\nDESCRIPTION: This snippet configures a shot group, grouping the individual shots together for easier interaction as a single entity. This is essential for implementing shot rotation. Note that the order of shots is important for rotation logic. This configuration must be put in the base mode configuration in `/modes/base/config/base.yaml`\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/lanes_mode.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshot_groups:\n  indy_lanes:\n    shots: indy_i, indy_n, indy_d, indy_y\n```\n\n----------------------------------------\n\nTITLE: Configure Driver (FAST)\nDESCRIPTION: This method configures a driver connected to the FAST controller.  It takes the driver configuration, number, and platform-specific settings as input and returns a `FASTDriver` object.\n\nParameters:\n* config: Driver config.\n* number: Number of this driver.\n* platform_settings: Platform specific settings.\n\nReturns: Driver object\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/fast.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_driver(config: mpf.core.platform.DriverConfig, number: str, platform_settings: dict) -> mpf.platforms.fast.fast_driver.FASTDriver\n```\n\n----------------------------------------\n\nTITLE: Ending Game with Timed Switch in MPF (YAML)\nDESCRIPTION: This snippet configures a timed switch called `game_cancel` that listens for the `start` switch being held for 5 seconds. When the switch is active for the specified time, it triggers the `end_game` event, effectively ending the current game. It relies on the `timed_switches` section in the MPF configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/long_presssing_start_to_end_game.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntimed_switches:\n  game_cancel:\n    switch_tags: start\n    time: 5s\n    events_when_active: end_game\n```\n\n----------------------------------------\n\nTITLE: Defining a Config List with Comma Separated Values (YAML)\nDESCRIPTION: This snippet shows one way to define a list of configuration items using comma-separated values in a single line. The list contains the items `item1`, `item2`, and `item3`. This approach is concise but might be less readable for longer lists.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/lists.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconfig: item1, item2, item3\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Instances of a Show with Different Tokens (YAML)\nDESCRIPTION: This snippet shows how to run multiple instances of the same show ('flash_red') simultaneously with different token values. The 'some_event' and 'some_other_event' events trigger the show with 'led_02' and 'led_03' respectively.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  some_event:\n    flash_red:\n      loops: -1\n      show_tokens:\n        led: led_02\n  some_other_event:\n    flash_red:\n      loops: -1\n      show_tokens:\n        led: led_03\n```\n\n----------------------------------------\n\nTITLE: Install rgbmatrix extension (rpi-rgb-led-matrix)\nDESCRIPTION: This snippet installs the `rgbmatrix` extension on a Raspberry Pi. It clones the repository, changes the directory, updates the package list, installs Python 3 development tools and Pillow library, builds the Python module and finally installs the built Python module.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/rpi_dmd.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/hzeller/rpi-rgb-led-matrix.git\ncd rpi-rgb-led-matrix\nsudo apt-get update && sudo apt-get install python3-dev python3-pillow -y\nmake build-python PYTHON=$(which python3)\nsudo make install-python PYTHON=$(which python3)\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Text Widget Style in MPF\nDESCRIPTION: This snippet demonstrates how to define a default style for text widgets in the `widget_styles` section of an MPF configuration file. The style named `text_default` will be applied to all text widgets unless a different style is explicitly specified. This example sets the default font size to 21 and the color to red.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/widget_styles.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget_styles:\n  text_default:\n    font_size: 21\n    color: red\n```\n\n----------------------------------------\n\nTITLE: Creating UDEV Rule for FAST Devices (Bash)\nDESCRIPTION: This snippet demonstrates how to create a UDEV rule to pin FAST devices based on the USB port they are plugged into. This is useful when you have multiple FAST devices.  The device will then be available as /dev/ttyDMD1.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/config.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSUBSYSTEM==\"tty\", ATTRS{idVendor}==\"0403\", ATTRS{idProduct}==\"6011\", ENV{ID_PATH_TAG}==\"pci-0000_00_14_0-usb-0_12_1_0\", SYMLINK+=\"ttyDMD1\"\n```\n\n----------------------------------------\n\nTITLE: Configure Serial Connection to LISY - YAML\nDESCRIPTION: This snippet shows the YAML configuration required in the MPF machine config file to connect to the LISY board via a serial connection. It specifies the platform as 'lisy', the connection type as 'serial', the serial port, and the baud rate.  Replace `com1` with the appropriate COM port for your system.  Dependencies: pyserial must be installed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/connection.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  platform: lisy\nlisy:\n  connection: serial\n  port: com1               # replace this with your com port\n  baud: 115200\n```\n\n----------------------------------------\n\nTITLE: Wizard Mode Configuration\nDESCRIPTION: This YAML configuration defines a wizard mode (example: madness). It specifies start and stop events, and events that are triggered when the mode starts and stops, similarly to mission modes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/mode_layering.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: madness\n# modes/madness/config/madness.yaml\n\nmode:\n  start_events: start_mode_madness\n  stop_events: stop_mode_madness, stop_wizards\n  events_when_started: mode_type_wizard_started\n  events_when_stopped: mode_type_wizard_stopped\n```\n\n----------------------------------------\n\nTITLE: Accrual Logic Block with Conditional Events in MPF\nDESCRIPTION: This snippet demonstrates a more complex accrual logic block named 'test_accrual' and its integration with the event player. It uses conditional events based on the accrual's state. It is crucial to set `reset_on_complete` to `false` for the conditional logic on completion to work correctly. Includes a test scenario with mocked events to verify the functionality.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/accruals.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\naccruals:\n  test_accrual:\n    events:\n      - shot1_hit\n      - shot2_hit\n      - shot3_hit\n    reset_on_complete: false     # this is needed for the last event player\nevent_player:\n  test_event{device.accruals.test_accrual.value[0]}: shot1_was_hit\n  test_event{device.accruals.test_accrual.value[1]}: shot2_was_hit\n  test_event{device.accruals.test_accrual.value[2]}: shot3_was_hit\n  test_event{device.accruals.test_accrual.completed}: accrual_completed\n# Note: For this last conditional logic to be able to evaluate as true, the accrual setting\n# reset_on_complete must be set to No/False. Otherwise the accrual will reset instantly and this will never be true.\n##! test\n#! start_game\n#! start_mode my_mode\n#! mock_event shot1_was_hit\n#! mock_event shot2_was_hit\n#! mock_event shot3_was_hit\n#! mock_event accrual_completed\n#! assert_bool_condition False device.accruals.test_accrual.value[0]\n#! assert_bool_condition False device.accruals.test_accrual.value[1]\n#! assert_bool_condition False device.accruals.test_accrual.value[2]\n#! post test_event\n#! assert_event_not_called shot1_was_hit\n#! assert_event_not_called shot2_was_hit\n#! assert_event_not_called shot3_was_hit\n#! post shot1_hit\n#! assert_bool_condition True device.accruals.test_accrual.value[0]\n#! assert_bool_condition False device.accruals.test_accrual.value[1]\n#! assert_bool_condition False device.accruals.test_accrual.value[2]\n#! assert_bool_condition False device.accruals.test_accrual.completed\n#! post test_event\n#! assert_event_called shot1_was_hit\n#! assert_event_not_called shot2_was_hit\n#! assert_event_not_called shot3_was_hit\n#! assert_event_not_called accrual_completed\n#! post shot3_hit\n#! post shot2_hit\n#! post test_event\n#! assert_event_called shot1_was_hit 2\n#! assert_event_called shot2_was_hit\n#! assert_event_called shot3_was_hit\n#! assert_event_called accrual_completed\n#! assert_bool_condition True device.accruals.test_accrual.value[0]\n#! assert_bool_condition True device.accruals.test_accrual.value[1]\n#! assert_bool_condition True device.accruals.test_accrual.value[2]\n#! assert_bool_condition True device.accruals.test_accrual.completed\n```\n\n----------------------------------------\n\nTITLE: Enable Bus Tracing for P-Roc in MPF config.yaml\nDESCRIPTION: Enable bus tracing in the `p_roc` section of your MPF `config.yaml` file to log all calls to libpinproc. This will cause a lot of additional log lines and might considerably slow down MPF. It is recommended to remove bus tracing after debugging.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/troubleshooting.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\np_roc:\n  debug: true\n  trace_bus: true\n```\n\n----------------------------------------\n\nTITLE: Installing MPF and MPF-MC (Shell)\nDESCRIPTION: Upgrades pip, clones the MPF and MPF-MC repositories from GitHub (specifying the 0.56.x branch), and installs them in editable mode using pip. This requires the pyenv environment to be activated.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/raspberry.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Upgrade pip\npip install --upgrade pip\n\n# clone mpf repository (note 0.56.x branch has been specified)\ngit clone -b 0.56.x https://github.com/missionpinball/mpf.git ~/mpf-git/mpf\n\n# install MPF\ncd ~/mpf-git/mpf\npip install -e .\n\n\n# clone mpf-mc repository (note 0.56.x branch has been specified)\n# Note: MPF-MC can take several minutes to install\ngit clone -b 0.56.x https://github.com/missionpinball/mpf-mc.git ~/mpf-git/mpf-mc\n\n# install MPF-MC\ncd ~/mpf-git/mpf-mc\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Animating Multiple Properties in Single Step (YAML)\nDESCRIPTION: This YAML snippet shows how to animate multiple properties in a single animation step by using lists for both the `property` and `value` parameters. The number of items in both lists must be the same. This example moves a widget diagonally while rotating it over 5 seconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n    - property: x, y, rotation\n      value: 10, 20, 180\n      duration: 5s\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Segment Displays with Slides (YAML)\nDESCRIPTION: This YAML snippet shows how to implement virtual segment displays using slides in MPF. It defines a slide named `segment_displays` with a text widget that displays the player's score. The slide is shown when the game starts, as configured in the `slide_player` section. This emulates segment displays using a text widget with a specific font.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/alpha_numeric.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  segment_displays:\n    widgets:\n      - type: text\n        text: (player1|score)\n        number_grouping: true\n        min_digits: 2\n        font_name: ten_segment\n        color: blue\n        x: 620\n        y: 724\n        font_size: 240\n        anchor_x: right\n        anchor_y: bottom\n        z: 2\n# show slide on game start\nslide_player:\n  game_started: segment_displays\n##! test\n#! start_game\n#! advance_time_and_run .1\n#! assert_slide_on_top segment_displays\n```\n\n----------------------------------------\n\nTITLE: Updating position_switches Configuration (Old way)\nDESCRIPTION: This snippet shows the old way of defining `position_switches` using `!!omap` in MPF config version 5. The `!!omap` tag ensured that the order of items in the list was preserved. It is an example of configuration using `!!omap` that needs to be updated.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/config_v6.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nposition_switches:  !!omap\n- up: s_position_up\n- down: s_position_down\n```\n\n----------------------------------------\n\nTITLE: Capture Netbus Traffic on Spike 1\nDESCRIPTION: This command sequence redirects serial communication to capture netbus traffic on a Spike 1 system. It moves the original serial port, uses interceptty to log traffic, and then runs the game binary. Requires interceptty on a mounted USB drive. Timing issues might be observed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/troubleshooting.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncd /mnt && chmod +x interceptty-arm\nmv /dev/ttyS4 /dev/ttyS4_real; interceptty-arm -s 'ispeed 460800 ospeed 460800' -l /dev/ttyS4_real /dev/ttyS4 > /mnt/serial_dump &\n```\n\nLANGUAGE: console\nCODE:\n```\n/games/game\n```\n\n----------------------------------------\n\nTITLE: Accessing BCP Instance in MPF (Python)\nDESCRIPTION: Describes how to access the single BCP instance within an MPF project. This instance can be accessed using `self.machine.bcp` from within MPF code. It enables interaction with other pinball machine components.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/bcp.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.bcp\n```\n\n----------------------------------------\n\nTITLE: Mixing widget player formats (YAML)\nDESCRIPTION: This snippet demonstrates how to mix different formats in the `widget_player:` section of an MPF config file. It shows how to add a widget to a specific slide based on an event, and also add a widget to the current slide based on another event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_player:\n  some_event:\n    laughing_jackal:\n      slide: my_slide\n  some_other_event: another_widget\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging\nDESCRIPTION: Configures the logging level for the service mode, allowing control over console and file logging verbosity.  Valid options are \"none\", \"basic\", or \"full\".\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/service.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_logging(logger: str, console_level: str = 'basic', file_level: str = 'basic', url_base=None)\n```\n\n----------------------------------------\n\nTITLE: Installing MPF-MC 0.57 via pip\nDESCRIPTION: This command installs the pre-release version of MPF-MC (version 0.57.0.devXX) using pip.  The `--pre` flag is required to install pre-release versions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/0.57.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install mpf-mc --pre\n```\n\n----------------------------------------\n\nTITLE: Running MPF with a Specific Configuration\nDESCRIPTION: This command demonstrates how to run MPF with a specific configuration file located in a particular directory.  It assumes the user has navigated to the specified directory in the command prompt.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/4_adjust_flipper_power.md#_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial>mpf\n```\n\n----------------------------------------\n\nTITLE: Installing MPF 0.57 via pip\nDESCRIPTION: This command installs the pre-release version of MPF 0.57 using pip. The `--pre` flag is essential for installing pre-release versions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/0.57.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install mpf --pre\n```\n\n----------------------------------------\n\nTITLE: Create Data Manager (Python)\nDESCRIPTION: Creates the TestDataManager instance, which is used to manage data during testing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ncreate_data_manager(config_name)\n\nCreate TestDataManager.\n```\n\n----------------------------------------\n\nTITLE: Asserting Game Not Running in Python\nDESCRIPTION: The `assertGameIsNotRunning()` method asserts that a game is not currently running. This is typically used in setup or teardown methods to ensure the game state is as expected before or after a test. This checks the status of the game instance.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nself.assertGameIsNotRunning()\n```\n\n----------------------------------------\n\nTITLE: Base Mode Configuration\nDESCRIPTION: This YAML configuration defines the base mode, which runs for the entire player's turn. It includes handlers to manage the transition between global and wizard modes.  It restarts global mode when a wizard mode stops, unless base mode itself is stopping.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/mode_layering.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: base\n# modes/base/config/base.yaml\nevent_player:\n  mode_base_started:\n    - start_mode_global\n  mode_base_will_stop:\n    - stop_mode_global\n  mode_type_wizard_started:\n    - stop_mode_global\n  mode_type_wizard_stopped{not mode[\"base\"].stopping}:\n    - start_mode_global\n```\n\n----------------------------------------\n\nTITLE: Accessing the SmartMatrix Platform in MPF (Python)\nDESCRIPTION: This code snippet shows how to access the SmartMatrix hardware platform instance within the Mission Pinball Framework (MPF) using the `self.machine.hardware_platforms` dictionary. This allows you to interact with the SmartMatrix shield and control the RGB DMD.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/smartmatrix.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['smartmatrix']\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Platform in MPF (Python)\nDESCRIPTION: This code snippet shows how to set the default hardware platform for MPF. The `set_default_platform` method takes the platform's name (string) as input. This default platform is used if a device doesn't have a specific platform configured. This is necessary to initialize hardware interfaces.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/machine.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n`set_default_platform(name: str) → None`\n\nSet the default platform. It is used if a device class-specific or device-specific platform is not specified.\n\nParameters:\n\n* **name** – String name of the platform to set to default.\n```\n\n----------------------------------------\n\nTITLE: Setting Number of Balls Known in Python\nDESCRIPTION: This snippet shows the usage of `self.set_num_balls_known()` to set the number of balls known by the ball controller. This is essential when testing scenarios without ball devices, enabling the controller to function as if a specific number of balls are present, thereby ensuring the test logic operates correctly under those conditions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nself.set_num_balls_known(3)\n```\n\n----------------------------------------\n\nTITLE: Install MPF using Debian Installer\nDESCRIPTION: Downloads, extracts, and executes the MPF Debian installer script. This script installs MPF, MPF-MC, and their dependencies. Requires `wget`, `unzip`, and `sudo`. Removes the downloaded archive and extracted directory after installation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/xubuntu.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncd ~\nwget https://github.com/missionpinball/mpf-debian-installer/archive/0.55.x.zip\nunzip dev.zip\ncd mpf-debian-installer-dev\nsudo -H ./install\nrm ~/dev.zip && rm -Rf ~/mpf-debian-installer-dev\n```\n\n----------------------------------------\n\nTITLE: Accessing DropTargetBank Object in MPF\nDESCRIPTION: This code snippet demonstrates how to access a DropTargetBank object in your MPF machine using `self.machine.drop_target_banks`. It provides examples for accessing the bank by name (e.g., 'foo') both as an attribute and as a dictionary key. It also mentions accessing devices by tag or hardware number using the DeviceCollection documentation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/drop_target_banks.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.drop_target_banks.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.drop_target_banks['foo']\n```\n\n----------------------------------------\n\nTITLE: Defining the Plunger Ball Device (YAML)\nDESCRIPTION: This snippet defines the plunger lane as a ball device, linking the ball switch and eject coil.  The `ball_switches` entry should contain the switch that detects the ball in the plunger lane. This configuration tells MPF that this device can hold one ball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/coil_fired.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_plunger:\n    ball_switches: s_plunger_lane\n    eject_coil: c_plunger\n```\n\n----------------------------------------\n\nTITLE: Configuring Displays with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure two displays: \"window\" and \"dmd\", within the `displays:` section. The \"window\" display is set to 600x200 pixels, while the \"dmd\" display is set to 128x32 pixels and is configured as the default display with left-aligned horizontal rounding.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/displays.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  window:\n    height: 200\n    width: 600\n  dmd:\n    width: 128\n    height: 32\n    default: true\n    round_anchor_x: left\n```\n\n----------------------------------------\n\nTITLE: Widget Player Full Config YAML\nDESCRIPTION: This snippet shows the 'full' configuration for the widget player, enabling the addition of widgets to slides with customizable settings. It allows specification of options on a per-widget basis, such as target slide. This offers more granular control compared to the express configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/widget_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_player:\n   event1:\n      widget1:\n         <settings>\n   event2:\n      widget2:\n         <settings>\n   event3:\n      widget3:\n         <settings>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Stepper with StepStick\nDESCRIPTION: This method configures a stepper motor that is driven by a StepStick controller connected to a digital output. It takes the stepper's number (a string) and a configuration dictionary as input, and it returns a `StepperPlatformInterface` instance. This interface provides methods to control the stepper motor.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/step_stick.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure_stepper(number: str, config: dict) → mpf.platforms.interfaces.stepper_platform_interface.StepperPlatformInterface\n```\n\n----------------------------------------\n\nTITLE: Add DMD Device Entry in Machine Config (YAML)\nDESCRIPTION: Configures a DMD device entry in the `dmds:` section of the machine configuration file. Sets the number of shades to 16, which is a common setting for modern Stern DMD machines. The `shades` option determines the number of brightness levels the DMD will display.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/dmd.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndmds:\n  my_dmd:\n    shades: 16\n```\n\n----------------------------------------\n\nTITLE: Configure SLAM, Outhole, and Reset Switches in MPF YAML\nDESCRIPTION: This YAML snippet configures the SLAM, outhole, and reset switches within MPF when using a LISY1 controller. The `number` property corresponds to the switch number recognized by the `mpfserver` for LISY1. Note that the SLAM switch logic is typically inverted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/switches_lisy1.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  slam:\n    number: 76\n  outhole:\n    number: 66\n  reset:\n    number: 56\n```\n\n----------------------------------------\n\nTITLE: Reset on Complete Example\nDESCRIPTION: This YAML snippet demonstrates how to set a delay before a drop target bank resets after it has been completed. The `reset_on_complete` setting is used to specify the time delay, in this case, 500 milliseconds, before the bank resets. This assumes the existence of a configured drop target bank.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/drop_target_banks.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreset_on_complete: 500ms\n```\n\n----------------------------------------\n\nTITLE: Getting P-ROC Hardware Switch States (Python)\nDESCRIPTION: Reads the initial switch states from the P-ROC. The P-ROC uses specific values to represent switch states: 1 for closed (debounced), 2 for open (debounced), 3 for closed (not debounced), and 4 for open (not debounced).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/p_roc.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef get_hw_switch_states() -> Dict[str, bool]:\n    \"\"\"Read in and set the initial switch state.\n\n    The P-ROC uses the following values for hw switch states:\n    1 - closed (debounced)\n    2 - open (debounced)\n    3 - closed (not debounced)\n    4 - open (not debounced)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Config Player: One Line Syntax (Standalone)\nDESCRIPTION: This snippet demonstrates the one-line syntax for defining a config player in a standalone configuration. This syntax is not supported by all config players. The event `event_which_is_posted_elsewhere` triggers a default action on the specified element defined by `<depends on the player>`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/index.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexample_player:\n  event_which_is_posted_elsewhere: <depends on the player>\n```\n\n----------------------------------------\n\nTITLE: Installing MPF from Local Repository\nDESCRIPTION: This snippet outlines the steps to install MPF from a local repository. It involves cloning the MPF repository from GitHub, checking out the '0.80.x' branch, and installing the package in editable mode using pip. Requires Git and an active Python 3.8+ virtual environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/index.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/missionpinball/mpf\ncd mpf\ngit checkout 0.80.x\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse, Enable, Release, and Disable Rule (Python)\nDESCRIPTION: Adds a rule to pulse and enable a driver when a switch is hit, and then disables the driver when the switch is released or a disable switch is activated. The method supports EOS switches for repulsing the coil.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/platform_controller.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_enable_and_release_and_disable_rule(enable_switch: mpf.core.platform_controller.SwitchRuleSettings, eos_switch: mpf.core.platform_controller.SwitchRuleSettings, driver: mpf.core.platform_controller.DriverRuleSettings, pulse_setting: Optional[mpf.core.platform_controller.PulseRuleSettings] = None, hold_settings: Optional[mpf.core.platform_controller.HoldRuleSettings] = None, eos_settings: Optional[mpf.core.platform_controller.RepulseRuleSettings] = None) -> mpf.core.platform_controller.HardwareRule\n```\n\n----------------------------------------\n\nTITLE: Adding Mode Event Handler in Python\nDESCRIPTION: Illustrates how to register an event handler that is automatically removed when the mode stops. Takes event name, handler function, priority and optional keyword arguments. Returns an EventHandlerKey.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/game.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadd_mode_event_handler(event: str, handler: Callable, priority: int = 0, **kwargs) -> mpf.core.events.EventHandlerKey\n```\n\n----------------------------------------\n\nTITLE: Example YAML Error Message (Console)\nDESCRIPTION: This is an example of a YAML error message that you might encounter when working with MPF configuration files. The message indicates the file, line number, and position where the parser encountered an issue. It suggests an error in the YAML syntax related to mapping values.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/debugging_yaml_parse_errors.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nValueError: YAML error found in file config/config.yaml. Line 22,Position 10: mapping values are not allowed here\n  in \"config/config.yaml\", line 22, column 10\n```\n\n----------------------------------------\n\nTITLE: Old High Score File Format\nDESCRIPTION: This snippet shows the old high score file format used in MPF versions prior to config version 6. It uses `!!python/tuple` to store high score entries, which needs to be removed in the new format.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/config_v6.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbonus_rupees:\n- !!python/tuple\n  - WIZ\n  - 146\n- !!python/tuple\n  - AAA\n  - 126\nscore:\n- !!python/tuple\n  - WIZ\n  - 563550\n- !!python/tuple\n  - WIZ\n  - 537200\n- !!python/tuple\n  - WIZ\n  - 510630\n- !!python/tuple\n  - WIZ\n  - 482705\n- !!python/tuple\n  - AAA\n  - 458435\n- !!python/tuple\n  - WIZ\n  - 449960\n```\n\n----------------------------------------\n\nTITLE: Giving Up Ball Search\nDESCRIPTION: This code defines the `give_up` method, which is called when the ball search process fails to find the missing ball. It executes the failed action, which can be adding a replacement ball, ending the game, or ending the current ball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef give_up():\n    \"\"\"Give up the ball search.\n\n    This method is called when the ball search process Did not find the missing ball. It executes the failed action which depending on the specification of ball_search_failed_action, either adds a replacement ball, ends the game, or ends the current ball.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Slide Player\nDESCRIPTION: This YAML configuration demonstrates how to set up a slide player that triggers a custom method in a Godot script when a specific event occurs (player_score).  The 'action: method' specifies that the 'my_method' function within the 'main_slide' scene should be called.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/mpf-slide.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n    player_score:\n        main_slide:\n            action: method\n            method: my_method\n```\n\n----------------------------------------\n\nTITLE: Enable and Define Servos on PD-LED in YAML\nDESCRIPTION: This YAML code snippet demonstrates how to enable servos on a PD-LED board and define two specific servos.  It configures the `pd_led_boards` section within `p_roc` to enable all twelve servo outputs and sets the `max_servo_value`. It then defines two servos, `servos_4_0` and `servos_4_1`, associating them with the PD-LED's servo outputs using the `number` property.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/servos.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\np_roc:\n  pd_led_boards:\n    4:\n      max_servo_value: 300 # rougly maps to 2ms.\n      use_servo_0: true\n      use_servo_1: true\n      use_servo_2: true\n      use_servo_3: true\n      use_servo_4: true\n      use_servo_5: true\n      use_servo_6: true\n      use_servo_7: true\n      use_servo_8: true\n      use_servo_9: true\n      use_servo_10: true\n      use_servo_11: true\nservos:\n  servos_4_0:\n    number: 4-0\n  servos_4_1:\n    number: 4-1\n```\n\n----------------------------------------\n\nTITLE: Playlist Player Configuration Examples\nDESCRIPTION: This snippet shows example configurations for the playlist_player, defining actions to perform on playlists when specific events are triggered. It demonstrates actions such as playing, advancing, and stopping playlists based on configured events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/playlist_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplaylist_player:\n  play_attract_music:\n    playlist:\n      playlist: attract_music\n      action: play\n  advance_playlist:\n    playlist:\n      action: advance\n  stop_playlist:\n    playlist:\n      action: stop\n```\n\n----------------------------------------\n\nTITLE: Award Gadget Event Configuration (YAML)\nDESCRIPTION: This snippet shows the configuration for the \"award_gadget\" event in the event player. It increments the 'gadgets_earned' and 'gadgets_available' player variables when triggered, typically upon accrual completion. This configuration assumes the 'gadget' mode is active.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: gadget\n#! event_player:\n  award_gadget:\n    - gadgets_earned\n    - gadgets_available\n```\n\n----------------------------------------\n\nTITLE: Configuring Plunger Lane Switches in YAML\nDESCRIPTION: This snippet defines the switches for the plunger lane and launch button. The `number` attribute needs to be configured according to the control system connected to the switches. The `type` should be set to `NC` if the switch is an opto.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/auto_manual.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_plunger_lane:\n    number: 2-6\n  s_launch_button:\n    number: 1-5\n```\n\n----------------------------------------\n\nTITLE: Mode Configuration Example YAML\nDESCRIPTION: This YAML snippet demonstrates a typical mode configuration. It specifies the events that start and stop the mode, and also sets the mode's priority. This configuration is essential for managing the behavior of modes within a pinball machine game built with MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/mode_config.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: mode1\nmode:\n  start_events: ball_starting\n  stop_events: timer_mode_timer_complete, shot_right_ramp\n  priority: 300\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse, Release, and Disable Rule (Python)\nDESCRIPTION: Adds a rule to pulse a driver when a switch is hit, and then cancels the pulse when the switch is released or a disable switch is activated.  Also supports End-of-Stroke (EOS) switches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/platform_controller.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_release_and_disable_rule(enable_switch: mpf.core.platform_controller.SwitchRuleSettings, eos_switch: mpf.core.platform_controller.SwitchRuleSettings, driver: mpf.core.platform_controller.DriverRuleSettings, pulse_setting: Optional[mpf.core.platform_controller.PulseRuleSettings] = None, eos_settings: Optional[mpf.core.platform_controller.RepulseRuleSettings] = None) -> mpf.core.platform_controller.HardwareRule\n```\n\n----------------------------------------\n\nTITLE: Setting Slide Expiration Time in YAML\nDESCRIPTION: This snippet configures a slide to automatically expire after a specified time. The `expire` setting defines the duration after which the slide will be removed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/slide_player.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  base:\n    widgets:\n      - type: text\n        text: BASE SLIDE\n        color: ff0000\n        font_size: 100\n  expire_slide:\n    widgets:\n      - type: text\n        text: EXPIRE 5s\n        color: purple\n        y: 66%\n    expire: 5s\n    transition_out:\n      type: wipe\n      duration: 5s\nslide_player:\n  mc_reset_complete.1: expire_slide\n  mc_reset_complete.2: base\n```\n\n----------------------------------------\n\nTITLE: Switch State Log Example - MPF\nDESCRIPTION: This log snippet shows an example of a switch state being reported in the MPF log.  `State:1` indicates the switch is active, which should correspond to a ball being present. `State:0` indicates the switch is inactive. This helps in verifying if switches are correctly detecting balls.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/ball_devices/troubleshooting.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2014-10-27 20:05:29,891 : SwitchController : <<<<< switch: trough1, State:1 >>>>>\n```\n\n----------------------------------------\n\nTITLE: P-ROC Hardware Config (WPC) - YAML\nDESCRIPTION: This YAML snippet configures MPF to use a P-ROC controller installed in an existing WPC machine. It specifies the platform as `p_roc` and the driverboards as `wpc`. The switch configuration shows an example switch using the `SF2` number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: p_roc\n  driverboards: wpc\n\nswitches:\n  s_left_flipper:\n    number: SF2\n```\n\n----------------------------------------\n\nTITLE: Running MPF in both modes\nDESCRIPTION: This command starts both the MPF engine and the Media Controller for the mc_demo example. It assumes you are in the mc_demo directory within the mpf-examples package. This enables you to interact with the demo through the arrow keys and observe the behavior defined in the configuration files.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/examples/mc_demo.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmpf both\n```\n\n----------------------------------------\n\nTITLE: Earnings YAML Example\nDESCRIPTION: This is an example of the `earnings.yaml` file, which tallies the earnings for the machine based on configured switches.  It shows the count and total value for each type of switch (e.g., money, token, service credit).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nmoney:\n  count: 50\n  total_value: 14.0\nservice_credit:\n  count: 4\n  total_value: 4\ntoken:\n  count: 1\n  total_value: 1.0\n```\n\n----------------------------------------\n\nTITLE: Tagging orbit switches for playfield activity detection - YAML\nDESCRIPTION: This example demonstrates tagging orbit switches with \"playfield_active\" to indicate that the ball is in play.  This tag can be used to prevent ball search from starting prematurely. The code assumes the switches are properly defined in the `switches` section with appropriate numbers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/tags.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  mygame_orbit_l:\n    number: 55\n    tags: playfield_active\n  mygame_orbit_r:\n    number: 56\n    tags: playfield_active\n```\n\n----------------------------------------\n\nTITLE: Accessing the Event Player in MPF (Python)\nDESCRIPTION: This snippet shows how to access the `event_player` instance within the MPF framework. You can use `self.machine.event_player` to interact with the event player and trigger events based on your configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/event_player.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.event_player\n```\n\n----------------------------------------\n\nTITLE: Setting Volume with Decibel Gain in YAML\nDESCRIPTION: This snippet shows how to set the volume using decibel values in a YAML configuration file. Decibel values range from -inf to 0.0, with -inf representing the minimum gain (0.0). The \"db\" suffix (case-insensitive and with optional space) indicates a decibel value, except for -inf, which doesn't need the suffix. If the suffix is missing, MPF treats the value as a simple numeric gain.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/gain_values.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvolume: -17.5db\n\nvolume: 0.0 db\n\nvolume: -inf\n```\n\n----------------------------------------\n\nTITLE: Setting Default Display for Windowed Apps (Shell)\nDESCRIPTION: Sets the DISPLAY environment variable to :0. This is necessary when connecting via SSH to specify the display for windowed applications.  Only needed when not using the local console.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/raspberry.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# set default display for windowed apps\nexport DISPLAY=:0\n```\n\n----------------------------------------\n\nTITLE: Updating Device and Installing Dependencies (Shell)\nDESCRIPTION: Updates the Raspberry Pi's package list and upgrades installed packages. Installs necessary dependencies for MPF and MPF-MC, including libraries for SSL, curses, FFI, readline, bzip2, SQLite, LZMA, Tk, GStreamer, SDL2, and various codecs. Additional dependencies for mpf-monitor are also installed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/raspberry.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Update your device. Note that the 'update' command will run quickly,\n# but 'upgrade' could take several minutes\nsudo apt update\nsudo apt upgrade\n\n# Dependencies. Note: There are many here, so these can also take\n# several minutes to install.\nsudo apt-get install libssl-dev libncurses-dev libffi-dev libreadline-dev libbz2-dev libsqlite3-dev liblzma-dev tk-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libsdl2-mixer-dev libavfilter-dev libsdl2-dev libsdl2-image-dev libavcodec-dev libavformat-dev libswscale-dev libavdevice-dev\n\n# These are for mpf-monitor and are not needed unless you intend\n# to install that\nsudo apt-get install libjpeg-dev libxcb-cursor0 libxkbcommon-x11-0 libxcb-icccm4 libxcb-keysyms1 libxcb-shape0 xsel\n```\n\n----------------------------------------\n\nTITLE: Checking YAML Changes with ruamel.yaml (Console)\nDESCRIPTION: This command uses the `yaml round-trip` command to display the changes that would be made to a YAML file (`your_file.yaml`) without actually saving them. It is used to preview the effects of reformatting the YAML file before applying the changes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/debugging_yaml_parse_errors.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nyaml round-trip your_file.yaml\n```\n\n----------------------------------------\n\nTITLE: Get Connected Hardware Command (0x00)\nDESCRIPTION: This command (0x00) requests the name of the connected hardware platform. It does not require any payload. The response is a null-terminated string identifying the platform, which MPF uses for platform-specific quirks.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nByte        Length      Example     Comment\n---------- ----------- ----------- -----------------------------------\n0           1           0           Command 0 - Get Connected Hardware\n```\n\n----------------------------------------\n\nTITLE: Unblocking Ball Search\nDESCRIPTION: This code defines the `unblock` method, which unblocks ball search for the playfield. It checks if there are balls on the playfield and enables ball search if so. It takes optional keyword arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef unblock(**kwargs):\n    \"\"\"Unblock ball search for this playfield.\n\n    This will check to see if there are balls on the playfield, and if so, enable ball search.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Event Names (YAML)\nDESCRIPTION: This snippet demonstrates how to use dynamic values, such as player variables and device states, to dynamically determine the event name that is posted. It uses parenthetical values to construct the event name at runtime.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/event_player.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nevent_player:\n  mode_dynamo_started:\n    # Player variables can be dropped into event names\n    - play_dynamo_show_phase_(current_player.phase_name)\n    # Machine and device states can be used\n    - dynamo_started_with_state_(device.achievements.dynamo.state)\n    # Dynamic evaluations can be done to calculate values\n    - player_score_is_(\"high\" if current_player.score > 10000 else \"low\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in MPF (Python)\nDESCRIPTION: Shows how to access the settings controller instance in MPF. The settings can be accessed via `self.machine.settings`. This instance allows interaction with operator-controllable settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/settings.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.settings\n```\n\n----------------------------------------\n\nTITLE: Installing MPF-MC with pip in DOS\nDESCRIPTION: This command installs the MPF Media Controller (MPF-MC), a standalone package used to control the graphics, sounds, and music in a pinball machine. It requires an active virtual environment and pip package manager.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/windows.md#_snippet_5\n\nLANGUAGE: doscon\nCODE:\n```\npip install mpf-mc\n```\n\n----------------------------------------\n\nTITLE: Dynamically Choosing a Widget Based on Event Parameter (YAML)\nDESCRIPTION: This example shows how to dynamically choose a widget based on an event parameter. The `mball_lock_lit` event uses the `mball_name` parameter to select a specific widget for the `mball_lock_slide`. The `widget:` setting dynamically chooses between `lock_lit_angel` and `lock_lit_demon` based on the event parameter.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  mball_lock_lit: mball_lock_slide\nslides:\n  mball_lock_slide:\n    widgets:\n      - type: text\n        text: Lock is Lit\n      - widget: lock_lit_(mball_name)\nwidgets:\n  lock_lit_angel:\n    - type: text\n      text: Angels Anarchy\n    - type: image\n      image: bg_locklit_angels\n  lock_lit_demon:\n    - type: text\n      text: Demons Derby\n    - type: image\n      image: bg_locklit_demons\n```\n\n----------------------------------------\n\nTITLE: Creating a Blank Slide (YAML)\nDESCRIPTION: This snippet demonstrates how to create a blank slide, either with no additional options or with options but no widgets. This is useful when you want to populate the slide content dynamically using the widget player. Two methods are shown: one with only `[]` and another with `widgets: []`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/slides.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  my_blank_slide: []\n```\n\n----------------------------------------\n\nTITLE: Stop Stepper - Python\nDESCRIPTION: De-energizes the stepper motor and stops sending the command timeout refresh. This method is used to stop the stepper motor and prevent it from moving unexpectedly.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/pololu_tic.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nstop()\n```\n\n----------------------------------------\n\nTITLE: Accessing Player Variable\nDESCRIPTION: This snippet shows how to access the value of a player variable named 'foo' from the current player. If the variable doesn't exist, it will be automatically created with a default value of 0.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/Players.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nprint(self.machine.player.foo)  # prints 0\n```\n\n----------------------------------------\n\nTITLE: Displaying DMD Gamma Test Slide using Slide Player in MPF\nDESCRIPTION: This YAML configuration snippet demonstrates how to add a slide player to your machine configuration to display the built-in gamma test slide on a DMD. It sets a high priority for the slide to ensure it shows on top of other content. You may need to adjust the `target` setting to ensure the slide is displayed on the correct DMD if you have multiple displays.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/gamma_correction.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  mode_attract_started:\n    dmd_gamma_test:\n      priority: 10000000\n##! test\n#! start_game\n#! assert_slide_on_top dmd_gamma_test\n```\n\n----------------------------------------\n\nTITLE: Forcing a Platform for Testing in Python\nDESCRIPTION: This code snippet shows how to override the `get_platform` method in a test class to force the test to use a specific platform.  This is useful for testing platform-specific features.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef get_platform(self):\n  return 'smart_virtual'\n```\n\n----------------------------------------\n\nTITLE: SnuxHardwarePlatform Class Definition (Python)\nDESCRIPTION: This snippet shows the class definition for the SnuxHardwarePlatform, which inherits from System11OverlayPlatform. This class allows interaction with the snux hardware board within MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/snux.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass mpf.platforms.snux.SnuxHardwarePlatform(machine: mpf.core.machine.MachineController):\n    Bases: mpf.platforms.system11.System11OverlayPlatform\n```\n\n----------------------------------------\n\nTITLE: Configuring P-ROC Driver (Python)\nDESCRIPTION: Configures a P-ROC driver (coil, flasher, or matrix light).  The function takes a driver configuration, a number, and platform-specific settings to create a PROCDriver object. The `config` argument defines driver settings, the `number` argument is the driver's identifier, and `platform_settings` are specific to the P-ROC platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/p_roc.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef configure_driver(config: mpf.core.platform.DriverConfig, number: str, platform_settings: dict):\n    \"\"\"Create a P-ROC driver.\n\n    Typically drivers are coils or flashers, but for the P-ROC this is also used for matrix-based lights.\n\n    Parameters:\n        config: Dictionary of settings for the driver.\n        number: Number of this driver\n        platform_settings: Platform specific setting for this driver.\n\n    Returns a reference to the PROCDriver object which is the actual object you can use to pulse(), patter(), enable(), etc.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Info Logging (Python)\nDESCRIPTION: Logs a message at the info level.  The `info_log` method provides general information about the system's operation. Whether this message is shown in the console or log file is controlled by the settings used with configure_logging().\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ninfo_log(msg: str, *args, context=None, error_no=None, **kwargs) -> None\n```\n\n----------------------------------------\n\nTITLE: Run MPF Game Engine Unit Tests\nDESCRIPTION: This command executes the unit tests for the MPF game engine. It uses the unittest module to discover and run tests in the `mpf/tests` directory.  The expected output is a series of dots representing individual tests, followed by a summary indicating the number of tests run and whether they passed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/Writing_Tests/RunUnitTests.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npython3 -m unittest discover mpf/tests\n```\n\n----------------------------------------\n\nTITLE: Defining Switches and Starting Active Switches (List)\nDESCRIPTION: This YAML snippet demonstrates the correct way to define switches in the `switches` section and then specify two of them to be active at the start of the virtual platform using a YAML list.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-Smart_Virtual_Platform-1.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_ball_switch1:\n    number:\n  s_ball_switch2:\n    number:\n  s_ball_switch3:\n    number:\n# Two switches should be active at start\nvirtual_platform_start_active_switches:\n  - s_ball_switch1\n  - s_ball_switch2\n```\n\n----------------------------------------\n\nTITLE: Configuring Serial Port for Pololu Maestro (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the serial port for the Pololu Maestro servo controller in your MPF config. You need to specify the correct serial port to which the Maestro is connected.  The example shows configurations for both Windows (COM5) and Linux/Mac (/dev/ttyACM0).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pololu_maestro.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\npololu_maestro:\n  port: COM5\n```\n\n----------------------------------------\n\nTITLE: Configuring OPP Coil Number\nDESCRIPTION: This snippet configures a coil with a specific number on the OPP hardware. The number is formatted as `card-coil`, where `card` is the OPP card number and `coil` is the coil number on the card. In this example, the coil is connected to the first OPP card (card 0) and the 13th coil output (coil 12) on the board.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/drivers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  some_coil:\n    number: 0-12\n```\n\n----------------------------------------\n\nTITLE: Disable Flipper on Multiple Events (YAML - alternative format)\nDESCRIPTION: This snippet shows an alternative way to define multiple events for disabling a flipper. Instead of a comma-separated list, each event is listed on a separate line with a dash and a space. This format is purely for readability preference.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/device_control_events.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndisable_events:\n    - ball_ending\n    - tilt\n    - slam_tilt\n```\n\n----------------------------------------\n\nTITLE: Enabling Ball Search\nDESCRIPTION: This code defines the `enable` method, which enables ball search for the playfield. It resets and starts the timeout timer and resets it when playfield switches are hit. It takes optional keyword arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef enable(**kwargs):\n    \"\"\"Enable the ball search for this playfield.\n\n    Note that this method does not start the ball search process. Rather it just resets and starts the timeout timer, as well as resetting it when playfield switches are hit.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Z-Order - YAML\nDESCRIPTION: This configuration shows how to use `widget_settings` within the `widget_player` section to set the z-order of a widget. When the `trigger_event` occurs, the `my_widget` will have its `z` property set to `1`, affecting its layering relative to other widgets on the slide.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/widget_player.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_player:\n  trigger_event:\n    my_widget:\n      widget_settings:\n        z: 1\n```\n\n----------------------------------------\n\nTITLE: Sound Markers Configuration with YAML in MPF\nDESCRIPTION: This YAML snippet demonstrates how to use sound markers to trigger events at specific times during sound playback. It defines markers with specific times and associated events. Markers are useful for synchronizing actions with specific points in a sound.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sounds.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsounds:\n  long_sound_1:\n    volume: 0.8\n    markers:\n      - time: 2.534 sec\n        events: send_this_event, also_this_event\n      - time: 6.712 sec\n        events: almost_finished_playing\n```\n\n----------------------------------------\n\nTITLE: Points Widget Configuration Example in MPF\nDESCRIPTION: Example configuration for the 'points' widget in MPF. This configures two points widgets with different coordinates, sizes, and colors to be displayed on a slide when the 'mc_ready' event is triggered.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/points.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nslide_player:\n  mc_ready:\n    points_example:\n      - type: points\n        points: 50, 50, 75, 50, 100, 50\n        pointsize: 2\n        color: lime\n      - type: points\n        points: 400, 300\n        pointsize: 3\n        color: pink\n```\n\n----------------------------------------\n\nTITLE: Configuring a Stepper Motor - Python\nDESCRIPTION: This snippet outlines the `configure_stepper` method, used to configure a specific stepper motor connected to the Trinamics Step Rocker platform. It takes the stepper number and a configuration dictionary as input and returns a `TrinamicsTMCLStepper` instance.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/trinamics_steprocker.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_stepper(number: str, config: dict) -> mpf.platforms.trinamics_steprocker.TrinamicsTMCLStepper\n```\n\n----------------------------------------\n\nTITLE: MPF Credit Logic Test\nDESCRIPTION: This test asserts that the credit unit is initially 0. Then it simulates hitting the coin switch twice, asserting that the credit unit becomes 2. Finally, it starts the game and asserts that the credit unit goes back to 0.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/credits.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n##! test\n#! assert_machine_variable 0 credit_units\n#! hit_and_release_switch s_coin_left\n#! hit_and_release_switch s_coin_left\n#! assert_machine_variable 2 credit_units\n#! start_game\n#! assert_machine_variable 0 credit_units\n```\n\n----------------------------------------\n\nTITLE: MPF Hardware Scan for P/P3-Roc\nDESCRIPTION: The `mpf hardware scan` command checks if MPF can communicate with the P/P3-Roc via USB and identifies connected SW-16 boards. This helps diagnose connectivity and board recognition issues.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/troubleshooting.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mpf hardware scan\n\nFirmware Version: 2 Firmware Revision: 6 Hardware Board ID: 1\nSW-16 boards found:\n - Board: 0 Switches: 16 Device Type: A3 Board ID: 0\n - Board: 1 Switches: 16 Device Type: A3 Board ID: 1\n - Board: 2 Switches: 16 Device Type: A4 Board ID: 2\n```\n\n----------------------------------------\n\nTITLE: Add Main Display to MPF Config (YAML)\nDESCRIPTION: This snippet demonstrates how to add a main display to your MPF config file. It defines a display named \"window\" with a width of 600 and a height of 200 pixels. This display will be used to show content on the computer screen.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/segment_display_emulator/how_to.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  window:\n    width: 600\n    height: 200\n```\n\n----------------------------------------\n\nTITLE: Registering a Mode Load Method (Python)\nDESCRIPTION: Registers a method to be called when a mode is loaded. This is used by plugins and core components to register actions that should occur when a mode is loaded. The `config_section_name` allows the method to receive a specific configuration section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/mode_controller.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.machine.mode_controller.register_load_method(load_method, config_section_name=None, priority=0, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Multiple Accrual Blocks with Events YAML\nDESCRIPTION: This snippet demonstrates two accrual logic blocks, each with their own set of events and a completion event. The `events` section specifies the events that advance the logic block, and `events_when_complete` specifies the event posted when the logic block is complete.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/accruals.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\naccruals:\n  logic_block_1:\n    events:\n      - event1\n      - event2\n      - event3\n      - event4\n      - event5\n    events_when_complete: logic_block_1_done\n  logic_block_2:\n    events:\n      - event1, event2, event3\n      - event4\n      - event5\n    events_when_complete: logic_block_2_done\n```\n\n----------------------------------------\n\nTITLE: Using Math Operators in Event Condition (YAML)\nDESCRIPTION: Demonstrates the use of mathematical operators in event conditions for complex logic. The example calculates an average score based on the ball number and triggers a slide if the player's score is below that average.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/conditional.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n#! slides:\n#!   uh_oh: []\nslide_player:\n  ball_started{ball > 1 and current_player.score < ((ball - 1) * 10000)}: uh_oh\n```\n\n----------------------------------------\n\nTITLE: Processing Received Message (OPP)\nDESCRIPTION: Routes an incoming message from the OPP hardware to the appropriate method for processing. This method acts as a dispatcher, directing different types of messages to their corresponding handlers. The message relates to a specific chain, identified by its serial number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nprocess_received_message(chain_serial, msg)\n```\n\n----------------------------------------\n\nTITLE: Starting MPF Media Controller\nDESCRIPTION: This snippet demonstrates how to start only the MPF media controller using the `mpf mc` command. It requires the user to open a command prompt and navigate to the machine folder before running the command. This will typically result in a popup window and console output.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/index.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmpf mc <enter>\n```\n\n----------------------------------------\n\nTITLE: Basic slide_player configuration in YAML\nDESCRIPTION: This snippet shows a basic example of the `slide_player` section, mapping events to slides. When `event1`, `event2`, or `event3` are posted, `slide1`, `slide2`, or `slide3` are displayed, respectively. It requires pre-existing slide definitions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/slide_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  event1: slide1\n  event2: slide2\n  event3: slide3\n```\n\n----------------------------------------\n\nTITLE: Run MPF Configuration (DOS Command)\nDESCRIPTION: This snippet shows how to run the MPF configuration file using the `mpf both` command. This command launches both the media controller and the machine engine, allowing you to test your pinball configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/9_start_button.md#_snippet_5\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial>mpf both\n```\n\n----------------------------------------\n\nTITLE: Add point values for switch events\nDESCRIPTION: Configures the variable_player section to assign point values to events triggered by switch activations (s_right_inlane_active and s_left_flipper_active).  The 'score' player variable will be updated when these switches are hit.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/15_scoring.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: base\nvariable_player:\n  s_right_inlane_active:\n    score: 100\n  s_left_flipper_active:\n    score: 1000\n```\n\n----------------------------------------\n\nTITLE: Configuring a simple RGB LED\nDESCRIPTION: This snippet shows how to define an RGB LED connected to the OPP hardware using the `lights:` section in the MPF configuration file. It defines the LED's number, subtype, and type. The number `0-1-1` specifies the LED's location on the OPP chain.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/leds.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  some_led:\n    number: 0-1-1\n    subtype: led\n    type: rgb\n```\n\n----------------------------------------\n\nTITLE: Configure GMC Logging Levels with INI\nDESCRIPTION: This code snippet shows how to configure logging levels for different components of the GMC using the `[gmc]` section in the `gmc.cfg` file.  Each component's log level can be adjusted independently, with unspecified components using the global log level.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/gmc-cfg.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[gmc]\nlogging_global=20\nlogging_sound_player=10\n```\n\n----------------------------------------\n\nTITLE: Config Player: Show Player Long Syntax (Show)\nDESCRIPTION: This snippet demonstrates the long syntax for the `show_player` config player within a show step. When the show step is active, the `your_show` show is triggered to play with a synchronization offset of 1000ms.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/index.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: test\n- duration: 2s\n  shows:\n    your_show:\n      action: play\n      sync_ms: 1000\n```\n\n----------------------------------------\n\nTITLE: Display Widget Settings YAML\nDESCRIPTION: This YAML configuration outlines the basic settings for a `display` widget including `type`, `source_display`, `width`, `height`, and `effects`. It's a template for specifying the fundamental attributes of a display widget within a slide definition. Requires: MPF installation with a configured machine.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/display/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: display\nsource_display:\nwidth:\nheight:\neffects:\n```\n\n----------------------------------------\n\nTITLE: Defining Switches and Starting Active Switches (Comma-Separated)\nDESCRIPTION: This YAML snippet demonstrates an alternative way to define switches and then specify two of them to be active at the start of the virtual platform, using a comma-separated string.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-Smart_Virtual_Platform-1.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_ball_switch1:\n    number:\n  s_ball_switch2:\n    number:\n  s_ball_switch3:\n    number:\n# Two switches should be active at start\nvirtual_platform_start_active_switches: s_ball_switch1, s_ball_switch2\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Hardware Start Active Switches in YAML\nDESCRIPTION: This snippet configures MPF to start with specific switches active in virtual mode, simulating balls in the trough. The `virtual_platform_start_active_switches` section lists the switches to activate when running MPF with virtual hardware interfaces.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/modern_mechanical.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nvirtual_platform_start_active_switches:\n  - s_trough1\n  - s_trough2\n  - s_trough3\n  - s_trough4\n  - s_trough5\n  - s_trough6\n```\n\n----------------------------------------\n\nTITLE: Config Player: Show Player Long Syntax (Standalone)\nDESCRIPTION: This snippet demonstrates the long syntax for the `show_player` config player in a standalone configuration. The event `event_which_is_posted_elsewhere` triggers the `your_show` show to play with a synchronization offset of 1000ms.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  event_which_is_posted_elsewhere:\n    your_show:\n      action: play\n      sync_ms: 1000\n```\n\n----------------------------------------\n\nTITLE: Accessing FAST Platform via Code (MPF)\nDESCRIPTION: This snippet shows how to access the FAST hardware platform instance within the MPF environment. The hardware platforms are stored in a dictionary called `self.machine.hardware_platforms`, with 'fast' as the key for the FAST platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/fast.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['fast']\n```\n\n----------------------------------------\n\nTITLE: Warning Log - Python\nDESCRIPTION: Logs a message at the warning level. These messages will always be shown in the console and the log file. Takes the message, optional arguments, context, and error number as input.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestDataManager.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef warning_log(msg: str, *args, context=None, error_no=None, **kwargs) -> None:\n    Log a message at the warning level.\n\n    These messages will always be shown in the console and the log file.\n```\n\n----------------------------------------\n\nTITLE: Run MPF MC with default config\nDESCRIPTION: This command runs the MPF Media Controller (MPF MC) with the default configuration file, which is `config.yaml` located in the machine folder.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/mc.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mpf mc\n```\n\n----------------------------------------\n\nTITLE: Download pypinproc from GitHub\nDESCRIPTION: These commands download the pypinproc library from GitHub, which allows Python applications (like MPF) to communicate with the libpinproc library. The library is downloaded into the 'proc' directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/mac.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/proc\ngit clone https://github.com/missionpinball/pypinproc\n```\n\n----------------------------------------\n\nTITLE: Processing Version Response (OPP)\nDESCRIPTION: Parses a version response received from the OPP hardware. This method extracts information about the firmware and hardware versions of the connected OPP boards. The message relates to a specific chain, identified by its serial number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nvers_resp(chain_serial, msg)\n```\n\n----------------------------------------\n\nTITLE: Slide with Multiple Widgets (YAML)\nDESCRIPTION: This snippet demonstrates how to define a slide with multiple widgets using the dash (-) notation to separate each widget definition.  It defines two slides, *my_slide_1* and *my_slide_2*, each containing multiple widgets of different types (text, image, ellipse) with corresponding properties.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/slides.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  my_slide_1:\n    - type: text\n      text: THIS IS MY SLIDE\n    - type: image\n      image: johnny_5\n  my_slide_2:\n    - type: text\n      text: THIS IS ANOTHER SLIDE\n    - type: text\n      y: 20%\n      text: IT HAS MORE THAN 1 WIDGET\n    - type: ellipse\n      color: red\n      width: 200\n      height: 100\n```\n\n----------------------------------------\n\nTITLE: Cloning mpf-examples and Navigating to Demo Configs (Shell)\nDESCRIPTION: Clones the mpf-examples repository, then navigates to the demo_man config directory within the repository. This prepares the environment for testing MPF with the demo_man example game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/raspberry.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# clone mpf-examples repo\ngit clone -b 0.56.x https://github.com/missionpinball/mpf-examples.git ~/mpf-git/mpf-examples\n\n# switch to the demo_man configs folder\ncd ~/mpf-git/mpf-examples/demo_man/config/\n```\n\n----------------------------------------\n\nTITLE: Assert Player Count - Python\nDESCRIPTION: Asserts that the current game has a specific number of players. The `count` parameter specifies the expected number of players.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n`assertPlayerCount(count)`\n```\n\nLANGUAGE: python\nCODE:\n```\nself.assertPlayerCount(2)\n```\n\n----------------------------------------\n\nTITLE: Animating a Progress Bar Width Based on Player Variable in YAML\nDESCRIPTION: This YAML snippet shows how to animate the width of a rectangle widget (used as a progress bar) based on the value of a player variable named `progress`. The `player_progress` event is triggered whenever the `progress` player variable changes.  The animation hooks the `width` property of the rectangle to the `value` of the `progress` player variable using `(value)`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  green_slide:\n    widgets:\n      - type: rectangle\n        y: 50\n        z: 20\n        anchor_x: left\n        anchor_y: center\n        width: 0\n        height: 16\n        corner_radius: 3\n        corner_segments: 3\n        color: 00FF00\n        animations:\n          player_progress:\n            - property: width\n              value: (value)\n```\n\n----------------------------------------\n\nTITLE: Running MPF in Terminal\nDESCRIPTION: This command shows how to run MPF in a terminal from the tutorial directory. The `-t` option is likely a shorthand or flag specific to MPF's command-line interface.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_18\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial>mpf -t\n```\n\n----------------------------------------\n\nTITLE: Uninstalling and Reinstalling MPF Components (doscon)\nDESCRIPTION: This code snippet provides the commands to uninstall potentially conflicting MPF components (mpf, mpf-mc, and mpf-monitor) using pip3, followed by reinstalling them. This ensures a clean installation and resolves dependency conflicts that might arise from version mismatches, particularly with the ruamel.yaml library.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/common_problems_and_solutions.md#_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\npip3 uninstall mpf mpf-mc mpf-monitor\npip3 install mpf mpf-mc mpf-monitor\n```\n\n----------------------------------------\n\nTITLE: Add Attract Slide to Mode Config\nDESCRIPTION: This snippet configures the `slide_player` to display the \"attract\" slide when the \"mode_attract_started\" event is triggered.  This assumes that you have an \"attract\" mode configured in your MPF project.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/setup.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\n    slide_player:\n        mode_attract_started: attract\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Switch States (Python)\nDESCRIPTION: Verifies that switch states in MPF match the hardware states. It loops through all switches, queries their hardware states via their platform interfaces, and compares them to the states maintained by MPF. Logs warnings if discrepancies are found.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nverify_switches() → bool\n```\n\n----------------------------------------\n\nTITLE: Configure Hardware Rule for Solenoid (0x3C) Command Structure\nDESCRIPTION: This snippet outlines the structure of the 'Configure Hardware Rule for Solenoid' command (0x3C). It defines the payload's byte-level arrangement, which includes the solenoid index, three switch assignments, pulse time, pulse PWM power, hold PWM power, and corresponding flags for each switch. This command enables low-latency solenoid control based on switch states.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_35\n\nLANGUAGE: None\nCODE:\n```\nByte           Length         Description\n-------------- -------------- ------------------------------------------\n1              1              Index `c` of the solenoid to configure\n\n2              1              Switch `sw1`. Set bit 7 to invert the\n                               switch.\n\n3              1              Switch `sw2`. Set bit 7 to invert the\n                               switch.\n\n4              1              Switch `sw3`. Set bit 7 to invert the\n                               switch.\n\n5              1              Pulse time in ms (0-255)\n\n6              1              Pulse PWM power (0-255). 0=0% power.\n                               255=100% power\n\n7              1              Hold PWM power (0-255). 0=0% power.\n                               255=100% power\n\n8              1              Flag for `sw1`\n\n9              1              Flag for `sw2`\n\n10             1              Flag for `sw3`\n```\n\n----------------------------------------\n\nTITLE: Stopping the Platform\nDESCRIPTION: Stops the hardware and closes all connections to the Spike platform.  This should be called when the machine is shutting down to ensure proper cleanup.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nstop()\n```\n\n----------------------------------------\n\nTITLE: Blinkenlight Player in Show\nDESCRIPTION: This example demonstrates how to use the blinkenlight player within a show to set a color on a blinkenlight. The `my_blinkenlight` will be set to `red` at time 0 of the `test` show. This color will be removed when the show ends.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/blinkenlight_player.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: test\n- time: 0\n  blinkenlights:\n    my_blinkenlight: red\n```\n\n----------------------------------------\n\nTITLE: Mocking Events in Python\nDESCRIPTION: This code snippet demonstrates how to mock an event and then assert whether the event has been called. Mocking events allows verifying if an event was posted without creating a callback function.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nself.mock_event('my_event')\nself.assertEventNotCalled('my_event')  # This will be True\nself.post_event('my_event')\nself.assertEventCalled('my_event')  # This will also be True\n```\n\n----------------------------------------\n\nTITLE: Setting the Number of Balls Known in MPF (Python)\nDESCRIPTION: This snippet shows how to set the number of balls known to the ball controller using the `set_num_balls_known` method. This is essential for tests that don't use ball devices, allowing the ball controller to simulate a specific number of balls for game logic testing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nself.set_num_balls_known(3)\n```\n\n----------------------------------------\n\nTITLE: YAML List of Dictionaries Example\nDESCRIPTION: This YAML snippet shows a list where each item in the list is a dictionary.  This structure is commonly used in show configurations.  Each dictionary within the list can have multiple key-value pairs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-ConfigValidator-12.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nyour_setting:\n  - key1_in_dict_in_list1: value1_in_dict_in_list1\n  - key1_in_dict_in_list2: value1_in_dict_in_list2\n    key2_in_dict_in_list2: value2_in_dict_in_list2\n```\n\n----------------------------------------\n\nTITLE: Incrementing Player Variable in Mode YAML\nDESCRIPTION: This snippet shows how to increment a player variable (`bumper_hits`) when the `bumper_1_active` event occurs within a mode using the `variable_player` section. It adds 1 to the existing `bumper_hits` variable for the current player.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/players.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: my_mode\nvariable_player:\n  # add 1 to bumper_hits\n  bumper_1_active:\n    bumper_hits: 1\n```\n\n----------------------------------------\n\nTITLE: Download libpinproc from GitHub\nDESCRIPTION: These commands download the libpinproc library from GitHub, which allows the host computer to communicate with the P-ROC/P3-ROC hardware. The 'dev' branch is specifically checked out. The library is downloaded into the 'proc' directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/mac.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/proc\ngit clone --branch=dev https://github.com/missionpinball/libpinproc\n```\n\n----------------------------------------\n\nTITLE: Assert Sequence Equality - Python\nDESCRIPTION: This assertion checks if two ordered sequences (like lists or tuples) are equal.  'seq1' and 'seq2' are the sequences to compare, and 'seq_type' can be specified to enforce a specific data type for the sequences.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nassertSequenceEqual(seq1, seq2, msg=None, seq_type=None)\n```\n\n----------------------------------------\n\nTITLE: Example of assertCountEqual comparison\nDESCRIPTION: This example clarifies the behavior of `assertCountEqual` with specific list comparisons. It highlights that lists with the same elements but in different orders compare equal, while lists with different element counts compare unequal.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfBcpTestCase.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[0, 1, 1] and [1, 0, 1] compare equal.\n[0, 0, 1] and [0, 1] compare unequal.\n```\n\n----------------------------------------\n\nTITLE: Configuring OPP serial ports in MPF\nDESCRIPTION: This example configures the serial port that MPF uses to communicate with the OPP controller. The specific port will vary depending on your operating system and hardware configuration. Check your OS's port list after plugging in the OPP controller.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/config.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nopp:\n  ports: COM7\n```\n\n----------------------------------------\n\nTITLE: Install Homebrew Package Manager on macOS\nDESCRIPTION: These commands install the Homebrew package manager, which is used to install dependencies needed for the P-ROC/P3-ROC drivers. The script downloads and executes the Homebrew installation script from GitHub and places Homebrew in /usr/local.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/mac.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/local\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n----------------------------------------\n\nTITLE: Removing a slide with a transition using slide_player\nDESCRIPTION: This snippet shows how to remove a slide with a specified transition. When the `remove_slide_1` event is triggered, the `slide1` is removed with a fade transition. Requires pre-defined slides and transitions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/slide_player.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n  remove_slide_1:           # event name\n    slide1:                 # slide name\n      action: remove\n      transition: fade\n```\n\n----------------------------------------\n\nTITLE: Configuring a P3-ROC Driver\nDESCRIPTION: This method configures a driver on the P3-ROC platform, which can represent coils, flashers, or matrix-based lights. It takes the driver configuration, driver number, and platform-specific settings as input. It returns a reference to a PROCDriver object.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/p3_roc.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure_driver(config: mpf.core.platform.DriverConfig, number: str, platform_settings: dict)\n```\n\n----------------------------------------\n\nTITLE: Show Configuration with LED Token Replaced (YAML)\nDESCRIPTION: This snippet demonstrates the result of replacing the `(led)` token with the value `led_02`.  This will modify a show dynamically when played.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/tokens.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: 0\n  lights:\n    led_02: red\n- time: 1\n  lights:\n    led_02: off\n```\n\n----------------------------------------\n\nTITLE: Configuring a parallel LED in lights section YAML\nDESCRIPTION: This snippet shows an example of configuring a parallel LED. It defines a light named `l_led_1` connected to board 4, using outputs 0, 1, and 2 for red, green and blue respectively.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/leds.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  l_led_1:\n    number: 4-0-1-2\n    subtype: led\n```\n\n----------------------------------------\n\nTITLE: Express Slide Player Configuration in YAML\nDESCRIPTION: Demonstrates the 'express' configuration for the slide player. This config shows how to associate events with specific slides for display.  Slides are assumed to be pre-defined in the `slides:` section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/slide_player.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#! slides:\n#!   slide1: []\n#!   slide2: []\n#!   slide3: []\nslide_player:\n  event1: slide1\n  event2: slide2\n  event3: slide3\n```\n\n----------------------------------------\n\nTITLE: Dynamic Variable Player Configuration YAML\nDESCRIPTION: This snippet demonstrates how to use the `current_player` dynamic value to multiply the `troll_hits` player variable by 100,000 when the \"shot_jackpot_hit\" event occurs.  This provides a dynamic scoring mechanism.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/dynamic_values.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mode1\nvariable_player:\n  shot_jackpot_hit:\n    score: current_player.troll_hits * 100000\n```\n\n----------------------------------------\n\nTITLE: Getting Hardware Switch States\nDESCRIPTION: This method reads and sets the initial state of the hardware switches connected to the P3-ROC. It returns a dictionary mapping switch numbers to boolean values representing their state (True for closed, False for open).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/p3_roc.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nget_hw_switch_states() → Dict[str, bool]\n```\n\n----------------------------------------\n\nTITLE: Checking MPF Version (Command Line)\nDESCRIPTION: This command allows you to determine the version of MPF installed on your system. It is executed from the command line and displays the MPF version number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/versions/index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmpf --version\n```\n\n----------------------------------------\n\nTITLE: Defining Trough Coil with Longer Pulse in MPF\nDESCRIPTION: This snippet shows how to configure a trough release coil with a longer pulse time (1 second).  Because the `default_pulse_ms` exceeds 255, `allow_enable: true` is required.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_multiple_switches.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_trough_release:\n    number: 4\n    default_pulse_ms: 1000\n    allow_enable: true\n```\n\n----------------------------------------\n\nTITLE: Starting the Mode\nDESCRIPTION: Starts the mode with an optional priority and callback.  It's recommended to use the `mode_start` method in your mode code instead of overriding the `start` method directly.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/attract.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstart(mode_priority=None, callback=None, **kwargs) → None\n```\n\n----------------------------------------\n\nTITLE: Getting device path information using udevadm\nDESCRIPTION: This command retrieves device path information for a specified serial port using `udevadm info`, which is useful for creating udev rules for persistent device naming.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/connecting.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nudevadm info /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: Set Pulse On Hit and Enable and Release Rule\nDESCRIPTION: Configures a rule for a driver on the system11 overlay. If the driver is not on the A/C relay, it passes the call onto the parent platform. Uses settings like `enable_switch` and `coil`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/system11.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef set_pulse_on_hit_and_enable_and_release_rule(enable_switch, coil):\n    Configure a rule for a driver on the system11 overlay.\n\n    Will pass the call onto the parent platform if the driver is not on A/C relay.\n```\n\n----------------------------------------\n\nTITLE: Install Unzip\nDESCRIPTION: Installs the `unzip` utility if it is not already present on the system. This is necessary to extract the contents of the MPF Debian installer.  It uses apt-get, the package manager for Debian-based systems like Ubuntu.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/pine64.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install unzip\n```\n\n----------------------------------------\n\nTITLE: Get Simple Lamp Count Command (0x03)\nDESCRIPTION: This command (0x03) requests the number of simple lamps connected to the hardware platform. It does not require any payload. The response is a single byte representing the number of simple lamps (0-255).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nByte        Length      Example     Comment\n---------- ----------- ----------- -----------------------------------\n0           1           3           Command 3 - Get Simple Lamp Count\n```\n\n----------------------------------------\n\nTITLE: Using AND Operator in Event Condition (YAML)\nDESCRIPTION: Demonstrates the use of the 'and' operator in an event condition, requiring both conditions to be true for the action to be triggered. Here, the slide only appears when ball is 3 and player is 1.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/conditional.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n#! slides:\n#!   special_slide: []\nslide_player:\n  ball_started{ball==3 and player==1}: special_slide\n```\n\n----------------------------------------\n\nTITLE: Configuring a Stepper with StepStick (Python)\nDESCRIPTION: Explains the `configure_stepper` method, which allows configuring a stepper motor that is driven by a StepStick controller connected to a digital output. It requires a number (string) and a configuration dictionary as input.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/step_stick.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure_stepper(number: str, config: dict) → mpf.platforms.interfaces.stepper_platform_interface.StepperPlatformInterface\n```\n\n----------------------------------------\n\nTITLE: Accessing the rpi_dmd platform via code\nDESCRIPTION: This snippet demonstrates how to access the `rpi_dmd` platform instance within the MPF framework.  The hardware platforms are stored in the `self.machine.hardware_platforms` dictionary, allowing access to the `rpi_dmd` platform via its key.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/rpi_dmd.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['rpi_dmd']\n```\n\n----------------------------------------\n\nTITLE: Modifying Balls Per Game in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to modify the `balls_per_game` setting in the MPF YAML configuration file to change the game to a 5-ball game. By adjusting the value associated with `balls_per_game`, the number of balls in each game is altered.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/start/config_files.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ngame:\n  balls_per_game: 5\n```\n\n----------------------------------------\n\nTITLE: Check MPF Version After Install - doscon\nDESCRIPTION: This command verifies the MPF installation by checking its version. Running `mpf --version` after installation ensures that the framework is properly installed and accessible from the command line. The output is the version number of the installed MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_7\n\nLANGUAGE: doscon\nCODE:\n```\nmpf --version\n```\n\n----------------------------------------\n\nTITLE: Define Color Correction Profile for NeoSeg Display\nDESCRIPTION: Defines a color correction profile to adjust the brightness of a NeoSeg display. This is useful for balancing brightness across displays of different colors.  The whitepoint setting is used to vary the brightness.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/cobrapin/cobrapin_serial_segment_displays.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlight_settings:\n  color_correction_profiles:\n    NeoSeg_orange:\n      whitepoint: [.9, .9, .9]\n```\n\n----------------------------------------\n\nTITLE: Example MPF Command: Running MPF Game Engine with Verbose Logging\nDESCRIPTION: This shell command runs the MPF game engine with verbose logging enabled (`-v`), disables the BCP protocol (`b`), and disables the text UI (`t`). This combination is useful for troubleshooting and debugging, as it provides detailed information about the game's operation in the log file without needing the media controller or text UI.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/8_plunger.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nC:\\pinball\\your_machine>mpf -vbt\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tilt Warning Slide Player\nDESCRIPTION: This example shows how to define a custom slide_player extension in your overriding tilt mode file to display a custom message for the third tilt warning.  It sets the text token to \"UH OH\" for the 'tilt' slide when the 'tilt_warning_3' event is triggered. The slide will expire after 1 second.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/tilt_mode.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: modes/tilt/config/tilt.yaml\nslide_player:\n  tilt_warning_3: # event\n    tilt: # slide\n      expire: 1s\n      tokens:\n        text: UH OH\n```\n\n----------------------------------------\n\nTITLE: Reading Matrix Input Response (OPP)\nDESCRIPTION: Reads matrix switch changes from the OPP hardware. This method processes the received message and updates the internal representation of matrix switch states accordingly. The message relates to a specific chain, identified by its serial number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nread_matrix_inp_resp(chain_serial, msg)\n```\n\n----------------------------------------\n\nTITLE: Verify System Info (Python)\nDESCRIPTION: Dumps information about the Python installation to the log, including version, executable path, platform, and architecture. This helps in debugging environment-related issues.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nverify_system_info()\n\nDump information about the Python installation to the log.\n\nInformation includes Python version, Python executable, platform, and core architecture.\n```\n\n----------------------------------------\n\nTITLE: Defining a Third Show Step in YAML\nDESCRIPTION: Illustrates defining a third step in a show using YAML. This step marks the end of the show after one more second has passed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/format.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n- time: +1\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiballs in MPF (Python)\nDESCRIPTION: This snippet demonstrates how to access a multiball device named 'foo' from the `self.machine.multiballs` collection in your MPF code. You can access multiballs either as attributes or dictionary keys.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/multiballs.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.multiballs.foo\n```\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.multiballs['foo']\n```\n\n----------------------------------------\n\nTITLE: MPF Test Script for Weak Flippers\nDESCRIPTION: This MPF test script verifies the functionality of enabling and disabling weak flippers. It asserts that the normal flippers are enabled initially, then posts the `weak_flipper_enable` event and verifies that the weak flippers are enabled and the normal flippers are disabled. Finally, it posts the `normal_flippers_enable` event and checks that the normal flippers are re-enabled.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/flippers/weak_flippers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! test\n#! start_game\n#! assert_bool_condition True device.flippers.left.enabled\n#! assert_bool_condition False device.flippers.left_weak.enabled\n#! post weak_flipper_enable\n#! assert_bool_condition False device.flippers.left.enabled\n#! assert_bool_condition True device.flippers.left_weak.enabled\n#! post normal_flippers_enable\n#! assert_bool_condition True device.flippers.left.enabled\n#! assert_bool_condition False device.flippers.left_weak.enabled\n```\n\n----------------------------------------\n\nTITLE: Installing MPF in Editable Mode\nDESCRIPTION: This command installs the MPF package in “editable” mode (also known as “developer” mode). The `-e` option tells pip to install MPF by creating links to the source code in the `mpf` directory, rather than copying the files. This allows for immediate changes to MPF code without needing to reinstall.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/setup.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\npip install -e mpf\n```\n\n----------------------------------------\n\nTITLE: Install Python 3 Pip Package Manager\nDESCRIPTION: Installs the `python3-pip` package, which is the package installer for Python 3. This is a prerequisite for installing Python packages required by MPF.  It uses apt-get, the package manager for Debian-based systems like Ubuntu.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/pine64.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ apt-get install python3-pip\n```\n\n----------------------------------------\n\nTITLE: Stopping the Tilt Mode\nDESCRIPTION: Stops the tilt mode, ceasing its monitoring of tilt events. A callback can be defined to be executed once the mode has stopped. This method should not be overridden, instead, mode_stop should be used.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/tilt.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nstop(callback: Any = None, **kwargs) → bool\n```\n\n----------------------------------------\n\nTITLE: Accessing Virtual Platform\nDESCRIPTION: This snippet demonstrates how to access the virtual hardware platform instance within MPF using the `self.machine.hardware_platforms` dictionary. This allows you to call methods on the virtual platform to simulate hardware interactions during testing or development.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/virtual.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['virtual']\n```\n\n----------------------------------------\n\nTITLE: Configuring the initialize_mansion counter\nDESCRIPTION: This snippet shows the configuration for the 'initialize_mansion' counter logic block. This counter is used to enable the remaining 10 mansion awards after the initial selection of Hit Cousin It or Mamushka. It counts the 'mode_chair_lit_started' event and posts the 'initialize_mansion' event when complete, enabling the other achievements.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/TAF_mansion_awards.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: chair_lit\n# This is in the chair_lit mode config, NOT machine-wide config\ncounters:\n  initialize_mansion:\n    count_events: mode_chair_lit_started\n    events_when_complete: initialize_mansion\n    count_complete_value: 1\n    persist_state: true\n```\n\n----------------------------------------\n\nTITLE: Triggering Custom Slide Method from MPF\nDESCRIPTION: This YAML configuration snippet demonstrates how to trigger a custom method on a slide from MPF using the `slide_player`. It shows how to call the `explode` method on the `multiball_base_slide` when the `jackpot_counter_complete` event occurs, enabling dynamic slide behavior controlled by MPF events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/slides.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    slide_player:\n        jackpot_counter_complete:\n            multiball_base_slide:\n                action: method\n                method: explode\n```\n\n----------------------------------------\n\nTITLE: Initial Light Show Configuration (YAML)\nDESCRIPTION: This snippet shows the initial steps of the 'light_gadget_letter' show, which flashes a light in a specific color using tokens. `(gadget_letter_made_led)` is the light to flash, and `(gadget_letter_made_color)` is the color.  It then turns the light off briefly.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: light_gadget_letter\n- time: 0\n  lights:\n    (gadget_letter_made_led): (gadget_letter_made_color)\n\n- time: +.05\n  lights:\n    (gadget_letter_made_led): off\n```\n\n----------------------------------------\n\nTITLE: Set DYLD_LIBRARY_PATH for GStreamer (macOS)\nDESCRIPTION: This command sets the DYLD_LIBRARY_PATH environment variable to include the GStreamer library directory. This is necessary if MPF-MC fails to load due to GStreamer-related errors. Replace `1.22.5` with the actual GStreamer version installed via Homebrew. This is only needed if gstreamer errors occur.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/mac.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport DYLD_LIBRARY_PATH=/usr/local/Cellar/gstreamer/1.22.5/lib:$DYLD_LIBRARY_PATH\n```\n\n----------------------------------------\n\nTITLE: Blinkenlight Player Express Config\nDESCRIPTION: This snippet illustrates the use of the blinkenlight_player's express config to add and remove a keyless color. The color `red` is added to `my_blinkenlight` when `some_event` is posted, and removed when `some_other_event` is posted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/blinkenlight_player.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nblinkenlight_player:\n  some_event:\n    my_blinkenlight: red\n  some_other_event:\n    my_blinkenlight:\n      action: remove\n```\n\n----------------------------------------\n\nTITLE: Using assertWarns as a Context Manager in Python\nDESCRIPTION: This code snippet demonstrates how to use `assertWarns` as a context manager to verify that a specific warning is raised during the execution of a code block. It also showcases accessing the warning object and its attributes for further inspection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertWarns(SomeWarning):\n  do_something()\n\nwith self.assertWarns(SomeWarning) as cm:\n  do_something()\nthe_warning = cm.warning\nself.assertEqual(the_warning.some_attribute, 147)\n```\n\n----------------------------------------\n\nTITLE: Get Machine Path - Python\nDESCRIPTION: This method returns the string name of the path to the machine folder used for the tests. Override this method in your test class to specify the root machine folder path you need for your tests. Note that this path is relative to the MPF package root.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nget_machine_path()\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_machine_path(self):\n    return 'tests/machine_files/my_test/'\n```\n\n----------------------------------------\n\nTITLE: Configuring a Switch (OPP)\nDESCRIPTION: Configures a switch connected to the OPP hardware. The configuration includes the switch's number, config dict, and any platform-specific settings. This method sets up the hardware to detect changes in the switch's state.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_switch(number: str, config: mpf.core.platform.SwitchConfig, platform_config: dict)\n```\n\n----------------------------------------\n\nTITLE: Running MPF with multiple config files\nDESCRIPTION: This command starts the MPF game engine and loads multiple configuration files specified by a comma-separated list. It merges the configuration settings from each file in the order they are provided.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/game.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ mpf game -c config,fast\n```\n\n----------------------------------------\n\nTITLE: Removing a Switch Handler (Python)\nDESCRIPTION: Removes a registered switch handler. It requires specifying the exact parameters used when the handler was added, including `switch_name`, `callback`, `state`, and `ms`.  The `return_info` parameter is not considered.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nremove_switch_handler(switch_name, callback, state=1, ms=0)\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit Rule (OPP)\nDESCRIPTION: Sets a rule to pulse a driver when a switch is hit and continues the pulse even after the switch is released. Commonly used for autofire coils like pop bumpers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_rule(enable_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings)\n```\n\n----------------------------------------\n\nTITLE: Install MPF Dependencies with Homebrew (macOS)\nDESCRIPTION: This command uses Homebrew to install the SDL2 libraries and GStreamer. These libraries are dependencies for MPF, providing support for multimedia and graphics. These libraries are required for MPF-MC to function correctly.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/mac.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install SDL2 SDL2_mixer SDL2_image gstreamer\n```\n\n----------------------------------------\n\nTITLE: Configure P-ROC Driver Boards in MPF\nDESCRIPTION: This configures the driver boards for P-ROC in MPF. It specifies that the connected driver boards are PDB (P-ROC Driver Board) type. This setting is necessary for MPF to correctly interface with the driver boards.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/platform.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  platform: p_roc\n\np_roc:\n  driverboards: pdb\n```\n\n----------------------------------------\n\nTITLE: MPF Upgrade via pip\nDESCRIPTION: This command upgrades an existing MPF installation to version 0.80 using pip. It installs the pre-release version of MPF. It is recommended to create a new virtual environment before upgrading.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/installation.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install --upgrade --pre mpf\n```\n\n----------------------------------------\n\nTITLE: Uninstalling MPF with pip in DOS\nDESCRIPTION: This command uninstalls the Mission Pinball Framework (MPF) using the pip package manager. It is essential to remove older versions to avoid dependency conflicts during a new installation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/windows.md#_snippet_0\n\nLANGUAGE: doscon\nCODE:\n```\npip uninstall mpf\n```\n\n----------------------------------------\n\nTITLE: Accessing LISY Platform\nDESCRIPTION: Demonstrates how to access the LISY hardware platform instance from within MPF code. The LISY platform is stored within the `self.machine.hardware_platforms` dictionary, accessible via the key `'lisy'`. This allows interaction with LISY-specific functionalities.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/lisy.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['lisy']\n```\n\n----------------------------------------\n\nTITLE: Checking if an Event was Called in MpfTestCase\nDESCRIPTION: This assertion method verifies whether a specific event has been called during the test. Optionally, it can also check the number of times the event was called. Before using this method, the event must be mocked using `self.mock_event()`. This helps track event calls and their frequency in tests.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nself.mock_event('my_event')\nself.assertEventNotCalled('my_event')  # This will pass\n\nself.post_event('my_event')\nself.assertEventCalled('my_event') # This will pass\nself.assertEventCalled('my_event', 1)  # This will pass\n\nself.post_event('my_event')\nself.assertEventCalled('my_event') # This will pass\nself.assertEventCalled('my_event', 2)  # This will pass\n```\n\n----------------------------------------\n\nTITLE: Config Player: Show Player One Line Syntax (Standalone)\nDESCRIPTION: This snippet demonstrates the one-line syntax for the `show_player` config player in a standalone configuration. The event `event_which_is_posted_elsewhere` triggers the `your_show` show to play.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/index.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  event_which_is_posted_elsewhere: your_show\n```\n\n----------------------------------------\n\nTITLE: Removing Event Handlers by Key in MPF (Python)\nDESCRIPTION: Removes event handlers using the EventHandlerKey. This key is obtained when registering an event handler using the `add_handler` method. You can remove handlers individually or in batches using a list of keys.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/events.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nevents.remove_handler(my_handler)\n```\n\n----------------------------------------\n\nTITLE: Configure Achievement Group for Mansion Awards in YAML\nDESCRIPTION: This YAML configuration defines an achievement group called \"mansion_awards\" consisting of 12 achievements. It specifies the show tokens, auto-selection behavior, events triggered upon completion, and events that enable/disable the group, allowing for the management of mansion award progression and selection during gameplay. The configuration also defines the behavior for when the electric chair is lit and awards are collected.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/TAF_mansion_awards.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mansion_awards\n#! achievements:\n#!   9_mil:\n#!     show_tokens:\n#!   6_mil:\n#!     show_tokens:\n#!   3_mil:\n#!     show_tokens:\n#!   thing_multiball:\n#!     show_tokens:\n#!   quick_multiball:\n#!     show_tokens:\n#!   graveyard_at_max:\n#!     show_tokens:\n#!   raise_the_dead:\n#!     show_tokens:\n#!   festers_tunnel_hunt:\n#!     show_tokens:\n#!   lite_extra_ball:\n#!     show_tokens:\n#!   seance:\n#!     show_tokens:\n#!   hit_cousin_it:\n#!     show_tokens:\n#!   mamushka:\n#!     show_tokens:\nachievement_groups:\n  mansion_awards:\n    achievements:\n      - 9_mil\n      - 6_mil\n      - 3_mil\n      - thing_multiball\n      - quick_multiball\n      - graveyard_at_max\n      - raise_the_dead\n      - festers_tunnel_hunt\n      - lite_extra_ball\n      - seance\n      - hit_cousin_it\n      - mamushka\n    show_tokens:\n      lights: electric_chair_yellow\n    auto_select: true\n    events_when_all_completed: select_tour_mansion\n    enable_while_no_achievement_started: false\n    show_when_enabled: on\n    select_random_achievement_events: sw_jet\n    allow_selection_change_while_disabled: true\n    disable_while_achievement_started: false\n    start_selected_events: balldevice_electric_chair_ball_enter, balldevice_swamp_kickout_ball_enter, award_mansion_from_bear\n    enable_events: light_chair\n    disable_events: unlight_chair\n```\n\n----------------------------------------\n\nTITLE: Example Set Status of Simple Lamp to On Command (0x0B)\nDESCRIPTION: Example of sending command to turn on lamp 25.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_18\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tExample\tComment\n0\t1\t11\tCommand 11 - Set Status of Simple Lamp to On\n1\t1\t25\tSet lamp 25 to on\n```\n\n----------------------------------------\n\nTITLE: Accessing dual_wound_coils in MPF (Python)\nDESCRIPTION: This snippet demonstrates how to access dual_wound_coils within the MPF environment using the `self.machine.dual_wound_coils` collection. It shows accessing a coil by name, both as an attribute and as a dictionary key.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/dual_wound_coils.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.dual_wound_coils.foo\nself.machine.dual_wound_coils['foo']\n```\n\n----------------------------------------\n\nTITLE: Unzip MPF Debian Installer\nDESCRIPTION: Unzips the downloaded MPF Debian installer. This is necessary to access the installation script contained within the archive. Assumes the zip file is named `dev.zip` and unzips to the current directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/pine64.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ unzip dev.zip .\n```\n\n----------------------------------------\n\nTITLE: Starting the Mode in Python\nDESCRIPTION: Illustrates how to start the mode. The `start` method takes mode priority, a callback function, and optional keyword arguments.  It's recommended to override `mode_start` rather than the `start` method itself.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/game.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstart(mode_priority=None, callback=None, **kwargs) -> None\n```\n\n----------------------------------------\n\nTITLE: queue_event_player Configuration Example (YAML)\nDESCRIPTION: Example configuration for `queue_event_player` in a YAML file. When the event `some_event` is posted, the queue event `my_queue` will be posted. After all handlers for `my_queue` are done, the event `my_queue_done` will be posted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/queue_event_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nqueue_event_player:\n  some_event:\n    queue_event: my_queue\n    events_when_finished: my_queue_done\n```\n\n----------------------------------------\n\nTITLE: Mode-Specific Event Playing (YAML)\nDESCRIPTION: This snippet shows how to configure the event player within a specific mode to trigger events when the mode starts. In this case, it resets a target called \"upper\" when the \"shoot_here\" mode starts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/event_player.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: shoot_here\nevent_player:\n  mode_shoot_here_started: cmd_upper_target_reset\n```\n\n----------------------------------------\n\nTITLE: Stopping the Mode\nDESCRIPTION: Stops the mode and executes a callback once the mode is stopped.  It's recommended to use the `mode_stop` method in your mode code instead of overriding the `stop` method directly. Returns true if the mode is running.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/attract.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstop(callback: Any = None, **kwargs) → bool\n```\n\n----------------------------------------\n\nTITLE: Enable Debug Mode for Trough - MPF\nDESCRIPTION: This snippet shows how to enable debug mode for a ball trough within the `ball_devices:` section of your MPF configuration. Enabling debug provides more verbose logging output, aiding in troubleshooting.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/ball_devices/troubleshooting.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  trough:\n    debug: true\n```\n\n----------------------------------------\n\nTITLE: Get Status of Solenoid Response (0x14)\nDESCRIPTION: This is the response to the Get Status of Solenoid command (0x14). It returns a single byte indicating the solenoid's status: 0=Off, 1=On, 2=Solenoid not existing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_23\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tDescription\n0\t1\t0=Off, 1=On, 2=Solenoid not existing\n```\n\n----------------------------------------\n\nTITLE: Accessing Pololu Maestro Platform in MPF\nDESCRIPTION: This snippet illustrates how to access the Pololu Maestro hardware platform instance within the MPF environment using the `self.machine.hardware_platforms` dictionary. This allows you to interact with the Pololu Maestro controller through code.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/pololu_maestro.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['pololu_maestro']\n```\n\n----------------------------------------\n\nTITLE: Getting Coil Config Section (OPP)\nDESCRIPTION: Returns the coil config section. This method is likely used to retrieve the appropriate section from the machine's configuration file that pertains to coil settings for the OPP platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclassmethod get_coil_config_section()\n```\n\n----------------------------------------\n\nTITLE: Adding line to /etc/inittab to allow USB login with hardware flow control\nDESCRIPTION: This snippet adds a line to `/etc/inittab` to enable login via a USB serial adapter with hardware flow control (RTS/CTS). It's used with null-modem cables and serial adapters with RTS/CTS pins. The `-h` option enables hardware flow control.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/mpf-spike-bridge.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nUSB0:2345:respawn:/sbin/getty 115200 ttyUSB0 -h -n -l /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Defining Slides and Slide Player Configuration in YAML (Updated)\nDESCRIPTION: This YAML snippet configures the `welcome_slide` slide and the `slide_player` settings. It sets up the `welcome_slide` with a text widget displaying \"PINBALL!\" and a rectangle widget. The `slide_player` section links the `init_done` event to the `welcome_slide`. This configuration demonstrates an updated version where the attract_started slide is removed to allow for the attract mode display show to run instead.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/16_attract_mode_show.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  welcome_slide:\n    widgets:\n      - type: text\n        text: PINBALL!\n        font_size: 50\n        color: red\n      - type: rectangle\n        width: 240\n        height: 60\n\nslide_player:\n  init_done: welcome_slide\n```\n\n----------------------------------------\n\nTITLE: Accessing P3-ROC Platform\nDESCRIPTION: This code snippet demonstrates how to access the P3-ROC hardware platform within MPF.  The P3-ROC platform is accessible through the `self.machine.hardware_platforms` dictionary using the key `'p3_roc'`. This allows you to interact with the P3-ROC hardware and use its methods.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/p3_roc.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['p3_roc']\n```\n\n----------------------------------------\n\nTITLE: Running MPF with Verbose Logging and Text UI Disabled (DOS)\nDESCRIPTION: This command runs MPF with the text user interface disabled and verbose logging enabled. This can help identify configuration errors by providing more detailed output.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/10_run_a_game.md#_snippet_4\n\nLANGUAGE: doscon\nCODE:\n```\nmpf both -t -v -V -X\n```\n\n----------------------------------------\n\nTITLE: Slide Configuration with Z-Order\nDESCRIPTION: This YAML snippet configures a slide named `3_widgets` containing three text widgets. The `z:` property is used to explicitly set the z-order of the widgets, overriding the default order based on the configuration file order.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/layers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  3_widgets:\n    - type: text\n      text: widget3.1\n      color: red\n      font_size: 80\n      y: 40%\n      z: 1\n    - type: text\n      text: widget3.2\n      color: orange\n      font_size: 80\n      y: 50%\n      z: 100\n    - type: text\n      text: widget3.3\n      color: violet\n      font_size: 80\n      y: 60%\n      z: 2\n```\n\n----------------------------------------\n\nTITLE: Assert Player Variable Value - Python\nDESCRIPTION: This assertion verifies that a specific player variable exists and holds the expected value. It is used to test the correct storage and retrieval of player-specific data within the game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nassertPlayerVarEqual(value, player_var)\n```\n\n----------------------------------------\n\nTITLE: Adding User to Sudo Group in Debian\nDESCRIPTION: This snippet shows how to add a specific user to the `sudo` group in Debian. This grants the user administrative privileges, allowing them to execute commands with root permissions. Replace `[your-user]` with the actual username.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nusermod -aG sudo [your-user]\n```\n\n----------------------------------------\n\nTITLE: Configure Show Player for Resetting Gadget Lights (YAML)\nDESCRIPTION: This snippet configures the show player to reset the gadget lights when the 'reset_gadget_lights' event is fired by the accrual upon completion. It sets the 'gadget_letter_final_color' to black (000000), effectively turning off all gadget lights simultaneously. It utilizes the `gadget_letter` tag to target all gadget lights at once.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  reset_gadget_lights:\n    light_gadget_letter:\n      priority: 10\n      show_tokens:\n        gadget_letter_made_led: gadget_letter\n        gadget_letter_made_color: yellow\n        gadget_letter_final_color: 000000\n```\n\n----------------------------------------\n\nTITLE: Installing MPF-MC in Editable Mode with pip\nDESCRIPTION: This command installs MPF-MC (Media Controller) in editable mode, allowing developers to modify the code directly within the cloned repository. Changes made will be immediately reflected without needing to reinstall. Requires pip and being in the MPF-MC repo directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/about/contributing_to_mpf.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -e .\n```\n\n----------------------------------------\n\nTITLE: Getting Info String (OPP)\nDESCRIPTION: Generates a string containing information about the connected OPP boards. This string likely includes details such as board versions, serial numbers, and other relevant diagnostic information.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nget_info_string()\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs Requirements\nDESCRIPTION: This command installs the necessary Python packages required to build and serve the MPF documentation website locally.  It uses pip to install the packages listed in the `requirements.txt` file, which includes MkDocs and the Material for MkDocs theme.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/about/help_docs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring a P3-ROC Switch\nDESCRIPTION: This method configures a switch on the P3-ROC platform.  It takes the switch number, switch configuration, and platform-specific settings as input. It returns a configured switch object for interaction.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/p3_roc.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconfigure_switch(number: str, config: mpf.core.platform.SwitchConfig, platform_config: dict)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Light in LISY using YAML\nDESCRIPTION: This snippet demonstrates how to configure a light in the LISY system using a YAML configuration file. The `number` field corresponds to the light's identifier in the game manual. Replace `your_light` with a descriptive name for the light.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/lights.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  your_light:\n    number: 03\n```\n\n----------------------------------------\n\nTITLE: Playfield wait_for_ready_to_receive() Method\nDESCRIPTION: Describes the `wait_for_ready_to_receive()` method, which indicates whether the playfield is ready to receive a ball.  Playfield is always ready.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nstatic wait_for_ready_to_receive(source)\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Unrecognized Command Error in MPF on Windows\nDESCRIPTION: This error means that the system cannot find the 'mpf' executable. This usually indicates an issue with the MPF installation or the system's PATH configuration. Reinstalling MPF or adding MPF to the PATH environment variable may resolve the issue.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/2_creating_a_new_machine.md#_snippet_9\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\pinball\\your_machine>mpf\n'mpf' is not recognized as an internal or external command,\noperable program or batch file.\n```\n\n----------------------------------------\n\nTITLE: Directory Listing Example doscon\nDESCRIPTION: This snippet illustrates a directory listing in a DOS console showing the structure of the machine folder.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/2_creating_a_new_machine.md#_snippet_0\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\pinball\\your_machine\n```\n\n----------------------------------------\n\nTITLE: Adding a Switch Change Monitor (Python)\nDESCRIPTION: This method allows adding a callback function to monitor switch changes. The callback function is executed whenever a switch state changes. It requires a callable `monitor` as input, which takes a `MonitoredSwitchChange` object as an argument.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nadd_monitor(monitor: Callable[[mpf.core.switch_controller.MonitoredSwitchChange], None])\n```\n\n----------------------------------------\n\nTITLE: Auditor Log Example\nDESCRIPTION: This example illustrates a typical output from the MPF auditor. It shows the counts of events, player variables (with averages, top scores, and totals), shot counts, and switch counts. This information provides insights into gameplay and machine usage.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machine_management/auditor.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nEvents:\n ball_search_begin: 0\n ball_started: 1\n game_ended: 31\n game_started: 41\n machine_init_phase_1: 0\n machine_reset: 29\nPlayer:\n score:\n average: 15634\n top:\n - 71130\n - 59840\n - 50190\n - 47490\n - 39350\n - 33350\n - 25700\n - 24890\n - 21980\n - 21670\n total: 31\nShots:\n AirRaidRamp: 3\n DropTarget: 99\n FullRightOrbit: 5\n Inlane: 54\n LeftOrbit: 13\n LeftRamp: 4\n OrangeStandups: 11\n Outlane: 14\n RightRamp: 7\n Slingshot: 105\n WeakRightOrbit: 6\nSwitches:\n ShooterLaneL: 20\n alwaysClosed: 0\n buyIn: 0\n captiveBall1: 22\n captiveBall2: 10\n captiveBall3: 2\n centerRampExit: 16\n coin1: 0\n coin2: 0\n coin3: 0\n coin4: 0\n coinDoor: 0\n craneRelease: 0\n down: 0\n dropTargetD: 9\n dropTargetE: 51\n dropTargetG: 45\n dropTargetJ: 38\n dropTargetU: 47\n enter: 98\n esc: 80\n fireL: 0\n fireR: 122\n flipperLwL: 400\n flipperLwL_EOS: 388\n flipperLwR: 440\n flipperLwR_EOS: 434\n flipperUpL: 364\n flipperUpL_EOS: 360\n flipperUpR: 440\n flipperUpR_EOS: 436\n globePosition1: 108\n globePosition2: 108\n inlaneL: 40\n inlaneR: 38\n leftRampEnter: 24\n leftRampExit: 8\n leftRampToLock: 4\n leftRollover: 136\n leftScorePost: 42\n magnetOverRing: 0\n mystery: 8\n outerInlaneR: 30\n outlaneL: 22\n outlaneR: 6\n plumbBob: 0\n popperL: 36\n popperR: 20\n rightRampExit: 14\n rightTopPost: 28\n shooterR: 106\n slamTilt: 0\n slingL: 134\n slingR: 76\n start: 47\n subwayEnter1: 16\n subwayEnter2: 16\n superGame: 0\n threeBankTargets: 22\n ticketDispenser: 0\n topCenterRollover: 24\n topRampExit: 6\n topRightOpto: 36\n trough1: 120\n trough2: 96\n trough3: 96\n trough4: 96\n trough5: 96\n trough6: 74\n troughJam: 76\n up: 0\n```\n\n----------------------------------------\n\nTITLE: Defining a basic widget\nDESCRIPTION: This snippet shows the basic structure of a widget definition within a slide, including the type, text, and color properties. No animations are defined in this basic example.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  slide_1:\n    widgets:\n      - type: text\n        text: MY TEXT\n        color: red\n```\n\n----------------------------------------\n\nTITLE: Stopping the Service Mode\nDESCRIPTION: Stops the service mode. The `callback` parameter is a method called after the mode is stopped.  Do not override this method; instead use `mode_stop`. Returns true if the mode is running otherwise false.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/service.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nstop(callback: Any = None, **kwargs) → bool\n```\n\n----------------------------------------\n\nTITLE: Registering Mode Event Handler\nDESCRIPTION: Registers an event handler that is automatically removed when the mode stops. It's similar to `EventManager.add_handler()`, but handles unregistration automatically. Returns an `EventHandlerKey` to the handler.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/service.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nadd_mode_event_handler(event: str, handler: Callable, priority: int = 0, **kwargs) → mpf.core.events.EventHandlerKey\n```\n\n----------------------------------------\n\nTITLE: Assert Light Color Not Equal - Python\nDESCRIPTION: Asserts that a light with the given name exists and does not display the specified color. This is used to verify the absence of a particular color on a light during testing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n`assertNotLightColor(light_name, color)`\n```\n\n----------------------------------------\n\nTITLE: Accessing the Spike Platform via Code (Python)\nDESCRIPTION: Demonstrates how to access the Spike platform instance through the `self.machine.hardware_platforms` dictionary in MPF. This allows you to call methods and access attributes of the Spike platform to control hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/spike.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['spike']\n```\n\n----------------------------------------\n\nTITLE: Sending Synchronous Command\nDESCRIPTION: Sends a command to a specific node on the Spike platform and waits for a response (though it does not necessarily use the response). This ensures the command is sent before proceeding.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nsend_cmd_sync(node, cmd, data)\n```\n\n----------------------------------------\n\nTITLE: Verifying Virtual Environment Activation\nDESCRIPTION: Demonstrates how to verify that a virtual environment is active by checking the Python version before and after activation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-environments.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nMy-Mac:~ python --version\nPython 2.7.10\nMy-Mac:~ source ~/mpfenv/bin/activate\n(mpfenv) My-Mac:~ python --version\nPython 3.9.13\n(mpfenv) My-Mac:~\n```\n\n----------------------------------------\n\nTITLE: MPF test assertions for DMD and Window displays\nDESCRIPTION: These test assertions check if \"MPF\" text is displayed on the top slide of both the DMD and Window displays. These are used in MPF's automated testing framework.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/dmds.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! test\n#! assert_text_on_top_slide MPF dmd\n#! assert_text_on_top_slide MPF window\n```\n\n----------------------------------------\n\nTITLE: Removing or Updating Specific Widget Instance in MPF (YAML)\nDESCRIPTION: This snippet illustrates how to remove or update a specific widget instance on a slide by referencing its unique key. The `action` parameter is used to specify whether to remove or update the widget, and `widget_settings` are used to define the new properties for updating. This configuration resides within the `widget_player` section of the MPF configuration and depends on the definition of `widget_1`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/keys.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nwidget_player:\n  some_event:\n    widget_1:\n      key: widget_1_1\n      action: remove  #this could also be update\n      widget_settings:\n         # <list of settings below go here>\n```\n\n----------------------------------------\n\nTITLE: Accessing OSC Platform Instance in MPF (Python)\nDESCRIPTION: Shows how to access the OSC platform instance within the MPF machine object using the hardware_platforms dictionary. This allows interaction with the OSC platform's methods and attributes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/osc.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['osc']\n```\n\n----------------------------------------\n\nTITLE: Registering a Switch (Python)\nDESCRIPTION: Adds a switch object to the switch controller for tracking purposes.  The single parameter is the `switch` object to be added.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nregister_switch(switch: mpf.devices.switch.Switch)\n```\n\n----------------------------------------\n\nTITLE: Add Segment Display Emulator Widget to Slide (YAML)\nDESCRIPTION: This snippet adds a segment display emulator widget to the \"window_slide_1\" slide. It configures the widget with various parameters such as character count, spacing, colors, and the text to display. The `name` parameter must match the name of the hardware segment display in MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/segment_display_emulator/how_to.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  window_slide_1:\n    widgets:\n      - type: segment_display_emulator\n        name: display1\n        character_count: 7\n        character_slant_angle: 0\n        character_spacing: 20\n        segment_width: 0.11\n        segment_interval: 0.04\n        segment_off_color: 4b4c4a30\n        segment_on_color: fe961bff\n        side_bevel_enabled: true\n        dot_enabled: true\n        comma_enabled: true\n        text: HELLO\n        width: 600\n        height: 150\n        y: 100\n```\n\n----------------------------------------\n\nTITLE: Accessing BallHolds in MPF\nDESCRIPTION: Demonstrates how to access BallHold devices within the MPF environment using the `self.machine.ball_holds` collection.  Shows accessing a specific ball hold by name and using dictionary-style access.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/ball_holds.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.ball_holds.foo\nself.machine.ball_holds['foo']\n```\n\n----------------------------------------\n\nTITLE: Verify MPF Installation\nDESCRIPTION: Checks the installed MPF version. This command can be run from any directory and should output the MPF version number.  Expects the `mpf` command to be in the system's PATH.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/xubuntu.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nmpf --version\n```\n\n----------------------------------------\n\nTITLE: Custom Shader Filter Configuration\nDESCRIPTION: This code snippet shows how to configure a custom shader filter in GMC. It specifies the path to the shader file and custom parameters for the shader.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/window-filters.md#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n    [filter]\n    filter=\"res://shaders/my_awesome_shader.gdshader\"\n    awesomeness=9000\n    frequency=0.5\n```\n\n----------------------------------------\n\nTITLE: YAML Dictionary Example\nDESCRIPTION: This YAML snippet demonstrates the structure of a dictionary.  Each entry in the dictionary consists of a key-value pair. Dictionaries are used to store structured data.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-ConfigValidator-12.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nyour_setting:\n  key1_in_dict: value1_in_dict\n  key2_in_dict: value2_in_dict\n```\n\n----------------------------------------\n\nTITLE: Pick Weighted Random Item\nDESCRIPTION: This static method allows picking a random item from a list, presumably considering item weights for selection. It takes the list of items as a parameter.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/Randomizer.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n`static pick_weighted_random(items)`\n\nPick a random item.\n\nParameters:\n\n* **items** – Items to select from\n```\n\n----------------------------------------\n\nTITLE: Configure I2C Servo Controller Hardware in MPF (YAML)\nDESCRIPTION: This snippet configures the I2C servo controller within the MPF `hardware` section.  It specifies `i2c_servo_controller` as the type of servo controller. This assumes the controller is connected to the I2C port.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/i2c_servo.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nhardware:\n  servo_controllers: i2c_servo_controller\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on Linux\nDESCRIPTION: Activates the virtual environment on Linux using the `.` command (similar to `source`). This script sets environment variables to use the Python interpreter and packages within the virtual environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-environments.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n. ~/mpfenv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Accessing BallController in Code (Python)\nDESCRIPTION: This snippet demonstrates how to access the BallController instance within the MPF framework.  The BallController is a singleton instance accessible via `self.machine.ball_controller`. This provides access to all ball management functions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/ball_controller.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.ball_controller\n```\n\n----------------------------------------\n\nTITLE: Hit and Release Switches Simultaneously - Python\nDESCRIPTION: This function simulates hitting and releasing multiple switches momentarily. Switches are hit and then released sequentially. Event processing only happens at the end of the sequence.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nhit_and_release_switches_simultaneously(names)\n```\n\n----------------------------------------\n\nTITLE: Parse List Config (Python)\nDESCRIPTION: This method parses a list-based configuration for the random event player. It handles configuration entries that are structured as lists. No specific dependencies are listed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/random_event_player.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nget_list_config(value)\n```\n\n----------------------------------------\n\nTITLE: Configure Flasher Coil in MPF\nDESCRIPTION: This snippet demonstrates how to configure a flasher coil in the MPF configuration file.  It sets the coil number and enables it to be enabled directly. The coil needs to be added as light afterwards.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/flashers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  flasher_coil_4:\n    number: 4\n    allow_enable: true\n```\n\n----------------------------------------\n\nTITLE: Add ball to device (Python)\nDESCRIPTION: Adds a ball to a specified ball device using the smart virtual platform. The `device` parameter takes a `mpf.devices.ball_device.ball_device.BallDevice` object representing the target device.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/smart_virtual.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadd_ball_to_device(device: mpf.devices.ball_device.ball_device.BallDevice)\n```\n\n----------------------------------------\n\nTITLE: Running MPF with a Configuration File (Doscon)\nDESCRIPTION: This command allows you to run the MPF (Mission Pinball Framework) with both the media controller and the machine engine using a configuration file. It assumes you are in the directory containing the config.yaml file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_13\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial>mpf both\n```\n\n----------------------------------------\n\nTITLE: Fill Troughs with Balls - Python\nDESCRIPTION: Fills all ball devices tagged as troughs with balls. This function is commonly used to set up a known starting state for tests involving ball management.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n`fill_troughs()`\n```\n\n----------------------------------------\n\nTITLE: Get Enable Plugins - Python\nDESCRIPTION: Controls whether MPF plugins are enabled for tests in the class. By default, plugins are disabled. Override this method to return True to enable plugin loading for tests.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n`get_enable_plugins()`\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_enable_plugins(self):\n    return True\n```\n\n----------------------------------------\n\nTITLE: Installing Pip and pkg-config\nDESCRIPTION: This snippet installs pip3 (Python's package installer) and pkg-config (a helper tool used when compiling applications). These are needed for MPF and mpf-mc.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nsudo apt-get install python3-pip pkg-config\n```\n\n----------------------------------------\n\nTITLE: Enable Bridge Debug and Logging\nDESCRIPTION: This snippet configures the MPF Spike bridge to enable debug mode, bridge debug mode and output the logs to a file on the mounted USB drive. This creates a detailed log file containing nodebus communication, which can be useful for diagnosing communication issues between MPF and the Spike system. Requires a USB drive mounted at `/mnt`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/troubleshooting.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspike:\n  debug: true\n  bridge_debug: true\n  bridge_debug_log: /mnt/spike.log\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.award_disabled() - Python\nDESCRIPTION: Post the events when an extra ball cannot be awarded.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\naward_disabled()\n```\n\n----------------------------------------\n\nTITLE: Accessing the Tilt Mode\nDESCRIPTION: Shows how to access the tilt mode instance from anywhere in the MPF environment. This allows you to interact with the tilt mode's methods and attributes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/tilt.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.modes.tilt\n```\n\n----------------------------------------\n\nTITLE: Sound System Configuration Example (YAML)\nDESCRIPTION: This YAML snippet shows a typical sound system configuration in MPF. It includes settings for the buffer size, number of channels, whether the sound system is enabled, audio frequency, and defines three audio tracks: music, voice, and sfx, each with its own simultaneous sound count and volume level. This config is deprecated in MPF 0.80 and later versions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/sound_system.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmachine_vars:\n  master_volume:\n    initial_value: 0.8\n\nsound_system:\n  buffer: 1024\n  channels: 1\n  enabled: true\n  frequency: 44100\n  tracks:\n    music:\n      type: standard\n      simultaneous_sounds: 1\n      volume: 0.5\n    voice:\n      type: standard\n      simultaneous_sounds: 1\n      volume: 0.7\n    sfx:\n      type: standard\n      simultaneous_sounds: 8\n      volume: 0.4\n```\n\n----------------------------------------\n\nTITLE: Accessing the pololu_maestro platform\nDESCRIPTION: This describes how to access the Pololu Maestro hardware platform within the MPF environment.  It highlights that the platform is stored within the `self.machine.hardware_platforms` dictionary under the key 'pololu_maestro'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/pololu_maestro.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['pololu_maestro']\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse on Hit and Enable/Release Rule (OPP)\nDESCRIPTION: Sets a rule to pulse a driver when a switch is hit, then enable it (possibly with PWM). When the switch is released, the pulse is canceled, and the driver is disabled. Typically used for single-coil flippers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_enable_and_release_rule(enable_switch: mpf.core.platform.SwitchSettings, coil: mpf.core.platform.DriverSettings)\n```\n\n----------------------------------------\n\nTITLE: Combine Dynamic Slide Creation and Property Adjustment in YAML\nDESCRIPTION: Illustrates how to both dynamically create a slide and adjust its properties within the slide player. In this example, *slide_1* is created with widgets and also assigned a `transition` when *some_event* occurs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/slide_player.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nslide_player:\n  some_event:\n    slide_1:\n      widgets:\n        - type: text\n          text: I AM A TEXT WIDGET\n        - type: rectangle\n          width: 200\n          height: 100\n          color: red\n      transition: wipe\n```\n\n----------------------------------------\n\nTITLE: Configuring P-ROC Switch\nDESCRIPTION: Configures a switch on the P-ROC platform. This method takes the switch number, configuration, and platform-specific settings to create and return a configured switch object.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/p_roc.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef configure_switch(number: str, config: mpf.core.platform.SwitchConfig, platform_config: dict):\n    # Configure a P-ROC switch.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Install MPF with Text UI with pip (macOS)\nDESCRIPTION: This command installs the Mission Pinball Framework (MPF) with Text UI for debugging using pip, the Python package installer. This will add extra packages for debugging using the CLI.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/mac.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install mpf[cli]\n```\n\n----------------------------------------\n\nTITLE: Configuring P-ROC Switch (Python)\nDESCRIPTION: Configures a P-ROC switch. It takes the switch number, a SwitchConfig object, and platform-specific configuration to create and return a configured switch object. The `number` argument is the switch's identifier, `config` defines switch settings, and `platform_config` contains P-ROC specific settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/p_roc.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef configure_switch(number: str, config: mpf.core.platform.SwitchConfig, platform_config: dict):\n    \"\"\"Configure a P-ROC switch.\n\n    Parameters:\n        number: String number of the switch to configure.\n        config: SwitchConfig settings.\n        platform_config: Platform specific settings.\n\n    Returns: A configured switch object.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Accessing the Drivers Platform in MPF (Python)\nDESCRIPTION: Shows how to access the drivers platform through the machine's hardware_platforms dictionary. This allows interaction with the driver light platform for controlling lights connected to drivers.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/drivers.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['drivers']\n```\n\n----------------------------------------\n\nTITLE: Install MPF-MC with pip (macOS)\nDESCRIPTION: This command installs MPF-MC (Mission Pinball Framework Media Controller) using pip. MPF-MC is the media controller component of MPF, responsible for managing displays and multimedia elements.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/mac.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install mpf-mc\n```\n\n----------------------------------------\n\nTITLE: Starting the MPF game engine\nDESCRIPTION: This command starts only the MPF game engine. It requires a separate command to start the media controller if needed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mpf game\n```\n\n----------------------------------------\n\nTITLE: Installing MPF Monitor 0.57 via pip\nDESCRIPTION: This command installs the pre-release version of MPF Monitor, specifically version 0.57.0.devXX, using pip. The `--pre` flag ensures that the pre-release version is installed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/0.57.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install mpf-monitor --pre\n```\n\n----------------------------------------\n\nTITLE: Queue Relay Player Example Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates the configuration of the `queue_relay_player`. It shows how to define the event to post (`post`) and the event to wait for (`wait_for`) to resume queue processing.  This example pauses the 'game_ending' queue event, posts 'start_my_mode', and waits for 'my_mode_done' before continuing the 'game_ending' event processing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/queue_relay_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nqueue_relay_player:\n  game_ending:\n    post: start_my_mode\n    wait_for: my_mode_done\n```\n\n----------------------------------------\n\nTITLE: Defining a List of Lists with Mixed Notation (YAML)\nDESCRIPTION: This snippet demonstrates how to define a list of lists using a combination of commas and dashes. Each outer list item is preceded by a dash and indented. Some of those items are themselves lists of comma-separated values. The outer list contains three items: `item1, item2`, `item3, item4, item5`, and `item6`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/lists.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n    - item1, item2\n    - item3, item4, item5\n    - item6\n```\n\n----------------------------------------\n\nTITLE: Carousel Event Configuration in MPF 0.80\nDESCRIPTION: This snippet shows the updated carousel event configuration in MPF 0.80. Instead of unique events for each item, a consolidated *item_highlighted* event is used. The carousel and item attributes specify which carousel and item were highlighted, along with the direction.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/0.80.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nitem_highlighted{carousel=\"missionselect\", item=\"garrus\", direction=\"forwards\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Addons Folder (Mac & Linux)\nDESCRIPTION: This command lists the contents of the addons folder, including details about symbolic links. It's used to verify that the symbolic link was created correctly and points to the intended directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/installation.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n(mpf080) pinballgame $> ls -la addons\n\ntotal 0\ndrwxr-xr-x    96 Apr  8 19:09 .\ndrwxr-xr-x  1024 May  6 12:30 ..\nlrwxr-xr-x    41 Apr  8 19:09 mpf-gmc -> /Users/tommy/git/mpf-gmc/addons/mpf-gmc\n```\n\n----------------------------------------\n\nTITLE: Start MPF game separately (console)\nDESCRIPTION: This command starts the MPF game engine separately to isolate potential issues from the media controller. This helps to distinguish between errors originating from the game logic and the media handling components. The `-t` flag suppresses the text UI.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/general_debugging.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mpf game -t\n```\n\n----------------------------------------\n\nTITLE: Get Machine Path - Python\nDESCRIPTION: Returns the path to the machine folder used for the tests. Override this method in test classes to specify the desired machine folder. The path is relative to the MPF package root.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n`get_machine_path()`\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_machine_path(self):\n    return 'tests/machine_files/my_test/'\n```\n\n----------------------------------------\n\nTITLE: Truncating Long Strings - Python\nDESCRIPTION: Demonstrates truncating a string to a maximum length of 3 characters using Python's format string syntax. The example assumes a variable named `variable` with the value 1337.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/text_templates.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n{variable:.3}\n```\n\nLANGUAGE: text\nCODE:\n```\n\"133\"\n```\n\n----------------------------------------\n\nTITLE: Configure Stepper - Python\nDESCRIPTION: Configures a specific Pololu TIC stepper motor. The `number` parameter identifies the stepper, and the `config` parameter provides the stepper's configuration settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/pololu_tic.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_stepper(number: str, config: dict) → mpf.platforms.pololu.pololu_tic.PololuTICStepper\n```\n\n----------------------------------------\n\nTITLE: MPF Game Command Invocation (No Command)\nDESCRIPTION: Illustrates invoking the `mpf game` command without explicitly specifying `game`. The `-btx` parameter is passed to the game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/mpf.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ mpf game -btx\n$ mpf -btx\n```\n\n----------------------------------------\n\nTITLE: Assert Text Matches Regex - Python\nDESCRIPTION: Fails the test unless the given text matches the provided regular expression.  This is useful for verifying the presence of specific patterns in text.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n`assertRegex(text, expected_regex, msg=None)`\n```\n\n----------------------------------------\n\nTITLE: Add Crash Handler (Python)\nDESCRIPTION: Adds a crash handler function to be called when a crash occurs during testing. This enables restoration of output and prepares logging.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nadd_crash_handler(handler: Callable)\n\nAdd a crash handler which is called on a crash.\n\nThis can be used to restore the output and prepare logging.\n```\n\n----------------------------------------\n\nTITLE: Export PATH Variable - doscon\nDESCRIPTION: This command adds the MPF executable path to the `PATH` environment variable. This allows you to run the `mpf` command from any directory. Replace \"user\" with your actual username. It is typically added to `.profile` or `.bashrc`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_8\n\nLANGUAGE: doscon\nCODE:\n```\nexport PATH=\"$PATH:/home/user/.local/bin\"\n```\n\n----------------------------------------\n\nTITLE: Configure Virtual Segment Display Hardware (YAML)\nDESCRIPTION: This snippet configures the virtual segment display 'hardware' in the `segment_displays:` section. The `name` parameter must match the `name` parameter of the segment_display_emulator widget. It also includes `virtual_segment_display_connector` to connect the segment displays to the emulator widgets.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/segment_display_emulator/how_to.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsegment_displays:\n  display1:\n    number: 1\n```\n\nLANGUAGE: yaml\nCODE:\n```\nvirtual_segment_display_connector:\n  segment_displays: display1\n```\n\n----------------------------------------\n\nTITLE: Accessing spi_bit_bang Platform in MPF\nDESCRIPTION: This snippet shows how to access the `spi_bit_bang` hardware platform instance in MPF. The hardware platforms are stored in the `self.machine.hardware_platforms` dictionary.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spi_bit_bang.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['spi_bit_bang']\n```\n\n----------------------------------------\n\nTITLE: Displaying Text with 'medium' Font in MPF-MC (YAML)\nDESCRIPTION: This snippet demonstrates how to display text on a slide using the pre-configured 'medium' font style in MPF-MC. It creates a slide with a text widget, sets the style to 'medium', and the text to \"MISSION\". The 'medium' font is 7 pixels tall and optimized for DMD displays.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/dmd_fonts.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  my_slide:\n    - type: text\n      style: medium\n      text: MISSION\n#! slide_player:\n#!   show_slide_event: my_slide\n##! test\n#! post show_slide_event\n#! advance_time_and_run .1\n#! assert_slide_on_top my_slide\n#! assert_text_on_top_slide MISSION\n```\n\n----------------------------------------\n\nTITLE: Asserting Raised Exceptions in MpfTestCase\nDESCRIPTION: This example illustrates how to use `assertRaises` as a context manager. It ensures that a specific exception is raised when a particular block of code is executed.  It also shows how to capture and inspect the exception object for more detailed analysis of the error.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertRaises(SomeException):\n  do_something()\n\n```\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertRaises(SomeException) as cm:\n  do_something()\nthe_exception = cm.exception\nself.assertEqual(the_exception.error_code, 3)\n```\n\n----------------------------------------\n\nTITLE: Add User to Dialout Group\nDESCRIPTION: Adds the specified user to the `dialout` group. This is required when using the SmartMatrix RGB DMD.  Requires `sudo` privileges.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/xubuntu.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nsudo usermod -a -G dialout your_username\n```\n\n----------------------------------------\n\nTITLE: Accessing the Spike Platform\nDESCRIPTION: Demonstrates how to access the Spike platform instance within the MPF machine object. This provides a starting point for interacting with Spike hardware via code.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['spike']\n```\n\n----------------------------------------\n\nTITLE: Accessing the high_score mode\nDESCRIPTION: This code snippet shows how to access the high_score mode from anywhere within the MPF framework.  It utilizes the `self.machine.modes` attribute to retrieve the HighScore mode instance.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/high_score.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.modes.high_score\n```\n\n----------------------------------------\n\nTITLE: Basic Light Configuration YAML\nDESCRIPTION: This YAML snippet shows a basic light configuration defining a single LED. The number specifies the hardware address, and its format depends on the platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/lights/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlights:\n  my_led:\n    number: 7   # the exact number format depends on your platform\n```\n\n----------------------------------------\n\nTITLE: Get Absolute Path - Python\nDESCRIPTION: This static method retrieves the absolute path relative to the current directory. It's a utility function for resolving file paths within the test environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nstatic get_abs_path(path)\n```\n\n----------------------------------------\n\nTITLE: Configuring I2C Device on SMBus2 - Python\nDESCRIPTION: Configures an I2C device on the SMBus2 platform, returning an `Smbus2I2cDevice` object. The `number` parameter specifies the I2C bus number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/smbus2.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_i2c(number: str) → mpf.platforms.smbus2.Smbus2I2cDevice\n```\n\n----------------------------------------\n\nTITLE: Initializing the OSC Platform (Python)\nDESCRIPTION: Represents the initialization method for the OSC platform. This method sets up the necessary resources and connections for the platform to operate correctly within MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/osc.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ninitialize()\n```\n\n----------------------------------------\n\nTITLE: Add udev rule for I2C device\nDESCRIPTION: Adds a udev rule to `/etc/udev/rules.d/i2c.rules` to create a symbolic link for a specific I2C device connected via USB.  This allows referencing the device by name instead of the default /dev/i2cX path.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/smbus.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nSUBSYSTEM==\"i2c-dev\", ACTION==\"add\", DEVPATH==\"/devices/pci0000:00/0000:00:14.0/usb1/1-3/1-3.1/1-3.1:1.0/*\", SYMLINK+=\"i2c-front\", GROUP=\"adm\", MODE=\"0660\n```\n\n----------------------------------------\n\nTITLE: Assert Regex Match - Python\nDESCRIPTION: This assertion checks that the given text matches the provided regular expression pattern. It is used to verify the presence of specific patterns in strings, such as validating input formats.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nassertRegex(text, expected_regex, msg=None)\n```\n\n----------------------------------------\n\nTITLE: Check pip Versions - doscon\nDESCRIPTION: These commands check the installed versions of pip, the Python package installer.  Different commands may work depending on your system configuration.  The output shows the version of pip associated with each Python installation (e.g., pip, pip3, pip3.9).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_2\n\nLANGUAGE: doscon\nCODE:\n```\npip --version\n```\n\nLANGUAGE: doscon\nCODE:\n```\npip3 --version\n```\n\nLANGUAGE: doscon\nCODE:\n```\npip3.9 --version\n```\n\n----------------------------------------\n\nTITLE: Pixelate Filter Configuration\nDESCRIPTION: This code snippet shows an example of how to configure the 'pixelate' filter in GMC. It sets the filter to pixelate.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/window-filters.md#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n    [filter]\n    filter=\"pixelate\"\n```\n\n----------------------------------------\n\nTITLE: Assert Raises Exception with Regex - Python\nDESCRIPTION: Asserts that an exception of the expected type is raised and its message matches the given regular expression. The `expected_exception` parameter specifies the exception class, and `expected_regex` is the regular expression to match against the error message.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n`assertRaisesRegex(expected_exception, expected_regex, *args, **kwargs)`\n```\n\n----------------------------------------\n\nTITLE: Play Random Event (Python)\nDESCRIPTION: This method triggers the playback of a random event based on the provided configuration settings. It selects and plays a random event from a list specified in the configuration.  `settings` defines what will be chosen, `context` provides relevant background, `calling_context` determines where the call came from, and `priority` influences scheduling.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/random_event_player.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nplay(settings, context, calling_context, priority=0, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Cloning MPF-MC Repository with Git\nDESCRIPTION: This command clones the MPF-MC repository from GitHub, including its submodules. The `--recursive` flag ensures that submodules required for the media controller are also cloned. This provides the complete source code for the MPF-MC.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/setup.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone --recursive https://github.com/missionpinball/mpf-mc.git\n```\n\n----------------------------------------\n\nTITLE: Text Widget Multiline Text YAML Configuration\nDESCRIPTION: This code snippet demonstrates how to configure multiline text in a text widget using newline characters (`\\n`) within a quoted string.  Without the quotes, the backslash is treated as a printing character.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/text/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntext: \"Multiple\\nlines\"\n```\n\n----------------------------------------\n\nTITLE: Installing MPF in Editable Mode with pip\nDESCRIPTION: This command installs MPF in editable mode, allowing developers to modify the code directly within the cloned repository. Changes made will be immediately reflected without needing to reinstall. Requires pip and being in the MPF repo directory.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/about/contributing_to_mpf.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -e .\n```\n\n----------------------------------------\n\nTITLE: Running VirtualBox Guest Additions Installer\nDESCRIPTION: This snippet executes the VirtualBox Guest Additions installer from the mounted CD image. The `--nox11` flag is used to prevent the installer from trying to start an X server, which may not be available in all environments. This allows for a headless installation of the Guest Additions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncd /mnt/cdrom\nsudo sh ./VBoxLinuxAdditions.run --nox11\n```\n\n----------------------------------------\n\nTITLE: Configuring Hit Cousin It and Mamushka achievements\nDESCRIPTION: This snippet shows the configuration for the 'hit_cousin_it' and 'mamushka' achievements. These achievements are configured differently than the other mansion awards in that they do NOT have enable events. This configuration ensures that they are enabled at the start of the game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/TAF_mansion_awards.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: mansion_awards\nachievements:\n  hit_cousin_it:\n    show_tokens:\n      lights: hit_cousin_it\n    show_when_selected: flash\n    show_when_completed: on\n    events_when_started: award_hit_cousin_it  # starts hit_cousin_it mode\n    complete_events: award_hit_cousin_it\n    reset_events: reset_mansion\n  mamushka:\n    show_tokens:\n      lights: mamushka\n    show_when_selected: flash\n    show_when_completed: on\n    events_when_started: award_mamushka   # starts mamushka mode\n    complete_events: award_mamushka\n    reset_events: reset_mansion\n```\n\n----------------------------------------\n\nTITLE: Event Assertion With Args in MPF Test\nDESCRIPTION: This method asserts that a specific event was called with certain keyword arguments.  It checks if the event was called with the expected parameter names and values. The event must be mocked via `self.mock_event()` first.  `event_name` is the name of the event to check, and `**kwargs` represents the keyword arguments to check.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nassertEventCalledWith(event_name, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of get_enable_plugins() in Python\nDESCRIPTION: This snippet demonstrates how to override the `get_enable_plugins()` method in a test class to enable loading MPF plugins during testing. Enabling plugins allows for testing components that depend on plugin functionality. The method should return a boolean value: `True` to enable plugins, `False` otherwise.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef get_enable_plugins(self):\n  return True\n```\n\n----------------------------------------\n\nTITLE: Reading Gen2 Input Response (OPP)\nDESCRIPTION: Reads switch changes from the Gen2 OPP hardware. This method processes the received message and updates the internal representation of switch states accordingly. The message relates to a specific chain, identified by its serial number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nread_gen2_inp_resp(chain_serial, msg)\n```\n\n----------------------------------------\n\nTITLE: Example MPF Version Output\nDESCRIPTION: Illustrates the expected output when running `mpf --version`. The version number will vary based on the installed version of MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/xubuntu.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nusername@host:~$ mpf --version\nMPF v0.33.13\n```\n\n----------------------------------------\n\nTITLE: Updating DMD Data (MPF)\nDESCRIPTION: Describes the `update` method used to send data to the DMD. The method accepts byte data as input and sends it to the physical DMD for display.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/dmds.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef update(data: bytes):\n    # Update data on the dmd.\n    # Parameters:\n    # data – bytes to send\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Burst Switches as Local Inputs (P3-ROC)\nDESCRIPTION: This snippet shows how to configure burst switches as local inputs on a P3-ROC. To use burst switches as local inputs, set DIP switch 2 to `on` on the P3-Roc.  You can then configure the `number` to `direct-n` where n is the local input number (0-63). Minimum Firmware version 2.6 is required.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/switches_p3_roc.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  local_switch0:\n    number: direct-0       # local input 0\n  local_switch20:\n    number: direct-20      # local input 20\n```\n\n----------------------------------------\n\nTITLE: Displaying MPF Version via Command Line\nDESCRIPTION: This command allows you to display the version of MPF installed. By adding the `--version` option to the mpf command, the program will output its version number to the console. This is useful for determining which version of MPF is currently running.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/versions/understanding.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmpf --version\n```\n\n----------------------------------------\n\nTITLE: Starting OPP Polling\nDESCRIPTION: Starts the polling process and listening for commands from the OPP hardware. This method initiates the continuous monitoring of switch states and the processing of incoming messages.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nstart()\n```\n\n----------------------------------------\n\nTITLE: Event Assertion in MPF Test\nDESCRIPTION: This method asserts that a specific event was called during the test.  Optionally, it can check if the event was called a specific number of times. The event needs to be mocked first using `self.mock_event()`.  `event_name` is the name of the event to check, and `times` specifies the expected number of times the event was called.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nassertEventCalled(event_name, times=None)\n```\n\n----------------------------------------\n\nTITLE: MPF Ball Starting Test Sequence (YAML)\nDESCRIPTION: This YAML snippet defines a test sequence for the ball starting process in MPF. It starts the game, simulates pressing the left and right launch buttons, and then asserts that there is one available ball on the playfield.  The commands are intended to be executed in the provided order, validating correct game flow and ball handling. The test utilizes MPF test framework commands like `start_game`, `hit_and_release_switch`, and `assert_available_balls_on_playfield`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/dual_launch.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n##! test\n#! start_game\n#! assert_available_balls_on_playfield 0\n#! hit_and_release_switch s_left_launch_button\n#! hit_and_release_switch s_right_launch_button\n#! assert_available_balls_on_playfield 1\n```\n\n----------------------------------------\n\nTITLE: Sending Asynchronous Command\nDESCRIPTION: Sends a command to a specific node on the Spike platform without waiting for a response. This allows for asynchronous communication with the hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nsend_cmd_async(node, cmd, data)\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub\nDESCRIPTION: This command pushes the local Git branch to the remote GitHub repository, making the changes available for review and merging.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/about/contributing_to_mpf.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin your_feature_name\n```\n\n----------------------------------------\n\nTITLE: Tilting the Ball\nDESCRIPTION: Causes the ball to tilt. This posts an event called tilt, sets the game mode's tilted attribute to True, disables the flippers and autofire devices, ends the current ball, and waits for all the balls to drain. This is the main function for handling a tilt event in the game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/tilt.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ntilt(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Configure Snux Options for Diagnostic LED (YAML)\nDESCRIPTION: This snippet configures the Snux-specific options, particularly the diagnostic LED driver. It maps driver `c_diag_led_driver` (driver 24) to the \"diag\" LED on the board. The LED's behavior indicates the connection status and operational state of MPF. Default hold power is also set for the driver.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/snux.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  c_diag_led_driver:\n    number: c24\n    default_hold_power: 1.0\n\nsnux:\n  diag_led_driver: c_diag_led_driver\n```\n\n----------------------------------------\n\nTITLE: Reduce OPP Polling Rate in MPF Config\nDESCRIPTION: This configuration snippet adjusts the polling rate of the OPP platform to address potential communication issues. By setting `poll_hz`, the frequency at which MPF polls the OPP boards can be reduced. This can prevent issues if the boards cannot respond fast enough, though setting it too low may result in missed switch hits.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/opp/troubleshooting.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nopp:\n  ports: COM7\n  poll_hz: 50    # defaults to 100\n```\n\n----------------------------------------\n\nTITLE: Processing Gen2 Configuration Response (OPP)\nDESCRIPTION: Processes a Gen2 configuration response received from the OPP hardware. This method parses the received message and performs any necessary actions based on its content. The message relates to a specific chain, identified by its serial number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nget_gen2_cfg_resp(chain_serial, msg)\n```\n\n----------------------------------------\n\nTITLE: Using display_lights in a show (YAML)\nDESCRIPTION: This code snippet demonstrates how to use the `display_lights` feature within a show to map a display to lights. It uses YAML format to define a show step that maps the `your_source_display` display to all lights using the `lights: \"*\"` configuration. The display named `your_source_display` must already be defined.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/display_light_player.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: test_show\n- display_lights:\n    your_source_display:     # use any display defined in your machine\n      lights: \"*\"            # map all lights. you can also use a tag\n```\n\n----------------------------------------\n\nTITLE: Accessing Ball Routings in MPF\nDESCRIPTION: This snippet shows how to access ball_routings in your machine via `self.machine.ball_routings`. You can access a specific ball_routing by its name (e.g., 'foo') using either dot notation or dictionary notation.  You can also get devices by tag or hardware number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/ball_routings.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.ball_routings.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.ball_routings['foo']\n```\n\n----------------------------------------\n\nTITLE: Installing Kivy after Virtualenv Setup\nDESCRIPTION: These commands uninstall and reinstall Kivy within the virtual environment. This resolves potential ambiguous library errors, specifically on macOS. The `--no-binary :all:` flag ensures that Kivy is installed from source, avoiding pre-built binaries that might cause conflicts.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/setup.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\npip uninstall kivy\n```\n\nLANGUAGE: console\nCODE:\n```\npip install kivy --no-binary :all:\n```\n\n----------------------------------------\n\nTITLE: Accessing the smart_virtual platform in MPF (Python)\nDESCRIPTION: This code shows how to access the `smart_virtual` hardware platform instance in MPF using the `self.machine.hardware_platforms` dictionary.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/smart_virtual.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['smart_virtual']\n```\n\n----------------------------------------\n\nTITLE: Comparing Unordered Sequences with assertCountEqual() in Python\nDESCRIPTION: The `assertCountEqual()` method asserts that two sequences contain the same elements, regardless of their order. It uses the `Counter` class to compare the counts of each element. This assertion is useful for testing sets of items where order is not important.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n[0, 1, 1] and [1, 0, 1] compare equal.\n[0, 0, 1] and [0, 1] compare unequal.\n```\n\n----------------------------------------\n\nTITLE: Number as Float (2 Decimals) - Python\nDESCRIPTION: Demonstrates formatting a number as a float with 2 decimal places, padded to a total width of 5 characters, using Python's format string syntax. The example variable `variable` is assumed to have a value of 1337.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/text_templates.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n{variable:5.2f}\n```\n\nLANGUAGE: text\nCODE:\n```\n\" 1337.00\"\n```\n\n----------------------------------------\n\nTITLE: Show Player Configuration Example YAML\nDESCRIPTION: This YAML snippet illustrates the correct structure for `show_tokens` within a `show_player` configuration in MPF. `show_tokens` is a dictionary where keys (`dict_key1`, `dict_key2`) are associated with corresponding values (`dict_value1`, `dict_value2`). This configuration is used to define how shows are played based on player events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-ConfigValidator-12.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  some_event:\n    your_show_name:\n      show_tokens:\n        dict_key1: \"dict_value1\"\n        dict_key2: \"dict_value2\"\n```\n\n----------------------------------------\n\nTITLE: Accessing PlatformController in MPF (Python)\nDESCRIPTION: Shows how to access the PlatformController instance within the MPF environment.  The PlatformController is a singleton and accessible through the machine object.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/platform_controller.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.platform_controller\n```\n\n----------------------------------------\n\nTITLE: Accessing Accruals in MPF using Python\nDESCRIPTION: Demonstrates how to access an Accrual device within the Mission Pinball Framework (MPF) using Python code. The `self.machine.accruals` collection is used to retrieve the Accrual device by its name. This provides a way to interact with and control the Accrual within MPF game logic.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/accruals.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.accruals.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.accruals['foo']\n```\n\n----------------------------------------\n\nTITLE: Example Enable Solenoid at Full Power Command (0x15)\nDESCRIPTION: Example of enabling solenoid 25 at full power.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_25\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tExample\tComment\n0\t1\t21\tCommand 21 - Enable Solenoid at Full Power\n1\t1\t25\tEnable solenoid 25 at full power\n```\n\n----------------------------------------\n\nTITLE: Configuring Displays and Window for LCD - YAML\nDESCRIPTION: This snippet shows the complete configuration for setting up an LCD display window with MPF-MC. It defines the display size within the `displays` section and sets window properties such as height, width, title, and fullscreen mode within the `window` section.  `source_display` links the display to the window.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/lcd.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  window:\n    height: 600\n    width: 800\nwindow:\n  height: 600\n  width: 800\n  title: Mission Pinball Framework\n  resizable: true\n  fullscreen: false\n  borderless: false\n  exit_on_escape: true\n  source_display: window\n```\n\n----------------------------------------\n\nTITLE: Playfield subscribe_attribute() Method\nDESCRIPTION: Describes the `subscribe_attribute()` method, which subscribes to an attribute.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsubscribe_attribute(item, machine)\n```\n\n----------------------------------------\n\nTITLE: Event Not Called Assertion in MPF\nDESCRIPTION: This method asserts that a specific event was *not* called during the test. It's used to verify that certain events are not triggered unexpectedly. The event must be mocked via `self.mock_event()` first. `event_name` is the name of the event to check.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nassertEventNotCalled(event_name)\n```\n\n----------------------------------------\n\nTITLE: Drain One Ball - Python\nDESCRIPTION: This function simulates the draining of a single ball from the machine.  It does not require any ball devices to be configured.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndrain_one_ball()\n```\n\n----------------------------------------\n\nTITLE: Format Log Line (Python)\nDESCRIPTION: Formats a log line with a log link and context information for better debugging and traceability.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nformat_log_line(msg, context, error_no) → str\n\nReturn a formatted log line with log link and context.\n```\n\n----------------------------------------\n\nTITLE: Validate Machine Config Section (Python)\nDESCRIPTION: Validates a specific section of the machine configuration to ensure it adheres to the expected schema and constraints.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nvalidate_machine_config_section(section: str) → None\n\nValidate a config section.\n```\n\n----------------------------------------\n\nTITLE: Playfield format_log_line() Method\nDESCRIPTION: Describes the `format_log_line()` method, which returns a formatted log line with log link and context.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nformat_log_line(msg, context, error_no) → str\n```\n\n----------------------------------------\n\nTITLE: Configuring a DMD\nDESCRIPTION: Configures a DMD (Dot Matrix Display) on the Spike platform. This involves setting up the DMD for display purposes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nconfigure_dmd()\n```\n\n----------------------------------------\n\nTITLE: Accessing extra_ball_groups in code - Python\nDESCRIPTION: Shows how to access `extra_ball_groups` in your machine configuration using `self.machine.extra_ball_groups`.  You can access them by name or as a dictionary.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.extra_ball_groups.foo\nself.machine.extra_ball_groups['foo']\n```\n\n----------------------------------------\n\nTITLE: Accessing Trinamics Step Rocker Platform - Python\nDESCRIPTION: This snippet demonstrates how to access the `trinamics_steprocker` platform instance within the MPF environment. The platform is stored in the `self.machine.hardware_platforms` dictionary, allowing access via its key.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/trinamics_steprocker.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['trinamics_steprocker']\n```\n\n----------------------------------------\n\nTITLE: Accessing MMA8451 Platform via Code\nDESCRIPTION: Shows how to access the MMA8451 platform instance via the `self.machine.hardware_platforms` dictionary within the Mission Pinball Framework.  This allows you to call methods and access attributes of the platform.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/mma8451.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['mma8451']\n```\n\n----------------------------------------\n\nTITLE: Extending GMCServer Class in GDScript\nDESCRIPTION: This GDScript code extends the GMCServer class and overrides the `on_connect` virtual method and extends the `set_machine_var` method. The `on_connect` method prints a message when a connection is established, and the `set_machine_var` method calls the parent class's implementation using `super()` before printing a message indicating that a machine variable has been updated.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/advanced-custom-code.md#_snippet_0\n\nLANGUAGE: GDScript\nCODE:\n```\n# /custom_code/my_custom_bcp.gd\n\nextends GMCServer\n\n# Override a virtual method\nfunc on_connect():\n  print(\"Connection established, running custom startup flow.\")\n\n# Extend an existing method by calling super() and adding custom logic\nfunc set_machine_var(name: String, value) -> void:\n  super()\n  print(\"Machine var %s updated to value: %s\" % [name, value])\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.award_lit() - Python\nDESCRIPTION: Award a lit extra ball. If the player does not have any lit extra balls, this method does nothing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\naward_lit()\n```\n\n----------------------------------------\n\nTITLE: Get Options - Python\nDESCRIPTION: This function retrieves options for the machine controller. These options configure the behavior of the MPF instance being tested.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nget_options()\n```\n\n----------------------------------------\n\nTITLE: Register Boot Hold (Python)\nDESCRIPTION: Registers a boot hold, preventing the machine from fully booting until the hold is cleared.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nregister_boot_hold(hold: str) → None\n\nRegister a boot hold.\n```\n\n----------------------------------------\n\nTITLE: Accessing the Service Mode\nDESCRIPTION: Shows how to access the service mode instance via `self.machine.modes.service` from any part of the machine code.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/service.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.modes.service\n```\n\n----------------------------------------\n\nTITLE: Removing a Switch Handler by Key (Python)\nDESCRIPTION: Removes a switch handler using the key returned by `add_switch_handler`. The parameter is the `switch_handler` key.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nremove_switch_handler_by_key(switch_handler: mpf.core.switch_controller.SwitchHandler)\n```\n\n----------------------------------------\n\nTITLE: Accessing Light Strips in MPF (Python)\nDESCRIPTION: This code snippet demonstrates how to access a light strip named \"foo\" within the MPF framework using the `self.machine.light_stripes` device collection. It shows access via attribute and dictionary lookup.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/light_stripes.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.light_stripes.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.light_stripes['foo']\n```\n\n----------------------------------------\n\nTITLE: Stop the Current Game - Python\nDESCRIPTION: Stops the currently running game in the test environment. This method asserts that a game is running, calls the game mode's `end_game()` method, and then asserts that the game has successfully stopped.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nself.stop_game()\n```\n\n----------------------------------------\n\nTITLE: Updating Categories Configuration (Old way)\nDESCRIPTION: This snippet shows the old way of defining `categories` using `!!omap` in MPF config version 5. It illustrates how to define categories like `score` containing a list of high score entries when using `!!omap`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/config_v6.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:  !!omap\n score:\n  - GRAND CHAMPION\n  - HIGH SCORE 1\n  - HIGH SCORE 2\n```\n\n----------------------------------------\n\nTITLE: Accessing Hardware Platforms in MPF (Python)\nDESCRIPTION: This snippet demonstrates how to access hardware platform instances within the MPF machine object. The hardware platforms are stored in a dictionary called `hardware_platforms`, accessible via `self.machine.hardware_platforms[platform_name]`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/api_reference_hardware_platforms.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['fast']\n```\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['p_roc']\n```\n\n----------------------------------------\n\nTITLE: Querying Switch Inactivity (Python)\nDESCRIPTION: Queries whether a switch is currently inactive. The function takes the `switch` object to check, and an optional `ms` parameter specifying the minimum duration the switch has been inactive. Returns `True` if the switch is inactive, `False` otherwise.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nis_inactive(switch, ms=None)\n```\n\n----------------------------------------\n\nTITLE: Window and Displays Configuration in YAML\nDESCRIPTION: This snippet defines a window named \"CupheadWindow\" with specified width, height, and other properties. It also defines four displays (insert, upper, middle, and lower) with their respective widths and heights, which can be used within the defined window to show different content.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/slides/picture_in_picture.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwindow:\n  width: 1080\n  height: 1300\n  title: CupheadWindow\n  resizable: true\n  fullscreen: false\n  borderless: true\n  exit_on_escape: true\n  top: 0\n  left: 0\n\ndisplays:\n  insert:\n    width: 100\n    height: 100\n  upper:\n    width: 1040\n    height: 280\n  middle:\n    width: 1040\n    height: 580\n  lower:\n    width: 1040\n    height: 320\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator in Event Condition (YAML)\nDESCRIPTION: Illustrates how to use the 'or' operator in an event condition to trigger an action when either of two conditions is true. In this example, the slide is shown if the ball is 1 or 3.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/events/overview/conditional.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n#! slides:\n#!   special_slide: []\nslide_player:\n  ball_started{ball==1 or ball==3}: special_slide\n```\n\n----------------------------------------\n\nTITLE: Switch Configuration Example YAML\nDESCRIPTION: This YAML snippet demonstrates a valid configuration for a switch in MPF.  It defines the switch name (`s_flipper_left`) and its attributes (number and label). The `switches` key maps to a dictionary of switch configurations.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-DeviceManager-3.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_flipper_left:\n    number: 1\n    label: My Left Flipper\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple LEDs with PKONE\nDESCRIPTION: This snippet shows how to configure simple LEDs when using PKONE Lightshow boards. The `number` setting specifies the Lightshow board's Address ID and the simple LED output number. The `subtype` is set to `simple` to distinguish it from WS281X RGB LEDs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pkone/lights.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  special_light:\n    number: 0-1    # Lightshow board with Address ID 0, simple LED 1\n    subtype: simple\n  some_other_light:\n    number: 2-10    # Lightshow board with Address ID 2, simple LED 10\n    subtype: simple\n```\n\n----------------------------------------\n\nTITLE: Marking the MPF SPIKE bridge as executable\nDESCRIPTION: This command uses `chmod` to mark the MPF SPIKE bridge binary as executable. This is required for the system to execute the bridge program.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/mpf-spike-bridge.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x bridge\n```\n\n----------------------------------------\n\nTITLE: Sequence Comparison Assertion\nDESCRIPTION: Asserts that two sequences contain the same elements, regardless of order. It checks that each element occurs the same number of times in both sequences, using `Counter` from the `collections` module. The parameters `first` and `second` are the sequences being compared.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfMachineTestCase.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nself.assertEqual(Counter(list(first)),\nCounter(list(second)))\n```\n\n----------------------------------------\n\nTITLE: Configuring a Red-Only LED Channel in lights section YAML\nDESCRIPTION: This snippet configures a light named \"my_red_only_insert\" with only a red channel. The red channel is connected to board 8, channel 0 on the PD-LED board.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/leds.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlights:\n  my_red_only_insert:\n    channels:\n      red:\n        - number: 8-0       # board 8 and first channel\n```\n\n----------------------------------------\n\nTITLE: Set Number of Balls Known - Python\nDESCRIPTION: Sets the ball controller's `num_balls_known` attribute. This is necessary for tests without ball devices, allowing the ball controller to simulate a specific number of balls.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nself.set_num_balls_known(3)\n```\n\n----------------------------------------\n\nTITLE: Running MPF with MPF-MC in DOS\nDESCRIPTION: This command launches MPF with the Media Controller (MPF-MC), typically used for testing the MPF-MC installation. It should display the loading screen and wait for a connection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/windows.md#_snippet_6\n\nLANGUAGE: doscon\nCODE:\n```\nmpf mc\n```\n\n----------------------------------------\n\nTITLE: Post Event - Python\nDESCRIPTION: This function posts an MPF event and optionally advances the time. Requires event_name as string.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\npost_event(event_name, run_time=0)\n```\n\n----------------------------------------\n\nTITLE: Accessing Autofires in Code (MPF)\nDESCRIPTION: This shows how to access the autofire devices in your machine's code using the `self.machine.autofires` collection. You can access them by name as an attribute or dictionary key.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/autofires.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.autofires.foo\nself.machine.autofires['foo']\n```\n\n----------------------------------------\n\nTITLE: Getting All Settings (Python)\nDESCRIPTION: Illustrates how to retrieve a list of all available settings. The method returns a list of `SettingEntry` objects.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/settings.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nget_settings() → List[mpf.core.settings_controller.SettingEntry]\n```\n\n----------------------------------------\n\nTITLE: Adding line to /etc/inittab to allow USB login\nDESCRIPTION: This snippet shows how to add a line to /etc/inittab to enable login via a USB serial adapter. This is useful if the board doesn't have DBGU populated. It uses `ttyUSB0` for the USB serial port.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/mpf-spike-bridge.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nUSB0:2345:respawn:/sbin/getty 115200 ttyUSB0 -n -l /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Install smbus2_asyncio\nDESCRIPTION: Installs the `smbus2_asyncio` Python package using pip. This is a necessary dependency for controlling I2C devices with MPF on Linux.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/smbus.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install smbus2_asyncio\n```\n\n----------------------------------------\n\nTITLE: Widget Player Configuration (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure a widget player to trigger a custom method when the `player_score` event occurs. The `action: method` option specifies that the `my_method` of the *score_widget.gd* script will be called.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/mpf-widget.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_player:\n    player_score:\n        score_widget:\n            action: method\n            method: my_method\n```\n\n----------------------------------------\n\nTITLE: Conditional Sound Inclusion in Sound Pool\nDESCRIPTION: This snippet shows how to add conditions to sounds in a pool.  A sound is only included if its condition evaluates to true at playback time. Conditions are formatted similarly to conditional events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/sound/variations.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsound_pools:\n  triangle:\n    type: random\n    track: sfx\n    sounds:\n      - triangle_01\n      - triangle_02{current_player.triangles_found>1}|2\n      - triangle_03{current_player.triangles_found>2}\n      - triangle_04{device.achievements.supertriangle.state==\"complete\"}|5\n```\n\n----------------------------------------\n\nTITLE: Read from SPI\nDESCRIPTION: Reads data from the SPI interface. The `bits` parameter specifies the number of bits to read.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/spi_bit_bang.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nread_spi(bits)\n```\n\n----------------------------------------\n\nTITLE: Get Stepper Config Section\nDESCRIPTION: Returns the name of the configuration validator for the stepper.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/pololu_tic.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclassmethod get_stepper_config_section()\n```\n\n----------------------------------------\n\nTITLE: Playfield balls Attribute\nDESCRIPTION: Describes the `balls` attribute, which returns the number of balls currently on the playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nballs\n```\n\n----------------------------------------\n\nTITLE: Parsing Inventory Response (OPP)\nDESCRIPTION: Parses an inventory response received from the OPP hardware. This method extracts information about the hardware components connected to the OPP system, such as the types and numbers of boards present. The message relates to a specific chain, identified by its serial number.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ninv_resp(chain_serial, msg)\n```\n\n----------------------------------------\n\nTITLE: Cloning MPF-GMC Repository\nDESCRIPTION: This command clones the MPF-GMC repository from GitHub to a local machine. It's the first step for the \"Expert Installation\" method, allowing for complete control over the plugin's source code.  The user should first navigate to the directory where they store Git repositories before executing this command.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/installation.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/missionpinball/mpf-gmc\n```\n\n----------------------------------------\n\nTITLE: Switch Debug Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates the correct usage of a boolean value for the `debug` setting within a switch configuration.  The `debug` setting controls the level of detail logged for the switch. It requires the `switches` section to be properly defined in the MPF configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-ConfigValidator-13.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_flipper_left:\n    number: 1\n    debug: true   # we want all the details about this switch in the logs\n```\n\n----------------------------------------\n\nTITLE: Conditional Event for Gadget 'D' Completion (YAML)\nDESCRIPTION: This snippet demonstrates the final case for 'a'. If both 'g1' and 'a' are already complete, it triggers the event for 'd' if 'd' hasn't been triggered yet. This implements the friendly neighbor mechanic by automatically awarding the 'd' gadget when the player hits the 'a' gadget while 'g1' and 'a' are already lit.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: gadget\n#! event_player:\n#!   s_gadget_a_active:\n    - gadget_d_complete{device.accruals.gadget_accrual.value[0]==True and device.accruals.gadget_accrual.value[1]==True and device.accruals.gadget_accrual.value[2]==False}\n```\n\n----------------------------------------\n\nTITLE: Stopping Ball Search\nDESCRIPTION: This code defines the `stop` method, which stops an actively running ball search.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef stop():\n    \"\"\"Stop an actively running ball search.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Advancing time in tests using advance_time_and_run\nDESCRIPTION: This example demonstrates how to advance the test clock by a specified duration using the `advance_time_and_run()` method. This is crucial for simulating time-based events and delays in test scenarios. The method advances time in small steps to process any scheduled events or delays during the specified duration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfBcpTestCase.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.advance_time_and_run(10)\n```\n\n----------------------------------------\n\nTITLE: Configuring GMC to Use Custom Script\nDESCRIPTION: This INI configuration shows how to instruct GMC to use a custom script instead of the core script by configuring it in *gmc.cfg*.  It creates a new section named `[gmc]` and enters a key of the class name you're overriding and a value of the path to your custom script.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/advanced-custom-code.md#_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\n[gmc]\nGMCServer=\"custom_code/my_custom_bcp.gd\"\n```\n\n----------------------------------------\n\nTITLE: Displaying USB Device Info on Linux - Console\nDESCRIPTION: This snippet shows the output of the `dmesg` command on a Linux system after connecting to LISY via USB. It provides information about the connected USB device, including vendor ID, product ID, manufacturer, and the created ttyACM device (e.g., /dev/ttyACM0). This is useful for identifying the correct serial port for the LISY connection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/connection.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndmesg\n\nusb 1-3: new high-speed USB device number 11 using ehci-pci\nusb 1-3: New USB device found, idVendor=0525, idProduct=a4a7\nusb 1-3: New USB device strings: Mfr=1, Product=2, SerialNumber=0\nusb 1-3: Product: Gadget Serial v2.4\nusb 1-3: Manufacturer: Linux 4.4.50+ with 20980000.usb\ncdc_acm 1-3:2.0: ttyACM0: USB ACM device\nusbcore: registered new interface driver cdc_acm\ncdc_acm: USB Abstract Control Model driver for USB modems and ISDN adapters\n```\n\n----------------------------------------\n\nTITLE: Becoming Root User in Debian\nDESCRIPTION: This snippet demonstrates how to become the root user in a Debian terminal session. The `-` flag is crucial for resetting the $PATH environment variable, which is important for certain operations like `usermod` to function correctly.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsu -\n```\n\n----------------------------------------\n\nTITLE: Format Log Line Method (Python)\nDESCRIPTION: This method formats a log line with the log link and context.  It returns a formatted string.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/rgb_dmds.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef format_log_line(msg, context, error_no) -> str:\n    # Return a formatted log line with log link and context.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Getting the Active Event for a Switch (Python)\nDESCRIPTION: Returns the event name that is posted when the specified switch becomes active. The function takes the `switch_name` as input and returns the corresponding event name as a string.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstatic get_active_event_for_switch(switch_name)\n```\n\n----------------------------------------\n\nTITLE: Disabling a Hardware Rule\nDESCRIPTION: Disables a hardware rule associated with a specified switch and coil on the Spike platform. This removes the direct hardware connection between the switch and coil, allowing for software control.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spike.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclear_hw_rule(switch, coil)\n```\n\n----------------------------------------\n\nTITLE: Run MPF MC with multiple config files\nDESCRIPTION: This command runs the MPF Media Controller (MPF MC) and loads multiple configuration files in the specified order. The `-c` option is used with a comma-separated list of config files. In this example, `config/config.yaml` is loaded first, followed by `config/fast.yaml`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/mc.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ mpf mc -c config,fast\n```\n\n----------------------------------------\n\nTITLE: Accessing VirtualPinballPlatform Instance\nDESCRIPTION: Demonstrates how to access the instance of the `VirtualPinballPlatform` class from the `self.machine.hardware_platforms` dictionary within the MPF framework. This allows interaction with the virtual pinball platform's specific functionalities.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/virtual_pinball.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['virtual_pinball']\n```\n\n----------------------------------------\n\nTITLE: Parsing Light Number to Channels (OPP)\nDESCRIPTION: Parses a light number and subtype to determine the corresponding channel(s) on the OPP hardware. This method is used to map a logical light number to the physical output channels on the OPP boards.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nparse_light_number_to_channels(number: str, subtype: str)\n```\n\n----------------------------------------\n\nTITLE: Accessing the Game Mode in Python\nDESCRIPTION: Shows how to access the game mode instance from within MPF code.  The game mode instance is accessible via `self.machine.modes.game`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/game.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.modes.game\n```\n\n----------------------------------------\n\nTITLE: Running MPF and MPF-MC with combined options\nDESCRIPTION: Demonstrates how to run both MPF and MPF-MC using the `mpf both` command, along with example command-line options. It shows how to pass different options to both applications.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/commands/both.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmpf both -v\n```\n\nLANGUAGE: shell\nCODE:\n```\nmpf both -v -V -b\n```\n\n----------------------------------------\n\nTITLE: Start MPF and MPF-MC\nDESCRIPTION: This shell command starts both the Mission Pinball Framework (MPF) and MPF Media Controller (MPF-MC).  MPF handles the game logic and hardware control, while MPF-MC handles the visual and auditory aspects of the game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/apc/connection.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmpf both\n```\n\n----------------------------------------\n\nTITLE: Accessing SMBus2 Platform via Code (Python)\nDESCRIPTION: Shows how to access the SMBus2 platform instance in MPF using the `self.machine.hardware_platforms` dictionary. The SMBus2 platform instance is accessible via the key `'smbus2'`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/smbus2.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['smbus2']\n```\n\n----------------------------------------\n\nTITLE: Configure Drain Switch in Switches Section - YAML\nDESCRIPTION: This snippet configures the drain switch in the `switches:` section of the machine configuration file. The `number` parameter must correspond to the actual switch number connected to the control system. This switch detects when a ball enters the drain.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/classic_single_ball_no_shooter_lane.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_drain:\n    number: 01\n```\n\n----------------------------------------\n\nTITLE: Canceling Ball Search\nDESCRIPTION: This code defines the `cancel_ball_search` method, which cancels the current ball search and marks the ball as missing. It takes optional keyword arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef cancel_ball_search(**kwargs):\n    \"\"\"Cancel the current ball search and mark the ball as missing.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Playfield get_placeholder_value() Method\nDESCRIPTION: Describes the `get_placeholder_value()` method which gets the value of a placeholder.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nget_placeholder_value(item)\n```\n\n----------------------------------------\n\nTITLE: Cloning MPF Repository with Git\nDESCRIPTION: This command clones the main MPF repository from GitHub, including all its submodules. The `--recursive` option ensures that submodules are also initialized and updated during the cloning process. This provides the complete source code for the MPF framework.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/setup.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone --recursive https://github.com/missionpinball/mpf.git\n```\n\n----------------------------------------\n\nTITLE: Setting Pulse, Enable, and Release Rule (Python)\nDESCRIPTION: Adds a rule to pulse and enable a driver when a switch is hit, and then cancels the pulse and enable when the switch is released.  The driver will be pulsed and then held active until the switch is released.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/platform_controller.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nset_pulse_on_hit_and_enable_and_release_rule(enable_switch: mpf.core.platform_controller.SwitchRuleSettings, driver: mpf.core.platform_controller.DriverRuleSettings, pulse_setting: mpf.core.platform_controller.PulseRuleSettings = None, hold_settings: mpf.core.platform_controller.HoldRuleSettings = None) -> mpf.core.platform_controller.HardwareRule\n```\n\n----------------------------------------\n\nTITLE: Export PATH for Pip Executables\nDESCRIPTION: This line adds the `~/.local/bin` directory to the PATH environment variable.  This is where pip typically installs executables, so adding it to the PATH allows users to run those executables directly from the command line without specifying the full path. This addition should be placed at the bottom of the `.bashrc` file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/pine64.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nexport PATH=~/.local/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Getting the Stepper Config Section\nDESCRIPTION: This class method retrieves the configuration section specific to stepper motors controlled by StepStick. This config section is used to define settings and parameters for the stepper motor within the MPF configuration files.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/step_stick.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclassmethod get_stepper_config_section()\n```\n\n----------------------------------------\n\nTITLE: Processing Switch State Change by Name (Python)\nDESCRIPTION: Processes a new switch state change for a switch identified by its name. This method is typically called by the platform driver when a switch changes state. Key parameters include the `name` of the switch, its new `state`, a `logical` flag, and an optional `timestamp`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprocess_switch(name, state, logical=False, timestamp=None)\n```\n\n----------------------------------------\n\nTITLE: Configure Slides in MPF\nDESCRIPTION: This YAML snippet demonstrates how to configure MPF (Mission Pinball Framework) to target specific displays created in Godot, using the `slide_player` configuration. It shows how to assign slides to different displays based on the names given to the `MPFDisplay` nodes in the Godot scene.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/spanning-multiple-monitors.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslide_player:\n    mode_attract_started:\n        attract_main_slide:\n            target: primary\n        attract_mini_slide:\n            target: mini-display\n```\n\n----------------------------------------\n\nTITLE: Accessing Achievement Groups\nDESCRIPTION: Demonstrates how to access achievement groups within the MPF framework using the `self.machine.achievement_groups` collection.  It shows how to access a specific achievement group by name and how to use dictionary-style access. This assumes you're within a mode or machine code context where `self` is defined and the achievement_groups collection exists.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/achievement_groups.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.achievement_groups.foo\nself.machine.achievement_groups['foo']\n```\n\n----------------------------------------\n\nTITLE: Duplicate Handler Log Message\nDESCRIPTION: This console log entry indicates a duplicate handler for the same event with the same priority. This usually happens when event priorities are not explicitly set, leading to unpredictable execution order.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/device_control_events.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nDuplicate handler for class MyDevice on event ball_started with priority 1. Handlers: x\n```\n\n----------------------------------------\n\nTITLE: Invalid Missing Hyphen in Config YAML\nDESCRIPTION: This YAML snippet shows an invalid config show configuration where the hyphen (-) is missing before the `duration` key within a show defined in the main config file. This would also cause the `CFE-show-1` error.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-show-1.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n# INVALID CONFIG SHOW\nshows:\n  flash_red:\n    duration: 1   # hyphen missing here\n    lights:\n      led1: red\n```\n\n----------------------------------------\n\nTITLE: Playfield add_missing_balls() Method\nDESCRIPTION: Describes the `add_missing_balls()` method, which notifies the playfield that it likely received a ball that went missing from another location.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nadd_missing_balls(balls)\n```\n\n----------------------------------------\n\nTITLE: Get Status of Simple Lamp Response (0x0A)\nDESCRIPTION: This is the response to the Get Status of Simple Lamp command (0x0A). It returns a single byte indicating the lamp's status: 0=Off, 1=On, 2=Lamp not existing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_16\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tDescription\n0\t1\t0=Off, 1=On, 2=Lamp not existing\n```\n\n----------------------------------------\n\nTITLE: Configure Switch on System11\nDESCRIPTION: Configures a switch on the System11 overlay platform. This method takes a switch number, a switch configuration object, and platform-specific configuration data.  It allows the MPF to interface and receive input from the physical switch.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/system11.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef configure_switch(number: str, config: mpf.core.platform.SwitchConfig, platform_config: dict):\n    Configure switch on system11 overlay.\n```\n\n----------------------------------------\n\nTITLE: Find MPF Process IDs (PIDs) using ps aux\nDESCRIPTION: This command uses `ps aux` and `grep mpf` to list all processes related to MPF and find their corresponding PIDs. The output shows the user, PID, CPU usage, memory usage, command, and start time of the processes. This is the first step in attaching gdb to a specific MPF process.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/debugging_segfaults.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ps aux | grep mpf\njan       9678 12.4  0.3 1082068 127304 pts/2  SNl+ 23:17   0:06 /usr/bin/python3 /usr/local/bin/mpf mc\njan       9760 37.0  0.1 571368 56660 pts/3    Sl+  23:17   0:01 /usr/bin/python3 /usr/local/bin/mpf game -X\n```\n\n----------------------------------------\n\nTITLE: Example Log Output: Switch State Change\nDESCRIPTION: This console output shows a switch state change event in the MPF log file. It indicates that the `trough1` switch has transitioned to the active state (`State:1`). This type of log entry helps diagnose whether a switch is being properly activated by a ball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/8_plunger.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n2014-10-27 20:05:29,891 : SwitchController : <<<<< switch: trough1, State:1 >>>>>\n```\n\n----------------------------------------\n\nTITLE: Configure Sound System Audio Buses with INI\nDESCRIPTION: This code snippet demonstrates how to configure the sound system's audio buses using the `[sound_system]` section in the `gmc.cfg` file. This includes setting the playback type and simultaneous sound limits for each bus.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/gmc-cfg.md#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[sound_system]\nmusic={\"type\": \"solo\"}\neffects={\"type\": \"simultaneous\", \"simultaneous_sounds\": 3, \"default\": true}\nvoice={\"type\": \"sequential\"}\n```\n\n----------------------------------------\n\nTITLE: Stopping a Game in MPF (Python)\nDESCRIPTION: This snippet demonstrates stopping the currently running game using the `stop_game` method. It calls the game mode's `end_game()` method and includes assertions to verify that the game has stopped successfully. This is crucial for validating game termination logic in tests.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nself.stop_game()\n```\n\n----------------------------------------\n\nTITLE: Add Window Configuration (YAML)\nDESCRIPTION: This snippet configures the settings for the on-screen display window in the machine-wide config file. It sets the width, height, and title of the window to be displayed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/segment_display_emulator/how_to.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwindow:\n  width: 600\n  height: 200\n  title: Mission Pinball Framework\n```\n\n----------------------------------------\n\nTITLE: Configure driver in smart_virtual (Python)\nDESCRIPTION: Configures a driver with the specified configuration, number, and platform settings. This allows for simulation of driver behavior within the smart_virtual environment.  `config` is a DriverConfig object, `number` is a string, and `platform_settings` is a dictionary.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/smart_virtual.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconfigure_driver(config: mpf.core.platform.DriverConfig, number: str, platform_settings: dict)\n```\n\n----------------------------------------\n\nTITLE: Adding a Mode Event Handler\nDESCRIPTION: Demonstrates how to register an event handler that is automatically removed when the mode stops using `add_mode_event_handler`. This method is similar to the Event Manager’s `add_handler()` method.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/match.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nadd_mode_event_handler(event: str, handler: Callable, priority: int = 0, **kwargs) → mpf.core.events.EventHandlerKey\n```\n\n----------------------------------------\n\nTITLE: Install Pinproc without User Flag - console\nDESCRIPTION: This command installs the `pinproc` Python module for P-ROC/P3-ROC boards. This is the original installation step without user flag.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/index.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\ncd pypinproc\nsudo python3 setup.py install\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt6\nDESCRIPTION: This snippet installs the PyQt6 library using apt-get.  PyQt6 is a set of Python bindings for the Qt application framework, and it may already be installed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nsudo apt-get install python3-pyqt6\n```\n\n----------------------------------------\n\nTITLE: Adding a mode event handler\nDESCRIPTION: This snippet shows how to register an event handler that will be automatically removed when the mode stops. It's similar to the Event Manager's add_handler() method but automatically unregisters the handlers when the mode ends.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/high_score.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nadd_mode_event_handler(event: str, handler: Callable, priority: int = 0, **kwargs) → mpf.core.events.EventHandlerKey\n```\n\n----------------------------------------\n\nTITLE: Fade Modern Light (0x0d) Command Structure\nDESCRIPTION: This snippet defines the structure of the 'Fade Modern Light' command (0x0d). It specifies the byte-level layout of the command payload, including the light index, fade time, number of lights to fade, and brightness values for each light. This command allows for smooth transitions in light brightness.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_28\n\nLANGUAGE: None\nCODE:\n```\nByte           Length         Description\n-------------- -------------- ------------------------------------------\n1              1              Index `m` of the first light\n\n2              2              Fade time in ms (0-65535). Can be 0 to set\n                               the brightness instantly.\n\n4              1              Number `n` of lights to fade. Can be 1 to\n                               set or fade a single light.\n\n5              `n`            One byte of brightness per light (0-255).\n                               `n` bytes in total\n```\n\n----------------------------------------\n\nTITLE: Widget Positioning in Shows YAML\nDESCRIPTION: This snippet shows how to configure widget positioning within a show using `x` and `y` settings. It positions a text widget at a specific location relative to the right and top edges of the display. The widget definition resides in the machine config.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/positioning.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# in your machine config\nwidgets:\n  my_widget:\n    - type: text\n      text: \"MY WIDGET\"\n#! show_player:\n#!   start_show: test_show\n##! show: test_show\n# in your show\n- duration: 1\n  widgets:\n    my_widget:\n      widget_settings:\n        x: right-15.4%\n        y: top\n##! test\n#! post start_show\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"MY WIDGET\"\n```\n\n----------------------------------------\n\nTITLE: Registering Ball Search Callback\nDESCRIPTION: This code defines the `register` method, which registers a callback for sequential ball search. Callbacks are called by priority. Ball search only waits if the callback returns true. It accepts priority, callback, name, and restore_callback as parameters.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef register(priority, callback, name, *, restore_callback=None):\n    \"\"\"Register a callback for sequential ball search.\n\n    Callbacks are called by priority. Ball search only waits if the callback returns true.\n\n    Parameters:\n\n    * **priority** – priority of this callback in the ball search procedure\n    * **callback** – callback to call. ball search will wait before the next callback, if it returns true\n    * **name** – string name which is used for debugging & the logs\n    * **restore_callback** – optional callback to restore state of the device after ball search ended\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Checking if vboxguest module is running\nDESCRIPTION: This command checks if the vboxguest kernel module is loaded and running. The lsmod command lists loaded kernel modules, and grep filters the output for lines containing \"vboxguest\". If the module is running, a line containing \"vboxguest\" will be printed.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nlsmod | grep vboxguest\n```\n\n----------------------------------------\n\nTITLE: Get Platform - Python\nDESCRIPTION: This method forces the test class to use a specific platform.  If not included, the platform defaults to 'virtual'. Override this to use a different platform, such as 'smart_virtual'.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nget_platform()\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_platform(self):\n    return 'smart_virtual'\n```\n\n----------------------------------------\n\nTITLE: Defining Shows for Magnet States in MPF (YAML)\nDESCRIPTION: These shows define sequences of events to control the Stern Magnet Processor Board (MPB) to set different magnet states: OFF, DETECT, GRAB, and HOLD. Each show consists of timed events to pulse the Strobe pin with specific settings for D6 and D7. The timings are important for the MPB to correctly transition between states.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/magnets/stern_magnet_pcb.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nshows:\n  magnet_state_off:\n    - time: 0\n      events:\n        - magnet_d6_off\n        - magnet_d7_off\n    - time: 20ms\n      events:\n        - magnet_strobe_on\n    - time: 30ms\n      events:\n        - magnet_strobe_off\n    - time: 50ms\n      events:\n        - magnet_d6_off\n        - magnet_d7_off\n  magnet_state_detect:\n    - time: 0\n      events:\n        - magnet_d6_on\n        - magnet_d7_on\n    - time: 20ms\n      events:\n        - magnet_strobe_on\n    - time: 30ms\n      events:\n        - magnet_strobe_off\n    - time: 50ms\n      events:\n        - magnet_d6_off\n        - magnet_d7_off\n  magnet_state_grab:\n    - time: 0\n      events:\n        - magnet_d6_on\n        - magnet_d7_off\n    - time: 10ms\n      events:\n        - magnet_strobe_on\n    - time: 20ms\n      events:\n        - magnet_strobe_off\n    - time: 50ms\n      events:\n        - magnet_d6_off\n        - magnet_d7_off\n  magnet_state_hold:\n    - time: 0\n      events:\n        - magnet_d6_off\n        - magnet_d7_on\n    - time: 20ms\n      events:\n        - magnet_strobe_on\n    - time: 50ms\n      events:\n        - magnet_strobe_off\n    - time: 70ms\n      events:\n        - magnet_d6_off\n        - magnet_d7_off\n```\n\n----------------------------------------\n\nTITLE: Assert True Expression - Python\nDESCRIPTION: This assertion verifies that the given expression evaluates to True. It is a basic assertion used for simple boolean checks.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nassertTrue(expr, msg=None)\n```\n\n----------------------------------------\n\nTITLE: Godot Script for Custom Slide Behavior\nDESCRIPTION: This GDScript example showcases how to extend the `MPFSlide` class in Godot to create custom methods for slide behavior. It defines an `explode` function that plays an animation named \"explode\" using an `AnimationPlayer` node within the slide scene.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/slides.md#_snippet_1\n\nLANGUAGE: gdscript\nCODE:\n```\n    ## multiball_base_slide.gd\n\n    extends MPFSlide\n\n    func explode(_settings, _kwargs):\n        $AnimationPlayer.play(\"explode\")\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Unrecognized Command Error in MPF on Linux/macOS\nDESCRIPTION: This error means that the system cannot find the 'mpf' executable. This usually indicates an issue with the MPF installation or the system's PATH configuration. Reinstalling MPF or adding MPF to the PATH environment variable may resolve the issue.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/2_creating_a_new_machine.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ mpf\n-bash: mpf: command not found\n```\n\n----------------------------------------\n\nTITLE: Bonus Event Configuration in MPF 0.57\nDESCRIPTION: This snippet demonstrates the bonus event configuration in MPF 0.57, where each bonus item had a unique event. The event includes the number of hits and the score.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/0.80.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncompleted_ramps{hits=3, score=3000}\n```\n\n----------------------------------------\n\nTITLE: Example Invalid Config Section Error in Python\nDESCRIPTION: This Python error message illustrates a `ValueError` encountered when MPF detects an invalid configuration section (e.g., \"switchs\" instead of \"switches\"). The error message points to the specific config file and the problematic section, assisting in debugging configuration files.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/3_get_flipping.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nValueError: Found a \"switchs:\" section in config file C:\\your_machine\\config\\config, but that section is not valid in machine config files.\n```\n\n----------------------------------------\n\nTITLE: Disable Solenoid Command (0x16)\nDESCRIPTION: This command disables a solenoid. The payload is the solenoid index. No response is expected.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_26\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tDescription\n1\t1\tIndex `c` of the solenoid to disable\n```\n\n----------------------------------------\n\nTITLE: Final Light Show Configuration (YAML)\nDESCRIPTION: This snippet defines the final step of the 'light_gadget_letter' show. The final light `(gadget_letter_made_led)` will remain lit in the final color, `(gadget_letter_final_color)`, indefinitely due to the duration being set to -1. This allows the show to end in either a 'lit' or 'unlit' state.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: light_gadget_letter\n- time: +.05\n  lights:\n    (gadget_letter_made_led): (gadget_letter_final_color)\n\n  duration: -1\n```\n\n----------------------------------------\n\nTITLE: Formatting Log Line (Python)\nDESCRIPTION: Formats a log line with log link and context.  The `format_log_line` method prepares the log message for output, including relevant context information.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nformat_log_line(msg, context, error_no) -> str\n```\n\n----------------------------------------\n\nTITLE: Get Platform Sections (Python)\nDESCRIPTION: Returns the platform section using SmartVirtualHardwarePlatform. Used for configuring platform-specific features.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nget_platform_sections(platform_section: str, overwrite: str) → SmartVirtualHardwarePlatform\n\nReturn platform section.\n```\n\n----------------------------------------\n\nTITLE: Get Status of Simple Lamp Command (0x0A)\nDESCRIPTION: This command retrieves the status of a simple lamp. The payload consists of the lamp's index. The response indicates whether the lamp is off, on, or non-existent.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_14\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tDescription\n1\t1\tIndex `l` of the lamp to query\n```\n\n----------------------------------------\n\nTITLE: Defining a List of Switches for a Shot in MPF (YAML)\nDESCRIPTION: This snippet shows how to define a list of switches for a shot in an MPF YAML config file.  The `switch` setting is configured with a comma-separated list of switch names. This example configures a shot called `outlane` that uses the `leftOutlane` and `rightOutlane` switches.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/lists.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshots:\n  outlane:\n    switch: leftOutlane, rightOutlane    #this is a list\n```\n\n----------------------------------------\n\nTITLE: Text Widget Incorrect Font Name YAML Configuration\nDESCRIPTION: This code snippet shows the incorrect way to specify the font name for a text widget in MPF-MC. Including the file extension will result in an error.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/text/index.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfont_name: arial.ttf\n```\n\n----------------------------------------\n\nTITLE: Assert Player Number - Python\nDESCRIPTION: This assertion checks if the current player number matches the expected number. The parameter 'number' defines the anticipated current player number. For example, assertPlayerNumber(2) confirms that the current player is Player 2.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nassertPlayerNumber(number)\n```\n\nLANGUAGE: python\nCODE:\n```\nself.assertPlayerNumber(2)\n```\n\n----------------------------------------\n\nTITLE: Starting Ball Search\nDESCRIPTION: This code defines the `start` method, which starts the ball search process.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef start():\n    \"\"\"Start ball search the ball search process.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Delay (Python)\nDESCRIPTION: Removes a delay by its name, preventing the associated callback from being executed. The `remove` method takes the delay name as a parameter. If no delay with the specified name exists, nothing happens.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nremove(name: str)\n```\n\n----------------------------------------\n\nTITLE: Accessing Pololu TIC Platform in MPF\nDESCRIPTION: Shows how to access the Pololu TIC hardware platform via the `self.machine.hardware_platforms` dictionary in MPF. This provides access to methods for configuring and controlling stepper motors connected to the Pololu TIC driver.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/pololu_tic.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['pololu_tic']\n```\n\n----------------------------------------\n\nTITLE: Accessing System11 Platform\nDESCRIPTION: Shows how to access the System11 platform instance via the `self.machine.hardware_platforms` dictionary in MPF. This allows interaction with System 11 hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/system11.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.hardware_platforms['system11']\n```\n\n----------------------------------------\n\nTITLE: Defining Modes in YAML Config\nDESCRIPTION: This YAML snippet shows how to configure modes within the `modes:` section of an MPF configuration file.  The configuration lists the modes that can be loaded in the machine. This configuration is valid in the `machine` config file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/modes.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nmodes:\n  - my_mode1\n  - my_mode2\n```\n\n----------------------------------------\n\nTITLE: Playfield mark_playfield_active_from_device_action() Method\nDESCRIPTION: Describes the `mark_playfield_active_from_device_action()` method which marks the playfield active due to activity detected by a device on the playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nmark_playfield_active_from_device_action()\n```\n\n----------------------------------------\n\nTITLE: Accessing the VirtualPinballPlatform\nDESCRIPTION: This code snippet demonstrates how to access the `VirtualPinballPlatform` instance within the MPF machine object.  The hardware platforms are stored in a dictionary, and this snippet shows how to retrieve the virtual pinball platform using its name.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/virtual_pinball.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['virtual_pinball']\n```\n\n----------------------------------------\n\nTITLE: YAML Light Show Example\nDESCRIPTION: This YAML snippet demonstrates a simple light show with three lights that sequentially turn blue over one second. It shows the basic structure of an MPF show file, including the duration and the states of different lights.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/showcreator.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! show: my_show\n#show_version=5\n- duration: .25\n  lights:\n    l_arrow_1: off\n    l_arrow_2: off\n    l_arrow_3: off\n- duration: .25\n  lights:\n    l_arrow_1: blue\n    l_arrow_2: off\n    l_arrow_3: off\n- duration: .25\n  lights:\n    l_arrow_1: blue\n    l_arrow_2: blue\n    l_arrow_3: off\n- duration: .25\n  lights:\n    l_arrow_1: blue\n    l_arrow_2: blue\n    l_arrow_3: blue\n```\n\n----------------------------------------\n\nTITLE: Debug Logging (Python)\nDESCRIPTION: Logs a message at the debug level. The `debug_log` method allows writing detailed messages for debugging purposes.  Whether these messages are displayed in the console or log file depends on the logging configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndebug_log(msg: str, *args, context=None, error_no=None, **kwargs) -> None\n```\n\n----------------------------------------\n\nTITLE: Checking Guest Network Configuration (Debian)\nDESCRIPTION: This snippet demonstrates how to check the network configuration of the virtual network adapter in the Debian guest OS. The `ip addr` command is used to display network interface information, including the IP address, netmask, and broadcast address. The output might vary based on the specific installation.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nip addr\n```\n\n----------------------------------------\n\nTITLE: Raise Config Error (Python)\nDESCRIPTION: Raises a ConfigFileError exception, indicating an error in the machine configuration file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nraise_config_error(msg, error_no, *, context=None) → NoReturn\n\nRaise a ConfigFileError exception.\n```\n\n----------------------------------------\n\nTITLE: Mode List BCP Command Example\nDESCRIPTION: Illustrative JSON example of the `running_modes` parameter within the `mode_list` BCP command. It contains an array of arrays, each representing a running mode and its associated priority. This example shows two modes, 'base' with priority 100 and 'game' with priority 20.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/BCP_Protocol/mode_list.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"running_modes\": [\n        [\n            \"base\",\n            100\n        ],\n        [\n            \"game\",\n            20\n        ]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Raising a Config Error (Python)\nDESCRIPTION: Raises a ConfigFileError exception.  The `raise_config_error` method is used to signal problems with configuration files.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nraise_config_error(msg, error_no, *, context=None) -> NoReturn\n```\n\n----------------------------------------\n\nTITLE: Accessing I2C Servo Controller Platform in MPF\nDESCRIPTION: Demonstrates how to access the i2c_servo_controller hardware platform instance in MPF using the self.machine.hardware_platforms dictionary. This allows for interaction with the servo controller for configuration and control.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/i2c_servo_controller.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.hardware_platforms['i2c_servo_controller']\n```\n\n----------------------------------------\n\nTITLE: Assert Logs Python\nDESCRIPTION: This code demonstrates how to use assertLogs as a context manager to capture log messages and assert that specific messages were logged. It shows how to capture log messages from a specific logger and its children.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertLogs('foo', level='INFO') as cm:\n    logging.getLogger('foo').info('first message')\n    logging.getLogger('foo.bar').error('second message')\n    self.assertEqual(cm.output, ['INFO:foo:first message', 'ERROR:foo.bar:second message'])\n```\n\n----------------------------------------\n\nTITLE: Checking if a Delay Exists (Python)\nDESCRIPTION: Checks if a delay with a given name exists in the DelayManager.  The `check` method returns `True` if the delay exists and `False` otherwise. This allows verifying the presence of a delay before attempting to modify or remove it.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ncheck(delay: str) -> bool\n```\n\n----------------------------------------\n\nTITLE: Stopping the Pin2DmdHardwarePlatform\nDESCRIPTION: This method stops the PIN2DMD hardware platform. It releases any resources and shuts down communication with the hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/pin2dmd.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Restore Serial Port on Spike 1\nDESCRIPTION: This command restores the original serial port on a Spike 1 system after capturing netbus traffic. It moves the previously renamed serial port back to its original location.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/spike/troubleshooting.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nmv /dev/ttyS4_real /dev/ttyS4\n```\n\n----------------------------------------\n\nTITLE: Turn Light Off MPF\nDESCRIPTION: Turns the specified light off.\n<name> is the name of the light to turn off.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/service_cli.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nlight_off <name>\n```\n\n----------------------------------------\n\nTITLE: Invalid Multiple Shows in File YAML\nDESCRIPTION: This YAML snippet shows an invalid configuration where multiple shows are defined within a single file show file. This causes the `CFE-show-1` error because file shows should only contain one show definition, with the filename used as the show's name.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-show-1.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# INVALID FILE SHOW\nflash_red:\n  - duration: 1\n    # [...]\nflash_blue:\n  - duration: 1\n    # [...]\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Machine Folder Not Found Error in MPF from root\nDESCRIPTION: This error indicates that MPF was executed from the wrong directory, typically the root drive. To resolve this, navigate to the root machine folder using the 'cd' command and then execute MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/2_creating_a_new_machine.md#_snippet_8\n\nLANGUAGE: doscon\nCODE:\n```\nC:>mpf\nError. Could not find machine folder: 'None'.\n```\n\n----------------------------------------\n\nTITLE: Counter Configuration Outside Game Mode (YAML)\nDESCRIPTION: This snippet illustrates a counter configuration designed to function outside of a game mode. The key setting is `persist_state: false`, which prevents the counter from attempting to store its state in a player variable, allowing it to operate in non-game modes like attract mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-ConfigValidator-1.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: attract\nmode:\n  game_mode: false\n\ncounters:\n  counter_outside_of_a_game:\n    count_events: count_up\n    persist_state: false\n```\n\n----------------------------------------\n\nTITLE: Running MPF Game Engine and MC Together\nDESCRIPTION: This snippet shows the command to run both the MPF game engine and the MPF Media Controller simultaneously.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/5_add_a_display.md#_snippet_12\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\pinball\\your_machine>mpf both\n```\n\n----------------------------------------\n\nTITLE: Waiting for Any Switch to Change State (Python)\nDESCRIPTION: Waits for the first switch in a list to change into a specified state. The parameters include an iterable of `switches`, the target `state`, a flag `only_on_change` to wait only if the switch is not already in the state, and a `ms` parameter to wait for a sustained state change.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/switch_controller.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nwait_for_any_switch(switches: List[mpf.devices.switch.Switch], state: int = 1, only_on_change=True, ms=0)\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Config File Version Mismatch in MPF\nDESCRIPTION: This error occurs when the config.yaml file does not have the correct version specified in the first line. The solution is to add or update the '#config_version=6' line at the top of the config file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/2_creating_a_new_machine.md#_snippet_5\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\pinball\\your_machine>mpf -b\nConfig file version mismatch: C:\\pinball\\your_machine\\config\\config.yaml\nTraceback (most recent call last):\n  File \"c:\\python34\\lib\\site-packages\\mpf\\commands\\game.py\", line 202, in __init__\n    MachineController(mpf_path, machine_path, vars(self.args)).run()\n  File \"c:\\python34\\lib\\site-packages\\mpf\\core\\machine.py\", line 146, in __init__\n    self._load_config()\n  File \"c:\\python34\\lib\\site-packages\\mpf\\core\\machine.py\", line 405, in _load_config\n    self._load_config_from_files()\n  File \"c:\\python34\\lib\\site-packages\\mpf\\core\\machine.py\", line 425, in _load_config_from_files\n    config_type='machine'))\n  File \"c:\\python34\\lib\\site-packages\\mpf\\core\\config_processor.py\", line 24, in load_config_file\n    config = FileManager.load(filename, verify_version, halt_on_error)\n  File \"c:\\python34\\lib\\site-packages\\mpf\\core\\file_manager.py\", line 167, in load\n    halt_on_error)\n  File \"c:\\python34\\lib\\site-packages\\mpf\\file_interfaces\\yaml_interface.py\", line 255, in load\n    raise ValueError(\"Config file version mismatch: {}\".format(filename))\nValueError: Config file version mismatch: C:\\pinball\\your_machine\\config\\config.yaml\n```\n\n----------------------------------------\n\nTITLE: Complete MPF configuration example\nDESCRIPTION: This is a complete MPF configuration file that includes switch, coil, ball device, playfield, and machine settings. It defines the drain, trough, and plunger switches and related coils, as well as ball devices and the number of balls installed.  The configuration demonstrates how to set up a basic pinball machine using MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_one_switch.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  s_drain:\n    number: 01\n  s_trough_enter:\n    number: 02\n  s_plunger:\n    number: 10\n\nvirtual_platform_start_active_switches: s_trough_enter\n\ncoils:\n  c_drain_eject:\n    number: 03\n    default_pulse_ms: 20\n  c_trough_release:\n    number: 04\n    default_pulse_ms: 20\n\nball_devices:\n  bd_drain:\n    ball_switches: s_drain\n    eject_coil: c_drain_eject\n    eject_targets: bd_trough\n    tags: drain\n    eject_timeouts: 4s\n  bd_trough:\n    entrance_switch: s_trough_enter\n    entrance_switch_full_timeout: 500ms\n    ball_capacity: 3\n    eject_coil: c_trough_release\n    eject_targets: bd_plunger\n    tags: trough, home\n    eject_timeouts: 3s\n  bd_plunger:\n    ball_switches: s_plunger\n    mechanical_eject: true\n    eject_timeouts: 5s\n\nplayfields:\n  playfield:\n    default_source_device: bd_plunger\n    tags: default\n\nmachine:\n  balls_installed: 4\n```\n\n----------------------------------------\n\nTITLE: Exiting Root User Shell in Debian\nDESCRIPTION: This snippet illustrates how to exit the root user shell and return to the regular user account. This is important for security and to avoid unintentionally running commands as root.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Player Variable Events\nDESCRIPTION: This code demonstrates how events are posted when the value of the 'score' player variable is changed. Events with names starting with `player_` will be triggered whenever the player variable changes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/Players.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.player.score = 0\nself.machine.player.score += 500\nself.machine.player.score = 1200\n```\n\n----------------------------------------\n\nTITLE: New High Score File Format for MPF 0.57\nDESCRIPTION: This snippet shows the new high score file format for MPF config version 6. The `!!python/tuple` tags are removed, and the data is stored as a simple list of lists, where each inner list contains the player name and score.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/config_v6.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbonus_rupees:\n- - WIZ\n  - 30\n- - WIZ\n  - 25\nscore:\n- - WIZ\n  - 100000\n- - WIZ\n  - 95000\n- - WIZ\n  - 90000\n- - AAA\n  - 86490\n- - WIZ\n  - 85000\n- - WIZ\n  - 80000\n```\n\n----------------------------------------\n\nTITLE: Initial Handshake Command\nDESCRIPTION: The `hello` command is used during the initial handshake to establish a connection between the pinball controller and the media controller. The pinball controller sends this command with its desired BCP version. The media controller responds with a `hello` command confirming the version or an `error` command if it cannot speak the specified version.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/BCP_Protocol/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhello?version=1.0\n```\n\n----------------------------------------\n\nTITLE: Warning Logging (Python)\nDESCRIPTION: Logs a message at the warning level. These messages are always shown in the console and log file.  The `warning_log` method indicates a potential problem or issue that requires attention.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nwarning_log(msg: str, *args, context=None, error_no=None, **kwargs) -> None\n```\n\n----------------------------------------\n\nTITLE: Display MPF Version\nDESCRIPTION: This command displays the version of the MPF software installed on the system. It is invoked using the `--version` flag.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/running/mpf.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mpf --version\nMPF v0.xx.yy\n```\n\n----------------------------------------\n\nTITLE: Parse String Config in HardwareSoundPlayer\nDESCRIPTION: The `get_string_config(string)` method parses the string config for the sound player. It takes a string as input and uses it to configure sound parameters.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/config_players/hardware_sound_player.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nget_string_config(string)\n```\n\n----------------------------------------\n\nTITLE: Configuring Lights via light_player in MPF (YAML)\nDESCRIPTION: This example shows how to configure lights to change color and fade upon a specific event using the `light_player` section in a config file.  It defines the event `some_event` which triggers LED1 to turn red with a 200ms fade and LED2 to turn red with a 2000ms fade.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/light_player.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlight_player:\n  some_event:\n    led1:\n      color: red\n      fade: 200ms\n    led2:\n      color: ff0000\n      fade: 2000ms\n```\n\n----------------------------------------\n\nTITLE: Processing Tilt Warning\nDESCRIPTION: Processes a tilt warning. If the number of warnings reaches the threshold to cause a tilt, a tilt will be processed. This allows for a progressive tilt system with warnings before the actual tilt occurs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/tilt.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ntilt_warning(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Stop Mode\nDESCRIPTION: This snippet demonstrates the `stop` method which stops the mode. The method takes a callback and optional keyword arguments as parameters. A callback function is called once the mode has stopped, but only if the mode is/was running.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/carousel.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstop(callback: Any = None, **kwargs) → bool\n```\n\n----------------------------------------\n\nTITLE: Inserting a Pause in an Animation (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to insert a pause in an animation by adding a step where the property value is the same as the current value. This is achieved using a relative property value of 0. The `flying_toaster` image moves in, pauses, and then moves out.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/animation.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  slide1:\n    widgets:\n      - type: image\n        image: flying_toaster\n        y: -50\n    animations:\n      show_slide:\n        - property: y\n          value: 50\n          duration: 1s\n        - property: y\n          value: 0\n          relative: true\n          duration: 2s\n        - property: y\n          value: 200\n```\n\n----------------------------------------\n\nTITLE: Adding a reusable widget to a specific slide by event (YAML)\nDESCRIPTION: This snippet shows how to add a reusable widget to a specific slide using the `widget_player:` section of an MPF config file, triggered by an event. When the event *some_event* is posted, the widget *laughing_jackal* is added to the slide called *my_slide*.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nwidget_player:\n  some_event:               # event that will trigger this widget to show\n    laughing_jackal:        # widget you want to show\n      slide: my_slide\n```\n\n----------------------------------------\n\nTITLE: Enabling Debugging for Pin2DMD with YAML\nDESCRIPTION: This code snippet demonstrates how to enable debug mode for Pin2DMD in the MPF configuration file. Adding `debug: true` to the `pin2dmd` section increases logging, which can aid in troubleshooting. Debug mode may slow down MPF and should be disabled after use.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pin2dmd/troubleshooting.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npin2dmd:\n  debug: true\n```\n\n----------------------------------------\n\nTITLE: Using the 'led_color' show in MPF\nDESCRIPTION: Example configuration showing how to use the 'led_color' show in a MPF show_player to set the color of a light. The 'led_color' show sets the light to the specified color indefinitely.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/shows/default_shows.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshow_player:\n  my_triggering_event:\n    led_color:\n      show_tokens:\n        lights: my_light\n        color: blue # or perhaps \"0000AA\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Trinamics Step Rocker Platform\nDESCRIPTION: This method stops the Trinamics Step Rocker platform, releasing resources and terminating communication. Specifically, it closes the serial connection to the Trinamics Step Rocker hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/trinamics_steprocker.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstop()\n```\n\n----------------------------------------\n\nTITLE: MpfGameTestCase Class Definition\nDESCRIPTION: Defines the MpfGameTestCase class, which inherits from MpfTestCase and is specialized for testing game-related functionality in the Mission Pinball Framework. It includes additional methods and assertions tailored for game testing.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass mpf.tests.MpfGameTestCase.MpfGameTestCase(methodName):\n    Bases: mpf.tests.MpfTestCase.MpfTestCase\n\n    Test case for starting and running games.\n\n    This is based on MpfTestCase but adds methods and assertions related to running games (rather than just testing MPF components or devices).\n```\n\n----------------------------------------\n\nTITLE: Accessing Carousel Mode\nDESCRIPTION: This snippet demonstrates how to access the carousel mode instance within the MPF environment. The `self.machine.modes.carousel` attribute provides a direct reference to the active carousel mode, enabling interaction and control from other parts of the code.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/carousel.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.modes.carousel\n```\n\n----------------------------------------\n\nTITLE: Initializing Trinamics Step Rocker Platform\nDESCRIPTION: This method initializes the Trinamics Step Rocker platform, setting up the necessary communication and resources for controlling the stepper motors. It performs tasks such as establishing serial communication with the hardware.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/trinamics_steprocker.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ninitialize()\n```\n\n----------------------------------------\n\nTITLE: Configuring a Physical Coil in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure a physical coil in MPF's YAML configuration file. The `number` setting is crucial for the hardware to address the coil. The actual number depends on the hardware platform. Consult the hardware documentation for the correct values.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-coils-1.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  your_coil:\n    number: 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment with Specific Path\nDESCRIPTION: Creates a Python virtual environment using the venv module with a specific directory path.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-environments.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npython3 -m venv C:\\Users\\Rudy\\venvs\\mpf\n```\n\n----------------------------------------\n\nTITLE: Updating Incandescents (OPP)\nDESCRIPTION: Updates all the incandescents connected to the OPP hardware.  This is done once per game loop if any changes have been made to incandescent states.  The method assumes reliable communication but may be modified to update all incandescents each loop if necessary.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nupdate_incand()\n```\n\n----------------------------------------\n\nTITLE: Widget Positioning in Named Widgets YAML\nDESCRIPTION: This snippet shows how to define a named widget with specific positioning settings using `x`, `y`, and `adjust_bottom`. The widget is a text widget with its position adjusted from the left and top edges, and the bottom anchor adjusted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/positioning.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwidgets:\n  my_cool_widget:\n    - type: text\n      text: MY WIDGET\n      x: left+10%\n      y: top-10%\n      adjust_bottom: 2\n#! widget_player:\n#!   show_widget: my_cool_widget\n##! test\n#! post show_widget\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"MY WIDGET\"\n```\n\n----------------------------------------\n\nTITLE: Define Triangle Widget Type in MPF with YAML\nDESCRIPTION: This YAML snippet shows the minimal setting to define a widget as a triangle. It does not specify points or other properties.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/triangle.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ntype: triangle\n```\n\n----------------------------------------\n\nTITLE: Running MPF with the 'both' Command\nDESCRIPTION: This command-line instruction demonstrates how to start the Mission Pinball Framework (MPF) with both the media controller and the hardware controller running simultaneously. This facilitates testing and development by providing immediate feedback on hardware interactions and media display.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/16_attract_mode_show.md#_snippet_4\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\mpf-examples\\tutorial_step_16>mpf both\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.subscribe_attribute() - Python\nDESCRIPTION: Subscribe to an attribute.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsubscribe_attribute(item, machine)\n```\n\n----------------------------------------\n\nTITLE: Config Player: Normal Syntax (Show)\nDESCRIPTION: This snippet demonstrates the normal syntax for defining a config player within a show step. The action, defined by `<depends on the player>`, is triggered when the show step is active. Note that the syntax changes from `example_player:` to `examples:`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config_players/index.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- duration: 2s\n  examples:\n    <depends on the player>\n```\n\n----------------------------------------\n\nTITLE: Playfield delay Attribute\nDESCRIPTION: Describes the `delay` attribute, an instance of `mpf.core.delays.DelayManager` that handles delays for this playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndelay\n```\n\n----------------------------------------\n\nTITLE: Resetting a Delay (Python)\nDESCRIPTION: Resets a delay by removing the existing delay (if it exists) and creating a new delay with the specified parameters.  The `reset` method takes the delay time, callback function, delay name, and keyword arguments for the callback function as parameters.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/DelayManager.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nreset(ms: int, callback: Callable[[...], None], name: str, **kwargs) -> str\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.event_award() - Python\nDESCRIPTION: Handle award control event. `posted_unlit_events` dictates whether unlit extra ball events are posted.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nevent_award(posted_unlit_events=False, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Playfield event_ball_search_unblock() Method\nDESCRIPTION: Describes the `event_ball_search_unblock()` method, which unblocks ball search for this playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nevent_ball_search_unblock(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Configure a Switch\nDESCRIPTION: Configures a switch using the provided number, configuration, and platform-specific configuration. Returns a SwitchPlatformInterface.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/spi_bit_bang.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure_switch(number: str, config: mpf.core.platform.SwitchConfig, platform_config: dict) → mpf.platforms.interfaces.switch_platform_interface.SwitchPlatformInterface\n```\n\n----------------------------------------\n\nTITLE: Sending to Processor (OPP)\nDESCRIPTION: Sends a message to a processor with a specific serial number via the OPP hardware. This is the primary method for sending commands and data to the OPP boards.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/opp.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nsend_to_processor(chain_serial, msg)\n```\n\n----------------------------------------\n\nTITLE: Hit and Release Switches Simultaneously - Python\nDESCRIPTION: Momentarily activates and then deactivates multiple switches sequentially. Events are only processed at the end of the sequence, useful for reproducing race conditions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n`hit_and_release_switches_simultaneously(names)`\n```\n\n----------------------------------------\n\nTITLE: Quad Widget Points Setting in MPF\nDESCRIPTION: Defines the coordinates for the four corners of the quad. Eight values are required, representing x,y coordinate pairs for each corner.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/quad.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\npoints:\n```\n\n----------------------------------------\n\nTITLE: MpfTestCase Class Definition in Python\nDESCRIPTION: Defines the `MpfTestCase` class, which inherits from `unittest.case.TestCase`.  This class is designed to be the foundation for all unit tests within the MPF (Mission Pinball Framework) project.  It sets up the base requirements and structure for effectively testing MPF components.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass mpf.tests.MpfTestCase.MpfTestCase(methodName='runTest')\n\n```\n\n----------------------------------------\n\nTITLE: RgbDmd Update Method (Python)\nDESCRIPTION: This method updates the data on the DMD. It takes a bytes object as input which represents the data to be sent to the DMD for display.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/rgb_dmds.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef update(data: bytes):\n    # Update data on the dmd.\n    # Parameters:\n    #   data – bytes to send\n    pass\n```\n\n----------------------------------------\n\nTITLE: Accessing Mode Controller in MPF (Python)\nDESCRIPTION: Explains how to access the `mode_controller` instance within MPF.  There is only one instance and it is accessible via `self.machine.mode_controller`. This provides access to all mode management functions.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/mode_controller.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.machine.mode_controller\n```\n\n----------------------------------------\n\nTITLE: Set Status of Simple Lamp to On Command (0x0B)\nDESCRIPTION: This command sets a simple lamp to the 'on' state. The payload is the index of the lamp to be turned on. No response is expected.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_17\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tDescription\n1\t1\tIndex `l` of the lamp to set to on\n```\n\n----------------------------------------\n\nTITLE: Stop Stepper Motor\nDESCRIPTION: De-energizes the stepper motor and stops sending the command timeout refresh.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/pololu_tic.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstop()\n```\n\n----------------------------------------\n\nTITLE: Assert Player Variable Equal - Python\nDESCRIPTION: Asserts that a player variable exists and has the specified value.  Useful for verifying the correctness of player-specific data within the system.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n`assertPlayerVarEqual(value, player_var)`\n```\n\n----------------------------------------\n\nTITLE: Getting Stepper Config Section (Python)\nDESCRIPTION: Describes the `get_stepper_config_section` class method, which returns the configuration section related to the stepper. This is used for configuring stepper motors.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/step_stick.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclassmethod get_stepper_config_section()\n```\n\n----------------------------------------\n\nTITLE: Assert Warns - Python\nDESCRIPTION: Fails unless a warning of the specified class is triggered by the callable when invoked with the provided arguments. It also supports using a context manager to inspect the warning after the assertion.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n`assertWarns(expected_warning, *args, **kwargs)`\n```\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertWarns(SomeWarning):\ndo_something()\n```\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertWarns(SomeWarning) as cm:\ndo_something()\nthe_warning = cm.warning\nself.assertEqual(the_warning.some_attribute, 147)\n```\n\n----------------------------------------\n\nTITLE: Configure Triangle Widget in MPF with YAML\nDESCRIPTION: This YAML configuration defines a slide player with three triangle widgets. Each triangle has different colors and vertex coordinates specified using the `points` setting. The `type` setting specifies that these are triangle widgets.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/triangle.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#config_version=5\nslide_player:\n  mc_ready:\n    triangle_example:\n      - type: triangle\n        color: blue\n        points: 0, 0, 100, 0, 100, 100\n      - type: triangle\n        points: 400, 400, 300, 200, 600, 500\n        color: red\n      - type: triangle\n        points: 200, 500, 100, 400, 300, 400\n```\n\n----------------------------------------\n\nTITLE: Start Mode\nDESCRIPTION: This snippet demonstrates the `start` method which starts the mode. The method takes the mode priority, a callback, and optional keyword arguments as parameters.  It uses the \"Mode: priority\" setting from this mode’s configuration file if no priority is provided.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/carousel.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstart(mode_priority=None, callback=None, **kwargs) → None\n```\n\n----------------------------------------\n\nTITLE: Adjusting Device Size in monitor.yaml\nDESCRIPTION: This snippet shows how to adjust the size of switches and lights in the `monitor.yaml` configuration file. Setting `device_size` to a smaller value (e.g., 0.1) can be useful when the default size is too large.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ndevice_size: 0.1\n```\n\n----------------------------------------\n\nTITLE: Close serial communication\nDESCRIPTION: Stops and closes the serial communication with the Pololu Maestro servo controllers.  This method ensures proper shutdown of the serial port to avoid resource conflicts and potential errors.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/pololu_maestro.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstop()\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.event_light() - Python\nDESCRIPTION: Handle light control event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nevent_light(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Add 'potato' variable to display\nDESCRIPTION: Modifies the slide_player configuration to display the value of the 'potato' player variable.  This demonstrates how to display custom player variables on screen, ensuring to quote the string to handle YAML syntax.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/15_scoring.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n#! player_vars:\n#!   potato:\n#!     initial_value: 0\n##! mode: base\n# in your base mode (modes/base/config/base.yaml)\nslide_player:\n  mode_base_started:\n    widgets:\n      - type: text\n        text: (score)\n        number_grouping: true\n        min_digits: 2\n        font_size: 100\n      - type: text\n        text: PLAYER (number)\n        y: 10\n        x: 10\n        font_size: 50\n        anchor_x: left\n        anchor_y: bottom\n      - type: text\n        text: BALL (ball)\n        y: 10\n        x: right-10\n        anchor_x: right\n        anchor_y: bottom\n        font_size: 50\n      - type: text\n        text: 'POTATO VALUE: (potato)'\n        y: 40%\n##! test\n#! start_game\n#! start_mode base\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"PLAYER 1\"\n#! assert_text_on_top_slide \"BALL 1\"\n#! assert_text_on_top_slide \"POTATO VALUE: 0\"\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.enabled - Python\nDESCRIPTION: Return whether this extra ball group is enabled. This attribute considers the enabled setting plus the max balls per game and ball settings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nenabled\n```\n\n----------------------------------------\n\nTITLE: Generic Timed Switch Configuration\nDESCRIPTION: This snippet illustrates the general format for configuring timed switches in MPF. It shows how to define multiple timed switches with custom names and settings within the `timed_switches` section.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/timed_switches.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntimed_switches:\n   name_of_your_timed_switch:\n      <settings>\n   some_other_timed_switch:\n      <settings>\n```\n\n----------------------------------------\n\nTITLE: Handshake Error Response\nDESCRIPTION: The media controller sends this `error` command as a response to the pinball controller's initial handshake command. It indicates that the media controller does not support the requested BCP version and includes an error message.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/BCP_Protocol/index.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nerror?message=unknown protocol version\n```\n\n----------------------------------------\n\nTITLE: Custom Godot Method with Unused Parameters\nDESCRIPTION: This code snippet illustrates how to declare a custom method in Godot that extends MPFSlide, including the required 'settings' and 'kwargs' parameters, even if they are not used within the method. The underscore prefix indicates to Godot that these parameters are intentionally unused, preventing warnings.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/reference/mpf-slide.md#_snippet_1\n\nLANGUAGE: gdscript\nCODE:\n```\nfunc my_custom_method(_settings, _kwargs):\n```\n\n----------------------------------------\n\nTITLE: Directory Listing with Config doscon\nDESCRIPTION: Shows the directory structure with the \\config subfolder inside the machine folder. Demonstrates where configuration files will be stored.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/2_creating_a_new_machine.md#_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\pinball\\your_machine\\config\n```\n\n----------------------------------------\n\nTITLE: Variable Player Configuration\nDESCRIPTION: This YAML configuration defines the variable player, which manages scoring and the `sj_active` player variable.  It assigns scores to jet bumper hits based on rollover completions, awards points for completing rollovers, and sets the `sj_active` variable to 1 when the `mode_super_jets_started` event is triggered.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/AFM_super_jets.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nvariable_player:\n  s_left_bumper_active:\n    score: 1000000 + (device.counters.lb_rollover_complete_count.value * 50000)\n  s_middle_bumper_active:\n    score: 1000000 + (device.counters.lb_rollover_complete_count.value * 50000)\n  s_right_bumper_active:\n    score: 1000000 + (device.counters.lb_rollover_complete_count.value * 50000)\n  rollover_lanes_complete:\n    score: 1000\n  mode_super_jets_started:\n    sj_active:\n      int: 1\n      action: set\n```\n\n----------------------------------------\n\nTITLE: Ignorable Runtime Exception (Python)\nDESCRIPTION: Handles ignorable runtime exceptions. During development or tests, it raises an exception for easier debugging; during production, it logs an error.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nignorable_runtime_exception(msg: str) → None\n\nHandle ignorable runtime exception.\n\nDuring development or tests raise an exception for easier debugging. Log an error during production.\n```\n\n----------------------------------------\n\nTITLE: Virtual DMD Filter Configuration\nDESCRIPTION: This code snippet shows an example of how to configure the 'virtual_dmd' filter in GMC. It sets the filter name to \"virtual_dmd\".\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/guides/window-filters.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n    [filter]\n    filter=\"virtual_dmd\"\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Machine Folder Not Found Error in MPF\nDESCRIPTION: This error indicates that MPF was executed from the wrong directory, typically a subdirectory of the machine folder. To resolve this, navigate to the root machine folder using the 'cd ..' command and then execute MPF.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/2_creating_a_new_machine.md#_snippet_7\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\pinball\\your_machine\\config>mpf\nError. Could not find machine folder: 'None'.\n```\n\n----------------------------------------\n\nTITLE: Example Get Status of Simple Lamp Command (0x0A)\nDESCRIPTION: Example of sending the command to get status of lamp 25.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_15\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tExample\tComment\n0\t1\t10\tCommand 10 - Get Status of Simple Lamp\n1\t1\t25\tQuery status of lamp 25\n```\n\n----------------------------------------\n\nTITLE: Incorrect Syntax: Using Spaces Instead of Commas\nDESCRIPTION: This YAML snippet shows an example of incorrect syntax where spaces are used instead of commas in the `virtual_platform_start_active_switches` section, leading to an error. This syntax was accepted in older MPF versions, but is no longer valid.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-Smart_Virtual_Platform-1.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# INVALID SYNTAX\nvirtual_platform_start_active_switches: s_ball_switch1 s_ball_switch2  # note the space instead of a comma\n```\n\n----------------------------------------\n\nTITLE: Serving MkDocs site locally\nDESCRIPTION: This command builds the MkDocs site and serves it locally, allowing you to preview your changes before submitting them. You can then access the site in your browser at `http://localhost:8000`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/about/help_docs.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Save All Data - Python\nDESCRIPTION: Updates all data stored within the DataManager. In the TestDataManager this method is patched to avoid writing data to disk. Takes the new data as input.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestDataManager.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef save_all(data):\n    Update all data.\n```\n\n----------------------------------------\n\nTITLE: Playfield raise_config_error() Method\nDESCRIPTION: Describes the `raise_config_error()` method which raises a ConfigFileError exception.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nraise_config_error(msg, error_no, *, context=None) → NoReturn\n```\n\n----------------------------------------\n\nTITLE: Asserting Game Is Running in Python\nDESCRIPTION: The `assertGameIsRunning()` method asserts that a game is currently running. This is used to verify that a game has started successfully during a test case. This checks the status of the game instance.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nself.assertGameIsRunning()\n```\n\n----------------------------------------\n\nTITLE: Doctor Who Carousel Mode Configuration (YAML)\nDESCRIPTION: This snippet provides a complete configuration for a Doctor Who themed carousel mode.  It includes the mode settings for selectable Doctors, event mappings for selection and navigation, slide definitions, and event player configurations to start corresponding modes.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/carousel.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\n##! mode: carousel\n# put this in your modes/carousel/config/carousel.yaml\nmode:\n  start_events: ball_starting\n  stop_events: carousel_item_selected\n  code: mpf.modes.carousel.code.carousel.Carousel\n  priority: 125\n  use_wait_queue: true\nmode_settings:\n  selectable_items: Doctor1, Doctor2, Doctor3, Doctor4, Doctor5, Doctor6, Doctor7, Doctor8\n  select_item_events: sw_launch_active\n  next_item_events: sw_right_flipper_inactive\n  previous_item_events: sw_left_flipper_inactive\nslide_player:\n  carousel_Doctor1_highlighted: select_Doctor1\n  carousel_Doctor2_highlighted: select_Doctor2\n  carousel_Doctor3_highlighted: select_Doctor3\n  carousel_Doctor4_highlighted: select_Doctor4\n  carousel_Doctor5_highlighted: select_Doctor5\n  carousel_Doctor6_highlighted: select_Doctor6\n  carousel_Doctor7_highlighted: select_Doctor7\n  carousel_Doctor8_highlighted: select_Doctor8\nslides:\n  select_Doctor1:\n    widgets:\n      - type: text\n        text: Doctor 1\n        font_size: 10\n        color: yellow\n    transitions:\n      type: move_in\n      direction: right\n  select_Doctor2:\n    widgets:\n      - type: text\n        text: Doctor 2\n        font_size: 10\n        color: yellow\n    transitions:\n      type: move_in\n      direction: right\n  select_Doctor3:\n    widgets:\n      - type: text\n        text: Doctor 3\n        font_size: 10\n        color: yellow\n    transitions:\n      type: move_in\n      direction: right\n  select_Doctor4:\n    widgets:\n      - type: text\n        text: Doctor 4\n        font_size: 10\n        color: yellow\n    transitions:\n      type: move_in\n      direction: right\n  select_Doctor5:\n    widgets:\n      - type: text\n        text: Doctor 5\n        font_size: 10\n        color: yellow\n    transitions:\n      type: move_in\n      direction: right\n  select_Doctor6:\n    widgets:\n      - type: text\n        text: Doctor 6\n        font_size: 10\n        color: yellow\n    transitions:\n      type: move_in\n      direction: right\n  select_Doctor7:\n    widgets:\n      - type: text\n        text: Doctor 7\n        font_size: 10\n        color: yellow\n    transitions:\n      type: move_in\n      direction: right\n  select_Doctor8:\n    widgets:\n      - type: text\n        text: Doctor 8\n        font_size: 10\n        color: yellow\n    transitions:\n      type: move_in\n      direction: right\nevent_player:\n  select_Doctor1: mode_Doctor_1_start\n  select_Doctor2: mode_Doctor_2_start\n  select_Doctor3: mode_Doctor_3_start\n  select_Doctor4: mode_Doctor_4_start\n  select_Doctor5: mode_Doctor_5_start\n  select_Doctor6: mode_Doctor_6_start\n  select_Doctor7: mode_Doctor_7_start\n  select_Doctor8: mode_Doctor_8_start\n##! test\n#! start_game\n#! advance_time_and_run .1\n#! assert_available_balls_on_playfield 0\n#! assert_text_on_top_slide \"Doctor 1\"\n#! post sw_right_flipper_inactive\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Doctor 2\"\n#! post sw_launch_active\n#! advance_time_and_run .1\n#! assert_available_balls_on_playfield 1\n```\n\n----------------------------------------\n\nTITLE: Configure Window Slide (YAML)\nDESCRIPTION: This snippet creates a slide named \"window_slide_1\" in the `slides:` section of the machine config. This slide will be used to display the segment display emulator widget.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/segment_display_emulator/how_to.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nslides:\n  window_slide_1:\n```\n\n----------------------------------------\n\nTITLE: Complete PIN2DMD Configuration Example\nDESCRIPTION: This complete example demonstrates a full configuration for using a PIN2DMD with MPF, including hardware settings, display configuration, slide definitions, and a slide player setup to display content on both the on-screen window and the physical DMD.  It combines all the settings into a single config file.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pin2dmd/index.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhardware:\n  rgb_dmd: pin2dmd\npin2dmd:\n  # debug: True           # uncomment this if you experience any issues and need debug output\n  resolution: 128x32      # or 192x64 depending on your panel\n  panel: rgb              # or rbg if colors are swapped\ndisplays:\n  window:  # on screen window\n    width: 600\n    height: 200\n  dmd:  # source display for the DMD\n    width: 128      # 192 if you got a 192x64 pin2dmd panel\n    height: 32      # 64 if you got a 192x64 pin2dmd panel\n    default: true\n    round_anchor_x: left\nwindow:\n  width: 600\n  height: 200\n  title: Mission Pinball Framework\nrgb_dmds:\n  default:\n    hardware_brightness: .2\n    fps: 30\nslides:\n  window_slide_1:    # slide we'll show in the on-screen window\n    - type: display  # this widget shows the DMD content in this slide too\n      effects:\n        - type: color_dmd\n      width: 512\n      height: 128\n    - type: text\n      text: MISSION PINBALL FRAMEWORK\n      anchor_y: top\n      y: top-3\n      font_size: 30\n      color: white\n    - type: rectangle\n      width: 514\n      height: 130\n      color: 444444\n  dmd_slide_1:  # slide we'll show on the physical DMD\n    - type: text\n      text: IT WORKS!\n      font_size: 30\n      color: red\nslide_player:\n  init_done:\n    window_slide_1:\n      target: window\n    dmd_slide_1:\n      target: dmd\n```\n\n----------------------------------------\n\nTITLE: Playfield is_playfield() Method\nDESCRIPTION: Describes the `is_playfield()` method which returns true since it is a playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclassmethod is_playfield()\n```\n\n----------------------------------------\n\nTITLE: Dynamically Choosing a Widget Based on Player Variable (YAML)\nDESCRIPTION: This example demonstrates how to dynamically choose a widget based on a player variable. A placeholder widget in the slide uses dynamic text formatting to select a specific widget based on the `hero_class` player variable. The `widget:` setting uses the `(current_player.hero_class)` variable to choose the appropriate widget.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/reusable_widgets.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nwidgets:\n  hero_portrait_rogue:\n    - type: text\n      text: \"Portrait Rogue\"\n  hero_portrait_bard:\n    - type: text\n      text: \"Portrait Bard\"\n  hero_portrait_mage:\n    - type: text\n      text: \"Portrait Mage\"\nslides:\n  hero_slide:\n    - type: text\n      text: (player|name)\n    - type: text\n      text: Level (player|level)\n    - widget: hero_portrait_(current_player.hero_class)\nslide_player:\n  show_hero_slide: hero_slide\n\n##! mode: base\nvariable_player:\n  set_var_rogue:\n    hero_class:\n      action: set\n      string: \"rogue\"\n##! test\n#! start_game\n#! start_mode base\n#! post set_var_rogue\n#! advance_time_and_run .1\n#! post show_hero_slide\n#! advance_time_and_run .1\n#! assert_text_on_top_slide \"Portrait Rogue\"\n```\n\n----------------------------------------\n\nTITLE: Configuring an RGB DMD in MPF\nDESCRIPTION: This YAML snippet demonstrates how to configure an RGB DMD named 'smartmatrix' in MPF. It sets the width and height of the source display 'dmd', the hardware brightness to 0.5, the frames per second to 25, and the gamma to 2.5.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/rgb_dmds.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplays:\n  dmd:\n    width: 128\n    height: 32\nrgb_dmds:\n  smartmatrix:  # name of this DMD which can be whatever you want\n    hardware_brightness: .5\n    fps: 25\n    gamma: 2.5\n```\n\n----------------------------------------\n\nTITLE: Add variable_player section to base.yaml\nDESCRIPTION: Adds a top-level variable_player configuration item to the base mode's base.yaml config file. This sets the stage for defining how events affect player variables.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tutorial/15_scoring.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvariable_player:\n```\n\n----------------------------------------\n\nTITLE: Cloning MPF-MC Repository with Git\nDESCRIPTION: This command clones a forked MPF-MC (Media Controller) repository from GitHub to a local machine. It downloads all the project files and Git history to the specified folder.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/about/contributing_to_mpf.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR_GITHUB_HANDLE/mpf-mc/\n```\n\n----------------------------------------\n\nTITLE: Quad Widget Configuration in MPF\nDESCRIPTION: Defines two quad widgets within a slide player configuration in MPF. The `points` parameter specifies the x,y coordinates for each corner of the quad, and the `color` parameter sets the fill color. Common widget settings such as position, opacity, and animations can be controlled via widget styles.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/widgets/quad.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#config_version=5\nslide_player:\n  mc_ready:\n    bezier_example:\n      - type: quad\n        points: 210, 110, 210, 150, 500, 200, 590, 190\n        color: pink\n      - type: quad\n        points: 50, 550, 400, 400, 400, 100, 200, 200\n        color: lime\n```\n\n----------------------------------------\n\nTITLE: Define Accrual Logic Block for GADGET Targets\nDESCRIPTION: This YAML configuration defines an accrual logic block named `gadget_accrual` that tracks the completion of GADGET letters.  It specifies the events that trigger the completion of each letter (gadget_g1_complete, gadget_a_complete, etc.), resets the accrual on completion so players can earn more gadgets, and defines the events that are fired when the accrual is complete (award_gadget, reset_gadget_lights).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/cookbook/B66_gadget.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: gadget\naccruals:\n  gadget_accrual:\n    events:\n      - gadget_g1_complete # index [0]\n      - gadget_a_complete # index [1]\n      - gadget_d_complete # index [2]\n      - gadget_g2_complete # index [3]\n      - gadget_e_complete # index [4]\n      - gadget_t_complete # index [5]\n    reset_on_complete: true\n    disable_on_complete: false\n    reset_events: mode_gadget_started\n    events_when_complete: award_gadget, reset_gadget_lights\n```\n\n----------------------------------------\n\nTITLE: Carousel Event Configuration in MPF 0.57\nDESCRIPTION: This snippet illustrates the carousel event configuration in MPF 0.57, where each carousel item had a unique event.  The event name includes the carousel name and item name, with the direction of the selection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/0.80.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmissionselect_garrus_highlighted{direction=\"forwards\"}\n```\n\n----------------------------------------\n\nTITLE: YAML List Example\nDESCRIPTION: This YAML snippet demonstrates the structure of a list.  Each item in the list is preceded by a hyphen (`-`).  Lists are different from dictionaries and cannot be used where a dictionary is expected.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-ConfigValidator-12.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nyour_setting:\n  - item1_in_list\n  - item2_in_list\n```\n\n----------------------------------------\n\nTITLE: Initialise Core and Hardware (Python)\nDESCRIPTION: Loads the core modules and hardware components, setting up the basic functionality of the machine.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ninitialise_core_and_hardware() → None\n\nLoad core modules and hardware.\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Git\nDESCRIPTION: This command commits all staged changes to the local Git repository. It prepares the changes for pushing to a remote repository.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/about/contributing_to_mpf.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -a\n```\n\n----------------------------------------\n\nTITLE: Toggling Credit Play - Python\nDESCRIPTION: Shows how to toggle between free and credits play using `toggle_credit_play(**kwargs)`. The `**kwargs` are catch-all keyword arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/credits.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nself.machine.modes.credits.toggle_credit_play(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Assert Set Equal - Python\nDESCRIPTION: Asserts the equality of two sets. It relies on ducktyping to support various set implementations and optimizes the comparison using the difference method if available.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n`assertSetEqual(set1, set2, msg=None)`\n```\n\n----------------------------------------\n\nTITLE: Initialise (Python)\nDESCRIPTION: Initializes the machine, setting up the core components and hardware interfaces.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ninitialise() → None\n\nInitialise machine.\n```\n\n----------------------------------------\n\nTITLE: Playfield ball_search Attribute\nDESCRIPTION: Describes the `ball_search` attribute, an instance of `mpf.core.ball_search.BallSearch` that handles ball search for the playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nball_search\n```\n\n----------------------------------------\n\nTITLE: Adding Favicon Links to HTML Head\nDESCRIPTION: This snippet adds links to various favicon sizes and formats in the `<head>` section of an HTML document. These links ensure that the website displays the correct favicon on different devices and browsers. It includes links for Apple touch icons, regular favicons, a web manifest file, a Safari pinned tab icon, a shortcut icon, and meta tags for Microsoft application settings and theme color.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/images/icons/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/icons/apple-touch-icon.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/icons/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/images/icons/favicon-16x16.png\">\n<link rel=\"manifest\" href=\"/images/icons/site.webmanifest\">\n<link rel=\"mask-icon\" href=\"/images/icons/safari-pinned-tab.svg\" color=\"#d63e29\">\n<link rel=\"shortcut icon\" href=\"/images/icons/favicon.ico\">\n<meta name=\"msapplication-TileColor\" content=\"#ffc40d\">\n<meta name=\"msapplication-config\" content=\"/images/icons/browserconfig.xml\">\n<meta name=\"theme-color\" content=\"#ffffff\">\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link (Mac & Linux)\nDESCRIPTION: This command creates a symbolic link on macOS and Linux systems. It links the GMC repository's addons folder to the project's addons folder, ensuring the project always uses the latest changes from the GMC repository. Requires root privileges.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/installation.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n(mpf080) $> sudo ln -s /Users/tommy/git/mpf-gmc/addons/mpf-gmc /Users/tommy/pinballgame/addons/mpf-gmc\n```\n\n----------------------------------------\n\nTITLE: Adjusting Brightness for RGB DMDs with YAML\nDESCRIPTION: This snippet shows how to adjust the brightness of an RGB DMD within the MPF configuration file. The `brightness` setting in the `rgb_dmds` section controls the display's brightness, allowing you to compensate for dim or overly bright displays. The fps setting controls frames per second.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/pin2dmd/troubleshooting.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrgb_dmds:\n  default:  # your DMD\n    brightness: .8      # adjust the brightness of your display if it is too bright or dim\n    fps: 30\n```\n\n----------------------------------------\n\nTITLE: Assert True - Python\nDESCRIPTION: Checks if the given expression evaluates to True. It raises an error if the expression is False.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n`assertTrue(expr, msg=None)`\n```\n\n----------------------------------------\n\nTITLE: Format Log Line (Python)\nDESCRIPTION: Formats a log line with context and error number for debugging. It returns a formatted string with the log message and context.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MockBcpClient.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nformat_log_line(msg, context, error_no) → str\n\nReturn a formatted log line with log link and context.\n```\n\n----------------------------------------\n\nTITLE: Connect Method (Python)\nDESCRIPTION: Actively connects the client in the mock environment. Takes a configuration dictionary as input and initiates a simulated connection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MockBcpClient.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nconnect(config)\n\nActively connect client.\n```\n\n----------------------------------------\n\nTITLE: Twitch Client Configuration Example\nDESCRIPTION: This code snippet shows a basic example of configuring the Twitch client in MPF using static values. It defines the user, password (OAuth token), and channel to connect to. Before using this plugin, you must install the irc library with `pip3 install irc`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/twitch_client.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntwitch_client:\n  user: TwitchBotAccount\n  password: oauth:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n  channel: ChatChannel\n```\n\n----------------------------------------\n\nTITLE: Asserting event calls with specific kwargs using assertEventCalledWith\nDESCRIPTION: This example shows how to use `assertEventCalledWith` to check if an event was called with specific keyword arguments. It builds upon `assertEventCalled` by allowing verification of the event's parameters, ensuring it was called with the expected values.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfBcpTestCase.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.mock_event('jackpot')\n\nself.post_event('jackpot', count=1, first_time=True)\nself.assertEventCalled('jackpot')  # This will pass\nself.assertEventCalledWith('jackpot', count=1, first_time=True)  # This will also pass\nself.assertEventCalledWith('jackpot', count=1, first_time=False)  # This will fail\n```\n\n----------------------------------------\n\nTITLE: Configuring Credit Expiration Time (YAML)\nDESCRIPTION: These snippets demonstrate how to configure the `credit_expiration_time` setting using minutes, hours, and days. The setting specifies how long credits are valid before they expire.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/time_strings.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ncredit_expiration_time: 2m     # 2 minutes\n```\n\nLANGUAGE: YAML\nCODE:\n```\ncredit_expiration_time: 2h     # 2 hours\n```\n\nLANGUAGE: YAML\nCODE:\n```\ncredit_expiration_time: 2d     # 2 days\n```\n\n----------------------------------------\n\nTITLE: Get Use BCP - Python\nDESCRIPTION: This method controls whether tests in this class should use BCP (Base Communication Protocol). The default is False.  Override to return True to enable BCP in your test class.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nget_use_bcp()\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_use_bcp(self):\n    return True\n```\n\n----------------------------------------\n\nTITLE: Set Pulse On Hit Rule\nDESCRIPTION: Configures a rule on the system11 overlay. If the driver is not on the A/C relay, it passes the call onto the parent platform. Uses settings like `enable_switch` and `coil`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/system11.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef set_pulse_on_hit_rule(enable_switch, coil):\n    Configure a rule on the system11 overlay.\n\n    Will pass the call onto the parent platform if the driver is not on A/C relay.\n```\n\n----------------------------------------\n\nTITLE: Get Config File - Python\nDESCRIPTION: Returns the name of the machine configuration file used for tests. Override this method in test classes to specify the desired config file. The returned string should include the '.yaml' file extension.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n`get_config_file()`\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_config_file(self):\n    return 'my_config.yaml'\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Version\nDESCRIPTION: This command checks the installed version of Python 3.  The output should show something like `Python 3.7.3`.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/virtual-machine/basic-guide.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\npython3 -V\n```\n\n----------------------------------------\n\nTITLE: Accrual Scoring Configuration in MPF (YAML)\nDESCRIPTION: This configuration demonstrates how to use an accrual to increase a score multiplier in MPF.  The `my_accrual` accrual increments based on `event1_to_increase_multiplier`, `event2_to_increase_multiplier`, and `event3_to_increase_multiplier`. The `variable_player` section defines how the player's score is updated based on the accrual's current value. Requires `ball_started` event to start the mode.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_logic/logic_blocks/scoring_based_on_logic_blocks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n##! mode: test\nmode:\n  start_events: ball_started\naccruals:\n  my_accrual:\n    events:\n      - event1_to_increase_multiplier\n      - event2_to_increase_multiplier\n      - event3_to_increase_multiplier\n    events_when_complete: go_bumper\n    reset_on_complete: false\nvariable_player:\n  some_score_event:\n    score: 10000 * (device.accruals.my_accrual.value[0] + device.accruals.my_accrual.value[1] + device.accruals.my_accrual.value[2] + 1)\n##! test\n#! # no progress\n#! start_game\n#! assert_mode_running test\n#! post some_score_event\n#! assert_player_variable 10000 score\n#! stop_game\n#! # some progress\n#! start_game\n#! assert_mode_running test\n#! post event1_to_increase_multiplier\n#! post some_score_event\n#! assert_player_variable 20000 score\n#! stop_game\n#! # some progress\n#! start_game\n#! assert_mode_running test\n#! post event3_to_increase_multiplier\n#! post event3_to_increase_multiplier\n#! post some_score_event\n#! assert_player_variable 20000 score\n#! stop_game\n#! # more progress\n#! start_game\n#! assert_mode_running test\n#! post event3_to_increase_multiplier\n#! post event2_to_increase_multiplier\n#! post some_score_event\n#! assert_player_variable 30000 score\n#! stop_game\n#! # full progress\n#! start_game\n#! assert_mode_running test\n#! post event3_to_increase_multiplier\n#! post event2_to_increase_multiplier\n#! post event1_to_increase_multiplier\n#! post some_score_event\n#! assert_player_variable 40000 score\n#! stop_game\n```\n\n----------------------------------------\n\nTITLE: Handling Game Start Request\nDESCRIPTION: This code defines the `request_to_start_game` method, which handles the result of the request_to_start_game event. If ball search is running, this method will return False to prevent the game from starting. This method also posts the ball_search_prevents_game_start event if ball search is started. It takes optional keyword arguments.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/misc_components/BallSearch.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef request_to_start_game(**kwargs):\n    \"\"\"Handle result of the request_to_start_game event.\n\n    If ball search is running, this method will return False to prevent the game from starting while ball search is running.\n\n    This method also posts the ball_search_prevents_game_start event if ball search is started.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Complete Configuration for Trough with Two Coils in MPF\nDESCRIPTION: This snippet shows the complete configuration for an older-style trough with two coils and switches for each ball. It encompasses the definitions for switches, coils, ball devices (drain, trough, and plunger lane), virtual platform settings, and the playfield configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_multiple_switches.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n#config_version=5\nswitches:\n  s_drain:\n    number: 1\n  s_trough1:\n    number: 2\n  s_trough2:\n    number: 3\n  s_trough3:\n    number: 4\n  s_plunger:\n    number: 10\n\nvirtual_platform_start_active_switches: s_trough1, s_trough2, s_trough3\n\ncoils:\n  c_drain_eject:\n    number: 3\n    default_pulse_ms: 20\n  c_trough_release:\n    number: 4\n    default_pulse_ms: 20\n\nball_devices:\n  bd_drain:\n    ball_switches: s_drain\n    eject_coil: c_drain_eject\n    eject_targets: bd_trough\n    tags: drain\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3\n    eject_coil: c_trough_release\n    eject_targets: bd_plunger_lane\n    tags: home, trough\n    eject_timeouts: 3s\n  bd_plunger_lane:\n    ball_switches: s_plunger\n    mechanical_eject: true\n    eject_timeouts: 5s\n\nplayfields:\n  playfield:\n    default_source_device: bd_plunger_lane\n    tags: default\n```\n\n----------------------------------------\n\nTITLE: Invalid Missing Hyphen in File YAML\nDESCRIPTION: This YAML snippet shows an invalid file show configuration where the hyphen (-) is missing before the `duration` key in the show step. This is a common error, resulting in an improperly formatted list. This would also trigger the `CFE-show-1` error.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/logs/CFE-show-1.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n# INVALID FILE SHOW\n#show_version=5\nduration: 1    # note the missing dash here\nlights:\n  led1: red\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.is_ok_to_light() - Python\nDESCRIPTION: Check if it’s possible to light an extra ball. Returns True or False. This method checks to see if the group is enabled and whether the max_lit setting has been exceeded.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nis_ok_to_light() → bool\n```\n\n----------------------------------------\n\nTITLE: Playfield event_ball_search_disable() Method\nDESCRIPTION: Describes the `event_ball_search_disable()` method, which disables ball search for the playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nevent_ball_search_disable(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.event_award_lit() - Python\nDESCRIPTION: Handle award_lit control event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nevent_award_lit(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Trough Eject Targets in MPF (YAML)\nDESCRIPTION: This snippet shows how to configure the trough to include the plunger device as an eject target.  This ensures that when the trough ejects a ball, it can send it to the plunger lane. This configures the `eject_targets` setting of the `bd_trough` ball device.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/plungers/coil_fired.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nball_devices:\n  bd_trough:\n    ball_switches: s_trough1, s_trough2, s_trough3, s_trough4, s_trough_jam\n    eject_coil: c_trough_eject\n    tags: trough, home, drain\n    jam_switch: s_trough_jam\n    eject_coil_jam_pulse: 15ms\n    eject_targets: bd_plunger\n#!   bd_plunger:\n#!     ball_switches: s_plunger_lane\n#!     eject_coil: c_plunger\n```\n\n----------------------------------------\n\nTITLE: Logic Blocks Configuration (Old)\nDESCRIPTION: This YAML snippet demonstrates the old configuration style for logic blocks in MPF versions prior to 0.50. It shows how counters were nested under a 'logic_blocks' key.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/logic_blocks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogic_blocks:\n  counters:\n    your_counter:\n      count_events: count_it_up\n```\n\n----------------------------------------\n\nTITLE: Stop Client (Python)\nDESCRIPTION: Stops the client connection. This method is used to terminate the simulated BCP client connection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MockBcpClient.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nstop()\n\nStop client connection.\n```\n\n----------------------------------------\n\nTITLE: Qualify Mode by Hitting Shots YAML\nDESCRIPTION: This snippet demonstrates how to qualify and start modes by hitting specific shots a certain number of times. It uses counters to track the number of hits and event players to start and stop modes. It includes a test section to verify the configuration.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/game_design/mode_selection.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n##! mode: left_ramp\n# mode: left_ramp\nmode:\n  start_events: start_mode_left_ramp\n  stop_events: stop_mode_left_ramp\nevent_player:\n  left_ramp_complete: stop_mode_left_ramp, enable_qualify\n##! mode: right_ramp\n# mode: right_ramp\nmode:\n  start_events: start_mode_right_ramp\n  stop_events: stop_mode_right_ramp\nevent_player:\n  right_ramp_complete: stop_mode_right_ramp, enable_qualify\n##! mode: qualify\n# mode: qualify\nmode:\n  start_events: ball_started\ncounters:\n  left_ramp_qualify_counter:\n    starting_count: 0\n    count_complete_value: 3\n    events_when_complete: disable_qualify, start_mode_left_ramp\n    enable_events: enable_qualify\n    disable_events: disable_qualify\n    start_enabled: true\n    persist_state: true\n    reset_on_complete: false\n    restart_events: reset_qualify_modes\n    count_events: left_ramp_hit\n  right_ramp_qualify_counter:\n    starting_count: 0\n    count_complete_value: 3\n    events_when_complete: disable_qualify, start_mode_right_ramp\n    enable_events: enable_qualify\n    disable_events: disable_qualify\n    start_enabled: true\n    persist_state: true\n    reset_on_complete: false\n    restart_events: reset_qualify_modes\n    count_events: right_ramp_hit\n##! test\n#! # start game hit both shots twice\n#! start_game\n#! post left_ramp_hit\n#! post left_ramp_hit\n#! post right_ramp_hit\n#! post right_ramp_hit\n#! # no game mode running yet\n#! assert_mode_not_running left_ramp\n#! assert_mode_not_running right_ramp\n#! # hit left ramp the third time. left ramp mode should start\n#! post left_ramp_hit\n#! assert_mode_running left_ramp\n#! assert_mode_not_running right_ramp\n#! # hitting the right ramp should not start the right ramp mode (since left ramp is runnin)\n#! post right_ramp_hit\n#! assert_mode_running left_ramp\n#! assert_mode_not_running right_ramp\n#! # assume that we completed left ramp mode\n#! post left_ramp_complete\n#! assert_mode_not_running left_ramp\n#! assert_mode_not_running right_ramp\n#! # hit the right ramp to start right ramp mode\n#! post right_ramp_hit\n#! assert_mode_not_running left_ramp\n#! assert_mode_running right_ramp\n```\n\n----------------------------------------\n\nTITLE: Get Enable Plugins - Python\nDESCRIPTION: This method controls whether MPF plugins should be loaded during tests in a given class.  The default is False; override this to return True to enable plugins for the test class.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nget_enable_plugins()\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_enable_plugins(self):\n    return True\n```\n\n----------------------------------------\n\nTITLE: Checking Unordered Sequence Equality in MpfTestCase\nDESCRIPTION: This method asserts that two sequences contain the same elements regardless of their order. It utilizes the Counter object to compare the frequency of each element in both sequences. This is useful for comparing lists or other iterable objects where the order of elements is not important.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfTestCase.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.assertEqual(Counter(list(first)),\n  Counter(list(second)))\n```\n\n----------------------------------------\n\nTITLE: Increase log verbosity for MPF-MC (console)\nDESCRIPTION: This command increases the verbosity of the MPF media controller logs for more detailed debugging.  The `-v` and `-V` flags enable higher levels of logging, providing insights into media-related operations. It needs to run in a separate terminal from MPF game.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/troubleshooting/general_debugging.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ mpf mc -v -V\n```\n\n----------------------------------------\n\nTITLE: Configure physical DMD device\nDESCRIPTION: This snippet shows how to configure a physical DMD device in the `dmds:` section of the machine config file. It sets the number of shades to 16, which is a common setting for modern DMDs.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/fast/dmd.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ndmds:\n  my_dmd:\n    shades: 16\n```\n\n----------------------------------------\n\nTITLE: Configuring a Light Connected to a Driver\nDESCRIPTION: This snippet shows how to configure a light that is connected to a driver instead of directly to a light controller. The 'platform' is set to 'drivers', and the 'number' refers to the name of the coil configured as a driver. The coil must be configured with `allow_enable: true` to permit continuous 100% on state without PWM.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/lights.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\ncoils:\n  light_connected_to_a_driver:\n    number: 42           # number depends on your platform\n    allow_enable: true   # this will allow 100% enable without pwm\nlights:\n  light_on_a_driver:\n    number: light_connected_to_a_driver    # map this light to a driver\n    platform: drivers\n```\n\n----------------------------------------\n\nTITLE: Configure Drain and Trough Switches in YAML\nDESCRIPTION: This code snippet shows how to define switches for the drain and trough in the `switches:` section of the MPF configuration file. Each switch is assigned a unique number that corresponds to its connection to the control system.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_one_switch.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nswitches:\n  s_drain:\n    number: 1\n  s_trough_enter:\n    number: 2\n```\n\n----------------------------------------\n\nTITLE: Get Switch Count Command (0x09)\nDESCRIPTION: This command retrieves the number of switches available. It does not require any payload and returns a single byte representing the switch count (0 to 127).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_12\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tExample\tComment\n0\t1\t9\tCommand 9 - Get Switch Count\n```\n\n----------------------------------------\n\nTITLE: Set Solenoid Recycle Time (0x19) Command Structure\nDESCRIPTION: This snippet describes the structure of the 'Set Solenoid Recycle Time' command (0x19). It outlines the payload's byte-level organization, which includes the solenoid index and the desired recycle time in milliseconds. The recycle time prevents overheating by limiting the frequency of solenoid pulses.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_30\n\nLANGUAGE: None\nCODE:\n```\nByte           Length         Description\n-------------- -------------- ------------------------------------------\n1              1              Index `c` of the solenoid to configure\n\n2              1              Recycle time in ms (0-255)-\n```\n\n----------------------------------------\n\nTITLE: Run Ubuntu Mate Welcome (as sudo)\nDESCRIPTION: This command starts the Ubuntu Mate Welcome application with root privileges.  It is used to fix issues with the Software Boutique on Pine64 installations. Clicking the \"Subscribe to updates\" button within the Welcome application is a necessary step in the fixing process.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/install/linux/pine64.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ubuntu-mate-welcome\n```\n\n----------------------------------------\n\nTITLE: Executing MPF as a Python Script\nDESCRIPTION: This snippet illustrates how to execute MPF as a Python script instead of an executable. This is useful when starting MPF in debug mode from PyCharm. The <path>/<script>.py needs to be replaced by the actual path.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/introduction/debug.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython <path>/<script>.py\n```\n\n----------------------------------------\n\nTITLE: Get Firmware Version Command (0x01)\nDESCRIPTION: This command (0x01) requests the firmware version of the hardware board. It does not require any payload. The response is a null-terminated string representing the firmware version, which MPF parses as a semantic version.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nByte        Length      Example     Comment\n---------- ----------- ----------- -----------------------------------\n0           1           1           Command 1 - Get Firmware Version\n```\n\n----------------------------------------\n\nTITLE: Playfield unexpected_ball_received() Method\nDESCRIPTION: Describes the `unexpected_ball_received()` method, which handles the event when an unexpected ball is received by the playfield.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/playfields.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nunexpected_ball_received()\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration to Validator in Python\nDESCRIPTION: The `add_to_config_validator()` method adds a config dict to validator.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfGameTestCase.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nstatic add_to_config_validator(machine, key, new_dict)\n```\n\n----------------------------------------\n\nTITLE: Warning Log (Python)\nDESCRIPTION: Logs a message at the warning level.  These messages are displayed in the console and stored in the log file. The `msg` parameter contains the log message, while `context` and `error_no` provide additional information about the logged event.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MockBcpClient.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nwarning_log(msg: str, *args, context=None, error_no=None, **kwargs) → None\n\nLog a message at the warning level.\n\nThese messages will always be shown in the console and the log file.\n```\n\n----------------------------------------\n\nTITLE: Initialize SpiBitBangPlatform\nDESCRIPTION: This snippet shows the `initialize` method of the `SpiBitBangPlatform` class. It registers a handler for late initialization.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/spi_bit_bang.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ninitialize()\n```\n\n----------------------------------------\n\nTITLE: Cloning MPF Repository with Git\nDESCRIPTION: This command is used to clone a forked MPF repository from GitHub to a local machine. It downloads all the project files and Git history to the specified folder.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/about/contributing_to_mpf.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR_GITHUB_HANDLE/mpf/\n```\n\n----------------------------------------\n\nTITLE: Configuring Regular Coils in MPF (YAML)\nDESCRIPTION: This snippet demonstrates how to configure regular coils (solenoids) in MPF using the `coils:` section.  The `number` field corresponds to the solenoid number from the machine's operator's manual, prefixed with `c`. The `default_pulse_ms` specifies the default pulse time in milliseconds.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/machines/wpc.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncoils:\n  c_trough_eject:\n    number: c01\n    default_pulse_ms: 25\n  c_bottom_popper:\n    number: c02\n    default_pulse_ms: 25\n  c_plunger_lane:\n    number: c03\n    default_pulse_ms: 25\n```\n\n----------------------------------------\n\nTITLE: Configuring a Tilt Switch with LISY80 in YAML\nDESCRIPTION: This snippet demonstrates a basic configuration for a tilt switch connected to a LISY80 system within MPF.  The `number` parameter specifies the switch matrix number to which the tilt switch is connected.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/switches_lisy80.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitches:\n  tilt:\n    number: 57\n```\n\n----------------------------------------\n\nTITLE: Configure Trough Ball Device with Eject Coil Enable Time in YAML\nDESCRIPTION: This code snippet shows how to configure the trough ball device (`bd_trough`) in the `ball_devices:` section and includes `eject_coil_enable_time` to enable the coil for a period after ejecting the ball.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mechs/troughs/two_coil_one_switch.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nball_devices:\n  bd_trough:\n    entrance_switch: s_trough_enter\n    entrance_switch_full_timeout: 500ms\n    ball_capacity: 3\n    eject_coil: c_trough_release\n    eject_coil_enable_time: 100ms\n    eject_targets: bd_plunger_lane\n    tags: trough, home\n    eject_timeouts: 3s\n```\n\n----------------------------------------\n\nTITLE: Initialise platform (Python)\nDESCRIPTION: Initialises the smart virtual platform once all devices are ready. This method likely sets up the simulated hardware environment.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/smart_virtual.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstart()\n```\n\n----------------------------------------\n\nTITLE: Starting the Tilt Mode\nDESCRIPTION: Starts the tilt mode, allowing it to monitor tilt events. The mode priority can be specified, and a callback can be defined to be executed once the mode has started. This method should not be overridden, instead, mode_start should be used.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/tilt.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nstart(mode_priority=None, callback=None, **kwargs) → None\n```\n\n----------------------------------------\n\nTITLE: Get Sound Count Command (0x05)\nDESCRIPTION: This command (0x05) requests the number of sounds available on the hardware platform. It does not require any payload. The response is a single byte representing the number of sounds (0-255).\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nByte        Length      Example     Comment\n---------- ----------- ----------- -----------------------------------\n0           1           5           Command 5 - Get Sound Count\n```\n\n----------------------------------------\n\nTITLE: Assert Warning Triggered - Python\nDESCRIPTION: This assertion checks whether a specific warning is triggered by a callable function. It can be used directly or as a context manager to inspect the triggered warning's attributes. Requires specifying the expected warning class ('expected_warning').\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nassertWarns(expected_warning, *args, **kwargs)\n```\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertWarns(SomeWarning):\n    do_something()\n```\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertWarns(SomeWarning) as cm:\n    do_something()\n    the_warning = cm.warning\n    self.assertEqual(the_warning.some_attribute, 147)\n```\n\n----------------------------------------\n\nTITLE: Getting Setting Value Label (Python)\nDESCRIPTION: Details how to retrieve the label for a setting's value. The setting name is required, and the method returns the label associated with the current value.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/core/settings.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nget_setting_value_label(setting_name)\n```\n\n----------------------------------------\n\nTITLE: Get Absolute Machine Path - Python\nDESCRIPTION: This function retrieves the absolute path to the machine folder being used for the tests. It's essential for accessing machine configuration files and related resources.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfFakeGameTestCase.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nget_absolute_machine_path()\n```\n\n----------------------------------------\n\nTITLE: Set Status of Simple Lamp to Off Command (0x0C)\nDESCRIPTION: This command sets a simple lamp to the 'off' state. The payload is the index of the lamp to be turned off. No response is expected.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_19\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tDescription\n1\t1\tIndex `l` of the lamp to set to off\n```\n\n----------------------------------------\n\nTITLE: Configure the On-Screen Window (YAML)\nDESCRIPTION: This snippet configures the settings for the on-screen display window, including its width, height, and title. The 'window:' section controls the appearance of the window that will display the DMD output. The `source_display` setting is not needed when a logical display named 'window' exists.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/mc/displays/rgb_dmd.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwindow:\n  width: 600\n  height: 200\n  title: Mission Pinball Framework\n##! test\n#! post show_slide_event\n#! advance_time_and_run .1\n```\n\n----------------------------------------\n\nTITLE: Example Response to Get Simple Lamp Count (0x03)\nDESCRIPTION: Example of the response to the 'Get Simple Lamp Count' command (0x03).  In this example, the platform supports 64 simple lamps with numbers 0 to 63.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nByte        Length      Example     Comment\n---------- ----------- ----------- -----------------------------------\n0           1           64          Platform supports 64 simple lamps\n                                     with numbers 0 to 63.\n```\n\n----------------------------------------\n\nTITLE: ExtraBallGroup.format_log_line() - Python\nDESCRIPTION: Return a formatted log line with log link and context.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/extra_ball_groups.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nformat_log_line(msg, context, error_no) → str\n```\n\n----------------------------------------\n\nTITLE: Symlink Godot Executable (MacOS)\nDESCRIPTION: This snippet provides a command for MacOS users to create a symbolic link to the Godot executable, allowing it to be run from the command line. This is useful for running Godot without the editor open.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/gmc/setup.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsudo ln -s /Applications/Godot.app/Contents/MacOS/Godot /usr/local/bin/godot\n```\n\n----------------------------------------\n\nTITLE: Get API Version Command (0x02)\nDESCRIPTION: This command (0x02) requests the API version. It does not require any payload. The response is a null-terminated string representing the API version, expected to be '0.08' for this version of the protocol.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nByte        Length      Example     Comment\n---------- ----------- ----------- -----------------------------------\n0           1           2           Command 2 - Get API Version\n```\n\n----------------------------------------\n\nTITLE: Parse Light Number to Channels (Python)\nDESCRIPTION: Parses the light number to determine the associated channels for the driver light. This method is essential for mapping logical light numbers to physical driver channels.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/drivers.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nparse_light_number_to_channels(number: str, subtype: str)\n```\n\n----------------------------------------\n\nTITLE: Logging Assertion example using assertLogs\nDESCRIPTION: This example shows how to use `assertLogs` as a context manager to capture log messages of a certain level or higher.  It asserts that log messages were emitted on a specific logger or its children, and provides access to the formatted log messages and LogRecord objects for further inspection.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/MpfBcpTestCase.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertLogs('foo', level='INFO') as cm:\n  logging.getLogger('foo').info('first message')\n  logging.getLogger('foo.bar').error('second message')\nself.assertEqual(cm.output, ['INFO:foo:first message',\n  'ERROR:foo.bar:second message'])\n```\n\n----------------------------------------\n\nTITLE: Stopping Trinamics Platform - Python\nDESCRIPTION: This snippet showcases the `stop` method, used to gracefully shut down the Trinamics Step Rocker platform. It typically involves closing the serial communication channel and releasing any acquired resources.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/hardware_platforms/trinamics_steprocker.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nstop()\n```\n\n----------------------------------------\n\nTITLE: Stopping the Match Mode\nDESCRIPTION: Details how to stop the `match` mode using the `stop()` method. It describes the `callback` parameter and cautions against overriding the method. The function returns `true` if the mode is running.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/modes/match.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nstop(callback: Any = None, **kwargs) → bool\n```\n\n----------------------------------------\n\nTITLE: Copy macOS CMakeLists.txt to libpinproc directory\nDESCRIPTION: This command copies the macOS-specific CMakeLists.txt file from the osx-proc-support directory to the libpinproc directory. This CMakeLists.txt file contains the correct paths and configurations for building libpinproc on macOS.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/multimorphic/mac.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncp -r ~/proc/osx-proc-support/CMakeLists.txt ~/proc/libpinproc\n```\n\n----------------------------------------\n\nTITLE: Exit MPF Service CLI\nDESCRIPTION: Exits the service CLI. The game will reset and start.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/tools/service_cli.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nexit/quit\n```\n\n----------------------------------------\n\nTITLE: Initializing the Pin2DmdHardwarePlatform\nDESCRIPTION: This method initializes the PIN2DMD hardware platform. It performs any necessary setup and communication with the hardware to prepare it for use.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/devices/pin2dmd.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Initialization Done (Python)\nDESCRIPTION: Called when initialization is complete and all boot holds have been cleared, signaling that the machine is ready to run.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/code/api_reference/testing_class_api/TestMachineController.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ninit_done() → None\n\nFinish init.\n\nCalled when init is done and all boot holds are cleared.\n```\n\n----------------------------------------\n\nTITLE: Example Get Status of Solenoid Command (0x14)\nDESCRIPTION: Example of querying the status of solenoid 25.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/hardware/lisy/protocol.md#_snippet_22\n\nLANGUAGE: none\nCODE:\n```\nByte\tLength\tExample\tComment\n0\t1\t20\tCommand 20 - Get Status of Solenoid\n1\t1\t25\tQuery status of solenoid 25\n```\n\n----------------------------------------\n\nTITLE: Defining a List of Events for the Auditor in MPF (YAML)\nDESCRIPTION: This snippet shows how to define a list of events to be saved by the auditor in an MPF YAML config file. The `save_events` setting is configured as a list, with each event on its own line, indented, and preceded by a dash. This example lists the `game_started`, `ball_ended`, and `game_ended` events.\nSOURCE: https://github.com/missionpinball/mpf-docs/blob/main/docs/config/instructions/lists.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauditor:\n  save_events:   # This config wants a list\n    - game_started    # This is the first list item\n    - ball_ended    # This is the second list item\n    - game_ended    # This is the third list item\n```"
  }
]