[
  {
    "owner": "alex8088",
    "repo": "electron-conf",
    "content": "TITLE: Using electron-conf in Electron Main Process (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use electron-conf in the Electron main process to set, get, and delete configuration values.  It initializes a Conf instance, sets a value for the key 'foo', retrieves it, sets a nested property using dot-notation, retrieves the parent object 'a', and then deletes the 'foo' key. The code relies on the 'electron-conf/main' module.\nSOURCE: https://github.com/alex8088/electron-conf/blob/main/README.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Conf } from 'electron-conf/main'\n\nconst conf = new Conf()\n\nconf.set('foo', 'ðŸŒˆ')\nconsole.log(conf.get('foo')) // => ðŸŒˆ\n\n// Use dot-notation to access nested properties\nconf.set('a.b', true)\nconsole.log(conf.get('a')) // => {b: true}\n\nconf.delete('foo')\nconsole.log(conf.get('foo')) // => undefined\n```\n\n----------------------------------------\n\nTITLE: Using electron-conf in Electron Renderer Process (TypeScript)\nDESCRIPTION: This code snippet demonstrates using electron-conf in the Electron renderer process.  It imports Conf from 'electron-conf/renderer', creates a new instance, and asynchronously sets a value. Requires the Conf API to be exposed to the renderer process via a preload script or global exposure. All operations are promise-based in the renderer.\nSOURCE: https://github.com/alex8088/electron-conf/blob/main/README.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { Conf } from 'electron-conf/renderer'\n\nconst conf = new Conf()\n\nawait conf.set('foo', 1)\n```\n\n----------------------------------------\n\nTITLE: Exposing Conf API in Preload Script (TypeScript)\nDESCRIPTION: This code snippet illustrates how to expose the Conf API to the renderer process using a preload script.  It imports the exposeConf function from 'electron-conf/preload' and calls it to make the Conf API available.  This approach is recommended for enhanced security.\nSOURCE: https://github.com/alex8088/electron-conf/blob/main/README.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { exposeConf } from 'electron-conf/preload'\n\nexposeConf()\n```\n\n----------------------------------------\n\nTITLE: Installing electron-conf Package\nDESCRIPTION: This command installs the electron-conf package using npm, adding it as a dependency to your project.  It allows you to manage application configuration easily. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/alex8088/electron-conf/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install electron-conf\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Items in Config (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to set multiple configuration items at once using the `set` method of the `conf` object.  It passes an object containing key-value pairs to the `set` method.  The keys `foo` and `bar` are updated with the provided values.  Assumes `conf` is an instance of `electron-conf`.\nSOURCE: https://github.com/alex8088/electron-conf/blob/main/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconf.set({ foo: 'boo', bar: { baz: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Schema Definition for electron-conf (TypeScript)\nDESCRIPTION: This snippet shows how to define a JSON schema for data validation with electron-conf.  It creates a schema object that specifies the type and constraints of the 'foo' property.  This schema is then passed as an option to the Conf constructor. It relies on the 'electron-conf/main' module.\nSOURCE: https://github.com/alex8088/electron-conf/blob/main/README.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { Conf } from 'electron-conf/main'\n\nconst schema = {\n  type: 'object',\n  properties: {\n    foo: {\n      type: 'string',\n      maxLength: 10,\n      nullable: true\n    }\n  }\n}\n\nconst conf = new Conf({ schema })\n```\n\n----------------------------------------\n\nTITLE: Migration Definition for electron-conf (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define migrations for electron-conf to update configuration data between versions. It defines an array of migration objects, each specifying a version and a hook function to perform the migration.  The migrations are then passed to the Conf constructor. It relies on the 'electron-conf/main' module.\nSOURCE: https://github.com/alex8088/electron-conf/blob/main/README.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { Conf } from 'electron-conf/main'\n\nconst migrations = [\n  {\n    version: 1,\n    hook: (conf, version): void => {\n      conf.set('foo', 'a')\n      console.log(`migrate from ${version} to 1`) // migrate from 0 to 1\n    }\n  },\n  {\n    version: 2,\n    hook: (conf, version): void => {\n      conf.set('foo', 'b')\n      console.log(`migrate from ${version} to 2`) // migrate from 1 to 2\n    }\n  }\n]\n\nconst conf = new Conf({ migrations })\n```\n\n----------------------------------------\n\nTITLE: Globally Exposing Conf API in Main Process (TypeScript)\nDESCRIPTION: This snippet shows how to expose the Conf API globally to all renderer processes from the main process. It imports the useConf function from 'electron-conf/main' and calls it.  Use with caution, as it exposes the API to all renderers.\nSOURCE: https://github.com/alex8088/electron-conf/blob/main/README.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { useConf } from 'electron-conf/main'\n\nuseConf()\n```\n\n----------------------------------------\n\nTITLE: Registering Renderer Listener in Main Process (TypeScript)\nDESCRIPTION: This snippet shows how to register a renderer listener in the Electron main process to enable usage of electron-conf in the renderer process. It instantiates a Conf object and calls the registerRendererListener method.  Requires the 'electron-conf/main' module.\nSOURCE: https://github.com/alex8088/electron-conf/blob/main/README.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Conf } from 'electron-conf/main'\n\nconst conf = new Conf()\n\nconf.registerRendererListener()\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from onDidChange Listener (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to unsubscribe from an `onDidChange` listener in `electron-conf`.  The `onDidChange` method returns a function (`unsubscribe`) that, when called, removes the listener.  This prevents the callback function from being executed on subsequent changes to the specified key. Assumes `conf` is an instance of `electron-conf`.\nSOURCE: https://github.com/alex8088/electron-conf/blob/main/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst unsubscribe = conf.onDidChange(key, callback)\n\nunsubscribe()\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from onDidAnyChange Listener (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to unsubscribe from an `onDidAnyChange` listener in `electron-conf`. The `onDidAnyChange` method returns a function (`unsubscribe`) that, when called, removes the listener. This prevents the callback function from being executed on subsequent changes to the entire config object. Assumes `store` is an instance of `electron-conf`.\nSOURCE: https://github.com/alex8088/electron-conf/blob/main/README.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst unsubscribe = store.onDidAnyChange(callback)\n\nunsubscribe()\n```"
  }
]