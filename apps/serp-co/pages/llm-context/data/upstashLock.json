[
  {
    "owner": "upstash",
    "repo": "lock",
    "content": "TITLE: Basic Lock Implementation with @upstash/lock\nDESCRIPTION: Example showing how to use the Lock class to implement mutual exclusion for a critical section. It demonstrates acquiring a lock, executing protected code, and releasing the lock.\nSOURCE: https://github.com/upstash/lock/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Lock } from \"@upstash/lock\";\nimport { Redis } from \"@upstash/redis\";\n\nasync function handleOperation() {\n  const lock = new Lock({\n    id: \"unique-lock-id\",\n    redis: Redis.fromEnv(),\n  });\n\n  if (await lock.acquire()) {\n    // Perform your critical section that requires mutual exclusion\n    await criticalSection();\n    await lock.release();\n  } else {\n    // handle lock acquisition failure\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounce Functionality with @upstash/lock\nDESCRIPTION: Example showing how to implement a debounced function using the Debounce class. It demonstrates creating a debounced wrapper around an expensive operation that will only execute once per specified wait period across all instances.\nSOURCE: https://github.com/upstash/lock/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Lock } from \"@upstash/lock\";\nimport { Redis } from \"@upstash/redis\";\nimport { expensiveWork } from \"my-app\";\n\nconst debouncedFunction = new Debounce({\n  id: \"unique-function-id\",\n  redis: Redis.fromEnv(),\n\n  // Wait time of 1 second\n  // The debounced function will only be called once per second across all instances\n  wait: 1000,\n\n  // Callback function to be debounced\n  callback: (arg) => {\n    doExpensiveWork(arg);\n  },\n});\n\n// This example function is called by our app to trigger work we want to only happen once per wait period\nasync function triggerExpensiveWork(arg: string) {\n  // Call the debounced function\n  // This will only call the callback function once per wait period\n  await debouncedFunction.call(arg)\n}\n```\n\n----------------------------------------\n\nTITLE: Lock Constructor Configuration in TypeScript\nDESCRIPTION: Shows the constructor parameters for creating a Lock instance, including required and optional configuration parameters such as lock ID, Redis connection, lease duration, and retry options.\nSOURCE: https://github.com/upstash/lock/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew Lock({\n  id: string,\n  redis: Redis, // ie. Redis.fromEnv(), new Redis({...})\n  lease: number, // default: 10000 ms\n  retry: {\n    attempts: number, // default: 3\n    delay: number, // default: 100 ms\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Lock Acquire Method Signature in TypeScript\nDESCRIPTION: Method signature for the acquire method of the Lock class, which attempts to acquire the distributed lock and returns a boolean indicating success or failure.\nSOURCE: https://github.com/upstash/lock/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync acquire(config?: LockAcquireConfig): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Lock Release Method Signature in TypeScript\nDESCRIPTION: Method signature for the release method of the Lock class, which attempts to release a previously acquired lock and returns a boolean indicating success or failure.\nSOURCE: https://github.com/upstash/lock/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync release(): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Debounce Constructor Configuration in TypeScript\nDESCRIPTION: Shows the constructor parameters for creating a Debounce instance, including required configuration parameters such as function ID, Redis connection, wait duration, and the callback function to debounce.\nSOURCE: https://github.com/upstash/lock/blob/main/README.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nnew Debounce({\n  id: string,\n  redis: Redis, // ie. Redis.fromEnv(), new Redis({...})\n  wait: number, // default: 1000 ms\n  callback: (...arg: any[]) => any // The function to be debounced\n});\n```\n\n----------------------------------------\n\nTITLE: Debounce Call Method Signature in TypeScript\nDESCRIPTION: Method signature for the call method of the Debounce class, which triggers the debounced function with provided arguments. The function will only be executed once per wait period.\nSOURCE: https://github.com/upstash/lock/blob/main/README.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nasync call(...args: any[]): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Lock Extend Method Signature in TypeScript\nDESCRIPTION: Method signature for the extend method of the Lock class, which attempts to extend the lease duration of an acquired lock and returns a boolean indicating success or failure.\nSOURCE: https://github.com/upstash/lock/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync extend(amt: number): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Lock GetStatus Method Signature in TypeScript\nDESCRIPTION: Method signature for the getStatus method of the Lock class, which checks the current status of a lock (acquired or free) and returns the corresponding LockStatus enum value.\nSOURCE: https://github.com/upstash/lock/blob/main/README.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync getStatus(): Promise<LockStatus>\n```\n\n----------------------------------------\n\nTITLE: Installing @upstash/lock with NPM\nDESCRIPTION: Command to install the @upstash/lock package using NPM package manager.\nSOURCE: https://github.com/upstash/lock/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @upstash/lock\n```\n\n----------------------------------------\n\nTITLE: Installing @upstash/lock with PNPM\nDESCRIPTION: Command to install the @upstash/lock package using PNPM package manager.\nSOURCE: https://github.com/upstash/lock/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @upstash/lock\n```\n\n----------------------------------------\n\nTITLE: Installing @upstash/lock with Bun\nDESCRIPTION: Command to install the @upstash/lock package using Bun package manager.\nSOURCE: https://github.com/upstash/lock/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun add @upstash/lock\n```"
  }
]