[
  {
    "owner": "sendarcade",
    "repo": "solana-app-kit",
    "content": "TITLE: Monitoring Dynamic Wallet in TypeScript\nDESCRIPTION: This method monitors the Dynamic wallet for changes. It accepts parameters for handling wallet connection and setting status messages, and returns a Promise that resolves to void.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useDynamicWalletLogic/functions/useDynamicWalletLogic.mdx#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nmonitorDynamicWallet: (__namedParameters) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using usePrivyWalletLogic() for Wallet Management - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `usePrivyWalletLogic` hook to log in using an email address and monitor the user's wallet connection after logging in. It shows the integration of wallet management in a Solana application using Privy's services.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/walletProviders/privy/functions/usePrivyWalletLogic.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { \n  user, \n  isReady, \n  solanaWallet, \n  handlePrivyLogin, \n  monitorSolanaWallet \n} = usePrivyWalletLogic();\n\n// Login with email\nawait handlePrivyLogin({ \n  loginMethod: 'email', \n  setStatusMessage: (msg) => setStatus(msg) \n});\n\n// Monitor wallet after login\nawait monitorSolanaWallet({\n  selectedProvider: 'privy',\n  setStatusMessage: (msg) => setStatus(msg),\n  onWalletConnected: (info) => {\n    dispatch(setAddress(info.address));\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Priority Transaction with Solana\nDESCRIPTION: > **sendPriorityTransaction**(`provider`, `feeTier`, `instructions`, `connection`, `walletPublicKey`, `feeMapping`): `Promise`\\<`string`\\>  \nThis function sends a transaction to the Solana blockchain, where the fee tier and instructions dictate the transaction's priority and details. It requires a connection to the Solana network and the public key of the wallet to perform the transaction. The function returns a promise that resolves to a string, which is presumably the transaction ID.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/transactions/sendPriorityTx/functions/sendPriorityTransaction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sendPriorityTransaction(provider, feeTier, instructions, connection, walletPublicKey, feeMapping): Promise<string> { // implementation details }\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Service Hook in a Component - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Transaction Service hook within a React component to send SOL by creating and sending a transaction instruction. It imports necessary modules and handles transaction errors with a try-catch block.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/walletProviders/services/transaction/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransactionService } from '../../services/transaction/transactionService';\nimport { Connection, clusterApiUrl, SystemProgram, PublicKey } from '@solana/web3.js';\n\nfunction MyComponent() {\n  const { signAndSendInstructions, signAndSendBase64, currentProvider } = useTransactionService();\n  const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n  async function handleSendSol() {\n    try {\n      // Create transfer instruction\n      const instructions = [\n        SystemProgram.transfer({\n          fromPubkey: new PublicKey('your-public-key'),\n          toPubkey: new PublicKey('recipient-public-key'),\n          lamports: 1000000, // 0.001 SOL\n        }),\n      ];\n\n      // Get wallet provider\n      const provider = await getWalletProvider(); // Your function to get the current provider\n\n      // Send transaction\n      const signature = await signAndSendInstructions(\n        instructions,\n        new PublicKey('your-public-key'),\n        provider,\n        connection,\n        {\n          statusCallback: (status) => console.log(`Transaction status: ${status}`),\n        }\n      );\n\n      console.log(`Transaction sent: ${signature}`);\n    } catch (error) {\n      console.error('Transaction failed:', error);\n    }\n  }\n\n  return <Button title=\"Send SOL\" onPress={handleSendSol} />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Wallet Logic Hook in TypeScript\nDESCRIPTION: This hook returns an object with methods for handling Dynamic wallet login, logout, and monitoring, as well as user and wallet address states. It's designed to simplify Dynamic wallet integration in Solana applications.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useDynamicWalletLogic/functions/useDynamicWalletLogic.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseDynamicWalletLogic(): object\n```\n\n----------------------------------------\n\nTITLE: Using Auth State Functions in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Redux hooks to dispatch actions related to user authentication, such as updating the username and profile picture. It showcases interaction with the Redux store within a React component.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/state.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDispatch, useSelector } from 'react-redux';\nimport { \n  loginSuccess, \n  logoutSuccess, \n  updateUsername, \n  updateProfilePic \n} from 'solana-app-kit';\n\n// In your component\nconst dispatch = useDispatch();\nconst { user, isLoggedIn } = useSelector(state => state.auth);\n\n// Update username\nconst changeUsername = () => {\n  dispatch(updateUsername({ \n    userId: user.id, \n    newUsername: 'newUsername' \n  }));\n};\n\n// Update profile picture\nconst changeProfilePic = (imageUrl) => {\n  dispatch(updateProfilePic(imageUrl));\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Market for a Token on Solana\nDESCRIPTION: This function creates a new market for a token on the Solana blockchain. It takes various parameters including connection details, token information, and fee settings. The function returns a promise that resolves to an object containing the base token mint, market address, and transaction signature.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/tokenMill/tokenMillService/functions/createMarket.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateMarket(__namedParameters): Promise<{ baseTokenMint: string; marketAddress: string; txSignature: string; }>\n```\n\n----------------------------------------\n\nTITLE: Installing Solana App Kit via NPX\nDESCRIPTION: Command to install the Solana App Kit library using NPX package runner. This is the initial setup step required before using the library in a React Native project.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx install solana-app-kit\n```\n\n----------------------------------------\n\nTITLE: Defining DynamicConfig Interface in TypeScript\nDESCRIPTION: Interface definition specifying required configuration properties for a Solana application. Contains three required string properties: environmentId for environment identification, appName for application name, and appLogoUrl for application logo URL reference.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/interfaces/DynamicConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DynamicConfig {\n  environmentId: string;\n  appName: string;\n  appLogoUrl: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Cryptocurrency Market Data with TypeScript\nDESCRIPTION: Example implementation showing how to fetch and display market data for Solana cryptocurrency using the getCoinMarkets function. Demonstrates error handling and formatting of price, market cap, and 24-hour price change data.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/coingeckoService/functions/getCoinMarkets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCoinMarkets } from 'services/coingeckoService';\n\nasync function fetchSolanaMarketData() {\n  try {\n    const solanaData = await getCoinMarkets('solana');\n    console.log(`Current Solana price: $${solanaData.current_price}`);\n    console.log(`Market Cap: $${solanaData.market_cap.toLocaleString()}`);\n    console.log(`24h Change: ${solanaData.price_change_percentage_24h.toFixed(2)}%`);\n  } catch (error) {\n    console.error('Failed to fetch Solana market data:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Service Class Directly - TypeScript\nDESCRIPTION: This snippet demonstrates how to directly use the TransactionService class to send a transaction, specifying the transaction data and wallet provider type. It establishes a connection to the Solana network and sends the transaction.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/walletProviders/services/transaction/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TransactionService } from '../../services/transaction/transactionService';\n\nasync function sendTransaction(transaction, provider) {\n  const connection = new Connection(clusterApiUrl('mainnet-beta'));\n\n  return TransactionService.signAndSendTransaction(\n    { type: 'transaction', transaction },\n    { type: 'autodetect', provider, currentProvider: 'privy' },\n    { connection }\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Token Account Balance in TypeScript\nDESCRIPTION: Retrieves the balance for a given token account address using Solana blockchain interactions. Returns a Promise with the account balance details. Used for querying token-specific account balances.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/common/fetch/functions/fetchTokenAccountBalance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fetchTokenAccountBalance(tokenAccount: string): Promise<any>\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Token Accounts with TypeScript React Hook\nDESCRIPTION: A React hook that fetches token accounts for a provided Solana wallet address. It returns an object containing an array of token entries with metadata, a loading state indicator, and potential error messages. The hook automatically refreshes when the wallet address changes.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useFetchTokens/functions/useFetchTokens.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseFetchTokens(walletAddress?: string): { \n  tokens: TokenEntry[];\n  loading: boolean;\n  error: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Setup\nDESCRIPTION: Example environment variables configuration for the app, including blockchain, authentication, and API keys.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Blockchain\nCLUSTER=mainnet-beta\n\n# Authentication\nPRIVY_APP_ID=your_privy_app_id\nPRIVY_CLIENT_ID=your_privy_client_id\nDYNAMIC_ENVIRONMENT_ID=your_dynamic_env_id\n\n# Turnkey wallet\nTURNKEY_BASE_URL=https://api.turnkey.com\nTURNKEY_RP_ID=host.exp.exponent\nTURNKEY_RP_NAME=send-fi\nTURNKEY_ORGANIZATION_ID=your_turnkey_organization_id\nTURNKEY_API_PUBLIC_KEY=your_turnkey_public_key\nTURNKEY_API_PRIVATE_KEY=your_turnkey_private_key\n\n# APIs\nHELIUS_API_KEY=your_helius_api_key\nHELIUS_RPC_CLUSTER=mainnet\nHELIUS_STAKED_URL=your_helius_staked_url\nHELIUS_STAKED_API_KEY=your_helius_staked_api_key\nSERVER_URL=your_server_url\nTENSOR_API_KEY=your_tensor_api_key\nPARA_API_KEY=your_para_api_key\nCOINGECKO_API_KEY=your_coingecko_api_key\nBIRDEYE_API_KEY=your_birdeye_api_key\nCOIN_MARKE_CAPAPI_KEY=your_coinmarketcap_api_key\n```\n\n----------------------------------------\n\nTITLE: Funding Market Function Definition in TokenMill Service\nDESCRIPTION: TypeScript function definition for fundMarket that handles funding a market. Takes connection, marketAddress, provider and userPublicKey as parameters and returns a Promise resolving to a string.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/tokenMill/tokenMillService/functions/fundMarket.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfundMarket({ connection, marketAddress, provider, userPublicKey }: {\n  connection: Connection,\n  marketAddress: string,\n  provider: any,\n  userPublicKey: string\n}): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining EmbeddedWalletAuth Component in TypeScript React\nDESCRIPTION: This function defines the EmbeddedWalletAuth component, which provides embedded wallet authentication functionality. It accepts props of type EmbeddedWalletAuthProps and an optional deprecated legacy context parameter.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/wallet/EmbeddedWallet/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(props: EmbeddedWalletAuthProps, deprecatedLegacyContext?: any): ReactNode\n```\n\n----------------------------------------\n\nTITLE: React Hook: usePumpfun Implementation for Token Operations\nDESCRIPTION: A React custom hook that provides functionality for buying, selling, and launching Pumpfun tokens on Solana. The hook returns an object with three main functions: buyToken, sellToken, and launchToken, each handling specific token operations with different parameter requirements.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/usePumpFun/functions/usePumpfun.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nusePumpfun(): {\n  buyToken: ({ solAmount, tokenAddress }: { solAmount: number, tokenAddress: string }) => Promise<void>;\n  sellToken: ({ tokenAddress, tokenAmount }: { tokenAddress: string, tokenAmount: number }) => Promise<void>;\n  launchToken: ({ \n    description?: string,\n    imageUri: string,\n    solAmount: number,\n    telegram?: string,\n    tokenName: string,\n    tokenSymbol: string,\n    twitter?: string,\n    website?: string \n  }) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useTradeTransaction Hook Interface in TypeScript\nDESCRIPTION: The type definition for the useTradeTransaction hook that returns an object with two methods: sendTrade for direct SOL transfers and replicateJupiterTrade for Jupiter swap replication.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useTradeTransaction/functions/useTradeTransaction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseTradeTransaction(): { \n  sendTrade: (mode: 'priority' | 'jito', recipient: string, amountSol: number) => Promise<void>; \n  replicateJupiterTrade: (tradeData: TradeData, mode: 'priority' | 'jito') => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for EmbeddedWalletAuthProps\nDESCRIPTION: Interface defining props for embedded wallet authentication component. Includes optional authMode property for login/signup and required onWalletConnected callback that handles wallet connection information.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/wallet/EmbeddedWallet/interfaces/EmbeddedWalletAuthProps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EmbeddedWalletAuthProps {\n  authMode?: \"login\" | \"signup\";\n  onWalletConnected: (info: {\n    address: string;\n    provider: \"privy\" | \"dynamic\" | \"turnkey\";\n  }) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Sign and Send Base64 Encoded Solana Transaction\nDESCRIPTION: This TypeScript function, `signAndSendBase64Tx`, takes a base64-encoded Solana transaction, a Solana connection, and a provider (e.g., Privy) as input. It deserializes the transaction, signs it using the provider, and sends it to the Solana network using the provided connection. The function returns a Promise that resolves to the transaction signature (a string).\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/transactions/transactionUtils/functions/signAndSendBase64Tx.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > **signAndSendBase64Tx**(`base64Tx`, `connection`, `provider`): `Promise`\\<`string`\\>\n */\n\n/**\n * > **signAndSendBase64Tx**(`base64Tx`, `connection`, `provider`): `Promise`\\<`string`\\>\n *\n * Defined in: [src/utils/transactions/transactionUtils.ts:40](https://github.com/SendArcade/solana-app-kit/blob/bd4b3556b8f469c27ebb06f4df65b3a36b43ba3b/src/utils/transactions/transactionUtils.ts#L40)\n *\n * Takes a base64-encoded transaction (could be legacy or versioned),\n * deserializes it, and then uses Privy provider to sign+send.\n */\n\n/**\n * ### base64Tx\n *\n * `string`\n */\n\n/**\n * ### connection\n *\n * `Connection`\n */\n\n/**\n * ### provider\n *\n * `any`\n */\n\n/**\n * ### Returns\n *\n * `Promise`\\<`string`\\>\n */\n```\n\n----------------------------------------\n\nTITLE: Using PumpfunBuySection Component\nDESCRIPTION: This code snippet demonstrates how to use the `PumpfunBuySection` component to create a form for buying tokens on Pump.fun. It shows how to apply custom styles to the container, input fields, and button, as well as how to customize the buy button label. The component is imported from `@solana-app-kit/pumpfun`.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/pumpFun/README.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PumpfunBuySection } from '@solana-app-kit/pumpfun';\n\n// Usage\n<PumpfunBuySection\n  containerStyle={styles.customContainer}\n  inputStyle={styles.customInput}\n  buttonStyle={styles.customButton}\n  buyButtonLabel=\"Purchase Token\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using ThreadComposer Component in React with TypeScript\nDESCRIPTION: An example of how to implement the ThreadComposer component in a React application. It shows passing a current user, an optional parent ID for replies, a callback function for when posts are created, and theme customization options.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/ThreadComposer/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ThreadComposer\n  currentUser={user}\n  parentId=\"post-123\" // Optional, for replies\n  onPostCreated={() => refetchPosts()}\n  themeOverrides={{ '--primary-color': '#1D9BF0' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Token Market - TokenMill Service - TypeScript\nDESCRIPTION: Showcases the creation of a new token market using the TokenMillService. Requires specific parameters including token name, symbol, metadata URI, and supply details. Assumes a valid Solana `Connection` and user wallet object are provided, along with necessary callbacks for status updates. Handles market creation within the Solana blockchain's token ecosystem, leveraging the TokenMill's createMarket service.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/tokenMill/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TokenMillService } from 'solana-app-kit/modules/tokenMill';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\n// Example: Create a token market\nasync function createNewToken() {\n  const connection = new Connection('your-rpc-url', 'confirmed');\n  \n  try {\n    const result = await TokenMillService.createMarket({\n      tokenName: 'My Token',\n      tokenSymbol: 'MTK',\n      metadataUri: 'https://example.com/metadata.json',\n      totalSupply: 1000000,\n      creatorFee: 2.5,  // 2.5%\n      stakingFee: 1.0,  // 1%\n      userPublicKey: 'your-wallet-public-key',\n      connection,\n      solanaWallet: yourWalletInstance,\n      onStatusUpdate: (status) => console.log(status),\n    });\n    \n    console.log('Market created:', result.marketAddress);\n    console.log('Token mint:', result.baseTokenMint);\n  } catch (error) {\n    console.error('Failed to create market:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Processing Utilities - TypeScript\nDESCRIPTION: This segment encompasses three transaction processing utilities that handle specific transaction functionalities such as computing budget price setting and bundling transactions for the Jito block engine.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/utils.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Transaction processing utilities:\n// sendPriorityTx.ts - Uses ComputeBudgetProgram.setComputeUnitPrice for a single sign+send\n// sendJitoBundleTx.ts - Sends versioned transactions to Jito's block engine\n// jitoBundling.ts - Contains logic to create a \"bundle\" of transactions for Jito\n```\n\n----------------------------------------\n\nTITLE: Defining the StandardWallet Interface\nDESCRIPTION: This code snippet defines the `StandardWallet` interface, which outlines the common properties and methods that all wallet providers must implement. This interface ensures that all providers offer a consistent set of functionalities, simplifying the integration process.  The interface includes properties for the provider name, wallet address, public key, and the raw wallet object, as well as methods for retrieving the provider and wallet information.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/walletProviders/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StandardWallet {\n  provider: string;\n  address: string | null;\n  publicKey: string | null;\n  rawWallet: any;\n  getProvider: () => Promise<any>;\n  getWalletInfo: () => { walletType: string; address: string | null };\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Collection Floor Purchase Function\nDESCRIPTION: Asynchronous function to handle the purchase of the floor NFT from a collection, managing the entire transaction flow.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostCTA/functions/default.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handleBuyCollectionFloor(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Declaring useAuth Function in TypeScript\nDESCRIPTION: This snippet defines the useAuth function with its complex return type. The function handles authentication logic for different wallet providers, including Privy, Dynamic, and potentially Turnkey.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useAuth/functions/useAuth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction useAuth(): { loginWithApple: () => Promise<void>; loginWithEmail: () => Promise<void>; loginWithGoogle: () => Promise<void>; loginWithSMS: undefined; logout: () => Promise<void>; solanaWallet: EmbeddedSolanaWalletState; status: string; user: null | PrivyUser; } | { loginWithApple: undefined; loginWithEmail: () => Promise<void>; loginWithGoogle: () => Promise<void>; loginWithSMS: () => Promise<void>; logout: () => Promise<void>; solanaWallet: undefined; status: string; user: any; } | { loginWithApple: undefined; loginWithEmail: () => Promise<void>; loginWithGoogle: undefined; loginWithSMS: undefined; logout: () => Promise<void>; solanaWallet: undefined; status: string; user: null; } | { loginWithApple: undefined; loginWithEmail: undefined; loginWithGoogle: undefined; loginWithSMS: undefined; logout: () => Promise<void>; solanaWallet: undefined; status: string; user: undefined; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Pump.fun Token Operations in JavaScript\nDESCRIPTION: Demonstrates how to create, buy and sell tokens using the Pump.fun service. Includes error handling and integration with the pumpfunService module from solana-app-kit.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/functions/pump.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pumpfunService } from 'solana-app-kit';\n\n// Create and buy a new token\nasync function launchToken() {\n  try {\n    const result = await pumpfunService.createAndBuyTokenViaPumpfun({\n      name: 'My Token',\n      symbol: 'MTK',\n      description: 'My first token on Pump.fun',\n      amountInSol: 0.1\n    });\n    console.log('Token created:', result);\n  } catch (error) {\n    console.error('Error creating token:', error);\n  }\n}\n\n// Buy an existing token\nasync function purchaseToken(tokenAddress) {\n  try {\n    const result = await pumpfunService.buyTokenViaPumpfun({\n      tokenAddress,\n      amountInSol: 0.5\n    });\n    console.log('Purchase successful:', result);\n  } catch (error) {\n    console.error('Error purchasing token:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PostHeader Component in React/TypeScript\nDESCRIPTION: Example usage of the PostHeader component showing how to implement it with post data, menu handlers, delete functionality, and theme customization. The component displays user profile information, verification status, and post metadata in a thread interface.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostHeader/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<PostHeader\n  post={postData}\n  onPressMenu={(post) => handleMenuPress(post)}\n  onDeletePost={(post) => handleDelete(post)}\n  themeOverrides={{ '--primary-color': '#1D9BF0' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Utilizing Services for On-Chain Operations\nDESCRIPTION: This snippet provides an example of using the pumpfunService for buying tokens within the solana-app-kit library and also describes how to leverage pre-built screens for navigation.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/use.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pumpfunService, PumpfunScreen, NftScreen } from 'solana-app-kit';\n\n// Using services directly\nasync function buyToken() {\n  try {\n    const result = await pumpfunService.buyTokenViaPumpfun({\n      // transaction parameters...\n    });\n    // Handle result\n  } catch (error) {\n    // Handle error\n  }\n}\n\n// Or use pre-built screens\nfunction MyApp() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"PumpFun\" component={PumpfunScreen} />\n        <Stack.Screen name=\"NFTs\" component={NftScreen} />\n        {/* Other screens */}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing swapTokens Function in TypeScript\nDESCRIPTION: This TypeScript function, swapTokens, is designed to perform token swaps on the Solana blockchain. It requires several parameters, including a Connection object, market address, a provider, swap amount, swap type (either 'buy' or 'sell'), and the user's public key. The function returns a Promise resolving to a string. It handles the core logic for executing token swaps within the Solana ecosystem.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/tokenMill/tokenMillService/functions/swapTokens.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nswapTokens(__namedParameters: { connection: Connection, marketAddress: string, provider: any, swapAmount: number, swapType: 'buy' | 'sell', userPublicKey: string }): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Using PostFooter Component in React with TypeScript\nDESCRIPTION: Example usage of the PostFooter component that shows how to implement it with a post data object, a comment handler function, and custom theme overrides. This component displays engagement metrics and action buttons below a post.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostFooter/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<PostFooter\n  post={postData}\n  onPressComment={handleCommentPress}\n  themeOverrides={customTheme}\n/>\n```\n\n----------------------------------------\n\nTITLE: Funding Users with WSOL in Solana\nDESCRIPTION: Function that funds a user wallet with Wrapped SOL (WSOL) tokens. Takes a connection object, provider, signer public key, and SOL amount as parameters. Returns a Promise containing a transaction string.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/tokenMill/tokenMillService/functions/fundUserWithWSOL.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfundUserWithWSOL({ connection, provider, signerPublicKey, solAmount }): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Required Server Environment Variables Configuration\nDESCRIPTION: List of required environment variables for server setup, including wallet keys, RPC URLs, IPFS configurations, database connections, and Turnkey API credentials.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nWALLET_PRIVATE_KEY=your_wallet_private_key\nRPC_URL=your_helius_rpc_url\nTOKEN_MILL_PROGRAMID=your_token_mill_program_id\nTOKEN_MILL_CONFIG_PDA=your_token_mill_config_pda\nSWAP_AUTHORITY_KEY=your_swap_authority_key\n\n# Pinata for IPFS\nPINATA_JWT=your_pinata_jwt\nPINATA_GATEWAY=your_pinata_gateway\nPINATA_SECRET=your_pinata_secret\nPINATA_API_KEY=your_pinata_api_key\n\n# Database and Storage\nDATABASE_URL=your_postgresql_url\nGCS_BUCKET_NAME=your_gcs_bucket_name\nSERVICE_ACCOUNT_EMAIL=your_service_account_email\n\n# Turnkey\nTURNKEY_API_URL=https://api.turnkey.com\nTURNKEY_ORGANIZATION_ID=your_turnkey_organization_id\nTURNKEY_API_PUBLIC_KEY=your_turnkey_api_public_key\nTURNKEY_API_PRIVATE_KEY=your_turnkey_api_private_key\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Logic with useAuth\nDESCRIPTION: The useAuth hook provides central authentication logic using Privy, Dynamic, or Turnkey services. It dispatches Redux actions to manage authentication state effectively, specifically handling login and logout success scenarios.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/hooks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks/useAuth.ts\nimport { useDispatch } from 'react-redux';\n\nconst useAuth = () => {\n    const dispatch = useDispatch();\n    \n    const login = async (credentials) => {\n        // authentication logic\n        dispatch(loginSuccess(user));\n    };\n\n    const logout = () => {\n        // logout logic\n        dispatch(logoutSuccess());\n    };\n\n    return { login, logout };\n};\nexport default useAuth;\n```\n\n----------------------------------------\n\nTITLE: TypeScript React Hook Definition - useCoingecko\nDESCRIPTION: Type definition for the useCoingecko hook that returns an object containing coin list management, single coin selection, market data, OHLC data, status indicators, and action functions. The hook handles fetching and caching of CoinGecko data with comprehensive error handling.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useCoingecko/functions/useCoingecko.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseCoingecko(): {\n  coinList: Array<{ id: string; symbol: string; name: string }>;\n  loadingCoinList: boolean;\n  coinListError: string | null;\n  searchResults: Array<{ id: string; symbol: string; name: string }>;\n  searchCoins: (query: string) => void;\n  fetchCoinList: () => Promise<void>;\n  selectedCoinId: string;\n  setSelectedCoinId: (id: string) => void;\n  timeframe: Timeframe;\n  setTimeframe: (tf: Timeframe) => void;\n  marketCap: number;\n  liquidityScore: number;\n  fdv: number;\n  graphData: number[];\n  timestamps: number[];\n  timeframePrice: number;\n  timeframeChangeUsd: number;\n  timeframeChangePercent: number;\n  loadingMarketData: boolean;\n  loadingOHLC: boolean;\n  coinError: string | null;\n  refreshCoinData: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: AuthProviderConfig Interface Definition in TypeScript\nDESCRIPTION: Defines the interface for authentication provider configuration including login methods and provider-specific settings for Privy, Dynamic, and Turnkey providers.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/interfaces/AuthProviderConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AuthProviderConfig {\n  loginMethods: (\"email\" | \"sms\" | \"google\" | \"apple\")[];\n  provider: \"privy\" | \"dynamic\" | \"turnkey\";\n  privy: PrivyConfig;\n  dynamic: DynamicConfig;\n  turnkey: TurnkeyConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Component Documentation Example\nDESCRIPTION: Example of proper documentation for a component using JSDoc/TSDoc style comments. Shows how to document a component with usage examples, parameter descriptions, and implementation notes.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A reusable button component that supports custom styling.\n * @component\n * @example\n * <MyButton onPress={handlePress} label=\"Click Me\" styleOverrides={myStyles} />\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchBar Component in React/TypeScript\nDESCRIPTION: A reusable search bar component that includes a magnifying glass icon, text input field with placeholder, and text clearing functionality. The component maintains its own state for search text and integrates with the app's design system.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/WalletSlide/searchBar/searchBar/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchBar />\n```\n\n----------------------------------------\n\nTITLE: Fetching User's Solana Balance - TypeScript\nDESCRIPTION: The `fetchSolBalance` function takes a user's public key as a string parameter and returns a promise that resolves to either a number representing the user's Solana balance or null if the balance couldn't be determined. This function is critical for applications that interact with the Solana blockchain for balance checks.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/common/fetch/functions/fetchSolBalance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfetchSolBalance(userPublicKey): Promise<null | number>\n```\n\n----------------------------------------\n\nTITLE: Using the useWallet Hook in a React Component\nDESCRIPTION: This code snippet demonstrates how to use the `useWallet` hook within a React component to access wallet-related functionalities such as connecting to a wallet, retrieving the wallet address, sending transactions, and identifying the wallet provider.  It provides a simple and consistent way to interact with different wallet providers within your application, abstracting away the provider-specific details.  The snippet shows how to access the wallet object, the wallet address, the connection status, the sendTransaction function, and boolean flags that indicate which provider is active.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/walletProviders/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWallet } from 'src/modules/embeddedWalletProviders/hooks/useWallet';\n\nfunction MyComponent() {\n  const {\n    wallet,\n    address,\n    connected,\n    sendTransaction,\n    isDynamic,\n    isPrivy,\n    isMWA\n  } = useWallet();\n  \n  // Now you can use these wallet functions and properties\n  // regardless of the underlying provider\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread Component in React with TypeScript\nDESCRIPTION: Example usage of the Thread component showing how to render threaded posts with user interaction handlers. The component supports root posts display, current user context, header visibility toggle, and post interaction callbacks.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/Thread/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Thread\n  rootPosts={posts}\n  currentUser={user}\n  showHeader={true}\n  onPostCreated={() => refetchPosts()}\n  onPressPost={(post) => handlePostPress(post)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Sending Jito Bundle Transaction in Solana\nDESCRIPTION: A function for sending complex transactions through Jito's block engine, supporting different fee tiers and custom transaction instructions. Requires manual partial signing instead of standard signAndSendTransaction approach.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/transactions/sendJitoBundleTx/functions/sendJitoBundleTransaction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sendJitoBundleTransaction(\n  provider: any, \n  feeTier: \"low\" | \"medium\" | \"high\" | \"very-high\", \n  instructions: TransactionInstruction[], \n  walletPublicKey: PublicKey, \n  connection: Connection, \n  feeMapping: Record<string, number>\n): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Implementing PortfolioItem Component in React\nDESCRIPTION: Example of how to use the PortfolioItem component to display token information in a portfolio. The component accepts properties including image path, token name, token amount, USD value, and profit percentage.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/WalletSlide/portfolioItem/portfolioItem/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<PortfolioItem\n  imagePath={require('./token-icon.png')}\n  tokenName=\"Solana\"\n  tokenAmount=\"123.45\"\n  usdValue=\"$1,234.56\"\n  profit=\"+12.34%\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining TradeData Interface for Solana Token Swaps in TypeScript\nDESCRIPTION: This interface defines the data structure for token trades/swaps in a Solana application. It includes properties for input and output tokens with their mint addresses, amounts, symbols, and optional USD values. The interface supports aggregator information for the DEX or service used for trading.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Common/TradeCard/TradeCard/interfaces/TradeData.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TradeData {\n  inputMint: string;\n  outputMint: string;\n  inputAmountLamports?: string;\n  outputAmountLamports?: string;\n  aggregator?: string;\n  inputSymbol: string;\n  inputQuantity: string;\n  inputUsdValue?: string;\n  outputSymbol: string;\n  outputQuantity: string;\n  outputUsdValue?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PUBLIC_KEYS Constant Object in TypeScript\nDESCRIPTION: Defines a constant object PUBLIC_KEYS with properties for defaultReceiver, jitoTipAccounts, and wSolMint. These are Solana public addresses used in the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/constants/variables/PUBLIC_KEYS.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst PUBLIC_KEYS: object = {\n  defaultReceiver: '24MDwQXG2TWiST8ty1rjcrKgtaYaMiLdRxFQawYgZh4v',\n  jitoTipAccounts: string[],\n  wSolMint: 'So11111111111111111111111111111111111111112'\n}\n```\n\n----------------------------------------\n\nTITLE: ProfileInfo Props Interface Definition\nDESCRIPTION: TypeScript interface defining the required and optional props for the ProfileInfo component, including profile data and callback functions.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/ProfileInfo/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProfileInfoProps {\n  profilePicUrl: string;\n  username: string;\n  userWallet: string;\n  isOwnProfile: boolean;\n  onAvatarPress?: () => void;\n  onEditProfile?: () => void;\n  bioText?: string;\n  amIFollowing?: boolean;\n  areTheyFollowingMe?: boolean;\n  onFollowPress?: () => void;\n  onUnfollowPress?: () => void;\n  followersCount?: number;\n  followingCount?: number;\n  onPressFollowers?: () => void;\n  onPressFollowing?: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Base64 Transaction - TypeScript\nDESCRIPTION: This snippet shows how to send a base64-encoded transaction using the Transaction Service hook. It utilizes the signing and sending functionality while also providing a status callback and several options for confirmation and retries.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/walletProviders/services/transaction/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransactionService } from '../../services/transaction/transactionService';\n\nfunction handleBase64Transaction(base64Tx: string) {\n  const { signAndSendBase64 } = useTransactionService();\n  const connection = new Connection(clusterApiUrl('mainnet-beta'), 'confirmed');\n  const provider = await getWalletProvider(); // Your function to get the current provider\n\n  const signature = await signAndSendBase64(\n    base64Tx,\n    provider,\n    connection,\n    {\n      confirmTransaction: true,\n      maxRetries: 5,\n      statusCallback: (status) => console.log(status),\n    }\n  );\n\n  return signature;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using usePumpFun Hook\nDESCRIPTION: This code demonstrates how to use the `usePumpFun` hook to access methods for buying, selling, and launching tokens through Pump.fun. It shows how to call the `buyToken` method with parameters such as `tokenAddress`, `solAmount`, and `onStatusUpdate`. It also includes error handling using a try-catch block.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/pumpFun/README.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePumpFun } from '@solana-app-kit/pumpfun';\n\nfunction MyComponent() {\n  const { buyToken, sellToken, launchToken } = usePumpFun();\n  \n  const handleBuyToken = async () => {\n    try {\n      await buyToken({\n        tokenAddress: \"5tMi...\",\n        solAmount: 0.1,\n        onStatusUpdate: (status) => console.log(status)\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n  return (\n    <Button title=\"Buy Token\" onPress={handleBuyToken} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using EmbeddedWalletAuth Component in React TSX\nDESCRIPTION: This example demonstrates how to use the EmbeddedWalletAuth component in a React application. It shows setting up the component with a callback for when a wallet is connected and specifying the authentication mode.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/wallet/EmbeddedWallet/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<EmbeddedWalletAuth\n  onWalletConnected={({provider, address}) => {\n    console.log(`Connected with ${provider}: ${address}`);\n  }}\n  authMode=\"login\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Token Vesting Schedule in Solana\nDESCRIPTION: Function that creates a vesting schedule for tokens on Solana blockchain. Takes parameters including base token mint, connection, market address, provider, user public key, and vesting amount. Returns a promise containing the ephemeral vesting public key and transaction signature.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/tokenMill/tokenMillService/functions/createVesting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateVesting(__namedParameters): Promise<{ ephemeralVestingPubkey: string; txSignature: string; }>\n```\n\n----------------------------------------\n\nTITLE: Defining TradeCardProps Interface in TypeScript\nDESCRIPTION: Interface definition for TradeCard component props including trade callback, theme overrides, style overrides, and user stylesheet options. The interface provides type safety for the TradeCard component's configuration options.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Common/TradeCard/TradeCard/interfaces/TradeCardProps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TradeCardProps {\n  tradeData: TradeData;\n  onTrade?: () => void;\n  themeOverrides?: Partial<Record<string, any>>;\n  styleOverrides?: {\n    [key: string]: object;\n  };\n  userStyleSheet?: {\n    [key: string]: object;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using TradeModal Component in a React Application\nDESCRIPTION: Example of how to implement the TradeModal component within a React application. Shows how to configure the component with props to handle visibility, token selection, callbacks, and user profile information.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/trade/TradeModal/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<TradeModal\n  visible={showTradeModal}\n  onClose={() => setShowTradeModal(false)}\n  currentUser={userProfile}\n  onPostCreated={() => refetchPosts()}\n  initialInputToken={{\n    address: 'So11111111111111111111111111111111111111112',\n    symbol: 'SOL',\n    name: 'Solana',\n    decimals: 9,\n    logoURI: 'https://...'\n  }}\n  initialOutputToken={{\n    address: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    symbol: 'USDC',\n    name: 'USD Coin',\n    decimals: 6,\n    logoURI: 'https://...'\n  }}\n  disableTabs={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining the Service Pattern in TypeScript\nDESCRIPTION: This snippet provides a template for creating a service class in TypeScript, encapsulating configuration and core functionality along with parameterized operations and error handling. It demonstrates how to define a class, constructor, and a method with JSDoc comments for documentation.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/service/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Service class or functions export\nexport class ExampleService {\n  private config: ExampleServiceConfig;\n  \n  constructor(config: ExampleServiceConfig) {\n    this.config = config;\n  }\n  \n  /**\n   * Performs a specific operation\n   * @param param1 Description of parameter 1\n   * @param param2 Description of parameter 2\n   * @returns Operation result\n   */\n  public async performOperation(param1: string, param2: number): Promise<OperationResult> {\n    try {\n      // Implementation logic\n      return result;\n    } catch (error) {\n      console.error('Error in performOperation:', error);\n      throw new Error(`Failed to perform operation: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Filtering CoinGecko Cryptocurrency Data in TypeScript\nDESCRIPTION: Example showing how to fetch the complete coin list from CoinGecko API and filter for Solana-related coins. The function handles API responses and includes error handling for failed requests. Returns a Promise containing an array of coin objects with id, symbol, and name properties.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/coingeckoService/functions/getCoinList.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCoinList } from 'services/coingeckoService';\n\nasync function fetchCoins() {\n  try {\n    const coins = await getCoinList();\n    console.log(`Loaded ${coins.length} coins`);\n    \n    // Example of filtering coins\n    const solanaRelated = coins.filter(coin => \n      coin.name.toLowerCase().includes('solana') ||\n      coin.symbol.toLowerCase().includes('sol')\n    );\n  } catch (error) {\n    console.error('Failed to fetch coin list:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ThreadPost Interface in TypeScript\nDESCRIPTION: This code snippet defines the ThreadPost interface with properties for post ID, parent ID, user information, content sections, timestamps, and interaction counts. It also includes optional properties for reactions.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.types/interfaces/ThreadPost.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ThreadPost {\n  id: string;\n  parentId?: null | string;\n  user: ThreadUser;\n  sections: ThreadSection[];\n  createdAt: string;\n  replies: ThreadPost[];\n  reactionCount: number;\n  retweetCount: number;\n  quoteCount: number;\n  reactions?: {\n    [key: string]: number;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SwapCard Default Function Component in TypeScript/React\nDESCRIPTION: Function component definition that accepts Props as named parameters and returns a React Element. Located in the SwapCard.tsx file under the tokenMill components directory.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/SwapCard/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(__namedParameters: Props): Element\n```\n\n----------------------------------------\n\nTITLE: Defining sellTokenViaPumpfun Function in TypeScript\nDESCRIPTION: This snippet defines the sellTokenViaPumpfun function, which sells tokens using either Pump.fun or Raydium DEX. It takes parameters for the seller's public key, token address, amount, and Solana wallet, and returns a promise with the transaction result.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/pumpfun/pumpfunService/functions/sellTokenViaPumpfun.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsellTokenViaPumpfun(`params`): `Promise<{ success: boolean; txId: string }>`\n```\n\n----------------------------------------\n\nTITLE: Defining buyTokenViaPumpfun Function in TypeScript\nDESCRIPTION: This snippet defines the buyTokenViaPumpfun function, which purchases tokens via Pump.fun or Raydium based on token availability. It takes parameters for the buyer's public key, token address, SOL amount, and Solana wallet for signing transactions.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/pumpfun/pumpfunService/functions/buyTokenViaPumpfun.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuyTokenViaPumpfun(`params`): `Promise<{ success: boolean; txId: string }>`\n```\n\n----------------------------------------\n\nTITLE: Implementing ThreadItem Component in React/TypeScript\nDESCRIPTION: Example usage of the ThreadItem component showing how to render a single post within a thread. The component accepts props for post data, current user, root posts collection, depth level, and post interaction handlers.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/ThreadItem/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ThreadItem\n  post={postData}\n  currentUser={user}\n  rootPosts={allPosts}\n  depth={0}\n  onPressPost={handlePostPress}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting MarketCreationCard React Component in TypeScript\nDESCRIPTION: A default export function that takes a Props parameter and returns a React Element. This component is part of the tokenMill components in the solana-social-kit project.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/MarketCreationCard/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(__namedParameters): Element\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Flow Navigator in TypeScript\nDESCRIPTION: This snippet defines an authentication navigator with multiple screens through a stack navigator. It includes screens for login, registration, and password recovery.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/navigation/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction AuthNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Login\" component={LoginScreen} />\n      <Stack.Screen name=\"Register\" component={RegisterScreen} />\n      <Stack.Screen name=\"ForgotPassword\" component={ForgotPasswordScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TradeCard Component in React/TypeScript\nDESCRIPTION: Example usage of the TradeCard component showing how to set up a trading interface between two tokens. The component accepts token information including avatars, names, and prices in both USD and SOL, and provides a callback for trade initiation.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Common/TradeCard/TradeCard/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<TradeCard\n  token1={{\n    avatar: require('./token1.png'),\n    name: 'SOL',\n    priceUsd: '$100'\n  }}\n  token2={{\n    avatar: require('./token2.png'),\n    name: 'USDC',\n    priceUsd: '$1',\n    priceSol: '0.01'\n  }}\n  onTrade={() => console.log('Trade initiated')}\n/>\n```\n\n----------------------------------------\n\nTITLE: sendTrade Method Definition for SOL Transfers\nDESCRIPTION: Method signature for sending SOL transfers with either priority fee or Jito bundle transaction modes. Takes the transaction mode, recipient address, and SOL amount as parameters.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useTradeTransaction/functions/useTradeTransaction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nsendTrade: (mode: 'priority' | 'jito', recipient: string, amountSol: number) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Gathering Thread Post Ancestors in TypeScript\nDESCRIPTION: Function that takes a post ID and array of root posts to construct the ancestor chain of posts. Returns an array of ThreadPost objects representing the ancestry path from root to the specified post.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.utils/functions/gatherAncestorChain.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngatherAncestorChain(postId: string, allRootPosts: ThreadPost[]): ThreadPost[]\n```\n\n----------------------------------------\n\nTITLE: Default Function Implementation in StakingCard Component\nDESCRIPTION: The default function for the StakingCard component takes props as named parameters and returns a React Element. It is defined in the StakingCard.tsx file within the components/tokenMill directory.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/StakingCard/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(__namedParameters): Element\n```\n\n----------------------------------------\n\nTITLE: Converting SOL to Lamports in TypeScript\nDESCRIPTION: The function **solToLamports** takes an amount in SOL and converts it to lamports, a smaller unit in the Solana ecosystem. It requires a single parameter, sol, which is a number representing the amount in SOL. The function returns the corresponding amount in lamports as a number.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/common/lamport/functions/solToLamports.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction solToLamports(sol: number): number {\n    return sol * 1000000000;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Components with Solana App Kit\nDESCRIPTION: This snippet demonstrates how to render a prebuilt component (Thread) from the solana-app-kit library, while retrieving user data from a Redux store or application state.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/use.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Thread } from 'solana-app-kit';\n\nfunction MyFeedScreen() {\n  // Get user data from Redux or your application state\n  const currentUser = { /* ...user data... */ };\n  \n  return (\n    <Thread \n      rootPosts={myPosts} \n      currentUser={currentUser} \n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SectionTrade Component in React/TypeScript\nDESCRIPTION: Example usage of the SectionTrade component showing how to render a trade card with token swap details. The component accepts text content and trade data as props, displaying information about input/output tokens, quantities, and USD values.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/sections/SectionTrade/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SectionTrade\n  text=\"Just executed this trade!\"\n  tradeData={{\n    inputMint: \"So11111111111111111111111111111111111111112\",\n    outputMint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    inputSymbol: \"SOL\",\n    outputSymbol: \"USDC\",\n    inputQuantity: \"1.5\",\n    outputQuantity: \"30.5\",\n    inputUsdValue: \"$45.00\",\n    outputUsdValue: \"$30.50\"\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of buyTokenViaPumpfun Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the buyTokenViaPumpfun function to purchase tokens. It includes the necessary parameters such as the buyer's public key, token address, SOL amount, and Solana wallet instance.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/pumpfun/pumpfunService/functions/buyTokenViaPumpfun.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { txId, success } = await buyTokenViaPumpfun({\n  buyerPublicKey: wallet.publicKey,\n  tokenAddress: \"5tMi5XcfuLBzxjPZ5RzPUgbcbGNnUQnBkRoqP9DP5gGF\",\n  solAmount: 0.1,\n  solanaWallet: wallet\n});\n```\n\n----------------------------------------\n\nTITLE: Example Usage of BondingCurveCard Component in React\nDESCRIPTION: This code snippet demonstrates how to use the BondingCurveCard component in a React application. It shows the required props including marketAddress, connection, publicKey, solanaWallet, and setLoading function.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/BondingCurveCard/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<BondingCurveCard\n  marketAddress=\"market_address_here\"\n  connection={solanaConnection}\n  publicKey={userPublicKey}\n  solanaWallet={wallet}\n  setLoading={setIsLoading}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of CoinDetailTopSection React Component\nDESCRIPTION: Demonstrates how to use the CoinDetailTopSection component with sample tweet data. The component displays cryptocurrency details with social media integration.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/CoinDetailTopSection/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CoinDetailTopSection\n  tweetData={[\n    {\n      username: 'Alice',\n      handle: '@alice',\n      time: '2h',\n      tweetContent: 'Check out $SEND!',\n      quoteCount: 5,\n      retweetCount: 10,\n      reactionCount: 100,\n      avatar: {uri: 'https://example.com/avatar.png'},\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Staking Tokens - TypeScript\nDESCRIPTION: The stakeTokens function accepts named parameters to initiate staking tokens on the Solana blockchain, returning a promise that resolves to a string identifier of the transaction. Required parameters include an amount, connection to the blockchain, market address, provider, and user's public key.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/tokenMill/tokenMillService/functions/stakeTokens.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function stakeTokens(__namedParameters) {\n    const { amount, connection, marketAddress, provider, userPublicKey } = __namedParameters;\n    // Implementation logic here...\n    return \"transactionId\"; // Placeholder for the transaction id\n}\n```\n\n----------------------------------------\n\nTITLE: Building PumpFun Buy Transaction in TypeScript\nDESCRIPTION: A function that constructs a Solana transaction for buying tokens on the PumpFun platform using their bonding curve mechanism. Requires specific parameters related to the token purchase and transaction details.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/pumpfun/pumpfunUtils/functions/buildPumpFunBuyTransaction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function buildPumpFunBuyTransaction(__namedParameters: PumpFunBuyParams): Promise<Transaction>\n```\n\n----------------------------------------\n\nTITLE: Defining EmbeddedWalletAuthProps Interface in TypeScript\nDESCRIPTION: This snippet defines the EmbeddedWalletAuthProps interface, which likely contains properties for authenticating an embedded wallet in a Solana application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/wallet/EmbeddedWallet/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface EmbeddedWalletAuthProps {\n  // Properties would be defined here\n}\n```\n\n----------------------------------------\n\nTITLE: Using PumpfunLaunchSection Component in React Applications\nDESCRIPTION: Example implementation of the PumpfunLaunchSection component with custom styling options. This component provides a complete interface for token creation on Pump.fun with customizable container, input, and button styles.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/PumpfunLaunchSection/functions/PumpfunLaunchSection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<PumpfunLaunchSection\n  containerStyle={styles.customContainer}\n  inputStyle={styles.customInput}\n  buttonStyle={styles.customButton}\n  launchButtonLabel=\"Create Token\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Default Function Definition for AnimatedTabIcon Component\nDESCRIPTION: A function that takes AnimatedTabIconProps as a parameter and returns a React Element. This serves as the main export for the AnimatedTabIcon component, defined in the navigation directory of the Solana App Kit.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/navigation/AnimatedTabIcon/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefault(__namedParameters: AnimatedTabIconProps): Element\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Slice with Redux Toolkit\nDESCRIPTION: Uses the 'createSlice' method from Redux Toolkit to define state and reducers for a feature. The initial state is defined, and reducers manipulate the state based on dispatched actions, such as 'setLoading'. This approach simplifies state management and action handling.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/state/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\\n// slice.ts\\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\\n\\nconst initialState: FeatureState = {\\n  data: {},\\n  loading: false,\\n  error: null,\\n};\\n\\nconst featureSlice = createSlice({\\n  name: 'feature',\\n  initialState,\\n  reducers: {\\n    setLoading: (state, action: PayloadAction<boolean>) => {\\n      state.loading = action.payload;\\n    },\\n    // ... more reducers\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Balances Using React\nDESCRIPTION: This snippet demonstrates a React component that fetches and displays the token balances for a wallet address using the custom hook 'useFetchTokens'. It handles loading and error states, and renders a list of tokens with their respective images and balances.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/dataModule/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { useFetchTokens } from '@/modules/onChainData';\n\nfunction TokenList() {\n  const { publicKey } = useWallet();\n  const walletAddress = publicKey?.toBase58();\n  const { tokens, loading, error } = useFetchTokens(walletAddress);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div>\n      {tokens.map(token => (\n        <div key={token.mint}>\n          <img src={token.image} alt={token.symbol} width={24} height={24} />\n          <span>{token.name}</span>\n          <span>{token.token_info?.balance}</span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing PriorityFeeSelector Component in React for Solana Transaction Fees\nDESCRIPTION: Example usage of the PriorityFeeSelector component. This component provides a user interface for selecting different transaction fee tiers on the Solana network (low, medium, high, and very-high) with visual feedback for the selected option, integrated with Redux for state management.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/PriorityFeeSelector/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<PriorityFeeSelector />\n```\n\n----------------------------------------\n\nTITLE: Wrapping Token Functions with usePumpfun\nDESCRIPTION: The usePumpfun hook integrates various token functionalities from Pump.fun, enabling buying, selling, and launching tokens along with error handling mechanisms. It simplifies token operations within the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/hooks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks/usePumpfun.ts\nimport { useState } from 'react';\n\nconst usePumpfun = () => {\n    const [error, setError] = useState(null);\n\n    const buyToken = async (tokenDetails) => {\n        // buy token logic\n    };\n\n    const sellToken = async (tokenDetails) => {\n        // sell token logic\n    };\n\n    const launchToken = async (tokenDetails) => {\n        // launch token logic\n    };\n\n    return { buyToken, sellToken, launchToken, error };\n};\nexport default usePumpfun;\n```\n\n----------------------------------------\n\nTITLE: Default Function Component in BlinkScreen.tsx\nDESCRIPTION: A React functional component that accepts props and an optional deprecated legacy context parameter. The component returns a ReactNode.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/BlinkScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(props, deprecatedLegacyContext?): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Using fetchFollowers Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the fetchFollowers function to retrieve and display a user's followers. It includes error handling and logging of the results.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/profileService/functions/fetchFollowers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchFollowers } from 'services/profileService';\n\nasync function displayUserFollowers(walletAddress: string) {\n  try {\n    const followers = await fetchFollowers(walletAddress);\n    console.log(`${walletAddress} has ${followers.length} followers`);\n    \n    // Example of displaying followers\n    followers.forEach(follower => {\n      console.log(`- ${follower.displayName || follower.id}`);\n    });\n    \n    return followers;\n  } catch (error) {\n    console.warn('Error retrieving followers:', error);\n    return [];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CoinDetailPeopleSection Component in React TSX\nDESCRIPTION: Example usage of the CoinDetailPeopleSection component which displays a horizontal list of suggestions and a vertical list of token holders or community users, useful for displaying social/follower data for a coin.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/CoinDetailPeopleSection/functions/CoinDetailPeopleSection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CoinDetailPeopleSection />\n```\n\n----------------------------------------\n\nTITLE: Defining TokenInfo Interface in TypeScript for Solana Token Trading\nDESCRIPTION: This TypeScript interface defines the structure for token information used in trading components. It includes properties for the token's mint address, symbol, name, decimal places, and an optional logo image URL.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/trade/SelectTokenModal/interfaces/TokenInfo.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TokenInfo {\n  address: string;    // The token's mint address\n  symbol: string;     // The token's symbol (e.g., 'SOL', 'USDC')\n  name: string;       // The token's full name\n  decimals: number;   // The number of decimal places for the token\n  logoURI?: string;   // URL to the token's logo image\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Wallet Themes in TypeScript\nDESCRIPTION: Example demonstrating how to use the getMergedWalletTheme function to merge custom theme properties with default wallet theme values. The function accepts partial theme overrides and returns a complete theme object.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/wallet/wallet.styles/functions/getMergedWalletTheme.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst customTheme = {\n  '--wallet-bg-primary': '#000000',\n  '--wallet-text-primary': '#ffffff'\n};\nconst mergedTheme = getMergedWalletTheme(customTheme);\n```\n\n----------------------------------------\n\nTITLE: Exporting IntroScreen Component in React for Solana App\nDESCRIPTION: This snippet defines and exports the default IntroScreen component. It's a React functional component that likely renders an introductory or welcome screen for a Solana-based application. The component's implementation details are not provided in the given content.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/IntroScreen/IntroScreen/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function IntroScreen() {\n  // Component implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Token Prices\nDESCRIPTION: This snippet provides a utility function to fetch the current price of a token and calculates its value based on the token's balance. It utilizes the 'fetchTokenPrice' function to retrieve the price data asynchronously.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/dataModule/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchTokenPrice } from '@/modules/onChainData';\n\nasync function getTokenValue(tokenInfo) {\n  const price = await fetchTokenPrice(tokenInfo);\n  const balance = parseFloat(tokenInfo.token_info.balance) / Math.pow(10, tokenInfo.token_info.decimals);\n  return balance * (price || 0);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Event Handling Hook\nDESCRIPTION: This code snippet shows an event handling hook, `useEventListener`, which allows attaching event listeners to the window. It utilizes `useRef` to hold the handler function, ensuring that the latest handler is always executed. It returns a cleanup function within `useEffect` to remove the event listener when the component unmounts or the event name changes, preventing memory leaks.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/hooks/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst useEventListener = (eventName: string, handler: (event: Event) => void) => {\n  const savedHandler = useRef(handler);\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    const eventListener = (event: Event) => savedHandler.current(event);\n    window.addEventListener(eventName, eventListener);\n    return () => {\n      window.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName]);\n};\n```\n\n----------------------------------------\n\nTITLE: Using SectionTextImage Component in TSX\nDESCRIPTION: This example demonstrates how to use the SectionTextImage component in a React application. It shows the component being used with a text prop for the caption and an imageUrl prop for the image source. This usage will display the text above the specified image with the component's built-in styling.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/sections/SectionTextImage/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<SectionTextImage\n  text=\"Check out this amazing photo!\"\n  imageUrl={{ uri: 'https://example.com/image.jpg' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Launching Token with Express.js\nDESCRIPTION: Defines a POST endpoint to launch a new token on the PumpFun platform. It uses authentication middleware and handles the creation of a new token by retrieving user information and token details from the request body. The response includes the status of the launch operation.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/routes/pumpfun/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response } from 'express';\nimport { requireAuth } from '../../middleware/requireAuth';\nimport { pumpfunController } from '../../controllers/pumpfunController';\n\nconst router = express.Router();\n\nrouter.post('/launch', requireAuth, async (req: Request, res: Response) => {\n  try {\n    const userId = req.user.id; // Set by requireAuth middleware\n    const launchResult = await pumpfunController.launchToken({\n      ...req.body,\n      userId\n    });\n    \n    return res.status(201).json({\n      success: true,\n      data: launchResult\n    });\n  } catch (error) {\n    console.error('Error launching token:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Defining CoinDetailLatestSectionProps Interface in TypeScript\nDESCRIPTION: This snippet defines the CoinDetailLatestSectionProps interface, which specifies the props for the CoinDetailLatestSection component. Currently, it includes an optional customStyles property.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/CoinDetailLatestSection/functions/default.mdx#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CoinDetailLatestSectionProps {\n  customStyles?: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using PostBody Component in React TSX\nDESCRIPTION: This snippet demonstrates how to import and use the PostBody component in a React application. It shows the component being used with props for post data, theme overrides, style overrides, and an external refresh trigger.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostBody/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport PostBody from 'path/to/components/thread/post/PostBody';\n\n<PostBody \n  post={postData}\n  themeOverrides={customTheme}\n  styleOverrides={customStyles}\n  externalRefreshTrigger={refreshCounter}\n/>\n```\n\n----------------------------------------\n\nTITLE: Building PumpFun Sell Transaction\nDESCRIPTION: This code defines the `buildPumpFunSellTransaction` function, which constructs a Solana transaction to sell tokens using PumpFun's bonding curve. It accepts a `PumpFunSellParams` object as input, which contains information about the sale. The function returns a Promise that resolves to a Solana `Transaction` object, representing the sell operation.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/pumpfun/pumpfunUtils/functions/buildPumpFunSellTransaction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > **buildPumpFunSellTransaction**(`__namedParameters`): `Promise`\\<`Transaction`\\>\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing TradeModal Component in React for Solana Integration\nDESCRIPTION: Example showing how to import and use the TradeModal component in a React application. The component accepts props for visibility control, user data, callback functions, and initial token selections.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/trade/TradeModal/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport TradeModal from 'path/to/components/thread/trade/TradeModal';\n\n<TradeModal\n  visible={showTradeModal}\n  onClose={() => setShowTradeModal(false)}\n  currentUser={userObject}\n  onPostCreated={handlePostCreated}\n  initialInputToken={solToken}\n  initialOutputToken={usdcToken}\n  disableTabs={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Solana Cluster Constant in TypeScript\nDESCRIPTION: Declares a string constant named CLUSTER used to specify the Solana network environment, such as mainnet, devnet, or testnet. This variable is typically used for configuring network-specific connections and settings.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/CLUSTER.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst CLUSTER: string\n```\n\n----------------------------------------\n\nTITLE: Implementing WalletSlide Component in TypeScript React\nDESCRIPTION: The default export function that renders the WalletSlide component. It combines multiple sub-components to display wallet and portfolio information, including a navigation bar, portfolio balance, search functionality, and a scrollable list of portfolio items.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/WalletSlide/walletSlide/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: Implementing useAppNavigation Hook in TypeScript\nDESCRIPTION: Custom React hook that returns a RootNavigationProp for handling navigation throughout the application. This hook provides a centralized way to handle navigation across the app.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useAppNavigation/functions/useAppNavigation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseAppNavigation(): RootNavigationProp\n```\n\n----------------------------------------\n\nTITLE: Getting Provider in Solana Using TypeScript\nDESCRIPTION: The getProvider function returns an AnchorProvider instance that facilitates interaction with the Solana blockchain. This function is essential for developers looking to utilize the Anchor framework in their applications. The expected output is an instance of AnchorProvider used in various Solana operations.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/pumpfun/pumpfunUtils/functions/getProvider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfunction getProvider(): AnchorProvider {\n    // Setup: a standard AnchorProvider.\n    const provider = new AnchorProvider(\n      connection,\n      wallet,\n      {} // options\n    );\n    return provider;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Signing and Sending Transactions with Privy in TypeScript\nDESCRIPTION: This function, signAndSendWithPrivy, is designed to sign and send in-memory transactions using the Privy provider in a Solana-based application. It requires a transaction, a connection, and a provider as parameters. The function returns a promise that resolves to the transaction signature. This utility is essential for handling secure transactions in applications that interact with Solana blockchain networks leveraging the Privy provider.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/transactions/transactionUtils/functions/signAndSendWithPrivy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"function signAndSendWithPrivy(transaction: Transaction | VersionedTransaction, connection: Connection, provider: any): Promise<string> {\\n  // Implementation using the provider's signAndSendTransaction method\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a SectionPoll Component in React with TypeScript\nDESCRIPTION: Example of using the SectionPoll component to display a poll with a question, multiple options, and vote counts. The component takes in pollData containing the question, options array, and votes array as props.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/sections/SectionPoll/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SectionPoll\n  pollData={{\n    question: \"What's your favorite color?\",\n    options: [\"Red\", \"Blue\", \"Green\"],\n    votes: [10, 15, 8]\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Getting Balance with Retries in TypeScript\nDESCRIPTION: The 'getBalanceWithRetries' function retrieves the balance of a given public key using a connection to the Solana network. It allows multiple attempts to fetch the balance with configurable retry parameters, which helps in handling transient errors that might occur during network requests. The function returns a promise that resolves to the balance amount as a number.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/common/fetch/functions/getBalanceWithRetries.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"function getBalanceWithRetries(connection, pubkey, maxRetries = 3, baseDelay = 1000): Promise<number> {\\n  // Implementation goes here\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Item Interface in TypeScript\nDESCRIPTION: Interface definition for NFT items with required properties for mint address, name, image URL, and an optional collection field. Used for typing NFT data objects returned by the useFetchNFTs hook.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useFetchNFTs/interfaces/NftItem.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftItem {\n  mint: string;\n  name: string;\n  image: string;\n  collection?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the PostHeader React Component\nDESCRIPTION: Example showing how to import and implement the PostHeader component with various props including post data, event handlers, and customization options.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostHeader/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport PostHeader from 'path/to/components/thread/post/PostHeader';\n\n<PostHeader \n  post={postData}\n  onDeletePost={handleDelete}\n  onEditPost={handleEdit}\n  onPressUser={handleUserPress}\n  themeOverrides={customTheme}\n  styleOverrides={customStyles}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining ThreadSectionType Union Type in TypeScript\nDESCRIPTION: TypeScript type alias defining possible thread section types in a social media context. Includes options for text-only posts, posts with media (images/videos), trades, polls, and NFT listings.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.types/type-aliases/ThreadSectionType.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ThreadSectionType = \"TEXT_ONLY\" | \"TEXT_IMAGE\" | \"TEXT_VIDEO\" | \"TEXT_TRADE\" | \"POLL\" | \"NFT_LISTING\"\n```\n\n----------------------------------------\n\nTITLE: Removing Posts Recursively from a Thread in TypeScript\nDESCRIPTION: Function that recursively removes a post and its replies from a thread based on the post ID. It takes an array of ThreadPost objects and a post ID, then returns a filtered array with the specified post and its children removed.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.utils/functions/removePostRecursive.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nremovePostRecursive(posts: ThreadPost[], postId: string): ThreadPost[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Solscan Transaction Links for Jito Bundle\nDESCRIPTION: Accepts a bundle ID and returns a Promise resolving to an array of Solscan transaction links. Used for tracking and exploring transactions submitted through Jito bundling.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/transactions/jitoBundling/functions/getSolscanLinks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction getSolscanLinks(bundleId: string): Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Documenting fetchTokenAccounts Function\nDESCRIPTION: This snippet documents the `fetchTokenAccounts` function. It takes a user's public key as input and returns a Promise that resolves to an array of TokenEntry objects representing the user's token accounts.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/common/fetch/functions/fetchTokenAccounts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > **fetchTokenAccounts**(`userPublicKey`): `Promise`\\<[`TokenEntry`](../type-aliases/TokenEntry.md)[]\\>\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing SectionTextOnly Component in React/TSX\nDESCRIPTION: Example of how to use the SectionTextOnly component to display plain text content in a post. This component provides basic text styling with consistent font size and color.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/sections/SectionTextOnly/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SectionTextOnly text=\"Hello, world!\" />\n```\n\n----------------------------------------\n\nTITLE: Auth Hook Structure\nDESCRIPTION: This code snippet shows the structure of a user authentication hook with options, loading and error states, and login functionality. It uses `useState` for managing loading and error states, and `useCallback` for the login function to prevent unnecessary re-renders. It also includes a `useEffect` hook for cleanup operations on unmount.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/hooks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Hook for managing user authentication state\n * @param options - Configuration options for the hook\n * @returns Authentication state and methods\n * \n * @example\n * ```tsx\n * const { user, login, logout } = useAuth({\n *   redirectOnSuccess: true\n * });\n * ```\n */\nexport function useAuth(options?: AuthOptions) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const login = useCallback(async (credentials: Credentials) => {\n    try {\n      setIsLoading(true);\n      // Implementation\n    } catch (err) {\n      setError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      // Cleanup logic\n    };\n  }, []);\n\n  return {\n    isLoading,\n    error,\n    login,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ThreadComposer Component in TSX\nDESCRIPTION: Shows how to import the ThreadComposer component from the thread components directory.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/ThreadComposer/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThreadComposer } from 'path/to/components/thread';\n```\n\n----------------------------------------\n\nTITLE: Using PumpfunScreen Component\nDESCRIPTION: This code snippet shows a basic usage of the `PumpfunScreen` component, which provides a full dashboard for managing tokens through Pump.fun. The component is imported from `@solana-app-kit/pumpfun` and can be used directly within a React Native application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/pumpFun/README.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PumpfunScreen } from '@solana-app-kit/pumpfun';\n\n// Usage\n<PumpfunScreen />\n```\n\n----------------------------------------\n\nTITLE: Defining ProfileView Props Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the props for the ProfileView component, including user data, posts, NFTs, and various callback functions for user interactions.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/ProfileView/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProfileViewProps {\n  isOwnProfile: boolean;\n  user: UserProfileData;\n  myPosts: ThreadPost[];\n  myNFTs: NftItem[];\n  loadingNfts: boolean;\n  fetchNftsError: string | null;\n  onAvatarPress?: () => void;\n  onEditProfile?: () => void;\n  amIFollowing?: boolean;\n  areTheyFollowingMe?: boolean;\n  onFollowPress?: () => void;\n  onUnfollowPress?: () => void;\n  followersCount?: number;\n  followingCount?: number;\n  onPressFollowers?: () => void;\n  onPressFollowing?: () => void;\n  onPressPost?: (post: ThreadPost) => void;\n  containerStyle?: StyleProp<ViewStyle>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Multiple State Slices\nDESCRIPTION: Creates an enhanced Redux store with type-safe reducers for authentication, thread, and transaction states. Utilizes TypeScript generics to define the store's structure and action handling.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/store/variables/store.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst store: EnhancedStore<{\n  auth: AuthState;\n  thread: ThreadState;\n  transaction: TransactionState;\n}, UnknownAction, Tuple<[StoreEnhancer<{}>, StoreEnhancer]>>\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionProviderConfig Interface in TypeScript\nDESCRIPTION: This interface defines configuration options for transaction handling in Solana applications. It specifies the defaultMode (jito or priority), feeTiers with different priority levels (low, medium, high, very-high), and network selection (mainnet-beta, devnet, or testnet).\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/interfaces/TransactionProviderConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransactionProviderConfig {\n  defaultMode: \"jito\" | \"priority\";\n  feeTiers: {\n    high: number;\n    low: number;\n    medium: number;\n    \"very-high\": number;\n  };\n  network: \"mainnet-beta\" | \"devnet\" | \"testnet\";\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PumpfunBuySection React Component\nDESCRIPTION: Example usage of PumpfunBuySection component showing how to implement the token purchase interface with custom styling options. The component accepts container, input, and button styling props along with a custom button label.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/PumpfunBuySection/functions/PumpfunBuySection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<PumpfunBuySection\n  containerStyle={styles.customContainer}\n  inputStyle={styles.customInput}\n  buttonStyle={styles.customButton}\n  buyButtonLabel=\"Purchase Token\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining NftListingData Interface in TypeScript for Solana Thread Components\nDESCRIPTION: This TypeScript interface defines the structure for NFT listing data within thread components. It includes required properties like 'mint' and 'owner', along with optional properties such as 'name', 'image', 'priceSol', and collection ID ('collId').\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.types/interfaces/NftListingData.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftListingData {\n  mint: string;\n  owner: null | string;\n  name?: string;\n  image?: string;\n  priceSol?: number;\n  collId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Post Section Type Utility Function\nDESCRIPTION: Function to determine what type of call-to-action to display based on the post's sections, returning 'trade', 'nft', 'collection', or null.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostCTA/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getPostSectionType(post: ThreadPost): 'trade' | 'nft' | 'collection' | null\n```\n\n----------------------------------------\n\nTITLE: Defining Service Interface and Implementation in TypeScript\nDESCRIPTION: This code snippet showcases the structure of a typical service in the Solana App Kit. It defines a TypeScript interface (`ServiceInterface`) with method signatures and then provides a class implementation (`Service`) that adheres to this interface. The implementation includes dependency injection for configuration and logging, along with error handling and parameter descriptions.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/services/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Service interface definition\n */\nexport interface ServiceInterface {\n  /** Method description */\n  method1(param: string): Promise<Result>;\n  /** Method description */\n  method2(param: number): void;\n}\n\n/**\n * Service implementation\n * @class\n * @implements {ServiceInterface}\n */\nexport class Service implements ServiceInterface {\n  private readonly config: Config;\n  private readonly logger: Logger;\n\n  constructor(config: Config, logger: Logger) {\n    this.config = config;\n    this.logger = logger;\n  }\n\n  /**\n   * Method description\n   * @param {string} param - Parameter description\n   * @returns {Promise<Result>} - Return value description\n   * @throws {ServiceError} - Error description\n   */\n  async method1(param: string): Promise<Result> {\n    try {\n      // Implementation\n      return result;\n    } catch (error) {\n      this.logger.error('Method1 failed', { param, error });\n      throw new ServiceError('Failed to execute method1', error);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Final Raydium Swap Transaction - TypeScript\nDESCRIPTION: The `getSwapTransaction` function assembles a swap transaction using the Raydium protocol based on input parameters. It is designed to return a promise that resolves with the transaction details. Required parameters include user public key, compute unit price, and various options for the swap transaction.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/pumpfun/pumpfunUtils/functions/getSwapTransaction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getSwapTransaction(params) {\n    // Function to build final Raydium swap transaction from a quote\n    // ... implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Using BondingCurveConfigurator Component in React\nDESCRIPTION: Example of how to use the BondingCurveConfigurator component to create an interactive bonding curve configuration interface with a callback that receives the generated ask and bid prices.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/BondingCurveConfigurator/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<BondingCurveConfigurator\n  onCurveChange={(askPrices, bidPrices) => {\n    console.log('New curve prices:', {askPrices, bidPrices});\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: GCS File Upload Utility Function in Typescript\nDESCRIPTION: This function uploads a file buffer to Google Cloud Storage (GCS) and makes it publicly accessible. It retrieves the GCS bucket instance, creates a file object, uploads the file buffer with the specified content type, makes the file public, and returns the public URL. It handles errors and throws an exception if the upload fails. It relies on environment variables like `GCS_BUCKET_NAME` to be set up correctly.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/utils/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Uploads a file buffer to Google Cloud Storage and returns the public URL\n * @param fileBuffer - The buffer containing file data\n * @param fileName - The desired file name (including extension)\n * @param contentType - The MIME type of the file\n * @returns A Promise resolving to the public URL of the uploaded file\n * @throws Error if the upload fails\n */\nexport async function uploadToGCS(\n  fileBuffer: Buffer,\n  fileName: string,\n  contentType: string\n): Promise<string> {\n  try {\n    const bucket = getGCSBucket();\n    const file = bucket.file(fileName);\n    \n    // Upload file\n    await file.save(fileBuffer, {\n      metadata: {\n        contentType,\n      },\n    });\n    \n    // Make file publicly accessible\n    await file.makePublic();\n    \n    // Return public URL\n    return `https://storage.googleapis.com/${process.env.GCS_BUCKET_NAME}/${fileName}`;\n  } catch (error) {\n    console.error('Error uploading to GCS:', error);\n    throw new Error(`Failed to upload file to Google Cloud Storage: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SelectedToken Interface for Solana Token Sales\nDESCRIPTION: TypeScript interface that defines the structure for selected tokens in a selling context. Includes the mint public key as a string and the available token amount as a number in UI format.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/PumpfunSellSection/interfaces/SelectedToken.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SelectedToken {\n    mintPubkey: string;  // The public key of the token's mint account\n    uiAmount: number;    // The available token amount in UI format (decimal)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tweet Component in React for Solana Social Kit\nDESCRIPTION: An example implementation of the Tweet component which displays Twitter-like social media posts. The example shows how to provide tweet data with username, handle, time, content with $SEND token mention, engagement metrics, and event handlers.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/tweet/tweet/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst tweetData = [{\n  username: \"John Doe\",\n  handle: \"@johndoe\",\n  time: \"2h\",\n  tweetContent: \"Check out $SEND token!\",\n  quoteCount: 5,\n  retweetCount: 10,\n  reactionCount: 100,\n  avatar: require('./avatar.png')\n}];\n\n<Tweet\n  data={tweetData}\n  onPress={() => console.log('Tweet pressed')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining RootStackParamList Type for Navigation in TypeScript\nDESCRIPTION: Defines a type alias for the root navigation stack parameters in a Solana application. Includes three routes: Intro and LoginOptions with undefined parameters, and MainTabs which uses NavigatorScreenParams with MainTabParamList.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useAppNavigation/type-aliases/RootStackParamList.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RootStackParamList = {\n  Intro: undefined;\n  LoginOptions: undefined;\n  MainTabs: NavigatorScreenParams<MainTabParamList>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ProfileView Component Example in React\nDESCRIPTION: Example usage of the ProfileView component showing how to implement it with minimum required props including user profile data, posts, and NFT information.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/ProfileView/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ProfileView\n  isOwnProfile={true}\n  user={{\n    address: '0x1234...',\n    profilePicUrl: 'https://example.com/avatar.png',\n    username: 'Alice'\n  }}\n  myPosts={allPosts}\n  myNFTs={allNfts}\n  loadingNfts={false}\n  fetchNftsError={null}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the TurnkeyConfig interface with three string properties: baseUrl, rpId, and rpName. It is used for configuring Turnkey-related settings in the solana-social-kit project.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/interfaces/TurnkeyConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TurnkeyConfig {\n  baseUrl: string;\n  rpId: string;\n  rpName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Bonding Curve with TypeScript\nDESCRIPTION: The setBondingCurve function takes named parameters including arrays for ask and bid prices, a connection object, a market address, a provider, and a user public key. It is designed to return a promise that resolves to a string, representing the outcome of the bonding curve setup process.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/tokenMill/tokenMillService/functions/setBondingCurve.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"async function setBondingCurve(__namedParameters) {\n    // Implementation to set the bonding curve\n    return new Promise(resolve => {\n        // Logic here\n        resolve('success');\n    });\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Token using TokenMill\nDESCRIPTION: This snippet demonstrates how to create a new token using the TokenMill service. It requires importing the createToken function and using it in a controller to specify token properties such as name, symbol, market index, total supply, and metadata. The function handles Solana blockchain interactions and returns the result of the token creation process.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/service/TokenMill/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createToken } from '../service/TokenMill/tokenService';\n\n// In controller function\nconst result = await createToken({\n  name: \"My Token\",\n  symbol: \"MTKN\",\n  marketIndex: 1,\n  totalSupply: 1000000,\n  decimals: 9,\n  metadata: {\n    description: \"My awesome token\",\n    image: \"https://example.com/image.png\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Threads in Solana App with Express.js\nDESCRIPTION: This TypeScript snippet sets up Express.js routes for handling threads within a Solana App. It includes routes for publicly fetching threads and protected routes for creating new ones. Dependencies include Express and custom middleware for authentication, with responses structured in JSON.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/routes/feed/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response } from 'express';\nimport { requireAuth } from '../../middleware/requireAuth';\nimport { threadController } from '../../controllers/threadController';\n\nconst router = express.Router();\n\n// Public route to get a thread\nrouter.get('/thread/:id', async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const thread = await threadController.getThreadById(id);\n    \n    return res.status(200).json({\n      success: true,\n      data: thread\n    });\n  } catch (error) {\n    console.error('Error fetching thread:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Protected route to create a thread\nrouter.post('/thread', requireAuth, async (req: Request, res: Response) => {\n  try {\n    const userId = req.user.id; // Set by requireAuth middleware\n    const newThread = await threadController.createThread({\n      ...req.body,\n      userId\n    });\n    \n    return res.status(201).json({\n      success: true,\n      data: newThread\n    });\n  } catch (error) {\n    console.error('Error creating thread:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Defining PrivyConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the PrivyConfig interface with two string properties: appId and clientId. It is used for extended configuration of authentication providers.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/interfaces/PrivyConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface PrivyConfig {\n  appId: string;\n  clientId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ThreadComposer Component in TSX\nDESCRIPTION: Demonstrates how to use the ThreadComposer component in a React application with an onSubmit handler for when new threads are created.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/ThreadComposer/README.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ThreadComposer \n  onSubmit={handleSubmit}\n  // Additional props\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Thread Component in Screen - React TS\nDESCRIPTION: This snippet demonstrates how to use the 'Thread' component along with the custom hook 'useThread' to manage thread posts in a screen component. It initializes state with 'initialPosts', handles post creation, and defines behavior when a post is pressed.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/core/thread/README.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Thread} from '../core/thread/components';\nimport {useThread} from '../core/thread/hooks';\n\nfunction ThreadScreen() {\n  const {posts, addPost, removePost} = useThread(initialPosts);\n\n  return (\n    <Thread\n      rootPosts={posts}\n      currentUser={currentUser}\n      onPostCreated={() => {\n        // Handle post creation\n      }}\n      onPressPost={post => {\n        // Handle post press\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Lamports to SOL in TypeScript\nDESCRIPTION: The `lamportsToSol` function takes an input in lamports and converts it to SOL, returning the equivalent value as a number. It requires a numeric input representing lamports and outputs a number representing the equivalent SOL. This function is crucial for financial calculations in the Solana network.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/common/lamport/functions/lamportsToSol.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lamportsToSol(lamports: number): number {\n    return lamports / 1_000_000_000;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling NFT Purchase Function\nDESCRIPTION: Asynchronous function to handle the process of buying a listed NFT, including transaction creation, signing, and confirmation handling.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostCTA/functions/default.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handleBuyListedNft(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing WalletCard Component in React/TypeScript\nDESCRIPTION: Example usage of the WalletCard component showing how to implement it with balance, price changes, and action handlers. The component displays portfolio balance, price changes, and provides buttons for swap, send, and on-ramp functionality.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/WalletCard/WalletCard/functions/WalletCard.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<WalletCard\n  balance={1234.56}\n  priceChange={23.45}\n  percentageChange={1.2}\n  onSwap={() => handleSwap()}\n  onSend={() => handleSend()}\n  onRamp={() => handleOnRamp()}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Endpoint Constants\nDESCRIPTION: TypeScript object containing endpoint URLs for various Solana services including Jito block engine, Jupiter swap API, Raydium swap/v3 APIs, and TensorFlow. These endpoints are used for interacting with different services in the Solana ecosystem.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/constants/variables/ENDPOINTS.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ENDPOINTS = {\n  jito: {\n    blockEngine: 'https://mainnet.block-engine.jito.wtf:443/api/v1/bundles'\n  },\n  jupiter: {\n    quote: 'https://api.jup.ag/swap/v1/quote',\n    swap: string\n  },\n  raydium: {\n    swapApi: 'https://transaction-v1.raydium.io',\n    v3Api: 'https://api-v3.raydium.io'\n  },\n  serverBase: SERVER_URL,\n  tensorFlowBaseUrl: 'https://api.mainnet.tensordev.io'\n}\n```\n\n----------------------------------------\n\nTITLE: Return Type Definition for Token Creation\nDESCRIPTION: Type definition for the return value of the createAndBuyTokenViaPumpfun function, showing the structure of the transaction result.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/pumpfun/pumpfunService/functions/createAndBuyTokenViaPumpfun.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n| Type | Description |\n| :------ | :------ |\n| `Promise<{ success: boolean; txId: string; mintPublicKey: string }>` | Transaction result with signature and new token mint address |\n```\n\n----------------------------------------\n\nTITLE: API Integration Hook\nDESCRIPTION: This code snippet demonstrates an API integration hook, `useData`, which fetches data based on an ID. It uses `useState` to manage the data and loading state, and `useEffect` to fetch the data when the ID changes. The hook returns the fetched data and a loading indicator, making it easy to integrate API calls into React components.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/hooks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst useData = (id: string) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const result = await api.getData(id);\n        setData(result);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, [id]);\n  \n  return { data, loading };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ThreadAncestors Component in TypeScript React\nDESCRIPTION: This code snippet defines the ThreadAncestors component. It takes ThreadAncestorsProps as parameters and returns either null or an Element. The component displays a list of users that a post is replying to in a thread, traversing up the reply chain to find all unique users being referenced.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/ThreadAncestors/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(__namedParameters: ThreadAncestorsProps): null | Element\n```\n\n----------------------------------------\n\nTITLE: Defining handleTurnkeyConnect function\nDESCRIPTION: This snippet documents the `handleTurnkeyConnect` function, which handles the connection to a Turnkey wallet. It accepts optional callback functions `onWalletConnected` and `setStatusMessage` for handling wallet connection events and updating status messages, respectively. It returns a Promise that resolves when the connection process is complete.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/walletProviders/turnkey/functions/handleTurnkeyConnect.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **handleTurnkeyConnect**(`onWalletConnected`?, `setStatusMessage`?): `Promise`\\<`void`\\>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TOKEN_MILL_CONFIG_PDA - TypeScript\nDESCRIPTION: This snippet defines a constant string, TOKEN\\_MILL\\_CONFIG\\_PDA, which is a part of the environment configuration for the solana-app-kit. It does not specify its content, implying that it serves as an identifier or a configuration constant necessary for the application's operation. No specific prerequisites are mentioned, but understanding of TypeScript and the solana-app-kit project structure is implied. The value assigned is not shown in the snippet, so the actual use or structure is not fully detailed here.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/TOKEN_MILL_CONFIG_PDA.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst TOKEN_MILL_CONFIG_PDA: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Logout Success Action Redux TypeScript\nDESCRIPTION: The purpose of this snippet is to define a Redux action creator `logoutSuccess` for handling a successful logout. It does not require any parameters and returns a Redux `PayloadAction` with an undefined payload. This action forms part of a Redux reducer responsible for user authentication state management. The function is defined in a TypeScript file within the 'src/state/auth/reducer.ts' path.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/auth/reducer/functions/logoutSuccess.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction logoutSuccess(): object {\n  // This Redux action creator returns a PayloadAction with an undefined payload\n  // It gets called when logout is successful.\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Default NFT Screen with Tabs in React (TypeScript)\nDESCRIPTION: This snippet defines a React functional component named default that serves as the main NFT screen. It utilizes props and a deprecated context parameter to render either a BuySection or SellSection based on user selection, returning a ReactNode. The function is intended for building user interfaces in the solana-social-kit project.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/NftScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n>\n> **default**(`props`, `deprecatedLegacyContext`?): `ReactNode`\n\n```\n\n----------------------------------------\n\nTITLE: Defining SectionNftListing Component in TypeScript React\nDESCRIPTION: This code snippet defines the default function for the SectionNftListing component. It takes SectionNftListingProps as a parameter and returns an Element. The component is responsible for rendering an NFT listing card with detailed information fetched from the Tensor API.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/sections/SectionNftListing/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(__namedParameters: SectionNftListingProps): Element\n```\n\n----------------------------------------\n\nTITLE: Extracting Trade Data Utility Function\nDESCRIPTION: Function to extract and process trade data from a post's TEXT_TRADE section, returning a structured TradeData object or null if no trade data is found.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostCTA/functions/default.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getTradeData(post: ThreadPost): TradeData | null\n```\n\n----------------------------------------\n\nTITLE: Defining THREAD_DEFAULT_THEME Object in TypeScript\nDESCRIPTION: A constant object that defines the default theme properties for thread components. It includes CSS custom properties for colors, sizes, spacing, and visual styling elements such as backgrounds, borders, and text colors.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.theme/variables/THREAD_DEFAULT_THEME.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst THREAD_DEFAULT_THEME: object = {\n  \"--thread-avatar-size\": 40,\n  \"--thread-bg-primary\": '#FFFFFF',\n  \"--thread-bg-secondary\": '#F2F3F5',\n  \"--thread-border-color\": '#EDEFF3',\n  \"--thread-composer-bg\": '#FAFAFA',\n  \"--thread-cta-container-width\": \"84%\",\n  \"--thread-font-size\": 14,\n  \"--thread-item-margin-left-step\": 16,\n  \"--thread-link-color\": '#2B8EF0',\n  \"--thread-poll-bg\": '#F5F5F5',\n  \"--thread-poll-option-bg\": '#ECECEC',\n  \"--thread-post-border-color\": '#E0E0E0',\n  \"--thread-post-padding-horizontal\": 16,\n  \"--thread-post-padding-vertical\": 12,\n  \"--thread-reaction-icon-size\": 20,\n  \"--thread-reply-line-color\": '#E0E0E0',\n  \"--thread-replying-bg\": '#F9F9F9',\n  \"--thread-replying-border-radius\": 6,\n  \"--thread-replying-margin-vertical\": 8,\n  \"--thread-replying-padding\": 8,\n  \"--thread-section-spacing\": 8,\n  \"--thread-text-placeholder\": '#737373',\n  \"--thread-text-primary\": '#232324',\n  \"--thread-text-secondary\": '#434445'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous Reply Action in TypeScript\nDESCRIPTION: The createReplyAsync function creates an asynchronous action for replying to threads. It takes an argument containing a parentId, sections, and user information. This function returns an AsyncThunkAction that includes the specified types, enabling strong typing and better Autocomplete support in TypeScript.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/thread/reducer/functions/createReplyAsync.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createReplyAsync = createAsyncThunk<any, { parentId: string; sections: ThreadSection[]; user: ThreadUser; }, AsyncThunkConfig>('thread/createReply', async (arg) => {\n  // Implementation here\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Screen Component with React\nDESCRIPTION: This React functional component serves as a template for a screen, managing state and rendering content based on loading conditions.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/screens/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// index.tsx\n/**\n * Screen component description\n * @component\n * @example\n * ```tsx\n * <ScreenName param1=\"value\" />\n * ```\n */\nexport const ScreenName: React.FC<ScreenProps> = ({ route, navigation }) => {\n  // State management\n  const [loading, setLoading] = useState(false);\n  const data = useSelector(selectData);\n  \n  // Effects\n  useEffect(() => {\n    // Setup and cleanup\n  }, []);\n  \n  // Event handlers\n  const handleAction = useCallback(() => {\n    // Handle user action\n  }, []);\n  \n  // Render helpers\n  const renderContent = () => {\n    if (loading) return <LoadingSpinner />;\n    return <Content data={data} />;\n  };\n  \n  return (\n    <SafeAreaView style={styles.container}>\n      <Header />\n      {renderContent()}\n      <Footer onAction={handleAction} />\n    </SafeAreaView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SectionTextImage Component in TypeScript React\nDESCRIPTION: This code defines the SectionTextImage component, which renders text content with an image in a post section. It takes SectionTextImageProps as parameters and returns a React Element. The component is designed to display text above an image with consistent styling, including rounded corners and proper aspect ratio.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/sections/SectionTextImage/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(__namedParameters: SectionTextImageProps): Element\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dynamic Client in TypeScript\nDESCRIPTION: This code snippet shows the `getDynamicClient` function, which attempts to return the previously initialized Dynamic client. If the client hasn't been initialized, it throws an error. It is used to access the Dynamic wallet provider's client.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/walletProviders/dynamic/functions/getDynamicClient.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > **getDynamicClient**(): `any`\n */\n\n/**\n * Get the previously initialized dynamic client.\n * If the client was never initialized, this throws an error.\n *\n * @returns `any`\n */\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TradeModal Styles in TypeScript React Native\nDESCRIPTION: Demonstrates how to import the TradeModal styles and apply them to React Native components. This snippet shows the usage of modalContentContainer, headerTitle, swapButton, and swapButtonText styles.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/trade/tradeModal.style/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport styles from 'path/to/components/thread/trade/tradeModal.style';\n\n<View style={styles.modalContentContainer}>\n  <Text style={styles.headerTitle}>Trade</Text>\n  <TouchableOpacity style={styles.swapButton}>\n    <Text style={styles.swapButtonText}>Swap</Text>\n  </TouchableOpacity>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Implementing SuggestionsCard Component in React (Solana Social Kit)\nDESCRIPTION: A React component that displays user suggestions in a card format with profile pictures, usernames, and follow buttons. The component uses a layered design with background imagery and is currently using hardcoded user data. Future implementations could accept user data through props.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/suggestionsCard/suggestionsCard/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SuggestionsCard />\n```\n\n----------------------------------------\n\nTITLE: Creating Swap Quote Express Route in TypeScript\nDESCRIPTION: This snippet shows how to create an Express.js route to get a token swap quote using the Jupiter Swap Controller. It imports necessary modules, defines a POST route, validates input parameters, and makes use of the 'getQuote' method from the Jupiter Controller. Required fields include 'inputMint', 'outputMint', and 'amount', and responses are provided in JSON format. This setup also enhances error handling for input validation and transaction failures.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/routes/swap/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response } from 'express';\nimport { jupiterController } from '../../controllers/jupiterSwapController';\n\nconst router = express.Router();\n\nrouter.post('/quote', async (req: Request, res: Response) => {\n  try {\n    const { inputMint, outputMint, amount } = req.body;\n    \n    // Validate required parameters\n    if (!inputMint || !outputMint || !amount) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required parameters'\n      });\n    }\n    \n    const quoteResult = await jupiterController.getQuote(inputMint, outputMint, amount);\n    \n    return res.status(200).json({\n      success: true,\n      data: quoteResult\n    });\n  } catch (error) {\n    console.error('Error getting swap quote:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get swap quote'\n    });\n  }\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Wallet Logout in TypeScript\nDESCRIPTION: This method handles the logout process for Dynamic wallet. It accepts an optional parameter for setting status messages and returns a Promise that resolves to void.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useDynamicWalletLogic/functions/useDynamicWalletLogic.mdx#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nhandleDynamicLogout: (setStatusMessage?) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining createThreadStyles Function in TypeScript\nDESCRIPTION: This function creates styles for thread components. It takes a theme object with default values, optional override styles, and an optional user stylesheet. The function returns an object containing the computed styles.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.styles/functions/createThreadStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateThreadStyles(`theme`, `overrideStyles`?, `userStyleSheet`?): `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Styled Components for NFT Buy Section in React Native with TypeScript\nDESCRIPTION: A comprehensive stylesheet definition for an NFT buying interface in React Native. The styles include definitions for various UI components like buttons, cards, text elements, inputs, and modals with properties for layout, colors, spacing, and typography.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/buySection.styles/variables/buyStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst buyStyles: object = {\n  actionButton: {\n    alignItems: 'center',\n    backgroundColor: '#32D4DE',\n    borderRadius: 8,\n    marginVertical: 8,\n    paddingVertical: 12\n  },\n  actionButtonText: {\n    color: '#fff',\n    fontWeight: '600'\n  },\n  buyButton: {\n    alignItems: 'center',\n    backgroundColor: '#32D4DE',\n    borderRadius: 6,\n    marginTop: 8,\n    paddingVertical: 8\n  },\n  buyButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600'\n  },\n  cardContent: {\n    flex: 1,\n    padding: 8\n  },\n  collectionCard: {\n    backgroundColor: '#fff',\n    borderColor: '#eee',\n    borderRadius: 8,\n    borderWidth: 1,\n    flexDirection: 'row',\n    marginBottom: 12,\n    overflow: 'hidden'\n  },\n  collectionImage: {\n    height: '100%',\n    width: '100%'\n  },\n  collectionName: {\n    color: '#222',\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 4\n  },\n  confirmButton: {\n    alignItems: 'center',\n    backgroundColor: '#32D4DE',\n    borderRadius: 8,\n    marginTop: 16,\n    paddingVertical: 12\n  },\n  confirmButtonText: {\n    color: '#fff',\n    fontSize: 15,\n    fontWeight: '600'\n  },\n  description: {\n    color: '#666',\n    fontSize: 13,\n    marginBottom: 6\n  },\n  emptyContainer: {\n    alignItems: 'center',\n    marginTop: 20\n  },\n  emptyText: {\n    color: '#888'\n  },\n  imageContainer: {\n    backgroundColor: '#f5f5f5',\n    height: 100,\n    width: 100\n  },\n  input: {\n    backgroundColor: '#fafafa',\n    borderColor: '#dadada',\n    borderRadius: 6,\n    borderWidth: 1,\n    marginBottom: 12,\n    padding: 10\n  },\n  label: {\n    color: '#444',\n    fontWeight: '600',\n    marginVertical: 4\n  },\n  modalContent: {\n    backgroundColor: '#f8f8f8',\n    borderColor: '#eee',\n    borderRadius: 12,\n    borderWidth: 1,\n    padding: 20,\n    width: '80%'\n  },\n  modalOverlay: {\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0.35)',\n    flex: 1,\n    justifyContent: 'center'\n  },\n  modalText: {\n    color: '#444',\n    fontSize: 14,\n    marginBottom: 8\n  },\n  modalTitle: {\n    color: '#333',\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 12\n  },\n  placeholderImage: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center'\n  },\n  placeholderText: {\n    color: '#999'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Styles for NFT Listing Section in TypeScript\nDESCRIPTION: This code snippet defines a default object containing style properties for various elements of an NFT listing section. It includes styles for the container, card, image, text elements, and other UI components.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/sections/SectionNftListing.style/variables/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault: {\n  card: {\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    borderColor: '#EEE',\n    borderRadius: 8,\n    borderWidth: 1,\n    flexDirection: 'column',\n    overflow: 'hidden',\n    padding: 8\n  },\n  collectionName: {\n    color: '#666',\n    fontSize: 14,\n    marginBottom: 4\n  },\n  container: {\n    backgroundColor: '#F9F9F9',\n    borderRadius: 8,\n    marginTop: 8,\n    padding: 10\n  },\n  image: {\n    height: '100%',\n    resizeMode: 'cover',\n    width: '100%'\n  },\n  imageContainer: {\n    backgroundColor: '#f0f0f0',\n    borderRadius: 8,\n    height: 200,\n    overflow: 'hidden',\n    width: 200\n  },\n  infoSection: {\n    alignItems: 'center',\n    marginTop: 12,\n    width: '90%'\n  },\n  lastSale: {\n    color: '#888',\n    fontSize: 12,\n    marginTop: 2\n  },\n  nftTitle: {\n    color: '#333',\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 4\n  },\n  placeholder: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center'\n  },\n  placeholderText: {\n    color: '#999'\n  },\n  priceText: {\n    color: '#666',\n    fontSize: 14,\n    marginTop: 2\n  },\n  rarityInfo: {\n    color: '#888',\n    fontSize: 12,\n    marginTop: 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Redux Slice for Thread Management in TypeScript\nDESCRIPTION: The snippet defines a constant named threadSlice, which is a Redux Slice for managing the ThreadState. It includes reducers such as addPostLocally and addReplyLocally that modify the state based on the incoming actions. The slice represents a specific part of the global state related to threads using the Redux Toolkit.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/thread/reducer/variables/threadSlice.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst threadSlice: Slice<ThreadState, { addPostLocally: (state, action) => void; addReplyLocally: (state, action) => void; }, \"thread\", \"thread\", SliceSelectors<ThreadState>>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tab Navigation in TypeScript\nDESCRIPTION: This snippet creates the main tab navigator for the application, defining tabs for the Home screen and passing an icon component to customize the appearance.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/navigation/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MainTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen \n        name=\"Home\" \n        component={HomeScreen}\n        options={{\n          tabBarIcon: ({ color }) => (\n            <HomeIcon color={color} />\n          ),\n        }}\n      />\n      {/* Other tabs */}\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using TopNavigation Component - React/TypeScript\nDESCRIPTION: Examples showing how to implement the TopNavigation component both with and without a section name parameter. The component provides navigation functionality and contextual icons like messages, notifications, and menu options.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/topNavigation/topNavigation/functions/TopNavigation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// With section name\n<TopNavigation sectionName=\"Profile\" />\n\n// Without section name (shows all icons)\n<TopNavigation />\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Reaction Addition in Redux Thunk\nDESCRIPTION: A Redux thunk function that enables adding emoji reactions to posts asynchronously. The function takes a post ID and reaction emoji as parameters and returns an AsyncThunkAction for managing the reaction addition process.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/thread/reducer/functions/addReactionAsync.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\naddReactionAsync(arg): AsyncThunkAction<any, { postId: string; reactionEmoji: string; }, AsyncThunkConfig>\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for Search Bar Component in TypeScript\nDESCRIPTION: Exports a constant style object that specifies the visual properties for a search bar component. It includes styles for the container, input field, and icons, defining properties such as colors, dimensions, and layout.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/WalletSlide/searchBar/searchBar.style/variables/style.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst style: object = {\n  container: {\n    alignItems: \"center\",\n    backgroundColor: \"#F6F7F9\",\n    borderColor: \"#EDEFF3\",\n    borderRadius: 10,\n    borderWidth: 2,\n    flexDirection: \"row\",\n    height: 40,\n    paddingHorizontal: 10\n  },\n  input: {\n    color: \"#000\",\n    flex: 1,\n    fontSize: 14\n  },\n  icon: {\n    marginRight: 8\n  },\n  clearIcon: {\n    marginLeft: 8\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for WalletCard Component in TypeScript\nDESCRIPTION: A comprehensive style object for the WalletCard component that defines styles for various UI elements including container, balance section, action buttons, and text elements. The styles use React Native's styling approach with properties for colors, dimensions, typography, and layout.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/WalletCard/WalletCard.style/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles: object = {\n  container: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 20,\n    elevation: 4,\n    padding: 24,\n    shadowColor: '#000000',\n    shadowOffset: {\n      height: 4,\n      width: 0\n    },\n    shadowOpacity: 0.08,\n    shadowRadius: 8,\n    width: '100%'\n  },\n  balanceSection: {\n    alignItems: 'center',\n    marginBottom: 28\n  },\n  portfolioLabel: {\n    color: '#666666',\n    fontSize: 16,\n    fontWeight: '500'\n  },\n  balanceAmount: {\n    color: '#000000',\n    fontSize: 36,\n    fontWeight: '700',\n    letterSpacing: -0.5,\n    marginBottom: 12\n  },\n  priceChangeRow: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    gap: 8,\n    marginBottom: 8\n  },\n  priceChangeText: {\n    color: '#32D4DE',\n    fontSize: 16,\n    fontWeight: '600'\n  },\n  percentageContainer: {\n    backgroundColor: '#D6FDFF',\n    borderRadius: 8,\n    paddingHorizontal: 8,\n    paddingVertical: 4\n  },\n  percentageText: {\n    color: '#32D4DE',\n    fontSize: 16,\n    fontWeight: '600'\n  },\n  actionButtonsRow: {\n    flexDirection: 'row',\n    gap: 16,\n    justifyContent: 'space-between'\n  },\n  actionButton: {\n    alignItems: 'center',\n    flex: 1\n  },\n  buttonIconContainer: {\n    alignItems: 'center',\n    backgroundColor: '#F5F5F5',\n    borderRadius: 26,\n    height: 52,\n    justifyContent: 'center',\n    marginBottom: 8,\n    width: 52\n  },\n  buttonLabel: {\n    color: '#000000',\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 2\n  },\n  buttonSubLabel: {\n    color: '#666666',\n    fontSize: 12,\n    fontWeight: '500'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostCTAProps Interface in TypeScript\nDESCRIPTION: Interface definition for the PostCTA component props, specifying the post data, theme overrides, style overrides, and user stylesheet customization options.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostCTA/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PostCTAProps {\n  /** The post data to display the CTA for */\n  post: ThreadPost;\n  /** Theme overrides for customizing appearance */\n  themeOverrides?: Partial<Record<string, any>>;\n  /** Style overrides for specific components */\n  styleOverrides?: {\n    container?: StyleProp<ViewStyle>;\n    button?: StyleProp<ViewStyle>;\n    buttonLabel?: StyleProp<TextStyle>;\n  };\n  /** User-provided stylesheet overrides */\n  userStyleSheet?: {\n    container?: StyleProp<ViewStyle>;\n    button?: StyleProp<ViewStyle>;\n    buttonLabel?: StyleProp<TextStyle>;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Thread Component with Props in TSX\nDESCRIPTION: Basic usage example of the Thread component showing how to include it in a React component with a required threadId prop.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/Thread/README.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Thread \n  threadId=\"thread-123\"\n  // Additional props\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Portfolio Balance Component Styles in TypeScript\nDESCRIPTION: Comprehensive style object that defines styling properties for a portfolio balance component including button groups, individual buttons, text elements, and container layouts. Uses fixed dimensions, colors, and flexbox properties for consistent styling.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/WalletSlide/portfolioBalance/portfolioBalance.style/variables/style.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst style = {\n  btn: {\n    alignItems: \"center\",\n    backgroundColor: \"#F6F7F9\",\n    borderColor: \"#EDEFF3\",\n    borderRadius: 20,\n    borderWidth: 2,\n    height: 40,\n    justifyContent: \"center\",\n    width: 40\n  },\n  btnGrp: {\n    alignItems: \"flex-start\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 40,\n    paddingVertical: 25\n  },\n  btnText: {\n    color: \"#B7B7B8\",\n    flexWrap: \"wrap\",\n    fontSize: 12,\n    fontWeight: \"400\",\n    textAlign: \"center\"\n  },\n  btnWrapper: {\n    alignItems: \"center\",\n    flex: 1,\n    gap: 6,\n    height: 80\n  },\n  container: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: 8,\n    width: \"70%\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Solana Transaction Mode\nDESCRIPTION: This TypeScript function `setTransactionMode` is a Redux ActionCreator that sets the transaction mode. It accepts a payload of type `\"jito\" | \"priority\"` which determines the transaction handling mode. It returns a Redux `PayloadAction` object.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/transaction/reducer/functions/setTransactionMode.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **setTransactionMode**(`payload`): `object`\n```\n\n----------------------------------------\n\nTITLE: Sending Jito Transaction Bundle in TypeScript\nDESCRIPTION: The function `sendJitoBundle` sends a collection of versioned transactions to Jito's block engine and returns a promise of a JitoBundleResponse. The input parameter `transactions` is an array of VersionedTransaction objects. This requires a proper setup of transactions according to the Solana blockchain's versioning specifications. The function ensures reliable submission of multiple transactions in a single action.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/transactions/jitoBundling/functions/sendJitoBundle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **sendJitoBundle**(`transactions`): `Promise`\\<[`JitoBundleResponse`](../interfaces/JitoBundleResponse.mdx)\\>\n\nDefined in: [src/utils/transactions/jitoBundling.ts:18](https://github.com/SendArcade/solana-app-kit/blob/bd4b3556b8f469c27ebb06f4df65b3a36b43ba3b/src/utils/transactions/jitoBundling.ts#L18)\n\nSends a bundle of signed transactions to Jito's block engine.\n\n## Parameters\n\n### transactions\n\n`VersionedTransaction`[]\n\n## Returns\n\n`Promise`\\<[`JitoBundleResponse`](../interfaces/JitoBundleResponse.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Tab Navigation with React and Material-UI in TypeScript\nDESCRIPTION: This function creates a bottom navigation bar with tabs for Home, Wallet, and Profile. It uses React hooks for state management and Material-UI components for the UI. The component handles tab selection and updates the active tab state accordingly.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/navigation/MainTabs/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function (): Element {\n  const [value, setValue] = React.useState(0);\n\n  return (\n    <BottomNavigation\n      showLabels\n      value={value}\n      onChange={(event, newValue) => {\n        setValue(newValue);\n      }}\n    >\n      <BottomNavigationAction label=\"Home\" icon={<HomeIcon />} />\n      <BottomNavigationAction label=\"Wallet\" icon={<AccountBalanceWalletIcon />} />\n      <BottomNavigationAction label=\"Profile\" icon={<PersonIcon />} />\n    </BottomNavigation>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Coin List from CoinGecko API in JavaScript\nDESCRIPTION: Asynchronous function to retrieve the full list of coins from the CoinGecko API. It handles API responses and potential errors.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/coingeckoService/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetCoinList\n```\n\n----------------------------------------\n\nTITLE: Defining PumpfunSellStyles Object in TypeScript\nDESCRIPTION: A comprehensive style object defining the visual appearance of a cryptocurrency sell interface. Includes styling for fee estimates, input fields, labels, buttons, and text elements with specific colors, dimensions, and typography.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/Pumpfun.styles/variables/PumpfunSellStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst PumpfunSellStyles = {\n  feeEstimate: {\n    color: '#666',\n    fontSize: 12,\n    fontStyle: 'italic',\n    marginBottom: 12\n  },\n  input: {\n    backgroundColor: '#fafafa',\n    borderColor: '#ccc',\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 12,\n    padding: 10\n  },\n  label: {\n    color: '#555',\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 6\n  },\n  maxButton: {\n    alignSelf: 'flex-start',\n    backgroundColor: '#ffc107',\n    borderRadius: 8,\n    marginBottom: 12,\n    paddingHorizontal: 12,\n    paddingVertical: 8\n  },\n  maxButtonText: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: '600'\n  },\n  sectionTitle: {\n    color: '#333',\n    fontSize: 20,\n    fontWeight: '700',\n    marginBottom: 12\n  },\n  sellButton: {\n    alignItems: 'center',\n    backgroundColor: '#dc3545',\n    borderRadius: 8,\n    marginTop: 16,\n    padding: 14\n  },\n  sellButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '700'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Navigation State Based on Authentication\nDESCRIPTION: This snippet tests the rendering of screens based on the authentication state of the user. It utilizes React Testing Library to verify the initial screen displayed is the Login screen.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/navigation/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nit('should show correct screen based on auth state', () => {\n  const { getByText } = render(\n    <Provider store={store}>\n      <RootNavigator />\n    </Provider>\n  );\n  \n  expect(getByText('Login')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining React Native Styles for Suggestions Card Component\nDESCRIPTION: Exports a styles object containing comprehensive styling definitions for a suggestions card UI component. Includes styles for container layout, profile image, buttons, text elements and positioning.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/suggestionsCard/suggestionsCard.style/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = {\n  button: {\n    alignItems: 'center',\n    backgroundColor: 'black',\n    borderRadius: 8,\n    bottom: 4,\n    height: 30,\n    justifyContent: 'center',\n    left: '50%',\n    marginLeft: -59.5,\n    position: 'absolute',\n    width: 119\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 12,\n    fontWeight: '500',\n    textAlign: 'center'\n  },\n  container: {\n    backgroundColor: '#F6F7F9',\n    borderColor: '#F2F2F2',\n    borderRadius: 12,\n    borderWidth: 1,\n    height: 161,\n    overflow: 'hidden',\n    position: 'relative',\n    width: 131\n  },\n  handleText: {\n    color: '#ADADAD',\n    fontSize: 12,\n    fontWeight: '500',\n    textAlign: 'center'\n  },\n  image: {\n    top: 0\n  },\n  imgBox: {\n    alignItems: 'center',\n    borderColor: 'white',\n    borderRadius: 32,\n    borderWidth: 4,\n    height: 64,\n    justifyContent: 'center',\n    left: '50%',\n    marginLeft: -32,\n    overflow: 'hidden',\n    position: 'absolute',\n    top: 12,\n    width: 64\n  },\n  profImg: {\n    height: '100%',\n    resizeMode: 'cover',\n    width: '100%'\n  },\n  userInfoContainer: {\n    alignItems: 'center',\n    flexDirection: 'column',\n    height: 37,\n    justifyContent: 'center',\n    left: '50%',\n    marginLeft: -59.5,\n    position: 'absolute',\n    top: '50%',\n    width: 119\n  },\n  usernameText: {\n    fontSize: 12,\n    fontWeight: '600',\n    textAlign: 'center'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IPFS Metadata Upload using Typescript\nDESCRIPTION: This snippet illustrates how to upload JSON metadata to IPFS using the `uploadMetadata` utility function. It constructs a metadata object with properties like `name`, `symbol`, `description`, `image`, and `attributes`. Then, it calls the `uploadMetadata` function to upload the metadata to IPFS and obtain the IPFS URL.  It assumes that `imageUrl` is already defined and points to the image URL.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/utils/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { uploadMetadata } from '../utils/ipfs';\n\n// In a controller function\nconst metadata = {\n  name: \"Token Name\",\n  symbol: \"TKN\",\n  description: \"Token description\",\n  image: imageUrl,\n  attributes: [\n    { trait_type: \"Category\", value: \"Social\" }\n  ]\n};\n\nconst ipfsUrl = await uploadMetadata(metadata);\nreturn ipfsUrl;\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Types in TypeScript for React Native\nDESCRIPTION: This snippet defines type aliases for navigation parameters in a React Native app. It includes types for the main tab navigation and the root stack navigation.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useAppNavigation/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n- [MainTabParamList](type-aliases/MainTabParamList.mdx)\n- [RootNavigationProp](type-aliases/RootNavigationProp.mdx)\n- [RootStackParamList](type-aliases/RootStackParamList.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultCustomizationConfig Constant in TypeScript\nDESCRIPTION: Declares a constant variable named DefaultCustomizationConfig of type CustomizationConfig. This constant likely contains default values for customizing the behavior of the solana-social-kit.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/variables/DefaultCustomizationConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DefaultCustomizationConfig: CustomizationConfig\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Profile Component in React\nDESCRIPTION: Example implementation showing how to use the Profile component with minimal required props for displaying a user's profile.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/profile/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Profile\n  isOwnProfile={true}\n  user={{ address: 'YourWalletAddressHere' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining React Native Styles for Collectibles Component in TypeScript\nDESCRIPTION: TypeScript constant that defines styling for a collectibles grid component. The styles include a container with flex layout properties for organizing items in rows with wrapping, and image styling with aspect ratio and border radius for uniform display.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/collectibles/collectibles.style/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles: object = {\n  container: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    gap: 14,\n    justifyContent: \"space-between\",\n    paddingHorizontal: 16,\n    paddingVertical: 6\n  },\n  image: {\n    aspectRatio: 1,\n    borderRadius: 8,\n    width: \"48%\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props with TypeScript\nDESCRIPTION: This TypeScript snippet defines the interface for the props of a component, including descriptions for each prop using JSDoc comments. It includes both required and optional properties, as well as an optional style overrides property to allow customization of the component's styling.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/core/sharedUI/README.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ComponentName.types.ts\nexport interface ComponentNameProps {\n  /** Description of the prop */\n  prop1: string;\n  /** Description of the optional prop */\n  prop2?: number;\n  /** Optional style overrides */\n  styleOverrides?: Partial<typeof defaultStyles>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Solana App Kit Library via Package Manager\nDESCRIPTION: This snippet shows how to install the solana-app-kit library in a React Native or Expo application using either yarn or npm. It is vital for setting up the library in your project.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/use.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add solana-app-kit\n# or\nnpm install solana-app-kit\n```\n\n----------------------------------------\n\nTITLE: Using PumpfunCard Component in TSX\nDESCRIPTION: Example of how to use the PumpfunCard component in a React application. It demonstrates passing a custom style and including child components.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/PumpfunCard/functions/PumpfunCard.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<PumpfunCard containerStyle={styles.customCard}>\n  <Text>Card Content</Text>\n</PumpfunCard>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Processing Bitcoin OHLC Data in TypeScript\nDESCRIPTION: Example showing how to fetch 30-day OHLC data for Bitcoin, extract closing prices and timestamps, and calculate price change percentage. Demonstrates error handling and data processing of the API response.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/coingeckoService/functions/getCoinOHLC.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCoinOHLC } from 'services/coingeckoService';\n\nasync function fetchBitcoinChart() {\n  try {\n    // Get 30-day OHLC data for Bitcoin\n    const ohlcData = await getCoinOHLC('bitcoin', '30');\n    \n    // Extract closing prices and timestamps for a chart\n    const timestamps = ohlcData.map(item => item[0]);\n    const closingPrices = ohlcData.map(item => item[4]);\n    \n    // Calculate price change over the period\n    const startPrice = closingPrices[0];\n    const endPrice = closingPrices[closingPrices.length - 1];\n    const percentChange = ((endPrice - startPrice) / startPrice) * 100;\n    \n    console.log(`Bitcoin 30-day change: ${percentChange.toFixed(2)}%`);\n  } catch (error) {\n    console.error('Failed to fetch Bitcoin OHLC data:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Interface Styles in TypeScript\nDESCRIPTION: Defines a comprehensive set of styles for an NFT marketplace interface including card layouts, buttons, forms, and typography. Uses React Native style properties with specific colors, dimensions, and layout settings.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/sellSection.styles/variables/sellStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst sellStyles = {\n  actionButton: {\n    alignItems: 'center',\n    backgroundColor: '#32D4DE',\n    borderRadius: 8,\n    marginVertical: 8,\n    paddingVertical: 12\n  },\n  actionButtonText: {\n    color: '#fff',\n    fontWeight: '600'\n  },\n  // ... additional style definitions\n  selectedIndicator: {\n    alignItems: 'center',\n    backgroundColor: '#32D4DE',\n    borderRadius: 12,\n    height: 24,\n    justifyContent: 'center',\n    position: 'absolute',\n    right: 8,\n    top: 8,\n    width: 24\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for Bonding Curve Card Component in TypeScript\nDESCRIPTION: Style object containing UI definitions for a bonding curve card component including sections, buttons, and text elements. The styles define colors, dimensions, typography and layout properties for various card elements.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/BondingCurveCard.style/variables/BondingCurveCardStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst BondingCurveCardStyles: object = {\n  section: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    marginBottom: 16,\n    padding: 16,\n    width: '100%'\n  },\n  sectionTitle: {\n    color: '#2a2a2a',\n    fontSize: 18,\n    fontWeight: '700',\n    marginBottom: 12,\n    textAlign: 'center'\n  },\n  button: {\n    alignItems: 'center',\n    backgroundColor: '#2a2a2a',\n    borderRadius: 8,\n    marginTop: 12,\n    paddingVertical: 14\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 15,\n    fontWeight: '600'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using PostFooter Component in TypeScript React\nDESCRIPTION: Demonstrates how to import and use the PostFooter component in a React application. The component accepts props for post data, event handlers, and customization options.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostFooter/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport PostFooter from 'path/to/components/thread/post/PostFooter';\n\n<PostFooter \n  post={postData}\n  onPressComment={handleComment}\n  themeOverrides={customTheme}\n  styleOverrides={customStyles}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining PumpfunSellSection Interface Properties in TypeScript\nDESCRIPTION: Interface definition for PumpfunSellSection component props, including optional styling overrides for container, input, and button elements, along with token selection and button label customization options.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/PumpfunSellSection/interfaces/PumpfunSellSectionProps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PumpfunSellSectionProps {\n  selectedToken?: null | SelectedToken;\n  containerStyle?: StyleProp<ViewStyle>;\n  inputStyle?: StyleProp<TextStyle>;\n  buttonStyle?: StyleProp<ViewStyle>;\n  sellButtonLabel?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining selectedMint properties - style configurations\nDESCRIPTION: This snippet defines the style properties for the selectedMint UI element including color, font size, and margin settings. The color is set as a string, the fontSize and marginBottom as numbers. These properties are crucial for customizing the appearance of the selectedMint component within the UI.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/sellSection.styles/variables/sellStyles.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nselectedMint = {\n  color: '#666',\n  fontSize: 12,\n  marginBottom: 8\n};\n```\n\n----------------------------------------\n\nTITLE: Defining JitoBundleResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the JitoBundleResponse interface, which includes properties for transaction response handling in a Solana application. The interface contains three key properties: id (number), jsonrpc (string), and result (string), each defined in a specific location in the source file.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/transactions/jitoBundling/interfaces/JitoBundleResponse.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JitoBundleResponse {\n    id: number;\n    jsonrpc: string;\n    result: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Type Definitions for Token Creation\nDESCRIPTION: Type definitions and descriptions for all parameters required by the createAndBuyTokenViaPumpfun function, including required and optional fields.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/pumpfun/pumpfunService/functions/createAndBuyTokenViaPumpfun.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n| Parameter | Type | Description |\n| :------ | :------ | :------ |\n| `params` | `Object` | Parameters for token creation and purchase |\n| `params.userPublicKey` | `string` | Public key of the creator wallet |\n| `params.tokenName` | `string` | Name for the new token |\n| `params.tokenSymbol` | `string` | Symbol for the new token |\n| `params.description` | `string` | Description of the token |\n| `params.twitter?` | `string` | Optional Twitter handle |\n| `params.telegram?` | `string` | Optional Telegram group link |\n| `params.website?` | `string` | Optional website URL |\n| `params.imageUri` | `string` | URI to token image |\n| `params.solAmount` | `number` | Amount of SOL to spend in initial buy |\n| `params.slippageBasisPoints?` | `bigint` | Optional slippage tolerance (default 500 = 5%) |\n| `params.solanaWallet` | `any` | Privy wallet instance for signing transactions |\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Wallet Login in TypeScript\nDESCRIPTION: This method handles the login process for Dynamic wallet. It accepts optional parameters for login method and status message setting, and returns a Promise that resolves to void.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useDynamicWalletLogic/functions/useDynamicWalletLogic.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nhandleDynamicLogin: (__namedParameters) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Accessing Redux State with useSelector Hook\nDESCRIPTION: Demonstrates how to access parts of the Redux state within a React component using 'useSelector' from 'react-redux'. This snippet fetches feature-specific data using the 'selectFeatureData' selector, illustrating state consumption within components.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/state/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\\nimport { useSelector } from 'react-redux';\\nimport { selectFeatureData } from './selectors';\\n\\nconst Component = () => {\\n  const data = useSelector(selectFeatureData);\\n  // ...\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ChatBody Style Overrides in TypeScript\nDESCRIPTION: Defines a constant object 'chatBodyOverrides' with custom styles for the chat body. It includes styles for the extra content container's vertical margin and thread item text color and font size.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Chat/ChatScreen/ChatScreen.styles/variables/chatBodyOverrides.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst chatBodyOverrides: object = {\n  extraContentContainer: {\n    marginVertical: 2\n  },\n  threadItemText: {\n    color: '#232324',\n    fontSize: 14\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for BlinkRequestCard Component in TypeScript\nDESCRIPTION: This code snippet defines a constant object 'styles' that contains nested objects for styling different parts of the BlinkRequestCard component. It includes styles for the container, button, input fields, labels, and various text elements.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/BlinkRequestCard/BlinkRequestCard.style/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles: object = {\n  container: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 16,\n    elevation: 5,\n    margin: 16,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 16\n  },\n  inputContainer: {\n    marginBottom: 16\n  },\n  label: {\n    color: '#666',\n    fontSize: 14,\n    marginBottom: 8\n  },\n  input: {\n    borderColor: '#E0E0E0',\n    borderRadius: 8,\n    borderWidth: 1,\n    fontSize: 16,\n    padding: 12\n  },\n  button: {\n    alignItems: 'center',\n    backgroundColor: '#007AFF',\n    borderRadius: 8,\n    justifyContent: 'center',\n    padding: 16\n  },\n  buttonDisabled: {\n    backgroundColor: '#999999'\n  },\n  buttonText: {\n    color: '#FFFFFF',\n    fontSize: 16,\n    fontWeight: '600'\n  },\n  message: {\n    color: '#666',\n    fontSize: 16,\n    textAlign: 'center'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLC Price Data from CoinGecko API in JavaScript\nDESCRIPTION: Asynchronous function to retrieve Open-High-Low-Close (OHLC) price data for a specific cryptocurrency coin from the CoinGecko API. It supports various timeframes and includes error handling.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/coingeckoService/README.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetCoinOHLC\n```\n\n----------------------------------------\n\nTITLE: Fetching User Profile in Solana Social Kit\nDESCRIPTION: Asynchronous Redux thunk function to retrieve user profile information using a string argument. Returns an action that fetches profile picture URL and username from the server.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/auth/reducer/functions/fetchUserProfile.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfetchUserProfile(arg: string): AsyncThunkAction<{ profilePicUrl: any; username: any; }, string, AsyncThunkConfig>\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Component Props Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the required and optional props for the Profile component, including user data, posts, NFTs, and styling options.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/profile/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProfileProps {\n  isOwnProfile?: boolean;\n  user: {\n    address: string;\n    profilePicUrl?: string;\n    username?: string;\n  };\n  posts?: ThreadPost[];\n  nfts?: NftItem[];\n  loadingNfts?: boolean;\n  fetchNftsError?: string | null;\n  containerStyle?: object;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PumpfunLaunchSection Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for PumpfunLaunchSection component props, including style overrides for container, input fields, and launch button, plus custom button label option.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/PumpfunLaunchSection/interfaces/PumpfunLaunchSectionProps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PumpfunLaunchSectionProps {\n  containerStyle?: StyleProp<ViewStyle>;\n  inputStyle?: StyleProp<TextStyle>;\n  buttonStyle?: StyleProp<ViewStyle>;\n  launchButtonLabel?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Wallet Themes in TypeScript\nDESCRIPTION: The getMergedWalletTheme function combines multiple wallet themes. It probably takes existing themes as input and returns a new merged theme object.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/wallet/wallet.styles/README.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetMergedWalletTheme\n```\n\n----------------------------------------\n\nTITLE: Defining Type Safety for Navigation Parameters in TypeScript\nDESCRIPTION: This snippet initializes type definitions for the parameters used in the root stack and main tab navigation. It helps ensure type safety throughout the navigation system.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/navigation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// types.ts\nexport type RootStackParamList = {\n  Login: undefined;\n  MainTabs: undefined;\n  Profile: { userId: string };\n  Settings: undefined;\n};\n\nexport type MainTabParamList = {\n  Home: undefined;\n  Wallet: undefined;\n  Social: undefined;\n  Profile: undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Complete Token Metadata\nDESCRIPTION: This snippet defines a function to load the complete metadata of a token given its mint address. It calls the 'fetchTokenMetadata' function and returns the retrieved data.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/dataModule/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchTokenMetadata } from '@/modules/onChainData';\n\nasync function loadTokenInfo(mintAddress) {\n  const tokenInfo = await fetchTokenMetadata(mintAddress);\n  return tokenInfo;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Using PostBody Component in React\nDESCRIPTION: This snippet shows how to import the PostBody component and use it in a React component. It demonstrates the basic usage pattern for integrating the PostBody into a larger application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostBody/functions/default.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport PostBody from 'path/to/components/thread/post/PostBody';\n\n<PostBody \n  post={postData}\n  themeOverrides={customTheme}\n  styleOverrides={customStyles}\n  externalRefreshTrigger={refreshCounter}\n/>\n```\n\n----------------------------------------\n\nTITLE: Profile Service Implementation Example\nDESCRIPTION: Example implementation showing how to use the fetchUserProfile function in a React component, including error handling and display of profile information.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/profileService/functions/fetchUserProfile.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchUserProfile } from 'services/profileService';\n\nasync function loadAndDisplayUserProfile(walletAddress: string) {\n  try {\n    const profileData = await fetchUserProfile(walletAddress);\n    \n    console.log(`Username: ${profileData.username}`);\n    console.log(`Profile Image: ${profileData.url}`);\n    \n    // Example of using the profile data in a React component\n    return (\n      <View>\n        <Image source={{ uri: profileData.url }} style={styles.avatar} />\n        <Text style={styles.username}>{profileData.username}</Text>\n        {profileData.attachmentData.bio && (\n          <Text style={styles.bio}>{profileData.attachmentData.bio}</Text>\n        )}\n      </View>\n    );\n  } catch (error) {\n    console.error('Error loading user profile:', error);\n    // Handle the error or show a default profile\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions to Redux Store with useDispatch\nDESCRIPTION: Illustrates how to dispatch actions in a React component using the 'useDispatch' hook from 'react-redux'. This example shows dispatching the 'setLoading' action on user interaction, which updates the Redux store's state.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/state/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\\nimport { useDispatch } from 'react-redux';\\nimport { actions } from './slice';\\n\\nconst Component = () => {\\n  const dispatch = useDispatch();\\n  \\n  const handleAction = () => {\\n    dispatch(actions.setLoading(true));\\n  };\\n};\n```\n\n----------------------------------------\n\nTITLE: Listening to Navigation Events with useEffect\nDESCRIPTION: This snippet demonstrates how to set up an event listener for the navigation focus event. It utilizes useEffect to manage side effects associated with navigation.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/navigation/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  const unsubscribe = navigation.addListener('focus', () => {\n    // Handle screen focus\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Creating Tweet Styles in TypeScript for Solana Social Kit\nDESCRIPTION: This function generates an object containing style definitions for various components of a tweet UI. It takes a boolean parameter 'isSmallScreen' to adjust styles based on screen size. The styles cover layout, typography, colors, and specific UI elements like avatars, buttons, and reaction icons.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/tweet/tweet.style/functions/createTweetStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateTweetStyles(isSmallScreen: boolean): object\n```\n\n----------------------------------------\n\nTITLE: Implementing SectionTextVideo React Component with Text and Video Display\nDESCRIPTION: A React component that renders text content with a video in a post section. The component displays text above a video placeholder container with consistent styling and rounded corners. It accepts text and video URL as props.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/sections/SectionTextVideo/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SectionTextVideo\n  text=\"Check out this amazing video!\"\n  videoUrl=\"https://example.com/video.mp4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining AddButton Component in TypeScript React\nDESCRIPTION: This function defines the AddButton component, which renders a set of action buttons for user interactions such as following back users and sending assets to a wallet. The component is designed for use in a Solana-based social application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/addButton/addButton/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: Express Route Implementation Pattern\nDESCRIPTION: This code snippet demonstrates a common pattern for implementing Express.js routes. It imports necessary modules, defines a route, handles requests, calls a controller function, and returns a response. The snippet includes error handling and documentation comments.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/routes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response } from 'express';\nimport { controllerFunction } from '../controllers/featureController';\n\nconst router = express.Router();\n\n/**\n * @route   POST /feature/endpoint\n * @desc    Description of what this endpoint does\n * @access  Public/Private\n */\nrouter.post('/endpoint', async (req: Request, res: Response) => {\n  try {\n    // Call controller function\n    const result = await controllerFunction(req.body);\n    \n    // Return successful response\n    return res.status(200).json({\n      success: true,\n      data: result\n    });\n  } catch (error) {\n    // Handle error\n    console.error('Error in endpoint:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Root Navigator in TypeScript\nDESCRIPTION: This snippet sets up the root navigator using a stack navigator from React Navigation. It conditionally renders the authentication stack or the main application stack based on the user's authentication state.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/navigation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// RootNavigator.tsx\nconst Stack = createStackNavigator<RootStackParamList>();\n\nexport const RootNavigator = () => {\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n\n  return (\n    <Stack.Navigator>\n      {!isAuthenticated ? (\n        // Auth Stack\n        <Stack.Screen name=\"Login\" component={LoginScreen} />\n      ) : (\n        // Main App Stack\n        <>\n          <Stack.Screen name=\"MainTabs\" component={MainTabs} />\n          <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n          <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n        </>\n      )}\n    </Stack.Navigator>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Controller Function in TypeScript\nDESCRIPTION: This snippet defines a generic asynchronous controller function that processes incoming requests, interacts with service functions, and returns standardized responses. It demonstrates error handling and input validation principles.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/controllers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function controllerFunction(req: Request, res: Response) {\n  try {\n    // 1. Extract and validate input from request\n    const { param1, param2 } = req.body;\n    \n    // 2. Call service function(s)\n    const result = await serviceFunction(param1, param2);\n    \n    // 3. Return successful response\n    return res.status(200).json({\n      success: true,\n      data: result\n    });\n  } catch (error) {\n    // 4. Handle and return error response\n    console.error(`Error in controllerFunction:`, error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PumpfunSellSection Component with Manual Token Input in TSX\nDESCRIPTION: This example demonstrates how to use the PumpfunSellSection component with manual token input. It includes custom container styling and a custom sell button label.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/PumpfunSellSection/functions/PumpfunSellSection.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<PumpfunSellSection\n  containerStyle={styles.customContainer}\n  sellButtonLabel=\"Sell Now\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of uploadProfileAvatar Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the uploadProfileAvatar function in conjunction with image picking functionality to select and upload a user's avatar. It uses the expo-image-picker library for image selection.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/profileService/functions/uploadProfileAvatar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { uploadProfileAvatar } from 'services/profileService';\nimport * as ImagePicker from 'expo-image-picker';\n\nasync function selectAndUploadAvatar(userWalletAddress: string) {\n  try {\n    // Pick an image from the device\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      aspect: [1, 1],\n      quality: 0.8,\n    });\n    \n    if (!result.canceled && result.assets && result.assets.length > 0) {\n      const selectedImageUri = result.assets[0].uri;\n      \n      // Upload the selected image as profile avatar\n      const avatarUrl = await uploadProfileAvatar(userWalletAddress, selectedImageUri);\n      console.log('Avatar uploaded successfully:', avatarUrl);\n      \n      // You can now update your UI or state with the new avatar URL\n      return avatarUrl;\n    }\n  } catch (error) {\n    console.error('Failed to upload avatar:', error);\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Table Migration\nDESCRIPTION: This code demonstrates a Knex.js migration file for creating a 'users' table.  It defines the 'up' function to create the table with specified columns and constraints, and the 'down' function to drop the table, reverting the migration.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/db/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Knex } from 'knex';\n\nexport async function up(knex: Knex): Promise<void> {\n  return knex.schema.createTable('users', (table) => {\n    table.uuid('id').primary().defaultTo(knex.raw('uuid_generate_v4()'));\n    table.string('username').unique().notNullable();\n    table.string('wallet_address').unique().notNullable();\n    table.timestamps(true, true);\n  });\n}\n\nexport async function down(knex: Knex): Promise<void> {\n  return knex.schema.dropTable('users');\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Collectibles Grid Component in TypeScript React\nDESCRIPTION: This function renders a component that displays a grid of NFT collectibles. It uses a fixed set of collectible images from the assets directory and creates a responsive, visually optimized layout for showcasing NFT artwork.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/collectibles/collectibles/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ndefault(): Element\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Collectibles />\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Vesting Release in TypeScript\nDESCRIPTION: Function signature for releasing vested tokens on Solana blockchain. Takes parameters including base token mint address, connection object, market address, provider, user public key, and vesting plan address. Returns a promise resolving to a string transaction signature.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/tokenMill/tokenMillService/functions/releaseVesting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreleaseVesting(__namedParameters): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Theme in TypeScript\nDESCRIPTION: This example demonstrates how to override specific values in the default wallet theme to create a custom dark theme variant. It uses the spread operator to maintain all default values while replacing only the background and text colors.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/wallet/wallet.theme/variables/WALLET_DEFAULT_THEME.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Override specific theme values\nconst customTheme = {\n  ...WALLET_DEFAULT_THEME,\n  '--wallet-bg-primary': '#000000',\n  '--wallet-text-primary': '#ffffff'\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing LineGraph Component in React Native with TypeScript\nDESCRIPTION: This code snippet demonstrates the usage of the LineGraph component in a React Native application. It shows how to pass data, timestamps, execution price and timestamp, and a user avatar to create a customized line chart.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/LineGraph/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<LineGraph\n  data={[1.01, 1.02, 0.99, 1.05]}\n  timestamps={[1692300000000, 1692303000000, 1692306000000, 1692309000000]}\n  executionPrice={1.0}\n  executionTimestamp={1692305000000}\n  userAvatar={{ uri: 'https://example.com/avatar.png' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: replicateJupiterTrade Method for Swap Replication\nDESCRIPTION: Method signature for replicating Jupiter swaps using provided trade data and transaction mode. Requires a TradeData object containing swap parameters and a mode selection for transaction processing.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useTradeTransaction/functions/useTradeTransaction.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nreplicateJupiterTrade: (tradeData: TradeData, mode: 'priority' | 'jito') => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Hooking into Transaction Processing with useTradeTransaction\nDESCRIPTION: The useTradeTransaction hook connects to transaction processing systems, including Jito integration and priority fee transactions. It also has the ability to replicate Jupiter trades based on conditions, facilitating complex transaction needs.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/hooks.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks/useTradeTransaction.ts\nimport { useEffect } from 'react';\n\nconst useTradeTransaction = () => {\n    useEffect(() => {\n        // transaction processing logic\n    }, []);\n};\nexport default useTradeTransaction;\n```\n\n----------------------------------------\n\nTITLE: Managing User Authentication State\nDESCRIPTION: This snippet shows how to dispatch actions for managing user authentication state using the auth reducer from the solana-app-kit library. It includes handling login success, profile updates, and logout actions.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/use.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loginSuccess, logoutSuccess, updateUsername, updateProfilePic } from 'solana-app-kit';\n\n// Handle login success\ndispatch(loginSuccess(userData));\n\n// Update user profile\ndispatch(updateUsername({ userId: 'user123', newUsername: 'newName' }));\ndispatch(updateProfilePic('https://example.com/new-profile-pic.jpg'));\n\n// Handle logout\ndispatch(logoutSuccess());\n```\n\n----------------------------------------\n\nTITLE: Fetching Following List in Solana Social Kit\nDESCRIPTION: This code snippet demonstrates how to use the `fetchFollowing` function from the `services/profileService` module to retrieve a list of users that a specified user is following. It includes error handling and example usage of the returned data.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/profileService/functions/fetchFollowing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchFollowing } from 'services/profileService';\n\nasync function displayUserFollowing(walletAddress: string) {\n  try {\n    const following = await fetchFollowing(walletAddress);\n    console.log(`${walletAddress} is following ${following.length} users`);\n    \n    // Example of displaying followed users\n    following.forEach(followedUser => {\n      console.log(`- ${followedUser.displayName || followedUser.id}`);\n    });\n    \n    return following;\n  } catch (error) {\n    console.warn('Error retrieving following list:', error);\n    return [];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WalletSlide Component in TSX\nDESCRIPTION: An example of how to use the WalletSlide component in a React application. The component is self-contained and does not require any props.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/WalletSlide/walletSlide/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<WalletSlide />\n```\n\n----------------------------------------\n\nTITLE: Express Route Registration\nDESCRIPTION: This code snippet shows how routes are registered in the main application using Express.js. It imports route modules and then uses the `app.use()` method to mount them at specific paths. This allows the application to handle requests to different API endpoints.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/routes/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import routes\nimport authRoutes from './routes/auth';\nimport userRoutes from './routes/user';\nimport tokenmillRoutes from './routes/tokenmill';\n// ... other imports\n\n// Register routes\napp.use('/api/auth', authRoutes);\napp.use('/api/users', userRoutes);\napp.use('/api/tokenmill', tokenmillRoutes);\n// ... other route registrations\n```\n\n----------------------------------------\n\nTITLE: Navigating to iOS Directory and Installing Pods\nDESCRIPTION: Navigates to the `ios` directory and installs the necessary CocoaPods dependencies. This ensures that all the iOS project dependencies are correctly installed and linked.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/setup.mdx#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncd ios\npod install\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Wallet Components and Utilities in TypeScript\nDESCRIPTION: This snippet re-exports several wallet-related components and utilities from different modules within the solana-social-kit project. It includes wallet styles, embedded wallet authentication props, theme merging function, and default wallet theme.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/wallet/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport { createWalletStyles } from \"wallet.styles/functions/createWalletStyles\";\nexport { EmbeddedWalletAuthProps } from \"EmbeddedWallet/interfaces/EmbeddedWalletAuthProps\";\nexport { getMergedWalletTheme } from \"wallet.styles/functions/getMergedWalletTheme\";\nexport { WALLET_DEFAULT_THEME } from \"wallet.theme/variables/WALLET_DEFAULT_THEME\";\n```\n\n----------------------------------------\n\nTITLE: Using ThreadAncestors Component in React TSX\nDESCRIPTION: This example demonstrates how to use the ThreadAncestors component in a React application. It shows the component being used with props for the current post, all posts, and theme overrides for customizing the appearance.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/ThreadAncestors/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<ThreadAncestors\n  post={currentPost}\n  rootPosts={allPosts}\n  themeOverrides={{ '--primary-color': '#1D9BF0' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing CoinDetailSearchBar Component in React\nDESCRIPTION: Example showing how to use the CoinDetailSearchBar component with a callback function that logs the selected coin ID to the console. This component allows users to search for coins and displays results from the Coingecko API with coin icons.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/CoinDetailSearchBar/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CoinDetailSearchBar onSelectCoinId={(coinId) => console.log(coinId)} />\n```\n\n----------------------------------------\n\nTITLE: Repository Cloning - Bash Git Command\nDESCRIPTION: Initial setup command to clone the Solana Social Starter repository and navigate into the server directory\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https:\\/\\/github.com\\/your-username\\/solana-social-starter.git\\ncd solana-social-starter\\/server\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Reducers with Redux Store\nDESCRIPTION: This snippet illustrates how to extend a Redux store by combining existing reducers from the solana-app-kit library with custom reducers for managing authentication, threading, and transactions.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/use.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { combineReducers } from '@reduxjs/toolkit';\nimport { authReducer, threadReducer, transactionReducer } from 'solana-app-kit';\n\n// Use existing reducers\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  thread: threadReducer,\n  transaction: transactionReducer,\n  // Add your own reducers\n  myCustomFeature: myCustomReducer,\n});\n\n// Create your store with the combined reducers\nconst store = configureStore({\n  reducer: rootReducer,\n  // other store configuration...\n});\n```\n\n----------------------------------------\n\nTITLE: Network and Data Utilities - TypeScript\nDESCRIPTION: Utilities for data and network operations, including methods to fetch user token accounts, retrieve SOL balances, and implement retry logic for network calls.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/utils.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Network and data utilities:\n// Implements retry logic\n// Methods to fetch user's token accounts\n// SOL balance retrieval\n// Other data fetching operations\n```\n\n----------------------------------------\n\nTITLE: Defining BondingCurveCard React Component in TypeScript\nDESCRIPTION: This code snippet defines the default export function for the BondingCurveCard component. It takes BondingCurveCardProps as parameters and returns an Element. The component is used for configuring and setting bonding curves for token markets on Solana.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/BondingCurveCard/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(__namedParameters: BondingCurveCardProps): Element\n```\n\n----------------------------------------\n\nTITLE: Navigating to Profile Screen with Type Safety\nDESCRIPTION: This snippet demonstrates how to navigate to a profile screen using a type-safe navigation prop. It handles navigation when a button is pressed, passing the userId parameter.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/navigation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\ntype ProfileScreenNavigationProp = StackNavigationProp<\n  RootStackParamList,\n  'Profile'\n>;\n\nexport const ProfileButton = () => {\n  const navigation = useNavigation<ProfileScreenNavigationProp>();\n  \n  const handlePress = () => {\n    navigation.navigate('Profile', { userId: '123' });\n  };\n  \n  return <Button onPress={handlePress} title=\"View Profile\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomizationProvider Function in TypeScript\nDESCRIPTION: This snippet defines the CustomizationProvider function, which takes named parameters including children (ReactNode) and an optional config of type Partial<CustomizationConfig>. It returns an Element.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/CustomizationProvider/functions/CustomizationProvider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nCustomizationProvider(__namedParameters): Element\n```\n\n----------------------------------------\n\nTITLE: State Management Hook\nDESCRIPTION: This code snippet presents a state management hook, `useCounter`, which manages a counter value and provides an increment function. It uses `useState` to hold the counter value and `useCallback` to memoize the increment function, preventing unnecessary re-renders. The hook returns the current count and the increment function.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/hooks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst useCounter = (initialValue = 0) => {\n  const [count, setCount] = useState(initialValue);\n  \n  const increment = useCallback(() => {\n    setCount(prev => prev + 1);\n  }, []);\n  \n  return { count, increment };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining useAppSelector Hook with Redux in TypeScript\nDESCRIPTION: This snippet defines the useAppSelector function, a custom hook for selecting a portion of the Redux state. It takes a selector function and an optional equality function as arguments and returns the selected state. The equality function is used to determine if the selector's result has changed. Dependencies include Redux Toolkit and TypeScript. Key parameters are 'selector', a function accepting the state and returning a selected slice, and 'equalityFn', an optional function determining how to check for updates. This hook returns a typed selection of state.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useReduxHooks/functions/useAppSelector.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **useAppSelector**\\<`TSelected`\\>(`selector`, `equalityFn`?): `TSelected`\\n\\nDefined in: [src/hooks/useReduxHooks.ts:5](https://github.com/SendArcade/solana-app-kit/blob/bd4b3556b8f469c27ebb06f4df65b3a36b43ba3b/src/hooks/useReduxHooks.ts#L5)\\n\\n### Type Parameters\\n\\n\\u2022 **TSelected**\\n\\n### Parameters\\n\\n#### selector\\n\\n(`state`) => `TSelected`\\n\\n#### equalityFn?\\n\\n`EqualityFn`\\<`NoInfer`\\<`TSelected`\\>\\>\\n\\n### Returns\\n\\n`TSelected`\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SelectTokenModal Component in TypeScript React\nDESCRIPTION: This snippet demonstrates how to import and use the SelectTokenModal component in a TypeScript React application. It shows the basic props required for the component, including visibility control and callbacks for closing the modal and handling token selection.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/trade/SelectTokenModal/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport SelectTokenModal, { TokenInfo } from 'path/to/components/thread/trade/SelectTokenModal';\n\n<SelectTokenModal\n  visible={showTokenModal}\n  onClose={() => setShowTokenModal(false)}\n  onTokenSelected={(token) => setSelectedToken(token)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Prefixed IDs in TypeScript\nDESCRIPTION: A utility function that generates a string identifier with an optional prefix parameter. The function takes a string prefix as input and returns a string identifier.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.utils/functions/generateId.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateId(prefix: string): string\n```\n\n----------------------------------------\n\nTITLE: Utility Navigation Setup with useAppNavigation\nDESCRIPTION: The useAppNavigation hook facilitates the creation of a navigation reference for global navigation, while providing a typed approach to stack and tab navigation. This enhances navigation management within the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/hooks.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks/useAppNavigation.ts\nimport { createNavigationContainer } from 'react-navigation';\n\nconst useAppNavigation = () => {\n    const navigationRef = createNavigationContainer();\n\n    return { navigationRef };\n};\nexport default useAppNavigation;\n```\n\n----------------------------------------\n\nTITLE: Interface definition for PumpFunSellParams in TypeScript\nDESCRIPTION: This code defines the `PumpFunSellParams` interface, which is used to encapsulate the parameters needed for a sell operation on the PumpFun platform.  It specifies the required properties such as the seller's public key (`sellerPubkey`), the token mint (`tokenMint`), the number of lamports to sell (`lamportsToSell`), the PumpFun SDK instance (`sdk`), and the Solana connection (`connection`). An optional slippage basis (`slippageBasis`) can also be provided.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/pumpfun/pumpfunUtils/interfaces/PumpFunSellParams.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Defined in: [src/utils/pumpfun/pumpfunUtils.ts:190](https://github.com/SendArcade/solana-app-kit/blob/bd4b3556b8f469c27ebb06f4df65b3a36b43ba3b/src/utils/pumpfun/pumpfunUtils.ts#L190)\n */\n\n/**\n * Defined in: [src/utils/pumpfun/pumpfunUtils.ts:196](https://github.com/SendArcade/solana-app-kit/blob/bd4b3556b8f469c27ebb06f4df65b3a36b43ba3b/src/utils/pumpfun/pumpfunUtils.ts#L196)\n */\n\n/**\n * Defined in: [src/utils/pumpfun/pumpfunUtils.ts:193](https://github.com/SendArcade/solana-app-kit/blob/bd4b3556b8f469c27ebb06f4df65b3a36b43ba3b/src/utils/pumpfun/pumpfunUtils.ts#L193)\n */\n\n/**\n * Defined in: [src/utils/pumpfun/pumpfunUtils.ts:195](https://github.com/SendArcade/solana-app-kit/blob/bd4b3556b8f469c27ebb06f4df65b3a36b43ba3b/src/utils/pumpfun/pumpfunUtils.ts#L195)\n */\n\n/**\n * Defined in: [src/utils/pumpfun/pumpfunUtils.ts:191](https://github.com/SendArcade/solana-app-kit/blob/bd4b3556b8f469c27ebb06f4df65b3a36b43ba3b/src/utils/pumpfun/pumpfunUtils.ts#L191)\n */\n\n/**\n * Defined in: [src/utils/pumpfun/pumpfunUtils.ts:194](https://github.com/SendArcade/solana-app-kit/blob/bd4b3556b8f469c27ebb06f4df65b3a36b43ba3b/src/utils/pumpfun/pumpfunUtils.ts#L194)\n */\n\n/**\n * Defined in: [src/utils/pumpfun/pumpfunUtils.ts:192](https://github.com/SendArcade/solana-app-kit/blob/bd4b3556b8f469c27ebb06f4df65b3a36b43ba3b/src/utils/pumpfun/pumpfunUtils.ts#L192)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining PumpfunSellSection Function in TypeScript\nDESCRIPTION: This snippet defines the PumpfunSellSection function, a React component that renders a user interface for selling tokens through Pump.fun. It takes props and an optional deprecated context parameter, returning a ReactNode.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/PumpfunSellSection/functions/PumpfunSellSection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction PumpfunSellSection(props: PumpfunSellSectionProps, deprecatedLegacyContext?: any): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Redux Hooks with useReduxHooks\nDESCRIPTION: The useReduxHooks provides shorthand for typed Redux hooks such as useAppSelector and useAppDispatch. This utility simplifies access to Redux state and actions, ensuring type safety and cleaner code.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/hooks.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks/useReduxHooks.ts\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n```\n\n----------------------------------------\n\nTITLE: Using useCustomization Hook in TypeScript React\nDESCRIPTION: This hook function provides access to customization configuration values defined in the CustomizationProvider context. It returns a CustomizationConfig object that contains all customization settings.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/CustomizationProvider/functions/useCustomization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseCustomization(): CustomizationConfig\n```\n\n----------------------------------------\n\nTITLE: Searching for a Post by ID in TypeScript\nDESCRIPTION: The findPostById function takes an array of ThreadPost objects and a string ID as parameters. It returns either the matching ThreadPost object or undefined if no match is found. This function is defined in the thread utilities of the solana-social-kit project.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.utils/functions/findPostById.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfindPostById(posts: ThreadPost[], id: string): undefined | ThreadPost\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icon Components in TypeScript\nDESCRIPTION: This code snippet declares a default export object containing multiple SVG icon components. Each component is typed as a functional component (FC) that accepts SVG props. These icons are likely used throughout the application for various UI elements.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/assets/svgs/variables/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault: {\n  AddBtnIcon: FC<SvgProps>;\n  addUserIcon: FC<SvgProps>;\n  Apple: FC<SvgProps>;\n  Arrow: FC<SvgProps>;\n  ArrowDown: FC<SvgProps>;\n  BellIcon: FC<SvgProps>;\n  BlinkEye: FC<SvgProps>;\n  BlueCheck: FC<SvgProps>;\n  BookmarkActive: FC<SvgProps>;\n  BookmarkIdle: FC<SvgProps>;\n  CommentIdle: FC<SvgProps>;\n  CryptoIcon: FC<SvgProps>;\n  Device: FC<SvgProps>;\n  DotsThree: FC<SvgProps>;\n  ExploreIcon: FC<SvgProps>;\n  ExploreIconSelected: FC<SvgProps>;\n  FeedIcon: FC<SvgProps>;\n  FeedIconSelected: FC<SvgProps>;\n  GettingStartedButton: FC<SvgProps>;\n  Google: FC<SvgProps>;\n  GridIcon: FC<SvgProps>;\n  HomeIcon: FC<SvgProps>;\n  HomeIconSelected: FC<SvgProps>;\n  infoIcon: FC<SvgProps>;\n  MagnifyingGlass: FC<SvgProps>;\n  MediaIcon: FC<SvgProps>;\n  MessageIcon: FC<SvgProps>;\n  NotifBell: FC<SvgProps>;\n  NotifBellSelected: FC<SvgProps>;\n  PinLocation: FC<SvgProps>;\n  ProfileIcon: FC<SvgProps>;\n  ProfileIconSelected: FC<SvgProps>;\n  ProfilePlusIcon: FC<SvgProps>;\n  ReactionIdle: FC<SvgProps>;\n  RetweetIdle: FC<SvgProps>;\n  SendIdle: FC<SvgProps>;\n  ShareIdle: FC<SvgProps>;\n  SmileFace: FC<SvgProps>;\n  SolanaDot: FC<SvgProps>;\n  SplashText: FC<SvgProps>;\n  SubscriptionTick: FC<SvgProps>;\n  SwapIcon: FC<SvgProps>;\n  Target: FC<SvgProps>;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing NFTs with useFetchNFTs\nDESCRIPTION: The useFetchNFTs hook manages NFT-related operations, retrieving user NFTs from the Tensor API, while handling loading and error states effectively. This facilitates seamless NFT management within the app.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/hooks.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks/useFetchNFTs.ts\nimport { useEffect, useState } from 'react';\n\nconst useFetchNFTs = () => {\n    const [nfts, setNFTs] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        // fetch NFTs logic\n    }, []);\n\n    return { nfts, loading, error };\n};\nexport default useFetchNFTs;\n```\n\n----------------------------------------\n\nTITLE: TokenMill PDA Derivation using Typescript\nDESCRIPTION: This example demonstrates how to derive a program-derived address (PDA) for a market using the `deriveMarketPDA` utility function. It calls the `deriveMarketPDA` function with the `marketIndex` and `tokenMillProgramId` as parameters. The function returns an array containing the PDA and the bump seed. It assumes that `marketIndex` and `tokenMillProgramId` are already defined.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/utils/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deriveMarketPDA } from '../utils/tokenMillHelpers';\n\n// In a service function\nconst [marketPda, marketBump] = await deriveMarketPDA(\n  marketIndex,\n  tokenMillProgramId\n);\n```\n\n----------------------------------------\n\nTITLE: Function Signature: useFetchNFTs in TypeScript\nDESCRIPTION: This snippet represents the function signature of `useFetchNFTs` written in TypeScript. It shows that it optionally takes a `walletAddress` string as input and returns an object containing `error` (string or null), `loading` (boolean), and `nfts` (an array of `NftItem` interfaces).\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useFetchNFTs/functions/useFetchNFTs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **useFetchNFTs**(`walletAddress`?): `object`\"\n```\n\n----------------------------------------\n\nTITLE: File Upload to GCS using Typescript\nDESCRIPTION: This code snippet demonstrates how to upload a file to Google Cloud Storage (GCS) using the `uploadToGCS` utility function. It shows how to retrieve the file buffer, determine the content type, generate a unique file name, and call the `uploadToGCS` function to upload the file. It assumes that the `req.file` object is provided by a middleware (e.g., Multer) that handles file uploads.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/utils/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { uploadToGCS } from '../utils/gcs';\n\n// In a controller function\nconst fileBuffer = req.file.buffer;\nconst contentType = req.file.mimetype;\nconst fileName = `${uuidv4()}.${req.file.originalname.split('.').pop()}`;\n\nconst publicUrl = await uploadToGCS(\n  fileBuffer,\n  fileName,\n  contentType\n);\n\nreturn publicUrl;\n```\n\n----------------------------------------\n\nTITLE: Defining useAppSelector with Options in TypeScript\nDESCRIPTION: This version of useAppSelector allows for options in addition to the selector function. It is aimed at improving selector customization by adding an option parameter that can be used to pass additional configuration. Dependencies include Redux Toolkit and TypeScript. Key parameters are 'selector', for state selection, and 'options', a set of configurations for the selector process. It returns the selected portion of the Redux state.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useReduxHooks/functions/useAppSelector.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **useAppSelector**\\<`Selected`\\>(`selector`, `options`?): `Selected`\\n\\nDefined in: [src/hooks/useReduxHooks.ts:5](https://github.com/SendArcade/solana-app-kit/blob/bd4b3556b8f469c27ebb06f4df65b3a36b43ba3b/src/hooks/useReduxHooks.ts#L5)\\n\\n### Type Parameters\\n\\n\\u2022 **Selected** = `unknown`\\n\\n### Parameters\\n\\n#### selector\\n\\n(`state`) => `Selected`\\n\\n#### options?\\n\\n`UseSelectorOptions`\\<`Selected`\\>\\n\\n### Returns\\n\\n`Selected`\n```\n\n----------------------------------------\n\nTITLE: Defining API Request and Response Types in TypeScript\nDESCRIPTION: Defines the structure of API request and response types for the Solana App Kit, including 'CreateThreadRequest' and 'ApiResponse'. Required for ensuring expected data formats for communication between client and server.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/types/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Request type example\nexport interface CreateThreadRequest {\n  content: string;\n  userId: string;\n  attachments?: Attachment[];\n}\n\n// Response type example\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TokenMill Route Pattern in TypeScript\nDESCRIPTION: Standard route implementation pattern for TokenMill API endpoints using Express.js and TypeScript. Provides a consistent structure for handling HTTP requests with error handling and response formatting.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/routes/tokenmill/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response } from 'express';\nimport { tokenMillController } from '../../controllers/tokenMillController';\n\nconst router = express.Router();\n\nrouter.post('/endpoint', async (req: Request, res: Response) => {\n  try {\n    const result = await tokenMillController.functionName(req.body);\n    return res.status(200).json({\n      success: true,\n      data: result\n    });\n  } catch (error) {\n    console.error('Error in endpoint:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Implementing SwipeTabs Component in React\nDESCRIPTION: Example usage of the SwipeTabs component which provides swipeable tab navigation between different sections. The component handles tab navigation with smooth transitions between Posts, Collectibles, and Actions sections, with responsive design and custom styling.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/slider/slider/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SwipeTabs />\n```\n\n----------------------------------------\n\nTITLE: Defining PumpfunBuyStyles Object in TypeScript\nDESCRIPTION: Creates a constant object PumpfunBuyStyles with nested objects defining styles for various UI components including buttons, inputs, labels, and section titles. The styles are defined using React Native-like properties for layout, colors, and typography.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/Pumpfun.styles/variables/PumpfunBuyStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst PumpfunBuyStyles: object = {\n  buyButton: {\n    alignItems: 'center',\n    backgroundColor: '#28a745',\n    borderRadius: 8,\n    marginTop: 16,\n    padding: 14\n  },\n  buyButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '700'\n  },\n  input: {\n    backgroundColor: '#fafafa',\n    borderColor: '#ccc',\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 12,\n    padding: 10\n  },\n  label: {\n    color: '#555',\n    fontSize: 14,\n    fontWeight: '600',\n    marginVertical: 6\n  },\n  pasteButton: {\n    alignSelf: 'flex-start',\n    backgroundColor: '#007AFF',\n    borderRadius: 8,\n    marginBottom: 12,\n    paddingHorizontal: 14,\n    paddingVertical: 10\n  },\n  pasteButtonText: {\n    color: '#fff',\n    fontWeight: '600'\n  },\n  sectionTitle: {\n    color: '#333',\n    fontSize: 20,\n    fontWeight: '700',\n    marginBottom: 12\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Component with TypeScript\nDESCRIPTION: This TypeScript snippet illustrates the structure of a React component using TypeScript, importing the props interface and stylesheet defined in separate files. It includes JSDoc comments to provide detailed documentation for the component, including its purpose, functionality, and usage examples. The component accepts props and uses style overrides to customize its appearance.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/core/sharedUI/README.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ComponentName.tsx\nimport { ComponentNameProps } from './ComponentName.types';\nimport { ComponentNameStyles as defaultStyles } from './ComponentName.style';\n\n/**\n * Component description\n * @component\n * @description\n * Detailed description of the component's purpose and functionality.\n * \n * Features:\n * - Feature 1\n * - Feature 2\n * \n * @example\n * ```tsx\n * <ComponentName prop1=\"value\" prop2={42} />\n * ```\n */\nexport const ComponentName: React.FC<ComponentNameProps> = ({\n  prop1,\n  prop2,\n  styleOverrides = {},\n}) => {\n  const styles = {...defaultStyles, ...styleOverrides};\n  \n  return (\n    // Component JSX\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the loginSuccess Function in TypeScript\nDESCRIPTION: The loginSuccess function is a Redux action creator that accepts a payload object. It generates a PayloadAction containing the provided data, which includes the user's address, profile picture URL, provider type, and optionally a username. Proper handling of these parameters is crucial for managing user authentication state efficiently in the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/auth/reducer/functions/loginSuccess.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loginSuccess(payload: {\n    address: string;\n    profilePicUrl?: string;\n    provider: \"privy\" | \"dynamic\" | \"turnkey\";\n    username?: string;\n}): object {\n    // Action creator logic to return PayloadAction\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ThreadSection Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ThreadSection which is part of a thread component in solana-social-kit. It includes required properties for id and type, along with optional properties for text content, media (images/videos), and specialized data for polls, trades, and NFT listings.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.types/interfaces/ThreadSection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ThreadSection {\n  id: null | string;\n  type: ThreadSectionType;\n  text?: string;\n  imageUrl?: ImageSourcePropType;\n  videoUrl?: string;\n  tradeData?: TradeData;\n  pollData?: PollData;\n  listingData?: NftListingData;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining fetchFollowers Function in TypeScript\nDESCRIPTION: This snippet defines the fetchFollowers function signature. It takes a userId as a string parameter and returns a Promise that resolves to an array of any type.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/profileService/functions/fetchFollowers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfetchFollowers(userId: string): Promise<any[]>\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Tweet Data Structure in TypeScript\nDESCRIPTION: Defines a constant array containing mock tweet data with properties including user information, engagement metrics, and tweet content. Uses TypeScript object type declaration with specific data types for each field.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/mocks/tweets/variables/tweetsData.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst tweetsData: object[] = {\n  avatar: DEFAULT_IMAGES.SENDlogo,\n  handle: '@sendcoin',\n  quoteCount: 297,\n  reactionCount: 13600,\n  retweetCount: 5600,\n  time: '3s',\n  tweetContent: 'SEND is the new meta coin $SEND',\n  username: 'SEND'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Thread Components in React TSX\nDESCRIPTION: Example of how to import individual components from the thread module for use in a React application. This shows the basic import pattern for accessing Thread, ThreadItem, and ThreadComposer components.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Thread, ThreadItem, ThreadComposer } from 'path/to/components/thread';\n```\n\n----------------------------------------\n\nTITLE: Creating Root Navigator Function in React Native\nDESCRIPTION: This function sets up the root navigation structure using React Navigation's createNativeStackNavigator. It defines the screens and their components in the navigation stack.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/navigation/RootNavigator/README.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"SendTokens\" component={SendTokensScreen} />\n      <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Screen Properties in TypeScript\nDESCRIPTION: This TypeScript interface defines the properties expected by a screen component, including route and navigation parameters.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/screens/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// types.ts\nexport interface ScreenProps {\n  route: RouteProp<RootStackParamList, 'ScreenName'>;\n  navigation: StackNavigationProp<RootStackParamList, 'ScreenName'>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RAYDIUM_SOL_MINT Constant in TypeScript\nDESCRIPTION: This snippet defines a constant named RAYDIUM_SOL_MINT that holds the string value of the public key associated with the Raydium SOL mint. It utilizes an imported PUBLIC_KEYS object to retrieve the wSolMint value. The snippet is significant in applications that interact with the Solana blockchain, where mint addresses are crucial for token operations.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/pumpfun/pumpfunUtils/variables/RAYDIUM_SOL_MINT.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"const RAYDIUM_SOL_MINT: string = PUBLIC_KEYS.wSolMint\"\n```\n\n----------------------------------------\n\nTITLE: Defining PostBodyProps Interface in TypeScript\nDESCRIPTION: This snippet defines the interface for the props passed to the PostBody component. It includes the post data, theme and style overrides, and an external refresh trigger for trade charts.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostBody/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PostBodyProps {\n  /** The post data to display in the body */\n  post: ThreadPost;\n  /** Theme overrides for customizing appearance */\n  themeOverrides?: Partial<Record<string, any>>;\n  /** Style overrides for specific components */\n  styleOverrides?: {[key: string]: object};\n  /**\n   * A numeric value used to refresh the trade chart in SectionTrade,\n   * if it's included in the post's sections.\n   */\n  externalRefreshTrigger?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenEntry Type Alias in TypeScript\nDESCRIPTION: Type alias that defines the structure for token account information with key properties like account public key, mint public key, decimals, and UI amount\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/common/fetch/type-aliases/TokenEntry.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TokenEntry = {\n  accountPubkey: string;\n  decimals: number;\n  mintPubkey: string;\n  uiAmount: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Thread Posts Array in TypeScript for Solana Social Kit\nDESCRIPTION: Declaration of a constant array named 'allposts' that contains ThreadPost objects. This is defined in the mocks/posts.ts file and is used for simulating thread posts data in the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/mocks/posts/variables/allposts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst allposts: ThreadPost[]\n```\n\n----------------------------------------\n\nTITLE: Importing NFT Module Components in Typescript\nDESCRIPTION: This code snippet demonstrates how to import components and functions from the NFT module for use in other parts of the application.  It imports a custom hook for fetching NFTs, a modal component for listing NFTs, a function for buying NFTs, and a component for displaying individual NFT items. The imported elements enable the application to display and interact with NFTs.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/nft/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFetchNFTs, NftListingModal, buyNft, NftItem } from '../../modules/nft';\n\n// Example usage\nconst { nfts, loading, error } = useFetchNFTs(walletAddress);\n```\n\n----------------------------------------\n\nTITLE: Defining ThreadUser Interface in TypeScript\nDESCRIPTION: Interface definition for a user in a thread component with properties for user identification (id), display names (username, handle), avatar image, and optional verification status.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.types/interfaces/ThreadUser.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ThreadUser {\n  id: string;\n  username: string;\n  handle: string;\n  avatar: ImageSourcePropType;\n  verified?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BondingCurveConfiguratorStyles Object in TypeScript\nDESCRIPTION: Defines a constant object BondingCurveConfiguratorStyles with nested style objects for various parts of the BondingCurveConfigurator component. Includes styles for layout, colors, typography, and specific UI elements.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/BondingCurveConfigurator.styles/variables/BondingCurveConfiguratorStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst BondingCurveConfiguratorStyles: object = {\n  container: {\n    backgroundColor: '#fafafa',\n    borderRadius: 10,\n    padding: 16,\n    width: '100%'\n  },\n  curveSelectionContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    marginBottom: 16\n  },\n  curveTypeButton: {\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    borderRadius: 20,\n    margin: 4,\n    minWidth: 80,\n    paddingHorizontal: 12,\n    paddingVertical: 8\n  },\n  curveTypeButtonActive: {\n    backgroundColor: '#333'\n  },\n  curveTypeButtonText: {\n    color: '#444',\n    fontSize: 14,\n    fontWeight: '500'\n  },\n  curveTypeButtonTextActive: {\n    color: '#fff',\n    fontWeight: '700'\n  },\n  // ... (other style objects)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CoinDetailLatestSection Component in TypeScript React\nDESCRIPTION: This snippet defines the CoinDetailLatestSection function component. It takes props of type CoinDetailLatestSectionProps and an optional deprecated context parameter. The component returns a ReactNode and is used for displaying 'Latest' content related to a coin.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/CoinDetailLatestSection/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction CoinDetailLatestSection(props: CoinDetailLatestSectionProps, deprecatedLegacyContext?: any): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Defining PumpFun Sell Transaction Parameters\nDESCRIPTION: This section describes the parameters for the `buildPumpFunSellTransaction` function.  The `__namedParameters` is of type `PumpFunSellParams` which specifies the details needed to construct the sell transaction.  Refer to the `PumpFunSellParams` interface for the structure of the input parameters.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/pumpfun/pumpfunUtils/functions/buildPumpFunSellTransaction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n### __namedParameters\n\n[`PumpFunSellParams`](../interfaces/PumpFunSellParams.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Redux Action Creator in TypeScript\nDESCRIPTION: The setSelectedFeeTier function is a Redux action creator that takes a payload parameter specifying the desired transaction fee tier. The payload must be one of the predefined string values: 'low', 'medium', 'high', or 'very-high'. The function returns a PayloadAction object which will include both a type and the provided payload as its object keys. This function streamlines the management of fee tier states in transactions within a Solana application. No additional dependencies are mentioned, but it is assumed that the redux toolkit is being utilized.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/transaction/reducer/functions/setSelectedFeeTier.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setSelectedFeeTier(payload: 'low' | 'medium' | 'high' | 'very-high'): { type: string, payload: string } {\n    // Implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TradeData Interface in TypeScript\nDESCRIPTION: This snippet defines the TradeData interface with properties for input and output mints, symbols, quantities, USD values, and an optional aggregator. It represents the structure of trade data used in the thread component.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.types/interfaces/TradeData.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TradeData {\n  inputMint: string;\n  outputMint: string;\n  aggregator?: string;\n  inputSymbol: string;\n  inputQuantity: string;\n  inputUsdValue: string;\n  outputSymbol: string;\n  outputQuantity: string;\n  outputUsdValue: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Image URLs in TypeScript\nDESCRIPTION: The purpose of this function is to adjust or format URLs for images to comply with specific formatting needs within the Solana Social Kit. The function takes a single string parameter, `url`, representing the URL of the image to be fixed. The expected output is a formatted string that adheres to image URL requirements. This utility is defined in the TypeScript file and is part of the common utilities used in Solana Social Kit projects.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/common/fixUrl/functions/fixImageUrl.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fixImageUrl(url: string): string {\\n  // logic to fix the image url\\n  return url;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserItem Interface in TypeScript for Solana Social Kit\nDESCRIPTION: This code snippet defines the UserItem interface, which represents the structure of a user object in the Solana Social Kit. It includes properties such as id, name, username, and avatar.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/mocks/users/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface UserItem {\n  id: string;\n  name: string;\n  username: string;\n  avatar: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining React Native Styles for Portfolio Item Component in TypeScript\nDESCRIPTION: A comprehensive style object that defines the styling for a portfolio item component in a wallet interface. It includes specifications for container layout, typography, colors, spacing, and responsive design elements for different sections of the portfolio item.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/WalletSlide/portfolioItem/portfolioItem.style/variables/style.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst style = {\n  container: {\n    alignItems: \"center\" as \"center\",\n    backgroundColor: \"#F6F7F9\",\n    borderRadius: 12,\n    flexDirection: \"row\" as \"row\",\n    justifyContent: \"space-between\" as \"space-between\",\n    marginVertical: 5,\n    padding: 12,\n  },\n  image: {},\n  leftSection: {\n    alignItems: \"center\" as \"center\",\n    flexDirection: \"row\" as \"row\",\n    gap: 6,\n  },\n  profit: {\n    backgroundColor: \"#E8FFEA\",\n    borderRadius: 4,\n    color: \"#32DE6B\",\n    fontSize: 12,\n    fontWeight: \"600\" as \"600\",\n    paddingHorizontal: 2,\n    paddingVertical: 2,\n    textAlign: \"center\" as \"center\",\n  },\n  rightSection: {\n    alignItems: \"flex-end\" as \"flex-end\",\n    flexDirection: \"column\" as \"column\",\n    gap: 4,\n  },\n  tokenAmount: {\n    color: \"#999999\",\n    fontSize: 15,\n    fontWeight: \"600\" as \"600\",\n  },\n  tokenInfo: {\n    flexDirection: \"column\" as \"column\",\n    gap: 4,\n  },\n  tokenName: {\n    alignItems: \"center\" as \"center\",\n    flexDirection: \"row\" as \"row\",\n    gap: 4,\n  },\n  tokenText: {\n    fontSize: 15,\n    fontWeight: \"600\" as \"600\",\n  },\n  usdValue: {\n    color: \"#999999\",\n    fontSize: 15,\n    fontWeight: \"600\" as \"600\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CoinDetailLatestSection Component in TSX\nDESCRIPTION: This example shows how to use the CoinDetailLatestSection component in a React application. It demonstrates the basic usage of the component without any props.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/CoinDetailLatestSection/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<CoinDetailLatestSection />\n```\n\n----------------------------------------\n\nTITLE: Using the IPFSAwareImage Component - React Native TypeScript\nDESCRIPTION: Demonstrates how to use the IPFSAwareImage component, which automatically handles IPFS URLs with fallbacks for better image loading reliability on both iOS and Android. It also showcases options for setting default images and forcing refresh on Android using a unique key.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/utils/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IPFSAwareImage } from '../utils/IPFSImage';\n\n// Simple usage\n<IPFSAwareImage\n  source={{ uri: \"https://ipfs.io/ipfs/QmSomeHash\" }}\n  style={styles.image}\n/>\n\n// With fallback and key for forced refresh on Android\n<IPFSAwareImage\n  source={imageUrl}\n  style={styles.avatar}\n  defaultSource={DEFAULT_IMAGES.user}\n  key={Platform.OS === 'android' ? `image-${Date.now()}` : 'image'}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Coin Market Data from CoinGecko API in JavaScript\nDESCRIPTION: Asynchronous function to fetch market data for a specific cryptocurrency coin from the CoinGecko API. It includes error handling for API responses.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/coingeckoService/README.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetCoinMarkets\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition Example\nDESCRIPTION: Examples of good and bad practices for TypeScript interfaces in the codebase. The good example shows proper typing for component props, while the bad example shows usage of 'any' type which should be avoided.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Good\ninterface Props {\n  name: string;\n  age?: number;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Bad\nconst Component = (props: any) => {\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Testing React Hook\nDESCRIPTION: This code snippet demonstrates how to test a React hook using `@testing-library/react-hooks`. It uses `renderHook` to render the hook and `act` to simulate asynchronous actions, ensuring that state transitions are properly handled.  The example tests the `useAuth` hook and verifies that the `user` state is defined after a successful login.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/hooks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderHook, act } from '@testing-library/react-hooks';\n\ndescribe('useAuth', () => {\n  it('should handle login', async () => {\n    const { result } = renderHook(() => useAuth());\n    \n    await act(async () => {\n      await result.current.login(mockCredentials);\n    });\n    \n    expect(result.current.user).toBeDefined();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dummy User Data in TypeScript for Solana Social Kit\nDESCRIPTION: This code snippet creates an array of dummy user data conforming to the UserItem interface. It includes multiple user objects with sample values for testing or development purposes.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/mocks/users/README.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst dummyData: UserItem[] = [\n  {\n    id: '1',\n    name: 'John Doe',\n    username: 'johndoe',\n    avatar: 'https://example.com/avatar1.jpg'\n  },\n  {\n    id: '2',\n    name: 'Jane Smith',\n    username: 'janesmith',\n    avatar: 'https://example.com/avatar2.jpg'\n  },\n  // Additional user objects...\n];\n```\n\n----------------------------------------\n\nTITLE: Uploading Profile Avatar in TypeScript\nDESCRIPTION: This function uploads a profile avatar image for a given user to the server. It handles the multipart/form-data request required for file uploads and returns the remote URL where the avatar can be accessed.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/profileService/functions/uploadProfileAvatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuploadProfileAvatar(userWallet: string, localFileUri: string): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Using the fixAllImageUrls Function - React Native TypeScript\nDESCRIPTION: Illustrates the use of the fixAllImageUrls function for comprehensive URL fixing. It handles various edge cases, including quoted strings, missing protocols, and multiple URL formats for IPFS images to ensure they are valid and usable.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/utils/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {fixAllImageUrls} from '../utils/IPFSImage';\n\n// For comprehensive URL fixing that handles all edge cases\nconst imageUrl = fixAllImageUrls(rawImageUrl);\n\n// Can handle quoted strings, missing protocols, and multiple formats\nconst imageUrl = fixAllImageUrls('\"ipfs://QmSomeHash\"'); // Will remove quotes and fix IPFS URL\n```\n\n----------------------------------------\n\nTITLE: Default Token Modal Styling in TypeScript\nDESCRIPTION: Defines a comprehensive set of styles for a token selection modal in React Native for the Solana Social Kit. Includes styling for modal container, overlay, title, search input, token item display, and close button with proper typography and layout configurations.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/trade/tokenModal.style/variables/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault: {\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  modalContainer: {\n    width: '100%',\n    maxHeight: '85%',\n    backgroundColor: '#FFF',\n    borderRadius: 20,\n    padding: 20,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n    elevation: 10\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: '#333',\n    textAlign: 'center',\n    marginBottom: 16\n  },\n  searchInput: {\n    width: '100%',\n    padding: 12,\n    borderWidth: 1,\n    borderColor: '#ddd',\n    borderRadius: 12,\n    backgroundColor: '#F9F9F9',\n    color: '#333',\n    fontSize: 16,\n    marginBottom: 16\n  },\n  tokenItem: {\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#EEE'\n  },\n  tokenItemContent: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  tokenLogo: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: '#EEE'\n  },\n  tokenTextContainer: {\n    marginLeft: 12\n  },\n  tokenSymbol: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#333'\n  },\n  tokenName: {\n    fontSize: 14,\n    color: '#777'\n  },\n  closeButton: {\n    backgroundColor: '#000000',\n    borderRadius: 25,\n    paddingVertical: 14,\n    alignItems: 'center',\n    marginTop: 20\n  },\n  closeButtonText: {\n    color: '#FFF',\n    fontSize: 16,\n    fontWeight: '700'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CoinDetailPhotosSection Component in React\nDESCRIPTION: Example of implementing the CoinDetailPhotosSection component in a React application. This basic implementation shows how to use the component without any props.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/CoinDetailPhotosSection/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CoinDetailPhotosSection />\n```\n\n----------------------------------------\n\nTITLE: Using the getValidImageSource Function - React Native TypeScript\nDESCRIPTION: Shows how to employ the getValidImageSource function to correctly format user avatar image sources according to platform requirements. It ensures the use of appropriate IPFS gateways and handles cases where no avatar is present.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/utils/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getValidImageSource} from '../utils/IPFSImage';\n\n// In a component that needs to process image sources\nfunction getUserAvatar(user) {\n  if (user.avatar) {\n    return getValidImageSource(user.avatar);\n  }\n  return DEFAULT_IMAGES.user;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Models in TypeScript\nDESCRIPTION: Defines key domain models for the application, including 'Thread' and 'User' interfaces that represent core business entities. These typings facilitate a structured way to manage application data.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/types/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Thread {\n  id: string;\n  content: string;\n  userId: string;\n  createdAt: Date;\n  updatedAt?: Date;\n  attachments: Attachment[];\n  likes: number;\n  comments: number;\n}\n\nexport interface User {\n  id: string;\n  walletAddress: string;\n  username: string;\n  profileImage?: string;\n  bio?: string;\n  createdAt: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Implementation Examples\nDESCRIPTION: Examples showing best practices for React component implementation. The good example demonstrates a functional component with proper typing, customizable styling, and clean structure, while the bad example shows inline styling and lack of typing.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Good\nconst MyButton: React.FC<MyButtonProps> = ({ onPress, label, styleOverrides }) => {\n  const mergedStyles = { ...defaultStyles, ...styleOverrides };\n  return (\n    <TouchableOpacity onPress={onPress} style={mergedStyles.button}>\n      <Text>{label}</Text>\n    </TouchableOpacity>\n  );\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Bad\nfunction MyButton(props) {\n  return <TouchableOpacity style={{ padding: 10, backgroundColor: 'blue' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Data Loading in a Screen Component\nDESCRIPTION: This code snippet demonstrates loading data within a screen component, handling different states such as loading and error states.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/screens/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst Screen: React.FC = () => {\n  const { data, loading, error } = useData();\n  \n  if (loading) return <LoadingScreen />;\n  if (error) return <ErrorScreen error={error} />;\n  \n  return <Content data={data} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Solana App Kit with NPM\nDESCRIPTION: Core installation command for adding the Solana App Kit package to a project using npm.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install solana-app-kit\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for Top Navigation Component in TypeScript\nDESCRIPTION: Creates a constant 'styles' object with nested style definitions for a container and rightIconGrp. The container has properties for flex layout, dimensions, and padding. The rightIconGrp defines flex properties and spacing for right-aligned icons.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/topNavigation/topNavigation.style/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles: object = {\n  container: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    height: 60,\n    justifyContent: \"space-between\",\n    paddingHorizontal: 16,\n    width: \"100%\"\n  },\n  rightIconGrp: {\n    alignItems: 'center',\n    display: 'flex',\n    flexDirection: 'row',\n    gap: 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Platform-Specific Development Builds\nDESCRIPTION: Commands for running the app on iOS or Android platforms using Expo.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# For iOS\nnpx expo run:ios\n\n# For Android\nnpx expo run:android\n```\n\n----------------------------------------\n\nTITLE: Using Privy Wallet Logic - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Privy wallet integration logic for Solana applications. It involves creating hooks to handle user interactions with embedded wallets and manage wallet functionalities seamlessly.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/walletProviders/privy/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Hook for interacting with Privy embedded wallets\nimport { usePrivyWalletLogic } from 'functions/usePrivyWalletLogic.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Types in TypeScript\nDESCRIPTION: Defines enumerations for predefined values such as 'SwapDirection' and 'FileType' to improve code readability and enforce valid values for specific fields. Enums help maintain consistency across the application regarding certain status or type values.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/types/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum SwapDirection {\n  Buy = 0,\n  Sell = 1,\n}\n\nexport enum FileType {\n  Image = 'image',\n  Video = 'video',\n  Audio = 'audio',\n  Document = 'document',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Thread Theme Properties in TypeScript\nDESCRIPTION: This code snippet defines the default theme properties for the thread component. It includes sizes, colors, and other styling variables used throughout the thread UI.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.styles/functions/createThreadStyles.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntheme: {\n  --thread-avatar-size: number = 40,\n  --thread-bg-primary: string = '#FFFFFF',\n  --thread-bg-secondary: string = '#F2F3F5',\n  --thread-border-color: string = '#EDEFF3',\n  --thread-composer-bg: string = '#FAFAFA',\n  --thread-cta-container-width: \"84%\" = ...,\n  --thread-font-size: number = 14,\n  --thread-item-margin-left-step: number = 16,\n  --thread-link-color: string = '#2B8EF0',\n  --thread-poll-bg: string = '#F5F5F5',\n  --thread-poll-option-bg: string = '#ECECEC',\n  --thread-post-border-color: string = '#E0E0E0',\n  --thread-post-padding-horizontal: number = 16,\n  --thread-post-padding-vertical: number = 12,\n  --thread-reaction-icon-size: number = 20,\n  --thread-reply-line-color: string = '#E0E0E0',\n  --thread-replying-bg: string = '#F9F9F9',\n  --thread-replying-border-radius: number = 6,\n  --thread-replying-margin-vertical: number = 8,\n  --thread-replying-padding: number = 8,\n  --thread-section-spacing: number = 8,\n  --thread-text-placeholder: string = '#737373',\n  --thread-text-primary: string = '#232324',\n  --thread-text-secondary: string = '#434445'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Knex instance\nDESCRIPTION: This code imports the configured Knex instance for use in database queries.  It allows for accessing the database connection throughout the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/db/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport knex from '../db/knex';\n```\n\n----------------------------------------\n\nTITLE: Setting Up Server Environment Variables\nDESCRIPTION: Command to copy the example environment file to create a local .env file.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Setting Up AnchorProvider for Pump.fun Integration - TypeScript\nDESCRIPTION: This snippet contains utilities for integrating with the Pump.fun framework, focusing on setting up the AnchorProvider and methods for token operations.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/utils.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Pump.fun integration utilities\n// Setting up the AnchorProvider\n// Bridging to Raydium or Pumpfun buy/sell instructions\n// Helper methods for token operations\n```\n\n----------------------------------------\n\nTITLE: Updating Username with AsyncThunk - TypeScript\nDESCRIPTION: This function, updateUsername, performs the task of updating the username for a user in the application. It returns an AsyncThunkAction that requires the new username and the respective user ID as parameters. The action is likely part of a Redux Thunk middleware setup and is used to manage asynchronous logic in a Redux architecture. This function does not directly update the state but dispatches an action to the store.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/auth/reducer/functions/updateUsername.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nAsyncThunkAction<string, { newUsername: string; userId: string; }, AsyncThunkConfig>\n```\n\n----------------------------------------\n\nTITLE: Defining PumpfunCard React Component in TypeScript\nDESCRIPTION: Function signature for the PumpfunCard component. It takes props of type PumpfunCardProps and an optional deprecated legacy context parameter, returning a ReactNode.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/PumpfunCard/functions/PumpfunCard.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nPumpfunCard(props: PumpfunCardProps, deprecatedLegacyContext?: any): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Running Development Mode with Cache Clearing\nDESCRIPTION: Command for starting the development server with cache clearing enabled.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm start --dev --clear\n```\n\n----------------------------------------\n\nTITLE: Express Route Implementation Pattern\nDESCRIPTION: This code snippet demonstrates the standard implementation pattern for Express.js routes within the Solana App Kit's authentication system. It showcases the structure for handling requests, calling controller functions, and returning appropriate responses, including error handling.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/routes/auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response } from 'express';\nimport { authController } from '../../controllers/authController';\n\nconst router = express.Router();\n\nrouter.post('/endpoint', async (req: Request, res: Response) => {\n  try {\n    const result = await authController.functionName(req.body);\n    return res.status(200).json({\n      success: true,\n      data: result\n    });\n  } catch (error) {\n    console.error('Error in auth endpoint:', error);\n    return res.status(401).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Authentication failed'\n    });\n  }\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Creating Component Styles with StyleSheet in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to create a stylesheet for a component using `StyleSheet.create`. It defines various styles for different parts of the component, such as the container. These styles are then used within the component to provide a consistent look and feel.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/core/sharedUI/README.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ComponentName.style.ts\nexport const ComponentNameStyles = StyleSheet.create({\n  container: {\n    // styles\n  },\n  // other styles\n});\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for Default BuySection Component\nDESCRIPTION: Function signature for a React component that handles NFT buying functionality. Takes BuySectionProps and an optional deprecated legacy context parameter, returning a ReactNode. Located in src/screens/Common/NftScreen/BuySection.tsx.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/BuySection/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(props: BuySectionProps, deprecatedLegacyContext?: any): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Defining AuthState Interface in TypeScript\nDESCRIPTION: The AuthState interface defines the structure for managing authentication-related state, including user information and loading/error status. This is essential for ensuring the integrity of the state throughout the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/state.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AuthState {\n  isLoggedIn: boolean;\n  user: {\n    id?: string;\n    username?: string;\n    profilePicture?: string;\n    walletAddress?: string;\n    // other user properties\n  };\n  loading: boolean;\n  error: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Dependencies\nDESCRIPTION: Commands to set up Ruby bundler and install CocoaPods dependencies required for iOS development.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n# Install Ruby bundler (first time only)\nbundle install\n\n# Install CocoaPods dependencies\nbundle exec pod install\n```\n\n----------------------------------------\n\nTITLE: ProfileInfo Component Usage Example\nDESCRIPTION: Example showing how to use the ProfileInfo component with sample props and handlers.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/ProfileInfo/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ProfileInfo\n  profilePicUrl=\"https://example.com/avatar.png\"\n  username=\"Alice\"\n  userWallet=\"xxxxxx...\"\n  isOwnProfile={false}\n  amIFollowing={true}\n  areTheyFollowingMe={false}\n  onFollowPress={() => {}}\n  onUnfollowPress={() => {}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running EAS Build for Android Development\nDESCRIPTION: Example command for building the app for Android using EAS with the development profile, which automatically loads environment variables from .env.local.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n# Example for a development build on Android\nnpx eas build --profile development --platform android\n```\n\n----------------------------------------\n\nTITLE: Updating User Profile - Express.js\nDESCRIPTION: This route allows authenticated users to update their profile information. It utilizes middleware for authentication and processes the request body to update user data in the database. Successful updates return the updated profile, while errors are handled accordingly.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/routes/user/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.put('/profile', requireAuth, async (req: Request, res: Response) => {\n  try {\n    const userId = req.user.id; // Set by requireAuth middleware\n    const updatedProfile = await profileController.updateProfile(userId, req.body);\n    \n    return res.status(200).json({\n      success: true,\n      data: updatedProfile\n    });\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Integration Types in TypeScript\nDESCRIPTION: Defines types associated with third-party service integrations, such as 'PinataMetadata' for managing metadata and 'TokenMillSwapParams' for handling swap operations. These types help ensure consistent data structures when interacting with external services.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/types/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PinataMetadata {\n  name: string;\n  description?: string;\n  image?: string;\n  attributes?: Array<{\n    trait_type: string;\n    value: string | number;\n  }>\n}\n\nexport interface TokenMillSwapParams {\n  marketIndex: number;\n  amount: string;\n  direction: SwapDirection;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for default() in React NftScreen SellSection Component\nDESCRIPTION: Function signature for the default export of the SellSection component. It accepts props of type SellSectionProps and an optional deprecated legacy context parameter, returning a ReactNode.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/SellSection/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(props: SellSectionProps, deprecatedLegacyContext?: any): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Defining Feature State Interface in TypeScript\nDESCRIPTION: Defines the structure of a feature state using a TypeScript interface to ensure type safety and consistency. It captures the expected data, loading state, and possible error status, which are essential for managing Redux state effectively.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/state/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// types.ts\\nexport interface FeatureState {\\n  data: Record<string, DataItem>;\\n  loading: boolean;\\n  error: string | null;\\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Android App\nDESCRIPTION: Commands to run the Android application using different package managers.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\npnpm android\n# or\nyarn android\n# or\nnpm run android\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Knex\nDESCRIPTION: This code showcases example Knex.js queries for common database operations. It demonstrates how to select, insert, update, and delete data from the 'users' table, including filtering, returning values, and handling asynchronous operations.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/db/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Select query\n   const users = await knex('users')\n     .where({ active: true })\n     .select('id', 'username');\n\n   // Insert query\n   const [userId] = await knex('users')\n     .insert({\n       username: 'newuser',\n       wallet_address: 'solana123',\n     })\n     .returning('id');\n\n   // Update query\n   await knex('users')\n     .where({ id: userId })\n     .update({ username: 'updateduser' });\n\n   // Delete query\n   await knex('users')\n     .where({ id: userId })\n     .delete();\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Styles with Theme Override in TypeScript\nDESCRIPTION: Example demonstrating how to use createWalletStyles function to generate wallet styles with a custom theme override. The function accepts a merged theme object and optional style overrides to customize the wallet's appearance.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/wallet/wallet.styles/functions/createWalletStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst theme = getMergedWalletTheme();\nconst styles = createWalletStyles(theme, {\n  container: { backgroundColor: '#000' }\n});\n```\n\n----------------------------------------\n\nTITLE: React Component Function Definition in FundUserCard.tsx\nDESCRIPTION: TypeScript React component function definition. The function accepts named parameters of type Props and returns a React Element. It's defined on line 14 of the FundUserCard.tsx file.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/FundUserCard/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(__namedParameters: Props): Element\n```\n\n----------------------------------------\n\nTITLE: Running the iOS App\nDESCRIPTION: Commands to run the iOS application using different package managers after installing dependencies.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\npnpm ios\n# or\nyarn ios\n# or\nnpm run ios\n```\n\n----------------------------------------\n\nTITLE: Using PumpfunCard Component\nDESCRIPTION: This code snippet demonstrates how to use the `PumpfunCard` component as a base card for other PumpFun components. It illustrates how to customize the container style and pass children components (in this case, a `<Text>` component) to display content within the card. The component is imported from `@solana-app-kit/pumpfun`.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/pumpFun/README.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PumpfunCard } from '@solana-app-kit/pumpfun';\n\n// Usage\n<PumpfunCard containerStyle={styles.customCard}>\n  <Text>Card Content</Text>\n</PumpfunCard>\n```\n\n----------------------------------------\n\nTITLE: Defining Styles Object for PumpFun Screen in TypeScript\nDESCRIPTION: This code snippet defines a constant 'styles' object containing various style properties for UI components. It includes styles for containers, text elements, buttons, and layout arrangements specific to the PumpFun screen in the Solana Social Kit.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/pumpfunScreen/pumpfunScreen.style/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles: object = {\n  balanceContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: 8\n  },\n  balanceLabel: {\n    fontSize: 16,\n    marginRight: 6\n  },\n  balanceValue: {\n    color: string,\n    fontSize: 16,\n    fontWeight: '600'\n  },\n  container: {\n    backgroundColor: '#fff',\n    flex: 1,\n    paddingHorizontal: 16\n  },\n  emptyText: {\n    color: '#999',\n    marginVertical: 16,\n    textAlign: 'center'\n  },\n  header: {\n    fontSize: 20,\n    fontWeight: '700',\n    marginBottom: 12,\n    textAlign: 'center'\n  },\n  listContentContainer: {\n    paddingBottom: 60,\n    paddingTop: 8\n  },\n  refreshButton: {\n    alignSelf: 'center',\n    backgroundColor: '#f5f5f5',\n    borderRadius: 6,\n    marginBottom: 10,\n    paddingHorizontal: 16,\n    paddingVertical: 8\n  },\n  refreshButtonText: {\n    fontSize: 14\n  },\n  selectButton: {\n    backgroundColor: string,\n    borderRadius: 6,\n    paddingHorizontal: 10,\n    paddingVertical: 6\n  },\n  selectButtonText: {\n    color: '#fff',\n    fontWeight: '600'\n  },\n  selectedTokenContainer: {\n    backgroundColor: '#F9F9F9',\n    borderRadius: 8,\n    marginBottom: 8,\n    padding: 12\n  },\n  selectedTokenLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 4\n  },\n  selectedTokenPlaceholder: {\n    color: '#666',\n    fontSize: 14,\n    fontStyle: 'italic'\n  },\n  selectedTokenText: {\n    color: '#333',\n    fontSize: 14\n  },\n  subHeader: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 6,\n    textAlign: 'center'\n  },\n  tabButton: {\n    borderColor: '#aaa',\n    borderRadius: 6,\n    borderWidth: 1,\n    marginHorizontal: 4,\n    paddingHorizontal: 16,\n    paddingVertical: 6\n  },\n  tabButtonActive: {\n    backgroundColor: string,\n    borderColor: string\n  },\n  tabsRow: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginVertical: 12\n  },\n  tabText: {\n    color: '#000'\n  },\n  tabTextActive: {\n    color: '#fff',\n    fontWeight: '600'\n  },\n  tokenAmount: {\n    color: '#333',\n    flex: 0.3,\n    fontWeight: '600',\n    marginRight: 8,\n    textAlign: 'right'\n  },\n  tokenMint: {\n    flex: 0.5,\n    fontWeight: '600'\n  },\n  tokenRow: {\n    alignItems: 'center',\n    borderColor: '#ccc',\n    borderRadius: 6,\n    borderWidth: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 6,\n    padding: 8\n  },\n  warnText: {\n    color: 'red',\n    fontSize: 16,\n    marginTop: 40,\n    textAlign: 'center'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserItem Interface in TypeScript for Solana Social Kit\nDESCRIPTION: This code snippet defines the UserItem interface which represents a user entity in the Solana Social Kit. It includes properties for user identification (id), display information (name, username, image), and relationship status (following).\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/mocks/users/interfaces/UserItem.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UserItem {\n  id: string;\n  name: string;\n  username: string;\n  image: any;\n  following: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Configuration\nDESCRIPTION: This code initializes a Knex instance using environment-specific configurations. It imports the Knex library, retrieves the environment from the NODE_ENV variable, loads the corresponding Knex configuration, and creates the Knex instance.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/db/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Knex from 'knex';\nimport config from './knexfile';\n\nconst environment = process.env.NODE_ENV || 'development';\nconst knexConfig = config[environment];\nconst knex = Knex(knexConfig);\n\nexport default knex;\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Overview\nDESCRIPTION: Detailed project structure showing the organization of the codebase, including both mobile app and server components with descriptions of each directory's purpose.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nsolana-app-kit/\n├── src/                # Mobile app source code\n│   ├── assets/         # Images, icons, and other static assets\n│   ├── config/         # Configuration files and settings\n│   ├── context/        # React context providers\n│   ├── core/           # Core application components\n│   │   ├── devMode/    # Development mode utilities\n│   │   ├── profile/    # User profile related components\n│   │   ├── sharedUI/   # Common UI components\n│   │   └── thread/     # Thread-related components\n│   ├── modules/        # Feature modules (core functionality)\n│   │   ├── dataModule/ # Data management module\n│   │   ├── mercuro/    # Advanced financial utilities\n│   │   ├── nft/        # NFT display and management\n│   │   ├── pumpFun/    # Pump.fun integration\n│   │   ├── tokenMill/  # Token creation and management\n│   │   └── walletProviders/ # Wallet connection adapters\n│   ├── screens/        # App screens and UI flows\n│   ├── services/       # API integrations and business logic\n│   ├── shared/         # Shared utilities and components\n│   │   ├── hooks/      # Custom React hooks\n│   │   ├── mocks/      # Mock data for testing\n│   │   ├── navigation/ # Navigation configuration\n│   │   ├── state/      # Redux store and slices\n│   │   ├── types/      # TypeScript type definitions\n│   │   └── utils/      # Utility functions and helpers\n├── server/             # Backend server code\n│   ├── src/            # Server source code\n│   │   ├── controllers/ # Controller functions\n│   │   ├── db/         # Database configuration\n│   │   ├── routes/     # API endpoints\n│   │   ├── service/    # Service implementations\n│   │   ├── types/      # TypeScript types\n│   │   └── utils/      # Utility functions\n│   ├── .env.example    # Example environment variables\n│   └── README.md       # Server documentation\n├── App.tsx             # Main application component\n├── index.js            # Entry point\n├── app.config.js       # Expo configuration\n├── app.json            # App configuration\n├── babel.config.js     # Babel configuration\n├── metro.config.js     # Metro bundler configuration\n├── tsconfig.json       # TypeScript configuration\n├── docs/               # Documentation files\n├── CONTRIBUTING.md     # Contribution guidelines\n├── LICENSE             # License information\n└── package.json        # Dependencies and scripts\n```\n\n----------------------------------------\n\nTITLE: TypeScript React Component Function in ExistingAddressCard\nDESCRIPTION: The default function that represents the ExistingAddressCard component. It accepts props of type Props and returns a React Element. This component is part of the tokenMill components in the solana-social-kit library.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/ExistingAddressCard/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(__namedParameters: Props): Element\n```\n\n----------------------------------------\n\nTITLE: Navigating to useFetchTokens Documentation\nDESCRIPTION: Markdown navigation structure showing the location and linking of the useFetchTokens hook documentation within the solana-social-kit project\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useFetchTokens/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"hooks/useFetchTokens\"\ndescription: \"Hook for fetching token accounts for a Solana wallet\"\n---\n\n[**solana-social-kit**](../../README.mdx)\n\n***\n\n[solana-social-kit](../../README.mdx) / hooks/useFetchTokens\n\n# hooks/useFetchTokens\n\n## Functions\n\n- [useFetchTokens](functions/useFetchTokens.mdx)\n```\n\n----------------------------------------\n\nTITLE: Using PumpSwapScreen Component\nDESCRIPTION: This code snippet shows a basic usage of the `PumpSwapScreen` component, which provides a screen for interacting with the PumpSwap AMM. The component is imported from `@solana-app-kit/pumpfun` and can be used directly within a React Native application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/pumpFun/README.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PumpSwapScreen } from '@solana-app-kit/pumpfun';\n\n// Usage\n<PumpSwapScreen />\n```\n\n----------------------------------------\n\nTITLE: Defining StyleSheet Object in TypeScript\nDESCRIPTION: Defines a constant styles object containing UI styling properties for components like buttons, text, containers, and modals. The styles use React Native compatible properties defining colors, dimensions, layouts and typography.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/CoinDetailPage/subPages/TopScreen/TopSection.style/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = {\n  activeTimeButton: {\n    backgroundColor: '#D6FDFF',\n    borderRadius: 6\n  },\n  activeTimeButtonText: {\n    color: '#32D4DE',\n    fontWeight: '600'\n  },\n  avatar: {\n    borderRadius: 20,\n    height: 30,\n    resizeMode: 'cover',\n    width: 30\n  },\n  borderLine: {\n    borderBottomColor: '#E5E5E5',\n    borderBottomWidth: 1,\n    marginHorizontal: 4,\n    marginTop: 16\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    gap: 12,\n    justifyContent: 'space-between',\n    marginTop: 24\n  },\n  cardContainer: {\n    marginRight: 16\n  },\n  cardList: {\n    paddingHorizontal: 16\n  },\n  coin: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    gap: 6,\n    justifyContent: 'center',\n    marginVertical: 24\n  },\n  coinText: {\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  container: {\n    backgroundColor: '#FFFFFF',\n    flex: 1,\n    width: '100%'\n  }\n  // Additional styles omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RootNavigationProp as Composite Navigation Type in TypeScript\nDESCRIPTION: This type alias combines NativeStackNavigationProp and BottomTabNavigationProp into a single composite navigation prop type. It allows navigation between both stack screens and tab screens within the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useAppNavigation/type-aliases/RootNavigationProp.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nRootNavigationProp: CompositeNavigationProp<NativeStackNavigationProp<RootStackParamList>, BottomTabNavigationProp<MainTabParamList>>\n```\n\n----------------------------------------\n\nTITLE: Initializing Providers and Configuring Application - TypeScript\nDESCRIPTION: This snippet initializes various providers crucial for the Expo application, including the Redux store, navigation container, and authentication providers. It also sets up wallet connectivity options and merges custom configurations from the CustomizationProvider to establish the application's root component structure.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/roots.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// App.tsx\n// The primary entry point for the Expo application:\n\n// Initializes providers:\n// - Redux store\n// - Navigation container\n// - Authentication providers\n\n// Configures wallet connections:\n// - Dynamic\n// - Privy\n\n// Merges custom configuration from `CustomizationProvider`\n// Sets up the application's root component structure\n```\n\n----------------------------------------\n\nTITLE: Starting Application in Development Mode with Yarn\nDESCRIPTION: Commands for starting the application in development mode with optional cache clearing.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/DEV_MODE.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For development with dev mode enabled\nyarn start --dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Wallet Client in TypeScript\nDESCRIPTION: A function that initializes the Dynamic wallet client with environment-specific configurations. It takes an environment ID and optional app name and logo URL as parameters. Used for setting up wallet interactions in a Solana application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/walletProviders/dynamic/functions/initDynamicClient.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction initDynamicClient(environmentId: string, appName?: string, appLogoUrl?: string): any\n```\n\n----------------------------------------\n\nTITLE: Basic Screen Layout in React\nDESCRIPTION: This React functional component outlines a basic layout structure for screens, including navigation and status bar setup.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/screens/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst Screen: React.FC = () => {\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" />\n      <Header />\n      <ScrollView contentContainerStyle={styles.content}>\n        <Content />\n      </ScrollView>\n      <BottomBar />\n    </SafeAreaView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using PostBody Component in React JSX\nDESCRIPTION: This example demonstrates how to use the PostBody component in a React application. It shows how to pass the required props including post data, theme overrides, style overrides, and an external refresh trigger.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostBody/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<PostBody\n  post={postData}\n  themeOverrides={{ '--primary-color': '#1D9BF0' }}\n  styleOverrides={{ extraContentContainer: { padding: 8 } }}\n  externalRefreshTrigger={refreshCounter}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Base Styles for CoinDetailLatestSection Component in TypeScript\nDESCRIPTION: This constant defines the default styling for the CoinDetailLatestSection component, organizing styles for the container and text elements. It specifies flex properties, padding, font size, and font weight settings.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/CoinDetailLatestSection/CoinDetailLatestSection.style/variables/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst defaultLatestSectionStyles: object = {\n  container: {\n    flex: 1,\n    padding: 16\n  },\n  text: {\n    fontSize: 16,\n    fontWeight: '500'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Styled Components for React Native SearchScreen in TypeScript\nDESCRIPTION: A comprehensive styles object that defines the styling for various UI components in a SearchScreen. It includes styling for containers, headers, cards, buttons, and text elements with properties for dimensions, colors, fonts, and shadows.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/SearchScreen/SearchScreen.styles/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles: object = {\n  container: {\n    alignItems: 'center',\n    padding: 16,\n    paddingBottom: 32\n  },\n  safeArea: {\n    backgroundColor: '#fff',\n    flex: 1\n  },\n  header: {\n    alignItems: 'center',\n    borderBottomColor: '#eee',\n    borderBottomWidth: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12\n  },\n  headerTitle: {\n    color: '#333',\n    fontSize: 20,\n    fontWeight: '700'\n  },\n  logoutButton: {\n    padding: 8\n  },\n  logoutText: {\n    color: '#FF4500',\n    fontSize: 16,\n    fontWeight: '600'\n  },\n  card: {\n    borderRadius: 12,\n    elevation: 2,\n    marginBottom: 16,\n    padding: 20,\n    shadowColor: '#000',\n    shadowOffset: {\n      height: 2,\n      width: 0\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    width: '90%'\n  },\n  cardTitle: {\n    color: '#333',\n    fontSize: 18,\n    fontWeight: '700',\n    marginBottom: 8\n  },\n  cardDescription: {\n    color: '#555',\n    fontSize: 14,\n    marginBottom: 12\n  },\n  cardButton: {\n    alignItems: 'center',\n    backgroundColor: '#2a2a2a',\n    borderRadius: 8,\n    paddingVertical: 10\n  },\n  cardButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Export Function for CoinDetailPage in TypeScript\nDESCRIPTION: This function is the default export for the CoinDetailPage component. It returns an Element, which is likely a React component. The function is defined in the CoinDetailPage.tsx file within the project's screens directory.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/CoinDetailPage/CoinDetailPage/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: Function Signature for Login Screen Component\nDESCRIPTION: Type declaration for default function that returns a React Element. The function is defined in LoginScreen.tsx and serves as the main login screen component.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/LoginScreen/LoginScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: Adding Reply with Solana Social Kit in TypeScript\nDESCRIPTION: The 'addReplyLocally' function is part of the Solana App Kit's state management system. It returns a PayloadAction when called, using 'payload' as its argument. Dependencies include Redux for managing state changes. The 'payload' consists of 'parentId' and 'reply', where 'reply' must conform to the 'ThreadPost' interface. The function outputs an object encapsulating the action type and payload.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/thread/reducer/functions/addReplyLocally.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addReplyLocally(payload: { parentId: string; reply: ThreadPost }): object {\n    // This function is an action creator for Redux\n    return { type: \"ADD_REPLY\", payload };\n}\n```\n\n----------------------------------------\n\nTITLE: Component Testing Example\nDESCRIPTION: Example of writing unit tests for React components using React Testing Library. Shows how to test component behavior by simulating user interactions and verifying expected outcomes.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { render, fireEvent } from '@testing-library/react-native';\nimport MyButton from './MyButton';\n\ndescribe('MyButton', () => {\n  it('should call onPress when pressed', () => {\n    const onPressMock = jest.fn();\n    const { getByText } = render(<MyButton onPress={onPressMock} label=\"Tap\" />);\n    fireEvent.press(getByText('Tap'));\n    expect(onPressMock).toHaveBeenCalled();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing TopNavigation Component in React\nDESCRIPTION: This snippet demonstrates how to import and use the TopNavigation component in a React application. The TopNavigation component is likely a pre-built navigation bar for Solana-based social applications.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/topNavigation/topNavigation/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TopNavigation } from 'solana-social-kit';\n\nfunction App() {\n  return (\n    <div>\n      <TopNavigation />\n      {/* Rest of your app content */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MainTabParamList Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the MainTabParamList type alias as an object with properties for different tabs in the main navigation. Each property is set to undefined, indicating that these tabs do not require any parameters.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useAppNavigation/type-aliases/MainTabParamList.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MainTabParamList = {\n  Feed: undefined;\n  Home: undefined;\n  Notifications: undefined;\n  Profile: undefined;\n  Search: undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LineGraph React Component in TypeScript\nDESCRIPTION: This function defines a React component named LineGraph. It takes props of type LineGraphProps and an optional deprecated legacy context parameter. The function returns a ReactNode, which represents the rendered output of the component.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/CoinDetailPage/subPages/TopScreen/LineGraph/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(props: LineGraphProps, deprecatedLegacyContext?: any): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Integration Testing for Screen Components with Navigation\nDESCRIPTION: This Jest test verifies that the screen component properly integrates with the navigation system in the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/screens/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nit('integrates with navigation', () => {\n  const { getByText } = render(\n    <NavigationContainer>\n      <Screen />\n    </NavigationContainer>\n  );\n  \n  fireEvent.press(getByText('Navigate'));\n  // Assert navigation occurred\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Default SectionNftListing Component for Solana Social Kit\nDESCRIPTION: This snippet indicates the presence of a default export for the SectionNftListing component. The component is likely used for displaying NFT listings within a thread in the Solana Social Kit application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/sections/SectionNftListing/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function SectionNftListing() {\n  // Component implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Options in Stack Navigation\nDESCRIPTION: This snippet sets screen options for the Profile screen in a stack navigator, specifying the visibility of the header and its elements, enhancing user experience.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/navigation/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  options={{\n    headerShown: true,\n    headerTitle: 'User Profile',\n    headerLeft: () => <BackButton />, \n    presentation: 'modal',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that outlines the supported versions of the Solana App Kit and their security update status. It emphasizes that only the latest release receives active security updates.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Security Updates |\n| ------- | --------------- |\n| Latest Release | ✅ Active |\n| Previous Releases | ⚠️ Use at your own risk |\n```\n\n----------------------------------------\n\nTITLE: Parsing Raydium Versioned Transaction from Base64 (Typescript)\nDESCRIPTION: This snippet defines the `parseRaydiumVersionedTransaction` function.  It accepts a base64 encoded transaction string (`base64Tx`) as input and returns a `VersionedTransaction` object. This function is used to parse a versioned transaction from its base64 representation, specifically within the Raydium context.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/pumpfun/pumpfunUtils/functions/parseRaydiumVersionedTransaction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > **parseRaydiumVersionedTransaction**(`base64Tx`): `VersionedTransaction`\n */\n```\n\n----------------------------------------\n\nTITLE: Login Screen Style Object Definition in TypeScript\nDESCRIPTION: Defines a comprehensive style object for a login screen component with detailed styling for various UI elements including containers, buttons, text, gradients and layout positioning. Uses TypeScript for type safety and includes specific values for colors, dimensions, and typography.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/LoginScreen/LoginScreen.styles/variables/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst default: object = {\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.white,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  agreementText: {\n    position: 'absolute',\n    bottom: 30,\n    color: COLORS.textLight,\n    fontSize: 14,\n    textAlign: 'center'\n  },\n  bottomButtonsContainer: {\n    position: 'absolute',\n    bottom: 60,\n    width: '100%',\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: COLORS.black,\n    fontFamily: 'Inter',\n    fontSize: 14,\n    fontWeight: '600',\n    letterSpacing: -0.01,\n    lineHeight: 19.6,\n    marginLeft: 10,\n    textAlign: 'center'\n  },\n  gradient: {\n    position: 'absolute',\n    bottom: 0\n  },\n  loginButton: {\n    alignItems: 'center',\n    backgroundColor: COLORS.white,\n    borderRadius: 10,\n    flexDirection: 'row',\n    height: 45,\n    justifyContent: 'center',\n    marginVertical: 8,\n    width: '90%'\n  },\n  smileFaceContainer: {\n    elevation: 1,\n    paddingHorizontal: 30,\n    paddingVertical: 10,\n    position: 'absolute',\n    shadowColor: COLORS.black,\n    shadowOffset: {\n      width: 0,\n      height: 10\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 10\n  },\n  splashTextContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute'\n  },\n  svgContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting SectionTextVideo React Component\nDESCRIPTION: This snippet exports a default React functional component named SectionTextVideo. The component likely renders a section containing both text and video content within a thread interface.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/sections/SectionTextVideo/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n- [default](functions/default.mdx)\n```\n\n----------------------------------------\n\nTITLE: MockDataConfig Interface Definition in TypeScript\nDESCRIPTION: This interface defines the structure for mock data configuration in Solana App Kit. It includes properties for profileData, tweetsData, postsData, and usersData that can be used for testing and development environments.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/interfaces/MockDataConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MockDataConfig {\n  profileData: ProfileData;\n  tweetsData: object[];\n  postsData: ThreadPost[];\n  usersData: UserItem[];\n}\n```\n\n----------------------------------------\n\nTITLE: Chat Screen Default Export Function - TypeScript/React\nDESCRIPTION: Default export function for the ChatScreen component that returns a React Element. Located in src/screens/SampleUI/Chat/ChatScreen/ChatScreen.tsx at line 24.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Chat/ChatScreen/ChatScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: Defining a React Element Function in TypeScript\nDESCRIPTION: A default function that returns a React Element for a platform selection screen. The function is defined in the PlatformSelectionScreen.tsx file and is part of the Solana social kit application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/PlatformSelectionScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: Accessing DefaultTransactionConfig Variable in TypeScript\nDESCRIPTION: The DefaultTransactionConfig constant provides default configuration values for transaction handling in the solana-social-kit library. It implements the TransactionProviderConfig interface and is defined in the config module.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/variables/DefaultTransactionConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DefaultTransactionConfig: TransactionProviderConfig\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Types in TypeScript\nDESCRIPTION: Defines utility types that transform existing types, such as 'Nullable', 'OptionalFields', and 'WithId'. These utilities simplify type manipulation and enhance type flexibility across the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/types/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Nullable<T> = T | null;\n\nexport type OptionalFields<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type WithId<T> = T & { id: string };\n```\n\n----------------------------------------\n\nTITLE: Defining PumpfunBuySectionProps Interface in TypeScript\nDESCRIPTION: This code snippet defines the PumpfunBuySectionProps interface with optional properties for styling and customization of the PumpfunBuySection component.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/PumpfunBuySection/interfaces/PumpfunBuySectionProps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface PumpfunBuySectionProps {\n  containerStyle?: StyleProp<ViewStyle>;\n  inputStyle?: StyleProp<TextStyle>;\n  buttonStyle?: StyleProp<ViewStyle>;\n  buyButtonLabel?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Styles in TypeScript\nDESCRIPTION: The createWalletStyles function generates custom styles for wallet components. It likely takes theme parameters and returns a styles object.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/wallet/wallet.styles/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateWalletStyles\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for useTradeTransaction Hook\nDESCRIPTION: Documentation structure defining the navigation and function reference for the useTradeTransaction hook within the solana-social-kit library.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useTradeTransaction/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"hooks/useTradeTransaction\"\ndescription: \"Hook for handling Solana trade transactions\"\n---\n\n[**solana-social-kit**](../../README.mdx)\n\n***\n\n[solana-social-kit](../../README.mdx) / hooks/useTradeTransaction\n\n# hooks/useTradeTransaction\n\n## Functions\n\n- [useTradeTransaction](functions/useTradeTransaction.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable HELIUS_RPC_URL in Typescript\nDESCRIPTION: Defines a constant string HELIUS_RPC_URL intended to store the RPC (Remote Procedure Call) URL for interacting with the Solana blockchain. This constant is defined in a TypeScript types definition file, which sets up the project's environmental configuration for accessing Helius RPC services. There are no additional parameters, and it is expected to be set as a string representing a URL.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/HELIUS_RPC_URL.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst HELIUS_RPC_URL: string;\n```\n\n----------------------------------------\n\nTITLE: Testing Navigation with Jest in TypeScript\nDESCRIPTION: This snippet provides a mocked navigation object and demonstrates how to test the navigation functionality within a React component, ensuring navigation occurs on button press.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/navigation/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst mockNavigation = {\n  navigate: jest.fn(),\n  goBack: jest.fn(),\n};\n\ndescribe('Screen', () => {\n  it('should navigate on button press', () => {\n    render(<Screen navigation={mockNavigation} />);\n    fireEvent.press(screen.getByText('Navigate'));\n    expect(mockNavigation.navigate).toHaveBeenCalled();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Bundler\nDESCRIPTION: Starts the Metro bundler for the project. The `--clear` option removes cached data which may be useful for resolving build issues but should be used sparingly to avoid slowing down builds.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/setup.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nyarn start --clear\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Default Function Declaration in RootNavigator\nDESCRIPTION: A TypeScript function that serves as the default export for the RootNavigator component. The function returns a React Element type and is defined on line 31 of the RootNavigator.tsx file.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/navigation/RootNavigator/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: Defining RootState Type Alias in TypeScript\nDESCRIPTION: This snippet defines the `RootState` type alias using TypeScript's `ReturnType` utility type.  It infers the return type from the `store.getState` function, effectively capturing the structure of the application's Redux store state. This provides type safety when accessing and manipulating the state throughout the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/store/type-aliases/RootState.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **RootState**: `ReturnType`\\<*typeof* `store.getState`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining PollData Interface in TypeScript\nDESCRIPTION: This code snippet defines the PollData interface with three properties: question (string), options (array of strings), and votes (array of numbers). The interface is used for representing poll data within threads in the Solana Social Kit.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.types/interfaces/PollData.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface PollData {\n  question: string;\n  options: string[];\n  votes: number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Thread Utilities in TypeScript\nDESCRIPTION: Shows how to import specific utility functions from the thread.utils module. These functions can be used to manage thread-related operations in a Solana social application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.utils/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { \n  // Import specific utilities\n} from 'path/to/components/thread/thread.utils';\n```\n\n----------------------------------------\n\nTITLE: Exporting Default WalletSlide Component for Solana Social Kit\nDESCRIPTION: This snippet exports a default function, presumably the main implementation of the WalletSlide component. The function is likely to handle wallet-related UI and interactions in the Solana Social Kit.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/WalletSlide/walletSlide/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [default](functions/default.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining PRIVY_APP_ID Variable in TypeScript\nDESCRIPTION: Defines a constant string variable named `PRIVY_APP_ID`. This variable is intended to store the application ID associated with the Privy service, likely used for authentication or integration purposes within the Solana application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/PRIVY_APP_ID.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"> `const` **PRIVY_APP_ID**: `string`\"\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Constants in TypeScript\nDESCRIPTION: This snippet defines the SERVER_URL constant as a string within a TypeScript environment configuration file. It specifies the server URL used within the Solana App Kit project. There are no prerequisites other than importing this constant wherever needed in the application. This constant serves as a configuration value and should be set according to the environment (e.g., development, staging, production).\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/SERVER_URL.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst SERVER_URL: string;\n```\n\n----------------------------------------\n\nTITLE: File Organization Structure Example\nDESCRIPTION: Example of recommended file organization for component modules. Shows the proper way to structure files within a module including main components, styles, types, and subcomponents.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/components/MyModule\n ├─ MyModuleMain.tsx\n ├─ MyModuleMain.style.ts\n └─ MyModuleSubComponent/\n     ├─ MyModuleSubComponent.tsx\n     ├─ MyModuleSubComponent.style.ts\n     └─ MyModuleSubComponent.types.ts\n```\n\n----------------------------------------\n\nTITLE: Form Handling in a React Screen Component\nDESCRIPTION: This snippet illustrates how to manage form submissions within a screen component using a custom hook for handling form state and submission.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/screens/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst FormScreen: React.FC = () => {\n  const [formState, setFormState] = useState(initialState);\n  const { handleSubmit, isSubmitting } = useFormSubmit();\n  \n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input\n        value={formState.field}\n        onChange={value => setFormState({ ...formState, field: value })}\n      />\n      <Button \n        disabled={isSubmitting}\n        onPress={handleSubmit}\n      />\n    </Form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining modalUI Styles Object in TypeScript for React Native\nDESCRIPTION: Creates a modalUI object with nested style definitions for various UI components used in a modal interface. Includes styles for buttons, text, NFT displays, and overlay elements.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/ProfileScreen/ProfileScreen.styles/variables/modalUI.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst modalUI: object = {\n  closeButton: {\n    alignItems: 'center',\n    backgroundColor: '#aaa',\n    borderRadius: 8,\n    paddingVertical: 10\n  },\n  closeButtonText: {\n    color: '#fff',\n    fontWeight: '600'\n  },\n  nftCollection: {\n    color: '#777',\n    fontSize: 12,\n    marginBottom: 2\n  },\n  nftContainer: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    maxHeight: '80%',\n    padding: 16,\n    width: '90%'\n  },\n  nftError: {\n    color: '#c00',\n    marginTop: 16,\n    textAlign: 'center'\n  },\n  nftImage: {\n    height: '100%',\n    resizeMode: 'cover',\n    width: '100%'\n  },\n  nftImageContainer: {\n    backgroundColor: '#eee',\n    borderRadius: 6,\n    height: 60,\n    marginRight: 6,\n    overflow: 'hidden',\n    width: 60\n  },\n  nftItem: {\n    alignItems: 'center',\n    backgroundColor: '#f8f8f8',\n    borderRadius: 8,\n    flexDirection: 'row',\n    marginBottom: 10,\n    padding: 8\n  },\n  nftMint: {\n    color: '#999',\n    fontSize: 10\n  },\n  nftName: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 2\n  },\n  nftOverlay: {\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0.35)',\n    flex: 1,\n    justifyContent: 'center',\n    padding: 16\n  },\n  nftPlaceholder: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center'\n  },\n  nftTitle: {\n    fontSize: 18,\n    fontWeight: '700',\n    marginBottom: 8,\n    textAlign: 'center'\n  },\n  optionButton: {\n    alignItems: 'center',\n    backgroundColor: '#1d9bf0',\n    borderRadius: 8,\n    marginVertical: 6,\n    padding: 12,\n    width: '100%'\n  },\n  optionButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600'\n  },\n  optionContainer: {\n    alignItems: 'center',\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 20,\n    width: '80%'\n  },\n  optionTitle: {\n    color: '#333',\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 14\n  },\n  overlay: {\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0.35)',\n    flex: 1,\n    justifyContent: 'center',\n    padding: 16\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AddButton Component in TSX\nDESCRIPTION: This example demonstrates how to use the AddButton component in a React application. The component is self-contained and doesn't require any props to be passed.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/addButton/addButton/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<AddButton />\n```\n\n----------------------------------------\n\nTITLE: Exporting Default EmbeddedWallet Function in TypeScript\nDESCRIPTION: This snippet exports a default function for the EmbeddedWallet component. The function likely handles the rendering and functionality of the embedded wallet interface.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/wallet/EmbeddedWallet/README.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function EmbeddedWallet() {\n  // Function implementation would be here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constant: WALLET_PRIVATE_KEY in TypeScript\nDESCRIPTION: This snippet defines a constant named 'WALLET_PRIVATE_KEY' of type string. It is likely used to hold the private key for a wallet, which is crucial for authentication and transactions within the Solana blockchain framework.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/WALLET_PRIVATE_KEY.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst WALLET_PRIVATE_KEY: string\n```\n\n----------------------------------------\n\nTITLE: Defining DYNAMIC_ENVIRONMENT_ID in TypeScript\nDESCRIPTION: This snippet shows the declaration of the DYNAMIC_ENVIRONMENT_ID constant as a string within a TypeScript declaration file. It indicates that this variable represents a dynamic environment identifier used within the application. The variable is declared as a constant which implies it's value should not change after initialization.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/DYNAMIC_ENVIRONMENT_ID.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst **DYNAMIC_ENVIRONMENT_ID**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Width Constant in TypeScript\nDESCRIPTION: Constant that sets the chart width as the minimum between 92% of viewport width and 600 pixels. Used in the BondingCurveConfigurator component to ensure responsive design while maintaining readability.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/BondingCurveConfigurator.styles/variables/CHART_WIDTH.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst CHART_WIDTH: number\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable HELIUS_API_KEY in TypeScript\nDESCRIPTION: This snippet defines a constant HELIUS_API_KEY of type string, which is used for storing the API key necessary for integration with Helius services in the Solana app. The constant is expected to be used in configurations and requires TypeScript as a prerequisite.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/HELIUS_API_KEY.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst HELIUS_API_KEY: string\n```\n\n----------------------------------------\n\nTITLE: Exporting Bonding Curve Configurator Styles in JavaScript\nDESCRIPTION: Defines and exports a constant named BondingCurveConfiguratorStyles, which likely contains CSS-in-JS styles for a Bonding Curve Configurator component.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/BondingCurveConfigurator.styles/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const BondingCurveConfiguratorStyles = {}\n```\n\n----------------------------------------\n\nTITLE: Defining Constant for RPC_URL in Typescript\nDESCRIPTION: This snippet defines a constant variable RPC_URL of type string, which is intended to hold the URL for the Remote Procedure Call. It is likely used throughout the Solana application to make network requests. The snippet is part of a TypeScript definitions file, indicating it will be used for type safety and compliance within a larger application context.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/RPC_URL.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst RPC_URL: string;\n```\n\n----------------------------------------\n\nTITLE: Defining React Native StyleSheet for NFT Screen in TypeScript\nDESCRIPTION: This code defines a comprehensive set of React Native styles for the NFT screen interface. It includes styles for the main container, tab navigation system with active/inactive states, and warning text display. The styles define layout properties, colors, spacing, and text formatting.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/styles/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles: object = {\n  container: {\n    backgroundColor: '#ffffff',\n    flex: 1,\n    padding: 12\n  },\n  tabButton: {\n    alignItems: 'center',\n    borderRadius: 6,\n    flex: 1,\n    paddingHorizontal: 16,\n    paddingVertical: 10\n  },\n  tabButtonActive: {\n    backgroundColor: '#32D4DE'\n  },\n  tabButtonText: {\n    color: '#2a2a2a',\n    fontWeight: '600'\n  },\n  tabButtonTextActive: {\n    color: '#ffffff'\n  },\n  tabContainer: {\n    backgroundColor: '#f5f5f5',\n    borderRadius: 8,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginBottom: 16,\n    padding: 4\n  },\n  warnText: {\n    color: 'red',\n    fontWeight: '600',\n    marginTop: 40,\n    textAlign: 'center'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tweet Component Module Structure\nDESCRIPTION: Directory and module structure documentation for the tweet component, showing the available functions and navigation paths.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/tweet/tweet/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [default](functions/default.mdx)\n```\n\n----------------------------------------\n\nTITLE: Project Folder Structure Overview\nDESCRIPTION: Overview of the key folders in the project structure that contributors should be aware of. This includes the organization of Android/iOS configurations, server-side code, and frontend code components.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nandroid/            -> React Native Android configuration\nios/                -> React Native iOS configuration\nserver/             -> Express.js server (optional APIs)\n  src/controllers/  -> Server controllers\n  src/routes/       -> Express route definitions\n  src/service/      -> Server business logic\n  src/utils/        -> Server-side utilities\nsrc/\n  components/       -> Reusable UI components\n  services/         -> Client-side business logic or API calls\n  utils/            -> Client-side utility functions\n  state/            -> Redux slices and store configuration\n  screens/          -> Sample screens and flows\ndocs/               -> Documentation\n```\n\n----------------------------------------\n\nTITLE: Function Parameters Definition in TypeScript\nDESCRIPTION: TypeScript parameter definition table showing the userId parameter and its type.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/profileService/functions/fetchUserProfile.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n| Parameter | Type | Description |\n| :------ | :------ | :------ |\n| `userId` | `string` | The user's wallet address or unique ID |\n```\n\n----------------------------------------\n\nTITLE: Declaring Tensor API Key Environment Variable in TypeScript\nDESCRIPTION: Defines a constant string variable for storing the Tensor API key, typically used for authentication and API interactions with the Tensor platform\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/TENSOR_API_KEY.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst TENSOR_API_KEY: string\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Handling in Development Mode\nDESCRIPTION: TypeScript implementation showing how to handle environment variables in development mode using getEnvWithFallback function with different fallback scenarios.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/DEV_MODE.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getEnvWithFallback} from '../utils/envValidator';\n\n// Basic usage with default empty string fallback\nconst apiKey = getEnvWithFallback('API_KEY', API_KEY, 'Feature Name', '');\n\n// With a specific mock value\nconst apiUrl = getEnvWithFallback(\n  'API_URL',\n  API_URL,\n  'Feature Name',\n  'https://mock-api.example.com',\n);\n\n// Handle missing values\nif (!apiKey && global.__DEV_MODE__) {\n  console.log('[DEV MODE] Using mock implementation for Feature Name');\n  // Implement mock version of the feature\n  return mockData;\n}\n\n// Continue with normal implementation when variable exists\n```\n\n----------------------------------------\n\nTITLE: Defining DYNAMIC_API_KEY Variable in Typescript\nDESCRIPTION: This snippet defines the `DYNAMIC_API_KEY` constant as a string. It is intended to store the dynamic API key used within the Solana application. The type definition is located in `src/types/env.d.ts`.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/DYNAMIC_API_KEY.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"> `const` **DYNAMIC_API_KEY**: `string`\"\n```\n\n----------------------------------------\n\nTITLE: Declaring DEFAULT_IMAGES Constant in TypeScript\nDESCRIPTION: Defines a constant DEFAULT_IMAGES as a Record<string, any> type. This constant likely holds default image data for the Solana Social Kit application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/constants/variables/DEFAULT_IMAGES.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DEFAULT_IMAGES: Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Exporting SuggestionsCard Component for Solana Social App\nDESCRIPTION: This code snippet exports a default function, presumably the SuggestionsCard component. It's part of a React-based UI for a Solana social application, likely used to render a card with user suggestions or recommendations.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/suggestionsCard/suggestionsCard/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n- [default](functions/default.mdx)\n```\n\n----------------------------------------\n\nTITLE: Navigating to Server Directory in Shell\nDESCRIPTION: Command to navigate to the server directory before installation.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd server\n```\n\n----------------------------------------\n\nTITLE: Defining Styles Object for People Section UI Components in TypeScript\nDESCRIPTION: Creates a constant styles object with nested objects defining various CSS-like properties for different UI components. It includes styles for card containers, lists, headers, and content areas, specifying properties like padding, margins, flex settings, and font styles.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/CoinDetailPage/subPages/PeopleScreen/PeopleSection.style/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles: object = {\n  cardContainer: {\n    marginRight: 16\n  },\n  cardList: {\n    paddingHorizontal: 16\n  },\n  container: {\n    flex: 1,\n    width: '100%'\n  },\n  content: {\n    padding: 16,\n    width: \"100%\"\n  },\n  holdersHeader: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    gap: 8,\n    marginTop: 12\n  },\n  holdersTitle: {\n    fontSize: 16,\n    fontWeight: '600'\n  },\n  userList: {\n    marginTop: 16\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PRIVY_CLIENT_ID Constant in TypeScript\nDESCRIPTION: The code snippet declares a constant variable PRIVY_CLIENT_ID of type string in a TypeScript file. The variable is intended for use within the Solana application, possibly for configuration or identification purposes within the Privy client systems. No additional dependencies apart from TypeScript are inferred. The value of this constant is not defined within this snippet, suggesting it might be set in an environment configuration file.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/PRIVY_CLIENT_ID.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"const PRIVY_CLIENT_ID: string;\"\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationRef Variable in TypeScript\nDESCRIPTION: Defines a constant navigationRef variable of type NavigationContainerRefWithCurrent, parameterized with RootStackParamList. This ref can be used for navigation without using the hook directly.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useAppNavigation/variables/navigationRef.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst navigationRef: NavigationContainerRefWithCurrent<RootStackParamList>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: This snippet shows the environment variables required to configure the Aura DAS API Backend, including the port number for the server and the Solana RPC URL. These variables are essential for the application to function correctly.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/types/aura/README.md#2025-04-21_snippet_2\n\nLANGUAGE: env\nCODE:\n```\n\"PORT=3000\nRPC_URL=https://api.mainnet-beta.solana.com\"\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Reference in TypeScript for React Native\nDESCRIPTION: This snippet declares a navigation reference variable, likely used to access navigation methods throughout the app without passing navigation props.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useAppNavigation/README.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n- [navigationRef](variables/navigationRef.mdx)\n```\n\n----------------------------------------\n\nTITLE: Application Registration and Configuration - JavaScript\nDESCRIPTION: This snippet handles the application registration and configuration for the Expo application. It sets up necessary polyfills required by the application, registers the root component with Expo, and serves as the entry point for the React Native bundler.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/roots.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\n// Application registration and configuration:\n\n// Sets up necessary polyfills:\n// - `fast-text-encoding`\n// - `global.Buffer`\n\n// Registers the root component with Expo\n// Entry point for the React Native bundler\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for ProfileScreen Component in TypeScript\nDESCRIPTION: This code snippet defines a constant object 'styles' containing numerous style definitions for various UI elements of a profile screen in a React Native application. It includes styles for containers, images, text, buttons, and layout components.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/ProfileScreen/ProfileScreen.styles/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles: object = {\n  container: {\n    backgroundColor: COLORS.white,\n    flex: 1\n  },\n  bannerContainer: {\n    backgroundColor: COLORS.greyLight,\n    height: 120,\n    width: '100%'\n  },\n  bannerImage: {\n    height: '100%',\n    resizeMode: 'cover',\n    width: '100%'\n  },\n  profileAvatarWrapper: {\n    borderColor: COLORS.white,\n    borderRadius: 40,\n    borderWidth: 3,\n    height: 80,\n    marginTop: -36,\n    overflow: 'hidden',\n    width: 80\n  },\n  profileAvatar: {\n    borderRadius: 40,\n    height: 80,\n    width: 80\n  },\n  // ... (other style definitions)\n}\n```\n\n----------------------------------------\n\nTITLE: CoinDetailTopSection Interface Definition\nDESCRIPTION: TypeScript interface definition for the CoinDetailTopSection component props, specifying the required tweet data structure and optional custom styles.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/CoinDetailTopSection/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CoinDetailTopSectionProps {\n  tweetData: Array<{\n    username: string;\n    handle: string;\n    time: string;\n    tweetContent: string;\n    quoteCount: number;\n    retweetCount: number;\n    reactionCount: number;\n    avatar: any;\n  }>;\n  customStyles?: CoinDetailTopSectionCustomStyles;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies with PNPM\nDESCRIPTION: Command to install server dependencies using PNPM package manager.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: React Native Component Styles Definition\nDESCRIPTION: Comprehensive style definitions for a React Native application interface including modal components, buttons, typography, and layout containers. The styles define visual properties like colors, dimensions, positioning, and typography for various UI elements.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/CoinDetailPage/subPages/TopScreen/TopSection.style/variables/styles.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  modalPriceInfo: {\n    alignItems: 'flex-end'\n  },\n  modalPriceLabel: {\n    color: '#666666',\n    fontSize: 14,\n    marginBottom: 4\n  },\n  modalStackAvatar1: {\n    borderRadius: 12,\n    height: 24,\n    width: 24,\n    left: 0,\n    position: 'absolute',\n    zIndex: 3\n  },\n  modalStackAvatar2: {\n    borderRadius: 12,\n    height: 24,\n    width: 24,\n    left: 12,\n    position: 'absolute',\n    zIndex: 2\n  },\n  modalStackAvatar3: {\n    borderRadius: 12,\n    height: 24,\n    width: 24,\n    left: 24,\n    position: 'absolute',\n    zIndex: 1\n  },\n  modalSubtitle: {\n    color: '#666666',\n    fontSize: 14\n  },\n  modalTitle: {\n    color: '#000000',\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  modalTopButton: {\n    backgroundColor: '#F5F5F5',\n    borderRadius: 12,\n    padding: 16,\n    width: '100%'\n  },\n  sendButton: {\n    alignItems: 'center',\n    backgroundColor: '#318EF8',\n    borderRadius: 30,\n    flex: 1,\n    flexDirection: 'row',\n    gap: 6,\n    justifyContent: 'center',\n    padding: 16\n  },\n  swapButton: {\n    alignItems: 'center',\n    backgroundColor: 'black',\n    borderRadius: 30,\n    flex: 1,\n    flexDirection: 'row',\n    gap: 6,\n    justifyContent: 'center',\n    padding: 16\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Confirmation Modal Styles in TypeScript\nDESCRIPTION: Contains a comprehensive set of styling properties for a modal UI component including layout, dimensions, colors, and typography. The styles are organized into logical sections for container, overlay, buttons, text elements, and image preview.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/ProfileScreen/ProfileScreen.styles/variables/confirmModalUI.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst confirmModalUI = {\n  buttonRow: {\n    flexDirection: 'row',\n    marginTop: 10\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: '600'\n  },\n  container: {\n    alignItems: 'center',\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 16,\n    width: '80%'\n  },\n  modalButton: {\n    borderRadius: 8,\n    marginHorizontal: 8,\n    paddingHorizontal: 20,\n    paddingVertical: 12\n  },\n  overlay: {\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0.35)',\n    flex: 1,\n    justifyContent: 'center',\n    padding: 16\n  },\n  preview: {\n    borderRadius: 8,\n    height: 200,\n    marginBottom: 16,\n    resizeMode: 'cover',\n    width: 200\n  },\n  title: {\n    fontSize: 17,\n    fontWeight: '600',\n    marginBottom: 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting AddButton Component in JavaScript\nDESCRIPTION: This snippet exports the default function for the AddButton component. The actual implementation is not provided in the given content.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/addButton/addButton/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function AddButton() {\n  // Implementation not provided in the given content\n}\n```\n\n----------------------------------------\n\nTITLE: Screen Organization Structure Overview\nDESCRIPTION: Defines the high-level organization of application screens across different functional domains like common flows, threads, and chat interfaces\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/screens.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Screen Organization\n\n## Common/\n- IntroScreen\n- LoginScreen\n- SearchScreen\n\n## SampleUI/Threads/\n- HomeScreen\n- FeedScreen\n- CoinDetailPage\n\n## SampleUI/Chat/\n- ChatScreen\n```\n\n----------------------------------------\n\nTITLE: Navigation Structure for useAuth Documentation\nDESCRIPTION: Markdown structure defining the navigation and organization of the useAuth hook documentation.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useAuth/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"hooks/useAuth\"\ndescription: \"## Functions\"\n---\n\n[**solana-social-kit**](../../README.mdx)\n\n***\n\n[solana-social-kit](../../README.mdx) / hooks/useAuth\n\n# hooks/useAuth\n\n## Functions\n\n- [useAuth](functions/useAuth.mdx)\n```\n\n----------------------------------------\n\nTITLE: Declaring Dummy User Data Array in TypeScript\nDESCRIPTION: Defines a constant array 'dummyData' of type UserItem[]. This array contains mock user data, likely used for testing or demonstration purposes in the Solana Social Kit.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/mocks/users/variables/dummyData.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst dummyData: UserItem[] = [];\n```\n\n----------------------------------------\n\nTITLE: Cache Clearing Commands for Troubleshooting\nDESCRIPTION: Commands for clearing Expo and Metro bundler cache when troubleshooting development mode issues.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/DEV_MODE.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Clear Expo cache\nexpo start -c\n# Or clear Metro bundler cache\nyarn start --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Exporting PumpFun Screen Component in JavaScript\nDESCRIPTION: This snippet represents the default export of the PumpFun screen component. While no actual code is provided, it indicates that the component is defined and exported as the default from this module.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/pumpfunScreen/pumpfunScreen/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function PumpFunScreen() {\n  // Component implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining inlineConfirmStyles Object in TypeScript\nDESCRIPTION: This code snippet defines a constant object 'inlineConfirmStyles' with nested style properties for various UI components. It includes styles for buttons, containers, text, and image previews, likely used in a mobile app's profile screen for inline confirmations.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/ProfileScreen/ProfileScreen.styles/variables/inlineConfirmStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst inlineConfirmStyles: object = {\n  button: {\n    borderRadius: 8,\n    marginHorizontal: 8,\n    paddingHorizontal: 20,\n    paddingVertical: 12\n  },\n  buttonRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    width: '100%'\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: '600'\n  },\n  container: {\n    alignItems: 'center',\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    elevation: 5,\n    margin: 16,\n    padding: 16\n  },\n  preview: {\n    borderRadius: 8,\n    height: 200,\n    marginBottom: 16,\n    resizeMode: 'cover',\n    width: 200\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 16\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Styles for CoinDetailPeopleSection in TypeScript\nDESCRIPTION: This code snippet defines a constant object 'defaultPeopleSectionStyles' that contains the default styles for various elements of the CoinDetailPeopleSection component. It includes styles for the container, content, headers, titles, and list views.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/CoinDetailPeopleSection/CoinDetailPeopleSection.style/variables/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst defaultPeopleSectionStyles: object = {\n  container: {\n    flex: 1,\n    width: \"100%\"\n  },\n  content: {\n    padding: 16,\n    width: \"100%\"\n  },\n  holdersHeader: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: 8,\n    marginTop: 12\n  },\n  holdersTitle: {\n    fontSize: 16,\n    fontWeight: \"600\"\n  },\n  cardContainer: {\n    marginRight: 16\n  },\n  cardList: {\n    paddingHorizontal: 16\n  },\n  userList: {\n    marginTop: 16\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting SearchScreen Component in TypeScript/React\nDESCRIPTION: This function is the default export for the SearchScreen component. It returns a React Element and is defined in the SearchScreen.tsx file within the Common screens directory.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/SearchScreen/SearchScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: Defining Default Function in IntroScreen Component (TypeScript)\nDESCRIPTION: This default function returns an Element. It is defined in the IntroScreen.tsx file within the Common screens directory of the solana-social-kit library.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/IntroScreen/IntroScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: Setup TokenMill Navigation - TypeScript\nDESCRIPTION: Illustrates integrating the TokenMillScreen into the app's navigation stack, allowing users to navigate to the TokenMill interface. This setup is part of a React Navigation configuration using a Stack.Navigator, useful for adding token management features to the application. The snippet assumes a valid navigation structure is in place using React Navigation.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/tokenMill/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TokenMillScreen } from 'solana-app-kit/modules/tokenMill';\n\n// In your navigation setup\nfunction AppNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"TokenMill\" component={TokenMillScreen} />\n      {/* Other screens */}\n    </Stack.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Style Object for Screens\nDESCRIPTION: Defines style properties for several UI containers used in the IntroScreen, such as positioning, alignment, and shadows. The style object 'default' consists of nested properties for different containers like bottomRectContainer, smileFaceContainer, and splashTextContainer, which define various CSS properties such as flex, position, alignItems, justifyContent, etc. These are intended to control the layout and appearance of the elements on the screen.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/IntroScreen/IntroScreen.styles/variables/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst default: object = {\n  bottomRectContainer: {\n    bottom: 0,\n    position: 'absolute',\n    right: 0\n  },\n  container: {\n    alignItems: 'center',\n    backgroundColor: COLORS.white,\n    flex: 1,\n    justifyContent: 'center'\n  },\n  smileFaceContainer: {\n    elevation: 1,\n    left: undefined, // placeholder value since 'left' is defined as a number\n    paddingHorizontal: 30,\n    paddingVertical: 10,\n    position: 'absolute',\n    shadowColor: COLORS.black,\n    shadowOffset: {\n      height: 10,\n      width: 0\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n    top: undefined // placeholder value since 'top' is defined as a number\n  },\n  splashTextContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute'\n  },\n  svgContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Mock Portfolio Data Array in TypeScript\nDESCRIPTION: A TypeScript constant declaration of portfolio data used for mocking purposes. The array contains objects with properties for token identification, display values, and performance metrics.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/mocks/portfolio/variables/portfolioData.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst portfolioData: object[] = [\n  {\n    id: \"1\",\n    imagePath: DEFAULT_IMAGES.SENDlogo,\n    profit: \"+$1.77\",\n    tokenAmount: \"6,969.35\",\n    tokenName: \"$SEND\",\n    usdValue: \"$6,969.35\"\n  }\n  // potentially more objects in the array\n]\n```\n\n----------------------------------------\n\nTITLE: Exporting Styles for Suggestions Card in JavaScript\nDESCRIPTION: This snippet exports a styles object, likely containing CSS-in-JS definitions for a suggestions card component. The specific styling details are not provided in the given content.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/suggestionsCard/suggestionsCard.style/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const styles = {};\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Documentation structure showing navigation and function references for the platform selection screen component\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/PlatformSelectionScreen/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"screens/Common/PlatformSelectionScreen\"\ndescription: \"## Functions\"\n---\n\n[**solana-social-kit**](../../../README.mdx)\n\n***\n\n[solana-social-kit](../../../README.mdx) / screens/Common/PlatformSelectionScreen\n\n# screens/Common/PlatformSelectionScreen\n\n## Functions\n\n- [default](functions/default.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining sellForm properties - form styling\nDESCRIPTION: This snippet details the properties associated with the sellForm UI element, covering aspects like background color, border settings, margin, padding, and width. These properties are essential for the layout and aesthetic of the selling form in the Solana app.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/sellSection.styles/variables/sellStyles.mdx#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nsellForm = {\n  backgroundColor: '#f8f8f8',\n  borderColor: '#eee',\n  borderRadius: 12,\n  borderWidth: 1,\n  marginHorizontal: 20,\n  padding: 16,\n  width: '90%'\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProfileInfo Component Styles in TypeScript\nDESCRIPTION: A TypeScript object that defines styling properties for the ProfileInfo component in the Solana App Kit. It includes styling for the profile container, profile image, biography section, edit profile button, and button text. These styles use responsive dimensions and follow a consistent design language.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/ProfileInfo/profileInfo.style/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles: object = {\n  profileInfo: {\n    width: \"100%\",\n    paddingHorizontal: 16,\n    paddingBottom: 12,\n    gap: 12\n  },\n  profImgContainer: {\n    width: 72,\n    height: 72,\n    borderRadius: 42,\n    ...\n  },\n  profImg: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"cover\"\n  },\n  bioSection: {\n    fontSize: 14,\n    fontWeight: \"400\"\n  },\n  editProfileBtn: {\n    borderWidth: 1,\n    borderColor: COLORS.greyBorderdark,\n    borderRadius: 20,\n    ...\n  },\n  editProfileBtnText: {\n    fontSize: 14,\n    fontWeight: \"600\",\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NotificationsScreen Default Export Function - React/TypeScript\nDESCRIPTION: Default export function that renders the notifications screen component. Returns a React Element representing the notifications interface.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/NotificationsScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function(): Element {\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository\nDESCRIPTION: This command clones the specified repository from GitHub to your local machine, allowing you to access and modify the project's files.  After cloning, it changes the current directory to the newly created `aura-das-api` directory, setting the stage for subsequent operations.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/types/aura/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"git clone <repository-url>\ncd aura-das-api\"\n```\n\n----------------------------------------\n\nTITLE: Component Structure Documentation in Markdown\nDESCRIPTION: Documentation structure for the CoinDetailLatestSection component, outlining its interfaces, functions and style references.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/CoinDetailLatestSection/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\\ntitle: \"components/CoinDetails/CoinDetailLatestSection\"\\ndescription: \"## Interfaces\"\\n---\\n\\n[**solana-social-kit**](../../../README.mdx)\\n\\n***\\n\\n# components/CoinDetails/CoinDetailLatestSection\\n\\n## Interfaces\\n\\n- [CoinDetailLatestSectionProps](interfaces/CoinDetailLatestSectionProps.mdx)\\n\\n## Functions\\n\\n- [CoinDetailLatestSection](functions/CoinDetailLatestSection.mdx)\\n\\n## References\\n\\n### style\\n\\nSee [CoinDetailLatestSection.style](../CoinDetailLatestSection.style/README.mdx)\n```\n\n----------------------------------------\n\nTITLE: Declaring TypeScript Constant for Mock Profile Data\nDESCRIPTION: Constant variable declaration of type ProfileData for providing mock data in testing scenarios. Located in the profile info data mocks directory of the Solana Social Kit.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/mocks/profileInfoData/variables/dummyProfileData.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst dummyProfileData: ProfileData\n```\n\n----------------------------------------\n\nTITLE: Defining Tweet Styling Function in TypeScript\nDESCRIPTION: This snippet declares a function named createTweetStyles that is exported from the module. It is likely used to generate and return CSS styles for Tweet components based on certain parameters or conditions.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/tweet/tweet.style/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n- [createTweetStyles](functions/createTweetStyles.mdx)\n```\n\n----------------------------------------\n\nTITLE: Importing PhotosScreen Component in React\nDESCRIPTION: This snippet shows how to import the PhotosScreen component from its file location. The component is likely used to render a screen displaying photos related to a specific coin in the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/CoinDetailPage/subPages/PhotosScreen/PhotosSection/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PhotosScreen } from './screens/SampleUI/Threads/CoinDetailPage/subPages/PhotosScreen/PhotosSection';\n```\n\n----------------------------------------\n\nTITLE: Defining selectedText properties - text styling\nDESCRIPTION: This snippet defines the properties for selectedText, including color and font weight. These properties are important for the visual styling of text elements that indicate selection, helping improve user experience by enhancing readability.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/sellSection.styles/variables/sellStyles.mdx#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nselectedText = {\n  color: 'white',\n  fontWeight: 'bold'\n};\n```\n\n----------------------------------------\n\nTITLE: Defining React Native Styles Object for Add Button Component in TypeScript\nDESCRIPTION: This code defines a styles object with styling properties for an Add Button component. It includes styling for the container, regular buttons, last button, text elements, and icon positioning.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/addButton/addButton.style/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles: object = {\n  container: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    gap: 4\n  },\n  btn: {\n    flex: 1,\n    height: 40,\n    backgroundColor: \"black\",\n    borderRadius: 12,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginHorizontal: 5,\n    position: \"relative\"\n  },\n  text: {\n    color: \"white\",\n    fontSize: 10,\n    fontWeight: \"bold\"\n  },\n  lastBtn: {\n    backgroundColor: \"white\",\n    borderColor: \"#32D4DE\",\n    borderWidth: 2\n  },\n  lastBtnText: {\n    color: \"black\",\n    fontSize: 14,\n    fontWeight: \"bold\"\n  },\n  icon: {\n    position: \"absolute\",\n    top: -11,\n    right: -11\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting CoinDetailPage Component for Solana Social Kit\nDESCRIPTION: This function exports the default CoinDetailPage component. It likely renders detailed information about a specific cryptocurrency coin, including price, market data, and possibly social interactions related to the coin.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/CoinDetailPage/CoinDetailPage/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function CoinDetailPage() {\n  // Component implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Provider\nDESCRIPTION: This code snippet illustrates how to configure an authentication provider within your application using solana-app-kit. It specifies the authentication settings needed for the app and wraps components with the CustomizationProvider.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/use.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your app's configuration\nimport { CustomizationProvider } from 'solana-app-kit';\n\nconst myConfig = {\n  auth: {\n    provider: 'privy', // or 'dynamic', 'turnkey'\n    // other auth settings...\n  },\n  // additional configuration...\n};\n\n// In your App.tsx or equivalent\nfunction App() {\n  return (\n    <CustomizationProvider config={myConfig}>\n      {/* Your app components */}\n    </CustomizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RootStackParamList Type Alias in TypeScript\nDESCRIPTION: This type alias defines the structure of the root navigation stack parameters. It includes routes for Home, SendTokens, and Settings screens.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/navigation/RootNavigator/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type RootStackParamList = {\n  Home: undefined;\n  SendTokens: undefined;\n  Settings: undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Using SectionNftListing Component in TSX\nDESCRIPTION: This example demonstrates how to use the SectionNftListing component in a React application. It shows the props structure required for the component, including the listingData object with mint address, NFT name, owner wallet address, and price in SOL.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/sections/SectionNftListing/functions/default.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<SectionNftListing\n  listingData={{\n    mint: \"mint_address_here\",\n    name: \"Cool NFT #123\",\n    owner: \"wallet_address_here\",\n    priceSol: 1.5\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Width Constant in JavaScript\nDESCRIPTION: Exports a constant named CHART_WIDTH, which is likely used to set the width of a chart or graph component in the Bonding Curve Configurator.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/BondingCurveConfigurator.styles/README.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const CHART_WIDTH = 0\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Dependencies\nDESCRIPTION: Installs the project dependencies using Yarn. This command is necessary to download and install all the required packages for the project to run.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/setup.mdx#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Defining Sell Section Styles for NFT Screen in JavaScript\nDESCRIPTION: This snippet exports a 'sellStyles' variable that likely contains CSS-in-JS style definitions for the sell section of an NFT screen. The specific style properties are not shown in the provided content.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/sellSection.styles/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const sellStyles = {};\n```\n\n----------------------------------------\n\nTITLE: Defining React Native Styles for User Listing Component in TypeScript\nDESCRIPTION: A comprehensive styles object that defines the appearance of a user listing component in a React Native application. The styles include container layouts, profile image formatting, text styling for usernames and display names, and different button states for following interactions.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/userListing/userListing.style/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles = {\n  container: {\n    alignItems: 'center',\n    display: 'flex',\n    flexDirection: 'row',\n    height: 66,\n    justifyContent: 'space-between',\n    paddingHorizontal: 24,\n    width: '100%',\n  },\n  flatListContainer: {\n    paddingBottom: 10,\n  },\n  userDetails: {\n    display: 'flex',\n    flexDirection: 'row',\n    width: '60%',\n  },\n  imgBox: {\n    borderRadius: 64,\n    height: 32,\n    marginRight: 7,\n    overflow: 'hidden',\n    width: 32,\n  },\n  image: {\n    height: '100%',\n    resizeMode: 'cover',\n    width: '100%',\n  },\n  textContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  nameText: {\n    color: '#1E1E1E',\n    fontSize: 15,\n    fontWeight: '600',\n  },\n  usernameText: {\n    color: '#999999',\n    fontSize: 15,\n    fontWeight: '500',\n  },\n  button: {\n    alignItems: 'center',\n    borderRadius: 8,\n    height: 32,\n    justifyContent: 'center',\n    width: 96,\n  },\n  buttonText: {\n    fontSize: 12,\n    fontWeight: '500',\n    textAlign: 'center',\n  },\n  followButton: {\n    backgroundColor: 'black',\n  },\n  followButtonText: {\n    color: 'white',\n  },\n  followingButton: {\n    backgroundColor: '#F6F7F9',\n  },\n  followingButtonText: {\n    color: '#ADADAD',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting ProfileScreen Style Variables in JavaScript\nDESCRIPTION: This snippet exports four style-related variables: confirmModalUI, inlineConfirmStyles, modalUI, and styles. These variables likely contain styling information for different parts of the ProfileScreen component.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/ProfileScreen/ProfileScreen.styles/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { confirmModalUI, inlineConfirmStyles, modalUI, styles };\n```\n\n----------------------------------------\n\nTITLE: Using PumpfunSellSection Component with Pre-selected Token in TSX\nDESCRIPTION: This example shows how to use the PumpfunSellSection component with a pre-selected token. It includes the token's mint public key and UI amount, along with a custom sell button label.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/PumpfunSellSection/functions/PumpfunSellSection.mdx#2025-04-21_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<PumpfunSellSection\n  selectedToken={{\n    mintPubkey: \"5tMi...\",\n    uiAmount: 1000\n  }}\n  sellButtonLabel=\"Sell Token\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Development Server Startup - Yarn Script\nDESCRIPTION: Command to start development server with auto-reload functionality\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Defining Android Chat Screen Styles in TypeScript\nDESCRIPTION: Defines a constant object containing Android-specific style properties for a chat screen interface. Includes safe area padding configuration with a top padding of 50 units.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Chat/ChatScreen/ChatScreen.styles/variables/androidStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst androidStyles: object = {\n  safeArea: {\n    paddingTop: 50\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PumpfunLaunchStyles Object in TypeScript\nDESCRIPTION: Comprehensive style object containing nested style definitions for various UI components including header, image buttons, inputs, and launch buttons. Defines colors, dimensions, typography, and layout properties.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/pumpfun/Pumpfun.styles/variables/PumpfunLaunchStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst PumpfunLaunchStyles = {\n  header: {\n    color: '#333',\n    fontSize: 22,\n    fontWeight: '800',\n    marginBottom: 16,\n    textAlign: 'center'\n  },\n  imageButton: {\n    alignItems: 'center',\n    backgroundColor: '#007AFF',\n    borderRadius: 8,\n    marginVertical: 10,\n    padding: 12\n  },\n  imageButtonText: {\n    color: '#fff',\n    fontWeight: '600'\n  },\n  imagePreview: {\n    alignSelf: 'center',\n    borderRadius: 8,\n    height: 120,\n    marginVertical: 10,\n    width: 120\n  },\n  input: {\n    backgroundColor: '#fafafa',\n    borderColor: '#ccc',\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 12,\n    padding: 10\n  },\n  launchButton: {\n    alignItems: 'center',\n    backgroundColor: '#28a745',\n    borderRadius: 8,\n    marginTop: 20,\n    padding: 14\n  },\n  launchButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '700'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Screen Styles in JavaScript\nDESCRIPTION: This code snippet defines styles for the NFT screen component. It likely uses a CSS-in-JS library to create a styles object with various style definitions for different elements of the NFT screen.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/styles/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst styles = {\n  // Style definitions would go here\n};\n\nexport default styles;\n```\n\n----------------------------------------\n\nTITLE: Using PumpfunLaunchSection Component\nDESCRIPTION: This code snippet demonstrates how to use the `PumpfunLaunchSection` component to create a form for launching new tokens on Pump.fun. It shows how to apply custom styles to the container, input fields, and button, as well as how to customize the launch button label. The component is imported from `@solana-app-kit/pumpfun`.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/pumpFun/README.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PumpfunLaunchSection } from '@solana-app-kit/pumpfun';\n\n// Usage\n<PumpfunLaunchSection\n  containerStyle={styles.customContainer}\n  inputStyle={styles.customInput}\n  buttonStyle={styles.customButton}\n  launchButtonLabel=\"Create Token\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining ThreadCTAButton Interface in TypeScript\nDESCRIPTION: This code snippet defines the ThreadCTAButton interface with properties for label, onPress function, and optional styling. It is used to specify the structure of a call-to-action button within a thread component.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.types/interfaces/ThreadCTAButton.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ThreadCTAButton {\n  label: string;\n  onPress: (post: ThreadPost) => void;\n  buttonStyle?: StyleProp<ViewStyle>;\n  buttonLabelStyle?: StyleProp<TextStyle>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectTokenModal Component Usage in React/TypeScript\nDESCRIPTION: Example usage of the SelectTokenModal component showing how to integrate it into a React application. The component accepts props for visibility control, close handling, and token selection callback.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/trade/SelectTokenModal/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SelectTokenModal\n  visible={showTokenModal}\n  onClose={() => setShowTokenModal(false)}\n  onTokenSelected={(token) => {\n    setSelectedToken(token);\n    updateTradeAmount(token);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Production Build and Start - Yarn Scripts\nDESCRIPTION: Commands to build production-ready code and start the production server\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Implementing PhotosScreen Component in React/TypeScript\nDESCRIPTION: A React functional component that renders a photos screen section within a coin detail page. Returns a React Element with no specified props or parameters.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/CoinDetailPage/subPages/PhotosScreen/PhotosSection/functions/PhotosScreen.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction PhotosScreen(): Element {\n  return (\n    <></>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Trading Modal Styles in TypeScript\nDESCRIPTION: Extensive style object defining the visual appearance and layout of a trading modal interface. Includes styles for modal container, headers, buttons, text inputs, token selectors and status messages.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/trade/tradeModal.style/variables/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefault = {\n  arrowContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginHorizontal: 10\n  },\n  arrowText: {\n    color: '#4A90E2',\n    fontSize: 24,\n    fontWeight: '700'\n  },\n  errorText: {\n    color: 'red',\n    fontSize: 16,\n    marginTop: 20,\n    textAlign: 'center'\n  },\n  header: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16\n  },\n  headerClose: {\n    padding: 4\n  },\n  headerCloseText: {\n    color: '#999',\n    fontSize: 22,\n    fontWeight: '600'\n  },\n  headerTitle: {\n    color: '#333',\n    fontSize: 20,\n    fontWeight: '700'\n  },\n  modalContainer: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 20,\n    elevation: 10,\n    maxHeight: '90%',\n    padding: 20,\n    shadowColor: '#000',\n    shadowOffset: {\n      height: 4,\n      width: 0\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n    width: '100%'\n  },\n  modalOverlay: {\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0.7)',\n    flex: 1,\n    justifyContent: 'center',\n    padding: 16\n  }\n  // Additional style properties omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Defining selectedNftName properties - text styles\nDESCRIPTION: This snippet outlines the properties for the selectedNftName element, setting color, font weight, and margin. These configurations are intended to ensure that the NFT name is visually prominent and appropriately spaced within the UI display.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/sellSection.styles/variables/sellStyles.mdx#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nselectedNftName = {\n  color: '#222',\n  fontWeight: '500',\n  marginBottom: 4\n};\n```\n\n----------------------------------------\n\nTITLE: PostCTA Component Usage Example\nDESCRIPTION: Example of how to implement the PostCTA component with a post containing trade data and custom styling options.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostCTA/functions/default.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<PostCTA\n  post={{\n    id: '123',\n    sections: [{\n      type: 'TEXT_TRADE',\n      tradeData: {\n        inputMint: 'SOL',\n        outputMint: 'USDC',\n        inputSymbol: 'SOL',\n        outputSymbol: 'USDC'\n      }\n    }]\n  }}\n  themeOverrides={{\n    '--primary-color': '#1D9BF0'\n  }}\n  styleOverrides={{\n    button: { backgroundColor: '#1D9BF0' }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Platform Deployment - Bash Command\nDESCRIPTION: Command to deploy the application to Google Cloud App Engine\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Jito Bundle Transaction Function Overview\nDESCRIPTION: Provides a reference to a specific Jito bundle transaction sending function with documentation details\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/transactions/sendJitoBundleTx/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [sendJitoBundleTransaction](functions/sendJitoBundleTransaction.mdx)\n```\n\n----------------------------------------\n\nTITLE: Starting the Metro Bundler for Mobile Development\nDESCRIPTION: Commands to start the Metro bundler for mobile app development using different package managers.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\npnpm start\n# or\nyarn start\n# or\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining TokenMillScreen Styles Object in TypeScript\nDESCRIPTION: This code defines a constant object named tokenMillScreenStyles that contains styling properties for various elements in the TokenMillScreen component, including container, header, subheader, error messaging, loading indicator, and safe area layout.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/TokenMillScreen/TokenMillScreen.style/variables/tokenMillScreenStyles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokenMillScreenStyles: object = {\n  container: {\n    alignItems: 'center',\n    padding: 16\n  },\n  errorText: {\n    color: 'red',\n    fontSize: 16,\n    marginTop: 20,\n    textAlign: 'center'\n  },\n  header: {\n    color: '#2a2a2a',\n    fontSize: 32,\n    fontWeight: '700',\n    marginBottom: 4,\n    marginTop: 8,\n    textAlign: 'center'\n  },\n  loader: {\n    marginVertical: 16\n  },\n  safeArea: {\n    backgroundColor: '#e9e9e9',\n    flex: 1\n  },\n  subHeader: {\n    color: '#555',\n    fontSize: 14,\n    marginBottom: 16,\n    textAlign: 'center'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining selectedNftInfo properties - background and margin\nDESCRIPTION: This snippet specifies the properties related to the selectedNftInfo element, defining its background color, border radius, and margin settings. These properties ensure the selected NFT information is visually distinct within the UI and is aligned properly with other components.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/sellSection.styles/variables/sellStyles.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nselectedNftInfo = {\n  backgroundColor: 'white',\n  borderRadius: 8,\n  marginBottom: 16,\n  padding: 8\n};\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache When Starting in Development Mode\nDESCRIPTION: Command to start the application in development mode while clearing the cache to ensure proper settings application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/DEV_MODE.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Start with dev mode and clear cache\nyarn start --dev --clear\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: This command starts the development server, typically using a tool like `nodemon` to automatically restart the server on code changes. This is useful for local development and testing.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/types/aura/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"npm run dev\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Solana App Kit\nDESCRIPTION: Commands for cloning the repository and installing dependencies using pnpm.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/SendArcade/solana-app-kit.git\ncd solana-app-kit\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining Default SVG Function for React Component\nDESCRIPTION: A type definition for a default function that accepts SVG props and an optional deprecated legacy context, returning a React node. Used in Solana Social Kit for SVG handling.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/custom/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefault(props: SvgProps, deprecatedLegacyContext?: any): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Defining Color Constants in TypeScript\nDESCRIPTION: Defines a default object containing color constants used throughout the application. Includes brand colors, text colors, greys, and common UI colors defined as hexadecimal values.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/assets/colors/variables/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst default = {\n  black: '#000000',\n  brandPrimary: '#32D4DE',\n  brandPurple: '#B591FF',\n  brandPurpleBg: '#EDECFF',\n  cyan: \"#32D4DE\",\n  greyBorder: '#EDEFF3',\n  greyBorderdark: \"#E5E5E5\",\n  greyDark: '#999999',\n  greyLight: '#F6F7F9',\n  greyMid: '#B7B7B7',\n  textDark: '#1E1E1E',\n  textHint: '#ADADAD',\n  textLight: '#858585',\n  white: '#FFFFFF'\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Commands to start the development server using either PNPM or Yarn package managers.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Chat Screen Style Object Definition in TypeScript\nDESCRIPTION: Comprehensive style object containing layout, color, and typography definitions for a chat interface. Includes styles for avatars, message bubbles, containers, and text elements with specific measurements and colors.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Chat/ChatScreen/ChatScreen.styles/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = {\n  avatar: {\n    borderRadius: 18,\n    height: 36,\n    marginRight: 8,\n    width: 36\n  },\n  bubbleContainer: {\n    borderRadius: 10,\n    padding: 8\n  },\n  chatScreenContainer: {\n    backgroundColor: '#F1F1F1',\n    flex: 1\n  },\n  composerContainer: {\n    backgroundColor: '#FFFFFF',\n    borderTopColor: '#E0E0E0',\n    borderTopWidth: 1,\n    padding: 8\n  },\n  headerRow: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    marginBottom: 2\n  },\n  listContent: {\n    paddingBottom: 8,\n    paddingHorizontal: 16,\n    paddingTop: 8\n  },\n  messageWrapper: {\n    marginVertical: 6,\n    width: '100%'\n  },\n  receivedBubble: {\n    backgroundColor: '#FFFFFF'\n  },\n  receivedWrapper: {\n    alignSelf: 'flex-start',\n    width: '90%'\n  },\n  senderLabel: {\n    color: '#232324',\n    fontSize: 12,\n    fontWeight: '600'\n  },\n  sentBubble: {\n    backgroundColor: '#E7FEEB'\n  },\n  sentWrapper: {\n    alignSelf: 'flex-end',\n    width: '80%'\n  },\n  timeStampText: {\n    alignSelf: 'flex-end',\n    color: '#757575',\n    fontSize: 10,\n    marginTop: 4\n  },\n  usernameContainer: {\n    justifyContent: 'center'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Navigation Hook in TypeScript for React Native\nDESCRIPTION: This snippet defines a custom hook called useAppNavigation, which likely provides convenient methods for navigating within the app using the defined navigation types.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useAppNavigation/README.mdx#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n- [useAppNavigation](functions/useAppNavigation.mdx)\n```\n\n----------------------------------------\n\nTITLE: Component Testing for Screen Components\nDESCRIPTION: This is a Jest test suite to ensure that the screen component renders properly and handles user interactions correctly.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/screens/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('Screen', () => {\n  it('renders correctly', () => {\n    const { getByTestId } = render(<Screen />);\n    expect(getByTestId('screen')).toBeTruthy();\n  });\n  \n  it('handles user interaction', () => {\n    const { getByText } = render(<Screen />);\n    fireEvent.press(getByText('Action'));\n    expect(handleAction).toHaveBeenCalled();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Redux Selectors\nDESCRIPTION: Implements a selector to access specific parts of the Redux state using 'createSelector'. In this snippet, 'selectFeatureData' extracts the 'data' from a feature's state, enhancing code modularity and memoization capabilities.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/shared/state/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\\n// selectors.ts\\nimport { createSelector } from '@reduxjs/toolkit';\\nimport { RootState } from '../store';\\n\\nexport const selectFeatureData = (state: RootState) => state.feature.data;\n```\n\n----------------------------------------\n\nTITLE: Checking if User Follows Me in Solana Social Kit with Typescript\nDESCRIPTION: This code snippet demonstrates how to use the checkIfUserFollowsMe function from the Solana Social Kit's profile service. It checks if a user identified by 'otherUserAddress' follows the user identified by 'myAddress'. The example includes error handling and displays a message indicating whether the target user follows the current user.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/profileService/functions/checkIfUserFollowsMe.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { checkIfUserFollowsMe } from 'services/profileService';\n\nasync function checkAndDisplayFollowRelationship(myAddress: string, otherUserAddress: string) {\n  try {\n    const theyFollowMe = await checkIfUserFollowsMe(myAddress, otherUserAddress);\n    \n    if (theyFollowMe) {\n      console.log(`${otherUserAddress} follows you!`);\n      // Enable follow back button or show appropriate UI\n    } else {\n      console.log(`${otherUserAddress} does not follow you.`);\n      // Show regular follow button\n    }\n    \n    return theyFollowMe;\n  } catch (error) {\n    console.warn('Error checking follow relationship:', error);\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TokenModal StyleSheet in React Native Components\nDESCRIPTION: This example demonstrates how to import and apply the token modal styles to React Native components. The styles are used to create a token selection interface with properly styled container, title, token items, and content layout.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/trade/tokenModal.style/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport tokenModalStyles from 'path/to/components/thread/trade/tokenModal.style';\n\n<View style={tokenModalStyles.modalContainer}>\n  <Text style={tokenModalStyles.modalTitle}>Select a Token</Text>\n  <TouchableOpacity style={tokenModalStyles.tokenItem}>\n    <View style={tokenModalStyles.tokenItemContent}>\n      <Image style={tokenModalStyles.tokenLogo} />\n      <Text style={tokenModalStyles.tokenSymbol}>SOL</Text>\n    </View>\n  </TouchableOpacity>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Profile Screen Component in React/TypeScript\nDESCRIPTION: A TypeScript function that serves as the default export, returning a React Element for rendering the profile screen component. Located in ProfileScreen.tsx at line 42.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/ProfileScreen/ProfileScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: Adding Post Locally - TypeScript\nDESCRIPTION: The addPostLocally function takes a payload of type ThreadPost and returns a PayloadAction for updating the Redux state with the new post information.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/thread/reducer/functions/addPostLocally.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addPostLocally(payload: ThreadPost): PayloadAction<T> {\n    return { type: 'ADD_POST_LOCALLY', payload };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining sellHeader properties - layout configuration\nDESCRIPTION: This snippet describes the properties for the sellHeader UI element, which includes alignment, flex direction, justification, and margin settings. These properties are vital for arranging the selling header in a user-friendly and visually appealing way.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/NftScreen/sellSection.styles/variables/sellStyles.mdx#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nsellHeader = {\n  alignItems: 'center',\n  flexDirection: 'row',\n  justifyContent: 'space-between',\n  marginBottom: 12\n};\n```\n\n----------------------------------------\n\nTITLE: Tweet Object Structure in MockDataConfig\nDESCRIPTION: This code shows the structure of a tweet object included in the tweetsData array of MockDataConfig. It includes properties for username, handle, avatar, tweet content, and engagement metrics.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/interfaces/MockDataConfig.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  avatar: any = DEFAULT_IMAGES.SENDlogo;\n  handle: string = '@sendcoin';\n  quoteCount: number = 297;\n  reactionCount: number = 13600;\n  retweetCount: number = 5600;\n  time: string = '3s';\n  tweetContent: string = 'SEND is the new meta coin $SEND';\n  username: string = 'SEND';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Example Type Definition in TypeScript\nDESCRIPTION: Provides an illustrative type definition for a staking position in a TokenMill market, which includes properties such as marketIndex, amount, and owner address. This example emphasizes the importance of documentation and structure in type definitions.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/types/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Represents a staking position in a TokenMill market\n * @property marketIndex - The market index for the staked token\n * @property amount - The amount staked, in token base units\n * @property startDate - When the staking position was created\n * @property duration - Duration in seconds\n * @property owner - Wallet address of the position owner\n */\nexport interface StakingPosition {\n  marketIndex: number;\n  amount: string; // BN represented as string\n  startDate: Date;\n  duration: number; // in seconds\n  owner: string; // wallet address\n  rewardRate: number;\n  positionIndex: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Profile Picture Action Creator - Redux in TypeScript\nDESCRIPTION: The `updateProfilePic` function serves as a Redux Action Creator intended for use within the Solana social kit application. It requires a string `payload` as an input and returns a PayloadAction object. This function facilitates updating the profile picture for a user by dispatching the associated Redux action. No dependencies outside the standard Redux setup are needed.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/state/auth/reducer/functions/updateProfilePic.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction updateProfilePic(payload: string): object {\\n  // Redux action creator logic\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Buying Tokens via Pump.fun in TypeScript\nDESCRIPTION: Example demonstrating how to create a new token and establish initial liquidity using the createAndBuyTokenViaPumpfun function. The example shows setting up basic token parameters and handling the transaction result.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/pumpfun/pumpfunService/functions/createAndBuyTokenViaPumpfun.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createAndBuyTokenViaPumpfun({\n  userPublicKey: wallet.publicKey,\n  tokenName: \"My Test Token\",\n  tokenSymbol: \"TEST\",\n  description: \"A token for testing\",\n  imageUri: \"file:///data/user/0/com.example/cache/ImagePicker/image.png\",\n  solAmount: 0.1,\n  solanaWallet: wallet\n});\n\nconsole.log(`Created token: ${result.mintPublicKey}`);\n```\n\n----------------------------------------\n\nTITLE: Accessing Redux Dispatch with useAppDispatch in TypeScript\nDESCRIPTION: A typed Redux hook that returns the dispatch function with support for Thunk middleware. It provides access to dispatch actions to the Redux store including async thunk actions with the correct type definitions for auth, thread, and transaction states.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/useReduxHooks/functions/useAppDispatch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**useAppDispatch**(): `ThunkDispatch`<{ `auth`: [`AuthState`]; `thread`: `ThreadState`; `transaction`: `TransactionState`; }, `undefined`, `UnknownAction`> & `Dispatch`<`UnknownAction`>\n```\n\n----------------------------------------\n\nTITLE: Fetching Swap Quote with getSwapQuote() using TypeScript\nDESCRIPTION: The function 'getSwapQuote' retrieves a swap quote from the Raydium protocol by accepting parameters for input and output token mints, amount in lamports, slippage, and transaction version. It returns a promise that resolves to any type of data associated with the swap.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/pumpfun/pumpfunUtils/functions/getSwapQuote.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"function getSwapQuote(inputMint: string, outputMint: string, amountInLamports: number, slippageBps: number = 200, txVersion: string = 'V0'): Promise<any> {\\n  // Function implementation here\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining React Component LatestScreen in TypeScript\nDESCRIPTION: TypeScript function component declaration that returns a React Element. The component is used in the coin detail page under the latest section of the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/CoinDetailPage/subPages/LatestScreen/LatestSection/functions/LatestScreen.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const LatestScreen = (): Element => {\n```\n\n----------------------------------------\n\nTITLE: Defining Constant TURNKEY_RP_ID in TypeScript\nDESCRIPTION: This snippet defines a constant named TURNKEY_RP_ID, which is of type string. This variable is expected to be used within the solana application kit, specifically in environments where TURNKEY_ID is required as a configuration value.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/types/env/variables/TURNKEY_RP_ID.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"const TURNKEY_RP_ID: string\"\n```\n\n----------------------------------------\n\nTITLE: TopScreen Function Definition\nDESCRIPTION: Defines the TopScreen function, a React component that returns a React Element. This function is part of the Solana application kit and is likely used for displaying the top section of a coin detail page within a thread.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/CoinDetailPage/subPages/TopScreen/TopSection/functions/TopScreen.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"> **TopScreen**(): `Element`\"\n```\n\n----------------------------------------\n\nTITLE: Implementing PostCTA Component in React for Solana Applications\nDESCRIPTION: Example of importing and using the PostCTA component in a React application. The component requires post data and can be customized with theme overrides, style overrides, and user-defined stylesheets.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/post/PostCTA/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport PostCTA from 'path/to/components/thread/post/PostCTA';\n\n<PostCTA \n  post={postData}\n  themeOverrides={customTheme}\n  styleOverrides={{\n    button: { backgroundColor: '#1D9BF0' },\n    buttonLabel: { color: 'white' }\n  }}\n  userStyleSheet={userDefinedStyles}\n/>\n```\n\n----------------------------------------\n\nTITLE: Pump.fun Service Module Definition\nDESCRIPTION: Core service module that provides functionality for token operations on Pump.fun platform. Includes functions for buying, selling, and launching tokens with support for both Pump.fun and Raydium DEX paths depending on token availability.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/pumpfun/pumpfunService/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Available functions:\n- buyTokenViaPumpfun\n- createAndBuyTokenViaPumpfun\n- sellTokenViaPumpfun\n```\n\n----------------------------------------\n\nTITLE: Defining Default Export Function in TokenMillScreen Component\nDESCRIPTION: Function signature for the default export of TokenMillScreen component that returns a React Element. Located in the Common screens directory of the solana-app-kit project.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/TokenMillScreen/TokenMillScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: React Functional Component: VideosScreen\nDESCRIPTION: A React TypeScript component that renders a videos section, likely used in a cryptocurrency or social media application. Returns a React Element and is defined in the VideosSection.tsx file.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/CoinDetailPage/subPages/VideosScreen/VideosSection/functions/VideosScreen.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction VideosScreen(): Element\n```\n\n----------------------------------------\n\nTITLE: Merging User Theme with Default Thread Styling in TypeScript\nDESCRIPTION: The getMergedTheme function takes an optional userTheme parameter and merges it with default theme values. It returns a complete theme object with properties for colors, sizes, spacing, and other visual aspects of the thread component.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/thread.styles/functions/getMergedTheme.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**getMergedTheme**(`userTheme`?): `object`\n```\n\n----------------------------------------\n\nTITLE: Exporting BondingCurveConfigurator Component in React\nDESCRIPTION: This snippet exports a default function that likely represents the BondingCurveConfigurator component. The component is part of the tokenMill module and is used for configuring bonding curves in the Solana Social Kit.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/BondingCurveConfigurator/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function BondingCurveConfigurator() {\n  // Component implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining default() function in FeedScreen\nDESCRIPTION: This code snippet defines the default function within the FeedScreen component. The function is responsible for rendering the UI elements on the FeedScreen. It returns a React Element.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/FeedScreen/FeedScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > **default**(): `Element`\n */\n```\n\n----------------------------------------\n\nTITLE: Default Export Function - PumpFun Screen Component\nDESCRIPTION: A React functional component that renders a PumpFun screen element. The function is defined in TypeScript and returns a React Element type.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/Common/pumpfunScreen/pumpfunScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: Exporting AnimatedTabIcon Component in React Native\nDESCRIPTION: This snippet exports a default function that renders an AnimatedTabIcon component. It uses React Native's Animated API for animations and likely integrates with a tab navigation system.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/navigation/AnimatedTabIcon/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function AnimatedTabIcon() {\n  // Implementation details not provided in the given content\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Solana App Kit Repository\nDESCRIPTION: Clones the Solana App Kit repository from Git and navigates into the project directory. This is the first step in setting up the project.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/setup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone ...\ncd solana-app-kit\n```\n\n----------------------------------------\n\nTITLE: Default Function Declaration\nDESCRIPTION: TypeScript function declaration that returns a React Element. Located in the HomeScreen.tsx file under the Threads sample UI screens.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/HomeScreen/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(): Element\n```\n\n----------------------------------------\n\nTITLE: Rendering UserListing Component in TypeScript React\nDESCRIPTION: Example of how to use the UserListing component in a React application. The component displays a list of users with their profile information and follow/unfollow functionality.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/CoinDetails/userListing/userListing/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<UserListing />\n```\n\n----------------------------------------\n\nTITLE: Defining Styles Object for Coin Detail Page in TypeScript\nDESCRIPTION: This code snippet defines a constant object 'styles' with nested style definitions for various UI components of the Coin Detail Page. It includes styles for container, header list, main section, and menu items.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/screens/SampleUI/Threads/CoinDetailPage/CoinDetailPage.style/variables/styles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst styles: object = {\n  container: {\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    flex: 1\n  },\n  headerList: {\n    fontSize: 20,\n    paddingTop: 20\n  },\n  list: {\n    borderBottomColor: COLORS.greyBorderdark,\n    borderBottomWidth: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    width: '100%'\n  },\n  MainSection: {\n    alignItems: 'center',\n    flex: 1,\n    width: '100%'\n  },\n  menuItem: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    paddingVertical: 10,\n    position: 'relative'\n  },\n  menuItemSelected: {\n    borderBottomColor: COLORS.cyan,\n    borderBottomWidth: 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Function Signature for VestingCard Component in React/TypeScript\nDESCRIPTION: Function signature for the default export of the VestingCard component. It accepts named parameters of type Props and returns a React Element.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/VestingCard/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(__namedParameters: Props): Element\n```\n\n----------------------------------------\n\nTITLE: Using the Actions Component in React TSX\nDESCRIPTION: Example showing how to use the Actions component in a React application. The component is a placeholder that currently only displays a simple 'Actions' text label.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/Profile/actions/actions/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Actions />\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration - Dotenv File\nDESCRIPTION: Sample environment configuration with sensitive credentials and service configurations for Solana backend\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/README.md#2025-04-21_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nWALLET_PRIVATE_KEY=\"your-wallet-private-key\"\\nRPC_URL=\"your-solana-rpc-url\"\\nDATABASE_URL=\"postgresql:\\/\\/username:password@hostname:port\\/database_name\"\\n\\n# Additional service configurations for TokenMill, Pinata, GCS, etc.\n```\n\n----------------------------------------\n\nTITLE: Defining default Function for FundMarketCard Component in TypeScript/JSX\nDESCRIPTION: This function is the default export for the FundMarketCard component. It takes an object with Props type as a parameter and returns an Element. The function is defined in the FundMarketCard.tsx file within the tokenMill component directory.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/tokenMill/FundMarketCard/functions/default.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault(__namedParameters: Props): Element\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration - Bash Command\nDESCRIPTION: Command to create environment configuration file from example template\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Compatibility Utilities for Polyfills - TypeScript\nDESCRIPTION: This snippet provides fallback utilities for compatibility issues, particularly offering a solution for the structuredClone method as well as other necessary polyfills.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/structure/utils.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Compatibility utilities:\n// Fallback for structuredClone if needed\n// Other polyfills as required\n```\n\n----------------------------------------\n\nTITLE: Dependency Installation - Yarn Command\nDESCRIPTION: Command to install project dependencies using Yarn package manager\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Referencing usePumpfun Function in Markdown\nDESCRIPTION: This snippet provides a Markdown reference to the usePumpfun function documentation within the Solana Social Kit.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/hooks/usePumpFun/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [usePumpfun](functions/usePumpfun.mdx)\n```\n\n----------------------------------------\n\nTITLE: Importing Thread Component in TSX\nDESCRIPTION: Example of how to import the Thread component from its location in the codebase.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/components/thread/Thread/README.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Thread } from 'path/to/components/thread';\n```\n\n----------------------------------------\n\nTITLE: Building the Project\nDESCRIPTION: This command builds the project, typically using a build tool like `webpack` or `parcel`, to generate optimized and production-ready code.  The built artifacts are usually placed in the `dist` directory.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/types/aura/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"npm run build\"\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultMockDataConfig in TypeScript\nDESCRIPTION: Constant definition of DefaultMockDataConfig that implements the MockDataConfig interface. This provides default mock data configuration for the solana-social-kit library.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/config/variables/DefaultMockDataConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DefaultMockDataConfig: MockDataConfig\n```\n\n----------------------------------------\n\nTITLE: Installing npm Dependencies\nDESCRIPTION: This command installs all the dependencies required for the project, as specified in the `package.json` file. These dependencies are essential for running and building the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/types/aura/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Overrides\nDESCRIPTION: This code snippet shows how to customize the default theme properties of a Thread component from the solana-app-kit library by providing override values for colors and spacing.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/use.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Thread } from 'solana-app-kit';\n\nfunction MyCustomizedFeed() {\n  const themeOverrides = {\n    colors: {\n      primary: '#3498db',\n      background: '#f5f5f5',\n      // other color overrides...\n    },\n    spacing: {\n      // custom spacing values...\n    },\n    // other theme properties...\n  };\n  \n  return (\n    <Thread \n      rootPosts={myPosts} \n      currentUser={currentUser}\n      themeOverrides={themeOverrides} \n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations with Knex CLI\nDESCRIPTION: These commands use the Knex CLI to manage database migrations. They demonstrate how to apply pending migrations, rollback the last batch, run a specific migration, and create a new migration file.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/db/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Apply all pending migrations\nnpx knex migrate:latest\n\n# Rollback the last batch of migrations\nnpx knex migrate:rollback\n\n# Run a specific migration\nnpx knex migrate:up 20230101000000_create_users_table.ts\n\n# Create a new migration file\nnpx knex migrate:make create_new_table\n```\n\n----------------------------------------\n\nTITLE: Importing TokenMill Module - TypeScript\nDESCRIPTION: Demonstrates how to import the TokenMill module and its service functions for token and market operations. The imports facilitate functionalities like funding users and creating markets within the Solana blockchain ecosystem. It requires the 'solana-app-kit' package installed and correctly imported.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/tokenMill/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TokenMillService } from 'solana-app-kit/modules/tokenMill';\n// OR for specific functions\nimport { fundUserWithWSOL, createMarket } from 'solana-app-kit/modules/tokenMill';\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods\nDESCRIPTION: Installs CocoaPods if there are issues encountered during the setup process. This is done to manage dependencies for the iOS part of the application.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/setup.mdx#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nsudo gem install cocoapods\npod --version\n```\n\n----------------------------------------\n\nTITLE: Getting User Profile by ID - Express.js\nDESCRIPTION: This route handles the retrieval of a user profile by its ID. It uses the profile controller to fetch the profile data and returns it in JSON format. If an error occurs, it catches the exception and sends a corresponding error response.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/routes/user/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/profile/:id', async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const profile = await profileController.getProfileById(id);\n    \n    return res.status(200).json({\n      success: true,\n      data: profile\n    });\n  } catch (error) {\n    console.error('Error fetching profile:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Get Swap Fee Function in TypeScript\nDESCRIPTION: This TypeScript function attempts to fetch Raydium's \"auto-fee\" for compute units.  It returns a Promise that resolves to a string representing the fee. The function definition can be found in src/utils/pumpfun/pumpfunUtils.ts.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/utils/pumpfun/pumpfunUtils/functions/getSwapFee.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\t/**\n\t * > **getSwapFee**(): `Promise`\\<`string`\\>\n\t */\n\t\n\t/**\n\t * Attempt to fetch Raydium's \"auto-fee\" for compute units.\n\t *\n\t * @returns `Promise`\\<`string`\\>\n\t */\n```\n\n----------------------------------------\n\nTITLE: Using PumpfunSellSection Component\nDESCRIPTION: This code snippet illustrates two ways of using the `PumpfunSellSection` component: first, with manual token input, and second, with a pre-selected token. It showcases customization options for the container style and the sell button label. The second usage shows how to pass a `selectedToken` prop with `mintPubkey` and `uiAmount` to pre-populate the sell form with token details.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/pumpFun/README.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PumpfunSellSection } from '@solana-app-kit/pumpfun';\n\n// Usage with manual token input\n<PumpfunSellSection\n  containerStyle={styles.customContainer}\n  sellButtonLabel=\"Sell Now\"\n/>\n\n// Usage with pre-selected token\n<PumpfunSellSection\n  selectedToken={{\n    mintPubkey: \"5tMi...\",\n    uiAmount: 1000\n  }}\n  sellButtonLabel=\"Sell Token\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Backward Compatibility with Old Transaction Utilities - TypeScript\nDESCRIPTION: This snippet illustrates how to retain compatibility with older transaction utilities while suggesting a migration to the new Transaction Service API. It shows how to continue using old methods while encouraging the use of newer methods for future code implementations.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/src/modules/walletProviders/services/transaction/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  signAndSendWithPrivy,\n  signAndSendBase64Tx,\n} from '../../utils/transactions/transactionCompatUtils';\n\n// Old code continues to work\nconst signature = await signAndSendWithPrivy(transaction, connection, provider);\n\n// However, we recommend migrating to the new API for new code:\nimport { TransactionService } from '../../services/transaction/transactionService';\n\n// New approach\nconst signature = await TransactionService.signAndSendTransaction(\n  { type: 'transaction', transaction },\n  { type: 'autodetect', provider, currentProvider: provider.type || 'privy' },\n  { connection }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing TokenMill Program with Anchor in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Anchor library and the TokenMill IDL to initialize a program instance with type safety. It details the necessary steps to interact with the TokenMill program using its available methods, such as creating a market.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/server/src/service/TokenMill/idl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from '@coral-xyz/anchor';\nimport TokenMillIDL from '../idl/token_mill.json';\nimport { TokenMillType } from '../idl/token_mill';\n\n// Initialize a program instance using the IDL\nconst program = new anchor.Program<TokenMillType>(\n  TokenMillIDL as unknown as TokenMillType,\n  provider\n);\n\n// Use the program to interact with the TokenMill Solana program\nconst tx = await program.methods\n  .createMarketWithSpl(...)\n  .accountsPartial({...})\n  .signers([...])\n  .rpc();\n```\n\n----------------------------------------\n\nTITLE: Example Usage of sellTokenViaPumpfun Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the sellTokenViaPumpfun function to sell tokens. It includes the necessary parameters such as the seller's public key, token address, amount to sell, and the Solana wallet instance.\nSOURCE: https://github.com/sendarcade/solana-app-kit/blob/main/docs/references/services/pumpfun/pumpfunService/functions/sellTokenViaPumpfun.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { txId, success } = await sellTokenViaPumpfun({\n  sellerPublicKey: wallet.publicKey,\n  tokenAddress: \"5tMi5XcfuLBzxjPZ5RzPUgbcbGNnUQnBkRoqP9DP5gGF\",\n  tokenAmount: 100,\n  solanaWallet: wallet\n});\n```"
  }
]