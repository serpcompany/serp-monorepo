TITLE: Installing Jest with npm
DESCRIPTION: Instructions to install Jest as a development dependency using npm, which is the recommended way to add Jest to your project.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-dev jest
```

----------------------------------------

TITLE: Writing a Basic Jest Test for a Sum Function
DESCRIPTION: This JavaScript test file imports the `sum` function and uses Jest's `test` and `expect` functions to verify that `sum(1, 2)` correctly returns `3`. It demonstrates a fundamental Jest test structure.
SOURCE: https://github.com/jestjs/jest/blob/main/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const sum = require('./sum');

test('adds 1 + 2 to equal 3', () => {
  expect(sum(1, 2)).toBe(3);
});
```

----------------------------------------

TITLE: Writing a Basic Jest Test for Sum Function
DESCRIPTION: Imports the `sum` function and writes a Jest test case. It uses `test()` to define a test, `expect()` to assert a value, and `toBe()` as a matcher to check for exact equality, verifying that `sum(1, 2)` correctly equals 3.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const sum = require('./sum');

test('adds 1 + 2 to equal 3', () => {
  expect(sum(1, 2)).toBe(3);
});
```

----------------------------------------

TITLE: Negating Matchers with Jest's not Modifier (JavaScript)
DESCRIPTION: This example shows how to use the `.not` modifier to test for the opposite of a matcher. It asserts that the sum of two positive numbers is not exactly zero, demonstrating how to check for non-equality or other inverse conditions.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#_snippet_2

LANGUAGE: js
CODE:
```
test('adding positive numbers is not zero', () => {
  for (let a = 1; a < 10; a++) {
    for (let b = 1; b < 10; b++) {
      expect(a + b).not.toBe(0);
    }
  }
});
```

----------------------------------------

TITLE: Creating a sum function in JavaScript
DESCRIPTION: Defines a simple JavaScript function `sum` that takes two arguments and returns their sum. This function is then exported using `module.exports` to make it available for testing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function sum(a, b) {
  return a + b;
}
module.exports = sum;
```

----------------------------------------

TITLE: Testing Promises with Jest (.resolves)
DESCRIPTION: This Jest test showcases the `.resolves` matcher, offering a more concise way to assert the resolved value of a Promise. It unwraps the fulfilled promise, allowing direct chaining with other matchers like `toBe`. If the promise rejects, the test will automatically fail, simplifying error handling in tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
it('works with resolves', () => {
  expect.assertions(1);
  return expect(user.getUserName(5)).resolves.toBe('Paul');
});
```

----------------------------------------

TITLE: Repeating Setup with beforeEach and afterEach in Jest
DESCRIPTION: This snippet demonstrates how to use `beforeEach` and `afterEach` hooks in Jest to perform setup and teardown operations for each test. `initializeCityDatabase()` is called before every test, and `clearCityDatabase()` is called after every test, ensuring a clean state for each test run. The `test` blocks then verify specific conditions against the prepared database.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SetupAndTeardown.md#_snippet_0

LANGUAGE: js
CODE:
```
beforeEach(() => {
  initializeCityDatabase();
});

afterEach(() => {
  clearCityDatabase();
});

test('city database has Vienna', () => {
  expect(isCity('Vienna')).toBeTruthy();
});

test('city database has San Juan', () => {
  expect(isCity('San Juan')).toBeTruthy();
});
```

----------------------------------------

TITLE: Testing CheckboxWithLabel with React Testing Library
DESCRIPTION: This test suite demonstrates how to use `@testing-library/react` to test the `CheckboxWithLabel` component. It renders the component, asserts its initial state, simulates a user click event on the checkbox, and then verifies that the displayed label correctly updates, reflecting the new state.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
import {cleanup, fireEvent, render} from '@testing-library/react';
import CheckboxWithLabel from '../CheckboxWithLabel';

// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher
// unmount and cleanup DOM after the test is finished.
afterEach(cleanup);

it('CheckboxWithLabel changes the text after click', () => {
  const {queryByLabelText, getByLabelText} = render(
    <CheckboxWithLabel labelOn="On" labelOff="Off" />,
  );

  expect(queryByLabelText(/off/i)).toBeTruthy();

  fireEvent.click(getByLabelText(/off/i));

  expect(queryByLabelText(/on/i)).toBeTruthy();
});
```

----------------------------------------

TITLE: Asserting Jest Mock Function Call Details - JavaScript
DESCRIPTION: This code demonstrates various Jest assertions using the `.mock` property to verify how a mock function was called. It shows how to check the call count, arguments passed, return values, `this` context, instances created, and the arguments of the last call, enabling comprehensive testing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// The function was called exactly once
expect(someMockFunction.mock.calls).toHaveLength(1);

// The first arg of the first call to the function was 'first arg'
expect(someMockFunction.mock.calls[0][0]).toBe('first arg');

// The second arg of the first call to the function was 'second arg'
expect(someMockFunction.mock.calls[0][1]).toBe('second arg');

// The return value of the first call to the function was 'return value'
expect(someMockFunction.mock.results[0].value).toBe('return value');

// The function was called with a certain `this` context: the `element` object.
expect(someMockFunction.mock.contexts[0]).toBe(element);

// This function was instantiated exactly twice
expect(someMockFunction.mock.instances.length).toBe(2);

// The object returned by the first instantiation of this function
// had a `name` property whose value was set to 'test'
expect(someMockFunction.mock.instances[0].name).toBe('test');

// The first argument of the last call to the function was 'test'
expect(someMockFunction.mock.lastCall[0]).toBe('test');
```

----------------------------------------

TITLE: Installing React Testing Library
DESCRIPTION: Shows the npm command to install @testing-library/react as a development dependency, which is a popular library for DOM testing of React components.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#_snippet_11

LANGUAGE: Bash
CODE:
```
npm install --save-dev @testing-library/react
```

----------------------------------------

TITLE: Testing setTimeout with advanceTimersByTime - Jest JavaScript
DESCRIPTION: This Jest test suite demonstrates how to use `jest.useFakeTimers()` and `jest.advanceTimersByTime()` to test the `timerGame` function. It verifies that the callback is not called immediately and then asserts it is called after advancing the timers by 1000 milliseconds, simulating the passage of time.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TimerMocks.md#_snippet_7

LANGUAGE: javascript
CODE:
```
jest.useFakeTimers();
it('calls the callback after 1 second via advanceTimersByTime', () => {
  const timerGame = require('../timerGame');
  const callback = jest.fn();

  timerGame(callback);

  // At this point in time, the callback should not have been called yet
  expect(callback).not.toHaveBeenCalled();

  // Fast-forward until all timers have been executed
  jest.advanceTimersByTime(1000);

  // Now our callback should have been called!
  expect(callback).toHaveBeenCalled();
  expect(callback).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Defining `toBeWithinRange` Custom Matcher in TypeScript
DESCRIPTION: This TypeScript snippet defines the `toBeWithinRange` custom Jest matcher, leveraging `MatcherFunction` for robust type checking of its parameters. It performs runtime type validation and calculates if the `actual` value falls within the `floor` and `ceiling`. The matcher is registered with `expect.extend`, and its type declarations are included directly within the module, providing a self-contained and type-safe implementation.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_66

LANGUAGE: typescript
CODE:
```
import {expect} from '@jest/globals';
import type {MatcherFunction} from 'expect';

const toBeWithinRange: MatcherFunction<[floor: unknown, ceiling: unknown]> =
  // `floor` and `ceiling` get types from the line above
  // it is recommended to type them as `unknown` and to validate the values
  function (actual, floor, ceiling) {
    if (
      typeof actual !== 'number' ||
      typeof floor !== 'number' ||
      typeof ceiling !== 'number'
    ) {
      throw new TypeError('These must be of type number!');
    }

    const pass = actual >= floor && actual <= ceiling;
    if (pass) {
      return {
        message: () =>
          // `this` context will have correct typings
          `expected ${this.utils.printReceived(
            actual,
          )} not to be within range ${this.utils.printExpected(
            `${floor} - ${ceiling}`,
          )}`,
        pass: true,
      };
    } else {
      return {
        message: () =>
          `expected ${this.utils.printReceived(
            actual,
          )} to be within range ${this.utils.printExpected(
            `${floor} - ${ceiling}`,
          )}`,
        pass: false,
      };
    }
  };

expect.extend({
  toBeWithinRange,
});

declare module 'expect' {
  interface AsymmetricMatchers {
    toBeWithinRange(floor: number, ceiling: number): void;
  }
  interface Matchers<R> {
    toBeWithinRange(floor: number, ceiling: number): R;
  }
}
```

----------------------------------------

TITLE: Writing a basic Jest test for sum function
DESCRIPTION: This JavaScript test file imports the `sum` function and uses Jest's `test`, `expect`, and `toBe` matchers to verify that `sum(1, 2)` correctly returns `3`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const sum = require('./sum');

test('adds 1 + 2 to equal 3', () => {
  expect(sum(1, 2)).toBe(3);
});
```

----------------------------------------

TITLE: Testing jQuery DOM Manipulation with Jest and Mocks
DESCRIPTION: This Jest test suite validates the `displayUser.js` module's DOM manipulation. It uses `jest.mock` to mock the `fetchCurrentUser` dependency, ensuring the test runs without real network requests. The test sets up a virtual DOM structure using `document.body.innerHTML` and simulates a button click with jQuery, then asserts that `fetchCurrentUser` was called and the `#username` span's text was updated correctly. It relies on Jest's JSDOM environment for DOM simulation.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialjQuery.md#_snippet_1

LANGUAGE: javascript
CODE:
```
'use strict';

jest.mock('../fetchCurrentUser');

test('displays a user after a click', () => {
  // Set up our document body
  document.body.innerHTML =
    '<div>' +
    '  <span id="username" />' +
    '  <button id="button" />' +
    '</div>';

  // This module has a side-effect
  require('../displayUser');

  const $ = require('jquery');
  const fetchCurrentUser = require('../fetchCurrentUser');

  // Tell the fetchCurrentUser mock function to automatically invoke
  // its callback with some data
  fetchCurrentUser.mockImplementation(cb => {
    cb({
      fullName: 'Johnny Cash',
      loggedIn: true,
    });
  });

  // Use jquery to emulate a click on our button
  $('#button').click();

  // Assert that the fetchCurrentUser function was called, and that the
  // #username span's inner text was updated as we'd expect it to.
  expect(fetchCurrentUser).toHaveBeenCalled();
  expect($('#username').text()).toBe('Johnny Cash - Logged In');
});
```

----------------------------------------

TITLE: Creating Mock Functions with jest.fn() in JavaScript
DESCRIPTION: This example demonstrates `jest.fn()`, which creates a new, unused mock function. It can optionally take a mock implementation, allowing you to define custom behavior for the mocked function.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#_snippet_26

LANGUAGE: JavaScript
CODE:
```
const mockFn = jest.fn();
mockFn();
expect(mockFn).toHaveBeenCalled();
```

LANGUAGE: JavaScript
CODE:
```
// With a mock implementation:
const returnsTrue = jest.fn(() => true);
console.log(returnsTrue()); // true;
```

----------------------------------------

TITLE: Grouping Related Tests with describe in Jest
DESCRIPTION: This example demonstrates the basic use of `describe` to logically group several related `test` blocks. It helps organize tests for a specific object or module, improving readability and maintainability of the test suite.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const myBeverage = {
  delicious: true,
  sour: false,
};

describe('my beverage', () => {
  test('is delicious', () => {
    expect(myBeverage.delicious).toBeTruthy();
  });

  test('is not sour', () => {
    expect(myBeverage.sour).toBeFalsy();
  });
});
```

----------------------------------------

TITLE: Grouping Related Tests with describe in Jest (JavaScript)
DESCRIPTION: This example illustrates the basic usage of `describe` to group related tests in Jest. It defines a `myBeverage` object and then uses `describe` to logically group tests that assert its properties, enhancing test organization and readability.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_4

LANGUAGE: js
CODE:
```
const myBeverage = {
  delicious: true,
  sour: false,
};

describe('my beverage', () => {
  test('is delicious', () => {
    expect(myBeverage.delicious).toBeTruthy();
  });

  test('is not sour', () => {
    expect(myBeverage.sour).toBeFalsy();
  });
});
```

----------------------------------------

TITLE: Testing Rejected Promises with Jest's .rejects (JavaScript)
DESCRIPTION: This snippet illustrates the use of Jest's `.rejects` matcher to verify that a promise is rejected with an expected error. Similar to `.resolves`, returning the `expect` assertion is vital for Jest to correctly handle the asynchronous rejection and prevent the test from passing prematurely if the promise fulfills instead.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#_snippet_9

LANGUAGE: js
CODE:
```
test('the fetch fails with an error', () => {
  return expect(fetchData()).rejects.toMatch('error');
});
```

----------------------------------------

TITLE: Accessing Jest Object in ESM with `import` or `import.meta` (JavaScript)
DESCRIPTION: This snippet demonstrates two ways to access the `jest` global object within an ECMAScript Module (ESM) test file. It shows importing `jest` from `@jest/globals` or using `import.meta.jest`, which is equivalent. This is necessary because the `jest` object is not globally available in ESM as it is in CommonJS.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ECMAScriptModules.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import {jest} from '@jest/globals';

jest.useFakeTimers();

// etc.

// alternatively
import.meta.jest.useFakeTimers();

// jest === import.meta.jest => true
```

----------------------------------------

TITLE: Attaching VS Code Debugger to Jest Process
DESCRIPTION: This `launch.json` configuration allows Visual Studio Code to attach to an already running Node.js process that is executing Jest tests. It connects to the default Node.js debugger port (9229) to enable debugging capabilities.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/Troubleshooting.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "node",
      "request": "attach",
      "name": "Attach",
      "port": 9229
    }
  ]
}
```

----------------------------------------

TITLE: Setting Up Global State Before All Tests with Jest beforeAll (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `beforeAll` in Jest to perform setup operations once, before any tests in a file begin. It shows initializing a global database with test data, ensuring the setup is complete before tests run. Jest waits for the promise returned by the setup function to resolve, allowing for asynchronous initialization.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

beforeAll(() => {
  // Clears the database and adds some testing data.
  // Jest will wait for this promise to resolve before running tests.
  return globalDatabase.clear().then(() => {
    return globalDatabase.insert({testData: 'foo'});
  });
});

// Since we only set up the database once in this example, it's important
// that our tests don't modify it.
test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});
```

----------------------------------------

TITLE: Adding Jest test script to package.json
DESCRIPTION: This JSON snippet adds a `test` script to the `scripts` section of `package.json`, allowing Jest tests to be run conveniently via `npm test` or `yarn test`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test": "jest"
  }
}
```

----------------------------------------

TITLE: Testing a Value with `expect` and `toBe` in Jest
DESCRIPTION: This snippet demonstrates the basic usage of `expect` with the `toBe` matcher in Jest. It asserts that the return value of `bestLaCroixFlavor()` is strictly equal to 'grapefruit'. The `expect` function takes the value to be tested, and the matcher (`toBe`) performs the comparison.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_0

LANGUAGE: js
CODE:
```
test('the best flavor is grapefruit', () => {
  expect(bestLaCroixFlavor()).toBe('grapefruit');
});
```

----------------------------------------

TITLE: Testing CheckboxWithLabel Component - React Testing Library TypeScript
DESCRIPTION: This test suite for `CheckboxWithLabel` uses `@testing-library/react` to simulate user interaction and assert component behavior. It renders the component, verifies its initial state, simulates a click event on the checkbox, and then asserts that the label text has correctly updated, demonstrating a typical user flow.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#_snippet_14

LANGUAGE: tsx
CODE:
```
import {cleanup, fireEvent, render} from '@testing-library/react';
import CheckboxWithLabel from '../CheckboxWithLabel';

// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher
// unmount and cleanup DOM after the test is finished.
afterEach(cleanup);

it('CheckboxWithLabel changes the text after click', () => {
  const {queryByLabelText, getByLabelText} = render(
    <CheckboxWithLabel labelOn="On" labelOff="Off" />,
  );

  expect(queryByLabelText(/off/i)).toBeTruthy();

  fireEvent.click(getByLabelText(/off/i));

  expect(queryByLabelText(/on/i)).toBeTruthy();
});
```

----------------------------------------

TITLE: Matching Object Properties with .toMatchObject in Jest (JavaScript)
DESCRIPTION: This snippet demonstrates how to use Jest's `.toMatchObject` matcher to verify that a JavaScript object contains a subset of expected properties. It shows matching nested objects and using asymmetric matchers like `expect.stringMatching` for flexible property validation.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_36

LANGUAGE: javascript
CODE:
```
const houseForSale = {
  bath: true,
  bedrooms: 4,
  kitchen: {
    amenities: ['oven', 'stove', 'washer'],
    area: 20,
    wallColor: 'white',
  },
};
const desiredHouse = {
  bath: true,
  kitchen: {
    amenities: ['oven', 'stove', 'washer'],
    wallColor: expect.stringMatching(/white|yellow/),
  },
};

test('the house has my desired features', () => {
  expect(houseForSale).toMatchObject(desiredHouse);
});
```

----------------------------------------

TITLE: Installing Jest with npm
DESCRIPTION: This command installs Jest as a development dependency in your project using npm. It's an alternative to Yarn for adding Jest to your project for testing purposes.
SOURCE: https://github.com/jestjs/jest/blob/main/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install --save-dev jest
```

----------------------------------------

TITLE: Testing Async/Await with .resolves and .rejects Matchers
DESCRIPTION: This snippet demonstrates a more concise way to test promise resolution and rejection using `async`/`await` combined with Jest's `.resolves` and `.rejects` matchers. The first test asserts the resolved value, and the second asserts the rejected error, both awaiting the promise directly.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TestingAsyncCode.md#_snippet_2

LANGUAGE: js
CODE:
```
test('the data is peanut butter', async () => {
  await expect(fetchData()).resolves.toBe('peanut butter');
});

test('the fetch fails with an error', async () => {
  await expect(fetchData()).rejects.toMatch('error');
});
```

----------------------------------------

TITLE: Testing Exact Equality with Jest toBe Matcher (JavaScript)
DESCRIPTION: This snippet demonstrates the basic usage of Jest's `toBe` matcher to test for exact equality. It uses `Object.is` for comparison and is suitable for primitive values. The `expect` function creates an expectation object, on which matchers like `toBe` are called.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UsingMatchers.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
test('two plus two is four', () => {
  expect(2 + 2).toBe(4);
});
```

----------------------------------------

TITLE: Execution Order of Jest Setup and Teardown Hooks
DESCRIPTION: This snippet visualizes the execution order of `beforeAll`, `afterAll`, `beforeEach`, and `afterEach` hooks, including nested `describe` blocks. It clarifies the sequence in which setup and teardown functions are called, which is crucial for understanding test environment lifecycle.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#_snippet_4

LANGUAGE: js
CODE:
```
beforeAll(() => console.log('1 - beforeAll'));
afterAll(() => console.log('1 - afterAll'));
beforeEach(() => console.log('1 - beforeEach'));
afterEach(() => console.log('1 - afterEach'));

test('', () => console.log('1 - test'));

describe('Scoped / Nested block', () => {
  beforeAll(() => console.log('2 - beforeAll'));
  afterAll(() => console.log('2 - afterAll'));
  beforeEach(() => console.log('2 - beforeEach'));
  afterEach(() => console.log('2 - afterEach'));

  test('', () => console.log('2 - test'));
});

// 1 - beforeAll
// 1 - beforeEach
// 1 - test
// 1 - afterEach
// 2 - beforeAll
// 1 - beforeEach
// 2 - beforeEach
// 2 - test
// 2 - afterEach
// 1 - afterEach
// 2 - afterAll
// 1 - afterAll
```

----------------------------------------

TITLE: Installing Jest with npm
DESCRIPTION: Installs the Jest testing framework as a development dependency in your project using npm. This command adds Jest to your `package.json`'s `devDependencies`, making it available for running tests during development.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-dev jest
```

----------------------------------------

TITLE: Comparing Primitive Values and Object Properties with Jest `expect.toBe` (JavaScript)
DESCRIPTION: This snippet demonstrates the use of the `.toBe` matcher for comparing primitive values and properties of an object. It shows how to assert that numeric and string properties of the `can` object match expected values, emphasizing `toBe`'s use for strict equality checks.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const can = {
  name: 'pamplemousse',
  ounces: 12,
};

describe('the can', () => {
  test('has 12 ounces', () => {
    expect(can.ounces).toBe(12);
  });

  test('has a sophisticated name', () => {
    expect(can.name).toBe('pamplemousse');
  });
});
```

----------------------------------------

TITLE: Comparing Primitive Values with `.toBe` in Jest
DESCRIPTION: This snippet demonstrates the use of the `.toBe` matcher for comparing primitive values and checking referential identity of object instances. It validates properties of a `can` object, asserting its `ounces` and `name` values.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_6

LANGUAGE: js
CODE:
```
const can = {
  name: 'pamplemousse',
  ounces: 12,
};

describe('the can', () => {
  test('has 12 ounces', () => {
    expect(can.ounces).toBe(12);
  });

  test('has a sophisticated name', () => {
    expect(can.name).toBe('pamplemousse');
  });
});
```

----------------------------------------

TITLE: Deep Equality Comparison with Jest's .toEqual()
DESCRIPTION: Demonstrates `.toEqual()` for recursively comparing all properties of object instances (deep equality). It highlights its difference from `.toBe()` (which checks for object identity) and notes its use of `Object.is` for primitive values. It also provides alternative approaches for specific types like `Buffer` when default deep equality is insufficient.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_33

LANGUAGE: JavaScript
CODE:
```
const can1 = {
  flavor: 'grapefruit',
  ounces: 12,
};
const can2 = {
  flavor: 'grapefruit',
  ounces: 12,
};

describe('the La Croix cans on my desk', () => {
  test('have all the same properties', () => {
    expect(can1).toEqual(can2);
  });
  test('are not the exact same can', () => {
    expect(can1).not.toBe(can2);
  });
});
```

----------------------------------------

TITLE: Configuring Sequential Jest Mock Return Values
DESCRIPTION: This snippet demonstrates how to configure a Jest mock function to return different values on successive calls using `mockReturnValueOnce()` and `mockReturnValue()`. `mockReturnValueOnce()` sets a return value for a single call, while `mockReturnValue()` sets a default return value for all subsequent calls.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const myMock = jest.fn();
console.log(myMock());
// > undefined

myMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);

console.log(myMock(), myMock(), myMock(), myMock());
// > 10, 'x', true, true
```

----------------------------------------

TITLE: Using jest.mocked for Deeply Nested Mocks (TypeScript)
DESCRIPTION: This test file demonstrates how to use `jest.mocked()` to create a type-safe mock of a deeply nested object. It shows mocking a module, spying on `console.log`, and then using `mockReturnValue` and `mockImplementation` on the mocked functions, verifying calls with `toHaveLength`.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#_snippet_42

LANGUAGE: typescript
CODE:
```
import {expect, jest, test} from '@jest/globals';
import {song} from './song';

jest.mock('./song');
jest.spyOn(console, 'log');

const mockedSong = jest.mocked(song);
// or through `jest.Mocked<Source>`
// const mockedSong = song as jest.Mocked<typeof song>;

test('deep method is typed correctly', () => {
  mockedSong.one.more.time.mockReturnValue(12);

  expect(mockedSong.one.more.time(10)).toBe(12);
  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);
});

test('direct usage', () => {
  jest.mocked(console.log).mockImplementation(() => {
    return;
  });

  console.log('one more time');

  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);
});
```

----------------------------------------

TITLE: Grouping Related Tests with describe in Jest
DESCRIPTION: This example illustrates the basic usage of `describe` to group related tests for an object. It organizes `test` blocks under a common description, improving readability and logical organization of test suites. This helps in structuring tests for a specific feature or unit.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const myBeverage = {
  delicious: true,
  sour: false,
};

describe('my beverage', () => {
  test('is delicious', () => {
    expect(myBeverage.delicious).toBeTruthy();
  });

  test('is not sour', () => {
    expect(myBeverage.sour).toBeFalsy();
  });
});
```

----------------------------------------

TITLE: Mocking Functions with `jest.fn` in TypeScript
DESCRIPTION: This snippet demonstrates how `jest.fn` infers types when an implementation is provided, and how to use generic type arguments for type safety when the implementation is omitted. It shows creating a mock for an `add` function, implementing its behavior, and then asserting its calls within a test.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#_snippet_25

LANGUAGE: TypeScript
CODE:
```
import {expect, jest, test} from '@jest/globals';
import type add from './add';
import calculate from './calc';

test('calculate calls add', () => {
  // Create a new mock that can be used in place of `add`.
  const mockAdd = jest.fn<typeof add>();

  // `.mockImplementation()` now can infer that `a` and `b` are `number`
  // and that the returned value is a `number`.
  mockAdd.mockImplementation((a, b) => {
    // Yes, this mock is still adding two numbers but imagine this
    // was a complex function we are mocking.
    return a + b;
  });

  // `mockAdd` is properly typed and therefore accepted by anything
  // requiring `add`.
  calculate(mockAdd, 1, 2);

  expect(mockAdd).toHaveBeenCalledTimes(1);
  expect(mockAdd).toHaveBeenCalledWith(1, 2);
});
```

----------------------------------------

TITLE: Testing Asynchronous Code with Jest's test (Promises)
DESCRIPTION: This example shows how Jest's `test` method handles asynchronous operations that return promises. Jest will automatically wait for the returned promise to resolve before marking the test as complete, simplifying asynchronous test writing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_16

LANGUAGE: js
CODE:
```
test('has lemon in it', () => {
  return fetchBeverageList().then(list => {
    expect(list).toContain('lemon');
  });
});
```

----------------------------------------

TITLE: Illustrating Jest Hook Execution Order
DESCRIPTION: This snippet provides a clear illustration of the execution order for Jest's `beforeAll`, `afterAll`, `beforeEach`, and `afterEach` hooks, including how they interact when nested within `describe` blocks. It helps in understanding the flow of setup and teardown operations in complex test suites.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
beforeAll(() => console.log('1 - beforeAll'));
afterAll(() => console.log('1 - afterAll'));
beforeEach(() => console.log('1 - beforeEach'));
afterEach(() => console.log('1 - afterEach'));

test('', () => console.log('1 - test'));

describe('Scoped / Nested block', () => {
  beforeAll(() => console.log('2 - beforeAll'));
  afterAll(() => console.log('2 - afterAll'));
  beforeEach(() => console.log('2 - beforeEach'));
  afterEach(() => console.log('2 - afterEach'));

  test('', () => console.log('2 - test'));
});

// 1 - beforeAll
// 1 - beforeEach
// 1 - test
// 1 - afterEach
// 2 - beforeAll
// 1 - beforeEach
// 2 - beforeEach
// 2 - test
// 2 - afterEach
// 1 - afterEach
// 2 - afterAll
// 1 - afterAll
```

----------------------------------------

TITLE: Installing Jest
DESCRIPTION: Installs Jest as a development dependency using npm, making it available for testing within your project.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-dev jest
```

----------------------------------------

TITLE: Writing a Basic Jest Test
DESCRIPTION: Creates a test file that imports the `sum` function and uses Jest's `test`, `expect`, and `toBe` matchers to verify its correctness, ensuring the function behaves as expected.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const sum = require('./sum');

test('adds 1 + 2 to equal 3', () => {
  expect(sum(1, 2)).toBe(3);
});
```

----------------------------------------

TITLE: Testing a value with expect and toBe
DESCRIPTION: This snippet demonstrates the basic usage of `expect` with the `toBe` matcher to assert that the return value of `bestLaCroixFlavor()` is 'grapefruit'. It shows how `expect` is typically used in conjunction with a matcher function.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_0

LANGUAGE: js
CODE:
```
test('the best flavor is grapefruit', () => {
  expect(bestLaCroixFlavor()).toBe('grapefruit');
});
```

----------------------------------------

TITLE: Using Jest Custom Matchers for Mock Functions - JavaScript
DESCRIPTION: This snippet demonstrates the use of Jest's built-in custom matchers for asserting how mock functions have been called. These matchers provide a concise and readable way to test mock interactions, such as checking if a mock was called, called with specific arguments, or if its last call matched certain arguments, and also for snapshotting mock calls.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#_snippet_17

LANGUAGE: javascript
CODE:
```
// The mock function was called at least once
expect(mockFunc).toHaveBeenCalled();

// The mock function was called at least once with the specified args
expect(mockFunc).toHaveBeenCalledWith(arg1, arg2);

// The last call to the mock function was called with the specified args
expect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);

// All calls and the name of the mock is written as a snapshot
expect(mockFunc).toMatchSnapshot();
```

----------------------------------------

TITLE: Setting Up Global State Before All Tests (Jest, JavaScript)
DESCRIPTION: This example demonstrates using `beforeAll` to set up global state, such as clearing and populating a database, before any tests in the file begin. Jest waits for the promise returned by `beforeAll` to resolve, ensuring that the setup is complete before tests execute. This is useful for shared, immutable test data.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

beforeAll(() => {
  // Clears the database and adds some testing data.
  // Jest will wait for this promise to resolve before running tests.
  return globalDatabase.clear().then(() => {
    return globalDatabase.insert({testData: 'foo'});
  });
});

// Since we only set up the database once in this example, it's important
// that our tests don't modify it.
test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});
```

----------------------------------------

TITLE: Defining a Basic Test Case with Jest's test
DESCRIPTION: This snippet illustrates the fundamental usage of the `test` method (or `it` alias) in Jest to define a single test case. It takes a descriptive name and a function containing the test's assertions. This is the simplest form of a Jest test, verifying a basic expectation.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#_snippet_15

LANGUAGE: js
CODE:
```
test('did not rain', () => {
  expect(inchesOfRain()).toBe(0);
});
```

----------------------------------------

TITLE: Installing Jest with Yarn
DESCRIPTION: This command installs Jest as a development dependency in your project using Yarn. It's the recommended way to add Jest to your project for testing purposes.
SOURCE: https://github.com/jestjs/jest/blob/main/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
yarn add --dev jest
```

----------------------------------------

TITLE: Defining Basic Test Cases with Jest's test
DESCRIPTION: This snippet demonstrates the fundamental `test` method (also aliased as `it`) for defining a single test case. It takes a test name and a function containing the assertions, with an optional third argument for a timeout in milliseconds.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_15

LANGUAGE: js
CODE:
```
test('did not rain', () => {
  expect(inchesOfRain()).toBe(0);
});
```

----------------------------------------

TITLE: Data-Driven Testing with `test.each` (Array of Arrays) in Jest
DESCRIPTION: This example demonstrates using `test.each` with an array of arrays to run the same test with different inputs. The test title uses `printf` formatting (`%i`) to inject numerical parameters, and the test function receives `a`, `b`, and `expected` as arguments.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#_snippet_24

LANGUAGE: JavaScript
CODE:
```
test.each([
  [1, 1, 2],
  [1, 2, 3],
  [2, 1, 3],
])('.add(%i, %i)', (a, b, expected) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Setting Up Global State Before Each Test with Jest's `beforeEach` (JavaScript)
DESCRIPTION: This example demonstrates how to use `beforeEach` in Jest to set up a global database state before each test runs. It shows clearing the database and inserting initial test data, ensuring a clean slate for subsequent tests. Jest waits for the returned promise to resolve before proceeding.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

beforeEach(() => {
  // Clears the database and adds some testing data.
  // Jest will wait for this promise to resolve before running tests.
  return globalDatabase.clear().then(() => {
    return globalDatabase.insert({testData: 'foo'});
  });
});

test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});

test('can insert a thing', () => {
  return globalDatabase.insert('thing', makeThing(), response => {
    expect(response.success).toBeTruthy();
  });
});
```

----------------------------------------

TITLE: Mocking Axios for User API Tests in Jest
DESCRIPTION: This test demonstrates how to mock the `axios` module using `jest.mock('axios')` to prevent actual API calls during testing. It uses `mockResolvedValue` to simulate a successful API response, allowing the `Users.all()` method to be tested in isolation with predefined data.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#_snippet_7

LANGUAGE: js
CODE:
```
import axios from 'axios';
import Users from './users';

jest.mock('axios');

test('should fetch users', () => {
  const users = [{name: 'Bob'}];
  const resp = {data: users};
  axios.get.mockResolvedValue(resp);

  // or you could use the following depending on your use case:
  // axios.get.mockImplementation(() => Promise.resolve(resp))

  return Users.all().then(data => expect(data).toEqual(users));
});
```

----------------------------------------

TITLE: Testing Asynchronous Functions with async/await in Jest
DESCRIPTION: This Jest test suite demonstrates writing asynchronous tests using async/await syntax. It covers both directly awaiting a Promise's resolution and combining await with the .resolves matcher for cleaner assertions on fulfilled Promises.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialAsync.md#_snippet_5

LANGUAGE: js
CODE:
```
// async/await can be used.
it('works with async/await', async () => {
  expect.assertions(1);
  const data = await user.getUserName(4);
  expect(data).toBe('Mark');
});

// async/await can also be used with `.resolves`.
it('works with async/await and resolves', async () => {
  expect.assertions(1);
  await expect(user.getUserName(5)).resolves.toBe('Paul');
});
```

----------------------------------------

TITLE: Testing Exact Equality with Jest toBe (JavaScript)
DESCRIPTION: This snippet demonstrates the basic usage of Jest's `toBe` matcher to test for exact equality between two primitive values. It uses `Object.is` internally for comparison. The `expect` function creates an expectation object, and `toBe` is called on it with the expected value.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#_snippet_0

LANGUAGE: javascript
CODE:
```
test('two plus two is four', () => {
  expect(2 + 2).toBe(4);
});
```

----------------------------------------

TITLE: Testing forEach with Jest Mock Function - JavaScript
DESCRIPTION: This Jest test suite demonstrates how to use a mock function (`jest.fn`) to verify the behavior of the `forEach` utility. It asserts that the mock callback was invoked the correct number of times, with the expected arguments, and that its return values were as anticipated, showcasing the inspection of mock state.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#_snippet_1

LANGUAGE: js
CODE:
```
const forEach = require('./forEach');

const mockCallback = jest.fn(x => 42 + x);

test('forEach mock function', () => {
  forEach([0, 1], mockCallback);

  // The mock function was called twice
  expect(mockCallback.mock.calls).toHaveLength(2);

  // The first argument of the first call to the function was 0
  expect(mockCallback.mock.calls[0][0]).toBe(0);

  // The first argument of the second call to the function was 1
  expect(mockCallback.mock.calls[1][0]).toBe(1);

  // The return value of the first call to the function was 42
  expect(mockCallback.mock.results[0].value).toBe(42);
});
```

----------------------------------------

TITLE: Defining Jest Configuration via TypeScript Object Export
DESCRIPTION: This snippet demonstrates configuring Jest by exporting a typed TypeScript object from `jest.config.ts`. It imports the `Config` type from `jest` to provide strong type checking for the configuration, setting `verbose` to `true` for detailed test output.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type {Config} from 'jest';

const config: Config = {
  verbose: true,
};

export default config;
```

----------------------------------------

TITLE: Running Data-Driven Tests with Jest's test.each (Array of Objects)
DESCRIPTION: This example illustrates using `test.each` with an array of objects, where each object represents a set of test data. The test title uses `$variable` syntax to inject object properties (`$a`, `$b`) for dynamic naming, and the test function destructures the input object.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
test.each([
  {a: 1, b: 1, expected: 2},
  {a: 1, b: 2, expected: 3},
  {a: 2, b: 1, expected: 3},
])('.add($a, $b)', ({a, b, expected}) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Configuring Jest with JavaScript Object Export
DESCRIPTION: This snippet demonstrates how to configure Jest by exporting a configuration object from a JavaScript file (e.g., `jest.config.js`). The `verbose` option is set to `true` to enable detailed test output. This is a common way to define Jest settings.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  verbose: true,
};

module.exports = config;
```

----------------------------------------

TITLE: Comparing Primitive Values and Object Properties with `.toBe` in Jest
DESCRIPTION: This snippet demonstrates using the `.toBe` matcher to compare primitive values (numbers and strings) and check referential identity of object instances. It asserts that the `ounces` property of the `can` object is 12 and its `name` property is 'pamplemousse'. `.toBe` uses `Object.is` for comparison.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_6

LANGUAGE: js
CODE:
```
const can = {
  name: 'pamplemousse',
  ounces: 12,
};

describe('the can', () => {
  test('has 12 ounces', () => {
    expect(can.ounces).toBe(12);
  });

  test('has a sophisticated name', () => {
    expect(can.name).toBe('pamplemousse');
  });
});
```

----------------------------------------

TITLE: Clearing Mocks Before Each Test (`--clearMocks`)
DESCRIPTION: Automatically clears mock calls, instances, contexts, and results before every test. This is equivalent to calling `jest.clearAllMocks()` before each test, resetting mock state without removing any mock implementation.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#_snippet_16

LANGUAGE: bash
CODE:
```
jest --clearMocks
```

----------------------------------------

TITLE: Setting a Mock Function's Return Value (JavaScript)
DESCRIPTION: This JavaScript example demonstrates the usage of `mockReturnValue` to define the value a mock function should return. It shows how the return value can be updated dynamically, affecting subsequent calls to the mock.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#_snippet_17

LANGUAGE: javascript
CODE:
```
const mock = jest.fn();

mock.mockReturnValue(42);
mock(); // 42

mock.mockReturnValue(43);
mock(); // 43
```

----------------------------------------

TITLE: Running Tests with Regex Pattern
DESCRIPTION: When `jest` is run with an argument, that argument is treated as a regular expression to match against test files. Only files matching the pattern will be picked up and executed. Depending on your terminal, you may need to quote this argument.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#_snippet_9

LANGUAGE: bash
CODE:
```
jest "my.*(complex)?pattern"
```

----------------------------------------

TITLE: Configuring collectCoverageFrom in Jest (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure the `collectCoverageFrom` option in a Jest JavaScript configuration file. It specifies an array of glob patterns to collect coverage information for all `.js` and `.jsx` files, while explicitly excluding files within `node_modules` and `vendor` directories. This option requires `collectCoverage` to be `true` or Jest to be invoked with `--coverage`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#_snippet_10

LANGUAGE: javascript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  collectCoverageFrom: [
    '**/*.{js,jsx}',
    '!**/node_modules/**',
    '!**/vendor/**',
  ],
};

module.exports = config;
```

----------------------------------------

TITLE: Installing @testing-library/react
DESCRIPTION: This command installs the `@testing-library/react` package as a development dependency. It is used for DOM testing of React components, providing utilities to query and interact with rendered components.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#_snippet_12

LANGUAGE: bash
CODE:
```
npm install --save-dev @testing-library/react
```

----------------------------------------

TITLE: Adding Jest Test Script to package.json
DESCRIPTION: Adds a `test` script to `package.json` that executes Jest, allowing tests to be run conveniently via `npm test` or `yarn test`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test": "jest"
  }
}
```

----------------------------------------

TITLE: Mocking Network Requests for Jest Tests in JavaScript
DESCRIPTION: This manual mock for the `request.js` module simulates API responses without making actual network calls. It resolves or rejects a Promise based on a predefined `users` object, providing predictable data for isolated testing of dependent modules.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const users = {
  4: {name: 'Mark'},
  5: {name: 'Paul'}
};

export default function request(url) {
  return new Promise((resolve, reject) => {
    const userID = parseInt(url.slice('/users/'.length), 10);
    process.nextTick(() =>
      users[userID]
        ? resolve(users[userID])
        : reject({
            error: `User with ${userID} not found.`
          })
    );
  });
}
```

----------------------------------------

TITLE: Testing a rejected promise with .rejects (async/await)
DESCRIPTION: This example shows how to use `async/await` with `.rejects` to test a rejected promise. It asserts that the promise rejects and the error message contains 'octopus', offering a more readable approach for asynchronous error testing.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_5

LANGUAGE: js
CODE:
```
test('rejects to octopus', async () => {
  await expect(Promise.reject(new Error('octopus'))).rejects.toThrow('octopus');
});
```

----------------------------------------

TITLE: Mocking Network Request for Jest (JavaScript)
DESCRIPTION: This manual mock for `request.js` simulates fetching user data without making actual network calls. It resolves or rejects a Promise based on whether a user ID is found in a predefined `users` object, mimicking API responses for testing purposes.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const users = {
  4: {name: 'Mark'},
  5: {name: 'Paul'},
};

export default function request(url) {
  return new Promise((resolve, reject) => {
    const userID = parseInt(url.slice('/users/'.length), 10);
    process.nextTick(() =>
      users[userID]
        ? resolve(users[userID])
        : reject({
            error: `User with ${userID} not found.`,
          }),
    );
  });
}
```

----------------------------------------

TITLE: Installing Jest with npm
DESCRIPTION: This command installs Jest as a development dependency in your project using npm. The `--save-dev` flag ensures it's added to the `devDependencies` section of your `package.json`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-dev jest
```

----------------------------------------

TITLE: Installing Jest with npm
DESCRIPTION: This command installs Jest as a development dependency in your project using npm, making it available for running tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-dev jest
```

----------------------------------------

TITLE: Comparing Numbers with Jest Matchers (JavaScript)
DESCRIPTION: This example showcases various Jest matchers for numerical comparisons: `toBeGreaterThan`, `toBeGreaterThanOrEqual`, `toBeLessThan`, and `toBeLessThanOrEqual`. It also notes that `toBe` and `toEqual` behave equivalently for primitive numbers.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#_snippet_5

LANGUAGE: javascript
CODE:
```
test('two plus two', () => {
  const value = 2 + 2;
  expect(value).toBeGreaterThan(3);
  expect(value).toBeGreaterThanOrEqual(3.5);
  expect(value).toBeLessThan(5);
  expect(value).toBeLessThanOrEqual(4.5);

  // toBe and toEqual are equivalent for numbers
  expect(value).toBe(4);
  expect(value).toEqual(4);
});
```

----------------------------------------

TITLE: Manually Asserting Jest Mock Function Calls via .mock Property - JavaScript
DESCRIPTION: This snippet illustrates how to manually perform assertions on Jest mock functions by directly inspecting their `.mock` property. It provides equivalents for checking call count, arguments of any call, arguments of the last call, and specific arguments within a call. It also shows how to manually assert mock calls and name for snapshot-like behavior, serving as an alternative to custom matchers.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#_snippet_18

LANGUAGE: javascript
CODE:
```
// The mock function was called at least once
expect(mockFunc.mock.calls.length).toBeGreaterThan(0);

// The mock function was called at least once with the specified args
expect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);

// The last call to the mock function was called with the specified args
expect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([
  arg1,
  arg2,
]);

// The first arg of the last call to the mock function was `42`
// (note that there is no sugar helper for this specific assertion)
expect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);

// A snapshot will check that a mock was invoked the same number of times,
// in the same order, with the same arguments. It will also assert on the name.
expect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);
expect(mockFunc.getMockName()).toBe('a mock name');
```

----------------------------------------

TITLE: Testing Promises with Async/Await and .resolves/.rejects in Jest
DESCRIPTION: This snippet illustrates a more concise way to test promises using async/await combined with Jest's built-in .resolves and .rejects matchers. This approach directly asserts on the resolved or rejected value of a promise, making tests cleaner.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TestingAsyncCode.md#_snippet_2

LANGUAGE: js
CODE:
```
test('the data is peanut butter', async () => {
  await expect(fetchData()).resolves.toBe('peanut butter');
});

test('the fetch fails with an error', async () => {
  await expect(fetchData()).rejects.toMatch('error');
});
```

----------------------------------------

TITLE: Writing a Basic Jest Test for Sum Function
DESCRIPTION: This test file imports the `sum` function and uses Jest's `test` global to define a test case. It asserts that calling `sum(1, 2)` should `toBe` exactly `3`, demonstrating a basic assertion with `expect`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const sum = require('./sum');

test('adds 1 + 2 to equal 3', () => {
  expect(sum(1, 2)).toBe(3);
});
```

----------------------------------------

TITLE: Complete Jest Test Example with Class Mocking and Spying in JavaScript
DESCRIPTION: This comprehensive example demonstrates a full Jest test file. It includes mocking a class and its methods using `jest.mock`, clearing mocks with `beforeEach`, and writing tests to assert constructor calls, instance creation, and method invocations with specific parameters.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#_snippet_20

LANGUAGE: javascript
CODE:
```
import SoundPlayer from './sound-player';
import SoundPlayerConsumer from './sound-player-consumer';

const mockPlaySoundFile = jest.fn();
jest.mock('./sound-player', () => {
  return jest.fn().mockImplementation(() => {
    return {playSoundFile: mockPlaySoundFile};
  });
});

beforeEach(() => {
  SoundPlayer.mockClear();
  mockPlaySoundFile.mockClear();
});

it('The consumer should be able to call new() on SoundPlayer', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  // Ensure constructor created the object:
  expect(soundPlayerConsumer).toBeTruthy();
});

it('We can check if the consumer called the class constructor', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  expect(SoundPlayer).toHaveBeenCalledTimes(1);
});

it('We can check if the consumer called a method on the class instance', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  const coolSoundFileName = 'song.mp3';
  soundPlayerConsumer.playSomethingCool();
  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);
});
```

----------------------------------------

TITLE: Configuring Jest to Mock Static Assets
DESCRIPTION: This Jest configuration uses `moduleNameMapper` to mock common static asset files (images, fonts, media) and stylesheets. It directs Jest to use specific mock files (`fileMock.js` and `styleMock.js`) instead of processing the actual assets during tests, which is useful as these files are often not relevant for unit testing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  moduleNameMapper: {
    '\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':
      '<rootDir>/__mocks__/fileMock.js',
    '\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',
  },
};
```

----------------------------------------

TITLE: Testing Exact Equality with `toBe` in Jest
DESCRIPTION: This snippet demonstrates the basic usage of Jest's `toBe` matcher to test for exact equality. It uses `Object.is` internally for comparison. This is suitable for primitive values like numbers.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UsingMatchers.md#_snippet_0

LANGUAGE: js
CODE:
```
test('two plus two is four', () => {
  expect(2 + 2).toBe(4);
});
```

----------------------------------------

TITLE: Mocking Resolved Promises with Jest's mockResolvedValue
DESCRIPTION: The `mockResolvedValue` method is a shorthand for creating a mock function that always returns a resolved promise with the specified value. This is particularly useful for testing asynchronous code where a mock needs to simulate a successful promise resolution. The mock function will return the same resolved value for all subsequent calls.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#_snippet_14

LANGUAGE: javascript
CODE:
```
jest.fn().mockImplementation(() => Promise.resolve(value));
```

LANGUAGE: javascript
CODE:
```
test('async test', async () => {
  const asyncMock = jest.fn().mockResolvedValue(43);

  await asyncMock(); // 43
});
```

LANGUAGE: typescript
CODE:
```
import {jest, test} from '@jest/globals';

test('async test', async () => {
  const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);

  await asyncMock(); // 43
});
```

----------------------------------------

TITLE: Testing Async Errors with .rejects using Async/Await
DESCRIPTION: This snippet shows how to test promise rejections using the `.rejects` helper with `async/await` syntax. The `await` keyword ensures the promise is resolved before the test continues, and `expect.assertions(1)` confirms the number of assertions.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
// Or using async/await with `.rejects`.
it('tests error with async/await and rejects', async () => {
  expect.assertions(1);
  await expect(user.getUserName(3)).rejects.toEqual({
    error: 'User with 3 not found.',
  });
});
```

----------------------------------------

TITLE: Comparing Object Structure and Type with Jest's toStrictEqual in JavaScript
DESCRIPTION: This snippet highlights the strict comparison capabilities of `toStrictEqual` compared to `toEqual`. It demonstrates that `toStrictEqual` checks for identical object types (e.g., class instances vs. literal objects) and considers `undefined` properties and array sparseness, ensuring a more rigorous equality check.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_37

LANGUAGE: js
CODE:
```
class LaCroix {
  constructor(flavor) {
    this.flavor = flavor;
  }
}

describe('the La Croix cans on my desk', () => {
  test('are not semantically the same', () => {
    expect(new LaCroix('lemon')).toEqual({flavor: 'lemon'});
    expect(new LaCroix('lemon')).not.toStrictEqual({flavor: 'lemon'});
  });
});
```

----------------------------------------

TITLE: Testing Exact Equality with Jest's toBe Matcher (JavaScript)
DESCRIPTION: This snippet demonstrates the basic usage of Jest's `toBe` matcher to test for exact equality. It uses `Object.is` for comparison. This is suitable for primitive values like numbers, booleans, and strings.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#_snippet_0

LANGUAGE: js
CODE:
```
test('two plus two is four', () => {
  expect(2 + 2).toBe(4);
});
```

----------------------------------------

TITLE: Testing Asynchronous Error Handling (Jest)
DESCRIPTION: This Jest test illustrates two common patterns for testing error conditions in asynchronous operations. The first uses the `.catch` method on a Promise to assert the error, while the second employs a `try...catch` block within an `async` function. Both approaches ensure that the expected error object is caught and asserted, with `expect.assertions` validating the execution path.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
// Testing for async errors using Promise.catch.
it('tests error with promises', () => {
  expect.assertions(1);
  return user.getUserName(2).catch(error =>
    expect(error).toEqual({
      error: 'User with 2 not found.',
    }),
  );
});

// Or using async/await.
it('tests error with async/await', async () => {
  expect.assertions(1);
  try {
    await user.getUserName(1);
  } catch (error) {
    expect(error).toEqual({
      error: 'User with 1 not found.',
    });
  }
});
```

----------------------------------------

TITLE: Creating a Snapshot Test for a React Component with Jest
DESCRIPTION: This snippet demonstrates how to write a basic snapshot test for a React component using `react-test-renderer` and Jest's `toMatchSnapshot()` matcher. It renders the `Link` component, converts it to a serializable JSON tree, and then compares it against a stored snapshot or creates a new one on the first run.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import renderer from 'react-test-renderer';
import Link from '../Link';

it('renders correctly', () => {
  const tree = renderer
    .create(<Link page="http://www.facebook.com">Facebook</Link>)
    .toJSON();
  expect(tree).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Testing Resolved Promises with Jest `expect.resolves` and `async/await` (JavaScript)
DESCRIPTION: This example demonstrates using `async/await` with the `.resolves` modifier to test fulfilled promises. It shows how to assert that a promise resolves to a specific value ('lemon') and also that it does not resolve to another value ('octopus'), providing a cleaner syntax for asynchronous tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
test('resolves to lemon', async () => {
  await expect(Promise.resolve('lemon')).resolves.toBe('lemon');
  await expect(Promise.resolve('lemon')).resolves.not.toBe('octopus');
});
```

----------------------------------------

TITLE: Asserting Jest Mock Function Call Details in JavaScript
DESCRIPTION: This snippet provides various Jest `expect` assertions to demonstrate how to verify the call details of a mock function using its `.mock` property. It covers checking call count, arguments, return values, `this` context, instantiation count, and properties of instantiated objects, offering comprehensive testing capabilities.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// The function was called exactly once
expect(someMockFunction.mock.calls).toHaveLength(1);

// The first arg of the first call to the function was 'first arg'
expect(someMockFunction.mock.calls[0][0]).toBe('first arg');

// The second arg of the first call to the function was 'second arg'
expect(someMockFunction.mock.calls[0][1]).toBe('second arg');

// The return value of the first call to the function was 'return value'
expect(someMockFunction.mock.results[0].value).toBe('return value');

// The function was called with a certain `this` context: the `element` object.
expect(someMockFunction.mock.contexts[0]).toBe(element);

// This function was instantiated exactly twice
expect(someMockFunction.mock.instances.length).toBe(2);

// The object returned by the first instantiation of this function
// had a `name` property whose value was set to 'test'
expect(someMockFunction.mock.instances[0].name).toBe('test');

// The first argument of the last call to the function was 'test'
expect(someMockFunction.mock.lastCall[0]).toBe('test');
```

----------------------------------------

TITLE: Extending Automatic Mocks with jest.createMockFromModule (JavaScript)
DESCRIPTION: This JavaScript test showcases `jest.createMockFromModule` to generate a mock of the `../utils` module. It then demonstrates how to override specific mock implementations, such as `isAuthorized`, while retaining the automatically mocked behavior for other functions like `authorize`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const utils = jest.createMockFromModule('../utils');

utils.isAuthorized = jest.fn(secret => secret === 'not wizard');

test('implementation created by jest.createMockFromModule', () => {
  expect(jest.isMockFunction(utils.authorize)).toBe(true);
  expect(utils.isAuthorized('not wizard')).toBe(true);
});
```

----------------------------------------

TITLE: Launching and Debugging Jest Tests in VS Code (Linux/macOS)
DESCRIPTION: This VS Code `launch.json` configuration automatically launches Jest tests with debugging enabled on Linux/macOS. It uses `--inspect-brk` to pause execution at the start and `--runInBand` to run tests sequentially, facilitating easier debugging within the integrated terminal.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/Troubleshooting.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug Jest Tests",
      "type": "node",
      "request": "launch",
      "runtimeArgs": [
        "--inspect-brk",
        "${workspaceRoot}/node_modules/.bin/jest",
        "--runInBand"
      ],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}
```

----------------------------------------

TITLE: Configuring Jest with JavaScript (Object Export)
DESCRIPTION: This snippet demonstrates how to configure Jest by exporting a configuration object from a JavaScript file (e.g., `jest.config.js`). The `verbose` option is set to `true` to enable detailed test output. This is a common way to define Jest's behavior.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#_snippet_0

LANGUAGE: js
CODE:
```
/** @type {import('jest').Config} */
const config = {
  verbose: true,
};

module.exports = config;
```

----------------------------------------

TITLE: Comparing Floating Point Numbers with expect.closeTo in Jest
DESCRIPTION: This example shows how to use `expect.closeTo` for comparing floating-point numbers within object properties. It allows for approximate equality checks, useful for avoiding precision issues, with an optional `numDigits` argument to specify the number of digits to check after the decimal point.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_49

LANGUAGE: JavaScript
CODE:
```
test('compare float in object properties', () => {
  expect({
    title: '0.1 + 0.2',
    sum: 0.1 + 0.2,
  }).toEqual({
    title: '0.1 + 0.2',
    sum: expect.closeTo(0.3, 5),
  });
});
```

----------------------------------------

TITLE: Distinguishing Object Types with .toStrictEqual in Jest
DESCRIPTION: This example highlights the difference between Jest's `.toEqual` and `.toStrictEqual` matchers when comparing class instances with literal objects. While `.toEqual` performs a deep value comparison and considers `new LaCroix('lemon')` equal to `{flavor: 'lemon'}`, `.toStrictEqual` enforces strict type and structure checking, correctly identifying them as different due to their distinct constructors and prototypes.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_37

LANGUAGE: JavaScript
CODE:
```
class LaCroix {
  constructor(flavor) {
    this.flavor = flavor;
  }
}

describe('the La Croix cans on my desk', () => {
  test('are not semantically the same', () => {
    expect(new LaCroix('lemon')).toEqual({flavor: 'lemon'});
    expect(new LaCroix('lemon')).not.toStrictEqual({flavor: 'lemon'});
  });
});
```

----------------------------------------

TITLE: Verifying At Least One Assertion in Jest Tests - JavaScript
DESCRIPTION: This snippet shows how to use `expect.hasAssertions()` to verify that at least one assertion is called during a test, ensuring that assertions within asynchronous callbacks (like the one provided to `prepareState`) are actually triggered.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ExpectAPI.md#_snippet_26

LANGUAGE: js
CODE:
```
test('prepareState prepares a valid state', () => {
  expect.hasAssertions();
  prepareState(state => {
    expect(validateState(state)).toBeTruthy();
  });
  return waitOnState();
});
```

----------------------------------------

TITLE: Illustrating Jest Hook Execution Order
DESCRIPTION: This snippet provides a clear illustration of the execution order of Jest's setup and teardown hooks (beforeAll, afterAll, beforeEach, afterEach) when used at the top level and within nested `describe` blocks. The console logs demonstrate the sequence in which these hooks and tests are run, highlighting how outer hooks wrap inner ones.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SetupAndTeardown.md#_snippet_4

LANGUAGE: js
CODE:
```
beforeAll(() => console.log('1 - beforeAll'));
afterAll(() => console.log('1 - afterAll'));
beforeEach(() => console.log('1 - beforeEach'));
afterEach(() => console.log('1 - afterEach'));

test('', () => console.log('1 - test'));

describe('Scoped / Nested block', () => {
  beforeAll(() => console.log('2 - beforeAll'));
  afterAll(() => console.log('2 - afterAll'));
  beforeEach(() => console.log('2 - beforeEach'));
  afterEach(() => console.log('2 - afterEach'));

  test('', () => console.log('2 - test'));
});

// 1 - beforeAll
// 1 - beforeEach
// 1 - test
// 1 - afterEach
// 2 - beforeAll
// 1 - beforeEach
// 2 - beforeEach
// 2 - test
// 2 - afterEach
// 1 - afterEach
// 2 - afterAll
// 1 - afterAll
```

----------------------------------------

TITLE: Testing Async Errors with .rejects (Async/Await)
DESCRIPTION: This snippet illustrates testing asynchronous errors using Jest's `.rejects` helper with the `async/await` syntax. It awaits the expectation that the `getUserName` promise rejects with a specific error, providing a cleaner syntax for asynchronous tests. `expect.assertions(1)` is included for assertion count verification.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
// Or using async/await with `.rejects`.
it('tests error with async/await and rejects', async () => {
  expect.assertions(1);
  await expect(user.getUserName(3)).rejects.toEqual({
    error: 'User with 3 not found.',
  });
});
```

----------------------------------------

TITLE: Mocking Functions with `jest.fn` in TypeScript
DESCRIPTION: This snippet demonstrates how `jest.fn` infers types when an implementation is provided, ensuring type safety. It shows how to create a mock function, use `mockImplementation` to define its behavior, and then assert its calls within a test.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#_snippet_23

LANGUAGE: TypeScript
CODE:
```
import {expect, jest, test} from '@jest/globals';
import type add from './add';
import calculate from './calc';

test('calculate calls add', () => {
  // Create a new mock that can be used in place of `add`.
  const mockAdd = jest.fn<typeof add>();

  // `.mockImplementation()` now can infer that `a` and `b` are `number`
  // and that the returned value is a `number`.
  mockAdd.mockImplementation((a, b) => {
    // Yes, this mock is still adding two numbers but imagine this
    // was a complex function we are mocking.
    return a + b;
  });

  // `mockAdd` is properly typed and therefore accepted by anything
  // requiring `add`.
  calculate(mockAdd, 1, 2);

  expect(mockAdd).toHaveBeenCalledTimes(1);
  expect(mockAdd).toHaveBeenCalledWith(1, 2);
});
```

----------------------------------------

TITLE: Testing Method Spying with jest.spyOn - JavaScript
DESCRIPTION: This test suite illustrates the use of `jest.spyOn` to create a mock function that tracks calls to the `video.play` method. The `afterEach` hook ensures that the spy is restored after each test, maintaining test isolation.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#_snippet_31

LANGUAGE: javascript
CODE:
```
const video = require('./video');

afterEach(() => {
  // restore the spy created with spyOn
  jest.restoreAllMocks();
});

test('plays video', () => {
  const spy = jest.spyOn(video, 'play');
  const isPlaying = video.play();

  expect(spy).toHaveBeenCalled();
  expect(isPlaying).toBe(true);
});
```

----------------------------------------

TITLE: Testing Promises with Jest (.then())
DESCRIPTION: This Jest test demonstrates how to test asynchronous code that returns a Promise. It uses `jest.mock` to integrate a manual mock for the `request` module and asserts the resolved value of the Promise using the `.then()` method. `expect.assertions(1)` ensures that at least one assertion is executed within the asynchronous flow.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
jest.mock('../request');

import * as user from '../user';

// The assertion for a promise must be returned.
it('works with promises', () => {
  expect.assertions(1);
  return user.getUserName(4).then(data => expect(data).toBe('Mark'));
});
```

----------------------------------------

TITLE: Configuring Fake Timers in Jest Tests (JavaScript)
DESCRIPTION: This JavaScript example demonstrates how to use `jest.useFakeTimers()` with various configurations directly within `test` blocks. It shows how to enable automatic timer advancement, specify APIs not to fake (e.g., 'performance'), and how to restore real timers using `jest.useRealTimers()` for subsequent tests within the same file.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#_snippet_35

LANGUAGE: javascript
CODE:
```
test('advance the timers automatically', () => {
  jest.useFakeTimers({advanceTimers: true});
  // ...
});

test('do not advance the timers and do not fake `performance`', () => {
  jest.useFakeTimers({doNotFake: ['performance']});
  // ...
});

test('uninstall fake timers for the rest of tests in the file', () => {
  jest.useRealTimers();
  // ...
});
```

----------------------------------------

TITLE: Testing Users Class with Mocked Axios - JavaScript
DESCRIPTION: Tests the `Users.all()` method by mocking the `axios` module using `jest.mock()`. It sets up a `mockResolvedValue` for `axios.get` to return predefined user data, ensuring the test doesn't make actual API calls. Demonstrates asserting against the returned data.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import axios from 'axios';
import Users from './users';

jest.mock('axios');

test('should fetch users', () => {
  const users = [{name: 'Bob'}];
  const resp = {data: users};
  axios.get.mockResolvedValue(resp);

  // or you could use the following depending on your use case:
  // axios.get.mockImplementation(() => Promise.resolve(resp))

  return Users.all().then(data => expect(data).toEqual(users));
});
```

----------------------------------------

TITLE: Testing Async/Await Resolution and Rejection with Jest
DESCRIPTION: This snippet shows how to test asynchronous code using `async`/`await` syntax. The first test awaits the promise resolution and asserts the data. The second test uses a `try...catch` block to handle promise rejection, asserting the error message. `expect.assertions(1)` ensures at least one assertion is called.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TestingAsyncCode.md#_snippet_1

LANGUAGE: js
CODE:
```
test('the data is peanut butter', async () => {
  const data = await fetchData();
  expect(data).toBe('peanut butter');
});

test('the fetch fails with an error', async () => {
  expect.assertions(1);
  try {
    await fetchData();
  } catch (error) {
    expect(error).toMatch('error');
  }
});
```

----------------------------------------

TITLE: Testing Async Error Handling in Jest
DESCRIPTION: This snippet demonstrates two methods for testing error handling in asynchronous functions. One uses a Promise's `.catch` method, and the other employs a `try...catch` block with `async`/`await`. Both approaches ensure that the expected error object is caught and asserted, with `expect.assertions` verifying that the error handling path is executed.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
// Testing for async errors using Promise.catch.
it('tests error with promises', () => {
  expect.assertions(1);
  return user.getUserName(2).catch(error =>
    expect(error).toEqual({
      error: 'User with 2 not found.'
    })
  );
});

// Or using async/await.
it('tests error with async/await', async () => {
  expect.assertions(1);
  try {
    await user.getUserName(1);
  } catch (error) {
    expect(error).toEqual({
      error: 'User with 1 not found.'
    });
  }
});
```

----------------------------------------

TITLE: Running Parameterized Tests with `each.test` (Array, printf) - JavaScript
DESCRIPTION: Demonstrates using `each` with an array of arrays to run a test multiple times. It uses `printf` style formatting (`%d`) in the test name to inject values from the data set. The test asserts the sum of two numbers.
SOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
each([
  [1, 1, 2],
  [1, 2, 3],
  [2, 1, 3]
]).test('returns the result of adding %d to %d', (a, b, expected) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Configuring Jest `moduleNameMapper` for Aliasing in TypeScript
DESCRIPTION: This snippet demonstrates configuring Jest's `moduleNameMapper` in a TypeScript file to alias modules using regular expressions, leveraging the `Config` type for type safety. It shows examples for stubbing resources like images, mapping paths relative to `<rootDir>`, and using backreferences for dynamic substitutions, including mapping a single alias to multiple possible paths.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#_snippet_44

LANGUAGE: TypeScript
CODE:
```
import type {Config} from 'jest';

const config: Config = {
  moduleNameMapper: {
    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',
    '^[./a-zA-Z0-9$_-]+\.png$': '<rootDir>/RelativeImageStub.js',
    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',
    'assets/(.*)': [
      '<rootDir>/images/$1',
      '<rootDir>/photos/$1',
      '<rootDir>/recipes/$1'
    ]
  }
};

export default config;
```

----------------------------------------

TITLE: Matching Object Subset with Jest's toMatchObject in JavaScript
DESCRIPTION: This snippet demonstrates how to use `toMatchObject` to verify that a JavaScript object contains a specific subset of properties. It shows matching nested objects and using asymmetric matchers like `expect.stringMatching` for flexible property validation.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_35

LANGUAGE: js
CODE:
```
const houseForSale = {
  bath: true,
  bedrooms: 4,
  kitchen: {
    amenities: ['oven', 'stove', 'washer'],
    area: 20,
    wallColor: 'white',
  },
};
const desiredHouse = {
  bath: true,
  kitchen: {
    amenities: ['oven', 'stove', 'washer'],
    wallColor: expect.stringMatching(/white|yellow/),
  },
};

test('the house has my desired features', () => {
  expect(houseForSale).toMatchObject(desiredHouse);
});
```

----------------------------------------

TITLE: Configuring Jest moduleNameMapper for Aliasing in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Jest's `moduleNameMapper` in a TypeScript setup to alias modules using regular expressions. It shows examples of mapping various patterns to stubs or alternative paths, including the use of `<rootDir>` and regex capture groups, which is essential for managing non-code assets and complex module resolution in tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#_snippet_39

LANGUAGE: TypeScript
CODE:
```
import type {Config} from 'jest';

const config: Config = {
  moduleNameMapper: {
    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',
    '^[./a-zA-Z0-9$_-]+\.png$': '<rootDir>/RelativeImageStub.js',
    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',
    'assets/(.*)': [
      '<rootDir>/images/$1',
      '<rootDir>/photos/$1',
      '<rootDir>/recipes/$1'
    ]
  }
};

export default config;
```

----------------------------------------

TITLE: Testing Promise Resolution with Jest
DESCRIPTION: This snippet demonstrates how to test a promise that resolves with a specific value. Jest waits for the returned promise to resolve, and the `.then()` block asserts the expected data. If the promise rejects, the test will fail.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TestingAsyncCode.md#_snippet_0

LANGUAGE: js
CODE:
```
test('the data is peanut butter', () => {
  return fetchData().then(data => {
    expect(data).toBe('peanut butter');
  });
});
```

----------------------------------------

TITLE: Matching Object Subsets with .toMatchObject in Jest (JavaScript)
DESCRIPTION: This snippet demonstrates how to use Jest's `.toMatchObject` matcher to verify if a JavaScript object (`houseForSale`) contains a subset of properties defined in another object (`desiredHouse`). It shows matching a property against a value and another against a regular expression using `expect.stringMatching`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_35

LANGUAGE: JavaScript
CODE:
```
const houseForSale = {
  bath: true,
  bedrooms: 4,
  kitchen: {
    amenities: ['oven', 'stove', 'washer'],
    area: 20,
    wallColor: 'white',
  },
};
const desiredHouse = {
  bath: true,
  kitchen: {
    amenities: ['oven', 'stove', 'washer'],
    wallColor: expect.stringMatching(/white|yellow/),
  },
};

test('the house has my desired features', () => {
  expect(houseForSale).toMatchObject(desiredHouse);
});
```

----------------------------------------

TITLE: Using expect.arrayContaining() for Subset Checks in Jest
DESCRIPTION: Illustrates how Jest's `expect.arrayContaining()` matcher checks if a received array contains *at least* all elements present in the expected array. It passes even if the received array has additional elements.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ExpectAPI.md#_snippet_16

LANGUAGE: javascript
CODE:
```
describe('arrayContaining', () => {
  const expected = ['Alice', 'Bob'];
  it('matches even if received contains additional elements', () => {
    expect(['Alice', 'Bob', 'Eve']).toEqual(expect.arrayContaining(expected));
  });
  it('does not match if received does not contain expected elements', () => {
    expect(['Bob', 'Eve']).not.toEqual(expect.arrayContaining(expected));
  });
});
```

----------------------------------------

TITLE: Mocking a Specific Instance Method with Jest (JavaScript)
DESCRIPTION: This snippet shows how to mock or spy on a specific instance method of a class, such as 'playSoundFile' within 'SoundPlayer'. It uses 'jest.spyOn' on the prototype and 'mockImplementation' to provide a custom behavior, along with a test case to assert its invocation.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
import SoundPlayer from './sound-player';
import SoundPlayerConsumer from './sound-player-consumer';

const playSoundFileMock = jest
  .spyOn(SoundPlayer.prototype, 'playSoundFile')
  .mockImplementation(() => {
    console.log('mocked function');
  }); // comment this line if just want to "spy"

it('player consumer plays music', () => {
  const player = new SoundPlayerConsumer();
  player.playSomethingCool();
  expect(playSoundFileMock).toHaveBeenCalled();
});
```

----------------------------------------

TITLE: Testing Array Content with toContain in Jest JavaScript
DESCRIPTION: Use `.toContain` to check if a specific item exists within an array. This matcher performs a strict equality check (`===`) for primitives but can also check if a string is a substring of another string. The example demonstrates asserting the presence of 'lime' in an array returned by `getAllFlavors()`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ExpectAPI.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
test('the flavor list contains lime', () => {
  expect(getAllFlavors()).toContain('lime');
});
```

----------------------------------------

TITLE: Mocking Resolved Promise Values for Jest Mocks (mockResolvedValue)
DESCRIPTION: The `mockResolvedValue` method is a shorthand for `mockImplementation(() => Promise.resolve(value))`, making it convenient for mocking asynchronous functions. It configures a mock function to always return a Promise that resolves with the specified value. This is particularly useful for simulating successful asynchronous operations in tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#_snippet_20

LANGUAGE: javascript
CODE:
```
jest.fn().mockImplementation(() => Promise.resolve(value));
```

LANGUAGE: javascript
CODE:
```
test('async test', async () => {
  const asyncMock = jest.fn().mockResolvedValue(43);

  await asyncMock(); // 43
});
```

LANGUAGE: typescript
CODE:
```
import {jest, test} from '@jest/globals';

test('async test', async () => {
  const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);

  await asyncMock(); // 43
});
```

----------------------------------------

TITLE: Configuring ESLint for Jest Globals
DESCRIPTION: This JavaScript configuration for ESLint defines a global environment for Jest. By spreading `globals.jest` into `languageOptions.globals`, ESLint will recognize Jest's global APIs (like `describe`, `test`) and prevent `no-undef` errors in test files.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#_snippet_17

LANGUAGE: javascript
CODE:
```
import {defineConfig} from 'eslint/config';
import globals from 'globals';

export default defineConfig([
  {
    files: ['**/*.js'],
    languageOptions: {
      globals: {
        ...globals.jest,
      },
    },
    rules: {
      'no-unused-vars': 'warn',
      'no-undef': 'warn',
    },
  },
]);
```

----------------------------------------

TITLE: Handling Asynchronous Setup with beforeEach in Jest
DESCRIPTION: This example shows how `beforeEach` can handle asynchronous setup code by returning a Promise. This ensures that the setup operation, such as database initialization, completes successfully before any tests dependent on it begin execution.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
beforeEach(() => {
  return initializeCityDatabase();
});
```

----------------------------------------

TITLE: Testing Async Function with Async/Await and .resolves in Jest (JavaScript)
DESCRIPTION: This Jest test combines `async`/`await` with the `.resolves` matcher for a clean way to test fulfilled promises. It awaits the `expect` call with `.resolves`, directly asserting the resolved value.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
// async/await can also be used with `.resolves`.
it('works with async/await and resolves', async () => {
  expect.assertions(1);
  await expect(user.getUserName(5)).resolves.toBe('Paul');
});
```

----------------------------------------

TITLE: Testing forEach with Jest Mock Functions
DESCRIPTION: This test snippet demonstrates how to use Jest's `jest.fn()` to create a mock callback for the `forEach` function. It asserts that the mock function was called the correct number of times, with the expected arguments, and verifies the return values of the mock calls using the `.mock.calls` and `.mock.results` properties.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import {forEach} from './forEach';

const mockCallback = jest.fn(x => 42 + x);

test('forEach mock function', () => {
  forEach([0, 1], mockCallback);

  // The mock function was called twice
  expect(mockCallback.mock.calls).toHaveLength(2);

  // The first argument of the first call to the function was 0
  expect(mockCallback.mock.calls[0][0]).toBe(0);

  // The first argument of the second call to the function was 1
  expect(mockCallback.mock.calls[1][0]).toBe(1);

  // The return value of the first call to the function was 42
  expect(mockCallback.mock.results[0].value).toBe(42);
});
```

----------------------------------------

TITLE: Testing Asynchronous Rejection with .rejects in Jest
DESCRIPTION: This snippet shows how to use the `.rejects` matcher with `async`/`await` to directly assert that a promise rejects with a specific error. This simplifies testing error scenarios for asynchronous operations.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
test('the fetch fails with an error', async () => {
  await expect(fetchData()).rejects.toMatch('error');
});
```

----------------------------------------

TITLE: Inspecting Call Arguments with mock.calls (JavaScript)
DESCRIPTION: This snippet demonstrates the structure of the `mockFn.mock.calls` array, which stores the arguments passed to each invocation of a mock function. Each inner array represents a single call, containing the arguments in the order they were received.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
[
  ['arg1', 'arg2'],
  ['arg3', 'arg4']
];
```

----------------------------------------

TITLE: Creating a Snapshot Test for a React Component with Jest
DESCRIPTION: This snippet demonstrates how to write a basic snapshot test for a React component using Jest and `react-test-renderer`. It renders the `Link` component, converts the rendered output to a serializable JSON tree, and then uses `expect(tree).toMatchSnapshot()` to compare it against a previously saved snapshot or create a new one if none exists. This ensures the UI component's structure remains consistent.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import renderer from 'react-test-renderer';
import Link from '../Link';

it('renders correctly', () => {
  const tree = renderer
    .create(<Link page="http://www.facebook.com">Facebook</Link>)
    .toJSON();
  expect(tree).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Configuring Jest Test Script in package.json
DESCRIPTION: This JSON snippet adds a `test` script to the `scripts` section of `package.json`, allowing Jest tests to be run conveniently using `npm test` or `yarn test`. This standard configuration simplifies test execution.
SOURCE: https://github.com/jestjs/jest/blob/main/README.md#_snippet_4

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test": "jest"
  }
}
```

----------------------------------------

TITLE: Configuring Babel for TypeScript Transpilation
DESCRIPTION: Adds `@babel/preset-typescript` to the `presets` array in `babel.config.js`. This configuration instructs Babel to use the TypeScript preset when transpiling JavaScript and TypeScript files, enabling Jest to run tests written in TypeScript.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#_snippet_12

LANGUAGE: javascript
CODE:
```
module.exports = {
  presets: [
    ['@babel/preset-env', {targets: {node: 'current'}}],
    '@babel/preset-typescript',
  ],
};
```

----------------------------------------

TITLE: Mocking Axios for User API Tests (Jest JavaScript)
DESCRIPTION: This Jest test file demonstrates how to mock the `axios` module to prevent actual API calls during testing. It uses `jest.mock('axios')` and `axios.get.mockResolvedValue()` to provide a fake response, allowing the `Users.all()` method to be tested in isolation without network dependencies.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#_snippet_7

LANGUAGE: js
CODE:
```
import axios from 'axios';
import Users from './users';

jest.mock('axios');

test('should fetch users', () => {
  const users = [{name: 'Bob'}];
  const resp = {data: users};
  axios.get.mockResolvedValue(resp);

  // or you could use the following depending on your use case:
  // axios.get.mockImplementation(() => Promise.resolve(resp))

  return Users.all().then(data => expect(data).toEqual(users));
});
```

----------------------------------------

TITLE: Running Specific Tests by Pattern or Filename
DESCRIPTION: This command allows running only a subset of tests by providing a pattern or a direct file path. Jest will execute test files whose names or paths match the specified argument.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CLI.md#_snippet_1

LANGUAGE: bash
CODE:
```
jest my-test
```

LANGUAGE: bash
CODE:
```
jest path/to/my-test.js
```

----------------------------------------

TITLE: Testing Asynchronous Code with Async/Await in Jest
DESCRIPTION: This example shows how to use the `async` and `await` keywords to test asynchronous code. The `await` keyword pauses the test execution until the `fetchData()` promise resolves, allowing the assertion to be made on the resolved data.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
test('the data is peanut butter', async () => {
  const data = await fetchData();
  expect(data).toBe('peanut butter');
});
```

----------------------------------------

TITLE: Defining a Basic Synchronous Test with Jest
DESCRIPTION: This snippet shows the fundamental usage of the `test` method (or `it`) to define a synchronous test. It takes a test name and a function containing assertions. This is the simplest form of a Jest test, ensuring a specific condition is met.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
test('did not rain', () => {
  expect(inchesOfRain()).toBe(0);
});
```

----------------------------------------

TITLE: Repeating Setup with beforeEach and afterEach in Jest
DESCRIPTION: This snippet demonstrates how to use `beforeEach` and `afterEach` hooks in Jest to perform setup and teardown operations that need to run before and after *each* test. It initializes and clears a city database for multiple tests, ensuring a clean state for every test execution.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#_snippet_0

LANGUAGE: js
CODE:
```
beforeEach(() => {
  initializeCityDatabase();
});

afterEach(() => {
  clearCityDatabase();
});

test('city database has Vienna', () => {
  expect(isCity('Vienna')).toBeTruthy();
});

test('city database has San Juan', () => {
  expect(isCity('San Juan')).toBeTruthy();
});
```

----------------------------------------

TITLE: Running a Single Test with `test.only` in Jest
DESCRIPTION: This example demonstrates how to use `test.only` to execute only a specific test within a test file, ignoring all other tests. This is useful for debugging purposes to isolate a problematic test.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_30

LANGUAGE: JavaScript
CODE:
```
test.only('it is raining', () => {
  expect(inchesOfRain()).toBeGreaterThan(0);
});

test('it is not snowing', () => {
  expect(inchesOfSnow()).toBe(0);
});
```

----------------------------------------

TITLE: Isolating Failing Tests with Jest's test.only in JavaScript
DESCRIPTION: This snippet demonstrates how to use `test.only` in Jest to run only a specific test, which is useful for debugging tests that fail inconsistently in a larger suite. It ensures that only the marked test executes, helping to identify interference from other tests or shared state issues.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
test.only('this will be the only test that runs', () => {
  expect(true).toBe(false);
});

test('this test will not run', () => {
  expect('A').toBe('A');
});
```

----------------------------------------

TITLE: Configuring Jest to Use Setup Files After Environment in JavaScript
DESCRIPTION: This JavaScript configuration snippet illustrates how to include a `setupFilesAfterEnv` module in Jest's configuration. It specifies the path to a setup file (`<rootDir>/setup-jest.js`) that will run after the test framework is installed, allowing for global setup and teardown logic.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#_snippet_71

LANGUAGE: JavaScript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],
};

module.exports = config;
```

----------------------------------------

TITLE: Writing a basic Jest test for sum function
DESCRIPTION: This snippet demonstrates how to write a basic Jest test for the `sum` function. It imports the function and uses `test`, `expect`, and `toBe` to assert that `sum(1, 2)` correctly equals `3`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const sum = require('./sum');

test('adds 1 + 2 to equal 3', () => {
  expect(sum(1, 2)).toBe(3);
});
```

----------------------------------------

TITLE: Configuring ESLint Jest Environment
DESCRIPTION: Configures ESLint to recognize Jest global variables (e.g., `describe`, `it`) by setting the `jest` environment to `true` within an `overrides` block for test files. This prevents `no-undef` errors without requiring explicit imports of Jest globals.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#_snippet_17

LANGUAGE: json
CODE:
```
{
  "overrides": [
    {
      "files": ["tests/**/*"],
      "env": {
        "jest": true
      }
    }
  ]
}
```

----------------------------------------

TITLE: Mocking Rejected Promise Value with Jest `mockRejectedValue` (JavaScript)
DESCRIPTION: This method is a shorthand for `mockImplementation(() => Promise.reject(value))`, useful for mocking asynchronous functions that are expected to always reject with a specific error. It ensures the mock function always returns a rejected promise.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#_snippet_20

LANGUAGE: js
CODE:
```
jest.fn().mockImplementation(() => Promise.reject(value));
```

LANGUAGE: js
CODE:
```
test('async test', async () => {
  const asyncMock = jest
    .fn()
    .mockRejectedValue(new Error('Async error message'));

  await asyncMock(); // throws 'Async error message'
});
```

----------------------------------------

TITLE: Testing Object Equality with Jest toEqual (JavaScript)
DESCRIPTION: This example illustrates how to use Jest's `toEqual` matcher for deep comparison of objects and arrays. `toEqual` recursively checks every field, allowing for comparison of complex data structures. It's crucial for verifying the content of objects rather than just their reference.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#_snippet_1

LANGUAGE: javascript
CODE:
```
test('object assignment', () => {
  const data = {one: 1};
  data['two'] = 2;
  expect(data).toEqual({one: 1, two: 2});
});
```

----------------------------------------

TITLE: Testing setTimeout Calls with Jest Fake Timers in JavaScript
DESCRIPTION: This Jest test suite demonstrates how to use `jest.useFakeTimers()` to mock `setTimeout`. It verifies that `setTimeout` is called exactly once with the correct delay (1000ms) without actually waiting for real time to elapse. `jest.spyOn` is used to track `setTimeout` calls.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TimerMocks.md#_snippet_1

LANGUAGE: javascript
CODE:
```
jest.useFakeTimers();
jest.spyOn(global, 'setTimeout');

test('waits 1 second before ending the game', () => {
  const timerGame = require('../timerGame');
  timerGame();

  expect(setTimeout).toHaveBeenCalledTimes(1);
  expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);
});
```

----------------------------------------

TITLE: Testing Array Object Content with toContainEqual in Jest JavaScript
DESCRIPTION: Use `.toContainEqual` to check if an array contains an item with a specific structure and values. Unlike `.toContain`, this matcher performs a recursive equality check of all fields, suitable for comparing objects within arrays. The example asserts that an object matching `{delicious: true, sour: false}` exists in the array returned by `myBeverages()`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ExpectAPI.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
describe('my beverage', () => {
  test('is delicious and not sour', () => {
    const myBeverage = {delicious: true, sour: false};
    expect(myBeverages()).toContainEqual(myBeverage);
  });
});
```

----------------------------------------

TITLE: Defining Synchronous Tests with test() in Jest
DESCRIPTION: This example demonstrates the basic usage of the `test` method (also aliased as `it`) for defining a synchronous test. It takes a descriptive name and a function containing the assertions, optionally accepting a timeout parameter to limit execution time.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
test('did not rain', () => {
  expect(inchesOfRain()).toBe(0);
});
```

----------------------------------------

TITLE: Configuring package.json for Jest and React Testing
DESCRIPTION: This JSON snippet illustrates the required 'dependencies' and 'devDependencies' for a React project using Jest, along with a 'test' script that executes Jest. It ensures all necessary packages for React development and testing are properly listed and configured.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "react": "<current-version>",
    "react-dom": "<current-version>"
  },
  "devDependencies": {
    "@babel/preset-env": "<current-version>",
    "@babel/preset-react": "<current-version>",
    "babel-jest": "<current-version>",
    "jest": "<current-version>",
    "react-test-renderer": "<current-version>"
  },
  "scripts": {
    "test": "jest"
  }
}
```

----------------------------------------

TITLE: Importing Jest Globals in TypeScript Tests
DESCRIPTION: Demonstrates how to explicitly import Jest global APIs (`describe`, `expect`, `test`) from `@jest/globals` in a TypeScript test file. This approach ensures that ESLint recognizes these globals and provides type definitions for them.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#_snippet_15

LANGUAGE: typescript
CODE:
```
import {describe, expect, test} from '@jest/globals';
import {sum} from './sum';

describe('sum module', () => {
  test('adds 1 + 2 to equal 3', () => {
    expect(sum(1, 2)).toBe(3);
  });
});
```

----------------------------------------

TITLE: Creating Mock Functions with `jest.fn` in JavaScript
DESCRIPTION: The `jest.fn()` function returns a new, unused mock function that can be used to track calls, arguments, and return values. It can optionally take a mock implementation function, allowing you to define custom behavior for the mock.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#_snippet_24

LANGUAGE: JavaScript
CODE:
```
const mockFn = jest.fn();
mockFn();
expect(mockFn).toHaveBeenCalled();
```

LANGUAGE: JavaScript
CODE:
```
const returnsTrue = jest.fn(() => true);
console.log(returnsTrue()); // true;
```

----------------------------------------

TITLE: Testing Async Errors with .rejects in Jest (Async/Await)
DESCRIPTION: This test shows how to use `expect().rejects` with `async/await` syntax to assert that an asynchronous operation throws an error. The `await` keyword ensures the promise resolves or rejects before the test continues. `expect.assertions(1)` is included to confirm that a single assertion is executed.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#_snippet_10

LANGUAGE: javascript
CODE:
```
it('tests error with async/await and rejects', async () => {
  expect.assertions(1);
  await expect(user.getUserName(3)).rejects.toEqual({
    error: 'User with 3 not found.',
  });
});
```

----------------------------------------

TITLE: Managing Resource Setup and Teardown with Jest Hooks in JavaScript
DESCRIPTION: This example illustrates the execution order of `beforeEach` and `afterEach` hooks in Jest, including nested `describe` blocks. `beforeEach` hooks run in declaration order, while `afterEach` hooks of the enclosing scope are called first, then in declaration order for the current scope. This pattern is useful for managing dependent resources like database connections.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
beforeEach(() => console.log('connection setup'));
beforeEach(() => console.log('database setup'));

afterEach(() => console.log('database teardown'));
afterEach(() => console.log('connection teardown'));

test('test 1', () => console.log('test 1'));

describe('extra', () => {
  beforeEach(() => console.log('extra database setup'));
  afterEach(() => console.log('extra database teardown'));

  test('test 2', () => console.log('test 2'));
});
```

----------------------------------------

TITLE: Simulating Network Request (JavaScript)
DESCRIPTION: This module simulates an HTTP GET request to fetch user data from an API. It returns a Promise that resolves with the fetched data. This module is intended to be mocked in tests to avoid actual network calls.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const http = require('http');

export default function request(url) {
  return new Promise(resolve => {
    // This is an example of an http request, for example to fetch
    // user data from an API.
    // This module is being mocked in __mocks__/request.js
    http.get({path: url}, response => {
      let data = '';
      response.on('data', _data => (data += _data));
      response.on('end', () => resolve(data));
    });
  });
}
```

----------------------------------------

TITLE: Correcting Module Import with jest.requireActual in Jest
DESCRIPTION: This snippet demonstrates the correct way to import `Response` when `node-fetch` is mocked, using `jest.requireActual`. This ensures that while `fetch` remains mocked, the `Response` class is imported with its original implementation, resolving the `TypeError` encountered in the initial test. This is presented as the 'AFTER' state for correction.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/BypassingModuleMocks.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// AFTER
jest.mock('node-fetch');
import fetch from 'node-fetch';
const {Response} = jest.requireActual('node-fetch');
```

----------------------------------------

TITLE: Creating Mock Functions with jest.fn
DESCRIPTION: Returns a new, unused mock function. It can optionally take a mock implementation, allowing custom behavior to be defined for the mocked function.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#_snippet_26

LANGUAGE: js
CODE:
```
const mockFn = jest.fn();
mockFn();
expect(mockFn).toHaveBeenCalled();

// With a mock implementation:
const returnsTrue = jest.fn(() => true);
console.log(returnsTrue()); // true;
```

----------------------------------------

TITLE: Configuring Jest Test Script in package.json
DESCRIPTION: Adds a `test` script to the `scripts` section of `package.json`. This allows running Jest tests by simply executing `npm test` or `yarn test` from the command line, simplifying the test execution process for developers.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test": "jest"
  }
}
```

----------------------------------------

TITLE: Spying on Object Methods with jest.spyOn in JavaScript
DESCRIPTION: jest.spyOn() creates a mock function that wraps an existing method on an object, allowing you to track calls to it while still executing the original method by default. This is ideal for verifying interactions with dependencies without completely replacing their functionality, and can be restored with jest.restoreAllMocks().
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#_snippet_28

LANGUAGE: JavaScript
CODE:
```
const video = {
  play() {
    return true;
  },
};

module.exports = video;
```

LANGUAGE: JavaScript
CODE:
```
const video = require('./video');

afterEach(() => {
  // restore the spy created with spyOn
  jest.restoreAllMocks();
});

test('plays video', () => {
  const spy = jest.spyOn(video, 'play');
  const isPlaying = video.play();

  expect(spy).toHaveBeenCalled();
  expect(isPlaying).toBe(true);
});
```

----------------------------------------

TITLE: Handling Asynchronous Setup with beforeEach Promise in Jest
DESCRIPTION: This example shows how `beforeEach` can handle asynchronous setup by returning a Promise. If `initializeCityDatabase()` returns a Promise, Jest waits for it to resolve before proceeding with the tests, ensuring the database is fully initialized.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#_snippet_1

LANGUAGE: js
CODE:
```
beforeEach(() => {
  return initializeCityDatabase();
});
```

----------------------------------------

TITLE: Configuring Jest Module Name Mapper for Webpack Aliases - JavaScript
DESCRIPTION: This snippet demonstrates how to use Jest's `moduleNameMapper` to replicate Webpack's `alias` functionality. It allows mapping specific module names (e.g., 'react' or 'config') to custom paths, enabling Jest to correctly resolve aliased imports during testing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  modulePaths: ['/shared/vendor/modules'],
  moduleFileExtensions: ['js', 'jsx'],
  moduleDirectories: ['node_modules', 'bower_components', 'shared'],

  moduleNameMapper: {
    '\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',
    '\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',

    '^react(.*)$': '<rootDir>/vendor/react-master$1',
    '^config$': '<rootDir>/configs/app-config.js'
  }
};
```

----------------------------------------

TITLE: Testing Function Exceptions with Jest toThrow (JavaScript)
DESCRIPTION: This example shows how to use the `toThrow` matcher to verify that a function throws an error when called. It can assert that any error is thrown, a specific error constructor, or an error message matching a string or regular expression. The function under test must be wrapped in another function for `toThrow` to work correctly.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#_snippet_9

LANGUAGE: javascript
CODE:
```
function compileAndroidCode() {
  throw new Error('you are using the wrong JDK!');
}

test('compiling android goes as expected', () => {
  expect(() => compileAndroidCode()).toThrow();
  expect(() => compileAndroidCode()).toThrow(Error);

  // You can also use a string that must be contained in the error message or a regexp
  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');
  expect(() => compileAndroidCode()).toThrow(/JDK/);

  // Or you can match an exact error message using a regexp like below
  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails
  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass
});
```

----------------------------------------

TITLE: Testing Specific Error Messages and Classes with Jest's toThrow
DESCRIPTION: Illustrates various ways to use Jest's `.toThrow()` matcher to assert specific error conditions. It shows how to match error messages using regular expressions or substrings, test for exact error messages, and verify the type of the thrown error object using an error class.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_40

LANGUAGE: javascript
CODE:
```
test('throws on octopus', () => {
  function drinkOctopus() {
    drinkFlavor('octopus');
  }

  // Test that the error message says "yuck" somewhere: these are equivalent
  expect(drinkOctopus).toThrow(/yuck/);
  expect(drinkOctopus).toThrow('yuck');

  // Test the exact error message
  expect(drinkOctopus).toThrow(/^yuck, octopus flavor$/);
  expect(drinkOctopus).toThrow(new Error('yuck, octopus flavor'));

  // Test that we get a DisgustingFlavorError
  expect(drinkOctopus).toThrow(DisgustingFlavorError);
});
```

----------------------------------------

TITLE: Creating Mock Functions with jest.fn in JavaScript
DESCRIPTION: jest.fn() creates a new, unused mock function, which can be used to track calls, arguments, and return values. It can optionally take a mock implementation, allowing for custom behavior during testing without affecting the original function.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#_snippet_26

LANGUAGE: JavaScript
CODE:
```
const mockFn = jest.fn();
mockFn();
expect(mockFn).toHaveBeenCalled();
```

LANGUAGE: JavaScript
CODE:
```
// With a mock implementation:
const returnsTrue = jest.fn(() => true);
console.log(returnsTrue()); // true;
```

----------------------------------------

TITLE: Creating Mock Functions with Jest
DESCRIPTION: This function returns a new, unused mock function. It can optionally take an `implementation` function, which defines the behavior of the mock when it's called. This is fundamental for testing interactions and controlling dependencies.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#_snippet_27

LANGUAGE: js
CODE:
```
const mockFn = jest.fn();
mockFn();
expect(mockFn).toHaveBeenCalled();
```

LANGUAGE: js
CODE:
```
// With a mock implementation:
const returnsTrue = jest.fn(() => true);
console.log(returnsTrue()); // true;
```

----------------------------------------

TITLE: Adding Jest test script to package.json
DESCRIPTION: Configures the `test` script in your `package.json` file to run Jest. This allows you to execute your tests conveniently using `npm test` or `yarn test` from your terminal.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test": "jest"
  }
}
```

----------------------------------------

TITLE: Repeating Setup with beforeEach and afterEach in Jest
DESCRIPTION: This snippet demonstrates how to use beforeEach and afterEach hooks in Jest to perform setup and teardown operations that need to run before and after each test. It initializes and clears a city database for two tests, ensuring a clean state for every test run.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
beforeEach(() => {
  initializeCityDatabase();
});

afterEach(() => {
  clearCityDatabase();
});

test('city database has Vienna', () => {
  expect(isCity('Vienna')).toBeTruthy();
});

test('city database has San Juan', () => {
  expect(isCity('San Juan')).toBeTruthy();
});
```

----------------------------------------

TITLE: Cleaning Up After Each Test with Jest afterEach (JavaScript)
DESCRIPTION: This example illustrates using Jest's `afterEach` hook to clean up temporary state after every test in a file. It demonstrates cleaning a global database after each individual test, which is useful for ensuring test isolation. The hook supports asynchronous cleanup by waiting for promises to resolve.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

function cleanUpDatabase(db) {
  db.cleanUp();
}

afterEach(() => {
  cleanUpDatabase(globalDatabase);
});

test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});

test('can insert a thing', () => {
  return globalDatabase.insert('thing', makeThing(), response => {
    expect(response.success).toBeTruthy();
  });
});
```

----------------------------------------

TITLE: Cleaning Up State After Each Test with Jest afterEach (JavaScript)
DESCRIPTION: This snippet illustrates the use of `afterEach` in Jest to execute a cleanup function after every individual test in a file. It's useful for resetting temporary state created by each test, such as cleaning a database after each test run to ensure isolation. The function supports asynchronous operations and custom timeouts.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

function cleanUpDatabase(db) {
  db.cleanUp();
}

afterEach(() => {
  cleanUpDatabase(globalDatabase);
});

test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});

test('can insert a thing', () => {
  return globalDatabase.insert('thing', makeThing(), response => {
    expect(response.success).toBeTruthy();
  });
});
```

----------------------------------------

TITLE: Checking Array or String Content with Jest's .toContain()
DESCRIPTION: Explains how to use `.toContain()` to check if an item exists in an array using strict equality (`===`), or if a string is a substring of another. This matcher is versatile and also compatible with other iterables like sets, node lists, and HTML collections.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_31

LANGUAGE: JavaScript
CODE:
```
test('the flavor list contains lime', () => {
  expect(getAllFlavors()).toContain('lime');
});
```

----------------------------------------

TITLE: Debugging Jest with Node.js Inspector (Bash)
DESCRIPTION: This command runs Jest tests in a Node.js process with the inspector enabled, pausing execution until a debugger connects. The `--runInBand` option ensures tests run in a single process, simplifying debugging by preventing Jest from spawning multiple processes.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Troubleshooting.md#_snippet_0

LANGUAGE: bash
CODE:
```
node --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]
or on Windows
node --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]
```

----------------------------------------

TITLE: Testing a Value with `expect` and `toBe` in Jest
DESCRIPTION: This snippet demonstrates the basic usage of `expect` with the `toBe` matcher in Jest to assert that the return value of `bestLaCroixFlavor()` is exactly 'grapefruit'. It shows how to test a specific value produced by a function.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_0

LANGUAGE: js
CODE:
```
test('the best flavor is grapefruit', () => {
  expect(bestLaCroixFlavor()).toBe('grapefruit');
});
```

----------------------------------------

TITLE: Repeating Setup with beforeEach and afterEach in Jest
DESCRIPTION: This snippet demonstrates how to use `beforeEach` and `afterEach` hooks to perform setup and teardown operations that need to run before and after every test. It's useful for scenarios like initializing and clearing a database for each test to ensure isolation.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
beforeEach(() => {
  initializeCityDatabase();
});

afterEach(() => {
  clearCityDatabase();
});

test('city database has Vienna', () => {
  expect(isCity('Vienna')).toBeTruthy();
});

test('city database has San Juan', () => {
  expect(isCity('San Juan')).toBeTruthy();
});
```

----------------------------------------

TITLE: Creating a Snapshot Test for a React Component (TSX)
DESCRIPTION: This snippet demonstrates how to write a basic snapshot test for a React component using Jest and `react-test-renderer`. It renders the `Link` component, converts the rendered output to a serializable JSON tree, and then uses `expect(tree).toMatchSnapshot()` to compare it against a previously saved snapshot or create a new one if it's the first run. This ensures the UI structure remains consistent.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import renderer from 'react-test-renderer';
import Link from '../Link';

it('renders correctly', () => {
  const tree = renderer
    .create(<Link page="http://www.facebook.com">Facebook</Link>)
    .toJSON();
  expect(tree).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Testing Promise Rejection with .catch and Assertions in Jest
DESCRIPTION: This snippet shows how to test a Promise that is expected to reject using the `.catch()` method. `expect.assertions(1)` is crucial here to ensure that the assertion inside the `.catch` block is actually executed, preventing the test from passing silently if the Promise resolves instead of rejecting.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TestingAsyncCode.md#_snippet_5

LANGUAGE: js
CODE:
```
test('the fetch fails with an error', () => {
  expect.assertions(1);
  return fetchData().catch(error => expect(error).toMatch('error'));
});
```

----------------------------------------

TITLE: Configuring Jest to Use Setup Files After Environment in JavaScript
DESCRIPTION: This JavaScript configuration snippet shows how to include a setup file, `setup-jest.js`, using the `setupFilesAfterEnv` option. This ensures the specified script runs after the test framework is installed but before test code execution, allowing for global setup like extending matchers.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#_snippet_60

LANGUAGE: JavaScript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],
};

module.exports = config;
```

----------------------------------------

TITLE: Implementing Mock Function Behavior with `mockImplementation` (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `mockImplementation` to define a custom function that will be executed when the mock is called. It shows how to initially set an implementation and then change it dynamically.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const mockFn = jest.fn(scalar => 42 + scalar);

mockFn(0); // 42
mockFn(1); // 43

mockFn.mockImplementation(scalar => 36 + scalar);

mockFn(2); // 38
mockFn(3); // 39
```

----------------------------------------

TITLE: Testing Async Function Resolution with Jest
DESCRIPTION: This snippet shows how to test asynchronous code using `async`/`await` syntax. The `await` keyword pauses execution until the `fetchData()` Promise resolves, allowing the `expect` assertion to be performed on the resolved data. The test passes if the assertion is successful.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TestingAsyncCode.md#_snippet_1

LANGUAGE: js
CODE:
```
test('the data is peanut butter', async () => {
  const data = await fetchData();
  expect(data).toBe('peanut butter');
});
```

----------------------------------------

TITLE: Testing Floating Point Numbers with Jest's toBeCloseTo (JavaScript)
DESCRIPTION: This example highlights the importance of using `toBeCloseTo` for comparing floating-point numbers in Jest. Due to potential rounding errors in floating-point arithmetic, direct equality checks with `toBe` or `toEqual` can fail, whereas `toBeCloseTo` accounts for small precision differences.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#_snippet_5

LANGUAGE: js
CODE:
```
test('adding floating point numbers', () => {
  const value = 0.1 + 0.2;
  //expect(value).toBe(0.3);           This won't work because of rounding error
  expect(value).toBeCloseTo(0.3); // This works.
});
```

----------------------------------------

TITLE: Restricting jest.spyOn Scope with 'using' Keyword and Code Blocks - JavaScript
DESCRIPTION: This example illustrates how to use a code block with the `using` keyword to limit the scope of a `jest.spyOn` mock. The spy is automatically restored upon exiting the block, allowing the test to continue with the original method behavior.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#_snippet_34

LANGUAGE: javascript
CODE:
```
test('testing something', () => {
  {
    using spy = jest.spyOn(console.warn);
    setupStepThatWillLogAWarning();
  }
  // here, console.warn is already restored to the original value
  // your test can now continue normally
});
```

----------------------------------------

TITLE: Testing Function Exceptions with Jest's toThrow (JavaScript)
DESCRIPTION: This snippet demonstrates how to use Jest's `toThrow` matcher to assert that a function call throws an error. It shows various ways to use `toThrow`: checking for any error, a specific error class, a substring in the error message, or a regular expression pattern, including exact message matching. The function under test must be wrapped in another function for `toThrow` to work correctly.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#_snippet_8

LANGUAGE: js
CODE:
```
function compileAndroidCode() {
  throw new Error('you are using the wrong JDK!');
}

test('compiling android goes as expected', () => {
  expect(() => compileAndroidCode()).toThrow();
  expect(() => compileAndroidCode()).toThrow(Error);

  // You can also use a string that must be contained in the error message or a regexp
  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');
  expect(() => compileAndroidCode()).toThrow(/JDK/);

  // Or you can match an exact error message using a regexp like below
  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails
  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass
});
```

----------------------------------------

TITLE: Asserting Mock Function Arguments: Jest .toHaveBeenCalledWith()
DESCRIPTION: This matcher ensures that a mock function was called with specific arguments. The arguments are compared using the same deep equality algorithm as `.toEqual()`. The example demonstrates verifying that a function `f` was called with a specific `beverage` object.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
test('registration applies correctly to orange La Croix', () => {
  const beverage = new LaCroix('orange');
  register(beverage);
  const f = jest.fn();
  applyToAll(f);
  expect(f).toHaveBeenCalledWith(beverage);
});
```

----------------------------------------

TITLE: Generating Jest Configuration File
DESCRIPTION: This command initiates an interactive process to generate a basic Jest configuration file (`jest.config.js`). Jest will ask questions about your project to create a suitable default configuration.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#_snippet_6

LANGUAGE: bash
CODE:
```
jest --init
```

----------------------------------------

TITLE: Asserting Mock Function Arguments with Jest's .toHaveBeenCalledWith()
DESCRIPTION: This snippet demonstrates how to use Jest's `.toHaveBeenCalledWith(arg1, arg2, ...)` matcher to ensure a mock function was called with specific arguments. The arguments are compared using the same algorithm as `.toEqual()`. The example verifies that a function `f` is called with a `beverage` object.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
test('registration applies correctly to orange La Croix', () => {
  const beverage = new LaCroix('orange');
  register(beverage);
  const f = jest.fn();
  applyToAll(f);
  expect(f).toHaveBeenCalledWith(beverage);
});
```

----------------------------------------

TITLE: Running a Single Test Suite with describe.only in Jest
DESCRIPTION: This snippet demonstrates `describe.only` (or its alias `fdescribe`), which is used to execute only a specific test suite while skipping all other `describe` blocks in the test file. This is particularly useful for debugging a single suite without running the entire test suite.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
describe.only('my beverage', () => {
  test('is delicious', () => {
    expect(myBeverage.delicious).toBeTruthy();
  });

  test('is not sour', () => {
    expect(myBeverage.sour).toBeFalsy();
  });
});

describe('my other beverage', () => {
  // ... will be skipped
});
```

----------------------------------------

TITLE: Skipping Tests with `test.skip` in Jest
DESCRIPTION: This example demonstrates how to use `test.skip` to temporarily prevent a test from running. This is useful for tests that are known to be broken or are under development, allowing them to remain in the codebase without failing the test suite.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_32

LANGUAGE: javascript
CODE:
```
test('it is raining', () => {
  expect(inchesOfRain()).toBeGreaterThan(0);
});

test.skip('it is not snowing', () => {
  expect(inchesOfSnow()).toBe(0);
});
```

----------------------------------------

TITLE: Matching Objects with Specific Properties using Jest
DESCRIPTION: Demonstrates `expect.objectContaining(object)` to assert that a received object contains a subset of expected properties. It's useful for verifying partial object structures, especially when combined with other matchers like `expect.any` for dynamic property types, and can be used with `toHaveBeenCalledWith`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_49

LANGUAGE: JavaScript
CODE:
```
test('onPress gets called with the right thing', () => {
  const onPress = jest.fn();
  simulatePresses(onPress);
  expect(onPress).toHaveBeenCalledWith(
    expect.objectContaining({
      x: expect.any(Number),
      y: expect.any(Number),
    }),
  );
});
```

----------------------------------------

TITLE: Grouping Related Tests with describe in Jest (JavaScript)
DESCRIPTION: This example illustrates the use of `describe` to group related tests for better organization and readability. It defines a `myBeverage` object and then groups two tests, 'is delicious' and 'is not sour', under the 'my beverage' description block. This helps in structuring test files logically.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const myBeverage = {
  delicious: true,
  sour: false,
};

describe('my beverage', () => {
  test('is delicious', () => {
    expect(myBeverage.delicious).toBeTruthy();
  });

  test('is not sour', () => {
    expect(myBeverage.sour).toBeFalsy();
  });
});
```

----------------------------------------

TITLE: Asserting Mock Function Calls with Jest's .toHaveBeenCalled()
DESCRIPTION: This matcher ensures that a mock function was invoked at least once. It's useful for verifying that a callback or dependency function was executed as expected within a larger function. The example demonstrates checking if 'drink' is called for 'lemon' flavor but not for 'octopus' flavor.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
function drinkAll(callback, flavour) {
  if (flavour !== 'octopus') {
    callback(flavour);
  }
}

describe('drinkAll', () => {
  test('drinks something lemon-flavoured', () => {
    const drink = jest.fn();
    drinkAll(drink, 'lemon');
    expect(drink).toHaveBeenCalled();
  });

  test('does not drink something octopus-flavoured', () => {
    const drink = jest.fn();
    drinkAll(drink, 'octopus');
    expect(drink).not.toHaveBeenCalled();
  });
});
```

----------------------------------------

TITLE: Deep Equality Comparison with Jest's .toEqual()
DESCRIPTION: This snippet illustrates Jest's `.toEqual()` matcher, which performs a deep comparison of all properties of object instances. It uses `Object.is` for primitive values and is crucial for comparing objects by value rather than reference, contrasting with `.toBe()`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_33

LANGUAGE: JavaScript
CODE:
```
const can1 = {
  flavor: 'grapefruit',
  ounces: 12,
};
const can2 = {
  flavor: 'grapefruit',
  ounces: 12,
};

describe('the La Croix cans on my desk', () => {
  test('have all the same properties', () => {
    expect(can1).toEqual(can2);
  });
  test('are not the exact same can', () => {
    expect(can1).not.toBe(can2);
  });
});
```

----------------------------------------

TITLE: Running Data-Driven Tests with Jest's test.each (Tagged Template Literal)
DESCRIPTION: This snippet demonstrates the `test.each` API using a tagged template literal for defining test data. The first row specifies column headings, and subsequent rows use `${value}` for data injection. The test title dynamically incorporates data using `$variable` syntax.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_26

LANGUAGE: JavaScript
CODE:
```
test.each`
  a    | b    | expected
  ${1} | ${1} | ${2}
  ${1} | ${2} | ${3}
  ${2} | ${1} | ${3}
`('returns $expected when $a is added to $b', ({a, b, expected}) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Mocking ES6 Modules with Default and Named Exports
DESCRIPTION: This snippet demonstrates mocking an ES6 module that uses both default and named exports. It's essential to include `__esModule: true` in the factory's return object to correctly handle default exports when importing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#_snippet_16

LANGUAGE: javascript
CODE:
```
import moduleName, {foo} from '../moduleName';

jest.mock('../moduleName', () => {
  return {
    __esModule: true,
    default: jest.fn(() => 42),
    foo: jest.fn(() => 43),
  };
});

moduleName(); // Will return 42
foo(); // Will return 43
```

----------------------------------------

TITLE: Running Specific Test Suites with `describe.only` in Jest
DESCRIPTION: This snippet demonstrates the use of `describe.only` (or its alias `fdescribe`) to execute only a specific test suite while skipping all other `describe` blocks in the file. This is useful for focusing on a subset of tests during development.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_9

LANGUAGE: js
CODE:
```
describe.only('my beverage', () => {
  test('is delicious', () => {
    expect(myBeverage.delicious).toBeTruthy();
  });

  test('is not sour', () => {
    expect(myBeverage.sour).toBeFalsy();
  });
});

describe('my other beverage', () => {
  // ... will be skipped
});
```

----------------------------------------

TITLE: Verifying Mock Function Call Count with Jest's .toHaveBeenCalledTimes()
DESCRIPTION: This matcher asserts that a mock function was called an exact number of times. It's ideal for scenarios where a function is expected to be invoked multiple times, such as iterating over a collection. The example checks if 'drink' is called twice for an array of two flavors.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
test('drinkEach drinks each drink', () => {
  const drink = jest.fn();
  drinkEach(drink, ['lemon', 'octopus']);
  expect(drink).toHaveBeenCalledTimes(2);
});
```

----------------------------------------

TITLE: Testing setTimeout with Jest Fake Timers (JavaScript)
DESCRIPTION: This test suite demonstrates how to use `jest.useFakeTimers()` to replace native timers and `jest.spyOn(global, 'setTimeout')` to assert that `setTimeout` was called with the expected arguments. It verifies that the `timerGame` function correctly schedules a 1-second delay.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TimerMocks.md#_snippet_1

LANGUAGE: javascript
CODE:
```
jest.useFakeTimers();
jest.spyOn(global, 'setTimeout');

test('waits 1 second before ending the game', () => {
  const timerGame = require('../timerGame');
  timerGame();

  expect(setTimeout).toHaveBeenCalledTimes(1);
  expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);
});
```

----------------------------------------

TITLE: Cleaning Up After All Tests with Jest afterAll (JavaScript)
DESCRIPTION: This example demonstrates using `afterAll` to perform a cleanup operation, such as cleaning a global database, once after all tests in the file have completed. It shows how `afterAll` can handle asynchronous operations (though the example is synchronous) and ensures shared resources are properly reset. The function accepts an optional `timeout` parameter.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

function cleanUpDatabase(db) {
  db.cleanUp();
}

afterAll(() => {
  cleanUpDatabase(globalDatabase);
});

test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});

test('can insert a thing', () => {
  return globalDatabase.insert('thing', makeThing(), response => {
    expect(response.success).toBeTruthy();
  });
});
```

----------------------------------------

TITLE: Mocking Axios for User API Test (Jest, JavaScript)
DESCRIPTION: This test demonstrates how to mock the `axios` module using `jest.mock('axios')` to prevent actual API calls. It uses `mockResolvedValue` on `axios.get` to simulate a successful response, allowing the `Users.all()` method to be tested with predefined mock data without network interaction.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import axios from 'axios';
import Users from './users';

jest.mock('axios');

test('should fetch users', () => {
  const users = [{name: 'Bob'}];
  const resp = {data: users};
  axios.get.mockResolvedValue(resp);

  // or you could use the following depending on your use case:
  // axios.get.mockImplementation(() => Promise.resolve(resp))

  return Users.all().then(data => expect(data).toEqual(users));
});
```

----------------------------------------

TITLE: Configuring Babel for TypeScript in Jest
DESCRIPTION: Adds `@babel/preset-typescript` to the list of Babel presets in `babel.config.js`. This configuration instructs Babel to use the TypeScript preset when transpiling files, enabling Jest to run tests written in TypeScript via Babel.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#_snippet_12

LANGUAGE: javascript
CODE:
```
module.exports = {
  presets: [
    ['@babel/preset-env', {targets: {node: 'current'}}],
    '@babel/preset-typescript',
  ],
};
```

----------------------------------------

TITLE: Using Jest Globals in TypeScript Tests
DESCRIPTION: Demonstrates how to import and use Jest's global APIs (`describe`, `expect`, `test`) from `@jest/globals` in a TypeScript test file. This approach provides explicit type definitions for Jest functions.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#_snippet_15

LANGUAGE: typescript
CODE:
```
import {describe, expect, test} from '@jest/globals';
import {sum} from './sum';

describe('sum module', () => {
  test('adds 1 + 2 to equal 3', () => {
    expect(sum(1, 2)).toBe(3);
  });
});
```

----------------------------------------

TITLE: Configuring Jest `transform` for JS Projects
DESCRIPTION: This JavaScript example demonstrates how to explicitly define the `transform` option in a Jest configuration file. It includes the default `babel-jest` for JavaScript/TypeScript files and adds a custom `some-css-transformer` for CSS files, ensuring all necessary file types are preprocessed correctly.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#_snippet_97

LANGUAGE: javascript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  transform: {
    '\\.[jt]sx?$': 'babel-jest',
    '\\.css$': 'some-css-transformer',
  },
};

module.exports = config;
```

----------------------------------------

TITLE: Configuring Jest Module Name Mapper (Aliases) - JavaScript
DESCRIPTION: This `jest.config.js` configuration extends `moduleNameMapper` to handle Webpack's `alias` functionality. It allows Jest to resolve custom aliases like `^react(.*)$` to a specific vendor directory and `^config$` to an application configuration file, ensuring consistent module resolution during testing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  modulePaths: ['/shared/vendor/modules'],
  moduleFileExtensions: ['js', 'jsx'],
  moduleDirectories: ['node_modules', 'bower_components', 'shared'],

  moduleNameMapper: {
    '\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',
    '\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',

    '^react(.*)$': '<rootDir>/vendor/react-master$1',
    '^config$': '<rootDir>/configs/app-config.js'
  }
};
```

----------------------------------------

TITLE: Running Only Changed Tests in Jest CLI
DESCRIPTION: Attempts to identify and run only tests associated with files that have changed in the current Git/Hg repository. This feature requires a static dependency graph to function correctly.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#_snippet_15

LANGUAGE: bash
CODE:
```
jest --onlyChanged
```

----------------------------------------

TITLE: Installing React Testing Library
DESCRIPTION: This command installs `@testing-library/react` as a development dependency. This library provides utilities for testing React components in a way that encourages good testing practices by focusing on user-centric interactions.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#_snippet_12

LANGUAGE: bash
CODE:
```
npm install --save-dev @testing-library/react
```

----------------------------------------

TITLE: Installing React Testing Library - npm Bash
DESCRIPTION: This command installs the `@testing-library/react` package as a development dependency. This library provides utilities for testing React components in a way that encourages good testing practices by interacting with components as a user would.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#_snippet_12

LANGUAGE: bash
CODE:
```
npm install --save-dev @testing-library/react
```

----------------------------------------

TITLE: Data-Driven Testing with `test.each` (Tagged Template Literal) in Jest
DESCRIPTION: This snippet showcases `test.each` with a tagged template literal, offering a more readable, table-like format for test data. Variables from the template literal (`$a`, `$b`, `$expected`) are used to construct dynamic test titles, and the test function receives the data as an object.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_26

LANGUAGE: js
CODE:
```
test.each`
  a    | b    | expected
  ${1} | ${1} | ${2}
  ${1} | ${2} | ${3}
  ${2} | ${1} | ${3}
`('returns $expected when $a is added to $b', ({a, b, expected}) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: One-Time Setup and Teardown with beforeAll and afterAll in Jest
DESCRIPTION: This snippet illustrates the use of `beforeAll` and `afterAll` hooks for performing setup and teardown operations only once per test file or `describe` block. It's suitable for expensive operations like database initialization that can be reused across multiple tests, improving test performance.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#_snippet_2

LANGUAGE: js
CODE:
```
beforeAll(() => {
  return initializeCityDatabase();
});

afterAll(() => {
  return clearCityDatabase();
});

test('city database has Vienna', () => {
  expect(isCity('Vienna')).toBeTruthy();
});

test('city database has San Juan', () => {
  expect(isCity('San Juan')).toBeTruthy();
});
```

----------------------------------------

TITLE: Cleaning Up After All Tests with Jest afterAll (JavaScript)
DESCRIPTION: This example demonstrates how to use Jest's `afterAll` hook to perform cleanup operations once all tests in a file have completed. It shows cleaning up a global database instance after all tests have run, ensuring shared resources are properly released. The function can handle asynchronous operations by returning a promise.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

function cleanUpDatabase(db) {
  db.cleanUp();
}

afterAll(() => {
  cleanUpDatabase(globalDatabase);
});

test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});

test('can insert a thing', () => {
  return globalDatabase.insert('thing', makeThing(), response => {
    expect(response.success).toBeTruthy();
  });
});
```

----------------------------------------

TITLE: Setting Return Values for Mock Functions with mockReturnValue (JavaScript)
DESCRIPTION: Demonstrates how `mockReturnValue` sets a fixed return value for a mock function. This value can be updated, affecting subsequent calls to the mock.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#_snippet_15

LANGUAGE: javascript
CODE:
```
const mock = jest.fn();

mock.mockReturnValue(42);
mock(); // 42

mock.mockReturnValue(43);
mock(); // 43
```

----------------------------------------

TITLE: Partially Mocking a Module with jest.requireActual in Jest (JS)
DESCRIPTION: This snippet demonstrates using `jest.requireActual` within a `jest.mock` factory to obtain the original, unmocked module. This allows for partial mocking, where specific functions or properties of the original module can be overridden while retaining the rest of its functionality. It's particularly useful for testing scenarios where only a subset of a module's exports needs to be controlled.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#_snippet_21

LANGUAGE: js
CODE:
```
jest.mock('../myModule', () => {
  // Require the original module to not be mocked...
  const originalModule = jest.requireActual('../myModule');

  return {
    __esModule: true, // Use it when dealing with esModules
    ...originalModule,
    getRandom: jest.fn(() => 10)
  };
});

const getRandom = require('../myModule').getRandom;

getRandom(); // Always returns 10
```

----------------------------------------

TITLE: Mocking Static Assets in Jest
DESCRIPTION: This Jest configuration uses `moduleNameMapper` to mock various static asset files (images, fonts, media) and stylesheets. It directs Jest to use specific mock files (`fileMock.js` and `styleMock.js`) instead of processing the actual asset content during tests, which is useful when assets are not relevant for testing logic.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  moduleNameMapper: {
    '\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':
      '<rootDir>/__mocks__/fileMock.js',
    '\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',
  },
};
```

----------------------------------------

TITLE: Testing Promise Resolution with .then() in Jest
DESCRIPTION: This snippet demonstrates how to test a promise that resolves successfully by returning the promise from the test function. Jest waits for the promise to resolve and then executes the `.then()` block to assert the resolved data.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#_snippet_0

LANGUAGE: js
CODE:
```
test('the data is peanut butter', () => {
  return fetchData().then(data => {
    expect(data).toBe('peanut butter');
  });
});
```

----------------------------------------

TITLE: Configuring Jest Module Resolution (Basic) - JavaScript
DESCRIPTION: Configures Jest to find files using `moduleFileExtensions` and `moduleDirectories` for direct analogs to Webpack's `modules` and `extensions`. It also sets up `moduleNameMapper` to handle static asset imports (CSS, Less, images, fonts) by mapping them to mock files, preventing Jest from trying to process them directly during tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#_snippet_9

LANGUAGE: javascript
CODE:
```
module.exports = {
  moduleFileExtensions: ['js', 'jsx'],
  moduleDirectories: ['node_modules', 'bower_components', 'shared'],

  moduleNameMapper: {
    '\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',
    '\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',
  },
};
```

----------------------------------------

TITLE: Testing Rejected Promises with `.rejects` (Return Statement) in Jest
DESCRIPTION: This snippet illustrates how to test a promise that is expected to be rejected with a specific reason using the `.rejects` modifier. The `toThrow` matcher is chained to verify the error message, and returning the assertion ensures Jest waits for the promise.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_4

LANGUAGE: js
CODE:
```
test('rejects to octopus', () => {
  // make sure to add a return statement
  return expect(Promise.reject(new Error('octopus'))).rejects.toThrow(
    'octopus',
  );
});
```

----------------------------------------

TITLE: Replacing Object Properties with jest.replaceProperty (Test Example)
DESCRIPTION: Demonstrates how to use `jest.replaceProperty` to temporarily change an object's property (like `process.env`) for the duration of a test, ensuring the original value is restored using `jest.restoreAllMocks` in `afterEach`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#_snippet_29

LANGUAGE: js
CODE:
```
const utils = require('./utils');

afterEach(() => {
  // restore replaced property
  jest.restoreAllMocks();
});

test('isLocalhost returns true when HOSTNAME is localhost', () => {
  jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});
  expect(utils.isLocalhost()).toBe(true);
});

test('isLocalhost returns false when HOSTNAME is not localhost', () => {
  jest.replaceProperty(process, 'env', {HOSTNAME: 'not-localhost'});
  expect(utils.isLocalhost()).toBe(false);
});
```

----------------------------------------

TITLE: Importing Jest Globals Explicitly (TypeScript)
DESCRIPTION: This TypeScript example demonstrates how to explicitly import Jest's global functions (`expect`, `jest`, `test`) from `@jest/globals` when the `--injectGlobals` option is set to `false`. This approach provides clearer dependency management and avoids global pollution, ensuring that Jest's functions are only available where explicitly imported. It also shows `jest.useFakeTimers()` and a basic test.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
import {expect, jest, test} from '@jest/globals';

jest.useFakeTimers();

test('some test', () => {
  expect(Date.now()).toBe(0);
});
```

----------------------------------------

TITLE: Handling Asynchronous Errors in Jest Tests
DESCRIPTION: This snippet demonstrates two methods for testing error handling in asynchronous code. The first uses a Promise's `.catch` method, and the second uses a `try...catch` block with `async`/`await`. Both methods require `expect.assertions` to ensure the error path is tested and the test fails correctly if the promise fulfills unexpectedly.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#_snippet_6

LANGUAGE: js
CODE:
```
// Testing for async errors using Promise.catch.
it('tests error with promises', () => {
  expect.assertions(1);
  return user.getUserName(2).catch(error =>
    expect(error).toEqual({
      error: 'User with 2 not found.',
    }),
  );
});

// Or using async/await.
it('tests error with async/await', async () => {
  expect.assertions(1);
  try {
    await user.getUserName(1);
  n} catch (error) {
    expect(error).toEqual({
      error: 'User with 1 not found.',
    });
  }
});
```

----------------------------------------

TITLE: Mocking Rejected Promises with Jest's mockRejectedValue
DESCRIPTION: The `mockRejectedValue` method is a shorthand for creating a mock function that always returns a rejected promise with the specified error. This is essential for testing error handling paths in asynchronous code. The mock function will consistently reject with the same error for all subsequent calls.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#_snippet_16

LANGUAGE: javascript
CODE:
```
jest.fn().mockImplementation(() => Promise.reject(value));
```

LANGUAGE: javascript
CODE:
```
test('async test', async () => {
  const asyncMock = jest
    .fn()
    .mockRejectedValue(new Error('Async error message'));

  await asyncMock(); // throws 'Async error message'
});
```

LANGUAGE: typescript
CODE:
```
import {jest, test} from '@jest/globals';

test('async test', async () => {
  const asyncMock = jest
    .fn<() => Promise<never>>()
    .mockRejectedValue(new Error('Async error message'));

  await asyncMock(); // throws 'Async error message'
});
```

----------------------------------------

TITLE: Setting Up Test Environment with beforeEach in Jest (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `beforeEach` in Jest to set up a clean test environment before each test runs. It shows clearing and populating a `globalDatabase` asynchronously, ensuring each test operates on a consistent state. The `beforeEach` function returns a promise, which Jest waits for before executing subsequent tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const globalDatabase = makeGlobalDatabase();

beforeEach(() => {
  // Clears the database and adds some testing data.
  // Jest will wait for this promise to resolve before running tests.
  return globalDatabase.clear().then(() => {
    return globalDatabase.insert({testData: 'foo'});
  });
});

test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});

test('can insert a thing', () => {
  return globalDatabase.insert('thing', makeThing(), response => {
    expect(response.success).toBeTruthy();
  });
});
```

----------------------------------------

TITLE: Testing Object Equality with `toEqual` in Jest
DESCRIPTION: This example illustrates how to use Jest's `toEqual` matcher for deep comparison of objects and arrays. It recursively checks every field, making it suitable for complex data structures. Note that `toEqual` ignores `undefined` properties and array sparseness.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UsingMatchers.md#_snippet_1

LANGUAGE: js
CODE:
```
test('object assignment', () => {
  const data = {one: 1};
  data['two'] = 2;
  expect(data).toEqual({one: 1, two: 2});
});
```

----------------------------------------

TITLE: Using beforeEach for Asynchronous Database Setup in Jest
DESCRIPTION: This snippet demonstrates how `beforeEach` is used to reset a global database before each test. It shows asynchronous setup using promises, ensuring the database is cleared and populated with test data before subsequent `test` blocks execute. This pattern is useful for maintaining a clean state across multiple tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

beforeEach(() => {
  // Clears the database and adds some testing data.
  // Jest will wait for this promise to resolve before running tests.
  return globalDatabase.clear().then(() => {
    return globalDatabase.insert({testData: 'foo'});
  });
});

test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});

test('can insert a thing', () => {
  return globalDatabase.insert('thing', makeThing(), response => {
    expect(response.success).toBeTruthy();
  });
});
```

----------------------------------------

TITLE: Handling Asynchronous beforeEach with Promises in Jest
DESCRIPTION: This example shows how beforeEach can handle asynchronous setup by returning a Promise. If initializeCityDatabase() returns a promise, Jest will wait for that promise to resolve before proceeding with the tests, ensuring the database is fully initialized.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
beforeEach(() => {
  return initializeCityDatabase();
});
```

----------------------------------------

TITLE: Scoping Setup Hooks with describe Blocks in Jest
DESCRIPTION: This example demonstrates how `beforeEach` hooks can be scoped. A top-level `beforeEach` applies to all tests, while a `beforeEach` inside a `describe` block applies only to tests within that specific block. This allows for different setup routines for different groups of tests, such as separate database initializations.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#_snippet_3

LANGUAGE: js
CODE:
```
// Applies to all tests in this file
beforeEach(() => {
  return initializeCityDatabase();
});

test('city database has Vienna', () => {
  expect(isCity('Vienna')).toBeTruthy();
});

test('city database has San Juan', () => {
  expect(isCity('San Juan')).toBeTruthy();
});

describe('matching cities to foods', () => {
  // Applies only to tests in this describe block
  beforeEach(() => {
    return initializeFoodDatabase();
  });

  test('Vienna <3 veal', () => {
    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);
  });

  test('San Juan <3 plantains', () => {
    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);
  });
});
```

----------------------------------------

TITLE: Clearing Jest Mocks Between Tests in JavaScript
DESCRIPTION: This snippet shows how to use the `beforeEach` hook to clear the call records of both the mocked class constructor (`SoundPlayer.mockClear()`) and its mocked method (`mockPlaySoundFile.mockClear()`). This ensures a clean state for each test, preventing interference from previous test runs.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#_snippet_19

LANGUAGE: javascript
CODE:
```
beforeEach(() => {
  SoundPlayer.mockClear();
  mockPlaySoundFile.mockClear();
});
```

----------------------------------------

TITLE: Defining Jest Configuration in package.json
DESCRIPTION: This snippet illustrates embedding Jest configuration directly within the `package.json` file under the `"jest"` key. This method centralizes project metadata and Jest settings, offering a concise way to configure Jest, setting `verbose` to `true` for detailed output.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  "name": "my-project",
  "jest": {
    "verbose": true
  }
}
```

----------------------------------------

TITLE: Spying on Object Methods with `jest.spyOn` in JavaScript
DESCRIPTION: The `jest.spyOn(object, methodName)` function creates a mock function that wraps an existing method on an object, allowing you to track calls to it while still executing the original method by default. Spies created with `jest.spyOn` can be restored to their original state using `jest.restoreAllMocks()`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#_snippet_26

LANGUAGE: JavaScript
CODE:
```
const video = {
  play() {
    return true;
  },
};

module.exports = video;
```

LANGUAGE: JavaScript
CODE:
```
const video = require('./video');

afterEach(() => {
  // restore the spy created with spyOn
  jest.restoreAllMocks();
});

test('plays video', () => {
  const spy = jest.spyOn(video, 'play');
  const isPlaying = video.play();

  expect(spy).toHaveBeenCalled();
  expect(isPlaying).toBe(true);
});
```

----------------------------------------

TITLE: Testing Rejected Promises with .catch in Jest
DESCRIPTION: This example demonstrates how to handle rejected promises using the .catch method. It's crucial to use expect.assertions(1) to ensure that the assertion within the catch block is actually called, preventing false positives if the promise unexpectedly resolves.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TestingAsyncCode.md#_snippet_3

LANGUAGE: js
CODE:
```
test('the fetch fails with an error', () => {
  expect.assertions(1);
  return fetchData().catch(error => expect(error).toMatch('error'));
});
```

----------------------------------------

TITLE: Testing a Rejected Promise Reason with Jest `expect.rejects.toThrow` (JavaScript)
DESCRIPTION: This snippet illustrates the use of the `.rejects` modifier to test the rejection reason of a promise. It asserts that a promise rejects with an error containing the message 'octopus', highlighting the requirement to return the assertion for asynchronous testing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
test('rejects to octopus', () => {
  // make sure to add a return statement
  return expect(Promise.reject(new Error('octopus'))).rejects.toThrow(
    'octopus',
  );
});
```

----------------------------------------

TITLE: Nesting describe Blocks for Hierarchical Jest Tests
DESCRIPTION: This snippet demonstrates nesting `describe` blocks to create a hierarchical structure for tests. It organizes tests for a `binaryStringToNumber` function into categories for valid and invalid inputs, providing a clear and detailed test suite organization. This approach is beneficial for complex functions with multiple edge cases.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const binaryStringToNumber = binString => {
  if (!/^[01]+$/.test(binString)) {
    throw new CustomError('Not a binary number.');
  }

  return parseInt(binString, 2);
};

describe('binaryStringToNumber', () => {
  describe('given an invalid binary string', () => {
    test('composed of non-numbers throws CustomError', () => {
      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);
    });

    test('with extra whitespace throws CustomError', () => {
      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);
    });
  });

  describe('given a valid binary string', () => {
    test('returns the correct number', () => {
      expect(binaryStringToNumber('100')).toBe(4);
    });
  });
});
```

----------------------------------------

TITLE: Disabling Jest Global Injection and Importing from `@jest/globals`
DESCRIPTION: This TypeScript snippet demonstrates how to explicitly import Jest's global functions (`expect`, `jest`, `test`) from `@jest/globals` when the `injectGlobals` option is set to `false`. This approach provides clearer dependency management and is supported only with the default `jest-circus` test runner.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#_snippet_33

LANGUAGE: typescript
CODE:
```
import {expect, jest, test} from '@jest/globals';

jest.useFakeTimers();

test('some test', () => {
  expect(Date.now()).toBe(0);
});
```

----------------------------------------

TITLE: Scoping Setup Hooks with describe Blocks in Jest
DESCRIPTION: This example demonstrates how `beforeEach` hooks can be scoped using `describe` blocks. A top-level `beforeEach` applies to all tests, while a `beforeEach` inside a `describe` block applies only to tests within that specific block, allowing for different setup routines for different test suites.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#_snippet_3

LANGUAGE: js
CODE:
```
// Applies to all tests in this file
beforeEach(() => {
  return initializeCityDatabase();
});

test('city database has Vienna', () => {
  expect(isCity('Vienna')).toBeTruthy();
});

test('city database has San Juan', () => {
  expect(isCity('San Juan')).toBeTruthy();
});

describe('matching cities to foods', () => {
  // Applies only to tests in this describe block
  beforeEach(() => {
    return initializeFoodDatabase();
  });

  test('Vienna <3 veal', () => {
    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);
  });

  test('San Juan <3 plantains', () => {
    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);
  });
});
```

----------------------------------------

TITLE: Defining Jest Configuration via JavaScript Object Export
DESCRIPTION: This snippet shows how to configure Jest by exporting a plain JavaScript object from `jest.config.js`. It uses JSDoc for type hinting (`@type {import('jest').Config}`) to ensure the configuration adheres to Jest's schema, setting `verbose` to `true` for detailed test output.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#_snippet_0

LANGUAGE: js
CODE:
```
/** @type {import('jest').Config} */
const config = {
  verbose: true,
};

module.exports = config;
```

----------------------------------------

TITLE: One-Time Setup with beforeAll and afterAll in Jest
DESCRIPTION: This snippet illustrates using beforeAll and afterAll hooks for setup and teardown operations that only need to run once before all tests in a file and once after all tests. This is useful for expensive operations like database initialization that can be reused across tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
beforeAll(() => {
  return initializeCityDatabase();
});

afterAll(() => {
  return clearCityDatabase();
});

test('city database has Vienna', () => {
  expect(isCity('Vienna')).toBeTruthy();
});

test('city database has San Juan', () => {
  expect(isCity('San Juan')).toBeTruthy();
});
```

----------------------------------------

TITLE: Testing Null Truthiness with Jest (JavaScript)
DESCRIPTION: This example demonstrates various truthiness matchers for `null`. It shows how `toBeNull` specifically matches `null`, `toBeDefined` matches anything that is not `undefined`, `not.toBeUndefined` asserts it's not undefined, `not.toBeTruthy` asserts it's not truthy, and `toBeFalsy` asserts it's falsy.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#_snippet_3

LANGUAGE: javascript
CODE:
```
test('null', () => {
  const n = null;
  expect(n).toBeNull();
  expect(n).toBeDefined();
  expect(n).not.toBeUndefined();
  expect(n).not.toBeTruthy();
  expect(n).toBeFalsy();
});
```

----------------------------------------

TITLE: Defining Test Cases with Jest .each (Array of Arrays - Inline) - TypeScript
DESCRIPTION: This snippet illustrates using `test.each` with an inline array of arrays. This style works smoothly for defining test cases, and the arguments, such as `extra: boolean | undefined`, are correctly typed by Jest.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_38

LANGUAGE: TypeScript
CODE:
```
import {test} from '@jest/globals';

test.each([
  [1, 2, 'three', true],
  [3, 4, 'seven', false],
  [5, 6, 'eleven']
])('inline table example', (a, b, expected, extra) => {
  // arguments are typed as expected, e.g. `extra: boolean | undefined`
});
```

----------------------------------------

TITLE: Asserting Jest Mock Function Call Details
DESCRIPTION: This snippet provides various Jest `expect` assertions demonstrating how to verify the behavior of mock functions using their `.mock` property. It covers checking call count, specific arguments passed in calls, return values, `this` contexts, and instantiation counts and properties of instantiated objects.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// The function was called exactly once
expect(someMockFunction.mock.calls).toHaveLength(1);

// The first arg of the first call to the function was 'first arg'
expect(someMockFunction.mock.calls[0][0]).toBe('first arg');

// The second arg of the first call to the function was 'second arg'
expect(someMockFunction.mock.calls[0][1]).toBe('second arg');

// The return value of the first call to the function was 'return value'
expect(someMockFunction.mock.results[0].value).toBe('return value');

// The function was called with a certain `this` context: the `element` object.
expect(someMockFunction.mock.contexts[0]).toBe(element);

// This function was instantiated exactly twice
expect(someMockFunction.mock.instances.length).toBe(2);

// The object returned by the first instantiation of this function
// had a `name` property whose value was set to 'test'
expect(someMockFunction.mock.instances[0].name).toBe('test');

// The first argument of the last call to the function was 'test'
expect(someMockFunction.mock.lastCall[0]).toBe('test');
```

----------------------------------------

TITLE: Mocking Asynchronous Request Module for Jest Tests
DESCRIPTION: This manual mock for `request.js` simulates fetching user data without making actual network calls. It returns a Promise that resolves with predefined user data or rejects if the user is not found, using `process.nextTick` to simulate asynchronicity.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#_snippet_2

LANGUAGE: js
CODE:
```
const users = {
  4: {name: 'Mark'},
  5: {name: 'Paul'},
};

export default function request(url) {
  return new Promise((resolve, reject) => {
    const userID = parseInt(url.slice('/users/'.length), 10);
    process.nextTick(() =>
      users[userID]
        ? resolve(users[userID])
        : reject({
            error: `User with ${userID} not found.`,
          }),
    );
  });
}
```

----------------------------------------

TITLE: Using Jest Custom Matchers for Mock Functions - JavaScript
DESCRIPTION: This snippet demonstrates the use of Jest's built-in custom matchers for asserting various aspects of mock function calls. These matchers provide a more readable and concise syntax for common testing scenarios involving mock interactions.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#_snippet_17

LANGUAGE: javascript
CODE:
```
// The mock function was called at least once
expect(mockFunc).toHaveBeenCalled();

// The mock function was called at least once with the specified args
expect(mockFunc).toHaveBeenCalledWith(arg1, arg2);

// The last call to the mock function was called with the specified args
expect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);

// All calls and the name of the mock is written as a snapshot
expect(mockFunc).toMatchSnapshot();
```

----------------------------------------

TITLE: Configuring Jest Module Resolution and Mappers (Initial)
DESCRIPTION: This Jest configuration sets up file extensions, module directories, and basic module name mappers. It tells Jest where to find '.js' and '.jsx' files, and how to resolve paths for 'node_modules', 'bower_components', and 'shared' directories. It also maps CSS/LESS and common image/font files to mock modules.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  moduleFileExtensions: ['js', 'jsx'],
  moduleDirectories: ['node_modules', 'bower_components', 'shared'],

  moduleNameMapper: {
    '\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',
    '\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',
  },
};
```

----------------------------------------

TITLE: Implementing Mock Function Logic with `mockImplementation` (TypeScript)
DESCRIPTION: This TypeScript snippet illustrates how `mockImplementation` defines the behavior of a mock function, including type annotations for parameters. It demonstrates initial setup, calls, and then updating the mock's behavior with a new implementation.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import {jest} from '@jest/globals';

const mockFn = jest.fn((scalar: number) => 42 + scalar);

mockFn(0); // 42
mockFn(1); // 43

mockFn.mockImplementation(scalar => 36 + scalar);

mockFn(2); // 38
mockFn(3); // 39
```

----------------------------------------

TITLE: Testing SoundPlayerConsumer with Jest Automatic Class Mocking
DESCRIPTION: This example demonstrates using Jest's automatic class mocking (`jest.mock()`) to test `SoundPlayerConsumer`. It shows how to clear mocks, assert constructor calls (`toHaveBeenCalledTimes`), and verify method calls on mock instances (`mock.instances`, `toHaveBeenCalledWith`). This method is suitable when you don't need to replace the class's implementation.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import SoundPlayer from './sound-player';
import SoundPlayerConsumer from './sound-player-consumer';
jest.mock('./sound-player'); // SoundPlayer is now a mock constructor

beforeEach(() => {
  // Clear all instances and calls to constructor and all methods:
  SoundPlayer.mockClear();
});

it('We can check if the consumer called the class constructor', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  expect(SoundPlayer).toHaveBeenCalledTimes(1);
});

it('We can check if the consumer called a method on the class instance', () => {
  // Show that mockClear() is working:
  expect(SoundPlayer).not.toHaveBeenCalled();

  const soundPlayerConsumer = new SoundPlayerConsumer();
  // Constructor should have been called again:
  expect(SoundPlayer).toHaveBeenCalledTimes(1);

  const coolSoundFileName = 'song.mp3';
  soundPlayerConsumer.playSomethingCool();

  // mock.instances is available with automatic mocks:
  const mockSoundPlayerInstance = SoundPlayer.mock.instances[0];
  const mockPlaySoundFile = mockSoundPlayerInstance.playSoundFile;
  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);
  // Equivalent to above check:
  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);
  expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Testing Rejected Promises with Jest .rejects (JavaScript)
DESCRIPTION: This snippet illustrates how to test a promise that is expected to be rejected using Jest's `.rejects` matcher. It verifies that the `fetchData()` promise rejects with an error matching the string 'error'. Similar to `.resolves`, returning the assertion is vital for proper asynchronous test execution.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
test('the fetch fails with an error', () => {
  return expect(fetchData()).rejects.toMatch('error');
});
```

----------------------------------------

TITLE: Setting One-Time Return Value for Jest Mocks (mockReturnValueOnce)
DESCRIPTION: The `mockReturnValueOnce` method allows you to specify a value that a mock function will return for a single call. It can be chained to define different return values for successive calls, falling back to `mockReturnValue` when no more `mockReturnValueOnce` values are available. This is useful for testing scenarios where a mock's behavior needs to change over time.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#_snippet_19

LANGUAGE: javascript
CODE:
```
jest.fn().mockImplementationOnce(() => value);
```

LANGUAGE: javascript
CODE:
```
const mockFn = jest
  .fn()
  .mockReturnValue('default')
  .mockReturnValueOnce('first call')
  .mockReturnValueOnce('second call');

mockFn(); // 'first call'
mockFn(); // 'second call'
mockFn(); // 'default'
mockFn(); // 'default'
```

LANGUAGE: typescript
CODE:
```
import {jest} from '@jest/globals';

const mockFn = jest
  .fn<() => string>()
  .mockReturnValue('default')
  .mockReturnValueOnce('first call')
  .mockReturnValueOnce('second call');

mockFn(); // 'first call'
mockFn(); // 'second call'
mockFn(); // 'default'
mockFn(); // 'default'
```

----------------------------------------

TITLE: Installing Jest JSDOM Environment
DESCRIPTION: This command installs the `jest-environment-jsdom` package as a development dependency. This package is essential for Jest to simulate a browser-like DOM environment, allowing tests to interact with and assert against DOM manipulations as they would occur in a real browser. It is required for testing DOM-dependent code.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialjQuery.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install --save-dev jest-environment-jsdom
```

----------------------------------------

TITLE: Mocking Class Methods with Jest Module Factory - JavaScript
DESCRIPTION: This snippet demonstrates how to mock a class (`SoundPlayer`) using `jest.mock` with a module factory function. It sets up a `jest.fn()` (`mockPlaySoundFile`) to be returned by the mocked class instance, allowing tests to spy on calls to the `playSoundFile` method. This ensures that method calls can be tracked and asserted against.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
import SoundPlayer from './sound-player';
const mockPlaySoundFile = jest.fn();
jest.mock('./sound-player', () => {
  return jest.fn().mockImplementation(() => {
    return {playSoundFile: mockPlaySoundFile};
    // Now we can track calls to playSoundFile
  });
});
```

----------------------------------------

TITLE: Testing jQuery DOM Manipulation with Jest and Mocks
DESCRIPTION: This Jest test suite verifies the functionality of the `displayUser` module. It mocks the `fetchCurrentUser` dependency to control its return value, sets up a simulated DOM environment using `document.body.innerHTML`, and then simulates a click event on the button. Finally, it asserts that `fetchCurrentUser` was called and the `#username` span's text was updated correctly based on the mock data.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialjQuery.md#_snippet_1

LANGUAGE: javascript
CODE:
```
'use strict';

jest.mock('../fetchCurrentUser');

test('displays a user after a click', () => {
  // Set up our document body
  document.body.innerHTML =
    '<div>' +
    '  <span id="username" />' +
    '  <button id="button" />' +
    '</div>';

  // This module has a side-effect
  require('../displayUser');

  const $ = require('jquery');
  const fetchCurrentUser = require('../fetchCurrentUser');

  // Tell the fetchCurrentUser mock function to automatically invoke
  // its callback with some data
  fetchCurrentUser.mockImplementation(cb => {
    cb({
      fullName: 'Johnny Cash',
      loggedIn: true,
    });
  });

  // Use jquery to emulate a click on our button
  $('#button').click();

  // Assert that the fetchCurrentUser function was called, and that the
  // #username span's inner text was updated as we'd expect it to.
  expect(fetchCurrentUser).toHaveBeenCalled();
  expect($('#username').text()).toBe('Johnny Cash - Logged In');
});
```

----------------------------------------

TITLE: Configuring Jest Global Coverage Threshold (TypeScript)
DESCRIPTION: This TypeScript example shows how to set global minimum coverage thresholds for branches, functions, and lines, and a maximum for uncovered statements using Jest's `coverageThreshold` configuration. This ensures the test run fails if the specified coverage levels are not achieved.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#_snippet_15

LANGUAGE: ts
CODE:
```
import type {Config} from 'jest';

const config: Config = {
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: -10,
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Handling Asynchronous Setup with beforeEach in Jest
DESCRIPTION: This example shows how `beforeEach` can handle asynchronous setup by returning a Promise. Jest waits for the returned promise to resolve before proceeding with the test, ensuring that asynchronous initialization, like a database connection, is complete.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#_snippet_1

LANGUAGE: js
CODE:
```
beforeEach(() => {
  return initializeCityDatabase();
});
```

----------------------------------------

TITLE: Clearing Jest Mocks in beforeEach Hook - JavaScript
DESCRIPTION: This snippet shows how to clear the call records of mock functions and constructors using `mockClear()` within a `beforeEach` hook. This ensures that each test starts with a clean slate, preventing test pollution and maintaining test isolation by resetting mock states before every test run.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#_snippet_19

LANGUAGE: javascript
CODE:
```
beforeEach(() => {
  SoundPlayer.mockClear();
  mockPlaySoundFile.mockClear();
});
```

----------------------------------------

TITLE: Retrying Failed Jest Tests - Basic Usage (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `jest.retryTimes()` to automatically re-run failed tests up to a specified number of times. It shows a basic setup where a test is configured to retry 3 times if it fails, without logging errors before each retry.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#_snippet_35

LANGUAGE: JavaScript
CODE:
```
jest.retryTimes(3);

test('will fail', () => {
  expect(true).toBe(false);
});
```

----------------------------------------

TITLE: Enabling Custom Matcher Globally with `setupFilesAfterEnv` (JavaScript)
DESCRIPTION: This JavaScript snippet illustrates how to make a custom matcher, like `toBeWithinRange`, globally available to all Jest tests by configuring it within a `setupFilesAfterEnv` script. This approach centralizes the `expect.extend` call, eliminating the need to import the matcher into every individual test file.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_70

LANGUAGE: JavaScript
CODE:
```
import {expect} from '@jest/globals';
// remember to export `toBeWithinRange` as well
import {toBeWithinRange} from './toBeWithinRange';

expect.extend({
  toBeWithinRange,
});
```

----------------------------------------

TITLE: Creating a Manual Mock for Node.js fs Module in Jest
DESCRIPTION: Implements a manual mock for the Node.js `fs` module, extending `jest.createMockFromModule('fs')`. It provides a custom `__setMockFiles` function to control the mocked file system state and overrides `readdirSync` to read from this mock state, avoiding actual disk I/O during tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ManualMocks.md#_snippet_2

LANGUAGE: javascript
CODE:
```
'use strict';

const path = require('path');

const fs = jest.createMockFromModule('fs');

// This is a custom function that our tests can use during setup to specify
// what the files on the "mock" filesystem should look like when any of the
// `fs` APIs are used.
let mockFiles = Object.create(null);
function __setMockFiles(newMockFiles) {
  mockFiles = Object.create(null);
  for (const file in newMockFiles) {
    const dir = path.dirname(file);

    if (!mockFiles[dir]) {
      mockFiles[dir] = [];
    }
    mockFiles[dir].push(path.basename(file));
  }
}

// A custom version of `readdirSync` that reads from the special mocked out
// file list set via __setMockFiles
function readdirSync(directoryPath) {
  return mockFiles[directoryPath] || [];
}

fs.__setMockFiles = __setMockFiles;
fs.readdirSync = readdirSync;

module.exports = fs;
```

----------------------------------------

TITLE: Testing Asynchronous Code with Async/Await in Jest
DESCRIPTION: This example shows how to use the async/await syntax for testing asynchronous operations. The 'async' keyword marks the test function, and 'await' pauses execution until the Promise resolves, simplifying asynchronous test logic and error handling with try...catch.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TestingAsyncCode.md#_snippet_1

LANGUAGE: js
CODE:
```
test('the data is peanut butter', async () => {
  const data = await fetchData();
  expect(data).toBe('peanut butter');
});

test('the fetch fails with an error', async () => {
  expect.assertions(1);
  try {
    await fetchData();
  } catch (error) {
    expect(error).toMatch('error');
  }
});
```

----------------------------------------

TITLE: Setting Jest Timeout for Long-Running Tests (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to increase the default timeout for Jest tests using `jest.setTimeout()`. It is particularly useful for long-running asynchronous operations to prevent premature test failures due to timeouts. The example sets the timeout to 10 seconds.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#_snippet_6

LANGUAGE: js
CODE:
```
jest.setTimeout(10_000); // 10 second timeout
```

----------------------------------------

TITLE: Increasing Jest Timeout for Async Operations - JavaScript
DESCRIPTION: This snippet demonstrates how to increase the default Jest timeout for tests that might take longer to resolve, such as those involving asynchronous operations. Calling `jest.setTimeout` with a value like 10,000 milliseconds (10 seconds) prevents 'Timeout - Async callback was not invoked' errors.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#_snippet_5

LANGUAGE: js
CODE:
```
jest.setTimeout(10_000); // 10 second timeout
```

----------------------------------------

TITLE: Using .toBe for primitive and referential identity checks
DESCRIPTION: This snippet demonstrates the `.toBe` matcher for comparing primitive values and checking referential identity of objects. It asserts that `can.ounces` is 12 and `can.name` is 'pamplemousse', using `Object.is` for comparison.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_6

LANGUAGE: js
CODE:
```
const can = {
  name: 'pamplemousse',
  ounces: 12,
};

describe('the can', () => {
  test('has 12 ounces', () => {
    expect(can.ounces).toBe(12);
  });

  test('has a sophisticated name', () => {
    expect(can.name).toBe('pamplemousse');
  });
});
```

----------------------------------------

TITLE: Running Tests for Changed Files
DESCRIPTION: This command runs tests that are related to files that have been changed since the last commit, based on the version control system (Git or Mercurial). It's useful for quickly testing only the affected parts of the codebase.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CLI.md#_snippet_2

LANGUAGE: bash
CODE:
```
jest -o
```

----------------------------------------

TITLE: Correct Callback Testing with done() in Jest
DESCRIPTION: This snippet demonstrates the correct way to test asynchronous code using callbacks in Jest. By including a `done` argument in the test function, Jest waits until `done()` is explicitly called. If an error occurs or an assertion fails, `done(error)` is called to indicate a test failure, providing clear error messages.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TestingAsyncCode.md#_snippet_7

LANGUAGE: js
CODE:
```
test('the data is peanut butter', done => {
  function callback(error, data) {
    if (error) {
      done(error);
      return;
    }
    try {
      expect(data).toBe('peanut butter');
      done();
    } catch (error) {
      done(error);
    }
  }

  fetchData(callback);
});
```

----------------------------------------

TITLE: Setting Return Values for Mock Functions with mockReturnValue (TypeScript)
DESCRIPTION: Illustrates the use of `mockReturnValue` in TypeScript to define the return value of a mock function, with type annotations for clarity.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#_snippet_16

LANGUAGE: typescript
CODE:
```
import {jest} from '@jest/globals';

const mock = jest.fn<() => number>();

mock.mockReturnValue(42);
mock(); // 42

mock.mockReturnValue(43);
mock(); // 43
```

----------------------------------------

TITLE: Installing @types/jest for Global Type Definitions
DESCRIPTION: This command installs the @types/jest package as a development dependency. This package provides global type definitions for Jest APIs, allowing TypeScript to recognize Jest globals like 'describe' and 'test' without requiring explicit imports in each test file.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#_snippet_16

LANGUAGE: Bash
CODE:
```
npm install --save-dev @types/jest
```

----------------------------------------

TITLE: Creating a Typed Mock Function with Jest.fn in TypeScript
DESCRIPTION: This snippet demonstrates how `jest.fn()` infers types when an implementation is provided and how to use generic type arguments for type safety when the implementation is omitted. It shows how to create a mock, implement its behavior, and then assert its calls and arguments.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#_snippet_19

LANGUAGE: TypeScript
CODE:
```
import {expect, jest, test} from '@jest/globals';
import type add from './add';
import calculate from './calc';

test('calculate calls add', () => {
  // Create a new mock that can be used in place of `add`.
  const mockAdd = jest.fn<typeof add>();

  // `.mockImplementation()` now can infer that `a` and `b` are `number`
  // and that the returned value is a `number`.
  mockAdd.mockImplementation((a, b) => {
    // Yes, this mock is still adding two numbers but imagine this
    // was a complex function we are mocking.
    return a + b;
  });

  // `mockAdd` is properly typed and therefore accepted by anything
  // requiring `add`.
  calculate(mockAdd, 1, 2);

  expect(mockAdd).toHaveBeenCalledTimes(1);
  expect(mockAdd).toHaveBeenCalledWith(1, 2);
});
```

----------------------------------------

TITLE: Testing Asynchronous Code with Jest's advanceTimersByTime
DESCRIPTION: This Jest test suite demonstrates how to test the `timerGame` function using `jest.useFakeTimers()` and `jest.advanceTimersByTime()`. It verifies that the callback is not called immediately but is executed precisely after advancing the timers by the specified duration (1000ms), simulating the passage of time without actual delays.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TimerMocks.md#_snippet_7

LANGUAGE: javascript
CODE:
```
jest.useFakeTimers();
it('calls the callback after 1 second via advanceTimersByTime', () => {
  const timerGame = require('../timerGame');
  const callback = jest.fn();

  timerGame(callback);

  // At this point in time, the callback should not have been called yet
  expect(callback).not.toHaveBeenCalled();

  // Fast-forward until all timers have been executed
  jest.advanceTimersByTime(1000);

  // Now our callback should have been called!
  expect(callback).toHaveBeenCalled();
  expect(callback).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Checking Object Properties with Jest's .toHaveProperty (JavaScript)
DESCRIPTION: The `.toHaveProperty` matcher checks for the existence of a property at a given `keyPath` within an object. It supports dot notation or an array for deep referencing of nested properties. Optionally, a `value` argument can be provided to compare the property's value using deep equality, similar to `toEqual`.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
const houseForSale = {
  bath: true,
  bedrooms: 4,
  kitchen: {
    amenities: ['oven', 'stove', 'washer'],
    area: 20,
    wallColor: 'white',
    'nice.oven': true
  },
  livingroom: {
    amenities: [
      {
        couch: [
          ['large', {dimensions: [20, 20]}],
          ['small', {dimensions: [10, 10]}]
        ]
      }
    ]
  },
  'ceiling.height': 2
};

test('this house has my desired features', () => {
  expect(houseForSale).toHaveProperty('bath');
  expect(houseForSale).toHaveProperty('bedrooms', 4);

  expect(houseForSale).not.toHaveProperty('pool');

  expect(houseForSale).toHaveProperty('kitchen.area', 20);
  expect(houseForSale).toHaveProperty('kitchen.amenities', [
    'oven',
    'stove',
    'washer'
  ]);

  expect(houseForSale).not.toHaveProperty('kitchen.open');

  expect(houseForSale).toHaveProperty(['kitchen', 'area'], 20);
  expect(houseForSale).toHaveProperty(
    ['kitchen', 'amenities'],
    ['oven', 'stove', 'washer']
  );
  expect(houseForSale).toHaveProperty(['kitchen', 'amenities', 0], 'oven');
  expect(houseForSale).toHaveProperty(
    'livingroom.amenities[0].couch[0][1].dimensions[0]',
    20
  );
  expect(houseForSale).toHaveProperty(['kitchen', 'nice.oven']);
  expect(houseForSale).not.toHaveProperty(['kitchen', 'open']);

  expect(houseForSale).toHaveProperty(['ceiling.height'], 'tall');
});
```

----------------------------------------

TITLE: Defining Jest Tests with .each Using Inline Array of Arrays (TypeScript)
DESCRIPTION: This snippet illustrates using Jest's `.each` modifier with an inline array of arrays. Each inner array represents a row of test data, and the arguments `a, b, expected, extra` in the test callback are correctly typed, for instance, `extra: boolean | undefined`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#_snippet_37

LANGUAGE: TypeScript
CODE:
```
import {test} from '@jest/globals';

test.each([
  [1, 2, 'three', true],
  [3, 4, 'seven', false],
  [5, 6, 'eleven'],
])('inline table example', (a, b, expected, extra) => {
  // arguments are typed as expected, e.g. `extra: boolean | undefined`
});
```

----------------------------------------

TITLE: Testing Asynchronous Code with Jest async/await
DESCRIPTION: This snippet provides two examples of testing asynchronous functions using the `async`/`await` syntax in Jest. The first example directly awaits the promise, while the second combines `async`/`await` with the `.resolves` matcher for a cleaner assertion.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#_snippet_5

LANGUAGE: js
CODE:
```
// async/await can be used.
it('works with async/await', async () => {
  expect.assertions(1);
  const data = await user.getUserName(4);
  expect(data).toBe('Mark');
});

// async/await can also be used with `.resolves`.
it('works with async/await and resolves', async () => {
  expect.assertions(1);
  await expect(user.getUserName(5)).resolves.toBe('Paul');
});
```

----------------------------------------

TITLE: Matching Object Subset with toMatchObject in Jest JavaScript
DESCRIPTION: Use `.toMatchObject` to verify that a JavaScript object contains a subset of properties from an expected object. The expected object can contain literal values or asymmetric matchers (like `expect.stringMatching`). This allows checking for required properties and values without failing on extra properties in the received object. The example checks if `houseForSale` includes properties from `desiredHouse`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ExpectAPI.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const houseForSale = {
  bath: true,
  bedrooms: 4,
  kitchen: {
    amenities: ['oven', 'stove', 'washer'],
    area: 20,
    wallColor: 'white',
  },
};
const desiredHouse = {
  bath: true,
  kitchen: {
    amenities: ['oven', 'stove', 'washer'],
    wallColor: expect.stringMatching(/white|yellow/),
  },
};

test('the house has my desired features', () => {
  expect(houseForSale).toMatchObject(desiredHouse);
});
```

----------------------------------------

TITLE: Configuring Jest moduleNameMapper for Aliasing in JavaScript
DESCRIPTION: This snippet illustrates how to configure Jest's `moduleNameMapper` in a JavaScript setup to alias modules using regular expressions. It demonstrates mapping image files to stubs, substituting captured regex groups, and providing an array of possible paths for a single alias, which is crucial for handling non-JavaScript assets or complex module resolutions during testing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#_snippet_38

LANGUAGE: JavaScript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  moduleNameMapper: {
    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',
    '^[./a-zA-Z0-9$_-]+\.png$': '<rootDir>/RelativeImageStub.js',
    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',
    'assets/(.*)': [
      '<rootDir>/images/$1',
      '<rootDir>/photos/$1',
      '<rootDir>/recipes/$1'
    ]
  }
};

module.exports = config;
```

----------------------------------------

TITLE: Mocking Constructor Function with jest.mock() and Module Factory (JavaScript)
DESCRIPTION: This snippet demonstrates how to mock a constructor function using `jest.mock()` with a module factory. The factory returns a higher-order function that, when called, returns an object with the mocked `playSoundFile` method, allowing `new` to be called on the mock. It uses a `jest.fn()` for the inner method to enable spying.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import SoundPlayer from './sound-player';
const mockPlaySoundFile = jest.fn();
jest.mock('./sound-player', () => {
  return jest.fn().mockImplementation(() => {
    return {playSoundFile: mockPlaySoundFile};
  });
});
```

----------------------------------------

TITLE: Asserting Jest Mock Function Call Details - JavaScript
DESCRIPTION: This snippet provides examples of common Jest assertions used with the `.mock` property to verify various aspects of a mock function's calls. It demonstrates checking call count, arguments, return values, `this` context, instances, and the last call's arguments.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// The function was called exactly once
expect(someMockFunction.mock.calls).toHaveLength(1);

// The first arg of the first call to the function was 'first arg'
expect(someMockFunction.mock.calls[0][0]).toBe('first arg');

// The second arg of the first call to the function was 'second arg'
expect(someMockFunction.mock.calls[0][1]).toBe('second arg');

// The return value of the first call to the function was 'return value'
expect(someMockFunction.mock.results[0].value).toBe('return value');

// The function was called with a certain `this` context: the `element` object.
expect(someMockFunction.mock.contexts[0]).toBe(element);

// This function was instantiated exactly twice
expect(someMockFunction.mock.instances.length).toBe(2);

// The object returned by the first instantiation of this function
// had a `name` property whose value was set to 'test'
expect(someMockFunction.mock.instances[0].name).toBe('test');

// The first argument of the last call to the function was 'test'
expect(someMockFunction.mock.lastCall[0]).toBe('test');
```

----------------------------------------

TITLE: Parameterized Test Suite with `describe.each` using Array of Objects (Jest)
DESCRIPTION: This example illustrates `describe.each` using an array of objects for test data. Each object's properties are destructured and passed to the test function. The suite title leverages `$variable` syntax to inject object properties, providing clear, data-driven test descriptions.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
describe.each([
  {a: 1, b: 1, expected: 2},
  {a: 1, b: 2, expected: 3},
  {a: 2, b: 1, expected: 3},
])('.add($a, $b)', ({a, b, expected}) => {
  test(`returns ${expected}`, () => {
    expect(a + b).toBe(expected);
  });

  test(`returned value not be greater than ${expected}`, () => {
    expect(a + b).not.toBeGreaterThan(expected);
  });

  test(`returned value not be less than ${expected}`, () => {
    expect(a + b).not.toBeLessThan(expected);
  });
});
```

----------------------------------------

TITLE: Mocking an Async Function with mockResolvedValue in Jest (JavaScript)
DESCRIPTION: Illustrates how to use `mockResolvedValue` to make a mock function return a resolved Promise, useful for testing asynchronous code. The mock will consistently resolve with the specified value.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#_snippet_23

LANGUAGE: javascript
CODE:
```
test('async test', async () => {
  const asyncMock = jest.fn().mockResolvedValue(43);

  await asyncMock(); // 43
});
```

----------------------------------------

TITLE: Extending Jest Matchers and Setting Up Teardown Hooks (JavaScript)
DESCRIPTION: This JavaScript snippet, intended for `setupFilesAfterEnv`, demonstrates how to extend Jest's `expect` matchers using `jest-extended` and how to define an `afterEach` hook to reset timers, providing common setup and teardown logic for test files.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#_snippet_72

LANGUAGE: JavaScript
CODE:
```
const matchers = require('jest-extended');
expect.extend(matchers);

afterEach(() => {
  jest.useRealTimers();
});
```

----------------------------------------

TITLE: Configuring ESLint Environment for Jest Globals
DESCRIPTION: This JSON configuration snippet for ESLint sets the 'jest' environment to 'true' for files within the 'tests/' directory. This tells ESLint to predefine Jest global variables (e.g., 'describe', 'test', 'expect'), preventing 'no-undef' errors when these globals are used without explicit imports.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#_snippet_17

LANGUAGE: JSON
CODE:
```
{
  "overrides": [
    {
      "files": ["tests/**/*"],
      "env": {
        "jest": true
      }
    }
  ]
}
```

----------------------------------------

TITLE: Installing eslint-plugin-jest with Yarn - Shell
DESCRIPTION: This command installs the official `eslint-plugin-jest` package and ESLint itself as development dependencies using Yarn. This plugin provides ESLint rules specifically for Jest to help prevent common testing mistakes.
SOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2017-02-21-jest-19-immersive-watch-mode-test-platform-improvements.md#_snippet_3

LANGUAGE: Shell
CODE:
```
yarn add --dev eslint eslint-plugin-jest
```

----------------------------------------

TITLE: Managing Resource Setup and Teardown with Jest Hooks - JavaScript
DESCRIPTION: This example illustrates the execution order of `beforeEach` and `afterEach` hooks in Jest, including nested `describe` blocks. It demonstrates how `beforeEach` hooks are called in declaration order, and `afterEach` hooks of the enclosing scope are called first, then inner ones, and then outer ones in reverse declaration order (for `afterEach`). This pattern is crucial for managing dependent resources.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#_snippet_6

LANGUAGE: js
CODE:
```
beforeEach(() => console.log('connection setup'));
beforeEach(() => console.log('database setup'));

afterEach(() => console.log('database teardown'));
afterEach(() => console.log('connection teardown'));

test('test 1', () => console.log('test 1'));

describe('extra', () => {
  beforeEach(() => console.log('extra database setup'));
  afterEach(() => console.log('extra database teardown'));

  test('test 2', () => console.log('test 2'));
});

// connection setup
// database setup
// test 1
// database teardown
// connection teardown

// connection setup
// database setup
// extra database setup
// test 2
// extra database teardown
// database teardown
// connection teardown
```

----------------------------------------

TITLE: Installing Babel TypeScript Preset for Jest
DESCRIPTION: This command installs the @babel/preset-typescript package as a development dependency. This preset is required to enable TypeScript transpilation via Babel for Jest tests, allowing Babel to understand and process TypeScript syntax.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#_snippet_11

LANGUAGE: Bash
CODE:
```
npm install --save-dev @babel/preset-typescript
```

----------------------------------------

TITLE: Installing Jest JSDOM Environment
DESCRIPTION: This command installs the 'jest-environment-jsdom' package as a development dependency. This package is crucial for Jest to simulate a browser-like DOM environment, allowing tests to interact with DOM APIs as they would in a real browser, which is necessary for testing DOM manipulation code.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialjQuery.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install --save-dev jest-environment-jsdom
```

----------------------------------------

TITLE: Installing React Test Renderer with npm
DESCRIPTION: This command installs the 'react-test-renderer' package as a development dependency. It is essential for rendering React components into plain JavaScript objects, which is required for Jest's snapshot testing feature, especially when using Create React App.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-dev react-test-renderer
```

----------------------------------------

TITLE: Using `jest.useFakeTimers` in Jest Test Files
DESCRIPTION: This snippet illustrates how to enable fake timers within a specific test file using `jest.useFakeTimers()`. It also shows how to override the globally configured `fakeTimers` options for a particular test or block of tests by passing a configuration object.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#_snippet_23

LANGUAGE: javascript
CODE:
```
// install fake timers for this file using the options from Jest configuration
jest.useFakeTimers();

test('increase the limit of recursive timers for this and following tests', () => {
  jest.useFakeTimers({timerLimit: 5000});
  // ...
});
```

----------------------------------------

TITLE: Testing Exceptions with Jest toThrow Matcher (JavaScript)
DESCRIPTION: This example demonstrates how to use Jest's `toThrow` matcher to assert that a function call throws an error. It shows various ways to use `toThrow`: without arguments (any error), with an error constructor (`Error`), with a string to match in the error message, and with a regular expression for partial or exact message matching. The function throwing the error must be wrapped in another function.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UsingMatchers.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
function compileAndroidCode() {
  throw new Error('you are using the wrong JDK!');
}

test('compiling android goes as expected', () => {
  expect(() => compileAndroidCode()).toThrow();
  expect(() => compileAndroidCode()).toThrow(Error);

  // You can also use a string that must be contained in the error message or a regexp
  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');
  expect(() => compileAndroidCode()).toThrow(/JDK/);

  // Or you can match an exact error message using a regexp like below
  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails
  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass
});
```

----------------------------------------

TITLE: Defining a Basic Test Case with Jest's test - JavaScript
DESCRIPTION: This snippet shows the fundamental usage of the `test` method (or its alias `it`) to define a single test case. It takes a test name and a function containing the assertions. An optional third argument specifies a timeout in milliseconds, overriding the default 5-second timeout.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_15

LANGUAGE: js
CODE:
```
test('did not rain', () => {
  expect(inchesOfRain()).toBe(0);
});
```

----------------------------------------

TITLE: Data-Driven Testing with `test.each` (Tagged Template Literal) in Jest
DESCRIPTION: This example illustrates `test.each` using a tagged template literal for defining test data. The first row specifies column headings, and subsequent rows use `${value}` for data. The test title injects values using `$variable` syntax, and the test function receives a destructured object.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#_snippet_26

LANGUAGE: JavaScript
CODE:
```
test.each`
  a    | b    | expected
  ${1} | ${1} | ${2}
  ${1} | ${2} | ${3}
  ${2} | ${1} | ${3}
`('returns $expected when $a is added to $b', ({a, b, expected}) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Setting Up Before All Tests with Jest `beforeAll` (JavaScript)
DESCRIPTION: This snippet demonstrates using Jest's `beforeAll` hook to perform setup operations once before any tests in a file begin. It's ideal for initializing global state, such as clearing and populating a database with test data. The `fn` parameter is the function to run, and `timeout` (optional) specifies the wait time. It supports asynchronous setup by waiting for promises to resolve.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

beforeAll(() => {
  // Clears the database and adds some testing data.
  // Jest will wait for this promise to resolve before running tests.
  return globalDatabase.clear().then(() => {
    return globalDatabase.insert({testData: 'foo'});
  });
});

// Since we only set up the database once in this example, it's important
// that our tests don't modify it.
test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});
```

----------------------------------------

TITLE: Running Jest in Watch Mode
DESCRIPTION: These commands enable Jest's watch mode, which continuously monitors file changes and re-runs relevant tests. `--watch` defaults to running tests for changed files, while `--watchAll` runs all tests upon any change, providing continuous feedback during development.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#_snippet_5

LANGUAGE: bash
CODE:
```
jest --watch #runs jest -o by default
jest --watchAll #runs all tests
```

----------------------------------------

TITLE: Isolating a Single Test for Debugging with Jest in JavaScript
DESCRIPTION: This snippet demonstrates how to use `test.only` to run only a specific test within a test file. This is a common debugging technique to isolate a failing test and determine if its failure is due to interference from other tests or shared state.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
test.only('this will be the only test that runs', () => {
  expect(true).toBe(false);
});

test('this test will not run', () => {
  expect('A').toBe('A');
});
```

----------------------------------------

TITLE: Defining Test Cases with Jest .each (Array of Objects - Inline) - TypeScript
DESCRIPTION: This snippet demonstrates using `test.each` with an inline array of objects. This approach is verbose but ensures correct type inference for the arguments passed to the test callback function, such as `write: boolean | undefined`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_36

LANGUAGE: TypeScript
CODE:
```
import {test} from '@jest/globals';

test.each([
  {name: 'a', path: 'path/to/a', count: 1, write: true},
  {name: 'b', path: 'path/to/b', count: 3}
])('inline table', ({name, path, count, write}) => {
  // arguments are typed as expected, e.g. `write: boolean | undefined`
});
```

----------------------------------------

TITLE: Using jest.mocked() for Type-Safe Mocks (TypeScript)
DESCRIPTION: This Jest test file illustrates the application of `jest.mocked()` for creating type-safe mocks. It demonstrates mocking both a custom deeply nested object (`song`) and a global function (`console.log`), showcasing how to set mock return values and verify call counts while maintaining strong type inference.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#_snippet_29

LANGUAGE: TypeScript
CODE:
```
import {expect, jest, test} from '@jest/globals';
import {song} from './song';

jest.mock('./song');
jest.spyOn(console, 'log');

const mockedSong = jest.mocked(song);
// or through `jest.Mocked<Source>`
// const mockedSong = song as jest.Mocked<typeof song>;

test('deep method is typed correctly', () => {
  mockedSong.one.more.time.mockReturnValue(12);

  expect(mockedSong.one.more.time(10)).toBe(12);
  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);
});

test('direct usage', () => {
  jest.mocked(console.log).mockImplementation(() => {
    return;
  });

  console.log('one more time');

  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);
});
```

----------------------------------------

TITLE: Configuring Babel for React with Jest
DESCRIPTION: Sets up Babel presets in `babel.config.js` to transpile modern JavaScript and React JSX syntax. It includes `@babel/preset-env` for environment-specific transformations and `@babel/preset-react` with `runtime: 'automatic'` for React's new JSX transform, ensuring compatibility within the Jest test environment.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  presets: [
    '@babel/preset-env',
    ['@babel/preset-react', {runtime: 'automatic'}],
  ],
};
```

----------------------------------------

TITLE: Testing ES6 Class with Jest Automatic Mock
DESCRIPTION: This example demonstrates how to use Jest's automatic mocking feature for an ES6 class. By calling `jest.mock('./sound-player')`, Jest replaces the original class with a mock constructor and mock methods. The tests show how to clear mocks, assert that the class constructor was called, and verify method calls on the mock instance using `mock.instances` and `toHaveBeenCalledWith`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import SoundPlayer from './sound-player';
import SoundPlayerConsumer from './sound-player-consumer';
jest.mock('./sound-player'); // SoundPlayer is now a mock constructor

beforeEach(() => {
  // Clear all instances and calls to constructor and all methods:
  SoundPlayer.mockClear();
});

it('We can check if the consumer called the class constructor', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  expect(SoundPlayer).toHaveBeenCalledTimes(1);
});

it('We can check if the consumer called a method on the class instance', () => {
  // Show that mockClear() is working:
  expect(SoundPlayer).not.toHaveBeenCalled();

  const soundPlayerConsumer = new SoundPlayerConsumer();
  // Constructor should have been called again:
  expect(SoundPlayer).toHaveBeenCalledTimes(1);

  const coolSoundFileName = 'song.mp3';
  soundPlayerConsumer.playSomethingCool();

  // mock.instances is available with automatic mocks:
  const mockSoundPlayerInstance = SoundPlayer.mock.instances[0];
  const mockPlaySoundFile = mockSoundPlayerInstance.playSoundFile;
  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);
  // Equivalent to above check:
  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);
  expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Installing Jest and Babel Dependencies for React
DESCRIPTION: Installs Jest, `babel-jest`, and Babel presets (`@babel/preset-env`, `@babel/preset-react`) along with `react-test-renderer` as development dependencies. This setup is required for existing React applications to transform modern JavaScript and React JSX syntax within the Jest test environment.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#_snippet_1

LANGUAGE: Bash
CODE:
```
npm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer
```

----------------------------------------

TITLE: Testing Basic Timer Functionality with Jest Fake Timers (JavaScript)
DESCRIPTION: This test suite demonstrates how to use `jest.useFakeTimers()` to mock native timer functions and `jest.spyOn(global, 'setTimeout')` to assert that `setTimeout` is called correctly. It verifies that `setTimeout` is invoked once with the expected function and delay without waiting for real time to elapse.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TimerMocks.md#_snippet_1

LANGUAGE: javascript
CODE:
```
jest.useFakeTimers();
jest.spyOn(global, 'setTimeout');

test('waits 1 second before ending the game', () => {
  const timerGame = require('../timerGame');
  timerGame();

  expect(setTimeout).toHaveBeenCalledTimes(1);
  expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);
});
```

----------------------------------------

TITLE: Configuring package.json for Jest and React
DESCRIPTION: Defines the `dependencies` and `devDependencies` required for a React application using Jest, including React, ReactDOM, Babel presets, `babel-jest`, Jest, and `react-test-renderer`. It also adds a `test` script to run Jest, simplifying test execution.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "dependencies": {
    "react": "<current-version>",
    "react-dom": "<current-version>"
  },
  "devDependencies": {
    "@babel/preset-env": "<current-version>",
    "@babel/preset-react": "<current-version>",
    "babel-jest": "<current-version>",
    "jest": "<current-version>",
    "react-test-renderer": "<current-version>"
  },
  "scripts": {
    "test": "jest"
  }
}
```

----------------------------------------

TITLE: Asserting Jest Mock Function Properties in JavaScript
DESCRIPTION: This example demonstrates various assertions using Jest's `.mock` property to verify how a mock function was called. It shows how to check call count, arguments, return values, `this` context, instantiation count, and properties of instantiated objects, as well as the arguments of the last call.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// The function was called exactly once
expect(someMockFunction.mock.calls).toHaveLength(1);

// The first arg of the first call to the function was 'first arg'
expect(someMockFunction.mock.calls[0][0]).toBe('first arg');

// The second arg of the first call to the function was 'second arg'
expect(someMockFunction.mock.calls[0][1]).toBe('second arg');

// The return value of the first call to the function was 'return value'
expect(someMockFunction.mock.results[0].value).toBe('return value');

// The function was called with a certain `this` context: the `element` object.
expect(someMockFunction.mock.contexts[0]).toBe(element);

// This function was instantiated exactly twice
expect(someMockFunction.mock.instances.length).toBe(2);

// The object returned by the first instantiation of this function
// had a `name` property whose value was set to 'test'
expect(someMockFunction.mock.instances[0].name).toBe('test');

// The first argument of the last call to the function was 'test'
expect(someMockFunction.mock.lastCall[0]).toBe('test');
```

----------------------------------------

TITLE: Running Tests for Changed Files with Jest CLI
DESCRIPTION: This command executes tests related to files that have been changed or are uncommitted according to the version control system (Git or Mercurial). It's useful for quickly testing only the affected parts of the codebase.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#_snippet_2

LANGUAGE: bash
CODE:
```
jest -o
```

----------------------------------------

TITLE: Running a Single Test Suite with `describe.only` - JavaScript
DESCRIPTION: This snippet shows how to use `describe.only` (or its alias `fdescribe`) to execute only a specific test suite, skipping all other `describe` blocks in the file. This is useful for focusing on a particular set of tests during development or debugging. The example includes two `test` cases within the focused suite.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
describe.only('my beverage', () => {
  test('is delicious', () => {
    expect(myBeverage.delicious).toBeTruthy();
  });

  test('is not sour', () => {
    expect(myBeverage.sour).toBeFalsy();
  });
});

describe('my other beverage', () => {
  // ... will be skipped
});
```

----------------------------------------

TITLE: Replacing Mock Implementation - JavaScript
DESCRIPTION: Shows how to replace the default implementation of a mocked function using `mockImplementation()`. After mocking the `../foo` module, its exported function is configured to always return `42`, demonstrating how to control the behavior of external dependencies in tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
jest.mock('../foo'); // this happens automatically with automocking
const foo = require('../foo');

// foo is a mock function
foo.mockImplementation(() => 42);
foo();
// > 42
```

----------------------------------------

TITLE: Partially Mocking a Module with jest.requireActual in Jest (TS)
DESCRIPTION: This TypeScript example illustrates how to use `jest.requireActual` within a `jest.mock` factory to get the original module, enabling partial mocking. It highlights the use of a type argument (`<typeof import('../myModule')>`) with `jest.requireActual` to ensure type safety when accessing the original module's exports. This pattern is essential for maintaining strong typing while selectively overriding module behavior in TypeScript tests.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#_snippet_22

LANGUAGE: ts
CODE:
```
jest.mock('../myModule', () => {
  // Require the original module to not be mocked...
  const originalModule =
    jest.requireActual<typeof import('../myModule')>('../myModule');

  return {
    __esModule: true, // Use it when dealing with esModules
    ...originalModule,
    getRandom: jest.fn(() => 10)
  };
});

const getRandom = require('../myModule').getRandom;

getRandom(); // Always returns 10
```

----------------------------------------

TITLE: Mocking a Constructor Function with `jest.mock()` and Module Factory (JavaScript)
DESCRIPTION: This snippet demonstrates how to mock a constructor function using `jest.mock()` with a module factory. The factory returns a higher-order function that, when called, returns an object with a mocked `playSoundFile` method. This setup allows `new SoundPlayer()` to return the mocked instance.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import SoundPlayer from './sound-player';
const mockPlaySoundFile = jest.fn();
jest.mock('./sound-player', () => {
  return jest.fn().mockImplementation(() => {
    return {playSoundFile: mockPlaySoundFile};
  });
});
```

----------------------------------------

TITLE: Using Jest .each with Array of Objects as a Variable in TypeScript
DESCRIPTION: This example shows `test.each` utilizing an array of objects declared as a separate variable. Similar to the inline approach, this method also provides correct type inference for the test callback arguments, ensuring type safety for properties like `a`, `b`, `expected`, and `extra`.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_38

LANGUAGE: TypeScript
CODE:
```
import {test} from '@jest/globals';

const table = [
  {a: 1, b: 2, expected: 'three', extra: true},
  {a: 3, b: 4, expected: 'seven', extra: false},
  {a: 5, b: 6, expected: 'eleven'},
];

test.each(table)('table as a variable', ({a, b, expected, extra}) => {
  // again everything is typed as expected, e.g. `extra: boolean | undefined`
});
```

----------------------------------------

TITLE: Cleaning Up After Each Test with Jest afterEach (JavaScript)
DESCRIPTION: This example illustrates using `afterEach` to clean up temporary state after every test in a file. Similar to `afterAll`, it can handle asynchronous operations and is useful for ensuring that each test starts with a clean slate. The function also accepts an optional `timeout` parameter.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

function cleanUpDatabase(db) {
  db.cleanUp();
}

afterEach(() => {
  cleanUpDatabase(globalDatabase);
});

test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});

test('can insert a thing', () => {
  return globalDatabase.insert('thing', makeThing(), response => {
    expect(response.success).toBeTruthy();
  });
});
```

----------------------------------------

TITLE: Testing Users Class with Jest Module Mocking (JavaScript)
DESCRIPTION: This test suite demonstrates how to mock the `axios` module using `jest.mock('axios')` to prevent actual API calls. It uses `mockResolvedValue` to simulate a successful API response, allowing the test to assert against predefined user data without network dependencies.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import axios from 'axios';
import Users from './users';

jest.mock('axios');

test('should fetch users', () => {
  const users = [{name: 'Bob'}];
  const resp = {data: users};
  axios.get.mockResolvedValue(resp);

  // or you could use the following depending on your use case:
  // axios.get.mockImplementation(() => Promise.resolve(resp))

  return Users.all().then(data => expect(data).toEqual(users));
});
```

----------------------------------------

TITLE: Matching Partial Objects with expect.objectContaining in Jest
DESCRIPTION: This snippet demonstrates `expect.objectContaining` for verifying that a received object contains a specific subset of properties. It's useful when you only care about certain properties of an object, allowing the use of other matchers like `expect.any(Number)` for property values.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_50

LANGUAGE: JavaScript
CODE:
```
test('onPress gets called with the right thing', () => {
  const onPress = jest.fn();
  simulatePresses(onPress);
  expect(onPress).toHaveBeenCalledWith(
    expect.objectContaining({
      x: expect.any(Number),
      y: expect.any(Number),
    }),
  );
});
```

----------------------------------------

TITLE: Running Tests by Spec Name with Jest CLI
DESCRIPTION: Executes tests whose `describe` or `test` block names match the provided pattern. This allows for granular control over which specific test cases are run, aiding in debugging or focused development.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#_snippet_4

LANGUAGE: bash
CODE:
```
jest -t name-of-spec
```

----------------------------------------

TITLE: Configuring ESLint with eslint-plugin-jest
DESCRIPTION: Configures ESLint to use `eslint-plugin-jest` for linting Jest-specific code. This involves adding `jest` to the `plugins` array and setting `jest/globals` to `true` in the `env` object for test files, providing comprehensive linting for Jest syntax.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#_snippet_18

LANGUAGE: json
CODE:
```
{
  "overrides": [
    {
      "files": ["tests/**/*"],
      "plugins": ["jest"],
      "env": {
        "jest/globals": true
      }
    }
  ]
}
```

----------------------------------------

TITLE: Installing Jest Global Type Definitions
DESCRIPTION: Installs the `@jest/globals` package as a development dependency. This package provides type definitions for Jest's global APIs, such as `describe`, `expect`, and `test`, ensuring type safety in TypeScript test files.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#_snippet_14

LANGUAGE: bash
CODE:
```
npm install --save-dev @jest/globals
```

----------------------------------------

TITLE: Verifying Assertion Count with expect.assertions in Jest (JavaScript)
DESCRIPTION: This snippet demonstrates `expect.assertions(number)`, a Jest utility that ensures a specific number of assertions are executed within a test. It is particularly useful for asynchronous code to confirm that assertions inside callbacks are indeed invoked, preventing tests from passing silently if callbacks are not called.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_55

LANGUAGE: JavaScript
CODE:
```
test('doAsync calls both callbacks', () => {
  expect.assertions(2);
  function callback1(data) {
    expect(data).toBeTruthy();
  }
  function callback2(data) {
    expect(data).toBeTruthy();
  }

  doAsync(callback1, callback2);
});
```

----------------------------------------

TITLE: Running Specific Tests with `test.only` in Jest (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `test.only` to execute only a specific test within a test file, which is useful for debugging. It prevents other tests in the same file from running. An optional `timeout` parameter can be provided to set a custom timeout for the test.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_29

LANGUAGE: JavaScript
CODE:
```
test.only('it is raining', () => {
  expect(inchesOfRain()).toBeGreaterThan(0);
});

test('it is not snowing', () => {
  expect(inchesOfSnow()).toBe(0);
});
```

----------------------------------------

TITLE: Testing Resolved Promises with `.resolves` in Jest (Return)
DESCRIPTION: This snippet demonstrates using `.resolves` to test the value of a fulfilled promise. By returning the `expect` assertion, Jest waits for the promise to resolve before completing the test. It asserts that `Promise.resolve('lemon')` resolves to 'lemon'.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_2

LANGUAGE: js
CODE:
```
test('resolves to lemon', () => {
  // make sure to add a return statement
  return expect(Promise.resolve('lemon')).resolves.toBe('lemon');
});
```

----------------------------------------

TITLE: Configuring Jest `moduleNameMapper` for Aliasing in JavaScript
DESCRIPTION: This snippet demonstrates configuring Jest's `moduleNameMapper` in a JavaScript file to alias modules using regular expressions. It shows examples for stubbing resources like images, mapping paths relative to `<rootDir>`, and using backreferences for dynamic substitutions, including mapping a single alias to multiple possible paths.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#_snippet_43

LANGUAGE: JavaScript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  moduleNameMapper: {
    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',
    '^[./a-zA-Z0-9$_-]+\.png$': '<rootDir>/RelativeImageStub.js',
    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',
    'assets/(.*)': [
      '<rootDir>/images/$1',
      '<rootDir>/photos/$1',
      '<rootDir>/recipes/$1'
    ]
  }
};

module.exports = config;
```

----------------------------------------

TITLE: One-Time Setup with beforeAll and afterAll in Jest
DESCRIPTION: This snippet illustrates the use of `beforeAll` and `afterAll` for setup and teardown that only needs to occur once per test file. This is ideal for expensive operations like database connections that can be reused across multiple tests, improving test performance.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
beforeAll(() => {
  return initializeCityDatabase();
});

afterAll(() => {
  return clearCityDatabase();
});

test('city database has Vienna', () => {
  expect(isCity('Vienna')).toBeTruthy();
});

test('city database has San Juan', () => {
  expect(isCity('San Juan')).toBeTruthy();
});
```

----------------------------------------

TITLE: Configuring Jest moduleNameMapper in JavaScript
DESCRIPTION: This snippet shows how to configure Jest's `moduleNameMapper` option in a JavaScript configuration file. It defines multiple regular expression mappings to alias module paths, including stubs for images and dynamic substitutions using backreferences and arrays for multiple possible paths, facilitating resource mocking during tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#_snippet_38

LANGUAGE: JavaScript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  moduleNameMapper: {
    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',
    '^[./a-zA-Z0-9$_-]+\.png$': '<rootDir>/RelativeImageStub.js',
    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',
    'assets/(.*)': [
      '<rootDir>/images/$1',
      '<rootDir>/photos/$1',
      '<rootDir>/recipes/$1'
    ]
  }
};

module.exports = config;
```

----------------------------------------

TITLE: Creating a React Component Snapshot Test with Jest
DESCRIPTION: This snippet demonstrates how to write a snapshot test for a React component using Jest and `react-test-renderer`. It creates a serializable JSON tree of the component and then uses `expect().toMatchSnapshot()` to compare it against a stored snapshot, ensuring the UI remains consistent across changes.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import renderer from 'react-test-renderer';
import Link from '../Link';

it('renders correctly', () => {
  const tree = renderer
    .create(<Link page="http://www.facebook.com">Facebook</Link>)
    .toJSON();
  expect(tree).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Comparing Numbers with Jest Matchers (JavaScript)
DESCRIPTION: This snippet showcases Jest matchers for numerical comparisons, including `toBeGreaterThan`, `toBeGreaterThanOrEqual`, `toBeLessThan`, and `toBeLessThanOrEqual`. It also notes that `toBe` and `toEqual` behave equivalently for numbers, providing flexible options for asserting numerical relationships.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#_snippet_4

LANGUAGE: js
CODE:
```
test('two plus two', () => {
  const value = 2 + 2;
  expect(value).toBeGreaterThan(3);
  expect(value).toBeGreaterThanOrEqual(3.5);
  expect(value).toBeLessThan(5);
  expect(value).toBeLessThanOrEqual(4.5);

  // toBe and toEqual are equivalent for numbers
  expect(value).toBe(4);
  expect(value).toEqual(4);
});
```

----------------------------------------

TITLE: Configuring Jest with custom transformers and CSS Modules
DESCRIPTION: This Jest configuration demonstrates how to combine `moduleNameMapper` for CSS Modules with a custom `transform` option for other static assets. It uses `identity-obj-proxy` for stylesheets and a custom `fileTransformer.js` for images and media, providing granular control over how different asset types are handled during testing.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#_snippet_7

LANGUAGE: js
CODE:
```
module.exports = {
  moduleNameMapper: {
    '\\.(css|less)$': 'identity-obj-proxy',
  },
  transform: {
    '\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':
      '<rootDir>/fileTransformer.js',
  },
};
```

----------------------------------------

TITLE: Mocking Resolved Promise Value with Jest `mockResolvedValue` (JavaScript)
DESCRIPTION: This method is a shorthand for `mockImplementation(() => Promise.resolve(value))`, useful for mocking asynchronous functions that are expected to resolve with a specific value. It ensures the mock function always returns a resolved promise.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#_snippet_16

LANGUAGE: js
CODE:
```
jest.fn().mockImplementation(() => Promise.resolve(value));
```

LANGUAGE: js
CODE:
```
test('async test', async () => {
  const asyncMock = jest.fn().mockResolvedValue(43);

  await asyncMock(); // 43
});
```

----------------------------------------

TITLE: Using test.each with Array of Objects (Jest)
DESCRIPTION: This example illustrates `test.each` using an array of objects as input. Object properties (`$a`, `$b`) are injected into the test title, providing a more readable and descriptive name for each test case. The test function destructures the input object.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
test.each([
  {a: 1, b: 1, expected: 2},
  {a: 1, b: 2, expected: 3},
  {a: 2, b: 1, expected: 3}
])('.add($a, $b)', ({a, b, expected}) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Setting One-Time Return Values with Jest `mockReturnValueOnce`
DESCRIPTION: The `mockReturnValueOnce` method allows a Jest mock function to return a specific value for a single invocation. This method can be chained to define different return values for successive calls. After all `mockReturnValueOnce` values are consumed, the mock function reverts to returning the value specified by `mockReturnValue`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
jest.fn().mockImplementationOnce(() => value);
```

LANGUAGE: JavaScript
CODE:
```
const mockFn = jest
  .fn()
  .mockReturnValue('default')
  .mockReturnValueOnce('first call')
  .mockReturnValueOnce('second call');

mockFn(); // 'first call'
mockFn(); // 'second call'
mockFn(); // 'default'
mockFn(); // 'default'
```

LANGUAGE: TypeScript
CODE:
```
import {jest} from '@jest/globals';

const mockFn = jest
  .fn<() => string>()
  .mockReturnValue('default')
  .mockReturnValueOnce('first call')
  .mockReturnValueOnce('second call');

mockFn(); // 'first call'
mockFn(); // 'second call'
mockFn(); // 'default'
mockFn(); // 'default'
```

----------------------------------------

TITLE: Testing React CheckboxWithLabel Component with React Testing Library
DESCRIPTION: Demonstrates how to test the `CheckboxWithLabel` component using `@testing-library/react`. It renders the component, asserts its initial state, simulates a click event, and then asserts the updated state, ensuring proper functionality.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#_snippet_13

LANGUAGE: TypeScript
CODE:
```
import {cleanup, fireEvent, render} from '@testing-library/react';
import CheckboxWithLabel from '../CheckboxWithLabel';

// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher
// unmount and cleanup DOM after the test is finished.
afterEach(cleanup);

it('CheckboxWithLabel changes the text after click', () => {
  const {queryByLabelText, getByLabelText} = render(
    <CheckboxWithLabel labelOn="On" labelOff="Off" />,
  );

  expect(queryByLabelText(/off/i)).toBeTruthy();

  fireEvent.click(getByLabelText(/off/i));

  expect(queryByLabelText(/on/i)).toBeTruthy();
});
```

----------------------------------------

TITLE: Mocking DOM API: window.matchMedia for JSDOM Testing - Javascript
DESCRIPTION: Provides a JavaScript code snippet to manually mock the `window.matchMedia` method in Jest tests when using JSDOM, as this method is often not implemented. It replaces the original property with a `jest.fn()` implementation returning a mock object that mimics the expected interface with properties and event listener methods.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ManualMocks.md#_snippet_4

LANGUAGE: javascript
CODE:
```
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(), // deprecated
    removeListener: jest.fn(), // deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});
```

----------------------------------------

TITLE: Installing Babel dependencies for Jest
DESCRIPTION: This command installs necessary Babel packages (`babel-jest`, `@babel/core`, `@babel/preset-env`) as development dependencies, enabling Jest to transform JavaScript code using Babel.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#_snippet_7

LANGUAGE: bash
CODE:
```
npm install --save-dev babel-jest @babel/core @babel/preset-env
```

----------------------------------------

TITLE: Testing Async Function with Async/Await in Jest (JavaScript)
DESCRIPTION: This Jest test shows how to use `async`/`await` syntax for testing asynchronous code. It awaits the promise resolution and then asserts the returned data, providing a more synchronous-looking test flow.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
// async/await can be used.
it('works with async/await', async () => {
  expect.assertions(1);
  const data = await user.getUserName(4);
  expect(data).toBe('Mark');
});
```

----------------------------------------

TITLE: Implementing Mock Function Behavior with `mockImplementation` (TypeScript)
DESCRIPTION: This TypeScript snippet illustrates how to use `mockImplementation` to define a custom function for a mock, including type annotations for clarity. It shows how to initially set an implementation and then change it dynamically.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#_snippet_6

LANGUAGE: typescript
CODE:
```
import {jest} from '@jest/globals';

const mockFn = jest.fn((scalar: number) => 42 + scalar);

mockFn(0); // 42
mockFn(1); // 43

mockFn.mockImplementation(scalar => 36 + scalar);

mockFn(2); // 38
mockFn(3); // 39
```

----------------------------------------

TITLE: Advancing Timers to Next Scheduled Timer in Jest
DESCRIPTION: This function advances all timers just enough milliseconds to execute only the next scheduled timeouts or intervals. Optionally, you can provide a `steps` argument to execute a specified number of subsequent timers.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#_snippet_42

LANGUAGE: JavaScript
CODE:
```
jest.advanceTimersToNextTimer(steps)
```

----------------------------------------

TITLE: Correcting Module Import with `jest.requireActual` in Jest
DESCRIPTION: This snippet demonstrates the correct way to import the `Response` class from `node-fetch` using `jest.requireActual`. This ensures that while `fetch` itself is mocked, the `Response` class retains its original implementation, resolving the `TypeError` encountered in the previous test.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/BypassingModuleMocks.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// AFTER
jest.mock('node-fetch');
import fetch from 'node-fetch';
const {Response} = jest.requireActual('node-fetch');
```

----------------------------------------

TITLE: Matching Arrays with `expect.arrayContaining` in Jest
DESCRIPTION: This snippet demonstrates how `expect.arrayContaining` matches a received array that contains all elements of the expected array, even if the received array has additional elements. It also shows cases where it does not match if expected elements are missing.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_46

LANGUAGE: JavaScript
CODE:
```
describe('arrayContaining', () => {
  const expected = ['Alice', 'Bob'];
  it('matches even if received contains additional elements', () => {
    expect(['Alice', 'Bob', 'Eve']).toEqual(expect.arrayContaining(expected));
  });
  it('does not match if received does not contain expected elements', () => {
    expect(['Bob', 'Eve']).not.toEqual(expect.arrayContaining(expected));
  });
});
```

LANGUAGE: JavaScript
CODE:
```
describe('Beware of a misunderstanding! A sequence of dice rolls', () => {
  const expected = [1, 2, 3, 4, 5, 6];
  it('matches even with an unexpected number 7', () => {
    expect([4, 1, 6, 7, 3, 5, 2, 5, 4, 6]).toEqual(
      expect.arrayContaining(expected),
    );
  });
  it('does not match without an expected number 2', () => {
    expect([4, 1, 6, 7, 3, 5, 7, 5, 4, 6]).not.toEqual(
      expect.arrayContaining(expected),
    );
  });
});
```

----------------------------------------

TITLE: Data-Driven Testing with `test.each` (Array of Objects) in Jest
DESCRIPTION: This example illustrates `test.each` using an array of objects as test data. Object properties (`$a`, `$b`) are injected directly into the test title, providing a clear description for each iteration. The test function destructures the object to access the parameters.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_25

LANGUAGE: js
CODE:
```
test.each([
  {a: 1, b: 1, expected: 2},
  {a: 1, b: 2, expected: 3},
  {a: 2, b: 1, expected: 3}
])('.add($a, $b)', ({a, b, expected}) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Mocking a Specific Class Method with jest.spyOn
DESCRIPTION: This snippet shows how to mock or spy on a specific instance method of a class using `jest.spyOn`. It targets `SoundPlayer.prototype.playSoundFile` and replaces its implementation, then asserts that the mocked method was called during a test.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#_snippet_12

LANGUAGE: javascript
CODE:
```
import SoundPlayer from './sound-player';
import SoundPlayerConsumer from './sound-player-consumer';

const playSoundFileMock = jest
  .spyOn(SoundPlayer.prototype, 'playSoundFile')
  .mockImplementation(() => {
    console.log('mocked function');
  }); // comment this line if just want to "spy"

it('player consumer plays music', () => {
  const player = new SoundPlayerConsumer();
  player.playSomethingCool();
  expect(playSoundFileMock).toHaveBeenCalled();
});
```

----------------------------------------

TITLE: Increasing Jest Timeout for Asynchronous Tests
DESCRIPTION: This snippet demonstrates how to increase the default timeout for Jest tests using `jest.setTimeout`. This is crucial for tests involving long-running asynchronous operations or external service calls, preventing 'Timeout - Async callback was not invoked' errors.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/Troubleshooting.md#_snippet_5

LANGUAGE: js
CODE:
```
jest.setTimeout(10_000); // 10 second timeout
```

----------------------------------------

TITLE: Configuring ESLint with eslint-plugin-jest
DESCRIPTION: This JSON configuration snippet for ESLint demonstrates how to integrate eslint-plugin-jest. By adding 'jest' to plugins and setting 'jest/globals' to 'true' in the environment for test files, ESLint gains awareness of Jest's global variables and provides Jest-specific linting rules, enhancing code quality in test suites.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#_snippet_18

LANGUAGE: JSON
CODE:
```
{
  "overrides": [
    {
      "files": ["tests/**/*"],
      "plugins": ["jest"],
      "env": {
        "jest/globals": true
      }
    }
  ]
}
```

----------------------------------------

TITLE: Asserting Null Values with toBeNull in Jest
DESCRIPTION: The `toBeNull` matcher is used to specifically check if a value is `null`. It provides clearer error messages compared to using `toBe(null)` directly.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_27

LANGUAGE: JavaScript
CODE:
```
function bloop() {
  return null;
}

test('bloop returns null', () => {
  expect(bloop()).toBeNull();
});
```

----------------------------------------

TITLE: Enabling Jest Watch Mode
DESCRIPTION: Starts Jest in watch mode, which automatically re-runs tests when relevant files change. `--watch` defaults to running tests for changed files, while `--watchAll` runs all tests on changes, providing continuous feedback during development.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#_snippet_5

LANGUAGE: bash
CODE:
```
jest --watch #runs jest -o by default
jest --watchAll #runs all tests
```

----------------------------------------

TITLE: Configuring Jest to Use Setup Files After Environment in TypeScript
DESCRIPTION: This TypeScript configuration snippet illustrates how to specify a setup file, `setup-jest.js`, via the `setupFilesAfterEnv` option. This ensures the script executes after the test framework is set up but before tests run, enabling global configurations like custom matchers.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#_snippet_61

LANGUAGE: TypeScript
CODE:
```
import type {Config} from 'jest';

const config: Config = {
  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],
};

export default config;
```

----------------------------------------

TITLE: Configuring Jest moduleNameMapper in JavaScript
DESCRIPTION: This JavaScript snippet illustrates how to use Jest's `moduleNameMapper` option to map module names using regular expressions. It defines aliases for image stubs and allows substituting captured regex groups, facilitating custom module resolution and mocking.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#_snippet_38

LANGUAGE: js
CODE:
```
/** @type {import('jest').Config} */
const config = {
  moduleNameMapper: {
    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',
    '^[./a-zA-Z0-9$_-]+\.png$': '<rootDir>/RelativeImageStub.js',
    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',
    'assets/(.*)': [
      '<rootDir>/images/$1',
      '<rootDir>/photos/$1',
      '<rootDir>/recipes/$1'
    ]
  }
};

module.exports = config;
```

----------------------------------------

TITLE: Filtering Jest Tests by Name Pattern
DESCRIPTION: Shows how to use the `-t` alias (or `--testNamePattern`) to run only Jest tests whose full name (including describe blocks) matches the provided regular expression, in this case, 'auth'.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#_snippet_31

LANGUAGE: shell
CODE:
```
jest -t=auth
```

----------------------------------------

TITLE: Cleaning Up After All Tests with Jest `afterAll` (JavaScript)
DESCRIPTION: This snippet demonstrates how to use Jest's `afterAll` hook to perform cleanup operations once all tests in a file have completed. It shows cleaning up a global database instance after all tests, ensuring resources are released. The `fn` parameter is the function to run, and `timeout` (optional) specifies the wait time in milliseconds. It handles promises and generators, waiting for them to resolve.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

function cleanUpDatabase(db) {
  db.cleanUp();
}

afterAll(() => {
  cleanUpDatabase(globalDatabase);
});

test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});

test('can insert a thing', () => {
  return globalDatabase.insert('thing', makeThing(), response => {
    expect(response.success).toBeTruthy();
  });
});
```

----------------------------------------

TITLE: Scoping Setup and Teardown with describe Blocks in Jest
DESCRIPTION: This example demonstrates how Jest's setup/teardown hooks can be scoped using `describe` blocks. Top-level hooks apply to all tests in the file, while hooks inside a `describe` block apply only to tests within that specific block, allowing for modular and targeted test environments.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// Applies to all tests in this file
beforeEach(() => {
  return initializeCityDatabase();
});

test('city database has Vienna', () => {
  expect(isCity('Vienna')).toBeTruthy();
});

test('city database has San Juan', () => {
  expect(isCity('San Juan')).toBeTruthy();
});

describe('matching cities to foods', () => {
  // Applies only to tests in this describe block
  beforeEach(() => {
    return initializeFoodDatabase();
  });

  test('Vienna <3 veal', () => {
    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);
  });

  test('San Juan <3 plantains', () => {
    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);
  });
});
```

----------------------------------------

TITLE: Testing Specific Error Messages and Classes with Jest's .toThrow()
DESCRIPTION: Illustrates advanced usage of Jest's `.toThrow()` matcher to assert specific error conditions. Examples include matching error messages using regular expressions or substrings, asserting exact error messages, and verifying the type of the thrown error object using an error class.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_40

LANGUAGE: JavaScript
CODE:
```
test('throws on octopus', () => {
  function drinkOctopus() {
    drinkFlavor('octopus');
  }

  // Test that the error message says "yuck" somewhere: these are equivalent
  expect(drinkOctopus).toThrow(/yuck/);
  expect(drinkOctopus).toThrow('yuck');

  // Test the exact error message
  expect(drinkOctopus).toThrow(/^yuck, octopus flavor$/);
  expect(drinkOctopus).toThrow(new Error('yuck, octopus flavor'));

  // Test that we get a DisgustingFlavorError
  expect(drinkOctopus).toThrow(DisgustingFlavorError);
});
```

----------------------------------------

TITLE: Implementing Mock Function Behavior with Jest
DESCRIPTION: This method allows defining a custom function to be executed when the mock is called, while still recording calls and instances. It's useful for controlling the mock's logic dynamically.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#_snippet_5

LANGUAGE: js
CODE:
```
const mockFn = jest.fn(scalar => 42 + scalar);

mockFn(0); // 42
mockFn(1); // 43

mockFn.mockImplementation(scalar => 36 + scalar);

mockFn(2); // 38
mockFn(3); // 39
```

LANGUAGE: ts
CODE:
```
import {jest} from '@jest/globals';

const mockFn = jest.fn((scalar: number) => 42 + scalar);

mockFn(0); // 42
mockFn(1); // 43

mockFn.mockImplementation(scalar => 36 + scalar);

mockFn(2); // 38
mockFn(3); // 39
```

----------------------------------------

TITLE: Comparing Object Deep Equality with Jest's .toEqual()
DESCRIPTION: The .toEqual() matcher is used for deep equality comparison, recursively checking all properties of object instances. It uses `Object.is` for primitive values and is distinct from `.toBe()`, which checks for strict identity. Note that it ignores `undefined` properties and array sparseness, and handles errors by only comparing their `message` property.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_33

LANGUAGE: JavaScript
CODE:
```
const can1 = {
  flavor: 'grapefruit',
  ounces: 12,
};
const can2 = {
  flavor: 'grapefruit',
  ounces: 12,
};

describe('the La Croix cans on my desk', () => {
  test('have all the same properties', () => {
    expect(can1).toEqual(can2);
  });
  test('are not the exact same can', () => {
    expect(can1).not.toBe(can2);
  });
});
```

----------------------------------------

TITLE: Testing Async Function Resolution with await in Jest
DESCRIPTION: This example shows how to test an asynchronous function using the `async/await` syntax. The `await` keyword pauses the test execution until the `fetchData()` promise resolves, allowing direct assertion of the resolved value.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#_snippet_1

LANGUAGE: js
CODE:
```
test('the data is peanut butter', async () => {
  const data = await fetchData();
  expect(data).toBe('peanut butter');
});
```

----------------------------------------

TITLE: Accessing Call Arguments with mock.calls (JavaScript)
DESCRIPTION: This snippet demonstrates the structure of the `mockFn.mock.calls` array, which contains the arguments passed to each invocation of the mock function. Each inner array represents a single call with its respective arguments.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#_snippet_0

LANGUAGE: javascript
CODE:
```
[
  ['arg1', 'arg2'],
  ['arg3', 'arg4'],
];
```

----------------------------------------

TITLE: Testing Object Equality with Jest's toEqual Matcher (JavaScript)
DESCRIPTION: This snippet illustrates how to use Jest's `toEqual` matcher for recursively checking the equality of objects or arrays. It performs a deep comparison of all fields, making it suitable for complex data structures. Note that `toEqual` ignores `undefined` properties and array sparseness.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#_snippet_1

LANGUAGE: js
CODE:
```
test('object assignment', () => {
  const data = {one: 1};
  data['two'] = 2;
  expect(data).toEqual({one: 1, two: 2});
});
```

----------------------------------------

TITLE: Simulating Network Request with HTTP in JavaScript
DESCRIPTION: This module simulates a network request using Node.js's built-in `http` module, returning a Promise that resolves with fetched data. It's designed to mimic an API call and is specifically intended to be mocked in test environments to avoid actual network operations.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const http = require('http');

export default function request(url) {
  return new Promise(resolve => {
    // This is an example of an http request, for example to fetch
    // user data from an API.
    // This module is being mocked in __mocks__/request.js
    http.get({path: url}, response => {
      let data = '';
      response.on('data', _data => (data += _data));
      response.on('end', () => resolve(data));
    });
  });
}
```

----------------------------------------

TITLE: Fetching User Name with Promises in JavaScript
DESCRIPTION: This module defines a function `getUserName` that fetches user data using a `request` module and extracts the user's name. It expects `request` to return a Promise, chaining a `.then()` call to process the resolved user object.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#_snippet_0

LANGUAGE: js
CODE:
```
import request from './request';

export function getUserName(userID) {
  return request(`/users/${userID}`).then(user => user.name);
}
```

----------------------------------------

TITLE: Accessing Original Module with jest.requireActual (TS)
DESCRIPTION: This TypeScript snippet demonstrates `jest.requireActual` within a `jest.mock` factory to get the original module, similar to the JavaScript example. It includes a type argument (`<typeof import('../myModule')>`) for `jest.requireActual` to ensure type safety when accessing the original module's exports for partial mocking.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#_snippet_22

LANGUAGE: typescript
CODE:
```
jest.mock('../myModule', () => {
  // Require the original module to not be mocked...
  const originalModule =
    jest.requireActual<typeof import('../myModule')>('../myModule');

  return {
    __esModule: true, // Use it when dealing with esModules
    ...originalModule,
    getRandom: jest.fn(() => 10),
  };
});

const getRandom = require('../myModule').getRandom;

getRandom(); // Always returns 10
```

----------------------------------------

TITLE: Custom Jest Global Setup for Puppeteer
DESCRIPTION: This JavaScript file (`setup.js`) defines a Jest global setup function. It launches a Puppeteer browser instance, stores it in `globalThis.__BROWSER_GLOBAL__`, and writes its `wsEndpoint` to a temporary file. This endpoint is then used by individual test environments to connect to the same browser instance.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Puppeteer.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const {mkdir, writeFile} = require('fs').promises;
const os = require('os');
const path = require('path');
const puppeteer = require('puppeteer');

const DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');

module.exports = async function () {
  const browser = await puppeteer.launch();
  // store the browser instance so we can teardown it later
  // this global is only available in the teardown but not in TestEnvironments
  globalThis.__BROWSER_GLOBAL__ = browser;

  // use the file system to expose the wsEndpoint for TestEnvironments
  await mkdir(DIR, {recursive: true});
  await writeFile(path.join(DIR, 'wsEndpoint'), browser.wsEndpoint());
};
```

----------------------------------------

TITLE: Using expect.objectContaining() for Subset Checks in Jest
DESCRIPTION: Illustrates how Jest's `expect.objectContaining()` matcher verifies that a received object contains *at least* all properties and values (or nested matchers) specified in the expected object. It matches even if the received object has additional properties.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ExpectAPI.md#_snippet_20

LANGUAGE: javascript
CODE:
```
test('onPress gets called with the right thing', () => {
  const onPress = jest.fn();
  simulatePresses(onPress);
  expect(onPress).toHaveBeenCalledWith(
    expect.objectContaining({
      x: expect.any(Number),
      y: expect.any(Number),
    }),
  );
});
```

----------------------------------------

TITLE: Testing a rejected promise with .rejects (return)
DESCRIPTION: This snippet illustrates testing a rejected promise using the `.rejects` modifier and `toThrow`. Returning the assertion ensures Jest waits for the promise to reject, verifying the rejection reason is 'octopus'.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_4

LANGUAGE: js
CODE:
```
test('rejects to octopus', () => {
  // make sure to add a return statement
  return expect(Promise.reject(new Error('octopus'))).rejects.toThrow(
    'octopus',
  );
});
```

----------------------------------------

TITLE: Configuring Jest `transform` with Babel and CSS Transformer (TypeScript)
DESCRIPTION: This snippet illustrates how to configure Jest's `transform` option using TypeScript. It defines a Jest `Config` object that includes `babel-jest` for JavaScript/TypeScript files and `some-css-transformer` for CSS files. This setup is crucial for projects using TypeScript for their Jest configuration, ensuring all necessary file types are transformed correctly.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#_snippet_87

LANGUAGE: TypeScript
CODE:
```
import type {Config} from 'jest';

const config: Config = {
  transform: {
    '\.[jt]sx?$': 'babel-jest',
    '\.css$': 'some-css-transformer'
  }
};

export default config;
```

----------------------------------------

TITLE: Jest Mock for Generic Files
DESCRIPTION: This mock file is used by Jest to replace imports of various static assets like images, fonts, and media. It exports a simple string 'test-file-stub', allowing tests to proceed without errors when these assets are required, as their content is typically irrelevant for unit tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = 'test-file-stub';
```

----------------------------------------

TITLE: Generating a Basic Jest Configuration File with Yarn
DESCRIPTION: This command uses Yarn to scaffold a basic Jest configuration file. It interactively prompts the user for project-specific details and generates a `jest.config.js` file with default settings and descriptions.
SOURCE: https://github.com/jestjs/jest/blob/main/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
yarn create jest
```

----------------------------------------

TITLE: Checking Mock Function Calls - Jest - JavaScript
DESCRIPTION: Use `.toHaveBeenCalled` to verify that a mock function was invoked at least once. This matcher is essential for ensuring that a specific callback or function dependency was executed during a test. The example demonstrates checking if the 'drink' mock function is called or not based on the 'flavour' parameter.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_7

LANGUAGE: javascript
CODE:
```
function drinkAll(callback, flavour) {
  if (flavour !== 'octopus') {
    callback(flavour);
  }
}

describe('drinkAll', () => {
  test('drinks something lemon-flavoured', () => {
    const drink = jest.fn();
    drinkAll(drink, 'lemon');
    expect(drink).toHaveBeenCalled();
  });

  test('does not drink something octopus-flavoured', () => {
    const drink = jest.fn();
    drinkAll(drink, 'octopus');
    expect(drink).not.toHaveBeenCalled();
  });
});
```

----------------------------------------

TITLE: Performing Deep Equality Comparisons with Jest's .toEqual() Matcher
DESCRIPTION: The `.toEqual` matcher recursively compares all properties of object instances, performing a 'deep' equality check. It uses `Object.is` for primitive values, offering a more robust comparison than `===`. This matcher is distinct from `.toBe`, which checks for object identity, allowing for content-based object comparison.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_33

LANGUAGE: JavaScript
CODE:
```
const can1 = {
  flavor: 'grapefruit',
  ounces: 12,
};
const can2 = {
  flavor: 'grapefruit',
  ounces: 12,
};

describe('the La Croix cans on my desk', () => {
  test('have all the same properties', () => {
    expect(can1).toEqual(can2);
  });
  test('are not the exact same can', () => {
    expect(can1).not.toBe(can2);
  });
});
```

----------------------------------------

TITLE: Asserting Mock Function Arguments with Jest's .toHaveBeenCalledWith()
DESCRIPTION: This matcher verifies that a mock function was called with specific arguments, using the same deep equality algorithm as `.toEqual`. It's crucial for ensuring functions receive the correct data. The example demonstrates checking if a mock function 'f' was called with a specific 'beverage' object.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
test('registration applies correctly to orange La Croix', () => {
  const beverage = new LaCroix('orange');
  register(beverage);
  const f = jest.fn();
  applyToAll(f);
  expect(f).toHaveBeenCalledWith(beverage);
});
```

----------------------------------------

TITLE: Testing Mock Function Calls with Jest's .toHaveBeenCalled()
DESCRIPTION: This snippet demonstrates how to use Jest's `.toHaveBeenCalled()` matcher to verify that a mock function was invoked during the execution of a test. It includes an example of a `drinkAll` function that conditionally calls a callback, and tests ensuring the callback is called for 'lemon' flavor but not for 'octopus' flavor.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
function drinkAll(callback, flavour) {
  if (flavour !== 'octopus') {
    callback(flavour);
  }
}

describe('drinkAll', () => {
  test('drinks something lemon-flavoured', () => {
    const drink = jest.fn();
    drinkAll(drink, 'lemon');
    expect(drink).toHaveBeenCalled();
  });

  test('does not drink something octopus-flavoured', () => {
    const drink = jest.fn();
    drinkAll(drink, 'octopus');
    expect(drink).not.toHaveBeenCalled();
  });
})
```

----------------------------------------

TITLE: Testing Specific Error with toThrow Arguments in Jest JavaScript
DESCRIPTION: The `.toThrow` matcher can accept optional arguments to test for specific error conditions. Arguments can be a regular expression (message matches pattern), a string (message includes substring), an Error object (message equals object's message), or an Error class (object is instance of class). This example demonstrates testing the error message and the error class thrown by the `drinkFlavor` function.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ExpectAPI.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
function drinkFlavor(flavor) {
  if (flavor === 'octopus') {
    throw new DisgustingFlavorError('yuck, octopus flavor');
  }
  // Do some other stuff
}
```

LANGUAGE: JavaScript
CODE:
```
test('throws on octopus', () => {
  function drinkOctopus() {
    drinkFlavor('octopus');
  }

  // Test that the error message says "yuck" somewhere: these are equivalent
  expect(drinkOctopus).toThrow(/yuck/);
  expect(drinkOctopus).toThrow('yuck');

  // Test the exact error message
  expect(drinkOctopus).toThrow(/^yuck, octopus flavor$/);
  expect(drinkOctopus).toThrow(new Error('yuck, octopus flavor'));

  // Test that we get a DisgustingFlavorError
  expect(drinkOctopus).toThrow(DisgustingFlavorError);
});
```

----------------------------------------

TITLE: Setting Up Global State with beforeEach in Jest (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `beforeEach` in Jest to set up and reset global state before each test. It shows clearing a database and inserting test data, ensuring a clean slate for subsequent tests. Jest waits for the returned promise to resolve before proceeding.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_3

LANGUAGE: js
CODE:
```
const globalDatabase = makeGlobalDatabase();

beforeEach(() => {
  // Clears the database and adds some testing data.
  // Jest will wait for this promise to resolve before running tests.
  return globalDatabase.clear().then(() => {
    return globalDatabase.insert({testData: 'foo'});
  });
});

test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});

test('can insert a thing', () => {
  return globalDatabase.insert('thing', makeThing(), response => {
    expect(response.success).toBeTruthy();
  });
});
```

----------------------------------------

TITLE: Configuring Jest `transform` with JavaScript
DESCRIPTION: This JavaScript example demonstrates how to configure the `transform` option in a Jest configuration file. It shows how to explicitly include the default `babel-jest` transformer for JavaScript/TypeScript files and add a custom transformer for CSS files, allowing Jest to process different file types.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#_snippet_89

LANGUAGE: javascript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  transform: {
    '\.[jt]sx?$': 'babel-jest',
    '\.css$': 'some-css-transformer'
  }
};

module.exports = config;
```

----------------------------------------

TITLE: Testing Asynchronous Code with Promises in Jest
DESCRIPTION: This snippet demonstrates how to test asynchronous code by returning a Promise from the test function. Jest will automatically wait for this Promise to resolve or reject, failing the test if the Promise is rejected.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TestingAsyncCode.md#_snippet_0

LANGUAGE: js
CODE:
```
test('the data is peanut butter', () => {
  return fetchData().then(data => {
    expect(data).toBe('peanut butter');
  });
});
```

----------------------------------------

TITLE: Implementing Mock Function Logic with `mockImplementation` (JavaScript)
DESCRIPTION: This snippet demonstrates how `mockImplementation` allows defining the behavior of a mock function. It shows initial implementation, subsequent calls, and then updating the implementation to change the mock's behavior for future calls.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const mockFn = jest.fn(scalar => 42 + scalar);

mockFn(0); // 42
mockFn(1); // 43

mockFn.mockImplementation(scalar => 36 + scalar);

mockFn(2); // 38
mockFn(3); // 39
```

----------------------------------------

TITLE: Running Jest in CI Environment (`--ci`)
DESCRIPTION: Informs Jest that it is running in a Continuous Integration (CI) environment. This modifies snapshot behavior: new snapshots will cause tests to fail, requiring explicit `--updateSnapshot` to prevent accidental updates in CI.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#_snippet_15

LANGUAGE: bash
CODE:
```
jest --ci
```

----------------------------------------

TITLE: Partial Mocking of Module Exports - JavaScript
DESCRIPTION: Demonstrates how to partially mock a module in Jest. It uses `jest.mock()` with a factory function to mock the default export and a named export (`foo`), while retaining the original implementation of another named export (`bar`). Includes assertions to verify the mock behavior.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
//test.js
import defaultExport, {bar, foo} from '../foo-bar-baz';

jest.mock('../foo-bar-baz', () => {
  const originalModule = jest.requireActual('../foo-bar-baz');

  //Mock the default export and named export 'foo'
  return {
    __esModule: true,
    ...originalModule,
    default: jest.fn(() => 'mocked baz'),
    foo: 'mocked foo',
  };
});

test('should do a partial mock', () => {
  const defaultExportResult = defaultExport();
  expect(defaultExportResult).toBe('mocked baz');
  expect(defaultExport).toHaveBeenCalled();

  expect(foo).toBe('mocked foo');
  expect(bar()).toBe('bar');
});
```

----------------------------------------

TITLE: Configuring Jest with Custom Transformers and CSS Modules
DESCRIPTION: This Jest configuration combines `moduleNameMapper` for CSS Modules with a custom `transform` rule for other static assets. It uses `identity-obj-proxy` for stylesheets and a custom `fileTransformer.js` for images and other media, providing fine-grained control over how different asset types are handled during testing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  moduleNameMapper: {
    '\\.(css|less)$': 'identity-obj-proxy',
  },
  transform: {
    '\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':
      '<rootDir>/fileTransformer.js',
  },
};
```

----------------------------------------

TITLE: Testing Object Equality with Jest's toEqual Matcher (JavaScript)
DESCRIPTION: This example illustrates how to use Jest's `toEqual` matcher for recursively checking the equality of objects or arrays. Unlike `toBe`, `toEqual` performs a deep comparison of all fields, making it suitable for complex data structures. It ignores `undefined` properties, array sparseness, or object type mismatch, for which `toStrictEqual` should be used.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UsingMatchers.md#_snippet_1

LANGUAGE: js
CODE:
```
test('object assignment', () => {
  const data = {one: 1};
  data['two'] = 2;
  expect(data).toEqual({one: 1, two: 2});
});
```

----------------------------------------

TITLE: Initializing Jest Project with create-jest (Bash)
DESCRIPTION: This snippet demonstrates how to quickly initialize a new Jest project using the `create-jest` command-line tool. It provides commands for `npm`, `yarn`, and `pnpm` package managers, allowing users to choose their preferred tool to set up a basic Jest environment.
SOURCE: https://github.com/jestjs/jest/blob/main/packages/create-jest/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm init jest@latest
# Or for Yarn
yarn create jest
# Or for pnpm
pnpm create jest
```

----------------------------------------

TITLE: Mocking Resolved Promises with Jest `mockResolvedValue`
DESCRIPTION: The `mockResolvedValue` method is a shorthand for `mockImplementation(() => Promise.resolve(value))`, making it ideal for mocking asynchronous functions in Jest tests. It configures a mock function to always return a resolved promise with the specified value. This is particularly useful for simulating successful asynchronous operations.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
jest.fn().mockImplementation(() => Promise.resolve(value));
```

LANGUAGE: JavaScript
CODE:
```
test('async test', async () => {
  const asyncMock = jest.fn().mockResolvedValue(43);

  await asyncMock(); // 43
});
```

LANGUAGE: TypeScript
CODE:
```
import {jest, test} from '@jest/globals';

test('async test', async () => {
  const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);

  await asyncMock(); // 43
});
```

----------------------------------------

TITLE: Shorthand for mockResolvedValue in Jest (JavaScript)
DESCRIPTION: This snippet shows the shorthand implementation for `mockResolvedValue`, which is equivalent to calling `mockImplementation` to return a Promise that resolves with a specific value.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#_snippet_22

LANGUAGE: javascript
CODE:
```
jest.fn().mockImplementation(() => Promise.resolve(value));
```

----------------------------------------

TITLE: Testing Exact Equality with Jest's toBe Matcher (JavaScript)
DESCRIPTION: This snippet demonstrates the basic usage of Jest's `toBe` matcher to test for exact equality. It uses `Object.is` for comparison and is suitable for primitive values. The `expect` function returns an expectation object on which matchers are called.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UsingMatchers.md#_snippet_0

LANGUAGE: js
CODE:
```
test('two plus two is four', () => {
  expect(2 + 2).toBe(4);
});
```

----------------------------------------

TITLE: Configuring Jest to Mock CSS Modules with identity-obj-proxy
DESCRIPTION: This Jest configuration updates `moduleNameMapper` to use `identity-obj-proxy` for mocking CSS and LESS files. This allows CSS Module `className` lookups to return the class name itself (e.g., `styles.foobar` becomes `'foobar'`), which is beneficial for snapshot testing React components that use CSS Modules.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  moduleNameMapper: {
    '\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':
      '<rootDir>/__mocks__/fileMock.js',
    '\\.(css|less)$': 'identity-obj-proxy',
  },
};
```

----------------------------------------

TITLE: Testing Asynchronous Code with Jest's advanceTimersByTime
DESCRIPTION: This Jest test suite demonstrates how to test the `timerGame` function using `jest.useFakeTimers()` and `jest.advanceTimersByTime()`. It verifies that the callback is not called immediately but is executed precisely after advancing the timers by the expected duration (1000 milliseconds), simulating the passage of time without actual delay.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TimerMocks.md#_snippet_7

LANGUAGE: javascript
CODE:
```
jest.useFakeTimers();
it('calls the callback after 1 second via advanceTimersByTime', () => {
  const timerGame = require('../timerGame');
  const callback = jest.fn();

  timerGame(callback);

  // At this point in time, the callback should not have been called yet
  expect(callback).not.toHaveBeenCalled();

  // Fast-forward until all timers have been executed
  jest.advanceTimersByTime(1000);

  // Now our callback should have been called!
  expect(callback).toHaveBeenCalled();
  expect(callback).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Manually Asserting Jest Mock Function Calls via .mock Property - JavaScript
DESCRIPTION: This snippet illustrates how to manually assert the behavior of Jest mock functions by directly inspecting their `.mock` property. It shows how to check call count, specific arguments, last call arguments, and even individual arguments of specific calls, providing more granular control than custom matchers.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#_snippet_18

LANGUAGE: javascript
CODE:
```
// The mock function was called at least once
expect(mockFunc.mock.calls.length).toBeGreaterThan(0);

// The mock function was called at least once with the specified args
expect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);

// The last call to the mock function was called with the specified args
expect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([
  arg1,
  arg2
]);

// The first arg of the last call to the mock function was `42`
// (note that there is no sugar helper for this specific of an assertion)
expect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);

// A snapshot will check that a mock was invoked the same number of times,
// in the same order, with the same arguments. It will also assert on the name.
expect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);
expect(mockFunc.getMockName()).toBe('a mock name');
```

----------------------------------------

TITLE: Verifying Mock Function Call Count with Jest's .toHaveBeenCalledTimes()
DESCRIPTION: This example illustrates the use of Jest's `.toHaveBeenCalledTimes(number)` matcher to assert that a mock function was called an exact number of times. It shows a `drinkEach` function that applies a `drink` function to an array of flavors, and verifies that `drink` was called twice.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
test('drinkEach drinks each drink', () => {
  const drink = jest.fn();
  drinkEach(drink, ['lemon', 'octopus']);
  expect(drink).toHaveBeenCalledTimes(2);
});
```

----------------------------------------

TITLE: Mocking Function Implementation with `mockImplementation` (JavaScript)
DESCRIPTION: This test demonstrates how to replace the default implementation of a mocked function using `mockImplementation`. After `jest.mock` automatically mocks the `foo` module, `foo.mockImplementation(() => 42)` ensures that any call to `foo()` returns `42`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
jest.mock('../foo'); // this happens automatically with automocking
const foo = require('../foo');

// foo is a mock function
foo.mockImplementation(() => 42);
foo();
// > 42
```

----------------------------------------

TITLE: Spying and Mocking a Class Method with Jest
DESCRIPTION: This example shows how to use `jest.spyOn` to mock or spy on a specific instance method (`playSoundFile`) of a class (`SoundPlayer`). It demonstrates `mockImplementation` to provide a custom behavior and then asserts that the mocked method was called during a test.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#_snippet_12

LANGUAGE: javascript
CODE:
```
import SoundPlayer from './sound-player';
import SoundPlayerConsumer from './sound-player-consumer';

const playSoundFileMock = jest
  .spyOn(SoundPlayer.prototype, 'playSoundFile')
  .mockImplementation(() => {
    console.log('mocked function');
  }); // comment this line if just want to "spy"

it('player consumer plays music', () => {
  const player = new SoundPlayerConsumer();
  player.playSomethingCool();
  expect(playSoundFileMock).toHaveBeenCalled();
});
```

----------------------------------------

TITLE: Executing All Pending Timers (Macro and Micro) in Jest
DESCRIPTION: This function synchronously exhausts both macro-task (e.g., `setTimeout`, `setInterval`, `setImmediate`) and micro-task (e.g., `process.nextTick`) queues. It continuously executes tasks, including those newly scheduled by previously executed tasks, until no more tasks remain, which is useful for synchronously asserting behavior after timer callbacks.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#_snippet_35

LANGUAGE: JavaScript
CODE:
```
jest.runAllTimers()
```

----------------------------------------

TITLE: Returning a Specific Value from a Mock Function with mockReturnValue Shorthand (JavaScript)
DESCRIPTION: Provides the shorthand implementation for `mockReturnValue(value)`, which configures a mock function to always return a specified value when called.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#_snippet_14

LANGUAGE: javascript
CODE:
```
jest.fn().mockImplementation(() => value);
```

----------------------------------------

TITLE: Testing Object Equality with Jest toEqual Matcher (JavaScript)
DESCRIPTION: This example illustrates how to use Jest's `toEqual` matcher for recursively checking the equality of objects or arrays. Unlike `toBe`, `toEqual` performs a deep comparison of all fields, making it suitable for complex data structures. It ignores `undefined` properties, array sparseness, or object type mismatch.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UsingMatchers.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
test('object assignment', () => {
  const data = {one: 1};
  data['two'] = 2;
  expect(data).toEqual({one: 1, two: 2});
});
```

----------------------------------------

TITLE: Passing Snapshot Test with Asymmetric Property Matchers (JavaScript)
DESCRIPTION: This example shows how to use Jest's asymmetric matchers (`expect.any(Date)`, `expect.any(Number)`) to make snapshot tests pass with dynamic data. Instead of exact values, the snapshot records the matcher, allowing the test to pass as long as the property's type matches.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#_snippet_7

LANGUAGE: javascript
CODE:
```
it('will check the matchers and pass', () => {
  const user = {
    createdAt: new Date(),
    id: Math.floor(Math.random() * 20),
    name: 'LeBron James',
  };

  expect(user).toMatchSnapshot({
    createdAt: expect.any(Date),
    id: expect.any(Number),
  });
});

// Snapshot
exports[`will check the matchers and pass 1`] = `\n{\n  "createdAt": Any<Date>,\n  "id": Any<Number>,\n  "name": "LeBron James",\n}\n`;
```

----------------------------------------

TITLE: Configuring Jest Mock Return Values - JavaScript
DESCRIPTION: This snippet illustrates how to configure the return values of a Jest mock function using `mockReturnValueOnce` and `mockReturnValue`. `mockReturnValueOnce` sets a return value for a single, specific call, while `mockReturnValue` sets a default return value for all subsequent calls, allowing precise control over mock behavior.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const myMock = jest.fn();
console.log(myMock());
// > undefined

myMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);

console.log(myMock(), myMock(), myMock(), myMock());
// > 10, 'x', true, true
```

----------------------------------------

TITLE: Data-Driven Test Suite with `describe.each` (Array of Objects) - JavaScript
DESCRIPTION: This snippet illustrates `describe.each` using an array of objects for test data. Object properties are destructured in the test function's parameters. The suite title uses `$variable` syntax to inject property values from the data objects, providing a more readable title format. It contains multiple `test` cases for addition assertions.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
describe.each([
  {a: 1, b: 1, expected: 2},
  {a: 1, b: 2, expected: 3},
  {a: 2, b: 1, expected: 3}
])('.add($a, $b)', ({a, b, expected}) => {
  test(`returns ${expected}`, () => {
    expect(a + b).toBe(expected);
  });

  test(`returned value not be greater than ${expected}`, () => {
    expect(a + b).not.toBeGreaterThan(expected);
  });

  test(`returned value not be less than ${expected}`, () => {
    expect(a + b).not.toBeLessThan(expected);
  });
});
```

----------------------------------------

TITLE: Running Jest in Watch Mode - Bash
DESCRIPTION: Starts Jest in interactive watch mode, which re-runs tests when file changes are detected. `--watch` runs tests related to changed files, while `--watchAll` runs all tests, providing continuous feedback during development.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#_snippet_5

LANGUAGE: bash
CODE:
```
jest --watch #runs jest -o by default
jest --watchAll #runs all tests
```

----------------------------------------

TITLE: Running Concurrent Data-Driven Tests with Jest (Array API)
DESCRIPTION: This snippet demonstrates how to use `test.concurrent.each` with an array of arrays to run the same test function multiple times with different inputs concurrently. The `name` parameter uses `printf` formatting to generate unique test titles based on the provided data, and the test function `fn` must be asynchronous.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#_snippet_18

LANGUAGE: javascript
CODE:
```
test.concurrent.each([
  [1, 1, 2],
  [1, 2, 3],
  [2, 1, 3],
])('.add(%i, %i)', async (a, b, expected) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Mocking a Module's Implementation with `mockImplementation`
DESCRIPTION: This test demonstrates how to use `mockImplementation()` to define the default behavior of a mock function. After `jest.mock('../foo')` automatically mocks the module, `foo.mockImplementation(() => 42)` ensures that any call to `foo()` will return `42`.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#_snippet_12

LANGUAGE: js
CODE:
```
jest.mock('../foo'); // this happens automatically with automocking
const foo = require('../foo');

// foo is a mock function
foo.mockImplementation(() => 42);
foo();
// > 42
```

----------------------------------------

TITLE: Mocking Class Constructors with `mockImplementation` (TypeScript Test)
DESCRIPTION: This TypeScript test snippet illustrates how to mock a class constructor using `mockImplementation` and `jest.mocked` for type safety. It shows how to control the instance returned by the constructor and mock its methods, then verifies calls.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
import {jest} from '@jest/globals';
import {SomeClass} from './SomeClass';

jest.mock('./SomeClass'); // this happens automatically with automocking

const mockMethod = jest.fn<(a: string, b: string) => void>();
jest.mocked(SomeClass).mockImplementation(() => {
  return {
    method: mockMethod,
  };
});

const some = new SomeClass();
some.method('a', 'b');

console.log('Calls to method:', mockMethod.mock.calls);
```

----------------------------------------

TITLE: Running Only Specific Concurrent Data-Driven Tests with Tagged Template Literal in Jest
DESCRIPTION: This snippet demonstrates `test.concurrent.only.each` with a tagged template literal to run only a specific collection of asynchronous data-driven tests, ignoring other tests in the suite. The data is defined inline using the template literal syntax.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_21

LANGUAGE: js
CODE:
```
test.concurrent.only.each`
  a    | b    | expected
  ${1} | ${1} | ${2}
  ${1} | ${2} | ${3}
  ${2} | ${1} | ${3}
`('returns $expected when $a is added to $b', async ({a, b, expected}) => {
  expect(a + b).toBe(expected);
});

test('will not be run', () => {
  expect(1 / 0).toBe(Infinity);
});
```

----------------------------------------

TITLE: Importing Jest Globals (TypeScript)
DESCRIPTION: This example shows how to explicitly import Jest's global functions (`expect`, `jest`, `test`) from `@jest/globals` when the `--injectGlobals` option is set to `false`. This approach avoids polluting the global environment and is supported only with the `jest-circus` test runner. It demonstrates setting up fake timers and a basic test assertion.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#_snippet_21

LANGUAGE: ts
CODE:
```
import {expect, jest, test} from '@jest/globals';

jest.useFakeTimers();

test('some test', () => {
  expect(Date.now()).toBe(0);
});
```

----------------------------------------

TITLE: Debugging Jest Tests with Node.js CLI
DESCRIPTION: This command runs Jest in a Node.js process with the debugger enabled, pausing execution until an external debugger connects. The `--runInBand` option ensures tests run in a single process, simplifying debugging. It's applicable for both Linux/macOS and Windows environments.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/Troubleshooting.md#_snippet_0

LANGUAGE: bash
CODE:
```
node --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]
or on Windows
node --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]
```

----------------------------------------

TITLE: Testing Resolved Promises with Jest .resolves
DESCRIPTION: This Jest test shows a more concise way to test resolved Promises using the `.resolves` matcher. It unwraps the fulfilled value of the promise, allowing direct assertion with other matchers like `toBe`, simplifying asynchronous test syntax.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
it('works with resolves', () => {
  expect.assertions(1);
  return expect(user.getUserName(5)).resolves.toBe('Paul');
});
```

----------------------------------------

TITLE: Launching and Debugging Jest in VS Code (Windows) (JSON)
DESCRIPTION: This `launch.json` configuration is tailored for Windows environments, automatically launching Jest tests with the Node.js inspector and attaching the VS Code debugger. It specifies the Windows-specific path for the Jest executable and includes `--runInBand` for simplified debugging.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug Jest Tests",
      "type": "node",
      "request": "launch",
      "runtimeArgs": [
        "--inspect-brk",
        "${workspaceRoot}/node_modules/jest/bin/jest.js",
        "--runInBand"
      ],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}
```

----------------------------------------

TITLE: Mocking ES6 Modules with Default and Named Exports
DESCRIPTION: This snippet illustrates how to mock an ES6 module that uses default and named exports. It requires setting `__esModule: true` in the factory return object to correctly handle default imports, allowing specific mock implementations for each export.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#_snippet_16

LANGUAGE: js
CODE:
```
import moduleName, {foo} from '../moduleName';

jest.mock('../moduleName', () => {
  return {
    __esModule: true,
    default: jest.fn(() => 42),
    foo: jest.fn(() => 43),
  };
});

moduleName(); // Will return 42
foo(); // Will return 43
```

----------------------------------------

TITLE: Creating an Inline Jest Snapshot (TSX)
DESCRIPTION: This test snippet shows how to initiate an inline snapshot test using Jest's .toMatchInlineSnapshot() matcher without any arguments. When this test runs for the first time, Jest will automatically generate the snapshot content and embed it directly within the test file as an argument to the matcher.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#_snippet_4

LANGUAGE: tsx
CODE:
```
it('renders correctly', () => {
  const tree = renderer
    .create(<Link page="https://example.com">Example Site</Link>)
    .toJSON();
  expect(tree).toMatchInlineSnapshot();
});
```

----------------------------------------

TITLE: Deep Equality Check for Array Items with Jest's .toContainEqual()
DESCRIPTION: Details the `.toContainEqual()` matcher, which performs a recursive deep equality check to determine if an item with a specific structure and values is present in an array. Unlike `.toContain()`, it checks for structural equality rather than object identity.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_32

LANGUAGE: JavaScript
CODE:
```
describe('my beverage', () => {
  test('is delicious and not sour', () => {
    const myBeverage = {delicious: true, sour: false};
    expect(myBeverages()).toContainEqual(myBeverage);
  });
});
```

----------------------------------------

TITLE: Debugging Jest Tests with Node.js Inspector
DESCRIPTION: This command runs Jest in a Node.js process with the inspector enabled, pausing execution until an external debugger connects. The `--runInBand` option ensures tests run in a single process, simplifying debugging.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#_snippet_0

LANGUAGE: bash
CODE:
```
node --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]
or on Windows
node --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]
```

----------------------------------------

TITLE: Verifying Assertion Count with expect.assertions (JavaScript)
DESCRIPTION: `expect.assertions(number)` verifies that a precise number of assertions are executed during a test. This is particularly valuable for testing asynchronous code, ensuring that all expected assertions within callbacks are indeed called. In this example, `expect.assertions(2)` guarantees that both `callback1` and `callback2` are invoked and their respective assertions are run.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_54

LANGUAGE: JavaScript
CODE:
```
test('doAsync calls both callbacks', () => {
  expect.assertions(2);
  function callback1(data) {
    expect(data).toBeTruthy();
  }
  function callback2(data) {
    expect(data).toBeTruthy();
  }

  doAsync(callback1, callback2);
});
```

----------------------------------------

TITLE: Manually Asserting Jest Mock Function Calls - JavaScript
DESCRIPTION: This snippet illustrates how to manually assert mock function calls by directly inspecting the `.mock` property of a mock function in Jest. It shows how to check call count, specific arguments in calls, the last call's arguments, and even individual arguments within a call, providing a more granular control over assertions when custom matchers are not sufficient.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#_snippet_18

LANGUAGE: javascript
CODE:
```
// The mock function was called at least once
expect(mockFunc.mock.calls.length).toBeGreaterThan(0);

// The mock function was called at least once with the specified args
expect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);

// The last call to the mock function was called with the specified args
expect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([
  arg1,
  arg2,
]);

// The first arg of the last call to the mock function was `42`
// (note that there is no sugar helper for this specific of an assertion)
expect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);

// A snapshot will check that a mock was invoked the same number of times,
// in the same order, with the same arguments. It will also assert on the name.
expect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);
expect(mockFunc.getMockName()).toBe('a mock name');
```

----------------------------------------

TITLE: Managing Resource Setup and Teardown with Jest Hooks in JavaScript
DESCRIPTION: This example illustrates the execution order of `beforeEach` and `afterEach` hooks in Jest, demonstrating how they are called in the order of declaration. It shows how to manage dependent resources, noting that `after*` hooks of the enclosing scope are called first.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SetupAndTeardown.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
beforeEach(() => console.log('connection setup'));
beforeEach(() => console.log('database setup'));

afterEach(() => console.log('database teardown'));
afterEach(() => console.log('connection teardown'));

test('test 1', () => console.log('test 1'));

describe('extra', () => {
  beforeEach(() => console.log('extra database setup'));
  afterEach(() => console.log('extra database teardown'));

  test('test 2', () => console.log('test 2'));
});
```

----------------------------------------

TITLE: Checking Array or String Containment with Jest's .toContain() Matcher
DESCRIPTION: This matcher checks if an `item` is present in an array using strict equality (`===`). It can also verify if a string is a substring of another. It supports various iterables such as strings, sets, node lists, and HTML collections, making it versatile for collection and string checks.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_31

LANGUAGE: JavaScript
CODE:
```
test('the flavor list contains lime', () => {
  expect(getAllFlavors()).toContain('lime');
});
```

----------------------------------------

TITLE: Defining an Asynchronous Test with Jest (Promise)
DESCRIPTION: This example demonstrates how Jest handles asynchronous tests that return a Promise. Jest will wait for the returned promise to resolve before completing the test, ensuring that asynchronous operations like `fetchBeverageList()` are fully executed and their results can be asserted against. This is crucial for testing async code.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
test('has lemon in it', () => {
  return fetchBeverageList().then(list => {
    expect(list).toContain('lemon');
  });
});
```

----------------------------------------

TITLE: Matching Object Subsets with `expect.objectContaining` in Jest
DESCRIPTION: This snippet illustrates `expect.objectContaining`, which matches a received object if it contains all the properties of the expected object. It's useful for verifying partial matches or when the received object has additional properties. Matchers like `expect.any()` can be used for property values.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_51

LANGUAGE: JavaScript
CODE:
```
test('onPress gets called with the right thing', () => {
  const onPress = jest.fn();
  simulatePresses(onPress);
  expect(onPress).toHaveBeenCalledWith(
    expect.objectContaining({
      x: expect.any(Number),
      y: expect.any(Number),
    }),
  );
});
```

----------------------------------------

TITLE: Implementing Global Teardown in Jest (JavaScript)
DESCRIPTION: This JavaScript snippet defines a `globalTeardown` module. It exports an async function that executes once after all test suites, receiving `globalConfig` and `projectConfig`. It shows how to access a global variable (`__MONGOD__`) set during `globalSetup` to perform cleanup, such as stopping a database server.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#_snippet_31

LANGUAGE: js
CODE:
```
module.exports = async function (globalConfig, projectConfig) {
  console.log(globalConfig.testPathPattern);
  console.log(projectConfig.cache);

  await globalThis.__MONGOD__.stop();
};
```

----------------------------------------

TITLE: Requiring Actual Module Implementation with jest.requireActual (TypeScript)
DESCRIPTION: This TypeScript snippet showcases `jest.requireActual` within a `jest.mock` factory. It allows importing the original module with type safety, enabling partial mocking where specific functions are overridden while preserving the original behavior of others, such as `getRandom` returning a fixed value.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#_snippet_22

LANGUAGE: TypeScript
CODE:
```
jest.mock('../myModule', () => {
  // Require the original module to not be mocked...
  const originalModule =
    jest.requireActual<typeof import('../myModule')>('../myModule');

  return {
    __esModule: true, // Use it when dealing with esModules
    ...originalModule,
    getRandom: jest.fn(() => 10),
  };
});

const getRandom = require('../myModule').getRandom;

getRandom(); // Always returns 10
```

----------------------------------------

TITLE: Mocking with a Custom Factory (TypeScript)
DESCRIPTION: This example shows how to use a custom factory function with `jest.mock` in TypeScript, leveraging type arguments for enhanced type safety. The factory provides a mock implementation that returns a specific value, ensuring consistent test results.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#_snippet_15

LANGUAGE: typescript
CODE:
```
// The optional type argument provides typings for the module factory
jest.mock<typeof import('../moduleName')>('../moduleName', () => {
  return jest.fn(() => 42);
});

// This runs the function specified as second argument to `jest.mock`.
const moduleName = require('../moduleName');
moduleName(); // Will return '42';
```

----------------------------------------

TITLE: Running Tests Related to Specific Files with Jest CLI
DESCRIPTION: Identifies and runs tests that are related to the specified source files. This is useful for ensuring that changes in specific modules do not introduce regressions elsewhere in the codebase.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#_snippet_3

LANGUAGE: bash
CODE:
```
jest --findRelatedTests path/to/fileA.js path/to/fileB.js
```

----------------------------------------

TITLE: VS Code Debug Configuration: Launch Jest Tests (Unix/macOS)
DESCRIPTION: This `launch.json` configuration automatically launches Jest tests and attaches the VS Code debugger. It uses `--inspect-brk` to enable debugging and `--runInBand` to run tests in a single process, displaying output in the integrated terminal.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug Jest Tests",
      "type": "node",
      "request": "launch",
      "runtimeArgs": [
        "--inspect-brk",
        "${workspaceRoot}/node_modules/.bin/jest",
        "--runInBand"
      ],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}
```

----------------------------------------

TITLE: Running Jest in CI Environment (`--ci`)
DESCRIPTION: When `--ci` is provided, Jest assumes it is running in a Continuous Integration environment. This alters snapshot behavior: new snapshots will cause tests to fail, requiring explicit `--updateSnapshot` to store them, preventing accidental snapshot updates in CI.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#_snippet_14

LANGUAGE: bash
CODE:
```
jest --ci
```

----------------------------------------

TITLE: Data-Driven Testing with `test.each` (Array of Arrays) in Jest
DESCRIPTION: Demonstrates using `test.each` with an array of arrays to run the same test with different inputs. The test title uses `printf` style formatting (`%i`) to inject numerical parameters. This approach is suitable for simple, positional arguments.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#_snippet_22

LANGUAGE: js
CODE:
```
test.each([
  [1, 1, 2],
  [1, 2, 3],
  [2, 1, 3],
])('.add(%i, %i)', (a, b, expected) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Data-Driven Testing with `test.each` (Array of Arrays) in Jest
DESCRIPTION: This snippet demonstrates using `test.each` with an array of arrays to run a test multiple times with different inputs. The test title uses `printf` style formatting (`%i`) to inject parameters, making each test case's output unique and descriptive.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_24

LANGUAGE: js
CODE:
```
test.each([
  [1, 1, 2],
  [1, 2, 3],
  [2, 1, 3]
])('.add(%i, %i)', (a, b, expected) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Comparing Objects Strictly with toStrictEqual in Jest JavaScript
DESCRIPTION: Use `.toStrictEqual` for a stricter equality check than `.toEqual`. It considers differences like keys with `undefined` properties, `undefined` array items, array sparseness, and object types (e.g., class instances vs. literals). The example shows that a class instance and a literal object with the same properties are equal with `.toEqual` but not with `.toStrictEqual`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ExpectAPI.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
class LaCroix {
  constructor(flavor) {
    this.flavor = flavor;
  }
}

describe('the La Croix cans on my desk', () => {
  test('are not semantically the same', () => {
    expect(new LaCroix('lemon')).toEqual({flavor: 'lemon'});
    expect(new LaCroix('lemon')).not.toStrictEqual({flavor: 'lemon'});
  });
});
```

----------------------------------------

TITLE: Incorrect Callback Testing in Jest
DESCRIPTION: This snippet demonstrates an incorrect way to test asynchronous code using callbacks. The test completes immediately after `fetchData(callback)` is called, before the `callback` function has a chance to execute, leading to an unreliable test result.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#_snippet_6

LANGUAGE: js
CODE:
```
// Don't do this!
test('the data is peanut butter', () => {
  function callback(error, data) {
    if (error) {
      throw error;
    }
    expect(data).toBe('peanut butter');
  }

  fetchData(callback);
});
```

----------------------------------------

TITLE: Incorrect Callback Testing in Jest
DESCRIPTION: This snippet illustrates a common mistake when testing asynchronous code with callbacks. The test will complete immediately after `fetchData(callback)` is called, without waiting for the `callback` function to execute, leading to a false positive or an unhandled assertion failure.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TestingAsyncCode.md#_snippet_6

LANGUAGE: js
CODE:
```
// Don't do this!
test('the data is peanut butter', () => {
  function callback(error, data) {
    if (error) {
      throw error;
    }
    expect(data).toBe('peanut butter');
  }

  fetchData(callback);
});
```

----------------------------------------

TITLE: Configuring and Restoring Timers in Jest Tests (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure and restore fake timers within Jest test blocks. It shows examples of `jest.useFakeTimers()` with `advanceTimers` to automatically advance time and `doNotFake` to exclude specific APIs from being faked. It also illustrates `jest.useRealTimers()` to revert to original timer implementations, highlighting the global effect of these operations within a test file.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#_snippet_39

LANGUAGE: JavaScript
CODE:
```
test('advance the timers automatically', () => {
  jest.useFakeTimers({advanceTimers: true});
  // ...
});

test('do not advance the timers and do not fake `performance`', () => {
  jest.useFakeTimers({doNotFake: ['performance']});
  // ...
});

test('uninstall fake timers for the rest of tests in the file', () => {
  jest.useRealTimers();
  // ...
});
```

----------------------------------------

TITLE: Updating Jest Snapshots: React Component Test (TSX)
DESCRIPTION: This snippet demonstrates a Jest snapshot test for a React Link component. It shows how a test might look after an intentional change to the component's props (e.g., page URL), which would cause the existing snapshot to fail. The test uses react-test-renderer to create a JSON tree of the component and toMatchSnapshot to compare it against a stored snapshot.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#_snippet_2

LANGUAGE: tsx
CODE:
```
// Updated test case with a Link to a different address
it('renders correctly', () => {
  const tree = renderer
    .create(<Link page="http://www.instagram.com">Instagram</Link>)
    .toJSON();
  expect(tree).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Spying on Object Methods with jest.spyOn (Test Example)
DESCRIPTION: Illustrates how `jest.spyOn` creates a mock function that tracks calls to an object's method while still calling the original implementation by default. `jest.restoreAllMocks` is used in `afterEach` to clean up the spy.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#_snippet_31

LANGUAGE: js
CODE:
```
const video = require('./video');

afterEach(() => {
  // restore the spy created with spyOn
  jest.restoreAllMocks();
});

test('plays video', () => {
  const spy = jest.spyOn(video, 'play');
  const isPlaying = video.play();

  expect(spy).toHaveBeenCalled();
  expect(isPlaying).toBe(true);
});
```

----------------------------------------

TITLE: Handling Asynchronous Errors with Async/Await and Try/Catch in Jest
DESCRIPTION: This snippet demonstrates how to test for rejected promises using `async`/`await` combined with a `try...catch` block. It ensures that an assertion is made within the catch block when the promise rejects, and `expect.assertions(1)` verifies that at least one assertion is called.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
test('the fetch fails with an error', async () => {
  expect.assertions(1);
  try {
    await fetchData();
  } catch (error) {
    expect(error).toMatch('error');
  }
});
```

----------------------------------------

TITLE: Resetting Global State with beforeEach in Jest
DESCRIPTION: This snippet illustrates how to use `beforeEach` to clear and re-populate a global database before each test runs. Jest waits for the returned promise to resolve, ensuring the database is in a clean state for subsequent tests. It's useful for managing shared test data.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

beforeEach(() => {
  // Clears the database and adds some testing data.
  // Jest will wait for this promise to resolve before running tests.
  return globalDatabase.clear().then(() => {
    return globalDatabase.insert({testData: 'foo'});
  });
});

test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});

test('can insert a thing', () => {
  return globalDatabase.insert('thing', makeThing(), response => {
    expect(response.success).toBeTruthy();
  });
});
```

----------------------------------------

TITLE: Using expect.stringMatching in arrayContaining (JavaScript)
DESCRIPTION: `expect.stringMatching(string | regexp)` is a Jest asymmetric matcher that matches a received string value against an expected string or regular expression. It can be used within `toEqual`, `toHaveBeenCalledWith`, `arrayContaining`, `objectContaining`, or `toMatchObject` to provide flexible matching. This example demonstrates its use nested within `expect.arrayContaining` to check for specific string patterns within an array, even if the array contains additional elements.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_52

LANGUAGE: JavaScript
CODE:
```
describe('stringMatching in arrayContaining', () => {
  const expected = [
    expect.stringMatching(/^Alic/),
    expect.stringMatching(/^[BR]ob/),
  ];
  it('matches even if received contains additional elements', () => {
    expect(['Alicia', 'Roberto', 'Evelina']).toEqual(
      expect.arrayContaining(expected),
    );
  });
  it('does not match if received does not contain expected elements', () => {
    expect(['Roberto', 'Evelina']).not.toEqual(
      expect.arrayContaining(expected),
    );
  });
});
```

----------------------------------------

TITLE: Combining `mockImplementationOnce` with Default Implementation (JavaScript)
DESCRIPTION: This snippet shows how `mockImplementationOnce` interacts with a default implementation set by `jest.fn()`. After all `mockImplementationOnce` definitions are exhausted, the mock function falls back to executing its default implementation for subsequent calls.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
const myMockFn = jest
  .fn(() => 'default')
  .mockImplementationOnce(() => 'first call')
  .mockImplementationOnce(() => 'second call');

console.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());
// > 'first call', 'second call', 'default', 'default'
```

----------------------------------------

TITLE: Parameterized Test Suite with `describe.each` using Array of Arrays (Jest)
DESCRIPTION: This snippet demonstrates how to use `describe.each` with an array of arrays to define test data. Each inner array provides arguments for a single test case, which are then passed to the test function. The suite title uses `printf` formatting (`%i`) to inject parameters, creating unique descriptions for each iteration.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
describe.each([
  [1, 1, 2],
  [1, 2, 3],
  [2, 1, 3],
])('.add(%i, %i)', (a, b, expected) => {
  test(`returns ${expected}`, () => {
    expect(a + b).toBe(expected);
  });

  test(`returned value not be greater than ${expected}`, () => {
    expect(a + b).not.toBeGreaterThan(expected);
  });

  test(`returned value not be less than ${expected}`, () => {
    expect(a + b).not.toBeLessThan(expected);
  });
});
```

----------------------------------------

TITLE: Skipping Parameterized Test Suites with `each.describe.skip` - JavaScript
DESCRIPTION: Demonstrates using `each.describe.skip` (or `xdescribe`) to prevent a specific parameterized test suite from running. This is useful for temporarily disabling a group of tests.
SOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
each([
  [1, 1, 2],
  [1, 2, 3],
  [2, 1, 3]
]).describe.skip('.add(%d, %d)', (a, b, expected) => {
  test(`returns ${expected}`, () => {
    expect(a + b).toBe(expected);
  });
});
```

----------------------------------------

TITLE: Shorthand for mockResolvedValueOnce in Jest (JavaScript)
DESCRIPTION: This snippet shows the shorthand implementation for `mockResolvedValueOnce`, which is equivalent to calling `mockImplementationOnce` to return a Promise that resolves with a specific value for a single call.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#_snippet_25

LANGUAGE: javascript
CODE:
```
jest.fn().mockImplementationOnce(() => Promise.resolve(value));
```

----------------------------------------

TITLE: Skipping Data-Driven Tests with `test.skip.each` (Array)
DESCRIPTION: Illustrates `test.skip.each` with an array of test data to prevent a collection of data-driven tests from running. This allows other tests in the file to execute normally while the specified data-driven tests are ignored.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_34

LANGUAGE: JavaScript
CODE:
```
test.skip.each([
  [1, 1, 2],
  [1, 2, 3],
  [2, 1, 3]
])('.add(%i, %i)', (a, b, expected) => {
  expect(a + b).toBe(expected); // will not be run
});

test('will be run', () => {
  expect(1 / 0).toBe(Infinity);
});
```

----------------------------------------

TITLE: Isolating and Debugging Jest Tests with test.only in JavaScript
DESCRIPTION: This snippet demonstrates how to use `test.only` to run a single, specific test in Jest. This is useful for debugging tests that fail inconsistently when run as part of a larger suite, helping to isolate issues caused by shared state or interference from other tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
test.only('this will be the only test that runs', () => {
  expect(true).toBe(false);
});

test('this test will not run', () => {
  expect('A').toBe('A');
});
```

----------------------------------------

TITLE: Testing Resolved Promises with `.resolves` (Async/Await) in Jest
DESCRIPTION: This example demonstrates using `async/await` with the `.resolves` modifier to test promises. It asserts that a promise resolves to 'lemon' and does not resolve to 'octopus', providing a cleaner syntax for asynchronous tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_3

LANGUAGE: js
CODE:
```
test('resolves to lemon', async () => {
  await expect(Promise.resolve('lemon')).resolves.toBe('lemon');
  await expect(Promise.resolve('lemon')).resolves.not.toBe('octopus');
});
```

----------------------------------------

TITLE: Passing Snapshot Test with Asymmetric Property Matchers - JavaScript
DESCRIPTION: Illustrates how to use Jest's asymmetric matchers (`expect.any(Date)`, `expect.any(Number)`) within `toMatchSnapshot` to handle dynamic properties. This allows the test to pass consistently by asserting the type of the dynamic value rather than its exact value, which is then saved to the snapshot.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#_snippet_7

LANGUAGE: javascript
CODE:
```
it('will check the matchers and pass', () => {
  const user = {
    createdAt: new Date(),
    id: Math.floor(Math.random() * 20),
    name: 'LeBron James',
  };

  expect(user).toMatchSnapshot({
    createdAt: expect.any(Date),
    id: expect.any(Number),
  });
});

// Snapshot
exports[`will check the matchers and pass 1`] = `
{
  "createdAt": Any<Date>,
  "id": Any<Number>,
  "name": "LeBron James",
}
`;
```

----------------------------------------

TITLE: Globally Enabling Custom Matcher via Jest Configuration
DESCRIPTION: This JavaScript snippet illustrates how to globally enable a custom Jest matcher, like 'toBeWithinRange', by moving the 'expect.extend' call into a 'setupFilesAfterEnv' script. This approach eliminates the need to import the matcher into every test file, making it available across the entire test suite.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#_snippet_69

LANGUAGE: JavaScript
CODE:
```
import {expect} from '@jest/globals';
// remember to export `toBeWithinRange` as well
import {toBeWithinRange} from './toBeWithinRange';

expect.extend({
  toBeWithinRange,
});
```

----------------------------------------

TITLE: Using Jest .each with Typed Template Literal (Mixed Types) in TypeScript
DESCRIPTION: This snippet demonstrates using Jest's `.each` modifier with a template literal when the table contains values of mixed types. To ensure correct type inference for arguments like `a`, `b`, `expected`, and `extra`, a generic type argument must be provided (e.g., `<{a: number; b: number; expected: string; extra?: boolean}>`). Without this generic argument, types would default to `unknown`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_41

LANGUAGE: TypeScript
CODE:
```
import {test} from '@jest/globals';

test.each<{a: number; b: number; expected: string; extra?: boolean}>`
  a    | b    | expected    | extra
  ${1} | ${2} | ${'three'}  | ${true}
  ${3} | ${4} | ${'seven'}  | ${false}
  ${5} | ${6} | ${'eleven'}
`('template literal example', ({a, b, expected, extra}) => {
  // without the generic argument in this case types would default to `unknown`
});
```

----------------------------------------

TITLE: Testing Rejected Promises with `.rejects` in Jest (Async/Await)
DESCRIPTION: This example demonstrates using `async/await` with `.rejects` for testing rejected promises. It asserts that `Promise.reject(new Error('octopus'))` rejects and throws an error containing 'octopus', offering a more readable approach for asynchronous error testing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_5

LANGUAGE: js
CODE:
```
test('rejects to octopus', async () => {
  await expect(Promise.reject(new Error('octopus'))).rejects.toThrow('octopus');
});
```

----------------------------------------

TITLE: Writing a Jest Snapshot Test for React Link Component
DESCRIPTION: This `Link.test.js` snippet shows how to write a Jest snapshot test for the `Link` component. It uses `react-test-renderer` to create a component instance, simulates `onMouseEnter` and `onMouseLeave` events using `renderer.act()`, and asserts that the component's rendered output matches the stored snapshots at each state change.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#_snippet_5

LANGUAGE: typescript
CODE:
```
import renderer from 'react-test-renderer';
import Link from '../Link';

it('changes the class when hovered', () => {
  const component = renderer.create(
    <Link page="http://www.facebook.com">Facebook</Link>,
  );
  let tree = component.toJSON();
  expect(tree).toMatchSnapshot();

  // manually trigger the callback
  renderer.act(() => {
    tree.props.onMouseEnter();
  });
  // re-rendering
  tree = component.toJSON();
  expect(tree).toMatchSnapshot();

  // manually trigger the callback
  renderer.act(() => {
    tree.props.onMouseLeave();
  });
  // re-rendering
  tree = component.toJSON();
  expect(tree).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Testing Promise Rejection with .catch and expect.assertions
DESCRIPTION: This snippet shows how to test a promise that is expected to be rejected. It uses the `.catch` method to handle the error and asserts the error message. `expect.assertions(1)` is crucial here to ensure that the assertion inside the `.catch` block is actually executed, preventing a false positive if the promise fulfills instead of rejects.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TestingAsyncCode.md#_snippet_3

LANGUAGE: js
CODE:
```
test('the fetch fails with an error', () => {
  expect.assertions(1);
  return fetchData().catch(error => expect(error).toMatch('error'));
});
```

----------------------------------------

TITLE: Using Jest .each with Variable Array of Objects in TypeScript
DESCRIPTION: This snippet illustrates using Jest's `.each` modifier with an array of objects declared as a separate variable. Similar to inline arrays of objects, this method provides accurate type inference for all arguments passed to the test callback, such as `extra: boolean | undefined`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_37

LANGUAGE: TypeScript
CODE:
```
import {test} from '@jest/globals';

const table = [
  {a: 1, b: 2, expected: 'three', extra: true},
  {a: 3, b: 4, expected: 'seven', extra: false},
  {a: 5, b: 6, expected: 'eleven'},
];

test.each(table)('table as a variable', ({a, b, expected, extra}) => {
  // again everything is typed as expected, e.g. `extra: boolean | undefined`
});
```

----------------------------------------

TITLE: Testing Async Function Rejection with try/catch in Jest
DESCRIPTION: This snippet demonstrates how to test an asynchronous function that is expected to reject using `async/await` with a `try/catch` block. `expect.assertions(1)` ensures that at least one assertion is called, verifying the error handling path.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#_snippet_2

LANGUAGE: js
CODE:
```
test('the fetch fails with an error', async () => {
  expect.assertions(1);
  try {
    await fetchData();
  } catch (error) {
    expect(error).toMatch('error');
  }
});
```

----------------------------------------

TITLE: Setting Return Value with `mockReturnValue` (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `mockReturnValue` to define a fixed value that a mock function will return. It also shows that the return value can be updated dynamically.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#_snippet_17

LANGUAGE: javascript
CODE:
```
const mock = jest.fn();

mock.mockReturnValue(42);
mock(); // 42

mock.mockReturnValue(43);
mock(); // 43
```

----------------------------------------

TITLE: Configuring Jest Fake Timers in Tests (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `jest.useFakeTimers()` with different configurations (e.g., `advanceTimers`, `doNotFake`) and how to restore original timers using `jest.useRealTimers()` within Jest test blocks. It highlights that these operations are global within the file.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#_snippet_32

LANGUAGE: javascript
CODE:
```
test('advance the timers automatically', () => {
  jest.useFakeTimers({advanceTimers: true});
  // ...
});

test('do not advance the timers and do not fake `performance`', () => {
  jest.useFakeTimers({doNotFake: ['performance']});
  // ...
});

test('uninstall fake timers for the rest of tests in the file', () => {
  jest.useRealTimers();
  // ...
});
```

----------------------------------------

TITLE: Retrying Failed Jest Tests with `jest.retryTimes()` - JavaScript
DESCRIPTION: This snippet demonstrates how to use `jest.retryTimes()` to automatically retry failed tests a specified number of times. It sets the retry count to 3 for the subsequent test, which is designed to fail.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#_snippet_49

LANGUAGE: javascript
CODE:
```
jest.retryTimes(3);

test('will fail', () => {
  expect(true).toBe(false);
});
```

----------------------------------------

TITLE: Testing File Summarizer with Mocked fs Module in Jest
DESCRIPTION: Demonstrates a Jest test file for `FileSummarizer.js`, explicitly calling `jest.mock('fs')` to use the manual mock. It uses `beforeEach` to set up mock file information and asserts that the `summarizeFilesInDirectorySync` function correctly processes the mocked file system, ensuring tests are fast and isolated.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ManualMocks.md#_snippet_3

LANGUAGE: javascript
CODE:
```
'use strict';

jest.mock('fs');

describe('listFilesInDirectorySync', () => {
  const MOCK_FILE_INFO = {
    '/path/to/file1.js': 'console.log(\"file1 contents\");',
    '/path/to/file2.txt': 'file2 contents'
  };

  beforeEach(() => {
    // Set up some mocked out file info before each test
    require('fs').__setMockFiles(MOCK_FILE_INFO);
  });

  test('includes all files in the directory in the summary', () => {
    const FileSummarizer = require('../FileSummarizer');
    const fileSummary =
      FileSummarizer.summarizeFilesInDirectorySync('/path/to');

    expect(fileSummary.length).toBe(2);
  });
});
```

----------------------------------------

TITLE: Data-Driven Test Suite with `describe.each` (Tagged Template Literal) - JavaScript
DESCRIPTION: This snippet demonstrates `describe.each` using a tagged template literal for defining test data. The first row specifies column headings, and subsequent rows use `${value}` for data. The test function receives a data object, and the suite title uses `$variable` syntax for injection. It includes multiple `test` cases for addition assertions.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
describe.each`
  a    | b    | expected
  ${1} | ${1} | ${2}
  ${1} | ${2} | ${3}
  ${2} | ${1} | ${3}
`('$a + $b', ({a, b, expected}) => {
  test(`returns ${expected}`, () => {
    expect(a + b).toBe(expected);
  });

  test(`returned value not be greater than ${expected}`, () => {
    expect(a + b).not.toBeGreaterThan(expected);
  });

  test(`returned value not be less than ${expected}`, () => {
    expect(a + b).not.toBeLessThan(expected);
  });
});
```

----------------------------------------

TITLE: Managing Resource Setup and Teardown with Jest Hooks in JavaScript
DESCRIPTION: This example illustrates the execution order of `beforeEach` and `afterEach` hooks in Jest, including nested `describe` blocks. It shows how `beforeEach` hooks run in declaration order, while `afterEach` hooks of the enclosing scope are called first, demonstrating a pattern for dependent resource management.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
beforeEach(() => console.log('connection setup'));
beforeEach(() => console.log('database setup'));

afterEach(() => console.log('database teardown'));
afterEach(() => console.log('connection teardown'));

test('test 1', () => console.log('test 1'));

describe('extra', () => {
  beforeEach(() => console.log('extra database setup'));
  afterEach(() => console.log('extra database teardown'));

  test('test 2', () => console.log('test 2'));
});

// connection setup
// database setup
// test 1
// database teardown
// connection teardown

// connection setup
// database setup
// extra database setup
// test 2
// extra database teardown
// database teardown
// connection teardown
```

----------------------------------------

TITLE: Testing Module: FileSummarizer with Manual fs Mock - Javascript
DESCRIPTION: Demonstrates how to write a Jest test suite (`__tests__/FileSummarizer-test.js`) for the `FileSummarizer` module. It explicitly mocks the built-in `fs` module using `jest.mock('fs')` and uses the custom `__setMockFiles` helper from the `__mocks__/fs.js` mock within a `beforeEach` hook to define the test file system state before each test.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ManualMocks.md#_snippet_3

LANGUAGE: javascript
CODE:
```
'use strict';

jest.mock('fs');

describe('listFilesInDirectorySync', () => {
  const MOCK_FILE_INFO = {
    '/path/to/file1.js': 'console.log("file1 contents");',
    '/path/to/file2.txt': 'file2 contents',
  };

  beforeEach(() => {
    // Set up some mocked out file info before each test
    require('fs').__setMockFiles(MOCK_FILE_INFO);
  });

  test('includes all files in the directory in the summary', () => {
    const FileSummarizer = require('../FileSummarizer');
    const fileSummary =
      FileSummarizer.summarizeFilesInDirectorySync('/path/to');

    expect(fileSummary.length).toBe(2);
  });
});
```

----------------------------------------

TITLE: Nesting Test Suites with Jest's `describe` for Complex Scenarios (JavaScript)
DESCRIPTION: This example demonstrates nesting `describe` blocks in Jest to create a hierarchical structure for tests. It organizes tests for a `binaryStringToNumber` function into categories for valid and invalid inputs, improving test organization and clarity for complex logic.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const binaryStringToNumber = binString => {
  if (!/^[01]+$/.test(binString)) {
    throw new CustomError('Not a binary number.');
  }

  return parseInt(binString, 2);
};

describe('binaryStringToNumber', () => {
  describe('given an invalid binary string', () => {
    test('composed of non-numbers throws CustomError', () => {
      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);
    });

    test('with extra whitespace throws CustomError', () => {
      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);
    });
  });

  describe('given a valid binary string', () => {
    test('returns the correct number', () => {
      expect(binaryStringToNumber('100')).toBe(4);
    });
  });
});
```

----------------------------------------

TITLE: Using Jest Custom Matchers for Mock Functions - JavaScript
DESCRIPTION: This snippet demonstrates common custom matchers provided by Jest for asserting how mock functions have been called. It includes examples for checking if a mock was called, called with specific arguments, called with specific arguments on its last invocation, and for snapshotting mock calls and name. These matchers simplify assertions on the `.mock` property.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#_snippet_17

LANGUAGE: javascript
CODE:
```
// The mock function was called at least once
expect(mockFunc).toHaveBeenCalled();

// The mock function was called at least once with the specified args
expect(mockFunc).toHaveBeenCalledWith(arg1, arg2);

// The last call to the mock function was called with the specified args
expect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);

// All calls and the name of the mock is written as a snapshot
expect(mockFunc).toMatchSnapshot();
```

----------------------------------------

TITLE: Repeating Setup with beforeEach and afterEach in Jest
DESCRIPTION: This snippet demonstrates how to use `beforeEach` and `afterEach` hooks in Jest to perform setup and teardown operations that need to run before and after every test. It initializes and clears a city database for each test, ensuring a clean state. The `test` blocks then verify specific city data.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#_snippet_0

LANGUAGE: js
CODE:
```
beforeEach(() => {
  initializeCityDatabase();
});

afterEach(() => {
  clearCityDatabase();
});

test('city database has Vienna', () => {
  expect(isCity('Vienna')).toBeTruthy();
});

test('city database has San Juan', () => {
  expect(isCity('San Juan')).toBeTruthy();
});
```

----------------------------------------

TITLE: Configuring Jest setupFilesAfterEnv with JavaScript
DESCRIPTION: This snippet shows how to create a setup file that runs after the test framework is installed, allowing for global configurations like extending Jest matchers or setting up teardown hooks. It also demonstrates how to configure Jest to use this setup file.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#_snippet_65

LANGUAGE: JavaScript
CODE:
```
const matchers = require('jest-extended');
expect.extend(matchers);

afterEach(() => {
  jest.useRealTimers();
});
```

LANGUAGE: JavaScript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],
};

module.exports = config;
```

----------------------------------------

TITLE: Importing Jest APIs in TypeScript
DESCRIPTION: This snippet demonstrates how to explicitly import core Jest APIs such as `expect`, `jest`, and `test` from `@jest/globals` when working with TypeScript. This import is necessary for the TypeScript examples on the page to function correctly, as noted in the documentation.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/_TypeScriptExamplesNote.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import {expect, jest, test} from '@jest/globals';
```

----------------------------------------

TITLE: Importing Jest Globals with @jest/globals (TypeScript)
DESCRIPTION: This snippet demonstrates how to explicitly import Jest global functions like `describe`, `expect`, and `it` from the `@jest/globals` package. This approach provides type safety and clarity, making it suitable for projects that prefer explicit imports over relying on global declarations.
SOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-types/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import {describe, expect, it} from '@jest/globals';

describe('my tests', () => {
  it('works', () => {
    expect(1).toBe(1);
  });
});
```

----------------------------------------

TITLE: Isolating Modules with jest.isolateModules() in JavaScript
DESCRIPTION: This example illustrates `jest.isolateModules()`, which creates a sandboxed module registry for code executed within its callback. This provides a stronger isolation mechanism than `jest.resetModules()`, preventing module state conflicts across tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#_snippet_24

LANGUAGE: JavaScript
CODE:
```
let myModule;
jest.isolateModules(() => {
  myModule = require('myModule');
});

const otherCopyOfMyModule = require('myModule');
```

----------------------------------------

TITLE: Using expect.closeTo() for Floating Point Precision in Jest
DESCRIPTION: Shows how to use `expect.closeTo()` specifically for comparing floating-point numbers within object properties or array items, allowing for a specified number of digits after the decimal point. It is intended for use within other matchers like `toEqual`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ExpectAPI.md#_snippet_19

LANGUAGE: javascript
CODE:
```
test('compare float in object properties', () => {
  expect({
    title: '0.1 + 0.2',
    sum: 0.1 + 0.2,
  }).toEqual({
    title: '0.1 + 0.2',
    sum: expect.closeTo(0.3, 5),
  });
});
```

----------------------------------------

TITLE: Testing Async Functions with Jest async/await
DESCRIPTION: This snippet provides two examples of testing asynchronous code using `async`/`await` syntax in Jest. The first test directly awaits the promise resolution before asserting, while the second combines `async`/`await` with the `.resolves` matcher for a cleaner and more readable test structure.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
// async/await can be used.
it('works with async/await', async () => {
  expect.assertions(1);
  const data = await user.getUserName(4);
  expect(data).toBe('Mark');
});

// async/await can also be used with `.resolves`.
it('works with async/await and resolves', async () => {
  expect.assertions(1);
  await expect(user.getUserName(5)).resolves.toBe('Paul');
});
```

----------------------------------------

TITLE: Testing forEach with Jest Mock Function - JavaScript
DESCRIPTION: This test snippet demonstrates how to use a Jest mock function (`jest.fn`) to test the `forEach` utility. It verifies that the mock callback was called the correct number of times, with the expected arguments, and inspects its return values using the `.mock.calls` and `.mock.results` properties.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const forEach = require('./forEach');

const mockCallback = jest.fn(x => 42 + x);

test('forEach mock function', () => {
  forEach([0, 1], mockCallback);

  // The mock function was called twice
  expect(mockCallback.mock.calls).toHaveLength(2);

  // The first argument of the first call to the function was 0
  expect(mockCallback.mock.calls[0][0]).toBe(0);

  // The first argument of the second call to the function was 1
  expect(mockCallback.mock.calls[1][0]).toBe(1);

  // The return value of the first call to the function was 42
  expect(mockCallback.mock.results[0].value).toBe(42);
});
```

----------------------------------------

TITLE: Running Specific Tests by Pattern or Filename with Jest CLI
DESCRIPTION: This command allows running only a subset of tests by providing a pattern or a direct file path. Jest will execute tests whose filenames or paths match the provided argument, enabling focused testing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#_snippet_1

LANGUAGE: bash
CODE:
```
jest my-test #or
jest path/to/my-test.js
```

----------------------------------------

TITLE: Order of Execution for Jest Setup and Teardown Hooks
DESCRIPTION: This snippet illustrates the precise order in which Jest executes beforeAll, afterAll, beforeEach, and afterEach hooks, both at the top level and within nested describe blocks. Understanding this order is crucial for managing test state and dependencies correctly.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
beforeAll(() => console.log('1 - beforeAll'));
afterAll(() => console.log('1 - afterAll'));
beforeEach(() => console.log('1 - beforeEach'));
afterEach(() => console.log('1 - afterEach'));

test('', () => console.log('1 - test'));

describe('Scoped / Nested block', () => {
  beforeAll(() => console.log('2 - beforeAll'));
  afterAll(() => console.log('2 - afterAll'));
  beforeEach(() => console.log('2 - beforeEach'));
  afterEach(() => console.log('2 - afterEach'));

  test('', () => console.log('2 - test'));
});

// 1 - beforeAll
// 1 - beforeEach
// 1 - test
// 1 - afterEach
// 2 - beforeAll
// 1 - beforeEach
// 2 - beforeEach
// 2 - test
// 2 - afterEach
// 1 - afterEach
// 2 - afterAll
// 1 - afterAll
```

----------------------------------------

TITLE: Mocking One-Time Resolved Promises with Jest `mockResolvedValueOnce`
DESCRIPTION: The `mockResolvedValueOnce` method allows a Jest mock function to return a resolved promise with a specific value for a single invocation. This is useful for simulating different successful asynchronous outcomes across multiple calls. It can be chained to define a sequence of resolved values, reverting to `mockResolvedValue` behavior once all `mockResolvedValueOnce` values are consumed.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
jest.fn().mockImplementationOnce(() => Promise.resolve(value));
```

LANGUAGE: JavaScript
CODE:
```
test('async test', async () => {
  const asyncMock = jest
    .fn()
    .mockResolvedValue('default')
    .mockResolvedValueOnce('first call')
    .mockResolvedValueOnce('second call');

  await asyncMock(); // 'first call'
  await asyncMock(); // 'second call'
  await asyncMock(); // 'default'
  await asyncMock(); // 'default'
});
```

LANGUAGE: TypeScript
CODE:
```
import {jest, test} from '@jest/globals';

test('async test', async () => {
  const asyncMock = jest
    .fn<() => Promise<string>>()
    .mockResolvedValue('default')
    .mockResolvedValueOnce('first call')
    .mockResolvedValueOnce('second call');

  await asyncMock(); // 'first call'
  await asyncMock(); // 'second call'
  await asyncMock(); // 'default'
  await asyncMock(); // 'default'
});
```

----------------------------------------

TITLE: Testing User Creation with Module Mocking (JavaScript)
DESCRIPTION: This test suite attempts to verify the `createUser` function's behavior by mocking the `node-fetch` module. It sets up a mock return value for `fetch` to simulate a successful API call. However, it encounters a `TypeError` because the `Response` class, also imported from `node-fetch`, is inadvertently mocked, preventing its `text()` method from functioning correctly.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/BypassingModuleMocks.md#_snippet_1

LANGUAGE: javascript
CODE:
```
jest.mock('node-fetch');

import fetch, {Response} from 'node-fetch';
import {createUser} from './createUser';

test('createUser calls fetch with the right args and returns the user id', async () => {
  fetch.mockReturnValue(Promise.resolve(new Response('4')));

  const userId = await createUser();

  expect(fetch).toHaveBeenCalledTimes(1);
  expect(fetch).toHaveBeenCalledWith('https://website.com/users', {
    method: 'POST',
  });
  expect(userId).toBe('4');
});
```

----------------------------------------

TITLE: Mock Implementations with Default Fallback - JavaScript
DESCRIPTION: Illustrates how `mockImplementationOnce()` interacts with a default implementation set by `jest.fn()`. After all `mockImplementationOnce` behaviors are exhausted, the mock function reverts to its default behavior, useful for testing sequences with a final consistent state.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
const myMockFn = jest
  .fn(() => 'default')
  .mockImplementationOnce(() => 'first call')
  .mockImplementationOnce(() => 'second call');

console.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());
// > 'first call', 'second call', 'default', 'default'
```

----------------------------------------

TITLE: Scoping Jest Hooks with Describe Blocks
DESCRIPTION: This example demonstrates how beforeEach hooks can be scoped. A top-level beforeEach applies to all tests, while a beforeEach inside a describe block applies only to tests within that specific block. This allows for different setup routines for different groups of tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// Applies to all tests in this file
beforeEach(() => {
  return initializeCityDatabase();
});

test('city database has Vienna', () => {
  expect(isCity('Vienna')).toBeTruthy();
});

test('city database has San Juan', () => {
  expect(isCity('San Juan')).toBeTruthy();
});

describe('matching cities to foods', () => {
  // Applies only to tests in this describe block
  beforeEach(() => {
    return initializeFoodDatabase();
  });

  test('Vienna <3 veal', () => {
    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);
  });

  test('San Juan <3 plantains', () => {
    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);
  });
});
```

----------------------------------------

TITLE: Mocking a Module with Custom Factory and Typings in TypeScript
DESCRIPTION: This TypeScript example shows how to use `jest.mock` with a custom factory, similar to the JavaScript version, but with the added benefit of providing type arguments (`<typeof import('../moduleName')>`) for better type safety and autocompletion.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#_snippet_15

LANGUAGE: typescript
CODE:
```
// The optional type argument provides typings for the module factory
jest.mock<typeof import('../moduleName')>('../moduleName', () => {
  return jest.fn(() => 42);
});

// This runs the function specified as second argument to `jest.mock`.
const moduleName = require('../moduleName');
moduleName(); // Will return '42';
```

----------------------------------------

TITLE: Testing Floating Point Numbers with Jest's toBeCloseTo (JavaScript)
DESCRIPTION: This example highlights the importance of using `toBeCloseTo` for comparing floating-point numbers in Jest tests. Due to potential rounding errors in floating-point arithmetic, direct equality checks with `toBe` or `toEqual` can fail, whereas `toBeCloseTo` accounts for tiny precision differences.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UsingMatchers.md#_snippet_5

LANGUAGE: js
CODE:
```
test('adding floating point numbers', () => {
  const value = 0.1 + 0.2;
  //expect(value).toBe(0.3);           This won't work because of rounding error
  expect(value).toBeCloseTo(0.3); // This works.
});
```

----------------------------------------

TITLE: Chaining One-Time Mock Implementations (TypeScript)
DESCRIPTION: This TypeScript example illustrates chaining `mockImplementationOnce` with type annotations to define distinct behaviors for consecutive calls to a mock function. It ensures type safety while providing different return values or side effects for each invocation.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import {jest} from '@jest/globals';

const mockFn = jest
  .fn<(cb: (a: null, b: boolean) => void) => void>()
  .mockImplementationOnce(cb => cb(null, true))
  .mockImplementationOnce(cb => cb(null, false));

mockFn((err, val) => console.log(val)); // true
mockFn((err, val) => console.log(val)); // false
```

----------------------------------------

TITLE: Testing Async/Await with Jest
DESCRIPTION: This Jest test demonstrates how to write asynchronous tests using the `async`/`await` syntax for improved readability and flow control. It includes two examples: one directly awaiting the promise and asserting the result, and another combining `await` with the `.resolves` matcher for a fluent assertion on the resolved value.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
// async/await can be used.
it('works with async/await', async () => {
  expect.assertions(1);
  const data = await user.getUserName(4);
  expect(data).toBe('Mark');
});

// async/await can also be used with `.resolves`.
it('works with async/await and resolves', async () => {
  expect.assertions(1);
  await expect(user.getUserName(5)).resolves.toBe('Paul');
});
```

----------------------------------------

TITLE: Testing Timer-Based Function with Jest's advanceTimersByTime
DESCRIPTION: This Jest test suite uses `jest.useFakeTimers()` to control time. It tests the `timerGame` function, asserting that the callback is not called initially and then is called exactly once after `jest.advanceTimersByTime(1000)` is invoked, simulating the passage of 1 second.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TimerMocks.md#_snippet_7

LANGUAGE: javascript
CODE:
```
jest.useFakeTimers();
it('calls the callback after 1 second via advanceTimersByTime', () => {
  const timerGame = require('../timerGame');
  const callback = jest.fn();

  timerGame(callback);

  // At this point in time, the callback should not have been called yet
  expect(callback).not.toHaveBeenCalled();

  // Fast-forward until all timers have been executed
  jest.advanceTimersByTime(1000);

  // Now our callback should have been called!
  expect(callback).toHaveBeenCalled();
  expect(callback).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Jest Snapshot with Mixed Exact Values and Matchers (JavaScript)
DESCRIPTION: This snippet illustrates that toMatchSnapshot() can accept a mix of asymmetric matchers and exact values. Properties provided as exact values (like name: 'Bond... James Bond') are checked precisely and saved to the snapshot, while properties with matchers (like createdAt: expect.any(Date)) are validated by the matcher.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#_snippet_8

LANGUAGE: javascript
CODE:
```
it('will check the values and pass', () => {
  const user = {
    createdAt: new Date(),
    name: 'Bond... James Bond',
  };

  expect(user).toMatchSnapshot({
    createdAt: expect.any(Date),
    name: 'Bond... James Bond',
  });
});
```

----------------------------------------

TITLE: Passing Snapshot Test with Asymmetric Matchers (JavaScript)
DESCRIPTION: Illustrates how to use Jest's asymmetric matchers (`expect.any(Date)`, `expect.any(Number)`) within `toMatchSnapshot` to handle dynamic properties. This allows the snapshot to pass by asserting the type of the value rather than its exact content.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#_snippet_7

LANGUAGE: javascript
CODE:
```
it('will check the matchers and pass', () => {
  const user = {
    createdAt: new Date(),
    id: Math.floor(Math.random() * 20),
    name: 'LeBron James',
  };

  expect(user).toMatchSnapshot({
    createdAt: expect.any(Date),
    id: expect.any(Number)
  });
});
```

LANGUAGE: javascript
CODE:
```
exports[`will check the matchers and pass 1`] = `\n{\n  "createdAt": Any<Date>,\n  "id": Any<Number>,\n  "name": "LeBron James"\n}\n`;
```

----------------------------------------

TITLE: Checking Object Properties with Jest's .toHaveProperty
DESCRIPTION: This comprehensive example illustrates Jest's `.toHaveProperty` matcher for checking the existence and optional value of properties within an object, including deeply nested properties using dot notation or array key paths. It demonstrates various assertions on a complex `houseForSale` object.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_18

LANGUAGE: js
CODE:
```
// Object containing house features to be tested
const houseForSale = {
  bath: true,
  bedrooms: 4,
  kitchen: {
    amenities: ['oven', 'stove', 'washer'],
    area: 20,
    wallColor: 'white',
    'nice.oven': true,
  },
  livingroom: {
    amenities: [
      {
        couch: [
          ['large', {dimensions: [20, 20]}],
          ['small', {dimensions: [10, 10]}],
        ],
      },
    ],
  },
  'ceiling.height': 2,
};

test('this house has my desired features', () => {
  // Example Referencing
  expect(houseForSale).toHaveProperty('bath');
  expect(houseForSale).toHaveProperty('bedrooms', 4);

  expect(houseForSale).not.toHaveProperty('pool');

  // Deep referencing using dot notation
  expect(houseForSale).toHaveProperty('kitchen.area', 20);
  expect(houseForSale).toHaveProperty('kitchen.amenities', [
    'oven',
    'stove',
    'washer'
  ]);

  expect(houseForSale).not.toHaveProperty('kitchen.open');

  // Deep referencing using an array containing the keyPath
  expect(houseForSale).toHaveProperty(['kitchen', 'area'], 20);
  expect(houseForSale).toHaveProperty(
    ['kitchen', 'amenities'],
    ['oven', 'stove', 'washer']
  );
  expect(houseForSale).toHaveProperty(['kitchen', 'amenities', 0], 'oven');
  expect(houseForSale).toHaveProperty(
    'livingroom.amenities[0].couch[0][1].dimensions[0]',
    20
  );
  expect(houseForSale).toHaveProperty(['kitchen', 'nice.oven']);
  expect(houseForSale).not.toHaveProperty(['kitchen', 'open']);

  // Referencing keys with dot in the key itself
  expect(houseForSale).toHaveProperty(['ceiling.height'], 'tall');
});
```

----------------------------------------

TITLE: Running Tests for Changed Files (Git/Hg)
DESCRIPTION: Executes tests related to files that have been changed since the last commit, leveraging version control systems like Git or Mercurial. This is useful for quickly testing local modifications before committing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#_snippet_2

LANGUAGE: bash
CODE:
```
jest -o
```

----------------------------------------

TITLE: Testing ES6 Class with Jest Automatic Mock in JavaScript
DESCRIPTION: Demonstrates how to use Jest's automatic mocking feature for an ES6 class. It illustrates mocking `SoundPlayer`, clearing mocks before each test, and asserting that the class constructor and its methods were called correctly using Jest's `toHaveBeenCalledTimes` and `toHaveBeenCalledWith` matchers.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import SoundPlayer from './sound-player';
import SoundPlayerConsumer from './sound-player-consumer';
jest.mock('./sound-player'); // SoundPlayer is now a mock constructor

beforeEach(() => {
  // Clear all instances and calls to constructor and all methods:
  SoundPlayer.mockClear();
});

it('We can check if the consumer called the class constructor', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  expect(SoundPlayer).toHaveBeenCalledTimes(1);
});

it('We can check if the consumer called a method on the class instance', () => {
  // Show that mockClear() is working:
  expect(SoundPlayer).not.toHaveBeenCalled();

  const soundPlayerConsumer = new SoundPlayerConsumer();
  // Constructor should have been called again:
  expect(SoundPlayer).toHaveBeenCalledTimes(1);

  const coolSoundFileName = 'song.mp3';
  soundPlayerConsumer.playSomethingCool();

  // mock.instances is available with automatic mocks:
  const mockSoundPlayerInstance = SoundPlayer.mock.instances[0];
  const mockPlaySoundFile = mockSoundPlayerInstance.playSoundFile;
  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);
  // Equivalent to above check:
  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);
  expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Checking Object Length with Jest's .toHaveLength
DESCRIPTION: This example demonstrates Jest's `.toHaveLength` matcher, used to verify that an object (like an array or string) has a `.length` property set to a specific numeric value. It shows assertions for arrays and strings, including negative assertions.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_17

LANGUAGE: js
CODE:
```
expect([1, 2, 3]).toHaveLength(3);
expect('abc').toHaveLength(3);
expect('').not.toHaveLength(5);
```

----------------------------------------

TITLE: Testing Asynchronous Promise Rejections with Jest (JavaScript)
DESCRIPTION: This example demonstrates how to test asynchronous promise rejections using Jest's `rejects.toThrowErrorMatchingSnapshot()` matcher. It defines an async function that always throws an error and then asserts that the promise returned by this function will reject with an error matching a snapshot.
SOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2017-12-18-jest-22.md#_snippet_1

LANGUAGE: javascript
CODE:
```
async function throwingFunction() {
  throw new Error('This failed');
}

test('asynchronous rejection', async () => {
  await expect(throwingFunction()).rejects.toThrowErrorMatchingSnapshot();
});
```

----------------------------------------

TITLE: Testing Recursive Timers with jest.runOnlyPendingTimers() in JavaScript
DESCRIPTION: This Jest test suite illustrates how to test recursive timers using `jest.runOnlyPendingTimers()`. It verifies that the initial 1-second timer fires and creates a new 10-second timer, without getting stuck in an infinite loop, by only executing timers that are pending at the time of the call.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TimerMocks.md#_snippet_4

LANGUAGE: javascript
CODE:
```
jest.useFakeTimers();
jest.spyOn(global, 'setTimeout');

describe('infiniteTimerGame', () => {
  test('schedules a 10-second timer after 1 second', () => {
    const infiniteTimerGame = require('../infiniteTimerGame');
    const callback = jest.fn();

    infiniteTimerGame(callback);

    // At this point in time, there should have been a single call to
    // setTimeout to schedule the end of the game in 1 second.
    expect(setTimeout).toHaveBeenCalledTimes(1);
    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);

    // Fast forward and exhaust only currently pending timers
    // (but not any new timers that get created during that process)
    jest.runOnlyPendingTimers();

    // At this point, our 1-second timer should have fired its callback
    expect(callback).toHaveBeenCalled();

    // And it should have created a new timer to start the game over in
    // 10 seconds
    expect(setTimeout).toHaveBeenCalledTimes(2);
    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);
  });
});
```

----------------------------------------

TITLE: Testing with a Spied Date.now() Function using jest.Spied - TypeScript
DESCRIPTION: This test suite demonstrates the usage of a spied `Date.now()` function, typed with `jest.Spied`, to control and assert its behavior within a test. It includes an `afterEach` hook to reset the mock, ensuring test isolation and proper cleanup after each test case.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#_snippet_32

LANGUAGE: TypeScript
CODE:
```
import {afterEach, expect, type jest, test} from '@jest/globals';
import {setDateNow} from './__utils__/setDateNow';

let spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;

afterEach(() => {
  spiedDateNow?.mockReset();
});

test('renders correctly with a given date', () => {
  spiedDateNow = setDateNow(1_482_363_367_071);
  // ...

  expect(spiedDateNow).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Mocking CommonJS Modules in ESM Test Files - JavaScript
DESCRIPTION: This example shows how to mock CommonJS modules within an ESM test file. It uses `createRequire` to enable `require` calls in ESM for loading CJS modules and `jest.mock` for mocking. It also demonstrates an alternative approach using dynamic `import()` for loading the mocked CJS module.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ECMAScriptModules.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import {createRequire} from 'node:module';
import {jest} from '@jest/globals';

const require = createRequire(import.meta.url);

jest.mock('electron', () => ({
  app: {
    on: jest.fn(),
    whenReady: jest.fn(() => Promise.resolve()),
  },
  BrowserWindow: jest.fn().mockImplementation(() => ({
    // partial mocks.
  })),
}));

const {BrowserWindow} = require('electron');
const exported = require('./main.cjs');

// alternatively
const {BrowserWindow} = (await import('electron')).default;
const exported = await import('./main.cjs');

// etc.
```

----------------------------------------

TITLE: Writing a Jest Test with MongoDB
DESCRIPTION: This JavaScript code demonstrates a Jest test suite for interacting with a MongoDB collection. It uses `beforeAll` and `afterAll` hooks to establish and close a database connection, and an `it` block to test inserting and finding a document, ensuring proper data persistence and retrieval.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MongoDB.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const {MongoClient} = require('mongodb');

describe('insert', () => {
  let connection;
  let db;

  beforeAll(async () => {
    connection = await MongoClient.connect(globalThis.__MONGO_URI__, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    db = await connection.db(globalThis.__MONGO_DB_NAME__);
  });

  afterAll(async () => {
    await connection.close();
  });

  it('should insert a doc into collection', async () => {
    const users = db.collection('users');

    const mockUser = {_id: 'some-user-id', name: 'John'};
    await users.insertOne(mockUser);

    const insertedUser = await users.findOne({_id: 'some-user-id'});
    expect(insertedUser).toEqual(mockUser);
  });
});
```

----------------------------------------

TITLE: Partially Mocking Module Exports in Jest
DESCRIPTION: This test demonstrates partial mocking in Jest using `jest.mock` with a factory function. It mocks the default export and the named export `foo` of the `foo-bar-baz` module, while allowing the `bar` export to retain its original implementation. `jest.requireActual` is used to access the original module.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#_snippet_9

LANGUAGE: js
CODE:
```
import defaultExport, {bar, foo} from '../foo-bar-baz';

jest.mock('../foo-bar-baz', () => {
  const originalModule = jest.requireActual('../foo-bar-baz');

  //Mock the default export and named export 'foo'
  return {
    __esModule: true,
    ...originalModule,
    default: jest.fn(() => 'mocked baz'),
    foo: 'mocked foo',
  };
});

test('should do a partial mock', () => {
  const defaultExportResult = defaultExport();
  expect(defaultExportResult).toBe('mocked baz');
  expect(defaultExport).toHaveBeenCalled();

  expect(foo).toBe('mocked foo');
  expect(bar()).toBe('bar');
});
```

----------------------------------------

TITLE: Mocking window.matchMedia in Jest for JSDOM
DESCRIPTION: This snippet defines a mock implementation for `window.matchMedia` on the global `window` object. It's used to prevent `TypeError` when testing code that relies on this browser API, which is not natively supported by JSDOM. The mock provides a basic structure with `matches`, `media`, and mock functions for event listeners.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ManualMocks.md#_snippet_4

LANGUAGE: javascript
CODE:
```
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(), // deprecated
    removeListener: jest.fn(), // deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});
```

----------------------------------------

TITLE: Defining Asynchronous Tests with test() (Promise) in Jest
DESCRIPTION: This snippet illustrates how Jest handles asynchronous tests when a promise is returned from the test function. Jest will wait for the promise to resolve before marking the test as complete, ensuring that assertions made within the promise's resolution are properly evaluated.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
test('has lemon in it', () => {
  return fetchBeverageList().then(list => {
    expect(list).toContain('lemon');
  });
});
```

----------------------------------------

TITLE: Testing Rejected Promises with Jest's .rejects (JavaScript)
DESCRIPTION: This snippet illustrates the use of Jest's `.rejects` matcher to verify that a promise is rejected with a specific error or pattern. Similar to `.resolves`, returning the `expect` statement is essential for Jest to correctly await the promise's rejection and prevent the test from finishing prematurely.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TestingAsyncCode.md#_snippet_7

LANGUAGE: js
CODE:
```
test('the fetch fails with an error', () => {
  return expect(fetchData()).rejects.toMatch('error');
});
```

----------------------------------------

TITLE: Configuring and Restoring Timers in Jest Tests (JavaScript)
DESCRIPTION: These JavaScript examples demonstrate how to use `jest.useFakeTimers()` with different configurations, such as automatically advancing timers or selectively not faking certain APIs. It also shows how `jest.useRealTimers()` can be used to restore original timers within a test file.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#_snippet_30

LANGUAGE: JavaScript
CODE:
```
test('advance the timers automatically', () => {
  jest.useFakeTimers({advanceTimers: true});
  // ...
});

test('do not advance the timers and do not fake `performance`', () => {
  jest.useFakeTimers({doNotFake: ['performance']});
  // ...
});

test('uninstall fake timers for the rest of tests in the file', () => {
  jest.useRealTimers();
  // ...
});
```

----------------------------------------

TITLE: Using Jest .each with Typed Variable Array of Arrays in TypeScript
DESCRIPTION: This snippet demonstrates using Jest's `.each` modifier with an array of arrays declared as a separate variable. For correct type inference, especially when elements in a row have different types, the table variable must be explicitly typed as an array of tuples (e.g., `Array<[number, number, string, boolean?]>`). Without this annotation, types might be inferred incorrectly, such as `a: number | string | boolean`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_39

LANGUAGE: TypeScript
CODE:
```
import {test} from '@jest/globals';

const table: Array<[number, number, string, boolean?]> = [
  [1, 2, 'three', true],
  [3, 4, 'seven', false],
  [5, 6, 'eleven'],
];

test.each(table)('table as a variable example', (a, b, expected, extra) => {
  // without the annotation types are incorrect, e.g. `a: number | string | boolean`
});
```

----------------------------------------

TITLE: Configuring Jest setupFilesAfterEnv with TypeScript
DESCRIPTION: This snippet demonstrates how to configure Jest using TypeScript to include a setup file that executes after the test framework is installed, providing global setup capabilities for the test suite.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#_snippet_66

LANGUAGE: TypeScript
CODE:
```
import type {Config} from 'jest';

const config: Config = {
  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],
};

export default config;
```

----------------------------------------

TITLE: Configuring JSDOM Test Environment in Jest (JavaScript)
DESCRIPTION: This snippet demonstrates how to specify a browser-like test environment (JSDOM) for all tests within a specific file using the `@jest-environment` docblock. This allows tests to interact with browser APIs like `document.createElement`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#_snippet_71

LANGUAGE: javascript
CODE:
```
/**
 * @jest-environment jsdom
 */

test('use jsdom in this test file', () => {
  const element = document.createElement('div');
  expect(element).not.toBeNull();
});
```

----------------------------------------

TITLE: Configuring Global Coverage Thresholds in Jest (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure global code coverage thresholds in Jest using JavaScript. It sets minimum percentage requirements for branches, functions, and lines, and specifies a maximum number of allowed uncovered statements globally. Jest will fail if these thresholds are not met.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: -10
    }
  }
};

module.exports = config;
```

----------------------------------------

TITLE: Asserting Mock Function Call: Jest .toHaveBeenCalled()
DESCRIPTION: This matcher ensures that a mock function was called at least once. It's useful for verifying that a callback or a specific function within a process was invoked. The example demonstrates checking if `drink` was called for 'lemon' flavor and not called for 'octopus' flavor.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
function drinkAll(callback, flavour) {
  if (flavour !== 'octopus') {
    callback(flavour);
  }
}

describe('drinkAll', () => {
  test('drinks something lemon-flavoured', () => {
    const drink = jest.fn();
    drinkAll(drink, 'lemon');
    expect(drink).toHaveBeenCalled();
  });

  test('does not drink something octopus-flavoured', () => {
    const drink = jest.fn();
    drinkAll(drink, 'octopus');
    expect(drink).not.toHaveBeenCalled();
  });
});
```

----------------------------------------

TITLE: Updating Jest Snapshot Test for React Component (TSX)
DESCRIPTION: This snippet demonstrates a Jest snapshot test for a React `Link` component. It shows how a test might look after an intentional change to the component's props (e.g., `page` attribute), leading to a snapshot mismatch. The `toMatchSnapshot()` assertion is used to compare the rendered component tree against a stored snapshot.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#_snippet_2

LANGUAGE: tsx
CODE:
```
// Updated test case with a Link to a different address
it('renders correctly', () => {
  const tree = renderer
    .create(<Link page="http://www.instagram.com">Instagram</Link>)
    .toJSON();
  expect(tree).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Configuring Jest in package.json for React Native
DESCRIPTION: This JSON snippet shows the default Jest configuration added to `package.json` when initializing a React Native project (v0.38+). It defines a `test` script to run Jest and sets the `jest.preset` to `react-native` for an optimized testing environment.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReactNative.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test": "jest"
  },
  "jest": {
    "preset": "react-native"
  }
}
```

----------------------------------------

TITLE: Testing Resolved Promises with `.resolves` (Return Statement) in Jest
DESCRIPTION: This snippet shows how to test a promise that is expected to resolve to a specific value using the `.resolves` modifier. It's crucial to return the `expect` assertion to ensure Jest waits for the promise to settle in an asynchronous test.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_2

LANGUAGE: js
CODE:
```
test('resolves to lemon', () => {
  // make sure to add a return statement
  return expect(Promise.resolve('lemon')).resolves.toBe('lemon');
});
```

----------------------------------------

TITLE: Configuring Jest to Mock Static Assets
DESCRIPTION: This Jest configuration uses `moduleNameMapper` to mock common static asset files (images, fonts, media) and stylesheets. It redirects imports of these file types to simple mock files, preventing them from being processed during tests, which is useful when their content is not relevant for testing logic.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  moduleNameMapper: {
    '\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':
      '<rootDir>/__mocks__/fileMock.js',
    '\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',
  },
};
```

----------------------------------------

TITLE: Running Specific Data-Driven Test Suites with Jest's describe.only.each (Template Literal Syntax) - JavaScript
DESCRIPTION: This example illustrates `describe.only.each` using a tagged template literal for data-driven tests. This syntax provides a more readable way to define test data in a tabular format. Similar to the array syntax, it ensures that only this specific suite of tests is executed, ignoring other tests in the file.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#_snippet_11

LANGUAGE: js
CODE:
```
describe.only.each`
  a    | b    | expected
  ${1} | ${1} | ${2}
  ${1} | ${2} | ${3}
  ${2} | ${1} | ${3}
`('returns $expected when $a is added to $b', ({a, b, expected}) => {
  test('passes', () => {
    expect(a + b).toBe(expected);
  });
});

test('will not be run', () => {
  expect(1 / 0).toBe(Infinity);
});
```

----------------------------------------

TITLE: Running Specific Data-Driven Tests with `test.only.each` (Array)
DESCRIPTION: This example shows `test.only.each` with an array of test data. Only the tests defined within this `each` block will run, allowing focused debugging of data-driven tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#_snippet_29

LANGUAGE: JavaScript
CODE:
```
test.only.each([
  [1, 1, 2],
  [1, 2, 3],
  [2, 1, 3]
])('.add(%i, %i)', (a, b, expected) => {
  expect(a + b).toBe(expected);
});

test('will not be run', () => {
  expect(1 / 0).toBe(Infinity);
});
```

----------------------------------------

TITLE: Focusing on Specific Parameterized Tests with Jest `each.test.only` (JavaScript)
DESCRIPTION: This snippet demonstrates using `each.test.only` to run only a specific set of parameterized tests defined by the tagged template literal. This is useful for debugging or focusing on a subset of tests without running the entire test suite, similar to Jest's global `.only` functionality.
SOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
each`
  a    | b    | expected
  ${1} | ${1} | ${2}
  ${1} | ${2} | ${3}
  ${2} | ${1} | ${3}
`.test.only('returns $expected when adding $a to $b', ({a, b, expected}) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Running Tests Related to Specific Files with Jest CLI
DESCRIPTION: This command finds and runs tests that are related to the specified source files. It helps in targeting tests that might be impacted by changes in particular modules, ensuring relevant tests are executed.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#_snippet_3

LANGUAGE: bash
CODE:
```
jest --findRelatedTests path/to/fileA.js path/to/fileB.js
```

----------------------------------------

TITLE: Running Tests by Spec Name
DESCRIPTION: This command filters and runs tests based on a specific test or describe block name. The provided string is matched against the names defined within `describe` or `test` blocks in your test files.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CLI.md#_snippet_4

LANGUAGE: bash
CODE:
```
jest -t name-of-spec
```

----------------------------------------

TITLE: Asserting Mock Function Arguments - Jest - JavaScript
DESCRIPTION: Use `.toHaveBeenCalledWith` to ensure that a mock function was called with specific arguments. The argument comparison uses the same deep equality algorithm as `.toEqual`, allowing for complex object comparisons. This example demonstrates checking if the 'f' mock function was called with a specific 'beverage' object.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_9

LANGUAGE: javascript
CODE:
```
test('registration applies correctly to orange La Croix', () => {
  const beverage = new LaCroix('orange');
  register(beverage);
  const f = jest.fn();
  applyToAll(f);
  expect(f).toHaveBeenCalledWith(beverage);
});
```

----------------------------------------

TITLE: Defining Jest Tests with .each Using Variable Array of Objects (TypeScript)
DESCRIPTION: This example shows how to define test cases for Jest's `.each` modifier by declaring the array of objects as a separate variable. This approach also ensures correct type inference for the test callback arguments, such as `extra: boolean | undefined`, maintaining type safety and readability.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#_snippet_36

LANGUAGE: TypeScript
CODE:
```
import {test} from '@jest/globals';

const table = [
  {a: 1, b: 2, expected: 'three', extra: true},
  {a: 3, b: 4, expected: 'seven', extra: false},
  {a: 5, b: 6, expected: 'eleven'},
];

test.each(table)('table as a variable', ({a, b, expected, extra}) => {
  // again everything is typed as expected, e.g. `extra: boolean | undefined`
});
```

----------------------------------------

TITLE: Wrapping Types with `jest.Mocked` for Mock Functions in TypeScript
DESCRIPTION: This snippet demonstrates `jest.Mocked<Source>`, a utility type that wraps a source type with Jest mock function definitions. It's useful for providing correct typings when mocking external modules or functions, ensuring that the mocked entity has the expected Jest mock properties.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#_snippet_25

LANGUAGE: TypeScript
CODE:
```
import {expect, jest, test} from '@jest/globals';
import type {fetch} from 'node-fetch';

jest.mock('node-fetch');

let mockedFetch: jest.Mocked<typeof fetch>;

afterEach(() => {
  mockedFetch.mockClear();
});

test('makes correct call', () => {
  mockedFetch = getMockedFetch();
  // ...
});

test('returns correct data', () => {
  mockedFetch = getMockedFetch();
  // ...
});
```

----------------------------------------

TITLE: Complete Jest Test for Mocked Class - JavaScript
DESCRIPTION: A comprehensive Jest test file demonstrating the use of `jest.mock` with a module factory, `beforeEach` for cleanup, and assertions to verify constructor calls and method interactions with a mocked class. It shows how to test a consumer of the `SoundPlayer` class.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#_snippet_20

LANGUAGE: javascript
CODE:
```
import SoundPlayer from './sound-player';
import SoundPlayerConsumer from './sound-player-consumer';

const mockPlaySoundFile = jest.fn();
jest.mock('./sound-player', () => {
  return jest.fn().mockImplementation(() => {
    return {playSoundFile: mockPlaySoundFile};
  });
});

beforeEach(() => {
  SoundPlayer.mockClear();
  mockPlaySoundFile.mockClear();
});

it('The consumer should be able to call new() on SoundPlayer', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  // Ensure constructor created the object:
  expect(soundPlayerConsumer).toBeTruthy();
});

it('We can check if the consumer called the class constructor', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  expect(SoundPlayer).toHaveBeenCalledTimes(1);
});

it('We can check if the consumer called a method on the class instance', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  const coolSoundFileName = 'song.mp3';
  soundPlayerConsumer.playSomethingCool();
  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);
});
```

----------------------------------------

TITLE: Setting Up Before All Tests with Jest beforeAll (JavaScript)
DESCRIPTION: This example shows how to use Jest's `beforeAll` hook to set up global state before any tests in a file begin. It demonstrates clearing and inserting initial data into a global database, and Jest waits for the setup promise to resolve before proceeding with tests. This is ideal for one-time, asynchronous setup of shared resources.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

beforeAll(() => {
  // Clears the database and adds some testing data.
  // Jest will wait for this promise to resolve before running tests.
  return globalDatabase.clear().then(() => {
    return globalDatabase.insert({testData: 'foo'});
  });
});

// Since we only set up the database once in this example, it's important
// that our tests don't modify it.
test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});
```

----------------------------------------

TITLE: Using and Overriding Jest Fake Timers in Test Files (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to enable fake timers within a specific test file using `jest.useFakeTimers()`, which applies the default configuration from Jest. It also shows how to override specific fake timer options, such as `timerLimit`, for a particular test or block of tests, allowing for fine-grained control over timer behavior during testing.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#_snippet_24

LANGUAGE: JavaScript
CODE:
```
// install fake timers for this file using the options from Jest configuration
jest.useFakeTimers();

test('increase the limit of recursive timers for this and following tests', () => {
  jest.useFakeTimers({timerLimit: 5000});
  // ...
});
```

----------------------------------------

TITLE: Importing JSDOM Mock Before Tested File
DESCRIPTION: This snippet demonstrates how to import a manual mock, such as the `matchMedia` mock, into a test file. It emphasizes that the mock file must be imported *before* the file containing the code under test to ensure the mock is available when the tested code is executed, especially if the mocked method is called directly at the module level.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/ManualMocks.md#_snippet_5

LANGUAGE: js
CODE:
```
import './matchMedia.mock'; // Must be imported before the tested file
import {myMethod} from './file-to-test';

describe('myMethod()', () => {
  // Test the method here...
});
```

----------------------------------------

TITLE: Running Multiple Configurations/Runners with Jest Projects (JS/TS)
DESCRIPTION: This example demonstrates using the `projects` option to execute different configurations or runners within a single Jest invocation. It sets up two projects: one for standard tests and another for ESLint linting using `jest-runner-eslint`, identified by unique `displayName` properties for clarity in output.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#_snippet_47

LANGUAGE: javascript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  projects: [
    {
      displayName: 'test',
    },
    {
      displayName: 'lint',
      runner: 'jest-runner-eslint',
      testMatch: ['<rootDir>/**/*.js'],
    },
  ],
};

module.exports = config;
```

LANGUAGE: typescript
CODE:
```
import type {Config} from 'jest';

const config: Config = {
  projects: [
    {
      displayName: 'test',
    },
    {
      displayName: 'lint',
      runner: 'jest-runner-eslint',
      testMatch: ['<rootDir>/**/*.js'],
    },
  ],
};

export default config;
```

----------------------------------------

TITLE: Replacing Random String Parts for Snapshot Testing (JavaScript)
DESCRIPTION: Demonstrates how to make string snapshots deterministic by replacing random parts (e.g., a dynamic ID in an HTML string) using `String.prototype.replace()` and regular expressions before performing the snapshot assertion.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const randomNumber = Math.round(Math.random() * 100);
const stringWithRandomData = `<div id=\"${randomNumber}\">Lorem ipsum</div>`;
const stringWithConstantData = stringWithRandomData.replace(/id=\"\\d+\"/, 123);
expect(stringWithConstantData).toMatchSnapshot();
```

----------------------------------------

TITLE: Configuring GitHub Actions Reporter for Jest
DESCRIPTION: This configuration demonstrates how to integrate the built-in GitHub Actions reporter with Jest. By setting `silent: false`, it enables detailed logging with GitHub group features and test failure annotations. It also includes the `'summary'` reporter for a concise test run summary, noting that the `'default'` reporter is not needed when using `'github-actions'`.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#_snippet_52

LANGUAGE: JavaScript
CODE:
```
/** @type {import('jest').Config} */
const config = {
  reporters: [['github-actions', {silent: false}], 'summary'],
};

module.exports = config;
```

LANGUAGE: TypeScript
CODE:
```
import type {Config} from 'jest';

const config: Config = {
  reporters: [['github-actions', {silent: false}], 'summary'],
};

export default config;
```

----------------------------------------

TITLE: Mocking ECMAScript Modules (ESM) with `jest.unstable_mockModule` - JavaScript
DESCRIPTION: This example illustrates how to mock an ECMAScript Module (ESM) using the experimental `jest.unstable_mockModule` API. It requires a factory function and demonstrates dynamically importing the mocked module after the `jest.unstable_mockModule` call to ensure the mock is applied. This approach is necessary due to ESM's static import evaluation.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ECMAScriptModules.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import {jest} from '@jest/globals';

jest.unstable_mockModule('node:child_process', () => ({
  execSync: jest.fn(),
  // etc.
}));

const {execSync} = await import('node:child_process');

// etc.
```

----------------------------------------

TITLE: Defining Sequential Mock Implementations (Jest JavaScript)
DESCRIPTION: This example illustrates how to use `mockImplementationOnce()` to define different behaviors for a mock function across multiple consecutive calls. Each call consumes one of the defined implementations, allowing for testing scenarios with varying return values or side effects.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#_snippet_13

LANGUAGE: javascript
CODE:
```
const myMockFn = jest
  .fn()
  .mockImplementationOnce(cb => cb(null, true))
  .mockImplementationOnce(cb => cb(null, false));

myMockFn((err, val) => console.log(val));
// > true

myMockFn((err, val) => console.log(val));
// > false
```

----------------------------------------

TITLE: Checking Array and Iterable Containment with `toContain` in Jest
DESCRIPTION: This example shows how to use the `toContain` matcher to verify if an array or any iterable (like a Set) includes a specific item. It's useful for checking the presence of elements within collections.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UsingMatchers.md#_snippet_7

LANGUAGE: js
CODE:
```
const shoppingList = [
  'diapers',
  'kleenex',
  'trash bags',
  'paper towels',
  'milk',
];

test('the shopping list has milk on it', () => {
  expect(shoppingList).toContain('milk');
  expect(new Set(shoppingList)).toContain('milk');
});
```

----------------------------------------

TITLE: Setting Up Before All Tests with Jest beforeAll (JavaScript)
DESCRIPTION: This example shows how to use `beforeAll` to set up global state, like initializing and populating a database, once before any tests in the file run. It highlights `beforeAll`'s ability to wait for promises to resolve, enabling asynchronous setup. The function accepts an optional `timeout` parameter.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const globalDatabase = makeGlobalDatabase();

beforeAll(() => {
  // Clears the database and adds some testing data.
  // Jest will wait for this promise to resolve before running tests.
  return globalDatabase.clear().then(() => {
    return globalDatabase.insert({testData: 'foo'});
  });
});

// Since we only set up the database once in this example, it's important
// that our tests don't modify it.
test('can find things', () => {
  return globalDatabase.find('thing', {}, results => {
    expect(results.length).toBeGreaterThan(0);
  });
});
```

----------------------------------------

TITLE: Implementing Mock Function Logic with mockImplementation (TypeScript)
DESCRIPTION: Illustrates the use of `mockImplementation` in TypeScript to redefine a mock function's behavior, ensuring type safety for parameters and return values.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#_snippet_6

LANGUAGE: typescript
CODE:
```
import {jest} from '@jest/globals';

const mockFn = jest.fn((scalar: number) => 42 + scalar);

mockFn(0); // 42
mockFn(1); // 43

mockFn.mockImplementation(scalar => 36 + scalar);

mockFn(2); // 38
mockFn(3); // 39
```

----------------------------------------

TITLE: Configuring Babel for React and Jest
DESCRIPTION: Sets up Babel configuration to transpile modern JavaScript and React JSX syntax. It uses `@babel/preset-env` for environment-specific transpilation and `@babel/preset-react` with `runtime: 'automatic'` for React JSX transformation, enabling Jest to understand React components.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  presets: [
    '@babel/preset-env',
    ['@babel/preset-react', {runtime: 'automatic'}],
  ],
};
```

----------------------------------------

TITLE: Complete Jest Test File for Class Mocking and Spying - JavaScript
DESCRIPTION: This is a complete Jest test file demonstrating how to mock a class (`SoundPlayer`) and its methods, and then test a consumer class (`SoundPlayerConsumer`). It includes setup for mocking, cleanup using `beforeEach`, and multiple test cases (`it` blocks) to verify constructor calls, instance creation, and method calls with specific parameters.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
import SoundPlayer from './sound-player';
import SoundPlayerConsumer from './sound-player-consumer';

const mockPlaySoundFile = jest.fn();
jest.mock('./sound-player', () => {
  return jest.fn().mockImplementation(() => {
    return {playSoundFile: mockPlaySoundFile};
  });
});

beforeEach(() => {
  SoundPlayer.mockClear();
  mockPlaySoundFile.mockClear();
});

it('The consumer should be able to call new() on SoundPlayer', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  // Ensure constructor created the object:
  expect(soundPlayerConsumer).toBeTruthy();
});

it('We can check if the consumer called the class constructor', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  expect(SoundPlayer).toHaveBeenCalledTimes(1);
});

it('We can check if the consumer called a method on the class instance', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  const coolSoundFileName = 'song.mp3';
  soundPlayerConsumer.playSomethingCool();
  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);
});
```

----------------------------------------

TITLE: Defining Sequential Mock Implementations (Jest, JavaScript)
DESCRIPTION: This example illustrates `mockImplementationOnce`, which allows defining different behaviors for successive calls to a mock function. Each call consumes one `mockImplementationOnce` definition, and once they are exhausted, the mock function will fall back to its default implementation or return `undefined`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
const myMockFn = jest
  .fn()
  .mockImplementationOnce(cb => cb(null, true))
  .mockImplementationOnce(cb => cb(null, false));

myMockFn((err, val) => console.log(val));
// > true

myMockFn((err, val) => console.log(val));
// > false
```

----------------------------------------

TITLE: Clearing Jest Mocks Between Tests with beforeEach - JavaScript
DESCRIPTION: This `beforeEach` hook demonstrates how to clear the call records of both the mocked class constructor (`SoundPlayer.mockClear()`) and its mocked method (`mockPlaySoundFile.mockClear()`). This ensures a clean state for each test, preventing interference from previous test runs.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#_snippet_19

LANGUAGE: javascript
CODE:
```
beforeEach(() => {
  SoundPlayer.mockClear();
  mockPlaySoundFile.mockClear();
});
```

----------------------------------------

TITLE: Handling Asynchronous Errors with Promises and .catch in Jest
DESCRIPTION: This snippet explains how to test for rejected promises using the `.catch` method. It's crucial to include `expect.assertions(1)` to ensure that the assertion within the `.catch` block is actually executed, preventing false positives if the promise fulfills instead of rejecting.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
test('the fetch fails with an error', () => {
  expect.assertions(1);
  return fetchData().catch(error => expect(error).toMatch('error'));
});
```

----------------------------------------

TITLE: Updating All Failing Jest Snapshots (Bash)
DESCRIPTION: This command-line instruction uses the jest CLI with the --updateSnapshot flag (or its shorthand -u) to re-generate all snapshot artifacts for tests that are currently failing. This is typically used after intentional component changes have caused snapshot mismatches, allowing the new component state to be recorded as the valid snapshot.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#_snippet_3

LANGUAGE: bash
CODE:
```
jest --updateSnapshot
```

----------------------------------------

TITLE: Advancing Timers by Specific Time in Jest
DESCRIPTION: This function advances the fake timers by a specified number of milliseconds (`msToRun`), executing all pending macro-tasks (from `setTimeout`, `setInterval`, `setImmediate`) that would have run within that timeframe. It also recursively executes any new macro-tasks scheduled within the same period.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#_snippet_38

LANGUAGE: JavaScript
CODE:
```
jest.advanceTimersByTime(msToRun)
```

----------------------------------------

TITLE: Mocking Constructor with `jest.mock()` and Factory (JavaScript)
DESCRIPTION: This snippet demonstrates how to mock a constructor function using `jest.mock()` with a module factory. The factory returns a higher-order function that, when called, returns an object with a mocked `playSoundFile` method. This setup allows `new SoundPlayer()` to return the mocked instance.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import SoundPlayer from './sound-player';
const mockPlaySoundFile = jest.fn();
jest.mock('./sound-player', () => {
  return jest.fn().mockImplementation(() => {
    return {playSoundFile: mockPlaySoundFile};
  });
});
```

----------------------------------------

TITLE: Testing the Opposite with `.not` Modifier in Jest
DESCRIPTION: This example shows how to use the `.not` modifier with `expect` to assert that a value does *not* meet a certain condition. Here, it verifies that `bestLaCroixFlavor()` does not return 'coconut'.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#_snippet_1

LANGUAGE: js
CODE:
```
test('the best flavor is not coconut', () => {
  expect(bestLaCroixFlavor()).not.toBe('coconut');
});
```

----------------------------------------

TITLE: Chaining mockResolvedValueOnce with mockResolvedValue in Jest (TypeScript)
DESCRIPTION: Demonstrates how to use `mockResolvedValueOnce` with type annotations to specify resolved Promise values for the first few asynchronous calls to a mock function, falling back to `mockResolvedValue` for subsequent calls. This is useful for testing sequences of async operations.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#_snippet_27

LANGUAGE: typescript
CODE:
```
import {jest, test} from '@jest/globals';

test('async test', async () => {
  const asyncMock = jest
    .fn<() => Promise<string>>()
    .mockResolvedValue('default')
    .mockResolvedValueOnce('first call')
    .mockResolvedValueOnce('second call');

  await asyncMock(); // 'first call'
  await asyncMock(); // 'second call'
  await asyncMock(); // 'default'
  await asyncMock(); // 'default'
});
```

----------------------------------------

TITLE: Verifying Assertion Count in Jest Tests - JavaScript
DESCRIPTION: This snippet demonstrates how to use `expect.assertions(number)` to ensure that a specific number of assertions are called within a test, which is particularly useful for verifying that assertions inside asynchronous callbacks are executed.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ExpectAPI.md#_snippet_25

LANGUAGE: js
CODE:
```
test('doAsync calls both callbacks', () => {
  expect.assertions(2);
  function callback1(data) {
    expect(data).toBeTruthy();
  }
  function callback2(data) {
    expect(data).toBeTruthy();
  }

  doAsync(callback1, callback2);
});
```

----------------------------------------

TITLE: Setting One-Time Resolved Promises with Jest's mockResolvedValueOnce
DESCRIPTION: The `mockResolvedValueOnce` method allows a Jest mock function to return a resolved promise with a specific value for a single invocation. This is useful for simulating a sequence of successful asynchronous operations with varying results. After all `mockResolvedValueOnce` values are consumed, the mock will revert to `mockResolvedValue` or `mockReturnValue` behavior.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#_snippet_15

LANGUAGE: javascript
CODE:
```
jest.fn().mockImplementationOnce(() => Promise.resolve(value));
```

LANGUAGE: javascript
CODE:
```
test('async test', async () => {
  const asyncMock = jest
    .fn()
    .mockResolvedValue('default')
    .mockResolvedValueOnce('first call')
    .mockResolvedValueOnce('second call');

  await asyncMock(); // 'first call'
  await asyncMock(); // 'second call'
  await asyncMock(); // 'default'
  await asyncMock(); // 'default'
});
```

LANGUAGE: typescript
CODE:
```
import {jest, test} from '@jest/globals';

test('async test', async () => {
  const asyncMock = jest
    .fn<() => Promise<string>>()
    .mockResolvedValue('default')
    .mockResolvedValueOnce('first call')
    .mockResolvedValueOnce('second call');

  await asyncMock(); // 'first call'
  await asyncMock(); // 'second call'
  await asyncMock(); // 'default'
  await asyncMock(); // 'default'
});
```

----------------------------------------

TITLE: Configuring Sequential Return Values for Jest Mocks in JavaScript
DESCRIPTION: This snippet demonstrates how to use `mockReturnValueOnce()` and `mockReturnValue()` to configure a Jest mock function to return different values on successive calls. `mockReturnValueOnce()` sets values for specific calls, while `mockReturnValue()` sets a default for all subsequent calls, enabling precise control over mock behavior.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const myMock = jest.fn();
console.log(myMock());
// > undefined

myMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);

console.log(myMock(), myMock(), myMock(), myMock());
// > 10, 'x', true, true
```

----------------------------------------

TITLE: Configuring toBeWithinRange Globally (JavaScript)
DESCRIPTION: This JavaScript snippet illustrates how to configure the `toBeWithinRange` custom matcher to be available across all Jest test files. By placing the `expect.extend` call in a `setupFilesAfterEnv` script, you eliminate the need to import the matcher into every individual test file, streamlining test setup.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_70

LANGUAGE: javascript
CODE:
```
import {expect} from '@jest/globals';
// remember to export `toBeWithinRange` as well
import {toBeWithinRange} from './toBeWithinRange';

expect.extend({
  toBeWithinRange,
});
```

----------------------------------------

TITLE: Mocking Class Constructor with `mockImplementation` (JavaScript)
DESCRIPTION: This JavaScript test snippet demonstrates how to mock a class constructor using `jest.mock` and `mockImplementation`. It shows how to return a mocked instance with a specific method and track calls to that method.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const SomeClass = require('./SomeClass');

jest.mock('./SomeClass'); // this happens automatically with automocking

const mockMethod = jest.fn();
SomeClass.mockImplementation(() => {
  return {
    method: mockMethod,
  };
});

const some = new SomeClass();
some.method('a', 'b');

console.log('Calls to method:', mockMethod.mock.calls);
```

----------------------------------------

TITLE: Checking Class Instance with toBeInstanceOf in Jest (JavaScript)
DESCRIPTION: This matcher verifies if an object is an instance of a specified class, internally using the `instanceof` operator. It's useful for type checking objects against their constructor functions.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#_snippet_26

LANGUAGE: JavaScript
CODE:
```
class A {}

expect(new A()).toBeInstanceOf(A);
expect(() => {}).toBeInstanceOf(Function);
expect(new A()).toBeInstanceOf(Function); // throws
```

----------------------------------------

TITLE: Creating Partial Mocks with jest.requireActual
DESCRIPTION: This example illustrates how `jest.requireActual` can be used within a `jest.mock` factory to obtain the original, unmocked module. This technique enables partial mocking, allowing specific functions to be mocked while retaining the original implementation for others.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#_snippet_20

LANGUAGE: javascript
CODE:
```
jest.mock('../myModule', () => {
  // Require the original module to not be mocked...
  const originalModule = jest.requireActual('../myModule');

  return {
    __esModule: true, // Use it when dealing with esModules
    ...originalModule,
    getRandom: jest.fn(() => 10)
  };
});

const getRandom = require('../myModule').getRandom;

getRandom(); // Always returns 10
```

LANGUAGE: typescript
CODE:
```
jest.mock('../myModule', () => {
  // Require the original module to not be mocked...
  const originalModule =
    jest.requireActual<typeof import('../myModule')>('../myModule');

  return {
    __esModule: true, // Use it when dealing with esModules
    ...originalModule,
    getRandom: jest.fn(() => 10)
  };
});

const getRandom = require('../myModule').getRandom;

getRandom(); // Always returns 10
```

----------------------------------------

TITLE: Checking Array/Iterable Content with Jest toContain (JavaScript)
DESCRIPTION: This snippet illustrates the use of Jest's `toContain` matcher to verify if an array or any iterable (like a `Set`) includes a specific item. It asserts that 'milk' is present in the `shoppingList` array and a `Set` created from it.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UsingMatchers.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
const shoppingList = [
  'diapers',
  'kleenex',
  'trash bags',
  'paper towels',
  'milk',
];

test('the shopping list has milk on it', () => {
  expect(shoppingList).toContain('milk');
  expect(new Set(shoppingList)).toContain('milk');
});
```

----------------------------------------

TITLE: Accessing Call Arguments with mock.calls in Jest
DESCRIPTION: This snippet illustrates the structure of the `mockFn.mock.calls` array, which stores the arguments passed to each invocation of a mock function. Each inner array represents a single call, containing the arguments in the order they were received.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
[
  ['arg1', 'arg2'],
  ['arg3', 'arg4'],
]
```

----------------------------------------

TITLE: Importing Jest Globals in TypeScript Test
DESCRIPTION: Demonstrates how to import Jest global APIs like `describe`, `expect`, and `test` from `@jest/globals` in a TypeScript test file. This approach provides explicit type definitions and avoids `no-undef` errors when using ESLint without specific environment configurations.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#_snippet_15

LANGUAGE: typescript
CODE:
```
import {describe, expect, test} from '@jest/globals';
import {sum} from './sum';

describe('sum module', () => {
  test('adds 1 + 2 to equal 3', () => {
    expect(sum(1, 2)).toBe(3);
  });
});
```

----------------------------------------

TITLE: Inspecting Last Mock Function Call Arguments (Jest)
DESCRIPTION: This snippet shows how `mockFn.mock.lastCall` provides the arguments of the most recent invocation of a mock function. If the function has not been called, it returns `undefined`.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#_snippet_4

LANGUAGE: javascript
CODE:
```
['arg3', 'arg4'];
```

----------------------------------------

TITLE: Testing Promise Resolution with .resolves in Jest
DESCRIPTION: This example illustrates a more concise way to test promise resolution using `await` and Jest's `.resolves` matcher. This directly asserts that the promise resolves to a specific value.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#_snippet_3

LANGUAGE: js
CODE:
```
test('the data is peanut butter', async () => {
  await expect(fetchData()).resolves.toBe('peanut butter');
});
```

----------------------------------------

TITLE: Testing Async Errors with Async/Await and Try/Catch in Jest (JavaScript)
DESCRIPTION: This Jest test shows how to handle asynchronous errors using `async`/`await` with a `try`/`catch` block. It attempts to call the async function and asserts the error caught in the `catch` block, providing a familiar error handling pattern.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
// Or using async/await.
it('tests error with async/await', async () => {
  expect.assertions(1);
  try {
    await user.getUserName(1);
  } catch (error) {
    expect(error).toEqual({
      error: 'User with 1 not found.',
    });
  }
});
```

----------------------------------------

TITLE: Configuring Jest Coverage Thresholds with Globs and Paths (JavaScript)
DESCRIPTION: This JavaScript configuration demonstrates setting `coverageThreshold` for global, directory-specific, glob-matching, and file-specific paths. It allows for granular control over coverage requirements, where thresholds for specific paths are applied independently and subtracted from overall global coverage.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#_snippet_16

LANGUAGE: js
CODE:
```
/** @type {import('jest').Config} */
const config = {
  coverageThreshold: {
    global: {
      branches: 50,
      functions: 50,
      lines: 50,
      statements: 50,
    },
    './src/components/': {
      branches: 40,
      statements: 40,
    },
    './src/reducers/**/*.js': {
      statements: 90,
    },
    './src/api/very-important-module.js': {
      branches: 100,
      functions: 100,
      lines: 100,
      statements: 100,
    },
  },
};

module.exports = config;
```

----------------------------------------

TITLE: Testing `forEach` with Jest Mock Functions in JavaScript
DESCRIPTION: This Jest test suite demonstrates how to use `jest.fn()` to create a mock callback for the `forEach` function. It asserts that the mock function was called the expected number of times, with the correct arguments, and verifies the return values of the mock calls using the `.mock.calls` and `.mock.results` properties.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const forEach = require('./forEach');

const mockCallback = jest.fn(x => 42 + x);

test('forEach mock function', () => {
  forEach([0, 1], mockCallback);

  // The mock function was called twice
  expect(mockCallback.mock.calls).toHaveLength(2);

  // The first argument of the first call to the function was 0
  expect(mockCallback.mock.calls[0][0]).toBe(0);

  // The first argument of the second call to the function was 1
  expect(mockCallback.mock.calls[1][0]).toBe(1);

  // The return value of the first call to the function was 42
  expect(mockCallback.mock.results[0].value).toBe(42);
});
```

----------------------------------------

TITLE: Testing requestAnimationFrame with advanceTimersToNextFrame - Jest JavaScript
DESCRIPTION: This Jest test illustrates how to test `requestAnimationFrame` callbacks using `jest.useFakeTimers()` and `jest.advanceTimersToNextFrame()`. It ensures the callback is not executed immediately but is called precisely after advancing the timers to the next animation frame, which Jest simulates as a 16ms increment.
SOURCE: https://github.com/jestjs/jest/blob/main/docs/TimerMocks.md#_snippet_8

LANGUAGE: javascript
CODE:
```
jest.useFakeTimers();
it('calls the animation frame callback after advanceTimersToNextFrame()', () => {
  const callback = jest.fn();

  requestAnimationFrame(callback);

  // At this point in time, the callback should not have been called yet
  expect(callback).not.toHaveBeenCalled();

  jest.advanceTimersToNextFrame();

  // Now our callback should have been called!
  expect(callback).toHaveBeenCalled();
  expect(callback).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Data-Driven Test Suite with `describe.each` (Array of Arrays) - JavaScript
DESCRIPTION: This snippet demonstrates using `describe.each` with an array of arrays to define test data. Each inner array provides arguments for the test function. The suite title uses `printf` formatting (`%i`) to inject values from the data rows. It includes multiple `test` cases within the `describe` block, asserting addition results.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
describe.each([
  [1, 1, 2],
  [1, 2, 3],
  [2, 1, 3]
])('.add(%i, %i)', (a, b, expected) => {
  test(`returns ${expected}`, () => {
    expect(a + b).toBe(expected);
  });

  test(`returned value not be greater than ${expected}`, () => {
    expect(a + b).not.toBeGreaterThan(expected);
  });

  test(`returned value not be less than ${expected}`, () => {
    expect(a + b).not.toBeLessThan(expected);
  });
});
```

----------------------------------------

TITLE: Running Parameterized Tests with Jest `each.test` (JavaScript)
DESCRIPTION: This example illustrates how to use `each` with `.test` to execute a single test function multiple times, each with a different set of input parameters defined in a tagged template literal. It allows for concise data-driven testing by injecting values into both the test name and the test function arguments.
SOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
each`
  a    | b    | expected
  ${1} | ${1} | ${2}
  ${1} | ${2} | ${3}
  ${2} | ${1} | ${3}
`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {
  expect(a + b).toBe(expected);
});
```

----------------------------------------

TITLE: Testing ES6 Class with Jest Automatic Mock in JavaScript
DESCRIPTION: This test suite demonstrates how to use Jest's automatic mocking feature for an ES6 class. It shows how to mock the 'SoundPlayer' class, clear mock calls before each test, and assert that the class constructor and its methods were called correctly by the 'SoundPlayerConsumer'.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import SoundPlayer from './sound-player';
import SoundPlayerConsumer from './sound-player-consumer';
jest.mock('./sound-player'); // SoundPlayer is now a mock constructor

beforeEach(() => {
  // Clear all instances and calls to constructor and all methods:
  SoundPlayer.mockClear();
});

it('We can check if the consumer called the class constructor', () => {
  const soundPlayerConsumer = new SoundPlayerConsumer();
  expect(SoundPlayer).toHaveBeenCalledTimes(1);
});

it('We can check if the consumer called a method on the class instance', () => {
  // Show that mockClear() is working:
  expect(SoundPlayer).not.toHaveBeenCalled();

  const soundPlayerConsumer = new SoundPlayerConsumer();
  // Constructor should have been called again:
  expect(SoundPlayer).toHaveBeenCalledTimes(1);

  const coolSoundFileName = 'song.mp3';
  soundPlayerConsumer.playSomethingCool();

  // mock.instances is available with automatic mocks:
  const mockSoundPlayerInstance = SoundPlayer.mock.instances[0];
  const mockPlaySoundFile = mockSoundPlayerInstance.playSoundFile;
  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);
  // Equivalent to above check:
  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);
  expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Debugging Specific Jest Tests with test.only - JavaScript
DESCRIPTION: This snippet demonstrates how to use `test.only` in Jest to run only a single, specific test. This is useful for debugging flaky tests that fail when run as part of a larger suite but pass in isolation, helping to isolate issues related to shared state or interference from other tests.
SOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#_snippet_8

LANGUAGE: js
CODE:
```
test.only('this will be the only test that runs', () => {
  expect(true).toBe(false);
});

test('this test will not run', () => {
  expect('A').toBe('A');
});
```