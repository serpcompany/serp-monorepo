TITLE: Text Interpolation with Mustache Syntax in Vue.js
DESCRIPTION: This snippet demonstrates basic text interpolation in Vue.js using the 'Mustache' syntax (`{{ }}`). The `msg` property from the component instance is bound to the `span` element's content, ensuring it updates reactively whenever `msg` changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<span>Message: {{ msg }}</span>
```

----------------------------------------

TITLE: Creating Vue App with Untrusted Template (Avoid)
DESCRIPTION: This snippet demonstrates a critical security vulnerability where a Vue application is initialized using a template string that includes unsanitized, user-provided content. This practice is highly discouraged as it allows arbitrary JavaScript execution and can lead to severe security breaches, especially during server-side rendering. The `userProvidedString` should never be directly concatenated into the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_0

LANGUAGE: js
CODE:
```
Vue.createApp({
  template: `<div>` + userProvidedString + `</div>` // NEVER DO THIS
}).mount('#app')
```

----------------------------------------

TITLE: Displaying String Data in Vue.js Template
DESCRIPTION: This snippet demonstrates basic data interpolation in a Vue.js template. It uses double curly braces `{{ }}` to bind and display the value of a `message` data property, updating the DOM reactively when `message` changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/_hint/App/template.html#_snippet_0

LANGUAGE: Vue.js
CODE:
```
{{ message }}
```

----------------------------------------

TITLE: Scaffolding a Vue Project with create-vue
DESCRIPTION: This snippet demonstrates how to initialize a new Vue project using the create-vue scaffolding tool with different package managers. It installs and executes create-vue, which then prompts the user for various optional features like TypeScript, routing, and state management.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_1

LANGUAGE: sh
CODE:
```
npm create vue@latest
```

LANGUAGE: sh
CODE:
```
pnpm create vue@latest
```

LANGUAGE: sh
CODE:
```
# For Yarn (v1+)
yarn create vue

# For Yarn Modern (v2+)
yarn create vue@latest

# For Yarn ^v4.11
yarn dlx create-vue@latest
```

LANGUAGE: sh
CODE:
```
bun create vue@latest
```

----------------------------------------

TITLE: Displaying Todo Item Text in Vue.js Template
DESCRIPTION: This snippet demonstrates the use of Vue.js mustache syntax (`{{ }}`) to display the `text` property of a `todo` object. It's commonly used within a list rendering context to show individual item details.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/_hint/App/template.html#_snippet_0

LANGUAGE: Vue.js Template
CODE:
```
{{ todo.text }}
```

----------------------------------------

TITLE: Creating Vue App with Single-File Component Root (JavaScript)
DESCRIPTION: Demonstrates how to create a Vue application instance when the root component is imported from a Single-File Component (SFC), typically `App.vue`. This approach is common in modern Vue projects for better organization and modularity.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_1

LANGUAGE: js
CODE:
```
import { createApp } from 'vue'
// import the root component App from a single-file component.
import App from './App.vue'

const app = createApp(App)
```

----------------------------------------

TITLE: Mounting Vue Application Instance (JavaScript)
DESCRIPTION: Shows how to mount a previously created Vue application instance to a specific DOM element using its ID selector. This method initiates the rendering of the root component and its children within the specified container, making the application visible.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_3

LANGUAGE: js
CODE:
```
app.mount('#app')
```

----------------------------------------

TITLE: Initializing Vue Application Instance with createApp (JavaScript)
DESCRIPTION: Explains how to create a basic Vue application instance using `createApp`, which serves as the entry point for a Vue app. It takes an options object for the root component, defining its initial state and behavior.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_0

LANGUAGE: js
CODE:
```
import { createApp } from 'vue'

const app = createApp({
  /* root component options */
})
```

----------------------------------------

TITLE: Shorthand for v-bind Attribute Binding in Vue.js
DESCRIPTION: This snippet shows the common shorthand syntax for `v-bind`, replacing `v-bind:` with a colon `:` for more concise attribute binding in Vue.js templates.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_11

LANGUAGE: vue-html
CODE:
```
<img :src="imageSrc" />
```

----------------------------------------

TITLE: Simplifying Two-Way Bindings with v-model (Vue.js HTML)
DESCRIPTION: This snippet illustrates the use of Vue's `v-model` directive for simplified two-way data binding on an HTML input element. `v-model` automatically handles syncing the input's value with the `text` data property, eliminating the need for separate `v-bind:value` and `v-on:input` directives and their corresponding event handlers.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/description.md#_snippet_3

LANGUAGE: vue-html
CODE:
```
<input v-model="text">
```

----------------------------------------

TITLE: Implementing Reactive useFetch Composable with watchEffect and toValue in Vue.js
DESCRIPTION: This is the refactored implementation of the `useFetch` composable, demonstrating how to make it reactive using `watchEffect` and `toValue`. It initializes reactive `data` and `error` refs, defines a `fetchData` function to perform the actual fetch, and uses `watchEffect` to automatically re-run `fetchData` whenever the `url` (normalized by `toValue`) or its reactive dependencies change. `toValue` handles both refs and getter functions for the URL.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
// fetch.js
import { ref, watchEffect, toValue } from 'vue'

export function useFetch(url) {
  const data = ref(null)
  const error = ref(null)

  const fetchData = () => {
    // reset state before fetching..
    data.value = null
    error.value = null

    fetch(toValue(url))
      .then((res) => res.json())
      .then((json) => (data.value = json))
      .catch((err) => (error.value = err))
  }

  watchEffect(() => {
    fetchData()
  })

  return { data, error }
}
```

----------------------------------------

TITLE: Displaying and Updating Reactive State in Template - Vue.js HTML
DESCRIPTION: This Vue template snippet displays the reactive `count` value and provides a button that increments `count` when clicked. The `{{ count }}` syntax performs text interpolation, and `@click` is a shorthand for `v-on:click` for event handling.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_3

LANGUAGE: HTML
CODE:
```
<template>
  <button @click="count++">Count is: {{ count }}</button>
</template>
```

----------------------------------------

TITLE: Rendering data State in Vue Templates
DESCRIPTION: This Vue HTML snippet illustrates how to render reactive state declared via the `data` option within a Vue template using mustache syntax (`{{ }}`). It displays the value of the `message` property, which is automatically made available in the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_6

LANGUAGE: Vue HTML
CODE:
```
<h1>{{ message }}</h1>
```

----------------------------------------

TITLE: Handling Multiple `v-model` Modifiers with `defineModel` in Vue Composition API
DESCRIPTION: This Vue Composition API snippet demonstrates the modern `defineModel` macro for handling multiple `v-model` bindings with arguments and modifiers. It automatically sets up the corresponding props and allows direct access to the value and the modifier object (e.g., `firstNameModifiers`), simplifying component implementation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_33

LANGUAGE: vue
CODE:
```
<script setup>
const [firstName, firstNameModifiers] = defineModel('firstName')
const [lastName, lastNameModifiers] = defineModel('lastName')

console.log(firstNameModifiers) // { capitalize: true }
console.log(lastNameModifiers) // { uppercase: true }
</script>
```

----------------------------------------

TITLE: Displaying Reactive Count in Vue.js Template
DESCRIPTION: This snippet shows how to display a reactive data property named 'count' within a Vue.js template using mustache syntax. The value will automatically update when 'count' changes in the component's data.
SOURCE: https://github.com/vuejs/docs/blob/main/src/examples/src/counter/App/template.html#_snippet_0

LANGUAGE: Vue.js Template
CODE:
```
{{ count }}
```

----------------------------------------

TITLE: Vue.js CRUD Component Implementation
DESCRIPTION: This comprehensive Vue.js single-file component implements the full CRUD logic. It includes the template for rendering the UI, script for data management and methods (create, update, delete, select, unselect), and basic scoped styling, demonstrating a complete Vue.js solution for the CRUD task.
SOURCE: https://github.com/vuejs/docs/blob/main/src/examples/src/crud/description.txt#_snippet_2

LANGUAGE: Vue.js
CODE:
```
<template>
  <div>
    <table class="users">
      <tr v-for="user in users" :class="{ selected: user === selected }" @click="select(user)">
        <td>{{ user.name }}</td>
        <td>{{ user.email }}</td>
      </tr>
    </table>
    <div class="form">
      <input type="text" placeholder="Name" v-model="name">
      <input type="text" placeholder="Email" v-model="email">
    </div>
    <div class="actions">
      <button :disabled="!canCreate" @click="create">Create</button>
      <button :disabled="!canUpdate" @click="update">Update</button>
      <button :disabled="!canDelete" @click="del">Delete</button>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      name: '',
      email: '',
      selected: null,
      users: [
        { name: 'Hans', email: 'hans@example.com' },
        { name: 'Sepp', email: 'sepp@example.com' }
      ]
    }
  },
  computed: {
    canCreate() {
      return this.name && this.email && !this.selected
    },
    canUpdate() {
      return this.name && this.email && this.selected
    },
    canDelete() {
      return this.selected
    }
  },
  methods: {
    create() {
      this.users.push({ name: this.name, email: this.email })
      this.name = ''
      this.email = ''
    },
    update() {
      this.selected.name = this.name
      this.selected.email = this.email
      this.unselect()
    },
    del() {
      this.users.splice(this.users.indexOf(this.selected), 1)
      this.unselect()
    },
    select(user) {
      this.selected = user
      this.name = user.name
      this.email = user.email
    },
    unselect() {
      this.selected = null
      this.name = ''
      this.email = ''
    }
  }
}
</script>

<style scoped>
.users {
  border: 1px solid gray;
  width: 100%;
  margin-bottom: 10px;
}
.users tr {
  cursor: pointer;
}
.users tr.selected {
  background: #ddd;
}
.form {
  margin-bottom: 10px;
}
.form input {
  display: block;
  width: 100%;
  margin-bottom: 5px;
}
.actions button {
  margin-right: 5px;
}
</style>
```

----------------------------------------

TITLE: Displaying Component Prop in Template - Vue.js HTML
DESCRIPTION: This Vue template snippet demonstrates how to display a prop (`message`) passed to the component. The `{{ message }}` syntax interpolates the value of the `message` prop into the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_11

LANGUAGE: HTML
CODE:
```
<template>
  <p>{{ message }}</p>
</template>
```

----------------------------------------

TITLE: Conditionally Rendering Element with v-if in Vue.js
DESCRIPTION: This snippet demonstrates the basic usage of the `v-if` directive in Vue.js. The `<h1>` element will only be rendered in the DOM if the `awesome` data property evaluates to a truthy value. If `awesome` becomes falsy, the element is completely removed from the DOM.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-6/description.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<h1 v-if="awesome">Vue is awesome!</h1>
```

----------------------------------------

TITLE: Displaying Reactive Data in Vue.js Template
DESCRIPTION: This snippet demonstrates basic text interpolation in a Vue.js template. The `{{ count }}` syntax binds the `count` data property from the component's instance to the DOM, updating automatically when `count` changes. It's a core feature for displaying dynamic content.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/_hint/App/template.html#_snippet_0

LANGUAGE: Vue.js Template
CODE:
```
{{ count }}
```

----------------------------------------

TITLE: Declaring Props in Vue SFC (Composition API)
DESCRIPTION: This snippet demonstrates how to declare props in a Vue Single File Component using the Composition API's `script setup` syntax. The `defineProps()` macro is used to define the `msg` prop as a `String`. Once declared, `msg` can be accessed in the template or via the `props` object returned by `defineProps()`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-12/description.md#_snippet_0

LANGUAGE: vue
CODE:
```
<!-- ChildComp.vue -->
<script setup>
const props = defineProps({
  msg: String
})
</script>
```

----------------------------------------

TITLE: Displaying List Item in Vue.js Template
DESCRIPTION: This snippet illustrates the basic Vue.js template syntax for interpolating and displaying a single data item. It assumes 'item' is a reactive property available in the component's data or computed properties, which will be rendered directly into the HTML.
SOURCE: https://github.com/vuejs/docs/blob/main/src/examples/src/conditionals-and-loops/App/template.html#_snippet_0

LANGUAGE: Vue.js Template
CODE:
```
{{ item }}
```

----------------------------------------

TITLE: Declaring Reactive Primitives with ref() in Vue.js
DESCRIPTION: This snippet illustrates the use of Vue's `ref()` API to declare reactive state for any value type, including primitives. It creates a `message` ref, demonstrating how to access its inner value via the `.value` property and how assigning a new value to `.value` makes it reactive.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { ref } from 'vue'

const message = ref('Hello World!')

console.log(message.value) // "Hello World!"
message.value = 'Changed'
```

----------------------------------------

TITLE: Using `ref()` in Vue.js Templates (Automatic Unwrapping)
DESCRIPTION: This Vue HTML template snippet demonstrates how a `ref` (like `count`) is automatically unwrapped when used directly within a component's template, eliminating the need for `.value`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_5

LANGUAGE: vue-html
CODE:
```
<div>{{ count }}</div>
```

----------------------------------------

TITLE: Setting Props Default Values with Reactive Destructure (Vue 3.5+)
DESCRIPTION: This TypeScript snippet shows how to set default values for optional props using reactive props destructuring with `defineProps<Props>()`. It defines an interface `Props` with optional `msg` and `labels`, then assigns default values directly during destructuring. This feature is available in Vue 3.5 and above.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
interface Props {
  msg?: string
  labels?: string[]
}

const { msg = 'hello', labels = ['one', 'two'] } = defineProps<Props>()
```

----------------------------------------

TITLE: Binding a Single Attribute with v-bind in Vue.js
DESCRIPTION: This snippet demonstrates the basic usage of `v-bind` to dynamically bind an HTML attribute, such as `src` for an image, to a data property `imageSrc` in Vue.js.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_9

LANGUAGE: vue-html
CODE:
```
<img v-bind:src="imageSrc" />
```

----------------------------------------

TITLE: Basic Component with Composition API using <script setup> in Vue
DESCRIPTION: This snippet demonstrates a basic Vue component using the Composition API with <script setup> syntax. It initializes a reactive `count` state using `ref()`, defines an `increment` function to modify it, and uses the `onMounted()` lifecycle hook to log the initial count to the console. The template binds the `increment` function to a button click and displays the reactive `count`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/composition-api-faq.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup>
import { ref, onMounted } from 'vue'

// reactive state
const count = ref(0)

// functions that mutate state and trigger updates
function increment() {
  count.value++
}

// lifecycle hooks
onMounted(() => {
  console.log(`The initial count is ${count.value}.`)
})
</script>

<template>
  <button @click="increment">Count is: {{ count }}</button>
</template>
```

----------------------------------------

TITLE: Basic Vue SFC with Composition API and <script setup>
DESCRIPTION: This snippet illustrates a Vue Single-File Component (SFC) utilizing the Composition API with `<script setup>`. It uses `ref` from Vue to create a reactive `count` variable, which is updated and displayed by a button. Scoped CSS is applied to style the button.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_5

LANGUAGE: vue
CODE:
```
<script setup>
import { ref } from 'vue'
const count = ref(0)
</script>

<template>
  <button @click="count++">Count is: {{ count }}</button>
</template>

<style scoped>
button {
  font-weight: bold;
}
</style>
```

----------------------------------------

TITLE: Displaying Reactive Data in Vue.js Template
DESCRIPTION: This snippet shows how to use mustache syntax (double curly braces) to interpolate and display the value of a reactive data property named 'count' directly within the HTML template. This is a fundamental concept for rendering dynamic content in Vue.js applications, automatically updating the view when 'count' changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/App/template.html#_snippet_0

LANGUAGE: Vue.js Template
CODE:
```
Count is: {{ count }}
```

----------------------------------------

TITLE: Vue Component Logic with Composition API and <script setup>
DESCRIPTION: This snippet demonstrates a Vue component using the Composition API with `<script setup>`. It utilizes `ref` for reactive state and `onMounted` for a lifecycle hook. Functions like `increment` directly mutate the reactive state. This approach offers more flexible logic organization compared to the Options API.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_7

LANGUAGE: vue
CODE:
```
<script setup>
import { ref, onMounted } from 'vue'

// reactive state
const count = ref(0)

// functions that mutate state and trigger updates
function increment() {
  count.value++
}

// lifecycle hooks
onMounted(() => {
  console.log(`The initial count is ${count.value}.`)
})
</script>

<template>
  <button @click="increment">Count is: {{ count }}</button>
</template>
```

----------------------------------------

TITLE: Scaffolding Vue Project with npm
DESCRIPTION: This command uses npm to execute `create-vue`, the official Vue project scaffolding tool, to quickly set up a new Vue project. It's the recommended way to start new Vue projects with Vite, prompting the user for project details.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_0

LANGUAGE: sh
CODE:
```
$ npm create vue@latest
```

----------------------------------------

TITLE: Importing and Using Components in Vue Script Setup
DESCRIPTION: This snippet illustrates how components imported into the scope of `<script setup>` can be directly used as custom component tag names in the template. This approach is similar to how components are referenced in JSX, promoting a more intuitive component usage.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_4

LANGUAGE: Vue
CODE:
```
<script setup>
import MyComponent from './MyComponent.vue'
</script>

<template>
  <MyComponent />
</template>
```

----------------------------------------

TITLE: Reactive Props Destructuring in Vue (3.5+ Compiler Transformation)
DESCRIPTION: This snippet shows the compiler transformation for destructured props in Vue 3.5 and above. The compiler automatically prepends `props.` to destructured variables (like `foo`) when accessed within the same `<script setup>` block, ensuring reactivity is preserved and `watchEffect` re-runs on prop changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_8

LANGUAGE: js
CODE:
```
const props = defineProps(['foo'])

watchEffect(() => {
  // `foo` transformed to `props.foo` by the compiler
  console.log(props.foo)
})
```

----------------------------------------

TITLE: Creating Vue Application Instance with Inline Component - JavaScript
DESCRIPTION: Demonstrates how to create a Vue application instance using `createApp` with an inline root component definition. This approach is suitable for simple applications or quick tests.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { createApp } from 'vue'

const app = createApp({
  /* root component options */
})
```

----------------------------------------

TITLE: Executing Code on Component Mount with onMounted - Vue.js JavaScript
DESCRIPTION: This Vue.js component snippet demonstrates the use of the `onMounted` lifecycle hook. The callback function passed to `onMounted` will be executed once the component has been mounted to the DOM.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_9

LANGUAGE: JavaScript
CODE:
```
import { onMounted } from 'vue'

export default {
  setup() {
    onMounted(() => {
      console.log('Component mounted!')
    })
  }
}
```

----------------------------------------

TITLE: Exposing Top-Level Bindings to Template in Vue Script Setup
DESCRIPTION: This example illustrates how variables and functions declared at the top level within `<script setup>` are automatically exposed and directly usable in the component's template, reducing the need for explicit `return` statements from a `setup()` function.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<script setup>
// variable
const msg = 'Hello!'

// functions
function log() {
  console.log(msg)
}
</script>

<template>
  <button @click="log">{{ msg }}</button>
</template>
```

----------------------------------------

TITLE: Basic Script Setup Syntax in Vue
DESCRIPTION: This snippet demonstrates the fundamental way to opt into the `<script setup>` syntax by adding the `setup` attribute to the `<script>` block. Code within this block executes every time a component instance is created, unlike regular `<script>` tags.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup>
console.log('hello script setup')
</script>
```

----------------------------------------

TITLE: Using `v-for` with `key` on a `div` in Vue.js
DESCRIPTION: Demonstrates the basic usage of the `v-for` directive to iterate over an array (`items`) and the `key` attribute (`item.id`) to provide a unique identifier for each element. This enables Vue to efficiently track and reorder DOM nodes, which is crucial when list render output relies on child component state or temporary DOM state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_20

LANGUAGE: vue-html
CODE:
```
<div v-for="item in items" :key="item.id">
  <!-- content -->
</div>
```

----------------------------------------

TITLE: Adding Prop Options to defineModel in Vue.js Composition API
DESCRIPTION: This JavaScript snippet demonstrates how to pass prop options, such as `required: true`, to `defineModel()` when defining a `v-model` argument in the Vue.js Composition API. These options are applied to the underlying prop created by `defineModel`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_17

LANGUAGE: javascript
CODE:
```
const title = defineModel('title', { required: true })
```

----------------------------------------

TITLE: Creating a Reusable Event Listener Composable
DESCRIPTION: This composable, `useEventListener`, abstracts the common pattern of adding and removing DOM event listeners. It takes a target element, event type, and callback function, automatically managing the listener's lifecycle using `onMounted` and `onUnmounted` for clean setup and teardown.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_4

LANGUAGE: js
CODE:
```
// event.js
import { onMounted, onUnmounted } from 'vue'

export function useEventListener(target, event, callback) {
  // if you want, you can also make this
  // support selector strings as target
  onMounted(() => target.addEventListener(event, callback))
  onUnmounted(() => target.removeEventListener(event, callback))
}
```

----------------------------------------

TITLE: Limitation: Destructuring Reactive Object Properties in Vue.js
DESCRIPTION: This snippet demonstrates a limitation of `reactive()` regarding destructuring. When a primitive property (`count`) is destructured from a reactive object, its reactivity connection is lost. Similarly, passing a primitive property directly to a function also loses reactivity, requiring the entire object to be passed instead.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_24

LANGUAGE: js
CODE:
```
const state = reactive({ count: 0 })

// count is disconnected from state.count when destructured.
let { count } = state
// does not affect original state
count++

// the function receives a plain number and
// won't be able to track changes to state.count
// we have to pass the entire object in to retain reactivity
callSomeFunction(state.count)
```

----------------------------------------

TITLE: Using ref() for Basic Reactivity in JavaScript
DESCRIPTION: This JavaScript example demonstrates how to create a reactive reference using `ref()` and access/modify its inner value via the `.value` property. Changes to `.value` are reactive and trigger updates.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const count = ref(0)
console.log(count.value) // 0

count.value = 1
console.log(count.value) // 1
```

----------------------------------------

TITLE: Declaring Reactive State with `ref()` in Vue.js
DESCRIPTION: This snippet demonstrates the basic declaration of a reactive state variable `count` using the `ref()` function from Vue's reactivity core. `ref()` initializes a reactive reference with a given value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_2

LANGUAGE: js
CODE:
```
import { ref } from 'vue'

const count = ref(0)
```

----------------------------------------

TITLE: Initializing Vue Application - JavaScript
DESCRIPTION: This snippet demonstrates the standard entry point for a Vue 3 application. It imports `createApp` from Vue and the root `App.vue` component, then mounts the application to an HTML element with the ID `app`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createApp } from 'vue'
import App from './App.vue'

createApp(App).mount('#app')
```

----------------------------------------

TITLE: Iterating with Index or Key using v-for in Vue.js
DESCRIPTION: This snippet shows how to access the index or key during `v-for` iteration. For arrays, `(item, index)` provides the item and its index. For objects, `(value, key)` provides the value and its key, and `(value, name, index)` provides value, key, and index.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_5

LANGUAGE: vue-html
CODE:
```
<div v-for="(item, index) in items"></div>
<div v-for="(value, key) in object"></div>
<div v-for="(value, name, index) in object"></div>
```

----------------------------------------

TITLE: Passing Content to Vue.js Component with Slots
DESCRIPTION: This Vue HTML snippet illustrates how to pass content, 'Something bad happened.', directly into a custom `AlertBox` component. This content will be rendered inside the component wherever the `<slot />` element is defined in the `AlertBox`'s template, enabling flexible content distribution.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_25

LANGUAGE: Vue HTML
CODE:
```
<AlertBox>
  Something bad happened.
</AlertBox>
```

----------------------------------------

TITLE: Typing `defineModel` with TypeScript
DESCRIPTION: This snippet demonstrates how to use TypeScript with `defineModel` to specify the types of the model value and its modifiers. It shows examples of defining a string model, making it required, and typing the modifiers for enhanced type safety and autocompletion.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_22

LANGUAGE: TypeScript
CODE:
```
const modelValue = defineModel<string>()
//    ^? Ref<string | undefined>

// default model with options, required removes possible undefined values
const modelValue = defineModel<string>({ required: true })
//    ^? Ref<string>

const [modelValue, modifiers] = defineModel<string, 'trim' | 'uppercase'>()
//                 ^? Record<'trim' | 'uppercase', true | undefined>
```

----------------------------------------

TITLE: Declaring Reactive State with ref - Vue.js JavaScript
DESCRIPTION: This Vue.js component snippet demonstrates how to declare a reactive state variable `count` using the `ref` function within the `setup` composition API. The `ref` makes the `count` variable reactive, meaning changes to its value will trigger re-renders.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { ref } from 'vue'

export default {
  setup() {
    const count = ref(0)
    return { count }
  }
}
```

----------------------------------------

TITLE: Wrapping Native Input with v-model using defineModel in Vue
DESCRIPTION: This Vue component illustrates how to wrap a native HTML input element while maintaining `v-model` usage. By binding the `defineModel()` ref directly to the `<input>` element with `v-model`, the component provides a seamless two-way binding experience, mirroring the behavior of native input elements.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<script setup>
const model = defineModel()
</script>

<template>
  <input v-model="model" />
</template>
```

----------------------------------------

TITLE: Implementing Two-Way Binding with defineModel in Vue Child Component
DESCRIPTION: This Vue 3.4+ child component demonstrates how to use the `defineModel()` macro for two-way data binding. The `model` ref is synced with the parent's `v-model` value, and mutations to `model.value` (e.g., via the `update` function) automatically update the parent. It displays the current bound value and provides a button to increment it.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<!-- Child.vue -->
<script setup>
const model = defineModel()

function update() {
  model.value++
}
</script>

<template>
  <div>Parent bound v-model is: {{ model }}</div>
  <button @click="update">Increment</button>
</template>
```

----------------------------------------

TITLE: Defining Initial Reactive Data (Composition API)
DESCRIPTION: This snippet defines the initial reactive data using the Composition API's `reactive` function. It creates an `author` object with a `name` and an array of `books`, serving as the base data for demonstrating computed properties.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_1

LANGUAGE: js
CODE:
```
const author = reactive({
  name: 'John Doe',
  books: [
    'Vue 2 - Advanced Guide',
    'Vue 3 - Basic Guide',
    'Vue 4 - The Mystery'
  ]
})
```

----------------------------------------

TITLE: Defining Vue.js Component with Default Slot (`AlertBox.vue`)
DESCRIPTION: This Vue single-file component defines an `AlertBox` that uses a default `<slot />` element. The slot acts as a placeholder for content passed into the component from its parent, allowing for flexible and reusable UI elements. The component also includes basic styling and a static header.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_26

LANGUAGE: Vue
CODE:
```
<!-- AlertBox.vue -->
<template>
  <div class="alert-box">
    <strong>This is an Error for Demo Purposes</strong>
    <slot />
  </div>
</template>

<style scoped>
.alert-box {
  /* ... */
}
</style>
```

----------------------------------------

TITLE: Using a Vue.js Component in an Application (JavaScript)
DESCRIPTION: This snippet shows how to integrate a defined Vue.js component into a main application instance. It involves importing the component, registering it locally within the root component's `components` option, and then using it in the root component's template. This is the standard way to compose applications from smaller, reusable parts.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/App/template.html#_snippet_1

LANGUAGE: javascript
CODE:
```
import { createApp } from 'vue';
import App from './App.vue';
import MyComponent from './MyComponent.vue';

const app = createApp(App);

// Register MyComponent locally within App
app.component('MyComponent', MyComponent);

app.mount('#app');
```

----------------------------------------

TITLE: Accessing Props in setup() in Vue
DESCRIPTION: This example illustrates how to access component props within the `setup()` function. The `props` argument is reactive, meaning it will update when new props are passed. It's crucial to access props directly as `props.xxx` to maintain reactivity, as destructuring the `props` object will cause reactivity loss.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_1

LANGUAGE: js
CODE:
```
export default {
  props: {
    title: String
  },
  setup(props) {
    console.log(props.title)
  }
}
```

----------------------------------------

TITLE: Importing Vue.js with ES Modules
DESCRIPTION: This snippet demonstrates the standard ES module import syntax for `createApp` from the `vue` library, assuming `vue` is resolved via an import map or similar mechanism. It's a common way to start a Vue application when using ES modules.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import { createApp } from 'vue'
```

----------------------------------------

TITLE: Passing Content to Multiple Named and Default Slots with Shorthand
DESCRIPTION: This Vue-HTML example demonstrates passing content to the 'header', 'default', and 'footer' slots of the `<BaseLayout>` component using the `v-slot` shorthand (`#`). It illustrates how to populate multiple specific content areas within a component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_15

LANGUAGE: vue-html
CODE:
```
<BaseLayout>
  <template #header>
    <h1>Here might be a page title</h1>
  </template>

  <template #default>
    <p>A paragraph for the main content.</p>
    <p>And another one.</p>
  </template>

  <template #footer>
    <p>Here's some contact info</p>
  </template>
</BaseLayout>
```

----------------------------------------

TITLE: Using Computed Properties for Declarative Reactivity in Vue.js
DESCRIPTION: This snippet demonstrates the use of Vue's `computed` API for creating derived reactive state. `A2` is defined as a computed property that automatically re-evaluates its value (`A0.value + A1.value`) whenever its reactive dependencies (`A0`, `A1`) change, providing a declarative way to manage dependent data.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
import { ref, computed } from 'vue'

const A0 = ref(0)
const A1 = ref(1)
const A2 = computed(() => A0.value + A1.value)

A0.value = 2
```

----------------------------------------

TITLE: Enabling TypeScript in Vue Composition API SFCs with <script setup>
DESCRIPTION: This example illustrates enabling TypeScript in a Vue Single-File Component using the Composition API with `<script setup>`. The `lang="ts"` attribute ensures TypeScript support for both the script and template sections, providing type checking and auto-completion.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
// TypeScript enabled
import { ref } from 'vue'

const count = ref(1)
</script>

<template>
  <!-- type checking and auto-completion enabled -->
  {{ count.toFixed(2) }}
</template>
```

----------------------------------------

TITLE: Enabling TypeScript in Vue Options API SFCs
DESCRIPTION: This snippet demonstrates how to enable TypeScript in a Vue Single-File Component using the Options API by adding `lang="ts"` to the `<script>` tag. It shows how template expressions benefit from stricter type checking and auto-completion when TypeScript is enabled.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  data() {
    return {
      count: 1
    }
  }
})
</script>

<template>
  <!-- type checking and auto-completion enabled -->
  {{ count.toFixed(2) }}
</template>
```

----------------------------------------

TITLE: Comprehensive v-on Event Handling Examples in Vue.js
DESCRIPTION: This comprehensive snippet demonstrates various ways to use the `v-on` directive (and its `@` shorthand) for event handling in Vue.js. It includes examples for method handlers, dynamic events, inline statements with `$event`, common modifiers like `.stop`, `.prevent`, `.once`, chaining modifiers, key modifiers (`.enter`), and the object syntax for multiple event listeners.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_7

LANGUAGE: vue-html
CODE:
```
<!-- method handler -->
<button v-on:click="doThis"></button>

<!-- dynamic event -->
<button v-on:[event]="doThis"></button>

<!-- inline statement -->
<button v-on:click="doThat('hello', $event)"></button>

<!-- shorthand -->
<button @click="doThis"></button>

<!-- shorthand dynamic event -->
<button @[event]="doThis"></button>

<!-- stop propagation -->
<button @click.stop="doThis"></button>

<!-- prevent default -->
<button @click.prevent="doThis"></button>

<!-- prevent default without expression -->
<form @submit.prevent></form>

<!-- chain modifiers -->
<button @click.stop.prevent="doThis"></button>

<!-- key modifier using keyAlias -->
<input @keyup.enter="onEnter" />

<!-- the click event will be triggered at most once -->
<button v-on:click.once="doThis"></button>

<!-- object syntax -->
<button v-on="{ mousedown: doThis, mouseup: doThat }"></button>
```

----------------------------------------

TITLE: Chaining Conditional Renders with v-else-if in Vue.js
DESCRIPTION: The `v-else-if` directive denotes an 'else if block' for a `v-if` chain, allowing for multiple conditional branches. It expects an expression and must immediately follow an element with `v-if` or `v-else-if`. It can be used on `<template>` for conditional blocks containing text or multiple elements.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_3

LANGUAGE: vue-html
CODE:
```
<div v-if="type === 'A'">
    A
</div>
<div v-else-if="type === 'B'">
    B
</div>
<div v-else-if="type === 'C'">
    C
</div>
<div v-else>
    Not A/B/C
</div>
```

----------------------------------------

TITLE: Vue Component Logic with Options API
DESCRIPTION: This example showcases a Vue component implemented with the Options API, demonstrating `data`, `methods`, and `mounted` lifecycle hook. The `data` option defines reactive state, `methods` define functions to mutate state, and `mounted` executes code after the component is added to the DOM. The component increments and displays a count.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_6

LANGUAGE: vue
CODE:
```
<script>
export default {
  // Properties returned from data() become reactive state
  // and will be exposed on `this`.
  data() {
    return {
      count: 0
    }
  },

  // Methods are functions that mutate state and trigger updates.
  // They can be bound as event handlers in templates.
  methods: {
    increment() {
      this.count++
    }
  },

  // Lifecycle hooks are called at different stages
  // of a component's lifecycle.
  // This function will be called when the component is mounted.
  mounted() {
    console.log(`The initial count is ${this.count}.`)
  }
}
</script>

<template>
  <button @click="increment">Count is: {{ count }}</button>
</template>
```

----------------------------------------

TITLE: Declaring Reactive Objects with reactive() in Vue.js
DESCRIPTION: This snippet demonstrates how to declare reactive state using Vue's `reactive()` API. It creates a reactive object `counter` and shows how to access and modify its properties, which will trigger automatic updates in the UI. `reactive()` works on objects, arrays, and built-in types like `Map` and `Set`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { reactive } from 'vue'

const counter = reactive({
  count: 0
})

console.log(counter.count) // 0
counter.count++
```

----------------------------------------

TITLE: Rendering Reactive State in Vue Templates
DESCRIPTION: This Vue HTML snippet demonstrates how to render reactive state (`message` ref and `counter` object) directly within a Vue template using mustache syntax (`{{ }}`). It highlights the automatic unwrapping of refs in templates for more concise usage.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_3

LANGUAGE: Vue HTML
CODE:
```
<h1>{{ message }}</h1>
<p>Count is: {{ counter.count }}</p>
```

----------------------------------------

TITLE: Defining a Vue Component (SFC - Composition API)
DESCRIPTION: This snippet illustrates defining a Vue component using the Composition API with <script setup> within a Single-File Component (SFC). It uses 'ref' to create a reactive 'count' variable and displays it in a button that increments on click.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_1

LANGUAGE: vue
CODE:
```
<script setup>
import { ref } from 'vue'

const count = ref(0)
</script>

<template>
  <button @click="count++">You clicked me {{ count }} times.</button>
</template>
```

----------------------------------------

TITLE: Using Reactive State in Vue Template
DESCRIPTION: This Vue template snippet shows how to use a reactive object declared with `reactive()` within the template. The button increments `state.count` on click, and the `{{ state.count }}` interpolation displays the reactive value, ensuring the UI updates automatically.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_19

LANGUAGE: vue-html
CODE:
```
<button @click="state.count++">
  {{ state.count }}
</button>
```

----------------------------------------

TITLE: Basic Usage of `defineModel` for Two-Way Binding in JavaScript
DESCRIPTION: This snippet illustrates the basic usage of the `defineModel` macro in Vue.js 3.4+ for declaring two-way binding props. It shows how to declare a default `modelValue` prop, a named prop like 'count', and how to mutate their values, which implicitly emits update events for parent `v-model` directives.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
// declares "modelValue" prop, consumed by parent via v-model
const model = defineModel()
// OR: declares "modelValue" prop with options
const model = defineModel({ type: String })

// emits "update:modelValue" when mutated
model.value = 'hello'

// declares "count" prop, consumed by parent via v-model:count
const count = defineModel('count')
// OR: declares "count" prop with options
const count = defineModel('count', { type: Number, default: 0 })

function inc() {
  // emits "update:count" when mutated
  count.value++
}
```

----------------------------------------

TITLE: Binding Multiple Checkboxes to an Array in Vue.js (Vue HTML)
DESCRIPTION: This Vue HTML snippet demonstrates binding multiple checkboxes to a single `checkedNames` array using `v-model`. Each checkbox has a distinct `value` attribute. When a checkbox is checked, its `value` is added to the `checkedNames` array; when unchecked, it's removed. The `div` displays the current contents of the array.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_9

LANGUAGE: vue-html
CODE:
```
<div>Checked names: {{ checkedNames }}</div>

<input type="checkbox" id="jack" value="Jack" v-model="checkedNames" />
<label for="jack">Jack</label>

<input type="checkbox" id="john" value="John" v-model="checkedNames" />
<label for="john">John</label>

<input type="checkbox" id="mike" value="Mike" v-model="checkedNames" />
<label for="mike">Mike</label>
```

----------------------------------------

TITLE: Installing Vitest and Testing Dependencies
DESCRIPTION: This command installs Vitest, happy-dom for DOM simulation, and @testing-library/vue for component testing utilities as development dependencies in a Vite-based Vue project.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_6

LANGUAGE: sh
CODE:
```
npm install -D vitest happy-dom @testing-library/vue
```

----------------------------------------

TITLE: Iterating List With Key (Good Practice) - Vue.js
DESCRIPTION: This snippet illustrates the recommended practice of using `v-for` with a unique `:key` attribute when iterating over lists in Vue.js. This ensures predictable behavior, maintains component state, and optimizes rendering.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_11

LANGUAGE: vue-html
CODE:
```
<ul>
  <li
    v-for="todo in todos"
    :key="todo.id"
  >
    {{ todo.text }}
  </li>
</ul>
```

----------------------------------------

TITLE: Using `v-model` on Native Input Element (Vue)
DESCRIPTION: This snippet shows the basic usage of `v-model` on a native HTML input element. It provides two-way data binding between the input's value and the `searchText` data property.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_10

LANGUAGE: vue-html
CODE:
```
<input v-model="searchText" />
```

----------------------------------------

TITLE: Initializing Reactive State for Form Inputs (Vue.js Composition API)
DESCRIPTION: This JavaScript snippet, used within a Vue 3 `<script setup>` block, initializes various reactive references (`ref`) to manage the state of different form input types. These `ref` variables serve as the foundational data source for `v-model` bindings throughout the component, enabling two-way data flow.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { ref } from 'vue'
const message = ref('')
const multilineText = ref('')
const checked = ref(false)
const checkedNames = ref([])
const picked = ref('')
const selected = ref('')
const multiSelected = ref([])
```

----------------------------------------

TITLE: Mutating Prop in Options API (Bad Practice)
DESCRIPTION: This component directly modifies the `todo` prop using `v-model`. This is considered an anti-pattern in Vue as props should be treated as immutable to ensure a clear data flow and prevent unintended side effects, making components harder to debug and maintain.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_2

LANGUAGE: js
CODE:
```
app.component('TodoItem', {
  props: {
    todo: {
      type: Object,
      required: true
    }
  },

  template: '<input v-model="todo.text">'
})
```

----------------------------------------

TITLE: Binding HTML Attributes with v-bind:href in Vue.js
DESCRIPTION: This snippet demonstrates the `v-bind` directive used to reactively bind an HTML element's `href` attribute to a `url` expression. It shows both the full `v-bind:href` syntax and its shorthand `:href`, where `href` acts as the argument.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_14

LANGUAGE: vue-html
CODE:
```
<a v-bind:href="url"> ... </a>

<!-- shorthand -->
<a :href="url"> ... </a>
```

----------------------------------------

TITLE: Implementing Mouse Tracking in a Vue Component
DESCRIPTION: This snippet demonstrates how to track mouse position directly within a Vue component using the Composition API. It initializes reactive references for x and y coordinates, then uses `onMounted` to add a `mousemove` event listener to the window and `onUnmounted` to remove it, updating the coordinates on each event.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_1

LANGUAGE: vue
CODE:
```
<script setup>
import { ref, onMounted, onUnmounted } from 'vue'

const x = ref(0)
const y = ref(0)

function update(event) {
  x.value = event.pageX
  y.value = event.pageY
}

onMounted(() => window.addEventListener('mousemove', update))
onUnmounted(() => window.removeEventListener('mousemove', update))
</script>

<template>Mouse position is at: {{ x }}, {{ y }}</template>
```

----------------------------------------

TITLE: Exposing `ref()` to Templates via `setup()` in Vue.js
DESCRIPTION: This snippet shows how to declare a reactive `ref` within a Vue component's `setup()` function and then expose it by returning it from `setup()`. This makes the `ref` accessible for use in the component's template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_4

LANGUAGE: js
CODE:
```
import { ref } from 'vue'

export default {
  // `setup` is a special hook dedicated for the Composition API.
  setup() {
    const count = ref(0)

    // expose the ref to the template
    return {
      count
    }
  }
}
```

----------------------------------------

TITLE: Destructuring Reactive Props with toRefs/toRef in Vue
DESCRIPTION: This snippet demonstrates how to safely destructure props while retaining reactivity using Vue's `toRefs()` and `toRef()` utility APIs. `toRefs()` converts the entire `props` object into an object of refs, while `toRef()` converts a single prop property into a ref, allowing reactive values to be passed to external functions.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_2

LANGUAGE: js
CODE:
```
import { toRefs, toRef } from 'vue'

export default {
  setup(props) {
    // turn `props` into an object of refs, then destructure
    const { title } = toRefs(props)
    // `title` is a ref that tracks `props.title`
    console.log(title.value)

    // OR, turn a single property on `props` into a ref
    const title = toRef(props, 'title')
  }
}
```

----------------------------------------

TITLE: Applying Multiple Classes with Array Binding (Vue)
DESCRIPTION: This example demonstrates binding `:class` to an array to apply a list of class strings. Each string in the array is added as a class to the element. The classes can be static strings or reactive data properties.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const activeClass = ref('active')
const errorClass = ref('text-danger')
```

LANGUAGE: javascript
CODE:
```
data() {
  return {
    activeClass: 'active',
    errorClass: 'text-danger'
  }
}
```

LANGUAGE: vue-html
CODE:
```
<div :class="[activeClass, errorClass]"></div>
```

----------------------------------------

TITLE: Implementing Multiple v-model with defineModel (Composition API)
DESCRIPTION: This Vue.js Composition API snippet shows how to implement multiple `v-model` bindings within a component using the `defineModel` macro (Vue 3.4+). It defines `firstName` and `lastName` as reactive models, which automatically handle prop reception and `update:propName` event emission, simplifying two-way data binding for multiple properties.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_21

LANGUAGE: vue
CODE:
```
<script setup>
const firstName = defineModel('firstName')
const lastName = defineModel('lastName')
</script>

<template>
  <input type="text" v-model="firstName" />
  <input type="text" v-model="lastName" />
</template>
```

----------------------------------------

TITLE: Managing Reactive State with Refs in Vue Script Setup
DESCRIPTION: This example demonstrates how to create reactive state using the `ref` function from Vue's Reactivity APIs within `<script setup>`. It highlights that refs are automatically unwrapped when referenced in templates, simplifying access to their `.value`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<script setup>
import { ref } from 'vue'

const count = ref(0)
</script>

<template>
  <button @click="count++">{{ count }}</button>
</template>
```

----------------------------------------

TITLE: Exposing Methods for `ref()` Mutation in Vue.js `setup()`
DESCRIPTION: This JavaScript snippet demonstrates defining a function (`increment`) within `setup()` to encapsulate logic for mutating a `ref`. Both the `ref` and the function are returned from `setup()` to be accessible in the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_7

LANGUAGE: js
CODE:
```
import { ref } from 'vue'

export default {
  setup() {
    const count = ref(0)

    function increment() {
      // .value is needed in JavaScript
      count.value++
    }

    // don't forget to expose the function as well.
    return {
      count,
      increment
    }
  }
}
```

----------------------------------------

TITLE: Accessing and Mutating `ref()` Values in JavaScript
DESCRIPTION: This code illustrates how `ref()` wraps a value in an object with a `.value` property. It shows how to access the underlying value using `.value` and how to mutate it, demonstrating the reactive nature of refs.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_3

LANGUAGE: js
CODE:
```
const count = ref(0)

console.log(count) // { value: 0 }
console.log(count.value) // 0

count.value++
console.log(count.value) // 1
```

----------------------------------------

TITLE: Simplified Input Binding with v-model in Vue.js
DESCRIPTION: This snippet illustrates the `v-model` directive, which simplifies two-way data binding for form input elements in Vue.js. It automatically handles the `value` property and `input` event for text-based inputs, reducing the boilerplate code required for synchronization.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_2

LANGUAGE: Vue.js
CODE:
```
<input v-model="text">
```

----------------------------------------

TITLE: Reusing Multiple Instances of a Vue Component in SFC
DESCRIPTION: This snippet shows how a Vue component (ButtonCounter) can be reused multiple times within a Single File Component (SFC) template. Each usage creates a new, independent instance of the component, allowing each to maintain its own state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_6

LANGUAGE: vue-html
CODE:
```
<h1>Here are many child components!</h1>
<ButtonCounter />
<ButtonCounter />
<ButtonCounter />
```

----------------------------------------

TITLE: Displaying Data with Vue.js Template Expression
DESCRIPTION: This snippet shows how to interpolate data from a component's state into the HTML template using the double curly braces syntax. The `childMsg` variable would typically be defined in the component's data or computed properties, and its value will be rendered directly into the DOM.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/_hint/App/template.html#_snippet_0

LANGUAGE: Vue.js
CODE:
```
{{ childMsg }}
```

----------------------------------------

TITLE: Passing Data to Vue.js Components with Props (JavaScript)
DESCRIPTION: This snippet illustrates how to define and use props to pass data from a parent component to a child component in Vue.js. The `props` option declares the expected properties, allowing the child component to receive and react to data from its parent. This mechanism is crucial for creating flexible and configurable components.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/App/template.html#_snippet_2

LANGUAGE: javascript
CODE:
```
export default {
  props: {
    greeting: String,
    count: {
      type: Number,
      default: 0
    }
  },
  template: `<div>{{ greeting }} - Count: {{ count }}</div>`
}
```

----------------------------------------

TITLE: Vue Template for Counter Component
DESCRIPTION: This Vue HTML template defines the structure for a simple counter component. It includes a button that increments the `count` variable on click and displays its current value using Vue's declarative rendering syntax.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_2

LANGUAGE: vue-html
CODE:
```
<div id="app">
  <button @click="count++">
    Count is: {{ count }}
  </button>
</div>
```

----------------------------------------

TITLE: Binding a Value to a Child Component with v-model in Vue Parent
DESCRIPTION: This Vue parent component demonstrates how to bind a value (`countModel`) to a child component (`Child`) using `v-model`. This establishes a two-way binding, allowing the child component to read and update the `countModel` value in the parent.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_1

LANGUAGE: Vue HTML
CODE:
```
<!-- Parent.vue -->
<Child v-model="countModel" />
```

----------------------------------------

TITLE: Initializing Count with ref (Composition API)
DESCRIPTION: Initializes a reactive `count` variable using `ref` in Vue's Composition API. This variable is then used in an inline event handler to increment its value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_0

LANGUAGE: js
CODE:
```
const count = ref(0)
```

----------------------------------------

TITLE: Conditional Rendering with `v-if` and `v-else` in Vue.js
DESCRIPTION: This example illustrates how to use `v-else` in conjunction with `v-if`. The `<h1>` element with `v-else` will be rendered when the `v-if` condition (`awesome`) is false. A button is included to toggle the `awesome` state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_2

LANGUAGE: Vue.js
CODE:
```
<button @click="awesome = !awesome">Toggle</button>

<h1 v-if="awesome">Vue is awesome!</h1>
<h1 v-else>Oh no 😢</h1>
```

----------------------------------------

TITLE: Defining Props with Detailed Validation (Good Practice - Composition API) - Vue.js
DESCRIPTION: This snippet illustrates a highly detailed prop definition using `defineProps` in Vue.js Composition API, including type, `required` flag, and a custom `validator` function. This provides robust validation and clear API documentation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_7

LANGUAGE: js
CODE:
```
// Even better!

const props = defineProps({
  status: {
    type: String,
    required: true,

    validator: (value) => {
      return ['syncing', 'synced', 'version-conflict', 'error'].includes(
        value
      )
    }
  }
})
```

----------------------------------------

TITLE: Creating a Reactive Object with reactive() (JavaScript)
DESCRIPTION: This example demonstrates how to initialize a simple reactive object using `reactive()` and then modify one of its properties. Changes to reactive properties are automatically tracked by Vue's reactivity system.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
const obj = reactive({ count: 0 })
obj.count++
```

----------------------------------------

TITLE: Basic List Rendering with `v-for` (Vue HTML)
DESCRIPTION: This Vue HTML snippet demonstrates the basic usage of the `v-for` directive to iterate over an `items` array. It renders a list item (`<li>`) for each `item`, displaying its `message` property.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_2

LANGUAGE: vue-html
CODE:
```
<li v-for="item in items">
  {{ item.message }}
</li>
```

----------------------------------------

TITLE: Defining Prop Validation with Composition API (JavaScript)
DESCRIPTION: This snippet demonstrates how to define prop validation rules using the `defineProps()` macro in Vue.js Composition API. It covers various validation scenarios including basic type checks, multiple types, required props, nullable required props, default values for numbers, object/array defaults using a factory function, custom validator functions, and function defaults. It also notes that `defineProps()` arguments cannot access other variables from `<script setup>`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_39

LANGUAGE: JavaScript
CODE:
```
defineProps({
  // Basic type check
  //  (`null` and `undefined` values will allow any type)
  propA: Number,
  // Multiple possible types
  propB: [String, Number],
  // Required string
  propC: {
    type: String,
    required: true
  },
  // Required but nullable string
  propD: {
    type: [String, null],
    required: true
  },
  // Number with a default value
  propE: {
    type: Number,
    default: 100
  },
  // Object with a default value
  propF: {
    type: Object,
    // Object or array defaults must be returned from
    // a factory function. The function receives the raw
    // props received by the component as the argument.
    default(rawProps) {
      return { message: 'hello' }
    }
  },
  // Custom validator function
  // full props passed as 2nd argument in 3.4+
  propG: {
    validator(value, props) {
      // The value must match one of these strings
      return ['success', 'warning', 'danger'].includes(value)
    }
  },
  // Function with a default value
  propH: {
    type: Function,
    // Unlike object or array default, this is not a factory
    // function - this is a function to serve as a default value
    default() {
      return 'Default function'
    }
  }
})
```

----------------------------------------

TITLE: Initializing Vue Application with Composition API
DESCRIPTION: This JavaScript snippet illustrates creating and mounting a Vue application using the Composition API. It leverages the `setup` function to define reactive state with `ref` and returns it for use in the template, mounting the app to the '#app' element.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { createApp, ref } from 'vue'

createApp({
  setup() {
    return {
      count: ref(0)
    }
  }
}).mount('#app')
```

----------------------------------------

TITLE: Inline Event Handler in Vue Template
DESCRIPTION: Demonstrates an inline event handler using `@click` to increment the `count` variable directly within the template. The `count`'s value is also displayed.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_2

LANGUAGE: vue-html
CODE:
```
<button @click="count++">Add 1</button>
<p>Count is: {{ count }}</p>
```

----------------------------------------

TITLE: Conditional Rendering with v-if and v-else in Vue.js
DESCRIPTION: This snippet illustrates the use of `v-if` and `v-else` directives for conditional rendering in Vue.js, allowing for two distinct branches. If `awesome` is truthy, the first `<h1>` is rendered; otherwise, the second `<h1>` (with `v-else`) is rendered, providing an alternative display.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-6/description.md#_snippet_1

LANGUAGE: vue-html
CODE:
```
<h1 v-if="awesome">Vue is awesome!</h1>
<h1 v-else>Oh no 😢</h1>
```

----------------------------------------

TITLE: Attempting to Mutate Readonly Props in Vue Composition API
DESCRIPTION: This snippet highlights an incorrect attempt to directly mutate a prop (`foo`) received via `defineProps` in the Vue Composition API. Vue props are one-way down and are readonly, and direct mutation will result in a console warning.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_33

LANGUAGE: js
CODE:
```
const props = defineProps(['foo'])

// ❌ warning, props are readonly!
props.foo = 'bar'
```

----------------------------------------

TITLE: Binding Click Event with @ Shorthand in Vue.js
DESCRIPTION: This snippet shows the shorthand syntax for the `v-on` directive, using `@click` to bind a DOM click event to the `increment` method or function. This is a common and more concise way to handle events in Vue.js, achieving the same functionality as `v-on:click`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_1

LANGUAGE: vue-html
CODE:
```
<button @click="increment">{{ count }}</button>
```

----------------------------------------

TITLE: Declaring Reactive Data in Vue.js Component
DESCRIPTION: This JavaScript example demonstrates how to declare reactive state using the `data` option in a Vue component. The `data` function returns a plain object, whose properties become reactive and accessible via `this.a` or `this.$data.a` after component creation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_1

LANGUAGE: js
CODE:
```
export default {
    data() {
      return { a: 1 }
    },
    created() {
      console.log(this.a) // 1
      console.log(this.$data) // { a: 1 }
    }
  }
```

----------------------------------------

TITLE: Refactoring useMouse with useEventListener Composable
DESCRIPTION: This snippet shows how the `useMouse` composable can be refactored to utilize the newly created `useEventListener` composable. This demonstrates the power of composable nesting, allowing complex logic to be built from smaller, more focused, and reusable units, improving modularity and readability.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_5

LANGUAGE: js
CODE:
```
// mouse.js
import { ref } from 'vue'
import { useEventListener } from './event'

export function useMouse() {
  const x = ref(0)
  const y = ref(0)

  useEventListener(window, 'mousemove', (event) => {
    x.value = event.pageX
    y.value = event.pageY
  })

  return { x, y }
}
```

----------------------------------------

TITLE: Creating Two-Way Bindings with v-bind and v-on (Vue.js HTML)
DESCRIPTION: This snippet demonstrates how to manually create a two-way data binding on an HTML input element in Vue.js using the `:value` (shorthand for `v-bind:value`) directive to bind the input's value to a `text` data property, and the `@input` (shorthand for `v-on:input`) directive to call an `onInput` method whenever the input's value changes. This setup requires a corresponding JavaScript method to update the `text` property.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/description.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<input :value="text" @input="onInput">
```

----------------------------------------

TITLE: Shorthand for Binding HTML ID with :id in Vue
DESCRIPTION: This example illustrates the shorthand syntax for the `v-bind` directive, which is commonly used due to its frequent application. The colon (`:`) prefix serves as a concise alternative to `v-bind:`, achieving the same dynamic binding of the `id` attribute to the `dynamicId` property.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-3/description.md#_snippet_1

LANGUAGE: vue-html
CODE:
```
<div :id="dynamicId"></div>
```

----------------------------------------

TITLE: Simplifying Reactive State with `<script setup>` in Vue.js SFC
DESCRIPTION: This Vue Single-File Component (SFC) example demonstrates the use of `<script setup>` to simplify reactive state management. Top-level imports, variables, and functions declared within `<script setup>` are automatically exposed to the component's template, reducing boilerplate compared to the traditional `setup()` option.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_9

LANGUAGE: vue
CODE:
```
<script setup>
import { ref } from 'vue'

const count = ref(0)

function increment() {
  count.value++
}
</script>

<template>
  <button @click="increment">
    {{ count }}
  </button>
</template>
```

----------------------------------------

TITLE: Importing Child Component in Composition API (SFC)
DESCRIPTION: This snippet demonstrates how to import a child component named ChildComp from a local .vue file when using the Composition API within a Single File Component (SFC). This is the first step required before a parent component can render it.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-11/description.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import ChildComp from './ChildComp.vue'
```

----------------------------------------

TITLE: Conditionally Rendering Multiple Elements with `v-if` on `<template>` in Vue.js
DESCRIPTION: This example shows how to use `v-if` on a `<template>` element to conditionally render a group of elements. The `<template>` element itself is not rendered in the DOM, serving only as an invisible wrapper for the conditional block.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_4

LANGUAGE: Vue.js
CODE:
```
<template v-if="ok">
  <h1>Title</h1>
  <p>Paragraph 1</p>
  <p>Paragraph 2</p>
</template>
```

----------------------------------------

TITLE: Initializing Reactive State with `ref` in Vue.js Composition API
DESCRIPTION: This snippet demonstrates how to initialize a reactive boolean state variable `awesome` using the `ref` function from Vue's Composition API. This variable is later used to control conditional rendering of elements.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { ref } from 'vue'
const awesome = ref(true)
```

----------------------------------------

TITLE: Using `key` with `v-for` for List Rendering in Vue HTML
DESCRIPTION: The `key` attribute is crucial when using `v-for` to iterate over lists. It provides a unique identifier for each list item, enabling Vue's virtual DOM algorithm to efficiently track, reorder, and reuse elements, which is essential for maintaining state and preventing render errors.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<ul>
  <li v-for="item in items" :key="item.id">...</li>
</ul>
```

----------------------------------------

TITLE: Initializing Reactive State with setup() in Vue
DESCRIPTION: This snippet demonstrates the basic usage of the `setup()` hook in a Vue component. It shows how to declare reactive state using `ref` from Vue's Reactivity APIs and expose it to the component's template and other Options API hooks by returning an object. Reactive references are automatically unwrapped in the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script>
import { ref } from 'vue'

export default {
  setup() {
    const count = ref(0)

    // expose to template and other options API hooks
    return {
      count
    }
  },

  mounted() {
    console.log(this.count) // 0
  }
}
</script>

<template>
  <button @click="count++">{{ count }}</button>
</template>
```

----------------------------------------

TITLE: Deep Reactivity with Refs in Vue Composition API
DESCRIPTION: This snippet illustrates deep reactivity when using `ref` in the Vue Composition API. When a `ref` holds a non-primitive value (like an object or array), Vue automatically makes it deeply reactive, meaning mutations to nested properties, accessed via `.value`, will trigger updates.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
import { ref } from 'vue'

const obj = ref({
  nested: { count: 0 },
  arr: ['foo', 'bar']
})

function mutateDeeply() {
  // these will work as expected.
  obj.value.nested.count++
  obj.value.arr.push('baz')
}
```

----------------------------------------

TITLE: Displaying Escaped HTML Content in Vue Template
DESCRIPTION: This Vue template snippet shows how content within double curly braces (`{{ }}`) is automatically escaped by Vue. If `userProvidedString` contains HTML like `<script>alert("hi")</script>`, Vue will escape it to `&lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt;`, preventing script injection. This protection relies on native browser APIs like `textContent`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_1

LANGUAGE: vue-html
CODE:
```
<h1>{{ userProvidedString }}</h1>
```

----------------------------------------

TITLE: Defining a Vue SFC with Composition API (`<script setup>`)
DESCRIPTION: This snippet illustrates a Vue Single-File Component (SFC) utilizing the Composition API with `<script setup>`. It demonstrates how to define reactive state using `ref` and colocate the component's logic, template, and scoped styling within a single `.vue` file for a 'Hello World!' greeting.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/sfc.md#_snippet_1

LANGUAGE: vue
CODE:
```
<script setup>
import { ref } from 'vue'
const greeting = ref('Hello World!')
</script>

<template>
  <p class="greeting">{{ greeting }}</p>
</template>

<style>
.greeting {
  color: red;
  font-weight: bold;
}
</style>
```

----------------------------------------

TITLE: Creating a Read-only Computed Property in JavaScript
DESCRIPTION: This JavaScript example demonstrates creating a read-only computed property `plusOne` that derives its value from `count`. Attempting to modify `plusOne.value` directly will result in an error, as it's read-only.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const count = ref(1)
const plusOne = computed(() => count.value + 1)

console.log(plusOne.value) // 2

plusOne.value++ // error
```

----------------------------------------

TITLE: Declaring Reactive Object with reactive - Vue.js JavaScript
DESCRIPTION: This Vue.js component snippet illustrates how to declare a reactive object `state` using the `reactive` function. `reactive` is used for creating reactive objects, where all properties of the object become reactive.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { reactive } from 'vue'

export default {
  setup() {
    const state = reactive({
      count: 0,
      name: 'Vue'
    })
    return { state }
  }
}
```

----------------------------------------

TITLE: Declaring Complex Prop Types with Type-Based Syntax in Vue 3
DESCRIPTION: This snippet demonstrates how to declare a prop with a complex interface type (`Book`) using type-based declaration within a Vue 3 `<script setup>` component. It leverages TypeScript interfaces for strong typing of component props, ensuring type safety at compile time.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_7

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
interface Book {
  title: string
  author: string
  year: number
}

const props = defineProps<{
  book: Book
}>()
</script>
```

----------------------------------------

TITLE: Basic Dynamic Component Usage in Vue.js HTML
DESCRIPTION: This Vue.js HTML snippet shows the basic syntax for a dynamic component using the `<component>` special element. The component rendered is determined by the `activeComponent` data property, allowing for flexible UI rendering.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_1

LANGUAGE: Vue-HTML
CODE:
```
<component :is="activeComponent" />
```

----------------------------------------

TITLE: Declaring `defineModel` with `default` Option (Vue 3.4+)
DESCRIPTION: This JavaScript snippet shows how to provide a default value for a `v-model` prop using the `defineModel` macro in Vue 3.4+. This value will be used if the parent component does not provide one.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_6

LANGUAGE: js
CODE:
```
const model = defineModel({ default: 0 })
```

----------------------------------------

TITLE: Binding Escaped Attributes in Vue Template
DESCRIPTION: This Vue template snippet demonstrates how dynamic attribute bindings (`:title`) are automatically escaped by Vue. If `userProvidedString` contains malicious input like `" onclick="alert('hi')`, Vue will escape it to `&quot; onclick=&quot;alert('hi')`, preventing attribute injection and arbitrary HTML manipulation. This protection uses native browser APIs like `setAttribute`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_3

LANGUAGE: vue-html
CODE:
```
<h1 :title="userProvidedString">
  hello
</h1>
```

----------------------------------------

TITLE: Defining HTML Mount Container
DESCRIPTION: Provides the basic HTML structure for a DOM element that will serve as the mount point for a Vue application. The `id` attribute is crucial as it allows the Vue instance to target and render its content within this specific element.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_2

LANGUAGE: html
CODE:
```
<div id="app"></div>
```

----------------------------------------

TITLE: Defining Props with Detailed Validation (Good Practice - Options API) - Vue.js
DESCRIPTION: This snippet illustrates a highly detailed prop definition in Vue.js Options API, including type, `required` flag, and a custom `validator` function. This provides robust validation and clear API documentation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_4

LANGUAGE: js
CODE:
```
// Even better!
props: {
  status: {
    type: String,
    required: true,

    validator: value => {
      return [
        'syncing',
        'synced',
        'version-conflict',
        'error'
      ].includes(value)
    }
  }
}
```

----------------------------------------

TITLE: Installing Dependencies and Starting Vue Dev Server
DESCRIPTION: After scaffolding a Vue project, these commands guide the user to navigate into the newly created project directory, install all necessary dependencies, and then launch the development server. This allows for local development and testing of the Vue application.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_2

LANGUAGE: sh
CODE:
```
cd {{'<your-project-name>'}}
npm install
npm run dev
```

LANGUAGE: sh
CODE:
```
cd {{'<your-project-name>'}}
pnpm install
pnpm run dev
```

LANGUAGE: sh
CODE:
```
cd {{'<your-project-name>'}}
yarn
yarn dev
```

LANGUAGE: sh
CODE:
```
cd {{'<your-project-name>'}}
bun install
bun run dev
```

----------------------------------------

TITLE: List Rendering with Item and Index (Vue HTML)
DESCRIPTION: This Vue HTML snippet uses `v-for` to iterate over `items`, accessing both the `item` and its `index`. It displays a `parentMessage`, the current `index`, and the `item.message` for each list entry.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_5

LANGUAGE: vue-html
CODE:
```
<li v-for="(item, index) in items">
  {{ parentMessage }} - {{ index }} - {{ item.message }}
</li>
```

----------------------------------------

TITLE: Filtering Array with Computed Property in Vue.js Composition API
DESCRIPTION: Shows how to create a reactive, filtered version of an array using a `computed` property in Vue 3's Composition API. The `evenNumbers` computed property returns a new array containing only even numbers from the `numbers` ref, without mutating the original data.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_26

LANGUAGE: JavaScript
CODE:
```
const numbers = ref([1, 2, 3, 4, 5])

const evenNumbers = computed(() => {
  return numbers.value.filter((n) => n % 2 === 0)
})
```

----------------------------------------

TITLE: Using v-slot for Named and Scoped Slots in Vue.js
DESCRIPTION: The `v-slot` directive is used to denote named slots or scoped slots that expect to receive props. It supports destructuring for props and can be applied to `<template>` elements or components for a lone default slot. It's essential for flexible content distribution and data passing between parent and child components via slots.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_26

LANGUAGE: vue-html
CODE:
```
<!-- Named slots -->
<BaseLayout>
  <template v-slot:header>
    Header content
  </template>

  <template v-slot:default>
    Default slot content
  </template>

  <template v-slot:footer>
    Footer content
  </template>
</BaseLayout>

<!-- Named slot that receives props -->
<InfiniteScroll>
  <template v-slot:item="slotProps">
    <div class="item">
      {{ slotProps.item.text }}
    </div>
  </template>
</InfiniteScroll>

<!-- Default slot that receive props, with destructuring -->
<Mouse v-slot="{ x, y }">
  Mouse position: {{ x }}, {{ y }}
</Mouse>
```

----------------------------------------

TITLE: Defining Async Component with Dynamic Import in Vue.js
DESCRIPTION: Illustrates using `defineAsyncComponent` with ES module dynamic imports, which return Promises. This is the most common pattern for lazy loading Vue SFCs, supported by bundlers like Vite and webpack for bundle splitting.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_1

LANGUAGE: js
CODE:
```
import { defineAsyncComponent } from 'vue'

const AsyncComp = defineAsyncComponent(() =>
  import('./components/MyComponent.vue')
)
```

----------------------------------------

TITLE: Defining Stateful Method in Vue Options API - JavaScript
DESCRIPTION: This snippet demonstrates an incorrect way to define a stateful method (like a debounced function) directly within the `methods` option of a Vue component. This approach is problematic for reusable components as the shared state of the debounced function can cause interference between instances.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_34

LANGUAGE: js
CODE:
```
import { debounce } from 'lodash-es'

export default {
  methods: {
    // Debouncing with Lodash
    click: debounce(function () {
      // ... respond to click ...
    }, 500)
  }
}
```

----------------------------------------

TITLE: Listening to DOM Events with v-on:click in Vue.js
DESCRIPTION: This snippet illustrates the `v-on` directive for listening to DOM events, specifically a `click` event. It binds the `click` event to the `doSomething` method, showcasing both the full `v-on:click` syntax and its shorthand `@click`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_15

LANGUAGE: vue-html
CODE:
```
<a v-on:click="doSomething"> ... </a>

<!-- shorthand -->
<a @click="doSomething"> ... </a>
```

----------------------------------------

TITLE: Toggling Single Class with Object Binding (Vue-HTML)
DESCRIPTION: This snippet demonstrates the basic usage of `:class` with an object to dynamically toggle a single class. The 'active' class will be present on the div element only if the `isActive` data property evaluates to a truthy value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<div :class="{ active: isActive }"></div>
```

----------------------------------------

TITLE: Using JavaScript Expressions in Vue Templates
DESCRIPTION: This Vue HTML snippet demonstrates that mustache syntax (`{{ }}`) in Vue templates can contain any valid JavaScript expression, not just simple identifiers. Here, it reverses the `message` string before rendering it, showcasing dynamic content manipulation directly within the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_7

LANGUAGE: Vue HTML
CODE:
```
<h1>{{ message.split('').reverse().join('') }}</h1>
```

----------------------------------------

TITLE: Rendering Dynamic Select Options with v-for in Vue.js HTML
DESCRIPTION: This Vue.js HTML snippet demonstrates how to dynamically render `<option>` elements within a `<select>` tag using `v-for`. It iterates over an `options` array, binding each option's `value` property to the `option.value` and displaying `option.text` as the visible label, while `v-model` keeps `selected` synchronized.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_15

LANGUAGE: vue-html
CODE:
```
<select v-model="selected">
  <option v-for="option in options" :value="option.value">
    {{ option.text }}
  </option>
</select>

<div>Selected: {{ selected }}</div>
```

----------------------------------------

TITLE: Declaring Props with Object Syntax in Vue Composition API (script setup)
DESCRIPTION: This snippet illustrates declaring props using the object syntax within a `<script setup>` block in the Vue Composition API. It allows defining prop names and their expected types, such as `title` as `String` and `likes` as `Number`, for better documentation and type checking.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_4

LANGUAGE: js
CODE:
```
// in <script setup>
defineProps({
  title: String,
  likes: Number
})
```

----------------------------------------

TITLE: Reactive Props Destructuring with Default Values (TypeScript)
DESCRIPTION: This snippet demonstrates how to use JavaScript's native default value syntax with type-based prop declarations in TypeScript. It allows providing a fallback value (`'hello'`) for an optional destructured prop (`foo`) if it's not provided by the parent component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_9

LANGUAGE: ts
CODE:
```
const { foo = 'hello' } = defineProps<{ foo?: string }>()
```

----------------------------------------

TITLE: Declaring Component Props with Type-Based Declaration in Vue `<script setup>`
DESCRIPTION: This snippet illustrates a more straightforward approach to defining component props using a generic type argument with `defineProps()` in a Vue `<script setup>` block. This 'type-based declaration' allows defining props directly with TypeScript types, where `foo` is a string and `bar` is an optional number. The compiler infers equivalent runtime options.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
const props = defineProps<{
  foo: string
  bar?: number
}>()
</script>
```

----------------------------------------

TITLE: Organizing Vue Components into Separate JavaScript Files (Good Practice)
DESCRIPTION: This snippet illustrates the recommended practice of organizing each Vue component into its own dedicated JavaScript file. This structure improves project readability, simplifies component location, and enhances overall maintainability, especially in larger applications.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
components/
|- TodoList.js
|- TodoItem.js
```

----------------------------------------

TITLE: Unscoped Styling in Vue.js Component
DESCRIPTION: This snippet demonstrates a bad practice of using unscoped CSS in a Vue component. The `.btn-close` style is global, potentially causing conflicts with other components or third-party CSS.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_17

LANGUAGE: vue-html
CODE:
```
<template>
  <button class="btn btn-close">×</button>
</template>
```

LANGUAGE: vue-html
CODE:
```
<style>
.btn-close {
  background-color: red;
}
</style>
```

----------------------------------------

TITLE: Creating Vue Application Instance - TypeScript
DESCRIPTION: Defines the type signature for the `createApp` function, which initializes a Vue application instance. It accepts a root component and optional root props, returning an `App` instance.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
function createApp(rootComponent: Component, rootProps?: object): App
```

----------------------------------------

TITLE: Accessing Reactive Object Properties in Template - Vue.js HTML
DESCRIPTION: This Vue template snippet demonstrates how to access and display properties of a reactive object (`state.count`, `state.name`) and update a property (`state.count++`) within the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_5

LANGUAGE: HTML
CODE:
```
<template>
  <button @click="state.count++">Count is: {{ state.count }}</button>
  <p>Name: {{ state.name }}</p>
</template>
```

----------------------------------------

TITLE: Declaring Props in Vue (Composition API with script setup)
DESCRIPTION: This example shows how to declare a 'title' prop using the 'defineProps' compile-time macro within a Vue component's '<script setup>' block in the Composition API. Declared props are automatically exposed to the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_9

LANGUAGE: vue
CODE:
```
<!-- BlogPost.vue -->
<script setup>
defineProps(['title'])
</script>

<template>
  <h4>{{ title }}</h4>
</template>
```

----------------------------------------

TITLE: Defining Button Types in Forms for Accessibility (Vue.js)
DESCRIPTION: This snippet demonstrates the proper use of `type` attributes for `<button>` and `<input>` elements within a form. Setting `type="button"` prevents unintended form submissions, while `type="submit"` explicitly triggers submission.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_18

LANGUAGE: vue-html
CODE:
```
<form action="/dataCollectionLocation" method="post" autocomplete="on">
  <!-- Buttons -->
  <button type="button">Cancel</button>
  <button type="submit">Submit</button>

  <!-- Input buttons -->
  <input type="button" value="Cancel" />
  <input type="submit" value="Submit" />
</form>
```

----------------------------------------

TITLE: Using Exposed Methods as Event Handlers in Vue.js Templates
DESCRIPTION: This Vue HTML snippet shows how to use a method (like `increment`) exposed from the `setup()` function as an event handler for a button click, demonstrating interaction with reactive state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_8

LANGUAGE: vue-html
CODE:
```
<button @click="increment">
  {{ count }}
</button>
```

----------------------------------------

TITLE: Declaring and Emitting Events (Composition API, Script Setup)
DESCRIPTION: This snippet demonstrates how to declare and emit custom events from a child component using the Composition API with `<script setup>`. It uses `defineEmits` to declare the 'response' event and then `emit()` to send the event with an argument to the parent.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup>
// declare emitted events
const emit = defineEmits(['response'])

// emit with argument
emit('response', 'hello from child')
</script>
```

----------------------------------------

TITLE: Basic Usage of watchEffect() in Vue.js
DESCRIPTION: This example demonstrates the fundamental behavior of `watchEffect()`. It immediately executes the provided effect function, logging the initial value of `count.value`. Subsequently, when `count.value` is incremented, the effect re-runs automatically due to reactive tracking, logging the updated value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
const count = ref(0)

watchEffect(() => console.log(count.value))
// -> logs 0

count.value++
// -> logs 1
```

----------------------------------------

TITLE: Emitting Custom Events with Options API and Composition API - Vue.js JavaScript
DESCRIPTION: This Vue.js component snippet shows how to declare and emit custom events. It declares `my-event` using the `emits` option and then uses the `emit` function from the `setup` context to trigger `my-event` with a payload.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_12

LANGUAGE: JavaScript
CODE:
```
import { defineEmits } from 'vue'

export default {
  emits: ['my-event'],
  setup(props, { emit }) {
    const handleClick = () => {
      emit('my-event', 'hello from child')
    }
    return { handleClick }
  }
}
```

----------------------------------------

TITLE: Applying the `.number` Modifier to `v-model` in Vue.js
DESCRIPTION: This snippet demonstrates the `.number` modifier, which automatically attempts to typecast user input to a number using `parseFloat()`. If parsing fails, the original string value is retained. This is useful for inputs expecting numeric values.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_22

LANGUAGE: Vue-HTML
CODE:
```
<input v-model.number="age" />
```

----------------------------------------

TITLE: Waiting for DOM Updates with nextTick in Vue Options API
DESCRIPTION: This snippet shows how to use `nextTick()` within a method in the Options API to ensure that the DOM has been updated after a state change. By awaiting `nextTick()`, subsequent operations that depend on the updated DOM state can be performed reliably.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
import { nextTick } from 'vue'

export default {
  methods: {
    async increment() {
      this.count++
      await nextTick()
      // Now the DOM is updated
    }
  }
}
```

----------------------------------------

TITLE: Same-Name Shorthand for v-bind (Vue.js 3.4+)
DESCRIPTION: Introduced in Vue 3.4+, this shorthand allows omitting the value when the attribute name and the bound value's property name are identical, expanding to `:src="src"`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_12

LANGUAGE: vue-html
CODE:
```
<img :src />
```

----------------------------------------

TITLE: Binding Click Event with v-on in Vue.js
DESCRIPTION: This snippet demonstrates how to bind a DOM click event to a component method or function named `increment` using the `v-on` directive. The button displays the current `count` value, which is expected to be updated by the `increment` handler.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<button v-on:click="increment">{{ count }}</button>
```

----------------------------------------

TITLE: Filtering List with Computed Property (Composition API) in Vue.js
DESCRIPTION: This JavaScript snippet (Composition API) uses `computed` from Vue to create a reactive `activeUsers` reference that filters the `users` array. This provides a clean way to prepare filtered data for `v-for`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_14

LANGUAGE: js
CODE:
```
const activeUsers = computed(() => {
  return users.filter((user) => user.isActive)
})
```

----------------------------------------

TITLE: Adding Descriptions with aria-describedby in Vue.js Forms
DESCRIPTION: This example illustrates the use of `aria-describedby` to associate an input field with a descriptive paragraph. It provides additional context or criteria for the input, enhancing accessibility by making this information available to assistive technologies. The `aria-labelledby` attribute is also used for the primary label.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_10

LANGUAGE: vue-html
CODE:
```
<form\
  class=\"demo\"\
  action=\"/dataCollectionLocation\"\
  method=\"post\"\
  autocomplete=\"on\"\
>\
  <h1 id=\"billing\">Billing</h1>\
  <div class=\"form-item\">\
    <label for=\"name\">Full Name: </label>\
    <input\
      type=\"text\"\
      name=\"name\"\
      id=\"name\"\
      v-model=\"name\"\
      aria-labelledby=\"billing name\"\
      aria-describedby=\"nameDescription\"\
    />\
    <p id=\"nameDescription\">Please provide first and last name.</p>\
  </div>\
  <button type=\"submit\">Submit</button>\
</form>
```

----------------------------------------

TITLE: Chaining Conditional Blocks with `v-else-if` in Vue.js
DESCRIPTION: This snippet demonstrates chaining multiple conditional blocks using `v-else-if`. It allows for multiple exclusive conditions, rendering the first block whose expression evaluates to true. The `v-else` block acts as a fallback if no preceding conditions are met.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_3

LANGUAGE: Vue.js
CODE:
```
<div v-if="type === 'A'">
  A
</div>
<div v-else-if="type === 'B'">
  B
</div>
<div v-else-if="type === 'C'">
  C
</div>
<div v-else>
  Not A/B/C
</div>
```

----------------------------------------

TITLE: Conditionally Applying Multiple Classes with Object Binding (Vue)
DESCRIPTION: This example illustrates how to bind multiple classes using an object with `:class`. It shows that the `:class` directive can co-exist with a plain `class` attribute. The 'active' and 'text-danger' classes are conditionally applied based on the `isActive` and `hasError` data properties, respectively.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const isActive = ref(true)
const hasError = ref(false)
```

LANGUAGE: javascript
CODE:
```
data() {
  return {
    isActive: true,
    hasError: false
  }
}
```

LANGUAGE: vue-html
CODE:
```
<div
  class="static"
  :class="{ active: isActive, 'text-danger': hasError }"
></div>
```

----------------------------------------

TITLE: Template Unwrapping of Top-Level Ref - Vue HTML
DESCRIPTION: This Vue template expression demonstrates that a top-level `ref` (`count`) is automatically unwrapped, allowing its value to be directly used in arithmetic operations. The expression `count + 1` will correctly evaluate to `1`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_29

LANGUAGE: vue-html
CODE:
```
{{ count + 1 }}
```

----------------------------------------

TITLE: Binding HTML Attributes with v-bind Directive in Vue.js
DESCRIPTION: This snippet demonstrates binding an HTML attribute (`id`) to a component's data property (`dynamicId`) using the `v-bind` directive. Vue keeps the attribute in sync with the property's value, removing the attribute if the bound value is `null` or `undefined`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_3

LANGUAGE: vue-html
CODE:
```
<div v-bind:id="dynamicId"></div>
```

----------------------------------------

TITLE: Using the v-if Directive in Vue.js
DESCRIPTION: Provides an example of the `v-if` directive, which reactively controls the presence of an element in the DOM based on the truthiness of the `seen` expression.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_13

LANGUAGE: vue-html
CODE:
```
<p v-if="seen">Now you see me</p>
```

----------------------------------------

TITLE: Using `aria-label` for Accessible Names in Vue.js Inputs
DESCRIPTION: This example demonstrates how to provide an accessible name to an input field using the `aria-label` attribute, dynamically bound with `:aria-label="nameLabel"`. This attribute is useful for cases where a visual label is not present or when a more descriptive accessible name is needed for assistive technologies.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_8

LANGUAGE: vue-html
CODE:
```
<label for="name">Name: </label>
<input
  type="text"
  name="name"
  id="name"
  v-model="name"
  :aria-label="nameLabel"
/>
```

----------------------------------------

TITLE: Writing a Basic Component Test with Vitest and Testing Library
DESCRIPTION: This JavaScript example demonstrates how to write a basic component test using Vitest and `@testing-library/vue`. It imports `render` to mount a Vue component, passes props, and uses `getByText` to assert the rendered output.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_9

LANGUAGE: js
CODE:
```
// MyComponent.test.js
import { render } from '@testing-library/vue'
import MyComponent from './MyComponent.vue'

test('it should work', () => {
  const { getByText } = render(MyComponent, {
    props: {
      /* ... */
    }
  })

  // assert output
  getByText('...')
})
```

----------------------------------------

TITLE: Typing `ref()` with Inferred Types in Vue 3
DESCRIPTION: This snippet illustrates how `ref()` infers its type from the initial value provided. It demonstrates that assigning a value of a different type will result in a TypeScript error, ensuring type safety for reactive references.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_12

LANGUAGE: TypeScript
CODE:
```
import { ref } from 'vue'

// inferred type: Ref<number>
const year = ref(2020)

// => TS Error: Type 'string' is not assignable to type 'number'.
year.value = '2020'
```

----------------------------------------

TITLE: Importing and Using a Composable in Vue.js Script Setup
DESCRIPTION: This snippet demonstrates how to import and use a custom composable, `useMouse`, within a Vue 3 `<script setup>` block. It imports the `useMouse` function from a local file and destructures the reactive `x` and `y` properties returned by the composable, making them available for use in the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { useMouse } from './mouse'
const { x, y } = useMouse()
```

----------------------------------------

TITLE: Mutating Prop in Composition API (Bad Practice)
DESCRIPTION: Similar to the Options API example, this Composition API component uses `v-model` directly on a prop, leading to prop mutation. This is an anti-pattern that can cause unpredictable state changes and should be avoided to maintain a clear and predictable data flow within the application.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_6

LANGUAGE: vue
CODE:
```
<script setup>
defineProps({
  todo: {
    type: Object,
    required: true
  }
})
</script>

<template>
  <input v-model="todo.text" />
</template>
```

----------------------------------------

TITLE: Iterating List Without Key (Bad Practice) - Vue.js
DESCRIPTION: This snippet demonstrates the incorrect practice of using `v-for` to iterate over a list without providing a unique `:key` attribute. This can lead to unpredictable behavior, especially with component state or animations.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_10

LANGUAGE: vue-html
CODE:
```
<ul>
  <li v-for="todo in todos">
    {{ todo.text }}
  </li>
</ul>
```

----------------------------------------

TITLE: Binding Radio Button Values with `v-model` in Vue.js
DESCRIPTION: This snippet illustrates how `v-model` is used with radio inputs. The `pick` property will be updated to the `value` of the currently selected radio button, which are bound to `first` and `second` properties respectively.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_19

LANGUAGE: Vue-HTML
CODE:
```
<input type="radio" v-model="pick" :value="first" />
<input type="radio" v-model="pick" :value="second" />
```

----------------------------------------

TITLE: Calling Methods with Custom Arguments in Vue.js Template
DESCRIPTION: This Vue HTML snippet demonstrates how to call a method ('say') directly within an inline event handler (@click) and pass custom string arguments ('hello', 'bye') to it. This allows for flexible method invocation without relying solely on the native event object.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_8

LANGUAGE: vue-html
CODE:
```
<button @click="say('hello')">Say hello</button>
<button @click="say('bye')">Say bye</button>
```

----------------------------------------

TITLE: Incorrect Asynchronous onMounted Registration - Composition API (JavaScript)
DESCRIPTION: This snippet demonstrates an incorrect way to register `onMounted` in the Composition API. Lifecycle hooks must be registered synchronously during component setup. Calling `onMounted` inside an asynchronous callback (like `setTimeout`) will not associate the hook with the active component instance, leading to it not being called correctly.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/lifecycle.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
setTimeout(() => {
  onMounted(() => {
    // this won't work.
  })
}, 100)
```

----------------------------------------

TITLE: Organizing Component Logic with Multiple Vue.js Composables
DESCRIPTION: This example illustrates how to use multiple composables (`useFeatureA`, `useFeatureB`, `useFeatureC`) within a `<script setup>` block to organize complex component logic. Each composable encapsulates a specific logical concern, promoting modularity and improving code readability and maintainability by breaking down large components.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_16

LANGUAGE: Vue
CODE:
```
<script setup>
import { useFeatureA } from './featureA.js'
import { useFeatureB } from './featureB.js'
import { useFeatureC } from './featureC.js'

const { foo, bar } = useFeatureA()
const { baz } = useFeatureB(foo)
const { qux } = useFeatureC(baz)
</script>
```

----------------------------------------

TITLE: Typing `reactive()` with Explicit Interface in Vue 3
DESCRIPTION: This snippet demonstrates how to explicitly type a `reactive` object using a TypeScript interface. This approach provides strong type checking for the reactive state, ensuring consistency and preventing type-related errors by defining the expected structure.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_17

LANGUAGE: TypeScript
CODE:
```
import { reactive } from 'vue'

interface Book {
  title: string
  year?: number
}

const book: Book = reactive({ title: 'Vue 3 Guide' })
```

----------------------------------------

TITLE: Using the useMouse Composable in a Vue Component
DESCRIPTION: This example demonstrates how to consume the `useMouse` composable within a Vue component. By importing and calling `useMouse`, the component gains access to the reactive `x` and `y` coordinates managed by the composable, simplifying component logic and promoting reusability.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_3

LANGUAGE: vue
CODE:
```
<script setup>
import { useMouse } from './mouse.js'

const { x, y } = useMouse()
</script>

<template>Mouse position is at: {{ x }}, {{ y }}</template>
```

----------------------------------------

TITLE: Basic KeepAlive Usage with Dynamic Component in Vue.js
DESCRIPTION: This example demonstrates the fundamental use of `<KeepAlive>` to cache a dynamically rendered component. The `<component :is="view"></component>` syntax allows switching between different components while preserving their state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_9

LANGUAGE: Vue HTML
CODE:
```
<KeepAlive>
  <component :is="view"></component>
</KeepAlive>
```

----------------------------------------

TITLE: Transforming Prop Value with Computed Property in Vue Composition API
DESCRIPTION: This snippet illustrates how to transform a prop (`size`) into a derived value using a `computed` property in the Vue Composition API. The `normalizedSize` computed property will automatically re-evaluate and update whenever the `size` prop changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_37

LANGUAGE: js
CODE:
```
const props = defineProps(['size'])

// computed property that auto-updates when the prop changes
const normalizedSize = computed(() => props.size.trim().toLowerCase())
```

----------------------------------------

TITLE: Vue.js Composition API External Component Module
DESCRIPTION: This JavaScript snippet defines a simple Vue component using the Composition API, intended for modular import. It uses `ref` to create a reactive counter within the `setup` function and provides an inline template to display its value, showcasing a modern component structure.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_14

LANGUAGE: javascript
CODE:
```
// my-component.js
import { ref } from 'vue'
export default {
  setup() {
    const count = ref(0)
    return { count }
  },
  template: `<div>Count is: {{ count }}</div>`
}
```

----------------------------------------

TITLE: Implementing Increment Function (Composition API - Script Setup) in Vue.js
DESCRIPTION: This Vue snippet uses the Composition API with `<script setup>` to define reactive state and a function. It imports `ref` to create a reactive `count` variable and defines an `increment` function that updates `count.value`. This approach is common in modern Vue SFCs for organizing reactive logic and event handlers.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_4

LANGUAGE: vue
CODE:
```
<script setup>
import { ref } from 'vue'

const count = ref(0)

function increment() {
  // update component state
  count.value++
}
</script>
```

----------------------------------------

TITLE: Emitting Input Event in Composition API (Good Practice)
DESCRIPTION: This Composition API component correctly handles input by binding `value` to the prop and emitting an `input` event. This is the recommended way to achieve two-way data binding with props, ensuring a clear and predictable data flow while adhering to the 'props down, events up' principle.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_8

LANGUAGE: vue
CODE:
```
<script setup>
defineProps({
  todo: {
    type: Object,
    required: true
  }
})

const emit = defineEmits(['input'])
</script>

<template>
  <input :value="todo.text" @input="emit('input', $event.target.value)" />
</template>
```

----------------------------------------

TITLE: Emitting Events with defineEmits Return Value (Composition API)
DESCRIPTION: This example demonstrates how to declare events using `defineEmits()` and then use the returned `emit` function to dispatch a 'submit' event. The `emit` function is the equivalent of `$emit` for use within `<script setup>`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_11

LANGUAGE: vue
CODE:
```
<script setup>
const emit = defineEmits(['inFocus', 'submit'])

function buttonClick() {
  emit('submit')
}
</script>
```

----------------------------------------

TITLE: Watching Reactive State with Composition API (Vue SFC)
DESCRIPTION: This Vue Single File Component (SFC) demonstrates using the `watch` function from the Composition API to react to changes in a `ref`. When the `question` ref changes and includes a question mark, it triggers an asynchronous API call, updates the `answer` and `loading` refs, and handles errors, with the template displaying the interactive elements.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_3

LANGUAGE: vue
CODE:
```
<script setup>
import { ref, watch } from 'vue'

const question = ref('')
const answer = ref('Questions usually contain a question mark. ;-)')
const loading = ref(false)

// watch works directly on a ref
watch(question, async (newQuestion, oldQuestion) => {
  if (newQuestion.includes('?')) {
    loading.value = true
    answer.value = 'Thinking...'
    try {
      const res = await fetch('https://yesno.wtf/api')
      answer.value = (await res.json()).answer
    } catch (error) {
      answer.value = 'Error! Could not reach the API. ' + error
    } finally {
      loading.value = false
    }
  }
})
</script>

<template>
  <p>
    Ask a yes/no question:
    <input v-model="question" :disabled="loading" />
  </p>
  <p>{{ answer }}</p>
```

----------------------------------------

TITLE: Rendering a Vue.js Component in Template
DESCRIPTION: This snippet illustrates how to render an imported Vue component (`ThemePage`) within the template section of a Vue single-file component. Components imported via `<script setup>` are automatically exposed and can be used directly as custom HTML tags.
SOURCE: https://github.com/vuejs/docs/blob/main/src/ecosystem/themes.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<ThemePage />
```

----------------------------------------

TITLE: Registering onMounted Callback in Vue
DESCRIPTION: Registers a callback to be called after the component has been mounted. This hook is typically used for performing side effects that need access to the component's rendered DOM. It is not called during server-side rendering.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function onMounted(callback: () => void, target?: ComponentInternalInstance | null): void
```

LANGUAGE: vue
CODE:
```
<script setup>
import { ref, onMounted } from 'vue'

const el = ref()

onMounted(() => {
  el.value // <div>
})
</script>

<template>
  <div ref="el"></div>
</template>
```

----------------------------------------

TITLE: Importing Vue Component - JavaScript
DESCRIPTION: This snippet demonstrates how to import a Vue component named PartnerAll using the <script setup> syntax. This modern syntax allows for direct use of imported components in the template without explicit registration.
SOURCE: https://github.com/vuejs/docs/blob/main/src/partners/all.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import PartnerAll from './components/PartnerAll.vue'
```

----------------------------------------

TITLE: Accessing v-model Modifiers with defineModel in Vue Composition API
DESCRIPTION: Shows how to access `v-model` modifiers within a child component using the `defineModel()` function in Vue 3 Composition API. The `modifiers` array returned by `defineModel()` will contain a boolean flag for each applied modifier, such as `capitalize: true`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_25

LANGUAGE: vue
CODE:
```
<script setup>
const [model, modifiers] = defineModel()

console.log(modifiers) // { capitalize: true }
</script>

<template>
  <input type="text" v-model="model" />
</template>
```

----------------------------------------

TITLE: Exposing Public Interface from <script setup> Component (Vue Composition API)
DESCRIPTION: This snippet demonstrates how a child component using `<script setup>` can explicitly expose a public interface to its parent using the `defineExpose` macro. By default, `<script setup>` components are private; `defineExpose` allows specific properties (`a`, `b`) to be accessible when the parent component references this child via a template ref. It must be called before any `await` operations.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_9

LANGUAGE: Vue
CODE:
```
<script setup>
import { ref } from 'vue'

const a = 1
const b = ref(2)

// Compiler macros, such as defineExpose, don't need to be imported
defineExpose({
  a,
  b
})
</script>
```

----------------------------------------

TITLE: Calling a Method Handler in Vue Template
DESCRIPTION: Binds the `greet` method to a button's click event using `@click`. This demonstrates how to call a component method as an event handler in a Vue template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_5

LANGUAGE: vue-html
CODE:
```
<!-- `greet` is the name of the method defined above -->
<button @click="greet">Greet</button>
```

----------------------------------------

TITLE: Defining a v-model Argument with defineModel in Vue.js Composition API
DESCRIPTION: This Vue Composition API snippet shows how a child component supports a `v-model` argument by using `defineModel('title')`. This creates a ref that automatically syncs with the `title` prop and emits `update:title` events, simplifying two-way binding.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_16

LANGUAGE: vue
CODE:
```
<!-- MyComponent.vue -->
<script setup>
const title = defineModel('title')
</script>

<template>
  <input type="text" v-model="title" />
</template>
```

----------------------------------------

TITLE: Rendering List of Components with Dynamic Props using v-for
DESCRIPTION: This Vue-HTML snippet demonstrates iterating over the 'posts' array using the 'v-for' directive to render multiple 'BlogPost' components. It dynamically binds the ':key' and ':title' props from each post object, ensuring efficient list rendering.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_15

LANGUAGE: vue-html
CODE:
```
<BlogPost
  v-for="post in posts"
  :key="post.id"
  :title="post.title"
 />
```

----------------------------------------

TITLE: Passing Props to a Named Slot in Vue.js
DESCRIPTION: This snippet demonstrates how a child component passes data to a specific named slot. Attributes like `message='hello'` are added directly to the `<slot>` tag, making them available as props to the corresponding named slot in the parent component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_27

LANGUAGE: vue-html
CODE:
```
<slot name="header" message="hello"></slot>
```

----------------------------------------

TITLE: Creating a Reusable useFetch Composable in JavaScript
DESCRIPTION: This JavaScript file defines a reusable `useFetch` composable function. It encapsulates the asynchronous data fetching logic, including state management for `data` and `error`, making it easy to reuse across multiple components. It takes a URL as an argument and returns reactive `data` and `error` refs.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
// fetch.js
import { ref } from 'vue'

export function useFetch(url) {
  const data = ref(null)
  const error = ref(null)

  fetch(url)
    .then((res) => res.json())
    .then((json) => (data.value = json))
    .catch((err) => (error.value = err))

  return { data, error }
}
```

----------------------------------------

TITLE: Creating a Global Reactive Store in JavaScript
DESCRIPTION: This snippet demonstrates how to create a global reactive store using Vue's `reactive()` function in a separate `store.js` file. The `store` object, containing a `count` property, can be imported and shared across multiple Vue components, providing a single source of truth for the `count` state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_2

LANGUAGE: js
CODE:
```
// store.js
import { reactive } from 'vue'

export const store = reactive({
  count: 0
})
```

----------------------------------------

TITLE: Declaring Reactive List Data (Composition API)
DESCRIPTION: This JavaScript snippet demonstrates how to declare a reactive array of objects using `ref` in Vue's Composition API. This array, `items`, serves as the source data for list rendering with `v-for`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_0

LANGUAGE: js
CODE:
```
const items = ref([{ message: 'Foo' }, { message: 'Bar' }])
```

----------------------------------------

TITLE: Handling Reactive Input Arguments in Vue.js Composables
DESCRIPTION: This snippet demonstrates how to handle potentially reactive input arguments (refs or getters) in a Vue.js composable using the `toValue()` utility function. It normalizes the input to its raw value, allowing the composable to work consistently whether the input is a ref, getter, or a plain value. This ensures flexibility for developers using the composable.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
import { toValue } from 'vue'

function useFeature(maybeRefOrGetter) {
  // If maybeRefOrGetter is a ref or a getter,
  // its normalized value will be returned.
  // Otherwise, it is returned as-is.
  const value = toValue(maybeRefOrGetter)
}
```

----------------------------------------

TITLE: Rendering Filtered List with v-for and Computed Property in Vue.js
DESCRIPTION: Illustrates how to render a list of items using `v-for` in a Vue template, iterating over a computed property that provides filtered or sorted data. This approach efficiently displays derived data without modifying the original source.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_28

LANGUAGE: Vue HTML
CODE:
```
<li v-for="n in evenNumbers">{{ n }}</li>
```

----------------------------------------

TITLE: Style Binding with Object Syntax in Vue.js
DESCRIPTION: This snippet shows how to dynamically apply inline styles using an object syntax with `v-bind:style`. CSS property names can be camelCase or kebab-case (quoted), and values can be dynamic.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_18

LANGUAGE: vue-html
CODE:
```
<div :style="{ fontSize: size + 'px' }"></div>
```

----------------------------------------

TITLE: Binding Classes to a Computed Property (Vue)
DESCRIPTION: This powerful pattern shows how to bind `:class` to a computed property that returns an object. The computed property dynamically calculates the class object based on reactive data, allowing for complex conditional logic to determine which classes are applied.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const isActive = ref(true)
const error = ref(null)

const classObject = computed(() => ({
  active: isActive.value && !error.value,
  'text-danger': error.value && error.value.type === 'fatal'
}))
```

LANGUAGE: javascript
CODE:
```
data() {
  return {
    isActive: true,
    error: null
  }
},
computed: {
  classObject() {
    return {
      active: this.isActive && !this.error,
      'text-danger': this.error && this.error.type === 'fatal'
    }
  }
}
```

LANGUAGE: vue-html
CODE:
```
<div :class="classObject"></div>
```

----------------------------------------

TITLE: Importing Vue.js Components with Script Setup
DESCRIPTION: This snippet demonstrates importing a Vue component (`ThemePage.vue`) using the `<script setup>` syntax. This modern approach simplifies component registration, making imported components directly available for use in the template without explicit `components` option.
SOURCE: https://github.com/vuejs/docs/blob/main/src/ecosystem/themes.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import ThemePage from './themes/ThemePage.vue'
```

----------------------------------------

TITLE: Stopping a watchEffect() in Vue.js
DESCRIPTION: This snippet illustrates how to explicitly stop a `watchEffect` from re-running. The `watchEffect` function returns a handle (assigned to `stop` here) which, when called, permanently deactivates the watcher, preventing any further executions even if its dependencies change.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
const stop = watchEffect(() => {})

// when the watcher is no longer needed:
stop()
```

----------------------------------------

TITLE: Using Imported Helpers in Vue Script Setup Template
DESCRIPTION: This snippet shows that imported helper functions can be directly utilized within template expressions when using `<script setup>`, eliminating the need to expose them through the `methods` option and streamlining code.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<script setup>
import { capitalize } from './helpers'
</script>

<template>
  <div>{{ capitalize('hello') }}</div>
</template>
```

----------------------------------------

TITLE: Cleaning Up Stale Requests with onWatcherCleanup in Vue Options API
DESCRIPTION: This snippet illustrates the use of `onWatcherCleanup()` within a Vue 3.5+ Options API watcher to manage and cancel pending asynchronous requests. An `AbortController` is initialized for each request, and its `abort()` method is registered with `onWatcherCleanup` to ensure the previous request is cancelled when the watcher re-executes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_20

LANGUAGE: js
CODE:
```
import { onWatcherCleanup } from 'vue'

export default {
  watch: {
    id(newId) {
      const controller = new AbortController()

      fetch(`/api/${newId}`, { signal: controller.signal }).then(() => {
        // callback logic
      })

      onWatcherCleanup(() => {
        // abort stale request
        controller.abort()
      })
    }
  }
}
```

----------------------------------------

TITLE: Emitting Custom Event from Template in Vue.js
DESCRIPTION: This snippet demonstrates how to emit a custom event directly from a template expression using the built-in `$emit` method. When the button is clicked, it emits an event named 'someEvent', which can then be listened to by the parent component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_1

LANGUAGE: Vue-HTML
CODE:
```
<!-- MyComponent -->
<button @click="$emit('someEvent')">Click Me</button>
```

----------------------------------------

TITLE: Passing Basic Text Content to a Vue Component Slot (Vue HTML)
DESCRIPTION: This snippet demonstrates how to pass simple text content, 'Click me!', as slot content to a child <FancyButton> component. The content enclosed within the component's tags will be rendered by the slot outlet inside the child component's template, making the button's inner text dynamic.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<FancyButton>
  Click me! <!-- slot content -->
</FancyButton>
```

----------------------------------------

TITLE: Watching Destructured Props (Correct) - JavaScript
DESCRIPTION: Shows the recommended way to watch a destructured prop by wrapping it in a getter function. This ensures that `watch` receives a reactive data source, allowing it to properly track changes to the prop.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_11

LANGUAGE: js
CODE:
```
watch(() => foo, /* ... */)
```

----------------------------------------

TITLE: Configuring Vue.js Global Error Handler - JavaScript
DESCRIPTION: This snippet demonstrates how to configure a global error handler for a Vue.js application. It assigns a function to `app.config.errorHandler` that will be invoked when an unhandled error occurs during component rendering or lifecycle hooks. This allows for centralized error reporting to tracking services like Sentry or Bugsnag.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/production-deployment.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createApp } from 'vue'

const app = createApp(...)

app.config.errorHandler = (err, instance, info) => {
  // report error to tracking services
}
```

----------------------------------------

TITLE: Consuming the useFetch Composable in Vue Component
DESCRIPTION: This Vue component demonstrates how to consume the previously defined `useFetch` composable. By importing and destructuring `data` and `error` from `useFetch`, components can easily integrate asynchronous data fetching without repeating the state management boilerplate, promoting cleaner and more maintainable code.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_8

LANGUAGE: Vue
CODE:
```
<script setup>
import { useFetch } from './fetch.js'

const { data, error } = useFetch('...')
</script>
```

----------------------------------------

TITLE: Using toRefs() in a Composable Function in JavaScript
DESCRIPTION: Illustrates a common pattern for using `toRefs()` within a Vue composable function. By converting the reactive state to refs before returning, it enables consuming components to destructure the returned object without losing reactivity, which is crucial for maintaining reactivity when using spread or destructuring assignments.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
function useFeatureX() {
  const state = reactive({
    foo: 1,
    bar: 2
  })

  // ...logic operating on state

  // convert to refs when returning
  return toRefs(state)
}

// can destructure without losing reactivity
const { foo, bar } = useFeatureX()
```

----------------------------------------

TITLE: Destructuring Composables Returning Refs in Vue.js
DESCRIPTION: This example illustrates the recommended convention for Vue.js composables to always return a plain, non-reactive object containing multiple refs. This approach allows for direct destructuring in components, ensuring that the reactivity connection to the state within the composable is maintained.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
// x and y are refs
const { x, y } = useMouse()
```

----------------------------------------

TITLE: Listening to Custom Events on Components with v-on in Vue.js
DESCRIPTION: This snippet demonstrates how `v-on` is used to listen for custom events emitted by child components. It shows both a simple method handler and an inline statement where additional arguments can be passed along with the `$event` payload from the custom event.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_8

LANGUAGE: vue-html
CODE:
```
<MyComponent @my-event="handleThis" />

<!-- inline statement -->
<MyComponent @my-event="handleThis(123, $event)" />
```

----------------------------------------

TITLE: Declaring Component Props Using an Imported Interface in Vue `<script setup>`
DESCRIPTION: This snippet demonstrates defining component props by importing a TypeScript interface (`Props`) from an external file (`./foo`) and then using it as a generic type argument for `defineProps()` in a Vue `<script setup>` block. This promotes modularity and reusability of prop type definitions across components.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
import type { Props } from './foo'

const props = defineProps<Props>()
</script>
```

----------------------------------------

TITLE: Testing Stepper Component with Cypress
DESCRIPTION: This snippet illustrates component testing with Cypress. It mounts the `Stepper` component, asserts its initial visibility and text content, simulates a click on the increment button, and then verifies the updated text content, mimicking user interaction within a browser-like environment.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const valueSelector = '[data-testid=stepper-value]'
const buttonSelector = '[data-testid=increment]'

mount(Stepper, {
  props: {
    max: 1
  }
})

cy.get(valueSelector)
  .should('be.visible')
  .and('contain.text', '0')
  .get(buttonSelector)
  .click()
  .get(valueSelector)
  .should('contain.text', '1')
```

----------------------------------------

TITLE: Defining a Basic Slot in Vue.js
DESCRIPTION: Illustrates the basic definition of a slot within a component, such as `<SubmitButton>`. This slot is initially empty, serving as a placeholder for content provided by the parent component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_6

LANGUAGE: vue-html
CODE:
```
<button type="submit">
  <slot></slot>
</button>
```

----------------------------------------

TITLE: Understanding Static Value Bindings with v-model in Vue.js HTML
DESCRIPTION: This snippet illustrates common static value bindings for form inputs using `v-model` in Vue.js. It shows how `v-model` binds to a string for radio buttons and select options, and to a boolean for checkboxes, where the `value` attribute directly defines the bound string or the default boolean state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_16

LANGUAGE: vue-html
CODE:
```
<!-- `picked` is a string "a" when checked -->
<input type="radio" v-model="picked" value="a" />

<!-- `toggle` is either true or false -->
<input type="checkbox" v-model="toggle" />

<!-- `selected` is a string "abc" when the first option is selected -->
<select v-model="selected">
  <option value="abc">ABC</option>
</select>
```

----------------------------------------

TITLE: Declaring Default Prop Values with Type-based Syntax
DESCRIPTION: This example demonstrates how to set default values for props using native JavaScript destructuring syntax, which is particularly useful when employing type-based prop declarations with defineProps. It allows defining optional props with fallback values directly.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
interface Props {
  msg?: string
  labels?: string[]
}

const { msg = 'hello', labels = ['one', 'two'] } = defineProps<Props>()
```

----------------------------------------

TITLE: Parent Component Listening to Custom Event
DESCRIPTION: This snippet demonstrates how a parent component listens for a custom event named `enlarge-text` emitted by the `<BlogPost>` child component. When the event is received, the `postFontSize` property is incremented by `0.1`, effectively enlarging the text.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_19

LANGUAGE: vue-html
CODE:
```
<BlogPost
  ...
  @enlarge-text="postFontSize += 0.1"
 />
```

----------------------------------------

TITLE: Defining Dynamic Select Options in Vue.js Composition API
DESCRIPTION: This JavaScript snippet, using the Composition API, defines reactive data for a select input. `selected` holds the currently chosen value, and `options` is an array of objects, each containing `text` for display and `value` for binding, enabling dynamic rendering of select options.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_13

LANGUAGE: javascript
CODE:
```
const selected = ref('A')

const options = ref([
  { text: 'One', value: 'A' },
  { text: 'Two', value: 'B' },
  { text: 'Three', value: 'C' }
])
```

----------------------------------------

TITLE: Defining Else Blocks with v-else in Vue.js
DESCRIPTION: The `v-else` directive denotes an 'else block' for a preceding `v-if` or `v-else-if` chain. It does not expect an expression and must immediately follow an element with `v-if` or `v-else-if`. It can be used on `<template>` for conditional blocks containing text or multiple elements.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_2

LANGUAGE: vue-html
CODE:
```
<div v-if="Math.random() > 0.5">
    Now you see me
</div>
<div v-else>
    Now you don't
</div>
```

----------------------------------------

TITLE: Defining a Method Handler (Options API)
DESCRIPTION: Defines a `greet` method within the `methods` option of a Vue component using the Options API. It accesses component data via `this` and demonstrates receiving the native DOM `event` object.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_4

LANGUAGE: js
CODE:
```
data() {
  return {
    name: 'Vue.js'
  }
},
methods: {
  greet(event) {
    // `this` inside methods points to the current active instance
    alert(`Hello ${this.name}!`)
    // `event` is the native DOM event
    if (event) {
      alert(event.target.tagName)
    }
  }
}
```

----------------------------------------

TITLE: Declaring Emitted Events with Object Syntax and Payload Typing (Composition API, TypeScript)
DESCRIPTION: This snippet demonstrates declaring events using the object syntax with `defineEmits()` in a TypeScript-enabled `<script setup>` block. It allows for defining the expected payload type for the 'submit' event, enabling runtime validation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_15

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
const emit = defineEmits({
  submit(payload: { email: string, password: string }) {
    // return `true` or `false` to indicate
    // validation pass / fail
  }
})
</script>
```

----------------------------------------

TITLE: Passing Props to Iterated Components with `v-for` in Vue.js
DESCRIPTION: Explains how to pass iterated data (`item`, `index`) as props to a component (`MyComponent`) when using `v-for`. This explicit prop passing ensures the component has isolated scopes and remains reusable in various contexts, avoiding tight coupling to the `v-for` mechanism.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_23

LANGUAGE: vue-html
CODE:
```
<MyComponent
  v-for="(item, index) in items"
  :item="item"
  :index="index"
  :key="item.id"
/>
```

----------------------------------------

TITLE: Accessing Global Store in Vue Composition API Component A
DESCRIPTION: This Vue component, using the Composition API with `<script setup>`, imports the `store` object from `store.js`. It then displays the `count` property from the global store in its template, demonstrating how components can reactively consume shared state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_3

LANGUAGE: vue
CODE:
```
<!-- ComponentA.vue -->
<script setup>
import { store } from './store.js'
</script>

<template>From A: {{ store.count }}</template>
```

----------------------------------------

TITLE: Sharing State with `ref` and Composables in JavaScript
DESCRIPTION: This snippet illustrates alternative ways to share reactive state using Vue's Reactivity APIs. It defines `globalCount` using `ref()` at the module scope for global access, and `localCount` within a `useCount` composable, which creates per-component local state. The composable then returns both, demonstrating flexible state sharing patterns.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_10

LANGUAGE: js
CODE:
```
import { ref } from 'vue'

// global state, created in module scope
const globalCount = ref(1)

export function useCount() {
  // local state, created per-component
  const localCount = ref(1)

  return {
    globalCount,
    localCount
  }
}
```

----------------------------------------

TITLE: Extracting Mouse Tracking Logic into a Vue Composable
DESCRIPTION: This code extracts the mouse tracking functionality into a reusable Vue composable function, `useMouse`. It encapsulates the state (`x`, `y`) and the logic for updating it, along with the lifecycle hooks for adding and removing the event listener, making the logic portable across multiple components.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_2

LANGUAGE: js
CODE:
```
// mouse.js
import { ref, onMounted, onUnmounted } from 'vue'

// by convention, composable function names start with "use"
export function useMouse() {
  // state encapsulated and managed by the composable
  const x = ref(0)
  const y = ref(0)

  // a composable can update its managed state over time.
  function update(event) {
    x.value = event.pageX
    y.value = event.pageY
  }

  // a composable can also hook into its owner component's
  // lifecycle to setup and teardown side effects.
  onMounted(() => window.addEventListener('mousemove', update))
  onUnmounted(() => window.removeEventListener('mousemove', update))

  // expose managed state as return value
  return { x, y }
}
```

----------------------------------------

TITLE: Displaying Data in Vue.js Template
DESCRIPTION: This snippet demonstrates basic one-way data binding in a Vue.js template, where the value of the 'msg' data property is displayed. It's a fundamental concept for rendering dynamic content.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/_hint/App/template.html#_snippet_0

LANGUAGE: Vue.js
CODE:
```
{{ msg }}
```

----------------------------------------

TITLE: Binding Single-Line Text Input with v-model in Vue.js
DESCRIPTION: This example shows how to bind a standard HTML `<input>` element to a reactive `message` variable using `v-model`. The `placeholder` attribute provides a hint, and the bound `message` is displayed in real-time within a paragraph, demonstrating immediate synchronization.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_3

LANGUAGE: Vue.js
CODE:
```
<p>Message is: {{ message }}</p>
<input v-model="message" placeholder="edit me" />
```

----------------------------------------

TITLE: Associating Labels with Inputs using `for` and `id` in Vue.js
DESCRIPTION: This example illustrates the recommended method for associating a label with an input field by linking the `for` attribute on the <label> to the matching `id` on the <input>. This explicit association is crucial for providing robust accessibility support for assistive technologies.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_6

LANGUAGE: vue-html
CODE:
```
<label for="name">Name: </label>
<input type="text" name="name" id="name" v-model="name" />
```

----------------------------------------

TITLE: Defining Scoped Slots in Vue.js Child Component
DESCRIPTION: This snippet demonstrates how to define a scoped slot within a Vue.js child component's template. Data (`text` and `count`) is passed to the slot using attributes, making it available to the parent component's slot content. This enables the child to expose its internal state to the slot.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_22

LANGUAGE: vue-html
CODE:
```
<!-- <MyComponent> template -->
<div>
  <slot :text="greetingMessage" :count="1"></slot>
</div>
```

----------------------------------------

TITLE: Implementing Multiple Select with v-model in Vue.js HTML
DESCRIPTION: This snippet illustrates how to create a multi-selection dropdown using `v-model` and the `multiple` attribute in Vue.js. When multiple options are selected, the `selected` data property will be bound to an array containing the values of all chosen options.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_12

LANGUAGE: vue-html
CODE:
```
<div>Selected: {{ selected }}</div>

<select v-model="selected" multiple>
  <option>A</option>
  <option>B</option>
  <option>C</option>
</select>
```

----------------------------------------

TITLE: Registering onMounted Hook - Composition API (Vue)
DESCRIPTION: This snippet demonstrates how to register the `onMounted` lifecycle hook using Vue's Composition API within a `<script setup>` block. The callback function executes after the component has finished its initial rendering and created its DOM nodes, making it suitable for DOM-dependent operations. It requires importing `onMounted` from 'vue'.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/lifecycle.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup>
import { onMounted } from 'vue'

onMounted(() => {
  console.log(`the component is now mounted.`)
})
</script>
```

----------------------------------------

TITLE: Implementing Basic Counter with Vue Composition API
DESCRIPTION: This snippet demonstrates a basic counter component using Vue 3's Composition API. It defines reactive state using `ref` and an `increment` function to modify the state, showcasing the one-way data flow within a self-contained component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup>
import { ref } from 'vue'

// state
const count = ref(0)

// actions
function increment() {
  count.value++
}
</script>

<!-- view -->
<template>{{ count }}</template>
```

----------------------------------------

TITLE: Setting Props Default Values with `withDefaults` Macro (Vue 3.4-)
DESCRIPTION: This TypeScript snippet demonstrates using the `withDefaults` compiler macro to provide default values for optional props when using type-based declaration. It defines an interface `Props` and then wraps `defineProps<Props>()` with `withDefaults`, supplying default values for `msg` and `labels`. For mutable types like arrays, the default value is wrapped in a function to prevent shared references.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
interface Props {
  msg?: string
  labels?: string[]
}

const props = withDefaults(defineProps<Props>(), {
  msg: 'hello',
  labels: () => ['one', 'two']
})
```

----------------------------------------

TITLE: Basic Reactivity with `ref` and `watchEffect` in Vue
DESCRIPTION: This snippet demonstrates fundamental Vue reactivity using `ref` to create a reactive variable and `watchEffect` to automatically track its changes. When `count.value` is updated, `watchEffect` re-runs, updating the `document.body.innerHTML` to reflect the new value. This illustrates how Vue components keep state and DOM in sync.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
const count = ref(0)

watchEffect(() => {
  document.body.innerHTML = `Count is: ${count.value}`
})

// updates the DOM
count.value++
```

----------------------------------------

TITLE: Defining Method in Vue Composition API
DESCRIPTION: This JavaScript snippet illustrates how to define a `calculateBooksMessage` function in the Vue Composition API. It performs the same logic as its Options API counterpart, checking for books and returning a string.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
// in component
function calculateBooksMessage() {
  return author.books.length > 0 ? 'Yes' : 'No'
}
```

----------------------------------------

TITLE: Using nextTick() with Composition API (Vue.js)
DESCRIPTION: This Vue.js Composition API example shows how to use `nextTick()` to wait for DOM updates after a reactive state change. It demonstrates that the DOM is not immediately updated after `count.value++` but is updated after `await nextTick()`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_2

LANGUAGE: vue
CODE:
```
<script setup>
import { ref, nextTick } from 'vue'

const count = ref(0)

async function increment() {
  count.value++

  // DOM not yet updated
  console.log(document.getElementById('counter').textContent) // 0

  await nextTick()
  // DOM is now updated
  console.log(document.getElementById('counter').textContent) // 1
}
</script>

<template>
  <button id="counter" @click="increment">{{ count }}</button>
</template>
```

----------------------------------------

TITLE: Correct v-for and v-if Usage with Template Tag in Vue-HTML
DESCRIPTION: This Vue-HTML snippet shows the recommended way to use `v-for` and `v-if` together. By moving `v-for` to a wrapping `<template>` tag, `v-if` can correctly access the `todo` variable from the `v-for` scope.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_19

LANGUAGE: vue-html
CODE:
```
<template v-for="todo in todos">
  <li v-if="!todo.isComplete">
    {{ todo.name }}
  </li>
</template>
```

----------------------------------------

TITLE: Lazy Loading Modules with Dynamic Import in JavaScript
DESCRIPTION: This snippet demonstrates how to use the dynamic `import()` syntax in JavaScript to achieve code splitting. Bundlers like Rollup or webpack detect this syntax and automatically create separate chunks for the imported module and its dependencies, which are then loaded only when the `loadLazy()` function is called, improving initial page load performance.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_0

LANGUAGE: js
CODE:
```
// lazy.js and its dependencies will be split into a separate chunk
// and only loaded when `loadLazy()` is called.
function loadLazy() {
  return import('./lazy.js')
}
```

----------------------------------------

TITLE: Exposing Properties from `<script setup>` with `defineExpose` in Vue
DESCRIPTION: This snippet demonstrates how to explicitly expose properties from a Vue `<script setup>` component using the `defineExpose` compiler macro. By default, `<script setup>` components are closed, but `defineExpose` allows specific bindings (like `a` and `b` in this example) to be made accessible to parent components via template refs or `$parent` chains, with refs automatically unwrapped.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_23

LANGUAGE: Vue
CODE:
```
<script setup>
import { ref } from 'vue'

const a = 1
const b = ref(2)

defineExpose({
  a,
  b
})
</script>
```

----------------------------------------

TITLE: Listening to Custom Event in Parent Component in Vue.js
DESCRIPTION: This snippet illustrates how a parent component listens to a custom event emitted by a child component. Using `v-on` (shorthand `@`), the parent component binds the `some-event` listener to a `callback` function, which will execute when the child emits 'someEvent'.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_3

LANGUAGE: Vue-HTML
CODE:
```
<MyComponent @some-event="callback" />
```

----------------------------------------

TITLE: Binding to an Object Variable for Classes (Vue)
DESCRIPTION: This snippet demonstrates binding `:class` to a pre-defined object variable, `classObject`, which holds the class names and their conditional truthiness. This approach helps keep the template cleaner by moving complex class logic into the script.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const classObject = reactive({
  active: true,
  'text-danger': false
})
```

LANGUAGE: javascript
CODE:
```
data() {
  return {
    classObject: {
      active: true,
      'text-danger': false
    }
  }
}
```

LANGUAGE: vue-html
CODE:
```
<div :class="classObject"></div>
```

----------------------------------------

TITLE: Typing Vue Provide/Inject with InjectionKey in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates using Vue's 'InjectionKey' to strongly type values passed via 'provide' and 'inject'. It ensures type consistency between the provider and consumer, showing how 'inject' returns a union type including 'undefined' because the value might not always be provided.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_22

LANGUAGE: TypeScript
CODE:
```
import { provide, inject } from 'vue'
import type { InjectionKey } from 'vue'

const key = Symbol() as InjectionKey<string>

provide(key, 'foo') // providing non-string value will result in error

const foo = inject(key) // type of foo: string | undefined
```

----------------------------------------

TITLE: Declaring Props with defineProps() in Vue SFCs
DESCRIPTION: This snippet demonstrates how to declare props using the `defineProps()` macro within a `<script setup>` block in a Vue Single File Component (SFC). It shows how to access the declared prop `foo` from the `props` object.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script setup>
const props = defineProps(['foo'])

console.log(props.foo)
</script>
```

----------------------------------------

TITLE: Defining Reactive State in Vue Script Setup
DESCRIPTION: This JavaScript snippet, intended for use within a Vue `<script setup>` block, demonstrates how to define a reactive variable `count` using Vue's `ref` function. This makes the `count` variable automatically trackable for changes and updates in the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { ref } from 'vue'
const count = ref(0)
```

----------------------------------------

TITLE: Passing Dynamic Props to Child Component (SFC)
DESCRIPTION: This Vue-HTML snippet demonstrates how a parent component passes a dynamic prop named `msg` to a `ChildComp` using the `v-bind` shorthand (`:msg`). The value of `greeting` from the parent's data or computed properties will be passed as the `msg` prop to the child.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-12/description.md#_snippet_3

LANGUAGE: vue-html
CODE:
```
<ChildComp :msg="greeting" />
```

----------------------------------------

TITLE: Testing Stepper Component with Testing Library
DESCRIPTION: This snippet shows how to test a Vue component using Testing Library. It renders the `Stepper` component, implicitly asserts the initial text, finds the increment button by role, dispatches click events, and then asserts the updated text, adhering to the principle of testing what the user sees and interacts with.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const { getByText } = render(Stepper, {
  props: {
    max: 1
  }
})

getByText('0') // Implicit assertion that "0" is within the component

const button = getByRole('button', { name: /increment/i })

// Dispatch a click event to our increment button.
await fireEvent.click(button)

getByText('1')

await fireEvent.click(button)
```

----------------------------------------

TITLE: Using TypeScript in Vue SFC Script Block
DESCRIPTION: This snippet shows how to declare TypeScript as the pre-processor for the `<script>` block in a Vue SFC using the `lang="ts"` attribute. This enables writing component logic using TypeScript syntax.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<script lang="ts">
  // use TypeScript
</script>
```

----------------------------------------

TITLE: Invalid JavaScript Statements in Vue.js Templates
DESCRIPTION: Shows examples of invalid syntax in Vue.js template bindings, specifically demonstrating that only single expressions are allowed, not statements (like variable declarations) or flow control (like `if` statements).
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_11

LANGUAGE: vue-html
CODE:
```
<!-- this is a statement, not an expression: -->
{{ var a = 1 }}

<!-- flow control won't work either, use ternary expressions -->
{{ if (ok) { return message } }}
```

----------------------------------------

TITLE: Using nextTick() with Options API (Vue.js)
DESCRIPTION: This Vue.js Options API example illustrates the use of `nextTick()` to ensure DOM updates have completed before performing actions that depend on the updated DOM. It highlights the asynchronous nature of Vue's DOM rendering.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_3

LANGUAGE: vue
CODE:
```
<script>
import { nextTick } from 'vue'

export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    async increment() {
      this.count++

      // DOM not yet updated
      console.log(document.getElementById('counter').textContent) // 0

      await nextTick()
      // DOM is now updated
      console.log(document.getElementById('counter').textContent) // 1
    }
  }
}
</script>

<template>
  <button id="counter" @click="increment">{{ count }}</button>
</template>
```

----------------------------------------

TITLE: Emitting Delete Event in Composition API (Good Practice)
DESCRIPTION: This Composition API component emits a `delete` event to signal to the parent that the todo item should be removed. This follows the 'props down, events up' principle, promoting loose coupling and easier component management by clearly separating concerns and communication channels.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_9

LANGUAGE: vue
CODE:
```
<script setup>
defineProps({
  todo: {
    type: Object,
    required: true
  }
})

const emit = defineEmits(['delete'])
</script>

<template>
  <span>
    {{ todo.text }}
    <button @click="emit('delete')">×</button>
  </span>
</template>
```

----------------------------------------

TITLE: Implementing Counter Logic with Vue.js Composition API
DESCRIPTION: This JavaScript snippet defines the core logic for the counter using Vue 3's Composition API. It initializes a reactive 'count' variable using 'ref' and provides an 'increment' function to update its value. The 'setup' function returns these reactive properties and methods for use in the template, and the application is mounted to the '#app' element.
SOURCE: https://github.com/vuejs/docs/blob/main/src/examples/src/counter/description.txt#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createApp, ref } from 'vue';

createApp({
  setup() {
    const count = ref(0);
    const increment = () => {
      count.value++;
    };
    return {
      count,
      increment
    };
  }
}).mount('#app');
```

----------------------------------------

TITLE: Understanding Reactive Proxy vs. Original Object in Vue 3
DESCRIPTION: This example illustrates the behavior of reactive proxies in Vue 3 when assigning a new object to a reactive property. It highlights that the assigned value (`this.someObject`) becomes a reactive proxy, while the original object (`newObject`) remains non-reactive, emphasizing the need to always access reactive state via `this`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default {
  data() {
    return {
      someObject: {}
    }
  },
  mounted() {
    const newObject = {}
    this.someObject = newObject

    console.log(newObject === this.someObject) // false
  }
}
```

----------------------------------------

TITLE: Calling Component Methods in Vue.js Template Bindings
DESCRIPTION: Demonstrates how to call component-exposed methods directly within Vue.js binding expressions, such as `toTitleDate` for an attribute and `formatDate` for text interpolation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_12

LANGUAGE: vue-html
CODE:
```
<time :title="toTitleDate(date)" :datetime="date">
  {{ formatDate(date) }}
</time>
```

----------------------------------------

TITLE: Applying `key` to `<template v-for>` in Vue.js
DESCRIPTION: Illustrates how to place the `key` attribute on the `<template>` container when `v-for` is used with it. This ensures Vue can correctly track and manage the identity of the elements rendered within the template block, maintaining state across list updates without rendering an extra DOM element.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_21

LANGUAGE: vue-html
CODE:
```
<template v-for="todo in todos" :key="todo.name">
  <li>{{ todo.name }}</li>
</template>
```

----------------------------------------

TITLE: Filtering List with Computed Property (Options API) in Vue.js
DESCRIPTION: This JavaScript snippet (Options API) defines a computed property `activeUsers` that filters the original `users` array based on the `isActive` property. This is the recommended approach to filter lists before rendering with `v-for`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_13

LANGUAGE: js
CODE:
```
computed: {
  activeUsers() {
    return this.users.filter(user => user.isActive)
  }
}
```

----------------------------------------

TITLE: Emitting Custom Event from Child Component
DESCRIPTION: This snippet shows the updated template for the `<BlogPost>` component. When the 'Enlarge text' button is clicked, the built-in `$emit` method is called to emit a custom event named `enlarge-text`, signaling the parent component to perform an action.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_20

LANGUAGE: vue
CODE:
```
<!-- BlogPost.vue, omitting <script> -->
<template>
  <div class="blog-post">
    <h4>{{ title }}</h4>
    <button @click="$emit('enlarge-text')">Enlarge text</button>
  </div>
</template>
```

----------------------------------------

TITLE: Passing Static Data to Component Props
DESCRIPTION: This Vue-HTML example shows how to pass static string values to a component's declared props by using them as custom attributes. Multiple 'BlogPost' components are rendered with different static titles.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_12

LANGUAGE: vue-html
CODE:
```
<BlogPost title="My journey with Vue" />
<BlogPost title="Blogging with Vue" />
<BlogPost title="Why Vue is so fun" />
```

----------------------------------------

TITLE: Component Scoped Styling with CSS Modules in Vue.js
DESCRIPTION: This snippet demonstrates using CSS Modules for component-scoped styling. The `module` attribute on the `<style>` tag generates unique class names, accessed via `$style` in the template, ensuring no global conflicts.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_19

LANGUAGE: vue-html
CODE:
```
<template>
  <button :class="[$style.button, $style.buttonClose]">×</button>
</template>
```

LANGUAGE: vue-html
CODE:
```
<style module>
.button {
  border: none;
  border-radius: 2px;
}

.buttonClose {
  background-color: red;
}
</style>
```

----------------------------------------

TITLE: Declaring Emitted Events with defineEmits (Composition API)
DESCRIPTION: This snippet shows the basic declaration of custom events 'inFocus' and 'submit' using the `defineEmits()` macro within a Vue 3 `<script setup>` block. This macro is used to explicitly inform Vue about the events a component will emit.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_10

LANGUAGE: vue
CODE:
```
<script setup>
defineEmits(['inFocus', 'submit'])
</script>
```

----------------------------------------

TITLE: Calling Centralized Store Method in Vue Template
DESCRIPTION: This template snippet shows how to call the `increment()` method defined on the global `store` object when a button is clicked. This is the recommended way to mutate shared state, as it leverages the centralized mutation logic within the store itself, improving code organization and maintainability.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_9

LANGUAGE: vue-html
CODE:
```
<template>
  <button @click="store.increment()">
    From B: {{ store.count }}
  </button>
</template>
```

----------------------------------------

TITLE: Declaring Emitted Events in Component Script
DESCRIPTION: These snippets demonstrate how to explicitly declare the `enlarge-text` event in a Vue component. The Options API uses the `emits` option, while the Composition API uses the `defineEmits` macro within a `<script setup>` block. This declaration documents the event and allows Vue to handle it correctly.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_21

LANGUAGE: vue
CODE:
```
<!-- BlogPost.vue -->
<script>
export default {
  props: ['title'],
  emits: ['enlarge-text']
}
</script>
```

LANGUAGE: vue
CODE:
```
<!-- BlogPost.vue -->
<script setup>
defineProps(['title'])
defineEmits(['enlarge-text'])
</script>
```

----------------------------------------

TITLE: Using a Ref with useFetch for Reactive URL in Vue.js
DESCRIPTION: This snippet illustrates how to pass a Vue `ref` as the URL argument to a `useFetch` composable. When the `ref`'s value changes, it triggers a re-fetch operation, enabling dynamic data loading based on reactive state. It shows the initial setup and a subsequent update that causes the re-fetch.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
const url = ref('/initial-url')

const { data, error } = useFetch(url)

// this should trigger a re-fetch
url.value = '/new-url'
```

----------------------------------------

TITLE: Watching Reactive Property Changes with Options API (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates using the `watch` option in Vue's Options API to react to changes in the `question` data property. When `question` includes a question mark, it triggers the `getAnswer` method, which performs an asynchronous API call to fetch an answer, updates loading state, and handles potential errors.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  data() {
    return {
      question: '',
      answer: 'Questions usually contain a question mark. ;-)',
      loading: false
    }
  },
  watch: {
    // whenever question changes, this function will run
    question(newQuestion, oldQuestion) {
      if (newQuestion.includes('?')) {
        this.getAnswer()
      }
    }
  },
  methods: {
    async getAnswer() {
      this.loading = true
      this.answer = 'Thinking...'
      try {
        const res = await fetch('https://yesno.wtf/api')
        this.answer = (await res.json()).answer
      } catch (error) {
        this.answer = 'Error! Could not reach the API. ' + error
      } finally {
        this.loading = false
      }
    }
  }
}
```

----------------------------------------

TITLE: Preventing Array Mutation in Vue.js Computed Properties
DESCRIPTION: Highlights the importance of creating a copy of an array before applying mutating methods like `reverse()` or `sort()` within a Vue computed property. This ensures that the original data source remains immutable, preventing unintended side effects and maintaining predictable reactivity.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_32

LANGUAGE: Diff
CODE:
```
- return numbers.reverse()
+ return [...numbers].reverse()
```

----------------------------------------

TITLE: Providing and Injecting Data Across Components - Vue.js JavaScript
DESCRIPTION: This Vue.js snippet demonstrates the `provide` and `inject` functions for dependency injection. A parent component `provides` a value under a specific key, and any descendant component can `inject` that value using the same key, bypassing prop drilling.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_14

LANGUAGE: JavaScript
CODE:
```
import { provide, inject } from 'vue'

// Parent component
export default {
  setup() {
    provide('my-key', 'hello from parent')
  }
}

// Child component
export const ChildComponent = {
  setup() {
    const message = inject('my-key')
    return { message }
  }
}
```

----------------------------------------

TITLE: Refactoring Complex Logic to Computed Properties - Vue Options API
DESCRIPTION: Illustrates how to move complex template logic into a computed property within the Options API, improving template readability and enabling code reuse across the component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_53

LANGUAGE: JavaScript
CODE:
```
// The complex expression has been moved to a computed property
computed: {
  normalizedFullName() {
    return this.fullName.split(' ')
      .map(word => word[0].toUpperCase() + word.slice(1))
      .join(' ')
  }
}
```

----------------------------------------

TITLE: Declaring Reactive Data with Parent Message (Composition API)
DESCRIPTION: This JavaScript snippet declares reactive data for list rendering in the Composition API, including a `parentMessage` string and an `items` array, both made reactive with `ref` for use in templates.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_3

LANGUAGE: js
CODE:
```
const parentMessage = ref('Parent')
const items = ref([{ message: 'Foo' }, { message: 'Bar' }])
```

----------------------------------------

TITLE: Defining a Method Handler (Composition API)
DESCRIPTION: Defines a `greet` function in the Composition API that acts as an event handler. It accesses a reactive `name` variable and demonstrates receiving the native DOM `event` object.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_3

LANGUAGE: js
CODE:
```
const name = ref('Vue.js')

function greet(event) {
  alert(`Hello ${name.value}!`)
  // `event` is the native DOM event
  if (event) {
    alert(event.target.tagName)
  }
}
```

----------------------------------------

TITLE: Registering mounted Hook - Options API (JavaScript)
DESCRIPTION: This snippet illustrates how to register the `mounted` lifecycle hook using Vue's Options API. The `mounted` method is called after the component has been mounted to the DOM. Within this method, `this` context points to the current component instance, allowing access to its properties and methods. Arrow functions should be avoided here to preserve the `this` context.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/lifecycle.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default {
  mounted() {
    console.log(`the component is now mounted.`)
  }
}
```

----------------------------------------

TITLE: Registering onBeforeMount Callback in Vue
DESCRIPTION: Registers a hook to be called right before the component is to be mounted. At this stage, the component's reactive state is set up, but no DOM nodes have been created yet. This hook is not called during server-side rendering.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_3

LANGUAGE: typescript
CODE:
```
function onBeforeMount(callback: () => void, target?: ComponentInternalInstance | null): void
```

----------------------------------------

TITLE: Applying Basic Event Modifiers in Vue.js Templates
DESCRIPTION: This Vue HTML snippet demonstrates common event modifiers: '.stop' to prevent event propagation, '.prevent' to stop default browser actions (like form submission), and chaining modifiers ('.stop.prevent'). It also shows using a modifier without a method, which implicitly calls 'event.preventDefault()'.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_12

LANGUAGE: vue-html
CODE:
```
<!-- the click event's propagation will be stopped -->
<a @click.stop="doThis"></a>

<!-- the submit event will no longer reload the page -->
<form @submit.prevent="onSubmit"></form>

<!-- modifiers can be chained -->
<a @click.stop.prevent="doThat"></a>

<!-- just the modifier -->
<form @submit.prevent></form>

<!-- only trigger handler if event.target is the element itself -->
<!-- i.e. not from a child element -->
<div @click.self="doThat">...</div>
```

----------------------------------------

TITLE: Defining Props with Basic Type (Good Practice - Composition API) - Vue.js
DESCRIPTION: This snippet demonstrates a basic good practice for prop definition using `defineProps` in Vue.js Composition API, specifying the `status` prop as a `String` type. This improves documentation and enables basic type validation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_6

LANGUAGE: js
CODE:
```
const props = defineProps({
  status: String
})
```

----------------------------------------

TITLE: Organizing Vue Components into Separate Single-File Components (Good Practice)
DESCRIPTION: This snippet demonstrates the recommended practice of organizing each Vue component into its own dedicated Single-File Component (.vue) file. This structure is standard for Vue.js projects, improving project readability, simplifying component location, and enhancing overall maintainability.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_2

LANGUAGE: Vue
CODE:
```
components/
|- TodoList.vue
|- TodoItem.vue
```

----------------------------------------

TITLE: Creating Computed Property with computed - Vue.js JavaScript
DESCRIPTION: This Vue.js component snippet shows how to define a computed property `doubledCount` using the `computed` function. Computed properties automatically re-evaluate when their dependencies (here, `count`) change, providing a cached result.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { computed } from 'vue'

export default {
  setup() {
    const count = ref(0)
    const doubledCount = computed(() => count.value * 2)
    return { count, doubledCount }
  }
}
```

----------------------------------------

TITLE: Applying the `.trim` Modifier to `v-model` in Vue.js
DESCRIPTION: This snippet illustrates the `.trim` modifier, which automatically removes leading and trailing whitespace from user input. This is useful for cleaning up string inputs before they are bound to data properties.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_23

LANGUAGE: Vue-HTML
CODE:
```
<input v-model.trim="msg" />
```

----------------------------------------

TITLE: Defining Vue Components with Composition API using defineComponent (TypeScript)
DESCRIPTION: This snippet illustrates how `defineComponent()` facilitates type inference for props when using the Composition API's `setup()` function without `<script setup>`. It ensures that the `props` object passed to `setup` is correctly typed based on the component's defined props.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { defineComponent } from 'vue'

export default defineComponent({
  // type inference enabled
  props: {
    message: String
  },
  setup(props) {
    props.message // type: string | undefined
  }
})
```

----------------------------------------

TITLE: Emitting Delete Event in Options API (Good Practice)
DESCRIPTION: This component triggers a `delete` event when the button is clicked, allowing the parent component to handle the removal of the todo item. This maintains a clear communication flow and avoids direct manipulation of parent state, promoting loose coupling and easier component management.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_5

LANGUAGE: js
CODE:
```
app.component('TodoItem', {
  props: {
    todo: {
      type: Object,
      required: true
    }
  },

  emits: ['delete'],

  template: `
    <span>
      {{ todo.text }}
      <button @click="$emit('delete')">
        ×
      </button>
    </span>
  `
})
```

----------------------------------------

TITLE: Declaring Component State in setup() (Composition API)
DESCRIPTION: This JavaScript snippet shows how to declare reactive component state within the `setup()` function of a Vue component using `reactive()` and `ref()`. The `counter` object and `message` ref are returned, making them available for use in the component's template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
setup() {
  const counter = reactive({ count: 0 })
  const message = ref('Hello World!')
  return {
    counter,
    message
  }
}
```

----------------------------------------

TITLE: Defining Fallback Slot Content (Vue.js)
DESCRIPTION: This snippet illustrates how to provide fallback content within a <slot> element in a child component. If the parent component does not provide any content for this slot, the 'Fallback content' defined here will be rendered instead, ensuring a default display.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/description.md#_snippet_2

LANGUAGE: vue-html
CODE:
```
<slot>Fallback content</slot>
```

----------------------------------------

TITLE: Mounting Vue Application to CSS Selector - JavaScript
DESCRIPTION: Shows how to mount a Vue application instance to a DOM element identified by a CSS selector. The application will replace the content of the first matched element.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { createApp } from 'vue'
const app = createApp(/* ... */)

app.mount('#app')
```

----------------------------------------

TITLE: Replacing an Array with Filter in Vue.js Options API
DESCRIPTION: Illustrates how to replace an array using a non-mutating method like `filter()` in Vue 2/3's Options API. The `this.items` property is updated with the new filtered array, leveraging Vue's efficient DOM reuse.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
this.items = this.items.filter((item) => item.message.match(/Foo/))
```

----------------------------------------

TITLE: Declaring and Emitting Events (Composition API, Setup Function)
DESCRIPTION: This snippet shows event declaration and emission within the Composition API's `setup` function. The `emits` option declares the 'response' event, and the `emit` function (received as a context property) is used to dispatch the event with an argument.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default {
  // declare emitted events
  emits: ['response'],
  setup(props, { emit }) {
    // emit with argument
    emit('response', 'hello from child')
  }
}
```

----------------------------------------

TITLE: Initializing Todo List Data (Composition API) - Vue.js
DESCRIPTION: This snippet demonstrates how to initialize a reactive list of todo items using `ref` in a Vue.js component with the Composition API. Each todo object includes an `id` and `text` property, which is crucial for using `key` with `v-for`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_9

LANGUAGE: js
CODE:
```
const todos = ref([
  {
    id: 1,
    text: 'Learn to use v-for'
  },
  {
    id: 2,
    text: 'Learn to use key'
  }
])
```

----------------------------------------

TITLE: Declaring Props and Emits (Type-only) in Vue
DESCRIPTION: This example illustrates how to declare props and emits using a pure-type syntax by passing a literal type argument to defineProps or defineEmits. This method automatically generates the equivalent runtime declaration, ensuring correct runtime behavior while providing full type inference.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
const props = defineProps<{
  foo: string
  bar?: number
}>()

const emit = defineEmits<{
  (e: 'change', id: number): void
  (e: 'update', value: string): void
}>()

// 3.3+: alternative, more succinct syntax
const emit = defineEmits<{
  change: [id: number] // named tuple syntax
  update: [value: string]
}>()
```

----------------------------------------

TITLE: Passing Dynamic Props (Expression) - Vue HTML
DESCRIPTION: Shows how to dynamically assign a prop (`title`) using `v-bind` to the result of a complex JavaScript expression. This enables computed values to be passed as props.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_19

LANGUAGE: vue-html
CODE:
```
<!-- Dynamically assign the value of a complex expression -->
<BlogPost :title="post.title + ' by ' + post.author.name" />
```

----------------------------------------

TITLE: Managing Stateful Methods in Vue Lifecycle Hooks - JavaScript
DESCRIPTION: This snippet provides the correct approach for handling stateful methods in Vue components. By creating the debounced function within the `created` lifecycle hook, each component instance gets its own independent copy, preventing interference. The `unmounted` hook is used to cancel the timer, cleaning up resources.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_35

LANGUAGE: js
CODE:
```
export default {
  created() {
    // each instance now has its own copy of debounced handler
    this.debouncedClick = _.debounce(this.click, 500)
  },
  unmounted() {
    // also a good idea to cancel the timer
    // when the component is removed
    this.debouncedClick.cancel()
  },
  methods: {
    click() {
      // ... respond to click ...
    }
  }
}
```

----------------------------------------

TITLE: Correct `v-for` Usage with Filtered Computed Property in Vue.js Template
DESCRIPTION: This Vue-HTML snippet demonstrates the correct way to iterate over a pre-filtered list. It uses `v-for` on the `activeUsers` computed property, ensuring that only active users are rendered without conflicting `v-if` on the same element.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_15

LANGUAGE: vue-html
CODE:
```
<ul>
  <li
    v-for="user in activeUsers"
    :key="user.id"
  >
    {{ user.name }}
  </li>
</ul>
```

----------------------------------------

TITLE: Installing a Vue.js Plugin (JavaScript)
DESCRIPTION: Demonstrates how to install a Vue.js plugin using the `app.use()` method, optionally passing configuration options.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_0

LANGUAGE: js
CODE:
```
import { createApp } from 'vue'

const app = createApp({})

app.use(myPlugin, {
  /* optional options */
})
```

----------------------------------------

TITLE: Waiting for DOM Updates with nextTick in Vue Composition API
DESCRIPTION: This example demonstrates using `nextTick()` in the Composition API to wait for the DOM to update after a reactive state change. Since Vue buffers DOM updates, `await nextTick()` ensures that any code following it executes only after the DOM has been fully re-rendered, allowing for reliable DOM access.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
import { nextTick } from 'vue'

async function increment() {
  count.value++
  await nextTick()
  // Now the DOM is updated
}
```

----------------------------------------

TITLE: Accessing Refs in Reactive Arrays and Maps - JavaScript
DESCRIPTION: This code demonstrates that `ref` unwrapping does not occur when a `ref` is an element of a reactive array or a native collection type like `Map`. Therefore, `.value` must be explicitly used to access the ref's value in these scenarios.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_27

LANGUAGE: js
CODE:
```
const books = reactive([ref('Vue 3 Guide')])
// need .value here
console.log(books[0].value)

const map = reactive(new Map([['count', ref(0)]]))
// need .value here
console.log(map.get('count').value)
```

----------------------------------------

TITLE: Displaying Variable in Vue.js Template
DESCRIPTION: This snippet demonstrates the basic syntax for interpolating a variable's value directly into the DOM within a Vue.js template. The `childMsg` variable's content will be rendered at this position. This is a fundamental concept for reactive data display in Vue.js applications.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/App/template.html#_snippet_0

LANGUAGE: Vue.js Template
CODE:
```
{{ childMsg }}
```

----------------------------------------

TITLE: Passing Dynamic Props (Variable) - Vue HTML
DESCRIPTION: Demonstrates dynamically assigning a prop (`title`) using `v-bind` (or its `:` shortcut) to the value of a JavaScript variable (`post.title`). This allows the prop to react to data changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_18

LANGUAGE: vue-html
CODE:
```
<!-- Dynamically assign the value of a variable -->
<BlogPost :title="post.title" />
```

----------------------------------------

TITLE: Defining Prop Validation with Options API (JavaScript)
DESCRIPTION: This snippet illustrates how to define prop validation rules using the `props` option in Vue.js Options API. It covers the same validation scenarios as the Composition API example, including basic type checks, multiple types, required props, nullable required props, default values for numbers, object/array defaults using a factory function, custom validator functions, and function defaults. It also notes that props are validated before component instance creation, so instance properties are not available in `default` or `validator` functions.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_40

LANGUAGE: JavaScript
CODE:
```
export default {
  props: {
    // Basic type check
    //  (`null` and `undefined` values will allow any type)
    propA: Number,
    // Multiple possible types
    propB: [String, Number],
    // Required string
    propC: {
      type: String,
      required: true
    },
    // Required but nullable string
    propD: {
      type: [String, null],
      required: true
    },
    // Number with a default value
    propE: {
      type: Number,
      default: 100
    },
    // Object with a default value
    propF: {
      type: Object,
      // Object or array defaults must be returned from
      // a factory function. The function receives the raw
      // props received by the component as the argument.
      default(rawProps) {
        return { message: 'hello' }
      }
    },
    // Custom validator function
    // full props passed as 2nd argument in 3.4+
    propG: {
      validator(value, props) {
        // The value must match one of these strings
        return ['success', 'warning', 'danger'].includes(value)
      }
    },
    // Function with a default value
    propH: {
      type: Function,
      // Unlike object or array default, this is not a factory
      // function - this is a function to serve as a default value
      default() {
        return 'Default function'
      }
    }
  }
}
```

----------------------------------------

TITLE: Attempting to Mutate Readonly Props in Vue Options API
DESCRIPTION: This snippet demonstrates an invalid attempt to directly mutate a prop (`foo`) within the `created` lifecycle hook of a Vue component using the Options API. Vue props are designed for one-way data flow and are readonly, leading to a console warning upon mutation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_34

LANGUAGE: js
CODE:
```
export default {
  props: ['foo'],
  created() {
    // ❌ warning, props are readonly!
    this.foo = 'bar'
  }
}
```

----------------------------------------

TITLE: Displaying Elements Conditionally with `v-show` in Vue.js
DESCRIPTION: This snippet illustrates the use of the `v-show` directive. Unlike `v-if`, `v-show` always renders the element to the DOM and only toggles its `display` CSS property based on the `ok` expression, making it suitable for frequent toggles.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_5

LANGUAGE: Vue.js
CODE:
```
<h1 v-show="ok">Hello!</h1>
```

----------------------------------------

TITLE: Binding Checkbox with v-model in Vue HTML
DESCRIPTION: This snippet demonstrates how to bind a checkbox's state to a `todo.done` property using `v-model` within a `v-for` loop in Vue HTML, enabling toggle functionality for each todo item.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<li v-for="todo in todos">
  <input type="checkbox" v-model="todo.done">
  ...
</li>
```

----------------------------------------

TITLE: Declaring Template Ref in Vue HTML
DESCRIPTION: This snippet demonstrates how to declare a template reference on an HTML element within a Vue template using the special `ref` attribute. The value of the `ref` attribute, `pElementRef`, will be used to access this specific DOM element programmatically.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<p ref="pElementRef">hello</p>
```

----------------------------------------

TITLE: Reactive Props Destructuring in Vue (3.5+)
DESCRIPTION: This snippet demonstrates the reactive props destructuring feature available in Vue 3.5 and above. Variables destructured from defineProps automatically become reactive, meaning watchers will re-run when the corresponding prop changes, as the compiler prepends 'props.' to their access.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_12

LANGUAGE: TypeScript
CODE:
```
const { foo } = defineProps(['foo'])

watchEffect(() => {
  // runs only once before 3.5
  // re-runs when the "foo" prop changes in 3.5+
  console.log(foo)
})
```

----------------------------------------

TITLE: Providing Slot Type Hints with `defineSlots` in Vue 3.3+
DESCRIPTION: This snippet illustrates the use of `defineSlots()` to provide type hints for slot names and their expected props, improving IDE support for type checking. It accepts a type parameter defining slot names as keys and slot functions (with props as the first argument) as values. It also returns the `slots` object.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_25

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
const slots = defineSlots<{
  default(props: { msg: string }): any
}>()
</script>
```

----------------------------------------

TITLE: Listening to Child Events (Vue SFC Template)
DESCRIPTION: This snippet demonstrates how a parent component listens to an event emitted by a child component within a Vue Single File Component (SFC) template. It uses `v-on` (shorthand `@`) to capture the 'response' event and assign its payload to a local state variable `childMsg`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_3

LANGUAGE: Vue-HTML
CODE:
```
<ChildComp @response="(msg) => childMsg = msg" />
```

----------------------------------------

TITLE: Providing Data with `provide()` in Vue Composition API (`<script setup>`)
DESCRIPTION: This snippet demonstrates how to use the `provide()` function within a Vue component using `<script setup>`. The `provide()` function accepts an injection key (string or Symbol) and the value to be provided. It must be called synchronously.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup>
import { provide } from 'vue'

provide(/* key */ 'message', /* value */ 'hello!')
</script>
```

----------------------------------------

TITLE: Component Prop Binding with v-bind in Vue.js
DESCRIPTION: This snippet illustrates how `v-bind` is used to pass data as a prop to a child component (`MyComponent`). The prop `prop` must be explicitly declared in the child component for it to be received.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_21

LANGUAGE: vue-html
CODE:
```
<MyComponent :prop="someThing" />
```

----------------------------------------

TITLE: Using .prevent Modifier with v-on:submit in Vue.js
DESCRIPTION: This snippet demonstrates the use of a directive modifier, `.prevent`, with the `v-on` directive. Applied to a `@submit` event on a form, the `.prevent` modifier automatically calls `event.preventDefault()`, preventing the default form submission behavior.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_20

LANGUAGE: vue-html
CODE:
```
<form @submit.prevent="onSubmit">...</form>
```

----------------------------------------

TITLE: Preventing Direct Style Tag Rendering in Vue.js (vue-html)
DESCRIPTION: This snippet shows an attempt to render a `<style>` element directly within a Vue template using user-provided content. Vue prevents this to mitigate severe style injection vulnerabilities, as allowing full control over a style tag would give attackers complete control over page styling, enabling sophisticated clickjacking or defacement.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_10

LANGUAGE: vue-html
CODE:
```
<style>{{ userProvidedStyles }}</style>
```

----------------------------------------

TITLE: Adding Fallback Content to Vue.js Slots
DESCRIPTION: Shows how to specify default (fallback) content for a Vue.js slot. The text 'Submit' is placed inside the `<slot>` tags, which will be rendered if the parent component does not provide any content for this slot.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_7

LANGUAGE: vue-html
CODE:
```
<button type="submit">
  <slot>
    Submit <!-- fallback content -->
  </slot>
</button>
```

----------------------------------------

TITLE: Binding Multiline Textarea with v-model in Vue.js
DESCRIPTION: This snippet demonstrates two-way data binding for a `<textarea>` element using `v-model` to manage multiline text. The `white-space: pre-line;` style applied to the display paragraph ensures that line breaks entered in the textarea are preserved when rendered.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_4

LANGUAGE: Vue.js
CODE:
```
<span>Multiline message is:</span>
<p style="white-space: pre-line;">{{ message }}</p>
<textarea v-model="message" placeholder="add multiple lines"></textarea>
```

----------------------------------------

TITLE: Declaring Computed Property in Vue Options API (SFC)
DESCRIPTION: This JavaScript snippet shows how to declare a `filteredTodos` computed property within the `computed` option of a Vue component using the Options API. It's intended to return a filtered list of todos based on `this.hideCompleted`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_1

LANGUAGE: js
CODE:
```
export default {
  // ...
  computed: {
    filteredTodos() {
      // return filtered todos based on `this.hideCompleted`
    }
  }
}
```

----------------------------------------

TITLE: Displaying Nested Numeric Data in Vue.js Template
DESCRIPTION: This snippet illustrates how to access and display a nested property from a reactive object in a Vue.js template. It uses dot notation (`counter.count`) within interpolation to show the `count` property of the `counter` object.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/_hint/App/template.html#_snippet_1

LANGUAGE: Vue.js
CODE:
```
{{ counter.count }}
```

----------------------------------------

TITLE: Using Top-Level Await with Vue.js `<script setup>`
DESCRIPTION: This example shows how top-level `await` expressions within `<script setup>` automatically make a Vue component an async dependency. The component fetches data and displays it in its template, with `<Suspense>` handling the loading state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_1

LANGUAGE: vue
CODE:
```
<script setup>
const res = await fetch(...)
const posts = await res.json()
</script>

<template>
  {{ posts }}
</template>
```

----------------------------------------

TITLE: Passing All Parent Props to Child with v-bind in Vue.js
DESCRIPTION: This advanced usage of `v-bind` allows a parent component to pass all its own props directly down to a child component using `v-bind="$props"`, simplifying prop forwarding.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_22

LANGUAGE: vue-html
CODE:
```
<MyComponent v-bind="$props" />
```

----------------------------------------

TITLE: Declaring Component Props Using an Inline Interface in Vue `<script setup>`
DESCRIPTION: This snippet shows how to define component props by first declaring an inline TypeScript interface (`Props`) and then passing it as a generic type argument to `defineProps()` within a Vue `<script setup>` block. This approach enhances readability and organization for prop definitions.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
interface Props {
  foo: string
  bar?: number
}

const props = defineProps<Props>()
</script>
```

----------------------------------------

TITLE: Creating Vue App with Global Build (Composition API)
DESCRIPTION: This example demonstrates using Vue's global build with the Composition API. It sets up a reactive 'message' using 'ref' within the 'setup()' function and mounts the application to an element with id 'app'.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_6

LANGUAGE: html
CODE:
```
<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

<div id="app">{{ message }}</div>

<script>
  const { createApp, ref } = Vue

  createApp({
    setup() {
      const message = ref('Hello vue!')
      return {
        message
      }
    }
  }).mount('#app')
</script>
```

----------------------------------------

TITLE: Typing DOM Event Handlers with Explicit Event Type in TypeScript
DESCRIPTION: This TypeScript snippet shows how to explicitly type a DOM event handler's argument as 'Event'. It also demonstrates using a type assertion ('as HTMLInputElement') to correctly access properties like 'value' on 'event.target', ensuring robust type safety and preventing potential runtime errors.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_21

LANGUAGE: TypeScript
CODE:
```
function handleChange(event: Event) {
  console.log((event.target as HTMLInputElement).value)
}
```

----------------------------------------

TITLE: Type Definition for toRefs() in TypeScript
DESCRIPTION: Defines the TypeScript signature for the `toRefs()` function. It shows how the function transforms a generic object `T` into a new object where each property `K` is a `ToRef` of the original property's type, ensuring that existing `Ref` types are preserved and other types are wrapped in `Ref<T>`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
function toRefs<T extends object>(
  object: T
): {
  [K in keyof T]: ToRef<T[K]>
}

type ToRef = T extends Ref ? T : Ref<T>
```

----------------------------------------

TITLE: Displaying Todo Item Text in Vue.js Template
DESCRIPTION: This snippet illustrates how to display the 'text' property of a 'todo' object within a Vue.js template using mustache syntax. It's a fundamental example of one-way data binding, where the component's data is rendered into the DOM.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/App/template.html#_snippet_0

LANGUAGE: Vue.js Template
CODE:
```
{{ todo.text }}
```

----------------------------------------

TITLE: Basic Conditional Rendering with `v-if` in Vue.js
DESCRIPTION: This code shows the basic usage of the `v-if` directive. The `<h1>` element will only be rendered in the DOM if the directive's expression (`awesome`) evaluates to a truthy value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_1

LANGUAGE: Vue.js
CODE:
```
<h1 v-if="awesome">Vue is awesome!</h1>
```

----------------------------------------

TITLE: Using `ref` in `v-for` with `useTemplateRef` (Vue 3.5+ Composition API)
DESCRIPTION: This snippet demonstrates how to use `ref` inside a `v-for` loop with the `useTemplateRef` helper, introduced in Vue 3.5+. The `itemRefs` ref will automatically be populated as an array with the DOM elements after the component mounts. It requires `ref`, `useTemplateRef`, and `onMounted` from Vue.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_11

LANGUAGE: Vue
CODE:
```
<script setup>
import { ref, useTemplateRef, onMounted } from 'vue'

const list = ref([
  /* ... */
])

const itemRefs = useTemplateRef('items')

onMounted(() => console.log(itemRefs.value))
</script>

<template>
  <ul>
    <li v-for="item in list" ref="items">
      {{ item }}
    </li>
  </ul>
</template>
```

----------------------------------------

TITLE: Using JavaScript Expressions in Vue.js Templates
DESCRIPTION: Illustrates various ways to use full JavaScript expressions directly within Vue.js templates, including arithmetic operations, ternary conditionals, string manipulation, and template literals for dynamic attribute values.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_10

LANGUAGE: vue-html
CODE:
```
{{ number + 1 }}

{{ ok ? 'YES' : 'NO' }}

{{ message.split('').reverse().join('') }}

<div :id="`list-${id}`"></div>
```

----------------------------------------

TITLE: Using computed() in Vue Composition API (SFC)
DESCRIPTION: This JavaScript snippet demonstrates the use of `computed()` from Vue's Composition API to create a reactive `filteredTodos` ref. It depends on `todos.value` and `hideCompleted.value` and automatically updates when these dependencies change.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_3

LANGUAGE: js
CODE:
```
import { ref, computed } from 'vue'

const hideCompleted = ref(false)
const todos = ref([
  /* ... */
])

const filteredTodos = computed(() => {
  // return filtered todos based on
  // `todos.value` & `hideCompleted.value`
})
```

----------------------------------------

TITLE: Typing Component Emits in Vue 3 `<script setup>`
DESCRIPTION: This snippet demonstrates various ways to type component emits within a Vue 3 `<script setup>` block. It covers runtime declaration (array and object syntax) and type-based declaration (call signatures and succinct tuple syntax for Vue 3.3+), offering flexible options for event validation and type checking.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_10

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
// runtime
const emit = defineEmits(['change', 'update'])

// options based
const emit = defineEmits({
  change: (id: number) => {
    // return `true` or `false` to indicate
    // validation pass / fail
  },
  update: (value: string) => {
    // return `true` or `false` to indicate
    // validation pass / fail
  }
})

// type-based
const emit = defineEmits<{
  (e: 'change', id: number): void
  (e: 'update', value: string): void
}>()

// 3.3+: alternative, more succinct syntax
const emit = defineEmits<{
  change: [id: number]
  update: [value: string]
}>()
</script>
```

----------------------------------------

TITLE: Conditionally Applying Class in Array Binding (Vue-HTML)
DESCRIPTION: This snippet shows how to conditionally include a class within an array binding using a ternary expression. The `activeClass` will only be applied if `isActive` is truthy, while `errorClass` is always applied.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_5

LANGUAGE: vue-html
CODE:
```
<div :class="[isActive ? activeClass : '', errorClass]"></div>
```

----------------------------------------

TITLE: Typing `ref()` with Generic Argument in Vue 3
DESCRIPTION: This snippet shows how to override the default type inference of `ref()` by passing a generic argument. This method explicitly defines the ref's inner value type, allowing for type flexibility, such as union types, directly at the point of creation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
// resulting type: Ref<string | number>
const year = ref<string | number>('2020')

year.value = 2020 // ok!
```

----------------------------------------

TITLE: Using Dynamic Components with Options API in Vue.js
DESCRIPTION: This snippet demonstrates how to dynamically render components using the <component> element and the 'is' attribute within the Vue.js Options API. The 'currentTab' variable determines which component is rendered, enabling flexible UI patterns like tabbed interfaces.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_27

LANGUAGE: vue-html
CODE:
```
<!-- Component changes when currentTab changes -->
<component :is="currentTab"></component>
```

----------------------------------------

TITLE: Inefficient Prop Passing in Vue v-for (active-id)
DESCRIPTION: This Vue HTML snippet demonstrates an inefficient pattern for passing props within a `v-for` loop. When `activeId` changes, every `<ListItem>` component in the list receives a new `active-id` prop, forcing all of them to re-render, even if their individual active status has not changed, leading to unnecessary updates.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_2

LANGUAGE: vue-html
CODE:
```
<ListItem
  v-for="item in list"
  :id="item.id"
  :active-id="activeId" />
```

----------------------------------------

TITLE: Using Multiple v-model Bindings in Vue.js Template
DESCRIPTION: This snippet demonstrates how to bind multiple `v-model` directives to a single component instance in a Vue.js template. Each `v-model` targets a specific prop (e.g., `first-name`, `last-name`) and automatically syncs its value with the corresponding data property in the parent component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_20

LANGUAGE: vue-html
CODE:
```
<UserName
  v-model:first-name="first"
  v-model:last-name="last"
/>
```

----------------------------------------

TITLE: Providing Read-Only Reactive State in Vue Composition API
DESCRIPTION: This Vue Composition API snippet demonstrates how to provide a reactive value that cannot be mutated by injecting components. It uses `readonly()` to wrap a `ref` before providing it, ensuring immutability for the consumer. This is useful for enforcing one-way data flow.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_15

LANGUAGE: Vue
CODE:
```
<script setup>
import { ref, provide, readonly } from 'vue'

const count = ref(0)
provide('read-only-count', readonly(count))
</script>
```

----------------------------------------

TITLE: Passing Dynamic Boolean Props - Vue HTML
DESCRIPTION: Demonstrates dynamically assigning a boolean prop (`is-published`) to the value of a JavaScript variable (`post.isPublished`). This allows the boolean prop to be reactive.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_24

LANGUAGE: vue-html
CODE:
```
<!-- Dynamically assign to the value of a variable. -->
<BlogPost :is-published="post.isPublished" />
```

----------------------------------------

TITLE: Injecting and Mutating Provided State in Vue Composition API
DESCRIPTION: This Vue Composition API snippet shows how an injector component consumes the reactive state and mutation function provided by an ancestor. It uses `inject` to retrieve `location` and `updateLocation`, allowing the component to display the location and trigger its update via a button click.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_14

LANGUAGE: Vue
CODE:
```
<!-- in injector component -->
<script setup>
import { inject } from 'vue'

const { location, updateLocation } = inject('location')
</script>

<template>
  <button @click="updateLocation">{{ location }}</button>
</template>
```

----------------------------------------

TITLE: Correct vs. Incorrect Textarea Binding in Vue.js
DESCRIPTION: This snippet contrasts the incorrect and correct methods for binding a `<textarea>` element in Vue.js. Direct interpolation (`{{ text }}`) inside `<textarea>` is ineffective for two-way binding; `v-model` is the correct and recommended approach to ensure proper synchronization of content.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_5

LANGUAGE: Vue.js
CODE:
```
<!-- bad -->
<textarea>{{ text }}</textarea>
```

LANGUAGE: Vue.js
CODE:
```
<!-- good -->
<textarea v-model="text"></textarea>
```

----------------------------------------

TITLE: Declaring Reactive State with Options API in Vue.js
DESCRIPTION: This snippet demonstrates how to declare reactive state using the `data` option in Vue's Options API. The `data` option is a function that returns an object, whose top-level properties become reactive and are proxied onto the component instance (`this`). It also shows how to access and mutate these reactive properties within a lifecycle hook like `mounted`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default {
  data() {
    return {
      count: 1
    }
  },

  // `mounted` is a lifecycle hook which we will explain later
  mounted() {
    // `this` refers to the component instance.
    console.log(this.count) // => 1

    // data can be mutated as well
    this.count = 2
  }
}
```

----------------------------------------

TITLE: Providing Reactive State with Mutation Function in Vue Composition API
DESCRIPTION: This Vue Composition API snippet demonstrates how to provide reactive state along with a function to mutate that state. It uses `ref` to create a reactive `location` variable and `provide` to make `location` and `updateLocation` available to descendant components. This pattern centralizes state mutations within the provider.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_13

LANGUAGE: Vue
CODE:
```
<!-- inside provider component -->
<script setup>
import { provide, ref } from 'vue'

const location = ref('North Pole')

function updateLocation() {
  location.value = 'South Pole'
}

provide('location', {
  location,
  updateLocation
})
</script>
```

----------------------------------------

TITLE: Defining Refs for Template Unwrapping Example - JavaScript
DESCRIPTION: This snippet defines two variables, `count` as a top-level `ref` and `object` containing a nested `ref` (`object.id`). These variables are used to illustrate the behavior of ref unwrapping in Vue templates.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_28

LANGUAGE: js
CODE:
```
const count = ref(0)
const object = { id: ref(1) }
```

----------------------------------------

TITLE: Declaring Default Props with `withDefaults` in TypeScript
DESCRIPTION: This snippet demonstrates how to declare default values for props when using type-based declarations in Vue.js 3.4 and below, utilizing the `withDefaults` compiler macro. It shows defining an interface for props and then applying default values to optional properties, ensuring type checks and proper type inference for the returned props.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_15

LANGUAGE: TypeScript
CODE:
```
interface Props {
  msg?: string
  labels?: string[]
}

const props = withDefaults(defineProps<Props>(), {
  msg: 'hello',
  labels: () => ['one', 'two']
})
```

----------------------------------------

TITLE: Declaring Props with Validation in Vue.js Component
DESCRIPTION: This JavaScript example shows an object-based declaration of props, including type checking and advanced validation rules. It defines `height` as a `Number` and `age` with a default value, required status, and a custom validator function to ensure it's non-negative.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_5

LANGUAGE: js
CODE:
```
export default {
    props: {
      // type check
      height: Number,
      // type check plus other validations
      age: {
        type: Number,
        default: 0,
        required: true,
        validator: (value) => {
          return value >= 0
        }
      }
    }
  }
```

----------------------------------------

TITLE: Listening to Child Events (Vue HTML Template)
DESCRIPTION: This snippet shows how a parent component listens to an event emitted by a child component in a standard HTML context. It uses `v-on` (shorthand `@`) on the `child-comp` element to capture the 'response' event and update a local state variable `childMsg` with the event's argument.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_4

LANGUAGE: Vue-HTML
CODE:
```
<child-comp @response="(msg) => childMsg = msg"></child-comp>
```

----------------------------------------

TITLE: Watching a Ref with Composition API (JavaScript)
DESCRIPTION: This snippet demonstrates how to use the `watch()` function from Vue's Composition API to react to changes in a `ref`. It watches the `count` ref and logs its new value to the console whenever it changes, illustrating a basic side effect.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-10/description.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { ref, watch } from 'vue'

const count = ref(0)

watch(count, (newCount) => {
  // yes, console.log() is a side effect
  console.log(`new count is: ${newCount}`)
})
```

----------------------------------------

TITLE: Rendering a Scoped Slot in Vue.js
DESCRIPTION: This snippet shows the internal implementation of the `<FancyList>` component, specifically how it renders a named scoped slot. It iterates over an `items` array and passes each `item` object as slot props to the `item` slot using `v-bind`, making the item data available to the parent component's slot content.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_32

LANGUAGE: vue-html
CODE:
```
<ul>
  <li v-for="item in items">
    <slot name="item" v-bind="item"></slot>
  </li>
</ul>
```

----------------------------------------

TITLE: Good: Decomposed Price Calculation in Vue Composition API
DESCRIPTION: This snippet demonstrates the recommended approach of breaking down a complex price calculation into distinct, focused computed properties (basePrice, discount, finalPrice) using Vue's Composition API. This enhances code clarity, modularity, and ease of testing.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_58

LANGUAGE: js
CODE:
```
const basePrice = computed(
  () => manufactureCost.value / (1 - profitMargin.value)
)

const discount = computed(
  () => basePrice.value * (discountPercent.value || 0)
)

const finalPrice = computed(() => basePrice.value - discount.value)
```

----------------------------------------

TITLE: Providing Data with Symbol Key in Vue Composition API
DESCRIPTION: This Vue Composition API snippet illustrates how to use a Symbol as an injection key when providing data. By importing `myInjectionKey` (a Symbol) and passing it to `provide()`, the component ensures a unique and collision-free key for the provided data, improving maintainability in complex applications.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
// in provider component
import { provide } from 'vue'
import { myInjectionKey } from './keys.js'

provide(myInjectionKey, {
  /* data to provide */
})
```

----------------------------------------

TITLE: Defining a Vue Component (SFC - Options API)
DESCRIPTION: This snippet demonstrates how to define a basic Vue component using the Options API within a Single-File Component (SFC). It initializes a 'count' data property and displays it in a button that increments the count on click.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script>
export default {
  data() {
    return {
      count: 0
    }
  }
}
</script>

<template>
  <button @click="count++">You clicked me {{ count }} times.</button>
</template>
```

----------------------------------------

TITLE: Using onMounted Hook in Composition API (SFC)
DESCRIPTION: This JavaScript snippet illustrates how to use the `onMounted` lifecycle hook in a Vue Single File Component (SFC) with the Composition API. The `onMounted` function registers a callback that will be executed after the component has been mounted to the DOM, making template refs accessible for direct DOM manipulation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_3

LANGUAGE: js
CODE:
```
import { onMounted } from 'vue'

onMounted(() => {
  // component is now mounted.
})
```

----------------------------------------

TITLE: Defining a Vue.js Plugin Object (JavaScript)
DESCRIPTION: Shows the basic structure of a Vue.js plugin defined as an object that exposes an `install()` method. The install function receives the app instance and optional options.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_1

LANGUAGE: js
CODE:
```
const myPlugin = {
  install(app, options) {
    // configure the app
  }
}
```

----------------------------------------

TITLE: Declaring and Emitting Events (Options API)
DESCRIPTION: This snippet illustrates event declaration and emission using the Options API. The `emits` option declares the 'response' event, and `this.$emit()` is used within the `created` lifecycle hook to dispatch the event with an argument.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
export default {
  // declare emitted events
  emits: ['response'],
  created() {
    // emit with argument
    this.$emit('response', 'hello from child')
  }
}
```

----------------------------------------

TITLE: Setting Default Values for Injections (Composition API)
DESCRIPTION: This snippet demonstrates how to provide a default value to `inject()` in the Composition API, which is used if the specified key is not found in the parent chain. It also shows using a factory function as a default for expensive computations or non-primitive values, indicated by a third `true` parameter.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_11

LANGUAGE: js
CODE:
```
// `value` will be "default value"
// if no data matching "message" was provided
const value = inject('message', 'default value')

const value = inject('key', () => new ExpensiveClass(), true)
```

----------------------------------------

TITLE: Vue.js Counter Template Structure
DESCRIPTION: This HTML snippet defines the user interface for the counter. It displays the current 'count' value using Vue's interpolation syntax ('{{ count }}') and includes a button that triggers the 'increment' method when clicked, demonstrating basic event binding ('@click'). The entire application is contained within the '#app' div.
SOURCE: https://github.com/vuejs/docs/blob/main/src/examples/src/counter/description.txt#_snippet_1

LANGUAGE: HTML
CODE:
```
<div id="app">
  <p>{{ count }}</p>
  <button @click="increment">Count</button>
</div>
```

----------------------------------------

TITLE: Passing Rich HTML Content and Components to a Vue Component Slot (Vue HTML)
DESCRIPTION: This example demonstrates the flexibility of Vue.js slots by passing not just text, but rich HTML content (a styled <span>) and another Vue component (<AwesomeIcon>) as slot content to the <FancyButton>. This shows that slots can accept any valid template fragment, enabling complex and dynamic content injection into reusable components.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_4

LANGUAGE: vue-html
CODE:
```
<FancyButton>
  <span style="color:red">Click me!</span>
  <AwesomeIcon name="plus" />
</FancyButton>
```

----------------------------------------

TITLE: Bad Example: Mixed SFC Top-Level Element Order Across Components
DESCRIPTION: This example demonstrates inconsistent ordering of top-level elements (`<script>`, `<template>`, `<style>`) across multiple Vue Single-File Components (SFCs). While ComponentA follows a common pattern, ComponentB deviates by placing `<template>` before `<script>`, which can lead to confusion and reduced maintainability in larger projects.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#_snippet_5

LANGUAGE: vue-html
CODE:
```
<!-- ComponentA.vue -->
<script>/* ... */</script>
<template>...</template>
<style>/* ... */</style>

<!-- ComponentB.vue -->
<template>...</template>
<script>/* ... */</script>
<style>/* ... */</style>
```

----------------------------------------

TITLE: Side Effect Cleanup with onWatcherCleanup (Vue 3.5+) in Vue.js watchEffect()
DESCRIPTION: Introduced in Vue 3.5+, this example shows the `onWatcherCleanup` API for registering cleanup callbacks within `watchEffect`. Similar to `onCleanup`, it ensures that the provided `cancel` function is called before the effect re-runs or is stopped, facilitating proper resource management for asynchronous operations.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
import { onWatcherCleanup } from 'vue'

watchEffect(async () => {
  const { response, cancel } = doAsyncWork(newId)
  // `cancel` will be called if `id` changes, cancelling
  // the previous request if it hasn't completed yet
  onWatcherCleanup(cancel)
  data.value = await response
})
```

----------------------------------------

TITLE: Using onMounted Hook in Composition API (Global)
DESCRIPTION: This JavaScript snippet shows how to use the `onMounted` lifecycle hook within the `setup()` function of a Vue component using the Composition API in a global or non-SFC context. The callback provided to `onMounted` executes once the component is fully mounted, allowing for DOM interactions or other post-mount logic.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_4

LANGUAGE: js
CODE:
```
import { onMounted } from 'vue'

createApp({
  setup() {
    onMounted(() => {
      // component is now mounted.
    })
  }
})
```

----------------------------------------

TITLE: Defining a Vue SFC with Options API
DESCRIPTION: This snippet demonstrates a Vue Single-File Component (SFC) using the Options API. It encapsulates the component's JavaScript logic (data property), HTML template, and CSS styling within a single `.vue` file, promoting colocation of related concerns for a 'Hello World!' greeting.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/sfc.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script>
export default {
  data() {
    return {
      greeting: 'Hello World!'
    }
  }
}
</script>

<template>
  <p class="greeting">{{ greeting }}</p>
</template>

<style>
.greeting {
  color: red;
  font-weight: bold;
}
</style>
```

----------------------------------------

TITLE: Passing Destructured Props to External Functions - JavaScript
DESCRIPTION: Illustrates how to pass a destructured prop to an external composable or function while retaining its reactivity. The external function can then use the getter to track changes, potentially with `toValue`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_12

LANGUAGE: js
CODE:
```
useComposable(() => foo)
```

----------------------------------------

TITLE: Registering Template Ref in Composition API with Vue
DESCRIPTION: In the Composition API, the `ref` attribute registers a template reference that is then stored in a ref variable declared in the `<script setup>` block. This provides a reactive way to access the underlying DOM element or component instance, aligning with the Composition API's reactive paradigm.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_3

LANGUAGE: vue
CODE:
```
<script setup>
import { useTemplateRef } from 'vue'

const pRef = useTemplateRef('p')
</script>

<template>
  <p ref="p">hello</p>
</template>
```

----------------------------------------

TITLE: Implementing `v-model` Manually in Custom Component (Options API)
DESCRIPTION: This snippet shows how to manually implement `v-model` functionality in a custom component using the Options API. It defines `modelValue` as a prop and `update:modelValue` as an emitted event, binding them to a native input.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_13

LANGUAGE: vue
CODE:
```
<!-- CustomInput.vue -->
<script>
export default {
  props: ['modelValue'],
  emits: ['update:modelValue']
}
</script>

<template>
  <input
    :value="modelValue"
    @input="$emit('update:modelValue', $event.target.value)"
  />
</template>
```

----------------------------------------

TITLE: Implementing Global Property in Vue.js Plugin (JavaScript)
DESCRIPTION: Demonstrates how to add a globally available method (`$translate`) to the Vue app instance by attaching it to `app.config.globalProperties` within the plugin's install function. It includes logic to look up nested properties in the options object.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_4

LANGUAGE: js
CODE:
```
// plugins/i18n.js
export default {
  install: (app, options) => {
    // inject a globally available $translate() method
    app.config.globalProperties.$translate = (key) => {
      // retrieve a nested property in `options`
      // using `key` as the path
      return key.split('.').reduce((o, i) => {
        if (o) return o[i]
      }, options)
    }
  }
}
```

----------------------------------------

TITLE: Explicitly Annotating Computed Property Types in Vue Options API (TypeScript)
DESCRIPTION: This example demonstrates how to explicitly annotate the return type of a computed property, which can be useful for ensuring correctness or in cases where type inference might fail. It also shows how to annotate a writable computed property with both `get` and `set` methods, ensuring type safety for both reading and writing operations.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
import { defineComponent } from 'vue'

export default defineComponent({
  data() {
    return {
      message: 'Hello!'
    }
  },
  computed: {
    // explicitly annotate return type
    greeting(): string {
      return this.message + '!'
    },

    // annotating a writable computed property
    greetingUppercased: {
      get(): string {
        return this.greeting.toUpperCase()
      },
      set(newValue: string) {
        this.message = newValue.toUpperCase()
      }
    }
  }
})
```

----------------------------------------

TITLE: Specifying Target Container for Teleport in Vue.js
DESCRIPTION: These examples show various ways to specify the target container for `<Teleport>` using the `to` prop. Targets can be identified by ID (`#some-id`), class (`.some-class`), or attribute selectors (`[data-teleport]`).
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_17

LANGUAGE: Vue HTML
CODE:
```
<Teleport to="#some-id" />
<Teleport to=".some-class" />
<Teleport to="[data-teleport]" />
```

----------------------------------------

TITLE: Defining a Reactive Reference with ref() in TypeScript
DESCRIPTION: This TypeScript type definition shows the signature for the `ref()` function, which takes a value of type `T` and returns a `Ref` object. The `Ref` interface itself defines a `value` property of type `T`, indicating how the inner value is accessed.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
function ref<T>(value: T): Ref<UnwrapRef<T>>

interface Ref<T> {
  value: T
}
```

----------------------------------------

TITLE: Declaring Methods in Vue Options API
DESCRIPTION: This snippet demonstrates how to declare methods within a Vue component using the `methods` option in the Options API. Vue automatically binds `this` to the component instance, allowing methods to be called from lifecycle hooks or other methods, ensuring correct context.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      this.count++
    }
  },
  mounted() {
    // methods can be called in lifecycle hooks, or other methods!
    this.increment()
  }
}
```

----------------------------------------

TITLE: Template Unwrapping After Destructuring - Vue HTML
DESCRIPTION: This template expression, following the destructuring of `id`, now correctly unwraps the `ref`. The expression `id + 1` will evaluate to `2`, demonstrating successful unwrapping when the ref is a top-level property.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_32

LANGUAGE: vue-html
CODE:
```
{{ id + 1 }}
```

----------------------------------------

TITLE: Creating Vue App with ES Module Build (Composition API)
DESCRIPTION: This example demonstrates using Vue from a CDN as an ES module with the Composition API. It imports 'createApp' and 'ref' directly, setting up a reactive message and mounting the application.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_8

LANGUAGE: html
CODE:
```
<div id="app">{{ message }}</div>

<script type="module">
  import { createApp, ref } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'

  createApp({
    setup() {
      const message = ref('Hello Vue!')
      return {
        message
      }
    }
  }).mount('#app')
</script>
```

----------------------------------------

TITLE: Watching Reactive State Changes with watch - Vue.js JavaScript
DESCRIPTION: This Vue.js component snippet illustrates how to use the `watch` function to react to changes in a reactive source, in this case, the `count` ref. The callback function receives the new and old values of the watched source.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_8

LANGUAGE: JavaScript
CODE:
```
import { watch } from 'vue'

export default {
  setup() {
    const count = ref(0)
    watch(count, (newCount, oldCount) => {
      console.log(`Count changed from ${oldCount} to ${newCount}`)
    })
    return { count }
  }
}
```

----------------------------------------

TITLE: Implementing Conditional Watch Logic for Async Data - Composition API
DESCRIPTION: Provides an example of implementing conditional logic within a `watchEffect` to handle asynchronously loaded data in the Composition API. Instead of creating watchers asynchronously, this pattern ensures the watch logic only executes once the required data is available, preventing unnecessary executions.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_34

LANGUAGE: js
CODE:
```
// data to be loaded asynchronously
const data = ref(null)

watchEffect(() => {
  if (data.value) {
    // do something when data is loaded
  }
})
```

----------------------------------------

TITLE: Transforming Prop Value with Computed Property in Vue Options API
DESCRIPTION: This snippet demonstrates how to transform a prop (`size`) into a derived value using a `computed` property within the Options API. The `normalizedSize` computed property will automatically update whenever the `size` prop changes, ensuring the derived value is always current.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_38

LANGUAGE: js
CODE:
```
export default {
  props: ['size'],
  computed: {
    // computed property that auto-updates when the prop changes
    normalizedSize() {
      return this.size.trim().toLowerCase()
    }
  }
}
```

----------------------------------------

TITLE: Avoiding Redundant Closing Tags in SFCs, String Templates, and JSX (Bad)
DESCRIPTION: This snippet demonstrates an incorrect way to define components in Single-File Components, string templates, or JSX. Components with no content should be self-closing to improve code cleanliness and communicate their intended lack of content. Using an explicit closing tag here is unnecessary.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_20

LANGUAGE: vue-html
CODE:
```
<!-- In Single-File Components, string templates, and JSX -->
<MyComponent></MyComponent>
```

----------------------------------------

TITLE: Initializing Array for Multiple Checkboxes in Vue.js (Composition API)
DESCRIPTION: This JavaScript snippet, intended for Vue 3's Composition API, initializes a reactive `ref` named `checkedNames` as an empty array. This array will be used to store the values of multiple selected checkboxes, allowing for binding a group of checkboxes to a single array.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_7

LANGUAGE: js
CODE:
```
const checkedNames = ref([])
```

----------------------------------------

TITLE: Implementing Mouse Tracking with a Renderless Component (Vue.js)
DESCRIPTION: This snippet demonstrates how to use a renderless component, `<MouseTracker>`, to encapsulate mouse position tracking logic. It utilizes a scoped slot to expose `x` and `y` coordinates to the consumer component, which then renders the visual output. This pattern allows for logic reuse without coupling to specific UI elements.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_33

LANGUAGE: vue-html
CODE:
```
<MouseTracker v-slot="{ x, y }">
  Mouse is at: {{ x }}, {{ y }}
</MouseTracker>
```

----------------------------------------

TITLE: Using Multi-Word Component Names (Good Practice) - Vue.js
DESCRIPTION: This snippet illustrates the recommended practice of using multi-word component names in Vue.js templates. This prevents conflicts with HTML elements and improves readability.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_1

LANGUAGE: vue-html
CODE:
```
<!-- in pre-compiled templates -->
<TodoItem />

<!-- in in-DOM templates -->
<todo-item></todo-item>
```

----------------------------------------

TITLE: Accessing Template Ref with Composition API (Vue 3.5+)
DESCRIPTION: This Vue Composition API snippet shows how to access a template ref using the `useTemplateRef()` helper (available in Vue 3.5+). It imports `useTemplateRef` and `onMounted`, declares a ref named 'input' matching 'my-input' in the template, and then focuses the input element once the component is mounted, accessing the DOM element via `input.value`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<script setup>
import { useTemplateRef, onMounted } from 'vue'

// the first argument must match the ref value in the template
const input = useTemplateRef('my-input')

onMounted(() => {
  input.value.focus()
})
</script>

<template>
  <input ref="my-input" />
</template>
```

----------------------------------------

TITLE: Configuring App-Level Error Handler (JavaScript)
DESCRIPTION: Shows how to define a global error handler for a Vue application using `app.config.errorHandler`. This function will be called for errors originating from any descendant component, allowing centralized error management and reporting across the entire application.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_6

LANGUAGE: js
CODE:
```
app.config.errorHandler = (err) => {
  /* handle error */
}
```

----------------------------------------

TITLE: Validating Emitted Events with emits Object Syntax (Options API)
DESCRIPTION: This snippet demonstrates adding validation logic to emitted events using the object syntax for the `emits` option in the Options API. The 'submit' event's validation function checks its payload and returns a boolean indicating validity. It also shows how to dispatch the event using `this.$emit`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_19

LANGUAGE: js
CODE:
```
export default {
  emits: {
    // No validation
    click: null,

    // Validate submit event
    submit: ({ email, password }) => {
      if (email && password) {
        return true
      } else {
        console.warn('Invalid submit event payload!')
        return false
      }
    }
  },
  methods: {
    submitForm(email, password) {
      this.$emit('submit', { email, password })
    }
  }
}
```

----------------------------------------

TITLE: Using v-model with Argument in Vue.js Parent Component
DESCRIPTION: This snippet demonstrates how to use `v-model` with a custom argument, `title`, on a component in a parent template. Instead of the default `modelValue`, the component will receive `title` as a prop and expect an `update:title` event.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_15

LANGUAGE: vue-html
CODE:
```
<MyComponent v-model:title="bookTitle" />
```

----------------------------------------

TITLE: Using v-bind Shorthand for Attribute Binding in Vue.js
DESCRIPTION: This example shows the shorthand syntax for the `v-bind` directive, where `:id` is equivalent to `v-bind:id`. This concise notation is commonly used in Vue.js templates to bind HTML attributes to reactive data properties, improving readability and reducing boilerplate.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_4

LANGUAGE: vue-html
CODE:
```
<div :id="dynamicId"></div>
```

----------------------------------------

TITLE: Declaring Props with TypeScript Type Annotations in Vue SFCs
DESCRIPTION: This snippet demonstrates declaring props using pure TypeScript type annotations within a `<script setup lang="ts">` block. This method provides strong type checking for props like `title` (optional string) and `likes` (optional number), enhancing developer experience and code reliability.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_6

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
defineProps<{
  title?: string
  likes?: number
}>()
</script>
```

----------------------------------------

TITLE: Unsanitized URL Binding in Vue.js (vue-html)
DESCRIPTION: This snippet demonstrates a potential URL injection vulnerability where a user-provided URL is directly bound to an anchor tag's `href` attribute without sanitization. This can lead to JavaScript execution via `javascript:` URLs, enabling XSS attacks. User-provided URLs should always be sanitized on the backend.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_8

LANGUAGE: vue-html
CODE:
```
<a :href="userProvidedUrl">
  click me
</a>
```

----------------------------------------

TITLE: Handling Native Event in Vue.js Options API
DESCRIPTION: This JavaScript snippet defines a 'warn' method within the 'methods' option of a Vue.js component using the Options API. It takes a 'message' and an 'event' object. If an 'event' is present, it invokes 'event.preventDefault()' to prevent the default browser action before showing an alert. This is how to access and manipulate the native DOM event.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_11

LANGUAGE: js
CODE:
```
methods: {
  warn(message, event) {
    // now we have access to the native event
    if (event) {
      event.preventDefault()
    }
    alert(message)
  }
}
```

----------------------------------------

TITLE: Handling Loading and Error States for Async Components in Vue.js
DESCRIPTION: Shows how to configure `defineAsyncComponent` with advanced options to manage loading and error states. It includes `loadingComponent` with a `delay`, `errorComponent`, and a `timeout` for robust asynchronous component handling.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_5

LANGUAGE: js
CODE:
```
const AsyncComp = defineAsyncComponent({
  // the loader function
  loader: () => import('./Foo.vue'),

  // A component to use while the async component is loading
  loadingComponent: LoadingComponent,
  // Delay before showing the loading component. Default: 200ms.
  delay: 200,

  // A component to use if the load fails
  errorComponent: ErrorComponent,
  // The error component will be displayed if a timeout is
  // provided and exceeded. Default: Infinity.
  timeout: 3000
})
```

----------------------------------------

TITLE: Handling Event Argument in Composition API Function in Vue.js
DESCRIPTION: This JavaScript function, typical for the Composition API, demonstrates how to handle an event argument. The `increaseCount` function takes `n` as a parameter and updates a reactive `count` reference by adding `n` to its value, commonly used as an event handler.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
function increaseCount(n) {
  count.value += n
}
```

----------------------------------------

TITLE: Defining a Method in Vue.js Composition API
DESCRIPTION: This JavaScript snippet defines a 'say' function in the Vue.js Composition API. It takes a 'message' argument and displays it using an 'alert'. This function can be called directly from an inline handler in a Vue template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_6

LANGUAGE: js
CODE:
```
function say(message) {
  alert(message)
}
```

----------------------------------------

TITLE: Vue.js Component for Slide-Fade Transition
DESCRIPTION: This Vue.js HTML snippet illustrates the usage of a `<Transition>` component named "slide-fade" wrapping a conditional paragraph element. This setup allows for applying complex CSS animations to the paragraph when its `v-if` condition changes, enabling both sliding and fading effects.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_4

LANGUAGE: vue-html
CODE:
```
<Transition name="slide-fade">
  <p v-if="show">hello</p>
</Transition>
```

----------------------------------------

TITLE: Creating a Test Utility for Composables with Host Dependencies
DESCRIPTION: This JavaScript utility function, `withSetup`, creates a temporary Vue application instance to wrap and test composables that rely on lifecycle hooks or Provide/Inject. It mounts the app to a dummy div and returns the composable's result and the app instance for further testing.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_14

LANGUAGE: js
CODE:
```
// test-utils.js
import { createApp } from 'vue'

export function withSetup(composable) {
  let result
  const app = createApp({
    setup() {
      result = composable()
      // suppress missing template warning
      return () => {}
    }
  })
  app.mount(document.createElement('div'))
  // return the result and the app instance
  // for testing provide/unmount
  return [result, app]
}
```

----------------------------------------

TITLE: Watching Different Source Types in Vue.js (Composition API)
DESCRIPTION: Demonstrates how to use `watch` with various reactive sources: a single ref, a getter function combining multiple refs, and an array of multiple sources (refs and getters). The callback receives the new values of the watched sources.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_4

LANGUAGE: js
CODE:
```
const x = ref(0)
const y = ref(0)

// single ref
watch(x, (newX) => {
  console.log(`x is ${newX}`)
})

// getter
watch(
  () => x.value + y.value,
  (sum) => {
    console.log(`sum of x + y is: ${sum}`)
  }
)

// array of multiple sources
watch([x, () => y.value], ([newX, newY]) => {
  console.log(`x is ${newX} and y is ${newY}`)
})
```

----------------------------------------

TITLE: Using Child Component in Vue Template (SFC)
DESCRIPTION: Once a child component is imported and registered, this snippet illustrates how to render it within the parent component's template in a Single File Component (SFC). The component is used as a custom HTML tag, typically in PascalCase.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-11/description.md#_snippet_2

LANGUAGE: vue-html
CODE:
```
<ChildComp />
```

----------------------------------------

TITLE: Defining and Using Computed Property (Composition API SFC)
DESCRIPTION: This Vue Single File Component (SFC) demonstrates defining and using a computed property with the Composition API. It imports `reactive` and `computed`, initializes an `author` object, and then creates a `publishedBooksMessage` computed ref that automatically tracks changes to `author.books` and updates the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_5

LANGUAGE: vue
CODE:
```
<script setup>
import { reactive, computed } from 'vue'

const author = reactive({
  name: 'John Doe',
  books: [
    'Vue 2 - Advanced Guide',
    'Vue 3 - Basic Guide',
    'Vue 4 - The Mystery'
  ]
})

// a computed ref
const publishedBooksMessage = computed(() => {
  return author.books.length > 0 ? 'Yes' : 'No'
})
</script>

<template>
  <p>Has published books:</p>
  <span>{{ publishedBooksMessage }}</span>
</template>
```

----------------------------------------

TITLE: Defining an Async Setup Hook in Vue.js Composition API
DESCRIPTION: This snippet demonstrates how to make a Composition API component's `setup()` hook asynchronous. It uses `await` to fetch data, allowing the component to wait for the data to resolve before rendering. The fetched `posts` data is then returned for use in the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  async setup() {
    const res = await fetch(...)
    const posts = await res.json()
    return {
      posts
    }
  }
}
```

----------------------------------------

TITLE: Side Effect Cleanup with onCleanup in Vue.js watchEffect()
DESCRIPTION: This snippet demonstrates how to register a cleanup callback using the `onCleanup` function provided to the `watchEffect` callback. The `cleanupFn` (e.g., `cancel` for an async request) will be executed just before the effect re-runs or when the watcher is stopped, ensuring proper invalidation of previous side effects.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
watchEffect(async (onCleanup) => {
  const { response, cancel } = doAsyncWork(newId)
  // `cancel` will be called if `id` changes, cancelling
  // the previous request if it hasn't completed yet
  onCleanup(cancel)
  data.value = await response
})
```

----------------------------------------

TITLE: Defining a Simple Vue Composable (useCounter)
DESCRIPTION: This JavaScript snippet defines a `useCounter` composable that uses Vue's reactivity API (`ref`) to manage a `count` state and an `increment` function. It's an example of a composable that does not rely on a host component instance.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_12

LANGUAGE: js
CODE:
```
// counter.js
import { ref } from 'vue'

export function useCounter() {
  const count = ref(0)
  const increment = () => count.value++

  return {
    count,
    increment
  }
}
```

----------------------------------------

TITLE: Adding Elements to List (Composition API) - Vue.js
DESCRIPTION: This JavaScript snippet shows how to add a new item (`newTodo`) to a list using the `push` mutating method on a `ref` array (`todos.value`) in Vue's Composition API. This directly modifies the source array, triggering reactive updates in the rendered list.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#_snippet_1

LANGUAGE: js
CODE:
```
todos.value.push(newTodo)
```

----------------------------------------

TITLE: Displaying Reactive State from Composables in Vue.js Templates
DESCRIPTION: This Vue template demonstrates how to display reactive state, specifically `mouse.x` and `mouse.y`, obtained from a composable (e.g., `useMouse()`) within the template. It assumes the composable's return value has been wrapped with `reactive()` or is directly accessible as properties.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_15

LANGUAGE: Vue
CODE:
```
Mouse position is at: {{ mouse.x }}, {{ mouse.y }}
```

----------------------------------------

TITLE: Defining Post Data in Composition API
DESCRIPTION: This JavaScript snippet defines a reactive array of post objects using the 'ref' function in the Composition API. This 'posts' array is suitable for dynamic rendering and reactivity in a parent component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_14

LANGUAGE: js
CODE:
```
const posts = ref([
  { id: 1, title: 'My journey with Vue' },
  { id: 2, title: 'Blogging with Vue' },
  { id: 3, title: 'Why Vue is so fun' }
])
```

----------------------------------------

TITLE: Directly Watching a Reactive Object in Vue.js
DESCRIPTION: Explains that directly watching a reactive object automatically enables deep mode. The watcher triggers on any deep mutation to the `state` object without needing the `deep: true` option, simplifying reactivity for complex objects.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_26

LANGUAGE: javascript
CODE:
```
const state = reactive({ count: 0 })
watch(state, () => {
  /* triggers on deep mutation to state */
})
```

----------------------------------------

TITLE: Fetching Data with Vue.js `watch` and Explicit Source
DESCRIPTION: This example illustrates using the `watch` function to fetch data from an API whenever a reactive `todoId` changes. It explicitly watches `todoId` and uses `immediate: true` to run the callback on initial component setup, updating the `data` ref with the fetched JSON.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_15

LANGUAGE: js
CODE:
```
const todoId = ref(1)
const data = ref(null)

watch(
  todoId,
  async () => {
    const response = await fetch(
      `https://jsonplaceholder.typicode.com/todos/${todoId.value}`
    )
    data.value = await response.json()
  },
  { immediate: true }
)
```

----------------------------------------

TITLE: Emitting Custom Events in Vue.js (JavaScript)
DESCRIPTION: This example shows how to use this.$emit within a Vue component's created lifecycle hook to trigger custom events. It demonstrates emitting an event with no arguments and another with multiple additional arguments that will be passed to the event listener.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
export default {
  created() {
    // only event
    this.$emit('foo')
    // with additional arguments
    this.$emit('bar', 1, 2, 3)
  }
}
```

----------------------------------------

TITLE: Importing and Using a Component with Vue Composition API (`<script setup>`)
DESCRIPTION: This example illustrates importing and using a child component (ButtonCounter) with the Vue Composition API's <script setup> syntax. Components imported within <script setup> are automatically exposed to the template, simplifying the registration process.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_5

LANGUAGE: vue
CODE:
```
<script setup>
import ButtonCounter from './ButtonCounter.vue'
</script>

<template>
  <h1>Here is a child component!</h1>
  <ButtonCounter />
</template>
```

----------------------------------------

TITLE: Accessing `v-model` Modifiers with `defineModel` in JavaScript
DESCRIPTION: This snippet demonstrates how to destructure the return value of `defineModel()` to access `v-model` modifiers. It shows how to check for the presence of a specific modifier, such as `.trim`, allowing for conditional logic based on the applied modifiers.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
const [modelValue, modelModifiers] = defineModel()

// corresponds to v-model.trim
if (modelModifiers.trim) {
  // ...
}
```

----------------------------------------

TITLE: Accessing Global Store in Vue Composition API Component B
DESCRIPTION: Similar to ComponentA, this Vue component (Composition API, `<script setup>`) imports and displays the `count` from the shared `store`. This highlights how multiple components can independently access and react to changes in the same global state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_4

LANGUAGE: vue
CODE:
```
<!-- ComponentB.vue -->
<script setup>
import { store } from './store.js'
</script>

<template>From B: {{ store.count }}</template>
```

----------------------------------------

TITLE: Using Prop as Initial Value for Local State in Vue Composition API
DESCRIPTION: This snippet shows the recommended way to use a prop (`initialCounter`) as an initial value for a local reactive state (`counter`) in the Vue Composition API. The local state `counter` will not react to subsequent updates of `initialCounter`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_35

LANGUAGE: js
CODE:
```
const props = defineProps(['initialCounter'])

// counter only uses props.initialCounter as the initial value;
// it is disconnected from future prop updates.
const counter = ref(props.initialCounter)
```

----------------------------------------

TITLE: Component Scoped Styling with `scoped` Attribute in Vue.js
DESCRIPTION: This snippet shows how to use the `scoped` attribute on the `<style>` tag to limit CSS rules to the current component. This prevents style leakage and ensures component encapsulation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_18

LANGUAGE: vue-html
CODE:
```
<template>
  <button class="button button-close">×</button>
</template>
```

LANGUAGE: vue-html
CODE:
```
<style scoped>
.button {
  border: none;
  border-radius: 2px;
}

.button-close {
  background-color: red;
}
</style>
```

----------------------------------------

TITLE: Declaring Computed Property in Vue Options API (Global)
DESCRIPTION: This JavaScript snippet illustrates how to declare a `filteredTodos` computed property within the `computed` option when creating a Vue application globally using `createApp`. It's designed to filter todos based on `this.hideCompleted`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_2

LANGUAGE: js
CODE:
```
createApp({
  // ...
  computed: {
    filteredTodos() {
      // return filtered todos based on `this.hideCompleted`
    }
  }
})
```

----------------------------------------

TITLE: Binding Boolean Attributes with v-bind in Vue.js
DESCRIPTION: Explains how `v-bind` handles boolean attributes like `disabled`. The attribute is included if the bound value is truthy or an empty string, and omitted for falsy values.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_6

LANGUAGE: vue-html
CODE:
```
<button :disabled="isButtonDisabled">Button</button>
```

----------------------------------------

TITLE: Binding Dynamic Classes to Component (Vue.js)
DESCRIPTION: This snippet illustrates binding a dynamic class `active` to `MyComponent` using the `:class` directive. The `active` class will be applied to the component's root element only when the `isActive` data property is truthy.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_10

LANGUAGE: vue-html
CODE:
```
<MyComponent :class="{ active: isActive }" />
```

----------------------------------------

TITLE: Attaching Instructions via aria-describedby in Vue.js
DESCRIPTION: This snippet illustrates an alternative method for providing input instructions using `aria-describedby`. It links the input to a paragraph containing supplementary information, ensuring that details like format requirements are accessible to users without being part of the primary label.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_14

LANGUAGE: vue-html
CODE:
```
<fieldset>\
  <legend>Using aria-describedby</legend>\
  <label id=\"dob\" for=\"dob\">Date of Birth: </label>\
  <input type=\"date\" name=\"dob\" id=\"dob\" aria-describedby=\"dob-instructions\" />\
  <p id=\"dob-instructions\">MM/DD/YYYY</p>\
</fieldset>
```

----------------------------------------

TITLE: Passing Static Boolean Props (False) - Vue HTML
DESCRIPTION: Illustrates passing a static `false` boolean value to a prop (`is-published`) using `v-bind`. `v-bind` is required to treat `false` as a JavaScript boolean expression, not a string.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_23

LANGUAGE: vue-html
CODE:
```
<!-- Even though `false` is static, we need v-bind to tell Vue that -->
<!-- this is a JavaScript expression rather than a string.          -->
<BlogPost :is-published="false" />
```

----------------------------------------

TITLE: Rendering Lists with v-for in Vue.js
DESCRIPTION: This snippet demonstrates using the `v-for` directive to render a list of `todo` items from a `todos` array in Vue.js. Each list item is bound with a unique `key` attribute, `todo.id`, which helps Vue efficiently track and update elements. The `todo` variable is local to the `v-for` scope, similar to a function scope.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<ul>
  <li v-for="todo in todos" :key="todo.id">
    {{ todo.text }}
  </li>
</ul>
```

----------------------------------------

TITLE: Iterating Over an Array with v-for in Vue.js
DESCRIPTION: This snippet demonstrates the basic usage of the `v-for` directive to render a list of items from an array. It uses the `alias in expression` syntax to access each `item` within the loop.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_4

LANGUAGE: vue-html
CODE:
```
<div v-for="item in items">
  {{ item.text }}
</div>
```

----------------------------------------

TITLE: Consuming a Scoped Slot in Vue.js
DESCRIPTION: This snippet demonstrates how a parent component consumes a `<FancyList>` component and customizes the rendering of each list item using a scoped slot. The `item` slot receives `body`, `username`, and `likes` props from the child component, allowing the parent to define the item's visual structure.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_31

LANGUAGE: vue-html
CODE:
```
<FancyList :api-url="url" :per-page="10">
  <template #item="{ body, username, likes }">
    <div class="item">
      <p>{{ body }}</p>
      <p>by {{ username }} | {{ likes }} likes</p>
    </div>
  </template>
</FancyList>
```

----------------------------------------

TITLE: Applying aria-labelledby in Vue.js Forms
DESCRIPTION: This snippet demonstrates how to use the `aria-labelledby` attribute in a Vue.js form. It links the input's accessible name to visible label text and a heading by referencing their `id`s, improving accessibility for screen readers. The `v-model` directive is used for two-way data binding.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_9

LANGUAGE: vue-html
CODE:
```
<form\
  class=\"demo\"\
  action=\"/dataCollectionLocation\"\
  method=\"post\"\
  autocomplete=\"on\"\
>\
  <h1 id=\"billing\">Billing</h1>\
  <div class=\"form-item\">\
    <label for=\"name\">Name: </label>\
    <input\
      type=\"text\"\
      name=\"name\"\
      id=\"name\"\
      v-model=\"name\"\
      aria-labelledby=\"billing name\"\
    />\
  </div>\
  <button type=\"submit\">Submit</button>\
</form>
```

----------------------------------------

TITLE: Augmenting Component Instance Properties with ComponentCustomProperties in Vue.js (TypeScript)
DESCRIPTION: This example shows how to use ComponentCustomProperties to augment the component instance type, allowing the addition of custom global properties like $http and $translate. This enables TypeScript to recognize these properties on this within Vue components, improving type safety for global utilities.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import axios from 'axios'

declare module 'vue' {
  interface ComponentCustomProperties {
    $http: typeof axios
    $translate: (key: string) => string
  }
}
```

----------------------------------------

TITLE: Initializing Vue Application with Options API
DESCRIPTION: This JavaScript snippet demonstrates how to create and mount a basic Vue application using the Options API. It initializes an app instance, defines reactive data using the `data` option, and mounts it to an HTML element with the ID 'app'.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createApp } from 'vue'

createApp({
  data() {
    return {
      count: 0
    }
  }
}).mount('#app')
```

----------------------------------------

TITLE: Basic Vue SFC with Options API
DESCRIPTION: This snippet demonstrates a simple Vue Single-File Component (SFC) using the Options API. It defines a reactive `count` data property and displays it within a button that increments the count on click. The component also includes scoped CSS for styling the button.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_4

LANGUAGE: vue
CODE:
```
<script>
export default {
  data() {
    return {
      count: 0
    }
  }
}
</script>

<template>
  <button @click="count++">Count is: {{ count }}</button>
</template>

<style scoped>
button {
  font-weight: bold;
}
</style>
```

----------------------------------------

TITLE: Declaring Props in Vue Options API
DESCRIPTION: This snippet shows how to declare props using the `props` option in a Vue component following the Options API. Declared props, such as `foo`, are exposed directly on the component instance (`this`) and can be accessed in lifecycle hooks like `created()`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_2

LANGUAGE: js
CODE:
```
export default {
  props: ['foo'],
  created() {
    // props are exposed on `this`
    console.log(this.foo)
  }
}
```

----------------------------------------

TITLE: Defining Computed Property (Options API)
DESCRIPTION: This Vue Options API component defines a `publishedBooksMessage` computed property. It calculates whether the author has published books based on the `author.books` array length, providing a reactive and reusable way to derive data for the template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_3

LANGUAGE: js
CODE:
```
export default {
  data() {
    return {
      author: {
        name: 'John Doe',
        books: [
          'Vue 2 - Advanced Guide',
          'Vue 3 - Basic Guide',
          'Vue 4 - The Mystery'
        ]
      }
    }
  },
  computed: {
    // a computed getter
    publishedBooksMessage() {
      // `this` points to the component instance
      return this.author.books.length > 0 ? 'Yes' : 'No'
    }
  }
}
```

----------------------------------------

TITLE: Watching a Ref in Vue.js
DESCRIPTION: Illustrates watching a `ref` directly. The `watch()` callback is invoked whenever the `count` ref's value changes, providing both the current and previous values.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_23

LANGUAGE: javascript
CODE:
```
const count = ref(0)
watch(count, (count, prevCount) => {
  /* ... */
})
```

----------------------------------------

TITLE: Handling Native Event in Vue.js Composition API
DESCRIPTION: This JavaScript snippet defines a 'warn' function in the Vue.js Composition API. It accepts a 'message' and an 'event' object. If an 'event' is provided, it calls 'event.preventDefault()' to stop the default action before displaying an alert. This demonstrates how to interact with the native DOM event.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_10

LANGUAGE: js
CODE:
```
function warn(message, event) {
  // now we have access to the native event
  if (event) {
    event.preventDefault()
  }
  alert(message)
}
```

----------------------------------------

TITLE: Initializing Todo List Data (Options API) - Vue.js
DESCRIPTION: This snippet demonstrates how to initialize a list of todo items within the `data` option of a Vue.js component using the Options API. Each todo object includes an `id` and `text` property, which is crucial for using `key` with `v-for`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_8

LANGUAGE: js
CODE:
```
data() {
  return {
    todos: [
      {
        id: 1,
        text: 'Learn to use v-for'
      },
      {
        id: 2,
        text: 'Learn to use key'
      }
    ]
  }
}
```

----------------------------------------

TITLE: Nested List Rendering with `v-for` (Vue HTML)
DESCRIPTION: This Vue HTML snippet illustrates nested `v-for` directives, where an outer loop iterates over `items` and an inner loop iterates over `item.children`. It demonstrates how inner scopes can access properties from parent `v-for` scopes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_9

LANGUAGE: vue-html
CODE:
```
<li v-for="item in items">
  <span v-for="childItem in item.children">
    {{ item.message }} {{ childItem }}
  </span>
</li>
```

----------------------------------------

TITLE: Passing Static Object Props - Vue HTML
DESCRIPTION: Illustrates passing a static object literal as a prop (`author`) using `v-bind`. `v-bind` is crucial for Vue to parse the object as a JavaScript expression rather than a string.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_27

LANGUAGE: vue-html
CODE:
```
<!-- Even though the object is static, we need v-bind to tell Vue that -->
<!-- this is a JavaScript expression rather than a string.             -->
<BlogPost
  :author="{
    name: 'Veronica',
    company: 'Veridian Dynamics'
  }"
 />
```

----------------------------------------

TITLE: Client-Side Hydration for Interactive Vue SSR Apps
DESCRIPTION: This snippet illustrates the client-side hydration process for a Vue SSR application. Instead of `createApp()`, `createSSRApp()` is used to mount the application, which instructs Vue to re-use the pre-rendered HTML from the server and attach event listeners, making the application interactive without re-rendering the DOM. This is crucial for enabling dynamic behavior on the client after SSR.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_3

LANGUAGE: js
CODE:
```
// this runs in the browser.
import { createSSRApp } from 'vue'

const app = createSSRApp({
  // ...same app as on server
})

// mounting an SSR app on the client assumes
// the HTML was pre-rendered and will perform
// hydration instead of mounting new DOM nodes.
app.mount('#app')
```

----------------------------------------

TITLE: Binding Radio Buttons in Vue.js (Vue HTML)
DESCRIPTION: This Vue HTML snippet illustrates how to bind a group of radio buttons to a single data property (`picked`) using `v-model`. All radio buttons in the group share the same `v-model` binding but have unique `value` attributes. When a radio button is selected, its `value` is assigned to the `picked` property, and the `div` displays the currently selected value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_10

LANGUAGE: vue-html
CODE:
```
<div>Picked: {{ picked }}</div>

<input type="radio" id="one" value="One" v-model="picked" />
<label for="one">One</label>

<input type="radio" id="two" value="Two" v-model="picked" />
<label for="two">Two</label>
```

----------------------------------------

TITLE: Handling Multiple `v-model` Modifiers in Vue Options API
DESCRIPTION: This Vue Options API snippet demonstrates how to declare and access props for multiple `v-model` bindings with arguments and modifiers. It defines props for both the data (`firstName`, `lastName`) and their corresponding modifier objects (`firstNameModifiers`, `lastNameModifiers`), providing default empty objects for the modifiers and emitting `update` events.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_35

LANGUAGE: vue
CODE:
```
<script>
export default {
  props: {
    firstName: String,
    lastName: String,
    firstNameModifiers: {
      default: () => ({})
    },
    lastNameModifiers: {
      default: () => ({})
    }
  },
  emits: ['update:firstName', 'update:lastName'],
  created() {
    console.log(this.firstNameModifiers) // { capitalize: true }
    console.log(this.lastNameModifiers) // { uppercase: true }
  }
}
</script>
```

----------------------------------------

TITLE: Filtering Array with Computed Property in Vue.js Options API
DESCRIPTION: Demonstrates how to create a reactive, filtered version of an array using a `computed` property in Vue 2/3's Options API. The `evenNumbers` computed property returns a new array containing only even numbers from the `numbers` data property, ensuring the original data remains untouched.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_27

LANGUAGE: JavaScript
CODE:
```
data() {
  return {
    numbers: [1, 2, 3, 4, 5]
  }
},
computed: {
  evenNumbers() {
    return this.numbers.filter(n => n % 2 === 0)
  }
}
```

----------------------------------------

TITLE: Simple Expressions in Templates - Vue HTML
DESCRIPTION: Demonstrates the recommended practice of using simple, declarative expressions in templates, delegating complex logic to computed properties or methods for clarity.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_52

LANGUAGE: Vue HTML
CODE:
```
<!-- In a template -->
{{ normalizedFullName }}
```

----------------------------------------

TITLE: Importing a Vue SFC as a JavaScript Module
DESCRIPTION: This JavaScript snippet shows how a pre-compiled Vue Single-File Component (`.vue` file) can be imported and used as a standard ES module. It demonstrates registering `MyComponent` within another Vue component's `components` option, enabling modular and reusable component architecture.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/sfc.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import MyComponent from './MyComponent.vue'

export default {
  components: {
    MyComponent
  }
}
```

----------------------------------------

TITLE: Explicitly Rendering Unescaped HTML in Vue Template
DESCRIPTION: This Vue template snippet uses the `v-html` directive to explicitly render `userProvidedHtml` as raw HTML. This bypasses Vue's automatic escaping and should only be used when the HTML content is guaranteed to be safe and trusted, as it poses a significant risk of HTML injection (XSS) if untrusted input is used.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_5

LANGUAGE: vue-html
CODE:
```
<div v-html="userProvidedHtml"></div>
```

----------------------------------------

TITLE: Class Binding with Object Syntax in Vue.js
DESCRIPTION: This snippet shows how to dynamically toggle CSS classes using an object syntax with `v-bind:class`. The class `red` will be applied if `isRed` is true.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_15

LANGUAGE: vue-html
CODE:
```
<div :class="{ red: isRed }"></div>
```

----------------------------------------

TITLE: Defining a Symbol Injection Key in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates the recommended way to define and export a Symbol to be used as an injection key. Exporting Symbols from a dedicated file helps prevent naming collisions in large applications or shared component libraries, ensuring unique keys for dependency injection.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
// keys.js
export const myInjectionKey = Symbol()
```

----------------------------------------

TITLE: Good: Decomposed Price Calculation in Vue Options API
DESCRIPTION: This snippet illustrates the recommended practice of splitting a complex price calculation into multiple, simpler computed properties (basePrice, discount, finalPrice) in Vue's Options API. This improves readability, testability, and adaptability to changing requirements.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_57

LANGUAGE: js
CODE:
```
computed: {
  basePrice() {
    return this.manufactureCost / (1 - this.profitMargin)
  },

  discount() {
    return this.basePrice * (this.discountPercent || 0)
  },

  finalPrice() {
    return this.basePrice - this.discount
  }
}
```

----------------------------------------

TITLE: Typing `reactive()` with Inferred Types in Vue 3
DESCRIPTION: This snippet illustrates how `reactive()` implicitly infers the type of the reactive object from its argument. It shows a basic object being made reactive, with TypeScript automatically determining its structure based on the initial value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_16

LANGUAGE: TypeScript
CODE:
```
import { reactive } from 'vue'

// inferred type: { title: string }
const book = reactive({ title: 'Vue 3 Guide' })
```

----------------------------------------

TITLE: Using computed() in Vue Composition API (Global)
DESCRIPTION: This JavaScript snippet shows how to integrate `computed()` within the `setup` function of a global Vue application created with `createApp`. It defines a `filteredTodos` computed ref that reactively filters `todos.value` based on `hideCompleted.value`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_4

LANGUAGE: js
CODE:
```
import { createApp, ref, computed } from 'vue'

createApp({
  setup() {
    const hideCompleted = ref(false)
    const todos = ref([
      /* ... */
    ])

    const filteredTodos = computed(() => {
      // return filtered todos based on
      // `todos.value` & `hideCompleted.value`
    })

    return {
      // ...
    }
  }
})
```

----------------------------------------

TITLE: Implementing `v-model` with Writable Computed Property (Options API)
DESCRIPTION: This snippet demonstrates an alternative way to implement `v-model` in a custom component using a writable computed property. The getter returns `modelValue`, and the setter emits `update:modelValue`, simplifying the template binding.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_14

LANGUAGE: vue
CODE:
```
<!-- CustomInput.vue -->
<script>
export default {
  props: ['modelValue'],
  emits: ['update:modelValue'],
  computed: {
    value: {
      get() {
        return this.modelValue
      },
      set(value) {
        this.$emit('update:modelValue', value)
      }
    }
  }
}
</script>

<template>
  <input v-model="value" />
</template>
```

----------------------------------------

TITLE: Scaffolding Vue Project with Bun
DESCRIPTION: This command uses Bun to execute `create-vue`, the official Vue project scaffolding tool, to quickly set up a new Vue project. It serves as another package manager option for initiating new Vue projects with Vite.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_3

LANGUAGE: sh
CODE:
```
$ bun create vue@latest
```

----------------------------------------

TITLE: Scaffolding Vue Project with Yarn
DESCRIPTION: This command uses Yarn to execute `create-vue`, the official Vue project scaffolding tool, to quickly set up a new Vue project. It provides specific commands for both Yarn Modern (v2+) and Yarn ^v4.11 for starting new Vue projects with Vite.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_2

LANGUAGE: sh
CODE:
```
# For Yarn Modern (v2+)
$ yarn create vue@latest

# For Yarn ^v4.11
$ yarn dlx create-vue@latest
```

----------------------------------------

TITLE: Refactored MyModal Template with Teleport
DESCRIPTION: This template snippet demonstrates refactoring the `MyModal` component to use `<Teleport>`. By wrapping the modal content in `<Teleport to="body">`, the modal's DOM element is rendered directly into the `<body>` tag, effectively bypassing any CSS constraints imposed by its original parent hierarchy.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_3

LANGUAGE: vue-html
CODE:
```
<button @click="open = true">Open Modal</button>

<Teleport to="body">
  <div v-if="open" class="modal">
    <p>Hello from the modal!</p>
    <button @click="open = false">Close</button>
  </div>
</Teleport>
```

----------------------------------------

TITLE: Basic Vue Single-File Component Structure
DESCRIPTION: This snippet illustrates the fundamental structure of a Vue SFC, comprising `<template>` for HTML markup, `<script>` for JavaScript logic, `<style>` for CSS styling, and an example of a custom block. It demonstrates how these blocks combine to define a complete component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<template>
  <div class="example">{{ msg }}</div>
</template>

<script>
export default {
  data() {
    return {
      msg: 'Hello world!'
    }
  }
}
</script>

<style>
.example {
  color: red;
}
</style>

<custom1>
  This could be e.g. documentation for the component.
</custom1>
```

----------------------------------------

TITLE: Watching a Data Property with Options API (JavaScript)
DESCRIPTION: This snippet shows how to use the `watch` option within Vue's Options API to observe changes to a component's `data` property. It defines a watcher for the `count` property, which executes a callback function logging the new count to the console whenever `count`'s value changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-10/description.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default {
  data() {
    return {
      count: 0
    }
  },
  watch: {
    count(newCount) {
      // yes, console.log() is a side effect
      console.log(`new count is: ${newCount}`)
    }
  }
}
```

----------------------------------------

TITLE: Providing Data at App Level in Vue
DESCRIPTION: This code demonstrates how to provide data at the application level using `app.provide()`. App-level provisions are accessible to all components rendered within the application, making them particularly useful for global configurations or when developing plugins.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { createApp } from 'vue'

const app = createApp({})

app.provide(/* key */ 'message', /* value */ 'hello!')
```

----------------------------------------

TITLE: Less Recommended Label Wrapping Pattern in Vue.js
DESCRIPTION: This snippet shows a less recommended pattern where the input field is wrapped directly by the label. While visually functional, explicitly linking labels via `for` and `id` attributes is generally better supported by assistive technologies for proper form control identification.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_7

LANGUAGE: vue-html
CODE:
```
<label>
  Name:
  <input type="text" name="name" id="name" v-model="name" />
</label>
```

----------------------------------------

TITLE: Using onCleanup Argument in Vue Composition API Watchers
DESCRIPTION: This snippet shows how to use the `onCleanup` function passed as an argument to `watch` and `watchEffect` callbacks in Vue Composition API. This function allows registering cleanup logic that runs when the watcher is invalidated, providing an alternative to `onWatcherCleanup` for versions prior to 3.5 or when not subject to synchronous constraints.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_21

LANGUAGE: js
CODE:
```
watch(id, (newId, oldId, onCleanup) => {
  // ...
  onCleanup(() => {
    // cleanup logic
  })
})

watchEffect((onCleanup) => {
  // ...
  onCleanup(() => {
    // cleanup logic
  })
})
```

----------------------------------------

TITLE: Iterating Object Values with v-for in Vue-HTML
DESCRIPTION: This Vue-HTML snippet demonstrates the basic usage of `v-for` to iterate over the values of an object. The `value` alias represents each property's value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_13

LANGUAGE: vue-html
CODE:
```
<ul>
  <li v-for="value in myObject">
    {{ value }}
  </li>
</ul>
```

----------------------------------------

TITLE: Receiving Default Scoped Slot Props in Vue.js
DESCRIPTION: This snippet shows how a parent component receives data from a default scoped slot using `v-slot`. The `slotProps` object contains the data passed by the child component, which can then be rendered within the slot content. This allows the parent to access child-provided data.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_23

LANGUAGE: vue-html
CODE:
```
<MyComponent v-slot="slotProps">
  {{ slotProps.text }} {{ slotProps.count }}
</MyComponent>
```

----------------------------------------

TITLE: Declaring Props and Emits (Runtime API) in Vue
DESCRIPTION: This snippet demonstrates the basic usage of defineProps and defineEmits with runtime options inside a Vue <script setup> block. These are compiler macros that do not require explicit imports and are processed during compilation, providing type inference based on the options provided.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_10

LANGUAGE: Vue
CODE:
```
<script setup>
const props = defineProps({
  foo: String
})

const emit = defineEmits(['change', 'delete'])
// setup code
</script>
```

----------------------------------------

TITLE: Declaring a Required Nullable Prop in Vue.js
DESCRIPTION: This snippet illustrates how to define a prop that is required but can accept `null` as a valid value in addition to another type (e.g., `String`). This is achieved by specifying an array of types including `null` for the prop's `type` property.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_43

LANGUAGE: JavaScript
CODE:
```
defineProps({
  id: {
    type: [String, null],
    required: true
  }
})
```

LANGUAGE: JavaScript
CODE:
```
export default {
  props: {
    id: {
      type: [String, null],
      required: true
    }
  }
}
```

----------------------------------------

TITLE: Expanded Form of `v-model` on Native Input (Vue)
DESCRIPTION: This snippet reveals how the Vue template compiler expands `v-model` on a native input element. It explicitly shows the `:value` prop binding and the `@input` event listener for two-way data synchronization.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_11

LANGUAGE: vue-html
CODE:
```
<input
  :value="searchText"
  @input="searchText = $event.target.value"
/>
```

----------------------------------------

TITLE: Iterating Object Values and Keys with v-for in Vue-HTML
DESCRIPTION: This Vue-HTML snippet shows how to access both the value and the key when iterating over an object with `v-for`. The `value` alias gets the property's value, and `key` gets its name.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_14

LANGUAGE: vue-html
CODE:
```
<li v-for="(value, key) in myObject">
  {{ key }}: {{ value }}
</li>
```

----------------------------------------

TITLE: Registering and Using a Component with Vue Options API
DESCRIPTION: This snippet demonstrates how to import and locally register a child component (ButtonCounter) using the Vue Options API. The component is then made available for use in the template via its registered key, allowing it to be rendered as a custom HTML tag.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_4

LANGUAGE: vue
CODE:
```
<script>
import ButtonCounter from './ButtonCounter.vue'

export default {
  components: {
    ButtonCounter
  }
}
</script>

<template>
  <h1>Here is a child component!</h1>
  <ButtonCounter />
</template>
```

----------------------------------------

TITLE: Using v-for on Template Tag in Vue-HTML
DESCRIPTION: This Vue-HTML snippet shows how to use the `<template>` tag with `v-for` to render a block of multiple elements. This is useful for grouping elements without introducing an extra wrapper DOM element.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_17

LANGUAGE: vue-html
CODE:
```
<ul>
  <template v-for="item in items">
    <li>{{ item.msg }}</li>
    <li class="divider" role="presentation"></li>
  </template>
</ul>
```

----------------------------------------

TITLE: Using Top-level `await` in Vue `<script setup>`
DESCRIPTION: This snippet shows how top-level `await` can be used directly within `<script setup>`, allowing for asynchronous operations like data fetching at the component's setup phase. The resulting code is compiled as `async setup()`, and the awaited expression preserves the component instance context. This feature typically requires `Suspense`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_28

LANGUAGE: Vue
CODE:
```
<script setup>
const post = await fetch(`/api/post/1`).then((r) => r.json())
</script>
```

----------------------------------------

TITLE: Defining a Vue.js Component with camelCase Props and Emits in JavaScript
DESCRIPTION: This JavaScript snippet defines a BlogPost component using camelCase for its props ('postTitle') and emits ('updatePost'). This is the standard naming convention within JavaScript for Vue components, which contrasts with the kebab-case required when using these components in in-DOM HTML templates.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_29

LANGUAGE: js
CODE:
```
const BlogPost = {
  props: ['postTitle'],
  emits: ['updatePost'],
  template: `
    <h3>{{ postTitle }}</h3>
  `
}
```

----------------------------------------

TITLE: Initializing Template Ref in Composition API (SFC)
DESCRIPTION: This JavaScript snippet shows how to declare and initialize a reactive reference (`ref`) in a Vue Single File Component (SFC) using the Composition API. The ref is initialized to `null` because the associated DOM element is not yet available when the `<script setup>` block executes. It will hold the reference to the DOM element after the component is mounted.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_1

LANGUAGE: js
CODE:
```
const pElementRef = ref(null)
```

----------------------------------------

TITLE: Passing Kebab-Case Props to Components - Vue HTML
DESCRIPTION: Shows the conventional way to pass a prop to a child component using kebab-case (`greeting-message`). This aligns with standard HTML attribute naming conventions for better readability.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_16

LANGUAGE: vue-html
CODE:
```
<MyComponent greeting-message="hello" />
```

----------------------------------------

TITLE: Declaring Template Ref in Vue HTML
DESCRIPTION: This snippet demonstrates how to declare a template reference on a DOM element using the special `ref` attribute in Vue's template syntax. The value of the `ref` attribute, 'input' in this case, serves as the identifier to access this specific element programmatically after the component is mounted.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<input ref="input">
```

----------------------------------------

TITLE: Iterating Object Values, Keys, and Index with v-for in Vue-HTML
DESCRIPTION: This Vue-HTML snippet demonstrates iterating over an object with `v-for`, accessing the value, key, and the iteration index. The `index` alias provides the zero-based index of the current iteration.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_15

LANGUAGE: vue-html
CODE:
```
<li v-for="(value, key, index) in myObject">
  {{ index }}. {{ key }}: {{ value }}
</li>
```

----------------------------------------

TITLE: Asynchronously Loading Vue.js Components - JavaScript
DESCRIPTION: This snippet demonstrates how to define and load a Vue.js component asynchronously using `defineAsyncComponent`. It imports `defineAsyncComponent` from 'vue' and `ReplLoading` for a loading state, then registers `ExampleRepl` to be loaded on demand, improving initial page load performance and providing a fallback UI during loading.
SOURCE: https://github.com/vuejs/docs/blob/main/src/examples/index.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { defineAsyncComponent } from 'vue'
import ReplLoading from '@theme/components/ReplLoading.vue'

export default {
  components: {
    ExampleRepl: defineAsyncComponent({
      loader: () => import('./ExampleRepl.vue'),
      loadingComponent: ReplLoading
    })
  }
}
```

----------------------------------------

TITLE: Configuring Post-Flush Watcher in Vue Options API
DESCRIPTION: This snippet shows how to configure a watcher in Vue Options API to flush its callback `post` DOM updates. By setting `flush: 'post'`, the watcher's handler will execute after Vue has updated the component's DOM, allowing access to the updated DOM state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_23

LANGUAGE: js
CODE:
```
export default {
  // ...
  watch: {
    key: {
      handler() {},
      flush: 'post'
    }
  }
}
```

----------------------------------------

TITLE: Using the Key Attribute with v-for in Vue.js
DESCRIPTION: This snippet illustrates the use of the `key` special attribute with `v-for`. Providing a unique `key` (e.g., `item.id`) helps Vue identify and reorder elements efficiently, improving performance and preventing unintended side effects during list updates.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_6

LANGUAGE: vue-html
CODE:
```
<div v-for="item in items" :key="item.id">
  {{ item.text }}
</div>
```

----------------------------------------

TITLE: Defining Vue Components with Options API using defineComponent (TypeScript)
DESCRIPTION: This snippet demonstrates how to use `defineComponent()` with the Options API to enable proper type inference for component properties (`props`), data, and methods. It ensures `this` context is correctly typed within component options, preventing `any` type assignments.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { defineComponent } from 'vue'

export default defineComponent({
  // type inference enabled
  props: {
    name: String,
    msg: { type: String, required: true }
  },
  data() {
    return {
      count: 1
    }
  },
  mounted() {
    this.name // type: string | undefined
    this.msg // type: string
    this.count // type: number
  }
})
```

----------------------------------------

TITLE: Using Prop as Initial Value for Local State in Vue Options API
DESCRIPTION: This snippet demonstrates how to use a prop (`initialCounter`) as the initial value for a local data property (`counter`) within the `data` option of a Vue component using the Options API. The local `counter` will be disconnected from future prop updates.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_36

LANGUAGE: js
CODE:
```
export default {
  props: ['initialCounter'],
  data() {
    return {
      // counter only uses this.initialCounter as the initial value;
      // it is disconnected from future prop updates.
      counter: this.initialCounter
    }
  }
}
```

----------------------------------------

TITLE: Demonstrating Computed Stability with Primitive Values in Vue.js
DESCRIPTION: This snippet illustrates the computed stability feature introduced in Vue 3.4, where effects are only triggered if the computed value changes. It shows how a computed property returning a primitive boolean value prevents unnecessary re-renders when its dependencies change but the computed result remains the same.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const count = ref(0)
const isEven = computed(() => count.value % 2 === 0)

watchEffect(() => console.log(isEven.value)) // true

// will not trigger new logs because the computed value stays `true`
count.value = 2
count.value = 4
```

----------------------------------------

TITLE: Declaring Data with Parent Message (Options API)
DESCRIPTION: This JavaScript snippet defines component data within the Options API, including a `parentMessage` string and an `items` array, which are accessible within the component's template for list rendering.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_4

LANGUAGE: js
CODE:
```
data() {
  return {
    parentMessage: 'Parent',
    items: [{ message: 'Foo' }, { message: 'Bar' }]
  }
}
```

----------------------------------------

TITLE: Defining Props with Simple Array (Bad Practice - Composition API) - Vue.js
DESCRIPTION: This snippet shows an incomplete prop definition using a simple array with `defineProps` in Vue.js Composition API. While acceptable for prototyping, it lacks type validation and documentation, making it prone to errors in committed code.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_5

LANGUAGE: js
CODE:
```
// This is only OK when prototyping
const props = defineProps(['status'])
```

----------------------------------------

TITLE: Registering and Retrieving Global Directive - JavaScript
DESCRIPTION: Demonstrates registering global custom directives using both an object definition and a function shorthand, and then retrieving a registered directive from the application instance.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
import { createApp } from 'vue'

const app = createApp({
  /* ... */
})

// register (object directive)
app.directive('myDirective', {
  /* custom directive hooks */
})

// register (function directive shorthand)
app.directive('myDirective', () => {
  /* ... */
})

// retrieve a registered directive
const myDirective = app.directive('myDirective')
```

----------------------------------------

TITLE: Good Example: Tightly Coupled Vue Components (Todo)
DESCRIPTION: This example illustrates a recommended naming convention for tightly coupled Vue components. `TodoListItem.vue` and `TodoListItemButton.vue` are prefixed with `TodoList` and `TodoListItem` respectively, clearly indicating their parent-child relationships and improving file organization.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_14

LANGUAGE: Vue
CODE:
```
components/
|- TodoList.vue
|- TodoListItem.vue
|- TodoListItemButton.vue
```

----------------------------------------

TITLE: Registering onErrorCaptured Hook in Vue.js (TypeScript)
DESCRIPTION: Registers a hook to capture errors propagating from a descendant component. It receives the error, the component instance that triggered it, and an information string about the error source. The hook can return `false` to stop error propagation, preventing further `errorCaptured` hooks or `app.config.errorHandler` from being invoked for that error.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
function onErrorCaptured(callback: ErrorCapturedHook): void

type ErrorCapturedHook = (
  err: unknown,
  instance: ComponentPublicInstance | null,
  info: string
) => boolean | void
```

----------------------------------------

TITLE: Applying Transition to Dynamic Components - Vue.js
DESCRIPTION: This snippet demonstrates how to apply a <Transition> component around a dynamic component in Vue.js. It uses the `name` prop for a 'fade' transition and `mode='out-in'` to ensure the outgoing component finishes its transition before the incoming one starts. This allows for smooth transitions when switching between different components dynamically.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_24

LANGUAGE: vue-html
CODE:
```
<Transition name="fade" mode="out-in">
  <component :is="activeComponent"></component>
</Transition>
```

----------------------------------------

TITLE: Creating a Semantic HTML Form with Vue.js
DESCRIPTION: This snippet demonstrates how to construct a semantic HTML form in Vue.js, utilizing v-for to dynamically render form items and v-model for two-way data binding. It also shows the use of autocomplete='on' on the form element to apply to all inputs, enhancing user experience for form completion.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_5

LANGUAGE: vue-html
CODE:
```
<form action="/dataCollectionLocation" method="post" autocomplete="on">
  <div v-for="item in formItems" :key="item.id" class="form-item">
    <label :for="item.id">{{ item.label }}: </label>
    <input
      :type="item.type"
      :id="item.id"
      :name="item.id"
      v-model="item.value"
    />
  </div>
  <button type="submit">Submit</button>
</form>
```

----------------------------------------

TITLE: Incorrect v-for and v-if Usage on Same Element in Vue-HTML
DESCRIPTION: This Vue-HTML snippet demonstrates an incorrect usage pattern where `v-if` and `v-for` are placed on the same element. Due to `v-if` having higher precedence, `todo` is not accessible, leading to an error.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_18

LANGUAGE: vue-html
CODE:
```
<!--
This will throw an error because property "todo"
is not defined on instance.
-->
<li v-for="todo in todos" v-if="!todo.isComplete">
  {{ todo.name }}
</li>
```

----------------------------------------

TITLE: Correctly Watching Reactive Object Property with Getter in Vue.js
DESCRIPTION: Shows the correct method to watch a specific property of a reactive object using a getter function. The getter ensures that `watch` reacts to changes in `obj.count` by returning its current value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_6

LANGUAGE: js
CODE:
```
// instead, use a getter:
watch(
  () => obj.count,
  (count) => {
    console.log(`Count is: ${count}`)
  }
)
```

----------------------------------------

TITLE: Emitting Event with Argument from Template in Vue.js
DESCRIPTION: This snippet shows how to emit a custom event and pass an argument along with it. When the button is clicked, it emits an event named 'increaseBy' and provides the value `1` as an argument, which can be accessed by the parent's event handler.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_5

LANGUAGE: Vue-HTML
CODE:
```
<button @click="$emit('increaseBy', 1)">
  Increase by 1
</button>
```

----------------------------------------

TITLE: Naming Base Components with 'V' Prefix (Good Practice)
DESCRIPTION: This snippet demonstrates the recommended practice of prefixing base component names with `V`. This convention groups them together alphabetically in editors, clearly identifies them as foundational UI elements, and prevents arbitrary naming for simple wrappers, improving project organization and consistency.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_11

LANGUAGE: Vue
CODE:
```
components/
|- VButton.vue
|- VTable.vue
|- VIcon.vue
```

----------------------------------------

TITLE: Managing Focus on Route Change (Vue Options API)
DESCRIPTION: This Vue Options API snippet demonstrates how to programmatically return focus to the top of the page after a route change. It uses a `watch` property on `$route` to call `focus()` on the `backToTop` template ref, ensuring keyboard users are returned to a logical starting point for navigation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_2

LANGUAGE: vue
CODE:
```
<script>
export default {
  watch: {
    $route() {
      this.$refs.backToTop.focus()
    }
  }
}
</script>
```

----------------------------------------

TITLE: Vue.js Composition API App with Import Map (Browser)
DESCRIPTION: This HTML snippet sets up a Vue.js application using the Composition API directly in the browser. It uses an import map to resolve 'vue' from a CDN and then creates a basic Vue app that displays a reactive message using the `ref` function within the `setup` option.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_11

LANGUAGE: html
CODE:
```
<script type="importmap">
  {
    "imports": {
      "vue": "https://unpkg.com/vue@3/dist/vue.esm-browser.js"
    }
  }
</script>

<div id="app">{{ message }}</div>

<script type="module">
  import { createApp, ref } from 'vue'

  createApp({
    setup() {
      const message = ref('Hello Vue!')
      return {
        message
      }
    }
  }).mount('#app')
</script>
```

----------------------------------------

TITLE: Watching a Getter Function in Vue.js
DESCRIPTION: Demonstrates how to use `watch()` with a getter function as the source. The callback receives the new and old values of the `state.count` property, triggering only when `state.count` changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_22

LANGUAGE: javascript
CODE:
```
const state = reactive({ count: 0 })
watch(
  () => state.count,
  (count, prevCount) => {
    /* ... */
  }
)
```

----------------------------------------

TITLE: Binding HTML ID with v-bind:id in Vue
DESCRIPTION: This snippet demonstrates the explicit use of the `v-bind` directive to dynamically bind an HTML attribute. The `id` attribute of the `div` element will be synchronized with the `dynamicId` property from the component's state, allowing for reactive updates.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-3/description.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<div v-bind:id="dynamicId"></div>
```

----------------------------------------

TITLE: Providing Values in Vue Composition API - Vue
DESCRIPTION: This Vue `<script setup>` example demonstrates how to use `provide()` to make values available to descendant components. It shows providing static values, reactive values using `ref`, and values with Symbol keys for type safety.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<script setup>
import { ref, provide } from 'vue'
import { countSymbol } from './injectionSymbols'

// provide static value
provide('path', '/project/')

// provide reactive value
const count = ref(0)
provide('count', count)

// provide with Symbol keys
provide(countSymbol, count)
</script>
```

----------------------------------------

TITLE: Registering onBeforeUnmount Hook in Vue.js (TypeScript)
DESCRIPTION: Registers a callback to be executed just before a Vue component instance is unmounted. When this hook is called, the component instance is still fully functional. This hook is not called during server-side rendering.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
function onBeforeUnmount(callback: () => void, target?: ComponentInternalInstance | null): void
```

----------------------------------------

TITLE: Providing Reactive Values with `provide()` in Vue Composition API
DESCRIPTION: This snippet illustrates how to provide reactive values, such as a `ref`, using `provide()`. Providing reactive values allows descendant components that inject this value to establish a reactive connection, meaning they will react to changes in the provided value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { ref, provide } from 'vue'

const count = ref(0)
provide('key', count)
```

----------------------------------------

TITLE: Using PascalCase for Component Import (Good)
DESCRIPTION: This snippet demonstrates the recommended PascalCase for importing components in JavaScript/JSX. This convention aligns with JavaScript's naming for classes and constructors, making component imports visually distinct and consistent.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_36

LANGUAGE: javascript
CODE:
```
import MyComponent from './MyComponent.vue'
```

----------------------------------------

TITLE: Displaying Computed Property in Template - Vue.js HTML
DESCRIPTION: This Vue template snippet demonstrates how to display both a reactive `ref` (`count`) and a `computed` property (`doubledCount`). The `doubledCount` will automatically update whenever `count` changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_7

LANGUAGE: HTML
CODE:
```
<template>
  <p>Count: {{ count }}</p>
  <p>Doubled Count: {{ doubledCount }}</p>
</template>
```

----------------------------------------

TITLE: Unsanitized Style Binding in Vue.js (vue-html)
DESCRIPTION: This snippet illustrates a style injection vulnerability where user-provided CSS is directly bound to an element's `style` attribute. Malicious users can exploit this to perform 'clickjacking' by styling elements transparently over sensitive areas, even if the URL is sanitized. Full control over CSS should be limited or sandboxed.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_9

LANGUAGE: vue-html
CODE:
```
<a
  :href="sanitizedUrl"
  :style="userProvidedStyles"
>
  click me
</a>
```

----------------------------------------

TITLE: Registering onBeforeUpdate Callback in Vue
DESCRIPTION: Registers a hook to be called right before the component is about to update its DOM tree due to a reactive state change. This hook can be used to access the DOM state before Vue updates it and it is safe to modify component state here. It is not called during server-side rendering.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_4

LANGUAGE: typescript
CODE:
```
function onBeforeUpdate(callback: () => void, target?: ComponentInternalInstance | null): void
```

----------------------------------------

TITLE: Injecting Provided Values in Vue Options API
DESCRIPTION: This JavaScript example shows how to inject a value provided at the application level using the Options API in a Vue component. The `inject` option is used to declare the 'message' key, making the provided value accessible via `this.message` within the component instance. The value is then logged in the `created` lifecycle hook.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
export default {
  inject: ['message'],
  created() {
    console.log(this.message) // 'hello'
  }
}
```

----------------------------------------

TITLE: Creating Vue App with In-DOM Template (JavaScript)
DESCRIPTION: Demonstrates creating a Vue application that utilizes an in-DOM template. The root component defines reactive data, and Vue automatically uses the content of the mounted element as its template, enabling dynamic behavior directly within the HTML.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_5

LANGUAGE: js
CODE:
```
import { createApp } from 'vue'

const app = createApp({
  data() {
    return {
      count: 0
    }
  }
})

app.mount('#app')
```

----------------------------------------

TITLE: Creating Vue App with ES Module Build (Options API)
DESCRIPTION: This snippet illustrates how to use Vue from a CDN as an ES module with the Options API. It imports 'createApp' directly from the ES module build and initializes a Vue application to display a message.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_7

LANGUAGE: html
CODE:
```
<div id="app">{{ message }}</div>

<script type="module">
  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'

  createApp({
    data() {
      return {
        message: 'Hello Vue!'
      }
    }
  }).mount('#app')
</script>
```

----------------------------------------

TITLE: Scoped CSS - Compiled Deep Selector
DESCRIPTION: Shows the compiled CSS output for a `:deep()` selector. The `data-v` attribute is applied to the parent selector, allowing the `.b` selector to target elements within child components without the `data-v` attribute.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_3

LANGUAGE: CSS
CODE:
```
.a[data-v-f3f3eg9] .b {
  /* ... */
}
```

----------------------------------------

TITLE: Defining Async Component (Composition API) in Vue.js
DESCRIPTION: Illustrates defining an async component directly within a parent component using the Composition API with `<script setup>`. This approach allows for direct use of the async component within the template of the defining component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_4

LANGUAGE: vue
CODE:
```
<script setup>
import { defineAsyncComponent } from 'vue'

const AdminPage = defineAsyncComponent(() =>
  import('./components/AdminPageComponent.vue')
)
</script>

<template>
  <AdminPage />
</template>
```

----------------------------------------

TITLE: Watching Template Ref Changes with watchEffect
DESCRIPTION: This JavaScript snippet demonstrates how to react to changes in a template ref's availability using `watchEffect` in Vue's Composition API. It checks if `input.value` is truthy (meaning the element is mounted and available) before attempting to interact with it, providing a robust way to handle cases where the ref might be `null` initially or become `null` due to conditional rendering (e.g., `v-if`).
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
watchEffect(() => {
  if (input.value) {
    input.value.focus()
  } else {
    // not mounted yet, or the element was unmounted (e.g. by v-if)
  }
})
```

----------------------------------------

TITLE: Registering onUnmounted Callback in Vue
DESCRIPTION: Registers a callback to be called after the component has been unmounted. This hook is used to clean up manually created side effects such as timers, DOM event listeners, or server connections. It is not called during server-side rendering.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_2

LANGUAGE: typescript
CODE:
```
function onUnmounted(callback: () => void, target?: ComponentInternalInstance | null): void
```

LANGUAGE: vue
CODE:
```
<script setup>
import { onMounted, onUnmounted } from 'vue'

let intervalId
onMounted(() => {
  intervalId = setInterval(() => {
    // ...
  })
})

onUnmounted(() => clearInterval(intervalId))
</script>
```

----------------------------------------

TITLE: Implementing Read-only and Writable Computed Properties in Vue.js (JavaScript)
DESCRIPTION: Provides a comprehensive example of declaring both read-only and writable computed properties within a Vue.js component. It illustrates how to define a getter for read-only properties and both a getter and a setter for writable properties, along with their usage and reactivity.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_8

LANGUAGE: js
CODE:
```
export default {
  data() {
    return { a: 1 }
  },
  computed: {
    // readonly
    aDouble() {
      return this.a * 2
    },
    // writable
    aPlus: {
      get() {
        return this.a + 1
      },
      set(v) {
        this.a = v - 1
      }
    }
  },
  created() {
    console.log(this.aDouble) // => 2
    console.log(this.aPlus) // => 2

    this.aPlus = 3
    console.log(this.a) // => 2
    console.log(this.aDouble) // => 4
  }
}
```

----------------------------------------

TITLE: Defining Reactive Object (Composition API) in Vue.js
DESCRIPTION: This snippet demonstrates how to define a reactive object using the `reactive` function in Vue's Composition API. This object can then be iterated over using `v-for`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_11

LANGUAGE: js
CODE:
```
const myObject = reactive({
  title: 'How to do lists in Vue',
  author: 'Jane Doe',
  publishedAt: '2016-04-10'
})
```

----------------------------------------

TITLE: Writable Computed Property in Vue Composition API
DESCRIPTION: This Vue snippet demonstrates a writable computed property `fullName` using the Composition API with `ref` and `computed`. It includes both a getter and a setter to manage `firstName` and `lastName` reactive references, allowing `fullName` to be both read from and assigned to.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_12

LANGUAGE: Vue
CODE:
```
<script setup>
import { ref, computed } from 'vue'

const firstName = ref('John')
const lastName = ref('Doe')

const fullName = computed({
  // getter
  get() {
    return firstName.value + ' ' + lastName.value
  },
  // setter
  set(newValue) {
    // Note: we are using destructuring assignment syntax here.
    [firstName.value, lastName.value] = newValue.split(' ')
  }
})
</script>
```

----------------------------------------

TITLE: Scaffolding Vue Project with pnpm
DESCRIPTION: This command uses pnpm to execute `create-vue`, the official Vue project scaffolding tool, to quickly set up a new Vue project. It offers an alternative to npm for initiating new Vue projects with Vite.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_1

LANGUAGE: sh
CODE:
```
$ pnpm create vue@latest
```

----------------------------------------

TITLE: Applying Enter/Leave Transitions with TransitionGroup (Vue.js HTML)
DESCRIPTION: This snippet demonstrates how to use <TransitionGroup> with a v-for loop to apply enter and leave transitions to list items. The name prop links to CSS transition classes, and tag specifies the wrapper element. Each item requires a unique key attribute.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#_snippet_0

LANGUAGE: Vue.js HTML
CODE:
```
<TransitionGroup name="list" tag="ul">
  <li v-for="item in items" :key="item">
    {{ item }}
  </li>
</TransitionGroup>
```

----------------------------------------

TITLE: Implementing Custom v-model Modifier Logic with defineModel Set Option in Vue Composition API
DESCRIPTION: Illustrates how to implement the `capitalize` modifier logic using the `set` option of `defineModel()` in Vue 3 Composition API. The `set` function conditionally transforms the incoming value based on the presence of the `capitalize` modifier before updating the model.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_26

LANGUAGE: vue
CODE:
```
<script setup>
const [model, modifiers] = defineModel({
  set(value) {
    if (modifiers.capitalize) {
      return value.charAt(0).toUpperCase() + value.slice(1)
    }
    return value
  }
})
</script>

<template>
  <input type="text" v-model="model" />
</template>
```

----------------------------------------

TITLE: Transforming `defineModel` Value with `set` and Modifiers in JavaScript
DESCRIPTION: This snippet illustrates how to use the `set` transformer option within `defineModel()` to modify the value when it's synced back to the parent, based on `v-model` modifiers. It provides an example of trimming the value if the `.trim` modifier is present, otherwise returning the value as-is.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_21

LANGUAGE: JavaScript
CODE:
```
const [modelValue, modelModifiers] = defineModel({
  // get() omitted as it is not needed here
  set(value) {
    // if the .trim modifier is used, return trimmed value
    if (modelModifiers.trim) {
      return value.trim()
    }
    // otherwise, return the value as-is
    return value
  }
})
```

----------------------------------------

TITLE: Conditional Text Rendering with Ternary Operator in Vue.js Template
DESCRIPTION: This snippet illustrates how to conditionally render different text strings based on a boolean property (`hideCompleted`) using a ternary operator within Vue.js template interpolation. It's a concise way to toggle UI labels based on application state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/_hint/App/template.html#_snippet_1

LANGUAGE: Vue.js Template
CODE:
```
{{ hideCompleted ? 'Show all' : 'Hide completed' }}
```

----------------------------------------

TITLE: Installing Vue Plugin - JavaScript
DESCRIPTION: Shows how to install a Vue plugin using the `app.use()` method. Plugins extend Vue's functionality and are typically imported from separate files.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
import { createApp } from 'vue'
import MyPlugin from './plugins/MyPlugin'

const app = createApp({
  /* ... */
})

app.use(MyPlugin)
```

----------------------------------------

TITLE: Styling Skip Link for Focus Visibility (CSS)
DESCRIPTION: This CSS snippet provides styles to hide the skip link by default and make it visible only when focused. It uses `opacity: 0` and `opacity: 1` on `:focus` to achieve this, ensuring the link is accessible without cluttering the visual layout until needed.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_1

LANGUAGE: css
CODE:
```
.skip-links {
  list-style: none;
}
.skip-link {
  white-space: nowrap;
  margin: 1em auto;
  top: 0;
  position: fixed;
  left: 50%;
  margin-left: -72px;
  opacity: 0;
}
.skip-link:focus {
  opacity: 1;
  background-color: white;
  padding: 0.5em;
  border: 1px solid black;
}
```

----------------------------------------

TITLE: Injecting Values in Vue Composition API - Vue
DESCRIPTION: This Vue `<script setup>` example illustrates various ways to use `inject()` to retrieve values provided by ancestor components. It demonstrates injecting static, reactive, and Symbol-keyed values, as well as using default values and factory functions for expensive defaults.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<script setup>
import { inject } from 'vue'
import { countSymbol } from './injectionSymbols'

// inject static value without default
const path = inject('path')

// inject reactive value
const count = inject('count')

// inject with Symbol keys
const count2 = inject(countSymbol)

// inject with default value
const bar = inject('path', '/default-path')

// inject with function default value
const fn = inject('function', () => {})

// inject with default value factory
const baz = inject('factory', () => new ExpensiveObject(), true)
</script>
```

----------------------------------------

TITLE: Centralizing State Mutation Logic in JavaScript Store
DESCRIPTION: This updated `store.js` snippet demonstrates a recommended pattern for state management. It defines an `increment()` method directly on the reactive `store` object, centralizing the logic for mutating the `count` property. This improves maintainability by encapsulating state changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_8

LANGUAGE: js
CODE:
```
// store.js
import { reactive } from 'vue'

export const store = reactive({
  count: 0,
  increment() {
    this.count++
  }
})
```

----------------------------------------

TITLE: Optimized Prop Passing in Vue v-for (active)
DESCRIPTION: This optimized Vue HTML snippet shows how to improve update performance by computing the `active` status directly in the parent component and passing it as a dedicated prop to each `ListItem`. This ensures that only the `ListItem` components whose `active` prop actually changes will re-render, significantly reducing unnecessary updates and improving reactivity performance.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_3

LANGUAGE: vue-html
CODE:
```
<ListItem
  v-for="item in list"
  :id="item.id"
  :active="item.id === activeId" />
```

----------------------------------------

TITLE: Annotating Complex Prop Types using PropType in Vue Options API (TypeScript)
DESCRIPTION: This example illustrates how to use the `PropType` utility type to define complex prop types, such as custom interfaces (e.g., `Book`) or function signatures. It demonstrates how `PropType` allows for more specific type annotations beyond basic constructor functions, enabling robust type checking for nested objects and callbacks.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { defineComponent } from 'vue'
import type { PropType } from 'vue'

interface Book {
  title: string
  author: string
  year: number
}

export default defineComponent({
  props: {
    book: {
      // provide more specific type to `Object`
      type: Object as PropType<Book>,
      required: true
    },
    // can also annotate functions
    callback: Function as PropType<(id: number) => void>
  },
  mounted() {
    this.book.title // string
    this.book.year // number

    // TS Error: argument of type 'string' is not
    // assignable to parameter of type 'number'
    this.callback?.('123')
  }
})
```

----------------------------------------

TITLE: Defining Async Component with Promise in Vue.js
DESCRIPTION: Demonstrates the basic usage of `defineAsyncComponent` which accepts a loader function returning a Promise. The Promise resolves with the component definition, allowing for custom loading logic.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_0

LANGUAGE: js
CODE:
```
import { defineAsyncComponent } from 'vue'

const AsyncComp = defineAsyncComponent(() => {
  return new Promise((resolve, reject) => {
    // ...load component from server
    resolve(/* loaded component */)
  })
})
// ... use `AsyncComp` like a normal component
```

----------------------------------------

TITLE: Declaring Emitted Events with Object Syntax and Payload Typing (Options API, TypeScript)
DESCRIPTION: This snippet demonstrates declaring events using the object syntax with the `emits` option in the Options API. It includes TypeScript type annotations for the 'submit' event's payload, allowing for runtime validation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_17

LANGUAGE: js
CODE:
```
export default {
  emits: {
    submit(payload: { email: string, password: string }) {
      // return `true` or `false` to indicate
      // validation pass / fail
    }
  }
}
```

----------------------------------------

TITLE: Conditional Text Display for Toggle in Vue.js Template
DESCRIPTION: This snippet illustrates conditional rendering of text based on the 'hideCompleted' boolean variable using a ternary operator within Vue.js mustache syntax. It dynamically changes the displayed text between 'Show all' and 'Hide completed' based on the variable's truthiness, typically for a toggle button.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/App/template.html#_snippet_1

LANGUAGE: Vue.js Template
CODE:
```
{{ hideCompleted ? 'Show all' : 'Hide completed' }}
```

----------------------------------------

TITLE: Initializing Array for Multiple Checkboxes in Vue.js (Options API)
DESCRIPTION: This JavaScript snippet, designed for Vue 2 or Vue 3's Options API, initializes the `checkedNames` data property as an empty array within the component's `data` function. This array will hold the values of multiple selected checkboxes, enabling binding a group of checkboxes to a single array.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_8

LANGUAGE: js
CODE:
```
export default {
  data() {
    return {
      checkedNames: []
    }
  }
}
```

----------------------------------------

TITLE: Declaring Component Options with `defineOptions` in Vue 3.3+
DESCRIPTION: This snippet demonstrates how to use the `defineOptions` macro within `<script setup>` to declare component options like `inheritAttrs` and custom options. This eliminates the need for a separate `<script>` block for such declarations. Note that options defined here are hoisted and cannot access non-constant local variables.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_24

LANGUAGE: Vue
CODE:
```
<script setup>
defineOptions({
  inheritAttrs: false,
  customOptions: {
    /* ... */
  }
})
</script>
```

----------------------------------------

TITLE: Using `ref` in `v-for` (Vue Options API)
DESCRIPTION: This snippet illustrates how to use `ref` inside a `v-for` loop with the Vue Options API. The `this.$refs.items` property will be an array containing the corresponding DOM elements after the component mounts. The `list` data property provides the items for the loop.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_13

LANGUAGE: Vue
CODE:
```
<script>
export default {
  data() {
    return {
      list: [
        /* ... */
      ]
    }
  },
  mounted() {
    console.log(this.$refs.items)
  }
}
</script>

<template>
  <ul>
    <li v-for="item in list" ref="items">
      {{ item }}
    </li>
  </ul>
</template>
```

----------------------------------------

TITLE: Iterating Components with `v-for` in Vue.js
DESCRIPTION: Shows how to use `v-for` directly on a custom component (`MyComponent`). It emphasizes the necessity of providing a unique `key` attribute (`item.id`) for each component instance to ensure proper tracking and reusability during list updates, similar to how it's used with native elements.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_22

LANGUAGE: vue-html
CODE:
```
<MyComponent v-for="item in items" :key="item.id" />
```

----------------------------------------

TITLE: Implementing Two-Way Binding with useModel() in JavaScript and TypeScript
DESCRIPTION: The `useModel()` helper powers `defineModel()` and can be used in non-SFC components or raw `setup()` functions to create a model ref for two-way binding. It requires the `props` object and the model key, with optional custom getter/setter functions. Users are responsible for declaring props and emits.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_2

LANGUAGE: typescript
CODE:
```
function useModel(
  props: Record<string, any>,
  key: string,
  options?: DefineModelOptions
): ModelRef

type DefineModelOptions<T = any> = {
  get?: (v: T) => any
  set?: (v: T) => any
}

type ModelRef<T, M extends PropertyKey = string, G = T, S = T> = Ref<G, S> & [
  ModelRef<T, M, G, S>,
  Record<M, true | undefined>
]
```

LANGUAGE: javascript
CODE:
```
export default {
  props: ['count'],
  emits: ['update:count'],
  setup(props) {
    const msg = useModel(props, 'count')
    msg.value = 1
  }
}
```

----------------------------------------

TITLE: Implementing Single Select with v-model in Vue.js HTML
DESCRIPTION: This snippet demonstrates how to create a single-selection dropdown using `v-model` in Vue.js. The `selected` data property will automatically update with the value of the chosen option. A disabled, empty option is included as a best practice for initial unselected states, especially on iOS.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_11

LANGUAGE: vue-html
CODE:
```
<div>Selected: {{ selected }}</div>

<select v-model="selected">
  <option disabled value="">Please select one</option>
  <option>A</option>
  <option>B</option>
  <option>C</option>
</select>
```

----------------------------------------

TITLE: Binding CSS with v-bind() using Vue Composition API (<script setup>)
DESCRIPTION: This example illustrates using `v-bind()` in conjunction with Vue's Composition API (`<script setup>`) to bind a CSS property to a reactive JavaScript expression. The `color` property nested within a `theme` ref is dynamically applied to the `<p>` element's color, showcasing support for expressions wrapped in quotes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_12

LANGUAGE: Vue
CODE:
```
<script setup>
import { ref } from 'vue'
const theme = ref({
    color: 'red',
})
</script>

<template>
  <p>hello</p>
</template>

<style scoped>
p {
  color: v-bind('theme.color');
}
</style>
```

----------------------------------------

TITLE: Defining Async Component Type Signature (TypeScript)
DESCRIPTION: This TypeScript type definition for `defineAsyncComponent` shows its two main forms: accepting a loader function or an options object for advanced control over loading behavior, including `loadingComponent`, `errorComponent`, `delay`, and `timeout`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
function defineAsyncComponent(
  source: AsyncComponentLoader | AsyncComponentOptions
): Component

type AsyncComponentLoader = () => Promise<Component>

interface AsyncComponentOptions {
  loader: AsyncComponentLoader
  loadingComponent?: Component
  errorComponent?: Component
  delay?: number
  timeout?: number
  suspensible?: boolean
  onError?: (
    error: Error,
    retry: () => void,
    fail: () => void,
    attempts: number
  ) => any
}
```

----------------------------------------

TITLE: Basic Element Transition with v-if in Vue.js
DESCRIPTION: This snippet demonstrates the most basic usage of the `<Transition>` component in Vue.js. It applies an enter/leave animation to a paragraph element (`<p>`) based on the `show` data property, which is toggled by a button click. The `v-if` directive conditionally renders the paragraph, triggering the transition.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<button @click="show = !show">Toggle</button>
<Transition>
  <p v-if="show">hello</p>
</Transition>
```

----------------------------------------

TITLE: Normalizing Values, Refs, or Getters to Raw Values (Vue 3.3+ TypeScript)
DESCRIPTION: Available in Vue 3.3+, `toValue()` normalizes an input that can be a plain value, a ref, or a getter function, returning its raw value. If the input is a getter, it will be invoked. This is particularly useful in composables for flexible argument handling.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
function toValue<T>(source: T | Ref<T> | (() => T)): T
```

LANGUAGE: JavaScript
CODE:
```
toValue(1) //       --> 1
toValue(ref(1)) //  --> 1
toValue(() => 1) // --> 1
```

LANGUAGE: TypeScript
CODE:
```
import type { MaybeRefOrGetter } from 'vue'

function useFeature(id: MaybeRefOrGetter<number>) {
  watch(() => toValue(id), id => {
    // react to id changes
  })
}

// this composable supports any of the following:
useFeature(1)
useFeature(ref(1))
useFeature(() => 1)
```

----------------------------------------

TITLE: Declaring Props with Object Syntax in Vue Options API
DESCRIPTION: This example demonstrates declaring props using the object syntax in the Vue Options API. This method allows specifying the expected type for each prop (e.g., `title` as `String`, `likes` as `Number`), which provides documentation and enables type validation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_3

LANGUAGE: js
CODE:
```
export default {
  props: {
    title: String,
    likes: Number
  }
}
```

----------------------------------------

TITLE: Accessing Slots and Attributes with `useSlots` and `useAttrs` in Vue
DESCRIPTION: This snippet shows how to import and use the `useSlots` and `useAttrs` helpers within `<script setup>`. These functions provide programmatic access to the component's slots and attributes objects, which are equivalent to `setupContext.slots` and `setupContext.attrs`. While often accessible directly in templates, these helpers are useful for programmatic access in rare cases or within composition API functions.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_26

LANGUAGE: Vue
CODE:
```
<script setup>
import { useSlots, useAttrs } from 'vue'

const slots = useSlots()
const attrs = useAttrs()
</script>
```

----------------------------------------

TITLE: Declaring Reactive State with `reactive()` in Vue.js
DESCRIPTION: This snippet demonstrates how to declare a reactive object using the `reactive()` API from Vue.js. It initializes a `state` object with a `count` property, making the object itself reactive for tracking changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_18

LANGUAGE: js
CODE:
```
import { reactive } from 'vue'

const state = reactive({ count: 0 })
```

----------------------------------------

TITLE: Locally Registering Components with Options API
DESCRIPTION: This Vue SFC demonstrates local component registration using the `components` option within the Options API. The imported `ComponentA` is listed in the `components` object, making it available only to the current component's template, which is beneficial for modularity and build optimization.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_6

LANGUAGE: Vue
CODE:
```
<script>
import ComponentA from './ComponentA.vue'

export default {
  components: {
    ComponentA
  }
}
</script>

<template>
  <ComponentA />
</template>
```

----------------------------------------

TITLE: Handling Specific KeyboardEvent.key in Vue.js
DESCRIPTION: This example shows how to use any valid KeyboardEvent.key value as a modifier by converting it to kebab-case. The onPageDown handler will only execute when the PageDown key is released, demonstrating direct key name usage.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_15

LANGUAGE: vue-html
CODE:
```
<input @keyup.page-down="onPageDown" />
```

----------------------------------------

TITLE: Dynamic Attribute Name Binding with v-bind in Vue.js
DESCRIPTION: This example illustrates how to bind an attribute where the attribute's name itself is dynamic, using square brackets `[]` around the attribute name to bind it to a variable `key` in Vue.js.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_10

LANGUAGE: vue-html
CODE:
```
<button v-bind:[key]="value"></button>
```

----------------------------------------

TITLE: Declaring Emitted Events with Pure Type Annotations (Composition API, TypeScript)
DESCRIPTION: This advanced example shows how to declare emitted events using pure type annotations with `defineEmits<>()` in TypeScript within `<script setup>`. This provides strong typing for event names and their arguments.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_16

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
const emit = defineEmits<{
  (e: 'change', id: number): void
  (e: 'update', value: string): void
}>()
</script>
```

----------------------------------------

TITLE: Nesting Suspense with RouterView, Transition, and KeepAlive (Vue.js)
DESCRIPTION: This snippet demonstrates the recommended nesting order for `<Suspense>`, `<Transition>`, `<KeepAlive>`, and `<RouterView>` components in a Vue.js application. It ensures correct behavior for dynamic, asynchronously loaded components, providing smooth transitions, caching, and proper fallback states during loading.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_3

LANGUAGE: vue-html
CODE:
```
<RouterView v-slot="{ Component }">
  <template v-if="Component">
    <Transition mode="out-in">
      <KeepAlive>
        <Suspense>
          <!-- main content -->
          <component :is="Component"></component>

          <!-- loading state -->
          <template #fallback>
            Loading...
          </template>
        </Suspense>
      </KeepAlive>
    </Transition>
  </template>
</RouterView>
```

----------------------------------------

TITLE: Combining Object and Array Syntax for Class Binding (Vue-HTML)
DESCRIPTION: This example demonstrates a concise way to handle multiple conditional classes within an array binding by embedding object syntax. The `activeClass` is conditionally applied based on `isActive` using an object, while `errorClass` is always applied.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_6

LANGUAGE: vue-html
CODE:
```
<div :class="[{ [activeClass]: isActive }, errorClass]"></div>
```

----------------------------------------

TITLE: Correct Mixing of Default and Named Scoped Slots in Vue.js
DESCRIPTION: This snippet demonstrates the correct way to mix default and named scoped slots. By using an explicit `<template #default='{ message }'>` for the default slot, the scope of its props is clearly defined, preventing ambiguity and ensuring proper compilation.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_30

LANGUAGE: vue-html
CODE:
```
<MyComponent>
  <!-- Use explicit default slot -->
  <template #default="{ message }">
    <p>{{ message }}</p>
  </template>

  <template #footer>
    <p>Here's some contact info</p>
  </template>
</MyComponent>
```

----------------------------------------

TITLE: Applying `capitalize` Modifier to `v-model:title` in Vue-HTML
DESCRIPTION: This Vue-HTML snippet demonstrates how to apply a `capitalize` modifier to a `v-model` binding with the `title` argument on a custom component. The `v-model:title.capitalize` syntax indicates that the `title` prop should be updated, and the `capitalize` modifier is active.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_30

LANGUAGE: vue-html
CODE:
```
<MyComponent v-model:title.capitalize="myText">
```

----------------------------------------

TITLE: Hydrating Vue.js Components on Visibility (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `hydrateOnVisible` with `defineAsyncComponent` to hydrate a Vue.js component when it becomes visible in the viewport, leveraging `IntersectionObserver` for performance.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_7

LANGUAGE: js
CODE:
```
import { defineAsyncComponent, hydrateOnVisible } from 'vue'

const AsyncComp = defineAsyncComponent({
  loader: () => import('./Comp.vue'),
  hydrate: hydrateOnVisible()
})
```

----------------------------------------

TITLE: Binding Single Checkbox in Vue.js (Vue HTML)
DESCRIPTION: This snippet demonstrates how to bind a single checkbox to a boolean data property (`checked`) using `v-model` in Vue.js. The label dynamically displays the current boolean state of the checkbox. This is suitable for toggling a single true/false value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_6

LANGUAGE: vue-html
CODE:
```
<input type="checkbox" id="checkbox" v-model="checked" />
<label for="checkbox">{{ checked }}</label>
```

----------------------------------------

TITLE: Emitting Custom Event from Options API Method in Vue.js
DESCRIPTION: This JavaScript snippet shows how to emit a custom event from a component's method within the Options API. The `submit` method calls `this.$emit('someEvent')` to trigger an event named 'someEvent', allowing parent components to react to this action.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
export default {
  methods: {
    submit() {
      this.$emit('someEvent')
    }
  }
}
```

----------------------------------------

TITLE: Defining created Lifecycle Hook in Vue.js Options API (TypeScript)
DESCRIPTION: This snippet defines the `created` lifecycle hook type. This hook is invoked after reactive data, computed properties, methods, and watchers have been set up, but before the mounting phase begins. The `$el` property is not yet available at this stage.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
interface ComponentOptions {
  created?(this: ComponentPublicInstance): void
}
```

----------------------------------------

TITLE: Declaring `defineModel` with `required` Option (Vue 3.4+)
DESCRIPTION: This JavaScript snippet demonstrates how to make a `v-model` prop required when using the `defineModel` macro in Vue 3.4+. It ensures the parent component must provide a value for this model.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_5

LANGUAGE: js
CODE:
```
const model = defineModel({ required: true })
```

----------------------------------------

TITLE: Rendering Slot Content in Child Component (Vue.js)
DESCRIPTION: This snippet shows how a child component renders the content passed from its parent via slots. The <slot/> or <slot></slot> element acts as an outlet in the child's template, where the parent-provided content will be injected and displayed.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/description.md#_snippet_1

LANGUAGE: vue-html
CODE:
```
<!-- in child template -->
<slot/>
```

LANGUAGE: vue-html
CODE:
```
<!-- in child template -->
<slot></slot>
```

----------------------------------------

TITLE: Safe Style Binding with Object Syntax in Vue.js (vue-html)
DESCRIPTION: This snippet demonstrates a safer approach to binding user-provided styles using Vue's object syntax. By explicitly defining which CSS properties users can control (e.g., `color`, `background`), developers can prevent arbitrary style injection, significantly reducing the risk of clickjacking while still allowing limited customization.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_11

LANGUAGE: vue-html
CODE:
```
<a
  :href="sanitizedUrl"
  :style="{
    color: userProvidedColor,
    background: userProvidedBackground
  }"
>
  click me
</a>
```

----------------------------------------

TITLE: Passing Dynamic Props to Child Component (HTML Context)
DESCRIPTION: This Vue-HTML snippet shows how a parent component passes a dynamic prop named `msg` to a `child-comp` using `v-bind` shorthand (`:msg`) in a standard HTML context. The `greeting` value from the parent will be bound to the `msg` prop of the child component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-12/description.md#_snippet_4

LANGUAGE: vue-html
CODE:
```
<child-comp :msg="greeting"></child-comp>
```

----------------------------------------

TITLE: Receiving Named Scoped Slot Props in Vue.js
DESCRIPTION: This snippet shows how to receive props from named scoped slots in a parent component. Each named slot (`#header`, `#default`, `#footer`) uses a `<template>` tag with `v-slot:name='slotProps'` (shorthand `#name='slotProps'`) to capture the data passed by the child component for that specific slot.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_26

LANGUAGE: vue-html
CODE:
```
<MyComponent>
  <template #header="headerProps">
    {{ headerProps }}
  </template>

  <template #default="defaultProps">
    {{ defaultProps }}
  </template>

  <template #footer="footerProps">
    {{ footerProps }}
  </template>
</MyComponent>
```

----------------------------------------

TITLE: Using Component with Additional Classes (Vue.js)
DESCRIPTION: This snippet demonstrates how to apply additional CSS classes (`baz` and `boo`) to a `MyComponent` instance. These classes will be merged with the component's existing root element classes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_8

LANGUAGE: vue-html
CODE:
```
<!-- when using the component -->
<MyComponent class="baz boo" />
```

----------------------------------------

TITLE: Using PascalCase for Global Component Registration (Good)
DESCRIPTION: This snippet demonstrates the recommended PascalCase for global component registration using `app.component`. This aligns with the general convention for component names in JavaScript and JSX, making it easier to distinguish components from HTML elements.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_34

LANGUAGE: javascript
CODE:
```
app.component('MyComponent', {
  // ...
})
```

----------------------------------------

TITLE: Cleaning Up Watcher Side Effects (Vue 3.5+)
DESCRIPTION: Introduced in Vue 3.5+, `onWatcherCleanup` provides a dedicated API for registering cleanup functions within a watcher's callback. This example shows how to use it to cancel a pending asynchronous request when the watched `id` changes, ensuring proper resource management.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_32

LANGUAGE: js
CODE:
```
import { onWatcherCleanup } from 'vue'

watch(id, async (newId) => {
  const { response, cancel } = doAsyncWork(newId)
  onWatcherCleanup(cancel)
  data.value = await response
})
```

----------------------------------------

TITLE: Injecting Plugin Provided Data (Composition API) (Vue)
DESCRIPTION: Shows how a component using the Composition API can inject data provided by a plugin using the `inject` function and the specified key ('i18n').
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_7

LANGUAGE: vue
CODE:
```
<script setup>
import { inject } from 'vue'

const i18n = inject('i18n')

console.log(i18n.greetings.hello)
</script>
```

----------------------------------------

TITLE: Applying Advanced Event Modifiers in Vue.js Templates
DESCRIPTION: This Vue HTML snippet showcases advanced event modifiers: '.capture' for event capturing phase handling, '.once' to trigger an event handler at most once, and '.passive' for performance optimization with scroll events, indicating that 'preventDefault()' will not be called. These mirror native 'addEventListener' options.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_13

LANGUAGE: vue-html
CODE:
```
<!-- use capture mode when adding the event listener     -->
<!-- i.e. an event targeting an inner element is handled -->
<!-- here before being handled by that element           -->
<div @click.capture="doThis">...</div>

<!-- the click event will be triggered at most once -->
<a @click.once="doThis"></a>

<!-- the scroll event's default behavior (scrolling) will happen -->
<!-- immediately, instead of waiting for `onScroll` to complete  -->
<!-- in case it contains `event.preventDefault()`                -->
<div @scroll.passive="onScroll">...</div>
```

----------------------------------------

TITLE: Displaying Conditional Validation Message in Vue.js Template
DESCRIPTION: This snippet demonstrates how to conditionally display a validation message in a Vue.js template using a ternary operator. The message 'Return date must be after departure date.' is shown only if the `canBook` property is false. This is useful for providing immediate user feedback on form validation without rendering an empty string when `canBook` is true.
SOURCE: https://github.com/vuejs/docs/blob/main/src/examples/src/flight-booker/App/template.html#_snippet_0

LANGUAGE: Vue.js Template
CODE:
```
{{ canBook ? '' : 'Return date must be after departure date.' }}
```

----------------------------------------

TITLE: Child Component `defineModel` with Default Value (Warning Example)
DESCRIPTION: This snippet illustrates a child component using `defineModel` with a default value. It highlights a potential de-synchronization issue if the parent component does not provide an initial value, leading to the child having a default while the parent's ref remains undefined.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_7

LANGUAGE: js
CODE:
```
const model = defineModel({ default: 1 })
```

----------------------------------------

TITLE: Handling Input Event in Composition API (JavaScript)
DESCRIPTION: This JavaScript snippet, demonstrating the Vue Composition API, defines the `onInput` function. Similar to the Options API, it receives the native DOM event `e` and updates the `text` reactive reference's value (`text.value`) with the input field's current value, facilitating two-way data binding.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/description.md#_snippet_2

LANGUAGE: js
CODE:
```
function onInput(e) {
  // a v-on handler receives the native DOM event
  // as the argument.
  text.value = e.target.value
}
```

----------------------------------------

TITLE: Defining mounted Lifecycle Hook in Vue.js Options API (TypeScript)
DESCRIPTION: This snippet defines the `mounted` lifecycle hook type. This hook is called after the component and all its synchronous child components have been mounted and its DOM tree has been inserted into the parent container. It's typically used for DOM-related side effects and is not called during server-side rendering.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
interface ComponentOptions {
  mounted?(this: ComponentPublicInstance): void
}
```

----------------------------------------

TITLE: Accessing Refs in Reactive Arrays and Collections (JavaScript)
DESCRIPTION: This example highlights an important distinction: `ref` values stored within reactive arrays or native collection types (like `Map`) are NOT automatically unwrapped. They must be accessed using the `.value` property.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
const books = reactive([ref('Vue 3 Guide')])
// need .value here
console.log(books[0].value)

const map = reactive(new Map([['count', ref(0)]]))
// need .value here
console.log(map.get('count').value)
```

----------------------------------------

TITLE: Implementing Basic Suspense Loading State in Vue.js
DESCRIPTION: This snippet illustrates the fundamental usage of the `<Suspense>` component with its `#default` and `#fallback` slots. The `#default` slot contains the component with async dependencies (`<Dashboard />`), while the `#fallback` slot provides a simple loading message displayed during the pending state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_2

LANGUAGE: vue-html
CODE:
```
<Suspense>
  <!-- component with nested async dependencies -->
  <Dashboard />

  <!-- loading state via #fallback slot -->
  <template #fallback>
    Loading...
  </template>
</Suspense>
```

----------------------------------------

TITLE: Declaring Complex Prop Types with Runtime `PropType` in Vue 3
DESCRIPTION: This snippet shows how to declare a prop with a complex type using the `PropType` utility type for runtime declaration in Vue 3. It's useful when you need runtime validation alongside TypeScript type checking, providing flexibility for prop definitions.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_8

LANGUAGE: TypeScript
CODE:
```
import type { PropType } from 'vue'

const props = defineProps({
  book: Object as PropType<Book>
})
```

----------------------------------------

TITLE: Caching Dynamic Components with KeepAlive in Vue.js HTML
DESCRIPTION: This Vue.js HTML snippet demonstrates wrapping a dynamic component with `<KeepAlive>`. This built-in component caches inactive component instances, preserving their state when switching between them, preventing re-creation and state loss.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_2

LANGUAGE: Vue-HTML
CODE:
```
<!-- Inactive components will be cached! -->
<KeepAlive>
  <component :is="activeComponent" />
</KeepAlive>
```

----------------------------------------

TITLE: Declaring Camel-Cased Props - Vue Composition API
DESCRIPTION: Illustrates the correct declaration of props using camelCase with `defineProps` in the Composition API, adhering to the recommended convention for JavaScript.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_44

LANGUAGE: JavaScript
CODE:
```
const props = defineProps({
  greetingText: String
})
```

----------------------------------------

TITLE: Iterating a Numerical Range with v-for in Vue-HTML
DESCRIPTION: This Vue-HTML snippet illustrates using `v-for` with an integer to repeat a template a specified number of times. The iteration variable `n` starts from `1` up to the given integer.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_16

LANGUAGE: vue-html
CODE:
```
<span v-for="n in 10">{{ n }}</span>
```

----------------------------------------

TITLE: List Rendering with Destructuring (Vue HTML)
DESCRIPTION: This Vue HTML snippet demonstrates using destructuring in `v-for` to directly extract properties like `message` from iterated items. It also shows how to combine destructuring with an `index` alias for more concise syntax.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_8

LANGUAGE: vue-html
CODE:
```
<li v-for="{ message } in items">
  {{ message }}
</li>

<!-- with index alias -->
<li v-for="({ message }, index) in items">
  {{ message }} {{ index }}
</li>
```

----------------------------------------

TITLE: Using Computed Property in Template (Options API)
DESCRIPTION: This Vue template snippet demonstrates how to display the value of the `publishedBooksMessage` computed property. It shows that computed properties can be bound in templates just like regular data properties, with Vue automatically handling reactivity and updates when dependencies change.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_4

LANGUAGE: vue-html
CODE:
```
<p>Has published books:</p>
<span>{{ publishedBooksMessage }}</span>
```

----------------------------------------

TITLE: Chaining Global Component Registrations
DESCRIPTION: This snippet illustrates the ability to chain multiple `app.component()` calls. This allows for concise registration of several components globally, making them accessible across the entire Vue application.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
app
  .component('ComponentA', ComponentA)
  .component('ComponentB', ComponentB)
  .component('ComponentC', ComponentC)
```

----------------------------------------

TITLE: Child Component `defineModel` with Default Value in JavaScript
DESCRIPTION: This snippet shows a child component's implementation using `defineModel` with a default value. It highlights a potential de-synchronization issue if the parent component does not provide a value for this prop, leading to the child's model having a default while the parent's ref remains undefined.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
// child component:
const model = defineModel({ default: 1 })
```

----------------------------------------

TITLE: Rendering Basic Vue App to String in Node.js
DESCRIPTION: This snippet demonstrates the most basic form of Vue SSR, rendering a simple Vue application instance to an HTML string using `renderToString` in a Node.js environment. It initializes a Vue app with a reactive counter and prints the resulting static HTML to the console. This serves as a foundational example for server-side rendering without a full web server.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_0

LANGUAGE: js
CODE:
```
// this runs in Node.js on the server.
import { createSSRApp } from 'vue'
// Vue's server-rendering API is exposed under `vue/server-renderer`.
import { renderToString } from 'vue/server-renderer'

const app = createSSRApp({
  data: () => ({ count: 1 }),
  template: `<button @click="count++">{{ count }}</button>`
})

renderToString(app).then((html) => {
  console.log(html)
})
```

----------------------------------------

TITLE: Fetching Data with Vue.js `watchEffect` and Automatic Tracking
DESCRIPTION: This snippet demonstrates `watchEffect` for data fetching, automatically tracking `todoId.value` as a dependency. Unlike `watch`, it doesn't require an explicit source and runs its callback immediately, simplifying reactive side effects by combining dependency tracking and execution.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_16

LANGUAGE: js
CODE:
```
watchEffect(async () => {
  const response = await fetch(
    `https://jsonplaceholder.typicode.com/todos/${todoId.value}`
  )
  data.value = await response.json()
})
```

----------------------------------------

TITLE: Injecting Optional Values with Default in Vue.js
DESCRIPTION: This example demonstrates how to make an injection optional by providing a default value using the object syntax for `inject`. If the key 'foo' is not provided by an ancestor, the specified default 'foo' will be used.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
const Child = {
  inject: {
    foo: { default: 'foo' }
  }
}
```

----------------------------------------

TITLE: Binding CSS with v-bind() using Vue Options API
DESCRIPTION: This snippet demonstrates how to use the `v-bind()` CSS function within a Vue Single File Component's `<style>` block to dynamically link a CSS property (`color`) to a component's data property (`color`). The `color` property is defined in the `data()` option and its value is reactively applied to the `.text` element's color.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_11

LANGUAGE: Vue
CODE:
```
<template>
  <div class="text">hello</div>
</template>

<script>
export default {
  data() {
    return {
      color: 'red'
    }
  }
}
</script>

<style>
.text {
  color: v-bind(color);
}
</style>
```

----------------------------------------

TITLE: Implementing v-model Argument in Vue.js Options API
DESCRIPTION: This Vue Options API snippet shows how to implement a `v-model` argument in a child component. It defines a `title` prop and an `update:title` event, manually linking them to an input element to achieve two-way data binding for the `v-model:title` usage.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_19

LANGUAGE: vue
CODE:
```
<!-- MyComponent.vue -->
<script>
export default {
  props: ['title'],
  emits: ['update:title']
}
</script>

<template>
  <input
    type="text"
    :value="title"
    @input="$emit('update:title', $event.target.value)"
  />
</template>
```

----------------------------------------

TITLE: Implementing State-driven Animations in Vue.js (Composition API)
DESCRIPTION: This JavaScript snippet demonstrates a state-driven animation using Vue's Composition API. It defines a reactive `x` ref to store the mouse's clientX coordinate. The `onMousemove` function updates `x.value` based on mouse movement, allowing for dynamic style binding to create interactive visual effects like color changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_4

LANGUAGE: js
CODE:
```
const x = ref(0)

function onMousemove(e) {
  x.value = e.clientX
}
```

----------------------------------------

TITLE: Emitting Input Event in Options API (Good Practice)
DESCRIPTION: This component correctly handles input by binding `value` to the prop and emitting an `input` event with the new value. This adheres to the 'props down, events up' pattern, allowing the parent to update the data reactively without direct prop mutation, ensuring a clear and predictable data flow.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_4

LANGUAGE: js
CODE:
```
app.component('TodoItem', {
  props: {
    todo: {
      type: Object,
      required: true
    }
  },

  emits: ['input'],

  template: `
    <input
      :value="todo.text"
      @input="$emit('input', $event.target.value)"
    >
  `
})
```

----------------------------------------

TITLE: Accessing CSS Modules with useCssModule API
DESCRIPTION: Shows how to use the `useCssModule` Composition API function to access CSS Modules within `setup()` or `<script setup>`. It demonstrates both default usage for `<style module>` and named usage for `<style module="classes">`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
import { useCssModule } from 'vue'

// inside setup() scope...
// default, returns classes for <style module>
useCssModule()

// named, returns classes for <style module="classes">
useCssModule('classes')
```

----------------------------------------

TITLE: Using watchEffect for Reactive Computations in Vue.js
DESCRIPTION: This example showcases Vue's `watchEffect` API, which automatically tracks its dependencies and re-runs its callback whenever those dependencies change. Here, `A2.value` is updated based on `A0.value` and `A1.value`; `watchEffect` ensures this computation re-executes when `A0` or `A1` are modified.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import { ref, watchEffect } from 'vue'

const A0 = ref(0)
const A1 = ref(1)
const A2 = ref()

watchEffect(() => {
  // tracks A0 and A1
  A2.value = A0.value + A1.value
})

// triggers the effect
A0.value = 2
```

----------------------------------------

TITLE: Demonstrating Invalid Component Placement in Vue.js Table
DESCRIPTION: This snippet illustrates an incorrect way to place a Vue component (`<blog-post-row>`) directly inside a native HTML `<table>` element. This setup violates HTML element placement rules, leading to the component being hoisted out as invalid content and causing rendering errors.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_33

LANGUAGE: vue-html
CODE:
```
<table>
  <blog-post-row></blog-post-row>
</table>
```

----------------------------------------

TITLE: Parent Component `v-model` with Undefined Ref in JavaScript
DESCRIPTION: This snippet demonstrates a parent component's setup using `ref()` without an initial value, intended for use with `v-model`. When paired with a child component that uses `defineModel` with a default, this can lead to de-synchronization where the parent's ref is undefined but the child's model has its default value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
// parent component:
const myRef = ref()
```

----------------------------------------

TITLE: Manual Two-Way Data Binding for Input in Vue.js
DESCRIPTION: This snippet demonstrates the manual implementation of two-way data binding for an HTML `<input>` element in Vue.js. It uses the `:value` prop to set the input's value and an `@input` event listener to update the `text` data property whenever the input changes, serving as a comparison to `v-model`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_1

LANGUAGE: Vue.js
CODE:
```
<input
  :value="text"
  @input="event => text = event.target.value">
```

----------------------------------------

TITLE: Watching Multiple Sources in Vue.js
DESCRIPTION: Shows how to watch an array of reactive sources (e.g., `fooRef`, `barRef`). The callback receives arrays containing the new and old values corresponding to each source in the input array, allowing for coordinated reactions to multiple dependencies.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_24

LANGUAGE: javascript
CODE:
```
watch([fooRef, barRef], ([foo, bar], [prevFoo, prevBar]) => {
  /* ... */
})
```

----------------------------------------

TITLE: Bad: Complex Price Calculation in Vue Options API
DESCRIPTION: This snippet demonstrates a complex computed property in Vue's Options API that calculates a final price by combining multiple steps (base price, discount) into a single function. This monolithic approach reduces readability and testability.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_55

LANGUAGE: js
CODE:
```
computed: {
  price() {
    const basePrice = this.manufactureCost / (1 - this.profitMargin)
    return (
      basePrice -
      basePrice * (this.discountPercent || 0)
    )
  }
}
```

----------------------------------------

TITLE: Updating v-for to Use Computed Property
DESCRIPTION: This diff snippet illustrates the change required in the `v-for` directive to render the `filteredTodos` computed property instead of the original `todos` array. This ensures that the list displayed is reactively filtered.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_5

LANGUAGE: diff
CODE:
```
- <li v-for="todo in todos">
+ <li v-for="todo in filteredTodos">
```

----------------------------------------

TITLE: Parent Component `v-model` Binding (Warning Example)
DESCRIPTION: This HTML snippet demonstrates binding an undefined parent `ref` to a child component using `v-model`. This specific usage, when the child has a `defineModel` default, can lead to data de-synchronization.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_9

LANGUAGE: html
CODE:
```
<Child v-model="myRef"></Child>
```

----------------------------------------

TITLE: Using Kebab-Case for Global Component Registration (Acceptable Alternative)
DESCRIPTION: This snippet shows an acceptable alternative for global component registration using `app.component` with kebab-case. This is suitable for simpler applications that primarily use in-DOM templates where kebab-case is mandatory, reducing the need for different casing conventions.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_35

LANGUAGE: javascript
CODE:
```
app.component('my-component', {
  // ...
})
```

----------------------------------------

TITLE: Asynchronously Loading Vue.js Tutorial REPL Component
DESCRIPTION: This snippet demonstrates how to asynchronously load a Vue.js component, `TutorialRepl`, using `defineAsyncComponent`. It specifies a `loader` function for dynamic import and a `loadingComponent` to show during the loading phase, optimizing initial page load performance.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/index.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { defineAsyncComponent } from 'vue'
import ReplLoading from '@theme/components/ReplLoading.vue'

export default {
  components: {
    TutorialRepl: defineAsyncComponent({
      loader: () => import('./TutorialRepl.vue'),
      loadingComponent: ReplLoading
    })
  }
}
```

----------------------------------------

TITLE: Good Practice: Class Selectors in Vue `scoped` Styles
DESCRIPTION: This snippet illustrates the recommended practice of using a class selector (`.btn-close`) within Vue.js `scoped` styles. This method is preferred over element selectors as it offers better performance and maintainability. Vue's style scoping works more efficiently with class-attribute selectors, leading to faster rendering and easier-to-manage stylesheets.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<template>
  <button class="btn btn-close">×</button>
</template>

<style scoped>
.btn-close {
  background-color: red;
}
</style>
```

----------------------------------------

TITLE: Invoking Method in Vue-HTML Template
DESCRIPTION: This snippet demonstrates how to invoke a method directly within a Vue.js template using mustache syntax. The method `calculateBooksMessage()` is called to display its return value.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_6

LANGUAGE: Vue-HTML
CODE:
```
<p>{{ calculateBooksMessage() }}</p>
```

----------------------------------------

TITLE: Using Custom CSS Classes for Vue Transitions with Animate.css - Vue.js HTML
DESCRIPTION: This snippet illustrates how to integrate Vue's <Transition> component with external CSS animation libraries like Animate.css. It uses the 'enter-active-class' and 'leave-active-class' props to directly apply Animate.css classes, overriding Vue's default class naming conventions. This requires Animate.css to be included on the page.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_8

LANGUAGE: vue-html
CODE:
```
<!-- assuming Animate.css is included on the page -->
<Transition
  name="custom-classes"
  enter-active-class="animate__animated animate__tada"
  leave-active-class="animate__animated animate__bounceOutRight"
>
  <p v-if="show">hello</p>
</Transition>
```

----------------------------------------

TITLE: Conditionally Caching Components with KeepAlive Include RegExp in Vue.js HTML
DESCRIPTION: This Vue.js HTML snippet demonstrates using the `include` prop with a regular expression to specify components for caching. Components whose names match the regex `/a|b/` will be cached by `<KeepAlive>`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_4

LANGUAGE: Vue-HTML
CODE:
```
<!-- regex (use `v-bind`) -->
<KeepAlive :include="/a|b/">
  <component :is="view" />
</KeepAlive>
```

----------------------------------------

TITLE: Implementing Component Methods in Vue.js (JavaScript)
DESCRIPTION: Illustrates how to declare and use methods within a Vue.js component. It shows a simple method that modifies component data and demonstrates its invocation from a lifecycle hook, emphasizing that `this` is automatically bound to the component instance.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_10

LANGUAGE: js
CODE:
```
export default {
  data() {
    return { a: 1 }
  },
  methods: {
    plus() {
      this.a++
    }
  },
  created() {
    this.plus()
    console.log(this.a) // => 2
  }
}
```

----------------------------------------

TITLE: Implementing Eager Watchers in Vue.js (Composition API)
DESCRIPTION: Shows how to create an eager watcher in the Composition API by passing `immediate: true` in the options object to `watch()`. The callback will execute immediately when the watcher is set up, and then again whenever the `source` changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_12

LANGUAGE: js
CODE:
```
watch(
  source,
  (newValue, oldValue) => {
    // executed immediately, then again when `source` changes
  },
  { immediate: true }
)
```

----------------------------------------

TITLE: Locally Registering Components with <script setup>
DESCRIPTION: This example shows local component registration using `<script setup>` in a Vue SFC. Components imported within `<script setup>` are automatically available in the template without explicit registration, promoting tree-shaking and explicit dependencies.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_4

LANGUAGE: Vue
CODE:
```
<script setup>
import ComponentA from './ComponentA.vue'
</script>

<template>
  <ComponentA />
</template>
```

----------------------------------------

TITLE: Accessing Declared Props in Composition API
DESCRIPTION: This JavaScript snippet illustrates how 'defineProps' returns an object containing all props passed to the component, allowing programmatic access to prop values like 'props.title' within the Composition API.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_10

LANGUAGE: js
CODE:
```
const props = defineProps(['title'])
console.log(props.title)
```

----------------------------------------

TITLE: Accessing Setup Context in Vue
DESCRIPTION: This example shows how to access the `context` object, the second argument passed to the `setup()` function. The context object provides access to non-reactive `attrs` (attributes), `slots`, `emit` (event emitter), and `expose` (public properties). While the context object itself can be destructured, `attrs` and `slots` should be accessed directly to reflect updates.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_3

LANGUAGE: js
CODE:
```
export default {
  setup(props, context) {
    // Attributes (Non-reactive object, equivalent to $attrs)
    console.log(context.attrs)

    // Slots (Non-reactive object, equivalent to $slots)
    console.log(context.slots)

    // Emit events (Function, equivalent to $emit)
    console.log(context.emit)

    // Expose public properties (Function)
    console.log(context.expose)
  }
}
```

----------------------------------------

TITLE: Defining CSS for Enter/Leave Transitions (CSS)
DESCRIPTION: These CSS rules define the transition behavior for elements entering and leaving a list managed by <TransitionGroup>. It sets a 0.5s ease transition for all properties and specifies initial/final states for opacity and transform to create a fade and slide effect.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#_snippet_1

LANGUAGE: CSS
CODE:
```
.list-enter-active,
.list-leave-active {
  transition: all 0.5s ease;
}
.list-enter-from,
.list-leave-to {
  opacity: 0;
  transform: translateX(30px);
}
```

----------------------------------------

TITLE: Injecting Values with Array Syntax in Vue.js
DESCRIPTION: This example demonstrates the basic usage of the `inject` option using an array of strings. The injected 'foo' value is accessed within the `created` lifecycle hook, showing how to consume provided values.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
export default {
  inject: ['foo'],
  created() {
    console.log(this.foo)
  }
}
```

----------------------------------------

TITLE: Implementing Counter Transition with Key Attribute (Composition API)
DESCRIPTION: This snippet demonstrates how to use the `key` attribute with a `Transition` component in Vue.js Composition API to force a re-render of a `<span>` element when its content (`count`) changes. This enables the `Transition` component to animate between two distinct elements instead of just updating the text node, ensuring the transition occurs. It uses `ref` for reactivity and `setInterval` to increment the counter.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_26

LANGUAGE: vue
CODE:
```
<script setup>
import { ref } from 'vue';
const count = ref(0);

setInterval(() => count.value++, 1000);
</script>

<template>
  <Transition>
    <span :key="count">{{ count }}</span>
  </Transition>
</template>
```

----------------------------------------

TITLE: Using `aria-hidden="true"` to Hide Content from Screen Readers (Vue.js)
DESCRIPTION: This example illustrates how to use the `aria-hidden="true"` attribute to hide specific content from assistive technologies, such as screen readers, while keeping it visually available. It's crucial not to use this attribute on focusable elements.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_17

LANGUAGE: vue-html
CODE:
```
<p>This is not hidden from screen readers.</p>
<p aria-hidden="true">This is hidden from screen readers.</p>
```

----------------------------------------

TITLE: Binding Styles for State-driven Animations in Vue.js Template
DESCRIPTION: This Vue HTML snippet demonstrates how to apply state-driven animations by binding a dynamic style to an element. It uses `@mousemove` to trigger the `onMousemove` method, which updates the `x` value, and then binds `backgroundColor` to an HSL color derived from `x`. This allows for interactive visual changes based on user input.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_6

LANGUAGE: vue-html
CODE:
```
<div
  @mousemove="onMousemove"
  :style="{ backgroundColor: `hsl(${x}, 80%, 50%)` }"
  class="movearea"
>
  <p>Move your mouse across this div...</p>
  <p>x: {{ x }}</p>
</div>
```

----------------------------------------

TITLE: Cleaning Up Stale Requests with onWatcherCleanup in Vue Composition API
DESCRIPTION: This snippet demonstrates how to use `onWatcherCleanup()` in Vue 3.5+ Composition API to abort stale asynchronous requests. An `AbortController` is used to manage the request, and its `abort()` method is called within the cleanup function, which executes when the watcher is invalidated or re-runs.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_19

LANGUAGE: js
CODE:
```
import { watch, onWatcherCleanup } from 'vue'

watch(id, (newId) => {
  const controller = new AbortController()

  fetch(`/api/${newId}`, { signal: controller.signal }).then(() => {
    // callback logic
  })

  onWatcherCleanup(() => {
    // abort stale request
    controller.abort()
  })
})
```

----------------------------------------

TITLE: Lazy Loading Vue Components with defineAsyncComponent
DESCRIPTION: This example illustrates how to combine Vue's `defineAsyncComponent` with dynamic `import()` to lazy load Vue components. A separate JavaScript chunk is created for `Foo.vue` and its dependencies, which is only fetched on demand when the asynchronous component is rendered on the page, optimizing the initial bundle size.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_1

LANGUAGE: js
CODE:
```
import { defineAsyncComponent } from 'vue'

// a separate chunk is created for Foo.vue and its dependencies.
// it is only fetched on demand when the async component is
// rendered on the page.
const Foo = defineAsyncComponent(() => import('./Foo.vue'))
```

----------------------------------------

TITLE: Defining a Basic Slot Outlet in a Vue Component Template (Vue HTML)
DESCRIPTION: This code defines the template for the <FancyButton> component, showcasing the <slot> element. The <slot> element acts as a 'slot outlet', indicating where any content passed from the parent component (as shown in the previous snippet) should be rendered within the button's structure. This enables the component to accept dynamic inner content while maintaining its own styling and structure.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_1

LANGUAGE: vue-html
CODE:
```
<button class="fancy-btn">
  <slot></slot> <!-- slot outlet -->
</button>
```

----------------------------------------

TITLE: Registering onUpdated Callback in Vue
DESCRIPTION: Registers a callback to be called after the component has updated its DOM tree due to a reactive state change. This hook is called after any DOM update and should not be used to mutate component state to avoid infinite update loops. It is not called during server-side rendering.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_1

LANGUAGE: typescript
CODE:
```
function onUpdated(callback: () => void, target?: ComponentInternalInstance | null): void
```

LANGUAGE: vue
CODE:
```
<script setup>
import { ref, onUpdated } from 'vue'

const count = ref(0)

onUpdated(() => {
  // text content should be the same as current `count.value`
  console.log(document.getElementById('count').textContent)
})
</script>

<template>
  <button id="count" @click="count++">{{ count }}</button>
</template>
```

----------------------------------------

TITLE: Using Multiple `v-model` Bindings with Modifiers in Vue-HTML
DESCRIPTION: This Vue-HTML example illustrates how to use multiple `v-model` bindings on a single component, each with a different argument and modifier. `v-model:first-name.capitalize` applies a `capitalize` modifier to the `first-name` prop, while `v-model:last-name.uppercase` applies an `uppercase` modifier to the `last-name` prop.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_32

LANGUAGE: vue-html
CODE:
```
<UserName
  v-model:first-name.capitalize="first"
  v-model:last-name.uppercase="last"
/>
```

----------------------------------------

TITLE: Declaring Component Props with Runtime Options in Vue `<script setup>`
DESCRIPTION: This snippet demonstrates how to declare component props using runtime options within a Vue `<script setup>` block. `defineProps()` infers types based on the provided object, where `foo` is a required string and `bar` is an optional number. This method is known as 'runtime declaration'.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
const props = defineProps({
  foo: { type: String, required: true },
  bar: Number
})

props.foo // string
props.bar // number | undefined
</script>
```

----------------------------------------

TITLE: Injecting Provided Values in Vue Composition API
DESCRIPTION: This JavaScript snippet illustrates how to inject a value provided at the application level using the Composition API within a Vue component. Inside the `setup()` function, `inject('message')` retrieves the value associated with the 'message' key, which was previously provided by the application instance. The retrieved value is then logged to the console.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
import { inject } from 'vue'

export default {
  setup() {
    console.log(inject('message')) // 'hello'
  }
}
```

----------------------------------------

TITLE: Client-Side Entry Point for Vue SSR Application (client.js)
DESCRIPTION: This snippet represents the client-side entry point for the Vue SSR application. It imports the universal `createApp` function from `app.js` and then mounts the created application to the DOM element with the ID `#app`. This process hydrates the server-rendered HTML, making the application interactive on the client.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_5

LANGUAGE: js
CODE:
```
// client.js
import { createApp } from './app.js'

createApp().mount('#app')
```

----------------------------------------

TITLE: Using a Getter Function with useFetch for Dynamic URL in Vue.js
DESCRIPTION: This example shows how to provide a getter function as the URL argument to `useFetch`. The getter function allows the URL to be dynamically computed based on reactive dependencies, such as component `props`. This ensures that the fetch operation re-runs whenever the underlying reactive data (e.g., `props.id`) changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
// re-fetch when props.id changes
const { data, error } = useFetch(() => `/posts/${props.id}`)
```

----------------------------------------

TITLE: Passing Static String Props - Vue HTML
DESCRIPTION: Illustrates passing a static string value directly to a prop (`title`) without `v-bind`. This is suitable for values that do not change and are known at compile time.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_17

LANGUAGE: vue-html
CODE:
```
<BlogPost title="My journey with Vue" />
```

----------------------------------------

TITLE: Binding Select Options to Non-String Values in Vue.js
DESCRIPTION: This example demonstrates `v-model`'s ability to bind non-string values, such as an object literal, to a select element. When the option is selected, the `selected` property will be set directly to the object `{ number: 123 }`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_20

LANGUAGE: Vue-HTML
CODE:
```
<select v-model="selected">
  <!-- inline object literal -->
  <option :value="{ number: 123 }">123</option>
</select>
```

----------------------------------------

TITLE: Explicit Deep Watching a Getter Returning Reactive Object in Vue.js
DESCRIPTION: Shows how to explicitly force a deep watcher when watching a getter that returns a reactive object. By adding `{ deep: true }` to the options, the watcher will react to nested mutations within `state.someObject`, even if the object reference remains the same.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_10

LANGUAGE: js
CODE:
```
watch(
  () => state.someObject,
  (newValue, oldValue) => {
    // Note: `newValue` will be equal to `oldValue` here
    // *unless* state.someObject has been replaced
  },
  { deep: true }
)
```

----------------------------------------

TITLE: Destructuring Scoped Slot Props in Vue.js
DESCRIPTION: This snippet demonstrates how to use destructuring with `v-slot` to directly access individual properties from the scoped slot's props object. This provides a cleaner and more concise way to use the data passed by the child component within the slot content.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_25

LANGUAGE: vue-html
CODE:
```
<MyComponent v-slot="{ text, count }">
  {{ text }} {{ count }}
</MyComponent>
```

----------------------------------------

TITLE: Conditionally Disabling Teleport in Vue.js
DESCRIPTION: This snippet demonstrates how to conditionally disable `<Teleport>` using the `disabled` prop. When `displayVideoInline` is true, the `<video>` content will remain in its original location instead of being moved to the `#popup` target.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_18

LANGUAGE: Vue HTML
CODE:
```
<Teleport to="#popup" :disabled="displayVideoInline">
  <video src="./my-movie.mp4">
</Teleport>
```

----------------------------------------

TITLE: Vue HTML Template for Watcher Example (Vue HTML)
DESCRIPTION: This Vue HTML template provides the user interface for the watcher example. It includes an input field bound to the `question` data property using `v-model`, which is disabled when `loading` is true. It also displays the `answer` property dynamically.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_1

LANGUAGE: vue-html
CODE:
```
<p>
  Ask a yes/no question:
  <input v-model="question" :disabled="loading" />
</p>
<p>{{ answer }}</p>
```

----------------------------------------

TITLE: Vue Custom Directive Lifecycle Hooks
DESCRIPTION: This JavaScript object outlines all available lifecycle hook functions for a Vue custom directive. These optional hooks allow developers to execute specific logic at various stages of an element's lifecycle, from its creation and mounting to updates and unmounting.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
const myDirective = {
  // called before bound element's attributes
  // or event listeners are applied
  created(el, binding, vnode) {
    // see below for details on arguments
  },
  // called right before the element is inserted into the DOM.
  beforeMount(el, binding, vnode) {},
  // called when the bound element's parent component
  // and all its children are mounted.
  mounted(el, binding, vnode) {},
  // called before the parent component is updated
  beforeUpdate(el, binding, vnode, prevVnode) {},
  // called after the parent component and
  // all of its children have updated
  updated(el, binding, vnode, prevVnode) {},
  // called before the parent component is unmounted
  beforeUnmount(el, binding, vnode) {},
  // called when the parent component is unmounted
  unmounted(el, binding, vnode) {}
}
```

----------------------------------------

TITLE: Testing Stepper Component with Vue Test Utils
DESCRIPTION: This snippet demonstrates how to test a Vue component using Vue Test Utils. It mounts the `Stepper` component with a `max` prop, asserts the initial value, simulates a click on the increment button, and then asserts the updated value, focusing on user interaction and DOM output.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const valueSelector = '[data-testid=stepper-value]'
const buttonSelector = '[data-testid=increment]'

const wrapper = mount(Stepper, {
  props: {
    max: 1
  }
})

expect(wrapper.find(valueSelector).text()).toContain('0')

await wrapper.find(buttonSelector).trigger('click')

expect(wrapper.find(valueSelector).text()).toContain('1')
```

----------------------------------------

TITLE: Explicitly Binding Fallthrough Attributes with v-bind (Vue-HTML)
DESCRIPTION: This snippet demonstrates how to explicitly apply fallthrough attributes to a specific inner element when `inheritAttrs: false` is set. By using `v-bind="$attrs"` on the target element (e.g., the `<button>`), all undeclared attributes are bound to it instead of the root `<div>`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_10

LANGUAGE: vue-html
CODE:
```
<div class="btn-wrapper">
  <button class="btn" v-bind="$attrs">Click Me</button>
</div>
```

----------------------------------------

TITLE: Implementing Increment Function (Composition API - Setup Method) in Vue.js
DESCRIPTION: This JavaScript snippet demonstrates the Composition API's `setup()` method for defining reactive state and functions. It uses `ref` for `count` and an `increment` function, returning both to make them accessible in the template. This pattern is used when integrating the Composition API without `<script setup>` or in scenarios where the `setup` function is explicitly defined.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_5

LANGUAGE: js
CODE:
```
setup() {
  const count = ref(0)

  function increment(e) {
    // update component state
    count.value++
  }

  return {
    count,
    increment
  }
}
```

----------------------------------------

TITLE: Defining a Basic Vue.js Component (JavaScript)
DESCRIPTION: This snippet demonstrates how to define a simple Vue.js component using the Options API. It includes a `data` property for reactive state and a `template` property for rendering the component's structure. This is a foundational step for building reusable UI elements in Vue.js applications.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/App/template.html#_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  data() {
    return {
      message: 'Hello Vue!'
    }
  },
  template: `<div>{{ message }}</div>`
}
```

----------------------------------------

TITLE: Declaring CamelCase Props (Composition API) - JavaScript
DESCRIPTION: Defines a prop with a camelCase name (`greetingMessage`) using the Composition API's `defineProps`. This convention avoids quotes for property keys and allows direct referencing in templates.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_13

LANGUAGE: js
CODE:
```
defineProps({
  greetingMessage: String
})
```

----------------------------------------

TITLE: Passing Dynamic Array Props - Vue HTML
DESCRIPTION: Demonstrates dynamically assigning an array prop (`comment-ids`) to the value of a JavaScript variable (`post.commentIds`). This allows the array prop to be reactive.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_26

LANGUAGE: vue-html
CODE:
```
<!-- Dynamically assign to the value of a variable. -->
<BlogPost :comment-ids="post.commentIds" />
```

----------------------------------------

TITLE: Defining Untyped Event Handler in Vue.js
DESCRIPTION: This snippet demonstrates an event handler where the `event` argument implicitly has an `any` type. This can lead to TypeScript errors when strict type checking is enabled and is not recommended for production applications.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_6

LANGUAGE: Vue
CODE:
```
<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  methods: {
    handleChange(event) {
      // `event` implicitly has `any` type
      console.log(event.target.value)
    }
  }
})
</script>

<template>
  <input type="text" @change="handleChange" />
</template>
```

----------------------------------------

TITLE: Deep Reactivity with Nested Objects in Vue Options API
DESCRIPTION: This code demonstrates Vue's deep reactivity in the Options API. Changes to deeply nested objects or arrays within the `data` property, such as `this.obj.nested.count` or `this.obj.arr`, are automatically detected and trigger DOM updates, ensuring the UI remains synchronized with the state.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
export default {
  data() {
    return {
      obj: {
        nested: { count: 0 },
        arr: ['foo', 'bar']
      }
    }
  },
  methods: {
    mutateDeeply() {
      // these will work as expected.
      this.obj.nested.count++
      this.obj.arr.push('baz')
    }
  }
}
```

----------------------------------------

TITLE: Typing Native DOM Event Handlers in Vue.js
DESCRIPTION: This example shows how to explicitly type the `event` argument in a Vue.js event handler using the `Event` interface. It also demonstrates using a type assertion (`as HTMLInputElement`) to correctly access properties like `value` on `event.target`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import { defineComponent } from 'vue'

export default defineComponent({
  methods: {
    handleChange(event: Event) {
      console.log((event.target as HTMLInputElement).value)
    }
  }
})
```

----------------------------------------

TITLE: Deep Reactivity and Nested Proxies in Vue.js
DESCRIPTION: This JavaScript snippet highlights Vue's deep reactivity with `reactive()`. When a plain object (`raw`) is assigned as a nested property to a reactive proxy, Vue automatically converts the nested object into its own proxy, meaning `proxy.nested` will not be strictly equal to `raw`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_22

LANGUAGE: js
CODE:
```
const proxy = reactive({})

const raw = {}
proxy.nested = raw

console.log(proxy.nested === raw) // false
```

----------------------------------------

TITLE: Creating a Readonly Proxy with readonly() (JavaScript)
DESCRIPTION: This example shows how `readonly()` creates an immutable proxy from a reactive object. While mutations to the original object still trigger watchers on the copy, direct attempts to modify the `readonly` copy will fail and issue a warning.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
const original = reactive({ count: 0 })

const copy = readonly(original)

watchEffect(() => {
  // works for reactivity tracking
  console.log(copy.count)
})

// mutating original will trigger watchers relying on the copy
original.count++

// mutating the copy will fail and result in a warning
copy.count++ // warning!
```

----------------------------------------

TITLE: Basic CSS Modules Usage in Vue
DESCRIPTION: Demonstrates the basic usage of CSS Modules in a Vue SFC by adding the `module` attribute to a `<style>` tag. The component can then access the hashed class names via the `$style` object, ensuring unique class names and preventing collisions.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_7

LANGUAGE: Vue
CODE:
```
<template>
  <p :class="$style.red">This should be red</p>
</template>

<style module>
.red {
  color: red;
}
</style>
```

----------------------------------------

TITLE: Declaring and Typing Component Emits in Vue Options API (TypeScript)
DESCRIPTION: This example demonstrates how to declare and type emitted events using the object syntax of the `emits` option. It shows how to specify the expected payload type for an event (`addBook`) and highlights that calling non-declared or incorrectly typed events will result in a TypeScript error, enforcing strict event contracts.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { defineComponent } from 'vue'

export default defineComponent({
  emits: {
    addBook(payload: { bookName: string }) {
      // perform runtime validation
      return payload.bookName.length > 0
    }
  },
  methods: {
    onSubmit() {
      this.$emit('addBook', {
        bookName: 123 // Type error!
      })

      this.$emit('non-declared-event') // Type error!
    }
  }
})
```

----------------------------------------

TITLE: Globally Registering Async Component in Vue.js
DESCRIPTION: Shows how to globally register an async component using `app.component()`. This makes the component available throughout the application without explicit imports in every parent component.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_2

LANGUAGE: js
CODE:
```
app.component('MyComponent', defineAsyncComponent(() =>
  import('./components/MyComponent.vue')
))
```

----------------------------------------

TITLE: Writable Computed Property in Vue Options API
DESCRIPTION: This JavaScript snippet shows how to create a writable computed property `fullName` in Vue Options API by providing both a `get` (getter) and a `set` (setter) function. The getter concatenates `firstName` and `lastName`, while the setter updates them by splitting the `newValue`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
export default {
  data() {
    return {
      firstName: 'John',
      lastName: 'Doe'
    }
  },
  computed: {
    fullName: {
      // getter
      get() {
        return this.firstName + ' ' + this.lastName
      },
      // setter
      set(newValue) {
        // Note: we are using destructuring assignment syntax here.
        [this.firstName, this.lastName] = newValue.split(' ')
      }
    }
  }
}
```

----------------------------------------

TITLE: Accessing Fallthrough Attributes in Template (Vue-HTML)
DESCRIPTION: This snippet shows how to display fallthrough attributes directly within a Vue template using the `$attrs` object. The `$attrs` object contains all attributes passed to the component that are not declared as props or emits, such as `class`, `style`, and `v-on` listeners.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_8

LANGUAGE: vue-html
CODE:
```
<span>Fallthrough attributes: {{ $attrs }}</span>
```

----------------------------------------

TITLE: Simple Element Transition with v-if - Vue HTML
DESCRIPTION: This example demonstrates applying a basic transition effect to a single `div` element using the `<Transition>` component. The `v-if` directive controls the presence of the `div`, triggering the transition when its value changes.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_2

LANGUAGE: vue-html
CODE:
```
<Transition>
    <div v-if="ok">toggled content</div>
  </Transition>
```

----------------------------------------

TITLE: Applying Class-based Animations in Vue.js Template
DESCRIPTION: This Vue HTML snippet demonstrates how to conditionally apply a CSS class (`shake`) to a `div` element based on the `disabled` state. It includes a button that triggers the `warnDisabled` method and a span that conditionally displays a message when disabled, enabling class-based animations for elements within the DOM.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_2

LANGUAGE: vue-html
CODE:
```
<div :class="{ shake: disabled }">
  <button @click="warnDisabled">Click me</button>
  <span v-if="disabled">This feature is disabled!</span>
</div>
```

----------------------------------------

TITLE: Binding Checkbox Values with `true-value` and `false-value` in Vue.js
DESCRIPTION: This snippet demonstrates how to use `v-model` with `true-value` and `false-value` attributes on a checkbox input. The `toggle` property will be set to 'yes' when checked and 'no' when unchecked, providing explicit string values instead of boolean.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_17

LANGUAGE: Vue-HTML
CODE:
```
<input
  type="checkbox"
  v-model="toggle"
  true-value="yes"
  false-value="no" />
```

----------------------------------------

TITLE: Using a Debounced Ref in a Vue Component
DESCRIPTION: This Vue Single File Component snippet illustrates how to integrate the `useDebouncedRef` custom ref. It imports the custom ref and binds it to an input element using `v-model`, showcasing how the debounced behavior affects user input.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_6

LANGUAGE: vue
CODE:
```
<script setup>
import { useDebouncedRef } from './debouncedRef'
const text = useDebouncedRef('hello')
</script>

<template>
  <input v-model="text" />
</template>
```

----------------------------------------

TITLE: Binding Inline Styles with Object Syntax (Vue.js)
DESCRIPTION: This snippet demonstrates binding inline styles to a `div` element using an object literal with the `:style` directive. It dynamically sets `color` and `fontSize` based on reactive data properties, appending 'px' to the font size.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_17

LANGUAGE: vue-html
CODE:
```
<div :style="{ color: activeColor, fontSize: fontSize + 'px' }"></div>
```

----------------------------------------

TITLE: Basic Usage Example of toRefs() in JavaScript
DESCRIPTION: Demonstrates the fundamental usage of `toRefs()` by converting a reactive object's properties into individual refs. This example illustrates the 'linking' behavior, where modifications to either the original reactive property or its corresponding ref are mutually reflected, preserving reactivity.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const state = reactive({
  foo: 1,
  bar: 2
})

const stateAsRefs = toRefs(state)
/*
Type of stateAsRefs: {
  foo: Ref<number>,
  bar: Ref<number>
}
*/

// The ref and the original property is "linked"
state.foo++
console.log(stateAsRefs.foo.value) // 2

stateAsRefs.foo.value++
console.log(state.foo) // 3
```

----------------------------------------

TITLE: Listening to Event with Inline Arrow Function in Vue.js
DESCRIPTION: This example demonstrates listening to a custom event that passes an argument using an inline arrow function. The `(n) => count += n` function directly receives the argument `n` emitted by `MyButton` and updates the `count` reactive property.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_6

LANGUAGE: Vue-HTML
CODE:
```
<MyButton @increase-by="(n) => count += n" />
```

----------------------------------------

TITLE: Displaying Injected Data in Template - Vue.js HTML
DESCRIPTION: This Vue template snippet displays the `message` that has been `inject`ed into the component. This demonstrates how data provided by an ancestor component can be consumed and rendered in a descendant's template.
SOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/_hint/App/template.html#_snippet_15

LANGUAGE: HTML
CODE:
```
<template>
  <p>Injected message: {{ message }}</p>
</template>
```

----------------------------------------

TITLE: Using a Boolean Prop in Vue.js Templates
DESCRIPTION: Illustrates how to use a boolean prop (`disabled`) in a Vue.js component template. The prop can be passed as a simple attribute (e.g., `<MyComponent disabled />`) which casts to `true`, or omitted entirely (e.g., `<MyComponent />`) which casts to `false`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_45

LANGUAGE: Vue HTML
CODE:
```
<!-- equivalent of passing :disabled="true" -->
<MyComponent disabled />

<!-- equivalent of passing :disabled="false" -->
<MyComponent />
```

----------------------------------------

TITLE: Dynamic Component Transition with Mode and Appear - Vue HTML
DESCRIPTION: Shows how to apply transitions to a dynamic component using `<Transition>`. It utilizes the `name` prop for CSS class generation, `mode='out-in'` for sequential transitions, and `appear` to animate on initial render.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_4

LANGUAGE: vue-html
CODE:
```
<Transition name="fade" mode="out-in" appear>
    <component :is="view"></component>
  </Transition>
```

----------------------------------------

TITLE: Defining Named Slots in Vue Component Template
DESCRIPTION: This Vue-HTML template demonstrates how to define named slots within a component using the `name` attribute on the `<slot>` element. It includes a 'header' slot, a default slot (unnamed), and a 'footer' slot, allowing specific content injection points.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_13

LANGUAGE: vue-html
CODE:
```
<div class="container">
  <header>
    <slot name="header"></slot>
  </header>
  <main>
    <slot></slot>
  </main>
  <footer>
    <slot name="footer"></slot>
  </footer>
</div>
```

----------------------------------------

TITLE: Defining Temperature Converter UI with HTML and Vue.js Directives
DESCRIPTION: This HTML snippet defines the user interface for the temperature converter. It includes two input fields, one for Celsius and one for Fahrenheit, both bound using Vue.js's `v-model.number` directive to ensure two-way data binding with numeric values.
SOURCE: https://github.com/vuejs/docs/blob/main/src/examples/src/temperature-converter/description.txt#_snippet_1

LANGUAGE: HTML
CODE:
```
<div id="temp">
  <input type="number" v-model.number="celsius"> Celsius
  <input type="number" v-model.number="fahrenheit"> Fahrenheit
</div>
```

----------------------------------------

TITLE: Shallow Watching a Getter Returning Reactive Object in Vue.js
DESCRIPTION: Illustrates that watching a getter function that returns a reactive object is shallow by default. The watcher callback will only trigger if the getter returns a *different* object reference, not on nested mutations within the returned object.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_9

LANGUAGE: js
CODE:
```
watch(
  () => state.someObject,
  () => {
    // fires only when state.someObject is replaced
  }
)
```

----------------------------------------

TITLE: Installing Plugin with Options (JavaScript)
DESCRIPTION: Shows how to import a plugin and install it using `app.use()`, passing a configuration object (like translation keys) as the second argument.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_5

LANGUAGE: js
CODE:
```
import i18nPlugin from './plugins/i18n'

app.use(i18nPlugin, {
  greetings: {
    hello: 'Bonjour!'
  }
})
```

----------------------------------------

TITLE: Accessing Native Event in Vue.js Inline Handlers
DESCRIPTION: This Vue HTML snippet illustrates two ways to access the native DOM event object in an inline handler. The first uses the special '$event' variable, and the second uses an inline arrow function to explicitly pass the 'event' object to the 'warn' method. This is useful when 'event.preventDefault()' or 'event.stopPropagation()' is needed.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_9

LANGUAGE: vue-html
CODE:
```
<!-- using $event special variable -->
<button @click="warn('Form cannot be submitted yet.', $event)">
  Submit
</button>

<!-- using inline arrow function -->
<button @click="(event) => warn('Form cannot be submitted yet.', event)">
  Submit
</button>
```

----------------------------------------

TITLE: Transitioning List Items with TransitionGroup - Vue HTML
DESCRIPTION: This example shows how to use `<TransitionGroup>` to apply animated transitions to a list of elements rendered with `v-for`. It specifies a `tag` of `ul` for the wrapper and a `name` of `slide` for generating CSS classes, requiring each list item to have a unique `key`.
SOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_7

LANGUAGE: vue-html
CODE:
```
<TransitionGroup tag="ul" name="slide">
    <li v-for="item in items" :key="item.id">
      {{ item.text }}
    </li>
  </TransitionGroup>
```

----------------------------------------

TITLE: Vue Component Template Forwarding Attributes to Nested Component
DESCRIPTION: This snippet illustrates a `<MyButton>` component whose template renders another component, `<BaseButton>`, as its root. Any fallthrough attributes received by `<MyButton>` will be automatically forwarded to `<BaseButton>` for inheritance.
SOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_6

LANGUAGE: vue-html
CODE:
```
<!-- template of <MyButton/> that simply renders another component -->
<BaseButton />
```

----------------------------------------

TITLE: Avoiding Abbreviated Component Names - Vue File Naming
DESCRIPTION: Demonstrates the use of abbreviated component names for Vue files, which can reduce clarity and readability. This practice is discouraged in favor of full, descriptive names.
SOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_38

LANGUAGE: Vue File Naming
CODE:
```
components/
|- SdSettings.vue
|- UProfOpts.vue
```